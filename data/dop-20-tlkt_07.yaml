- en: Chapter 7. Implementation of the Deployment Pipeline – Intermediate Stages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章 部署管道的实现 – 中间阶段
- en: 'We could not complete the basic implementation of the deployment pipeline without
    the production server being set up. We didn''t need much. At the moment, Docker
    is our only prerequisite for the deployment and that gave us a good excuse to
    make a side trip into the world of configuration management. Now, with the Ansible
    playbook that will set up our prod server, we can continue where we left and deploy
    the container to the production server:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有设置生产服务器，我们无法完成部署管道的基本实现。我们不需要太多。此时，Docker 是我们部署的唯一前提条件，这也为我们提供了一个很好的机会，深入了解配置管理的世界。现在，借助将设置我们的生产服务器的
    Ansible playbook，我们可以继续之前的工作并将容器部署到生产服务器：
- en: Checkout the code - Done
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出代码 - 完成
- en: Run pre-deployment tests - Done
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行部署前测试 - 完成
- en: Compile and/or package the code - Done
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译和/或打包代码 - 完成
- en: Build the container - Done
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建容器 - 完成
- en: Push the container to the registry - Done
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器推送到注册表 - 完成
- en: Deploy the container to the production server - Pending
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器部署到生产服务器 - 待处理
- en: Integrate the container - Pending
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集成容器 - 待处理
- en: Run post-deployment tests - Pending
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行部署后测试 - 待处理
- en: Push the tests container to the registry - Pending![Implementation of the Deployment
    Pipeline – Intermediate Stages](img/B05848_07_01.jpg)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试容器推送到注册表 - 待处理！[部署管道的实现 – 中间阶段](img/B05848_07_01.jpg)
- en: Figure 7-1 – The initial stages of the deployment pipeline with Docker
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7-1 – 使用 Docker 部署管道的初始阶段
- en: We are missing only four steps from the manual deployment pipeline.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仅缺少手动部署管道中的四个步骤。
- en: Deploying Containers to the Production Server
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将容器部署到生产服务器
- en: 'Let''s create and configure VMs we''ll use throughout this chapter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建并配置本章中将使用的虚拟机：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first command brought up the `cd` and `prod` VMs while the second got us
    inside the `cd` VM. Finally, the last command configured the `prod` VM.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令启动了`cd`和`prod`虚拟机，第二个命令让我们进入`cd`虚拟机。最后，第三个命令配置了`prod`虚拟机。
- en: 'Now that the production server is properly configured, we can deploy the `books-ms`
    container. Even though we don''t have is pulled to the destination server, we
    already pushed it to the Docker registry in the `cd` node (that maps into the
    host directory) and can retrieve it from there. What we do not have, however,
    is the Docker Compose configuration that specifies how the container should be
    run. I prefer keeping everything related to a service in the same repository and
    `**docker-compose.yml*` is no exception. We can retrieve it GitHub:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在生产服务器已正确配置，我们可以部署`books-ms`容器了。尽管我们还没有将其拉取到目标服务器，但我们已经将它推送到了`cd`节点的 Docker
    注册表（该节点映射到主机目录）并可以从那里获取。然而，我们缺少的是 Docker Compose 配置文件，该文件指定了如何运行容器。我更倾向于将与服务相关的所有内容保存在同一个仓库中，`**docker-compose.yml**`也不例外。我们可以从
    GitHub 获取它：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the `docker-compo` `se.yml` downloaded, let us take a quick look at it
    (targets that won''t be used in this chapter have been excluded):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下载了`docker-compo` `se.yml`后，我们来快速查看一下它（本章中不使用的目标已被排除）：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `base` target contains the base definition of our container. The next target
    (`app`) is extending the `base` service allowing us to avoid duplicating the definitions.
    By extending services, we can override arguments or add new ones. The `app` target
    will run the container we stored in the registry on the `cd` server and is linked
    to the third target that represent the database required by the service. You might
    notice that we changed the way ports are specified. In the `docker-compose-d`
    `ev.yml` we had two numbers separated by a colon (`8080:8080`). The first one
    was the port Docker would expose to the host while the second one is the internal
    port used by the server inside the container. The `docker-compose.yml` is a bit
    different and has only the internal port set. The reason behind that is the elimination
    of potential conflicts. While in the development environment we tend to run only
    a small number of services (those we need at the moment), in production we might
    run tens, hundreds, or even thousands of them at the same time. Having predefined
    ports can easily result in conflicts. If two of them are using the same port,
    the result will be a failure. For that reason, we'll let Docker expose a random
    port to the host.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`base` 目标包含我们容器的基础定义。下一个目标（`app`）是扩展了 `base` 服务，避免了定义的重复。通过扩展服务，我们可以覆盖参数或添加新参数。`app`
    目标将运行我们存储在 `cd` 服务器上的注册表中的容器，并且与第三个目标相链接，该目标代表服务所需的数据库。你可能会注意到我们改变了端口的指定方式。在 `docker-compose-d`
    的 `ev.yml` 文件中，我们有两个用冒号分隔的数字（`8080:8080`）。第一个是 Docker 会暴露给主机的端口，而第二个是容器内服务器使用的内部端口。`docker-compose.yml`
    有点不同，只有内部端口被设置。这样做的原因是为了消除潜在的冲突。在开发环境中，我们倾向于只运行少量的服务（当前需要的那些），但在生产环境中，我们可能会同时运行数十、数百甚至数千个服务。预定义端口容易导致冲突。如果其中两个使用相同的端口，结果将是失败。因此，我们将让
    Docker 为主机暴露一个随机端口。'
- en: 'Let us run the Docker Compose `app` target:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行 Docker Compose 的 `app` 目标：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We exported the `DOCKER_HOST` variable that tells local Docker client to send
    commands to the remote one located on the `prod` node and port `2375`. The second
    command run the Docker Compose target `app`. Since `DOCKER_HOST` is pointing to
    the remote host, the `app` target and linked container `db` were deployed to the
    `prod` server. We did not even have to enter the destination server. The deployment
    was done remotely.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导出了 `DOCKER_HOST` 变量，这告诉本地 Docker 客户端将命令发送到位于 `prod` 节点和端口 `2375` 上的远程 Docker。第二个命令运行了
    Docker Compose 的 `app` 目标。由于 `DOCKER_HOST` 指向远程主机，`app` 目标和链接的容器 `db` 被部署到 `prod`
    服务器。我们甚至不需要进入目标服务器，部署是远程完成的。
- en: 'For security reasons, the ability to invoke remote Docker API is disabled by
    default. However, one of the Ansible playbook tasks was to change that behaviour
    by modifying the `/etc/default/docker` configuration file. Its content is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全考虑，默认情况下禁用了调用远程 Docker API 的功能。不过，Ansible playbook 的一个任务是通过修改 `/etc/default/docker`
    配置文件来改变这一行为。其内容如下：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `--insecure-registry` allows Docker to pull images from our private registry
    located in the `cd` node (`10.100.198.200`). The `-H` argument tells Docker to
    listen to remote requests from any address (`0.0.0.0`) on the port `2375`. Please
    note that in the real production environment, we would need to be much more restrictive
    and allow only trusted addresses to access the remote Docker API.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`--insecure-registry` 允许 Docker 从我们位于 `cd` 节点（`10.100.198.200`）的私有注册表中拉取镜像。`-H`
    参数告诉 Docker 在端口 `2375` 上监听来自任何地址（`0.0.0.0`）的远程请求。请注意，在实际的生产环境中，我们需要更加严格，仅允许受信任的地址访问远程
    Docker API。'
- en: 'We can confirm that both containers are indeed running on the `prod` VM by
    executing another remote call:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行另一个远程调用来确认这两个容器确实运行在 `prod` 虚拟机上：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since Docker assigned a random port to the service's internal port `8080`, we
    need to find it out. That can be done with the `inspect` command.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Docker 为服务的内部端口 `8080` 分配了一个随机端口，我们需要找出它。可以通过 `inspect` 命令来完成这项工作。
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The part of the output that interests us should be similar to the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的输出部分应类似于以下内容：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The original output is much bigger than this and it contains all the info we
    might (or might not) need. What we are interested in right now is the `NetworkSettings.Ports`
    section that, in my case, gives us `HostPort 32770` mapped to the internal port
    `8080`. We can do better than that and use the `--format` argument:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 原始输出比这大得多，包含了我们可能（或不可能）需要的所有信息。目前我们感兴趣的是`NetworkSettings.Ports`部分，在我的例子中，它给出了将`HostPort
    32770`映射到内部端口`8080`的信息。我们可以做得更好，使用`--format`参数：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Do not get scared by the `--format` value syntax. It uses Go's `text/template`
    format and indeed can be a bit daunting. The good news is that we'll use much
    better ways to do this once we get to [Chapter 8](ch08.html "Chapter 8. Service
    Discovery – The Key to Distributed Services"), *Service Discovery – The Key to
    Distributed Services* chapter. This is only the temporary workaround.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不要被`--format`值的语法吓到。它使用了Go的`text/template`格式，确实可能让人有些畏惧。好消息是，一旦我们进入[第8章](ch08.html
    "第8章. 服务发现 – 分布式服务的关键")，*服务发现 – 分布式服务的关键*章节时，我们将使用更好的方法。这个只是一个临时的变通方法。
- en: 'We got our port and stored it to the `PORT` variable. Now we can repeat `curl`
    commands we already got familiar with and confirm that the service is running
    and is connected to the DB:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经得到了端口并将其存储到了`PORT`变量中。现在我们可以重复已经熟悉的`curl`命令，确认服务正在运行并且已连接到数据库：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the last command is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令的输出如下：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As before, when we run the same command in the development environment, we inserted
    three books to the database and confirmed that they can be retrieved from the
    database. However, this is not an efficient way of verifying whether the service
    was deployed correctly. We can do better than that and run the integration tests.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前一样，当我们在开发环境中运行相同的命令时，我们将三本书插入数据库，并确认它们可以从数据库中检索出来。然而，这不是验证服务是否正确部署的高效方式。我们可以做得更好，运行集成测试。
- en: The important thing to note is that we have not even entered into the `prod`
    node. All the deployment commands were done through the remote Docker API.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们甚至没有进入`prod`节点。所有的部署命令都是通过远程Docker API完成的。
- en: Docker UI
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker UI
- en: This might be a good opportunity to introduce a nice open source project DockerUI.
    It is defined as part of the *docker* Ansible role so it is running on all servers
    where we configure Docker. We can, for example, see the instance running on the
    `prod` node by opening `http://10.100` `.198.201:9000` from any browser.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一个很好的机会来介绍一个不错的开源项目DockerUI。它是作为*docker* Ansible角色的一部分定义的，因此它会在我们配置Docker的所有服务器上运行。我们可以，例如，通过在任何浏览器中打开`http://10.100.198.201:9000`来查看在`prod`节点上运行的实例。
- en: 'Please note that all IPs created through Vagrant are set to be private, meaning
    that they can be accessed only from the host machine. If that happens to be your
    laptop, you should not have a problem to open the DockerUI address in your browser.
    On the other hand, if you are running the examples on one of your corporate servers,
    please make sure that you can access it''s desktop and that a browser is installed.
    If you need to access that server remotely, please try one of remote desktop solutions
    like VNC:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通过Vagrant创建的所有IP都是私有的，意味着只能从主机机器访问。如果那恰好是你的笔记本电脑，你应该不会遇到问题，能够在浏览器中打开DockerUI地址。另一方面，如果你在公司服务器之一上运行示例，请确保你可以访问它的桌面，并且已安装浏览器。如果你需要远程访问该服务器，请尝试使用VNC等远程桌面解决方案：
- en: '![Docker UI](img/B05848_07_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Docker UI](img/B05848_07_02.jpg)'
- en: Figure 7-2 – DockerUI dashboard screen
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7-2 – DockerUI 仪表盘屏幕
- en: While it is much more efficient to operate containers through CLI, the DockerUI
    provides a very useful way to gain a general overview of the system and details
    related to each container, network, and images. It true usefulness can be seen
    when a big number of containers is running in a cluster. It is very lightweight
    so it won't use much of your resources.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通过CLI操作容器要高效得多，但DockerUI提供了一种非常有用的方式，可以获得系统的总体概览以及每个容器、网络和镜像的相关细节。当集群中运行大量容器时，它的真正用途会显现出来。它非常轻量，不会占用太多资源。
- en: Unless specified otherwise, you'll find it running on each VM we set up.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，否则你会发现它在我们设置的每个虚拟机上运行。
- en: The Checklist
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查清单
- en: 'Before we move on, let''s see where we are with our basic implementation of
    the deployment pipeline:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们看看部署管道的基本实现进展如何：
- en: Checkout the code - Done
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出代码 - 完成
- en: Run pre-deployment tests - Done
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行部署前测试 - 完成
- en: Compile and/or package the code - Done
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译和/或打包代码 - 完成
- en: Build the container - Done
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建容器 - 完成
- en: Push the container to the registry - Done
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器推送到镜像仓库 - 完成
- en: Deploy the container to the production server - Done
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器部署到生产服务器 - 完成
- en: Integrate the container - Pending
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集成容器 - 待完成
- en: Run post-deployment tests - Pending
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行部署后测试 - 待完成
- en: Push the tests container to the registry - Pending![The Checklist](img/B05848_07_03.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试容器推送到镜像仓库 - 待完成![检查清单](img/B05848_07_03.jpg)
- en: Figure 7-3 – The intermediate stages of the deployment pipeline with Docker
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7-3 – 使用 Docker 部署管道的中间阶段
- en: Please note that, unlike the steps we did in the previous chapter, the deployment
    was performed in the production environment through remote Docker API. If we deployed
    the second release, we would have a period which neither the old nor the new release
    were operational. One would need to be stopped while the other would require some
    time to be brought up. No matter whether this period was short or not, we would
    have *down-time* that, in itself, would prevent us from moving towards *continues
    deployment*. All we'll do for now is take a note of this problem. Later on, we'll
    explore the *blue-green deployment* procedure that will help us overcome this
    issue and proceed towards the quest for zero-downtime deployments.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与我们在上一章所做的步骤不同，这次的部署是在生产环境中通过远程 Docker API 进行的。如果我们部署的是第二个版本，那么在一段时间内，旧版本和新版本都无法运行。一个需要停止，而另一个则需要一些时间才能启动。无论这段时间是否短暂，我们都会经历*停机时间*，这本身就会阻碍我们向*持续部署*的目标迈进。现在我们只需要记下这个问题，稍后我们将探索*蓝绿部署*流程，帮助我们克服这个问题，继续朝着零停机时间部署的目标前进。
- en: We're making progress and only three tasks are left on the checklist. However,
    the application is not yet integrated and, therefore, we cannot run integration
    tests. In order to proceed, there are two more concepts we need to explore; *service
    discovery* and *reverse proxy*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在取得进展，检查清单上只剩下三项任务。然而，应用程序尚未集成，因此我们无法运行集成测试。为了继续进行，我们需要探索两个概念：*服务发现*和*反向代理*。
- en: We'll use a new set of virtual machines while experimenting with service discovery
    tools, so let us save some resources and destroy the VMs we're running. We'll
    create those that we need in the next chapter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在实验服务发现工具时使用一组新的虚拟机，因此，让我们节省一些资源并销毁当前正在运行的虚拟机。我们将在下一章创建所需的虚拟机。
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
