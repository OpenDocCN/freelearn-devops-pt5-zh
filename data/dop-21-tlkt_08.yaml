- en: Using Docker Stack and Compose YAML Files to Deploy Swarm Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker Stack 和 Compose YAML 文件来部署 Swarm 服务
- en: Copy and paste is a design error.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 复制和粘贴是一个设计错误。
- en: –David Parnas
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: –David Parnas
- en: The most common question I receive during my Docker-related talks and workshops
    is usually related to Swarm and Compose.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我进行与 Docker 相关的讲座和研讨会时，最常见的问题通常与 Swarm 和 Compose 有关。
- en: '*Someone*: How can I use Docker Compose with Docker Swarm?'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*某人*: 我如何在 Docker Swarm 中使用 Docker Compose？'
- en: '*Me*: You can''t! You can convert your Compose files into a Bundle that does
    not support all Swarm features. If you want to use Swarm to its fullest, be prepared
    for `docker service create` commands that contain a never ending list of arguments.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*我*: 你不能！你可以将你的 Compose 文件转换为一个不支持所有 Swarm 特性的 Bundle。如果你想充分利用 Swarm，请准备好使用包含无尽参数列表的
    `docker service create` 命令。'
- en: Such an answer was usually followed with disappointment. Docker Compose showed
    us the advantages of specifying everything in a YAML file as opposed to trying
    to remember all the arguments we have to pass to docker commands. It allowed us
    to store service definitions in a repository thus providing a reproducible and
    well-documented process for managing them. Docker Compose replaced bash scripts,
    and we loved it. Then, Docker v1.12 came along and put a difficult choice in front
    of us. Should we adopt Swarm and discard Compose? Since summer 2016, Swarm and
    Compose were not in love anymore. It was a painful divorce.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的回答通常会伴随着失望。Docker Compose 向我们展示了将所有内容指定在 YAML 文件中的优点，而不是试图记住我们需要传递给 Docker
    命令的所有参数。它使我们能够将服务定义存储在仓库中，从而提供了一个可重复且文档化的管理流程。Docker Compose 替代了 bash 脚本，我们喜欢它。然后，Docker
    v1.12 发布了，并且给我们提出了一个艰难的选择。我们应该采用 Swarm 并抛弃 Compose 吗？自 2016 年夏天以来，Swarm 和 Compose
    已经不再亲密。那是一场痛苦的离婚。
- en: But, after almost half a year of separation, they are back together, and we
    can witness their second honeymoon. Kind of… We do not need Docker Compose binary
    for Swarm services, but we can use its YAML files.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，经过近半年的分离后，它们重新走到了一起，我们可以见证它们的第二次蜜月。算是吧……我们不再需要 Docker Compose 二进制文件来管理 Swarm
    服务，但我们仍然可以使用它的 YAML 文件。
- en: '*Docker Engine v1.13* introduced support for Compose YAML files within the
    stack command. At the same time, *Docker Compose v1.10* introduced a new *version
    3* of its format. Together, they allow us to manage our Swarm services using already
    familiar Docker Compose YAML format.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*Docker Engine v1.13* 引入了在 stack 命令中支持 Compose YAML 文件。与此同时，*Docker Compose
    v1.10* 引入了其格式的新 *版本 3*。它们使我们能够使用已熟悉的 Docker Compose YAML 格式来管理我们的 Swarm 服务。'
- en: I will assume you are already familiar with Docker Compose and won't go into
    details of everything we can do with it. Instead, we'll go through an example
    of creating a few Swarm services.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你已经熟悉 Docker Compose，并且不会详细讲解我们可以用它做的所有事情。相反，我们将通过一个创建几个 Swarm 服务的示例来进行讲解。
- en: We'll explore how to create *Docker Flow Proxy *([http://proxy.dockerflow.com/](http://proxy.dockerflow.com/))
    service through *Docker Compose* files and the `docker stack deploy` command.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨如何通过 *Docker Compose* 文件和 `docker stack deploy` 命令来创建 *Docker Flow Proxy*
    服务 ([http://proxy.dockerflow.com/](http://proxy.dockerflow.com/))。
- en: Swarm cluster setup
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swarm 集群设置
- en: To setup an example Swarm cluster using Docker Machine, please run the commands
    that follow.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Docker Machine 设置一个示例 Swarm 集群，请运行以下命令。
- en: 'All the commands from this chapter are available in the `07-docker-stack.sh` ([https://gist.github.com/vfarcic/57422c77223d40e97320900fcf76a550](https://gist.github.com/vfarcic/57422c77223d40e97320900fcf76a550))
    Gist:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有命令都可以在 `07-docker-stack.sh` 文件中找到 ([https://gist.github.com/vfarcic/57422c77223d40e97320900fcf76a550](https://gist.github.com/vfarcic/57422c77223d40e97320900fcf76a550))：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now we're ready to deploy the `docker-flow-proxy` service.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备部署 `docker-flow-proxy` 服务。
- en: Creating Swarm services through Docker stack commands
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 Docker stack 命令创建 Swarm 服务
- en: 'We''ll start by creating a network:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建网络开始：
- en: '**A note to Windows users**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows 用户注意**'
- en: 'You might experience a problem with volumes not being mapped correctly. If
    you see an `Invalid volume specification` error, please export the environment
    variable `COMPOSE_CONVERT_WINDOWS_PATHS` set to `0`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到卷未正确映射的问题。如果你看到 `Invalid volume specification` 错误，请导出环境变量 `COMPOSE_CONVERT_WINDOWS_PATHS`
    并将其设置为 `0`：
- en: '`export COMPOSE_CONVERT_WINDOWS_PATHS=0`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`export COMPOSE_CONVERT_WINDOWS_PATHS=0`'
- en: Please make sure that the variable is exported before you run `docker-compose`
    or `docker stack deploy`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在运行 `docker-compose` 或 `docker stack deploy` 之前导出变量。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `proxy` network will be dedicated to the `proxy` container and services
    that will be attached to it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`proxy` 网络将专用于 `proxy` 容器及将要连接到它的服务。'
- en: We'll use `docker-compose-stack.yml` ([https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml](https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml))
    from the `vfarcic/docker-flow-proxy` ([https://github.com/vfarcic/do](https://github.com/vfarcic/docker-flow-proxy)[cker-flow-proxy](https://github.com/vfarcic/docker-flow-proxy))
    repository to create `docker-flow-proxy and docker-flow-swarm-listener` services.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `vfarcic/docker-flow-proxy`（[https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml](https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml)）
    仓库中的 `docker-compose-stack.yml` 文件来创建 `docker-flow-proxy` 和 `docker-flow-swarm-listener`
    服务。
- en: 'The content of the `docker-compose-stack.yml` file is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose-stack.yml` 文件的内容如下：'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The format is written in *version 3* (mandatory for `docker stack deploy`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该格式采用 *version 3*（这是 `docker stack deploy` 的必需格式）。
- en: It contains two services; `proxy` and `swarm-listener`. Since you are already
    familiar with the `proxy`, I won't go into the meaning of each argument.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含了两个服务：`proxy` 和 `swarm-listener`。由于你已经熟悉 `proxy`，我就不再详细解释每个参数的含义了。
- en: When compared with previous Compose versions, most of the new arguments are
    defined within deploy. You can think of that section as a placeholder for Swarm-specific
    arguments. In this case, we are specifying that the `proxy` service should have
    two replicas while the `swarm-listener` service should be constrained to manager
    roles. Everything else defined for those two services is using the same format
    as in earlier Compose versions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的 Compose 版本相比，大多数新参数都定义在 deploy 部分。你可以把这一部分看作是为 Swarm 特定参数保留的占位符。在这种情况下，我们指定
    `proxy` 服务应有两个副本，而 `swarm-listener` 服务应限制为管理节点角色。对于这两个服务的其他定义，采用与早期 Compose 版本相同的格式。
- en: At the bottom of the YAML file is the list of networks which are referenced
    within services. If a service does not specify any, the default network will be
    created automatically. In this case, we opted for manual creation of a network
    since services from other stacks should be able to communicate with the `proxy`.
    Therefore, we created a network manually and defined it as external in the YAML
    file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 YAML 文件的底部是网络列表，这些网络会在服务中引用。如果某个服务没有指定任何网络，则会自动创建默认网络。在这种情况下，我们选择手动创建一个网络，因为其他堆栈中的服务需要与
    `proxy` 进行通信。因此，我们手动创建了一个网络，并在 YAML 文件中将其定义为外部网络。
- en: 'Let''s create the stack based on the YAML file we explored:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据我们探讨的 YAML 文件来创建堆栈：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first command downloaded the Compose file `docker-compose-stack.yml` ([https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml](https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml))
    from the `vfarcic/docker-flow-proxy` ([https://github.com/vfarcic/docker-flow-proxy](https://github.com/vfarcic/docker-flow-proxy))
    repository. The second command created the services that form the stack.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令从 `vfarcic/docker-flow-proxy`（[https://github.com/vfarcic/docker-flow-proxy](https://github.com/vfarcic/docker-flow-proxy)）
    仓库中下载了 Compose 文件 `docker-compose-stack.yml`（[https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml](https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml)）。第二个命令创建了形成该堆栈的服务。
- en: 'The tasks of the stack can be seen through the `stack ps` command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 `stack ps` 命令查看堆栈的任务：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is as follows (IDs are removed for brevity):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下（为了简洁，已去除 ID）：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We are running two replicas of the `proxy` (for high-availability in the case
    of a failure) and one of the `swarm-listener`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行了两个 `proxy` 的副本（以确保在故障发生时具有高可用性），以及一个 `swarm-listener`。
- en: Deploying more stacks
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署更多的堆栈
- en: Let's deploy another stack.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来部署另一个堆栈。
- en: 'This time we''ll use Docker stack defined in the Compose file `docker-compose-stack.yml` ([https://github.com/vfarcic/go-demo/blob/master/docker-compose-stack.yml](https://github.com/vfarcic/go-demo/blob/master/docker-compose-stack.yml))
    located in the `vfarcic/go-demo` ([https://github.com/vfarcic/go-demo/](https://github.com/vfarcic/go-demo/))
    repository. It is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们将使用 Compose 文件 `docker-compose-stack.yml` 中定义的 Docker stack（[https://github.com/vfarcic/go-demo/blob/master/docker-compose-stack.yml](https://github.com/vfarcic/go-demo/blob/master/docker-compose-stack.yml)），该文件位于
    `vfarcic/go-demo`（[https://github.com/vfarcic/go-demo/](https://github.com/vfarcic/go-demo/)）
    仓库中。具体内容如下：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The stack defines two services (`main` and `db`). They will communicate with
    each other through the default network that will be created automatically by the
    stack (no need for `docker network create` command). Since the main service is
    an API, it should be accessible through the `proxy`, so we're attaching `proxy`
    network as well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 stack 定义了两个服务（`main` 和 `db`）。它们将通过 stack 自动创建的默认网络进行通信（无需使用 `docker network
    create` 命令）。由于主服务是 API，因此它应该能够通过 `proxy` 访问，所以我们也将 `proxy` 网络附加上。
- en: The important thing to note is that we used the deploy section to define `Swarm-specific`
    arguments. In this case, the main service defines that there should be three replicas
    and a few labels. As with the previous stack, we won't go into details of each
    service. If you'd like to go into more depth of the labels used with the main
    service, please visit the *Running Docker Flow Proxy In Swarm Mode With Automatic
    Reconfiguration *([http://proxy.dockerflow.com/swarm-mode-auto/](http://proxy.dockerflow.com/swarm-mode-auto/))
    tutorial.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要一点是，我们在部署部分使用了 `Swarm-specific` 参数。在本例中，主服务定义了应该有三个副本以及一些标签。和之前的 stack
    一样，我们不打算详细讨论每个服务。如果您想更深入了解与主服务相关的标签，请访问 *Running Docker Flow Proxy In Swarm Mode
    With Automatic Reconfiguration* ([http://proxy.dockerflow.com/swarm-mode-auto/](http://proxy.dockerflow.com/swarm-mode-auto/))
    教程。
- en: 'Let''s deploy the stack:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们部署这个 stack：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We downloaded the stack definition, executed `stack deploy` command that created
    the services and run the `stack ps` command that lists the tasks that belong to
    the `go-demo` stack. The output is as follows (IDs and Error ports columns are
    removed for brevity):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下载了 stack 定义文件，执行了 `stack deploy` 命令，创建了服务，并运行了 `stack ps` 命令列出了属于 `go-demo`
    stack 的任务。输出如下（为了简洁，ID 和错误端口列已删除）：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since Mongo database is much bigger than the main service, it takes more time
    to pull it, resulting in a few failures. The `go-demo` service is designed to
    fail if it cannot connect to its database. Once the `db` service is running, the
    main service should stop failing, and we'll see three replicas with the current
    state `Running`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Mongo 数据库比主服务大得多，所以拉取它需要更多时间，导致了一些失败。`go-demo` 服务设计为如果无法连接到数据库则会失败。一旦 `db`
    服务启动，主服务应该停止失败，我们会看到三个副本处于 `Running` 状态。
- en: 'After a few moments, the `swarm-listener` service will detect the main service
    from the `go-demo` stack and send the `proxy` a request to reconfigure itself.
    We can see the result by sending an HTTP request to the `proxy`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，`swarm-listener` 服务将检测到 `go-demo` stack 的主服务，并发送请求给 `proxy` 重新配置自己。我们可以通过发送
    HTTP 请求到 `proxy` 来查看结果：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `proxy` was reconfigured and forwards all requests with the base path `/demo`
    to the main service from the `go-demo` stack.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`proxy` 被重新配置，并将所有带有基础路径 `/demo` 的请求转发到 `go-demo` stack 的主服务。'
- en: To stack or not to stack
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆叠与不堆叠
- en: Docker stack is a great addition to the Swarm Mode. We do not have to deal with
    `docker service create` commands that tend to have a never ending list of arguments.
    With services specified in Compose YAML files, we can replace those long commands
    with a simple `docker stack deploy`. If those YAML files are stored in code repositories,
    we can apply the same practices to service deployments as to any other area of
    software engineering. We can track changes, do code reviews, share with others,
    and so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Docker stack 是 Swarm 模式的一个重要补充。我们不再需要处理那些通常有着无穷参数列表的 `docker service create`
    命令。通过在 Compose YAML 文件中指定服务，我们可以用一个简单的 `docker stack deploy` 来替代这些长长的命令。如果这些 YAML
    文件存储在代码仓库中，我们可以将相同的实践应用到服务部署中，就像处理其他软件工程领域一样。我们可以追踪更改，进行代码审查，与他人共享等等。
- en: The addition of the Docker `stack` command and its ability to use Compose files
    is a very welcome addition to the Docker ecosystem.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Docker `stack` 命令的加入以及其使用 Compose 文件的能力，极大地丰富了 Docker 生态系统，值得欢迎。
- en: Throughout the rest of the book, we'll use `docker service create` commands
    when exploring new services and `docker stack deploy` to create those we are already
    familiar with. If you have trouble converting `docker service create` commands
    into stacks, please take a look at the `vfarcic/docker-flow-stacks` ([https://github.com/vfarcic/docker-flow-stacks](https://github.com/vfarcic/docker-flow-stacks))
    repository. It contains the stacks from some of the services we'll use. I expect
    you to contribute with the stacks you use. Please fork the repository and make
    a pull request. If you have trouble making a stack, please open an issue
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将在探索新服务时使用 `docker service create` 命令，而在创建我们已经熟悉的服务时使用 `docker stack
    deploy`。如果你在将 `docker service create` 命令转换为堆栈时遇到困难，请查看 `vfarcic/docker-flow-stacks`
    ([https://github.com/vfarcic/docker-flow-stacks](https://github.com/vfarcic/docker-flow-stacks))
    仓库。它包含了一些我们将使用的服务的堆栈。我希望你能贡献你所使用的堆栈。请 fork 仓库并提交 pull request。如果你在创建堆栈时遇到困难，请提出
    issue。
- en: Cleanup
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理
- en: 'Please remove Docker Machine VMs we created. You might need those resources
    for some other tasks:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请移除我们创建的 Docker Machine 虚拟机。你可能需要这些资源来完成其他任务：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
