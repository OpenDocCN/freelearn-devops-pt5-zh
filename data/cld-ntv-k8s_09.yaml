- en: '*Chapter 7*: Storage on Kubernetes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：Kubernetes上的存储'
- en: In this chapter, we will learn how to provide application storage on Kubernetes.
    We'll review two storage resources on Kubernetes, volumes and persistent volumes.
    Volumes are great for transient data needs, but persistent volumes are necessary
    for running any serious stateful workload on Kubernetes. With the skills you'll
    learn in this chapter, you will be able to configure storage for your applications
    running on Kubernetes in several different ways and environments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在Kubernetes上提供应用存储。我们将回顾Kubernetes上的两种存储资源：卷和持久卷。卷适用于短暂的数据需求，而持久卷对于在Kubernetes上运行任何有状态的工作负载是必需的。通过本章中所学的技能，你将能够以多种方式和环境配置在Kubernetes上运行的应用存储。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Understanding the difference between volumes and persistent volumes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解卷和持久卷之间的区别
- en: Using volumes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用卷
- en: Creating persistent volumes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建持久卷
- en: Persistent volume claims
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久卷声明
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to run the commands detailed in this chapter, you will need a computer
    that supports the `kubectl` command-line tool along with a working Kubernetes
    cluster. See [*Chapter 1*](B14790_01_Final_PG_ePub.xhtml#_idTextAnchor016), *Communicating
    with Kubernetes*, for several methods to get up and running with Kubernetes quickly,
    and for instructions on how to install the `kubectl` tool.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行本章详细介绍的命令，你需要一台支持`kubectl`命令行工具并且有一个正常运行的Kubernetes集群的计算机。有关如何快速启动Kubernetes的几种方法以及如何安装`kubectl`工具的说明，请参见[*第1章*](B14790_01_Final_PG_ePub.xhtml#_idTextAnchor016)，*与Kubernetes通信*。
- en: The code used in this chapter can be found in the book's GitHub repository at
    [https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter7](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter7).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码可以在本书的GitHub仓库中找到：[https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter7](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter7)。
- en: Understanding the difference between volumes and persistent volumes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解卷和持久卷之间的区别
- en: A completely stateless, containerized application may only need disk space for
    the container files themselves. When running applications of this type, no additional
    configuration is required on Kubernetes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完全无状态的容器化应用可能只需要容器文件本身的磁盘空间。在运行此类应用时，Kubernetes上不需要额外的配置。
- en: However, this is not always true in the real world. Legacy apps that are being
    moved to containers may need disk space volumes for many possible reasons. In
    order to hold files for use by containers, you need the Kubernetes volume resource.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这在现实世界中并不总是成立。正在迁移到容器的传统应用可能因多种原因需要磁盘空间卷。为了为容器存储文件，你需要Kubernetes的卷资源。
- en: 'There are two main storage resources that can be created in Kubernetes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中可以创建两种主要的存储资源：
- en: Volumes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷
- en: Persistent volumes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久卷
- en: 'The distinction between the two is in the name: while volumes are tied to the
    lifecycle of a particular Pod, persistent volumes stay alive until deleted and
    can be shared across different Pods. Volumes can be handy in sharing data across
    containers within a Pod, while persistent volumes can be used for many possible
    advanced purposes.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 两者的区别在于名称：卷与特定Pod的生命周期相关，而持久卷在删除之前始终存在，并且可以跨不同的Pod共享。卷在Pod内共享容器数据时非常有用，而持久卷则可以用于许多可能的高级用途。
- en: Let's look at how to implement volumes first.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看一下如何实现卷。
- en: Volumes
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卷
- en: Kubernetes supports many different subtypes of volumes. Most can be used for
    either volumes or persistent volumes, but some are specific to either resource.
    We'll start with the simplest and review a few types.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes支持多种不同的卷子类型。大多数可以用于卷或持久卷，但有些是特定于某一种资源的。我们将从最简单的开始，回顾几种类型。
- en: Important note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: You can see the full current list of volume types at https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes查看卷类型的完整当前列表。
- en: 'Here is a short list of volume subtypes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是卷子类型的简短列表：
- en: '`awsElasticBlockStore`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`awsElasticBlockStore`'
- en: '`cephfs`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cephfs`'
- en: '`ConfigMap`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConfigMap`'
- en: '`emptyDir`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`emptyDir`'
- en: '`hostPath`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostPath`'
- en: '`local`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local`'
- en: '`nfs`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nfs`'
- en: '`persistentVolumeClaim`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`persistentVolumeClaim`'
- en: '`rbd`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rbd`'
- en: '`Secret`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Secret`'
- en: As you can see, both ConfigMaps and Secrets are actually implemented as *types*
    of volume. Additionally, the list includes cloud provider volume types such as
    `awsElasticBlockStore`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，ConfigMaps 和 Secrets 实际上作为 *卷类型* 实现。此外，列表中还包括云提供商的卷类型，例如 `awsElasticBlockStore`。
- en: Unlike persistent volumes, which are created separately from any one Pod, creating
    a volume is most often done in the context of a Pod.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与持久卷不同，持久卷是独立于任何 Pod 创建的，创建卷通常是在 Pod 的上下文中进行的。
- en: 'To create a simple volume, you can use the following Pod YAML:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个简单的卷，您可以使用以下 Pod YAML：
- en: pod-with-vol.yaml
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: pod-with-vol.yaml
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This YAML will create a Pod along with a volume of type `emptyDir`. Volumes
    of type `emptyDir` are provisioned using whatever storage already exists on the
    node that the Pod is assigned to. As mentioned previously, the volume is tied
    to the lifecycle of the Pod, not its containers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 该 YAML 将创建一个 Pod 和一个类型为 `emptyDir` 的卷。`emptyDir` 类型的卷使用 Pod 被分配到的节点上已存在的存储进行配置。如前所述，卷与
    Pod 的生命周期相关，而不是与其容器的生命周期相关。
- en: 'This means that in a Pod with multiple containers, all containers will be able
    to access volume data. Let''s take the following example YAML file for a Pod:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，在一个包含多个容器的 Pod 中，所有容器都能够访问卷数据。我们来看一个 Pod 的示例 YAML 文件：
- en: pod-with-multiple-containers.yaml
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: pod-with-multiple-containers.yaml
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, both containers in the Pod can access the volume data, though
    at different paths. Containers can even communicate via files in the shared volume.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，Pod 中的两个容器都可以访问卷数据，尽管路径不同。容器之间甚至可以通过共享卷中的文件进行通信。
- en: The important parts of the spec are the `volume spec` itself (the list item
    under `volumes`) and the `mount` for the volume (the list item under `volumeMounts`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 规格中重要的部分是 `volume spec` 本身（`volumes` 下的列表项）和卷的 `mount`（`volumeMounts` 下的列表项）。
- en: Each mount item contains a name, which corresponds to the name of the volume
    in the `volumes` section, and a `mountPath`, which will dictate to which file
    path on the container the volume gets mounted. For instance, in the preceding
    YAML, the volume `config-volume` will be accessible from within the `busybox`
    Pod at `/shared-config`, and within the `busybox2` Pod at `/myconfig`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每个挂载项包含一个名称，该名称对应于 `volumes` 部分中卷的名称，以及一个 `mountPath`，该路径指定卷将挂载到容器的哪个文件路径。例如，在前面的
    YAML 中，卷 `config-volume` 将在 `busybox` Pod 中通过 `/shared-config` 访问，而在 `busybox2`
    Pod 中则通过 `/myconfig` 访问。
- en: The volume spec itself takes a name – in this case, `my-storage`, and additional
    keys/values specific to the volume type, which in this case is `emptyDir` and
    just takes empty brackets.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 卷的规格本身需要一个名称——在本例中是 `my-storage`，并且需要根据卷类型指定其他键/值，这里是 `emptyDir`，并且只需要空括号。
- en: 'Now, let''s address the example of a cloud-provisioned volume mounted to a
    Pod. To mount an AWS **Elastic Block Storage** (**EBS**) volume, for instance,
    the following YAML can be used:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一个将云提供的卷挂载到 Pod 的示例。要挂载一个 AWS **弹性块存储**（**EBS**）卷，可以使用以下 YAML：
- en: pod-with-ebs.yaml
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: pod-with-ebs.yaml
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This YAML will, as long as your cluster is set up correctly to authenticate
    with AWS, attach your existing EBS volume to the Pod. As you can see, we use the
    `awsElasticBlockStore` key to specifically configure the exact volume ID to be
    used. In this case, the EBS volume must already exist on your AWS account and
    region. This is much easier with AWS **Elastic Kubernetes Service** (**EKS**)
    since it allows us to automatically provision EBS volumes from within Kubernetes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您的集群已正确设置以通过 AWS 进行身份验证，该 YAML 文件将把现有的 EBS 卷附加到 Pod 上。如您所见，我们使用 `awsElasticBlockStore`
    键来专门配置要使用的确切卷 ID。在本例中，EBS 卷必须已经存在于您的 AWS 账户和区域中。使用 AWS **弹性 Kubernetes 服务**（**EKS**）会更容易，因为它允许我们在
    Kubernetes 中自动配置 EBS 卷。
- en: Kubernetes also includes features within the Kubernetes AWS cloud provider to
    automatically provision volumes – but these are for use with persistent volumes.
    We'll look at how to get these automatically provisioned volumes in the *Persistent
    volumes* section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 还包括 Kubernetes AWS 云提供商中的功能，用于自动配置卷——但这些功能仅适用于持久卷。我们将在 *持久卷* 部分讨论如何获取这些自动配置的卷。
- en: Persistent volumes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久卷
- en: Persistent volumes hold some key advantages over regular Kubernetes volumes.
    As mentioned previously, their (persistent volumes) lifecycle is tied to the life
    of the cluster, not the life of a single Pod. This means that persistent volumes
    can be shared between Pods and reused as long as the cluster is running. For this
    reason, the pattern matches much better to external stores such as EBS (a block
    storage service on AWS) since the storage itself outlasts a single Pod.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 持久卷相较于普通的 Kubernetes 卷有一些关键优势。如前所述，它们的生命周期与集群的生命周期绑定，而不是与单个 Pod 的生命周期绑定。这意味着持久卷可以在
    Pods 之间共享并且只要集群在运行，就可以被重复使用。因此，这种模式更适合用于外部存储，如 EBS（AWS 的块存储服务），因为存储本身比单个 Pod 的生命周期要长。
- en: 'Using persistent volumes actually requires two resources: the `PersistentVolume`
    itself and a `PersistentVolumeClaim`, which is used to mount a `PersistentVolume`
    to a Pod.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用持久卷实际上需要两个资源：`PersistentVolume` 本身和 `PersistentVolumeClaim`，后者用于将 `PersistentVolume`
    挂载到 Pod。
- en: 'Let''s start with the `PersistentVolume` itself – take a look at the basic
    YAML for creating a `PersistentVolume`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 `PersistentVolume` 本身开始 – 看一下创建 `PersistentVolume` 的基本 YAML 配置：
- en: pv.yaml
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: pv.yaml
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now let's pick this apart. Starting with the first line in the spec – `storageClassName`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来仔细分析一下。从规范中的第一行开始 – `storageClassName`。
- en: This first config, `storageClassName`, represents the type of storage we want
    to use. For the `hostPath` volume type, we simply specify `manual`, but for AWS
    EBS, for instance, you could create and use a storage class called `gp2Encrypted`
    to match the `gp2` storage type in AWS with EBS encryption enabled. Storage classes
    are therefore combinations of configuration that are available for a particular
    volume type – which can be referenced in the volume spec.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置中的第一项，`storageClassName`，表示我们希望使用的存储类型。对于 `hostPath` 卷类型，我们只需指定 `manual`，但是对于
    AWS EBS，比如，你可以创建并使用名为 `gp2Encrypted` 的存储类，将 AWS 中的 `gp2` 存储类型与启用加密的 EBS 匹配。因此，存储类是某一特定卷类型的配置组合，可以在卷的规范中引用。
- en: 'Moving forward with our AWS `StorageClass` example, let''s provision a new
    `StorageClass` for `gp2Encrypted`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们之前的 AWS `StorageClass` 示例，让我们为 `gp2Encrypted` 配置一个新的 `StorageClass`：
- en: gp2-storageclass.yaml
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: gp2-storageclass.yaml
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, we can create our `PersistentVolume` using the `gp2Encrypted` storage class.
    However, there's a shortcut to creating `PersistentVolumes` using dynamically
    provisioned EBS (or other cloud) volumes. When using dynamically provisioned volumes,
    we create the `PersistentVolumeClaim` first, which then automatically generates
    the `PersistentVolume`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 `gp2Encrypted` 存储类创建我们的 `PersistentVolume`。然而，也有一种快捷方式可以使用动态配置的 EBS（或其他云）卷来创建
    `PersistentVolumes`。当使用动态配置卷时，我们首先创建 `PersistentVolumeClaim`，然后它会自动生成 `PersistentVolume`。
- en: Persistent volume claims
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持久卷声明
- en: We now know that you can easily create persistent volumes in Kubernetes, however,
    that does not allow you to bind storage to a Pod. You need to create a `PersistentVolumeClaim`,
    which claims a `PersistentVolume` and allows you to bind that claim to a Pod or
    multiple Pods.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道你可以轻松地在 Kubernetes 中创建持久卷，然而这并不能让你将存储绑定到 Pod。你需要创建一个 `PersistentVolumeClaim`，它声明一个
    `PersistentVolume`，并允许你将该声明绑定到一个或多个 Pod。
- en: 'Building on our new `StorageClass` from the last section, let''s make a claim
    that will automatically result in a new `PersistentVolume` being created since
    there are no other persistent volumes with our desired `StorageClass`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 基于上一节的 `StorageClass`，让我们做一个声明，该声明将自动创建一个新的 `PersistentVolume`，因为没有其他持久卷使用我们期望的
    `StorageClass`：
- en: pvc.yaml
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: pvc.yaml
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Running `kubectl apply -f` on this file should result in a new, autogenerated
    **Persistent Volume** (**PV**) being created. If your AWS cloud provider is set
    up correctly, this will result in the creation of a new EBS volume with type GP2
    and encryption enabled.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `kubectl apply -f` 命令处理该文件时，应会创建一个新的自动生成的 **Persistent Volume**（**PV**）。如果你的
    AWS 云服务商配置正确，这将导致创建一个新的类型为 GP2 并启用了加密的 EBS 卷。
- en: Before we attach our EBS-backed persistent volume to our Pod, let's confirm
    that the EBS volume was created correctly in AWS.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在将我们基于 EBS 的持久卷附加到 Pod 之前，让我们确认 EBS 卷是否在 AWS 中正确创建。
- en: 'To do so, we can navigate to our AWS console and ensure we are in the same
    region that our EKS cluster is running in. Then go to **Services** > **EC2** and
    click on **Volumes** in the left menu under **Elastic Block Store**. In this section,
    we should see a line item with an autogenerated volume of the same size (**1 GiB**)
    as our PVC states. It should have the class of GP2, and it should have encryption
    enabled. Let''s see what this would look like in the AWS console:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以导航到 AWS 控制台，确保我们在与 EKS 集群相同的区域。然后，进入 **服务** > **EC2**，并在左侧菜单下的 **弹性块存储**
    中点击 **卷**。在此部分中，我们应该看到一行自动生成的与我们 PVC 声明相同大小（**1 GiB**）的卷。它应该属于 GP2 类，并且应启用加密。让我们看看在
    AWS 控制台中这将是什么样子：
- en: '![Figure 7.1 – AWS console with autocreated EBS volume](img/B14790_07_001.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 自动创建的 AWS 控制台 EBS 卷](img/B14790_07_001.jpg)'
- en: Figure 7.1 – AWS console with autocreated EBS volume
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 自动创建的 AWS 控制台 EBS 卷
- en: As you can see, we have our dynamically generated EBS volume properly created
    in AWS, with encryption enabled and the **gp2** volume type assigned. Now that
    we have our volume created, and we've confirmed that it has been created in AWS,
    we can attach it to our Pod.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在 AWS 中成功创建了我们的动态生成的 EBS 卷，启用了加密，并分配了 **gp2** 卷类型。现在我们已经创建了卷，并确认它已在 AWS
    中创建，我们可以将它附加到 Pod 上。
- en: Attaching Persistent Volume Claims (PVCs) to Pods
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将持久化卷声明（PVC）附加到 Pod
- en: Now we have both a `PersistentVolume` and a `PersistentVolumeClaim`, we can
    attach them to a Pod for consumption. This process is very similar to attaching
    a ConfigMap or Secret – which makes sense, because ConfigMaps and Secrets are
    essentially types of volumes!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 `PersistentVolume` 和 `PersistentVolumeClaim`，我们可以将它们附加到 Pod 中进行使用。这个过程与附加
    ConfigMap 或 Secret 非常相似——这也有道理，因为 ConfigMap 和 Secret 本质上是卷的一种类型！
- en: 'Check out the YAML that allows us to attach our encrypted EBS volume to a Pod
    and name it `pod-with-attachment.yaml`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 查看允许我们将加密的 EBS 卷附加到 Pod 的 YAML 文件，并将其命名为 `pod-with-attachment.yaml`：
- en: Pod-with-attachment.yaml
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Pod-with-attachment.yaml
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Running `kubectl apply -f pod-with-attachment.yaml` will result in the creation
    of a Pod that has our `PersistentVolume` mounted via our claim to `/usr/data`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `kubectl apply -f pod-with-attachment.yaml` 将会创建一个 Pod，并通过我们的声明将 `PersistentVolume`
    挂载到 `/usr/data`。
- en: 'To confirm that the volume has been successfully created, let''s `exec` into
    our Pod and create a file in the location that our volume has been mounted:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认卷已成功创建，让我们 `exec` 进入 Pod，并在我们挂载卷的位置创建一个文件：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s delete the Pod using the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令删除 Pod：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And recreate it again using the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令重新创建它：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we''ve done our job right, we should be able to see our file when running
    `kubectl exec` to get into the Pod again:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们做得对，当再次运行 `kubectl exec` 进入 Pod 时，我们应该能够看到我们的文件：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Success!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！
- en: We now know how to create a cloud-storage-provided persistent volume for Kubernetes.
    However, you may be running Kubernetes on-premise or on your laptop using minikube.
    Let's look at some alternate persistent volume subtypes that you can use instead.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道如何为 Kubernetes 创建一个由云存储提供的持久化卷。然而，你可能在本地运行 Kubernetes，或者使用 minikube 在笔记本电脑上运行。让我们看看一些可以替代使用的持久化卷子类型。
- en: Persistent volumes without cloud storage
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有云存储的持久化卷
- en: Our previous examples assume that you are running Kubernetes in a cloud environment
    and can make use of storage services provided by the cloud platform (AWS EBS and
    others). This, however, is not always possible. You may be running Kubernetes
    in a data center environment, or on dedicated hardware.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的示例假设你在云环境中运行 Kubernetes，并且可以使用云平台提供的存储服务（如 AWS EBS 等）。然而，这并不总是可能的。你可能在数据中心环境中运行
    Kubernetes，或者在专用硬件上运行。
- en: In this case, there are many potential solutions for providing storage to Kubernetes.
    A simple one is to change the volume type to `hostPath`, which works within the
    node's existing storage devices to create persistent volumes. This is great when
    running on minikube, for instance, but does not provide as powerful an abstraction
    as something like AWS EBS. For a tool with on-premise capabilities similar to
    cloud storage tools like EBS, let's look at using Ceph with Rook. For the full
    documentation, check out the Rook docs (which will teach you Ceph as well) at
    [https://rook.io/docs/rook/v1.3/ceph-quickstart.html](https://rook.io/docs/rook/v1.3/ceph-quickstart.html).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，有许多为 Kubernetes 提供存储的潜在解决方案。一种简单的方案是将卷类型更改为 `hostPath`，它在节点现有存储设备上工作，创建持久卷。这在例如
    minikube 上运行时非常有用，但它并没有像 AWS EBS 那样提供强大的抽象。对于一个具有类似云存储工具（如 EBS）功能的本地工具，我们可以使用
    Ceph 和 Rook。欲了解完整文档，请参阅 Rook 文档（它也会教你使用 Ceph），访问 [https://rook.io/docs/rook/v1.3/ceph-quickstart.html](https://rook.io/docs/rook/v1.3/ceph-quickstart.html)。
- en: Rook is a popular open source Kubernetes storage abstraction layer. It can provide
    persistent volumes through a variety of providers, such as EdgeFS and NFS. In
    this case, we'll use Ceph, an open source storage project that provides object,
    block, and file storage. For simplicity, we'll use block mode.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Rook 是一个流行的开源 Kubernetes 存储抽象层。它可以通过多种提供者提供持久卷，如 EdgeFS 和 NFS。在这种情况下，我们将使用 Ceph，这是一个开源存储项目，提供对象存储、块存储和文件存储。为了简化操作，我们将使用块模式。
- en: Installing Rook on Kubernetes is actually pretty simple. We'll take you from
    installing Rook to setting up a Ceph cluster, to finally provisioning persistent
    volumes on our cluster.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 上安装 Rook 实际上非常简单。我们将带你从安装 Rook，到设置 Ceph 集群，最后在我们的集群上配置持久卷。
- en: Installing Rook
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Rook
- en: 'We''re going to use a typical Rook installation default setup provided by the
    Rook GitHub repository. This could be highly customized depending on the use case
    but will allow us to quickly set up block storage for our workloads. Please refer
    to the following steps to do this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Rook GitHub 仓库提供的典型 Rook 安装默认设置。这可以根据使用案例进行高度定制，但它将使我们能够快速为工作负载设置块存储。请按照以下步骤操作：
- en: 'First, let''s clone the Rook repository:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们克隆 Rook 仓库：
- en: '[PRE11]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Our next step is to create all the relevant Kubernetes resources, including
    several **Custom Resource Definitions** (**CRDs**). We''ll talk about these in
    later chapters, but for now, consider them new Kubernetes resources that are specific
    to Rook, outside of the typical Pods, Services, and so on. To create common resources,
    run the following command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的下一步是创建所有相关的 Kubernetes 资源，包括几个 **自定义资源定义**（**CRD**）。我们将在后续章节中讲解这些，但现在可以认为它们是
    Rook 特有的新的 Kubernetes 资源，超出了典型的 Pods、Services 等。要创建常见资源，请运行以下命令：
- en: '[PRE12]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, let''s start our Rook operator, which will handle provisioning all the
    necessary resources for a particular Rook provider, which in this case will be
    Ceph:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们启动 Rook 操作符，它将处理为特定 Rook 提供者（在这种情况下为 Ceph）配置所有必要资源的工作：
- en: '[PRE13]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Before the next step, ensure that the Rook operator Pod is actually running
    by using the following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步之前，请通过以下命令确保 Rook 操作符 Pod 实际正在运行：
- en: '[PRE14]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once the Rook Pod is in the `Running` state, we can set up our Ceph cluster!
    The YAML for this is also in the folder we''ve cloned from Git. Create it using
    the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Rook Pod 处于 `Running` 状态，我们就可以设置我们的 Ceph 集群了！这个 YAML 配置也在我们从 Git 克隆的文件夹中。使用以下命令创建它：
- en: '[PRE15]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This process can take a few minutes. The Ceph cluster is comprised of several
    different Pod types, including the operator, **Object Storage Devices** (**OSDs**),
    and managers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可能需要几分钟。Ceph 集群由几种不同类型的 Pod 组成，包括操作符、**对象存储设备**（**OSD**）和管理器。
- en: To ensure that our Ceph cluster is working properly, Rook provides a toolbox
    container image that allows you to use the Rook and Ceph command-line tools. To
    start the toolbox, you can use the toolbox Pod spec provided by the Rook project
    at [https://rook.io/docs/rook/v0.7/toolbox.html](https://rook.io/docs/rook/v0.7/toolbox.html).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的 Ceph 集群正常工作，Rook 提供了一个工具箱容器镜像，允许你使用 Rook 和 Ceph 命令行工具。要启动工具箱，你可以使用 Rook
    项目提供的工具箱 Pod 规范，详情请访问 [https://rook.io/docs/rook/v0.7/toolbox.html](https://rook.io/docs/rook/v0.7/toolbox.html)。
- en: 'Here is a sample of the spec for the toolbox Pod:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是工具箱 Pod 规范的示例：
- en: rook-toolbox-pod.yaml
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: rook-toolbox-pod.yaml
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, this Pod uses a special container image provided by Rook. The
    image comes with all the tools you need to investigate Rook and Ceph pre-installed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，Pod使用的是Rook提供的特殊容器镜像。该镜像内置了所有你需要用来调查Rook和Ceph的工具。
- en: Once you have the toolbox Pod running, you can use the `rookctl` and `ceph`
    commands to check on the cluster status (check the Rook docs for specifics).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦工具箱Pod启动，你可以使用`rookctl`和`ceph`命令来检查集群状态（有关具体操作，请参阅Rook文档）。
- en: The rook-ceph-block storage class
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rook-ceph-block存储类
- en: 'Now our cluster is working, we can create our storage class that will be used
    by our PVs. We will call this storage class `rook-ceph-block`. Here''s our YAML
    file (`ceph-rook-combined.yaml`), which will include our `CephBlockPool` (which
    will handle our block storage in Ceph – see [https://rook.io/docs/rook/v0.9/ceph-pool-crd.html](https://rook.io/docs/rook/v0.9/ceph-pool-crd.html)
    for more information) as well as the storage class itself:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在集群正常运行，我们可以创建将由PV使用的存储类。我们将这个存储类命名为`rook-ceph-block`。这是我们的YAML文件（`ceph-rook-combined.yaml`），它将包括我们的`CephBlockPool`（它将处理Ceph中的块存储——有关更多信息，请参阅[https://rook.io/docs/rook/v0.9/ceph-pool-crd.html](https://rook.io/docs/rook/v0.9/ceph-pool-crd.html)）以及存储类本身：
- en: ceph-rook-combined.yaml
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ceph-rook-combined.yaml
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, the YAML spec defines both our `StorageClass` and the `CephBlockPool`
    resource. As we mentioned earlier in this chapter, `StorageClass` is how we tell
    Kubernetes how to fulfill a `PersistentVolumeClaim`. The `CephBlockPool` resource,
    on the other hand, tells Ceph how and where to create distributed storage resources
    – in this case, how much to replicate the storage.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，YAML规范定义了我们的`StorageClass`和`CephBlockPool`资源。正如我们在本章之前提到的，`StorageClass`是我们告诉Kubernetes如何完成`PersistentVolumeClaim`的方式。而`CephBlockPool`资源则告诉Ceph如何以及在哪里创建分布式存储资源——在这种情况下，它指定了存储的复制数量。
- en: 'Now we can give some storage to our Pod! Let''s create a new PVC with our new
    storage class:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以为Pod提供一些存储了！让我们使用新创建的存储类来创建一个新的PVC：
- en: rook-ceph-pvc.yaml
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: rook-ceph-pvc.yaml
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Our PVC is of storage class `rook-ceph-block`, so it will use the new storage
    class we just created. Now, let''s give the PVC to our Pod in our YAML file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的PVC属于存储类`rook-ceph-block`，因此它将使用我们刚刚创建的新存储类。现在，让我们在YAML文件中将PVC分配给Pod：
- en: rook-ceph-pod.yaml
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: rook-ceph-pod.yaml
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When the Pod is created, Rook should spin up a new persistent volume and attach
    it to the Pod. Let''s peer into the Pod to see if it worked properly:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当Pod创建时，Rook应该会启动一个新的持久卷并将其附加到Pod上。让我们查看Pod，看看是否工作正常：
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We get the following output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Success!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！
- en: Though we just used Rook's and Ceph's block storage functionality with Ceph,
    it also has a filesystem mode, which has some benefits – let's discuss why you
    may want to use it.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们刚刚使用了Rook和Ceph的块存储功能，但它也有文件系统模式，这有一些好处——让我们讨论一下为什么你可能会想使用它。
- en: The Rook Ceph filesystem
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rook Ceph文件系统
- en: The downside of Rook's Ceph Block provider is that it can only be written to
    by one Pod at a time. In order to create a `ReadWriteMany` persistent volume with
    Rook/Ceph, we need to use the filesystem provider, which supports RWX mode. For
    more information, check out the Rook/Ceph docs at [https://rook.io/docs/rook/v1.3/ceph-quickstart.html](https://rook.io/docs/rook/v1.3/ceph-quickstart.html).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Rook的Ceph块存储提供程序的缺点是一次只能被一个Pod写入。为了使用Rook/Ceph创建一个`ReadWriteMany`持久卷，我们需要使用文件系统提供程序，它支持RWX模式。有关更多信息，请查阅Rook/Ceph文档：[https://rook.io/docs/rook/v1.3/ceph-quickstart.html](https://rook.io/docs/rook/v1.3/ceph-quickstart.html)。
- en: 'Up to creating the Ceph cluster, all the previous steps apply. At this point,
    we need to create our filesystem. Let''s use the following YAML file to create
    it:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Ceph集群之前，所有的步骤都是适用的。在这一点上，我们需要创建我们的文件系统。让我们使用以下YAML文件来创建它：
- en: rook-ceph-fs.yaml
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: rook-ceph-fs.yaml
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this case, we're replicating metadata and data to at least two pools for
    reliability, as configured in the `metadataPool` and `dataPool` blocks. We are
    also preserving the pools on delete using the `preservePoolsOnDelete` key.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将元数据和数据复制到至少两个池中以提高可靠性，这在`metadataPool`和`dataPool`块中进行配置。我们还使用`preservePoolsOnDelete`键在删除时保留池。
- en: 'Next, let''s create our new storage class specifically for Rook/Ceph filesystem
    storage. The following YAML does this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为Rook/Ceph文件系统存储创建一个新的存储类。以下YAML文件实现了这一点：
- en: rook-ceph-fs-storageclass.yaml
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: rook-ceph-fs-storageclass.yaml
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This `rook-cephfs` storage class specifies our previously created pool and
    describes the reclaim policy of our storage class. Finally, it uses a few annotations
    that are explained in the Rook/Ceph documentation. Now, we can attach this via
    a PVC to a deployment, not just a Pod! Take a look at our PV:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`rook-cephfs`存储类指定了我们之前创建的池，并描述了存储类的回收策略。最后，它使用了几个注解，具体解释请参见Rook/Ceph文档。现在，我们可以通过PVC将其附加到部署，而不仅仅是Pod！来看一下我们的PV：
- en: rook-cephfs-pvc.yaml
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: rook-cephfs-pvc.yaml
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This persistent volume references our new `rook-cephfs` storage class in `ReadWriteMany`
    mode – we''re asking for `1 Gi` of this data. Next, we can create our `Deployment`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个持久卷引用了我们在`ReadWriteMany`模式下的新`rook-cephfs`存储类——我们请求分配`1 Gi`的数据。接下来，我们可以创建我们的`Deployment`：
- en: rook-cephfs-deployment.yaml
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: rook-cephfs-deployment.yaml
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This `Deployment` references our `ReadWriteMany` persistent volume claim using
    the `persistentVolumeClaim` block under `volumes`. When deployed, all of our Pods
    can now read and write to the same persistent volume.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Deployment`通过`volumes`下的`persistentVolumeClaim`块引用了我们的`ReadWriteMany`持久卷声明。部署后，所有的Pod现在都可以读写同一个持久卷。
- en: After this, you should have a good understanding of how to create persistent
    volumes and attach them to Pods.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，你应该能很好地理解如何创建持久卷并将其附加到Pod。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we reviewed two methods of providing storage on Kubernetes
    – volumes and persistent volumes. First, we discussed the difference between these
    two methods: while volumes are tied to the lifetime of the Pod, persistent volumes
    last until they or the cluster is deleted. Then, we looked at how to implement
    volumes and attach them to our Pods. Lastly, we extended our learning on volumes
    to persistent volumes, and discovered how to use several different types of persistent
    volumes. These skills will help you assign persistent and non-persistent storage
    to your applications in many possible environments – from on-premises to the cloud.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们回顾了在Kubernetes上提供存储的两种方法——卷和持久卷。首先，我们讨论了这两种方法的区别：卷与Pod的生命周期绑定，而持久卷的生命周期直到它们或集群被删除。然后，我们了解了如何实现卷并将其附加到Pod。最后，我们将学习从卷到持久卷的扩展，探讨了如何使用多种不同类型的持久卷。这些技能将帮助你在各种环境中——从本地到云——为应用程序分配持久存储和非持久存储。
- en: In the next chapter, we'll take a detour from application concerns and discuss
    how to control Pod placement on Kubernetes.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将暂时脱离应用程序的关注点，讨论如何控制Kubernetes中Pod的调度位置。
- en: Questions
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the differences between volumes and persistent volumes?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卷和持久卷有什么区别？
- en: What is a `StorageClass`, and how does it relate to a volume?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是`StorageClass`，它与卷有什么关系？
- en: How can you automatically provision cloud resources when creating Kubernetes
    resources such as a persistent volume?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在创建Kubernetes资源（例如持久卷）时自动配置云资源？
- en: In which use cases do you think that using volumes instead of persistent volumes
    would be prohibitive?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在哪些使用场景下，你认为使用卷而非持久卷会受到限制？
- en: Further reading
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'Please refer to the following links for more information:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下链接了解更多信息：
- en: 'Ceph Storage Quickstart for Rook: [https://github.com/rook/rook/blob/master/Documentation/ceph-quickstart.md](https://github.com/rook/rook/blob/master/Documentation/ceph-quickstart.md)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ceph存储快速入门（适用于Rook）：[https://github.com/rook/rook/blob/master/Documentation/ceph-quickstart.md](https://github.com/rook/rook/blob/master/Documentation/ceph-quickstart.md)
- en: 'Rook Toolbox: [https://rook.io/docs/rook/v0.7/toolbox.html](https://rook.io/docs/rook/v0.7/toolbox.html)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rook工具箱：[https://rook.io/docs/rook/v0.7/toolbox.html](https://rook.io/docs/rook/v0.7/toolbox.html)
- en: 'Cloud providers: https://kubernetes.io/docs/tasks/administer-cluster/running-cloud-controller/'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云服务提供商：[https://kubernetes.io/docs/tasks/administer-cluster/running-cloud-controller/](https://kubernetes.io/docs/tasks/administer-cluster/running-cloud-controller/)
