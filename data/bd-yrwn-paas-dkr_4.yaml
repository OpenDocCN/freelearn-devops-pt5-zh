- en: Chapter 4. Giving Containers Data and Parameters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：为容器提供数据和参数
- en: 'The WordPress data inside the WordPress container and the database''s data
    inside the MySQL container may not be what we want. It''s considered good practice
    to keep the data outside the service containers because you may want to separate
    the data from the service container. In this chapter, we''ll cover the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress容器中的WordPress数据以及MySQL容器中的数据库数据可能并不是我们所希望的。最佳实践是将数据保存在服务容器之外，因为你可能希望将数据与服务容器分开。在本章中，我们将讨论以下主题：
- en: Data volumes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据卷
- en: Creating a data volume image
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据卷镜像
- en: Host on GitHub
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub上的主机
- en: Publishing on Docker Registry Hub
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Docker Registry Hub上发布
- en: Running on Docker Registry Hub
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Docker Registry Hub上运行
- en: Passing parameters to containers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向容器传递参数
- en: Creating a parameterized image
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个带参数的镜像
- en: Data volumes
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据卷
- en: There are two ways in which we can mount external volumes on our containers.
    A data volume lets you share data between containers, and the data inside the
    data volume is untouched if you update, stop, or even delete your service container.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过两种方式将外部卷挂载到容器中。数据卷允许你在容器之间共享数据，并且如果你更新、停止甚至删除服务容器，数据卷中的数据不会受到影响。
- en: 'A data volume is mounted with the `–v` option in the `docker run` statement:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据卷通过`docker run`语句中的`–v`选项挂载：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can add as many data volumes as you want to a container, simply by adding
    multiple `–v` directives.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过添加多个`–v`指令，将任意数量的数据卷添加到容器中。
- en: A very good thing about data volumes is that the containers that get data volumes
    passed into them don't know about it, and don't need to know about it either.
    No changes are needed for the container; it works just as if it were writing to
    the local filesystem. You can override existing directories inside containers,
    which is a common thing to do. One usage of this is to have the web root (usually
    at `/var/www` inside the container) in a directory at the Docker host.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数据卷的一个非常好的地方是，传递给容器的数据卷容器本身并不需要了解它的存在，也不需要做任何处理。容器不需要做任何更改，它就像写入本地文件系统一样工作。你可以覆盖容器内的现有目录，这也是常见的做法。其一用途就是将Web根目录（通常位于容器内的`/var/www`）放在Docker主机上的某个目录下。
- en: Mounting a host directory as a data volume
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将主机目录挂载为数据卷
- en: 'You can mount a directory (or file) from your host on your container:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将主机上的目录（或文件）挂载到容器中：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will mount the host's local directory, `/home/web/wp-one`, as `/var/www`
    on the container. If you want to give the container only the read permission,
    you can change the directive to `–v /home/web/wp-one:/var/www:ro` where the `:ro`
    is the read-only flag.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把主机上的本地目录`/home/web/wp-one`挂载到容器的`/var/www`。如果你只想赋予容器读取权限，可以将指令改为`–v /home/web/wp-one:/var/www:ro`，其中`:ro`表示只读权限。
- en: It's not very common to use a `host` directory as a data volume in production,
    since data in a directory isn't very portable. But it's very convenient when testing
    how your service container behaves when the source code changes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中使用`host`目录作为数据卷并不常见，因为目录中的数据并不具有很好的可移植性。但在测试服务容器如何响应源代码更改时，这种做法非常方便。
- en: Any change you make in the host directory is direct in the container's mounted
    data volume.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你在主机目录中做的任何更改都会直接影响到容器中挂载的数据卷。
- en: Mounting a data volume container
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挂载数据卷容器
- en: A more common way of handling data is to use a container whose only task is
    to hold data. The services running in the container should be as few as possible,
    thus keeping it as stable as possible.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 处理数据的一个更常见的方法是使用一个专门用于存储数据的容器。该容器中运行的服务应尽量少，以保持其稳定性。
- en: Data volume containers can have exposed volumes via the Dockerfile's `VOLUME`
    keyword, and these volumes will be mounted on the service container while using
    the data volume container with the `--volumes-from` directive.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数据卷容器可以通过Dockerfile中的`VOLUME`关键字暴露卷，这些卷将在使用数据卷容器时通过`--volumes-from`指令挂载到服务容器上。
- en: 'A very simple Dockerfile with a `VOLUME` directive can look like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常简单的Dockerfile，带有`VOLUME`指令，可能如下所示：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A container using the preceding Dockerfile will mount `/var/www`. To mount
    the volumes from a data container onto a service container, we create the data
    container and then mount it, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面提到的Dockerfile的容器会挂载`/var/www`。为了将数据容器的卷挂载到服务容器上，我们首先创建数据容器，然后按如下方式挂载：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Backing up and restoring data volumes
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据卷的备份与恢复
- en: 'Since the data in a data volume is shared between containers, it''s easy to
    access the data by mounting it onto a temporary container. Here''s how you can
    create a `.zip` file (from your host) from the data inside a data volume container
    that has `VOLUME ["/var/www"]` in its Dockerfile:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据卷中的数据是多个容器共享的，所以通过将数据挂载到临时容器上来访问数据非常简单。以下是如何从一个包含 `VOLUME ["/var/www"]`
    的数据卷容器中的数据创建一个 `.zip` 文件（从你的主机中）：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This creates a `.zip` file named `data-containers-www.zip`, containing what
    was in the. `www` data container from `var` directory. This `.zip` file places
    that content in your current host directory.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `data-containers-www.zip` 的 `.zip` 文件，里面包含了来自 `var` 目录中 `www` 数据容器的内容。这个
    `.zip` 文件会将内容放入你当前的主机目录中。
- en: Creating a data volume images
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据卷镜像
- en: Since our data volume container will just hold our data, we should keep it as
    small as possible to start with so that it doesn't take lots of unnecessary space
    on the server. The data inside the container can, of course, grow to be as big
    as the space on the server's disk. We don't need anything fancy at all; we just
    need a working file storage system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的数据卷容器仅用于存储数据，因此我们应尽量将其保持尽可能小，以免占用服务器上过多不必要的空间。容器中的数据当然可以增长到与服务器磁盘空间相等的大小。我们不需要任何复杂的东西；只需要一个正常工作的文件存储系统。
- en: For this book, we'll keep all our data (MySQL database files and WordPress files)
    in the same container. You can, of course, separate them into two data volume
    containers named something like `dbdata` and `webdata`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我们将所有数据（MySQL 数据库文件和 WordPress 文件）保存在同一个容器中。当然，你也可以将它们分开存储到两个数据卷容器中，命名为
    `dbdata` 和 `webdata` 之类的名称。
- en: Data volume image
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据卷镜像
- en: 'Our data volume image does not need anything other than a working filesystem
    that we can read and write to. That''s why our base image of choice will be BusyBox.
    This is how BusyBox describes itself:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据卷镜像除了一个可以读写的工作文件系统外，不需要其他任何东西。这就是为什么我们选择的基础镜像是 BusyBox。以下是 BusyBox 对自己的描述：
- en: '*"BusyBox combines tiny versions of many common UNIX utilities into a single
    small executable. It provides replacements for most of the utilities you usually
    find in GNU fileutils, shellutils, etc. The utilities in BusyBox generally have
    fewer options than their full-featured GNU cousins; however, the options that
    are included provide the expected functionality and behave very much like their
    GNU counterparts. BusyBox provides a fairly complete environment for any small
    or embedded system."*'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“BusyBox 将许多常见的 UNIX 工具的精简版本组合成一个小型可执行文件。它提供了 GNU 文件工具、shell 工具等大多数工具的替代品。BusyBox
    中的工具通常比它们功能齐全的 GNU 版本选项更少；然而，包含的选项提供了预期的功能，且行为非常像它们的 GNU 版本。BusyBox 为任何小型或嵌入式系统提供了一个相当完整的环境。”*'
- en: 'That sounds great! We''ll go ahead and add this to our Dockerfile:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来不错！我们将继续将其添加到 Dockerfile 中：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Exposing mount points
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示挂载点
- en: 'There is a `VOLUME` instruction for the Dockerfile, where you can define which
    directories to expose to other containers when this data volume container is added
    using `--volumes-from` attribute. In our data volume containers, we first need
    to add a directory for MySQL data. Let''s take a look inside the MySQL image we
    will be using to see which directory is used for the data storage, and expose
    that directory to our data volume container so that we can own it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile 中有一个 `VOLUME` 指令，你可以定义在使用 `--volumes-from` 属性添加此数据卷容器时，哪些目录将暴露给其他容器。在我们的数据卷容器中，我们首先需要为
    MySQL 数据添加一个目录。让我们查看将要使用的 MySQL 镜像，看看哪个目录用于数据存储，并将该目录暴露给我们的数据卷容器，以便我们能够使用它：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We also want our WordPress installation in this container, including all `.php`
    files and graphic images. Once again, we go to the image we will be using and
    find out which directory will be used. In this case, it''s `/var/www/html`. When
    you add this to the Dockerfile, don''t add new lines; just append the lines with
    the MySQL data directory:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望在此容器中安装 WordPress，包括所有的 `.php` 文件和图像文件。再次，我们查看将要使用的镜像，找出哪个目录将被使用。在这种情况下，是
    `/var/www/html`。将此添加到 Dockerfile 时，不要添加新行；只需在现有行后追加 MySQL 数据目录：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The Dockerfile
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dockerfile
- en: 'The following is a simple Dockerfile for the data image:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于数据镜像的简单 Dockerfile：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And that's it! When publishing images to the Docker Registry Hub, it's good
    to include a `MAINTAINER` instruction in the Dockerfiles so that you can be contacted
    if someone wants, for some reason.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！在将镜像发布到 Docker Registry Hub 时，最好在 Dockerfile 中包含 `MAINTAINER` 指令，这样如果有人有任何原因需要联系你，就能找到你。
- en: Hosting on GitHub
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管在 GitHub 上
- en: When we use our knowledge on how to host Docker image sources on GitHub and
    how to publish images on the Docker Registry Hub, it'll be no problem creating
    our data volume image.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们利用如何在 GitHub 上托管 Docker 镜像源和如何在 Docker 注册中心发布镜像的知识时，创建数据卷镜像就不成问题了。
- en: 'Let''s create a branch and a Dockerfile and add the content for our data volume
    image:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个分支和一个 Dockerfile，并为我们的数据卷镜像添加内容：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On line number 2 in the preceding code, you can use the text editor of your
    choice. I just happen to find `vi` suits my needs. The content you should add
    to the Dockerfile is this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面代码的第 2 行，你可以使用你喜欢的文本编辑器。我个人觉得 `vi` 很适合我。你应该添加到 Dockerfile 的内容是这样的：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Replace the maintainer information with your name and e-mail.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 用你的姓名和电子邮件替换维护者信息。
- en: 'You can—and should—always ensure that it works before committing and pushing
    to GitHub. To do so, you need to build a Docker image from your Dockerfile:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以——而且应该——始终确保它在提交和推送到 GitHub 之前正常工作。为此，你需要从你的 Dockerfile 构建一个 Docker 镜像：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Make sure you notice the dot at the end of the line, which means that Docker
    should look for a Dockerfile in the current directory. Docker will try to build
    an image from the instructions in our Dockerfile. It should be pretty fast, since
    it's a small base image and there's nothing but a couple of `VOLUME` instructions
    on top of it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你注意到行末的点，这意味着 Docker 应该在当前目录中查找 Dockerfile。Docker 将尝试根据我们 Dockerfile 中的指令构建镜像。由于这是一个小的基础镜像，上面只有几个
    `VOLUME` 指令，它的构建应该相当快。
- en: 'The screenshot is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 截图如下：
- en: '![Hosting on GitHub](img/3946OT_04_01.png.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![托管在 GitHub 上](img/3946OT_04_01.png.jpg)'
- en: 'When everything works as we want, it''s time to commit the changes and push
    it to our GitHub repository:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切按我们预期工作时，是时候提交更改并将其推送到我们的 GitHub 仓库了：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When you have pushed it to the repository, head over to GitHub to verify that
    your new branch is present there.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将其推送到仓库后，前往 GitHub 验证你的新分支是否已经出现。
- en: 'The following screenshot shows the GitHub repository:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 GitHub 仓库：
- en: '![Hosting on GitHub](img/3946OT_04_02.png.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![托管在 GitHub 上](img/3946OT_04_02.png.jpg)'
- en: Publishing on the Docker Registry Hub
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Docker 注册中心发布
- en: Now that we have our new branch on GitHub, we can go to the Docker Hub Registry
    and create a new automated build, named `data`. It will have our GitHub data branch
    as source.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在 GitHub 上有了新的分支，我们可以去 Docker Hub 注册中心创建一个新的自动构建，命名为 `data`。它将以我们的 GitHub
    数据分支为源。
- en: '![Publishing on the Docker Registry Hub](img/3946OT_04_03.png.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![在 Docker 注册中心发布](img/3946OT_04_03.png.jpg)'
- en: Wait for the build to finish, and then try to pull the image with your Docker
    daemon to verify that it's there and it's working.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 等待构建完成，然后尝试通过你的 Docker 守护进程拉取镜像，验证它是否存在并且可以正常工作。
- en: 'The screenshot will be as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 截图如下：
- en: '![Publishing on the Docker Registry Hub](img/3946OT_04_04.png.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![在 Docker 注册中心发布](img/3946OT_04_04.png.jpg)'
- en: Amazing! Check out the size of the image; it's just less than 2.5 MB. This is
    perfect since we just want to store data in it. A container on top of this image
    can, of course, be as big as your hard drive allows. This is just to show how
    big the image is. The image is read-only, remember?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！看看这个镜像的大小；它不到 2.5 MB。非常完美，因为我们只是想在其中存储数据。基于这个镜像的容器当然可以大到你的硬盘允许的大小。这只是为了展示镜像的大小。镜像是只读的，记住了吗？
- en: Running a data volume container
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行数据卷容器
- en: Data volume containers are special; they can be stopped and still fulfill their
    purpose. Personally, I like to see all containers in use when executing `docker
    ps` command, since I like to delete stopped containers once in a while.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 数据卷容器是特殊的；它们可以被停止，仍然能够完成它们的任务。就我个人而言，我喜欢在执行 `docker ps` 命令时看到所有容器的使用情况，因为我喜欢定期删除停止的容器。
- en: 'This is totally up to you. If you''re okay with keeping the container stopped,
    you can start it using this command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个完全取决于你。如果你可以接受保持容器停止，你可以使用这个命令来启动它：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `true` argument is just there to enter a valid command, and the `–d` argument
    places the container in detached mode, running in the background.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`true` 参数仅用于输入有效命令，`–d` 参数使容器处于分离模式，在后台运行。'
- en: 'If you want to keep the container running, you need to place a service in the
    foreground, like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望容器保持运行，你需要将一个服务放在前台，像这样：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出如下：
- en: '![Running a data volume container](img/3946OT_04_05.png.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![运行数据卷容器](img/3946OT_04_05.png.jpg)'
- en: The `tail –f /dev/null` command is a command that never ends, so the container
    will be running until we stop it. Resource-wise, the `tail` command is pretty
    harmless.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`tail –f /dev/null` 命令是一个永不结束的命令，因此容器会一直运行，直到我们停止它。从资源角度来看，`tail` 命令是相当无害的。'
- en: Passing parameters to containers
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向容器传递参数
- en: 'We have seen how to give containers parameters or environment variables when
    starting the official MySQL container:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，如何在启动官方 MySQL 容器时给容器传递参数或环境变量：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `–e MYSQL_ROOT_PASSWORD=pw command` is an example showing how you can do
    it. It means that the `MYSQL_ROOT_PASSWORD` environment variable inside the container
    has `pw` as the value.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`–e MYSQL_ROOT_PASSWORD=pw` 命令是一个示例，展示了如何进行操作。它表示容器内的 `MYSQL_ROOT_PASSWORD`
    环境变量的值为 `pw`。'
- en: This is a very convenient way to have configurable containers where you can
    have a setup script as `ENTRYPOINT` or a foreground script configuring passwords;
    hosts; test, staging, or production environments; and other settings that the
    container needs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常方便的方式，可以创建可配置的容器，在这些容器中，你可以将设置脚本作为 `ENTRYPOINT`，或者配置前台脚本来设置密码；主机；测试、预发布或生产环境；以及容器所需的其他设置。
- en: Creating a parameterized image
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个参数化镜像
- en: Just to get the hang of this feature, which is very good, let's create a small
    Docker image that converts a string to uppercase or lowercase, depending on the
    state of an environment variable.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟悉这个非常好的功能，我们来创建一个小的 Docker 镜像，它根据环境变量的状态将字符串转换为大写或小写。
- en: 'The Docker image will be based on the latest Debian distribution and will have
    only an `ENTRYPOINT` command. This is the `Dockerfile`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Docker 镜像将基于最新的 Debian 发行版，并且只会有一个 `ENTRYPOINT` 命令。以下是 `Dockerfile`：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This takes the `case.sh` file from our current directory, adds it to the container,
    makes it executable, and assigns it as `ENTRYPOINT`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这条命令将从当前目录中取出 `case.sh` 文件，添加到容器中，使其可执行，并将其指定为 `ENTRYPOINT`。
- en: 'The `case.sh` file may look something like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`case.sh` 文件可能是这样的：'
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This file checks whether the `$STR` and `$TO_CASE` environment variables are
    set. If the check on whether `$TO_CASE` is `upper` or `lower` is done and if that
    fails, an error message saying that we only handle `upper` and `lower` is displayed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件检查 `$STR` 和 `$TO_CASE` 环境变量是否已设置。如果检查 `$TO_CASE` 是否为 `upper` 或 `lower` 时失败，系统会显示一个错误信息，提示我们只处理
    `upper` 和 `lower`。
- en: If `$TO_STR` was set to `upper` or `lower`, the content of the environment variable
    `$STR` is transformed to uppercase or lowercase respectively, and then printed
    to `stdout`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `$TO_STR` 被设置为 `upper` 或 `lower`，环境变量 `$STR` 的内容会分别转换为大写或小写，并打印到 `stdout`。
- en: Let's try this!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来试试这个！
- en: '![Creating a parameterized image](img/3946OT_04_06.png.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![创建参数化镜像](img/3946OT_04_06.png.jpg)'
- en: 'Here are some commands we can try:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些我们可以尝试的命令：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This seems to be working as expected, at least for this purpose. Now we have
    created a container that takes parameters and acts upon them.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来按预期工作，至少在这个目的下是如此。现在我们已经创建了一个容器，可以接受参数并对其进行处理。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned that you can keep your data out of your service
    containers using data volumes. Data volumes can be any one of directories, files
    from the host's filesystem, or data volume containers.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学到可以通过数据卷将数据与服务容器分离。数据卷可以是主机文件系统中的目录、文件或数据卷容器。
- en: We explored how we can pass parameters to containers and how to read them from
    inside `ENTRYPOINT`. Parameters are a great way to configure containers, making
    it easier to create more generalized Docker images.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了如何将参数传递给容器，并如何从 `ENTRYPOINT` 内部读取它们。参数是配置容器的一个很好的方式，使得创建更加通用的 Docker 镜像变得更加容易。
- en: We created a data volume container and published it to the Docker Registry Hub,
    preparing us for the next chapter, where we will connect our three containers
    to create one loosely coupled unit.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个数据卷容器，并将其发布到 Docker 注册中心，为下一章做准备，在下一章中，我们将连接三个容器，形成一个松耦合的单元。
