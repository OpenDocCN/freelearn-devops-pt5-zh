- en: Security Automation with the CI Pipeline
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI管道中的安全自动化
- en: We have reviewed white box testing tips and security testing toolsets. This
    chapter will focus on security practices in the development phases, as well as
    how to integrate tools such as Jenkins into continuous integration. In the development
    phases, we explored the techniques of using IDE plugins to secure code scanning,
    and suggested some static code analysis tools. For the build and package delivery,
    secure compiler configurations and dependency vulnerability checks will also be
    introduced. Finally, web security automation testing approaches and tips will
    also be discussed in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经回顾了白盒测试技巧和安全测试工具集。本章将重点介绍开发阶段的安全实践，以及如何将Jenkins等工具集成到持续集成中。在开发阶段，我们探讨了使用IDE插件进行安全代码扫描的技术，并建议了一些静态代码分析工具。对于构建和包交付，还将介绍安全编译器配置和依赖漏洞检查。最后，本章还将讨论Web安全自动化测试方法和技巧。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Security in continuous integration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成中的安全性
- en: Security practices in development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发阶段的安全实践
- en: Web testing in proactive/proxy mode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主动/代理模式下的Web测试
- en: Web automation testing tips
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web自动化测试技巧
- en: Security automation in Jenkins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins中的安全自动化
- en: Security in continuous integration
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成中的安全性
- en: Most of the development team's daily activities include coding, compiling/building,
    testing, and deployment. Our goal is to build security automation practices into
    these activities. In the coding stage, the development team can use IDE plugins
    to do security source code analysis. In the build stage, we scan for the secure
    hardened compiling options and the known vulnerabilities of the dependency components,
    as well as the secure source code for the whole project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队的日常活动包括编码、编译/构建、测试和部署。我们的目标是将安全自动化实践融入到这些活动中。在编码阶段，开发团队可以使用IDE插件进行安全源代码分析。在构建阶段，我们扫描安全强化的编译选项、依赖组件的已知漏洞，以及整个项目的安全源代码。
- en: Once the build is ready and installed on the staging environment, more comprehensive
    security scanning will be performed, such as dynamic web security testing by OWASP
    ZAP, infrastructure configuration security, and secure communication protocols.
    In the production deployment, security scanning will also be performed regularly,
    and will be more focused on security monitoring instead of the source code or
    dynamic web security testing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成并安装到预发布环境中，将进行更全面的安全扫描，例如使用OWASP ZAP进行动态Web安全测试、基础设施配置安全性和安全通信协议。在生产部署阶段，也会定期进行安全扫描，并且更多关注于安全监控，而非源代码或动态Web安全测试。
- en: 'The following diagram shows the security practices in each phase, namely, coding,
    build, testing, and production deployment:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了每个阶段的安全实践，即编码、构建、测试和生产部署：
- en: '![](img/00042.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00042.jpeg)'
- en: Security practices in development
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发阶段的安全实践
- en: 'The security practices of the development team consist of secure coding and
    secure build delivery. For the secure coding, we can have an IDE plugin do the
    code scanning, or we can also require security unit testing and run a static code
    scan of the whole project. For the secure build delivery, we need to ensure that
    the compiler options are configured properly and review all the dependency components
    for known vulnerabilities. The following diagram shows the overall security practices
    we can plan into the development stage. We will introduce some of the open source
    security tools and practices for these security activities in the upcoming sections:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队的安全实践包括安全编码和安全构建交付。对于安全编码，我们可以让IDE插件进行代码扫描，或者要求进行安全单元测试并运行整个项目的静态代码扫描。对于安全构建交付，我们需要确保编译器选项正确配置，并审查所有依赖组件的已知漏洞。以下图表展示了我们可以在开发阶段规划的整体安全实践。接下来的章节中，我们将介绍一些用于这些安全活动的开源安全工具和实践：
- en: '![](img/00043.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00043.jpeg)'
- en: IDE plugins to automate the code review
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化代码审查的IDE插件
- en: The key advantages of using the IDE plugins to perform the automated security
    code review is that the tools can provide informative suggestions for fixes during
    the coding stage. It works in a similar way to a spellchecker. This will reduce
    lots of code review efforts and security defects that can't be detected by blackbox
    testing. The disadvantage is that this kind of static code scanning may introduce
    some annoying false positives, and the developer team may ignore or forget to
    use the IDE plugins to do static secure code analysis.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IDE 插件进行自动化安全代码审查的主要优势是，这些工具可以在编码阶段提供修复的有用建议，类似于拼写检查器的工作方式。这将大大减少代码审查的工作量，并能发现黑盒测试无法检测的安全缺陷。缺点是，这种静态代码扫描可能会引入一些恼人的误报，开发团队可能忽视或忘记使用
    IDE 插件进行静态安全代码分析。
- en: The following table shows some of the open source IDE plugins that can help
    developers to detect security and coding errors. Only open source tools are listed
    here, although there are also many good commercial tools that are available.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格展示了一些可以帮助开发人员检测安全和编码错误的开源 IDE 插件。这里只列出了开源工具，尽管也有许多优秀的商业工具可供选择。
- en: 'DevSkim is recommended not only because it can support multiple languages,
    but also because it supports a wide range of IDEs, such as VS, VS Code, Sublime
    Text, and so on. In addition, writing scanning rules for DevSkim is also simple
    in JSON format. Refer to  [https://github.com/Microsoft/DevSkim/wiki/Sample-Rule](https://github.com/Microsoft/DevSkim/wiki/Sample-Rule) for
    more information:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐使用 DevSkim，不仅因为它支持多种语言，还因为它支持多种 IDE，如 VS、VS Code、Sublime Text 等。此外，编写 DevSkim
    扫描规则也很简单，采用 JSON 格式。更多信息请参见 [https://github.com/Microsoft/DevSkim/wiki/Sample-Rule](https://github.com/Microsoft/DevSkim/wiki/Sample-Rule)：
- en: '| **Tools** | **Supported programming language** | **Reference** |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| **工具** | **支持的编程语言** | **参考** |'
- en: '| FindSecBugs | Java |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| FindSecBugs | Java |'
- en: '[https://find-sec-bugs.github.io/](https://find-sec-bugs.github.io/)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://find-sec-bugs.github.io/](https://find-sec-bugs.github.io/)'
- en: '|'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| PMD | Java |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| PMD | Java |'
- en: '[https://pmd.github.io/](https://pmd.github.io/)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://pmd.github.io/](https://pmd.github.io/)'
- en: '|'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| DevSkim | All |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| DevSkim | 支持所有语言 |'
- en: '[https://github.com/Microsoft/DevSkim](https://github.com/Microsoft/DevSkim)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/Microsoft/DevSkim](https://github.com/Microsoft/DevSkim)'
- en: '|'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Although we would like the code review to be done automatically by the tools,
    there may be an occasion where we want to execute a team peer code review and
    require a team collaboration portal to comment on or discuss the code quality.
    For a team code review platform, the following open source tools are recommended:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们希望代码审查能够通过工具自动完成，但有时我们可能需要执行团队同侪代码审查，并且需要一个团队协作平台来评论或讨论代码质量。对于团队代码审查平台，推荐以下开源工具：
- en: '**Gerrit:** It provided a web-based UI code review for the GIT source code. [www.gerritcodereview.com](http://www.gerritcodereview.com)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gerrit:** 它提供了一个基于 Web 的 UI 代码审查工具，适用于 GIT 源代码。[www.gerritcodereview.com](http://www.gerritcodereview.com)'
- en: '**Phabricator:** Phabricator is an open source tool which integrates not only
    code review tools but also bug tracking.  [www.phacility.com](http://www.phacility.com)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Phabricator:** Phabricator 是一个开源工具，集成了代码审查工具和缺陷跟踪功能。[www.phacility.com](http://www.phacility.com)'
- en: 'For the peer code review practices, consider creating a code review checklist
    or refer to the OWASP cheat sheet or OWASP SCP (secure coding practices):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于同侪代码审查实践，建议创建一个代码审查检查表，或者参考 OWASP 随机书或 OWASP SCP（安全编码实践）：
- en: Static code analysis
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态代码分析
- en: Static code scanning analysis is an effective source-level security inspection
    in CI frameworks, such as Jenkins or Travis. The development team may not fully
    apply IDE code-scanning plugins to do the secure code analysis. In that case,
    the static code analysis adoption into the CI framework will help to enforce the
    secure code scanning for all projects. In other words, the integration with the
    static security code analysis tools and Jenkins is a must in the development stage.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 静态代码扫描分析是在 CI 框架中（如 Jenkins 或 Travis）进行源代码级别安全检查的一种有效方式。开发团队可能不会完全应用 IDE 代码扫描插件来进行安全代码分析。在这种情况下，将静态代码分析集成到
    CI 框架中有助于确保所有项目都进行安全代码扫描。换句话说，静态安全代码分析工具与 Jenkins 的集成是开发阶段的必要步骤。
- en: 'The following table lists some of the static code analysis tools. You can also
    refer to [Chapter 8](part0145.html#4A91I0-993778ed0b7e4894800dd46a3f389a65), *Secure
    Coding Best Practices*, for other suggested tools:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了部分静态代码分析工具。你还可以参考[第8章](part0145.html#4A91I0-993778ed0b7e4894800dd46a3f389a65)，*安全编码最佳实践*，以获取其他推荐工具：
- en: '| **Tools** | **Supported Programming language** | **Characteristics** |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| **工具** | **支持的编程语言** | **特点** |'
- en: '| Grep Rough Audit | All | It''s a simple script to detect security flaws in
    the source code by using GREP and regular expression for common security patterns. 
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| Grep Rough Audit | 所有 | 这是一种简单的脚本，通过使用 GREP 和正则表达式来检测源代码中的安全漏洞，适用于常见的安全模式。
    |'
- en: '| Flawfinder | C/C+ | It''s a simple tool to scan for the security issue in
    C/C++ security issue in C/C++ source code.   |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| Flawfinder | C/C+ | 这是一种简单的工具，用于扫描 C/C++ 源代码中的安全问题。 |'
- en: '| Brakeman | Ruby on Rails | Brakeman is mainly focused on the security issue
    in Ruby code. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| Brakeman | Ruby on Rails | Brakeman 主要关注 Ruby 代码中的安全问题。 |'
- en: '| SonarQube | All | The SonarQube is a source code quality analysis tool. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| SonarQube | 所有 | SonarQube 是一款源代码质量分析工具。 |'
- en: '| GREP IT | All | It''s one Linux shell script which can do the code scanning.
    No other dependencies required.  |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| GREP IT | 所有 | 这是一种 Linux shell 脚本，可以进行代码扫描。无需其他依赖项。 |'
- en: '| NodeJsScan | NodeJS | It''s mainly used to scan NodeJS security issue. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| NodeJsScan | NodeJS | 它主要用于扫描 NodeJS 中的安全问题。 |'
- en: '| ScanJS | JavaScript | The ScanJS can identify the uses of high-risk JavaScript
    API such as eval, execScript, document.write and so on. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| ScanJS | JavaScript | ScanJS 可以识别使用高风险的 JavaScript API，如 eval、execScript、document.write
    等。 |'
- en: '| Bandit | Python | It scans the security issue for Python source code. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| Bandit | Python | 它扫描 Python 源代码中的安全问题。 |'
- en: Secure compiler configuration
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全编译器配置
- en: The secure compiler configuration means that you can enable the compile-time
    defenses against memory corruption issues to execute unexpected exploit code.
    These mitigations may include RELRO, **address space layout randomization** (**ASLR**),
    **NoExecute** (**NX**), stack canaries, and **position-independent executables**
    (**PIE**). These secure compiler configurations should be done during the development
    stage.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安全编译器配置意味着你可以启用针对内存损坏问题的编译时防御，防止执行意外的攻击代码。这些缓解措施可能包括 RELRO、**地址空间布局随机化**（**ASLR**）、**不可执行**（**NX**）、栈金丝雀和**位置无关可执行文件**（**PIE**）。这些安全编译器配置应该在开发阶段完成。
- en: 'The following table shows some of the available mitigation:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了一些可用的缓解措施：
- en: '| **Mitigation** | **Visual Studio compiler options** |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| **缓解措施** | **Visual Studio 编译器选项** |'
- en: '| Stack randomization | /DyNAMICBASE |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 栈随机化 | /DyNAMICBASE |'
- en: '| Buffer overrun defenses | /GS |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 缓冲区溢出防护 | /GS |'
- en: '| NoExecute (NX) | /NXCOMPAT |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 不可执行（NX） | /NXCOMPAT |'
- en: '| Exception handler protection | /SAFESEH |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 异常处理器保护 | /SAFESEH |'
- en: 'The following table shows the common build flags for GCC and G++ compiler drivers:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了 GCC 和 G++ 编译器驱动程序的常见构建标志：
- en: '| **Mitigation** | **Compiler and linker flags for GCC** |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **缓解措施** | **GCC 编译器和链接器标志** |'
- en: '| Address | -fPIC |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 地址 | -fPIC |'
- en: '| NoExecute stack | -Wl, -z, noexecstack |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 不可执行栈 | -Wl, -z, noexecstack |'
- en: '| GOT protection | -Wl, -z, relro |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| GOT 保护 | -Wl, -z, relro |'
- en: '| Stack protector | -fstack-protector |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 栈保护 | -fstack-protector |'
- en: '| ASLR | Echo 1 > /proc/sys/kernel/randomize_va_space |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| ASLR | Echo 1 > /proc/sys/kernel/randomize_va_space |'
- en: 'The following tools can be used to verify the correct secure compiler configuration:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工具可用于验证正确的安全编译器配置：
- en: '**CheckSEC for Linux**: [www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CheckSEC for Linux**: [www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)'
- en: '**Microsoft BinScope**: [https://www.microsoft.com/en-us/download/details.aspx?id=44995](https://www.microsoft.com/en-us/download/details.aspx?id=44995)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft BinScope**: [https://www.microsoft.com/en-us/download/details.aspx?id=44995](https://www.microsoft.com/en-us/download/details.aspx?id=44995)'
- en: The secure compiler configurations are low-hanging fruits for the buffer overflow
    security mitigations. This security practice is often neglected by the development
    team. Make sure that the security configurations are done at compile time, and
    also verify the binary packages in the testing stage.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安全编译器配置是缓冲区溢出安全缓解的低挂果实。这种安全实践常常被开发团队忽视。确保在编译时进行安全配置，并在测试阶段验证二进制包。
- en: Dependency check
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项检查
- en: Known vulnerabilities in third-party components or dependencies are considered
    to be parts of the OWASP Top 10 List of Using Components with Known Vulnerabilities.
    These known vulnerable components should be identified at an early development
    stage. It is also suggested that you perform the vulnerability scanning of the
    dependency components not only in the development stage but also in the production
    stage on a regular basis.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方组件或依赖项中的已知漏洞被认为是 OWASP 十大使用已知漏洞组件名单的一部分。这些已知的漏洞组件应在开发早期阶段就进行识别。建议你不仅在开发阶段进行依赖组件的漏洞扫描，还应定期在生产阶段进行漏洞扫描。
- en: 'The following tools will help you scan for vulnerable components:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工具可以帮助你扫描脆弱的组件：
- en: '| **Tool** | **Supported languages** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **工具** | **支持的语言** |'
- en: '| OWASP Dependency Check | The OWASP Dependency Check scans for dependency
    vulnerabilities in Java, Ruby, PHP, JavaScript, Python, and .NET.  |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| OWASP 依赖性检查 | OWASP 依赖性检查扫描 Java、Ruby、PHP、JavaScript、Python 和 .NET 中的依赖性漏洞。
    |'
- en: '| Retire.JS  | Retire.JS scans for vulnerable JavaScript libraries. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| Retire.JS  | Retire.JS 扫描脆弱的 JavaScript 库。 |'
- en: '| Snyk | Snyk scans for the JS, Ruby, Python, Java vulnerabilities. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| Snyk | Snyk 扫描 JS、Ruby、Python 和 Java 的漏洞。 |'
- en: Web testing in proactive/proxy mode
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网站测试的主动/代理模式
- en: 'Dynamic web testing tools, such as OWASP ZAP, Arachni, Wapiti and W3af, normally
    provide two modes of security testing: proactive mode and proxy mode. The proactive
    mode means that you launch the testing tools and perform security testing directly
    on the web services. The tester may decide on the types of security testing (such
    as XSS or SQLi) of the target web service. However, the key disadvantage of this
    kind of testing is that you could miss certain permission-required web pages,
    or web pages that may require the right order of page visits. The following diagram
    shows the approach of proactive mode:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 动态网站测试工具，如 OWASP ZAP、Arachni、Wapiti 和 W3af，通常提供两种安全测试模式：主动模式和代理模式。主动模式意味着你启动测试工具，直接对
    web 服务进行安全测试。测试者可以决定对目标 web 服务进行何种类型的安全测试（如 XSS 或 SQLi）。然而，这种测试的一个主要缺点是你可能会错过某些需要权限的网页，或者错过需要特定访问顺序的网页。以下图示展示了主动模式的工作方式：
- en: '![](img/00044.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00044.jpeg)'
- en: The proactive mode
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 主动模式
- en: The proxy mode, which can also be understood as MITM, means that the security
    testing tool is running as a proxy and intercepting traffic between the browser
    client and the target web services. In the proxy mode, the security testing tool
    OWASP ZAP will detect potential security vulnerability issues based on the intercepted
    traffic.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 代理模式，也可以理解为 MITM（中间人攻击），意味着安全测试工具以代理的形式运行，拦截浏览器客户端和目标 web 服务之间的流量。在代理模式下，安全测试工具
    OWASP ZAP 将基于拦截到的流量检测潜在的安全漏洞问题。
- en: 'Take OWASP ZAP as an example. Say that we want OWASP ZAP to be executed in
    proxy mode. This will require the following configurations:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以 OWASP ZAP 为例。假设我们希望将 OWASP ZAP 以代理模式执行。这将需要以下配置：
- en: Launch the OWASP ZAP as proxy mode.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 OWASP ZAP 代理模式。
- en: Configure the client-side proxy to the OWASP ZAP proxy.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将客户端代理配置为 OWASP ZAP 代理。
- en: Install the CA certificate in the OWASP ZAP proxy.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 OWASP ZAP 代理中安装 CA 证书。
- en: 'Proxy mode works best for the project team if they have set up functional automation,
    such as Selenium or Robot Framework. Selenium or Robot Framework will help to
    guide the OWASP ZAP to walk through the web pages, especially those required permission
    pages:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 代理模式对于项目团队而言效果最佳，尤其是在他们已设置了功能自动化（如 Selenium 或 Robot Framework）的情况下。Selenium
    或 Robot Framework 将帮助引导 OWASP ZAP 穿越网页，特别是那些需要权限的页面：
- en: '![](img/00045.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00045.jpeg)'
- en: The proxy mode
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 代理模式
- en: 'In practice, it''s recommended that you execute the web security testing in
    both modes with more than one tool. This is because every security tool may have
    its own strength and weakness of security attacks and detection engines. For example,
    OWASP ZAP and Arachni may be running in proactive scanning and spider mode. Furthermore,
    you can also use the Selenium automation client to guide the Vega or OWASP ZAP
    to visit authenticated pages, and to do deeper fuzz testing on the specified web
    service. Refer to the following diagram for the testing scenarios:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，建议你使用多种工具以两种模式执行网站安全测试。这是因为每个安全工具可能在安全攻击和检测引擎方面都有自己的优缺点。例如，OWASP ZAP
    和 Arachni 可能在主动扫描和蜘蛛模式下运行。此外，你还可以使用 Selenium 自动化客户端引导 Vega 或 OWASP ZAP 访问需要身份验证的页面，并对指定的
    web 服务进行更深入的模糊测试。请参阅以下图示了解测试场景：
- en: '![](img/00046.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.jpeg)'
- en: Web automation testing tips
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web自动化测试提示
- en: 'Simply install and launch OWASP ZAP. Active and passive scanning can only give
    us a preliminary testing result for public web services. The following table contains
    some suggested tips to improve the testing efficiency and effectiveness for uses
    of web automation testing tools, such as ZAP or Arachni:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 只需安装并启动OWASP ZAP。主动和被动扫描只能为我们提供公用Web服务的初步测试结果。以下表格包含一些建议的提示，以提高Web自动化测试工具（如ZAP或Arachni）的测试效率和效果：
- en: '| **Testing tips** | **Description** |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **测试提示** | **描述** |'
- en: '| Integration | To do automated integration, try to understand that the web
    security tools provide the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '| 集成 | 要进行自动化集成，尝试了解Web安全工具提供以下内容：'
- en: Headless execution mode
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无头执行模式
- en: Command-line interface
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行界面
- en: REST API
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API
- en: Jenkins plugin (this may be optional as long as one of te preceding tools is
    provided)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins插件（只要提供了前述工具之一，这可能是可选的）
- en: For example, the OWASP ZAP ([https://github.com/Grunny/zap-cli/](https://github.com/Grunny/zap-cli/))
    provides the ZAP CLI interface, which also helps make the integration easier.
    |
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，OWASP ZAP（[https://github.com/Grunny/zap-cli/](https://github.com/Grunny/zap-cli/)）提供了ZAP
    CLI接口，这也有助于简化集成。 |
- en: '| Authorization testing | To test the guest, user, and admin permissions for
    every web service''s URL or resources will require proper predefined navigation
    workflows. The testing scenario may include the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '| 授权测试 | 测试每个Web服务的访客、用户和管理员权限，需要适当的预定义导航工作流。测试场景可能包括以下内容：'
- en: Session fixation, reuses, expiration
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话固定、重用、过期
- en: User, role, guest, administration permissions
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户、角色、访客、管理员权限
- en: Login, logout, and reauthentication behaviors
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录、登出和重新认证行为
- en: 'There are two main approaches for the security testing:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 安全测试有两种主要方法：
- en: Use Selenium or Robot Framework to do the authentication and use OWASP ZAP to
    detect the security issue
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Selenium或Robot Framework进行身份验证，然后使用OWASP ZAP检测安全问题
- en: Preconfigure the pages or URLs that require authentication in OWASP ZAP or Arachni
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在OWASP ZAP或Arachni中预配置需要身份验证的页面或URL
- en: '|'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Scanning scope | Dynamic web testing may take a very long period of time.
    Properly configure the scanning scope to include or exclude the URLs that are
    being tested. Only apply a complete full scan when the application passes the
    smoke testing. A complete scan can be scheduled to be done on a nightly basis.
    |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 扫描范围 | 动态Web测试可能需要很长时间。正确配置扫描范围，以包括或排除正在测试的URL。仅在应用程序通过冒烟测试后，才进行完整扫描。可以安排完整扫描在夜间进行。
    |'
- en: '| API fuzz | The web service may provide several REST JSON or SOAP XML APIs.
    It''s suggested that you get a complete API list and specifications. Do the fuzz
    testing on the parameters of each API. Once this has been done, run the OWASP
    ZAP or the Arachni in proxy mode to intercept all the API calls. Then, investigate
    these API calls for further fuzz testing with the parameters in the payload.For
    the fuzz security payload test, consider replacing the value of the parameters
    with the following data in the fuzzDB:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '| API模糊测试 | 网络服务可能提供多个REST JSON或SOAP XML API。建议您获取完整的API列表和规范。对每个API的参数进行模糊测试。一旦完成，使用OWASP
    ZAP或Arachni的代理模式来拦截所有API调用。然后，调查这些API调用，以进一步使用有效载荷中的参数进行模糊测试。对于模糊安全有效载荷测试，请考虑将参数的值替换为fuzzDB中的以下数据：'
- en: '[https://github.com/fuzzdb-project/fuzzdb/](https://github.com/fuzzdb-project/fuzzdb/)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/fuzzdb-project/fuzzdb/](https://github.com/fuzzdb-project/fuzzdb/)'
- en: '[https://github.com/minimaxir/big-list-of-naughty-strings/](https://github.com/minimaxir/big-list-of-naughty-strings/)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/minimaxir/big-list-of-naughty-strings/](https://github.com/minimaxir/big-list-of-naughty-strings/)'
- en: 'Radamsa can be used to automatically generate fuzzing data:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Radamsa可以用来自动生成模糊测试数据：
- en: '[https://github.com/aoh/radamsa](https://github.com/aoh/radamsa)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/aoh/radamsa](https://github.com/aoh/radamsa)'
- en: '|'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Business logic | Some web UI workflows need to be operated in order, such
    as shopping for items, ordering the items, and payment. Here are some approaches
    to help you handle this kind of security testing:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '| 业务逻辑 | 某些Web UI工作流需要按顺序操作，例如购买商品、下单和支付。以下是一些帮助您处理这种安全测试的方法：'
- en: Use existing functional Selenium automation UI testing and run the OWASP ZAP
    or Arachni in proxy attack mode.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现有的功能性Selenium自动化UI测试，并在代理攻击模式下运行OWASP ZAP或Arachni。
- en: Use the script provided by OWASP ZAP to integrate with Selenium. Refer to the
    Zap webdriver ([https:/github.com/continuumsecurity/zap-webdriver](https://github.com/continuumsecurity/zap-webdriver))
    as an example.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OWASP ZAP提供的脚本与Selenium集成。参考Zap WebDriver（[https:/github.com/continuumsecurity/zap-webdriver](https://github.com/continuumsecurity/zap-webdriver)）作为示例。
- en: Apply the BDD Security framework ([https://github.com/continuumsecurity/bdd-security/](https://github.com/continuumsecurity/bdd-security/)).
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用BDD安全框架（[https://github.com/continuumsecurity/bdd-security/](https://github.com/continuumsecurity/bdd-security/)）。
- en: Manually operate the web pages to navigate the flow and save the ZAP sessions
    for further security scanning.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动操作网页以导航流程，并保存ZAP会话以进行进一步的安全扫描。
- en: '|'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Security automation in Jenkins
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins中的安全自动化
- en: In this section, we will discuss how to configure Jenkins to trigger the automated
    testing, and also introduce some of the security plugins.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何配置Jenkins以触发自动化测试，并介绍一些安全插件。
- en: 'The following table shows an example of how to configure the command-line ZAP,
    which can be triggered periodically and remotely by a predefined URL:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了如何配置命令行ZAP的示例，可以通过预定义的URL周期性地和远程触发：
- en: '| **Steps** | **Configuration steps** |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| **步骤** | **配置步骤** |'
- en: '| New item | New Item &#124; Enter an Item Name &#124; *"Security Testing"*
    &#124; Freestyle Project &#124; OK |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 新建项目 | 新建项目 &#124; 输入项目名称 &#124; *"安全测试"* &#124; 自由风格项目 &#124; 确定 |'
- en: '| General | Project Name: *"Security Testing"* |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 一般 | 项目名称：*"安全测试"* |'
- en: '| Build Trigger | The automation testing can be triggered by the schedule in
    the following ways. The Build Trigger defines how the tasks can be triggered.
    There are two modes supported: one is the scheduled mode and the other is the
    remote trigger by the REST API:                 Build Periodically: *45  9-17/2 
    *  *  1-5*The automation testing can also be triggered remotely by sending the
    HTTP request:                 Trigger builds remotely:  *ZAP*Once it''s defined,
    this will be the URL that can be triggered remotely to kick off the automation
    execution:`https://<JenkinsHost:8080>/job/Security Testing/build?token=ZAP` |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 构建触发器 | 自动化测试可以通过以下方式触发。构建触发器定义了任务如何触发。支持两种模式：一种是定时模式，另一种是通过REST API远程触发： 
                   定时构建：*45 9-17/2 * * 1-5*自动化测试也可以通过发送HTTP请求远程触发：               
     远程触发构建： *ZAP*定义后，将成为可以远程触发自动化执行的URL：`https://<JenkinsHost:8080>/job/Security
    Testing/build?token=ZAP` |'
- en: '| Build | Build &#124; Add Build StepExecute the Windows batch command: `echo
    ---- the execution of OWASP ZAP for Active Scan----``           zap cli   active-scan   
    http://targetWeb/``     echo ---- The end of OWASP ZAP active Scan ----` |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| Build | 构建 &#124; 添加构建步骤执行Windows批处理命令：`echo ---- 执行OWASP ZAP的主动扫描----``          
    zap cli   active-scan    http://targetWeb/``     echo ---- OWASP ZAP主动扫描结束 ----`
    |'
- en: 'There are some open source security scanning tools that also provide Jenkins
    plugins. In practice, these Jenkins plugins are optional. If you have few projects
    and would like to manage the security scanning status in the Jenkins dashboard,
    these Jenkins plugins will be good choices. However, if you have a lot of projects
    with various kinds of security testing scans, it''s still suggested that you build
    your integrated security testing framework. Please also refer to the [Chapter
    12](part0206.html#64EJS0-993778ed0b7e4894800dd46a3f389a65), *Security Testing
    Toolkits*, for details. The following table lists the common Jenkins plugins that
    are related to software security assessment:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些开源安全扫描工具也提供Jenkins插件。在实际应用中，这些Jenkins插件是可选的。如果你有少量项目并希望在Jenkins仪表板中管理安全扫描状态，这些Jenkins插件将是不错的选择。然而，如果你有大量项目并进行各种类型的安全测试扫描，建议你建立自己的集成安全测试框架。详情请参考[第12章](part0206.html#64EJS0-993778ed0b7e4894800dd46a3f389a65)，*安全测试工具包*。下表列出了与软件安全评估相关的常见Jenkins插件：
- en: '| **Jenkins Security plugins** | **Description** |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **Jenkins安全插件** | **描述** |'
- en: '| ZAP | ZAP is a dynamic web scanning tool. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| ZAP | ZAP是一个动态Web扫描工具。 |'
- en: '| Arachni Scanner | Arachni Scanner is a dynamic web scanning tool. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| Arachni Scanner | Arachni Scanner是一个动态Web扫描工具。 |'
- en: '| Dependency Check plugin | The Dependency Check plugin detects vulnerable
    dependency components. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 依赖检查插件 | 依赖检查插件用于检测易受攻击的依赖组件。 |'
- en: '| FindBugs | FindBugs is a static code analysis tool for Java. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| FindBugs | FindBugs是一个用于Java的静态代码分析工具。 |'
- en: '| SonarQube  | SonarQube is a code quality analysis tool. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| SonarQube | SonarQube是一个代码质量分析工具。 |'
- en: '| 360 FireLine | 360 FireLine is a static code scanner for Java. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 360 FireLine | 360 FireLine是一个用于Java的静态代码扫描工具。 |'
- en: '| HTML Publisher Plugin | The HTML Publisher plugin generates the testing results
    in HTML. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| HTML发布插件 | HTML发布插件生成HTML格式的测试结果。 |'
- en: '| Log Parser Plugin | The Log Parser plugin parses the testing results of the
    security testing tools, such as the number of XSS detected or the number of errors.
    |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 日志解析插件 | 日志解析插件解析安全测试工具的测试结果，如检测到的XSS数量或错误数量。 |'
- en: '| Static Analysis Collector  | The Static Analysis Collector plugin can consolidate
    the results from all other static code analysis plugins, such as Checkstyle, Dry,
    FindBugs, PMD, and Android Lin. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 静态分析收集器 | 静态分析收集器插件可以整合来自其他静态代码分析插件的结果，如Checkstyle、Dry、FindBugs、PMD和Android
    Lin。 |'
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the security practices that take place during
    the continuous integration cycle in the coding, building, testing, and production
    deployment phases. For the development stage, we perform secure code scanning,
    secure compiling checks, and also vulnerable third-party component review. For
    the static code analysis, we also introduced some of the open source scanning
    tools for different programming languages. We have also learned how to enable
    compile-time defenses against buffer overflows, such as ASLR and NX.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们学习了在编码、构建、测试和生产部署阶段持续集成周期中发生的安全实践。在开发阶段，我们进行安全代码扫描、安全编译检查，并且还对易受攻击的第三方组件进行审查。对于静态代码分析，我们还介绍了一些适用于不同编程语言的开源扫描工具。我们还学习了如何启用编译时防御机制来防止缓冲区溢出，如ASLR和NX。
- en: For web security testing, we introduced  testing approaches in proactive and
    proxy modes and discussed  web automation testing tips to improve the testing
    effectiveness in terms of business logic, API fuzz, scanning scope, authorization,
    and integration. We also looked at  Jenkins configurations and  security automation
    plugins in Jenkins, such as ZAP, Arachni, Dependency Check, FindBugs, and SonarQube.
    In the next chapter, we will learn about incident response.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站安全测试中，我们介绍了主动和代理模式下的测试方法，并讨论了提高测试有效性的Web自动化测试技巧，涉及业务逻辑、API模糊测试、扫描范围、授权和集成等方面。我们还介绍了Jenkins配置和Jenkins中的安全自动化插件，如ZAP、Arachni、Dependency
    Check、FindBugs和SonarQube。在下一章，我们将学习关于事件响应的内容。
- en: Questions
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What security practices are related to secure coding?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与安全编码相关的安全实践有哪些？
- en: Security scanning using IDE plugins
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用IDE插件进行安全扫描
- en: Security unit testing
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全单元测试
- en: Static code scanning
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 静态代码扫描
- en: All of the above
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上所有
- en: What does the tool DevSkim do?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevSkim工具是做什么的？
- en: Reverse engineering
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逆向工程
- en: It is an IDE plugin for static code scanning
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是一个用于静态代码扫描的IDE插件
- en: Web security scanning
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站安全扫描
- en: Network security
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络安全
- en: What techniques are used to defend against memory overflow attacks?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 防御内存溢出攻击使用了哪些技术？
- en: Stack randomization
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 堆栈随机化
- en: Nonexecution
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不执行
- en: Exception handler protection
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 异常处理程序保护
- en: All of the above
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上所有
- en: What's the main purpose of using dependency check tools?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用依赖检查工具的主要目的是什麽？
- en: Software integrity
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件完整性
- en: Implements access control
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施访问控制
- en: Scans for known vulnerabilities
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扫描已知的漏洞
- en: Data encryption
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据加密
- en: What security testing can Radamsa be used for?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Radamsa可以用于哪些安全测试？
- en: API fuzz testing
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: API模糊测试
- en: Integrity monitoring
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完整性监控
- en: Dynamic analysis
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动态分析
- en: Mobile application
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动应用
- en: Further reading
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**GitHub automated testing resources**: [https://github.com/atinfo/awesome-test-automation](https://github.com/atinfo/awesome-test-automation)'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub自动化测试资源**：[https://github.com/atinfo/awesome-test-automation](https://github.com/atinfo/awesome-test-automation)'
- en: '**Hardening compiler and linker flags**: [https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/](https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加固编译器和链接器标志**：[https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/](https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/)'
- en: '**Automated security testing for REST APIs**: [https://github.com/flipkart-incubator/Astra](https://github.com/flipkart-incubator/Astra)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REST API的自动化安全测试**：[https://github.com/flipkart-incubator/Astra](https://github.com/flipkart-incubator/Astra)'
