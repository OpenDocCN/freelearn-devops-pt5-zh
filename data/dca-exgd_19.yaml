- en: Mock Exam Questions and Final Notes
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟考试题目和最终备注
- en: This chapter presents some final notes with some mock questions. We will look
    at a brief summary of the exam specification, how it is delivered to you, and
    what topics are more relevant than others.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了一些最终备注和模拟题。我们将简要总结考试规范，考试如何呈现给你，以及哪些主题比其他主题更为相关。
- en: The mock questions prepared for this book are similar to the ones you will get
    during the exam. Please read them carefully because some are multiple-choice.
    Multiple-choice questions will appear in the exam and you should know how to answer
    them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书准备的模拟题与考试中将遇到的题目类似。请仔细阅读它们，因为其中一些是多项选择题。多项选择题将在考试中出现，你应该知道如何作答。
- en: By the end of these questions, you will have a good idea of the format of the
    exam, what kind of questions you will get, and what topics are more relevant than
    others.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些问题，你将对考试的格式、你将遇到的题目类型以及哪些主题更为相关有一个清晰的了解。
- en: Docker Certified Associate exam details
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker认证工程师考试详情
- en: At the time of writing this book, the exam is based on the Docker Enterprise
    platform. Please refer to Docker's site, [https://success.docker.com/certification](https://success.docker.com/certification),
    to obtain the latest information.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 撰写本书时，考试基于Docker Enterprise平台。请参考Docker官网，[https://success.docker.com/certification](https://success.docker.com/certification)，以获取最新的信息。
- en: The Docker Certified Associate exam will validate your Docker Enterprise professional
    skills and usually requires a minimum of 6 to 12 months of platform experience.
    This book teaches these required skills with labs that help you understand the
    platform's concepts and usage.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Docker认证工程师考试将验证你在Docker Enterprise平台上的专业技能，通常需要至少6到12个月的使用经验。本书通过实验帮助你理解平台的概念和用法，教会你这些必备技能。
- en: You can pay for and take this exam online, but it is only available in English.
    Although the Docker site shows that results will be delivered immediately, sometimes
    results can take 24–48 hours to be delivered.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在线支付并参加此考试，但它仅提供英文版本。尽管Docker网站显示结果会立即交付，但有时结果可能需要24到48小时才能交付。
- en: 'The exam consists of 55 questions and the topics covered in this book have
    different values. We recommend you use the Docker Enterprise platform''s 30-day
    free-trial, as there will be many exam questions about Docker Enterprise components
    and management. It is also recommended that you have good knowledge of Docker''s
    command-line actions and options, including how to obtain and filter information
    about Docker resources. These are the topic weights at the time of writing this
    book:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 考试包含55道题目，本书所涵盖的主题具有不同的权重。我们建议你使用Docker Enterprise平台的30天免费试用，因为会有很多关于Docker
    Enterprise组件和管理的考试问题。还建议你熟练掌握Docker的命令行操作和选项，包括如何获取和筛选有关Docker资源的信息。这些是撰写本书时的主题权重：
- en: '**Orchestration**: 25%'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编排**：25%'
- en: '**Image creation, management, and registry**: 20%'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜像创建、管理和注册**：20%'
- en: '**Installation and configuration**: 15%'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装与配置**：15%'
- en: '**Networking**: 15%'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：15%'
- en: '**Security**: 15%'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：15%'
- en: '**Storage and volumes**: 10%'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储与卷**：10%'
- en: This gives you an idea of each topic's importance and the question distribution.
    In the next section, we will provide some questions to help you prepare for the
    exam. They are exam-like questions. Take care because many of them have more than
    one correct answer and you should choose all the right ones. The answers to all
    these questions can be found at the end of this book, in the *Assessments* section.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以帮助你了解每个主题的重要性和问题分布。在接下来的章节中，我们将提供一些模拟题，帮助你为考试做准备。这些题目模拟真实考试。注意，许多题目有多个正确答案，你应该选择所有正确答案。所有这些问题的答案可以在本书的*评估*章节找到。
- en: Mock exam questions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟考试题目
- en: How can we limit the number of CPUs provided to a container?
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何限制提供给容器的CPU数量？
- en: a) Using `--cap-add CPU`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: a) 使用`--cap-add CPU`。
- en: b) Using `--cpuset-cpus`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: b) 使用`--cpuset-cpus`。
- en: c) Using `--cpus`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: c) 使用`--cpus`。
- en: d) It is not possible to specify the number of CPUs; we have to use `--cpu-shares`
    and define the CPU slices.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: d) 无法指定CPU的数量；我们必须使用`--cpu-shares`并定义CPU切片。
- en: How can we limit the amount of memory available to a container?
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何限制容器可用的内存量？
- en: a) It is not possible to limit the amount of memory available to a container.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: a) 无法限制容器可用的内存量。
- en: b) Using `--cap-drop MEM`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: b) 使用`--cap-drop MEM`。
- en: c) Using `--memory`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: c) 使用`--memory`。
- en: d) Using `--memory-reservation`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: d) 使用`--memory-reservation`。
- en: What environment variables should be exported to start using a trusted environment
    with the Docker client?
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该导出哪些环境变量才能开始使用受信环境与 Docker 客户端？
- en: a) `export DOCKER_TRUSTED_ENVIRONMENT=1`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: a) `export DOCKER_TRUSTED_ENVIRONMENT=1`
- en: b) `export DOCKER_CONTENT_TRUST=1`
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: b) `export DOCKER_CONTENT_TRUST=1`
- en: c) `export DOCKER_TRUST=1`
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: c) `export DOCKER_TRUST=1`
- en: d) `export DOCKER_TRUSTED=1`
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: d) `export DOCKER_TRUSTED=1`
- en: How can we increase the number of replicas of a service running one instance
    (mark all the correct answers)?
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何增加运行一个实例的服务的副本数量（标记所有正确答案）？
- en: a) This is not possible for global services.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: a) 这对于全局服务不可行。
- en: b) By updating the number of replicas with `docker service update --replicas
    <NUMBER_OF_REPLICAS> <SERVICE>`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: b) 通过使用 `docker service update --replicas <NUMBER_OF_REPLICAS> <SERVICE>` 更新副本数量。
- en: c) The number of replicas can be increased using `docker service scale <SERVICE>=<NUMBER_OF_REPLICAS>`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: c) 可以通过使用 `docker service scale <SERVICE>=<NUMBER_OF_REPLICAS>` 增加副本数量。
- en: d) We can use `docker service scale up` to create a new replica.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: d) 我们可以使用 `docker service scale up` 创建一个新的副本。
- en: How many replicas does a global service run on nodes if we specify the `node.role!=worker`
    constraint?
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们指定 `node.role!=worker` 限制，全局服务在节点上运行多少副本？
- en: a) Worker and manager nodes will run one replica.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: a) 工作节点和管理节点将运行一个副本。
- en: b) Only workers will run one replica.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: b) 只有工作节点将运行一个副本。
- en: c) Only manager nodes will run one replica.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: c) 只有管理节点将运行一个副本。
- en: d) No nodes will run any replicas.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: d) 没有节点将运行任何副本。
- en: How do we stop all replicas of the service web server, which is currently executing
    three replicas?
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何停止当前执行三个副本的 web 服务器服务的所有副本？
- en: a) Using `docker service stop webserver`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: a) 使用 `docker service stop webserver`。
- en: b) Using `docker rm service webserver`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: b) 使用 `docker rm service webserver`。
- en: c) Using `docker service update --replicas 0 webserver`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: c) 使用 `docker service update --replicas 0 webserver`。
- en: d) None of the preceding answers are correct.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上答案均不正确。
- en: If we publish a service on port `8080` using `-P`, which nodes will expose port
    `8080`?
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们通过 `-P` 在端口 `8080` 上发布服务，哪些节点将暴露端口 `8080`？
- en: a) No node will expose a service on port `8080`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: a) 没有节点将暴露端口 `8080` 上的服务。
- en: b) All nodes will publish port `8080`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: b) 所有节点将发布端口 `8080`。
- en: c) We should use privileged containers to expose port `8080`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们应该使用特权容器来暴露端口 `8080`。
- en: d) We must use `--network=host` to publish ports below port `30000`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: d) 我们必须使用 `--network=host` 来发布 30000 以下的端口。
- en: What step should we follow to remove the leader node from the cluster?
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该遵循什么步骤来移除集群中的领导节点？
- en: a) Ensure all tasks run on other nodes by executing `docker node update --availability=drain
    <LEADER_NODE>`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: a) 通过执行 `docker node update --availability=drain <LEADER_NODE>` 确保所有任务在其他节点上运行。
- en: b) Remove the node from the cluster as the leader by executing `docker swarm
    leave` on the node.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: b) 通过在节点上执行 `docker swarm leave`，将节点从集群中移除作为领导者。
- en: c) Demote the leader node to a worker and then execute `docker swarm leave`
    on the node.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: c) 将主节点降级为工作节点，然后在该节点上执行 `docker swarm leave`。
- en: d) Once the node is out of the cluster, we can remove it completely using `docker
    node rm <OLD_LEADER_NODE>` from any available manager.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: d) 一旦节点离开集群，我们可以通过在任何可用的管理节点上执行 `docker node rm <OLD_LEADER_NODE>` 来完全移除该节点。
- en: Where do we specify that DevOps users can run a container using only images
    signed by the admin group from our Docker Enterprise registry?
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在哪里指定 DevOps 用户只能使用管理员组签名的镜像来运行容器？
- en: a) On **Universal Control Plane's** (**UCP's**) RBAC, we allow DevOps users
    to run their images.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: a) 在 **Universal Control Plane** (**UCP**) 的 RBAC 中，我们允许 DevOps 用户运行他们的镜像。
- en: b) On DTR's image repository, we add image pulling access to DevOps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: b) 在 DTR 的镜像仓库中，我们为 DevOps 用户添加镜像拉取权限。
- en: c) Image access should be configured on **Docker Trusted Registry** (**DTR**),
    and DevOps users should be able to at least read this repository. On UCP, we allow
    only images signed by the admin group on the cluster and add at least scheduler
    access for DevOps users to their private collection.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: c) 镜像访问应该在 **Docker Trusted Registry** (**DTR**) 上配置，且 DevOps 用户至少应能够读取该仓库。在
    UCP 上，我们仅允许集群中管理员组签名的镜像，并为 DevOps 用户的私有仓库至少添加调度器访问权限。
- en: d) This is not possible on Docker Enterprise.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: d) 这在 Docker 企业版中不可行。
- en: What step is required to access images stored on a secure registry that is using
    a self-signed certificate?
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问使用自签名证书的安全仓库中存储的镜像需要执行什么步骤？
- en: a) We can configure our registry as "insecure" in Docker Engine's `daemon.json`
    file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: a) 我们可以在 Docker 引擎的 `daemon.json` 文件中将我们的仓库配置为“不安全”。
- en: b) We should disable Content Trust to allow image pulling from unsecured registries.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们应该禁用内容信任以允许从不安全的仓库拉取镜像。
- en: c) The best option is to trust self-signed certificates. We will add DTR's created
    **Certificate Authority** (**CA**) into our system's trusted-CA list.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: c) 最佳选项是信任自签名证书。我们将把 DTR 创建的 **证书颁发机构**（**CA**）添加到我们系统的受信任 CA 列表中。
- en: d) We cannot use self-signed certificates, therefore we always require an Enterprise-signed
    certificate.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: d) 我们无法使用自签名证书，因此我们总是需要企业签名证书。
- en: '*User A* executed `docker service scale --replicas 5 webserver`, while *user
    B* executed `docker service update --replicas 3 webserver`. How many replicas
    will be running after both executions?'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*用户 A* 执行了 `docker service scale --replicas 5 webserver`，而 *用户 B* 执行了 `docker
    service update --replicas 3 webserver`。在两者执行之后，将会运行多少个副本？'
- en: a) None of the commands will work.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: a) 这些命令都无法执行。
- en: b) The `webserver` service will run three replicas.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: b) `webserver` 服务将运行三个副本。
- en: c) The `webserver` service will run five replicas.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: c) `webserver` 服务将运行五个副本。
- en: d) The `webserver` service will run eight replicas.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: d) `webserver` 服务将运行八个副本。
- en: Which of these lines creates a volume named `DATA`?
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪一行命令会创建名为 `DATA` 的卷？
- en: a) `docker volume create --driver local DATA`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: a) `docker volume create --driver local DATA`。
- en: b) `docker create --volume DATA`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: b) `docker create --volume DATA`。
- en: c) Volumes must be created during container execution.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: c) 卷必须在容器执行时创建。
- en: d) None of the options are valid.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: d) 选项中没有有效的选项。
- en: How can we ensure that a minimum of memory is available to run a container using
    soft limits?
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何确保在运行容器时使用软限制来保证最低的内存可用？
- en: a) We cannot ensure a minimum of memory is available for a container.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: a) 我们无法确保为容器提供最低的内存。
- en: b) Using `--memory`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: b) 使用 `--memory`。
- en: c) This must be configured on your operating system.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: c) 这必须在您的操作系统上进行配置。
- en: d) We use `--memory-reservation`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: d) 我们使用 `--memory-reservation`。
- en: What is true about Swarm networking?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于 Swarm 网络，哪个说法是正确的？
- en: a) All overlay networks are encrypted by default.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: a) 所有覆盖网络默认都是加密的。
- en: b) Control Plane nodes use mutual TLS encryption to secure traffic.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: b) 控制平面节点使用双向 TLS 加密来保护流量。
- en: c) An internal DNS can be consumed externally exposing its service.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: c) 内部 DNS 可以被外部消费并暴露其服务。
- en: d) All of the preceding options are true.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有选项都正确。
- en: Which concept routes requests to containers running for a deployed service?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个概念将请求路由到已部署服务上运行的容器？
- en: a) An `ingress` overlay network is used to route requests to different services'
    backends using a round-robin endpoint by default.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: a) `ingress` 覆盖网络用于默认情况下通过轮询终端路由请求到不同服务的后端。
- en: b) A `docker_gwbridge` network is used to communicate with containers on different
    hosts.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: b) `docker_gwbridge` 网络用于与不同主机上的容器进行通信。
- en: c) An `ingress` overlay network is used to route requests to different services'
    backends using the service's virtual IP by default.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: c) `ingress` 覆盖网络用于默认情况下通过服务的虚拟 IP 路由请求到不同服务的后端。
- en: d) We must use a host network to route requests to containers.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: d) 我们必须使用主机网络来路由请求到容器。
- en: Which of these sentences are true about signing images?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于签名镜像，以下哪些句子是正确的？
- en: a) Image signing ensures image ownership.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: a) 镜像签名确保了镜像的所有权。
- en: b) Images can be signed using `docker trust sign <IMAGE>`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: b) 可以使用 `docker trust sign <IMAGE>` 来签名镜像。
- en: c) All images will be signed if we set the Docker client to use Docker Content
    Trust on every command.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: c) 如果我们在每个命令上设置 Docker 客户端使用 Docker 内容信任，则所有镜像将被签名。
- en: 'd) Image signing is based on the following keys: the owner key, the repository
    key, the snapshot key, and the timestamp.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: d) 镜像签名基于以下密钥：所有者密钥、仓库密钥、快照密钥和时间戳。
- en: What happens if we have a cluster where nodes have `myapplication` images locally
    but images have different hashes?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们有一个集群，其中节点本地有 `myapplication` 镜像，但镜像哈希不同，会发生什么？
- en: a) If we do not specify the image hash, each node will run tasks with its own
    image.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: a) 如果我们没有指定镜像哈希值，每个节点将使用自己的镜像运行任务。
- en: b) To ensure all nodes run the same image version, we will need to use `--with-registry-auth`
    for remote registries.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: b) 为了确保所有节点运行相同的镜像版本，我们需要为远程注册表使用 `--with-registry-auth`。
- en: c) We will use signed images and Docker Engine on nodes that will use trusted
    content.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们将在使用受信内容的节点上使用签名镜像和 Docker 引擎。
- en: d) It is not possible to ensure that nodes will use the right image version.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: d) 无法确保节点使用正确的镜像版本。
- en: Which of the following is true about global services?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个关于全局服务的说法是正确的？
- en: a) Global services will only run one replica of the defined service on each
    node.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: a) 全局服务将只在每个节点上运行定义服务的一个副本。
- en: b) Global services will not provide high availability based on resilience.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: b) 全局服务不会基于弹性提供高可用性。
- en: c) Draining a node will not remove global services.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: c) 使节点排空不会移除全局服务。
- en: d) All of the preceding sentences are true.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有句子都是正确的。
- en: Which of the following sentences are true about replicated services?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些句子关于复制服务是正确的？
- en: a) We need to specify the number of instances during service creation because
    it cannot be changed later.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: a) 我们需要在服务创建时指定实例的数量，因为之后无法更改。
- en: b) Replicated services are the default service mode and they will run one instance
    if none was specified.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: b) 复制服务是默认的服务模式，如果未指定副本数量，它将运行一个实例。
- en: c) Replicated services can be stopped by setting the number of replicas to `0`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: c) 通过将副本数设置为`0`，可以停止复制服务。
- en: d) All of the preceding options are true.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有选项都正确。
- en: Which of the following steps are required to create a Swarm backup?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建Swarm备份需要哪些步骤？
- en: a) Stop Docker Engine on any manager to ensure files are static.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: a) 停止任何管理节点上的Docker Engine，以确保文件保持静态。
- en: b) Copy the `/var/lib/docker/swarm` directory content for backing up Swarm.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: b) 复制`/var/lib/docker/swarm`目录的内容以备份Swarm。
- en: c) Raft logs should be backed up apart from normal files.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: c) Raft日志应该与普通文件分开进行备份。
- en: d) All of the preceding steps are required.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有步骤都是必需的。
- en: What have you learned about Swarm networking?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你学到了什么关于Swarm网络的知识？
- en: a) Overlay networks are deployed using UDP VXLAN tunnels.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: a) 覆盖网络使用UDP VXLAN隧道进行部署。
- en: b) By default, all service replicas will be equally reachable by an internal
    load balancer.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: b) 默认情况下，所有服务副本都可以通过内部负载均衡器平等访问。
- en: c) The internal DNS will allow all services to reach each other running on the
    same overlay network.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: c) 内部DNS将允许所有在同一覆盖网络上运行的服务相互访问。
- en: d) All of the preceding options are true.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有选项都正确。
- en: 'We tried to create a service with five replicas but it is not working. We cannot
    reach the reconciliation phase because we get the following error: `1/1: no suitable
    node (scheduling constraints not satisfied on 5 nodes)`. What could be wrong?'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '我们尝试创建一个五个副本的服务，但它无法工作。我们无法进入协调阶段，因为我们收到以下错误：`1/1: no suitable node (scheduling
    constraints not satisfied on 5 nodes)`。可能出了什么问题？'
- en: a) The service's image does not exist.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: a) 服务的镜像不存在。
- en: b) We were using a private image and we did not provide authentication credentials.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们使用的是私有镜像，但没有提供身份验证凭据。
- en: c) We used constraints for deploying the service's tasks on specific nodes but
    none of them have the required labels.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们使用了约束条件来将服务的任务部署到特定节点，但没有一个节点具有所需的标签。
- en: d) None of the preceding options are true.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有选项都不正确。
- en: Which of the following is true about locking a Docker Swarm cluster?
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项关于锁定Docker Swarm集群的说法是正确的？
- en: a) The control, management, and data planes are secure.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: a) 控制、管理和数据平面是安全的。
- en: b) A passphrase is required to unlock the `/var/lib/docker/swarm` data.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: b) 解锁`/var/lib/docker/swarm`数据需要密码短语。
- en: c) Executing `systemctl restart docker` will require the locking passphrase.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: c) 执行`systemctl restart docker`将需要锁定密码短语。
- en: d) If a node reboots, Docker Engine will not restart automatically, hence we
    have lost the Docker Swarm quorum.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: d) 如果节点重启，Docker Engine不会自动重启，因此我们会失去Docker Swarm的仲裁权。
- en: Which of the following is true about replicated services?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项关于复制服务的说法是正确的？
- en: a) They will run one instance on each node.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: a) 它们将在每个节点上运行一个实例。
- en: b) Only replicated services can be upgraded using the rolling update feature.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: b) 只有复制服务才能使用滚动更新功能进行升级。
- en: 'c) They can be stopped using the Docker service update: `--replicas 0 <SERVICENAME>`.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: c) 它们可以通过Docker服务更新命令停止：`--replicas 0 <SERVICENAME>`。
- en: d) We will use Go templates to be able to provide unique resources, such as
    volumes or hostnames, inside containers to ensure all replicas use their own resources.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: d) 我们将使用Go模板以提供唯一资源，例如容器内部的卷或主机名，确保所有副本使用各自的资源。
- en: Which methods are allowed to publish applications on Docker Enterprise?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些方法可以在Docker Enterprise上发布应用程序？
- en: a) We can use Interlock.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: a) 我们可以使用Interlock。
- en: b) We can use an Ingress Controller.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们可以使用Ingress Controller。
- en: c) We will publish each application container.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们将发布每个应用程序容器。
- en: d) We can use the `host` mode to publish applications as if they were running
    directly at the host level.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: d) 我们可以使用`host`模式将应用程序发布为好像它们直接在主机级别运行一样。
- en: Which of the following is true about Kubernetes' integration with Docker Enterprise?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项关于Kubernetes与Docker Enterprise的集成是正确的？
- en: a) Docker Enterprise provides Kubernetes out of the box.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: a) Docker Enterprise开箱即用提供Kubernetes。
- en: b) We must choose which orchestrator to use in cluster nodes because only one
    is allowed at once.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们必须选择在集群节点中使用哪个协调器，因为每次只能使用一个。
- en: c) We can run hosts in mixed mode to allow Kubernetes and Docker Swarm workloads,
    although it is not recommended for production.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们可以以混合模式运行主机，以支持 Kubernetes 和 Docker Swarm 负载，尽管不推荐在生产环境中使用。
- en: d) We can upgrade Kubernetes components with common Kubernetes installation
    commands.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: d) 我们可以使用常见的 Kubernetes 安装命令来升级 Kubernetes 组件。
- en: What is the difference between `docker image import` and `docker image load`
    for uploading an image to a Docker host?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docker image import` 和 `docker image load` 在将镜像上传到 Docker 主机时有什么区别？'
- en: a) There is no difference between the commands.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: a) 这些命令没有区别。
- en: b) Both import the same image content.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: b) 两者导入相同的镜像内容。
- en: c) `docker image import` will only retrieve image layers containing binaries,
    libraries, and configurations for the process but without any meta-information
    about how to launch the process, what volumes to use, what ports should be used,
    and so on.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: c) `docker image import` 只会获取包含二进制文件、库和进程配置的镜像层，但不包含如何启动进程、使用哪些卷、应使用哪些端口等元信息。
- en: d) We can only use `docker image import` to create new images.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: d) 我们只能使用 `docker image import` 来创建新镜像。
- en: How can `docker build` avoid the use of cached image layers?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何让 `docker build` 避免使用缓存的镜像层？
- en: a) Docker will always use cached information. It is not possible to avoid using
    image caching.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: a) Docker 将始终使用缓存的信息。无法避免使用镜像缓存。
- en: b) By default, image caching is disabled, therefore we need to apply `--use-caching`
    to ensure caching is enabled as it will speed up the building process.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: b) 默认情况下，镜像缓存是禁用的，因此我们需要使用 `--use-caching` 来确保启用缓存，因为它会加速构建过程。
- en: c) To avoid image caching, we can use `--no-cache`. This way, the build will
    not use any previously saved layers.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: c) 为了避免镜像缓存，我们可以使用 `--no-cache`。这样，构建将不会使用任何先前保存的层。
- en: d) All of the preceding sentences are wrong.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有句子都是错误的。
- en: How can we download all of the images from a repository?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何从一个仓库中下载所有的镜像？
- en: a) It is not possible. We need to make a list of all the images with their tags
    and retrieve them one by one.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: a) 不可能。我们需要列出所有镜像及其标签，并逐一下载。
- en: b) Every time we execute `docker image pull`, we download all the images and
    their layers, regardless of whether we are going to use them or not.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: b) 每次执行 `docker image pull` 时，我们都会下载所有的镜像及其层，无论是否打算使用它们。
- en: c) We can use `docker image pull --all-tags` to retrieve all repository-associated
    images.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们可以使用 `docker image pull --all-tags` 来检索所有与仓库相关的镜像。
- en: d) None of the preceding sentences are right.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有句子都不正确。
- en: How can we filter running containers based on a specific image?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何根据特定镜像筛选运行中的容器？
- en: a) There is no option for this. We use the Linux `grep` command to filter specific
    base images for containers.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: a) 没有这个选项。我们使用 Linux `grep` 命令过滤容器的特定基础镜像。
- en: b) We will use the `ancestor` key to list all the running containers using a
    specific image.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们将使用 `ancestor` 键列出所有使用特定镜像的运行容器。
- en: c) We will use the `image` key to list all the running containers using a specific
    image.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们将使用 `image` 键列出所有使用特定镜像的运行容器。
- en: d) None of the preceding sentences are right.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有句子都不正确。
- en: How can we push a locally built image to a remote registry?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将本地构建的镜像推送到远程注册表？
- en: a) We need to know the registry's **fully qualified domain name** (**FQDN**)
    or its IP address.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: a) 我们需要知道注册表的 **完全限定域名** (**FQDN**) 或其 IP 地址。
- en: b) We tag the image with the registry FQDN or IP, the username or group, and
    the repository where the image will be stored.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们将镜像标记为注册表的 FQDN 或 IP、用户名或组名，以及镜像存储的仓库。
- en: c) If the registry uses TLS/SSL certificates, we load its CA in our system to
    be able to trust them or we can configure it using the `insecure-registries` key.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: c) 如果注册表使用 TLS/SSL 证书，我们可以将其 CA 加载到系统中以信任它们，或者我们可以使用 `insecure-registries` 键来配置它。
- en: d) All of the preceding sentences are correct.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有句子都正确。
- en: Which option will bind an already-created `DATA` volume inside a container,
    under the `/data` directory?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个选项会将已创建的 `DATA` 卷绑定到容器内部的 `/data` 目录？
- en: a) `-v DATA:/data`
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: a) `-v DATA:/data`
- en: b) `--mount type=volume,source=DATA,target=/data`
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: b) `--mount type=volume,source=DATA,target=/data`
- en: c) `--mount DATA:/data`
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: c) `--mount DATA:/data`
- en: d) `--volume type=volume,source=DATA,target=/data`
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: d) `--volume type=volume,source=DATA,target=/data`
- en: How do we expose a web server container on the host's port `80` (the `nginx:alpine`
    image exposes port `80`)?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将一个 Web 服务器容器暴露在主机的 `80` 端口（`nginx:alpine` 镜像暴露了 `80` 端口）？
- en: a) `docker container run --cap-add NET_ADMIN -p 80:80 -d nginx:alpine`
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: a) `docker container run --cap-add NET_ADMIN -p 80:80 -d nginx:alpine`
- en: b) `docker container run --net=host -d nginx:alpine`
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: b) `docker container run --net=host -d nginx:alpine`
- en: c) `docker container run -P nginx:alpine`
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: c) `docker container run -P nginx:alpine`
- en: d) `docker container run -d -P 80:80 nginx:alpine`
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: d) `docker container run -d -P 80:80 nginx:alpine`
- en: Which of these keys requires a passphrase to unlock it while signing images?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些密钥在签署镜像时需要密码短语来解锁？
- en: a) Timestamp
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: a) 时间戳
- en: b) Target
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: b) 目标
- en: c) Snapshot
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: c) 快照
- en: d) Root
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: d) 根用户
- en: What is a Docker bundle and what is included inside those ZIP files?
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Docker 捆绑包，里面包含哪些内容？
- en: a) A Docker bundle provides client binaries and configurations for administrators.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: a) Docker 包含客户端二进制文件和管理员配置的捆绑包。
- en: b) All users have their own Docker bundle and it includes all the environment
    files required for the user.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: b) 所有用户都有自己的 Docker 捆绑包，并且其中包括用户所需的所有环境文件。
- en: c) A Docker bundle includes only environment scripts and we will ask administrators
    for certificates.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: c) Docker 捆绑包只包含环境脚本，我们将向管理员请求证书。
- en: d) A user's Docker bundle includes all the environment files and certificates
    required for using the CaaS platform.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: d) 用户的 Docker 捆绑包包括使用 CaaS 平台所需的所有环境文件和证书。
- en: Which is the best node distribution if we have to deploy a cluster with seven
    managers with distributed high availability?
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们必须部署一个具有七个管理节点和分布式高可用性的集群，最佳的节点分布是什么？
- en: a) Four manager nodes in a data center and three manager nodes on a different
    one.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: a) 一个数据中心有四个管理节点，另一个数据中心有三个管理节点。
- en: b) Two managers in a data center, two managers in a second one, and three in
    another.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: b) 一个数据中心有两个管理节点，第二个数据中心有两个管理节点，第三个数据中心有三个管理节点。
- en: c) All managers should be in the same data center.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: c) 所有管理节点应该位于同一个数据中心。
- en: d) We cannot manage distributed availability with 7 nodes; we need at least
    9.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: d) 我们无法通过 7 个节点来管理分布式可用性；至少需要 9 个节点。
- en: Which concept is responsible for managing external to internal load balancing
    for Docker Swarm services?
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个概念负责管理 Docker Swarm 服务的外部到内部负载均衡？
- en: a) Router Mesh
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: a) 路由器网状结构
- en: b) Ingress Controller
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: b) 入口控制器
- en: c) `nodePort`
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: c) `nodePort`
- en: d) `clusterIP`
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: d) `clusterIP`
- en: What are the differences between the `COPY` and `ADD` Dockerfile primitives?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`COPY` 和 `ADD` Dockerfile 指令之间有什么区别？'
- en: a) `COPY` adds files in read-only mode.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: a) `COPY` 以只读模式添加文件。
- en: b) `COPY` can be used to download files from external services.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: b) `COPY` 可以用于从外部服务下载文件。
- en: c) `ADD` can be used with packaged and compressed files and they will be decompressed
    in the layer's root filesystem.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: c) `ADD` 可以与打包和压缩的文件一起使用，并会在层的根文件系统中解压缩。
- en: d) `ADD` and `COPY` are completely equal, but `ADD` is newer.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: d) `ADD` 和 `COPY` 完全相同，但 `ADD` 是更新的指令。
- en: How can we deploy two applications using the same `docker-compose.yaml` file?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用相同的 `docker-compose.yaml` 文件部署两个应用程序？
- en: a) We cannot deploy two applications using the same `docker-compose.yaml` file.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: a) 我们无法使用相同的 `docker-compose.yaml` 文件部署两个应用程序。
- en: b) Docker Compose can deploy two applications using projects to ensure applications
    run using different volumes and ports.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: b) Docker Compose 可以使用项目来部署两个应用程序，确保应用程序在不同的卷和端口上运行。
- en: c) We can use environment variables for fixed resources to avoid any resource
    usage conflicts.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们可以使用环境变量来固定资源，以避免资源使用冲突。
- en: d) The only option to avoid application component conflicts is to deploy applications
    on different clusters.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: d) 避免应用组件冲突的唯一选项是将应用程序部署到不同的集群中。
- en: What is required to deploy DTR?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署 DTR 需要什么？
- en: a) A Docker Enterprise license from Docker Hub and an appropriate repository
    URL
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: a) Docker Hub 上的 Docker Enterprise 许可证和适当的仓库 URL
- en: b) Docker Enterprise Engine and Docker UCP
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: b) Docker Enterprise Engine 和 Docker UCP
- en: c) Docker Engine, a DTR license, and Docker Content Trust
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: c) Docker Engine、DTR 许可证和 Docker Content Trust。
- en: d) All of the preceding options
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: d) 所有前述选项
- en: How do we enable debugging on Docker Engine?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 Docker Engine 上启用调试？
- en: a) By executing the Docker daemon with the `-D` argument
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: a) 通过使用 `-D` 参数启动 Docker 守护进程来启用调试。
- en: b) By setting the `debug` key to `true` in the `config.json` file
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: b) 通过在 `config.json` 文件中将 `debug` 键设置为 `true` 来启用调试。
- en: c) By enabling experimental features in `daemon.json`
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: c) 通过在 `daemon.json` 中启用实验功能。
- en: d) None of the preceding options
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: d) 无前述选项
- en: How do we only list containers created from an `alpine:3.10` image?
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何只列出由 `alpine:3.10` 镜像创建的容器？
- en: a) `docker container ls image=alpine:3.10` b) `docker ps --format ancestor=alpine:3.10`
    c) `docker container ls --filter ancestor=alpine:3.10` d) `docker container ls
    --filter image=alpine:3.10`
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: a) `docker container ls image=alpine:3.10` b) `docker ps --format ancestor=alpine:3.10`
    c) `docker container ls --filter ancestor=alpine:3.10` d) `docker container ls
    --filter image=alpine:3.10`
- en: Which of the following is true about privileged containers?
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下关于特权容器哪个是正确的？
- en: a) Resource limits will be avoided (CPU, memory, and disk I/O).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: a) 资源限制将被避免（CPU、内存和磁盘 I/O）。
- en: b) They always run the container as the root user.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: b) 它们总是以 root 用户身份运行容器。
- en: c) These containers run with all available capabilities.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: c) 这些容器将以所有可用的能力运行。
- en: d) They run using the host's kernel namespaces.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: d) 它们使用主机的内核命名空间运行。
- en: Which of the following is true about Swarm join tokens?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下关于 Swarm 加入令牌哪个是正确的？
- en: a) Once created, we have to store them in a secure place because they are not
    recoverable.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: a) 一旦创建，我们必须将其存储在安全的地方，因为它们是不可恢复的。
- en: b) We can generate new ones to get new values for new nodes if we lose them
    using `docker swarm join-token recreate`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们可以通过 `docker swarm join-token recreate` 生成新的令牌，以便为新节点获取新的值，如果我们丢失了它们。
- en: c) We can recover them whenever we need them using `docker swarm join-token`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们可以通过 `docker swarm join-token` 在需要时恢复它们。
- en: d) Join tokens will be automatically updated on all nodes once they are regenerated.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: d) 一旦重新生成，加入令牌将在所有节点上自动更新。
- en: Which endpoints are provided to verify DTR and UCP nodes' health?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于验证 DTR 和 UCP 节点健康状态的端点有哪些？
- en: a) DTR provides `/_ping`, `/nginx_status`, and `/api/v0/meta/cluster_status`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: a) DTR 提供 `/_ping`、`/nginx_status` 和 `/api/v0/meta/cluster_status`。
- en: b) DTR and UCP provide `/status`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: b) DTR 和 UCP 提供 `/status`。
- en: c) DTR and UCP provide `/_ping`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: c) DTR 和 UCP 提供 `/_ping`。
- en: d) DTR provides `/status` and UCP provides `/_ping`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: d) DTR 提供 `/status`，UCP 提供 `/_ping`。
- en: Which command allows us to review and recover lost space due to "dangling images"
    and dead containers?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令可以帮助我们查看并恢复因“悬挂镜像”和死容器而丢失的空间？
- en: a) `docker system rm` b) `docker system prune` c) `docker image rm --filter="dangling"`
    d) `docker container rm -a`
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: a) `docker system rm` b) `docker system prune` c) `docker image rm --filter="dangling"`
    d) `docker container rm -a`
- en: Which primitive combination creates the command line that will effectively finally
    run inside a container?
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个基本组合创建的命令行最终将在容器内运行？
- en: a) `ENTRYPOINT` will set the script or binary to be launched and `CMD` will
    be used if `ENTRYPOINT` is not defined.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: a) `ENTRYPOINT` 会设置要启动的脚本或二进制文件，而 `CMD` 仅在 `ENTRYPOINT` 未定义时使用。
- en: b) `CMD` always overwrites the `ENTRYPOINT` definition.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: b) `CMD` 总是覆盖 `ENTRYPOINT` 定义。
- en: c) Using a combination of `ENTRYPOINT` to define the script or binary to be
    launched and `RUN` as arguments.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: c) 使用 `ENTRYPOINT` 来定义要启动的脚本或二进制文件，并将 `RUN` 作为参数。
- en: d) `CMD` will add arguments to the defined `ENTRYPOINT` only if `ENTRYPOINT`
    is configured using the `exec` format.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: d) 仅当 `ENTRYPOINT` 使用 `exec` 格式配置时，`CMD` 才会将参数添加到定义的 `ENTRYPOINT` 中。
- en: Which of the following is true about secrets?
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下关于密钥哪个是正确的？
- en: a) They will only be available on manager nodes, so workloads with secrets must
    run on these nodes.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: a) 它们只会在管理节点上可用，因此带有密钥的工作负载必须运行在这些节点上。
- en: b) They are ephemeral and deployed on on-memory filesystems.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: b) 它们是短暂的，并部署在内存文件系统上。
- en: c) They are encrypted even for administrators, so they cannot be recovered from
    the control plane.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: c) 即使是管理员，它们也是加密的，因此不能从控制平面恢复。
- en: d) If we need to change a secret, we need to create a new secret and update
    the service with this new one.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: d) 如果我们需要更改密钥，我们需要创建一个新的密钥并使用这个新的密钥更新服务。
- en: How can we ensure that a specific image is deployed in production?
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何确保在生产环境中部署特定镜像？
- en: a) By using the image's hash for deploying containers.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: a) 通过使用镜像的哈希值来部署容器。
- en: b) Signing images will ensure their tagging and provenance.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: b) 签名镜像将确保其标签和来源。
- en: c) Specifying the right tag is enough to ensure its content.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: c) 指定正确的标签足以确保其内容。
- en: d) By using `docker image history` to review commands used to generate the image.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: d) 通过使用 `docker image history` 来查看生成镜像时使用的命令。
- en: Which of the following sentences about container isolation are true?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下关于容器隔离的句子哪些是正确的？
- en: a) The host's hardware resources, such as memory and CPU, are granted using
    cgroups.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: a) 主机的硬件资源，如内存和 CPU，是通过 cgroups 授权的。
- en: b) To ensure a container's limits, we need to use operating system security
    modules.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: b) 为了确保容器的限制，我们需要使用操作系统安全模块。
- en: c) Only the root user is allowed to deploy containers with unlimited resources.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: c) 只有 root 用户被允许部署无限资源的容器。
- en: d) Privileged containers will avoid defined process' capabilities and execution
    user.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: d) 特权容器将绕过定义的进程能力和执行用户。
- en: How can we ensure an image's content immutability?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何确保镜像内容的不可变性？
- en: a) By using signed images.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: a) 通过使用签名镜像。
- en: b) Defining immutable tags in DTR.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: b) 在DTR中定义不可变标签。
- en: c) By using image scanning.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: c) 通过使用镜像扫描。
- en: d) Images cannot be immutable.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: d) 镜像不能是不可变的。
- en: Which of the following sentences are true about overlay networks?
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下关于叠加网络的哪些句子是正确的？
- en: a) DTR deploys an overlay network, `dtr-ol`, to route a cluster's internal communications.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: a) DTR部署了一个叠加网络`dtr-ol`，用于路由集群的内部通信。
- en: b) Overlay-defined networks are only present on manager nodes when there is
    not a task connected to them.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: b) 当没有任务连接到管理节点时，叠加定义的网络只存在于管理节点上。
- en: c) `interlock-extension` connects to services' defined networks to route requests
    to appropriate backends.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: c) `interlock-extension`连接到服务定义的网络，将请求路由到适当的后端。
- en: d) Docker Swarm overlay networks are encrypted and deployed using VXLAN.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: d) Docker Swarm叠加网络是加密的，并使用VXLAN部署。
- en: What does the `HEALTHCHECK --start-period=15s CMD curl --fail https://localhost:8080
    | exit 1` line in a Dockerfile do?
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HEALTHCHECK --start-period=15s CMD curl --fail https://localhost:8080 | exit
    1`这行在Dockerfile中的作用是什么？'
- en: a) It will execute the defined `curl` command every 15 seconds, and if it fails
    three consecutive times, it will mark the container as unhealthy.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: a) 它将每15秒执行一次定义的`curl`命令，如果连续三次失败，它将标记容器为不健康。
- en: b) It will wait 15 seconds for the first execution and then Docker Engine will
    run the defined `curl` command every 30 seconds, and if it fails three consecutive
    times, it will mark the container as unhealthy.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: b) 它将在第一次执行时等待15秒，然后Docker引擎将每30秒运行一次定义的`curl`命令，如果连续三次失败，它将标记容器为不健康。
- en: c) This line does not do anything; health checks must be configured for each
    container.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: c) 这一行没有任何作用；健康检查必须为每个容器单独配置。
- en: d) Docker Engine will run this probe every 15 seconds and if it fails, it will
    restart the container.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: d) Docker引擎将每15秒运行此探测程序，如果失败，它将重新启动容器。
- en: Which of the following is true about Docker Engine access?
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下关于Docker Engine访问的哪些说法是正确的？
- en: a) By default, only owners of a Docker socket are allowed to run containers
    on a standalone host.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: a) 默认情况下，只有Docker套接字的所有者才被允许在独立主机上运行容器。
- en: b) We can allow users to run containers allowing their access to either Docker
    Engine's Unix socket or the API's TCP port (enabled by default).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们可以允许用户运行容器，允许他们访问Docker Engine的Unix套接字或API的TCP端口（默认启用）。
- en: c) Anyone allowed to log in to the host is also allowed to run containers.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: c) 任何被允许登录到主机的人也被允许运行容器。
- en: d) Only the root user is allowed to run privileged containers on a host.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: d) 只有root用户被允许在主机上运行特权容器。
- en: How can we modify ports published on an already-deployed service?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何修改已部署服务的发布端口？
- en: a) It is not possible; we have to remove the service and create it again.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: a) 这是不可能的；我们必须删除服务并重新创建它。
- en: b) We can only change ports if the service is running using the host's network
    (`--net=host`).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: b) 只有在服务使用主机网络（`--net=host`）运行时，我们才能更改端口。
- en: c) We use `docker service update --publish-add <NEW_PORT> --publish-rm <OLD_PORT>`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们使用`docker service update --publish-add <NEW_PORT> --publish-rm <OLD_PORT>`。
- en: d) None of the preceding answers are correct.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上选项都不正确。
- en: How can we ensure that the web server Docker service runs one instance of NGINX
    on all cluster nodes?
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何确保Web服务器Docker服务在所有集群节点上运行一个NGINX实例？
- en: a) By using `docker service create --type=global --instances=1 --name=webserver
    --image=nginx:alpine`.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: a) 通过使用`docker service create --type=global --instances=1 --name=webserver --image=nginx:alpine`。
- en: b) By using `docker service create --mode=global --name=webserver nginx:alpine`.c)
    UCP can ensure that administrators run any service on all nodes in the cluster
    with a tick on `allow run on manager nodes`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: b) 通过使用`docker service create --mode=global --name=webserver nginx:alpine`。c)
    UCP可以确保管理员在所有节点上运行任何服务，并勾选`allow run on manager nodes`。
- en: d) `docker service create --name=webserver --image=nginx:alpine` is enough for
    executing one instance on all nodes.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: d) `docker service create --name=webserver --image=nginx:alpine`足以在所有节点上执行一个实例。
- en: How do we set a repository named `myregistry/myorganization/baseimages`, available
    for internal users, where images are owned and managed by DevOps group users?
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何设置一个名为`myregistry/myorganization/baseimages`的仓库，让内部用户可以访问，并且镜像由DevOps组用户拥有和管理？
- en: a) We need to create an organization with the name `myorganization`.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: a) 我们需要创建一个名为`myorganization`的组织。
- en: b) We will create `myregistry/myorganization/baseimages` as a public repository.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们将创建 `myregistry/myorganization/baseimages` 作为公共仓库。
- en: c) We configure DevOps team users as admins of the `myregistry/myorganization/baseimages`
    repository.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们将 DevOps 团队用户配置为 `myregistry/myorganization/baseimages` 仓库的管理员。
- en: d) The `myregistry/myorganization/baseimages` repository will be created as
    private for `myorganization` users.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: d) `myregistry/myorganization/baseimages` 仓库将作为私有仓库为 `myorganization` 用户创建。
- en: How can we review ports published for a container named `webserver`?
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何查看名为 `webserver` 的容器发布的端口？
- en: a) Using `docker container ls --filter name=webserver`.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: a) 使用 `docker container ls --filter name=webserver`。
- en: b) Using `docker container port webserver`.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: b) 使用 `docker container port webserver`。
- en: c) Using `docker container inspect webserver --format="{{ .NetworkSettings.Ports
    }}"`.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: c) 使用 `docker container inspect webserver --format="{{ .NetworkSettings.Ports
    }}"`。
- en: d) All of the preceding answers are correct.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有答案都是正确的。
- en: Which concept is responsible for managing internal load balancing for Kubernetes?
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个概念负责管理 Kubernetes 的内部负载均衡？
- en: a) Router Mesh
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: a) Router Mesh
- en: b) Ingress Controller
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: b) Ingress 控制器
- en: c) Interlock
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: c) Interlock
- en: d) `clusterIP`
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: d) `clusterIP`
- en: Which resources are used to link pods with Kubernetes' defined volumes?
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些资源用于将 Pod 与 Kubernetes 定义的卷链接？
- en: a) `persistentVolume`
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: a) `persistentVolume`
- en: b) `persistentVolumeClaim`
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: b) `persistentVolumeClaim`
- en: c) `storageClass`
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: c) `storageClass`
- en: d) `persistentDataVolume`
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: d) `persistentDataVolume`
- en: Which labels are required to deploy a service with Interlock?
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署服务时需要哪些标签？
- en: '**a) `com.docker.lb.port`**'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '**a) `com.docker.lb.port`**'
- en: b) `com.docker.interlock.port`
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: b) `com.docker.interlock.port`
- en: c) `com.docker.interlock.hosts`
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: c) `com.docker.interlock.hosts`
- en: d) `com.docker.lb.backend`
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: d) `com.docker.lb.backend`
- en: How can we publish services externally in Kubernetes?
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在 Kubernetes 中将服务暴露到外部？
- en: a) Using Interlock
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: a) 使用 Interlock
- en: b) Using Ingress Controllers
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: b) 使用 Ingress 控制器
- en: c) Using the `nodePort` service
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: c) 使用 `nodePort` 服务
- en: d) Using a `clusterIP` resource
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: d) 使用 `clusterIP` 资源
- en: How do we know how much space is used by containers and volumes in our system?
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何知道系统中容器和卷使用了多少空间？
- en: a) By using `docker system prune`
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: a) 通过使用 `docker system prune`
- en: b) By using `docker system df`
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: b) 通过使用 `docker system df`
- en: c) By using `docker container df`
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: c) 使用 `docker container df`
- en: d) By using `docker volume df`
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: d) 通过使用 `docker volume df`
- en: Which role should be set in UCP for the DBA team to allow them to create their
    own volumes?
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DBA 团队在 UCP 中应该设置什么角色，以允许他们创建自己的卷？
- en: a) `Scheduler`.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: a) `Scheduler`。
- en: b) `View Only`.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: b) `仅查看`.
- en: c) Only UCP administrators can create volumes and other cluster resources.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: c) 只有 UCP 管理员可以创建卷和其他集群资源。
- en: d) `Restricted Control` is enough to create volumes on their private collection.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: d) `Restricted Control` 足以在他们的私有集合中创建卷。
- en: Which flag should be used to configure all available FQDNs for UCP?
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该使用哪个标志来配置所有可用的 FQDN 用于 UCP？
- en: a) `--san`
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: a) `--san`
- en: b) `--external-name`
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: b) `--external-name`
- en: c) `--external-url`
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: c) `--external-url`
- en: d) `--ucp-url`
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: d) `--ucp-url`
- en: A user cannot push images to our DTR internal registry. What should we verify?
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户无法推送镜像到我们的 DTR 内部仓库。我们应该验证什么？
- en: a) Docker login access.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: a) Docker 登录访问。
- en: b) That the DTR CA certificate should be trusted.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: b) DTR CA 证书应该被信任。
- en: c) We should verify whether the image's repository does exist.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们应该验证镜像的仓库是否存在。
- en: d) That the image has vulnerabilities and DTR's image scanning rejects the user's
    image.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: d) 显示镜像存在漏洞，且 DTR 的镜像扫描拒绝了用户的镜像。
- en: Which internal networks are deployed for DTR?
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DTR 部署了哪些内部网络？
- en: a) `docker_gwbridge`
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: a) `docker_gwbridge`
- en: b) `dtr-ol`
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: b) `dtr-ol`
- en: c) `ingress`
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: c) `ingress`
- en: d) `dtr-internal`
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: d) `dtr-internal`
- en: Which Kubernetes resources provide an application's resilience?
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些 Kubernetes 资源提供应用程序的弹性？
- en: a) `Deployment`
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: a) `Deployment`
- en: b) `ReplicaSet`
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: b) `ReplicaSet`
- en: c) `Pod`
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: c) `Pod`
- en: d) `Replicated`
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: d) `Replicated`
- en: What does the `docker swarm --force-new-cluster` command do?
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docker swarm --force-new-cluster` 命令的作用是什么？'
- en: a) It is used to recover a cluster in failure situations. It will set all managers
    as workers, leaving just one manager node.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: a) 它用于在故障情况下恢复集群。它将所有管理节点设置为工作节点，只保留一个管理节点。
- en: b) This command will destroy the cluster. It is used to remove the entire cluster.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: b) 此命令将销毁集群，用于移除整个集群。
- en: c) `--force-new-cluster` should be used to stop all services deployed on worker
    nodes.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: c) 应该使用 `--force-new-cluster` 停止部署在工作节点上的所有服务。
- en: d) An application's services will not be impacted by this command. This command
    just affects the control plane.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: d) 应用程序的服务不会受到此命令的影响。此命令仅影响控制平面。
- en: Which sentences are true about Docker Swarm and Kubernetes networking?
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于 Docker Swarm 和 Kubernetes 网络的哪些说法是正确的？
- en: a) An ingress overlay network will be encrypted by default.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: a) 默认情况下，Ingress覆盖网络将被加密。
- en: b) Mutual TLS communications ensure control-plane security in Docker Swarm.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: b) 双向TLS通信确保Docker Swarm中控制平面的安全。
- en: c) A Kubernetes network is isolated with `networkPolicy` resources out of the
    box.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: c) Kubernetes网络通过`networkPolicy`资源默认实现隔离。
- en: d) Kubernetes uses certificates to ensure security for user access and the internal
    control plane.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: d) Kubernetes使用证书来确保用户访问和内部控制平面的安全性。
- en: For some mock questions there is more than one correct answer.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些模拟问题，可能有多个正确答案。
- en: Summary
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This was the final chapter on our journey to becoming a Docker Certified Associate.
    We covered all the topics learned in previous chapters with some mock exam questions.
    As mentioned before, some of these questions are real questions posed in old exams.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们成为Docker认证助理的旅程中的最后一章。我们回顾了前几章所学习的所有内容，并通过一些模拟考试问题进行了复习。如前所述，这些问题中的一些是旧考试中出现的真实问题。
- en: The journey to becoming a Docker Certified Associate is not easy. We started
    this book from the very beginning, understanding why containers are so popular
    these days when we talk about microservices architectures. Then, we described
    how containers are executed using Docker Engine, integrating various isolation
    strategies to ensure security between container-embedded processes. As containers
    are based on images, we learned how to build and maintain them using Docker tools.
    We learned about different Docker objects and how to deploy applications using
    different networking methods, volumes, or security approaches. We learned how
    to deploy microservices applications, where every component is running containers.
    We learned the differences between running all components on standalone and cluster-wide
    distributed environments. Orchestrators are key in distributed environments. They
    keep applications healthy and help us develop microservices faster to provide
    features to update applications' components without service interruption. We studied
    Docker Swarm and Kubernetes because both are part of the Docker Enterprise platform.
    Finally, we introduced Docker's enterprise-ready CaaS platform, Docker Enterprise.
    We learned about all its components and features and how they help us to deploy
    applications, as well as improving their security.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 成为Docker认证助理的旅程并不容易。我们从头开始学习本书，理解为什么在谈到微服务架构时，容器变得如此受欢迎。接着，我们描述了如何使用Docker引擎执行容器，结合各种隔离策略以确保容器内进程之间的安全性。由于容器是基于镜像的，我们学习了如何使用Docker工具来构建和维护这些镜像。我们了解了不同的Docker对象，并学习了如何使用不同的网络方法、存储卷或安全策略来部署应用程序。我们学习了如何部署微服务应用，其中每个组件都在容器中运行。我们学习了在独立环境和集群分布式环境中运行所有组件的区别。编排器在分布式环境中是关键。它们保持应用程序的健康，并帮助我们更快地开发微服务，提供无中断服务更新应用程序组件的功能。我们学习了Docker
    Swarm和Kubernetes，因为它们都是Docker企业平台的一部分。最后，我们介绍了Docker的企业级CaaS平台——Docker Enterprise。我们了解了它的所有组件和功能，以及它们如何帮助我们部署应用程序并提高其安全性。
- en: This was a brief summary of all the topics covered in this book. If you followed
    this workflow, you are ready to take the Docker Certified Associate exam. This
    book should also be used as a command reference, although we know that technology
    changes quite fast these days. Now that you are ready to take the exam, take a
    deep breath and schedule your exam at [https://prod.examity.com/docker](https://prod.examity.com/docker).
    Good luck!
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书所涵盖所有主题的简要总结。如果你按照此流程进行学习，你已经准备好参加Docker认证助理考试了。本书还应作为命令参考，尽管我们知道技术变化非常迅速。现在你已准备好参加考试，深呼吸并在[https://prod.examity.com/docker](https://prod.examity.com/docker)预约考试。祝你好运！
