- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Setting Up a Working Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置工作环境
- en: In the previous chapter, we learned what Docker containers are and why they’re
    important. We learned what kinds of problems containers solve in a modern software
    supply chain. In this chapter, we are going to prepare our personal or working
    environment to work efficiently and effectively with Docker. We will discuss in
    detail how to set up an ideal environment for developers, DevOps, and operators
    that can be used when working with Docker containers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了 Docker 容器是什么以及它们为何重要。我们了解了容器在现代软件供应链中解决了哪些问题。在本章中，我们将准备个人或工作环境，以便与
    Docker 高效、有效地协作。我们将详细讨论如何为开发人员、DevOps 和操作员设置一个理想的工作环境，这个环境可以在使用 Docker 容器时进行使用。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: The Linux command shell
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 命令行 Shell
- en: PowerShell for Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 的 PowerShell
- en: Installing and using a package manager
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和使用包管理器
- en: Installing Git and cloning the code repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Git 并克隆代码仓库
- en: Choosing and installing a code editor
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择和安装代码编辑器
- en: Installing Docker Desktop on macOS or Windows
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 或 Windows 上安装 Docker Desktop
- en: Installing Docker Toolbox
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Docker Toolbox
- en: Enabling Kubernetes on Docker Desktop
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Docker Desktop 上启用 Kubernetes
- en: Installing minikube
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 minikube
- en: Installing Kind
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Kind
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need a laptop or a workstation with either macOS
    or Windows, preferably Windows 11, installed. You should also have free internet
    access to download applications and permission to install those applications on
    your laptop. It is also possible to follow along with this book if you have a
    Linux distribution as your operating system, such as Ubuntu 18.04 or newer. I
    will try to indicate where commands and samples differ significantly from the
    ones on macOS or Windows.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容需要你拥有一台安装了 macOS 或 Windows（最好是 Windows 11）操作系统的笔记本电脑或工作站。你还需要有免费的互联网接入权限来下载应用程序，并且需要有权限在笔记本电脑上安装这些应用程序。如果你使用的是
    Linux 发行版操作系统（例如 Ubuntu 18.04 或更新版本），也可以跟随本书进行学习。我会尽量标明在哪些地方命令和示例与 macOS 或 Windows
    上的有所不同。
- en: The Linux command shell
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 命令行 Shell
- en: Docker containers were first developed on Linux for Linux. Hence, it is natural
    that the primary command-line tool used to work with Docker, also called a shell,
    is a Unix shell; remember, Linux derives from Unix. Most developers use the Bash
    shell. On some lightweight Linux distributions, such as Alpine, Bash is not installed
    and consequently, you must use the simpler Bourne shell, just called `sh`. Whenever
    we are working in a Linux environment, such as inside a container or on a Linux
    VM, we will use either `/bin/bash` or `/bin/sh`, depending on their availability.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器最初是在 Linux 上为 Linux 开发的。因此，使用 Docker 时的主要命令行工具，也称为 Shell，是 Unix Shell；记住，Linux
    来源于 Unix。大多数开发人员使用 Bash Shell。在一些轻量级的 Linux 发行版中，如 Alpine，Bash 没有安装，因此你必须使用更简单的
    Bourne Shell，称为 `sh`。每当我们在 Linux 环境中工作时，例如在容器内或在 Linux 虚拟机中，我们将根据可用性使用 `/bin/bash`
    或 `/bin/sh`。
- en: Although Apple’s macOS is not a Linux OS, Linux and macOS are both flavors of
    Unix and hence support the same set of tools. Among those tools are the shells.
    So, when working on macOS, you will probably be using the Bash or zsh shell.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Apple 的 macOS 不是 Linux 操作系统，但 Linux 和 macOS 都是 Unix 的变种，因此支持相同的一组工具。其中包括
    Shell。因此，当在 macOS 上工作时，你很可能会使用 Bash 或 zsh Shell。
- en: 'In this book, we expect you to be familiar with the most basic scripting commands
    in Bash and PowerShell, if you are working on Windows. If you are an absolute
    beginner, then we strongly recommend that you familiarize yourself with the following
    cheat sheets:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设你已熟悉 Bash 和 PowerShell 中最基本的脚本命令，特别是在 Windows 环境下。如果你是完全的新手，我们强烈建议你先熟悉以下备忘单：
- en: '*Linux Command Line Cheat Sheet* by Dave Child at [http://bit.ly/2mTQr8l](http://bit.ly/2mTQr8l)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Linux 命令行备忘单* 由 Dave Child 编写，可在 [http://bit.ly/2mTQr8l](http://bit.ly/2mTQr8l)
    查阅'
- en: '*PowerShell Basic Cheat Sheet* at [http://bit.ly/2EPHxze](http://bit.ly/2EPHxze)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*PowerShell 基本备忘单* 可在 [http://bit.ly/2EPHxze](http://bit.ly/2EPHxze) 查阅'
- en: PowerShell for Windows
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 的 PowerShell
- en: On a Windows computer, laptop, or server, we have multiple command-line tools
    available. The most familiar is the command shell. It has been available on any
    Windows computer for decades. It is a very simple shell. For more advanced scripting,
    Microsoft has developed PowerShell. PowerShell is very powerful and very popular
    among engineers working on Windows. Finally, on Windows 10 or later, we have the
    so-called Windows Subsystem for Linux, which allows us to use any Linux tool,
    such as the Bash or Bourne shells. Apart from this, other tools install a Bash
    shell on Windows, such as the Git Bash shell. In this book, all commands will
    use Bash syntax. Most of the commands also run in PowerShell.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 计算机、笔记本电脑或服务器上，我们有多种命令行工具可用。最常见的是命令提示符，它在任何 Windows 计算机上都可用已有几十年了。它是一个非常简单的
    shell。对于更高级的脚本，微软开发了 PowerShell，PowerShell 功能强大，并且在 Windows 上工作的工程师中非常流行。最后，在
    Windows 10 或更高版本中，我们有所谓的 Windows 子系统 Linux，它允许我们使用任何 Linux 工具，例如 Bash 或 Bourne
    shell。除此之外，还有其他工具能在 Windows 上安装 Bash shell，例如 Git Bash shell。在本书中，所有命令都将使用 Bash
    语法。大多数命令也能在 PowerShell 中运行。
- en: Therefore, we recommend that you either use PowerShell or any other Bash tool
    to work with Docker on Windows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们建议你使用 PowerShell 或任何其他 Bash 工具在 Windows 上使用 Docker。
- en: Installing and using a package manager
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和使用包管理器
- en: The easiest way to install software on a Linux, macOS, or Windows laptop is
    to use a good package manager. On macOS, most people use Homebrew, while on Windows,
    Chocolatey is a good choice. If you’re using a Debian-based Linux distribution
    such as Ubuntu, then the package manager of choice for most is `apt`, which is
    installed by default.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux、macOS 或 Windows 笔记本电脑上安装软件的最简单方法是使用一个好的包管理器。在 macOS 上，大多数人使用 Homebrew，而在
    Windows 上，Chocolatey 是一个不错的选择。如果你使用的是基于 Debian 的 Linux 发行版，例如 Ubuntu，那么大多数人选择使用默认安装的包管理器
    `apt`。
- en: Installing Homebrew on macOS
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Homebrew
- en: 'Homebrew is the most popular package manager on macOS, and it is easy to use
    and very versatile. Installing Homebrew on macOS is simple; just follow the instructions
    at [https://brew.sh/](https://brew.sh/):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 是 macOS 上最流行的包管理器，使用简单且非常多功能。在 macOS 上安装 Homebrew 很简单；只需按照 [https://brew.sh/](https://brew.sh/)
    上的说明操作：
- en: 'In a nutshell, open a new Terminal window and execute the following command
    to install Homebrew:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简而言之，打开一个新的终端窗口并执行以下命令来安装 Homebrew：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the installation has finished, test whether Homebrew is working by entering
    `brew --version` in the Terminal. You should see something like this:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，通过在终端输入 `brew --version` 来测试 Homebrew 是否正常工作。你应该会看到类似这样的输出：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we are ready to use Homebrew to install tools and utilities. If we, for
    example, want to install the iconic Vi text editor (note that this is not a tool
    we will use in this book; it serves just as an example), we can do so like this:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备使用 Homebrew 安装工具和实用程序。如果我们想安装标志性的 Vi 文本编辑器（请注意，这不是本书中会使用的工具，它只是作为一个示例），我们可以这样做：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will download and install the editor for you.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为你下载并安装编辑器。
- en: Installing Chocolatey on Windows
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Chocolatey
- en: 'Chocolatey is a popular package manager for Windows, built on PowerShell. To
    install the Chocolatey package manager, please follow the instructions at [https://chocolatey.org/](https://chocolatey.org/)
    or open a new PowerShell window in admin mode and execute the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey 是一个流行的 Windows 包管理器，基于 PowerShell 构建。要安装 Chocolatey 包管理器，请按照 [https://chocolatey.org/](https://chocolatey.org/)
    上的说明进行操作，或以管理员模式打开一个新的 PowerShell 窗口并执行以下命令：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to run the preceding command as an administrator; otherwise,
    the installation will not succeed. It is also important to note that the preceding
    command is one single line and has only been broken into several lines here due
    to the limited line width.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是以管理员身份运行前面的命令；否则，安装将不会成功。还需要注意的是，前面的命令是一个单独的命令，这里之所以分成多行，是因为行宽有限。
- en: 'Once Chocolatey has been installed, test it with the `choco --version` command.
    You should see output similar to the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完 Chocolatey 后，使用 `choco --version` 命令进行测试。你应该看到类似于以下的输出：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To install an application such as the Vi editor, use the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装一个应用程序，例如 Vi 编辑器，使用以下命令：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `-y` parameter makes sure that the installation happens without Chocolatey
    asking for a reconfirmation. As mentioned previously, we will not use Vim in our
    exercises; it has only been used as an example.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`-y` 参数确保在安装过程中 Chocolatey 不会再次要求确认。正如之前提到的，我们在练习中不会使用 Vim；它仅作为示例使用。'
- en: Note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Once Chocolatey has installed an application, you may need to open a new PowerShell
    window to use that application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Chocolatey 安装了一个应用程序，你可能需要打开一个新的 PowerShell 窗口才能使用该应用程序。
- en: Installing Git and cloning the code repository
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Git 并克隆代码库
- en: 'We will be using Git to clone the sample code accompanying this book from its
    GitHub repository. If you already have Git installed on your computer, you can
    skip this section:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Git 从 GitHub 仓库克隆本书附带的示例代码。如果你已经在电脑上安装了 Git，可以跳过这一部分：
- en: 'To install Git on macOS, use the following command in a Terminal window:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Git，打开一个终端窗口并使用以下命令：
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To install Git on Windows, open a PowerShell window and use Chocolatey to install
    it:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Git，打开一个 PowerShell 窗口并使用 Chocolatey 安装它：
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, on a Debian or Ubuntu machine, open a Bash console and execute the
    following command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 Debian 或 Ubuntu 机器上，打开一个 Bash 控制台并执行以下命令：
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once Git has been installed, verify that it is working. On all platforms, use
    the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完 Git 后，验证它是否正常工作。在所有平台上，使用以下命令：
- en: '[PRE9]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This should output the version of Git that’s been installed. On the author’s
    MacBook Air, the output is as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出已安装的 Git 版本。在作者的 MacBook Air 上，输出如下：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you see an older version, then you are probably using the version that came
    installed with macOS by default. Use Homebrew to install the latest version by
    running `$ brew` `install git`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到的是旧版本，那么你可能正在使用 macOS 默认安装的版本。通过运行 `$ brew` `install git` 来使用 Homebrew
    安装最新版本。
- en: 'Now that Git is working, we can clone the source code accompanying this book
    from GitHub. Execute the following command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在 Git 已经安装完毕，我们可以从 GitHub 克隆本书附带的源代码。执行以下命令：
- en: '[PRE11]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will clone the content of the main branch into your local folder, `~/The-Ultimate-Docker-Container-Book`.
    This folder will now contain all of the sample solutions for the labs we are going
    to do together in this book. Refer to these sample solutions if you get stuck.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把主分支的内容克隆到你的本地文件夹 `~/The-Ultimate-Docker-Container-Book` 中。这个文件夹现在将包含我们将在本书中一起完成的实验室的所有示例解决方案。如果你遇到困难，请参考这些示例解决方案。
- en: Now that we have installed the basics, let’s continue with the code editor.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了基础环境，让我们继续安装代码编辑器。
- en: Choosing and installing a code editor
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择并安装代码编辑器
- en: Using a good code editor is essential to working productively with Docker. Of
    course, which editor is the best is highly controversial and depends on your personal
    preference. A lot of people use Vim, or others such as Emacs, Atom, Sublime, or
    **Visual Studio Code** (**VS Code**), to just name a few. VS Code is a completely
    free and lightweight editor, yet it is very powerful and is available for macOS,
    Windows, and Linux. According to Stack Overflow, it is currently by far the most
    popular code editor. If you are not yet sold on another editor, I highly recommend
    that you give VS Code a try.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个好的代码编辑器对于高效地使用 Docker 至关重要。当然，哪个编辑器最好是一个高度争议的话题，这取决于个人偏好。许多人使用 Vim，或者像 Emacs、Atom、Sublime、**Visual
    Studio Code**（**VS Code**）等其他编辑器，仅举几例。VS Code 是一个完全免费的轻量级编辑器，但它非常强大，并且支持 macOS、Windows
    和 Linux。根据 Stack Overflow 的数据，它目前是最受欢迎的代码编辑器。如果你还没有选择其他编辑器，我强烈建议你试试 VS Code。
- en: But if you already have a favorite code editor, then please continue using it.
    So long as you can edit text files, you’re good to go. If your editor supports
    syntax highlighting for Dockerfiles and JSON and YAML files, then even better.
    The only exception will be [*Chapter 6*](B19199_06.xhtml#_idTextAnchor130), *Debugging
    Code Running in Containers*. The examples presented in that chapter will be heavily
    tailored toward VS Code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你已经有了喜欢的代码编辑器，请继续使用它。只要你能编辑文本文件，就可以继续。如果你的编辑器支持 Dockerfile、JSON 和 YAML 文件的语法高亮，那就更好了。唯一的例外是
    [*第 6 章*](B19199_06.xhtml#_idTextAnchor130)，*在容器中调试代码*。该章中的示例将重点针对 VS Code 进行定制。
- en: Installing VS Code on macOS
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 VS Code
- en: 'Follow these steps for installation:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'Open a new Terminal window and execute the following command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口并执行以下命令：
- en: '[PRE12]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once VS Code has been installed successfully, navigate to your home directory:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 VS Code 安装成功，导航到你的主目录：
- en: '[PRE13]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, open VS Code from within this folder:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从这个文件夹中打开 VS Code：
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: VS will start and open the `The-Ultimate-Docker-Container-Book` folder, where
    you just downloaded the repository that contains the source code for this book,
    as the working folder.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: VS 会启动并打开 `The-Ultimate-Docker-Container-Book` 文件夹，这是你刚刚下载的包含本书源代码的代码库，作为工作文件夹。
- en: Note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you already have VS Code installed without using brew, then the guide at
    [https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line](https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line)
    will add code to your path.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 VS Code，而没有使用 brew，那么可以按照 [https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line](https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line)
    中的指南，将 code 添加到你的路径中。
- en: Use VS Code to explore the code that you can see in the folder you just opened.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 VS Code 探索你刚刚打开的文件夹中的代码。
- en: Installing VS Code on Windows
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 VS Code
- en: 'Follow these steps for installation:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'Open a new PowerShell window in *admin mode* and execute the following command:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 *管理员模式* 打开一个新的 PowerShell 窗口并执行以下命令：
- en: '[PRE15]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Close your PowerShell window and open a new one, to make sure VS Code is in
    your path.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭你的 PowerShell 窗口并打开一个新的窗口，以确保 VS Code 已加入你的路径。
- en: 'Now, navigate to your home directory:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到你的主目录：
- en: '[PRE16]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, open VS Code from within this folder:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从该文件夹中打开 VS Code：
- en: '[PRE17]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: VS will start and open the `The-Ultimate-Docker-Container-Book` folder, where
    you just downloaded the repository that contains the source code for this book,
    as the working folder.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: VS 将启动并打开 `The-Ultimate-Docker-Container-Book` 文件夹，这里就是你刚刚下载的包含本书源代码的仓库所在的工作文件夹。
- en: Use VS Code to explore the code that you can see in the folder you just opened.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 VS Code 探索你刚刚打开的文件夹中的代码。
- en: Installing VS Code on Linux
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 VS Code
- en: 'Follow these steps for installation:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'On your Debian or Ubuntu-based Linux machine, you can use Snap to install VS
    Code. Open a Bash Terminal and execute the following statement to install VS Code:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在基于 Debian 或 Ubuntu 的 Linux 机器上，你可以使用 Snap 安装 VS Code。打开 Bash 终端并执行以下语句来安装 VS
    Code：
- en: '[PRE18]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you’re using a Linux distribution that’s not based on Debian or Ubuntu,
    then please follow the following link for more details: [https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux).'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的 Linux 发行版不是基于 Debian 或 Ubuntu 的，请按照以下链接获取更多详细信息：[https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux)。
- en: 'Once VS Code has been installed successfully, navigate to your home directory:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦成功安装 VS Code，导航到你的主目录：
- en: '[PRE19]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, open VS Code from within this folder:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从该文件夹中打开 VS Code：
- en: '[PRE20]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: VS will start and open the `The-Ultimate-Docker-Container-Book` folder, where
    you just downloaded the repository that contains the source code for this book,
    as the working folder.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: VS 将启动并打开 `The-Ultimate-Docker-Container-Book` 文件夹，这里就是你刚刚下载的包含本书源代码的仓库所在的工作文件夹。
- en: Use VS Code to explore the code that you can see in the folder you just opened.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 VS Code 探索你刚刚打开的文件夹中的代码。
- en: Installing VS Code extensions
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 VS Code 扩展
- en: 'Extensions are what make VS Code such a versatile editor. On all three platforms
    (macOS, Windows, and Linux), you can install VS Code extensions the same way:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展是使 VS Code 成为如此多功能编辑器的关键。在所有三个平台（macOS、Windows 和 Linux）上，你可以以相同的方式安装 VS Code
    扩展：
- en: 'Open a Bash console (or PowerShell in Windows) and execute the following group
    of commands to install the most essential extensions we are going to use in the
    upcoming examples in this book:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个 Bash 控制台（或 Windows 中的 PowerShell），执行以下一组命令，安装我们将在本书接下来示例中使用的最基本扩展：
- en: '[PRE21]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We are installing extensions that enable us to work with Java, C#, .NET, and
    Python much more productively. We’re also installing an extension built to enhance
    our experience with Docker.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在安装一些扩展，这些扩展可以使我们在使用 Java、C#、.NET 和 Python 时更加高效。我们还在安装一个旨在增强我们使用 Docker
    的体验的扩展。
- en: After the preceding extensions have been installed successfully, restart VS
    Code to activate the extensions. You can now click the **Extensions** icon in
    the **activity** pane on the left-hand side of VS Code to see all of the installed
    extensions.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功安装上述扩展后，重新启动 VS Code 以激活这些扩展。你现在可以点击 VS Code 左侧活动面板中的 **扩展** 图标，查看所有已安装的扩展。
- en: 'To get a list of all installed extensions in your VS Code, use this command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取已安装的所有扩展列表，可以使用以下命令：
- en: '[PRE22]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Next, let’s install Docker Desktop.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们安装 Docker Desktop。
- en: Installing Docker Desktop on macOS or Windows
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 或 Windows 上安装 Docker Desktop
- en: 'If you are using macOS or have Windows 10 or later installed on your laptop,
    then we strongly recommend that you install Docker Desktop. Since early 2022,
    Docker has also released a version of Docker Desktop for Linux. Docker Desktop
    gives you the best experience when working with containers. Follow these steps
    to install Docker Desktop for your system:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 macOS 或者已经在笔记本电脑上安装了 Windows 10 或更高版本，我们强烈推荐你安装 Docker Desktop。从 2022
    年初开始，Docker 还发布了适用于 Linux 的 Docker Desktop 版本。Docker Desktop 在使用容器时能提供最佳体验。请按照以下步骤为你的系统安装
    Docker Desktop：
- en: 'No matter what OS you’re us[ing, navigate to the Docker start](https://www.docker.com/get-started)
    page at [https://www.docker.com/get-started](https://www.docker.com/get-started):'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无论你使用的是哪个操作系统，请访问 [Docker 入门](https://www.docker.com/get-started) 页面：[https://www.docker.com/get-started](https://www.docker.com/get-started)：
- en: '![Figure 2.1 – Get Started with Docker](img/B19199_02_01.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – 开始使用 Docker](img/B19199_02_01.jpg)'
- en: Figure 2.1 – Get Started with Docker
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 开始使用 Docker
- en: On the right-hand side of the view, you will find a blue **Sign up** button
    for Docker Hub. Click this button if you don’t have an account on Docker Hub yet,
    then create one. It is free, but you need an account to download the software.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图的右侧，你会看到一个蓝色的 **注册** 按钮，点击此按钮，如果你还没有 Docker Hub 账号，请创建一个。这个过程是免费的，但你需要一个账号来下载软件。
- en: On the left-hand side of the view, you will find a blue button called **Download
    for <your OS>**, where **<your OS>** can be Linux, Mac, or Windows, depending
    on which OS you are working with. In the authors’ case, it shows Mac as the target
    OS, but it got the CPU type wrong since the author is using a Mac with Apple’s
    M1 chip.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图的左侧，你会看到一个蓝色的按钮，标有 **为 <你的操作系统> 下载**，其中 **<你的操作系统>** 可以是 Linux、Mac 或 Windows，取决于你使用的操作系统。在作者的例子中，显示的是
    Mac 作为目标操作系统，但由于作者使用的是配备苹果 M1 芯片的 Mac，因此显示的 CPU 类型错误。
- en: 'Click the small drop-down triangle on the right-hand side of the button to
    get the full list of available downloads:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮右侧的小下拉三角形，可以查看完整的可用下载列表：
- en: '![Figure 2.2 – List of Docker Desktop targets](img/B19199_02_02.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – Docker Desktop 目标列表](img/B19199_02_02.jpg)'
- en: Figure 2.2 – List of Docker Desktop targets
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – Docker Desktop 目标列表
- en: Select the one that is appropriate for you and observe the installation package
    being downloaded.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 选择适合你的版本，并观察安装包的下载过程。
- en: Once the package has been completely downloaded, proceed with the installation,
    usually by double-clicking on the download package.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，继续安装，通常通过双击下载的安装包进行安装。
- en: Testing Docker Engine
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 Docker 引擎
- en: 'Now that you have successfully installed Docker Desktop, let’s test it. We
    will start by running a simple Docker container directly from the command line:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经成功安装了 Docker Desktop，接下来让我们进行测试。我们将从命令行直接运行一个简单的 Docker 容器：
- en: 'Open a Terminal window and execute the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端窗口，执行以下命令：
- en: '[PRE23]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see something like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似这样的内容：
- en: '![Figure 2.3 – Docker version of Docker Desktop](img/B19199_02_03.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – Docker Desktop 的 Docker 版本](img/B19199_02_03.jpg)'
- en: Figure 2.3 – Docker version of Docker Desktop
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – Docker Desktop 的 Docker 版本
- en: In the preceding output, we can see that it consists of two parts – a client
    and a server. Here, the server corresponds to Docker Engine, which is responsible
    for hosting and running containers. At the time of writing, the version of Docker
    Engine is `20.10.21`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，我们可以看到它由两部分组成——一个客户端和一个服务器。在这里，服务器对应于 Docker 引擎，负责托管和运行容器。在撰写本文时，Docker
    引擎的版本是`20.10.21`。
- en: 'To see whether you can run containers, enter the following command into the
    Terminal window and hit *Enter*:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了检查是否能够运行容器，请在终端窗口中输入以下命令并按下 *Enter*：
- en: '[PRE24]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If all goes well, your output should look something like the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你的输出应该类似于以下内容：
- en: '![Figure 2.4 – Running Hello-World on Docker Desktop for macOS](img/B19199_02_04.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 在 macOS 上通过 Docker Desktop 运行 Hello-World](img/B19199_02_04.jpg)'
- en: Figure 2.4 – Running Hello-World on Docker Desktop for macOS
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 在 macOS 上通过 Docker Desktop 运行 Hello-World
- en: If you read the preceding output carefully, you will have noticed that Docker
    didn’t find an image called `hello-world:latest` and thus decided to download
    it from a Docker image registry. Once downloaded, Docker Engine created a container
    from the image and ran it. The application runs inside the container and then
    outputs all the text, starting with `Hello` `from Docker!`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细阅读前面的输出，你会注意到 Docker 没有找到名为 `hello-world:latest` 的镜像，因此决定从 Docker 镜像注册表下载它。下载完成后，Docker
    引擎会根据该镜像创建一个容器并运行它。应用程序在容器内运行，并输出所有文本，开头是 `Hello` `from Docker!`。
- en: This is proof that Docker is installed and working correctly on your machine.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明 Docker 已经正确安装并在你的机器上正常工作。
- en: 'Let’s try another funny test image that’s usually used to check the Docker
    installation. Run the following command:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试另一个有趣的测试镜像，通常用于检查 Docker 安装。运行以下命令：
- en: '[PRE25]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see this or a similar output:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到以下或类似的输出：
- en: '![Figure 2.5 – Running the cowsay image from Rancher](img/B19199_02_05.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – 从 Rancher 运行 cowsay 镜像](img/B19199_02_05.png)'
- en: Figure 2.5 – Running the cowsay image from Rancher
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 从 Rancher 运行 cowsay 镜像
- en: Great – we have confirmed that Docker Engine works on our local computer. Now,
    let’s make sure the same is true for Docker Desktop.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒 – 我们已经确认 Docker 引擎在本地计算机上正常工作。现在，让我们确保 Docker Desktop 也同样工作正常。
- en: Testing Docker Desktop
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 Docker Desktop
- en: 'Depending on the operating system you are working with, be it Linux, Mac, or
    Windows, you can access the context menu for Docker Desktop in different areas.
    In any case, the symbol you are looking for is the little whale carrying containers.
    Here is the symbol as found on a Mac – :'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你所使用的操作系统（Linux、Mac 或 Windows），你可以在不同的区域访问 Docker Desktop 的上下文菜单。无论如何，你要寻找的符号是那个携带容器的小鲸鱼。以下是
    Mac 上找到的符号：
- en: '![](img/B19199_02_Icon.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19199_02_Icon.jpg)'
- en: '**Mac**: You’ll find the icon on the right-hand side of your menu bar at the
    top of the screen.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mac**：你将在屏幕顶部菜单栏的右侧找到该图标。'
- en: '**Windows**: You’ll find the icon in the Windows system tray.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：你将在 Windows 系统托盘中找到该图标。'
- en: '`Docker Desktop` via the **Applications** menu and open it. This will launch
    the Docker menu icon and open the Docker dashboard, reporting the status of Docker
    Desktop.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 **应用程序** 菜单打开 `Docker Desktop`，这将启动 Docker 菜单图标并打开 Docker 仪表盘，显示 Docker Desktop
    的状态。
- en: 'Once you have located the context menu for Docker Desktop on your computer,
    proceed with the following steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 找到 Docker Desktop 的上下文菜单后，请按照以下步骤操作：
- en: 'Click the *whale* icon to display the context menu of Docker Desktop. On the
    authors’ Mac, it looks like this:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 *鲸鱼* 图标以显示 Docker Desktop 的上下文菜单。在作者的 Mac 上，它看起来是这样的：
- en: '![Figure 2.6 – Context menu for Docker Desktop](img/B19199_02_06.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – Docker Desktop 的上下文菜单](img/B19199_02_06.jpg)'
- en: Figure 2.6 – Context menu for Docker Desktop
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – Docker Desktop 的上下文菜单
- en: 'From the menu, select **Dashboard**. The dashboard of Docker Desktop will open:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择 **仪表盘**。Docker Desktop 的仪表盘将打开：
- en: '![Figure 2.7 – Dashboard of Docker Desktop](img/B19199_02_07.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – Docker Desktop 的仪表盘](img/B19199_02_07.jpg)'
- en: Figure 2.7 – Dashboard of Docker Desktop
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – Docker Desktop 的仪表盘
- en: We can see that the dashboard has multiple tabs, indicated on the left-hand
    side of the view. Currently, the `hello-world` and `rancher/cowsay` Docker images.
    They both have a status of **Exited**.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到仪表盘有多个标签，位于视图的左侧。目前，`hello-world` 和 `rancher/cowsay` Docker 镜像的状态都是 **Exited**。
- en: Please take some time and explore this dashboard a bit. Don’t worry if you get
    lost. It will all become much clearer as we proceed through the various chapters
    of this book.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 请花些时间探索一下这个仪表盘。如果你迷路了也不用担心，随着我们继续本书的各章内容，一切会变得更加清晰。
- en: When you’re done exploring, close the dashboard window.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索完成后，关闭仪表盘窗口。
- en: Note
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Closing the dashboard will not stop Docker Desktop. The application, as well
    as Docker Engine, will continue to run in the background. If for some reason you
    want to stop Docker on your system completely, you can select **Quit Docker Desktop**
    from the context menu shown in *Step 1*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭仪表盘并不会停止 Docker Desktop。应用程序和 Docker 引擎会继续在后台运行。如果由于某种原因你想完全停止系统上的 Docker，可以从
    *步骤 1* 中显示的上下文菜单中选择 **退出 Docker Desktop**。
- en: Congratulations, you have successfully installed and tested Docker Desktop on
    your working computer! Now, let’s continue with a few other useful tools.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，已经成功在工作电脑上安装并测试了 Docker Desktop！接下来，我们将继续介绍一些其他有用的工具。
- en: Installing Docker Toolbox
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Docker Toolbox
- en: Docker Toolbox has been available for developers for a few years. It precedes
    newer tools such as Docker Desktop. Toolbox allows a user to work very elegantly
    with containers on any macOS or Windows computer. Containers must run on a Linux
    host. Neither Windows nor macOS can run containers natively. Hence, we need to
    run a Linux VM on our laptop, where we can then run our containers. Docker Toolbox
    installs VirtualBox on our laptop, which is used to run the Linux VMs we need.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Toolbox 已经推出几年，面向开发者使用。它在 Docker Desktop 等更新工具之前推出。Toolbox 允许用户在任何 macOS
    或 Windows 计算机上优雅地操作容器。容器必须在 Linux 主机上运行。Windows 和 macOS 都无法原生运行容器。因此，我们需要在笔记本电脑上运行一个
    Linux 虚拟机，在该虚拟机上运行容器。Docker Toolbox 在我们的笔记本上安装了 VirtualBox，用于运行我们所需的 Linux 虚拟机。
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Docker Toolbox has been deprecated recently and thus we won’t be discussing
    it further. For certain scenarios, it may still be of interest though, which is
    why we are mentioning it here.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Toolbox 最近已被弃用，因此我们将不再进一步讨论它。不过，在某些特定场景下，它仍可能具有一定的参考价值，因此我们在此提及它。
- en: Enabling Kubernetes on Docker Desktop
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Docker Desktop 上启用 Kubernetes
- en: Docker Desktop comes with integrated support for Kubernetes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Desktop 自带 Kubernetes 的集成功能。
- en: What is Kubernetes?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 Kubernetes？
- en: Kubernetes is a powerful platform for automating the deployment, scaling, and
    management of containerized applications. Whether you’re a developer, DevOps engineer,
    or system administrator, Kubernetes provides the tools and abstractions you need
    to manage your containers and applications in a scalable and efficient manner.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个强大的平台，用于自动化容器化应用程序的部署、扩展和管理。无论你是开发者、DevOps 工程师还是系统管理员，Kubernetes
    都提供了你所需的工具和抽象层，帮助你以可扩展和高效的方式管理容器和应用程序。
- en: 'This support is turned off by default. But worry not – it is very easy to turn
    on:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 该支持默认是关闭的。但不用担心——它非常容易开启：
- en: Open the dashboard of Docker Desktop.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Docker Desktop 的仪表板。
- en: In the top-left corner, select the cog wheel icon. This will open the **settings**
    page.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左上角，选择齿轮图标。这样会打开**设置**页面。
- en: 'On the left-hand side, select the **Kubernetes** tab and then check the **Enable**
    **Kubernetes** checkbox:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧，选择**Kubernetes**选项卡，然后勾选**启用 Kubernetes**复选框：
- en: '![Figure 2.8 – Enabling Kubernetes on Docker Desktop](img/B19199_02_08.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – 在 Docker Desktop 上启用 Kubernetes](img/B19199_02_08.jpg)'
- en: Figure 2.8 – Enabling Kubernetes on Docker Desktop
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 在 Docker Desktop 上启用 Kubernetes
- en: Click the **Apply &** **restart** button.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**应用并重启**按钮。
- en: Now, you will have to be patient since Docker is downloading all the supporting
    infrastructure and then starting Kubernetes.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要耐心等待，因为 Docker 正在下载所有支持基础设施，并启动 Kubernetes。
- en: Once Docker has restarted, you are ready to use Kubernetes. Please refer to
    the *Installing minikube* section on how to test Kubernetes.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Docker 重启完成，你就可以开始使用 Kubernetes。请参阅*安装 minikube*部分，了解如何测试 Kubernetes。
- en: Installing minikube
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 minikube
- en: If you are using Docker Desktop, you may not need minikube at all since the
    former already provides out-of-the-box support for Kubernetes. If you cannot use
    Docker Desktop or, for some reason, you only have access to an older version of
    the tool that does not yet support Kubernetes, then it is a good idea to install
    minikube. minikube provisions a single-node Kubernetes cluster on your workstation
    and is accessible through kubectl, which is the command-line tool used to work
    with Kubernetes.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Docker Desktop，那么你可能根本不需要 minikube，因为 Docker Desktop 已经原生支持 Kubernetes。如果你不能使用
    Docker Desktop，或者由于某些原因，你只能使用不支持 Kubernetes 的旧版本工具，那么安装 minikube 会是一个不错的选择。minikube
    会在你的工作站上配置一个单节点的 Kubernetes 集群，并且可以通过 kubectl 访问，kubectl 是用于与 Kubernetes 交互的命令行工具。
- en: Installing minikube on Linux, macOS, and Windows
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Linux、macOS 和 Windows 上安装 minikube
- en: 'To install mi[nikube on Linux, macOS, or Windows, navigate to the](https://kubernetes.io/docs/tasks/tools/install-minikube/)
    following link: [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/).'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Linux、macOS 或 Windows 上安装 minikube，请访问以下链接：[https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)。
- en: 'Follow the instructions carefully. Specifically, do the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 请仔细遵循指示。具体来说，请执行以下操作：
- en: 'Make sure you have a hypervisor installed, as described here:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已经安装了一个虚拟化管理程序，详细信息请参见这里：
- en: '![Figure 2.9 – Prerequisites for minikube](img/B19199_02_09.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – minikube 的先决条件](img/B19199_02_09.jpg)'
- en: Figure 2.9 – Prerequisites for minikube
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – minikube 的先决条件
- en: 'Under **1 Installation**, select the combination that is valid for you. As
    an example, you can see the authors’ selection for a *MacBook Air M1 laptop* as
    the target machine:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **1 安装** 下，选择适合你的组合。例如，你可以看到作者选择的目标机器是 *MacBook Air M1 笔记本电脑*：
- en: '![Figure 2.10 – Selecting the configuration](img/B19199_02_10.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – 选择配置](img/B19199_02_10.jpg)'
- en: Figure 2.10 – Selecting the configuration
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 选择配置
- en: Installing minikube for a MacBook Air M1 using Homebrew
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Homebrew 在 MacBook Air M1 上安装 minikube
- en: 'Follow these steps:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'In a Terminal window, execute the steps shown previously. In the authors’ case,
    this is as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中，执行之前显示的步骤。在作者的案例中，步骤如下：
- en: '[PRE26]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Test the installation with the following command:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令测试安装：
- en: '[PRE27]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we’re ready to start a cluster. Let’s start with the default:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备开始创建集群。让我们从默认配置开始：
- en: '[PRE28]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: minikube allows you to define single and multi-node clusters.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: minikube 允许你定义单节点和多节点集群。
- en: 'The first time you do this, it will take a while since minikube needs to download
    all the Kubernetes binaries. When it’s done, the last line of the output on your
    screen should be something like this:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次执行时，由于 minikube 需要下载所有的 Kubernetes 二进制文件，可能会花费一些时间。完成后，屏幕上的最后一行输出应该类似于：
- en: '[PRE29]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Great, we have successfully installed minikube on our system! Let’s try to play
    with minikube a bit by creating a cluster and running our first application in
    a container on it. Don’t worry if the following commands do not make a lot of
    sense to you at this time. We will discuss everything in this book in the coming
    chapters.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，我们已经成功在系统上安装了 minikube！让我们尝试通过创建一个集群并在其中运行我们的第一个容器应用来玩一下 minikube。如果以下命令对你来说不太明白，别担心，我们将在接下来的章节中详细讨论。
- en: Testing minikube and kubectl
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 minikube 和 kubectl
- en: 'Let’s start. Please follow these steps carefully:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。请仔细按照以下步骤操作：
- en: 'Let’s try to access our cluster using kubectl. First, we need to make sure
    we have the correct context selected for kubectl. If you have previously installed
    Docker Desktop and now minikube, you can use the following command:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试使用 kubectl 访问我们的集群。首先，我们需要确保 kubectl 选择了正确的上下文。如果你之前安装了 Docker Desktop，现在又安装了
    minikube，可以使用以下命令：
- en: '[PRE30]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should see this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到这个：
- en: '![Figure 2.11 – List of contexts for kubectl after installing minikube](img/chainner_txt_B19199_02_11.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – 安装 minikube 后 kubectl 的上下文列表](img/chainner_txt_B19199_02_11.jpg)'
- en: Figure 2.11 – List of contexts for kubectl after installing minikube
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – 安装 minikube 后 kubectl 的上下文列表
- en: The asterisk next to the context called minikube tells us that this is the current
    context. Thus, when using kubectl, we will work with the new cluster created by
    minikube.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 紧跟在名为 minikube 的上下文旁边的星号告诉我们，这是当前的上下文。因此，在使用 kubectl 时，我们将操作由 minikube 创建的新集群。
- en: 'Now, let’s see how many nodes our cluster has with this command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用这个命令查看集群中有多少个节点：
- en: '[PRE31]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You should get something similar to this. Note that the version shown could
    differ in your case:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似这样的输出。请注意，显示的版本可能与你的情况有所不同：
- en: '![Figure 2.12 – Showing the list of cluster nodes for the minikube cluster](img/B19199_02_12.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12 – 显示 minikube 集群的节点列表](img/B19199_02_12.jpg)'
- en: Figure 2.12 – Showing the list of cluster nodes for the minikube cluster
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 显示 minikube 集群的节点列表
- en: Here, we have a single-node cluster. The node’s role is that of the control
    plane, which means it is a master node. A typical Kubernetes cluster consists
    of a few master nodes and many worker nodes. The version of Kubernetes we’re working
    with here is `v1.25.3`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有一个单节点集群。该节点的角色是控制平面，这意味着它是主节点。一个典型的 Kubernetes 集群包含几个主节点和多个工作节点。我们在这里使用的
    Kubernetes 版本是 `v1.25.3`。
- en: 'Now, let’s try to run something on this cluster. We will use Nginx, a popular
    web server for this. If you have previously cloned the GitHub repository accompanying
    this book to the `The-Ultimate-Docker-Container-Book` folder in your home directory
    (`~`), then you should find a folder setup inside this folder that contains a
    `.yaml` file, which we’re going to use for this test:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试在这个集群上运行一些应用。我们将使用 Nginx，这是一个流行的 Web 服务器。如果你之前已经克隆了这本书附带的 GitHub 仓库到你主目录下的
    `The-Ultimate-Docker-Container-Book` 文件夹中，那么你应该会在这个文件夹中找到一个包含 `.yaml` 文件的子文件夹，我们将用这个文件进行测试：
- en: Open a new Terminal window.
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口。
- en: 'Navigate to the `The-Ultimate-Docker-Container-Book` folder:'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `The-Ultimate-Docker-Container-Book` 文件夹：
- en: '[PRE32]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a pod running Nginx with the following command:'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个运行 Nginx 的 pod：
- en: '[PRE33]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should see this output:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到这个输出：
- en: '[PRE34]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can double-check whether the pod is running with kubectl:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过 kubectl 再次检查 pod 是否正在运行：
- en: '[PRE35]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We should see this:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到这个：
- en: '[PRE36]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: "This indicates that we have 1 pod with Nginx running and that it has been restarted\L\
    \ 0 times."
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明我们有一个正在运行 Nginx 的 pod，且它已重启 0 次。
- en: 'To access the Nginx server, we need to expose the application running in the
    pod with the following command:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了访问 Nginx 服务器，我们需要用以下命令公开在 pod 中运行的应用程序：
- en: '[PRE37]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This is the only way can we access Nginx from our laptop – for example, via
    a browser. With the preceding command, we’re creating a Kubernetes service, as
    indicated in the output generated for the command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们从笔记本访问 Nginx 的唯一方式——例如，通过浏览器。通过上述命令，我们正在创建一个 Kubernetes 服务，输出中已显示该命令的生成情况：
- en: '[PRE38]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We can use kubectl to list all the services defined in our cluster:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用 kubectl 列出集群中定义的所有服务：
- en: '[PRE39]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We should see this:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到这个：
- en: '![Figure 2.13 – List of services on the minikube cluster](img/B19199_02_13.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.13 – minikube 集群上的服务列表](img/B19199_02_13.jpg)'
- en: Figure 2.13 – List of services on the minikube cluster
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – minikube 集群上的服务列表
- en: In the preceding output, we can see the second service called Nginx, which we
    just created. The service is of the `NodePort` type; port `80` of the pod had
    been mapped to port `30373` of the cluster node of our Kubernetes cluster in minikube.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述输出中，我们可以看到刚刚创建的第二个服务 Nginx。该服务属于 `NodePort` 类型；pod 的端口 `80` 已被映射到我们 minikube
    中 Kubernetes 集群节点的端口 `30373`。
- en: 'Now, we can use minikube to make a tunnel to our cluster and open a browser
    with the correct URL to access the Nginx web server. Use this command:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 minikube 创建一个隧道连接到我们的集群，并用正确的 URL 打开浏览器访问 Nginx web 服务器。使用以下命令：
- en: '[PRE40]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output in your Terminal window will be as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中的输出将如下所示：
- en: '![Figure 2.14 – Opening access to the Kubernetes cluster on minikube](img/B19199_02_14.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.14 – 打开对 minikube 上 Kubernetes 集群的访问](img/B19199_02_14.jpg)'
- en: Figure 2.14 – Opening access to the Kubernetes cluster on minikube
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – 打开对 minikube 上 Kubernetes 集群的访问
- en: The preceding output shows that minikube created a tunnel for the nginx service
    listening on node port `30373` to port `64171` on the host, which is on our lapto[p.](http://127.0.0.1:64171)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出显示，minikube 为 nginx 服务创建了一个隧道，将节点端口 `30373` 映射到主机上的端口 `64171`，主机就是我们的笔记本。[](http://127.0.0.1:64171)
- en: '[A new browser tab s](http://127.0.0.1:64171)hould have been opened automatically
    and should have navigated you to `http://127.0.0.1:64171`. You should see the
    welcome screen for Nginx:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[一个新的浏览器标签页](http://127.0.0.1:64171) 应该已自动打开，并将你导航至 `http://127.0.0.1:64171`。你应该能看到
    Nginx 的欢迎页面：'
- en: '![Figure 2.15 – Welcome screen of Nginx running on a Kubernetes cluster on
    minikube](img/B19199_02_15.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15 – 在 minikube 上运行 Kubernetes 集群的 Nginx 欢迎页面](img/B19199_02_15.jpg)'
- en: Figure 2.15 – Welcome screen of Nginx running on a Kubernetes cluster on minikube
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – 在 minikube 上运行 Kubernetes 集群的 Nginx 欢迎页面
- en: 'Wonderful, we have successfully run and accessed an Nginx web server on our
    little single-node Kubernetes cluster on minikube! Once you are done playing around,
    it is time to clean up:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，我们已经成功地在 minikube 上的小型单节点 Kubernetes 集群上运行并访问了 Nginx web 服务器！一旦完成实验，到了清理的时候：
- en: Stop the tunnel to the cluster by pressing *Ctrl* + *C* inside your Terminal
    window.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端窗口中按 *Ctrl* + *C* 停止到集群的隧道连接。
- en: 'Delete the nginx service and pod on the cluster:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除集群中的 nginx 服务和 pod：
- en: '[PRE41]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Stop the cluster with the following command:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令停止集群：
- en: '[PRE42]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You should see this:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到这个：
- en: '![Figure 2.16 – Stopping minikube](img/B19199_02_16.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16 – 停止 minikube](img/B19199_02_16.jpg)'
- en: Figure 2.16 – Stopping minikube
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – 停止 minikube
- en: Working with a multi-node minikube cluster
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多节点 minikube 集群
- en: 'At times, testing with a single-node cluster is not enough. Worry not – minikube
    has got you covered. Follow these instructions to create a true multi-node Kubernetes
    cluster in minikube:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，单节点集群的测试并不够。别担心——minikube 会帮你解决这个问题。按照以下说明，在 minikube 中创建一个真正的多节点 Kubernetes
    集群：
- en: 'If we want to work with a cluster consisting of multiple nodes in minikube,
    we can use this command:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想在 minikube 中使用包含多个节点的集群，可以使用以下命令：
- en: '[PRE43]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The preceding command creates a cluster with three nodes and calls it `demo`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令创建了一个包含三个节点的集群，并将其命名为 `demo`。
- en: 'Use kubectl to list all your cluster nodes:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 kubectl 列出所有集群节点：
- en: '[PRE44]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We have a 3-node cluster where the `demo` node is a master node, and the two
    remaining nodes are work nodes.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含 3 个节点的集群，其中 `demo` 节点是主节点，剩下的两个节点是工作节点。
- en: 'We are not going to go any further with this example here, so use the following
    command to stop the cluster:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里不打算继续这个示例，所以使用以下命令来停止集群：
- en: '[PRE45]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Delete all the clusters on your system with this command:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令删除系统上的所有集群：
- en: '[PRE46]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This will delete the default cluster (called minikube) and the demo cluster
    in our case.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除默认集群（在我们案例中名为minikube）和演示集群。
- en: With this, we will move on to the next interesting tool useful when working
    with containers and Kubernetes. You should have this installed and readily available
    on your work computer.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们将进入下一个在容器和Kubernetes工作中非常有用的工具。你应该在工作计算机上安装并随时准备好使用它。
- en: Installing Kind
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Kind
- en: 'Kind is another popular tool that can be used to run a multi-node Kubernetes
    cluster locally on your machine. It is super easy to install and use. Let’s go:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Kind是另一个流行的工具，可以在本地机器上运行一个多节点Kubernetes集群。它非常容易安装和使用。让我们开始吧：
- en: 'Use the appropriate package manager for your platf[orm to install Kind. You
    can find more detailed](https://kind.sigs.k8s.io/docs/user/quick-start/) information
    about the installation process here: [https://kind.sigs.k8s.io/docs/user/quick-start/](https://kind.sigs.k8s.io/docs/user/quick-start/):'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用适合你平台的包管理器来安装Kind。你可以在这里找到更详细的[安装过程](https://kind.sigs.k8s.io/docs/user/quick-start/)信息：[https://kind.sigs.k8s.io/docs/user/quick-start/](https://kind.sigs.k8s.io/docs/user/quick-start/)：
- en: 'On MacOS, use Homebrew to install Kind with the following command:'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MacOS上，使用Homebrew通过以下命令安装Kind：
- en: '[PRE47]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'On a Windows machine, use Chocolatey to do the same with this command:'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows机器上，使用Chocolatey通过以下命令来做同样的事情：
- en: '[PRE48]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Finally, on a Linu[x machine, you can use the following script to insta](https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64)ll
    Kind from its binaries:'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在Linux机器上，你可以使用以下脚本从其二进制文件安装Kind：[链接](https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64)
- en: '[PRE49]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Once Kind has been installed, test it with the following command:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Kind后，使用以下命令进行测试：
- en: '[PRE50]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If you’re on a Mac, it should output something like this:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Mac，它应该会输出类似这样的内容：
- en: '[PRE51]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now, try to create a simple Kubernetes cluster consisting of one master node
    and two worker nodes. Use this command to accomplish this:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，尝试创建一个由一个主节点和两个工作节点组成的简单Kubernetes集群。使用以下命令来实现：
- en: '[PRE52]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'After some time, you should see this output:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，你应该会看到以下输出：
- en: '![Figure 2.17 – Creating a cluster with Kind](img/B19199_02_17.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![图2.17 – 使用Kind创建集群](img/B19199_02_17.jpg)'
- en: Figure 2.17 – Creating a cluster with Kind
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.17 – 使用Kind创建集群
- en: 'To verify that a cluster has been created, use this command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证集群是否已创建，请使用以下命令：
- en: '[PRE53]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The preceding output shows that there is exactly one cluster called **kind**,
    which is the default name.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出显示，正好有一个名为**kind**的集群，这是默认名称。
- en: 'We can create an additional cluster with a different name using the `--name`
    parameter, like so:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`--name`参数创建一个具有不同名称的额外集群，如下所示：
- en: '[PRE54]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Listing the clusters will then show this:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出集群后将显示如下：
- en: '[PRE55]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: And this works as expected.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这按预期工作。
- en: Testing Kind
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试Kind
- en: 'Now that we have used kind to create two sample clusters, let’s use kubectl
    to play with one of the clusters and run the first application on it. We will
    be using Nginx for this, similar to what we did with minikube:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用Kind创建了两个示例集群，让我们使用kubectl来操作其中一个集群，并在其上运行第一个应用程序。我们将使用Nginx，就像我们在minikube中做的那样：
- en: 'We can now use **kubectl** to access and work with the clusters we just created.
    While creating a cluster, Kind also updated the configuration file for our kubectl.
    We can double-check this with the following command:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用**kubectl**访问并操作我们刚刚创建的集群。在创建集群时，Kind也更新了我们的kubectl配置文件。我们可以使用以下命令进行再次确认：
- en: '[PRE56]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'It should produce the following output:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该会产生以下输出：
- en: '![Figure 2.18 – List of contexts defined for kubectl](img/B19199_02_18.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![图2.18 – 为kubectl定义的上下文列表](img/B19199_02_18.jpg)'
- en: Figure 2.18 – List of contexts defined for kubectl
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.18 – 为kubectl定义的上下文列表
- en: You can see that the kind and demo clusters are part of the list of known clusters
    and that the demo cluster is the current context for kubectl.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，kind和demo集群是已知集群列表的一部分，并且demo集群是当前kubectl的上下文。
- en: 'Use the following command to make the demo cluster your current cluster if
    the asterisk is indicating that another cluster is current:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果星号显示的是另一个集群作为当前集群，使用以下命令将demo集群设置为当前集群：
- en: '[PRE57]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Let’s list all the nodes of the `sample-cluster` cluster:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们列出`sample-cluster`集群的所有节点：
- en: '[PRE58]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The output should be like this:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该是这样的：
- en: '![Figure 2.19 – Showing the list of nodes on the kind cluster](img/B19199_02_19.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.19 – 显示 Kind 集群上节点列表](img/B19199_02_19.jpg)'
- en: Figure 2.19 – Showing the list of nodes on the kind cluster
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.19 – 显示 Kind 集群上节点列表
- en: 'Now, let’s try to run the first container on this cluster. We will use our
    trusted Nginx web server, as we did earlier. Use the following command to run
    it:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试在这个集群上运行第一个容器。我们将像之前一样使用我们信任的 Nginx Web 服务器。使用以下命令来运行它：
- en: '[PRE59]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The output should be as follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '[PRE60]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'To access the Nginx server, we need to do port forwarding using kubectl. Use
    this command to do so:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问 Nginx 服务器，我们需要使用 kubectl 进行端口转发。使用以下命令实现：
- en: '[PRE61]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The output should look like this:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '[PRE62]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Open a new browser tab and navigate to `http://localhost:8080`; you should
    see the welcome screen of Nginx:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的浏览器标签页，访问 `http://localhost:8080`；你应该能看到 Nginx 的欢迎界面：
- en: '![Figure 2.20 – Welcome screen of Nginx running on a Kind cluster](img/B19199_02_20.jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.20 – 在 Kind 集群上运行的 Nginx 欢迎界面](img/B19199_02_20.jpg)'
- en: Figure 2.20 – Welcome screen of Nginx running on a Kind cluster
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.20 – 在 Kind 集群上运行的 Nginx 欢迎界面
- en: 'Once you’ve finished playing with Nginx, use this command to delete the pod
    from the cluster:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你完成了对 Nginx 的操作，使用以下命令从集群中删除该 Pod：
- en: '[PRE63]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Before we continue, let’s clean up and delete the two clusters we just created:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们清理并删除刚刚创建的两个集群：
- en: '[PRE64]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: With this, we have installed all the tools that we will need to successfully
    work with containers on our local machine.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，我们已经安装了成功在本地机器上与容器一起工作的所有工具。
- en: Summary
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we set up and configured our personal or working environment
    so that we can productively work with Docker containers. This equally applies
    to developers, DevOps, and operations engineers.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们设置并配置了我们的个人或工作环境，以便能够高效地与 Docker 容器工作。这同样适用于开发人员、DevOps 和运维工程师。
- en: We started with a package manager that should be at the fingertip of every serious
    engineer. It makes installing and managing applications and tools so much easier.
    Next, we made sure that we used a good shell for scripting – a powerful editor.
    We then made sure to have Docker Desktop installed, which we can use to run and
    test containers natively. Finally, we installed and quickly tested minikube and
    Kind on our machine. The latter are tools that can be used to run and test our
    containers on a local Kubernetes cluster.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个应该是每个严肃工程师手边的包管理器开始。它使得安装和管理应用程序及工具变得更加容易。接下来，我们确保使用了一个良好的脚本 shell —— 一个强大的编辑器。然后，我们确保安装了
    Docker Desktop，利用它我们可以原生运行和测试容器。最后，我们在机器上安装并快速测试了 minikube 和 Kind。这些工具可以用来在本地
    Kubernetes 集群上运行和测试容器。
- en: In the next chapter, we’re going to learn important facts about containers.
    For example, we will explore how we can run, stop, list, and delete containers,
    but more than that, we will also dive deep into the anatomy of containers.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习容器的关键概念。例如，我们将探讨如何运行、停止、列出和删除容器，但更重要的是，我们还将深入了解容器的结构。
- en: Furthe[r reading](https://chocolatey.org/)
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[进一步阅读](https://chocolatey.org/)'
- en: '[Consider the](https://chocolatey.org/) following links for further reading:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[考虑以下](https://chocolatey.org/)链接以便进一步阅读：'
- en: '[*Chocolatey – The Packag*](https://dockr.ly/2nuZUkU)*e Manager for* *Windows*:
    [https://chocolatey.org/](https://chocolatey.org/)'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*Chocolatey – Windows 的包管理器*](https://dockr.ly/2nuZUkU)*:* [https://chocolatey.org/](https://chocolatey.org/)'
- en: '*Run Docker on Hyper-V with Docker* *Machine*: [http://bit.ly/2HGMPiI](http://bit.ly/2HGMPiI)'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过 Docker* *Machine 在 Hyper-V 上运行 Docker*: [http://bit.ly/2HGMPiI](http://bit.ly/2HGMPiI)'
- en: '*Developing inside a* *Container*: [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在* *容器内开发*: [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)'
- en: Questions
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Based on what was covered in this chapter, please answer the following questions:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 基于本章所涵盖的内容，请回答以下问题：
- en: Why would we care about installing and using a package manager on our local
    computer?
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们要在本地计算机上安装和使用包管理器？
- en: With Docker Desktop, you can develop and run Linux containers.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Docker Desktop，您可以开发和运行 Linux 容器。
- en: 'True'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Why are good scripting skills (such as Bash or PowerShell) essential for the
    productive use of containers?
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么良好的脚本编写技能（如 Bash 或 PowerShell）对于高效使用容器至关重要？
- en: Name three to four Linux distributions on which Docker is certified to run.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请列举三到四个 Docker 认证可以运行的 Linux 发行版。
- en: You installed minikube on your system. What kind of tasks will you use this
    tool for?
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在系统上安装了 minikube。你会用这个工具来做哪些任务？
- en: Answers
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'The following are the answers to this chapter’s questions:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章问题的答案：
- en: Package managers such as `apk`, `apt`, or `yum` on Linux systems, Homebrew on
    macOS, and Chocolatey on Windows make it easy to automate the installation of
    applications, tools, and libraries. It is a much more repeatable process when
    an installation happens interactively, and the user has to click through a series
    of views.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Linux 系统中的 `apk`、`apt` 或 `yum` 包管理器，macOS 中的 Homebrew，以及 Windows 中的 Chocolatey，都使得自动化安装应用程序、工具和库变得更加容易。相比用户在安装过程中需要点击一系列视图进行交互的过程，自动化安装更具可重复性。
- en: The answer is *True*. Yes, with Docker Desktop, you can develop and run Linux
    containers. It is also possible, but not discussed in this book, to develop and
    run native Windows containers with this edition of Docker Desktop. With the macOS
    and Linux editions, you can only develop and run Linux containers.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 答案是 *正确*。是的，使用 Docker Desktop，你可以开发和运行 Linux 容器。虽然本书未涉及，但使用此版本的 Docker Desktop，也可以开发和运行原生的
    Windows 容器。使用 macOS 和 Linux 版本时，你只能开发和运行 Linux 容器。
- en: Scripts are used to automate processes and hence avoid human errors. Building,
    testing, sharing, and running Docker containers are tasks that should always be
    automated to increase their reliability and repeatability.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本用于自动化流程，从而避免人为错误。构建、测试、共享和运行 Docker 容器这些任务应始终进行自动化，以提高其可靠性和可重复性。
- en: 'The following Linux distros are certified to run Docker: **Red Hat Linux**
    (**RHEL**), CentOS, Oracle Linux, Ubuntu, and more.'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下 Linux 发行版已认证可以运行 Docker：**Red Hat Linux**（**RHEL**）、CentOS、Oracle Linux、Ubuntu
    等。
- en: minikube makes it possible to define and run a single or multi-node cluster
    on a local computer such as a developer’s laptop. This way, using minikube, you
    can run and test containerized applications locally on your machine and do not
    have to rely on a remote Kubernetes cluster such as one running in the cloud on,
    say, AWS, Microsoft Azure, or Google cloud.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: minikube 使得在本地计算机上（如开发者的笔记本）定义和运行单节点或多节点集群成为可能。通过 minikube，你可以在本地机器上运行和测试容器化应用程序，无需依赖像
    AWS、Microsoft Azure 或 Google Cloud 上运行的远程 Kubernetes 集群。
- en: Part 2:Containerization Fundamentals
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2部分：容器化基础
- en: This part teaches you how to start, stop, and remove containers, and how to
    inspect containers to retrieve additional metadata from them. Furthermore, it
    explains how to run additional processes and how to attach to the main process
    in an already running container. It also covers how to retrieve logging information
    from a container, which is produced by the processes running inside it. Finally,
    this part introduces the inner workings of a container, including such things
    as Linux namespaces and groups.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分将教你如何启动、停止和删除容器，并如何检查容器以获取更多的元数据。此外，它还解释了如何运行额外的进程，以及如何附加到已运行容器中的主进程。还涵盖了如何从容器中检索日志信息，这些信息是由容器内运行的进程生成的。最后，本部分介绍了容器的内部工作原理，包括Linux命名空间和组等内容。
- en: '[*Chapter 3*](B19199_03.xhtml#_idTextAnchor057), *Mastering Containers*'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第3章*](B19199_03.xhtml#_idTextAnchor057)，*掌握容器*'
- en: '[*Chapter 4*](B19199_04.xhtml#_idTextAnchor083), *Creating and Managing Container
    Images*'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B19199_04.xhtml#_idTextAnchor083)，*创建和管理容器镜像*'
- en: '[*Chapter 5*](B19199_05.xhtml#_idTextAnchor109), *Data Volumes and Configuration*'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B19199_05.xhtml#_idTextAnchor109)，*数据卷和配置*'
- en: '[*Chapter 6*](B19199_06.xhtml#_idTextAnchor130), *Debugging Code Running in
    Containers*'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B19199_06.xhtml#_idTextAnchor130)，*调试运行在容器中的代码*'
- en: '[*Chapter 7*](B19199_07.xhtml#_idTextAnchor150), *Testing* *Applications* *Running
    in Containers*'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B19199_07.xhtml#_idTextAnchor150)，*测试* *运行在容器中的应用程序*'
- en: '[*Chapter 8*](B19199_08.xhtml#_idTextAnchor174), *Increasing Productivity with
    Docker Tips and Tricks*'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B19199_08.xhtml#_idTextAnchor174)，*通过 Docker 小技巧提高生产力*'
