- en: Setting Up a Working Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置工作环境
- en: In the last chapter, we learned what Docker containers are and why they're important.
    We learned what kinds of problems containers solve in a modern software supply
    chain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，我们了解了 Docker 容器是什么以及它们的重要性。我们学习了容器在现代软件供应链中解决了哪些问题。
- en: In this chapter, we are going to prepare our personal or working environment
    to work efficiently and effectively with Docker. We will discuss in detail how
    to set up an ideal environment for developers, DevOps, and operators that can
    be used when working with Docker containers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将准备个人或工作环境，以便高效、有效地使用 Docker。我们将详细讨论如何为开发人员、DevOps 和运维人员设置理想的工作环境，这些环境可以在使用
    Docker 容器时使用。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下内容：
- en: The Linux command shell
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 命令行
- en: PowerShell for Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 的 PowerShell
- en: Installing and using a package manager
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和使用包管理器
- en: Installing Git and cloning the code repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Git 并克隆代码仓库
- en: Choosing and installing a code editor
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择和安装代码编辑器
- en: Installing Docker for Desktop on macOS or Windows
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 或 Windows 上安装 Docker for Desktop
- en: Installing Docker Toolbox
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Docker Toolbox
- en: Installing Minikube
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Minikube
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need a laptop or a workstation with either macOS
    or Windows, preferably Windows 10 Professional, installed. You should also have
    free internet access to download applications and permission to install those
    applications on your laptop.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你将需要一台安装了 macOS 或 Windows 的笔记本电脑或工作站，最好是安装了 Windows 10 专业版。你还需要具备可用的互联网连接，以便下载应用程序并安装这些应用程序。
- en: It is also possible to follow along with this book if you have a Linux distribution
    as your operating system, such as Ubuntu 18.04 or newer. I will try to indicate
    where commands and samples differ significantly from the ones on macOS or Windows.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的操作系统是 Linux 发行版，例如 Ubuntu 18.04 或更新版本，你也可以跟随本书的内容进行学习。我会尽力指出在命令和示例上与 macOS
    或 Windows 存在显著差异的地方。
- en: The Linux command shell
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 命令行
- en: Docker containers were first developed on Linux for Linux. It is hence natural
    that the primary command-line tool used to work with Docker, also called a shell,
    is a Unix shell; remember, Linux derives from Unix. Most developers use the Bash
    shell. On some lightweight Linux distributions, such as Alpine, Bash is not installed
    and consequently one has to use the simpler Bourne shell, just called *sh*. Whenever we are
    working in a Linux environment, such as inside a container or on a Linux VM, we
    will use either `/bin/bash` or `/bin/sh`, depending on their availability.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器最初是在 Linux 上为 Linux 开发的。因此，使用的主要命令行工具（也叫 shell）是 Unix shell；记住，Linux
    来源于 Unix。大多数开发人员使用 Bash shell。在一些轻量级的 Linux 发行版中，例如 Alpine，Bash 默认未安装，因此需要使用更简单的
    Bourne shell，通常称为 *sh*。每当我们在 Linux 环境中工作时，无论是在容器内还是在 Linux 虚拟机中，我们都会根据其可用性使用 `/bin/bash`
    或 `/bin/sh`。
- en: Although Apple's macOS X is not a Linux OS, Linux and macOS X are both flavors
    of Unix and hence support the same set of tools. Among those tools are the shells.
    So, when working on macOS, you will probably be using the Bash shell.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管苹果的 macOS X 不是 Linux 操作系统，但 Linux 和 macOS X 都是 Unix 系统的变种，因此支持相同的工具集。其中包括
    shell 工具。因此，在 macOS 上工作时，你很可能会使用 Bash shell。
- en: 'In this book, we expect from you a familiarity with the most basic scripting
    commands in Bash and PowerShell, if you are working on Windows. If you are an
    absolute beginner, then we strongly recommend that you familiarize yourself with
    the following cheat sheets:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们希望你熟悉最基本的 Bash 和 PowerShell 脚本命令，尤其是在 Windows 系统上工作时。如果你是完全的初学者，我们强烈建议你参考以下备忘单：
- en: '*Linux Command Line Cheat Sheet* by Dave Child at [http://bit.ly/2mTQr8l](http://bit.ly/2mTQr8l)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Linux 命令行备忘单* 由 Dave Child 提供，链接在 [http://bit.ly/2mTQr8l](http://bit.ly/2mTQr8l)'
- en: '*PowerShell Basic Cheat Sheet* at [http://bit.ly/2EPHxze](http://bit.ly/2EPHxze)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*PowerShell 基本备忘单* 可在 [http://bit.ly/2EPHxze](http://bit.ly/2EPHxze) 查看'
- en: PowerShell for Windows
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 的 PowerShell
- en: On a Windows computer, laptop, or server, we have multiple command-line tools
    available. The most familiar is the command shell. It has been available on any
    Windows computer for decades. It is a very simple shell. For more advanced scripting,
    Microsoft has developed PowerShell. PowerShell is very powerful and very popular
    among engineers working on Windows. On Windows 10, finally, we have the so-called* Windows
    Subsystem for Linux*, which allows us to use any Linux tool, such as the Bash
    or Bourne shells. Apart from this, there are also other tools that install a Bash
    shell on Windows, for example, the Git Bash shell. In this book, all commands
    will use Bash syntax. Most of the commands also run in PowerShell.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 电脑、笔记本电脑或服务器上，我们有多种命令行工具可供使用。最常见的是命令提示符，它已经在任何 Windows 电脑上存在了几十年。它是一个非常简单的
    shell。为了更高级的脚本编写，微软开发了 PowerShell。PowerShell 非常强大，并且在 Windows 上工作的工程师中非常流行。在 Windows
    10 上，我们终于有了所谓的 *Windows 子系统 Linux*，它允许我们使用任何 Linux 工具，如 Bash 或 Bourne shell。除此之外，还有其他工具可以在
    Windows 上安装 Bash shell，例如 Git Bash shell。在本书中，所有命令都将使用 Bash 语法。大多数命令也可以在 PowerShell
    中运行。
- en: Our recommendation for you is hence to either use PowerShell or any other Bash
    tool to work with Docker on Windows.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们建议你使用 PowerShell 或任何其他 Bash 工具来在 Windows 上使用 Docker。
- en: Using a package manager
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用包管理器
- en: The easiest way to install software on a macOS or Windows laptop is to use a good package
    manager. On macOS, most people use Homebrew, and on Windows, Chocolatey is a good
    choice. If you're using a Debian-based Linux distribution such as Ubuntu, then
    the package manager of choice for most is `apt`, which is installed by default.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 或 Windows 笔记本电脑上安装软件的最简单方法是使用一个好的包管理器。在 macOS 上，大多数人使用 Homebrew，而在 Windows
    上，Chocolatey 是一个不错的选择。如果你使用的是基于 Debian 的 Linux 发行版，例如 Ubuntu，那么大多数人的包管理器选择是默认安装的
    `apt`。
- en: Installing Homebrew on macOS
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Homebrew
- en: 'Homebrew is the most popular package manager on macOS, and it is easy to use
    and very versatile. Installing Homebrew on macOS is simple; just follow the instructions
    at [https://brew.sh/](https://brew.sh/):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 是 macOS 上最流行的包管理器，使用起来简单且非常灵活。在 macOS 上安装 Homebrew 很简单；只需按照[https://brew.sh/](https://brew.sh/)上的说明操作：
- en: 'In a nutshell, open a new Terminal window and execute the following command
    to install Homebrew:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简而言之，打开一个新的终端窗口并执行以下命令来安装 Homebrew：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the installation is finished, test whether Homebrew is working by entering `brew
    --version` in the Terminal. You should see something like this:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，使用 `brew --version` 命令在终端中测试 Homebrew 是否正常工作。你应该看到类似下面的内容：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we are ready to use Homebrew to install tools and utilities. If we, for
    example, want to install the Vi text editor, we can do so like this:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备使用 Homebrew 安装工具和实用程序。例如，如果我们想要安装 Vi 文本编辑器，可以这样操作：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will then download and install the editor for you.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载并为你安装编辑器。
- en: Installing Chocolatey on Windows
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Chocolatey
- en: 'Chocolatey is a popular package manager for Windows, built on PowerShell. To
    install the Chocolatey package manager, please follow the instructions at [https://chocolatey.org/](https://chocolatey.org/) or
    open a new PowerShell window in admin mode and execute the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey 是一个流行的 Windows 包管理器，基于 PowerShell。要安装 Chocolatey 包管理器，请按照[https://chocolatey.org/](https://chocolatey.org/)上的说明操作，或者以管理员身份打开一个新的
    PowerShell 窗口并执行以下命令：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It is important to run the preceding command as an administrator, otherwise,
    the installation will not succeed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，以管理员身份运行上述命令，否则安装将无法成功。
- en: 'Once Chocolatey is installed, test it with the `choco --version` command. You
    should see output similar to the following:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Chocolatey 后，使用 `choco --version` 命令测试它。你应该能看到类似以下的输出：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To install an application such as the Vi editor, use the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装像 Vi 编辑器这样的应用程序，请使用以下命令：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `-y` parameter makes sure that the installation happens without asking for
    reconfirmation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`-y` 参数确保安装过程中不会要求重新确认。'
- en: Please note that once Chocolatey has installed an application, you need to open
    a new PowerShell window to use that application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一旦 Chocolatey 安装了一个应用程序，你需要打开一个新的 PowerShell 窗口才能使用该应用程序。
- en: Installing Git
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Git
- en: 'We are using Git to clone the sample code accompanying this book from its GitHub
    repository. If you already have Git installed on your computer, you can skip this
    section:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Git 从本书的 GitHub 仓库中克隆示例代码。如果你已经在电脑上安装了 Git，可以跳过这一节：
- en: 'To install Git on your macOS, use the following command in a Terminal window:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 macOS 上安装 Git，请在终端窗口中使用以下命令：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To install Git on Windows, open a PowerShell window and use Chocolatey to install
    it:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Windows 上安装 Git，请打开 PowerShell 窗口并使用 Chocolatey 安装它：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, on your Debian or Ubuntu machine, open a Bash console and execute
    the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在你的 Debian 或 Ubuntu 机器上，打开 Bash 控制台并执行以下命令：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once Git is installed, verify that it is working. On all platforms, use the
    following:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Git 安装完成，验证它是否工作。所有平台上都使用以下命令：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This should output something along the lines of the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会输出类似于以下内容的结果：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that Git is working, we can clone the source code accompanying this book
    from GitHub. Execute the following command:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在 Git 已经可以正常工作，我们可以从 GitHub 克隆本书随附的源代码。执行以下命令：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will clone the content of the master branch into your local folder, `~/fod-solution`.
    This folder will now contain all of the sample solutions for the labs we are going
    to do together in this book. Refer to these sample solutions if you get stuck.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把主分支的内容克隆到你的本地文件夹 `~/fod-solution` 中。这个文件夹现在将包含我们在本书中一起完成的所有实验室的示例解决方案。如果你遇到困难，可以参考这些示例解决方案。
- en: Now that we have installed the basics, let's continue with the code editor.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了基本工具，让我们继续使用代码编辑器。
- en: Choosing a code editor
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一个代码编辑器
- en: Using a good code editor is essential to working productively with Docker. Of
    course, which editor is the best is highly controversial and depends on your personal
    preference. A lot of people use Vim, or others such as Emacs, Atom, Sublime, or **Visual
    Studio Code** (**VS Code**), to just name a few. VS Code is a completely free
    and lightweight editor, yet it is very powerful and is available for macOS, Windows,
    and Linux. According to Stack Overflow, it is currently by far the most popular
    code editor. If you are not yet sold on another editor, I highly recommend that
    you give VS Code a try.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用好的代码编辑器对于高效使用 Docker 至关重要。当然，哪个编辑器最好是一个备受争议的话题，取决于个人的偏好。很多人使用 Vim，或者其他一些编辑器，如
    Emacs、Atom、Sublime，或者 **Visual Studio Code**（**VS Code**），仅举几例。VS Code 是一个完全免费的轻量级编辑器，但它非常强大，支持
    macOS、Windows 和 Linux。根据 Stack Overflow 的数据，它目前是最受欢迎的代码编辑器。如果你还没有决定使用其他编辑器，强烈建议你尝试一下
    VS Code。
- en: But if you already have a favorite code editor, then please continue using it.
    As long as you can edit text files, you're good to go. If your editor supports
    syntax highlighting for Dockerfiles and JSON and YAML files, then even better.
    The only exception will be [Chapter 6](b6647803-2c5c-4b9d-9a4a-a836ac356329.xhtml),
    *Debugging Code Running in a Container*. The examples presented in that chapter
    will be heavily tailored toward VS Code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你已经有了喜欢的代码编辑器，请继续使用它。只要你能编辑文本文件就可以了。如果你的编辑器支持 Dockerfile、JSON 和 YAML 文件的语法高亮，那就更好了。唯一的例外是[第
    6 章](b6647803-2c5c-4b9d-9a4a-a836ac356329.xhtml)，*调试容器中运行的代码*。该章中的示例将特别针对 VS Code
    进行定制。
- en: Installing VS Code on macOS
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 VS Code
- en: 'Follow these steps for installation:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'Open a new Terminal window and execute the following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口并执行以下命令：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once VS Code has been installed successfully, navigate to your home directory
    (`~`) and create a folder, `fundamentals-of-docker`; then navigate into this new
    folder:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 VS Code 安装成功，导航到你的主目录（`~`）并创建一个文件夹 `fundamentals-of-docker`；然后进入这个新文件夹：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now open VS Code from within this folder:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从此文件夹中打开 VS Code：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Don't forget the period (.) in the preceding command. VS will start and open
    the current folder (`~/fundamentals-of-docker`) as the working folder.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记前面命令中的点（.）。VS Code 将启动并将当前文件夹（`~/fundamentals-of-docker`）作为工作文件夹打开。
- en: Installing VS Code on Windows
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 VS Code
- en: 'Follow these steps for installation:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'Open a new PowerShell window in admin mode and execute the following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在管理员模式下打开一个新的 PowerShell 窗口，并执行以下命令：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Close your PowerShell window and open a new one, to make sure VS Code is in
    your path.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 PowerShell 窗口并打开一个新窗口，确保 VS Code 已添加到你的路径中。
- en: 'Now navigate to your home directory and create a folder, `fundamentals-of-docker`;
    then navigate into this new folder:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在导航到你的主目录并创建一个文件夹 `fundamentals-of-docker`；然后进入这个新文件夹：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally open Visual Studio Code from within this folder:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后从此文件夹中打开 Visual Studio Code：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Don't forget the period (.) in the preceding command. VS will start and open
    the current folder (`~\fundamentals-of-docker`) as the working folder.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记前面命令中的点（.）。VS 将启动并将当前文件夹（`~\fundamentals-of-docker`）作为工作文件夹打开。
- en: Installing VS Code on Linux
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 VS Code
- en: 'Follow these steps for installation:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'On your Debian or Ubuntu-based Linux machine, open a Bash Terminal and execute
    the following statement to install VS Code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Debian 或 Ubuntu 基础的 Linux 机器上，打开一个 Bash 终端，执行以下命令来安装 VS Code：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you're using a Linux distribution that's not based on Debian or Ubuntu, then
    please follow the following link for more details: [https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是非 Debian 或 Ubuntu 基础的 Linux 发行版，请点击以下链接获取更多详细信息：[https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux)
- en: 'Once VS Code has been installed successfully, navigate to your home directory
    (`~`) and create a folder, `fundamentals-of-docker`; then navigate into this new
    folder:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 VS Code 成功安装，导航到你的主目录（`~`）并创建一个名为 `fundamentals-of-docker` 的文件夹；然后进入这个新文件夹：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now open Visual Studio Code from within this folder:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从该文件夹内打开 Visual Studio Code：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Don't forget the period (.) in the preceding command. VS will start and open
    the current folder (`~/fundamentals-of-docker`) as the working folder.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记前面命令中的句点（.）。VS 将启动并将当前文件夹（`~/fundamentals-of-docker`）作为工作文件夹打开。
- en: Installing VS Code extensions
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 VS Code 扩展
- en: 'Extensions are what make VS Code such a versatile editor. On all three platforms,
    macOS, Windows, and Linux, you can install VS Code extensions the same way:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展是让 VS Code 成为多功能编辑器的关键。在所有三个平台——macOS、Windows 和 Linux 上，你都可以以相同的方式安装 VS Code
    扩展：
- en: 'Open a Bash console (or PowerShell in Windows) and execute the following group
    of commands to install the most essential extensions we are going to use in the
    upcoming examples in this book:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个 Bash 控制台（在 Windows 上是 PowerShell），执行以下一组命令来安装我们在本书接下来的示例中将使用的最基本的扩展：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We are installing extensions that enable us to work with Java, C#, .NET, and
    Python much more productively. We're also installing an extension built to enhance
    our experience with Docker.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在安装一些扩展，以便我们能更高效地使用 Java、C#、.NET 和 Python 工作。我们还将安装一个旨在提升 Docker 使用体验的扩展。
- en: After the preceding extensions have been installed successfully, restart VS
    Code to activate the extensions. You can now click the extensions icon in the
    activity pane on the left-hand side of VS Code to see all of the installed extensions.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面提到的扩展成功安装后，重启 VS Code 以激活这些扩展。现在，你可以点击 VS Code 左侧活动面板中的扩展图标，查看所有已安装的扩展。
- en: Next, let's install Docker for Desktop.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们安装 Docker for Desktop。
- en: Installing Docker for Desktop
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Docker for Desktop
- en: If you are using macOS or have Windows 10 Professional installed on your laptop,
    then we strongly recommend that you install Docker for Desktop. This platform
    gives you the best experience when working with containers.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 macOS 或者在你的笔记本上安装了 Windows 10 专业版，那么我们强烈建议你安装 Docker for Desktop。这个平台能为你提供最佳的容器工作体验。
- en: Docker for Desktop is not supported on Linux at this time. Please refer to the
    *Installing Docker CE on Linux* section for more details.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Docker for Desktop 不支持 Linux。请参考 *在 Linux 上安装 Docker CE* 部分获取更多信息。
- en: Note that older versions of Windows or Windows 10 Home edition cannot run Docker
    for Windows. Docker for Windows uses Hyper-V to run containers transparently in
    a VM but Hyper-V is not available on older versions of Windows; nor is it available
    in the Home edition of Windows 10\. In this case, we recommend that you use Docker
    Toolbox instead, which we will describe in the next section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，较旧版本的 Windows 或 Windows 10 家庭版无法运行 Docker for Windows。Docker for Windows
    使用 Hyper-V 在虚拟机中透明运行容器，但 Hyper-V 在旧版本的 Windows 上不可用；也无法在 Windows 10 家庭版中使用。在这种情况下，我们建议你使用
    Docker Toolbox，具体内容我们将在下一节中介绍。
- en: 'Follow these steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: No matter what OS you're using, navigate to the Docker start page at [https://www.docker.com/get-started](https://www.docker.com/get-started).
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无论你使用的是什么操作系统，都可以前往 Docker 的起始页 [https://www.docker.com/get-started](https://www.docker.com/get-started)。
- en: On the right-hand side of the loaded page, you'll find a big blue button saying
    Download Desktop and Take a Tutorial. Click this button and follow the instructions.
    You will be redirected to Docker Hub. If you don't have an account on Docker Hub
    yet, then create one. It is absolutely free, but you need an account to download
    the software. Otherwise, just log in.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在加载页面的右侧，你会看到一个大蓝色按钮，上面写着 “Download Desktop and Take a Tutorial”。点击该按钮并按照指示操作。你将被重定向到
    Docker Hub。如果你还没有 Docker Hub 账户，创建一个。账户完全免费，但下载软件需要注册。如果已有账户，直接登录即可。
- en: 'Once you''re logged in, look out for this on the page:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，请留意页面上的这个内容：
- en: '![](img/e00d0017-d436-41eb-b4f0-f7b35a4e5c8a.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e00d0017-d436-41eb-b4f0-f7b35a4e5c8a.png)'
- en: Download Docker Desktop on Docker Hub
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker Hub 上下载 Docker Desktop
- en: 'Click the blue Download Docker Desktop button. You should then see a screen
    like the following:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的“下载 Docker Desktop”按钮。然后您应该看到如下界面：
- en: '![](img/c9a4cfdc-fdbb-44dd-bbaf-7999541220a6.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9a4cfdc-fdbb-44dd-bbaf-7999541220a6.png)'
- en: Download screen for Docker for Desktop for macOS
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下载适用于 macOS 的 Docker Desktop 安装界面
- en: Note that if you're on a Windows PC, the blue button will say Download Docker
    Desktop for Windows instead.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您使用的是 Windows 电脑，蓝色按钮将显示为“下载 Docker Desktop for Windows”。
- en: Installing Docker for Desktop on macOS
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Docker for Desktop
- en: 'Follow these steps for installation:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤进行安装：
- en: 'Once you have successfully installed Docker for Desktop for macOS, please open
    a Terminal window and execute the following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功安装适用于 macOS 的 Docker Desktop 后，请打开终端窗口并执行以下命令：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see something like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似如下的内容：
- en: '![](img/c44f8efb-03f9-4991-8911-1baf60e21c35.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c44f8efb-03f9-4991-8911-1baf60e21c35.png)'
- en: Docker version on Docker for Desktop
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Docker for Desktop 上的 Docker 版本
- en: 'To see whether you can run containers, enter the following command into the
    terminal window and hit *Enter*:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看是否可以运行容器，请在终端窗口中输入以下命令并按下*Enter*：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If all goes well, your output should look something like the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您的输出应该类似于以下内容：
- en: '![](img/1601a10a-3104-4c94-bdf7-9f5fbd3df2aa.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1601a10a-3104-4c94-bdf7-9f5fbd3df2aa.png)'
- en: Running Hello-World on Docker for Desktop for macOS
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker for Desktop for macOS 上运行 Hello-World
- en: Next, we will install Docker on Windows.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在 Windows 上安装 Docker。
- en: Installing Docker for Desktop on Windows
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Docker for Desktop
- en: 'Follow these steps for installation:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤进行安装：
- en: 'Once you have successfully installed Docker for Desktop for Windows, please
    open a PowerShell window and execute the following command:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功安装适用于 Windows 的 Docker for Desktop 后，请打开 PowerShell 窗口并执行以下命令：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To see whether you can run containers, enter the following command into the
    PowerShell window and hit *Enter*:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看是否可以运行容器，请在 PowerShell 窗口中输入以下命令并按下*Enter*：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If all goes well, your output should look similar to the preceding figure.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您的输出应该类似于前面的图示。
- en: Installing Docker CE on Linux
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Docker CE
- en: As mentioned earlier, Docker for Desktop is only available for macOS and Windows
    10 Pro. If you're using a Linux machine, then you can use the Docker **Community**
    **Edition** (**CE**), which consists of Docker Engine, plus a few additional tools,
    such as the Docker **Command Line Interface** (**CLI**) and `docker-compose`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker for Desktop 仅适用于 macOS 和 Windows 10 Pro。如果您使用的是 Linux 机器，可以使用 Docker
    **社区版**（**CE**），它包括 Docker 引擎，以及一些附加工具，如 Docker **命令行接口**（**CLI**）和 `docker-compose`。
- en: Please follow the instructions at the following link to install Docker CE for
    your particular Linux distribution—in this case, Ubuntu: [https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下链接中的说明，为您的特定 Linux 发行版（在本例中是 Ubuntu）安装 Docker CE：[https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/)。
- en: Installing Docker Toolbox
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Docker Toolbox
- en: Docker Toolbox has been available for developers for a few years. It precedes
    newer tools such as Docker for Desktop. The Toolbox allows a user to work very
    elegantly with containers on any macOS or Windows computer. Containers must run
    on a Linux host. Neither Windows nor macOS can run containers natively. Hence,
    we need to run a Linux VM on our laptop, where we can then run our containers.
    Docker Toolbox installs VirtualBox on our laptop, which is used to run the Linux
    VMs we need.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Toolbox 已经提供给开发者使用几年了。它比像 Docker for Desktop 这样的新工具早推出。Docker Toolbox
    让用户可以非常优雅地在任何 macOS 或 Windows 计算机上使用容器。容器必须在 Linux 主机上运行。Windows 和 macOS 无法原生运行容器。因此，我们需要在笔记本电脑上运行一个
    Linux 虚拟机（VM），然后可以在其中运行容器。Docker Toolbox 会在我们的笔记本电脑上安装 VirtualBox，用来运行我们所需要的 Linux
    虚拟机。
- en: As a Windows user, you might already be aware that there are so-called Windows
    containers that run natively on Windows, and you are right. Microsoft has ported
    Docker Engine to Windows and it is possible to run Windows containers directly
    on Windows Server 2016 or newer, without the need for a VM. So, now we have two
    flavors of containers, Linux containers and Windows containers. The former only
    runs on a Linux host and the latter only runs on a Windows server. In this book,
    we are exclusively discussing Linux containers, but most of the things we'll learn
    also apply to Windows containers.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Windows 用户，你可能已经知道有所谓的 Windows 容器可以原生运行在 Windows 上，你说得没错。微软已将 Docker 引擎移植到
    Windows，并且可以直接在 Windows Server 2016 或更高版本上运行 Windows 容器，而无需虚拟机。因此，我们现在有两种类型的容器，Linux
    容器和 Windows 容器。前者只能在 Linux 主机上运行，后者只能在 Windows 服务器上运行。在本书中，我们专门讨论 Linux 容器，但我们所学的大部分内容也适用于
    Windows 容器。
- en: If you are interested in Windows containers, we strongly recommend the book *Docker
    on Windows, Second Edition*: [https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 Windows 容器感兴趣，我们强烈推荐《*Docker on Windows, Second Edition*》这本书：[https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition)。
- en: Let's start by installing the Docker Toolbox on a macOS.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 macOS 上安装 Docker Toolbox 开始。
- en: Installing Docker Toolbox on macOS
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Docker Toolbox
- en: 'Follow these steps for installation:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: 'Open a new Terminal window and use Homebrew to install the toolbox:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口，并使用 Homebrew 安装 Toolbox：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You should see something like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似于以下的内容：
- en: '![](img/f323a67a-9f10-4c81-935d-45dcc77c5e19.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f323a67a-9f10-4c81-935d-45dcc77c5e19.png)'
- en: Installing Docker Toolbox on macOS
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Docker Toolbox
- en: 'To verify that Docker Toolbox has been installed successfully, try to access
    `docker-machine` and `docker-compose`, two tools that are part of the installation:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证 Docker Toolbox 是否成功安装，尝试访问 `docker-machine` 和 `docker-compose`，这两个工具是安装的一部分：
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Next, we will install Docker Toolbox on Windows.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在 Windows 上安装 Docker Toolbox。
- en: Installing Docker Toolbox on Windows
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Docker Toolbox
- en: 'Open a new Powershell window in admin mode and use Chocolatey to install Docker
    Toolbox:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以管理员模式打开一个新的 Powershell 窗口，并使用 Chocolatey 安装 Docker Toolbox：
- en: '[PRE28]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output should look similar to this:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '![](img/c3d8eb48-3017-4bd2-a27b-c89e7aad66f4.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3d8eb48-3017-4bd2-a27b-c89e7aad66f4.png)'
- en: Installing Docker Toolbox on Windows 10
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 上安装 Docker Toolbox
- en: We will now be setting up Docker Toolbox.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将开始设置 Docker Toolbox。
- en: Setting up Docker Toolbox
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Docker Toolbox
- en: 'Follow these steps for setup:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行设置：
- en: 'Let''s use `docker-machine` to set up our environment. First, we list all Docker-ready
    VMs we have currently defined on our system. If you have just installed Docker
    Toolbox, you should see the following output:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用 `docker-machine` 设置我们的环境。首先，我们列出当前系统中定义的所有 Docker 就绪虚拟机。如果你刚刚安装了 Docker
    Toolbox，你应该看到以下输出：
- en: '![](img/ca24a687-1929-473d-9ba7-7e68294fea9f.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca24a687-1929-473d-9ba7-7e68294fea9f.png)'
- en: List of all Docker-ready VMs
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Docker 就绪虚拟机的列表
- en: 'OK, we can see that there is a single VM called `default` installed, but it
    is currently in the `STATE` of `stopped`. Let''s use `docker-machine` to start
    this VM so we can work with it:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，我们可以看到安装了一个名为 `default` 的虚拟机，但它当前的 `STATE` 为 `stopped`。让我们使用 `docker-machine`
    启动这个虚拟机，以便可以与之互动：
- en: '[PRE29]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This produces the following output:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/4eb6cf4e-c51b-4946-8e4f-d140f2fafd9a.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4eb6cf4e-c51b-4946-8e4f-d140f2fafd9a.png)'
- en: Starting the default VM in Docker Toolbox
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Docker Toolbox 中的默认虚拟机
- en: 'If we now list the VMs again, we should see this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在再次列出虚拟机，我们应该看到以下内容：
- en: '![](img/0adc5a3b-7c37-4ccc-a004-5b2cc76aabdb.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0adc5a3b-7c37-4ccc-a004-5b2cc76aabdb.png)'
- en: Listing the running VMs in Docker Toolbox
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 列出 Docker Toolbox 中正在运行的虚拟机
- en: The IP address used might be different in your case, but it will definitely be in
    the `192.168.0.0/24` range. We can also see that the VM has Docker version `18.06.1-ce` installed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的 IP 地址可能与你的情况不同，但它一定会在`192.168.0.0/24`范围内。我们还可以看到虚拟机已经安装了 Docker 版本`18.06.1-ce`。
- en: 'If, for some reason, you don''t have a default VM or you have accidentally
    deleted it, you can create it using the following command:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果因为某些原因，你没有默认虚拟机或不小心删除了它，你可以使用以下命令创建一个：
- en: '[PRE30]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will generate the following output:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '![](img/0ab00ba7-5fd8-432f-a234-8ccd5ef4de10.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ab00ba7-5fd8-432f-a234-8ccd5ef4de10.png)'
- en: Creating a new default VM in Docker Toolbox
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker Toolbox 中创建新的默认虚拟机
- en: If you carefully analyze the preceding output, you will see that `docker-machine`
    automatically downloaded the newest ISO file for the VM from Docker. It realized
    that my current version was outdated and replaced it with version `v18.09.6`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细分析上面的输出，你会发现 `docker-machine` 自动从 Docker 下载了最新的虚拟机 ISO 文件。它意识到我当前的版本已经过时，并用版本
    `v18.09.6` 替换了它。
- en: 'To see how to connect your Docker client to the Docker Engine running on this
    virtual machine, run the following command:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看如何将 Docker 客户端连接到运行在此虚拟机上的 Docker 引擎，请运行以下命令：
- en: '[PRE31]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This outputs the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这输出如下内容：
- en: '[PRE32]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can execute the command listed on the last line in the preceding code snippet
    to configure our Docker CLI to use Docker running on the `default` VM:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以执行上面代码片段中最后一行列出的命令，来配置我们的 Docker CLI 使用在 `default` 虚拟机上运行的 Docker：
- en: '[PRE33]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And now we can execute the first Docker command:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以执行第一个 Docker 命令：
- en: '[PRE34]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This should result in the following output:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会显示以下输出：
- en: '![](img/8072de88-4665-4b5a-b5a5-f3994515624b.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8072de88-4665-4b5a-b5a5-f3994515624b.png)'
- en: Output of docker version
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: docker 版本输出
- en: We have two parts here, the client and the server part. The client is the CLI
    running directly on your macOS or Windows laptop, while the server part is running
    on the `default` VM in VirtualBox.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两部分：客户端和服务器部分。客户端是直接在你的 macOS 或 Windows 笔记本上运行的 CLI，而服务器部分则运行在 VirtualBox
    中的 `default` 虚拟机上。
- en: 'Now, let''s try to run a container:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试运行一个容器：
- en: '[PRE35]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This will produce the following output:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/ba44f8ff-7ebe-4840-9466-a7a136e67152.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba44f8ff-7ebe-4840-9466-a7a136e67152.png)'
- en: The preceding output confirms that Docker Toolbox is working as expected and
    can run containers.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出确认 Docker Toolbox 按预期工作并且能够运行容器。
- en: Docker Toolbox is a great addition even when you normally use Docker for Desktop
    for your development with Docker. Docker Toolbox allows you to create multiple
    Docker hosts (or VMs) in VirtualBox and connect them to a cluster, on top of which
    you can run Docker Swarm or Kubernetes.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你通常使用 Docker for Desktop 进行 Docker 开发，Docker Toolbox 也是一个很好的补充。Docker Toolbox
    允许你在 VirtualBox 中创建多个 Docker 主机（或虚拟机），并将它们连接到一个集群，在这个集群上你可以运行 Docker Swarm 或 Kubernetes。
- en: Installing Minikube
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Minikube
- en: If you cannot use Docker for Desktop or, for some reason, you only have access
    to an older version of the tool that does not yet support Kubernetes, then it
    is a good idea to install Minikube. Minikube provisions a single-node Kubernetes
    cluster on your workstation and is accessible through `kubectl`, which is the
    command-line tool used to work with Kubernetes.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法使用 Docker for Desktop，或者由于某些原因你只能使用不支持 Kubernetes 的旧版本工具，那么安装 Minikube
    是一个不错的选择。Minikube 在你的工作站上配置一个单节点 Kubernetes 集群，并且可以通过 `kubectl` 访问，它是用于与 Kubernetes
    交互的命令行工具。
- en: Installing Minikube on macOS and Windows
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 和 Windows 上安装 Minikube
- en: To install Minikube for macOS or Windows, navigate to the following link: [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 macOS 或 Windows 上安装 Minikube，请访问以下链接：[https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)。
- en: Follow the instructions carefully. If you have Docker Toolbox installed, then
    you already have a hypervisor on your system since the Docker Toolbox installer
    also installed VirtualBox. Otherwise, I recommend that you install VirtualBox
    first.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 请仔细按照说明操作。如果你已经安装了 Docker Toolbox，那么你的系统中已经有一个虚拟化程序，因为 Docker Toolbox 安装程序同时也安装了
    VirtualBox。否则，我建议你先安装 VirtualBox。
- en: If you have Docker for macOS or Windows installed, then you already have `kubectl` installed
    with it, so you can skip that step too. Otherwise, follow the instructions on
    the site.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 macOS 或 Windows 版 Docker，那么你已经安装了 `kubectl`，因此可以跳过这一步。如果没有，请按照网站上的说明操作。
- en: Testing Minikube and kubectl
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 Minikube 和 kubectl
- en: 'Once Minikube is successfully installed on your workstation, open a Terminal
    and test the installation. First, we need to start Minikube. Enter `minikube start` at
    the command line. This command may take a few minutes or so to complete. The output
    should look similar to the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Minikube 成功安装在你的工作站上，打开终端并测试安装。首先，我们需要启动 Minikube。在命令行输入 `minikube start`。此命令可能需要几分钟才能完成。输出应类似于以下内容：
- en: '![](img/918657bb-5dc5-4eca-8220-4139caa69112.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/918657bb-5dc5-4eca-8220-4139caa69112.png)'
- en: Starting Minikube
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Minikube
- en: Note, your output may look slightly different. In my case, I am running Minikube
    on a Windows 10 Pro computer. On a Mac notifications are quite different, but
    this doesn't matter here.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您的输出可能会略有不同。在我的案例中，我在Windows 10 Pro计算机上运行Minikube。在Mac上，通知的样式有所不同，但这在这里并不重要。
- en: 'Now, enter `kubectl version` and hit *En**ter* to see something like the following
    screenshot:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入`kubectl version`并按下*Enter*键，查看如下截图所示的内容：
- en: '![](img/b695efb9-10b2-4ee8-9877-020e89021230.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b695efb9-10b2-4ee8-9877-020e89021230.png)'
- en: Determining the version of the Kubernetes client and server
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 确定Kubernetes客户端和服务器的版本
- en: 'If the preceding command fails, for example, by timing out, then it could be
    that your `kubectl` is not configured for the right context. `kubectl` can be
    used to work with many different Kubernetes clusters. Each cluster is called a
    context. To find out which context `kubectl` is currently configured for, use
    the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的命令失败，例如由于超时而失败，可能是因为您的`kubectl`未配置为正确的上下文。`kubectl`可用于与多个不同的Kubernetes集群一起工作。每个集群称为一个上下文。要查找`kubectl`当前配置的上下文，请使用以下命令：
- en: '[PRE36]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The answer should be `minikube`, as shown in the preceding output. If this
    is not the case, use `kubectl config get-contexts` to list all contexts that are
    defined on your system and then set the current context to `minikube`, as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 答案应为`minikube`，如前面的输出所示。如果不是，请使用`kubectl config get-contexts`列出系统上定义的所有上下文，然后将当前上下文设置为`minikube`，如下所示：
- en: '[PRE37]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The configuration for `kubectl`, where it stores the contexts, is normally found
    in `~/.kube/config`, but this can be overridden by defining an environment variable
    called `KUBECONFIG`. You might need to unset this variable if it is set on your
    computer.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl`的配置，存储上下文的地方，通常位于`~/.kube/config`，但也可以通过定义名为`KUBECONFIG`的环境变量来覆盖。如果该变量在您的计算机上已设置，您可能需要取消设置此变量。'
- en: For more in-depth information about how to configure and use Kubernetes contexts,
    consult the link at [https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何配置和使用Kubernetes上下文的更深入信息，请参阅以下链接：[https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/)。
- en: 'Assuming Minikube and `kubectl` work as expected, we can now use `kubectl` to
    get information about the Kubernetes cluster. Enter the following command:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 假设Minikube和`kubectl`按预期工作，我们现在可以使用`kubectl`获取Kubernetes集群的信息。输入以下命令：
- en: '[PRE38]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Evidently, we have a cluster of one node, which in my case has Kubernetes` v1.17.3`
    installed on it.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们有一个包含一个节点的集群，在我的案例中，该节点上安装了Kubernetes` v1.17.3`。
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we set up and configured our personal or working environment
    so that we can productively work with Docker containers. This equally applies
    for developers, DevOps, and operations engineers. In that context, we make sure
    that we use a good editor, have Docker for macOS or Docker for Windows installed,
    and can use `docker-machine` to create VMs in VirtualBox or Hyper-V, which we
    can then use to run and test containers.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们设置并配置了个人或工作环境，以便能够高效地使用Docker容器。这同样适用于开发人员、DevOps和运维工程师。在这一过程中，我们确保使用良好的编辑器，安装了Docker
    for macOS或Docker for Windows，并能够使用`docker-machine`在VirtualBox或Hyper-V中创建虚拟机，然后使用这些虚拟机来运行和测试容器。
- en: In the next chapter, we're going to learn all of the important facts about containers.
    For example, we will explore how we can run, stop, list, and delete containers,
    but more than that, we will also dive deep into the anatomy of containers.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习有关容器的所有重要事实。例如，我们将探讨如何运行、停止、列出和删除容器，但更重要的是，我们还将深入研究容器的结构。
- en: Questions
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Based on your reading of this chapter, please answer the following questions:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 基于您对本章的阅读，请回答以下问题：
- en: What is `docker-machine` used for? Name three to four scenarios.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docker-machine`用于什么？列举三到四种场景。'
- en: With Docker for Windows, you can develop and run Linux containers.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Windows版Docker，您可以开发并运行Linux容器。
- en: A. True
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: A. 正确
- en: B. False
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: B. 错误
- en: Why are good scripting skills (such as Bash or PowerShell) essential for the
    productive use of containers?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么良好的脚本编写技能（如Bash或PowerShell）对于容器的高效使用至关重要？
- en: Name three to four Linux distributions on which Docker is certified to run.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举三到四个Docker认证可运行的Linux发行版。
- en: Name all of the Windows versions on which you can run Windows containers.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举所有可以运行Windows容器的Windows版本。
- en: Further reading
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Consider the following links for further reading:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下链接进一步阅读：
- en: '*Chocolatey - The Package Manager for Windows* at[https://chocolatey.org/](https://chocolatey.org/)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Chocolatey - Windows 的包管理器*，访问[https://chocolatey.org/](https://chocolatey.org/)'
- en: '*Install Docker Toolbox on Windows:* [https://dockr.ly/2nuZUkU](https://dockr.ly/2nuZUkU)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Windows 上安装 Docker Toolbox:* [https://dockr.ly/2nuZUkU](https://dockr.ly/2nuZUkU)'
- en: '*Run Docker on Hyper-V with Docker Machine* at [http://bit.ly/2HGMPiI](http://bit.ly/2HGMPiI)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Hyper-V 上使用 Docker Machine 运行 Docker*，访问[http://bit.ly/2HGMPiI](http://bit.ly/2HGMPiI)'
- en: '*Developing inside a Container* at [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在容器中开发*，访问[https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)'
