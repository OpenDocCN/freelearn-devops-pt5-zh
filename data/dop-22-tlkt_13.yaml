- en: Self-Adaptation Applied To Services
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用于服务的自适应
- en: 'We saw how services could self-heal. It was relatively easy to set up a system
    that would make sure that the desired number of replicas of each service is (almost)
    always running. Docker Swarm does all the work. As long as there are enough available
    hardware resources, our services will (almost) always run the specified number
    of replicas. All we have to do is is specify `replicas: [NUMBER_OF_REPLICAS]`
    in the YAML file that defines our stack.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '我们已经看到了服务如何自愈。设置一个系统，确保每个服务的期望副本数（几乎）始终在运行，是相对简单的。Docker Swarm完成了所有工作。只要有足够的硬件资源可用，我们的服务就会（几乎）始终运行指定数量的副本。我们所需要做的只是，在定义我们堆栈的YAML文件中指定`replicas:
    [NUMBER_OF_REPLICAS]`。'
- en: The problem with self-healing is that it does not take into account changes
    that affect our systems. We’ll run the same number of replicas even if there is
    a huge spike in their memory utilization. The same applies if, for example, network
    traffic increases. Docker Swarm will not make sure that our system adapts to changed
    conditions. It will follow the blueprint blindly. While that is a vast improvement
    compared to how we operated the system in the past, it is, by no means, enough.
    We need the system both to self-heal and self-adapt.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自愈的问题在于，它没有考虑到影响我们系统的变化。即使它们的内存利用率急剧上升，我们仍然会运行相同数量的副本。例如，如果网络流量增加，也同样适用。Docker
    Swarm不会确保我们的系统适应变化的条件。它会盲目地遵循蓝图。虽然与过去的系统操作方式相比，这已经是一个巨大的改进，但这远远不够。我们需要系统既能够自愈，也能自适应。
- en: In this chapter, we’ll expand on the knowledge we obtained by now and start
    exploring ways we can make the system self-adapt. For now, we’ll limit ourselves
    to services and ignore that hardware needs to heal and adapt as well. That will
    come later.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将扩展到目前为止获得的知识，并开始探索如何使系统实现自适应。暂时，我们将仅限于服务，忽略硬件也需要修复和自适应的情况。那部分将在后面讨论。
- en: Choosing The Tool For Scaling
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择用于扩展的工具
- en: We already adopted a few tools. We have metrics stored in Prometheus. We deployed
    Swarm Listener that propagates information to Prometheus. We have Alertmanager
    that receives notifications whenever a certain threshold is reached. While those
    tools allowed us to move forward towards our goals, they are not enough. Now we
    need to figure out what to do with those alerts. Receiving them in Slack is only
    the last resort. We need a tool that will be capable of receiving an alert, process
    the data that comes with it, apply certain logic, and decide what to do.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经采用了一些工具。我们将度量数据存储在Prometheus中，并部署了Swarm Listener，将信息传递到Prometheus。我们还有Alertmanager，在达到特定阈值时接收通知。虽然这些工具帮助我们朝着目标迈进，但它们还不足够。现在，我们需要弄清楚该如何处理这些警报。仅仅在Slack中接收它们只是最后的手段。我们需要一个能够接收警报、处理其中的数据、应用一定的逻辑并决定如何处理的工具。
- en: In most cases, self-adaptation is all about scaling. Since we are limiting ourselves
    to services, the system, when it receives an alert, needs to be capable of deciding
    whether to scale up, or down, or do nothing. We need a tool that can accept remote
    requests, that is capable of running code that will determine what should be done,
    and that can interact with Docker.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，自适应主要涉及扩展。由于我们将自己限制在服务上，当系统接收到警报时，它需要能够决定是扩展、缩减，还是不做任何操作。我们需要一个可以接受远程请求的工具，能够运行代码来确定该做什么，并且能够与Docker进行交互。
- en: 'If you read [The DevOps 2.1 Toolkit: Docker Swarm: Building, testing, deploying,
    and monitoring services inside Docker Swarm clusters](https://www.amazon.com/dp/1542468914),
    you know that I suggested Jenkins for our continuous deployment processes. We
    can also use it as the tool that will perform actions that will result in self-adaptation.
    After all, the real power behind Jenkins is not for running (only) continuous
    integration/delivery/deployment pipelines but for running tasks of any kind. Its
    jobs can be triggered remotely from Alertmanager. It has a potent, yet simple
    scripting language through Pipeline DSL. If we expose Docker Socket in Jenkins
    agents, they can easily interact with Docker and execute any command available.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你读过[《DevOps 2.1工具包：Docker Swarm：在Docker Swarm集群内部构建、测试、部署和监控服务》](https://www.amazon.com/dp/1542468914)，你会知道我曾建议使用Jenkins来处理我们的持续部署过程。我们也可以将其作为执行自适应操作的工具。毕竟，Jenkins的真正强大之处不仅仅是用于运行（仅仅是）持续集成/交付/部署管道，而是用于运行任何类型的任务。它的任务可以通过Alertmanager远程触发。它具有强大而简单的脚本语言，通过Pipeline
    DSL。如果我们在Jenkins代理中暴露Docker Socket，它们可以轻松地与Docker进行交互并执行任何可用命令。
- en: Even if you prefer some other tool, the examples we’ll implement in Jenkins
    can easily be adapted to anything else as long as the before mentioned requirements
    are fulfilled.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你更喜欢其他工具，只要满足前面提到的要求，我们将在Jenkins中实现的示例也可以轻松适配到其他任何工具上。
- en: Let’s get going.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Creating The Cluster And Deploying Services
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建集群并部署服务
- en: Just as in (almost) any other chapter, we’ll start the practical part by setting
    up a Swarm cluster and deploying the stacks that we used previously.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在（几乎）任何其他章节中一样，我们将通过设置一个Swarm集群并部署我们之前使用过的堆栈来开始实践部分。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
