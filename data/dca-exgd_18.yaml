- en: Summarizing Important Concepts
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 总结重要概念
- en: In this chapter, you will learn which topics are most important for the exam
    and you will get a good idea of the knowledge required to pass the **Docker Certified
    Associate** (**DCA**) exam.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解哪些主题对考试最为重要，并对通过**Docker认证助理**（**DCA**）考试所需的知识有一个清晰的了解。
- en: We will recap all the topics we have learned regarding orchestration, image
    management, Docker platform component installation and configuration, networking
    implementations for standalone and cluster environments, and security features
    and data management strategies in container-based applications. All these concepts
    were already covered in different chapters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回顾所有关于编排、镜像管理、Docker平台组件的安装和配置、单节点和集群环境的网络实现、安全功能以及基于容器的应用数据管理策略的主题。这些概念已经在不同章节中涵盖。
- en: 'We will summarize the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将总结以下主题：
- en: Reviewing orchestration concepts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾编排概念
- en: A brief summary of Docker image concepts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker镜像概念的简要总结
- en: A summary of the Docker architecture, installation, and configuration topics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker架构、安装和配置主题的总结
- en: A summary of the networking topics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络主题的总结
- en: Understanding security concepts and related Docker features
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解安全概念和相关的Docker功能
- en: Quickly summarizing Docker storage and volumes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速总结Docker存储和卷
- en: By the end of this chapter, you will be ready for some exam-like questions,
    which have been prepared for you in the next chapter. Before looking at some sample
    questions, let's start talking about the orchestration concepts we have learned.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将为一些类似考试的问题做好准备，这些问题已经在下一章为你准备好。在查看一些样题之前，让我们先来讨论一下我们已经学习的编排概念。
- en: Reviewing orchestration concepts
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾编排概念
- en: Orchestration is an important topic for the DCA exam. It represents 25% of the
    questions you have to pass to get this certification. In the second section of
    the book, we introduced orchestration and we covered Docker Swarm and Kubernetes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 编排是DCA考试的重要主题，它占据了考试问题的25%。在本书的第二部分，我们介绍了编排，并讲解了Docker Swarm和Kubernetes。
- en: Orchestration concepts were covered in [Chapter 7](3b13261c-9b4d-46e2-b115-fc323563f646.xhtml),
    *Introduction to Orchestration*, [Chapter 8](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml),
    *Orchestration Using Docker Swarm*, [Chapter 9](abcbf266-c469-4d84-ad4f-abd321a64b53.xhtml),
    *Orchestration Using Kubernetes*, [Chapter 10](3a2d6b8e-40d0-44f2-8a07-75969a28cc6b.xhtml),
    *Introduction to the Docker Enterprise Platform*, and [Chapter 11](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml),
    *Universal Control Plane*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 编排概念已在[第7章](3b13261c-9b4d-46e2-b115-fc323563f646.xhtml)，*编排简介*，[第8章](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml)，*使用Docker
    Swarm进行编排*，[第9章](abcbf266-c469-4d84-ad4f-abd321a64b53.xhtml)，*使用Kubernetes进行编排*，[第10章](3a2d6b8e-40d0-44f2-8a07-75969a28cc6b.xhtml)，*Docker企业平台简介*，以及[第11章](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml)，*通用控制平面*中讲解。
- en: 'This is a quick summary of the Docker Swarm features. We recommend you read
    this summary to remember the concepts we have learned:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Docker Swarm功能的简要总结。我们建议你阅读这个总结，以帮助你记住我们已经学习的概念：
- en: We started talking about multi-container applications before introducing orchestration
    because it is the first approach to container orchestration. They work locally,
    using Docker Compose (the `docker-compose` tool) and application components, and
    their interaction is described using `docker-compose.yml` YAML files. Multi-container
    applications run all of their components together on a Docker host, but we can
    scale their components up and down, as well as interacting with them and reviewing
    their logs.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在介绍编排之前，我们开始讨论多容器应用程序，因为它是容器编排的第一种方法。它们在本地运行，使用Docker Compose（`docker-compose`工具）和应用程序组件，它们的交互通过`docker-compose.yml`
    YAML文件来描述。多容器应用程序将所有组件一起运行在Docker主机上，但我们可以对其组件进行伸缩操作，以及与它们交互和查看它们的日志。
- en: Docker Swarm orchestrates Docker services to provide them with resilience, internal
    discovery, and load balancing in cluster environments. Our applications' workloads
    will be distributed cluster-wide.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm编排Docker服务，为其提供弹性、内部发现和负载均衡，在集群环境中运行。我们的应用工作负载将在集群中分布。
- en: We will use two kinds of node roles within Docker Swarm—managers and workers—which
    can be modified.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在Docker Swarm中使用两种类型的节点角色——管理节点和工作节点，这些角色可以进行修改。
- en: We will deploy more than one manager and more than one worker to provide high
    availability to the cluster and workloads deployed on top of it.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将部署多个管理节点和多个工作节点，以提供集群的高可用性以及部署在其上的工作负载。
- en: One of the managers is also the leader of the cluster and will update all cluster
    resource changes in an internal database, synced between manager nodes. Docker
    Swarm uses the Raft algorithm to update changes, hence a quorum between managers
    is required before changes are committed.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中一个管理节点也是集群的领导者，它会在一个内部数据库中更新所有集群资源的更改，并在管理节点之间进行同步。Docker Swarm使用Raft算法来更新更改，因此在提交更改之前，需要管理节点之间达成共识。
- en: Docker Swarm has a management plane, a control plane, and a data plane. The
    management and control planes can be isolated from the data plane, and they work
    encrypted out of the box. The data plane can also be encrypted but not by default
    (we have to encrypt each custom network).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm拥有管理平面、控制平面和数据平面。管理平面和控制平面可以与数据平面隔离，并且开箱即用地进行加密。数据平面也可以加密，但不是默认加密（我们需要对每个自定义网络进行加密）。
- en: Docker Swarm issues and maintains an internal **Certificate Authority** (**CA**)
    and manages certificates for all cluster components. We can lock this information
    to keep it safe.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm会发放和维护一个内部**证书授权机构**（**CA**），并为所有集群组件管理证书。我们可以锁定这些信息以保证其安全。
- en: A minimum of (*number of managers / 2 + 1*) healthy manager nodes is required
    to maintain the cluster health. If we have less than the required number, no changes
    can be made within the cluster but application workloads will continue working.
    If a service fails, it will not be recovered if the cluster is unhealthy.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了维持集群健康，至少需要(*管理节点数 / 2 + 1*)个健康的管理节点。如果管理节点数量少于要求的数量，集群内无法进行任何更改，但应用程序工作负载将继续运行。如果服务失败，且集群不健康，则无法恢复。
- en: Docker Swarm uses the Raft log to maintain internal key-value store synchronization
    between nodes. Therefore, an odd number of managers is required to keep a quorum.
    This also applies to Kubernetes, but it uses `etcd` as a key-value store.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm使用Raft日志来维护节点之间的内部键值存储同步。因此，需要一个奇数数量的管理节点才能维持共识。这同样适用于Kubernetes，但它使用`etcd`作为键值存储。
- en: All nodes can run application workloads, but we can change this behavior whenever
    we need draining nodes or to disallow new workloads without interrupting already-running
    ones.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有节点都可以运行应用程序工作负载，但我们可以根据需要更改此行为，例如在需要排空节点或禁止新工作负载时，而不会中断已经运行的工作负载。
- en: Cluster workloads are declared as services, with a required number of instances
    or replicas to be healthy. These resources are tasks and they will run one container.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群工作负载被声明为服务，并要求有一定数量的实例或副本才能保持健康。这些资源是任务，它们将运行一个容器。
- en: Docker Swarm does not manage containers; it only manages services. Therefore,
    we deploy applications based on services. We do not deploy standalone containers.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm不管理容器；它仅管理服务。因此，我们是基于服务来部署应用程序的，而不是部署独立的容器。
- en: Services receive one virtual IP address by default and this address does not
    change during their lifetime. Tasks run only one container; they do not have an
    associated IP address, and they always keep their names. If a task's container
    dies or needs to be modified with some updates, a new task will be created with
    the original name. The container will receive a new IP, but the internal load
    balancer will associate it as a backend endpoint for the service.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务默认会分配一个虚拟IP地址，这个地址在服务生命周期内不会改变。任务只会运行一个容器；它们没有关联的IP地址，并且始终保持原有名称。如果任务的容器死亡或需要进行一些更新，系统将创建一个新的任务，并保持原有名称。容器将获得新的IP地址，但内部负载均衡器会将其作为服务的后端端点关联。
- en: We can scale up or down the number of tasks required for a service whenever
    we need to. However, Docker will not manage our application behavior under these
    circumstances.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以根据需要随时扩展或缩减服务所需的任务数量。然而，在这种情况下，Docker不会管理我们的应用程序行为。
- en: Tasks are scheduled automatically on healthy nodes if they have enough resources
    to run associated services' tasks, but we can force a task location on specific
    nodes.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务会自动调度到健康节点上，前提是该节点有足够的资源来运行关联服务的任务，但我们可以强制将任务定位到特定的节点上。
- en: Docker provides some template tools to help us format, filter, and create unique
    resources using Docker Swarm variables.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker提供了一些模板工具，帮助我们使用Docker Swarm变量来格式化、筛选和创建独特的资源。
- en: Networking in Docker Swarm uses bridged interfaces, as we also learned with
    Docker containers. We deploy overlay networks distributed cluster-wide using VXLAN
    technology to provide communication between containers running on different hosts
    and other network features.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm 中的网络使用桥接接口，正如我们在学习 Docker 容器时也了解到的那样。我们使用 VXLAN 技术部署覆盖网络，跨集群分布，以提供在不同主机上运行的容器之间的通信及其他网络功能。
- en: Docker Swarm provides a router mesh as a default strategy to publish cluster
    services for users and other applications. By default, services' ports will be
    published on all cluster nodes even if they do not run any services' tasks. Internal
    routing guides service requests to appropriate backend containers. We can change
    these behaviors with common Docker Swarm command options.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm 提供了默认的路由网格策略，用于发布集群服务，以便用户和其他应用程序使用。默认情况下，服务的端口将在所有集群节点上发布，即使它们没有运行任何服务任务。内部路由将服务请求引导到适当的后端容器。我们可以使用常见的
    Docker Swarm 命令选项更改这些行为。
- en: As we learned with Docker Engine, services are not published to be consumed
    by default. We need to manually publish service ports and processes.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如我们在 Docker Engine 中学到的那样，服务默认并不会被发布供使用。我们需要手动发布服务端口和进程。
- en: Publishing applications to the world can be done using the router mesh on Docker
    Swarm, or Interlock in Docker Enterprise. Interlock provides an integrated and
    automated reverse-proxy solution to secure your application's backends. We just
    publish the `interlock-proxy` component while the Docker Swarm services receive
    requests internally. Hence, no additional publishing is required for services;
    just configure a few labels to inform Interlock about the required forwarding
    for an application.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序发布到外部可以通过 Docker Swarm 的路由网格或 Docker Enterprise 中的 Interlock 来完成。Interlock
    提供了一种集成的自动化反向代理解决方案，保护应用程序的后端。我们只需发布 `interlock-proxy` 组件，而 Docker Swarm 服务会内部接收请求。因此，服务不需要额外发布；只需配置一些标签，告知
    Interlock 应用程序所需的转发。
- en: We can create as many overlay networks as required and they will be isolated
    from each other, as we also learned with custom bridge networks.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以根据需要创建任意数量的覆盖网络，它们将相互隔离，这一点与自定义桥接网络的工作原理类似。
- en: Orchestration introduced some new concepts, such as secrets and configurations,
    to provide stored information that is distributed cluster-wide. Secrets are secured
    and encrypted by Docker Swarm and we use them to configure passwords, certificates,
    or tokens using on-memory filesystems. Configuration objects help us to distribute
    configurations on containers running on different hosts without having to sync
    files between nodes manually.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编排引入了一些新概念，如秘密和配置，以提供分布式集群内存储的信息。Docker Swarm 会对秘密进行加密和保护，我们使用这些秘密配置密码、证书或令牌，通过内存文件系统进行管理。配置对象帮助我们在不同主机上运行的容器间分发配置，而无需手动在节点之间同步文件。
- en: In Docker Swarm, we deploy an application using Docker stacks. These resources
    allow us to deploy multi-service applications that are distributed cluster-wide.
    We will define all the required application resources (services, secrets, networks,
    configurations, volumes, and so on) in a `docker-compose`-like file and we will
    use these files to deploy the complete application. All changes or updates in
    application components should be written in these files because it allows us to
    manage the application's deployments as code.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Docker Swarm 中，我们使用 Docker stacks 部署应用程序。这些资源允许我们部署跨集群分布的多服务应用程序。我们将在一个类似
    `docker-compose` 的文件中定义所有所需的应用程序资源（服务、秘密、网络、配置、卷等），然后使用这些文件来部署完整的应用程序。所有应用组件的更改或更新都应该写入这些文件，因为它使我们能够将应用程序的部署管理为代码。
- en: Application component updates are managed using rolling updates. We can deploy
    changes manually or using Docker stacks. In both cases, we can deploy changes
    smoothly, avoiding service interruption and user impact. If an update goes bad,
    we can easily execute a rollback to run the previous service configuration.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用组件的更新通过滚动更新进行管理。我们可以手动或使用 Docker stacks 部署更改。在这两种情况下，我们都能平稳地部署更改，避免服务中断和对用户的影响。如果更新出现问题，我们可以轻松执行回滚，恢复到之前的服务配置。
- en: We also reviewed the Kubernetes orchestrator because it is included in Docker
    Enterprise. This orchestrator has many differences from Docker Swarm, although
    both manage containers at the end. We learned all about Kubernetes components
    and their interactions.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还回顾了 Kubernetes 编排器，因为它被包含在 Docker Enterprise 中。这个编排器与 Docker Swarm 有许多不同之处，尽管两者最终都管理容器。我们学习了
    Kubernetes 组件及其交互方式。
- en: Docker Enterprise deploys full vanilla (non-customized) Kubernetes for us out
    of the box, including Calico as a **Container Network Interface** (**CNI**) by
    default. All worker nodes (DTR requires dedicated workers) can be set to run either
    Docker Swarm, Kubernetes workloads, or even both orchestrator workloads.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Enterprise 为我们提供开箱即用的完整原生（非定制化）Kubernetes，包括默认使用 Calico 作为 **容器网络接口**（**CNI**）。所有工作节点（DTR
    需要专用工作节点）可以设置为运行 Docker Swarm、Kubernetes 工作负载，甚至同时运行两种编排工作负载。
- en: Pods are the smallest scheduling unit in Kubernetes but they do not provide
    resilience. We need to integrate them on orchestrated templated resources, such
    as ReplicaSets, DaemonSets, or deployments.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pods 是 Kubernetes 中最小的调度单元，但它们不提供弹性。我们需要将它们集成到编排的模板化资源中，例如 ReplicaSets、DaemonSets
    或部署。
- en: Kubernetes provides a flat network. This means that all pods that are deployed
    will see each other. Service-to-service communications are always allowed by default.
    To ensure security in this situation, we need to deploy NetworkPolicy resources
    to allow only specific component communications.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 提供一个扁平化的网络。这意味着所有部署的 pods 都可以互相看到。服务之间的通信默认始终是允许的。为了确保安全，在这种情况下，我们需要部署
    NetworkPolicy 资源，仅允许特定组件之间的通信。
- en: Although Docker stacks and multi-container applications using `docker-compose`
    use the same type of YAML files, some keys are only valid for one of them. For
    example, keys such as `depends_on`, `build`, or `volumes_from` are only available
    for Docker Compose multi-container applications; therefore, we will receive a
    warning message indicating this issue when we try to use them for Docker stacks.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Docker 堆栈和使用 `docker-compose` 的多容器应用程序使用相同类型的 YAML 文件，但有些键仅对其中一个有效。例如，像 `depends_on`、`build`
    或 `volumes_from` 这样的键仅适用于 Docker Compose 多容器应用程序；因此，当我们尝试在 Docker 堆栈中使用它们时，会收到一条警告信息，提示此问题。
- en: Let's review the required topics for the exam.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下考试所需的主题。
- en: Required knowledge for the exam
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考试所需的知识
- en: 'The exam will verify our knowledge of the following topics, among others:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 考试将验证我们对以下主题的知识，除此之外还有其他内容：
- en: Completing the setup of a Swarm mode cluster, with managers and worker nodes
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成 Swarm 模式集群的设置，包括管理节点和工作节点
- en: Describing and demonstrating how to extend the instructions to run individual
    containers into running services under Swarm
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何将运行单个容器的指令扩展为在 Swarm 中运行的服务
- en: Describing the importance of a quorum in a Swarm cluster
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 Swarm 集群中法定人数的重要性
- en: Describing the difference between running a container and running a service
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述运行容器和运行服务之间的区别
- en: Interpreting the output of the `docker inspect` commands
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释 `docker inspect` 命令的输出
- en: Converting an application deployment into a stack file using a YAML compose
    file with `docker stack deploy`
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `docker stack deploy` 将应用程序部署转换为堆栈文件，通过 YAML compose 文件
- en: Manipulating a running stack of services
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作运行中的服务堆栈
- en: Describing and demonstrating orchestration activities
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示编排活动
- en: Increasing the number of replicas
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加副本数
- en: Adding networks and publishing ports
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加网络和发布端口
- en: Mounting volumes
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挂载卷
- en: Describing and demonstrating how to run replicated and global services
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何运行复制服务和全局服务
- en: Applying node labels to demonstrate the placement of tasks
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用节点标签来展示任务的分配
- en: Describing and demonstrating how to use templates with `docker service create`
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何使用模板进行 `docker service create`
- en: Identifying the steps needed to troubleshoot a service that is not deploying
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别排查无法部署服务的步骤
- en: Describing how a Dockerized application communicates with legacy systems
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 Docker 化应用如何与传统系统进行通信
- en: Describing how to deploy containerized workloads as Kubernetes pods and deployments
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述如何将容器化的工作负载部署为 Kubernetes pod 和部署
- en: Describing how to provide configuration for Kubernetes pods using ConfigMap
    and secret resources.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述如何使用 ConfigMap 和 secret 资源为 Kubernetes pods 提供配置。
- en: These topics are extracted from Docker's official study guide, which can be
    found at [https://success.docker.com/certification](https://success.docker.com/certification).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主题摘自 Docker 官方学习指南，指南可以在 [https://success.docker.com/certification](https://success.docker.com/certification)
    找到。
- en: A brief summary of Docker image concepts
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 镜像概念的简要总结
- en: Images are fundamental to creating containers, and this topic represents around
    20% of the DCA exam questions. We covered Docker images in depth in [Chapter 2](3952ec16-ca49-4bc2-b7e6-d6f17fec3fab.xhtml),
    *Building Docker Images*, but we also talked about them in [Chapter 3](c2dd78c4-066f-40b4-94e7-a7e2904d7ec2.xhtml),
    *Running Docker Containers*, [Chapter 6](e9fd3807-5bbd-4ea8-84f7-ee02d288643d.xhtml),
    *Introduction to Docker Content Trust*, and *[Chapter 13](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml),
    Implementing an Enterprise-Grade Registry with DTR*. In this chapter, we will
    quickly review all of the concepts seen in those chapters as a summary.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像是创建容器的基础，这个主题大约占 DCA 考试题目的 20%。我们在[第 2 章](3952ec16-ca49-4bc2-b7e6-d6f17fec3fab.xhtml)《构建
    Docker 镜像》中深入讨论了 Docker 镜像，但我们在[第 3 章](c2dd78c4-066f-40b4-94e7-a7e2904d7ec2.xhtml)《运行
    Docker 容器》、[第 6 章](e9fd3807-5bbd-4ea8-84f7-ee02d288643d.xhtml)《Docker 内容信任介绍》以及
    *[第 13 章](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml)，使用 DTR 实现企业级注册中心* 中也有所提到。在本章中，我们将快速回顾在这些章节中看到的所有概念，以便做一个总结。
- en: 'Let''s review the most important concepts, features, and actions associated
    with Docker images before getting into the required knowledge section:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入所需知识部分之前，让我们回顾一下与 Docker 镜像相关的最重要的概念、特性和操作：
- en: Images are based on copy-on-write filesystem strategies. They are based on different
    overlapping layers, applied using different union filesystems and storage drivers.
    Currently, the most used filesystem driver for containers is `overlay2`. Docker
    Engine chooses the most adequate graph driver for our system, although we can
    change it.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像基于写时复制文件系统策略。它们基于不同的重叠层，通过不同的联合文件系统和存储驱动程序应用。目前，容器最常用的文件系统驱动程序是 `overlay2`。Docker
    引擎会为我们的系统选择最合适的图形驱动程序，尽管我们可以更改它。
- en: Containers are just isolated processes running on Docker hosts. We use images
    as templates to provide a root filesystem and meta-information to control processes'
    behavior.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器只是运行在 Docker 主机上的隔离进程。我们使用镜像作为模板，提供根文件系统和元信息来控制进程的行为。
- en: 'There are three methods for creating images:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建镜像有三种方法：
- en: '**Using a Dockerfile**: This file contains all the steps required to install
    our application with all its dependencies, as well as how it should be started.
    We also provide which ports and protocols should be used to communicate with the
    container''s processes. This method is reproducible and it provides infrastructure-as-code
    behavior.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Dockerfile**：此文件包含安装应用程序所需的所有步骤，以及如何启动它。我们还提供应该用于与容器进程通信的端口和协议。此方法是可重复的，并提供基础设施即代码（Infrastructure-as-Code）行为。'
- en: '**Running containers and committing**: In this case, we run a container, and
    inside, we run commands to install and configure our applications. When all the
    changes are made in the container''s filesystem, we commit those changes to make
    an image. This method is not reproducible. We usually use this workflow when application
    installation cannot be automated, for example.'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行容器和提交**：在这种情况下，我们运行一个容器，并在容器内运行命令来安装和配置我们的应用程序。当所有的更改都在容器的文件系统中完成后，我们将这些更改提交，以制作镜像。此方法不可重复。我们通常在无法自动化应用程序安装的情况下使用这种工作流程，例如。'
- en: '**Images from scratch**: In this case, images are lightweight because they
    just include an empty root filesystem with application binaries and dependencies.
    This root filesystem does not include any non-required operating system files.
    We add our binaries using Dockerfile copy keys.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从零开始构建镜像**：在这种情况下，镜像是轻量级的，因为它们只包含一个空的根文件系统和应用程序二进制文件及依赖项。这个根文件系统不包含任何不必要的操作系统文件。我们通过
    Dockerfile 的复制命令将二进制文件添加到其中。'
- en: Multi-stage building can also be included as an alternative method for creating
    images. In this case, we declare different build processes in just one Dockerfile.
    We define a descriptive name for each one and we define a workflow, copying files
    from different builds. This allows us to define a phase to compile an application
    using the required compilers, headers, or libraries on an application-development
    image and just copy the final development product to another phase, with a runtime
    environment. As a result, the runtime image is much smaller than the development
    one.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多阶段构建也可以作为创建镜像的替代方法。在这种情况下，我们在同一个 Dockerfile 中声明不同的构建过程。我们为每个过程定义一个描述性名称，并定义一个工作流，将文件从不同的构建中复制过来。这使我们能够定义一个阶段，使用所需的编译器、头文件或库在应用程序开发镜像中编译应用程序，然后只将最终开发产品复制到另一个包含运行时环境的阶段。因此，运行时镜像比开发镜像小得多。
- en: Dockerfiles create images by executing containers. Each container makes changes
    in its root filesystem and these changes will be committed (stored) for subsequent
    containers, using the previous container's layers for execution.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dockerfile 通过执行容器来创建镜像。每个容器都会在其根文件系统中进行更改，这些更改会被提交（存储）以供后续容器使用，执行时会使用先前容器的层。
- en: Smaller images are more secure because having non-required binaries, libraries,
    and configurations inside images is risky. Images should only contain the required
    content for our application.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更小的镜像更安全，因为镜像中包含不必要的二进制文件、库和配置是有风险的。镜像应仅包含应用程序所需的内容。
- en: 'There are a few important practices to follow to build better images:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建更好的镜像时，有几个重要的实践需要遵循：
- en: Never add debugging tools or compilers to production images.
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切勿将调试工具或编译器添加到生产环境镜像中。
- en: Declare all required resources on your images, such as exposed ports, the user
    required for the main process execution, and the directories that will be used
    as volumes. These will help other users to easily understand how your application
    works and should be used.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明镜像上所有需要的资源，例如暴露的端口、主要进程执行所需的用户以及将用作卷的目录。这些有助于其他用户轻松理解你的应用程序如何工作并如何使用。
- en: Do not use root on your application's images unless it is strictly required
    by processes to work.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非进程严格要求，否则不要在应用程序镜像中使用 root 用户。
- en: Build your images to run just one process per container. With many processes
    per container, it is hard to maintain and verify their health.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建镜像时，每个容器只运行一个进程。每个容器运行多个进程时，维护和验证其健康状态会变得更加困难。
- en: We always have to choose between the portability of layers between images and
    the images' sizes. There are cases where it is better to have fewer layers, while
    at other times it is better to have more layers because others will reuse them.
    Image layer caching is key to speeding up the image building process.
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们总是需要在镜像间层的可移植性和镜像的大小之间做出选择。有些情况下，拥有较少的层会更好，而在其他时候，拥有更多的层则更好，因为其他镜像会重用它们。镜像层缓存对于加速镜像构建过程至关重要。
- en: Always add health checks inside your Dockerfiles to help Docker Engine verify
    the container's health.
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终在 Dockerfile 中添加健康检查，以帮助 Docker 引擎验证容器的健康状态。
- en: Docker provides all of the required commands for building and shipping Docker
    images. We can also inspect their content or build history to help us debug their
    processes or create new images.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 提供了构建和分发 Docker 镜像所需的所有命令。我们还可以检查它们的内容或构建历史，以帮助我们调试它们的过程或创建新的镜像。
- en: It is key to understand that dangling images, unreferenced layers from previous
    builds, will stay in your Docker hosts until you remove them. Administrators should
    keep the Docker platform clean to avoid hosts degrading due to disk space being
    lost.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要理解的是，悬挂镜像（来自先前构建的未引用层）会一直保留在 Docker 主机上，直到你删除它们。管理员应保持 Docker 平台的整洁，避免由于磁盘空间丢失导致主机性能下降。
- en: Good image tagging is fundamental on container platforms. We can also use labels
    on Dockerfiles to add meta-information to Docker images. You should try to uniquely
    identify images by their tags, but remember that only an image's ID will really
    identify an image uniquely. An image can have many names and tags, but only one
    ID.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器平台上，良好的镜像标签管理是基础。我们还可以在 Dockerfile 中使用标签，为 Docker 镜像添加元信息。你应该尽量通过标签唯一地标识镜像，但请记住，只有镜像的
    ID 才能真正唯一地标识一个镜像。一个镜像可以有多个名称和标签，但只有一个 ID。
- en: We can include variables inside Dockerfiles. This will help us to build images
    with special features for different stages. We can deliver a production-ready
    image into production systems while having debugging and instrumentation tools
    on testing images. They will still have common application binaries but we will
    use a debugging version to review some specific problems. Variables can also be
    modified as arguments for the `docker build` command line.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在 Dockerfile 中包含变量。这将帮助我们为不同的阶段构建具有特殊功能的镜像。我们可以将生产环境准备好的镜像交付到生产系统，同时在测试镜像中包含调试和监控工具。它们仍然会包含通用的应用程序二进制文件，但我们将使用调试版本来查看一些特定的问题。变量也可以作为
    `docker build` 命令行的参数进行修改。
- en: Let's get an idea of the topics required for the exam.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下考试所需的主题。
- en: Required image management knowledge for the exam
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考试所需的镜像管理知识
- en: 'The exam will verify our knowledge of the following topics, among others:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 考试将验证我们对以下主题的了解，除此之外还有其他内容：
- en: Describing the use of a Dockerfile
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 Dockerfile 的使用
- en: Describing options, such as `add`, `copy`, `volumes`, `expose`, and `entrypoint`
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述选项，如 `add`、`copy`、`volumes`、`expose` 和 `entrypoint`
- en: Identifying and displaying the main parts of a Dockerfile
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别并显示 Dockerfile 的主要部分
- en: Describing and demonstrating how to create an efficient image via a Dockerfile
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述和演示如何通过 Dockerfile 创建高效的镜像
- en: Describing and demonstrating how to use CLI commands to manage images, such
    as `list`, `delete`, `prune`, and `rmi`
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述和演示如何使用 CLI 命令管理镜像，例如`list`、`delete`、`prune`和`rmi`
- en: Describing and demonstrating how to inspect images and report specific attributes
    using `filter` and `format`
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述和演示如何使用`filter`和`format`检查镜像并报告特定属性
- en: Describing and demonstrating how to tag an image
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述和演示如何为镜像打标签
- en: Describing and demonstrating how to apply a file to create a Docker image
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述和演示如何应用文件来创建 Docker 镜像
- en: Describing and demonstrating how to display the layers of a Docker image
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述和演示如何显示 Docker 镜像的各层
- en: Describing and demonstrating how to modify an image to a single layer
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述和演示如何将镜像修改为单层镜像
- en: Describing and demonstrating registry functions
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述和演示注册表功能
- en: Deploying a registry
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署注册表
- en: Logging into a registry
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录到注册表
- en: Utilizing search in a registry
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在注册表中使用搜索功能
- en: Pushing an image to a registry
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将镜像推送到注册表
- en: Signing an image in a registry
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在注册表中签署镜像
- en: Pulling and deleting images from a registry
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从注册表中拉取和删除镜像
- en: These topics are extracted from Docker's official study guide, which can be
    found at [https://success.docker.com/certification](https://success.docker.com/certification).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主题摘自 Docker 官方学习指南，可以在[https://success.docker.com/certification](https://success.docker.com/certification)找到。
- en: A summary of the Docker architecture, installation, and configuration topics
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 架构、安装和配置主题的总结
- en: The installation and configuration of the Docker platform are key to every Docker
    Enterprise administrator. These topics represent 15% of the exam content. They
    were covered in multiple chapters for standalone and cluster environments. We
    learned about these concepts in [Chapter 1](c5ecd7bc-b7ed-4303-89a8-e487c6a220ed.xhtml),
    *Modern Infrastructures and Applications with Docker*, [Chapter 8](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml),
    *Orchestration Using Docker Swarm*, [Chapter 10](3a2d6b8e-40d0-44f2-8a07-75969a28cc6b.xhtml),
    *The Docker Enterprise Platform*, [Chapter 11](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml),
    *Universal Control Plane*, and [Chapter 13](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml),
    *Implementing an Enterprise-Grade Registry with DTR*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 平台的安装和配置是每个 Docker 企业管理员的关键。这些主题占考试内容的 15%。它们已在多个章节中涵盖，涉及独立和集群环境。我们在[第
    1 章](c5ecd7bc-b7ed-4303-89a8-e487c6a220ed.xhtml)《Docker 与现代基础设施和应用》，[第 8 章](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml)《使用
    Docker Swarm 进行编排》，[第 10 章](3a2d6b8e-40d0-44f2-8a07-75969a28cc6b.xhtml)《Docker
    企业平台》，[第 11 章](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml)《通用控制平面》，以及[第 13 章](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml)《使用
    DTR 实现企业级注册表》中学习了这些概念。
- en: 'This is a quick summary of special characteristics and tips for the installation
    and configuration of the Docker platform. We recommend that you read this summary
    to ensure you remember the concepts learned:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于 Docker 平台安装和配置的特别特点和技巧的快速总结。我们建议你阅读此总结，以确保记住所学的概念：
- en: '**Docker components on standalone and cluster environments**: We should have
    a good idea of Docker Enterprise component distribution and features.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 组件在独立和集群环境中的应用**：我们应该对 Docker 企业组件的分布和功能有较好的了解。'
- en: '**The installation processes for each component on different platforms**: We
    have seen that installation is easy in both the Docker Community and Docker Enterprise
    environments. Review the installation processes for the different platforms and
    ensure that you have a good idea of the configuration file locations.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不同平台上各组件的安装过程**：我们看到在 Docker 社区和 Docker 企业环境中，安装过程都很简单。回顾不同平台上的安装过程，并确保你对配置文件位置有清晰的了解。'
- en: You must know all the components' requirements and the steps required to deploy
    a **Container-as-a-Service** (**CaaS**) enterprise-ready solution, with high availability
    on core components.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你必须了解所有组件的要求，以及部署**容器即服务**（**CaaS**）企业级解决方案所需的步骤，确保核心组件的高可用性。
- en: '[Chapter 1](c5ecd7bc-b7ed-4303-89a8-e487c6a220ed.xhtml), *Modern Infrastructures
    and Applications with Docker*, showed many configuration procedures for Docker
    Engine. By default, Docker will choose the best storage driver for your Docker
    layers. Remember that we used `overlay2` because we should be able to change it
    if our installation has different requirements.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 1 章](c5ecd7bc-b7ed-4303-89a8-e487c6a220ed.xhtml)，*使用 Docker 的现代基础设施与应用程序*，展示了许多
    Docker 引擎的配置过程。默认情况下，Docker 会选择最佳的存储驱动程序来管理 Docker 层。记住，我们使用了 `overlay2`，因为如果我们的安装有不同的需求，应该可以更改它。'
- en: Ensure that you have a good understanding of what files are under the `/var/lib/docker`
    directory (or the one configured) and what should be stored in your Docker Engine's
    backups. You also learned about the procedures to create **Universal Control Plane**
    (**UCP**) and **Docker Trusted Registry** (**DTR**) backups and the steps and
    cases where restoration is required.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你清楚了解 `/var/lib/docker` 目录（或已配置目录）下的文件，以及 Docker 引擎备份中应存储的内容。你还了解了创建 **Universal
    Control Plane**（**UCP**）和 **Docker Trusted Registry**（**DTR**）备份的程序，以及在何种情况下需要进行恢复的步骤。
- en: Only Docker Enterprise and Kubernetes provide role-based access. We covered
    basic Docker Enterprise permissions and configurations for UCP and DTR in [Chapter
    11](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml), *Universal Control Plane*, and
    [Chapter 13](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml), *Implementing an Enterprise-Grade
    Registry with DTR*, respectively.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有 Docker Enterprise 和 Kubernetes 提供基于角色的访问控制。我们在 [第 11 章](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml)，*Universal
    Control Plane* 和 [第 13 章](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml)，*使用 DTR
    实现企业级镜像仓库* 中分别介绍了 Docker Enterprise 权限和 UCP 与 DTR 的基本配置。
- en: Review how we configured TLS communications for client authentication when we
    do not need different levels of authorization. This was covered in [Chapter 1](c5ecd7bc-b7ed-4303-89a8-e487c6a220ed.xhtml),
    *Modern Infrastructures and Applications with Docker*.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾我们如何配置 TLS 通信以进行客户端认证，当我们不需要不同授权级别时。这部分内容在 [第 1 章](c5ecd7bc-b7ed-4303-89a8-e487c6a220ed.xhtml)，*使用
    Docker 的现代基础设施与应用程序* 中有详细介绍。
- en: Cgroups and kernel namespaces provide container isolation. These are key to
    ensuring processes have enough resources without any non-authorized communication
    with other processes running on the same host.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cgroups 和内核命名空间提供容器隔离。这是确保进程拥有足够资源且不与同一主机上其他进程进行非授权通信的关键。
- en: We will now review which topics should be known about for the exam.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将回顾考试应了解的主题。
- en: The knowledge required about the Docker platform for the exam
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参加考试所需了解的 Docker 平台知识
- en: 'The exam will verify our knowledge of the following topics, among others:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 考试将验证我们对以下主题的理解，及其他内容：
- en: Describing sizing requirements for installation
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述安装的规模要求
- en: Describing and demonstrating the setup of a repo, the selection of a storage
    driver, and the installation of the Docker engine on multiple platforms
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何设置仓库，选择存储驱动程序，并在多个平台上安装 Docker 引擎
- en: Describing and demonstrating the configuration of logging drivers (`splunk`,
    `journald`, and so on)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何配置日志驱动程序（`splunk`、`journald` 等）
- en: Describing and demonstrating how to set up Swarm, configure managers, add nodes,
    and set up the backup schedule
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何设置 Swarm，配置管理节点，添加节点，并设置备份计划
- en: Describing and demonstrating how to create and manage users and teams
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何创建和管理用户与团队
- en: Describing and demonstrating how to configure the Docker daemon to start on
    boot
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何配置 Docker 守护进程在启动时自动启动
- en: Describing and demonstrating how to use certificate-based client-server authentication
    to ensure a Docker daemon has the right to access images on a registry
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何使用基于证书的客户端-服务器认证，以确保 Docker 守护进程具有访问镜像仓库的权限
- en: Describing the use of namespaces, cgroups, and certificate configuration
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述命名空间、cgroups 和证书配置的使用
- en: Describing and interpreting errors to troubleshoot installation issues without
    assistance
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并解读错误信息，以便在没有帮助的情况下排查安装问题
- en: Describing and demonstrating the steps to deploy Docker Engine, UCP, and DTR
    on **Amazon Web Services** (**AWS**) and on-premises with high availability
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何在 **Amazon Web Services**（**AWS**）和本地环境中，以高可用性部署 Docker 引擎、UCP 和 DTR
- en: Describing and demonstrating how to configure backups for UCP and DTR
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何为 UCP 和 DTR 配置备份
- en: These topics are extracted from Docker's official study guide, which can be
    found at [https://success.docker.com/certification](https://success.docker.com/certification).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主题摘自 Docker 官方的学习指南，可以在[https://success.docker.com/certification](https://success.docker.com/certification)找到。
- en: A summary of the networking topics
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络主题总结
- en: Networking is one of the core components of microservice application architecture.
    Faster networks allowed the evolution of distributed architectures. High availability
    and resilience can be provided using modern infrastructures, even on cloud or
    cloud-hybrid architectures. Containers work like small virtual nodes and they
    get virtual interfaces. We learned that network namespaces allow us to isolate
    processes on the same host, even if they use the same bridge interface to communicate
    with the real network, out of the host's network namespaces. Distributed networking
    on clusters is also simple because Docker Swarm manages all the internal infrastructures
    and processes required to allow communication between containers on different
    hosts. Overlay networks in Docker Swarm, distributed cluster-wide, use VXLAN to
    encapsulate traffic and can even be encrypted. By default, the Docker Swarm control
    plane's components are secured using **Mutual TLS** (**MTLS**) communication and
    we can isolate application data from network management.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是微服务应用架构的核心组件之一。更快的网络促使了分布式架构的演变。通过现代基础设施，甚至在云或云混合架构上，也可以提供高可用性和弹性。容器像小型虚拟节点一样工作，并且它们获得虚拟接口。我们了解到，网络命名空间允许我们在同一主机上隔离进程，即使它们使用相同的桥接接口与实际网络进行通信，也可以从主机的网络命名空间中隔离开来。集群中的分布式网络也非常简单，因为
    Docker Swarm 管理所有必要的内部基础设施和进程，以允许不同主机上的容器之间进行通信。Docker Swarm 中的覆盖网络跨集群分布，使用 VXLAN
    封装流量，并且甚至可以进行加密。默认情况下，Docker Swarm 控制平面的组件通过**相互 TLS**（**MTLS**）通信进行保护，我们可以将应用数据与网络管理隔离开来。
- en: All of these topics were covered in multiple chapters on Docker Engine, Docker
    Swarm, and Kubernetes. We learned about these topics in [Chapter 4](e7804d8c-ed8c-4013-8449-b746ee654210.xhtml),
    *Container Persistency and Networking*, [Chapter 8](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml),
    *Orchestration Using Docker Swarm*, [Chapter 9](abcbf266-c469-4d84-ad4f-abd321a64b53.xhtml),
    *Orchestration Using Kubernetes*, [Chapter 11](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml),
    *Universal Control Plane*, and [Chapter 12](ab131f1f-ca6e-4815-9a3a-8c92c93c9dbc.xhtml),
    *Publishing Applications in Docker Enterprise.*
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些主题都在多个章节中介绍了 Docker Engine、Docker Swarm 和 Kubernetes。我们在[第4章](e7804d8c-ed8c-4013-8449-b746ee654210.xhtml)中学习了*容器持久性与网络*，在[第8章](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml)中学习了*使用
    Docker Swarm 进行编排*，在[第9章](abcbf266-c469-4d84-ad4f-abd321a64b53.xhtml)中学习了*使用 Kubernetes
    进行编排*，在[第11章](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml)中学习了*通用控制平面*，以及在[第12章](ab131f1f-ca6e-4815-9a3a-8c92c93c9dbc.xhtml)中学习了*在
    Docker 企业版中发布应用程序*。
- en: In [Chapter 9](abcbf266-c469-4d84-ad4f-abd321a64b53.xhtml), *Orchestration Using
    Kubernetes*, we learned how Kubernetes implements network features cluster-wide.
    We also reviewed these features side by side against Docker Swarm implementations
    to have a good idea of how we can use both or make container workloads that can
    run on any of them.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](abcbf266-c469-4d84-ad4f-abd321a64b53.xhtml)中，我们学习了 Kubernetes 如何实现集群范围的网络功能。我们还将这些功能与
    Docker Swarm 实现进行并列比较，以便更好地了解如何使用两者，或者如何创建能够在它们任何一个上运行的容器工作负载。
- en: We also learned that containers can expose their application processes internally.
    Other containers can consume their services but we need to publish their ports
    for external users and applications. This is very important because security is
    ensured in Docker Swarm for containers working in the same network. They are isolated,
    hence we can publish only frontend applications' components.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还了解到，容器可以在内部暴露其应用程序进程。其他容器可以使用它们的服务，但我们需要发布它们的端口以供外部用户和应用程序访问。这一点非常重要，因为在
    Docker Swarm 中，处于同一网络的容器之间会确保安全。它们是相互隔离的，因此我们只能发布前端应用程序的组件。
- en: 'Let''s look at some network topics as a summary:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下网络相关的主题：
- en: Docker Engine networking is based on bridge networking, although we can use
    MacVLAN interfaces (with real IP addresses), underlying the host's networking
    (using its network namespace), and can even extend default behavior using plugins.
    We can use default or custom bridge networking. Custom networks also deploy internal
    DNS facilities, hence, containers running on these networks will know each other
    by their names. In some special cases, it is useful to deploy containers without
    networking features.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 引擎的网络是基于桥接网络的，尽管我们可以使用 MacVLAN 接口（带有真实 IP 地址），基于主机的网络（使用其网络命名空间），甚至可以通过插件扩展默认行为。我们可以使用默认或自定义桥接网络。自定义网络还部署内部
    DNS 设施，因此在这些网络上运行的容器可以通过它们的名称互相识别。在某些特殊情况下，部署不带网络功能的容器也是有用的。
- en: Networking in Docker Swarm is easy because Docker creates new virtual networks
    (overlay networks) and deploys VXLAN tunnels to encapsulate all hosts' traffic.
    Containers deployed for services' tasks can see each other if they are working
    on the same overlay network.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm 中的网络配置很简单，因为 Docker 创建新的虚拟网络（覆盖网络），并部署 VXLAN 隧道来封装所有主机的流量。如果服务任务部署在同一个覆盖网络上，它们的容器可以互相看到。
- en: The Kubernetes network model is even easier. It is based on a flat network where
    services and pods are always reachable by default. For this to work, we need to
    integrate a CNI. Each CNI has its own implementation of this flat network model
    and Docker Enterprise deploys Calico ([https://www.projectcalico.org/](https://www.projectcalico.org/))
    by default.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 的网络模型更加简单。它基于一个扁平网络，服务和 Pod 默认情况下始终可达。为了使其工作，我们需要集成一个 CNI。每个 CNI
    都有自己的扁平网络模型实现，而 Docker Enterprise 默认部署 Calico（[https://www.projectcalico.org/](https://www.projectcalico.org/)）。
- en: A flat network is unsecured by default because applications' components are
    not isolated. We will use network policies to isolate applications, grouping them
    by namespaces, labels, and so on. NetworkPolicy resources manage connection rules
    to allow or disallow specific pods' connections and hence their traffic.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扁平网络默认情况下不安全，因为应用程序组件没有被隔离。我们将使用网络策略来隔离应用程序，通过命名空间、标签等进行分组。NetworkPolicy 资源管理连接规则，允许或禁止特定
    Pod 的连接及其流量。
- en: Docker Swarm nodes use encrypted TLS communications by default (mutual TLS).
    Docker manages all of the required certificates. Users' communications with the
    cluster are not secure, but we can also create secure communications manually
    (we have a complete example explaining all of the required steps in [Chapter 8](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml),
    *Orchestration Using Docker Swarm*) or use UCP-integrated **Role-Based Access
    Control** (**RBAC**). UCP provides users with bundles, containing all the required
    files to create secure TLS tunnels.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm 节点默认使用加密的 TLS 通信（双向 TLS）。Docker 管理所有所需的证书。用户与集群的通信是不安全的，但我们也可以手动创建安全通信（在《第
    8 章》中有一个完整的示例，解释所有必需的步骤，*使用 Docker Swarm 进行编排*），或者使用 UCP 集成的 **基于角色的访问控制**（**RBAC**）。UCP
    提供用户包，包含创建安全 TLS 隧道所需的所有文件。
- en: Kubernetes also encrypts its control plane. Docker Enterprise does all the deployment
    work for us and a fully functional Kubernetes cluster will be up and running after
    its installation. Certificates will be used to deploy TLS tunnels between Kubernetes
    components and users by default.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 还会加密其控制平面。Docker Enterprise 会为我们完成所有部署工作，在安装后会启动一个完全功能的 Kubernetes
    集群。证书将用于在 Kubernetes 组件和用户之间默认部署 TLS 隧道。
- en: Internal DNS is deployed for local custom bridge and overlay networks. Therefore,
    containers and services can be discovered by their names. Containers use an internal
    DNS and an external resolution will be forwarded to a specific external DNS. By
    default, containers receive the host's DNS configuration, but we can change this
    behavior.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地自定义桥接和覆盖网络部署了内部 DNS。因此，容器和服务可以通过它们的名称进行发现。容器使用内部 DNS，外部解析将被转发到特定的外部 DNS。默认情况下，容器接收主机的
    DNS 配置，但我们可以更改这种行为。
- en: Kubernetes also integrates an internal DNS. In this case, the `kube-dns` component
    will manage all service entries.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 也集成了内部 DNS。在这种情况下，`kube-dns` 组件将管理所有服务条目。
- en: Internal load balancing is also deployed in overlay networks. Remember that
    services can be replicated or global. In both cases, `vip` mode is used by default,
    and services get an IP address in the special ingress network. This IP address
    is registered and the internal load balancer will route requests to all available
    services' replicas. We can avoid this behavior using the `dns-round-robin` mode.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部负载均衡也部署在覆盖网络中。请记住，服务可以是复制的或全局的。在这两种情况下，默认使用 `vip` 模式，服务将获得一个特殊入口网络中的 IP 地址。此
    IP 地址已注册，内部负载均衡器将请求路由到所有可用服务的副本。我们可以使用 `dns-round-robin` 模式来避免这种行为。
- en: Kubernetes' internal load balancing has similar behavior. All services will
    receive an internal virtual IP address by default (a ClusterIP). Services in Kubernetes
    are logical groups of pods and services' requests will be forwarded by default
    to all associated pods.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 的内部负载均衡具有类似的行为。所有服务默认都会接收一个内部虚拟 IP 地址（ClusterIP）。Kubernetes 中的服务是
    Pod 的逻辑组，服务的请求默认会转发到所有关联的 Pod。
- en: As mentioned before, an application deployed within containers will not publish
    their ports unless we declare this behavior. Publishing ports on Docker Engine
    is easy and we can ensure that only specific IP addresses will listen on a published
    port on multi-homed nodes. Bridge networking uses NAT for publishing an application's
    ports. Docker creates all of the required hosts' firewall rules to allow and route
    this traffic. If we use the host's networking, all container-exposed ports will
    be published and applications will be directly accessible.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前所述，部署在容器中的应用程序默认不会发布其端口，除非我们声明这种行为。在 Docker 引擎上发布端口很简单，我们可以确保只有特定的 IP 地址会监听多网卡节点上发布的端口。桥接网络使用
    NAT 来发布应用程序的端口。Docker 会创建所有所需的主机防火墙规则，以允许并路由这些流量。如果我们使用主机的网络，所有容器暴露的端口都会被发布，应用程序将直接可访问。
- en: We also learned that services in Docker Swarm will be published by default in
    all nodes, even if they do not run any services' tasks. This feature is known
    as a router mesh and application ports will be available in all of the clusters'
    hosts. Internal load balancing will also be applied using an ingress overlay network
    and instances in different hosts will be reachable. This can be insecure because
    all application ports will be accessible on all hosts.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还了解到，Docker Swarm 中的服务默认会在所有节点上发布，即使它们没有运行任何服务任务。这个功能被称为路由网状（router mesh），应用程序端口将在所有集群的主机上可用。内部负载均衡也将通过入口覆盖网络应用，并且不同主机上的实例将是可达的。这可能存在安全隐患，因为所有应用程序端口都可以在所有主机上访问。
- en: Kubernetes' `NodePort` services have equivalent behavior to Docker Swarm's router
    mesh. Services declared as `NodePort` will publish their ports on all cluster
    nodes. However, Kubernetes also has the `LoadBalancer` service type. These services
    will be published directly using infrastructure load balancers. This integration
    only works on some cloud providers.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 的 `NodePort` 服务与 Docker Swarm 的路由网状行为相似。声明为 `NodePort` 的服务将在所有集群节点上发布其端口。然而，Kubernetes
    也有 `LoadBalancer` 服务类型。这些服务将通过基础设施负载均衡器直接发布。此集成仅适用于某些云服务提供商。
- en: UCP provides Interlock as a solution to avoid unsecured router mesh publishing.
    We have learned about Interlock's components and deployment and how we publish
    applications using this tool. Interlock's ports must be published, but all other
    applications' services can be accessed through Interlock. Therefore, we do not
    need to publish applications' ports. This improves security because Interlock
    acts as a reverse proxy, providing TLS security, host- and content-based services
    routing, and sticky sessions, among others. The Interlock proxy component will
    be updated using services' labels; therefore, only services with specific labels
    will be published. We have learned about these required labels and reviewed a
    few examples of their usage.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UCP 提供了 Interlock 作为避免不安全的路由器网状发布的解决方案。我们已经了解了 Interlock 的组件和部署方式，以及如何使用该工具发布应用程序。Interlock
    的端口必须被发布，但所有其他应用程序的服务可以通过 Interlock 访问。因此，我们不需要发布应用程序的端口。这提高了安全性，因为 Interlock
    充当反向代理，提供 TLS 安全性、基于主机和内容的服务路由以及粘性会话等功能。Interlock 代理组件将使用服务标签进行更新；因此，只有具有特定标签的服务才会被发布。我们已经了解了这些必需的标签，并审查了一些示例用法。
- en: Kubernetes can integrate ingress controllers to avoid `NodePort` cluster-wide
    application publishing. Ingress controllers deploy reverse-like proxy features
    to route requests to appropriate services matching specific headers or content
    rules. This improves security because services should not be published. We just
    publish ingress controllers (using service strategies, for example), and ingress
    resources manage the necessary rules for reaching out to the desired services,
    although they are not externally published.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 可以集成入口控制器，避免 `NodePort` 在集群范围内发布应用程序。入口控制器部署类似反向代理的功能，将请求路由到匹配特定头部或内容规则的适当服务。这提高了安全性，因为服务不应该被直接发布。我们只发布入口控制器（例如使用服务策略），而入口资源管理着必要的规则，用于访问这些服务，尽管它们没有对外发布。
- en: As mentioned, networking is critical in cluster environments. Let's review some
    of the topics required to pass the exam.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，网络在集群环境中至关重要。让我们回顾一下通过考试所需的一些主题。
- en: The Docker networking knowledge required for the exam
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过考试所需的 Docker 网络知识
- en: 'The exam will verify our knowledge of the following topics, among others:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 考试将验证我们对以下主题的了解，等等：
- en: Describing the container network model and how it interfaces with Docker Engine
    and network and IPAM drivers
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述容器网络模型及其如何与 Docker 引擎、网络和 IPAM 驱动程序交互
- en: Describing the different types and use cases for built-in network drivers
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述内建网络驱动程序的不同类型及其使用场景
- en: Describing the types of traffic that flow between Docker Engine, registry, and
    UCP controllers
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 Docker 引擎、注册表和 UCP 控制器之间流动的流量类型
- en: Describing and demonstrating how to create a Docker bridge network for developers
    to use for their containers
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何创建一个 Docker 桥接网络供开发人员使用其容器
- en: Describing and demonstrating how to publish a port so that an application is
    accessible externally
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何发布端口，使应用程序可以对外访问
- en: Identifying which IP and port a container is externally accessible on
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定容器在外部可访问的 IP 和端口
- en: Comparing and contrasting host and ingress publishing modes
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较和对比主机与入口发布模式
- en: Describing and demonstrating how to configure Docker to use an external DNS
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何配置 Docker 使用外部 DNS
- en: Describing and demonstrating how to use Docker to load balance HTTP/HTTPS traffic
    to an application (configuring L7 load balancing with Docker EE).
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何使用 Docker 对 HTTP/HTTPS 流量进行负载均衡，进而实现应用程序负载均衡（配置 Docker EE 的 L7 负载均衡）
- en: Understanding and describing the types of traffic that flow between Docker Engine,
    registry, and UCP controllers
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解并描述 Docker 引擎、注册表和 UCP 控制器之间流动的流量类型
- en: Describing and demonstrating how to deploy a service on a Docker overlay network
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何在 Docker 悬浮网络上部署服务
- en: Describing and demonstrating how to troubleshoot container and engine logs to
    resolve connectivity issues between containers
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何通过排查容器和引擎日志来解决容器之间的连接问题
- en: Describing how to route traffic to Kubernetes pods using the ClusterIP and NodePort
    services
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述如何使用 ClusterIP 和 NodePort 服务将流量路由到 Kubernetes pod
- en: Describing the Kubernetes container network model.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 Kubernetes 容器网络模型
- en: These topics are extracted from Docker's official study guide, which can be
    found at [https://success.docker.com/certification](https://success.docker.com/certification).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主题摘自 Docker 官方学习指南，您可以在 [https://success.docker.com/certification](https://success.docker.com/certification)
    查找。
- en: The next section will help you by presenting the required knowledge in relation
    to security on the Docker platform.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分将通过介绍与 Docker 平台安全性相关的必备知识来帮助您。
- en: Understanding security concepts and related Docker features
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解安全性概念及相关的 Docker 特性
- en: Security is crucial when you are running applications in production. We have
    learned about many security features provided by Docker and its components. We
    started by reviewing how containers are isolated from other host processes and
    we also learned how we can ensure security in Docker Engine. Then, we moved on
    to Docker Swarm, where security must be applied cluster-wide. Users' access must
    also be managed and we need to provide authentication and authorization mechanisms.
    Docker Enterprise provides a higher level of security. It includes a complete
    RBAC environment, which allows us to manage fine-grained permissions to objects
    and cluster resources.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在生产环境中运行应用程序时，安全性至关重要。我们学习了 Docker 及其组件提供的许多安全功能。我们首先回顾了容器如何与其他主机进程隔离，并了解了如何确保
    Docker 引擎的安全性。然后，我们继续学习 Docker Swarm，在该环境中必须对整个集群应用安全策略。用户的访问也必须得到管理，我们需要提供身份验证和授权机制。Docker
    企业版提供了更高层次的安全性。它包括完整的 RBAC 环境，使我们能够管理细粒度的对象和集群资源权限。
- en: All of these topics were covered in multiple chapters on Docker Engine, Docker
    Swarm, Kubernetes, and the Docker Enterprise platform. We learned about security
    in [Chapter 1](c5ecd7bc-b7ed-4303-89a8-e487c6a220ed.xhtml), *Modern Infrastructures
    and Applications with Docker*, [Chapter 2](3952ec16-ca49-4bc2-b7e6-d6f17fec3fab.xhtml),
    *Building Docker Images*, [Chapter 4](e7804d8c-ed8c-4013-8449-b746ee654210.xhtml),
    *Container Persistency and Networking*, [Chapter 6](e9fd3807-5bbd-4ea8-84f7-ee02d288643d.xhtml),
    *Introduction to Docker Content Trust*, [Chapter 8](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml),
    *Orchestration Using Docker Swarm*, [Chapter 9](abcbf266-c469-4d84-ad4f-abd321a64b53.xhtml),
    *Orchestration Using Kubernetes*, [Chapter 11](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml),
    *Universal Control Plane*, [Chapter 12](ab131f1f-ca6e-4815-9a3a-8c92c93c9dbc.xhtml),
    *Publishing Applications in Docker Enterprise*, and [Chapter 13,](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml)
    [](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml) *Implementing an Enterprise-Grade
    Registry with DTR**.*
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些主题都在多章节中涉及了 Docker 引擎、Docker Swarm、Kubernetes 和 Docker 企业平台。我们在[第 1 章](c5ecd7bc-b7ed-4303-89a8-e487c6a220ed.xhtml)，*使用
    Docker 进行现代基础设施与应用程序*，[第 2 章](3952ec16-ca49-4bc2-b7e6-d6f17fec3fab.xhtml)，*构建
    Docker 镜像*，[第 4 章](e7804d8c-ed8c-4013-8449-b746ee654210.xhtml)，*容器持久性与网络*，[第 6
    章](e9fd3807-5bbd-4ea8-84f7-ee02d288643d.xhtml)，*Docker 内容信任简介*，[第 8 章](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml)，*使用
    Docker Swarm 进行编排*，[第 9 章](abcbf266-c469-4d84-ad4f-abd321a64b53.xhtml)，*使用 Kubernetes
    进行编排*，[第 11 章](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml)，*通用控制平面*，[第 12 章](ab131f1f-ca6e-4815-9a3a-8c92c93c9dbc.xhtml)，*在
    Docker 企业版中发布应用程序*，以及[第 13 章](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml)，*使用
    DTR 实现企业级镜像仓库*。
- en: We have to remember that containers are created using images, so securing images
    is also critical. Following good practices is key to developing safe images. Docker
    Enterprise provides several strategies to validate image precedence, immutability,
    and content security.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须记住，容器是通过镜像创建的，因此确保镜像的安全性也至关重要。遵循最佳实践是开发安全镜像的关键。Docker 企业版提供了几种策略来验证镜像的优先级、不可变性和内容安全性。
- en: 'Let''s review some of these security topics:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下其中的一些安全主题：
- en: Docker is a client-server application. The server will publish its API on local
    (by default) and remotely accessible sockets. We can limit Docker Engine access
    by limiting access to these sockets. Locally, only users with filesystem permissions
    to a defined socket file will be allowed to run Docker commands on the local Docker
    engine.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 是一个客户端-服务器应用程序。服务器将在本地（默认情况下）和远程可访问的套接字上发布其 API。我们可以通过限制对这些套接字的访问来限制
    Docker 引擎的访问权限。在本地，只有具有文件系统权限的用户才能运行本地 Docker 引擎上的 Docker 命令。
- en: Docker Engine can be integrated with operating system-provided security modules,
    such as SELinux or AppArmor. Docker provides integration and default profiles
    to use with our containers. Docker also integrates with the Linux kernel to allow
    the adding or removing of specific system calls using capabilities. There are
    also simpler security tips, such as using read-only root filesystems and non-root
    users within containers, that will also help us to provide secure applications.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 引擎可以与操作系统提供的安全模块（如 SELinux 或 AppArmor）集成。Docker 提供了与容器配合使用的集成和默认配置文件。Docker
    还与 Linux 内核集成，允许使用能力添加或移除特定的系统调用。还有一些更简单的安全建议，比如使用只读根文件系统和容器内的非 root 用户，这些也有助于我们提供安全的应用程序。
- en: Images should be secure to create secure containers. Images should only contain
    the required binaries, libraries, and configurations for our processes. Everything
    irrelevant to the application should be avoided. Docker Enterprise provides an
    image's content security scanner. It compares relevant content file hashes against
    a database of well-known published vulnerabilities and exploits (internet **Common
    Vulnerabilities and Exposures** (**CVE**)). We learned how this process works
    and how we can integrate tag promotions to ensure that only allowed users get
    the appropriate access to their images. These are some of the DTR features.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像应当安全，以便创建安全的容器。镜像应只包含我们的流程所需的二进制文件、库和配置。所有与应用程序无关的内容都应避免。Docker Enterprise提供了镜像内容安全扫描器。它将相关内容的文件哈希与已知的公开漏洞和漏洞利用数据库（互联网**常见漏洞和暴露**（**CVE**））进行比对。我们了解了这个过程是如何工作的，以及如何集成标签提升（tag
    promotion），确保只有被授权的用户可以访问他们的镜像。这些都是DTR的一些功能。
- en: We can also sign images. This process ensures image content immutability and
    ownership. If we integrate image building into our continuous integration and
    continuous deployment, we can ensure that images were created using an appropriate
    workflow. We can also improve our CaaS security, allowing only containers based
    on images signed by specific teams or users within your organization.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以签署镜像。这个过程确保镜像内容的不可变性和所有权。如果我们将镜像构建集成到持续集成和持续部署中，我们可以确保镜像是通过适当的工作流创建的。我们还可以提高CaaS的安全性，仅允许基于由组织内特定团队或用户签署的镜像的容器运行。
- en: We learned about all the automatic steps to be followed to sign an image and
    all the keys integrated into the process. Image signing is based on Content Trust
    logic, and we learned how it is integrated in Docker in [Chapter 6](e9fd3807-5bbd-4ea8-84f7-ee02d288643d.xhtml),
    *Introduction to Docker Content Trust*.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们了解了签署镜像所需遵循的所有自动化步骤以及集成到该过程中的所有密钥。镜像签名基于内容信任（Content Trust）逻辑，我们了解了它如何在Docker中集成，详细内容请参见[第六章](e9fd3807-5bbd-4ea8-84f7-ee02d288643d.xhtml)，*Docker内容信任简介*。
- en: We mentioned some simple practices that increase security in our workloads,
    such as running read-only root filesystems or using non-root users for applications
    (or user namespaces). We should review an image's specifications using `docker
    image inspect` to have a good idea of exposed ports, applications' users, and
    commands that will be executed inside containers.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们提到了一些可以提高工作负载安全性的简单实践，例如运行只读根文件系统或为应用程序使用非根用户（或用户命名空间）。我们应该使用`docker image
    inspect`来查看镜像的规格，以便了解暴露的端口、应用程序的用户和将在容器内执行的命令。
- en: As mentioned in this chapter, neither Docker Engine nor Docker Swarm have any
    RBAC integration. On the other hand, Docker Enterprise components have integrated
    role-based access. UCP provides different accesses to Docker Swarm resources based
    on roles, grants, and collections. We can configure fine-grained access to volumes,
    secrets, configs, networks, and so on, so users will only be able to execute allowed
    actions on their resources. Users will connect to the cluster to execute, review,
    and modify their resources by using either the provided web UI or their Docker
    command line, using their Docker client software and their UCP's bundle. This
    compressed file contains user certificates and environment scripts prepared to
    help users connect easily to the cluster.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如本章所述，Docker Engine和Docker Swarm都没有任何RBAC集成。另一方面，Docker Enterprise组件具有集成的基于角色的访问控制。UCP根据角色、权限和集合提供不同的Docker
    Swarm资源访问权限。我们可以配置细粒度的访问控制，管理卷、密钥、配置、网络等资源，因此用户只能对其资源执行允许的操作。用户将通过提供的Web UI或Docker命令行连接到集群，使用他们的Docker客户端软件和UCP的捆绑包来执行、审查和修改资源。这个压缩文件包含用户证书和环境脚本，旨在帮助用户轻松连接到集群。
- en: DTR has its own RBAC environment, isolated from that of UCP. DTR is a registry,
    therefore its RBAC environment is dedicated to managing access to the images stored
    within your CaaS. We have fine-grained permissions to allow a group of users to
    use or modify images, while other images are public within teams or the full organization.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DTR有其独立的RBAC环境，与UCP的RBAC环境隔离。DTR是一个镜像仓库，因此它的RBAC环境专门用于管理对存储在CaaS中的镜像的访问。我们可以精细控制权限，允许一组用户使用或修改镜像，而其他镜像则在团队或整个组织内公开。
- en: DTR and UCP are integrated by default in a single sign-on solution, although
    we can change this behavior. We can also integrate them into our organization
    user management solution, Active Directory, or any compatible **Lightweight Directory
    Access Protocol** (**LDAP**).
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DTR 和 UCP 默认通过单点登录解决方案进行集成，尽管我们可以更改这种行为。我们还可以将它们集成到我们的组织用户管理解决方案中，如 Active Directory，或任何兼容的**轻量级目录访问协议**（**LDAP**）。
- en: We learned how to deploy Docker Enterprise components and how to manage users,
    roles, and different levels of access to resources and images. They will be deployed
    with high availability using an odd number of software nodes and we will require
    an external load balancer to provide users' access. We can integrate our corporate
    certificates, but we can also use autogenerated ones. In this case, we will need
    to integrate DTR's CA in our organization server and client hosts.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们学习了如何部署 Docker Enterprise 组件，以及如何管理用户、角色以及不同级别的资源和镜像访问权限。它们将通过奇数数量的软件节点进行高可用部署，我们需要一个外部负载均衡器来提供用户的访问权限。我们可以集成公司的证书，但也可以使用自动生成的证书。在这种情况下，我们需要将
    DTR 的 CA 集成到我们的组织服务器和客户端主机中。
- en: Although Docker Swarm requires UCP to integrate user management, Kubernetes
    implements its own RBAC system. We will be allowed to authenticate and authorize
    users using tokens and certificates. Kubernetes RBAC will work for applications
    and users and it is integrated into Docker Enterprise.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然 Docker Swarm 需要 UCP 来集成用户管理，但 Kubernetes 实现了自己的 RBAC 系统。我们将能够使用令牌和证书进行身份验证和授权。Kubernetes
    RBAC 将适用于应用程序和用户，并与 Docker Enterprise 集成。
- en: Docker Swarm and Kubernetes provide secure storage for certificates, passwords,
    tokens, and so on. Both provide secret resources to manage any file (or variable)
    that should be protected from suspicious users. But while secrets are encrypted
    in Docker Swarm, they are not encrypted in Kubernetes by default. Secret resources
    are encoded using Base64 in Kubernetes, and additional configuration must be performed
    to encrypt them.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm 和 Kubernetes 提供了证书、密码、令牌等的安全存储。两者都提供了机密资源来管理任何需要保护的文件（或变量）。但是，虽然
    Docker Swarm 中的机密是加密的，Kubernetes 中的机密默认情况下并未加密。在 Kubernetes 中，机密资源是使用 Base64 编码的，并且必须进行额外配置才能加密它们。
- en: Kubernetes has advanced features regarding security, such as PodSecurityPolicy
    resources, which allow us to force security on pods, allowing or disallowing specific
    behaviors (root processes and read-only filesystems). Admission controllers can
    also be implemented (there are a few already configured by default in UCP's Kubernetes
    deployment) to force pod security policies and other security features by default
    to any workload deployed in our Kubernetes cluster.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 在安全性方面有先进的功能，如 PodSecurityPolicy 资源，它允许我们强制对 Pods 进行安全设置，允许或禁止特定行为（如根进程和只读文件系统）。也可以实施访问控制器（UCP
    的 Kubernetes 部署中已经预配置了一些）来强制执行 Pod 安全策略和其他安全功能，默认应用于我们 Kubernetes 集群中的任何工作负载。
- en: We will use RBAC for either UCP and DTR user accesses. First, we will ensure
    only authorized users will be able to manage and use cluster resources for their
    applications. DTR's RBAC will protect images, allowing only authorized users to
    manipulate and update their content.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用 RBAC 来管理 UCP 和 DTR 用户访问。首先，我们将确保只有授权的用户才能管理和使用集群资源以支持他们的应用程序。DTR 的 RBAC
    将保护镜像，只允许授权的用户操作和更新其内容。
- en: The next section will highlight the knowledge required to pass the exam.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分将重点介绍通过考试所需的知识。
- en: The knowledge of Docker security required for the exam
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考试所需的 Docker 安全知识
- en: 'The exam will verify our knowledge of the following topics, among others:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 考试将验证我们对以下主题的知识，此外还包括其他内容：
- en: Describing security administration and tasks
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述安全管理和任务
- en: Describing the process of signing an image
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述签名镜像的过程
- en: Describing default engine security
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述默认的引擎安全性
- en: Describing Swarm default security
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 Swarm 默认安全性
- en: Describing MTLS
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 MTLS
- en: Describing identity roles
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述身份角色
- en: Comparing and contrasting UCP workers and managers
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较和对比 UCP 的工作节点与管理节点
- en: Describing the process of using external certificates with UCP and DTR
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述使用外部证书与 UCP 和 DTR 集成的过程
- en: Describing and demonstrating how an image passes a security scan
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示镜像如何通过安全扫描
- en: Describing and demonstrating how to enable Docker Content Trust
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何启用 Docker 内容信任
- en: Describing and demonstrating how to configure RBAC with UCP
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何配置 UCP 中的 RBAC
- en: Describing and demonstrating how to integrate UCP with LDAP/AD
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何将 UCP 与 LDAP/AD 集成
- en: Describing and demonstrating how to create UCP client bundles
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何创建 UCP 客户端包
- en: These topics are extracted from Docker's official study guide, which can be
    found at [https://success.docker.com/certification](https://success.docker.com/certification).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容摘自 Docker 官方学习指南，网址为：[https://success.docker.com/certification](https://success.docker.com/certification)。
- en: Quickly summarizing Docker storage and volumes
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速总结 Docker 存储和卷
- en: Using Docker containers requires different storage solutions, as we have learned
    through this book. Images and containers are created using multiple-layer filesystem
    strategies. However, we also have to manage persistence in our container-based
    applications. This persistence can be associated with application data, but we
    also have to be able to manage configurations and states cluster-wide.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker 容器需要不同的存储解决方案，正如我们在本书中所学到的那样。镜像和容器是通过多层文件系统策略创建的。然而，我们还必须管理容器化应用的持久性。这种持久性可以与应用数据相关，但我们还必须能够管理集群范围内的配置和状态。
- en: We learned about security in [Chapter 1](c5ecd7bc-b7ed-4303-89a8-e487c6a220ed.xhtml),
    *Modern Infrastructures and Applications with Docker*, [Chapter 2](3952ec16-ca49-4bc2-b7e6-d6f17fec3fab.xhtml),
    *Building Docker Images*, [Chapter 4](e7804d8c-ed8c-4013-8449-b746ee654210.xhtml),
    *Container Persistency and Networking*, and [Chapter 13](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml),
    *Implementing an Enterprise-Grade Registry with DTR.*
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 1 章](c5ecd7bc-b7ed-4303-89a8-e487c6a220ed.xhtml)，*现代基础设施与 Docker 应用*，[第
    2 章](3952ec16-ca49-4bc2-b7e6-d6f17fec3fab.xhtml)，*构建 Docker 镜像*，[第 4 章](e7804d8c-ed8c-4013-8449-b746ee654210.xhtml)，*容器持久化与网络*，以及[第
    13 章](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml)，*使用 DTR 实现企业级注册表*中学习了有关安全性的话题。
- en: 'This is a quick summary of the topics looked at in this book regarding storage
    and volume management within containers. We recommend you read through this summary
    to ensure you remember the concepts learned:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书中关于容器内存储和卷管理的主题的快速总结。我们建议你通读这个总结，以确保记住学到的概念：
- en: We learned that containers are based on different filesystems and solutions
    with a common feature – copy-on-write. This allows us to create multiple immutable
    layers to group files. Each layer is the base for another, and file modifications
    will be stored in the last layer where they were changed. All immutable layers
    are considered as the image for the creation of new containers. We will add a
    new read-and-write layer for the container. These layers rely on host storage.
    This storage is known as graph storage and we will use different strategies to
    manage it, depending on the host operating system. Docker will choose the best
    driver for your host according to your kernel features and installed drivers.
    The most popular and most widely used today is `overlay2`, which is the default
    graph driver for many Linux distributions. `docker info` provides information
    about the driver used.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们了解到，容器是基于不同的文件系统和解决方案的，具有一个共同特征——写时复制（copy-on-write）。这使我们能够创建多个不可变层来组织文件。每个层都是另一个层的基础，文件的修改将存储在最后一个被更改的层中。所有不可变层都被视为创建新容器的镜像。我们将为容器添加一个新的读写层。这些层依赖于主机存储。这种存储被称为图形存储，我们将根据主机操作系统使用不同的策略来管理它。Docker
    会根据你的内核特性和安装的驱动程序选择最适合你主机的驱动程序。今天最流行且使用最广泛的驱动程序是 `overlay2`，它是许多 Linux 发行版的默认图形驱动程序。`docker
    info` 提供有关使用的驱动程序的信息。
- en: We have also learned that images are stored locally for fast usage on your host.
    When these images must be shared with cluster nodes, things get difficult, although
    we can export and import image layers. We will use image registries to store images
    and share their content with hosts and users. We learned how to deploy Docker
    Registry (Community Edition) as well as DTR, which is recommended for enterprise
    environments. We can use different storage solutions for registry volumes, depending
    on whether we are using cloud environments or on-premises installations. As reviewed
    in [Chapter 13](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml), *Implementing an
    Enterprise-Grade Registry with DTR*, object storage is quite good for storing
    images based on big layers, which is the most common way of creating images.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还了解到，镜像会在本地存储以便快速使用。当这些镜像必须与集群节点共享时，事情会变得复杂，尽管我们可以导出和导入镜像层。我们将使用镜像注册表来存储镜像并与主机和用户共享其内容。我们学习了如何部署
    Docker Registry（社区版）以及 DTR，后者在企业环境中被推荐使用。根据是否使用云环境或本地安装，我们可以为注册表卷使用不同的存储解决方案。正如我们在[第十三章](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml)，*使用
    DTR 实现企业级注册表*中回顾的那样，对基于大层的镜像存储来说，对象存储是非常好的解决方案，这也是创建镜像最常见的方式。
- en: Images can occupy a lot of space in your host. We should take care of this and
    review dead containers and unused images that are consuming space with `docker
    system df`. We should remove dangling images not used as a layer within any other
    images. We also have to take care of the space on our registries. Only keep required
    images, but remember to verify which containers or applications will use different
    old image versions. We learned how to filter this information in [Chapter 2](3952ec16-ca49-4bc2-b7e6-d6f17fec3fab.xhtml),
    *Building Docker Images*.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像可能会占用宿主机大量空间。我们应该注意这一点，并使用`docker system df`检查无用的容器和占用空间的镜像。我们应删除那些未被其他镜像作为层使用的悬空镜像。同时，我们还需要关注注册表中的空间。只保留必要的镜像，但记得验证哪些容器或应用程序会使用不同版本的旧镜像。我们在[第二章](3952ec16-ca49-4bc2-b7e6-d6f17fec3fab.xhtml)，*构建
    Docker 镜像*中学习了如何筛选这些信息。
- en: Volumes, on the other hand, are different from image and container storage.
    They are used to bypass container storage. These help us to improve performance
    when a lot of disk I/O is required, and also allow us to store persistent data.
    By default, we can use on-memory filesystems, a host's local directories (bind
    mounts), NFS, and Docker volumes for storage. Docker volumes are associated with
    a container's life cycle when they are created during their execution.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储卷与镜像和容器存储有所不同。它们用于绕过容器存储。这些存储帮助我们在需要大量磁盘 I/O 时提升性能，并且允许我们存储持久化数据。默认情况下，我们可以使用内存文件系统、主机的本地目录（绑定挂载）、NFS
    和 Docker 卷进行存储。Docker 卷在容器执行期间创建，并与容器的生命周期相关联。
- en: As mentioned, Docker provides some volume solutions by default. We can extend
    them using plugins and third-party integrations. Using distributed storage with
    Docker Swarm and UCP is critical if we need to provide high availability to our
    applications using resilience. If one cluster host dies, another will take its
    workloads by default, but storage must follow this behavior.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前所述，Docker 默认提供了一些存储卷解决方案。我们可以通过插件和第三方集成扩展这些方案。使用 Docker Swarm 和 UCP 的分布式存储在我们需要为应用程序提供高可用性和弹性时至关重要。如果某个集群主机发生故障，默认情况下，另一个主机会接管其工作负载，但存储必须与此行为保持一致。
- en: Kubernetes has a different approach to persistent data. We talked about volumes
    and persistent volumes (`persistentVolumes`). The former are used to share and
    manage data associated with pods' containers. On the other hand, persistent volumes
    are used to manage and persist data cluster-wide. There are different retention
    policies to manage their recycling cycles. Persistent volume claims (`persistentVolumeClaims`)
    are used to link pods with volumes using labels and required space among other
    parameters. Therefore, instead of using persistent volumes directly attached to
    pods, we will use `persistentVolumeClaims` inside pods' configurations as volumes.
    Administrators should create these resources, but they can avoid this behavior
    by using `storageClass` resources. They will just configure `storageClass` resources
    using labels, storage providers, and other advanced profiles to allow dynamic
    storage allocation for persistent volumes.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 对持久数据有不同的处理方式。我们讨论了卷和持久卷（`persistentVolumes`）。前者用于共享和管理与 Pod 容器相关的数据。另一方面，持久卷用于在集群范围内管理和持久化数据。存在不同的保留策略来管理它们的回收周期。持久卷声明（`persistentVolumeClaims`）用于通过标签和所需空间等参数将
    Pod 与卷关联起来。因此，我们将不直接将持久卷附加到 Pod 上，而是在 Pod 的配置中使用 `persistentVolumeClaims` 作为卷。管理员应创建这些资源，但可以通过使用
    `storageClass` 资源避免这种行为。他们只需通过使用标签、存储提供程序和其他高级配置来配置 `storageClass` 资源，从而允许对持久卷进行动态存储分配。
- en: We learned that Docker provides `Config` and `Secret` objects to allow us to
    manage information in cluster nodes. These help us to configure applications and
    ensure that applications' containers receive appropriate configurations, passwords,
    certificates, and so on. Kubernetes has its own configuration and secret resources.
    To manage configurations, we will use ConfigMaps for storing an application's
    configuration files and managing environment variables. Secret resources are used
    to store secured data, but they are not encrypted by default in Kubernetes. They
    are stored using the Base64 format and can be used for either storing keys and
    values or files.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们了解到 Docker 提供了 `Config` 和 `Secret` 对象来帮助我们管理集群节点中的信息。这些帮助我们配置应用程序，并确保应用程序的容器接收适当的配置、密码、证书等。Kubernetes
    有自己的配置和机密资源。为了管理配置，我们将使用 ConfigMaps 来存储应用程序的配置文件并管理环境变量。Secret 资源用于存储受保护的数据，但在
    Kubernetes 中默认并未加密。它们以 Base64 格式存储，并可用于存储密钥值对或文件。
- en: Storing data and states is quite important and is part of the exam. Let's review
    what concepts you are required to understand to pass the exam.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 存储数据和状态非常重要，并且是考试的一部分。让我们回顾一下你需要理解的概念，以便顺利通过考试。
- en: The storage and volume knowledge required for the exam
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考试所需的存储和卷知识。
- en: 'The exam will verify our knowledge of the following topics, among others:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 考试将验证我们对以下主题的知识，其他内容也包括在内：
- en: Identifying the correct graph drivers to use with various operating systems
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定与不同操作系统一起使用的正确图形驱动程序。
- en: Describing and demonstrating how to configure a device mapper
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何配置设备映射器。
- en: Comparing and contrasting object and block storage and when they should be used
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较并对比对象存储和块存储，并确定何时应使用它们。
- en: Describing how an application is composed of layers and where those layers reside
    on the filesystem
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述应用程序如何由多个层组成，以及这些层在文件系统中的存储位置。
- en: Describing the use of volumes with Docker for persistent storage
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述如何使用 Docker 中的卷进行持久化存储。
- en: Identifying the steps to take to clean up unused images on a filesystem and
    DTR
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定清理文件系统和 DTR 中未使用的镜像所需的步骤。
- en: Describing and demonstrating how storage can be used across cluster nodes
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述并演示如何在集群节点之间使用存储。
- en: Describing how to provision persistent storage to a Kubernetes pod using `persistentVolume`
    resources.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述如何使用 `persistentVolume` 资源为 Kubernetes Pod 配置持久存储。
- en: Describing the relationship between container storage interface drivers, `storageClass`,
    `persistentVolumeClaim`, and `volume` objects in Kubernetes.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 Kubernetes 中容器存储接口驱动程序、`storageClass`、`persistentVolumeClaim` 和 `volume`
    对象之间的关系。
- en: We will look at some final notes and sample exam questions to help us prepare
    for the DCA exam in the next chapter.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看一些最后的注意事项和示例考试题，以帮助我们准备 DCA 考试。
- en: Summary
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结。
- en: This chapter was a summary of the topics required to pass the exam. We reviewed
    the topic distribution and their approximate value in the exam. This should give
    you a good idea of what sections are more important than others. We recommend
    that you review this chapter before reading all the exam-like questions set out
    in the next chapter.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是通过考试所需主题的总结。我们回顾了各个主题的分布及其在考试中的大致分值。这应该能帮助你了解哪些部分比其他部分更为重要。我们建议你在阅读下一章中的所有模拟考试问题之前，先复习这一章。
- en: We covered a brief summary of orchestration's most important topics. We also
    reviewed some of the installation and configuration tips required for Docker Engine,
    Docker Swarm, and Enterprise components. We looked at a summary of the features
    and processes involved in the creation of images. Security is always critical
    and we looked at a summary of the features provided by different Docker components
    that help us to provide a CaaS platform in production. Container networking and
    the different storage implementations for containers and images and for data management
    were also reviewed. It is recommended that you review any chapters that were not
    clear in these summaries and review the labs provided in this book to reinforce
    your knowledge of all the exam topics.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们概述了编排中最重要的主题。我们还回顾了一些安装和配置Docker Engine、Docker Swarm和企业组件所需的技巧。我们总结了创建镜像过程中涉及的功能和流程。安全性始终是至关重要的，我们还回顾了不同Docker组件提供的功能，这些功能帮助我们在生产环境中提供CaaS平台。我们还回顾了容器网络和不同的容器存储实现，以及数据管理的相关内容。建议你复习这些总结中不清楚的章节，并通过本书中提供的实验来巩固你对所有考试主题的知识。
- en: The next chapter provides some exam-like questions that will prepare you for
    the exam.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章提供了一些模拟考试问题，帮助你为考试做好准备。
