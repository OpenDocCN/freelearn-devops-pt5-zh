- en: Chapter 4. Building Multicontainer Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章：构建多容器应用程序
- en: In the last few chapters, we built some cool stuff with Puppet and Docker. It
    has all been straight forward. Now, we are getting into the more complex topics
    such as how to keep a state and why to keep a state in a container. Docker is
    known to couple hand in hand with the micro service architecture, where the container
    would for the most part just be receiving data and transforming it into an output
    for a downstream application or data source to ingest. Thus, the container never
    keeps any state. Docker does not limit itself to such applications. In this chapter,
    we are going to prove this by building a fully functional Bitbucket server with
    a separate Postgres backend. We will mount the data that is stateful to the underlying
    host and decouple the applications from that state.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的几个章节中，我们用 Puppet 和 Docker 构建了一些很酷的东西，过程都很简单。现在，我们进入了更复杂的话题，例如如何保持状态以及为什么要在容器中保持状态。Docker
    与微服务架构紧密结合，容器通常只是接收数据并将其转换为输出，供下游应用或数据源使用。因此，容器本身并不保持任何状态。Docker 并不局限于这种应用场景。在本章中，我们将通过构建一个完全功能的
    Bitbucket 服务器并使用独立的 Postgres 后端来证明这一点。我们将把有状态的数据挂载到底层主机，并将应用程序与该状态解耦。
- en: The other good feature of building Bitbucket is that you can use it for your
    Git server at home to make sure that all your future modules are in source control.
    Atlasssian offers a $10 dollar license for start-ups or developers that allow
    up to 10 users, which is a bargain.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 Bitbucket 的另一个好处是，你可以将其用作你家里的 Git 服务器，以确保所有未来的模块都在源代码控制中。Atlassian 提供了一个
    $10 美元的许可，供初创公司或开发人员使用，最多支持 10 个用户，这是个超值的优惠。
- en: 'In this chapter, we will build applications using standard manifest resources
    and then Docker Compose. Before we jump into coding, let''s talk a little more
    about decoupling the state of an application from the actual application itself.
    The following are the topics that we will cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用标准的清单资源和 Docker Compose 来构建应用程序。在开始编写代码之前，我们先聊一下如何将应用程序的状态与应用程序本身解耦。以下是我们将在本章中讨论的主题：
- en: Decoupling a state
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解耦状态
- en: Docker_bitbucket (manifest resources)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker_bitbucket（清单资源）
- en: Docker_bitbucket (Docker Compose)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker_bitbucket（Docker Compose）
- en: Decoupling a state
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解耦状态
- en: In this topic, we are going to talk about state in containers. This topic will
    be all theory, but don't worry, we are going to put that theory to test when we
    write our module. We need to understand the theory behind state versus stateless
    so that in future, when writing your own Puppet modules to ship Docker, you can
    make the right design choice about states.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本主题我们将讨论容器中的状态。在这个话题中，我们将探讨一些理论内容，但不用担心，我们将在编写模块时将这些理论付诸实践。我们需要理解有状态与无状态的理论背景，这样在未来编写自己的
    Puppet 模块以部署 Docker 时，你可以做出关于状态的正确设计选择。
- en: State versus stateless
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有状态与无状态
- en: 'So, we briefly touched on the topic of state versus stateless in the preceding
    section, but now, let''s get into the nuts and bolts of it. So, let''s look at
    two example applications: one with state and one without. First, we will start
    with a redis container. Its job is to be the backend store for activemq. The application
    that uses the queue has logic to check whether the message has been received and
    expects a response. If that fails, it will retry to send the message. Thus, the
    queue itself is stateless. We are using redis as a cache. There is no need to
    give the redis container state, as the information it holds is ephemeral. If the
    container fails, we just respawn a new one and it will cache the queue again.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分中，我们简要讨论了有状态与无状态的话题，现在让我们深入探讨这一主题。我们来看两个示例应用程序：一个有状态，一个无状态。首先，我们从一个 redis
    容器开始。它的任务是作为 activemq 的后台存储。使用队列的应用程序包含逻辑，用于检查消息是否已被接收并期待回应。如果失败，它将重试发送该消息。因此，队列本身是无状态的。我们将
    redis 用作缓存。redis 容器不需要保持状态，因为它保存的信息是暂时的。如果容器发生故障，我们只需重启一个新容器，它将再次缓存队列。
- en: 'Now, let''s look at a container that needs state and the options we have to
    keep state. In the application, we are going to build two containers. One is Bitbucket
    itself, and then Postgres will be used as the backend database. So, both of these
    need state. Let''s look at Bitbucket first. If we don''t give states to the Bitbucket
    server, every time we restart the container, we would lose all the projects that
    we checked in via Git. That doesn''t sound like it would be a viable solution.
    Now, let''s look at the options that we have to give to the container''s state.
    First, we could add volume to our Dockerfile:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看看一个需要状态的容器，以及我们保持状态的选项。在这个应用程序中，我们将构建两个容器。一个是 Bitbucket 本身，另一个是用作后台数据库的
    Postgres。因此，这两个容器都需要状态。首先，我们来看 Bitbucket。如果我们不给 Bitbucket 服务器状态，每次重启容器时，所有通过 Git
    检入的项目都会丢失。显然，这不是一个可行的解决方案。现在，让我们看一下我们可以用来给容器赋予状态的选项。首先，我们可以在 Dockerfile 中添加卷：
- en: '![State versus stateless](img/B05201_04_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![有状态与无状态](img/B05201_04_01.jpg)'
- en: This will give the container state; we can reboot the application and all the
    data will be there, which is good. That is what we want. There is a downside to
    this method. Volume resides inside the container and is not decoupled from the
    application. So when we run into issues with this method, the main operational
    issue is when we need to update the version of the application in the container.
    As all our data lives in the container, we can't just pull the latest. So we are
    stuck with the available options. Now, let's look at how to map a folder from
    localhost to the container. We do this using `/data:/var/atlassian/application-data/bitbucket`.
    The left side of the colon is the localhost running the Docker daemon and the
    right side is the container.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将赋予容器状态；我们可以重启应用程序，所有数据都会保留，这很好。这正是我们想要的。但这种方法也有一个缺点。卷位于容器内部，未与应用程序解耦。因此，当我们遇到问题时，主要的操作问题是需要更新容器中应用程序的版本。由于所有数据都存储在容器内，我们不能直接拉取最新版本。因此，我们只能使用现有的选项。现在，让我们来看一下如何将本地文件夹映射到容器中。我们通过使用
    `/data:/var/atlassian/application-data/bitbucket` 来实现。冒号左侧是运行 Docker 守护进程的本地主机，右侧是容器。
- en: Docker uses fully qualified paths, so it will create the `/data` directory.
    Now, we have decoupled our application from our data. If we want to update the
    version of Bitbucket, all we would need to do is change the `image` tag in our
    Puppet code to the new version. Then, we would run Puppet. Once that is complete,
    the new version of Bitbucket will boot with our existing data. Now, there is a
    cost to using this method as well. We have now tied this container to the one
    host. If you are using schedulers such as Kubernetes or Docker Swarm, this probably
    isn't the best idea. This problem has been solved by the new volume driver added
    to the Docker engine 1.8 and above. This allows us to create storage objects that
    are external of the host on which the engine is running.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 使用完全限定路径，因此它将创建 `/data` 目录。现在，我们已经将应用程序与数据解耦。如果我们想更新 Bitbucket 的版本，我们只需要在
    Puppet 代码中将 `image` 标签更改为新版本，然后运行 Puppet。完成后，新的 Bitbucket 版本将与现有数据一起启动。使用这种方法也有一定的代价。我们现在已经将容器与一个主机绑定。如果你使用的是
    Kubernetes 或 Docker Swarm 等调度器，这可能不是最佳选择。这个问题已经被 Docker 引擎 1.8 及以上版本中新增的卷驱动程序解决了。该驱动程序允许我们创建存储对象，这些对象位于引擎运行的主机之外。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is out of the scope of this book, but if you would like to do some more
    reading about the technology, I would recommend that you visit [https://clusterhq.com/flocker/introduction/](https://clusterhq.com/flocker/introduction/).
    Now, we have a good understanding of state versus stateless containers. Let's
    start the fun bit and get coding!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这超出了本书的范围，但如果你想深入了解这项技术，我推荐你访问 [https://clusterhq.com/flocker/introduction/](https://clusterhq.com/flocker/introduction/)。现在，我们对有状态与无状态容器有了清晰的理解。让我们开始有趣的部分，开始编码吧！
- en: Docker_bitbucket (manifest resources)
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker_bitbucket（清单资源）
- en: In this topic, we are going to write our module that will install Atlassian's
    Bitbucket. The application will be comprised of two containers, among which one
    will be Postgres as we mentioned earlier. We are actually going to tweak the container
    to secure the backend and make it only accessible to Bitbucket. Then, we will
    run the Bitbucket container, configure the user it will run as, and then map the
    filesystem from the host machine to the container.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写一个模块，用于安装Atlassian的Bitbucket。该应用将由两个容器组成，其中一个将是我们前面提到的Postgres容器。我们实际上将调整该容器以增强后端安全性，使其仅对Bitbucket可访问。然后，我们将运行Bitbucket容器，配置它的运行用户，接着将主机系统的文件系统映射到容器中。
- en: Creating our module skeleton
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的模块骨架
- en: This is just going to be a quick refresher, as we covered this in the last chapter.
    If you are still not feeling comfortable with this step, I would recommend you
    to go over the last chapter again until you have a good grasp of the process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个快速的回顾，因为我们在上一章已经讲解过了。如果你仍然对这个步骤感到不太舒服，我建议你再回顾一下上一章，直到你对整个过程有一个很好的理解。
- en: So, we are going to open up our terminal and change directory or cd into the
    root of our Vagrant repo. Then, we will type `vagrant up`, and once the box is
    up, we will use SSH into it with `vagrant ssh`. The next step is to change to
    root (`sudo -i`). Now that we are root, let's change the directory to `/vagrant`,
    which maps back to our local machine. We are then going to issue the `puppet module
    generate <AUTHOR>-docker_bitbucket` command. Again, there are a few more tweaks
    that we need, but they are in the last chapter, so let's not repeat ourselves
    here. Once you have completed the outstanding task, you can move on to the next
    chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们将打开终端并切换目录，或者使用`cd`命令进入Vagrant仓库的根目录。然后，我们将输入`vagrant up`，当虚拟机启动后，我们使用`vagrant
    ssh`通过SSH连接到它。接下来的步骤是切换到root用户（`sudo -i`）。现在我们是root用户了，让我们切换到`/vagrant`目录，该目录会映射回我们的本地机器。接着，我们将执行`puppet
    module generate <AUTHOR>-docker_bitbucket`命令。再说一次，还有一些我们需要调整的内容，但它们在上一章中已经讲过了，因此这里就不重复了。当你完成了剩余的任务，你就可以继续进入下一章。
- en: Let's code
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们开始编码
- en: 'Now, we have our module skeleton and we have moved it into the `modules` directory
    in the root of our Vagrant environment. We need to add two new files: `install.pp`
    and `params.pp`. Our module should look like as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经有了模块骨架，并且将它移到了我们Vagrant环境根目录下的`modules`文件夹中。我们需要添加两个新文件：`install.pp`和`params.pp`。我们的模块应如以下截图所示：
- en: '![Let''s code](img/B05201_04_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![开始编码](img/B05201_04_02.jpg)'
- en: 'In this example, we have a few new things going on, so I have not used `params.pp`
    in this example. This gives you a perfect opportunity to use the knowledge that
    you gained in the last chapter and apply it. So, for now, we will leave `params.pp`
    empty. Seeing as we are not putting parameters in `init.pp`, let''s look at that
    first:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有一些新的内容，因此我在这个示例中没有使用`params.pp`。这给了你一个很好的机会，去应用上一章学到的知识。所以，现在我们将保持`params.pp`为空。既然我们没有在`init.pp`中放置参数，那我们先来看一下它：
- en: '![Let''s code](img/B05201_04_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![开始编码](img/B05201_04_03.jpg)'
- en: 'As you can see in the preceding screenshot, we are only calling the `docker_bitbucket::install`
    class. We can now move on to the chunky `install.pp` class. Again, we are going
    to brake this down into three parts. This will make it easier to explain the logic
    of the class. Let''s look at part one, which is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们只调用了`docker_bitbucket::install`类。现在我们可以继续处理较大的`install.pp`类。同样，我们将把它分为三部分，这样更容易解释该类的逻辑。我们来看第一部分，内容如下：
- en: '![Let''s code](img/B05201_04_04.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![开始编码](img/B05201_04_04.jpg)'
- en: 'In this top section of the class, we are installing the `device-mapper-libs`
    package. This is a prerequisite for the RHEL family and Docker. The next thing
    that we are declaring is the Docker class. In this resource, we are defining the
    version of Docker that we want to be installed, the TCP bind that Docker will
    use, and lastly, the Unix socket that Docker will bind to. This is the same configuration
    that we used to define our Docker daemon in the last chapter. This will stay fairly
    static until we move into Docker schedulers. Let''s now move to Postgres:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在该类的顶部部分，我们正在安装`device-mapper-libs`软件包。这是RHEL系列和Docker的先决条件。接下来我们声明的是Docker类。在这个资源中，我们定义了要安装的Docker版本、Docker将使用的TCP绑定地址，以及最后Docker将绑定的Unix套接字。这与我们在上一章中定义Docker守护进程时使用的配置相同。在进入Docker调度器之前，这部分内容会保持相对静态。现在我们继续讨论Postgres：
- en: '![Let''s code](img/B05201_04_05.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![开始编码](img/B05201_04_05.jpg)'
- en: First, we will define the image of Postgres that we would like to use. For this
    example, we are using Postgres 9.2\. So, the correct tag from Docker Hub is `postgres:9.2`.
    Now, let's look at the `docker::run` class; this is where all the configurations
    for Postgres will be defined. So, you can see that we are calling the image that
    we set in the preceding resource `postgres:9.2`. We will then set the hostname
    as `bitbucket-db`. This setting is important, so let's store it into our memory
    for later use.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将定义我们希望使用的Postgres镜像。对于本示例，我们使用的是Postgres 9.2。因此，从Docker Hub中正确的标签是`postgres:9.2`。现在，让我们来看一下`docker::run`类；这是定义Postgres所有配置的地方。所以，你可以看到我们调用的是在前面的资源中设置的镜像`postgres:9.2`。接着，我们将主机名设置为`bitbucket-db`。这个设置非常重要，所以我们将其记住以备后用。
- en: Let's look at the `env` resource declaration as we have a bit going on there.
    In this one line, we are declaring the Postgres user, the database password, the
    name of the database that we will connect with Bitbucket, and lastly the path
    where Postgres with store the database. Lastly, we are declaring our volumes as
    `/root/db:/var/lib/postgresql/data/pgdata`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`env`资源声明，因为那里有一些内容。在这一行中，我们声明了Postgres的用户、数据库密码、我们将与Bitbucket连接的数据库名称，以及最后Postgres存储数据库的路径。最后，我们声明了我们的卷为`/root/db:/var/lib/postgresql/data/pgdata`。
- en: 'As mentioned earlier, the left-hand side of the colon is mapping the the local
    machine and the right is mapping the container. There are two major call outs
    with our configuration. First, the `/root/db` folder is arbitrary and not what
    you would use in production. The second is that you will note that the left side
    of the colon, `/var/lib/postgresql/data/pgdata`, and the value in env, `PGDATA`,
    are the same. This is no coincidence; that folder holds the only state that we
    care about: the actual database. That is the only state that we will keep. Nothing
    more and nothing less. You will note that we have not exposed any ports from this
    container. This is by design. We are going to link our Bitbucket container to
    Postgres. What does link mean? It means that by default, the Postgres image exposes
    port 5432\. This is the port that we will use to connect to our database. By linking
    the containers, only the Bitbucket container has access to 5432; if we exposed
    the port (5432:5432), any other application that has access to the host instance
    could hit the port. Thus, linking is much more secure. So, we need to remember
    a few things from this section of code for later use: the hostname and the entire
    env line. For now, let''s move on to the Bitbucket container:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，冒号左边是映射到本地机器，右边是映射到容器。有两个主要的要点需要注意。首先，`/root/db`文件夹是任意的，在生产环境中不会使用。第二，你会注意到冒号左边的`/var/lib/postgresql/data/pgdata`文件夹和`env`中的值`PGDATA`是相同的。这并非巧合；这个文件夹保存了我们关心的唯一状态：实际的数据库。这是我们将保留的唯一状态，别无他物。你会注意到，我们没有暴露这个容器的任何端口。这样做是有意为之。我们将把我们的Bitbucket容器与Postgres容器链接起来。链接是什么意思？这意味着默认情况下，Postgres镜像会暴露端口5432。我们将使用这个端口来连接我们的数据库。通过链接容器，只有Bitbucket容器可以访问5432端口；如果我们暴露了端口（`5432:5432`），那么任何能够访问主机实例的应用都可以访问该端口。因此，链接要更安全。我们需要记住从这一部分代码中提取几个内容以备后用：主机名和整个`env`行。现在，我们继续看Bitbucket容器：
- en: '![Let''s code](img/B05201_04_06.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![让我们编码](img/B05201_04_06.jpg)'
- en: As you can see in the preceding screenshot, the image resources are the same,
    but instead of calling Postgres, we are going to call `atlassian/bitbucket-server`.
    The next resource we will declare is the ports resource. You will note that we
    are declaring two ports `7990:7990`, which will be the port that we hit the web
    UI on, and `7999:7999`, which is the port that Bitbucket uses for SSH. We will
    set the username to `root`. This is recommended in Atlassian's documentation ([https://hub.docker.com/r/atlassian/bitbucket-server/](https://hub.docker.com/r/atlassian/bitbucket-server/)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在前面的截图中看到的，镜像资源是相同的，但是我们不是调用Postgres，而是调用`atlassian/bitbucket-server`。接下来我们将声明的资源是端口资源。你会注意到我们声明了两个端口`7990:7990`，这是我们访问Web
    UI的端口，和`7999:7999`，这是Bitbucket用于SSH的端口。我们将用户名设置为`root`。这是Atlassian文档中推荐的做法（[https://hub.docker.com/r/atlassian/bitbucket-server/](https://hub.docker.com/r/atlassian/bitbucket-server/)）。
- en: Next, we are going to map our volume drive. In this case, we are only going
    to map Bitbucket's data directory. This is where all our Git repo, user information,
    and so on is kept. Again, `/data` is an arbitrary location; you could use any
    location you like. The important location to note is on the left-hand side of
    the colon, `/var/atlassian/application-data/bitbucket`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将映射我们的卷驱动器。在这种情况下，我们只会映射Bitbucket的数据目录。这里存储着所有我们的Git仓库、用户信息等。再次强调，`/data`是一个任意位置；你可以选择任何你喜欢的位置。需要注意的重要位置是在冒号左侧的`/var/atlassian/application-data/bitbucket`。
- en: Lastly, we link our two containers. Another benefit of linking containers is
    that the Docker daemon will write to both the containers' `/etc/hosts` files with
    their hostname and IP address. So, the containers have no issue talking to each
    other. There is no need to worry about the IP address, as it is arbitrary and
    is looked after by the Docker daemon. Now that we have written our module, we
    can build our application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将链接我们的两个容器。链接容器的另一个好处是，Docker守护进程会将它们的主机名和IP地址写入两个容器的`/etc/hosts`文件中。因此，容器之间可以毫无问题地互相通信。无需担心IP地址，因为它是任意的，并由Docker守护进程处理。现在，我们已经写好了模块，可以开始构建应用程序了。
- en: Running our module
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行我们的模块
- en: 'The first thing that we need to do is forward the correct ports on our `servers.yml`
    file that allow us to hit the ports we forwarded to Bitbucket. To do this, we
    need to modify the file so that it looks as shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是转发正确的端口到我们的`servers.yml`文件中，这样我们才能访问转发给Bitbucket的端口。为此，我们需要修改文件，使其看起来像下面的截图所示：
- en: '![Running our module](img/B05201_04_07.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块](img/B05201_04_07.jpg)'
- en: 'So, let''s open our terminal and change the directory to the root of our Vagrant
    repo and run `vagrant up`. You should get the following output after this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，打开我们的终端并将目录切换到Vagrant仓库的根目录，然后运行`vagrant up`。你应该会看到如下输出：
- en: '![Running our module](img/B05201_04_08.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块](img/B05201_04_08.jpg)'
- en: 'Now that our application is built, we can go to `http://127.0.0.1:7990`. We
    should get the following page:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序已经构建完成，我们可以访问`http://127.0.0.1:7990`。我们应该看到以下页面：
- en: '![Running our module](img/B05201_04_09.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块](img/B05201_04_09.jpg)'
- en: Earlier in the topic, we had remembered some details about our Postgres install.
    Now is the time to use them, so let's begin. The first thing that we need to do
    is use an external database. The next piece of configuration we need to choose
    is the database type. Of course, we are going to choose Postgres.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节之前，我们已经记住了关于我们的Postgres安装的一些细节。现在是时候使用它们了，接下来我们开始吧。我们需要做的第一件事是使用外部数据库。接下来我们需要选择的配置项是数据库类型。当然，我们将选择Postgres。
- en: 'The hostname will be set to the hostname of the `bitbucket-db` container, the
    port is `5432`, and the database name is `bitbucket`, as we set in our code. We
    will use PostgreSQL as the username and the password will be `Gr33nTe@`. Refer
    to the following screenshot to know more:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 主机名将设置为`bitbucket-db`容器的主机名，端口是`5432`，数据库名称是我们在代码中设置的`bitbucket`。我们将使用PostgreSQL作为用户名，密码将是`Gr33nTe@`。请参见以下截图以了解更多：
- en: '![Running our module](img/B05201_04_10.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块](img/B05201_04_10.jpg)'
- en: 'Next, click on the **Test** button, and we should get the **Successfully established
    database connection.** message, as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击**测试**按钮，我们应该会看到**成功建立数据库连接**的消息，如下图所示：
- en: '![Running our module](img/B05201_04_11.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块](img/B05201_04_11.jpg)'
- en: I will let you finish the rest of the setup. But what we just set up was not
    simple, and now, we have a very solid base to move on to more complex applications.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我会让你完成其余的设置。但我们刚刚设置的并不简单，现在我们已经有了一个非常坚实的基础，可以继续进行更复杂的应用程序开发。
- en: Docker_bitbucket (Docker Compose)
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker_bitbucket（Docker Compose）
- en: In this topic, we are going to build the same Bitbucket application. The difference
    this time is that we are going to use `docker-compose` as a `.erb` file instead
    of the resource declarations in a manifest.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将构建相同的Bitbucket应用程序。不同之处在于，这次我们将使用`docker-compose`作为`.erb`文件，而不是在清单中的资源声明。
- en: Let's code – take 2
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们编码——第二次
- en: 'We covered a lot of what happens under the hood in the last topic. We will
    not be repeating ourselves, so this topic will be just about the code. We are
    going to keep both `init.pp` and `params.pp` the same as we did in the last topic.
    So, let''s jump straight to `install.pp`. It will look very similar to `install.pp`
    from the last chapter:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个主题中，我们讲解了很多幕后发生的事情。本主题将不再重复之前的内容，因此本章内容将专注于代码。我们会保持`init.pp`和`params.pp`与上一个主题中的一致。所以，让我们直接跳到`install.pp`。它看起来将与上一章的`install.pp`非常相似：
- en: '![Let''s code – take 2](img/B05201_04_12.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![让我们编码 – 第2次](img/B05201_04_12.jpg)'
- en: 'All the magic happens in our template file. So, let''s jump to our `.erb` file
    that lives in the `templates` folder in the root of our module:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的“魔法”都发生在我们的模板文件中。所以，让我们跳到位于我们模块根目录`templates`文件夹中的`.erb`文件：
- en: '![Let''s code – take 2](img/B05201_04_13.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![让我们编码 – 第2次](img/B05201_04_13.jpg)'
- en: As you can see in our `.erb` file in the preceding screenshot, all the configurations
    are familiar. There are absolutely no changes to what we covered in our last topic.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的截图中看到的我们`.erb`文件，所有配置都很熟悉。与我们在上一个主题中讲解的内容完全相同，没有任何变化。
- en: Running our module – take 2
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行我们的模块 – 第2次
- en: 'Let''s open our terminal and change the directory to the root of our Vagrant
    repo and run `vagrant up`. You should get the following output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开终端，将目录切换到Vagrant仓库的根目录，并运行`vagrant up`。您应该会看到以下输出：
- en: '![Running our module – take 2](img/B05201_04_14.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块 – 第2次](img/B05201_04_14.jpg)'
- en: 'Now, let''s just go to `http://127.0.0.1:7990`, and we should get the following
    page:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们访问`http://127.0.0.1:7990`，应该会看到以下页面：
- en: '![Running our module – take 2](img/B05201_04_15.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![运行我们的模块 – 第2次](img/B05201_04_15.jpg)'
- en: Just follow the same setup as in the preceding topic to configure Bitbucket.
    You can use a trail license to try the application, or as I mentioned earlier,
    there is a development/startup license at [https://bitbucket.org/product/pricing?tab=server-pricing](https://bitbucket.org/product/pricing?tab=server-pricing)
    with the proceeds of the $10 license going to charity.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 只需按照前面主题中的相同设置来配置Bitbucket。您可以使用试用许可证来尝试该应用程序，或者正如我之前提到的，可以在[https://bitbucket.org/product/pricing?tab=server-pricing](https://bitbucket.org/product/pricing?tab=server-pricing)找到一个开发/启动许可证，$10的许可证费用将捐赠给慈善机构。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By building a multicontainer application, we learned and covered a lot. We first
    looked at state versus stateless containers, the pros and cons of having state,
    and what design choices we have to keep a state. We then looked at linked containers
    and how they communicate with each other through their hostfiles. All the topics
    in this chapter will set us up with the knowledge that we need to move forward
    with topics such as service discovery and container schedulers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过构建一个多容器应用程序，我们学到了很多内容。我们首先了解了有状态和无状态容器，拥有状态的优缺点，以及我们需要做出哪些设计选择来保持状态。接着，我们看了链接容器以及它们如何通过各自的主机文件进行相互通信。本章的所有内容都为我们提供了必要的知识，以便进一步探索服务发现和容器调度等主题。
