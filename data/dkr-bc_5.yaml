- en: Chapter 5. Docker Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：Docker插件
- en: 'During DockerCon Europe 2014, there was a round table discussion which took
    place on the state of the Docker ecosystem, the following problem and possible
    solution was identified:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在2014年DockerCon Europe大会期间，举行了一个圆桌讨论，讨论了Docker生态系统的现状，识别出了以下问题及可能的解决方案：
- en: The problem which Docker currently faces is that by moving to become a platform
    it is being seen to threaten its own ecosystem. The proposed solution is that
    Docker ships its own additions to Docker as late-bound, composable, optional extensions
    and enables other vendors to do likewise. Docker calls this "batteries included
    but removable".
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Docker目前面临的问题是，随着它转变为一个平台，它被认为威胁到了自己的生态系统。提议的解决方案是，Docker将自己的附加功能作为后期绑定的、可组合的、可选的扩展发布，并允许其他供应商也这样做。Docker称之为“内置电池但可拆卸”。
- en: During DockerCon 2015 in Seattle, Docker announced the availability of plugins
    in the experimental branch, the announcement came in the form of a blog post which
    can be found at [https://blog.docker.com/2015/06/extending-docker-with-plugins/](https://blog.docker.com/2015/06/extending-docker-with-plugins/).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在2015年DockerCon Seattle大会期间，Docker宣布在实验分支中提供插件功能，公告以博客文章的形式发布，可以在[https://blog.docker.com/2015/06/extending-docker-with-plugins/](https://blog.docker.com/2015/06/extending-docker-with-plugins/)找到。
- en: As you can see from the post, Docker provided a solution where third parties
    can swap out core functionality. Now a user could run the `docker volume` and
    `docker network` commands along with a driver option to have Docker call external
    components which add functionality outside of the core Docker Engine while maintaining
    a high level of compatibility.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从这篇文章中看到的，Docker提供了一个解决方案，第三方可以替换核心功能。现在，用户可以运行`docker volume`和`docker network`命令，并通过驱动程序选项让Docker调用外部组件，从而添加核心Docker引擎之外的功能，同时保持高度的兼容性。
- en: In this chapter, we are going to look at two different Docker plugins, the first
    is a volume plugin called **REX-Ray** and the second is a network plugin called
    **Weave**.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍两个不同的Docker插件，第一个是名为**REX-Ray**的卷插件，第二个是名为**Weave**的网络插件。
- en: REX-Ray volume plugin
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REX-Ray卷插件
- en: So far, we have been usingthe local storage which is available on our hosts,
    as mentioned in [Chapter 4](ch04.html "Chapter 4. Docker Swarm"), *Docker Swarm*
    that isn't very useful when you potentially have move the storage between multiple
    hosts either because you are hosting a cluster or because of problems with the
    host machine itself.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用本地主机上可用的本地存储，正如[第4章](ch04.html "第4章：Docker Swarm")中提到的，*Docker
    Swarm* 在你可能需要在多个主机之间移动存储时并不太有用，无论是因为你托管了一个集群，还是因为主机本身存在问题。
- en: In this example, we are going to be launching a Docker instance in Amazon Web
    Services, install a volume plugin called REX-Ray, written by EMC, and then launch
    our WordPress example but this time we will attach AmazonElastic Block Storage
    volumes to our containers. Once configured, we will move our containers to a second
    host machine to demonstrate that the data has persisted.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将启动一个在Amazon Web Services上的Docker实例，安装一个名为REX-Ray的卷插件，它由EMC编写，然后启动我们的WordPress示例，但这次我们将把Amazon
    Elastic Block Storage卷附加到我们的容器上。一旦配置完成，我们将把容器移动到第二台主机上，以展示数据的持久性。
- en: 'REX-Ray supports several storage types on both public clouds and EMC''s own
    range, as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: REX-Ray支持公共云和EMC自身系列的几种存储类型，具体如下：
- en: Amazon Elastic Block Store - [https://aws.amazon.com/ebs/](https://aws.amazon.com/ebs/)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Elastic Block Store - [https://aws.amazon.com/ebs/](https://aws.amazon.com/ebs/)
- en: Digital Ocean Block Storage - [https://www.digitalocean.com/products/storage](https://www.digitalocean.com/products/storage)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Digital Ocean块存储 - [https://www.digitalocean.com/products/storage](https://www.digitalocean.com/products/storage)
- en: OpenStack Cinder - [https://wiki.openstack.org/wiki/Cinder](https://wiki.openstack.org/wiki/Cinder)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack Cinder - [https://wiki.openstack.org/wiki/Cinder](https://wiki.openstack.org/wiki/Cinder)
- en: Google Compute Engine - [https://cloud.google.com/compute/docs/disks/](https://cloud.google.com/compute/docs/disks/)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google计算引擎 - [https://cloud.google.com/compute/docs/disks/](https://cloud.google.com/compute/docs/disks/)
- en: EMC Isilon, ScaleIO, VMAX, and XtremIO - [https://www.emc.com/](https://www.emc.com/)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMC Isilon，ScaleIO，VMAX和XtremIO - [https://www.emc.com/](https://www.emc.com/)
- en: The driver is in active development and more types of supported storage are
    frequently being added, also work is on-going to move the driver over to Dockers
    new plugin system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 该驱动程序正在积极开发中，并且支持的存储类型也在不断增加，同时也在进行工作，将该驱动程序迁移到Docker的新插件系统中。
- en: 'Before we look at installing REX-Ray we need a Docker host in Amazon Web Services,
    to launch one, use the following command. You can refer to the Amazon Web Services
    Driver section of [Chapter 2](ch02.html "Chapter 2. Launching Applications Using
    Docker"), *Launching Applications Using Docker*. for details on how to generate
    your access and secret key and find your VPC ID. Remember to replace the `access-key`,
    `secret-key` and `vpc-id` with your own:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 REX-Ray 之前，我们需要在 Amazon Web Services 中有一个 Docker 主机，要启动一个，请使用以下命令。你可以参考
    [第 2 章](ch02.html "第 2 章. 使用 Docker 启动应用程序") 中的 Amazon Web Services 驱动程序部分，*使用
    Docker 启动应用程序*，了解如何生成你的访问密钥和秘密密钥，并找到你的 VPC ID。记得将 `access-key`、`secret-key` 和
    `vpc-id` 替换为你自己的：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that you have your instance launched, you can see it in the AWS Console:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经启动了实例，可以在 AWS 控制台中看到它：
- en: '![REX-Ray volume plugin](img/B06455_05_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![REX-Ray 卷插件](img/B06455_05_01.jpg)'
- en: 'We need to install the REX-Ray plugin. As REX-Ray supports Docker''s new plugin
    format this means we need to run the `docker plugin` command. To start with, we
    need to configure our local Docker client to connect to our AWS host by running:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装 REX-Ray 插件。由于 REX-Ray 支持 Docker 的新插件格式，这意味着我们需要运行 `docker plugin` 命令。首先，我们需要配置本地
    Docker 客户端，通过运行以下命令来连接到 AWS 主机：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we are connected to install the plugin, we simply need to run the
    following command, the `EBS_ACCESSKEY` and `EBS_SECRETKEY` variables are the same
    we used for Docker Machine, replace them with your own:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经连接上来安装插件，只需要运行以下命令，`EBS_ACCESSKEY` 和 `EBS_SECRETKEY` 变量与我们在 Docker Machine
    中使用的相同，替换为你自己的密钥：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Before the plugin is installed, you will be asked to confirm that you are OK
    to grant permissions for the plugin to access various parts of your Docker installation,
    answer yes (y) to this when prompted and the plugin will be downloaded and installed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装插件之前，系统会要求你确认是否允许插件访问 Docker 安装的各个部分，提示时回答“是”（y），插件将被下载并安装。
- en: 'Now that the plugin is installed, we need to create two volumes, one which
    will hold our WordPress data and the second one will back store our MySQL databases.
    To create the volumes run the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 插件安装完成后，我们需要创建两个卷，一个用于存放 WordPress 数据，另一个用于存放 MySQL 数据库。要创建卷，运行以下命令：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can see the preceding commands being run in the following terminal:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下终端中看到前面提到的命令正在运行：
- en: '![REX-Ray volume plugin](img/B06455_05_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![REX-Ray 卷插件](img/B06455_05_02.jpg)'
- en: 'You should also be able to see your two volumes by clicking on **Volumes**
    in the left-hand side menu of the EC2 section of the AWS Console:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你也应该能够通过点击 AWS 控制台中 EC2 部分左侧菜单中的 **Volumes** 来查看你的两个卷：
- en: '![REX-Ray volume plugin](img/B06455_05_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![REX-Ray 卷插件](img/B06455_05_03.jpg)'
- en: Now we have our two volumes, we need to launch WordPress, to do this we will
    use the Docker Compose file which can be found in the repo at `/bootcamp/chapter05/wordpress-rexray/`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了两个卷，我们需要启动 WordPress，为此我们将使用可以在仓库中的 `/bootcamp/chapter05/wordpress-rexray/`
    找到的 Docker Compose 文件。
- en: 'As you can see from the `docker-compose.yml` file, we are building a WordPress
    image with `wp-cli` installed:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `docker-compose.yml` 文件中可以看出，我们正在构建一个安装了 `wp-cli` 的 WordPress 镜像：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can also see from the end of the file, we are telling Docker Compose
    to use the two external volumes we have already created with the `docker volume
    create` command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件的末尾你也可以看到，我们告诉 Docker Compose 使用我们已经通过 `docker volume create` 命令创建的两个外部卷。
- en: 'To build our WordPress image and launch the containers run the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建我们的 WordPress 镜像并启动容器，运行以下命令：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can check your containers up by running:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令检查你的容器是否正在运行：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that the two containers we make our WordPress application are up and running
    you can quickly install WordPress by running the following command (update the
    variables as needed):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的两个 WordPress 容器已经启动，你可以通过运行以下命令快速安装 WordPress（根据需要更新变量）：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once installed, you should see a message which says **Success: WordPress installed
    successfully**. This means that you can open your installation in a browser by
    running:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你应该看到一条消息，表示 **成功：WordPress 安装成功**。这意味着你可以通过运行以下命令在浏览器中打开安装页面：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This should present you with the now familiar WordPress site:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会显示你现在熟悉的 WordPress 网站：
- en: '![REX-Ray volume plugin](img/B06455_05_05.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![REX-Ray 卷插件](img/B06455_05_05.jpg)'
- en: 'Now let''s make a change to our WordPress installation so we can be sure that
    when we move our application between hosts everything works as expected. We are
    going to be replacing the image of the plant with fireworks. To do this we need
    to customize our theme, to get to the theme edit page run the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们对WordPress安装进行一些更改，以确保当我们在主机之间迁移应用程序时，一切正常工作。我们将用烟花替换植物的图片。为了做到这一点，我们需要自定义我们的主题，要进入主题编辑页面，请运行以下命令：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You will be prompted to login using the admin username and password which if
    you followed the installation will be `admin` / `adminpassword` or if you entered
    your own then use them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会提示你使用管理员用户名和密码登录，如果你按照安装步骤操作，用户名和密码应该是`admin` / `adminpassword`，如果你输入了自己的用户名和密码，请使用它们。
- en: Once you have the page open click on Header Media in the left-hand menu. Scroll
    down to where it says **Add new image** in the left-hand menu and follow the on-screen
    prompts to upload, crop and set the new header image, you can find an image called
    `fireworks.jpg` in the repo or use your own image. Once you have finished click
    on **Save & Publish**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 打开页面后，点击左侧菜单中的“Header Media”（头部媒体）。向下滚动，找到左侧菜单中显示的**Add new image**（添加新图片），按照屏幕上的提示上传、裁剪并设置新的头图，你可以在代码库中找到一张名为`fireworks.jpg`的图片，或者使用你自己的图片。完成后，点击**Save
    & Publish**（保存并发布）。
- en: 'Going back to your sites home page should then show your new header image:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到你的网站主页，应该可以看到你新的头图：
- en: '![REX-Ray volume plugin](img/B06455_05_07.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![REX-Ray volume plugin](img/B06455_05_07.jpg)'
- en: 'Before we remove our Docker host we need to make a note of it''s IP address,
    to do this run the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在移除Docker主机之前，我们需要记下它的IP地址，方法是运行以下命令：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And write down the IP address as we are going to need it, in my case the IP
    address was `54.173.130.142`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 记下IP地址，因为我们稍后会用到，在我的例子中，IP地址是`54.173.130.142`。
- en: 'Now let''s remove our host using the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过以下命令移除我们的主机：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once the host has been removed our two volumes are shown as **available** within
    the AWS console:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 主机移除后，我们的两个卷在AWS控制台中会显示为**可用**：
- en: '![REX-Ray volume plugin](img/B06455_05_09.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![REX-Ray volume plugin](img/B06455_05_09.jpg)'
- en: 'That is our WordPress and database data, to access it on a new Docker host
    we need to first launch one. To do this run the following command again remembering
    to replace the credentials and vpc id with your own:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的WordPress和数据库数据，要在新的Docker主机上访问它，我们需要首先启动一个主机。为此，请再次运行以下命令，记得将凭证和VPC ID替换为你自己的：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once the new Docker host is up and running the following command to switch
    our local client over and install REX-Ray:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦新的Docker主机启动并运行，运行以下命令切换我们的本地客户端并安装REX-Ray：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once REX-Ray is installed, we need to make it aware of our two existing volumes,
    to do this simply run the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦REX-Ray安装完成，我们需要让它识别我们现有的两个卷，方法是简单地运行以下命令：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Do not worry, it will not overwrite our existing volumes, it will just make
    Docker aware that they are there as REX-Ray uses the name you assign to volume
    rather than a unique ID if it comes across a volume with the name you have told
    it to use it will assume that is the volume you meant to use, so be careful when
    naming your volumes as they will be attached to the running container.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心，它不会覆盖我们现有的卷，它只会让Docker知道它们的存在，因为REX-Ray使用的是你分配给卷的名称，而不是唯一ID。如果它遇到一个已有名称的卷，它会认为这就是你要使用的卷，所以在命名卷时要小心，因为它们会被附加到运行中的容器上。
- en: 'You may notice that the commands execute a lot quicker this time, this is because
    the volumes are already there and do not need re-creating.Running:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到这次命令执行得更快了，这是因为卷已经存在，不需要重新创建。运行：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: should show our two volumes are there as before.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 应该显示我们的两个卷仍然存在，和之前一样。
- en: 'Now we need to launch WordPress, to do that just run:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要启动WordPress，方法是运行以下命令：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you were to try and access your WordPress site now, you would see a very
    broken looking site with content, but no styling or images.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在尝试访问你的WordPress网站，你会看到一个非常破损的网站，虽然有内容，但没有样式或图片。
- en: 'This is because the database is still referencing the IP address of the Docker
    host we terminated, to the database. Run the following the command making sure
    to replace the IP address in the command to that of your previous Docker host
    (remember mine was `54.173.130.142`):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为数据库仍然引用我们已终止的Docker主机的IP地址，指向数据库。运行以下命令时，请确保将命令中的IP地址替换为你之前Docker主机的IP地址（记住我的IP地址是`54.173.130.142`）：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You should see a list of every table within the database along with confirmation
    of how many instances of the IP address it has replaced with that of the new Docker
    host.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到数据库中每个表的列表，并确认它已替换为新Docker主机的IP地址的实例数量。
- en: 'Going to your new WordPress installation by running:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令访问你的新WordPress安装：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Should show your cover image is intact and the WordPress installation is exactly
    how you left it, apart from the change in IP address.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 应该显示你的封面图像完好无损，并且WordPress安装和你离开时一样，除了IP地址的变化。
- en: 'When you have finished test you can remove your installation by running the
    following commands:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 测试完成后，你可以通过运行以下命令来移除你的安装：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: You may notice that when you run the `docker volume rm` commands you are not
    prompted to confirm your actions, so be careful.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，当你运行`docker volume rm`命令时，并没有提示你确认操作，所以要小心。
- en: Checking your AWS console should confirm that your Docker host has been terminated
    and your two volumes have been removed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的AWS控制台，应该能确认你的Docker主机已经终止，并且你的两个卷已经被删除。
- en: WeaveNetwork Plugin
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Weave网络插件
- en: Weave are one of the original Docker plugins, in-fact they were involved in
    the round table discussions around Dockers plugin functionality, and Weave was
    included in the original plugin announcement mentioned at the start of this chapter.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Weave是最初的Docker插件之一，实际上，他们曾参与关于Docker插件功能的圆桌讨论，而Weave也包含在本章开头提到的原始插件公告中。
- en: 'Weave describe their network plugin as:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Weave将他们的网络插件描述为：
- en: Quickly, easily, and securely network and cluster containers across any environment
    (on premises, in the cloud, or hybrid) with zero code or configuration.
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 快速、简单、安全地在任何环境中（本地、云端或混合环境）对容器进行网络连接和集群管理，零代码或配置。
- en: Anyone who worked with software defined networks will know that this is quite
    a bold claim, especially a Weave is creating a mesh network.For a full explanation
    of what that means, I would recommend reading through Weaves own overview which
    can be found at [https://www.weave.works/docs/net/latest/how-it-works/](https://www.weave.works/docs/net/latest/how-it-works/).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 任何曾经与软件定义网络（SDN）工作过的人都知道，这是一个相当大胆的声明，特别是Weave正在创建一个网状网络。要全面了解这意味着什么，我推荐阅读Weave自己的概述，可以在[https://www.weave.works/docs/net/latest/how-it-works/](https://www.weave.works/docs/net/latest/how-it-works/)找到。
- en: Rather than going into any more detail. let's roll our sleeves up and perform
    an installation. To start with, let's bring up two independent Docker hosts DigitalOcean
    using Docker Machine.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 不再详细讨论，让我们动手进行安装。首先，使用Docker Machine在DigitalOcean上启动两个独立的Docker主机。
- en: To make it interesting, we will launch one host in New York Cityand the other
    in London. As these are going to be acting as individual hosts there is no need
    to configure Docker Swarm – which is what you would typically need to for multi-host
    networking with Docker.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加趣味性，我们将在纽约市启动一个主机，在伦敦启动另一个主机。由于这两个主机将作为独立主机使用，因此不需要配置Docker Swarm——这通常是多主机网络配置Docker时所需要的。
- en: 'To launch the Docker host in New York City run:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动纽约市的Docker主机，运行：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And then for the Docker host in London run:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在伦敦的Docker主机上运行：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now that we have our two Digital Ocean hosts we need to get Weave up and running.At
    the time of writing, Weave has not completed the transition to Dockers native
    plugin architecture and it is due very soon, so we will be using a control script
    to configure Weave.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了两个DigitalOcean主机，我们需要让Weave运行起来。在撰写本文时，Weave还没有完成过渡到Docker原生插件架构，预计很快就会完成，因此我们将使用控制脚本来配置Weave。
- en: 'First, we need to download the control scripton our NYC Docker host:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在纽约市的Docker主机上下载控制脚本：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once downloaded we can launch Weave using the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，我们可以使用以下命令启动Weave：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will download and launch several containers on the Docker host, once downloaded
    the Weave will be configured and the password set meaning that if you want to
    add a host to network you will need to provide a valid password.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载并启动多个Docker主机上的容器，下载完成后，Weave将被配置，密码也会设置好，这意味着如果你想将主机添加到网络中，你需要提供一个有效的密码。
- en: If you do not define a password then anyone will be able to connect to your
    Weave network, which is fine if you know that your host machines are running on
    an isolated closed network, however as we are sending traffic over the public
    internet we have set a password.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有定义密码，那么任何人都可以连接到你的Weave网络。如果你知道你的主机是在一个隔离的封闭网络中运行，那么这样做没问题。然而，由于我们是在公网上发送流量，因此我们设置了一个密码。
- en: 'You can check the containers by running:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来检查容器：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now that we have the three containers we need launched, it is time to install
    Weave on our London Docker host and then connect it to our NYC Docker host. To
    do the installation run the following commands:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了所需的三个容器，是时候在伦敦Docker主机上安装Weave，并将其连接到我们的NYC Docker主机了。执行以下命令来完成安装：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once the three containers have launched, simply run the following command to
    connect to our NYC Docker host:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 三个容器启动后，只需运行以下命令连接到我们的NYC Docker主机：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once our second host has been configured you can check the status of the Weave
    mesh network by running:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的第二个主机配置完成，你可以通过运行以下命令来检查Weave网状网络的状态：
- en: '[PRE27]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![WeaveNetwork Plugin](img/B06455_05_15.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![WeaveNetwork Plugin](img/B06455_05_15.jpg)'
- en: As you can see from the preceding terminal above, we have five services running,
    and other than providing a password, we didn't have to configure any of them.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从上面的终端输出中看到的，我们有五个服务正在运行，除了提供密码外，我们没有配置任何服务。
- en: As I am running a Mac OS machine, I am also going to install Weave locally,
    the same instructions will also work on a Linux machine.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我正在运行Mac OS系统，我还将本地安装Weave，相同的指令也适用于Linux系统。
- en: 'The following commands will install the Weave control script which will be
    used to launch the containers within your Docker for Mac installation and connect
    to our Weave mesh network:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将安装Weave控制脚本，该脚本用于在你的Docker for Mac安装中启动容器，并连接到我们的Weave网状网络：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once installed and connected, running `weave status` locally should show you
    that there are now 3 peers with 6 established connections:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装并连接，运行`weave status`本地命令应该显示现在有3个对等节点和6个已建立的连接：
- en: '![WeaveNetwork Plugin](img/B06455_05_16.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![WeaveNetwork Plugin](img/B06455_05_16.jpg)'
- en: 'So now we have three Docker hosts:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了三个Docker主机：
- en: One in NYC hosted by Digital Ocean
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个位于纽约，由Digital Ocean托管
- en: One in London hosted by Digital Ocean
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个位于伦敦，由Digital Ocean托管
- en: Our local Docker host running on Docker for Mac (or Linux)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的本地Docker主机运行在Docker for Mac（或Linux）上
- en: 'All with a network called **weave** using the `weavemesh` driver. You can confirm
    this by running:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些操作都使用名为**weave**的网络，且使用`weavemesh`驱动。你可以通过运行以下命令来确认这一点：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You should see something similar to the following terminal output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下终端输出的内容：
- en: '![WeaveNetwork Plugin](img/B06455_05_17.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![WeaveNetwork Plugin](img/B06455_05_17.jpg)'
- en: Now we are ready to start launching containers into our Weave network and demonstrate
    that they can communicate with each other.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好开始将容器启动到我们的Weave网络中，并展示它们如何彼此通信。
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Netcat is a service which allows you to be read and write to a network using
    TCP or UDP.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Netcat是一个允许你通过TCP或UDP在网络上进行读写的服务。
- en: 'Let''s start by launching a container in NYC running Netcat(nc). Each time
    a request is sent to port 4242 `nc` will answer with `Hello from NYC!!!`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在纽约启动一个运行Netcat(nc)的容器开始。每次请求发送到4242端口时，`nc`都会回应`Hello from NYC!!!`：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As you can see from the Docker command, we are passing quite a few different
    options, we are telling the container which network to use, as well configuring
    the DNS resolver within the container and setting a hostname of `nyc.weav` `e.local`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从Docker命令中看到的，我们传递了相当多的不同选项，我们告诉容器使用哪个网络，并且配置了容器内的DNS解析器，并设置了主机名为`nyc.weav`
    `e.local`。
- en: '![WeaveNetwork Plugin](img/B06455_05_18.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![WeaveNetwork Plugin](img/B06455_05_18.jpg)'
- en: 'Now that we have our NYC container up and running, the first thing to do is
    to check if we can ping from our London Docker host, to do this run the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了NYC容器，首先要做的是检查我们是否能从伦敦Docker主机ping通，执行以下命令来完成此操作：
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will send three pings to `nyc.weave.local`, all of which should be answered:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向`nyc.weave.local`发送三个ping请求，所有请求应当得到回应：
- en: '![WeaveNetwork Plugin](img/B06455_05_19.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![WeaveNetwork Plugin](img/B06455_05_19.jpg)'
- en: 'Now that have confirmed that we can Ping the NYC container, we need to connect
    to port `4242` and check if we get the response we expect:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已确认可以ping通NYC容器，我们需要连接到`4242`端口，并检查是否得到预期的回应：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You should receive the message **Hello from** **NYC!!!**:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该收到信息**Hello from** **NYC!!!**：
- en: '![WeaveNetwork Plugin](img/B06455_05_20.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![WeaveNetwork Plugin](img/B06455_05_20.jpg)'
- en: 'Now let''s launch a container on our local Docker host using the following
    command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用以下命令在本地Docker主机上启动一个容器：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![WeaveNetwork Plugin](img/B06455_05_21.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![WeaveNetwork Plugin](img/B06455_05_21.jpg)'
- en: 'As before, we will do a simple ping test to our local container:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如之前所示，我们将对本地容器进行简单的ping测试：
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'As expected, we receive a response:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，我们收到了回应：
- en: '![WeaveNetwork Plugin](img/B06455_05_22.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![WeaveNetwork Plugin](img/B06455_05_22.jpg)'
- en: 'It''s a little slow to start with, but it eventually gets better. Now that
    we know we can ping our local container lets connect to port `4242` and check
    the response. First, from our NYC Docker host:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 刚开始时有点慢，但最终会变得更好。现在我们知道可以 ping 我们的本地容器，接下来连接到端口 `4242` 并检查响应。首先，从我们的纽约 Docker
    主机：
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then from our London Docker host:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从我们的伦敦 Docker 主机：
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'As you can see from the following terminal output we got the answer we expected
    to receive:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下终端输出所示，我们得到了预期的结果：
- en: '![WeaveNetwork Plugin](img/B06455_05_23.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![WeaveNetwork 插件](img/B06455_05_23.jpg)'
- en: 'To tidy up your local Docker host run the following commands:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要整理你的本地 Docker 主机，请运行以下命令：
- en: '[PRE37]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'And then to terminate our two Digital Ocean hosts run:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要终止我们的两个 Digital Ocean 主机，请运行：
- en: '[PRE38]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: While these tests haven't been as visually interesting as the walkthrough of
    the REX-Ray Volume plugin, as you have seen, Weave is an incredibly powerful software-defined
    network, which is very easy to configure.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些测试在视觉上没有像 REX-Ray Volume 插件的演示那么引人注目，但正如你所看到的，Weave 是一个非常强大的软件定义网络，非常容易配置。
- en: Speaking fromexperience, this is a difficult combination to pull off, as most
    SDN solutions are incredibly complex to install, configure, and maintain.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 根据经验，这种组合是很难实现的，因为大多数 SDN 解决方案在安装、配置和维护上都非常复杂。
- en: We have only touched on what is possible with Weave. For a full feature list,
    along with instructions on some most of the advanced use cases, refer to [http://docs.weave.works/weave/latest_release/features.html](http://docs.weave.works/weave/latest_release/features.html).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仅仅触及了 Weave 的一些可能性。有关完整的功能列表以及一些高级用例的说明，请参考[http://docs.weave.works/weave/latest_release/features.html](http://docs.weave.works/weave/latest_release/features.html)。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Hopefully you are now starting to see use cases for different types of plugins.For
    example, a developer is fine working with local volumes, however for production
    traffic you would want to have some sort of either shared or block storage which
    is accessible to containers across multiple Docker hosts.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你现在开始看到不同类型插件的使用场景。例如，一个开发者可以在本地卷上工作，但对于生产流量，你可能希望有某种共享存储或块存储，使得多个 Docker
    主机上的容器都能访问。
- en: With plugins, this is possible without any real changes to your user's workflow
    as you know exactly how Docker handles volumes created with the `docker volume
    create` command.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用插件，在不对用户工作流进行任何实质性更改的情况下，这一点是可能的，因为你清楚 Docker 如何处理通过 `docker volume create`
    命令创建的卷。
- en: As already mentioned, Docker are in the process of transitioning legacy plugins
    to a new architecture, a list of legacy plugins can be found at the following
    URL [https://docs.docker.com/engine/extend/legacy_plugins/](https://docs.docker.com/engine/extend/legacy_plugins/)
    and new plugins which use the new architecture a can be found at [https://store.docker.com/search?q=&type=plugin](https://store.docker.com/search?q=&type=plugin).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker 正在将遗留插件过渡到新的架构，遗留插件的列表可以在以下网址找到：[https://docs.docker.com/engine/extend/legacy_plugins/](https://docs.docker.com/engine/extend/legacy_plugins/)，而使用新架构的插件可以在[https://store.docker.com/search?q=&type=plugin](https://store.docker.com/search?q=&type=plugin)找到。
- en: In the next chapter, we are going to look at how to monitor your containers,
    and what to do if anything goes wrong.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何监控你的容器，以及如果出现问题该怎么办。
