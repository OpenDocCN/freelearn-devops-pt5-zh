- en: Continuous Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous effort - not strength or intelligence - is the key to unlocking our
    potential
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 持续的努力——不是力量或智力——是解锁我们潜力的关键
- en: '- Winston Churchill'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '- 温斯顿·丘吉尔'
- en: 'In this chapter, we will cover how to install the continuous integration server
    Jenkins and perform various tasks related to compilation, unit test execution,
    code analysis, and creating a package file. We will also cover continuous integration
    using Microsoft stack. The goal here is to gain as much information as you can
    about the continuous integration as it is a base for the rest of the automation.
    Here is the gist of topics that we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何安装持续集成服务器Jenkins，并执行与编译、单元测试执行、代码分析和创建包文件相关的各种任务。我们还将讨论使用微软技术栈进行的持续集成。目标是尽可能多地了解持续集成，因为它是其他自动化的基础。以下是我们将涉及的主题要点：
- en: Installing Jenkins 2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Jenkins 2
- en: Configuring Maven-based JEE web application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置基于Maven的JEE Web应用程序
- en: Integrating Jenkins and SonarQube
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成Jenkins和SonarQube
- en: Executing command-line operations from Jenkins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Jenkins执行命令行操作
- en: Continuous integration using VSTS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用VSTS进行持续集成
- en: Let's start with making ourselves aware about Jenkins—continuous integration
    server or automation server nowadays after Jenkins 2.0\.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们了解一下Jenkins——现在的持续集成服务器或自动化服务器，尤其是在Jenkins 2.0之后。
- en: Installing Jenkins 2
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Jenkins 2
- en: 'Here are a few steps that we can follow to install Jenkins :'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们可以遵循的一些安装Jenkins的步骤：
- en: Install Java Development Kit 8 and set `JAVA_HOME` as the environment variable.
    In the Command Prompt or Terminal, verify that Java is installed properly or not
    by executing the `java –version`, `javac`, and `java` commands. Download `jenkins.war`
    from the Jenkins website.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Java开发工具包8，并将`JAVA_HOME`设置为环境变量。在命令提示符或终端中，执行`java –version`、`javac`和`java`命令，以验证Java是否正确安装。
    从Jenkins官网下载安装`jenkins.war`文件。
- en: To run Jenkins, execute `java –jar jenkins.war`. Wait until Jenkins is fully
    up and running.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行Jenkins，执行`java –jar jenkins.war`。 等待Jenkins完全启动并运行。
- en: Once Jenkins is fully up and running, open the browser and visit `http://<localhost/IP_ADDRESS>:8080`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins完全启动并运行后，打开浏览器并访问`http://<localhost/IP_ADDRESS>:8080`。
- en: We need to unlock Jenkins first to go ahead with the configuration. Copy the
    password from the given file location or copy it from the console/terminal from
    where we executed the Java command.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要首先解锁Jenkins，才能继续进行配置。从给定的文件位置复制密码，或者从我们执行Java命令的控制台/终端中复制密码。
- en: Enter the Administrator password and click on Continue.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入管理员密码并点击继续。
- en: Install the suggested plugins or select plugins to install.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装推荐的插件或选择要安装的插件。
- en: If we are behind the firewall, then it will ask for Proxy Settings so we can
    download the required plugins. If we are familiar with Jenkins, then we can skip
    the plugins installation completely and install them later on when we require
    them. It will make this configuration fast. Behind the proxy, we might face an
    issue while downloading some of the plugins. In such a case, it is better to identify
    these plugins and use Select plugins to Install option to avoid endless waiting
    or configuration failure.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们处于防火墙后面，它将要求我们设置代理设置，以便下载所需的插件。如果我们熟悉Jenkins，可以完全跳过插件安装，并在需要时稍后安装它们。这会使配置过程更快。如果在代理后面，我们在下载某些插件时可能会遇到问题。在这种情况下，最好先识别这些插件，并使用“选择插件安装”选项，以避免无休止的等待或配置失败。
- en: Once we finish the plugins installation process or skip it, we need to create
    our first admin user. After Jenkins 2, plugin installation and security configuration
    are part of the initial setup and that is a step forward towards a matured tool.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成插件安装过程后，或跳过该过程后，我们需要创建第一个管理员用户。Jenkins 2之后，插件安装和安全配置成为初始设置的一部分，这使得工具更加成熟。
- en: Provide the required user details and click on Save and Finish. Now, Jenkins
    is ready and the Jenkins set up is complete. We can start using Jenkins. This
    is the time where we meet the Jenkins dashboard for the first time.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供所需的用户详细信息并点击保存并完成。现在，Jenkins已经准备就绪，Jenkins的设置也已完成。我们可以开始使用Jenkins了。这时，我们将首次遇到Jenkins仪表板。
- en: We can manage Jenkins-related configurations such as tools configurations, security
    configurations, creating build jobs, managing plugins, and managing agents.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以管理与Jenkins相关的配置，如工具配置、安全配置、创建构建任务、管理插件和管理代理。
- en: 'The following screenshot represents the Jenkins dashboard:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了Jenkins仪表板：
- en: '![](img/00229.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00229.jpeg)'
- en: We will use the Java/JEE sample application in our automation objective. First
    of all, we need to inform Jenkins where our installable files are as they are required
    to execute certain tasks. As the Maven build tool is used in this application,
    we need a Maven installable folder too. Download Apache Maven. Go to Manage Jenkins
    in the Jenkins dashboard and click on Global Tool Configuration. Click on Add
    JDK. We have JDK installed already, so we can give the path of `JAVA_HOME` and
    our Java is configured properly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在自动化目标中使用 Java/JEE 示例应用程序。首先，我们需要告诉 Jenkins 安装文件的位置，因为这些文件是执行某些任务所必需的。由于该应用程序使用
    Maven 构建工具，我们还需要一个 Maven 安装文件夹。下载 Apache Maven。进入 Jenkins 仪表板中的“管理 Jenkins”，点击“全局工具配置”。点击“添加
    JDK”。我们已经安装了 JDK，因此可以提供 `JAVA_HOME` 的路径，我们的 Java 配置也已经完成。
- en: Global Tool Configuration in Jenkins
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 中的全局工具配置
- en: In this section, we will configure various tools that we need to utilize at
    the time of creating a build job, for example, Java, Ant, Maven, and so on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置在创建构建作业时需要使用的各种工具，例如 Java、Ant、Maven 等。
- en: '![](img/00230.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00230.jpeg)'
- en: We can install this also from the Jenkins dashboard. What if we have two different
    applications where one needs to be compiled with JDK 1.7 and the other with JDK
    1.8? We can add multiple JDK and while creating a Build Job, we can specify which
    JDK we want to utilize for that build job execution.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以从 Jenkins 仪表板中安装这些工具。如果我们有两个不同的应用程序，其中一个需要使用 JDK 1.7 编译，另一个需要使用 JDK 1.8
    编译怎么办？我们可以添加多个 JDK，并在创建构建作业时指定要为该构建作业执行所使用的 JDK。
- en: 'Once Java is configured, our next task is to configure Maven:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完 Java 后，我们的下一个任务是配置 Maven：
- en: '![](img/00231.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00231.jpeg)'
- en: Now that we have configured different tools in Jenkins, we will create a new
    job or item using the Jenkins dashboard, so we can configure continuous integration
    for JEE-based applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经在 Jenkins 中配置了不同的工具，接下来我们将在 Jenkins 仪表板中创建一个新作业或项目，以便为基于 JEE 的应用程序配置持续集成。
- en: Creating and configuring Maven-based JEE web applications
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和配置基于 Maven 的 JEE Web 应用程序
- en: In this section, we will create a Maven-based Jenkins build job that will execute
    the `pom.xml` file for compilation, ubit test execution, and creating a package
    file. So let's begin!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个基于 Maven 的 Jenkins 构建作业，该作业将执行 `pom.xml` 文件的编译、单元测试执行并创建包文件。让我们开始吧！
- en: 'On the Jenkins dashboard, click on New Item:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jenkins 仪表板上点击“新建项目”：
- en: '![](img/00232.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00232.jpeg)'
- en: 'As it is a Maven-based project, we will select the Maven project template.
    In case it is an Ant-based application or any other automation task, then we can
    select the Freestyle project template to create Build Job. Select Maven project
    and click on OK. It will open the build job configuration page, as shown in the
    following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个基于 Maven 的项目，我们将选择“Maven 项目”模板。如果是基于 Ant 的应用程序或其他自动化任务，则可以选择“自由风格项目”模板来创建构建作业。选择
    Maven 项目并点击“确定”。这将打开构建作业配置页面，如下图所示：
- en: '![](img/00233.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00233.jpeg)'
- en: 'In Source Code Management, provide a GitHub URL, SVN URL (install the subversion
    plugin first), or any repository URL. We can also access the code available on
    the filesystem:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码管理中，提供 GitHub URL、SVN URL（首先安装 Subversion 插件）或任何仓库 URL。我们还可以访问文件系统中的代码：
- en: '![](img/00234.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00234.jpeg)'
- en: 'In the Build section, select the Maven Version that we have configured in the Global
    Tool Configuration section. Provide the Maven goal to be executed on `pom.xml`.
    For more details on Maven goals, go to the Apache Maven website. The package goal
    will compile the source code, execute the unit test case, and create a package
    or war file in the context of Java:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建部分，选择我们在“全局工具配置”部分配置的 Maven 版本。提供要在 `pom.xml` 上执行的 Maven 目标。有关 Maven 目标的更多详细信息，请访问
    Apache Maven 网站。`package` 目标将编译源代码，执行单元测试，并在 Java 环境中创建包或 war 文件：
- en: '![](img/00235.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00235.jpeg)'
- en: Click on Apply and Save on the job configuration page. Click on the Build Now
    link on the dashboard. Verify the Build History on the same page. The first build
    will be in progress.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在作业配置页面点击“应用”并保存。点击仪表板上的“立即构建”链接。验证同一页面上的构建历史。第一次构建将会开始。
- en: Click on the progress bar to go to the console output directly on the Jenkins
    dashboard.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 点击进度条，直接跳转到 Jenkins 仪表板上的控制台输出。
- en: It will start fetching the code from the repository and put it into the local
    workspace. If it fetches the code successfully, then on a Project dashboard or
    on a Build dashboard, check workspace.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它将开始从代码库中获取代码并将其放入本地工作空间。如果成功获取代码，则可以在项目或构建仪表板上检查工作空间。
- en: 'Wait until the package goal of Maven is executed in Jenkins. It will compile
    all source files, execute unit test cases written in JUnit, and create a WAR file
    that needs to be deployed in the web server such as Tomcat or JBoss:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 等待 Maven 包目标在 Jenkins 中执行。它将编译所有源文件，执行用 JUnit 编写的单元测试用例，并生成需要在 Web 服务器（如 Tomcat
    或 JBoss）上部署的 WAR 文件：
- en: '![](img/00236.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00236.jpeg)'
- en: Once the build is successful, our first target is achieved and that is continuous
    integration. If it fails due to Maven downloads, then check Maven-related settings.
    If Jenkins is installed behind the proxy, then give proxy details in Apache Maven’s
    config file, so it can access the Maven repository and download the required files.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建成功，我们的第一个目标就达成了，那就是持续集成。如果由于 Maven 下载问题失败，则检查 Maven 相关设置。如果 Jenkins 安装在代理后面，则在
    Apache Maven 的配置文件中提供代理详细信息，这样它就可以访问 Maven 仓库并下载所需的文件。
- en: Unit test case results in Jenkins
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 中的单元测试用例结果
- en: 'To check the unit test execution, go to the Project and verify the build that
    has been executed successfully. Click on Test Result (no failures):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查单元测试的执行情况，进入项目并验证已成功执行的构建。点击测试结果（无失败）：
- en: '![](img/00237.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00237.jpeg)'
- en: 'It will give a list of Test Result based on packages. To get more details,
    go to specific packages and verify the results:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它会根据包的情况给出测试结果列表。要获取更多详细信息，转到具体的包并验证结果：
- en: '![](img/00238.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00238.jpeg)'
- en: Master agent architecture in Jenkins
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 中的主代理架构
- en: Let’s consider a scenario where we have specific tools, which are on a different
    server and these tools are part of an important phase of application life cycle
    management.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个场景，我们需要的特定工具位于另一台服务器上，而这些工具是应用生命周期管理中重要阶段的一部分。
- en: In that case, we can use our Jenkins server as a master and the server with
    specific tools as the agent. In this way, master Jenkins can access resources
    available on other servers to execute specific operations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以将 Jenkins 服务器作为主节点，将具有特定工具的服务器作为代理。这样，主 Jenkins 就可以访问其他服务器上的资源来执行特定操作。
- en: 'Go to Manage Jenkins and click on Manage Nodes. We can see the master node
    available on which our Jenkins is installed. To add a new node that might have
    a different operating system and tool set, we need to click on New Node:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 转到“管理 Jenkins”，然后点击“管理节点”。我们可以看到安装了 Jenkins 的主节点。要添加一个新的节点（可能有不同的操作系统和工具集），我们需要点击“新建节点”：
- en: '![](img/00240.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00240.jpeg)'
- en: 'Give a node name and select it as a Permanent Agent. Click on OK. Enter Name,
    Labels, and Remote root directory. Remote root directory is the directory where
    all details of execution on the agent will be stored. It is similar to the JENKINS_HOME’s
    workspace directory on the agent node:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输入节点名称，并选择其为“永久代理”。点击“确定”。输入名称、标签和远程根目录。远程根目录是存储代理上执行所有详细信息的目录。它类似于代理节点上 JENKINS_HOME
    的工作空间目录：
- en: '![](img/00241.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00241.jpeg)'
- en: 'Click on Save; go to Security Configuration and Enable Slave Agent Port – TCP
    port for JNLP agents (keep it as random and not the disable state):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“保存”；然后转到安全配置并启用从属代理端口——JNLP 代理的 TCP 端口（保持为随机端口，而非禁用状态）：
- en: '![](img/00242.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00242.jpeg)'
- en: 'Go to the Agent configuration in Master Jenkins. Copy the command to Run from
    agent command line:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 转到主 Jenkins 中的代理配置。复制从代理命令行运行的命令：
- en: '![](img/00243.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00243.jpeg)'
- en: 'Download the `slave.jar` as well on the agent machine and execute the command
    as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在代理机器上下载 `slave.jar` 文件，并按以下截图中的命令执行：
- en: '![](img/00244.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00244.jpeg)'
- en: 'Once the agent is connected in the console, verify the same in master Jenkins
    as well:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代理在控制台连接成功，也请在主 Jenkins 中验证该连接：
- en: '![](img/00245.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00245.jpeg)'
- en: Once we have the agent connected to the master, we can assign build jobs to
    be assigned to that agent for execution. Before executing build jobs on the agent,
    we need to make sure that all tools that are needed for execution are configured
    in master Jenkins as well so that master can use these installable for execution.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将代理连接到主节点后，就可以将构建任务分配给该代理执行。在执行构建任务之前，我们需要确保所有执行所需的工具也在主 Jenkins 中进行了配置，以便主节点能够使用这些可安装工具进行执行。
- en: 'In the job configuration, we can select the Restrict where this project can
    be run checkbox and provide Label Expression for agent:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务配置中，我们可以选择勾选“限制此项目可运行的位置”复选框，并为代理提供标签表达式：
- en: '![](img/00246.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00246.jpeg)'
- en: 'In the agent Node page, we can provide Tool Locations:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在代理节点页面中，我们可以提供工具位置：
- en: '![](img/00247.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00247.jpeg)'
- en: We can use such agents for static code analysis or test execution where different
    tools can be installed on agents and then agents are assigned to execute a job.
    Let's cover SonarQube in the next section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这些代理进行静态代码分析或测试执行，在这些代理上可以安装不同的工具，然后将代理分配给执行任务。接下来我们将介绍 SonarQube。
- en: Integrating Jenkins and SonarQube
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成 Jenkins 和 SonarQube
- en: So, first let's see how to configure SonarQube with Jenkins so that we can perform
    static code analysis by triggering it from Jenkins.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何将 SonarQube 配置到 Jenkins 中，这样我们就可以通过触发 Jenkins 来执行静态代码分析。
- en: Go to Manage Jenkins, click on Manage Plugins, and then click on the Available
    tab. Find the SonarQube plugin and install it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 转到管理 Jenkins，点击管理插件，然后点击可用选项卡。找到 SonarQube 插件并安装它。
- en: 'Go to Manage Jenkins, and then click on Configure System. Find the SonarQube
    servers section and click on the Add SonarQube server. Provide Server URL and
    credentials. Get a Server authentication token from SonarQube (`Administration`
    | `Security` | `Users`) and provide it in Jenkins:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 转到管理 Jenkins，然后点击配置系统。找到 SonarQube 服务器部分，点击添加 SonarQube 服务器。提供服务器 URL 和凭据。从
    SonarQube 获取服务器身份验证令牌（`管理` | `安全` | `用户`），并在 Jenkins 中提供该令牌：
- en: '![](img/00248.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00248.jpeg)'
- en: 'Go to Global Tool Configuration in Manage Jenkins and configure the SonarQube
    Scanner to install automatically:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 转到管理 Jenkins 中的全局工具配置，并配置 SonarQube 扫描器自动安装：
- en: '![](img/00249.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00249.jpeg)'
- en: Create a new freestyle job in Jenkins. Configure JDK path of agent where SonarQube
    is installed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jenkins 中创建一个新的自由风格任务。配置 SonarQube 安装的代理的 JDK 路径。
- en: Install the `Quality gate` plugin as well. By configuring the `Quality gate`
    plugin, we can fail the Jenkins build job if SonarQube analysis fails.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要安装 `质量门` 插件。通过配置 `质量门` 插件，我们可以在 SonarQube 分析失败时使 Jenkins 构建任务失败。
- en: 'Configure the repository URL of the project. Go to Job configuration and in
    the Build step add Execute SonarQube Scanner. Select JDK and enter the path to
    `sonar-project.properties` or provide Analysis properties:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 配置项目的仓库 URL。转到任务配置，在构建步骤中添加执行 SonarQube 扫描器。选择 JDK，并输入 `sonar-project.properties`
    的路径或提供分析属性：
- en: '![](img/00250.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00250.jpeg)'
- en: In Post-build Actions, select Quality Gates.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建后操作中，选择质量门。
- en: 'Enter the Project Key that we have given in analysis properties or `sonar-project.properties`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输入我们在分析属性或 `sonar-project.properties` 中提供的项目密钥：
- en: '![](img/00251.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00251.jpeg)'
- en: Click on Build now and verify the results of build execution in Jenkins.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 点击立即构建并验证 Jenkins 中构建执行的结果。
- en: 'Go to the SonarQube server, and verify code analysis available in the Dashboard:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 SonarQube 服务器，验证仪表板中是否有代码分析：
- en: '![](img/00253.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00253.jpeg)'
- en: This is how we can integrate SonarQube in Jenkins. Let's see how we can send
    e-mail notifications from Jenkins.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何将 SonarQube 集成到 Jenkins 中的方式。接下来，让我们看看如何从 Jenkins 发送电子邮件通知。
- en: E-mail notifications in Jenkins
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 中的电子邮件通知
- en: 'Let''s see how to configure e-mail notifications to send the status of job
    executions to specific stakeholders. Go to Manage Jenkins, click on Configure
    System, and configure the e-mail settings as shown in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何配置电子邮件通知，将任务执行的状态发送给特定的利益相关者。转到管理 Jenkins，点击配置系统，并配置电子邮件设置，如下图所示：
- en: '![](img/00254.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00254.jpeg)'
- en: 'In the Post-build Actions, select E-mail Notification and configure Recipients.
    Save it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建后操作中，选择电子邮件通知并配置收件人。保存设置：
- en: '![](img/00256.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00256.jpeg)'
- en: We can send a notification if it is an unstable build and we can send an e-mail
    to the individual who has broken the build.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建不稳定，我们可以发送通知，并向破坏构建的个人发送电子邮件。
- en: In the next section, we will see how continuous integration can be performed
    using **Visual Studio Team Services** (**VSTS**).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将看到如何使用 **Visual Studio Team Services** (**VSTS**) 进行持续集成。
- en: Continuous integration using Visual Studio Team Services
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 **Visual Studio Team Services** 进行持续集成
- en: We often say DevOps has nothing to do with the tools. All tools perform the
    same operation with some minor variations or flexibility. We will see how continuous
    integration can be performed using VSTS.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们常说 DevOps 和工具无关。所有工具执行相同的操作，只是有些细微的差异或灵活性。我们将看到如何使用 VSTS 进行持续集成。
- en: Create an Account in VSTS and create one Project with the name `PetClinic`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在VSTS中创建一个账户，并创建一个名为`PetClinic`的项目。
- en: Eclipse and VSTS integration
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse与VSTS集成
- en: In this section, we will see how to integrate Eclipse and VSTS so we can commit
    the code from the local system to VSTS.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何将Eclipse与VSTS集成，以便我们可以从本地系统将代码提交到VSTS。
- en: Download Eclipse, open it, and click on the Help menu. Select Install New Software.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Eclipse，打开它，然后点击“Help”菜单。选择“Install New Software”。
- en: Add a site to install the TFS plugin in Eclipse so we can commit code to VSTS
    from the Eclipse directly.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中添加一个站点以安装TFS插件，这样我们就可以直接从Eclipse提交代码到VSTS。
- en: 'Select Team Explorer Everywhere and click on Next:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“Team Explorer Everywhere”，然后点击“Next”：
- en: '![](img/00257.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00257.jpeg)'
- en: Review Install Details and click on Next.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 审核安装详细信息并点击“Next”。
- en: Review Licenses and Accept Terms and click on Finish.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 审核许可协议并接受条款，点击“Finish”。
- en: Wait until the installation is complete and restart the Eclipse.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 等待安装完成后重新启动Eclipse。
- en: In Eclipse, go to Window | Perspective | Open Perspective | Other... | Select
    Team Foundation Server Exploring.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中，转到Window | Perspective | Open Perspective | Other... | 选择Team Foundation
    Server Exploring。
- en: 'Click on Connect to Team Services or a Team Foundation Server. We will connect
    with team services:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“Connect to Team Services or a Team Foundation Server”。我们将连接到团队服务：
- en: '![](img/00258.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00258.jpeg)'
- en: 'Click on Add... in the Team Foundation Server list. Provide the URL of our
    VSTS account:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Team Foundation Server”列表中点击“Add...”并提供我们VSTS账户的URL：
- en: '![](img/00259.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00259.jpeg)'
- en: It will try to connect to the VSTS account and ask for credentials.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 它将尝试连接到VSTS账户并请求凭证。
- en: Once the connection is successful, we can connect to the server from Eclipse.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接成功，我们就可以从Eclipse连接到服务器。
- en: 'Click on Next:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“Next”：
- en: '![](img/00260.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00260.jpeg)'
- en: Select a Team Project from the list.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中选择一个团队项目。
- en: 'Click on Finish:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“Finish”。
- en: '![](img/00261.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00261.jpeg)'
- en: Go to the VSTS account in the browser and verify the existing data in the Project
    folder.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 进入浏览器中的VSTS账户并验证项目文件夹中的现有数据。
- en: 'Verify the Team Explorer perspective in Eclipse. Now it is connected, so we
    can perform operations:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中验证Team Explorer视图。现在它已连接，我们可以进行操作：
- en: '![](img/00258.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00258.jpeg)'
- en: Before any other action, import a PetClinic code into Eclipse.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何其他操作之前，将PetClinic代码导入到Eclipse中。
- en: Right-click on the Project and click on Team.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击项目并选择“Team”。
- en: Select `Share Project`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`Share Project`。
- en: Select Team Foundation Server in the Select a repository type plugin dialog
    box.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Select a repository type plugin”对话框中选择Team Foundation Server。
- en: 'Click on Next:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“Next”：
- en: '![](img/00262.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00262.jpeg)'
- en: 'Select the team project that we created initially in the VSTS in the Team Project
    Selection dialog box:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Team Project Selection”对话框中选择我们最初在VSTS中创建的团队项目：
- en: '![](img/00263.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00263.jpeg)'
- en: 'Select a server location to share the project:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个服务器位置以共享项目：
- en: '![](img/00264.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00264.jpeg)'
- en: Review the share configuration and click on Finish.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 审核共享配置并点击“Finish”。
- en: 'Once done, go to the Team Explorer perspective and click on Check In after
    providing a comment:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，转到Team Explorer视图，并在提供评论后点击Check In：
- en: '![](img/00265.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00265.jpeg)'
- en: Confirm Check In.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 确认Check In。
- en: Verify Check In in Eclipse, where the icons of the nearby files will be changed
    to denote that the files are not changed since the last check in process.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中验证Check In，附近文件的图标将会变化，以表示文件自上次Check In以来没有更改。
- en: 'Verify all the files in VSTS:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 验证VSTS中的所有文件：
- en: '![](img/00267.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00267.jpeg)'
- en: Once we have the code available in the VSTS code section, we can easily configure
    continuous integration in VSTS.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在VSTS的代码部分中拥有代码，就可以轻松配置VSTS中的持续集成。
- en: Continuous integration in VSTS
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VSTS中的持续集成
- en: 'Essentially, we will follow the process where developers can share code in
    the repository using IDE. VSTS will trigger a build definition execution and it
    will perform compilation of source files, unit test execution, and other tasks
    based on configuration and create a package file:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，我们将按照开发者可以通过IDE在代码库中共享代码的流程进行操作。VSTS会触发构建定义的执行，并根据配置进行源文件编译、单元测试执行等任务，生成一个包文件：
- en: '![](img/00268.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00268.jpeg)'
- en: In VSTS, we need to create the build definition for continuous integration.
    Go to the VSTS account in the browser.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在VSTS中，我们需要为持续集成创建构建定义。请在浏览器中进入VSTS账户。
- en: 'Click on the PetClinic project:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 点击PetClinic项目：
- en: '![](img/00270.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00270.jpeg)'
- en: 'Click on the Build & Release menu in the top bar and select Builds:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 点击顶部菜单栏中的“Build & Release”，然后选择“Builds”：
- en: '![](img/00271.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00271.jpeg)'
- en: 'There is no build definition available as of now. Create a  + New Definition:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 目前没有可用的构建定义。创建一个+新建定义：
- en: '![](img/00272.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00272.jpeg)'
- en: 'We have Maven-based projects, so we will select the Maven build definition
    template:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有基于Maven的项目，因此我们将选择Maven构建定义模板：
- en: '![](img/00273.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00273.jpeg)'
- en: 'Select a Repository source:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个仓库源：
- en: '![](img/00274.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00274.jpeg)'
- en: 'Check Continuous Integration (build whenever this repository is updated). Click
    on Create:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选“持续集成（每当此仓库更新时构建）”。点击“创建”：
- en: '![](img/00275.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00275.jpeg)'
- en: It will open the build definition in Edit mode.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 它将以编辑模式打开构建定义。
- en: 'In the Maven build step, verify the location of the `pom.xml` file:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在Maven构建步骤中，验证`pom.xml`文件的位置：
- en: '![](img/00276.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00276.jpeg)'
- en: 'Click on the Triggers section and verify Continuous integration (CI):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“触发器”部分，验证持续集成（CI）：
- en: '![](img/00277.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00277.jpeg)'
- en: 'Click on the Save button and give an appropriate name to the build definition:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“保存”按钮并为构建定义命名：
- en: '![](img/00278.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00278.jpeg)'
- en: 'Click on Queue new build... to execute the build definition:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“排队新构建...”来执行构建定义：
- en: '![](img/00279.jpeg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00279.jpeg)'
- en: 'It will wait for the available agent to execute the build definition:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 它将等待可用的代理来执行构建定义：
- en: '![](img/00281.jpeg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00281.jpeg)'
- en: 'Wait until the build execution is completed successfully:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 等待构建执行成功完成：
- en: '![](img/00282.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00282.jpeg)'
- en: 'Go to the Builds section and verify the build results:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 转到“构建”部分，验证构建结果：
- en: '![](img/00283.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00283.jpeg)'
- en: 'Verify the Summary of the build definition execution. It is executed on the
    hosted agent. All the required runtime is available on the hosted agent:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 验证构建定义执行的摘要。它在托管代理上执行。所有必需的运行时环境都在托管代理上可用：
- en: '![](img/00284.jpeg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00284.jpeg)'
- en: 'Verify the history of the build definition execution to find out the result
    of unit test execution:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 验证构建定义执行历史记录，以查看单元测试执行的结果：
- en: '![](img/00285.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00285.jpeg)'
- en: 'Go to the Test Plans section in VSTS and click on Recent test runs to find
    out more details on unit test execution:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 转到VSTS中的测试计划部分，点击“最近的测试运行”以查看单元测试执行的更多细节：
- en: '![](img/00286.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00286.jpeg)'
- en: Now we are done.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了。
- en: We have used VSTS to achieve continuous integration for our sample spring-based
    Java web application.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用VSTS实现了一个基于Spring的Java Web应用程序的持续集成。
- en: Most of the things in Jenkins and VSTS are the same in terms of the way we perform
    automation. Hence, understanding of one tool always helps to do the same with any
    other tools and it proves our belief that it is not about tools. It is about people,
    processes, mindsets, and tools.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jenkins和VSTS中，自动化执行的方式大致相同。因此，理解其中一种工具总是有助于使用任何其他工具完成相同的任务，这证明了我们对“这不在于工具”的信念。它关乎于人、流程、心态和工具。
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'There is a famous quote by Marcel Proust that says:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 有一句来自**马塞尔·普鲁斯特**的著名名言：
- en: The real voyage of discovery consists not in seeking new landscapes, but in
    having new eyes.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 发现的真正旅行不在于寻找新的风景，而在于拥有新的眼光。
- en: We will change the way application packages are created. We may need to go through
    the same kind of procedures to create a package or a WAR file or an APK file or
    an IPA file. Hence, we are not seeking new landscape. However, we need to find
    an efficient way to finish the process effectively and hence we need to look for
    having new eyes.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改变应用程序包的创建方式。我们可能需要通过相同的过程来创建一个包、WAR文件、APK文件或IPA文件。因此，我们并不是在寻找新的风景。然而，我们需要找到一种高效的方式来有效地完成这个过程，因此我们需要寻找拥有新的眼光。
- en: In this chapter, we have described in detail how we can perform continuous integration
    using Jenkins and Visual Studio Team Services. We have seen results of the unit
    test execution and how packages are created in Jenkins and Visual Studio Team
    Services.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细描述了如何使用Jenkins和Visual Studio Team Services进行持续集成。我们查看了单元测试执行的结果，以及在Jenkins和Visual
    Studio Team Services中如何创建包。
- en: The most important thing we know is that we need to consider implementation
    of continuous integration as a DevOps practice doesn't require specific tools.
    We can use any tool for automation and achieve the same objective. It is about
    the culture or patterns in the organization and not the tools.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所知道的最重要的事情是，实施持续集成作为一种DevOps实践并不依赖于特定的工具。我们可以使用任何工具来实现自动化，并达到相同的目标。关键在于组织中的文化或模式，而不是工具。
- en: Once we have the package ready, we need to prepare or keep ready an environment
    for deployment. We will see how to prepare an environment using Docker containers
    in the next chapter.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们准备好软件包，我们需要为部署准备或保持一个环境。在下一章中，我们将看到如何使用 Docker 容器来准备环境。
