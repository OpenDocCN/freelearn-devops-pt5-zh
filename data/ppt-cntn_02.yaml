- en: Chapter 2. Working with Docker Hub
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：与Docker Hub的工作
- en: In this chapter, we will look at Docker Hub, what it is, how to sign up for
    an account, how to pull an image, how to push an image, and automated image builds.
    This will give us a good solid foundation for future topics when we need to work
    with official images.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解Docker Hub，它是什么，如何注册账号，如何拉取镜像，如何推送镜像，以及自动化镜像构建。这将为我们在需要与官方镜像打交道时打下一个良好的基础。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is Docker Hub?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Docker Hub？
- en: Automated builds
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化构建
- en: Working with official images
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用官方镜像
- en: Working with Docker Hub
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker Hub
- en: In this section, we will discuss Docker Hub, what it is used for, what features
    does it provide, and lastly, how is it different from other repository sites,
    such as GitHub or Puppet Forge. We will then create an account and explore our
    account settings. After this, we will look at official images to get a solid foundation
    for the next topic.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论Docker Hub，它的用途是什么，提供了哪些功能，最后它与其他仓库网站（如GitHub或Puppet Forge）有何不同。接下来，我们将创建一个账号并探索我们的账户设置。之后，我们将查看官方镜像，为下一个主题打下坚实的基础。
- en: An overview of Docker Hub
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Hub概述
- en: In the last chapter, we looked at the Puppet's repo service, The Forge as it
    is called by the community ([https://forge.puppetlabs.com/](https://forge.puppetlabs.com/)).
    Now, let's look at Docker's repo service, Docker Hub. We can find Docker Hub at
    [https://hub.docker.com/](https://hub.docker.com/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看了Puppet的仓库服务，也就是社区称之为The Forge（[https://forge.puppetlabs.com/](https://forge.puppetlabs.com/)）。现在，让我们来看一下Docker的仓库服务——Docker
    Hub。我们可以在[https://hub.docker.com/](https://hub.docker.com/)找到Docker Hub。
- en: 'The following screenshot shows what the screen looks like:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了屏幕的样子：
- en: '![An overview of Docker Hub](img/B05201_02_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Hub概述](img/B05201_02_01.jpg)'
- en: 'In Docker Hub, there are two type of images:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker Hub中，有两种类型的镜像：
- en: Official images
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方镜像
- en: Images authored by developers
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者创建的镜像
- en: First, we will talk about official images. On Docker Hub, you can get official
    images for just about any major operating system or application. So, the benefit
    for you as a developer is that the work to install the application is done for
    you, saving you the time and effort. This allows you to focus your time on developing.
    Let's look at an example—we will use golang.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将讨论官方镜像。在Docker Hub上，你几乎可以获取到任何主流操作系统或应用程序的官方镜像。因此，对于你作为开发者的好处是，安装应用程序的工作已经为你完成，从而节省了时间和精力。这使你能够将时间集中在开发上。让我们看一个例子——我们将使用golang。
- en: 'First, we will search for golang in the search box at the top right-hand side
    of the front page, as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在首页右上角的搜索框中搜索golang，如下图所示：
- en: '![An overview of Docker Hub](img/B05201_02_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Hub概述](img/B05201_02_02.jpg)'
- en: 'Our search will return the following results:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的搜索将返回以下结果：
- en: '![An overview of Docker Hub](img/B05201_02_03.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Hub概述](img/B05201_02_03.jpg)'
- en: 'We will click on the official release of golang, as shown in the following
    screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将点击golang的官方版本，如下图所示：
- en: '![An overview of Docker Hub](img/B05201_02_04.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Hub概述](img/B05201_02_04.jpg)'
- en: 'As we can see in the preceding screenshot, this repository gives us a lot of
    options. So, we can use multiple, different versions of golang, even on multiple
    different operating systems. So, to build a golang app, all we need to do is choose
    an image. We will use the following image in our Dockerfile:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在前面的截图中看到的，这个仓库为我们提供了很多选择。所以，我们可以使用多个不同版本的golang，甚至在多个不同的操作系统上使用。所以，构建一个golang应用程序，我们只需要选择一个镜像。在我们的Dockerfile中，我们将使用以下镜像：
- en: '![An overview of Docker Hub](img/B05201_02_05.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Hub概述](img/B05201_02_05.jpg)'
- en: 'We will then use the `COPY` method in our Dockerfile to get our code into the
    container on build. Lastly, we will run the command shown in the following screenshot
    to build our container:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在Dockerfile中使用`COPY`方法将代码放入构建时的容器中。最后，我们将运行以下截图所示的命令来构建我们的容器：
- en: '![An overview of Docker Hub](img/B05201_02_06.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Hub概述](img/B05201_02_06.jpg)'
- en: So, as you can see, it was very easy to build our app, where almost all of our
    development time would be spent on the actual application. This will increase
    our productivity and bring the applications to production a lot faster. In this
    day and age, where agility is everything, you would have to be mad to not see
    the benefit.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，构建我们的应用非常简单，几乎所有开发时间都可以专注于实际应用程序的开发。这将提高我们的生产力，并大大加快将应用推向生产环境的速度。在这个敏捷至上的时代，不看到这种好处简直是不理智的。
- en: The second type of image on Docker Hub is developed and open sourced by developers
    and is maintained by them individually. The easiest way to tell whether an image
    is official or has been developed by an individual is through the image's name.
    In our last example, we looked at the golang image. The name of that image is
    `golang`. Now, let's look at a container that I have open sourced. For this example,
    we will look at my `consul` image. If you want to use my image, you would call
    it `scottyc/consul`. As you can see, the name is different, as it calls the author
    name `scottyc` and then the image name, `consul`. Now, you can see the difference
    in the naming convention between an official image and an authored image.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 上的第二类镜像是由开发者开发并开源的，且由他们个人维护。判断一个镜像是否为官方镜像，或者是否由个人开发，最简单的方法就是查看镜像的名称。在我们上一个例子中，我们看到了
    golang 镜像，它的名称是 `golang`。现在，让我们来看一下我开源的一个容器。作为示例，我们来看一下我的 `consul` 镜像。如果你想使用我的镜像，你可以调用
    `scottyc/consul`。如你所见，镜像名称不同，因为它包含了作者名称 `scottyc`，然后是镜像名称 `consul`。现在，你可以看到官方镜像和个人作者镜像之间的命名规则差异。
- en: Now that we have covered the different images hosted at Docker Hub, we can move
    on to how images get to Docker Hub. There are two different ways to get images
    to Docker Hub. Both ways, we need a Docker Hub account, which we will cover in
    the next section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了在 Docker Hub 上托管的不同镜像，接下来我们可以讲解如何将镜像上传到 Docker Hub。上传镜像有两种不同的方式。无论哪种方式，我们都需要一个
    Docker Hub 账户，接下来我们会在下一节讲解如何创建账户。
- en: The first way is to build the image locally and simply use the `docker push`
    command. The second way is using automated builds, which is an awesome functionality
    that Docker has built into Docker Hub. We will cover this later in much more detail.
    At a high level, it is a **CD** (**continuous delivery**) process to build the
    image based on a Dockerfile that is stored in a GitHub or Bitbucket public repository.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方式是本地构建镜像，然后使用 `docker push` 命令进行推送。第二种方式是使用自动构建，这是 Docker 内置的一个非常棒的功能，支持在
    Docker Hub 上自动构建镜像。我们稍后会更详细地讲解这个过程。从高层次来看，这是一个**CD**（**持续交付**）流程，通过存储在 GitHub
    或 Bitbucket 公共仓库中的 Dockerfile 来构建镜像。
- en: Creating a Docker Hub account
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Docker Hub 账户
- en: 'In this topic, we will create a Docker Hub account and look at how to log in
    to the Docker daemon manually (we will cover how to do this with Puppet in the
    next chapter). So, let''s start. First, we will need to go to Docker Hub ([https://hub.docker.com/](https://hub.docker.com/))
    and fill out the form on the right-hand side of the page. Just replace **yourusername**
    with your desired username, **you@youremail.com**, with your e-mail ID, and, of
    course, enter a secure password:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个 Docker Hub 账户，并查看如何手动登录到 Docker 守护进程（我们将在下一章讲解如何通过 Puppet 完成此操作）。那么，我们开始吧。首先，我们需要访问
    Docker Hub（[https://hub.docker.com/](https://hub.docker.com/)），然后在页面右侧填写表单。只需将
    **yourusername** 替换为你想要的用户名，**you@youremail.com** 替换为你的电子邮件地址，当然，输入一个安全的密码：
- en: '![Creating a Docker Hub account](img/B05201_02_07.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Docker Hub 账户](img/B05201_02_07.jpg)'
- en: 'After that, go to your e-mail ID and confirm your account. This will then redirect
    you to the Docker login page. Log in and you should see the following web page:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完表单后，前往你的电子邮件账户，确认你的账户。这会将你重定向到 Docker 登录页面。登录后，你应该会看到如下网页：
- en: '![Creating a Docker Hub account](img/B05201_02_08.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Docker Hub 账户](img/B05201_02_08.jpg)'
- en: 'Now that we have an account, let''s log in to our daemon. So, let''s use `vagrant
    ssh` back into our Docker vagrant box. We will change to root (`sudo –i`) and
    then enter the `docker login` command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个账户，接下来让我们登录到我们的守护进程。我们可以通过 `vagrant ssh` 重新登录到 Docker vagrant 环境。接着，我们将切换到
    root 用户（`sudo –i`），然后输入 `docker login` 命令：
- en: '![Creating a Docker Hub account](img/B05201_02_09.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Docker Hub 账户](img/B05201_02_09.jpg)'
- en: 'Enter the username that we just created:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 输入我们刚才创建的用户名：
- en: '![Creating a Docker Hub account](img/B05201_02_10.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Docker Hub 账户](img/B05201_02_10.jpg)'
- en: 'Then, enter your password:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入你的密码：
- en: '![Creating a Docker Hub account](img/B05201_02_11.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Docker Hub 账户](img/B05201_02_11.jpg)'
- en: 'After this, enter your e-mail ID. Once this is done, you should see the following
    output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，输入你的电子邮件 ID。完成后，你应该看到以下输出：
- en: '![Creating a Docker Hub account](img/B05201_02_12.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Docker Hub 账户](img/B05201_02_12.jpg)'
- en: You have now successfully logged in the Docker daemon.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经成功登录 Docker 守护进程。
- en: Exploring official images
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索官方镜像
- en: 'In this topic, we are going to provide a quick overview of how to search for
    images on Docker Hub. There are two ways to do this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本主题将简要概述如何在 Docker Hub 上搜索镜像。有两种方法可以做到这一点：
- en: Through the Docker Hub website
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Docker Hub 网站
- en: Through the command line
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过命令行
- en: 'Let''s look at the website first. If you remember, in our golang example we
    already used the web interface to search for an image. Let''s look at another
    example. In this example, we will look for bitbucket, Atlassian''s git server.
    So, we will go back to Docker Hub ([https://hub.docker.com/](https://hub.docker.com/))
    and enter `bitbucket` in the search field:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们看看网站。如果你还记得，在我们的 Golang 示例中，我们已经使用了 Web 界面来搜索镜像。我们再来看一个例子。在这个例子中，我们将搜索
    Bitbucket，Atlassian 的 Git 服务器。所以，我们将返回到 Docker Hub ([https://hub.docker.com/](https://hub.docker.com/))，并在搜索框中输入
    `bitbucket`：
- en: '![Exploring official images](img/B05201_02_13.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![探索官方镜像](img/B05201_02_13.jpg)'
- en: 'Our search will return the following output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的搜索将返回以下结果：
- en: '![Exploring official images](img/B05201_02_14.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![探索官方镜像](img/B05201_02_14.jpg)'
- en: 'As you can see from the preceding screenshot, we got 43 results. So what should
    we look for to choose the right image? We always look for three things, which
    are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的截图中可以看到，我们得到了 43 个结果。那么，我们应该寻找哪些标准来选择正确的镜像呢？我们总是会寻找以下三点：
- en: We check the number of pulls. The more people using an image, the more likely
    it will run with no issues.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们检查拉取次数。使用人数越多，镜像运行时出现问题的可能性就越小。
- en: 'We also check Docker''s official rating system: how many stars a repository
    has. Stars are awarded by other members of the community when they like the image,
    which is very similar to the star system on GitHub.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还检查 Docker 官方的评分系统：一个仓库有多少颗星。星星是由社区中的其他成员在他们喜欢某个镜像时授予的，这与 GitHub 上的星标系统非常相似。
- en: We check whether the repo has a Dockerfile. This gives you peace of mind about
    how the image is built. You can see all the commands that were run to complete
    the build.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们检查仓库中是否有 Dockerfile。这让你对镜像是如何构建的有了安心感。你可以看到为完成构建而执行的所有命令。
- en: 'Using the three metrics, let''s pick an image. Looking at the results, **atlassian/bitbucket-server**
    looks good, with 21 stars and 7.3k pulls. So, let''s click on the repo and look
    for a Dockerfile:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这三项指标，我们来挑选一个镜像。看着这些结果，**atlassian/bitbucket-server** 看起来不错，拥有 21 颗星和 7.3k
    次拉取。所以，让我们点击这个仓库并查看是否有 Dockerfile：
- en: '![Exploring official images](img/B05201_02_15.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![探索官方镜像](img/B05201_02_15.jpg)'
- en: 'If we click on the **Dockerfile** tab under the main image title, it takes
    us to the Dockerfile page. Not every repository has a Dockerfile; however, this
    does not mean that it''s a bad image. This just means that it will take more testing
    before you would be able use it in production. Some authors, such as *Jess (Jessie
    Frazelle)* from Docker, have their Dockerfiles on their GitHub page. She has awesome
    images on Docker Hub and the Dockerfiles can be found at [https://github.com/jfrazelle/dockerfiles](https://github.com/jfrazelle/dockerfiles).
    Alright, back to our example. As you can see in the following screenshot, there
    is a Dockerfile:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击主镜像标题下的 **Dockerfile** 标签，它会带我们到 Dockerfile 页面。并非每个仓库都有 Dockerfile；然而，这并不意味着它是一个不好的镜像。这只是意味着在将其用于生产之前需要更多的测试。一些作者，比如来自
    Docker 的 *Jess (Jessie Frazelle)*，把他们的 Dockerfile 放在 GitHub 页面上。她在 Docker Hub
    上有很棒的镜像，Dockerfiles 可以在 [https://github.com/jfrazelle/dockerfiles](https://github.com/jfrazelle/dockerfiles)
    找到。好了，回到我们的例子。如你所见，以下截图中有一个 Dockerfile：
- en: '![Exploring official images](img/B05201_02_16.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![探索官方镜像](img/B05201_02_16.jpg)'
- en: So, I think this is the winner!!!!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我觉得这是赢家！！！
- en: 'Now, let''s do the same search from the command line. In the command line,
    type `docker search bitbucket`, and the search will return the following output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从命令行进行相同的搜索。在命令行中输入 `docker search bitbucket`，搜索将返回以下结果：
- en: '![Exploring official images](img/B05201_02_17.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![探索官方镜像](img/B05201_02_17.jpg)'
- en: As you can see, it has returned the same information, and the only thing missing
    is the number of pulls. Again, it looks like we will use **atlassian/bitbucket-server**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它返回了相同的信息，唯一缺少的是拉取次数。同样，似乎我们将使用 **atlassian/bitbucket-server**。
- en: Automated builds in Docker Hub
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Hub 中的自动构建
- en: In this topic, we are going to look at how automated builds work at a high level,
    and how to publish an image via the push method on Docker Hub.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将概述自动化构建如何工作，并演示如何通过推送方法将镜像发布到 Docker Hub。
- en: Automated builds
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化构建
- en: 'In Docker Hub, we have two ways to publish images: via a simple push method
    or via an automated build. In this topic, we will cover automated builds. First,
    we will look at the flow of an automated build. In this example, we will be using
    GitHub, but you can also use Bitbucket. So, the first thing that we need to do
    is link our Docker Hub account to our GitHub account. This is done by navigating
    to **Settings** | **Linked Accounts & Services**:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker Hub 中，我们有两种方式来发布镜像：通过简单的推送方法或通过自动化构建。在本节中，我们将介绍自动化构建。首先，我们将看一下自动化构建的流程。在本示例中，我们将使用
    GitHub，但你也可以使用 Bitbucket。因此，我们需要做的第一件事是将我们的 Docker Hub 账户与 GitHub 账户关联。可以通过导航至**设置**
    | **已连接账户与服务**来完成：
- en: '![Automated builds](img/B05201_02_28.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![自动化构建](img/B05201_02_28.jpg)'
- en: Just follow the prompts to link the accounts.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 只需按照提示连接账户即可。
- en: 'Once this is completed, let''s go to our GitHub account and create a repo.
    I am going to use the one that I have already set up:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，接下来我们需要访问我们的 GitHub 账户并创建一个仓库。我将使用我已经设置好的仓库：
- en: '![Automated builds](img/B05201_02_29.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![自动化构建](img/B05201_02_29.jpg)'
- en: 'As you can see in the preceding screenshot, the repo contains a Dockerfile.
    Now, let''s looks at the same repo except Docker Hub:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的截图中看到的，仓库包含一个 Dockerfile。现在，让我们看看在 Docker Hub 上查看同一个仓库的情况：
- en: '![Automated builds](img/B05201_02_30.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![自动化构建](img/B05201_02_30.jpg)'
- en: 'After this, we will look at the **Build Details** tab:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看**构建详情**选项卡：
- en: '![Automated builds](img/B05201_02_31.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![自动化构建](img/B05201_02_31.jpg)'
- en: So, how does that build automate ? Well, it is quite simple. Every time we check
    in a change to the GitHub repo, it will trigger web hooks at Docker Hub. When
    Docker Hub receives the trigger, it will grab the Dockerfile and build the image.
    Docker Hub will take care of things such as version numbers for us with every
    build. So, at a high level, this is how automated builds work.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这个构建是如何自动化的呢？其实很简单。每次我们向 GitHub 仓库提交更改时，它都会触发 Docker Hub 的 Webhooks。当 Docker
    Hub 接收到触发时，它会抓取 Dockerfile 并构建镜像。Docker Hub 会处理每次构建时的版本号等事宜。所以，总的来说，自动化构建就是这样工作的。
- en: Pushing to Docker Hub
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推送到 Docker Hub
- en: This is a quite simple way to get an image to Docker Hub, but the downside is
    that there is no automated build process and the Dockerfile does not get placed
    in the Docker Hub repo automatically. So, in this example, we will assume that
    we have created an image called `scottyc/super_app`. To push this to Docker Hub,
    we simply type `docker push scottyc/super_app` in the terminal. Note that the
    Docker daemon needs to be logged in at the time of the push.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种将镜像推送到 Docker Hub 的相对简单方法，但缺点是没有自动化构建过程，且 Dockerfile 不会自动放入 Docker Hub 仓库。因此，在本示例中，我们假设我们已经创建了一个名为
    `scottyc/super_app` 的镜像。要将其推送到 Docker Hub，我们只需在终端输入 `docker push scottyc/super_app`。请注意，在推送时，Docker
    守护进程需要登录。
- en: Working with official images
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用官方镜像
- en: Now that we know how Docker Hub serves images to us, let's look at how to integrate
    them into our code via three methods. The first will be a Dockerfile, the second
    will be in the `docker-compose.yaml` file, and the last will be straight into
    a Puppet manifest.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Docker Hub 如何为我们提供镜像，接下来让我们看看如何通过三种方法将它们集成到我们的代码中。第一种方法是 Dockerfile，第二种是
    `docker-compose.yaml` 文件，最后一种是直接集成到 Puppet 清单中。
- en: Dockerfiles
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dockerfile
- en: 'In this topic, we will look at using nginx in a basic Dockerfile. In a Dockerfile,
    we need to add a few things. The first is the image that we are basing our application
    on; for us it will be nginx. The second is a maintainer. It should look like as
    shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将展示如何在基础 Dockerfile 中使用 nginx。在 Dockerfile 中，我们需要添加几个元素。第一个是作为我们应用程序基础的镜像；对我们而言，它是
    nginx。第二个是维护者。它应该看起来像以下截图所示：
- en: '![Dockerfiles](img/B05201_02_18.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Dockerfile](img/B05201_02_18.jpg)'
- en: 'As the base nginx image has already got port 80 and 443 exposed, we will not
    need that configuration for our Dockerfile. The next thing we will add is a simple
    `run` command to update the packages in the container. As its base OS is Debian,
    we will add the command shown on line **5** in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于基础 nginx 镜像已经暴露了 80 和 443 端口，我们在 Dockerfile 中无需进行该配置。接下来，我们将添加一个简单的 `run`
    命令，用于更新容器中的软件包。由于它的基础操作系统是 Debian，我们将添加如下截图中第 **5** 行所示的命令：
- en: '![Dockerfiles](img/B05201_02_19.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Dockerfile](img/B05201_02_19.jpg)'
- en: As we are building a simple application, this is all that we are going to add
    to our Dockerfile. There are heaps of configurations that can be done with a Dockerfile.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在构建一个简单的应用程序，这就是我们将在 Dockerfile 中添加的所有内容。Dockerfile 还有很多配置选项可以使用。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to read about Dockerfiles, you can do so at [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 Dockerfile 的内容，可以访问 [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)。
- en: 'Now, let''s build our image. You will note that `server.yaml` in our Vagrant
    repo already has port `80` forwarding to port `8080`, so we won''t need to make
    any changes there. Copy the Dockerfile that we created into the root of your Vagrant
    repo. Then, let''s start our vagrant box with vagrant up from our terminal. Then,
    use `vagrant ssh` once the box is up. Let''s change to root (`sudo -i`). Then,
    if we change directories to `/vagrant`, we should see our Dockerfile. Now, let''s
    build our image with the command, `docker build -t YOUR AUTHOR NAME/nginx .` (note
    that `.` is part of the command). You will get the following output on your terminal:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建我们的镜像。你会注意到，我们的 Vagrant 仓库中的 `server.yaml` 已经将端口 `80` 转发到了端口 `8080`，所以我们无需在这里做任何更改。将我们创建的
    Dockerfile 复制到你的 Vagrant 仓库的根目录中。然后，从终端使用 `vagrant up` 启动我们的 vagrant box。接着，当
    box 启动后，使用 `vagrant ssh` 连接。让我们切换到 root 用户（`sudo -i`）。然后，如果我们切换到 `/vagrant` 目录，我们应该能看到我们的
    Dockerfile。现在，使用命令 `docker build -t YOUR AUTHOR NAME/nginx .` 构建我们的镜像（请注意，命令中的
    `.` 是命令的一部分）。你将在终端中看到以下输出：
- en: '![Dockerfiles](img/B05201_02_20.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![Dockerfiles](img/B05201_02_20.jpg)'
- en: 'Next, let''s test our image and spin up a container with the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们测试我们的镜像并通过以下命令启动一个容器：
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If it was successful, we should get the nginx default page in your browser
    at `127.0.0.1:8080`, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，我们应该能在浏览器中看到 nginx 默认页面，网址为 `127.0.0.1:8080`，如下所示：
- en: '![Dockerfiles](img/B05201_02_21.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Dockerfiles](img/B05201_02_21.jpg)'
- en: Docker Compose
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Compose
- en: Now, we are going to deploy the same nginx image with Docker Compose. We are
    going to run Docker Compose at a high level in this topic just to get an understanding
    of the technology. We will look at it in depth in another chapter of this book.
    The first thing we need to do is install Docker Compose.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用 Docker Compose 部署相同的 nginx 镜像。在本节中，我们将简要介绍 Docker Compose 以便理解这项技术。在本书的另一章节中，我们会更深入地探讨它。首先，我们需要安装
    Docker Compose。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: At the time of writing this book, my pull request is still open, so we will
    have to use my branch of Gareth's module.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在写这本书时，我的 pull request 仍然是开放的，所以我们必须使用 Gareth 模块的我的分支。
- en: 'To do this, let''s modify our puppetfile in the Vagrant repo with the commands
    shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，让我们修改 Vagrant 仓库中的 puppetfile，使用下方截图中显示的命令：
- en: '![Docker Compose](img/B05201_02_22.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Compose](img/B05201_02_22.jpg)'
- en: So, in the Puppetfile we added a new module dependency, `stankevich/python`,
    as Docker Compose is written in Python. We also updated our `epel` module to use
    the latest. Just to get a fresh working environment, we will run the command,
    `vagrant destroy && vagrant up`, in our terminal. Once the box is up, we will
    use `vagrant ssh` and then change to root (`sudo -i`). We will then change the
    directory to `/vagrant` and type `docker-compose`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在 Puppetfile 中，我们添加了一个新的模块依赖项 `stankevich/python`，因为 Docker Compose 是用 Python
    编写的。我们还更新了 `epel` 模块以使用最新版本。为了获得一个全新的工作环境，我们将在终端中运行命令 `vagrant destroy && vagrant
    up`。一旦 box 启动，我们将使用 `vagrant ssh` 然后切换到 root 用户（`sudo -i`）。接着，我们会切换到 `/vagrant`
    目录并输入 `docker-compose`。
- en: 'If the build was successful, we will see the following screen:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建成功，我们将看到以下界面：
- en: '![Docker Compose](img/B05201_02_23.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Compose](img/B05201_02_23.jpg)'
- en: 'Now, let''s create `docker-compose.yaml`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建 `docker-compose.yaml` 文件：
- en: '![Docker Compose](img/B05201_02_24.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Compose](img/B05201_02_24.jpg)'
- en: 'As you can see, we used the official image, gave the container a name `nginx`,
    and exposed ports **80:80** again to be able to hit the nginx page. So, if we
    copy our `docker-compose.yml` file to the root of the Vagrant directory, log in
    to our vagrant box, and change the directory to root (`vagrant ssh`, then `sudo
    -i`), we will be able to change the directory to `/vagrant` again. Now, run `docker-compose
    up -d`. We will get the following output after running it:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用了官方镜像，并给容器命名为 `nginx`，再次暴露了端口 **80:80** 以便访问 nginx 页面。因此，如果我们将 `docker-compose.yml`
    文件复制到 Vagrant 目录的根目录，登录到我们的 vagrant box 并切换到 root 用户（`vagrant ssh`，然后 `sudo -i`），我们将能够再次切换到
    `/vagrant` 目录。现在，运行 `docker-compose up -d`。运行后，我们将看到以下输出：
- en: '![Docker Compose](img/B05201_02_25.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Compose](img/B05201_02_25.jpg)'
- en: 'We can then go to our web browser and visit the nginx page at `127.0.0.1:8080`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以打开我们的网页浏览器，访问`127.0.0.1:8080`，看到nginx页面：
- en: '![Docker Compose](img/B05201_02_21.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Compose](img/B05201_02_21.jpg)'
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to read more about Docker Compose, go to [https://docs.docker.com/compose/](https://docs.docker.com/compose/).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于Docker Compose的内容，可以访问[https://docs.docker.com/compose/](https://docs.docker.com/compose/)。
- en: Puppet manifest
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet清单
- en: 'In this section, we are going to build the same ngnix container with a simple
    Puppet manifest. This is just a proof of concept. In the next chapter, we will
    write a full module. This is just to give us a foundation and understanding of
    how Puppet interacts with Docker. So, in our Vagrant repo, let''s modify `manifest/default.pp`.
    The file should contain the following code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过一个简单的Puppet清单来构建相同的nginx容器。这仅仅是一个概念验证。在下一章中，我们将编写一个完整的模块。这只是为了给我们一个基础，理解Puppet是如何与Docker互动的。所以，在我们的Vagrant仓库中，让我们修改`manifest/default.pp`。文件应包含以下代码：
- en: '![Puppet manifest](img/B05201_02_26.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet清单](img/B05201_02_26.jpg)'
- en: 'We will then open our terminal at the root of our Vagrant repo and run `vagrant
    provision`. Note that you should have no other containers running at this time.
    You will see the following output, which shows that Puppet provisioned a Docker
    container called nginx:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将在Vagrant仓库的根目录打开终端，并运行`vagrant provision`。请注意，此时应没有其他容器在运行。你将看到以下输出，显示Puppet已经配置了一个名为nginx的Docker容器：
- en: '![Puppet manifest](img/B05201_02_27.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet清单](img/B05201_02_27.jpg)'
- en: 'We can then check our browser again at `127.0.0.1:8080`. We will get the nginx
    page again:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以再次检查我们的浏览器，访问`127.0.0.1:8080`。我们将再次看到nginx页面：
- en: '![Puppet manifest](img/B05201_02_21.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![Puppet清单](img/B05201_02_21.jpg)'
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered a lot about the Docker Hub ecosystem. We discussed
    what official images are, how automated builds work, and of course, how to work
    with images in three different ways. After working through this chapter, we now
    have the tools in our tool belt to build our first application with Puppet.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细介绍了Docker Hub生态系统。我们讨论了什么是官方镜像，自动构建是如何工作的，当然还有如何以三种不同的方式使用镜像。完成本章后，我们现在拥有了使用Puppet构建第一个应用的工具。
- en: In the next chapter, we will write our first Puppet module to create a Docker
    container and we will look at writing rspec-puppet unit tests to make sure that
    our module does what it's meant to do.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将编写第一个Puppet模块来创建一个Docker容器，并编写rspec-puppet单元测试，确保我们的模块能够按照预期工作。
