- en: Chapter 7. Looking at Schedulers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章：调度器的介绍
- en: 'In this chapter, we will look at a few different schedulers that are capable
    of launching containers on both your own infrastructures as well as public cloud-based
    infrastructures. To start with, we will look at two different schedulers, both
    of which we will use to launch clusters on Amazon Web Services. The two schedulers
    are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍几种不同的调度器，它们能够在您自己的基础设施以及公共云基础设施上启动容器。首先，我们将查看两种不同的调度器，两个调度器我们都将用来在亚马逊云服务（Amazon
    Web Services）上启动集群。这两个调度器如下：
- en: '**Kubernetes**: [http://kubernetes.io/](http://kubernetes.io/)'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes**：[http://kubernetes.io/](http://kubernetes.io/)'
- en: '**Amazon** **ECS**: [https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon** **ECS**：[https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)'
- en: 'We will then take a look at a tool that offers its own scheduler as well as
    supports others:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍一个提供自己调度器并支持其他调度器的工具：
- en: '**Rancher**: [http://rancher.com/](http://rancher.com/)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rancher**：[http://rancher.com/](http://rancher.com/)'
- en: Let's dive straight in by looking at Kubernetes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接深入了解 Kubernetes。
- en: Getting started with Kubernetes
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门 Kubernetes
- en: 'Kubernetes is an open source tool, originally developed by Google. It is described
    as:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个开源工具，最初由 Google 开发。它被描述为：
- en: '*"A tool for automating deployment, operations, and scaling of containerized
    applications. It groups containers that make up an application into logical units
    for easy management and discovery. Kubernetes builds upon a decade and a half
    of experience of running production workloads at Google, combined with best-of-breed
    ideas and practices from the community." [http://www.kubernetes.io](http://www.kubernetes.io)*'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“一个用于自动化部署、操作和扩展容器化应用程序的工具。它将组成应用程序的容器分组为逻辑单元，以便于管理和发现。Kubernetes 基于 Google
    在过去十多年中运行生产工作负载的经验，并结合了社区中最佳的理念和实践。” [http://www.kubernetes.io](http://www.kubernetes.io)*'
- en: 'While it is not the exact tool that Google uses to deploy their containers
    internally, it has been built from the ground up to offer the same functionality.
    Google is also slowly transitioning to internally use Kubernetes themselves. It
    is designed around the following three principles:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它不是 Google 用来在内部部署容器的确切工具，但它从零开始构建，提供相同的功能。Google 也在慢慢过渡，计划在内部自己使用 Kubernetes。它基于以下三个原则进行设计：
- en: '**Planet scale**: Designed on the same principles that allow Google to run
    billions of containers a week, Kubernetes can scale without increasing your ops
    team'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行星级扩展**：Kubernetes 在与 Google 每周运行数十亿个容器的相同原则下设计，能够在不增加运维团队的情况下扩展。'
- en: '**Never outgrow**: Whether testing locally or running a global enterprise,
    Kubernetes'' flexibility grows with you in order to deliver your applications
    consistently and easily no matter how complex your need is'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**永不停止成长**：无论是在本地进行测试还是运行全球企业，Kubernetes 的灵活性都会随着您的需求增长，以便无论需求多么复杂，都能始终如一且轻松地交付您的应用程序。'
- en: '**Run anywhere**: Kubernetes is open source, giving you the freedom to take
    advantage of on-premise, hybrid, or public cloud infrastructure, letting you effortlessly
    move workloads to where it matters to you'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随处运行**：Kubernetes 是开源的，您可以自由选择在本地、混合或公共云基础设施上使用，让您轻松地将工作负载迁移到对您来说重要的地方。'
- en: 'Out of the box, it comes with quite a mature feature set:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开箱即用，它配备了一个相当成熟的功能集：
- en: '**Automatic bin packing**: This is the core of the tool, a powerful scheduler
    that makes decisions on where to launch your containers based on the resources
    currently being consumed on your cluster nodes'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动装箱**：这是该工具的核心，一个强大的调度器，基于当前集群节点上消耗的资源来决定在哪里启动容器。'
- en: '**Horizontal scaling**: This allows you to scale up your application, either
    manually or based on CPU utilization'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**：这使您能够扩展应用程序，无论是手动扩展还是基于 CPU 使用率自动扩展。'
- en: '**Self-healing**: You can configure status checks; if your container fails
    a check, then it will be relaunched where the resource is available'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自我修复**：您可以配置状态检查；如果容器未通过检查，它将重新启动，并且资源可用时会重新部署。'
- en: '**Load balancing & service discovery**: Kubernetes allows you to attach your
    containers to services, these can expose your container either locally or externally'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡与服务发现**：Kubernetes 允许您将容器附加到服务上，这些服务可以将您的容器暴露到本地或外部。'
- en: '**Storage orchestration**: Kubernetes supports a number of backend storage
    modules out of the box, including Google Cloud Platform, AWS, and services such
    as NFS, iSCSI, Gluster, or Flocker to name a few'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储编排**：Kubernetes开箱即用地支持多种后端存储模块，包括Google Cloud Platform、AWS以及NFS、iSCSI、Gluster和Flocker等服务。'
- en: '**Secret and configuration management**: This allows you to deploy and update
    secrets such as API keys to your containers, without exposing them or rebuilding
    your container images'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机密和配置管理**：这允许你将API密钥等机密信息部署并更新到容器中，而无需暴露它们或重建容器镜像。'
- en: There are a lot more features that we could talk about; rather than covering
    these features, let's dive right in and install a Kubernetes cluster.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以讨论更多的功能；但与其一一介绍这些功能，不如直接进入正题，安装一个Kubernetes集群。
- en: Installing Kubernetes
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Kubernetes
- en: As hinted by the Kubernetes website, there are a lot of ways you can install
    Kubernetes. A lot of the documentation refers to Google's own public cloud; however,
    rather than introducing a third public cloud into the mix, we are going to be
    looking at deploying our Kubernetes cluster onto Amazon Web Services.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Kubernetes官网所提示的，安装Kubernetes的方式有很多种。很多文档都提到了Google自家的公有云；然而，我们并不打算引入第三方公有云，而是要将Kubernetes集群部署到Amazon
    Web Services上。
- en: Before we start the Kubernetes installation, we need to ensure that you have
    the AWS Command Line Interface installed and configured.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始Kubernetes安装之前，我们需要确保已安装并配置了AWS命令行工具。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The AWS **Command Line Interface** (**CLI**) is a unified tool to manage your
    AWS services. With just one tool to download and configure, you can control multiple
    AWS services from the command line and automate them through scripts:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: AWS **命令行工具** (**CLI**) 是一个统一的工具，用于管理AWS服务。只需下载并配置一个工具，你就可以通过命令行控制多个AWS服务，并通过脚本实现自动化：
- en: '[https://aws.amazon.com/cli/](https://aws.amazon.com/cli/)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://aws.amazon.com/cli/](https://aws.amazon.com/cli/)'
- en: 'As we have already used Homebrew several times during the previous chapters,
    we will use that to install the tools. To do this, simply run the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在前几章已经多次使用了Homebrew，因此我们将使用它来安装工具。只需运行以下命令：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the tools have been installed, you will be able to configure the tools
    by running the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 工具安装完成后，你可以通过运行以下命令来配置这些工具：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will ask for the following four pieces of information:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 系统将提示你输入以下四项信息：
- en: AWS Access Key ID
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS访问密钥ID
- en: AWS Secret Access Key
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS密钥访问密钥
- en: Default region name
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认区域名称
- en: Default output format
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认输出格式
- en: 'You should have your AWS Access and Secret keys from the when we launched a
    Docker Machine in Amazon Web Services in [Chapter 2](ch02.html "Chapter 2. Introducing
    First-party Tools"), *Introducing First-party Tools*. For the `Default region
    name`, I used `eu-west-1` (which is the closest region to me) and I left the `Default
    output format` as `None`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经从[第2章](ch02.html "第2章 引入第一方工具")《引入第一方工具》中获取了AWS访问密钥和密钥访问密钥。对于`默认区域名称`，我使用了`eu-west-1`（这是离我最近的区域），并将`默认输出格式`保持为`None`：
- en: '![Installing Kubernetes](img/B05468_07_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Kubernetes](img/B05468_07_02.jpg)'
- en: 'Now that we have the AWS Command Line Tools installed and configured, we can
    install the Kubernetes Command Line Tools. This is a binary that will allow you
    to interact with your Kubernetes'' cluster in the same way that the local Docker
    client connects to a remote Docker Engine. This can be installed using Homebrew,
    just run the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并配置了AWS命令行工具，接下来可以安装Kubernetes命令行工具。这是一个二进制文件，可以让你与Kubernetes集群进行交互，就像本地Docker客户端连接远程Docker引擎一样。可以通过Homebrew安装，运行以下命令即可：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Installing Kubernetes](img/B05468_07_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Kubernetes](img/B05468_07_03.jpg)'
- en: We don't need to configure the tool once installed as this will be taken care
    of by the main Kubernetes deployment script that we will be running next.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，我们不需要再配置工具，因为接下来我们运行的Kubernetes主部署脚本会自动处理这些配置。
- en: Now that we have the tools needed to launch and interact with our AWS Kubernetes
    cluster, we can make a start deploying the cluster itself.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经具备了启动和与AWS Kubernetes集群交互所需的工具，可以开始部署集群本身了。
- en: Before we kick off the installation, we need to let the installation script
    know a little bit of information about where we want our cluster to launch and
    also how big we would like it, this information is passed on to the installation
    script as environment variables.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始安装之前，我们需要让安装脚本了解一些关于我们希望在哪里启动集群以及我们希望集群的规模的信息，这些信息将作为环境变量传递给安装脚本。
- en: 'First of all, I would like it launched in Europe:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我希望它在欧洲启动：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also, I would like two nodes:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我需要两个节点：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we need to instruct the installation script that we would like to
    launch the Kubernetes in Amazon Web Services:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要指示安装脚本，我们希望在Amazon Web Services中启动Kubernetes：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have told the installer where we would like our Kubernetes cluster
    to be launched, it''s time to actually launch it. To do this, run the following
    command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经告诉安装程序我们希望在何处启动Kubernetes集群，是时候实际启动它了。为此，请运行以下命令：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will download the installer and the latest Kubernetes codebase, and then
    launch our cluster. The process itself can take anywhere between eight and fifteen
    minutes, depending on your network connection.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载安装程序和最新的Kubernetes代码库，然后启动我们的集群。这个过程本身可能需要八到十五分钟，具体取决于你的网络连接。
- en: 'If you prefer not to run this installation yourself, you can view a recording
    of a Kubernetes cluster being deployed in Amazon Web Services at the following
    URL:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想自己运行这个安装过程，你可以在以下网址查看Kubernetes集群在Amazon Web Services上部署的录制视频：
- en: '[https://asciinema.org](https://asciinema.org)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://asciinema.org](https://asciinema.org)'
- en: '![Installing Kubernetes](img/B05468_07_07.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Kubernetes](img/B05468_07_07.jpg)'
- en: 'Once the installation script has completed, you will be given information on
    where to access your Kubernetes cluster, you should also be able to run the following
    command to get a list of the nodes within your Kubernetes cluster:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装脚本完成，你将获得访问你的Kubernetes集群的信息，你还应该能够运行以下命令来获取集群内节点的列表：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This should return something similar to the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回类似于以下截图的内容：
- en: '![Installing Kubernetes](img/B05468_07_08.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Kubernetes](img/B05468_07_08.jpg)'
- en: 'Also, if you have the AWS Console open, you should see that a new VPC dedicated
    to Kubernetes has been created:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你打开了AWS控制台，你应该会看到一个新的专用于Kubernetes的VPC已被创建：
- en: '![Installing Kubernetes](img/B05468_07_04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Kubernetes](img/B05468_07_04.jpg)'
- en: 'You will also see that three EC2 instances have been launched into the Kubernetes
    VPC:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会看到三个EC2实例已经启动到Kubernetes的VPC中：
- en: '![Installing Kubernetes](img/B05468_07_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Kubernetes](img/B05468_07_05.jpg)'
- en: The last thing to make a note of before we start to launch applications into
    our Kubernetes cluster is the username and password credentials for the cluster.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始将应用程序部署到Kubernetes集群之前，最后需要注意的一点是集群的用户名和密码凭据。
- en: 'As you may have seen during the installation, these are stored in the Kubernetes
    CLI configuration, as they are right at the bottom of the file, you can get these
    by running the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在安装过程中看到的那样，这些信息存储在Kubernetes CLI配置文件的最底部，你可以通过运行以下命令来获取这些信息：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Installing Kubernetes](img/B05468_07_06.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Kubernetes](img/B05468_07_06.jpg)'
- en: Now that our Kubernetes cluster has been launched, and we have access to it
    using the command-line tools, we can start launching an application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的Kubernetes集群已经启动，并且我们可以使用命令行工具访问它，我们可以开始启动应用程序。
- en: Launching our first Kubernetes application
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动我们的第一个Kubernetes应用程序
- en: To start off with, we are going to be launching a really basic cluster of NGINX
    containers, each container within the cluster will be serving a simple graphic
    and also print its host name on the page. You can find the image for container
    on the Docker Hub at [https://hub.docker.com/r/russmckendrick/cluster/](https://hub.docker.com/r/russmckendrick/cluster/).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将启动一个非常基础的NGINX容器集群，集群中的每个容器将提供一个简单的图形，并在页面上显示其主机名。你可以在Docker Hub上找到该容器的镜像，网址是[https://hub.docker.com/r/russmckendrick/cluster/](https://hub.docker.com/r/russmckendrick/cluster/)。
- en: 'Like a lot of the tools we have looked at in the previous chapters, Kubernetes
    uses the YAML format for its definition file. The file we are going to launch
    into our cluster is the following file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在前面章节中查看的许多工具一样，Kubernetes使用YAML格式来定义文件。我们将要部署到集群中的文件是以下文件：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s call the file `nginxcluster.yaml`. To launch it, run the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将文件命名为`nginxcluster.yaml`。要启动它，请运行以下命令：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once launched, you will be able to see the active pods by running the following
    command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动，你可以通过运行以下命令查看活动的pod：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You may find that you need to run the `kubectl` `get pods` command a few times
    to ensure that everything is running as expected:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现需要多次运行`kubectl` `get pods`命令，确保一切正常运行：
- en: '![Launching our first Kubernetes application](img/B05468_07_09.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![启动我们的第一个Kubernetes应用](img/B05468_07_09.jpg)'
- en: 'Now that you have your pods up and running, we need to expose them so that
    we can access the cluster using a browser. To do this, we need to create a service.
    To view the current services, type the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的pod已经启动并运行，我们需要将它们暴露出去，这样就可以通过浏览器访问集群了。为此，我们需要创建一个服务。要查看当前的服务，输入以下命令：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should see just the main Kubernetes service. When we launched our pods,
    we defined a replication controller, this is the process that manages the number
    of pods. To view the replication controllers, run the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该只看到主要的Kubernetes服务。当我们启动pod时，我们定义了一个副本控制器，这是管理pod数量的过程。要查看副本控制器，运行以下命令：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should see the nginxcluster controller with five pods in the desired and
    current column. Now that we have confirmed that our replication controller is
    active with the expected number of pods registered with it, let''s create the
    service and expose the pods to the outside world by running the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到nginxcluster控制器，并且在期望和当前列中都有五个pod。现在，我们已经确认我们的副本控制器处于活动状态，并且注册了期望数量的pod，接下来让我们创建服务并通过运行以下命令将pod暴露到外部：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, if you run the `get services` command again, you should see our new service:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你再次运行`get services`命令，你应该能看到我们的新服务：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Your terminal session should look something similar to the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你的终端会话应该类似于以下截图：
- en: '![Launching our first Kubernetes application](img/B05468_07_10.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![启动我们的第一个Kubernetes应用](img/B05468_07_10.jpg)'
- en: Great, you now have your pods exposed to the Internet. However, you may have
    noticed that the cluster IP address is an internal one, so how do you access your
    cluster?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在你已经将pod暴露到互联网。但你可能注意到集群的IP地址是内部地址，那你该如何访问你的集群呢？
- en: 'As we are running our Kubernetes cluster in Amazon Web Services, when you exposed
    the service, Kubernetes made an API call to AWS and launched an Elastic Load Balancer.
    You can get the URL of the load balancer by running the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在Amazon Web Services上运行Kubernetes集群，当你暴露服务时，Kubernetes会向AWS发出API调用并启动一个弹性负载均衡器。你可以通过运行以下命令获取负载均衡器的URL：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Launching our first Kubernetes application](img/B05468_07_11.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![启动我们的第一个Kubernetes应用](img/B05468_07_11.jpg)'
- en: As you can see, in my case, my load balancer can be accessed at `http:// af92913bcf98a11e5841c0a7f321c3b2-1182773033.eu-west-1.elb.amazonaws.com/`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在我的情况下，负载均衡器可以通过`http:// af92913bcf98a11e5841c0a7f321c3b2-1182773033.eu-west-1.elb.amazonaws.com/`访问。
- en: 'Opening the load balancer URL in a browser shows our container page:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开负载均衡器URL可以看到我们的容器页面：
- en: '![Launching our first Kubernetes application](img/B05468_07_13.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![启动我们的第一个Kubernetes应用](img/B05468_07_13.jpg)'
- en: 'Finally, if you open the AWS console, you should be able to see the elastic
    load balancer created by Kubernetes:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你打开AWS控制台，你应该能够看到Kubernetes创建的弹性负载均衡器：
- en: '![Launching our first Kubernetes application](img/B05468_07_12.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![启动我们的第一个Kubernetes应用](img/B05468_07_12.jpg)'
- en: An advanced example
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个高级示例
- en: Let's try something more advanced than launching a few of the same instances
    and load balancing them.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试做一些比启动几个相同实例并进行负载均衡更高级的操作。
- en: 'For the following example, we are going to launch our WordPress stack. This
    time we are going to mount Elastic Block Storage volumes to store both our MySQL
    database and WordPress files on:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将启动我们的WordPress堆栈。这次我们将挂载弹性块存储卷来存储我们的MySQL数据库和WordPress文件：
- en: '*"Amazon Elastic Block Store (Amazon EBS) provides persistent block level storage
    volumes for use with Amazon EC2 instances in the AWS Cloud.  Each Amazon EBS volume
    is automatically replicated within its Availability Zone to protect you from component
    failure, offering high availability and durability. Amazon EBS volumes offer the
    consistent and low-latency performance needed to run your workloads. With Amazon
    EBS, you can scale your usage up or down within minutes – all while paying a low
    price for only what you provision." - [https://aws.amazon.com/ebs/](https://aws.amazon.com/ebs/)*'
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“Amazon Elastic Block Store (Amazon EBS) 为在AWS云中与Amazon EC2实例一起使用的持久性块级存储卷提供服务。每个Amazon
    EBS卷会自动在其可用区内进行复制，以保护您免受组件故障的影响，提供高可用性和持久性。Amazon EBS卷提供了运行工作负载所需的一致性和低延迟性能。使用Amazon
    EBS，您可以在几分钟内扩展或缩减您的使用量——所有这些都只需为您配置的部分支付低廉的费用。” - [https://aws.amazon.com/ebs/](https://aws.amazon.com/ebs/)*'
- en: Creating the volumes
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建卷
- en: Before we launch our pods and services, we need to create the two EBS volumes
    that we will be attaching to our pods. As we already have the AWS Command Line
    Interface installed and configured, we will be using that to create the volume
    rather than logging into the console and creating it using the GUI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动我们的Pod和服务之前，我们需要创建两个将附加到Pod的EBS卷。由于我们已经安装并配置了AWS命令行接口，因此我们将使用它来创建卷，而不是登录控制台并通过GUI创建。
- en: 'To create the two volumes, simply run the following command twice, making sure
    that you update the availability zone to match where your Kubernetes cluster was
    configured to launch:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这两个卷，只需运行以下命令两次，确保更新可用区，以匹配您的Kubernetes集群配置启动的位置：
- en: '`aws ec2 create-volume --availability-zone eu-west-1c --size 10 --volume-type
    gp2`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`aws ec2 create-volume --availability-zone eu-west-1c --size 10 --volume-type
    gp2`'
- en: 'Each time you run the command, you will get a blob of JSON returned, this will
    contain all of the metadata generated when the volume was created:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每次运行该命令时，您将获得一个返回的JSON块，其中包含在创建卷时生成的所有元数据：
- en: '![Creating the volumes](img/B05468_07_14.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![创建卷](img/B05468_07_14.jpg)'
- en: Make a note of VolumeId for each of the two volumes, you will need to know these
    when we create our MySQL and WordPress pods.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 记录下每个卷的VolumeId，当我们创建MySQL和WordPress Pod时，您将需要知道这些ID。
- en: Launching MySQL
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动MySQL
- en: 'Now that we have the volumes created, we are now able to launch our MySQL Pod
    and Service. First of all, let''s start with the Pod definition, make sure that
    you add one of the volumeIDs at the where promoted towards the bottom of the file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了卷，接下来可以启动MySQL Pod和服务。首先，从Pod定义开始，确保在文件的底部添加一个卷ID：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, this follows pretty closely to our first Kubernetes application,
    except this time, we are only creating a single Pod rather than one with a Replication
    Controller.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这与我们第一个Kubernetes应用程序非常相似，只不过这次我们仅创建了一个Pod，而不是带有复制控制器的Pod。
- en: Also, as you can see, I have added my volumeID to the bottom of the file; you
    will need to add your own volumeID when you come to launch the Pod.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我已将我的卷ID添加到文件的底部；在启动Pod时，您需要添加您自己的卷ID。
- en: 'I call the file `mysql.yaml`, so to launch it, we need to run the following
    command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我将文件命名为`mysql.yaml`，因此要启动它，我们需要运行以下命令：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Kubernetes will validate the `mysql.yaml` file before it tries to launch the
    Pod; if you get any errors, please check whether the indentation is correct:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes将在尝试启动Pod之前验证`mysql.yaml`文件；如果出现任何错误，请检查缩进是否正确：
- en: '![Launching MySQL](img/B05468_07_15.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![启动MySQL](img/B05468_07_15.jpg)'
- en: 'You should now have the Pod launched; however, you should probably check if
    it''s there. Run the following command to view the status of your Pods:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该已经启动了Pod；但是，您可能需要检查它是否成功启动。运行以下命令查看Pod的状态：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you see that the Pod has a status of `Pending`, like I did, you will probably
    be wondering *what''s going on?* Luckily, you can easily find that out by getting
    more information on the Pod we are trying to launch by using the `describe` command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到Pod的状态为`Pending`，就像我一样，您可能会想知道*发生了什么？*幸运的是，您可以通过使用`describe`命令，轻松获取关于我们尝试启动的Pod的更多信息：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will print out everything you will ever want know about the Pod, as you
    can see from the following terminal output, we did not have enough capacity within
    our cluster to launch the Pod:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出有关Pod的所有信息，从以下终端输出可以看出，我们的集群容量不足，无法启动Pod：
- en: '![Launching MySQL](img/B05468_07_16.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![启动MySQL](img/B05468_07_16.jpg)'
- en: 'We can free up some resources by removing our previous Pods and Services by
    running the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令，删除之前的 Pods 和服务来释放一些资源：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once you run the commands to remove `nginxcluster`, your mysql Pod should automatically
    launch after a few seconds:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行命令删除 `nginxcluster` 后，mysql Pod 应该会在几秒钟内自动启动：
- en: '![Launching MySQL](img/B05468_07_17.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![启动 MySQL](img/B05468_07_17.jpg)'
- en: 'Now that the Pod has been launched, we need to attach a service so that port
    `3306` is exposed, rather than doing this using the `kubectl` command like we
    did before, we will use a second file called `mysql-service.yaml`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Pod 已经启动，我们需要附加一个服务，使得 `3306` 端口能够暴露。与之前使用 `kubectl` 命令不同，我们将使用一个名为 `mysql-service.yaml`
    的第二个文件：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To launch the service, simply run the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动服务，只需运行以下命令：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: So now that we have the MySQL Pod and Service launched, it's time to launch
    the actual WordPress container.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了 MySQL Pod 和服务，是时候启动实际的 WordPress 容器了。
- en: Launching WordPress
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动 WordPress
- en: 'Like the MySQL Pod and Service, we will be launching our WordPress container
    using two files. The first file is for the Pod:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 和 MySQL Pod 及服务一样，我们将使用两个文件来启动我们的 WordPress 容器。第一个文件是 Pod 配置：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As an EBS volume cannot be attached to more than one device at a time, remember
    to use the second EBS volume you created here. Call the `wordpress.yaml` file
    and launch it using the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 EBS 卷一次只能附加到一个设备，记得在此使用你创建的第二个 EBS 卷。调用 `wordpress.yaml` 文件并使用以下命令启动：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then wait for the Pod to launch:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后等待 Pod 启动：
- en: '![Launching WordPress](img/B05468_07_18.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![启动 WordPress](img/B05468_07_18.jpg)'
- en: As we have already removed `nginxcluster`, there should be enough resources
    to launch the Pod straightaway, meaning that you should not get any errors.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经删除了 `nginxcluster`，应该有足够的资源直接启动 Pod，这意味着你不应该遇到任何错误。
- en: 'Although the Pod should be running, it''s best to check whether the container
    launched without any problems. To do this, run the following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Pod 应该已经在运行，但最好检查容器是否没有问题地启动。为此，运行以下命令：
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This should print out the container logs, you will see something similar to
    the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会打印出容器日志，你将看到类似以下截图的内容：
- en: '![Launching WordPress](img/B05468_07_19.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![启动 WordPress](img/B05468_07_19.jpg)'
- en: 'Now that the Pod has launched and WordPress appears to have bootstrapped itself
    as expected, we should launch the service. Like `nginxcluster`, this will create
    an Elastic Load Balancer. The service definition file looks similar to the following
    code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 既然 Pod 已经启动，且 WordPress 看起来已按预期引导完成，我们应该启动服务。和 `nginxcluster` 一样，这将创建一个弹性负载均衡器。服务定义文件类似于以下代码：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To launch it, run the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动它，运行以下命令：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once launched, check whether the service has been created and get the details
    of the Elastic Load Balancer by running the following command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 启动后，检查是否已创建服务，并通过运行以下命令获取弹性负载均衡器的详细信息：
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When I ran the commands, I got the following output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当我运行命令时，我得到了以下输出：
- en: '![Launching WordPress](img/B05468_07_20.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![启动 WordPress](img/B05468_07_20.jpg)'
- en: 'After a few minutes, you should be able to access the URL for Elastic Load
    Balancer, and as expected, you will be presented with a WordPress installation
    screen:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，你应该能够访问弹性负载均衡器的 URL，正如预期的那样，你会看到一个 WordPress 安装界面：
- en: '![Launching WordPress](img/B05468_07_21.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![启动 WordPress](img/B05468_07_21.jpg)'
- en: As we did in [Chapter 3](ch03.html "Chapter 3. Volume Plugins"), *Volume Plugins*
    when we were looking at storage plugins, complete the installation, log in, and
    attach an image to the `Hello World` post.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如同我们在[第 3 章](ch03.html "第 3 章. 卷插件")中讲解 *卷插件* 时所做的那样，完成安装，登录并附加一张图片到 `Hello
    World` 帖子。
- en: 'Now that we have the WordPress site up and running, let''s try removing the
    wordpress Pod and relaunching it, first of let''s make a note of the Container
    ID:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 WordPress 网站已启动并运行，让我们尝试删除 wordpress Pod 并重新启动它。首先，记录下容器 ID：
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then delete the Pod and relaunch it:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后删除 Pod 并重新启动：
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Check the Container ID again to make sure that we have a different one:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查容器 ID，以确保我们有一个不同的 ID：
- en: '[PRE32]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![Launching WordPress](img/B05468_07_22.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![启动 WordPress](img/B05468_07_22.jpg)'
- en: 'Going to your WordPress site, you should see everything exactly as you left
    it:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 访问你的 WordPress 网站时，你应该会看到一切就如你离开时的状态：
- en: '![Launching WordPress](img/B05468_07_23.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![启动 WordPress](img/B05468_07_23.jpg)'
- en: If we wanted to, we could perform the same action for the MySQL pod and our
    data would be exactly as we left it, as it is stored in the EBS volume.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们愿意，我们也可以对 MySQL Pod 执行相同的操作，而我们的数据会保持原样，因为它存储在 EBS 卷中。
- en: 'Let''s remove the Pod and Service for the WordPress application by running
    the following command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过运行以下命令来删除 WordPress 应用的 Pod 和服务：
- en: '[PRE33]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This should leave us with a nice clean Kubernetes cluster for the next section
    of the chapter.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以为本章的下一部分准备一个干净的 Kubernetes 集群。
- en: Supporting tools
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持工具
- en: You may be wondering to yourself why we bothered grabbing the username and password
    when we first deployed our Kubernetes cluster as we have not had to use it yet.
    Let's take a look at some of the supporting tools that are deployed as part of
    our Kubernetes cluster.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么我们一开始部署 Kubernetes 集群时还要抓取用户名和密码，因为到目前为止我们还没用到它。让我们来看看作为 Kubernetes
    集群一部分部署的支持工具。
- en: 'When you first deployed your Kubernetes cluster, there was a list of URLs printed
    on the screen, we will be using these for this section. Don''t worry if you didn''t
    make a note of them as you can get all the URLs for the supporting tools by running
    the following command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次部署 Kubernetes 集群时，屏幕上会打印出一系列 URL，我们将在本节中使用这些。如果你没有记下这些 URL，不用担心，你可以通过运行以下命令获取所有支持工具的
    URL：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will print out a list of URLs for the various parts of your Kubernetes
    cluster:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出你 Kubernetes 集群各个部分的 URL：
- en: '![Supporting tools](img/B05468_07_24.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![Supporting tools](img/B05468_07_24.jpg)'
- en: 'You will need the username and password to view some of these tools, again
    if you don''t have these to hand, you can get them by running the following command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要用户名和密码才能查看其中的一些工具，如果你手头没有这些信息，可以通过运行以下命令获取：
- en: '[PRE35]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Kubernetes Dashboard
  id: totrans-178
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Kubernetes 仪表盘
- en: 'First of all, let''s take a look at the Kubernetes Dashboard. You can get this
    by putting the URL for the Kubernetes-dashboard in your browser. When you enter
    it, depending on your browser, you will get warnings about the certificates, accept
    the warnings and you will be given a login prompt. Enter the username and password
    here. Once logged in, you will see the following screen:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看一下 Kubernetes 仪表盘。你可以通过在浏览器中输入 Kubernetes-dashboard 的 URL 来访问它。进入后，根据浏览器的不同，你可能会收到证书的警告，接受这些警告后，你将看到登录提示。在这里输入用户名和密码。登录后，你将看到如下屏幕：
- en: '![Kubernetes Dashboard](img/B05468_07_25.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes Dashboard](img/B05468_07_25.jpg)'
- en: 'Let''s deploy the NGINX Cluster application using the UI. To do this, click
    on **Deploy An App** and enter the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过 UI 部署 NGINX Cluster 应用。为此，点击 **部署应用** 并输入以下内容：
- en: '**App name** = `nginx-cluster`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用名称** = `nginx-cluster`'
- en: '**Container image** = `russmckendrick/cluster`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器镜像** = `russmckendrick/cluster`'
- en: '**Number of pods** = `5`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pod 数量** = `5`'
- en: '**Port** = Leave blank'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口** = 留空'
- en: '**Port** = `80`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口** = `80`'
- en: '**Target port** = `80`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标端口** = `80`'
- en: Tick the box for **Expose service externally**
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 勾选 **将服务暴露到外部**
- en: '![Kubernetes Dashboard](img/B05468_07_26.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes Dashboard](img/B05468_07_26.jpg)'
- en: 'Once you click on **Deploy**, you will be taken back to the overview screen:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **部署** 后，你将返回到概览页面：
- en: '![Kubernetes Dashboard](img/B05468_07_27.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes Dashboard](img/B05468_07_27.jpg)'
- en: 'From here, you can click on **nginx-cluster** and be taken to an overview screen:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以点击 **nginx-cluster**，进入概览页面：
- en: '![Kubernetes Dashboard](img/B05468_07_28.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![Kubernetes Dashboard](img/B05468_07_28.jpg)'
- en: As you can see, this gives you all the details on both the Pod and Service,
    with details such as the CPU and memory utilization, as well as a link to the
    Elastic Load Balancer. Clicking the link should take you to the default cluster
    page of the image and the container's hostname.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这里提供了 Pod 和服务的所有详细信息，包括 CPU 和内存利用率，以及 Elastic Load Balancer 的链接。点击该链接将带你进入镜像的默认集群页面以及容器的主机名。
- en: Let's leave nginx-cluster up and running to look at the next tool.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保持 nginx-cluster 运行，以便查看下一个工具。
- en: Grafana
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Grafana
- en: The next URL that we are going to open is Grafana; going to the URL, you should
    see a quite dark and mostly empty page.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要打开的 URL 是 Grafana；访问该 URL 后，你应该会看到一个比较暗且大部分为空的页面。
- en: 'Grafana is the tool that is recording all the metrics that we saw being displayed
    in the Kubernetes dashboard. Let''s take a look at the cluster stats. To do this,
    click on the **Cluster** dashboard:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana 是记录我们在 Kubernetes 仪表盘中看到的所有指标的工具。让我们来看看集群的统计信息。为此，点击 **集群** 仪表盘：
- en: '![Grafana](img/B05468_07_30.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![Grafana](img/B05468_07_30.jpg)'
- en: 'As you can see, this gives us a breakdown of all of the metrics that you would
    expect to see from a system-monitoring tool. Scrolling down, you can see:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这里为我们提供了一个系统监控工具应显示的所有指标的细分。向下滚动，你可以看到：
- en: CPU Usage
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 使用情况
- en: Memory Usage
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存使用情况
- en: Network Usage
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络使用情况
- en: Filesystem Usage
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统使用情况
- en: 'Both collectively and per individual node. You can also view details on Pods
    by clicking on the **Pods** dashboard. As Grafana gets its data from the InfluxDB
    pod, which has been running since we first launched our Kubernetes cluster, you
    can view metrics for every Pod that you have launched, even if it is not currently
    running. The following is the Pod metrics for the `mysql` pod we launched when
    installing WordPress:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是整体还是单个节点，你都可以通过点击**Pods**仪表板查看Pods的详细信息。由于Grafana从运行中的InfluxDB Pod获取数据，而该Pod自我们首次启动Kubernetes集群以来一直在运行，因此你可以查看每个已启动Pod的指标，即使它当前并未运行。以下是我们在安装WordPress时启动的`mysql`
    Pod的Pod指标：
- en: '![Grafana](img/B05468_07_31.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![Grafana](img/B05468_07_31.jpg)'
- en: I would recommend you to look around to view some of the other Pod metrics.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你四处浏览，查看一些其他Pod的指标。
- en: ELK
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ELK
- en: 'The final tool we are going to look at is the ELK stack that has been running
    in the background since we first launch our Kubernetes cluster. An ELK stack is
    a collection of the following three different tools:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个我们要查看的工具是自我们首次启动Kubernetes集群以来一直在后台运行的ELK栈。ELK栈是以下三种不同工具的集合：
- en: '**Elasticsearch**: [https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Elasticsearch**: [https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch)'
- en: '**Logstash**: [https://www.elastic.co/products/logstash](https://www.elastic.co/products/logstash)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Logstash**: [https://www.elastic.co/products/logstash](https://www.elastic.co/products/logstash)'
- en: '**Kibana**: [https://www.elastic.co/products/kibana](https://www.elastic.co/products/kibana)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kibana**: [https://www.elastic.co/products/kibana](https://www.elastic.co/products/kibana)'
- en: Together they form a powerful central logging platform.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 它们共同构成了一个强大的中央日志平台。
- en: 'When we ran the following command earlier in this section of the chapter (please
    note you will not be able to run it again as we removed the WordPress pod):'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在本章节前面运行以下命令时（请注意，由于我们已经移除了WordPress Pod，你将无法再次运行该命令）：
- en: '[PRE36]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The logs displayed for our `wordpress` pod the log file entries were actually
    read from the Elasticsearch pod. Elasticsearch comes with its own dashboard called
    Kibana. Let's open the Kibana URL.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的`wordpress` Pod，显示的日志文件条目实际上是从Elasticsearch Pod读取的。Elasticsearch自带一个名为Kibana的仪表板。让我们打开Kibana的URL。
- en: 'When you first open Kibana, you will be asked to configure an index pattern.
    To do this, just select Time-field name from the drop-down box and click on **Create**
    button:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次打开Kibana时，系统会要求你配置一个索引模式。为此，只需从下拉框中选择时间字段名称，并点击**创建**按钮：
- en: '![ELK](img/B05468_07_32.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![ELK](img/B05468_07_32.jpg)'
- en: 'Once the index pattern has been created, click on the **Discover** link in
    the top menu. You will then be taken to an overview of all of the log data that
    has been sent to Elasticsearch by the Logstash installations that are running
    on each of the nodes:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦索引模式创建完成，点击顶部菜单中的**Discover**链接。你将看到Logstash安装在每个节点上，并将日志数据发送到Elasticsearch后的所有日志数据概览：
- en: '![ELK](img/B05468_07_33.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![ELK](img/B05468_07_33.jpg)'
- en: As you can see, there is a lot of data being logged; in fact, when I looked,
    there were 4,918 messages logged within 15 minutes alone. There is a lot of data
    in here, I would recommend clicking around and trying some searches to get an
    idea of what is being logged.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有大量的数据被记录；事实上，当我查看时，仅15分钟内就记录了4,918条消息。这里有很多数据，我建议你点击查看并尝试一些搜索，以了解记录了什么内容。
- en: 'To give you an idea of what each log entry looks like, here is one for one
    of my nginx-cluser pods:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你了解每个日志条目是什么样的，下面是我其中一个nginx-cluster Pod的日志条目：
- en: '![ELK](img/B05468_07_34.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![ELK](img/B05468_07_34.jpg)'
- en: Remaining cluster tools
  id: totrans-224
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 剩余的集群工具
- en: 'The remaining cluster tools that we are yet to open in the browser are as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尚未在浏览器中打开的剩余集群工具如下：
- en: '**Kubernetes**'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes**'
- en: '**Heapster**'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Heapster**'
- en: '**KubeDNS**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KubeDNS**'
- en: '**InfluxDB**'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**InfluxDB**'
- en: These all are API endpoints, so you will not see anything other than an API
    response, they are using by Kubernetes internally to both manage and schedule
    within the cluster.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是API端点，因此你不会看到除API响应之外的任何内容，它们是Kubernetes内部用来管理和调度集群的。
- en: Destroying the cluster
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 销毁集群
- en: 'As the cluster is sat in your Amazon Web Services account on instances that
    are pay-as-you-go, we should look at removing the cluster; to do this, let''s
    re-enter the original configuration that we entered when we first deployed the
    Kubernetes cluster by running the following command:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 由于集群位于你的亚马逊云服务账户中的按需计费实例上，我们应当考虑删除该集群；为此，让我们通过运行以下命令重新输入我们首次部署Kubernetes集群时使用的原始配置：
- en: '[PRE37]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then, from the same location you first deployed your Kubernetes cluster, run
    the following command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从你首次部署Kubernetes集群的相同位置，运行以下命令：
- en: '[PRE38]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This will connect to the AWS API and start to tear down all of the instances,
    configuration, and any other resources that have been launched with Kubernetes.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这将连接到AWS API，并开始拆除所有与Kubernetes一起启动的实例、配置和其他资源。
- en: 'The process will take several minutes, do not interrupt it or you maybe left
    with resources that incur costs running within your Amazon Web Services account:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程需要几分钟时间，请勿中断，否则可能会留下会产生费用的资源，这些资源将继续在你的亚马逊云服务账户中运行：
- en: '![Destroying the cluster](img/B05468_07_35.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![销毁集群](img/B05468_07_35.jpg)'
- en: I would also recommend logging into your Amazon Web Services console and remove
    the unattached EBS volumes that we created for the WordPress installation and
    also any Kubernetes labelled S3 buckets as these will be incurring costs as well.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我还建议登录到你的亚马逊云服务控制台，移除我们为WordPress安装创建的未附加EBS卷，以及任何带有Kubernetes标签的S3存储桶，因为这些也会产生费用。
- en: Recap
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾
- en: Kubernetes, like Docker, has matured a lot since its first public release. It
    has become easier to deploy and manage with each release without having a negative
    impact on the feature set.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes像Docker一样，自首次公开发布以来已经成熟了很多。每一次发布都让部署和管理变得更容易，并且不会对功能集产生负面影响。
- en: As a solution that offers scheduling for your containers, it is second to none,
    and as it is not tied to any particular provider, you can easily deploy it to
    providers other than Amazon Web Services, such as Google's own Cloud Platform,
    where it is considered a first class citizen. It is also possible to deploy it
    on premise on your own bare metal of virtual servers, making sure that it keeps
    itself inline with the build once and deploy anywhere philosophy that Docker has.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个为容器提供调度的解决方案，它无与伦比，而且由于它不依赖于任何特定的供应商，你可以轻松将其部署到除了亚马逊云服务外的其他供应商，例如谷歌的云平台，那里它被视为一等公民。也可以在本地的裸金属服务器或虚拟服务器上进行部署，确保它遵循Docker的“构建一次，部署到任何地方”的理念。
- en: Also, it adapts to work with the technologies available in every platform you
    deploy it onto; for example, if you need persistent storage, then as already mentioned,
    there are multiple options available to you.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它能够适应每个平台上可用的技术；例如，如果你需要持久存储，正如前面提到的，你有多个选项可供选择。
- en: Finally, just like Docker has been over the past 18 months, Kubernetes has quite
    a unifying platform, with multiple vendors such as Google, Microsoft, and Red
    Hat. They all support and use it as part of their products.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，就像过去18个月的Docker一样，Kubernetes也有一个相当统一的平台，多个厂商，如谷歌、微软和红帽，都支持并将其作为其产品的一部分使用。
- en: Amazon EC2 Container Service (ECS)
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊EC2容器服务（ECS）
- en: 'The next tool that we are going to be looking at is the Elastic Container Service
    from Amazon. The description that Amazon gives is as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要了解的工具是亚马逊的弹性容器服务（Elastic Container Service）。亚马逊给出的描述如下：
- en: '*"Amazon EC2 Container Service (ECS) is a highly scalable, high performance
    container management service that supports Docker containers and allows you to
    easily run applications on a managed cluster of Amazon EC2 instances. Amazon ECS
    eliminates the need for you to install, operate, and scale your own cluster management
    infrastructure. With simple API calls, you can launch and stop Docker-enabled
    applications, query the complete state of your cluster, and access many familiar
    features like security groups, Elastic Load Balancing, EBS volumes, and IAM roles.
    You can use Amazon ECS to schedule the placement of containers across your cluster
    based on your resource needs and availability requirements. You can also integrate
    your own scheduler or third-party schedulers to meet business or application specific
    requirements." - [https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)*'
  id: totrans-247
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“Amazon EC2 容器服务 (ECS) 是一个高度可扩展、高性能的容器管理服务，支持 Docker 容器，并允许您轻松地在 Amazon EC2
    实例的托管集群上运行应用程序。Amazon ECS 消除了您需要安装、操作和扩展自己的集群管理基础设施的需求。通过简单的 API 调用，您可以启动和停止启用
    Docker 的应用程序，查询集群的完整状态，并访问许多熟悉的功能，如安全组、弹性负载均衡、EBS 卷和 IAM 角色。您可以使用 Amazon ECS 根据资源需求和可用性要求调度容器在集群中的位置。您还可以集成您自己的调度器或第三方调度器，以满足业务或应用程序的特定需求。”*
    - [https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)'
- en: It wasn't a surprise that Amazon would offer their own container-based service.
    After all, if you are following Amazon's best practices, then you will already
    be treating each of your EC2 instances in the same way you are treating your containers.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供自有容器服务并不令人意外。毕竟，如果您遵循亚马逊的最佳实践，您会发现自己已经将每个 EC2 实例当作容器来处理。
- en: When I deploy applications into Amazon Web Services, I always try to ensure
    that I build and deploy production-ready images, along with ensuring that all
    the data written by the application is sent to a shared source as the instances
    could be terminated any time due to scaling events.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当我将应用程序部署到亚马逊 Web 服务时，我总是尽力确保构建并部署生产就绪的镜像，并确保所有由应用程序写入的数据都发送到共享源，因为实例可能会因扩展事件随时终止。
- en: 'To help support this approach, Amazon offers a wide range of services such
    as:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持这种方法，亚马逊提供了广泛的服务，例如：
- en: '**Elastic Load Balancing** (**ELB**): This is a highly available and scalable
    load balancer'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性负载均衡** (**ELB**)：这是一个高可用且可扩展的负载均衡器。'
- en: '**Amazon Elastic Block Store** (**EBS**): This provides persistent block-level
    storage volumes for your compute resources'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon 弹性块存储** (**EBS**)：为您的计算资源提供持久化块级存储卷。'
- en: '**Auto Scaling**: This scales EC2 resources up and down, allowing you to manage
    both, peaks in traffic and failures within the application'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动扩展**：这会自动扩展 EC2 资源的规模，帮助您管理流量高峰和应用程序中的故障。'
- en: '**Amazon Relational Database Service** (**RDS**): This is a highly available
    database as a service supporting MySQL, Postgres, and Microsoft SQL'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon 关系数据库服务** (**RDS**)：这是一个高可用的数据库即服务，支持 MySQL、Postgres 和 Microsoft SQL。'
- en: All of these are designed to help you remove all single points of failure within
    your Amazon-hosted application.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都是为了帮助您消除亚马逊托管应用程序中的所有单点故障。
- en: Also, as all of Amazon's services are API-driven, it wasn't too much of a jump
    for them to extend support to Docker containers.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于亚马逊的所有服务都是基于 API 驱动的，因此他们将支持 Docker 容器扩展并不算太难。
- en: Launching ECS in the console
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在控制台中启动 ECS。
- en: I am going to be using the the AWS Console to launch my ECS cluster. As my AWS
    account is quite old, a few of the steps may differ. To try and account for this,
    I will be launching my cluster in one of the newer AWS regions.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用 AWS 控制台来启动我的 ECS 集群。由于我的 AWS 账户已经很久，因此某些步骤可能会有所不同。为了适应这种情况，我将会在 AWS 的较新区域启动我的集群。
- en: Once you have logged into the AWS Console at [http://console.aws.amazon.com/](http://console.aws.amazon.com/),
    make sure that you are in the region you would like to launch your ECS cluster
    in, and then click on the **EC2 Container Service** link from the **Services**
    drop-down menu.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您登录到 AWS 控制台 [http://console.aws.amazon.com/](http://console.aws.amazon.com/)，确保您所在的区域是您希望启动
    ECS 集群的区域，然后点击 **EC2 容器服务** 链接，位于 **服务** 下拉菜单中。
- en: As this is your first time launching an ECS cluster, you will be greeted with
    an overview video of the service.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是您第一次启动 ECS 集群，您将看到一个关于该服务的概述视频。
- en: Click on **Get started** to be taken to the Wizard that will help us launch
    our first cluster.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **开始使用**，将引导您进入向导，帮助我们启动第一个集群。
- en: First of all, you will be prompted to create a task definition. This is the
    equivalent of creating a Docker Compose file. Here you will define the container
    image that you would like to run and the resources it is allowed to consume, such
    as RAM and CPU. You will also map the ports from the host to container here.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将被提示创建任务定义。这相当于创建一个Docker Compose文件。在这里，你将定义希望运行的容器镜像及其允许消耗的资源，比如内存和CPU。你还将在此处将主机端口映射到容器端口。
- en: 'For now, we will use the defaults and look at launching our own containers
    once the cluster is up and running. Fill in the details as per the following screenshot
    and click on **Next step**:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用默认设置，等集群启动并运行后再来看如何启动我们自己的容器。按照以下截图填写详细信息，然后点击**下一步**：
- en: '![Launching ECS in the console](img/B05468_07_37.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台启动ECS](img/B05468_07_37.jpg)'
- en: 'Now that the task has been defined, we need to attach it to a service. This
    allows us to create a group of tasks, which initially will be three copies of
    the `console-sample-app-static` task, and register them with an Elastic Load Balancer.
    Fill in the details as per the following screenshot and click on **Next step**
    button:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在任务已经定义，我们需要将其附加到一个服务。这允许我们创建一个任务组，最初将是`console-sample-app-static`任务的三个副本，并将它们注册到弹性负载均衡器。按照以下截图填写详细信息，然后点击**下一步**按钮：
- en: '![Launching ECS in the console](img/B05468_07_38.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台启动ECS](img/B05468_07_38.jpg)'
- en: 'Now that we have the service defined, we need a location to launch it. This
    is where EC2 instances come into play, and also where you still to be charged.
    While the Amazon EC2 Container Service is free of charge to set up, you will be
    charged for the resources used to deliver the compute side of the cluster. These
    will be your standard EC2 instance charges. Fill in the details as per the following
    screenshot and click on **Review & launch**:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了服务，接下来需要为其选择一个启动位置。这时，EC2实例就发挥作用了，也是你仍需付费的地方。尽管Amazon EC2容器服务的设置是免费的，但你将为交付集群计算资源所使用的资源付费。这些将是你的标准EC2实例费用。按照以下截图填写详细信息，然后点击**审查并启动**：
- en: '![Launching ECS in the console](img/B05468_07_39.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台启动ECS](img/B05468_07_39.jpg)'
- en: 'Before anything is launched, you will get the opportunity to double-check everything
    that is configured within your AWS account, this is your last chance to back out
    of launching the ECS cluster. If you are happy with everything, click on **Launch
    instance & run service** button:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动之前，你将有机会重新检查在AWS账户中配置的所有内容，这是你放弃启动ECS集群的最后机会。如果你对一切都满意，点击**启动实例并运行服务**按钮：
- en: '![Launching ECS in the console](img/B05468_07_40.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台启动ECS](img/B05468_07_40.jpg)'
- en: 'What you will see now is an overview of what is happening. Typically, it will
    take about 10 minutes to run through these tasks. In the background, it is doing
    the following:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将看到的是正在发生的概览。通常，完成这些任务大约需要10分钟。后台正在执行以下操作：
- en: Creating an IAM role that accesses the ECS service
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个可以访问ECS服务的IAM角色
- en: Creating a VPC for your cluster to be launched in
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的集群创建一个VPC，以便启动
- en: Creating a Launch Configuration to run an Amazon ECS-optimized Amazon Linux
    AMI with the ECS IAM role
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个启动配置，运行一个经过ECS优化的Amazon Linux AMI，并使用ECS IAM角色
- en: Attaching the newly created Launch Configuration to an Auto Scaling Group and
    configuring it with the number of instances you defined
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将新创建的启动配置附加到自动扩展组，并按照你定义的实例数量进行配置
- en: Creating the ECS Cluster, Task, and Service within the Console
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制台内创建ECS集群、任务和服务
- en: Waiting for the EC2 instances that have been launched by the Auto Scaling Group
    to launch and register themselves with the ECS service
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待由自动扩展组启动的EC2实例启动并与ECS服务注册
- en: Running the Service on your newly created ECS cluster
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在新创建的ECS集群上运行服务
- en: Creating an Elastic Load Balancer and registering your Service with it
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个弹性负载均衡器并将你的服务注册到该负载均衡器
- en: You can find more information on the Amazon ECS-Optimized Amazon Linux AMI on
    its AWS Marketplace page at [https://aws.amazon.com/marketplace/pp/B00U6QTYI2/ref=srh_res_product_title?ie=UTF8&sr=0-2&qid=1460291696921](https://aws.amazon.com/marketplace/pp/B00U6QTYI2/ref=srh_res_product_title?ie=UTF8&sr=0-2&qid=1460291696921).
    This image is a cut-down version of Amazon Linux that only runs on Docker.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在其AWS Marketplace页面上找到有关Amazon ECS优化的Amazon Linux AMI的更多信息，网址为[https://aws.amazon.com/marketplace/pp/B00U6QTYI2/ref=srh_res_product_title?ie=UTF8&sr=0-2&qid=1460291696921](https://aws.amazon.com/marketplace/pp/B00U6QTYI2/ref=srh_res_product_title?ie=UTF8&sr=0-2&qid=1460291696921)。此镜像是Amazon
    Linux的精简版，仅在Docker上运行。
- en: 'Once everything is completed, you will be given the option to go to your newly
    created Service. You should see something similar to the following screenshot:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成所有设置，你将获得前往新创建的服务的选项。你应该看到类似于下图的界面：
- en: '![Launching ECS in the console](img/B05468_07_41.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台中启动ECS](img/B05468_07_41.jpg)'
- en: As you can see, we have three running tasks and a load balancer.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们有三个正在运行的任务和一个负载均衡器。
- en: Now let's create our own task and service. From the preceding Service view,
    click on **Update** button and change the desired count from three to zero, this
    will stop the tasks and allow us to remove the Service. To do this, click on **default**
    button to go to the cluster view and then remove the Service.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建自己的任务和服务。从前面的服务视图中，点击**Update**按钮并将所需的数量从三改为零，这将停止任务并允许我们删除服务。为此，点击**default**按钮进入集群视图，然后删除该服务。
- en: 'Now that the `sample-webapp` Service has been removed, click on the **Task
    Definitions** button and then the **Create new task definition** button. On the
    page that opens, click on the **Add container** button and fill in the following
    details:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`sample-webapp`服务已经被移除，点击**Task Definitions**按钮，然后点击**Create new task definition**按钮。在打开的页面中，点击**Add
    container**按钮并填写以下详细信息：
- en: '**Container name**: `cluster`'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Container name**: `cluster`'
- en: '**Image**: `russmckendrick/cluster`'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Image**: `russmckendrick/cluster`'
- en: '**Maximum memory (MB)**: `32`'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maximum memory (MB)**: `32`'
- en: '**Port mappings**: `80` (**Host port**) `80` (**Container port**) `tcp` (**Protocol**)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Port mappings**: `80` (**Host port**) `80` (**Container port**) `tcp` (**Protocol**)'
- en: 'Everything else can be left at the default values:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 其他项可以保留默认值：
- en: '![Launching ECS in the console](img/B05468_07_42.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台中启动ECS](img/B05468_07_42.jpg)'
- en: 'Once filled in, click on the **Add** button. This will take you back to the
    **Create a Task Definition** screen, fill in the Task Definition Name, let''s
    call it `our-awesome-cluster` and then click on the **Create** button:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完成后，点击**Add**按钮。这将带你回到**Create a Task Definition**屏幕，填写任务定义名称，我们称之为`our-awesome-cluster`，然后点击**Create**按钮：
- en: '![Launching ECS in the console](img/B05468_07_43.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台中启动ECS](img/B05468_07_43.jpg)'
- en: 'Now that we have our new Task defined, we need to create a Service to attach
    it to. Click on the **Clusters** tab, then click on the **default** cluster, you
    should see something similar to the following image:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了新的任务，接下来需要创建一个服务来将其附加到任务上。点击**Clusters**标签，然后点击**default**集群，你应该看到类似于下图的界面：
- en: '![Launching ECS in the console](img/B05468_07_44.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台中启动ECS](img/B05468_07_44.jpg)'
- en: 'Click on the **Create** button in the **Services** tab. From this screen, fill
    in the following information:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Services**标签中的**Create**按钮。在这个页面中，填写以下信息：
- en: '**Task Definition**: `our-awesome-cluster:1`'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Task Definition**: `our-awesome-cluster:1`'
- en: '**Cluster**: `default`'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cluster**: `default`'
- en: '**Service name**: `Our-Awesome-Cluster`'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Service name**: `Our-Awesome-Cluster`'
- en: '**Number of tasks**: `3`'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Number of tasks**: `3`'
- en: '**Minimum healthy percent**: `50`'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Minimum healthy percent**: `50`'
- en: '**Maximum percent**: `200`'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maximum percent**: `200`'
- en: 'Also, in the **Optional configurations** section, click on **Configure ELB**
    button and use the Elastic Load Balancer that was originally configured for the
    `sample-webapp` service:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在**Optional configurations**部分，点击**Configure ELB**按钮，并使用原本为`sample-webapp`服务配置的弹性负载均衡器：
- en: '![Launching ECS in the console](img/B05468_07_45.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台中启动ECS](img/B05468_07_45.jpg)'
- en: 'Once you have filled in the information, click on the **Create Service** button.
    If all goes well, you should see something similar to the following page:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完信息后，点击**Create Service**按钮。如果一切顺利，你应该看到类似于下图的页面：
- en: '![Launching ECS in the console](img/B05468_07_46.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台中启动ECS](img/B05468_07_46.jpg)'
- en: 'Clicking on **View Service** will give you an overview similar to the one we
    first saw for the `Sample-Webapp` Service:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**View Service**将为你提供类似于我们首次看到的`Sample-Webapp`服务的概览：
- en: '![Launching ECS in the console](img/B05468_07_47.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![在控制台中启动ECS](img/B05468_07_47.jpg)'
- en: 'All that''s left to do now is to click on **Load Balancer Name** to be taken
    to the ELB overview page; from here, you will be able to get the URL for the ELB,
    putting this into a browser should show you our clustered application:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只剩下做的就是点击**负载均衡器名称**，你将进入ELB概览页面；从这里，你将能够获取ELB的URL，将其放入浏览器中应该能展示我们的集群应用：
- en: '![Launching ECS in the console](img/B05468_07_48.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![Launching ECS in the console](img/B05468_07_48.jpg)'
- en: Click refresh a few times and you should see the container's hostname change,
    indicating that we are being load balanced between different containers.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 点击刷新几次，你应该会看到容器的主机名发生变化，表明我们正在不同的容器之间进行负载均衡。
- en: Rather than launching any more instances, let's terminate our cluster. To do
    this, go to the **EC2** service in the **Services** menu at the top of the AWS
    Console.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 与其再启动更多实例，不如终止我们的集群。为此，进入AWS控制台顶部的**EC2**服务菜单。
- en: From here, scroll down to **Auto Scaling Groups** that can be found at the bottom
    of the left-hand side menu. From here, remove the auto scaling group and then
    the launch configuration. This will terminate the three EC2 instances that formed
    our ECS cluster.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，向下滚动到位于左侧菜单底部的**自动扩展组**。在这里，移除自动扩展组，然后移除启动配置。这将终止我们ECS集群中的三个EC2实例。
- en: Once the instances have been terminated, click on **Load Balancer** and terminate
    the Elastic Load Balancer.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实例被终止，点击**负载均衡器**，然后终止弹性负载均衡器（Elastic Load Balancer）。
- en: Finally, go back to the **EC2 Container Service** and delete the default cluster
    by clicking on the **x**. This will remove the remainder of the resources that
    were created by us launching the ECS cluster.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，返回到**EC2容器服务**，通过点击**x**删除默认集群。这将移除我们启动ECS集群时创建的剩余资源。
- en: Recap
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾
- en: As you can see, Amazon's EC2 Container Service can be run from the web-based
    AWS Console. There are command tools available, but I won't be covering them here.
    Why, you might ask?
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，亚马逊的EC2容器服务可以通过基于Web的AWS控制台运行。虽然也有命令行工具可用，但这里不再介绍它们。你可能会问，为什么呢？
- en: Well, although the service offering Amazon has built is complete, it feels very
    much like a product that is in an early alpha stage. The versions of Docker that
    ship on the Amazon ECS-Optimized Amazon Linux AMI are quite old. The process of
    having to launch instances outside of the default stack feels very clunky. Its
    integration with some of the supporting services provided by Amazon is also a
    very manual process, making it feel incomplete. There is also the feeling that
    you don't have much control.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，尽管亚马逊所构建的服务产品已经相当完整，但它仍然给人一种处于早期Alpha阶段的产品感。亚马逊ECS优化版的Amazon Linux AMI中所提供的Docker版本相当陈旧。必须在默认堆栈之外启动实例的过程显得非常笨重。它与亚马逊提供的一些支持服务的集成也是一个非常手动的过程，使得它感觉不够完善。还有一种感觉就是你对它的控制权不大。
- en: Personally, I think the service has a lot of potential; however, in the last
    12 months, a lot of alternatives have launched and are being developed at a more
    rapid pace, meaning that Amazon's ECS service is left feeling old and quite outdated
    compared to the other services we are looking at.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我认为这个服务具有很大的潜力；然而，在过去的12个月里，许多替代产品已经发布，并且开发进展更快，这意味着与我们正在查看的其他服务相比，亚马逊的ECS服务显得陈旧且过时。
- en: Rancher
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rancher
- en: 'Rancher is a relatively new player, at the time of writing this book, it has
    only just hit its 1.0 release. Rancher Labs (the developers) describe Rancher
    (the platform) as:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher是一个相对较新的玩家，撰写本书时，它刚刚发布了1.0版本。Rancher Labs（开发者）将Rancher（平台）描述为：
- en: '*"An open source software platform that implements a purpose-built infrastructure
    for running containers in production. Docker containers, as an increasingly popular
    application workload, create new requirements in infrastructure services such
    as networking, storage, load balancer, security, service discovery, and resource
    management.*'
  id: totrans-322
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"一个开源软件平台，实现了一个专门为在生产中运行容器而构建的基础设施。Docker容器作为一种日益流行的应用工作负载，在网络、存储、负载均衡、安全性、服务发现和资源管理等基础设施服务中创造了新的需求。"*'
- en: ''
  id: totrans-323
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Rancher takes in raw computing resources from any public or private cloud
    in the form of Linux hosts. Each Linux host can be a virtual machine or a physical
    machine. Rancher does not expect more from each host than CPU, memory, local disk
    storage, and network connectivity. From Rancher''s perspective, a VM instance
    from a cloud provider and a bare metal server hosted at a colo facility are indistinguishable."
    - [http://docs.rancher.com/rancher/](http://docs.rancher.com/rancher/)*'
  id: totrans-324
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Rancher从任何公共或私有云中以Linux主机的形式接收原始计算资源。每个Linux主机可以是虚拟机或物理机。Rancher对每个主机的要求仅限于CPU、内存、本地磁盘存储和网络连接。从Rancher的角度来看，来自云服务提供商的虚拟机实例和托管在合租数据中心设施中的裸金属服务器是不可区分的。"
    - [http://docs.rancher.com/rancher/](http://docs.rancher.com/rancher/)*'
- en: Rancher Labs also provide RancherOS—a tiny Linux distribution that runs the
    entire operating system as Docker containers. We will look at that in the next
    chapter.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher Labs还提供了RancherOS——一个轻量级的Linux发行版，将整个操作系统作为Docker容器运行。我们将在下一章中讨论这个。
- en: Installing Rancher
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Rancher
- en: 'Rancher needs a host to run on, so let''s launch a server in DigitalOcean using
    Docker Machine:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher需要一个主机来运行，所以让我们使用Docker Machine在DigitalOcean上启动一台服务器：
- en: '[PRE39]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Rancher runs as a container, so rather than using SSH to connect to the newly
    launched Docker host, let''s configure our local client to connect to the host
    and then we can launch Rancher:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher以容器形式运行，因此我们不使用SSH连接到新启动的Docker主机，而是配置本地客户端连接到主机，然后启动Rancher：
- en: '[PRE40]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: That's it, Rancher will be up and running shortly. You can watch the logs to
    keep an eye on when Rancher is ready.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，Rancher很快就会启动并运行。你可以查看日志，随时关注Rancher何时准备好。
- en: 'First of all, check what the Rancher container is called by running the following
    command:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过运行以下命令检查Rancher容器的名称：
- en: '[PRE41]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In my case, it was `jolly_hodgkin`, so now run the following command:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，它是`jolly_hodgkin`，现在运行以下命令：
- en: '[PRE42]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![Installing Rancher](img/B05468_07_49.jpg)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![安装Rancher](img/B05468_07_49.jpg)'
- en: 'You should see a lot of log file entries scroll pass, after a while, logs will
    stop being written. This is a sign that Rancher is ready and you can log in to
    the web interface. To do this, run the following command to open your browser:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到很多日志文件条目滚动经过，过一会儿，日志停止写入。这是Rancher准备好的标志，你可以登录到Web界面。为此，运行以下命令打开浏览器：
- en: '[PRE43]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Once open, you should see something similar to the following screenshot:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 打开后，你应该能看到类似于以下截图的内容：
- en: '![Installing Rancher](img/B05468_07_50.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![安装Rancher](img/B05468_07_50.jpg)'
- en: As you can see, we have logged in straight. As this is available on a public
    IP address, we have better lock the installation down. This is why the red warning
    icon is next to **Admin** in the top menu is there.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们已直接登录。由于这个页面可通过公共IP地址访问，我们最好对安装进行安全加固。这就是为什么在顶部菜单中的**管理员**旁边会出现红色警告图标的原因。
- en: Securing your Rancher installation
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加固你的Rancher安装
- en: As I don't have an Active Directory server configured, I am going to use GitHub
    to authenticate against my Rancher installation. Just like the installation itself,
    Rancher Labs have made this a really easy process. First of all, click on **Admin**
    in the top menu and then **Access Control** in the secondary menu, you will be
    taken to a screen that allows you to know everything you need in order to configure
    Rancher to use GitHub as its authentication backend.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我没有配置Active Directory服务器，我将使用GitHub来对我的Rancher安装进行身份验证。就像安装过程本身一样，Rancher
    Labs使这个过程变得非常简单。首先，点击顶部菜单中的**管理员**，然后在次级菜单中点击**访问控制**，你将进入一个页面，页面上列出了配置Rancher以使用GitHub作为身份验证后端所需的所有信息。
- en: 'For me, this screen looked similar to the following image:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 对我而言，这个屏幕看起来类似于以下图片：
- en: '![Securing your Rancher installation](img/B05468_07_51.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![加固你的Rancher安装](img/B05468_07_51.jpg)'
- en: As I have a standard GitHub account rather than the Enterprise installation,
    all I had to do was click on the link, this took me to a page where I could register
    my Rancher installation.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我拥有的是标准的GitHub账户，而不是企业版安装，我所需要做的就是点击链接，它会带我到一个页面，在那里我可以注册我的Rancher安装。
- en: 'This asked for several pieces of information, all of which are provided on
    the following screen:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 这要求输入几项信息，所有这些信息都显示在以下页面中：
- en: '![Securing your Rancher installation](img/B05468_07_52.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![加固你的Rancher安装](img/B05468_07_52.jpg)'
- en: 'Once I filled in the information, I clicked on **Register application** button.
    Once the application had been registered, I was taken a page that gave me a Client
    ID and Client Secret:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完信息后，我点击了**注册应用**按钮。应用注册成功后，我被引导到一个页面，页面上显示了客户端ID和客户端密钥：
- en: '![Securing your Rancher installation](img/B05468_07_53.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![Securing your Rancher installation](img/B05468_07_53.jpg)'
- en: 'I entered these parameters into appropriate boxes on my Rancher page and then
    clicked on **Authenticate with GitHub**. This prompted a pop-up window from GitHub
    asking me to authorize the application. Clicking the **Authorize application**
    button refreshed the Rancher screen and logged me in, as you can see from the
    following screenshot, my application is now secure:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这些参数输入到 Rancher 页面上的相应框中，然后点击**用 GitHub 认证**。这时弹出了一个 GitHub 授权窗口，要求我授权该应用。点击**授权应用**按钮后，Rancher
    界面刷新并让我登录，正如下面的截图所示，我的应用现在已经安全：
- en: '![Securing your Rancher installation](img/B05468_07_54.jpg)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
  zh: '![Securing your Rancher installation](img/B05468_07_54.jpg)'
- en: Now that we have the authentication configured, you should probably log out
    and log back in just to double-check whether everything is working as expected
    before we move onto the next step. To do this, click on your avatar at the right-hand
    top of the page and click on **Log Out**.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了认证，您应该重新退出并重新登录，以确保一切按预期工作，然后再继续下一步。为此，请点击页面右上角的头像，并点击**登出**。
- en: 'You will be instantly taken to the following page:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 您将立即被带到以下页面：
- en: '![Securing your Rancher installation](img/B05468_07_55.jpg)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![Securing your Rancher installation](img/B05468_07_55.jpg)'
- en: Click on **Authenticate with GitHub** to log back in.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**用 GitHub 认证**以重新登录。
- en: So, why did we log out and then logged back in? Well, next up, we are going
    to be giving our Rancher installation our DigitalOcean API key so that it can
    launch hosts, if we hadn't secured our installation before adding this API key,
    it would mean that anyone could stumble upon our Rancher installation and start
    launching hosts as they see fit. This, as I am sure you could imagine, could get
    very expensive.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们为什么要退出然后再重新登录呢？接下来，我们将为 Rancher 安装提供 DigitalOcean API 密钥，以便它可以启动主机。如果在添加此
    API 密钥之前没有保护我们的安装，意味着任何人都可以偶然发现我们的 Rancher 安装并开始按他们的意愿启动主机。这，正如你可以想象的那样，可能会非常昂贵。
- en: Cattle cluster
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cattle 集群
- en: Rancher supports three different schedulers, we have already looked at two of
    them in both this and the previous chapters. From our Rancher installation, we
    will be able to launch a Docker Swarm Cluster, Kubernetes cluster, and also Rancher
    cluster.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher 支持三种不同的调度程序，我们已经在本章和上一章中查看了其中的两种。从我们的 Rancher 安装中，我们将能够启动 Docker Swarm
    集群、Kubernetes 集群，以及 Rancher 集群。
- en: For this part of the chapter, we are going to be looking at a Rancher cluster.
    The scheduler that will be used here is called Cattle. It is also the default
    scheduler, so we do not need to configure it, all we need to do is add some hosts.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们将研究 Rancher 集群。这里使用的调度程序叫做 Cattle。它也是默认的调度程序，所以我们不需要进行配置，我们只需要添加一些主机即可。
- en: As mentioned in the previous section, we are going to launch our hosts in DigitalOcean;
    to do this, click on **Add Host** in the **Adding your first Host** section of
    the front page.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所提到的，我们将要在 DigitalOcean 中启动我们的主机；为此，请点击首页“添加第一个主机”部分中的**添加主机**。
- en: 'You will be taken to a page with several hosting providers listed at the top,
    click on DigitalOcean and then enter the following details:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被带到一个页面，页面顶部列出了多个托管提供商，点击 DigitalOcean，然后输入以下详细信息：
- en: '**Quantity**: I wanted to launch three hosts, so I dragged the slider to `3`.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数量**：我希望启动三个主机，因此将滑块拖动到 `3`。'
- en: '**Name**: This is how the hosts will appear in my DigitalOcean control panel.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：这是主机在我的 DigitalOcean 控制面板中显示的名称。'
- en: '**Description**: A quick description to be attached to each host.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：一个简短的描述，附加到每个主机。'
- en: '**Access Token**: This is my API token, you should have yours from [Chapter
    2](ch02.html "Chapter 2. Introducing First-party Tools"), *The First-party Tools*.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问令牌**：这是我的 API 令牌，您应该在[第2章](ch02.html "第2章 引介第方工具")中获得属于您的令牌，*第方工具*。'
- en: '**Image**: At the moment, only Ubuntu 14.04x64 is supported.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜像**：目前仅支持 Ubuntu 14.04x64。'
- en: '**Size**: This is the size of the host you would like to launch. Don''t forget,
    the bigger the host, the more money you will pay while the host is online.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小**：这是您希望启动的主机的大小。别忘了，主机越大，主机在线时您支付的费用就越高。'
- en: '**Region**: Which DigitalOcean data center would you like to launch the hosts
    in?'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域**：您希望在哪个 DigitalOcean 数据中心启动主机？'
- en: 'I left the remainder of the options at their defaults:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 我将其余的选项保持在默认设置：
- en: '![Cattle cluster](img/B05468_07_56.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![Cattle cluster](img/B05468_07_56.jpg)'
- en: Once I was happy with what I had entered, I clicked on **Create** button. Rancher
    then, using the DigitalOcean API, went ahead and launched my hosts.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 当我对所填写的内容满意后，我点击了**创建**按钮。然后，Rancher 使用 DigitalOcean API 启动了我的主机。
- en: To check the status of the hosts, you should click on **Infrastructure** in
    the top menu and then **Hosts** in the secondary menu.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查主机的状态，你应该点击顶部菜单中的**基础设施**，然后在次级菜单中选择**主机**。
- en: 'Here, you should see the hosts you are deploying, along with their status,
    which is updating in real time. You should see messages saying the following:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你应该看到你正在部署的主机及其状态，状态正在实时更新。你应该会看到以下信息：
- en: The host has been launched
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机已经启动
- en: Docker is being installed and configured
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 正在安装并配置
- en: The Rancher agent is being installed and configured
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rancher 代理正在安装并配置
- en: 'Finally, all three of your hosts are shown as active:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你的三个主机都显示为活动状态：
- en: '![Cattle cluster](img/B05468_07_57.jpg)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![Cattle 集群](img/B05468_07_57.jpg)'
- en: There you have it, your first Cattle cluster. As you can see, so far it has
    been incredibly easy to install, secure, and configure our first cluster in Rancher.
    Next up, we need to deploy our containers.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 你看，完成了，这是你第一个 Cattle 集群。如你所见，到目前为止，在 Rancher 中安装、配置和保护我们的第一个集群非常简单。接下来，我们需要部署我们的容器。
- en: Deploying the Cluster application
  id: totrans-381
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署集群应用程序
- en: As per the previous two schedulers, let's look at deploying our basic cluster
    application. To do this, click on the **Applications** tab in the top menu, and
    then click on **Add Service**. There is an option to **Add From Catalog**, we
    will be looking at this option when we have launched our own application.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前两个调度程序，接下来我们来看看如何部署我们的基本集群应用程序。为此，点击顶部菜单中的**应用程序**选项卡，然后点击**添加服务**。有一个**从目录添加**的选项，我们将在启动自己的应用程序时查看这个选项。
- en: 'On the **Add Service** page, enter the following information:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在**添加服务**页面，输入以下信息：
- en: '**Scale**: `Always run one instance of this container on every host`'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规模**: `在每个主机上始终运行此容器的一个实例`'
- en: '**Name**: `MyClusterApp`'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**: `MyClusterApp`'
- en: '**Description**: `My really awesome clustered application`'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**: `我真的很棒的集群应用`'
- en: '**Select Image**: `russmckendrick/cluster`'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择镜像**: `russmckendrick/cluster`'
- en: '**Port map**: Add a port map for port `80` just in the **Private port** box![Deploying
    the Cluster application](img/B05468_07_58.jpg)'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口映射**: 在**私有端口**框中添加端口 `80` 的端口映射![部署集群应用程序](img/B05468_07_58.jpg)'
- en: For now, leave the rest of the forms at their default values and click on the
    **Create** button.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保持其余表单的默认值，点击**创建**按钮。
- en: 'After a few minutes, you should see that your service is active, clicking on
    the service name will take you a screen that gives you the details on all of the
    containers running within the service:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，你应该能看到你的服务处于活动状态，点击服务名称将带你进入一个显示所有在该服务中运行的容器的详细信息页面：
- en: '![Deploying the Cluster application](img/B05468_07_59.jpg)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
  zh: '![部署集群应用程序](img/B05468_07_59.jpg)'
- en: 'So, now that we have our containers running, we really need to be able to access
    them. To configure a load balancer, click on **Stacks** and then on the downward
    arrow on our default service:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的容器已经在运行，我们真的需要能够访问它们。要配置负载均衡器，点击**堆栈**，然后点击默认服务上的下拉箭头：
- en: '![Deploying the Cluster application](img/B05468_07_60.jpg)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
  zh: '![部署集群应用程序](img/B05468_07_60.jpg)'
- en: Selecting **Add Load Balancer** from the drop-down menu will take you to a screen
    that looks similar to the one where we added our cluster application.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择**添加负载均衡器**将带你进入一个类似我们添加集群应用的界面。
- en: 'Fill in the following details:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 填写以下信息：
- en: '**Scale**: `Run 1 container`'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规模**: `运行 1 个容器`'
- en: '**Name**: `ClusterLoadBalancer`'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**: `ClusterLoadBalancer`'
- en: '**Description**: `The Load Balancer for my clustered application`'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**: `我的集群应用的负载均衡器`'
- en: '**Listening** **Ports**: `Source IP/Port 80 Default Target Post 80`'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监听** **端口**: `源 IP/端口 80 默认目标端口 80`'
- en: '**Target** **Service**: `MyClusterApp`![Deploying the Cluster application](img/B05468_07_61.jpg)'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标** **服务**: `MyClusterApp`![部署集群应用程序](img/B05468_07_61.jpg)'
- en: 'Click on the **Save** button and wait for the service to launch. You will be
    taken back to the list of services that you have launched, clicking on the information
    sign next to name of the load balancer will open an information pane at the bottom
    of the screen. From here, click on the IP address listed in the Ports section:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**保存**按钮并等待服务启动。你将被带回到你启动的服务列表中，点击负载均衡器名称旁的信息图标将在屏幕底部打开一个信息面板。从这里，点击端口部分列出的
    IP 地址：
- en: '![Deploying the Cluster application](img/B05468_07_62.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![部署集群应用程序](img/B05468_07_62.jpg)'
- en: Your browser should open the now-familiar cluster application page.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 你的浏览器应该会打开我们熟悉的集群应用程序页面。
- en: Clicking on refresh a few times should change the host name of the container
    you are being connected to.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新几次应该会改变你所连接容器的主机名。
- en: What's going on in the background?
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后台发生了什么？
- en: One of Rancher's strengths is that there are a lot of tasks, configuration,
    and process running in the background, which are all hidden by an intuitive and
    easy-to-use web interface.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher的一个优势是，后台有很多任务、配置和进程在运行，这些都被一个直观且易于使用的Web界面隐藏起来。
- en: To get an idea of what's going on, let's have a look around the interface. To
    start off with, click on **Infrastructure** in the top menu, and then click on
    **Hosts**.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解正在发生的情况，让我们浏览一下界面。首先，点击顶部菜单中的**Infrastructure**，然后点击**Hosts**。
- en: 'As you can see, the running containers are now listed; alongside the containers
    for our Default stack, there is a network agent container running on each host:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，现在列出了正在运行的容器；在我们的默认堆栈容器旁边，每台主机上都运行着一个网络代理容器：
- en: '![What''s going on in the background?](img/B05468_07_64.jpg)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: '![后台发生了什么？](img/B05468_07_64.jpg)'
- en: These containers form a network between all three of our hosts using iptables,
    allowing cross-host connectivity for our containers.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 这些容器通过iptables在我们三台主机之间形成了一个网络，实现了容器间的跨主机连接。
- en: Note
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'iptables is a user-space application program that allows a system administrator
    to configure the tables provided by the Linux kernel firewall (implemented as
    different Netfilter modules) and the chains and rules it stores:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: iptables是一个用户空间的应用程序，允许系统管理员配置由Linux内核防火墙（通过不同的Netfilter模块实现）提供的表，以及它所存储的链和规则：
- en: '[https://en.wikipedia.org/wiki/Iptables](https://en.wikipedia.org/wiki/Iptables)'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Iptables](https://en.wikipedia.org/wiki/Iptables)'
- en: To confirm this, click on **Containers** button in the secondary menu. You will
    see a list of the currently running containers, this list should include three
    containers running our cluster application.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认这一点，点击副菜单中的**Containers**按钮。你将看到当前正在运行的容器列表，列表中应该包括三个运行我们集群应用程序的容器。
- en: Make a note of the IP address for **Default_MyClusterApp_2** (in my case, it's
    `10.42.220.91`) and then click on **Default_MyClusterApp_1**.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 记下**Default_MyClusterApp_2**的IP地址（在我的例子中是`10.42.220.91`），然后点击**Default_MyClusterApp_1**。
- en: 'You will be taken to a page that gives you real-time information about the
    CPU, memory, network, and storage utilization of the container:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被带到一个页面，提供有关容器的CPU、内存、网络和存储使用情况的实时信息：
- en: '![What''s going on in the background?](img/B05468_07_65.jpg)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![后台发生了什么？](img/B05468_07_65.jpg)'
- en: As you can see, the container is currently active on my first Rancher host.
    Let's get a little more information about the container by connecting to it. At
    the top right-hand side of the page, where it says **Running**, there is an icon
    with three dots, click on that, and then select **Execute Shell** from the drop-down
    menu.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，容器目前活跃在我的第一台Rancher主机上。让我们通过连接到容器获取更多信息。在页面右上角，显示**Running**的地方，有一个带有三个点的图标，点击它，然后从下拉菜单中选择**Execute
    Shell**。
- en: 'This will open a terminal within your browser to the running container. Try
    entering some commands such as the following:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会在你的浏览器中打开一个终端，连接到正在运行的容器。尝试输入以下命令之一：
- en: '[PRE44]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Also, while we have the shell open, let''s ping our second container that is
    hosted on another one of our hosts (make sure that you replace the IP address
    with the one made a note of):'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当我们打开Shell时，让我们ping一下托管在我们另一台主机上的第二个容器（确保你将IP地址替换为之前记录下的那个）：
- en: '[PRE45]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'As you can see, although it is on a different host within our cluster, we are
    able to ping it without any problems:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，尽管它位于我们集群中的不同主机上，我们仍然能够无问题地ping通它：
- en: '![What''s going on in the background?](img/B05468_07_66.jpg)'
  id: totrans-424
  prefs: []
  type: TYPE_IMG
  zh: '![后台发生了什么？](img/B05468_07_66.jpg)'
- en: Another feature that is useful is Health Check. Let's configure Health Check
    for our service and then simulate an error.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的功能是健康检查。让我们为我们的服务配置健康检查，然后模拟一个错误。
- en: Click on **Applications** in the top menu, then on the **+** next to our Default
    stack, this will bring up a list of services that make up the stack. Click on
    the **MyClusterApp** service to be taken to the overview page.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 点击顶部菜单中的**Applications**，然后点击我们默认堆栈旁边的**+**，这将弹出一个服务列表，显示堆栈的组成部分。点击**MyClusterApp**服务以进入概览页面。
- en: From here, as we did to access the container shell, click on the icon with the
    three dots in the top right-hand side, next to where it says **Active**. From
    the drop-down menu, select **Upgrade**, this will take us to a stripped-down version
    of the page we filled in to create the initial service.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，像我们访问容器shell一样，点击右上角的三个点图标，靠近**活动**处。然后从下拉菜单中选择**升级**，这将带我们进入一个精简版本的页面，我们之前填写了该页面来创建初始服务。
- en: 'At the bottom of this page there are several tabs, click on **Health Check**
    and fill out the following information:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面的底部有几个标签，点击**健康检查**并填写以下信息：
- en: '**Health Check**: `HTTP Responds 2xx/3xx`'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康检查**：`HTTP 响应 2xx/3xx`'
- en: '**HTTP Request**: `/index.html`'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP 请求**：`/index.html`'
- en: '**Port**: `80`'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口**：`80`'
- en: '**When Unhealthy**: `Re-create`'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当不健康时**：`重新创建`'
- en: '![What''s going on in the background?](img/B05468_07_67.jpg)'
  id: totrans-433
  prefs: []
  type: TYPE_IMG
  zh: '![后台发生了什么？](img/B05468_07_67.jpg)'
- en: Leave the rest of the settings as they are and then click on the **Upgrade**
    button. You will be taken back to the list of services that are in the Default
    stack, and next to the **MyClusterApp** service, it will say **Upgrading**.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 保留其余设置不变，然后点击**升级**按钮。你将被带回默认堆栈中的服务列表，在**MyClusterApp**服务旁边会显示**正在升级**。
- en: During the upgrade process, Rancher has relaunched our containers with the new
    configuration. It did this one at a time, meaning that there would have been no
    downtime as far as people browsing our application would have been concerned.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在升级过程中，Rancher已经用新配置重新启动了我们的容器。它是逐个进行的，这意味着从用户浏览我们的应用的角度来看，没有任何停机时间。
- en: You may also notice that it says there are six containers, and also that the
    stack is degraded; to resolve this, click on the **MyClusterApp** service in order
    to be taken to the list of containers.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可能注意到它显示有六个容器，同时堆栈处于降级状态；为了解决这个问题，点击**MyClusterApp**服务以查看容器列表。
- en: As you can see, three of them have a state of Stopped. To remove them, click
    on the **Finish Upgrade** button, next to where it says **Degraded**, this will
    remove the stopped containers and return us to a stopped state.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，其中三个处于停止状态。要移除它们，点击**完成升级**按钮，位于**降级**旁边，这样就会移除停止的容器，并将我们恢复到停止状态。
- en: So now that we have a health checking, make sure that each of our containers
    is serving a web page, let's stop NGINX from running and see what happens.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经进行了健康检查，确保每个容器都在提供网页，接下来我们来停止NGINX并观察会发生什么。
- en: To do this, click on any of our three containers and then open a console by
    selecting **Execute Shell** from the drop-down menu.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，点击我们的任意一个容器，然后通过从下拉菜单中选择**执行Shell**来打开控制台。
- en: 'As our container is running supervised to manage the processes within the container,
    all we need to do is run the following command to stop NGINX:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的容器是以受监督的方式运行来管理容器内的进程，我们只需运行以下命令来停止NGINX：
- en: '[PRE46]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then we need to kill the NGINX processes; to do this, find out the process
    IDs by running the following code:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要终止NGINX进程；为此，通过运行以下代码查找进程ID：
- en: '[PRE47]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In my case, the PIDs were 12 and 13, so to kill them, I will run the following
    command:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的案例中，PID是12和13，因此要终止它们，我将运行以下命令：
- en: '[PRE48]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This will stop NGINX, but keep the container up and running. After a few seconds,
    you will notice that the stats in the background disappear:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 这将停止NGINX，但容器仍然保持运行。几秒钟后，你会注意到后台的统计数据消失了：
- en: '![What''s going on in the background?](img/B05468_07_68.jpg)'
  id: totrans-447
  prefs: []
  type: TYPE_IMG
  zh: '![后台发生了什么？](img/B05468_07_68.jpg)'
- en: 'Then your console will close, leaving you with something that looks similar
    to the following screenshot:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你的控制台会关闭，留下类似以下截图的内容：
- en: '![What''s going on in the background?](img/B05468_07_69.jpg)'
  id: totrans-449
  prefs: []
  type: TYPE_IMG
  zh: '![后台发生了什么？](img/B05468_07_69.jpg)'
- en: 'Going back to the list of containers for the MyClusterApp service, you will
    notice that there is a new **Default_MyClusterApp_2** container running under
    a different IP address:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到MyClusterApp服务的容器列表，你会注意到有一个新的**Default_MyClusterApp_2**容器在不同的IP地址下运行：
- en: '![What''s going on in the background?](img/B05468_07_70.jpg)'
  id: totrans-451
  prefs: []
  type: TYPE_IMG
  zh: '![后台发生了什么？](img/B05468_07_70.jpg)'
- en: Rancher has done exactly as we instructed it to, if port 80 on any of our containers
    stops responding for more than six seconds, it has to fail three checks that are
    made every 2,000 ms, then remove the container, and replace it with a new one.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher完全按照我们指示的操作进行，如果任何一个容器的80端口超过六秒钟没有响应，它必须连续失败三次检查（每次检查间隔2000毫秒），然后移除该容器，并用新的容器替换它。
- en: The catalog
  id: totrans-453
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: I am pretty sure that you would have clicked on the **Catalog** item in the
    top menu, this lists all the pre-built stacks that you can launch within Rancher.
    Let's look at launching WordPress using the catalog item. To do this, click on
    **Catalog** and scroll down to the bottom where you will see an entry for WordPress.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢肯定，你应该已经点击了顶部菜单中的**Catalog**项，它列出了你可以在Rancher中启动的所有预构建堆栈。让我们来看一下如何使用目录项启动WordPress。为此，点击**Catalog**并向下滚动到底部，你会看到一个WordPress的条目。
- en: WordPress
  id: totrans-455
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WordPress
- en: Click on **View Details** to be taken to a screen where you are able to add
    a WordPress stack. All it asks is for you to provide a **Name** and **Description**
    for the stack, fill these in, and click on **Launch**.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**查看详细信息**将带你进入一个屏幕，在那里你可以添加一个WordPress堆栈。它只要求你提供堆栈的**名称**和**描述**，填写这些信息后，点击**启动**。
- en: This will launch two containers, one running MariaDB and the other running the
    WordPress container. These containers use the same images from the Docker Hub
    that we have been launching throughout the book.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动两个容器，一个运行MariaDB，另一个运行WordPress容器。这些容器使用我们在本书中一直使用的Docker Hub中的相同镜像。
- en: 'If you click on **Stacks** in the secondary menu and then expand the two stacks.
    Once the WordPress stack is active, you will be able to click on the information
    icon next to where it says **wordpress**. Like before, this will give the IP address
    where you can access your WordPress installation:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击次级菜单中的**Stacks**，然后展开两个堆栈。当WordPress堆栈激活后，你可以点击显示**wordpress**旁边的信息图标。像之前一样，这将显示一个IP地址，你可以通过这个地址访问你的WordPress安装：
- en: '![WordPress](img/B05468_07_71.jpg)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
  zh: '![WordPress](img/B05468_07_71.jpg)'
- en: Clicking on it will open a new browser window and you will see a very familiar
    WordPress installation screen.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 点击它会打开一个新的浏览器窗口，你将看到一个非常熟悉的WordPress安装屏幕。
- en: Again, Rancher did something interesting here. Remember that we have three hosts
    in total. One of these hosts is running a container that is acting as a load balancer
    for our **ClusterApp**, this is bound to port 80 on one of these hosts.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Rancher在这里做了一些有趣的事情。记住我们总共有三个主机。这里的一个主机正在运行一个作为我们**ClusterApp**负载均衡器的容器，这个容器绑定了端口80。
- en: By default, the WordPress catalog stack launches the WordPress container and
    maps port 80 from the host to port 80 on the container. With no prompting from
    us, Rancher realized that one of our hosts already has a service bound to port
    80, so it didn't even attempt to launch the WordPress container here, instead
    it chose the next available host without a service mapped to port 80 and launched
    our WordPress container there.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，WordPress目录堆栈启动WordPress容器，并将主机的端口80映射到容器的端口80。在没有任何提示的情况下，Rancher意识到我们的一个主机已经绑定了端口80的服务，因此它没有尝试在这里启动WordPress容器，而是选择了下一个没有绑定端口80服务的主机，并在该主机上启动了WordPress容器。
- en: This is another example of Rancher doing tasks in the background to make the
    best use of the resources you have launched.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Rancher在后台执行任务的另一个例子，目的是最大限度地利用你已启动的资源。
- en: Storage
  id: totrans-464
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储
- en: So far so good with Rancher, let's take a look at how we can add some shared
    storage to our installation. One of the things that DigitalOcean doesn't provide
    is block storage, because of which we will need to use a clustered filesystem,
    as we do not want to introduce a single point of failure within our application.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Rancher运行得很好，让我们看看如何为我们的安装添加一些共享存储。DigitalOcean不提供的一项服务是块存储，因此我们需要使用集群文件系统，因为我们不希望在应用程序中引入单点故障。
- en: Note
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Gluster FS is a scalable network filesystem. Using common off-the-shelf hardware,
    you can create large distributed storage solutions for media streaming, data analysis,
    and other data and bandwidth-intensive tasks:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: Gluster FS 是一个可扩展的网络文件系统。通过使用常见的现成硬件，你可以为媒体流媒体、数据分析以及其他数据和带宽密集型任务创建大型分布式存储解决方案：
- en: '[https://www.gluster.org](https://www.gluster.org)'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.gluster.org](https://www.gluster.org)'
- en: 'As you may have noticed when browsing the catalog, there are several storage
    items in there that we are going to be looking at GlusterFS to provide our distributed
    storage:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在浏览目录时可能注意到的，目录中有几个存储项，我们将使用GlusterFS提供我们的分布式存储：
- en: '![Storage](img/B05468_07_72.jpg)'
  id: totrans-470
  prefs: []
  type: TYPE_IMG
  zh: '![Storage](img/B05468_07_72.jpg)'
- en: Once we have our Gluster cluster up and running, we will then use Convoy to
    expose it to our containers. Before we do this, we need to start GlusterFS. To
    do this, click on **View Details** on the **Gluster FS** catalog item.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的Gluster集群启动并运行，我们将使用Convoy将其暴露给我们的容器。在此之前，我们需要启动GlusterFS。为此，点击**查看详情**，然后点击**Gluster
    FS**目录项。
- en: You will be taken to a form that details exactly what is going to be configured
    and how. For our purpose, we can leave all the settings as they are and click
    on the **Launch** button at the bottom of the page.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 您将进入一个表单，详细说明将配置的内容和方式。为了我们的目的，您可以保持所有设置不变，并点击页面底部的**启动**按钮。
- en: 'It will take a few minutes to launch. When it has completed, you will see that
    a total of 12 containers have been created. Of these, six of them will be running
    and the other six will be marked as started. This is not anything to worry about,
    as they are acting as the volumes for the running containers:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 启动过程需要几分钟。当完成时，您将看到总共创建了12个容器。其中六个容器正在运行，其他六个容器标记为已启动。无需担心，这些容器作为运行容器的卷。
- en: '![Storage](img/B05468_07_73.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_IMG
  zh: '![存储](img/B05468_07_73.jpg)'
- en: Now that we have our Gluster FS cluster up and running, we need to launch Convoy
    and let it know about the Gluster FS cluster. Go back to the catalog page and
    click on **View Details** next to the **Convoy Gluster FS** entry.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经让Gluster FS集群启动并运行，接下来我们需要启动Convoy并让它知道关于Gluster FS集群的事情。返回目录页面，点击**查看详情**，然后点击**Convoy
    Gluster FS**条目。
- en: As we kept of the default options and names selected when we launched the Gluster
    FS cluster, we can leave everything at the defaults here, all we have to do is
    select our Gluster FS cluster from the Gluster FS service drop-down menu.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在启动Gluster FS集群时保持了默认选项和名称，因此在这里我们可以将所有内容保持为默认，只需从Gluster FS服务下拉菜单中选择我们的Gluster
    FS集群即可。
- en: 'Once you have made the selection and clicked on **Launch**, it won''t take
    long to download and launch the `convoy-gluster` containers. Once completed, you
    should have four containers running. As you may have noticed, a new icon for **System**
    has appeared next to **Stacks** on the secondary menu, this is where you will
    find your `Convoy Gluster` stack:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您做出选择并点击**启动**，下载并启动`convoy-gluster`容器的过程不会太长。一旦完成，您应该会看到四个容器在运行。正如您可能已经注意到的那样，**系统**的新图标出现在次级菜单的**堆栈**旁边，这里就是您将找到`Convoy
    Gluster`堆栈的地方：
- en: '![Storage](img/B05468_07_74.jpg)'
  id: totrans-478
  prefs: []
  type: TYPE_IMG
  zh: '![存储](img/B05468_07_74.jpg)'
- en: So, we now have our distributed storage ready. Before we put it to use, let's
    look at one more catalog item.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们现在已经准备好分布式存储了。在使用之前，让我们再看一下另一个目录项。
- en: Clustered database
  id: totrans-480
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集群数据库
- en: We don't really want to store our database on a shared or distrusted filesystem,
    one of the other items in the catalog launches a MariaDB Galera Cluster.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不希望将数据库存储在共享或不信任的文件系统上，目录中的另一个项启动了一个MariaDB Galera Cluster。
- en: Note
  id: totrans-482
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Galera Cluster for MySQL is a true Multimaster Cluster based on synchronous
    replication. Galera Cluster is an easy-to-use, high-availability solution that
    provides high-system uptime, no data loss, and scalability for future growth:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的Galera Cluster是基于同步复制的真正的多主集群。Galera Cluster是一种易于使用、高可用的解决方案，提供高系统正常运行时间、无数据丢失和未来扩展的可扩展性：
- en: '[http://galeracluster.com/products/](http://galeracluster.com/products/)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://galeracluster.com/products/](http://galeracluster.com/products/)'
- en: 'The cluster will sit behind a load balancer, meaning that your database requests
    will always be directed to an active master database server. As earlier, click
    on **View Details** on the **Galera Cluster** item and then fill in the database
    credentials you wish the cluster to be configured with. These credentials are
    as follows:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 集群将位于负载均衡器后面，这意味着您的数据库请求将始终被定向到一个活跃的主数据库服务器。如前所述，点击**查看详情**，然后在**Galera Cluster**项中填写您希望集群配置的数据库凭证。这些凭证如下所示：
- en: MySQL Root Password
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL根密码
- en: MySQL Database Name
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL数据库名称
- en: MySQL DB User
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL数据库用户
- en: MySQL DB Password
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL数据库密码
- en: Once filled in, click on the **Launch** button. The cluster will take a few
    minutes to launch. Once launched, it will contain 13 containers, these make up
    the cluster and load balancer.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完毕后，点击**启动**按钮。集群需要几分钟时间启动。启动后，它将包含13个容器，这些容器组成了集群和负载均衡器。
- en: Looking at WordPress again
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 再次查看WordPress
- en: Now that we have our clustered filesystem configured, and also our clustered
    database, let's look at launching WordPress again.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经配置了集群文件系统，并且集群数据库也已准备好，让我们再次看看如何启动WordPress。
- en: To do this, click on **Applications** from the top menu, and then make sure
    that you are on the **Stacks** page, click on **New Stack**.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请从顶部菜单点击**应用程序**，然后确保你在**堆栈**页面，点击**新建堆栈**。
- en: 'From here, give it the name `WordPress` and then click on **Create**, and now
    click on **Add Service**. You will need to fill in the following information:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，给它命名为 `WordPress`，然后点击**创建**，接着点击**添加服务**。你需要填写以下信息：
- en: '**Scale**: `Run 1 container (we will scale up later)`'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规模**：`运行 1 个容器（我们稍后会扩展）`'
- en: '**Name**: `WordPress`'
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：`WordPress`'
- en: '**Description**: `My WordPress cluster`'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：`我的 WordPress 集群`'
- en: '**Select Image**: `wordpress`'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择镜像**：`wordpress`'
- en: '**Port Map**: `Leave the public port blank and add 80 in the private port`'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口映射**：`将公共端口留空，并在私有端口添加 80`'
- en: '**Service Links**: **Destination Service** should your `galera-lb` and the
    **As Name** `galera-lb`'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务链接**：**目标服务**应为你的 `galera-lb`，**作为名称**为 `galera-lb`'
- en: 'We then need to enter the following details on the tabbed options along the
    bottom:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在底部的标签选项中输入以下详细信息：
- en: 'Command:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 命令：
- en: 'Enviroment Vars: Add the following variables:'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量：添加以下变量：
- en: '**Variable** = `WORDPRESS_DB_HOST`'
  id: totrans-504
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量** = `WORDPRESS_DB_HOST`'
- en: '**Value** = `galera-lb`'
  id: totrans-505
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值** = `galera-lb`'
- en: '**Variable** = `WORDPRESS_DB_NAME`'
  id: totrans-506
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量** = `WORDPRESS_DB_NAME`'
- en: '**Value** = The name of the DB you created when setting up Galera'
  id: totrans-507
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值** = 在设置 Galera 时创建的数据库名称'
- en: '**Variable** = `WORDPRESS_DB_USER`'
  id: totrans-508
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量** = `WORDPRESS_DB_USER`'
- en: '**Value** = The user you created when setting up Galera'
  id: totrans-509
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值** = 在设置 Galera 时创建的用户'
- en: '**Variable** = `WORDPRESS_DB_PASSWORD`'
  id: totrans-510
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量** = `WORDPRESS_DB_PASSWORD`'
- en: '**Value** = The password of the user you created when setting up Galera'
  id: totrans-511
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值** = 在设置 Galera 时创建的用户密码'
- en: 'Volumes:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 卷：
- en: Add a volume as `wpcontent:/var/www/html/wp-content/`
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个卷为 `wpcontent:/var/www/html/wp-content/`
- en: 'Volume Driver: convoy-gluster'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷驱动：convoy-gluster
- en: 'Then click on the **Launch** button. It will take a minute to download and
    start the container, once it has started, you should see the status change to
    Active. Once you have a healthy service, click on the drop-down menu next to Add
    Service and add a Load Balancer:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击**启动**按钮。下载并启动容器需要一分钟，启动后，状态应会变为“活动”。当服务健康后，点击“添加服务”旁边的下拉菜单，添加一个负载均衡器：
- en: '**Name**: `WordPressLB`'
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：`WordPressLB`'
- en: '**Description**: `My WordPress Load Balancer`'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：`我的 WordPress 负载均衡器`'
- en: '**Source IP/Port**: `80`'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源 IP/端口**：`80`'
- en: '**Default Target Port**: `80`'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认目标端口**：`80`'
- en: '**Target Service**: `WordPress`'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标服务**：`WordPress`'
- en: Once you have added the Load Balancer, click on the information icon next to
    the Load Balancer service to get the IP address, open this in your browser and
    then perform the WordPress installation, and add the featured image as we have
    done in other chapters.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了负载均衡器，点击负载均衡器服务旁的信息图标获取 IP 地址，在浏览器中打开它，然后执行 WordPress 安装，并添加如其他章节中所示的特色图像。
- en: Now we have a WordPress container up and running with a highly available database
    backend, which we can move between hosts maintaining the same IP address and content
    thanks to the load balancer and Gluster FS storage.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个运行中的 WordPress 容器，并且通过负载均衡器和 Gluster FS 存储，能够在不同主机之间迁移，保持相同的 IP 地址和内容，后端数据库具有高度可用性。
- en: DNS
  id: totrans-523
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DNS
- en: The last catalog item I thought I would cover is one of the DNS managers. What
    these items do is automatically connect with your DNS provider's API and create
    DNS records for each of the stacks and services you launch. As I use Route53 to
    manage my DNS records, I clicked on **View Details** on the **Route53 DNS Stack**
    on the catalog screen.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 我最后要介绍的目录项是 DNS 管理器之一。这些项的作用是自动与 DNS 提供商的 API 连接，并为你启动的每个堆栈和服务创建 DNS 记录。由于我使用
    Route53 管理我的 DNS 记录，我在目录屏幕上点击了**查看详情**，进入了**Route53 DNS 堆栈**。
- en: 'In the *Configuration Options* section, I entered the following information:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 在*配置选项*部分，我输入了以下信息：
- en: '**AWS access key**: My access key, the user must have permission to access
    Route53'
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS 访问密钥**：我的访问密钥，用户必须有权限访问 Route53'
- en: '**AWS secret key**: The secret key that accompanies the preceding access key'
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS 密钥**：与上述访问密钥配套的密钥'
- en: '**AWS region**: The region I want to use'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS 区域**：我想使用的区域'
- en: '**Hosted zone**: The zone I wanted to use was `mckendrick.io`, so I entered
    that here'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**托管区域**：我想使用的区域是`mckendrick.io`，所以我在这里输入了它'
- en: '**TTL**: I left this as the default `299 seconds`, if you want a quicker update
    to your DNS, you should set this to `60 seconds`'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TTL**：我将其保持为默认值 `299 秒`，如果你希望更快更新 DNS，可以将其设置为 `60 秒`'
- en: Then I clicked on the **Launch** button. After a few minutes, I checked the
    hosted zone in the Route53 control panel and the service had connected automatically
    and created the following records for stacks and services I already had running.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我点击了**启动**按钮。几分钟后，我检查了Route53控制面板中的托管区，服务已经自动连接并为我已运行的堆栈和服务创建了以下记录。
- en: 'The DNS entries are formatted in the following way:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: DNS条目按以下方式格式化：
- en: '[PRE49]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'So in my case, I had entries for the following:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在我的情况下，我有以下条目：
- en: '`clusterloadbalancer.default.default.mckendrick.io`'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clusterloadbalancer.default.default.mckendrick.io`'
- en: '`myclusterapp.default.default.mckendrick.io`'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myclusterapp.default.default.mckendrick.io`'
- en: 'As `myclusterapp` contained three containers, three IP addresses were added
    to the entry so that round robin DNS would direct traffic to each container:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`myclusterapp`包含三个容器，所以向条目中添加了三个IP地址，以便轮询DNS会将流量指向每个容器：
- en: '![DNS](img/B05468_07_75.jpg)'
  id: totrans-538
  prefs: []
  type: TYPE_IMG
  zh: '![DNS](img/B05468_07_75.jpg)'
- en: Another good thing about the DNS catalog items is that they are automatically
    updated, meaning that if we were to move a container to a different host, the
    DNS for the container would automatically be updated to reflect the new IP address.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: DNS目录项的另一个优点是它们会自动更新，这意味着如果我们将一个容器移动到不同的主机，容器的DNS会自动更新以反映新的IP地址。
- en: Docker & Rancher Compose
  id: totrans-540
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker & Rancher Compose
- en: Another thing that you may have noticed is that when you go to add a stack,
    Rancher gives you two boxes where you can enter the content of a Docker and Rancher
    Compose file.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还注意到的另一件事是，当你添加堆栈时，Rancher会给你两个框，你可以在其中输入Docker和Rancher Compose文件的内容。
- en: So far, we have been creating services manually using the web interface, for
    each of the stacks we have built up with way you have the option of viewing it
    as a configuration files.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直通过Web界面手动创建服务，对于我们已经构建的每个堆栈，你都有查看它作为配置文件的选项。
- en: 'In the following screenshot, we are looking at the Docker and Rancher compose
    files for our Clustered Application stack. To get this view, click on the icon
    to the left of where it says **Active**:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们查看的是我们集群应用程序堆栈的Docker和Rancher Compose文件。要获得这个视图，点击**活动**旁边的图标：
- en: '![Docker & Rancher Compose](img/B05468_07_76.jpg)'
  id: totrans-544
  prefs: []
  type: TYPE_IMG
  zh: '![Docker & Rancher Compose](img/B05468_07_76.jpg)'
- en: This feature allows you to ship your stacks to other Rancher users. The contents
    of the preceding files are given in the following so that you can try it on your
    own Rachner installation.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能允许你将堆栈传输给其他Rancher用户。以下文件的内容将展示给你，以便你可以在自己的Rancher安装上尝试。
- en: Docker Compose
  id: totrans-546
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker Compose
- en: 'This is a standard version one Docker Compose file, there are Rancher settings
    passed as labels:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个标准版本的Docker Compose文件，传递了作为标签的Rancher设置：
- en: '[PRE50]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Rancher Compose
  id: totrans-549
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rancher Compose
- en: 'The Rancher Compose file wraps the containers defined in the Docker Compose
    file in Rancher services, as you can see where we are defining the health checks
    for both the Load Balancer and Cluster containers:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher Compose文件将Docker Compose文件中定义的容器包装成Rancher服务，如你所见，我们在这里为负载均衡器和集群容器定义了健康检查：
- en: '[PRE51]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Rancher Compose is also the name of the command-line tool that can locally install
    to interact with your Rancher installation. As the command line duplicates the
    functionality, we have already covered, I won't be going into any detail about
    it here; however, if you would like give it a go, complete details about it can
    be found in the official Rancher documentation at [http://docs.rancher.com/rancher/rancher-compose/](http://docs.rancher.com/rancher/rancher-compose/).
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher Compose也是一个命令行工具的名称，可以本地安装并与Rancher安装进行交互。由于命令行复制了我们已经讨论的功能，我在这里不再详细讲解；不过，如果你想尝试，关于它的完整细节可以在官方Rancher文档中找到，地址是[http://docs.rancher.com/rancher/rancher-compose/](http://docs.rancher.com/rancher/rancher-compose/)。
- en: Back to where we started
  id: totrans-553
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回到我们开始的地方
- en: The last task we are going to do using Rancher is to launch a Kubernetes cluster
    in DigitalOcean. As mentioned at the start of the chapter, Rancher not only manages
    its own Cattle clusters, but also Kubernetes and Swarm ones.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Rancher做的最后一项任务是启动一个DigitalOcean中的Kubernetes集群。如本章开始时提到的，Rancher不仅管理自己的Cattle集群，还管理Kubernetes和Swarm集群。
- en: 'To create a Kubernetes cluster, click on the drop-down menu where it says **Environment**,
    underneath your avatar and click on **Add Environment**:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个Kubernetes集群，点击显示**环境**的下拉菜单，在你的头像下方，然后点击**添加环境**：
- en: '![Back to where we started](img/B05468_07_77.jpg)'
  id: totrans-556
  prefs: []
  type: TYPE_IMG
  zh: '![回到我们开始的地方](img/B05468_07_77.jpg)'
- en: On the page, you will be asked which container-orchestration tool would you
    like to use for the environment, what it should be called, and finally who should
    be able to access it.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 在该页面，你将被要求选择要为环境使用哪个容器编排工具，给它命名，以及最终谁可以访问它。
- en: Select Kubernetes, fill in the remaining information, and click on the **Create**
    button. Once you have your second environment, you will be able to check between
    them on the **Environment** drop-down menu.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 Kubernetes，填写剩余信息，并点击 **创建** 按钮。创建第二个环境后，你将能够在 **环境** 下拉菜单中进行切换。
- en: Similar to when we first launched Rancher, we will need to add some hosts that
    will make up our Kubernetes cluster. To do this, click on **Add Host** and then
    enter the details as done earlier, apart from this, time call them Kubernetes
    rather than Rancher.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们第一次启动 Rancher 时，我们需要添加一些主机来组成我们的 Kubernetes 集群。为此，点击 **添加主机**，然后按照之前的方式输入详细信息，唯一不同的是这次要将它们命名为
    Kubernetes，而不是 Rancher。
- en: 'You will then be taken to a screen that looks like the following screenshot:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你将被带到一个看起来像下面截图的页面：
- en: '![Back to where we started](img/B05468_07_78.jpg)'
  id: totrans-561
  prefs: []
  type: TYPE_IMG
  zh: '![回到我们开始的地方](img/B05468_07_78.jpg)'
- en: It will take about 10 minutes to complete the installation. Once it has completed,
    you will be taken to a familiar-looking Rancher screen; however, you will now
    have **Services**, **RCS**, **Pods**, and **kubectl** listed in the secondary
    menu.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成大约需要 10 分钟。完成后，你将进入一个熟悉的 Rancher 页面；不过，你现在会在次级菜单中看到 **服务**、**RCS**、**Pods**
    和 **kubectl**。
- en: 'Clicking on **kubectl** will take you to a page that allows you to run kubectl
    commands in your browser and also you will get an option to download a kubectl
    config file so that you can interact with Kubernetes from your local machine as
    well:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **kubectl** 会带你到一个页面，在该页面上你可以在浏览器中运行 kubectl 命令，并且你将获得一个下载 kubectl 配置文件的选项，这样你就可以从本地机器与
    Kubernetes 进行交互：
- en: '![Back to where we started](img/B05468_07_79.jpg)'
  id: totrans-564
  prefs: []
  type: TYPE_IMG
  zh: '![回到我们开始的地方](img/B05468_07_79.jpg)'
- en: 'Another thing you will notice is that a different catalog has been loaded,
    this is because Docker and Rancher Compose files won''t work with Kubernetes:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个你会注意到的变化是加载了不同的目录，这是因为 Docker 和 Rancher Compose 文件无法与 Kubernetes 一起使用：
- en: '![Back to where we started](img/B05468_07_80.jpg)'
  id: totrans-566
  prefs: []
  type: TYPE_IMG
  zh: '![回到我们开始的地方](img/B05468_07_80.jpg)'
- en: Feel free to launch services like we did in the first part of this chapter or
    use the catalog items to create a service.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 随时可以像本章第一部分那样启动服务，或者使用目录中的项目来创建服务。
- en: Removing the hosts
  id: totrans-568
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除主机
- en: At this point, you will have around seven instances launched in DigitalOcean.
    As we are coming to the end of this chapter, you should terminate all these machines
    so that you do not get charged for resources you are not using.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个时候，你将在 DigitalOcean 上启动大约七个实例。随着本章的结束，你应该终止所有这些机器，这样你就不会为未使用的资源付费。
- en: I would recommend doing this using the DigitalOcean control panel rather than
    through Rancher, that way you can be 100% sure that the Droplets have been successfully
    powered down and removed, meaning that you do not get billed for them.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议通过 DigitalOcean 控制面板来进行操作，而不是通过 Rancher，这样你可以百分百确定 Droplets 已成功关机并删除，这样就不会再为它们付费。
- en: Summing up Rancher
  id: totrans-571
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 Rancher
- en: As you have seen, Rancher is not only an incredibly powerful piece of open source
    software, it is also extremely user-friendly and well-polished.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，Rancher 不仅是一个极其强大的开源软件，它还是一个非常用户友好且精心打磨的工具。
- en: We have only touched on some of the features of Rancher here, for example, you
    can split your hosts between providers to create your own regions, there is a
    full API that allows you to interact with Rancher from your own applications and
    also there is a full command-line interface.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里只触及了 Rancher 的一些功能，例如，你可以将主机划分到不同的提供商中，以创建你自己的区域，还有一个完整的 API 让你可以通过自己的应用程序与
    Rancher 交互，此外还有完整的命令行接口。
- en: For a 1.0 release, it is incredibly feature-rich and stable. I don't think I
    saw it having any problems during my time using it.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个 1.0 版本，它的功能非常丰富且稳定。在我使用的过程中，我没看到它出现任何问题。
- en: If you want a tool that allows you launch your own clusters and then give end
    users, such as developers, access to an intuitive interface, then Rancher is going
    to be a match made in heaven.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一个能够让你启动自己的集群并为终端用户（如开发者）提供直观界面的工具，那么 Rancher 将是一个天作之合。
- en: Summary
  id: totrans-576
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'The three tools that we have looked are not the only schedulers available,
    there are also tools such as the following to name a few:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的这三种工具并不是唯一的调度器，实际上还有一些其他的工具，比如以下几种：
- en: '**Nomad**: [https://www.nomadproject.io/](https://www.nomadproject.io/)'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nomad**: [https://www.nomadproject.io/](https://www.nomadproject.io/)'
- en: '**Fleet**: [https://coreos.com/using-coreos/clustering/](https://coreos.com/using-coreos/clustering/)'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fleet**: [https://coreos.com/using-coreos/clustering/](https://coreos.com/using-coreos/clustering/)'
- en: '**Marathon**: [https://mesosphere.github.io/marathon/](https://mesosphere.github.io/marathon/)'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Marathon**: [https://mesosphere.github.io/marathon/](https://mesosphere.github.io/marathon/)'
- en: All these schedulers have their own requirements, complexities, and use cases.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些调度器都有各自的要求、复杂性和使用场景。
- en: If you had asked me a year ago which of the three schedulers that we have looked
    in this chapter would I recommend, I would have said Amazons EC2 Container Service.
    Kubernetes would have been second and I probably wouldn't have mentioned Rancher.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一年前问我，在我们本章讨论的三个调度器中，我会推荐哪一个，我会说是亚马逊的 EC2 容器服务。Kubernetes 会排在第二，而我可能不会提到
    Rancher。
- en: In the past 12 months, Kubernetes has vastly reduced its complexity when it
    comes to installing the service has removed its biggest barrier to people adopting
    it, and as we have demonstrated, Rancher reduces this complexity even further.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的 12 个月里，Kubernetes 在安装服务的复杂性方面做出了巨大的简化，消除了其最大障碍，使得更多人能够采用它，而正如我们所展示的，Rancher
    进一步简化了这一复杂性。
- en: Unfortunately, this has left EC2 Container Service feeling like it is a lot
    more complex to both configure and operate when compared to the other tools, especially
    as both Kubernetes and Rancher support launching hosts in Amazon Web Services
    and can take advantage of the myriad of supporting services offer by Amazon's
    public cloud.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，与其他工具相比，这使得 EC2 容器服务在配置和操作上显得更加复杂，尤其是因为 Kubernetes 和 Rancher 都支持在亚马逊 Web
    服务上启动主机，并能够利用亚马逊公共云提供的众多支持服务。
- en: In our next and final chapter, we are going to be reviewing all the tools that
    we have looked at throughout the previous chapters, we will come up with some
    use cases as well, and talk about the security considerations that we will need
    to take when using them.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们接下来的最后一章中，我们将回顾之前章节中讨论过的所有工具，我们还将提出一些使用场景，并讨论在使用这些工具时需要考虑的安全问题。
