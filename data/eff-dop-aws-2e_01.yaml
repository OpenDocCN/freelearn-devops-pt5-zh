- en: The Cloud and DevOps Revolution
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算与DevOps革命
- en: 'The technological industry is constantly changing. Although the internet was
    born only a quarter of a century ago, it has already transformed the way that
    we live. Every day, over a billion people visit Facebook; every minute, approximately
    300 hours of video footage are uploaded on YouTube; and every second, Google processes
    approximately 40,000 search queries. Being able to handle such a staggering scale
    isn''t easy. However, this book will provide you with a practical guide for deployment
    philosophy, tooling, or using the best practices of the companies. Through the
    use of **Amazon Web Services** (**AWS**), you will be able to build the key elements
    required to efficiently manage and scale your infrastructure, your engineering
    processes, and your applications, with minimal cost and effort. This first chapter
    will explain the new paradigms of the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 科技行业正在不断变化。尽管互联网仅在二十多年前诞生，但它已经彻底改变了我们的生活方式。每天，有超过十亿人访问Facebook；每分钟，大约有300小时的视频内容被上传到YouTube；每秒，Google处理约40,000个搜索查询。能够处理如此庞大的规模并不容易。然而，本书将为您提供有关部署哲学、工具及采用最佳实践的实用指南。通过使用**Amazon
    Web Services** (**AWS**)，您将能够构建管理和扩展基础设施、工程流程和应用程序所需的关键元素，且花费和精力最小。第一章将介绍以下主题的新范式：
- en: Thinking in terms of the cloud, and not infrastructure
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从云的角度思考，而非从基础设施的角度
- en: Adopting a DevOps culture
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用DevOps文化
- en: Deploying in AWS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS中部署
- en: Thinking in terms of the cloud, and not infrastructure
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从云的角度思考，而非从基础设施的角度
- en: We will now describe a real incident that took place in a datacenter in late
    December, 2011, when dozens of alerts were received from our live monitoring system.
    This was a result of losing connectivity to the datacenter. In response to this,
    administrator rushed to the **Network Operations Center** (**NOC**), hoping that
    it was only a small glitch in the monitoring system. With so much redundancy,
    we may wonder how everything *c**an **go* *offlin**e**.* Unfortunately, the big
    monitoring screens in the NOC room were all red, which is not a good sign. This
    was the beginning of a very long nightmare.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将描述一个发生在2011年12月底的数据中心实际事件，当时我们的实时监控系统收到了数十个警报。这是由于与数据中心的连接丧失所导致的。管理员立即赶往**网络操作中心**
    (**NOC**)，希望这只是监控系统中的一个小故障。由于有如此多的冗余，我们可能会疑惑一切是如何*离线*的。可惜的是，NOC房间的大监控屏幕全部变成了红色，这可不是个好兆头。这是一个非常漫长噩梦的开始。
- en: As it happens, this was caused by an electrician who was working in the datacenter
    and mistakenly triggered the fire alarm. Within seconds of this occurring, the
    fire suppression system set off and released its aragonite on top of the server
    racks. Unfortunately, this kind of fire suppression system made so much noise
    when it released its gas that sound waves instantly killed hundreds of hard drives,
    effectively shutting down the data center facility. It took months to recover
    from this.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这次事故是由一名电工引发的，他在数据中心工作时不小心触发了火警警报。在发生此事件的几秒钟内，灭火系统启动，并将氩气释放到服务器机架上。不幸的是，这种灭火系统在释放气体时发出的噪音太大，声波瞬间摧毁了数百个硬盘，导致数据中心设施彻底停运。恢复过程花费了几个月的时间。
- en: Deploying your own hardware versus in the cloud
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署自有硬件与云端部署
- en: 'It wasn''t long ago that tech companies, small and large, had to have a proper
    technical operations team, able to build infrastructures. The process went a little
    bit like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不久前，大小科技公司都需要有一支合适的技术运营团队，能够搭建基础设施。这个过程大致是这样的：
- en: Fly to the location where you want to set up your infrastructure. Here, take
    a tour of different datacenters and their facilities. Observe the floor considerations,
    power considerations, **Heating, Ventilation, and Air Conditioning** (**HVAC**),
    fire prevention systems, physical security, and so on.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 飞往您希望设置基础设施的地点。在这里，参观不同的数据中心及其设施。观察地板考虑因素、电力考量、**暖通空调** (**HVAC**)、防火系统、物理安全等。
- en: Shop for an internet service provider. Ultimately, you are considering servers
    and a lot more bandwidth, but the process is the same—you want to acquire internet
    connectivity for your servers.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择互联网服务提供商。最终，您需要考虑服务器和更多带宽，但过程是一样的——您希望为您的服务器获取互联网连接。
- en: Once this is done, it's time to buy your hardware. Make the right decisions
    here, because you will probably spend a big portion of your company's money on
    selecting and buying servers, switches, routers, firewalls, storage, UPS (for
    when you have a power outage), KVM, network cables, labeling (which is dear to
    every system administrator's heart), and a bunch of spare parts, hard drives,
    raid controllers, memory, power cables, and so on.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成这一步，就到了购买硬件的时刻。做出正确的决策非常重要，因为你可能会花费公司大部分的资金来选择和购买服务器、交换机、路由器、防火墙、存储、UPS（用于停电时）、KVM、网络电缆、标签（每个系统管理员都重视这一点），以及一堆备件、硬盘、RAID
    控制器、内存、电源线等。
- en: At this point, once the hardware has been purchased and shipped to the data
    center location, you can rack everything, wire all the servers, and power everything on.
    Your network team can kick in and establish connectivity to the new datacenter
    using various links, configuring the edge routers, switches, top of the rack switches,
    KVM, and firewalls (sometimes). Your storage team is next, and will provide the
    much-needed **Network Attached Storage** (**NAS**) or **Storage Area Network**
    (**SAN**). Next comes your sysops team, which will image the servers, upgrade
    the BIOS (sometimes), configure the hardware raid, and finally, put an OS on the
    servers.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到了这一步，一旦硬件购买并运送到数据中心，你就可以将所有设备安装好，连接所有服务器，并启动所有设备。你的网络团队可以开始工作，通过不同的链路为新数据中心建立连接，配置边缘路由器、交换机、机架顶部交换机、KVM
    和防火墙（有时）。接下来是存储团队，他们将提供急需的 **网络附加存储** (**NAS**) 或 **存储区域网络** (**SAN**)。然后是你的系统运维团队，他们将给服务器制作镜像、升级
    BIOS（有时）、配置硬件 RAID，最后安装操作系统。
- en: Not only is this a full-time job for a big team, but it also takes a lot of
    time and money to even get there. As you will see in this book, getting new servers
    up and running with AWS only takes us a few minutes. In fact, you will soon see
    how to deploy and run multiple services in a few minutes, and just when you need
    it, with the *pay-what-you-use* model.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅是一个大团队的全职工作，而且甚至在达到这个目标之前，你还需要花费大量的时间和金钱。正如你在本书中看到的，使用 AWS 启动新的服务器只需要几分钟。实际上，你很快会看到如何在几分钟内部署和运行多个服务，并且仅在需要时使用，采用
    *按需付费* 模式。
- en: Cost analysis
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成本分析
- en: From the perspective of cost, deploying services and applications in a cloud
    infrastructure such as AWS usually ends up being a lot cheaper than buying your
    own hardware. If you want to deploy your own hardware, you have to pay for all
    of the hardware mentioned previously (servers, network equipment, storage, and
    so on) upfront as well as licensed software, in some cases. In a cloud environment,
    *you pay as you go*. You can add or remove servers in no time, and will only be
    charged for the duration in which the servers were running. Also, if you take
    advantage of PaaS and SaaS applications, you will usually end up saving even more
    money by lowering your operating costs, as you won't need as many administrators
    to administrate your servers, database, storage, and so on. Most cloud providers
    (AWS included) also offer tiered pricing and volume discounts. As your service
    grows, you will end up paying less for each unit of storage, bandwidth, and so
    on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从成本角度来看，在像 AWS 这样的云基础设施中部署服务和应用程序通常比购买自己的硬件便宜得多。如果你选择部署自己的硬件，你必须提前支付所有前面提到的硬件费用（服务器、网络设备、存储等），并且在某些情况下，还需要支付许可软件费用。而在云环境中，*按需付费*。你可以迅速添加或移除服务器，且只需为服务器运行的时长付费。此外，如果你利用
    PaaS 和 SaaS 应用程序，你通常会通过降低运营成本节省更多钱，因为你不需要那么多管理员来管理服务器、数据库、存储等。大多数云服务提供商（包括 AWS）还提供分层定价和量大优惠。随着服务的增长，你在每个存储单元、带宽等方面的费用会逐渐减少。
- en: Just-in-time infrastructure
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按需基础设施
- en: As you just saw, when deploying in the cloud, you only pay for the resources
    that you are provided with. Most cloud companies use this to their advantage,
    in order to scale their infrastructure up or down as the traffic to their site
    changes. This ability to add or remove new servers and services in no time and
    on demand is one of the main differentiators of an effective cloud infrastructure.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在云中部署时，你只需为所提供的资源付费。大多数云公司利用这一点，随时根据网站流量的变化调整基础设施的规模。能够随时按需添加或移除新服务器和服务，正是一个高效云基础设施的主要优势之一。
- en: 'In the following example, you can see the amount of traffic at [https://www.amazon.com/](https://www.amazon.com/) during
    the month of November. Thanks to Black Friday and Cyber Monday, the traffic triples
    at the end of the month:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，您可以看到在11月期间，[https://www.amazon.com/](https://www.amazon.com/) 的流量情况。由于黑色星期五和网络星期一，月底时流量增加了三倍：
- en: '![](img/45575d1b-173c-4c70-abb9-ea4a1e1f65c6.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45575d1b-173c-4c70-abb9-ea4a1e1f65c6.png)'
- en: 'If the company were hosting their service in an old-fashioned way, they would
    need to have enough servers provisioned to handle this traffic, so that only 24%
    of their infrastructure would be used during the month, on average:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果公司以传统方式托管其服务，它们将需要预留足够的服务器来处理这种流量，以便在这个月中，平均只有24%的基础设施会被使用：
- en: '![](img/ed590d71-5a58-4a76-8368-29ffdabb34f1.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed590d71-5a58-4a76-8368-29ffdabb34f1.png)'
- en: 'However, thanks to being able to scale dynamically, they can provide only what
    they really need, and then dynamically absorb the spikes in traffic that Black
    Friday and Cyber Monday trigger:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于能够动态扩展，它们仅能提供实际需要的资源，然后动态吸收黑色星期五和网络星期一所带来的流量激增：
- en: '![](img/9eb66db6-a7cd-4393-88bd-ac897ba6eeae.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9eb66db6-a7cd-4393-88bd-ac897ba6eeae.png)'
- en: 'You can also see the benefits of having fast auto-scaling capabilities on a
    very regular basis, across multiple organizations using the cloud. This is again
    a real case study taken by the company *medium*, *very often.* Here, stories become
    viral, and the amount of traffic going on drastically changes. On January 21,
    2015, the White House posted a transcript of the State of the Union minutes before
    President Obama began his speech: [h](http://bit.ly/2sDvseP)[t](http://bit.ly/2sDvseP)[t](http://bit.ly/2sDvseP)[p](http://bit.ly/2sDvseP)[://b](http://bit.ly/2sDvseP)[i](http://bit.ly/2sDvseP)[t](http://bit.ly/2sDvseP)[.](http://bit.ly/2sDvseP)[l](http://bit.ly/2sDvseP)[y](http://bit.ly/2sDvseP)[/2s](http://bit.ly/2sDvseP)[D](http://bit.ly/2sDvseP)[v](http://bit.ly/2sDvseP)[s](http://bit.ly/2sDvseP)[e](http://bit.ly/2sDvseP)[P](http://bit.ly/2sDvseP). As
    you can see in the following graph, thanks to being in the cloud and having auto-scaling
    capabilities, the platform was able to absorb five times the instant spike of
    traffic that the announcement made, by doubling the number of servers that the
    front service used. Later, as the traffic started to drain naturally, you automatically
    removed some hosts from your fleet[:](http://bit.ly/2sDvseP)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以看到，定期在多个组织中使用云服务时，快速自动扩展能力所带来的好处。这又是公司*medium*的一个实际案例，*非常频繁*。在这里，故事会迅速传播，流量大幅变化。2015年1月21日，白宫在总统奥巴马开始演讲前发布了国情咨文的文字记录：[h](http://bit.ly/2sDvseP)[t](http://bit.ly/2sDvseP)[t](http://bit.ly/2sDvseP)[p](http://bit.ly/2sDvseP)[://b](http://bit.ly/2sDvseP)[i](http://bit.ly/2sDvseP)[t](http://bit.ly/2sDvseP)[.](http://bit.ly/2sDvseP)[l](http://bit.ly/2sDvseP)[y](http://bit.ly/2sDvseP)[/2s](http://bit.ly/2sDvseP)[D](http://bit.ly/2sDvseP)[v](http://bit.ly/2sDvseP)[s](http://bit.ly/2sDvseP)[e](http://bit.ly/2sDvseP)[P](http://bit.ly/2sDvseP)。正如您在下图中所看到的，得益于云端和自动扩展能力，平台能够通过将前端服务使用的服务器数量翻倍，吸收公告发布时瞬间的五倍流量激增。随后，当流量自然减少时，您可以自动从您的服务器群中移除一些主机[:](http://bit.ly/2sDvseP)
- en: '![](img/74ecbbd2-ae29-438f-a72a-2ca3818175e8.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74ecbbd2-ae29-438f-a72a-2ca3818175e8.png)'
- en: The different layers of a cloud
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云的不同层次
- en: 'Cloud computing is often broken down into three different types of services,
    generally called **service models**, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算通常分为三种不同类型的服务，通常被称为**服务模型**，如下所示：
- en: '**Infrastructure as a Service** (**IaaS**): This is the fundamental building
    block, on top of which everything related to the cloud is built. IaaS is usually
    a computing resource in a virtualized environment. This offers a combination of
    processing power, memory, storage, and network. The most common IaaS entities
    that you will find are **Virtual Machines** (**VMs**) and network equipment, such
    as load balancers or virtual Ethernet interfaces, and storage, such as block devices.
    This layer is very close to the hardware, and offers the full flexibility that
    you would get when deploying your software outside of a cloud. If you have any
    experience with datacenters, it will also apply mostly  to this layer.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即服务**（**IaaS**）：这是构建云服务的一项基本构件，云中一切的基础都建立在此之上。IaaS通常是一个虚拟化环境中的计算资源，提供处理能力、内存、存储和网络的组合。最常见的IaaS实体是**虚拟机**（**VMs**）和网络设备，如负载均衡器或虚拟以太网接口，以及存储设备，如块存储。该层级非常接近硬件，提供了与将软件部署在云外时相同的灵活性。如果您有数据中心的经验，您会发现这层也大多适用于此。'
- en: '**Platform as a Service** (**PaaS**): This layer is where things start to get
    really interesting with the cloud. When building an application, you will likely
    need a certain number of common components, such as a data store and a queue.
    The PaaS layer provides a number of ready-to-use applications, to help you build
    your own services without worrying about administrating and operating third-party
    services, such as database servers.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台即服务** (**PaaS**)：这一层是云计算中真正有趣的地方。当构建一个应用程序时，你可能需要一些常见的组件，例如数据存储和队列。PaaS
    层提供了许多现成的应用程序，帮助你构建自己的服务，而无需担心管理和操作第三方服务，如数据库服务器。'
- en: '**Software as a Service** (**SaaS**): This layer is the icing on the cake.
    Similar to the PaaS layer, you get access to managed services, but this time,
    these services are a complete solution dedicated to certain purposes, such as
    management or monitoring tools.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件即服务** (**SaaS**)：这一层是锦上添花。与 PaaS 层类似，你可以访问托管服务，但这一次，这些服务是完整的解决方案，专门用于特定目的，如管理或监控工具。'
- en: We would suggest that you go through the *National Institute of Standard and
    Technology (NIST) Definition of Cloud Computing* at [https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-145.pdf](https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-145.pdf) and
    the *NIST Cloud Computing Standards Roadmap* at [https://www.nist.gov/sites/default/files/documents/itl/cloud/NIST_SP-500-291_Version-2_2013_June18_FINAL.pdf](https://www.nist.gov/sites/default/files/documents/itl/cloud/NIST_SP-500-291_Version-2_2013_June18_FINAL.pdf)[.](https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-145.pdf)
    This book covers a fair amount of services of the PaaS and SaaS types. While building
    an application, relying on these services makes a big difference, in comparison
    to the more traditional environment outside of the cloud. Another key element
    to success when deploying or migrating to a new infrastructure is adopting a DevOps
    mindset.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议你阅读 *国家标准与技术研究院（NIST）云计算定义*，链接地址：[https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-145.pdf](https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-145.pdf)，以及
    *NIST 云计算标准路线图*，链接地址：[https://www.nist.gov/sites/default/files/documents/itl/cloud/NIST_SP-500-291_Version-2_2013_June18_FINAL.pdf](https://www.nist.gov/sites/default/files/documents/itl/cloud/NIST_SP-500-291_Version-2_2013_June18_FINAL.pdf)[.](https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-145.pdf)
    这本书涵盖了 PaaS 和 SaaS 类型的多个服务。在构建应用程序时，依赖这些服务与传统的云外环境相比，能带来显著差异。部署或迁移到新基础设施时，另一个成功的关键因素是采纳
    DevOps 思维方式。
- en: Adopting a DevOps culture
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采用 DevOps 文化
- en: Running a company with a DevOps culture is all about adopting the right culture
    to allow developers and the operations team to work together. A DevOps culture
    advocates the implementation of several engineering best practices, by relying
    on tools and technologies that you will discover throughout this book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有 DevOps 文化的公司运营完全依赖于采纳正确的文化，使得开发人员和运维团队能够协同工作。DevOps 文化提倡实施几种工程最佳实践，并依赖于你将在本书中了解的工具和技术。
- en: The origin of DevOps
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 的起源
- en: 'DevOps is a new movement that officially started in Belgium in 2009, when a
    group of people met at the first DevOpsdays conference, organized by Patrick Debois,
    to discuss how to apply some agile concepts to infrastructure. Agile methodologies
    transformed the way software is developed. In a traditional waterfall model, the
    product team would come up with specifications; the design team would then create
    and define a certain user experience and user interface; the engineering team
    would then start to implement the requested product or feature, and would then
    hand off the code to the QA team, who would test and ensure that the code behaved
    correctly, according to the design specifications. Once all the bugs were fixed,
    a release team would package the final code, which would be handed off to the
    technical operations team, to deploy the code and monitor the services over time:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 是一个新的运动，正式开始于 2009 年的比利时，当时一群人在第一次由 Patrick Debois 组织的 DevOpsdays 会议上聚集，讨论如何将一些敏捷概念应用于基础设施。敏捷方法学改变了软件开发的方式。在传统的瀑布模型中，产品团队会提出规格；设计团队随后创建并定义用户体验和用户界面；工程团队会开始实施请求的产品或功能，然后将代码交给
    QA 团队，QA 团队测试并确保代码根据设计规格正确运行。一旦修复了所有的错误，发布团队会将最终的代码打包，并交给技术运维团队，后者负责部署代码并随时间监控服务：
- en: '![](img/6856fdf1-718d-4b86-9a66-6b2bccc189f2.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6856fdf1-718d-4b86-9a66-6b2bccc189f2.jpg)'
- en: 'The increasing complexity of developing certain software and technologies showed
    some limitations with this traditional waterfall pipeline. The agile transformation
    addressed some of these issues, allowing for more interaction between the designers,
    developers, and testers. This change increased the overall quality of the product,
    as these teams now had the opportunity to iterate more on product development.
    However, apart from this, you would still be in a very classical waterfall pipeline,
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 随着某些软件和技术开发复杂性的增加，传统的瀑布式流程暴露出了一些局限性。敏捷转型解决了其中一些问题，使设计师、开发人员和测试人员之间的互动更加频繁。这一变化提高了产品的整体质量，因为这些团队现在有更多的机会对产品开发进行迭代。然而，除了这一点之外，您仍然处于一个非常经典的瀑布式流程中，如下所示：
- en: '![](img/98bd3caf-1314-4649-a720-5e5c3f1e4c3a.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98bd3caf-1314-4649-a720-5e5c3f1e4c3a.jpg)'
- en: All of the agility added by this new process didn't extend past the QA cycles,
    and it was time to modernize this aspect of the software development life cycle.
    This foundational change with the agile process which allows for more collaboration
    between the designers, developers, and QA teams, is what DevOps was initially
    after, but very quickly, the DevOps movement started to rethink how developers
    and operations teams could work together.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由这一新流程所增加的敏捷性并没有超出QA周期，是时候对软件开发生命周期的这一方面进行现代化了。敏捷流程的这一基础性变革，使设计师、开发人员和QA团队之间的合作更加紧密，这正是DevOps最初的目标，但很快，DevOps运动开始重新思考开发人员和运维团队如何能够共同工作。
- en: The developers versus operations dilemma
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发人员与运维团队的困境
- en: In a non-DevOps culture, developers are in charge of developing new products
    and features and maintaining the existing code, but ultimately, they are rewarded
    when their code is shipped. The incentive is to deliver as quickly as possible.
    On the other hand, the operations team, in general, is responsible for maintaining
    the uptime of the production environment. For these teams, change is a negative
    thing. New features and services increase the risk of having an outage, and therefore,
    it is important to move with caution. To minimize the risk of outages, operations
    teams usually  have to schedule any deployments ahead of time, so that they can
    stage and test any production deployment and maximize their chances of success.
    It is also very common for enterprise software companies to schedule maintenance
    windows, and, in these cases, production changes can only be made a few times
    a quarter, half-yearly, or once a year. Unfortunately, many times, deployments
    won't succeed, and there are many possible reasons for that.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在非DevOps文化中，开发人员负责开发新产品和功能，并维护现有代码，但最终，他们只有在代码发布时才能获得奖励。激励措施是尽可能快速地交付。另一方面，运维团队通常负责维护生产环境的正常运行。对于这些团队而言，变更是一件负面的事情。新特性和服务增加了停机的风险，因此，谨慎行动非常重要。为了最大限度地降低停机风险，运维团队通常需要提前安排任何部署，以便他们可以预先部署和测试生产部署，最大化成功的机会。企业软件公司通常会安排维护窗口，在这些情况下，生产变更每季度、半年或每年只能进行几次。不幸的是，许多时候，部署并不会成功，而且这背后有很多可能的原因。
- en: Too much code changing at once
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一次性更改过多代码
- en: 'There is a correlation that can be made between the size of the change and
    the risk of introducing critical bugs into the product, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 变更的规模与引入关键缺陷的风险之间存在一定的相关性，如下所示：
- en: '![](img/0b398e40-2420-49d1-94ca-267dd2bf52a1.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b398e40-2420-49d1-94ca-267dd2bf52a1.jpg)'
- en: Differences in the production environment
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境的差异
- en: It is often the case that the code produced by developers works fine in a development
    environment, but not in production. A lot of the time, this is because the production
    environment is very different from other environments, and some unforeseen errors
    occur. The common mistakes involve the development environment, because services
    are collocated on the same servers, or there isn't the same level of security.
    As a consequence, services can communicate with one another in development, but
    not in production. Another issue is that the development environment might not
    run the same versions of a certain library/software, and therefore, the interface
    to communicate with them might differ. The development environment may be running
    a newer version of a service, which has new features that the production doesn't
    have yet; or it could be simply a question of scale. Perhaps the dataset used
    in development isn't as big as that of production, and scaling issues will crop
    up once the new code is out in production.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 许多时候，开发人员编写的代码在开发环境中工作良好，但在生产环境中却不行。很多时候，这是因为生产环境与其他环境差异很大，可能会出现一些无法预见的错误。常见的错误往往发生在开发环境中，因为服务通常在同一台服务器上共存，或者安全性水平不同。因此，服务在开发环境中可以互相通信，但在生产环境中却不能。另一个问题是开发环境可能运行的是某个库/软件的不同版本，因此与其通信的接口可能不同。开发环境中可能运行的是某个服务的更新版本，包含了生产环境中尚未出现的新功能；或者，这只是一个规模的问题。也许开发环境中使用的数据集没有生产环境中的数据集那么大，一旦新代码投入生产，扩展性问题就会显现出来。
- en: Communication
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沟通
- en: One of the biggest dilemmas in information technology is miscommunication.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 信息技术中的一个最大困境是沟通不畅。
- en: 'The following is according to Conway''s Law:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是根据 Conway 法则：
- en: '"Organizations which design systems are constrained to produce designs which
    are copies of the communication structures of these organizations."'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “设计系统的组织必然会受到这些组织的沟通结构的限制，从而生产出这些沟通结构的复制品。”
- en: '*—Melvin Conway*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*—梅尔文·康威*'
- en: In other words, the product that you are building reflects the communication
    of your organization. A lot of the time, problems don't come from the technology,
    but from the people and organizations surrounding the technology. If there is
    dysfunction among your developers and operations team in the organization, this
    will show. In a DevOps culture, developers and operations have a different mindset.
    They help to break down the silos that surround those teams, by sharing responsibilities
    and adopting similar methodologies to improve productivity. Together, they try
    to automate whatever is possible (not everything, as not everything can be automated
    in a single go) and use metrics to measure their success.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，你所构建的产品反映了你组织的沟通方式。很多时候，问题并不来自于技术，而是来自于围绕技术的人员和组织。如果你的开发团队和运维团队之间存在功能失调，这种问题会显现出来。在
    DevOps 文化中，开发人员和运维人员有着不同的思维方式。他们通过共享责任、采用相似的方法论来打破围绕这些团队的隔阂，从而提高生产力。他们共同努力，尽可能地自动化所有可能的工作（并非一切都能一次性自动化），并使用指标来衡量成功。
- en: Key characteristics of a DevOps culture
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 文化的关键特征
- en: As we have noted, a DevOps culture relies on a certain number of principles.
    These principles are to source control (version control) everything, automate
    whatever is possible, and measure everything.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所提到的，DevOps 文化依赖于一些原则。这些原则包括对一切进行源代码控制（版本控制）、自动化所有可能的工作，并衡量一切。
- en: Source control everything
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一切都进行源代码控制
- en: Revision control software has been around for many decades now, but too often,
    only the product code is checked. When practicing DevOps, not only is the application
    code checked, but configurations, tests, documentation, and all of the infrastructure
    automation needed to deploy the application in all environments, are also checked.
    Everything goes through the regular review process by the **Source Code Manager**
    (**SCM**).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制软件已经存在了数十年，但通常只有产品代码被检查。在实践 DevOps 时，不仅应用代码需要检查，配置、测试、文档以及部署应用所需的所有基础设施自动化也需要检查。一切都经过
    **源代码管理器** (**SCM**) 的常规审查过程。
- en: Automating testing
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试
- en: Automated software testing predates the history of DevOps, but it is a good
    starting point. Too often, developers focus on implementing features and forget
    to add a test to their code. In a DevOps environment, developers are responsible
    for adding proper testing to their code. QA teams can still exist; however, similar
    to other engineering teams, they work on building automation around testing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化软件测试早于DevOps的历史，但它是一个很好的起点。开发人员常常专注于实现功能，却忘记为代码添加测试。在DevOps环境中，开发人员负责为其代码添加适当的测试。QA团队仍然可以存在；然而，像其他工程团队一样，他们的工作是围绕测试构建自动化。
- en: 'This topic could fill its own book, but in a nutshell, when developing code,
    keep in mind that there are four levels of testing automation to focus on, in
    order to successfully implement DevOps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个话题可以写成一本书，但简而言之，在开发代码时，要记住有四个层级的测试自动化需要关注，以便成功实施DevOps：
- en: '**Unit testing**: This is to test the functionality of each code block and
    function.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：这是测试每个代码块和函数的功能。'
- en: '**Integration testing**: This is to make sure that services and components
    work together.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：这是确保服务和组件能够协同工作。'
- en: '**User interface testing**: This is often the most challenging component to
    successfully implement.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户界面测试**：这通常是最具挑战性的组件，成功实现起来最为困难。'
- en: '**System testing**: This is end-to-end testing. For example, in a photo- sharing
    application, the end-to-end testing could be to open the home page, sign in, upload
    a photo, add a caption, publish the photo, and then sign out.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统测试**：这是端到端的测试。例如，在一个照片分享应用程序中，端到端测试可能是打开主页、登录、上传照片、添加标题、发布照片，然后注销。'
- en: Automating infrastructure provisioning and configuration
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化基础设施的供应和配置
- en: In the last few decades, the size of the average infrastructure and the complexity
    of the stack have skyrocketed. Managing infrastructure on an ad-hoc basis, as
    was once possible, is very error-prone. In a DevOps culture, the provisioning
    and configuration of servers, networks, and services in general, are performed
    through automation. Configuration management is often what the DevOps movement
    is known for. However, as you know, this is just a small piece of a big puzzle.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几十年里，平均基础设施的规模和堆栈的复杂性迅速增长。以前能够通过临时管理基础设施的方式，现在已经非常容易出错。在DevOps文化中，服务器、网络和服务的供应和配置通常通过自动化来完成。配置管理通常是DevOps运动的代名词。然而，正如你所知，这只是一个大拼图中的小部分。
- en: Automating deployment
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化部署
- en: As you now, it is easier to write software in small chunks and deploy the new
    chunks as soon as possible, to make sure that they are working. To get there,
    companies practicing DevOps rely on continuous integration and continuous deployment
    pipelines. Whenever a new chunk of code is ready, the continuous integration pipeline
    kicks off. Through an automated testing system, the new code is run through all
    of the relevant, available tests. If the new code shows no obvious regression,
    it is considered valid and can be merged to the main code base. At that point,
    without further involvement from the developer, a new version of the service (or
    application) that includes those new changes will be created and handed off to
    a system called a **continuous deployment system**. The continuous deployment
    system will take the new builds and automatically deploy them to the different
    environments that are available. Depending on the complexity of the deployment
    pipeline, this might include a staging environment, an integration environment,
    and sometimes, a pre-production environment. Ultimately, if everything goes as
    planned (without any manual intervention), this new build will get deployed to
    production.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在所知道的，按小块编写软件并尽早部署这些新块，以确保它们正常工作，变得更加容易。为了实现这一点，实践DevOps的公司依赖于持续集成和持续部署管道。每当新的代码块准备就绪时，持续集成管道便会启动。通过自动化测试系统，新代码会通过所有相关的可用测试。如果新代码没有明显的回归问题，它就被视为有效，并可以合并到主代码库中。到那时，在开发人员无需进一步参与的情况下，包含这些新更改的新版本服务（或应用程序）将被创建，并交给一个称为**持续部署系统**的系统。持续部署系统将接受这些新构建，并将其自动部署到不同的可用环境中。根据部署管道的复杂性，这可能包括预发布环境、集成环境，有时还包括预生产环境。最终，如果一切按计划进行（没有任何手动干预），这个新版本将被部署到生产环境中。
- en: One aspect about practicing continuous integration and continuous deployment that
    often gets misunderstood is that new features don't have to be accessible to users
    as soon as they are developed. In this paradigm, developers heavily rely on feature
    flagging and dark launches. Essentially, whenever you develop new code and want
    to hide it from the end users, you set a flag in your service configuration to
    describe who gets access to the new feature, and how. At the engineering level,
    by dark launching a new feature this way, you can send production traffic to the
    service, but hide it from the UI, to see the impact it has on your database or
    on performance, for example. At the product level, you can decide to enable the
    new feature for only a small percentage of your users, to see if the new feature
    is working correctly and if the users who have access to the new feature are more
    engaged than the control group, for example.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 关于实践持续集成和持续部署的一个常见误解是，新的功能不需要在开发完成后立即向用户开放。在这种模式下，开发人员通常依赖功能标记和暗启动。基本上，每当你开发新的代码并希望隐藏它时，你会在服务配置中设置一个标记，描述谁能访问新功能以及如何访问。在工程层面，通过这种方式进行暗启动，你可以将生产流量发送到服务，但在
    UI 中隐藏它，以查看它对数据库或性能的影响。例如，在产品层面，你可以决定只对一小部分用户启用新功能，以观察新功能是否正常工作，以及使用新功能的用户是否比对照组用户更活跃。
- en: Measuring everything
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 衡量一切
- en: 'Measuring everything is the last major principle that DevOps-driven companies
    adopt. As Edwards Deming said, *you can''t improve what you can''t measure.* DevOps
    is an ever-evolving process and methodology that feeds off those metrics to assess
    and improve the overall quality of the product and the team working on it. From
    a tooling and operating standpoint, the following are some of the metrics most
    organizations look at:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 衡量一切是 DevOps 驱动的公司采用的最后一个主要原则。正如爱德华兹·戴明所说，*你无法改进无法衡量的东西。* DevOps 是一个不断发展的过程和方法论，通过这些指标来评估和改进产品及团队的整体质量。从工具和操作的角度来看，以下是大多数组织关注的一些指标：
- en: How many builds are pushed to production a day
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每天推送到生产环境的构建次数
- en: How often you need to roll back production in your production environment (this
    is indicated when your testing didn't catch an important issue)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境中回滚的频率（当你的测试未能发现一个重要问题时，通常会出现这种情况）
- en: The percentage of code coverage
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码覆盖率的百分比
- en: The frequency of alerts resulting in paging the on-call engineers for immediate
    attention
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发值班工程师立即关注的警报频率
- en: The frequency of outages
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障发生的频率
- en: Application performance
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用性能
- en: The **Mean Time to Resolution** (**MTTR**), which is the speed at which an outage
    or a performance issue can be fixed
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平均修复时间**（**MTTR**），即故障或性能问题修复的速度'
- en: 'At the organizational level, it is also interesting to measure the impact of
    shifting to a DevOps culture. While this is a lot harder to measure, you can consider
    the following points:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织层面，衡量转向 DevOps 文化的影响也很有意义。虽然这很难衡量，但你可以考虑以下几点：
- en: The amount of collaboration across teams
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队之间的协作程度
- en: Team autonomy
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队自主性
- en: Cross-functional work and team efforts
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨职能的工作和团队协作
- en: Fluidity in the product
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品的流动性
- en: How often Dev and Ops communicate
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发与运维之间的沟通频率
- en: Happiness among engineers
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工程师的幸福感
- en: Attitudes towards automation
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对自动化的态度
- en: Obsession with metrics
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对指标的痴迷
- en: As you just learned, having a DevOps culture means, first of all, changing the
    traditional mindset that developers and operations are two separate silos, and
    making the teams collaborate more, during all phases of the software development
    life cycle.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你刚刚所学到的，拥有 DevOps 文化意味着首先要改变传统的思维方式，即开发和运维是两个独立的部门，并且让团队在软件开发生命周期的各个阶段进行更多的合作。
- en: 'In addition to a new mindset, DevOps culture requires a specific set of tools
    geared toward automation, deployment, and monitoring:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 除了新的思维方式外，DevOps 文化还需要一套特定的工具，专注于自动化、部署和监控：
- en: '![](img/472b3e54-bf88-46be-b797-3d162c849696.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/472b3e54-bf88-46be-b797-3d162c849696.png)'
- en: With AWS, Amazon offers a number of services of the PaaS and SaaS types that
    will let us do just that.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWS，亚马逊提供了许多 PaaS 和 SaaS 类型的服务，能帮助我们实现这一目标。
- en: Deploying in AWS
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS 上部署
- en: AWS is at the forefront of cloud providers. Launched in 2006, with SQS and EC2,
    Amazon quickly became the biggest IaaS provider. They have the biggest infrastructure
    and ecosystem, with constant additions of new features and services. In 2018,
    they passed more than a million active customers. Over the last few years, they
    have managed to change peoples mindsets about the cloud, and deploying new services
    to this is now the norm. Using AWS's managed tools and services is a way to drastically
    improve your productivity and keep your team lean. Amazon continually listens
    to its customer's feedback and looks at the market trends. Therefore, as the DevOps
    movement started to get established, Amazon released a number of new services
    tailored toward implementing some DevOps best practices. In this book, you will
    see how these services synergize with the DevOps culture.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 处于云服务提供商的前沿。自2006年推出 SQS 和 EC2 后，亚马逊迅速成为最大的 IaaS 提供商。它们拥有最大的基础设施和生态系统，并且不断增加新的功能和服务。2018年，它们的活跃客户数超过了百万。在过去几年里，AWS
    成功改变了人们对云计算的认知，现在部署新服务已经成为常态。使用 AWS 的托管工具和服务是大幅提升生产力、保持团队精简的方式。亚马逊不断倾听客户反馈并关注市场趋势。因此，当
    DevOps 运动开始普及时，亚马逊发布了多项专门为实施 DevOps 最佳实践而设计的新服务。本书将展示这些服务如何与 DevOps 文化协同作用。
- en: How to take advantage of the AWS ecosystem?
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何利用 AWS 生态系统？
- en: Amazon services are like Lego pieces. If you can picture your final product,
    then you can explore the different services and start combining them, in order
    to build the stack needed to quickly and efficiently build your product. Of course,
    in this case, the *if* is a big if, and, unlike Lego, understanding what each
    piece can do is a lot less visual and colorful. That is why this book is written
    in a very practical way; throughout the different chapters, we are going to take
    a web application and deploy it like it's our core product. You will see how to
    scale the infrastructure supporting it, so that millions of people can use it,
    and also so that you can make it more secure. And, of course, we will do this
    following DevOps best practices. By going through that exercise, you will learn
    how AWS provides a number of managed services and systems to perform a number
    of common tasks, such as computing, networking, load balancing, storing data,
    monitoring, programmatically managing infrastructure and deployment, caching,
    and queuing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊的服务就像乐高积木。如果你能想象最终产品的样子，那么就可以探索不同的服务并将它们组合在一起，从而构建出快速、高效搭建产品所需的技术栈。当然，在这种情况下，*如果*是一个很大的假设，且与乐高不同，理解每个服务的功能远不如乐高积木那样直观和色彩丰富。因此，本书以非常实用的方式编写；在各章节中，我们将以一个
    Web 应用为例，像对待核心产品一样进行部署。你将看到如何扩展支撑它的基础设施，使得数百万用户能够使用，并且让它更安全。当然，我们会按照 DevOps 最佳实践进行操作。通过这一过程，你将了解
    AWS 提供的多种托管服务和系统，帮助完成一系列常见任务，如计算、网络、负载均衡、数据存储、监控、程序化管理基础设施和部署、缓存以及排队等。
- en: How does AWS synergize with a DevOps culture?
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 如何与 DevOps 文化协同？
- en: As you saw earlier in this chapter, having a DevOps culture is about rethinking
    how engineering teams work together, by breaking the development and operations
    silos and bringing a new set of tools, in order to implement the best practices.
    AWS helps to accomplish this in many different ways. For some developers, the
    world of operations can be scary and confusing, but if you want better cooperation
    between engineers, it is important to expose every aspect of running a service
    to the entire engineering organization.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本章之前看到的，DevOps 文化的核心是重新思考工程团队如何协作，通过打破开发与运维之间的壁垒，并引入一组新工具，以便实施最佳实践。AWS 在这方面提供了许多不同的支持。对于一些开发者而言，运维世界可能是令人害怕且让人困惑的，但如果想要更好的工程师合作，就必须将服务运行的各个方面暴露给整个工程团队。
- en: 'As an operations engineer, you can''t have a gatekeeper mentality towards developers.
    Instead, it''s better to make them comfortable by accessing production and working
    on the different components of the platform. A good way to get started with this
    is in the AWS console, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 作为运维工程师，你不能对开发人员抱有守门员的心态。相反，更好的做法是通过让他们接触生产环境、参与平台各个组件的工作来让他们感到舒适。一个很好的起步方式是在
    AWS 控制台中进行操作，如下所示：
- en: '![](img/13f6f0d5-15e8-4f8b-84da-f837e64f98c2.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13f6f0d5-15e8-4f8b-84da-f837e64f98c2.png)'
- en: While a bit overwhelming, this is still a much better experience for people
    who are unfamiliar with navigating this web interface, rather than referring to
    constantly out-of-date documentation, using SSH and random plays in order to discover
    the topology and configuration of the service. Of course, as your expertise grows
    and your application becomes more complex, the need to operate it faster increases,
    and the web interface starts to show some weaknesses. To get around this issue,
    AWS provides a very DevOps-friendly alternative. An API is accessible through
    a command-line tool and a number of SDKs (including Java, JavaScript, Python,
    .NET, PHP, Ruby Go, and C++). These SDKs let you administrate and use the managed
    services. Finally, as you saw in the previous section, AWS offers a number of
    services that fit DevOps methodologies and will ultimately allow us to implement
    complex solutions in no time.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有些让人感到不知所措，但对于不熟悉浏览该 Web 界面的人来说，这仍然是比不断参考过时文档、使用 SSH 和随机操作来发现服务拓扑和配置的体验要好得多。当然，随着你技术的提升和应用的复杂化，操作的需求也会增加，Web
    界面开始暴露出一些弱点。为了解决这个问题，AWS 提供了一个非常适合 DevOps 的替代方案。通过命令行工具和多个 SDK（包括 Java、JavaScript、Python、.NET、PHP、Ruby、Go
    和 C++），可以访问 API。这些 SDK 让你能够管理和使用托管服务。最后，正如你在前一部分看到的，AWS 提供了许多符合 DevOps 方法论的服务，最终将使我们能够在短时间内实现复杂的解决方案。
- en: 'Some of the major services that you will use, at the computing level are Amazon
    **Elastic Compute Cloud** (**EC2**), the service to create virtual servers. Later,
    as you start to look into how to scale the infrastructure, you will discover Amazon
    EC2 Auto Scaling, a service that lets you scale pools on EC2 instances, in order
    to handle traffic spikes and host failures. You will also explore the concept
    of containers with Docker, through Amazon **Elastic Container** **Service** (**ECS**).
    In addition to this, you will create and deploy your application using AWS Elastic
    Beanstalk, with which you retain full control over the AWS resources powering
    your application; you can access the underlying resources at any time. Lastly,
    you will create serverless functions through AWS Lambda, to run custom code without
    having to host it on our servers. To implement your continuous integration and
    continuous deployment system, you will rely on the following four services:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在计算层面使用的主要服务之一是 Amazon **弹性计算云**（**EC2**），这是用于创建虚拟服务器的服务。之后，当你开始考虑如何扩展基础设施时，你会发现
    Amazon EC2 自动扩展，这是一项允许你扩展 EC2 实例池的服务，以应对流量激增和主机故障。你还将通过 Amazon **弹性容器** **服务**（**ECS**）探索容器的概念。除此之外，你将使用
    AWS Elastic Beanstalk 创建和部署应用程序，这样你可以完全控制提供应用程序所需的 AWS 资源；你可以随时访问底层资源。最后，你将通过
    AWS Lambda 创建无服务器函数，运行自定义代码，而无需将其托管在我们的服务器上。为了实现持续集成和持续部署系统，你将依赖以下四项服务：
- en: '**AWS Simple Storage Service** (**S3**): This is the object store service that
    will allow us to store our artifacts'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS 简单存储服务**（**S3**）：这是一个对象存储服务，可以让我们存储工件'
- en: '**AWS CodeBuild:** This will let us test our code'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS CodeBuild:** 这将帮助我们测试我们的代码'
- en: '**AWS CodeDeploy:** This will let us deploy artifacts to our EC2 instances'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS CodeDeploy:** 这将帮助我们将工件部署到我们的 EC2 实例上'
- en: '**AWS CodePipeline:** This will let us orchestrate how our code is built, tested,
    and deployed across environments'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS CodePipeline:** 这将帮助我们协调如何构建、测试和部署代码到不同的环境中'
- en: To monitor and measure everything, you will rely on **AWS CloudWatch, **and
    later, on **ElasticSearch/Kibana**, to collect, index, and visualize metrics and
    logs. To stream some of our data to these services, you will rely on **AWS Kinesis**.
    To send email and SMS alerts, you will use the **Amazon SNS** service. For infrastructure
    management, you will heavily rely on **AWS CloudFormation**, which provides the
    ability to create templates of infrastructures. In the end, as you explore ways
    to better secure our infrastructure, you will encounter **Amazon Inspector** and
    **AWS Trusted Advisor**, and you will explore the IAM and the VPC services in
    more detail.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了监控和衡量一切，你将依赖 **AWS CloudWatch**，稍后还会依赖 **ElasticSearch/Kibana** 来收集、索引和可视化度量数据和日志。为了将一些数据流式传输到这些服务，你将依赖
    **AWS Kinesis**。为了发送电子邮件和短信警报，你将使用 **Amazon SNS** 服务。对于基础设施管理，你将大力依赖 **AWS CloudFormation**，它提供了创建基础设施模板的能力。最终，当你探索如何更好地保护我们的基础设施时，你将遇到
    **Amazon Inspector** 和 **AWS Trusted Advisor**，并将更详细地了解 IAM 和 VPC 服务。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned that adopting a DevOps culture means changing the
    way that traditional engineering and operations teams operate. Instead of two
    isolated teams with opposing goals and responsibilities, companies with a DevOps
    culture take advantage of complementary domains of expertise to better collaborate
    through converging processes and using a new set of tools. These new processes
    and tools include not only automating whatever possible, from testing and deployment
    through to infrastructure management, but also measuring everything, so that you
    can improve each process over time. When it comes to cloud services, AWS is leading
    the catalogue with more services than any other cloud provider. All of these services
    are usable through APIs and SDKs, which is good for automation. In addition, AWS
    has tools and services for each key characteristic of the DevOps culture.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学到的内容是，采用 DevOps 文化意味着改变传统工程和运维团队的工作方式。与两个孤立的、目标和职责相对立的团队不同，拥有 DevOps
    文化的公司通过互补的专业领域来更好地合作，采用新一套流程和工具。这些新流程和工具不仅包括自动化尽可能多的内容，从测试和部署到基础设施管理，还包括对所有内容进行衡量，以便你能随着时间的推移不断改进每个流程。说到云服务，AWS
    在云服务目录中处于领先地位，其服务数量超过其他任何云服务提供商。所有这些服务都可以通过 API 和 SDK 使用，这对自动化非常有利。此外，AWS 为 DevOps
    文化的每个关键特征提供了工具和服务。
- en: In Chapter 2*, Deploying Your First Web Application*, we will finally gets our
    hands dirty and start to use AWS. The final goal of the chapter will be to have
    a Hello World application, accessible to anyone on the internet.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二章《*部署你的第一个 Web 应用*》中，我们将终于动手并开始使用 AWS。本章的最终目标是拥有一个 Hello World 应用，任何人都可以通过互联网访问。
- en: Questions
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is DevOps?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 DevOps？
- en: What is DevOps – IaC?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 DevOps – IaC？
- en: List the key characteristics of a DevOps culture.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出 DevOps 文化的关键特征。
- en: What are the three major service models in the cloud?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云中三个主要的服务模型是什么？
- en: What is the AWS cloud?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 AWS 云？
- en: Further reading
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: You can explore more about AWS services at  [https://aws.amazon.com/products/](https://aws.amazon.com/products/).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://aws.amazon.com/products/](https://aws.amazon.com/products/) 上了解更多有关
    AWS 服务的信息。
