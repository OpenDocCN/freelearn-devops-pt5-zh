- en: Chapter 3. DevOps – Continuous Integration and Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：DevOps – 持续集成与交付
- en: In this lesson, we will learn about implementing DevOps core process such as
    source code repository, code review, artifacts repository, continuous testing,
    continuous development, and continuous integration. We will focus on few popular
    tools such as Git, Jenkins, Maven, Gerrit, Nexus, Selenium, and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们将学习实施 DevOps 核心过程，如源代码仓库、代码审查、工件仓库、持续测试、持续开发和持续集成。我们将重点介绍一些流行工具，如 Git、Jenkins、Maven、Gerrit、Nexus、Selenium
    等。
- en: '**Continuous integration** (**CI**)'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）'
- en: '**Continuous delivery** (**CD**)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）'
- en: Jenkins tool setup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 工具设置
- en: Configuration management-Jenkins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管理—Jenkins
- en: Source code management—Git
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码管理—Git
- en: Build management—Maven
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建管理—Maven
- en: Source code review—Gerrit
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码审查—Gerrit
- en: Repository management—Nexus
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库管理—Nexus
- en: Test Automation—Selenium
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试自动化—Selenium
- en: Continuous deployment—Pipelines
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署—流水线
- en: Jenkins client setup
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 客户端设置
- en: Jenkins security
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 安全性
- en: Jenkins metrics
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 指标
- en: 'Continuous integration and continuous delivery are popular and valuable processes
    to ensure high-quality and timely software delivery. Continuous integration is
    the integrated software development process where multiple developers adhere to
    the agile methodology and adapt it to best practices like the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成与持续交付是确保高质量和及时交付软件的重要且有价值的流程。持续集成是一个集成软件开发过程，其中多个开发者遵循敏捷方法，并将其调整为以下最佳实践：
- en: Ensure all development code is subject to a version control system
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保所有开发代码都受到版本控制系统的管理
- en: An adequate code review process is incorporated
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纳入充分的代码审查流程
- en: Changes to code are integrated, tested, and built quickly
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码更改被快速集成、测试和构建
- en: Build process is integrated to run unit tests and automated
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建过程集成以运行单元测试并自动化
- en: Attend to the build errors immediately, turn around quickly
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立即处理构建错误，迅速恢复
- en: Tracking and Metrics of build results and repository management.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建结果和仓库管理的跟踪与指标
- en: Transparency and a user-friendly build process
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 透明且用户友好的构建过程
- en: Continuous delivery is the process of extending the continuous integration.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是持续集成过程的延伸。
- en: The most current and latest version of the software is readily available
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件的最新版本随时可用
- en: Changes passing through the testing cycle from the technical and quality standpoint
    are ready for deployment
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从技术和质量角度通过测试周期的变更已准备好部署
- en: Automate the shipment and deployment process
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化运输和部署过程
- en: 'The continuous integration process is depicted as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成过程如下图所示：
- en: '![DevOps – Continuous Integration and Delivery](img/00015.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![DevOps – 持续集成与交付](img/00015.jpeg)'
- en: 'The continuous integration process is detailed following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成过程如下所示：
- en: '**The developer''s environment**: Developers create code changes in a local
    workspace with an Integrated Development Environment runtime and with build tools
    physically installed on PC, or a cloud-based (Web IDE). They do unit level testing,
    data validations, code performance checks, and so on. The code changes done by
    the developer are pushed to the source code management system.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者的环境**：开发者在本地工作区中创建代码更改，配有集成开发环境（IDE）运行时以及安装在 PC 上或基于云的（Web IDE）构建工具。开发者进行单元测试、数据验证、代码性能检查等操作。开发者所做的代码更改会推送到源代码管理系统。'
- en: 'The typical continuous integration and deployment cycle is comprises of setting
    up a CI/CD infrastructure and processes as listed:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的持续集成与部署周期包括设置 CI/CD 基础设施和流程，具体如下：
- en: The source code version and repository management system
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码版本与仓库管理系统
- en: A process scheduler to initiate the orchestration pipeline
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于启动编排流水线的进程调度器
- en: A build process to manage code builds and scheduled tests
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于管理代码构建和定期测试的构建过程
- en: Build nodes for executing the build
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行构建的构建节点
- en: Testing process on identified test nodes for automated testing
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在已识别的测试节点上进行自动化测试过程
- en: Build outcome artifact repository
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建结果工件仓库
- en: Artefact repository to store build results
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于存储构建结果的工件仓库
- en: Scenario and acceptance tests on test nodes
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试节点上的场景和验收测试
- en: Application installation with deploy tool on to runtime systems
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用部署工具将应用程序安装到运行时系统
- en: Acceptance tests for applications deployed on the runtime systems
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到运行时系统上的应用程序的验收测试
- en: The quality manager will approve the acceptance tests to agree to deployment
    test systems.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 质量经理将批准接受测试，以便同意部署测试系统。
- en: The delivery manager will approve the application deployment to production.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 交付经理将批准应用程序的生产环境部署。
- en: Best Practices for CI/CD
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 的最佳实践
- en: 'Let''s take a look at the best practices for CI/CD:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 CI/CD 的最佳实践：
- en: '**Using version control**: In collaborative development environments with simultaneous
    development there will be multiple challenges:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用版本控制**：在协作开发环境中，多个开发者同时进行开发时，会遇到许多挑战：'
- en: 'A source code management system defines a single source of truth for the code
    after placing the code under a version control system. The source code will be
    reproducible by effectively adopting the merge process for mainline development
    and loop lines for bug fixes and so on in the system. Git is a popular source
    code management system and GitHub is a cloud variant as a **Software as Service**
    (**SaaS**) model:'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码管理系统在将代码置于版本控制系统下后，定义了代码的单一可信来源。通过有效地采用主干开发和修复分支（如 bug 修复）的合并过程，源代码将能够可复现。Git
    是一个流行的源代码管理系统，GitHub 是其云变种，提供**软件即服务**（**SaaS**）模式：
- en: '**Automate the build**: Standardized automated build procedure will stabilize
    the build process to produces dependable results. The matured build process must
    contain the build description and all the dependencies to execute the build with
    a standardized build tool installation. Jenkins is the most versatile tool for
    build schedules; it offers a convenient UI and also has plug-ins integrating most
    popular tools for continuous integration.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化构建**：标准化的自动化构建程序将稳定构建过程，以产生可靠的结果。成熟的构建过程必须包含构建描述和执行构建所需的所有依赖项，以及标准化构建工具的安装。Jenkins
    是最具通用性的构建工具，它提供方便的用户界面，并且有插件集成了大多数流行的持续集成工具。'
- en: '**Tests in the build**: A few tests are to be performed to validate effectiveness
    and fitness of code beyond just the syntactical correctness of the code as follows:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建中的测试**：需要执行一些测试，以验证代码的有效性和适用性，不仅仅是语法正确性，具体包括：'
- en: Unit tests operate directly on build results
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试直接作用于构建结果
- en: Static code checks on source code prior to developer check-in. Git pre-commit
    triggers or CI system could be used to set up a gating or non-gating check
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发者提交代码之前进行静态代码检查。可以使用 Git 预提交触发器或 CI 系统来设置一个门控或非门控检查。
- en: Scenario tests for new build applications to be installed and started
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对新构建应用程序的场景测试，以确保其能够正确安装并启动
- en: Functional performance of the code
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码的功能性能
- en: Unit test frameworks are popular across source code technologies like JUnit
    for Java. Selenium Framework provides graphical user interfaces and browser behavior.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试框架在源代码技术中非常流行，例如 Java 的 JUnit。Selenium 框架提供图形用户界面和浏览器行为的自动化测试。
- en: Implementing these tests on the developer's workstation early as part of the
    build saves time and effort addressing bugs discovered later in the development
    process.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些测试尽早实施到开发者的工作站作为构建的一部分，可以节省在开发过程中发现 bug 后处理的时间和精力。
- en: '**Early and frequent commit of code**: In a distributed development environment
    with multiple projects, each team or developer intends to integrate their code
    with the mainline. Also, the feature branches change to be integrated into the
    main line. It''s a best practice to integrate code quickly and early. The time
    delay increases between new changes and merging with the mainline will increase
    the risk of product instability, the time taken, and complications as the main-line
    evolves from the baseline. Hence each developer working with the feature branch
    should push their code at least once per day. For main branch inactive projects,
    the high effort for constant rebasing must be evaluated before implementing.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**早期且频繁地提交代码**：在一个有多个项目的分布式开发环境中，每个团队或开发者都打算将他们的代码与主干进行集成。同时，特性分支的更改也需要集成到主干中。快速且早期地集成代码是一种最佳实践。新更改与主干合并的时间延迟会增加产品不稳定的风险，增加时间成本，并且随着主干从基线演变而带来更多复杂性。因此，每个与特性分支协作的开发者每天至少应该提交一次代码。对于主分支上不活跃的项目，必须在实施前评估不断重新基准化的高成本。'
- en: '**Every change to be built**: Developer changes are to be incorporated into
    the mainline, however, they can potentially destabilize the mainline affecting
    its integrity for the developers relying on the main line.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每次更改都要构建**：开发者的更改需要被纳入主干中，但这些更改可能会破坏主干的稳定性，影响依赖主干的开发者的工作。'
- en: Continuous integration addresses this with the best practice of continuous build
    for any code change committed. Any broken build requires immediate action as a
    broken build blocks the entire evolution of the mainline and it will be expensive
    depending on the frequency of commits and such issues. These issues can be minimized
    by enforcing branch level builds.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成通过对每次提交的代码变更进行持续构建来解决这个问题。任何构建失败都需要立即处理，因为构建失败会阻碍主线的演进，而且根据提交频率和问题的严重性，这会变得非常昂贵。通过强制实施分支级构建，可以将这些问题降到最低。
- en: Push for review in Gerrit or pull request in GitHub are effective mechanisms
    to propose changes and check the quality of changes by identifying problems before
    they're pushed into the mainline, causing rework.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Gerrit中发起审核或在GitHub中发起拉取请求是有效的机制，可以提出变更并通过在变更推送到主线之前识别问题来检查变更的质量，避免返工。
- en: '**Address build errors quickly**: The best practice of building at the branch
    level for each change will put the onus on the respective developers to fix their
    code build issues immediately rather than propagate it to the main branch. This
    forms a continuous cycle of Change-Commit-Build-Fix at each respective branch
    level.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速处理构建错误**：为每个变更在分支级别构建的最佳实践会将修复代码构建问题的责任放在各个开发者身上，而不是将问题传播到主分支。这形成了一个持续的“变更-提交-构建-修复”循环，在各自的分支级别进行。'
- en: '**Build fast**: The quick turnaround of builds, results, and tests by automatic
    processes should be vital inputs for the developer workflow; a short wait time
    will be good for the performance of the continuous integration process on overall
    cycle efficiency.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速构建**：自动化过程的快速构建、结果和测试应成为开发者工作流程的关键输入；短时间的等待将有利于持续集成过程的整体周期效率。'
- en: This is a balancing act between integrating new changes securely to the main
    branch and simultaneously building, validating, and scenario testing. At times,
    there could be conflicting objectives so trade-offs need to be achieved to find
    a compromise between different levels of acceptance criteria, considering the
    quality of the mainline is most important. Criteria include syntactical correctness,
    unit tests, and fast-running scenario tests for changes incorporated.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一项平衡工作，在将新变更安全地集成到主分支的同时，还要进行构建、验证和场景测试。有时，可能会存在目标冲突，因此需要通过权衡找到不同接受标准之间的妥协点，考虑到主线质量最为重要。标准包括语法正确性、单元测试和对变更进行快速运行的场景测试。
- en: '**Pre-production run**: Multiple setups and environments at various stages
    of the production pipeline cause errors. This would apply to developer environments,
    branch level build configurations, and central main build environments. Hence
    the machines where scenario tests are performed should be similar and have a comparable
    configuration to the main production systems.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产前运行**：生产流水线各个阶段的多个设置和环境会导致错误。这适用于开发者环境、分支级别构建配置和中央主构建环境。因此，进行场景测试的机器应与主要生产系统相似，并具有可比的配置。'
- en: Manual adherence to an identical configuration is a herculean task; this is
    where DevOps value addition and core value proposition and treat the infrastructure
    setup and configuration similar to writing code. All the software and configuration
    for the machine are defined as source files which enable you to recreate identical
    systems; we will cover them in more detail in [Lesson 4](part0032_split_000.html#UGI02-9e1d43bf5c22491b83b15944fc98f0e3
    "Chapter 4. DevOps Continuous Deployment"), *DevOps Continuous Deployment*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 手动保持一致的配置是一项艰巨的任务；这正是DevOps所带来的价值和核心价值主张，且将基础设施设置和配置视为编写代码的过程。所有机器的软件和配置都定义为源文件，这使得你能够重建相同的系统；我们将在[第4课](part0032_split_000.html#UGI02-9e1d43bf5c22491b83b15944fc98f0e3
    "第4章：DevOps持续部署")中更详细地讲解，*DevOps持续部署*。
- en: 'The build process is transparent: The build status and records of the last
    change must be available to ascertain the quality of the build for everyone. Gerrit
    is a change review tool and can be effectively used to record and track code changes,
    the build status, and related comments. Jenkins flow plugins offer build team
    and developers a complete end to end overview of the continuous integration process
    for source code management tools, the build scheduler, the test landscape, the
    artifact repository, and others as applicable.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建过程是透明的：构建状态和最后一次更改的记录必须对所有人可用，以便确定构建的质量。Gerrit 是一个变更审查工具，可以有效地记录和跟踪代码变更、构建状态和相关评论。Jenkins
    流程插件为构建团队和开发人员提供了完整的端到端概览，涵盖源代码管理工具、构建调度器、测试环境、工件仓库等。
- en: 'Automate the deployment: Installation of the application to a runtime system
    in an automated way is called deployment and there are several ways to accomplish
    this.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化部署：以自动化方式将应用程序安装到运行时系统中称为部署，并且有多种方式可以实现这一点。
- en: Automated scenario tests should be part of the acceptance process for changes
    proposed. These can be triggered by builds to ensure product quality.
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化场景测试应该是变更提议的验收过程的一部分。这些测试可以通过构建触发，以确保产品质量。
- en: Multiple runtime systems like JEE servers are set up to avoid single-instance
    bottlenecks of serializing test requests and the ability to run parallel test
    queries. Using a single system also has associated overheads in recreating the
    environment with change overhead for every test case, causing a degeneration a
    performance.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置多个运行时系统，如 JEE 服务器，避免单实例瓶颈，能够并行运行测试查询。使用单个系统还会产生重新创建环境和每个测试用例变更开销的负担，导致性能退化。
- en: Docker or container technology to install and start runtime systems on demand
    in well-defined states, to be removed afterward.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker 或容器技术按需安装和启动运行时系统，并在定义明确的状态下运行，然后移除。
- en: Automated test cases, since the frequency and time of validations of new comments,
    is not predictable in most cases, so scheduling daily jobs at a given time is
    an option to explore, where the build is deployed to a test system and notified
    after successful deployment.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试用例，由于新评论的验证频率和时间在大多数情况下是不可预测的，因此在给定时间调度每日任务是一个可以探索的选项，在此过程中构建会被部署到测试系统并在成功部署后通知。
- en: The deployment to production is a manual conscious decision satisfying all quality
    standards and ensure the change is appropriate to be deployed to production. If
    it can also be automated with confidence, that's the highest accomplishment of
    automated continuous deployment too.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到生产环境是一个人工有意识的决定，满足所有质量标准并确保更改适合部署到生产环境。如果可以自信地实现自动化，这也是自动化持续部署的最高成就。
- en: Continuous delivery means that any change integrated is validated adequately
    so that it is ready to be deployed to production. It doesn't require every change
    to be deployed to production automatically.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付意味着每个集成的变更都经过充分验证，确保它可以部署到生产环境。这并不要求每个变更都自动部署到生产环境。
- en: Jenkins Setup
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 设置
- en: 'We will start with Jenkins as it''s the core component of the continuous integration
    process. The Jenkins process workflow is shown as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Jenkins 开始，因为它是持续集成过程中的核心组件。Jenkins 的处理流程如下所示：
- en: '![Jenkins Setup](img/00016.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins 设置](img/00016.jpeg)'
- en: 'See the Jenkins homepage at: [https://jenkins.io/index.html](https://jenkins.io/index.html),
    shown as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 Jenkins 首页：[https://jenkins.io/index.html](https://jenkins.io/index.html)，如下所示：
- en: '![Jenkins Setup](img/00017.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins 设置](img/00017.jpeg)'
- en: Prerequisites to Install Jenkins
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Jenkins 的前提条件
- en: 'Jenkins installation and configuration requirements should be planned well
    as prescribed on the Jenkins homepage based on the following parameters:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 的安装和配置要求应根据以下参数进行充分规划，如 Jenkins 首页所述：
- en: Operating system--Linux versions of Ubuntu/Debian, Red Hat/Fedora/CentOS, openSUSE,
    FreeBSD, OpenBSD, Gentoo, Windows, macOS X
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统—Linux 版本（Ubuntu/Debian、Red Hat/Fedora/CentOS、openSUSE、FreeBSD、OpenBSD、Gentoo）、Windows、macOS
    X
- en: JDK version
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 版本
- en: Memory
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存
- en: Disk space
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘空间
- en: Java Containers--The Jenkins WAR file can run on any servlet-supported engine
    such as tomcat or Glassfish application servers.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 容器—Jenkins WAR 文件可以在任何支持 Servlet 的引擎上运行，如 Tomcat 或 Glassfish 应用服务器。
- en: 'Jenkins can be installed in different modes as per its utility:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 可以根据其用途以不同的方式安装：
- en: '**Standalone**: Jenkins can run standalone in its own process using its own
    built-in web server (Jetty) for experimentation and small projects'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立运行**：Jenkins 可以在其自己的进程中独立运行，使用内置的 Web 服务器（Jetty）进行实验和小项目。'
- en: '**Servlet-based**: It can also run as one servlet framework for development
    projects'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于 Servlet**：它还可以作为一个 Servlet 框架运行，用于开发项目。'
- en: '**Multi-node setup for staging or production**: Distributed client-server setup;
    the Jenkins advanced installation procedure is recommended'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用于预发布或生产的多节点设置**：分布式客户端-服务器设置；建议使用 Jenkins 的高级安装程序。'
- en: Standalone Installation
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独立安装
- en: 'A standalone installation as suggested in the name is all by itself on a single
    machine (as opposed to multiple systems for different tasks):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如名称所示，独立安装是在单台机器上独立进行的（与为不同任务使用多个系统相对）：
- en: Standalone installation requires JDK to be installed on the system.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 独立安装要求系统已安装 JDK。
- en: Download the `Jenkins.war` file.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 `Jenkins.war` 文件。
- en: 'Open the command prompt and, at the location of the `Jenkins.war` file, run
    the command:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符，在 `Jenkins.war` 文件所在位置运行以下命令：
- en: '[PRE0]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Standalone Installation](img/00018.jpeg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![独立安装](img/00018.jpeg)'
- en: 'During initialization, a few tasks will run and the following screen will appear
    during the installation process:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化过程中，将运行一些任务，并且在安装过程中会出现以下屏幕：
- en: The initial screen page will ask about the plugin options:![Standalone Installation](img/00019.jpeg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始屏幕页面会询问插件选项：![独立安装](img/00019.jpeg)
- en: Plugins will be installed as per the selected configuration in the preceding
    option:![Standalone Installation](img/00020.jpeg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件将根据前述选项中的配置进行安装：![独立安装](img/00020.jpeg)
- en: After successful installation, the following admin credential creation page
    will pop up:![Standalone Installation](img/00021.jpeg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装成功后，将弹出以下管理员凭证创建页面：![独立安装](img/00021.jpeg)
- en: '**Accessing Jenkins**: After successful installation, Jenkins can be accessed
    through a web browser from your local machine as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**访问 Jenkins**：安装成功后，可以通过本地机器的 Web 浏览器访问 Jenkins，如下所示：'
- en: '`http://localhost:8080`'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8080`'
- en: The Jenkins dashboard will open at this link:![Standalone Installation](img/00022.jpeg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 仪表板将通过此链接打开：![独立安装](img/00022.jpeg)
- en: The **Manage Jenkins** option in the dashboard will provide various options
    to configure various parameters:![Standalone Installation](img/00023.jpeg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仪表板中的 **管理 Jenkins** 选项将提供各种配置参数的选项：![独立安装](img/00023.jpeg)
- en: The **Manage Plugins** option in the dashboard is an important option with a
    very wide choice of plugins to integrate with source code systems, authentication
    systems, various development platforms, and so on.![Standalone Installation](img/00024.jpeg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仪表板中的 **管理插件** 选项是一个重要选项，提供了大量插件选择，用于与源代码系统、认证系统、各种开发平台等进行集成。![独立安装](img/00024.jpeg)
- en: Installing Jenkins on a Servlet Engine needs the installation of Tomcat or Glassfish.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Servlet 引擎上安装 Jenkins 需要安装 Tomcat 或 Glassfish。
- en: '![Standalone Installation](img/00025.jpeg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![独立安装](img/00025.jpeg)'
- en: Copy the `Jenkins.war` file it to the web apps folder in the `tomcat` folder.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Jenkins.war` 文件复制到 `tomcat` 文件夹中的 web apps 文件夹。
- en: Start the Tomcat server from the Tomcat `bin` directory.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Tomcat `bin` 目录启动 Tomcat 服务器。
- en: '`http://localhost:8080/Jenkins` --access Jenkins on Tomcat server.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/Jenkins` --在 Tomcat 服务器上访问 Jenkins。'
- en: Linux System Installation on Ubuntu
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上的 Linux 系统安装
- en: 'Log into the server and update: `sudo apt-get -y update`.'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到服务器并更新：`sudo apt-get -y update`。
- en: 'Install Java: `sudo apt-get install -y default-jdk`.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Java：`sudo apt-get install -y default-jdk`。
- en: 'Download an Ubuntu version from `Jenkins-ci.org` site using the `wget` command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `wget` 命令从 `Jenkins-ci.org` 网站下载 Ubuntu 版本：
- en: '[PRE1]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Package install `sudo dpkg - i Jenkins.zip`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包安装 `sudo dpkg - i Jenkins.zip`。
- en: Dependency resolve by `sudo apt - get -f install`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `sudo apt - get -f install` 解决依赖问题。
- en: Access Jenkins on port `http://localhost:8080/Jenkins`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过端口 `http://localhost:8080/Jenkins` 访问 Jenkins。
- en: Continue with the steps listed in preceding figure.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照前面的图示继续操作。
- en: To initialize Jenkins at startup, add the command `/etc/init.d/jenkins` start
    in `/etc/rc.local` file.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在启动时初始化 Jenkins，请在 `/etc/rc.local` 文件中添加命令 `/etc/init.d/jenkins` start。
- en: Git (SCM) Integration with Jenkins
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git (SCM) 与 Jenkins 集成
- en: 'Git is the most popular source code management system and offers extensive
    benefits such as:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是最流行的源代码管理系统，提供了广泛的好处，例如：
- en: Version control lets you maintain multiple versions of the code for different
    purposes
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制使您能够维护多个版本的代码，用于不同的目的。
- en: A code repository is required to keep all project-related code in one place
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要一个代码库来将所有与项目相关的代码集中存放。
- en: Collaboration among users and intervention for debugging purposes
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户间的协作以及调试过程中的干预。
- en: 'Git can be downloaded from [https://git-scm.com/downloads](https://git-scm.com/downloads):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从[https://git-scm.com/downloads](https://git-scm.com/downloads)下载 Git：
- en: '![Git (SCM) Integration with Jenkins](img/00026.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![Git（SCM）与 Jenkins 集成](img/00026.jpeg)'
- en: Multiple platforms versions such as Linux, Windows, and so on are available
    within desktop and web flavors.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可在桌面版和 Web 版中使用多个平台版本，如 Linux、Windows 等。
- en: 'There can be multiple types of repositories:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库可以有多种类型：
- en: A public repository created on GitHub can give read access to everyone but write
    or commit access is given to chosen individuals or groups
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 GitHub 上创建的公共仓库可以允许每个人访问读取权限，但写入或提交权限仅授予选定的个人或组。
- en: A private repository permits collaborators for participation and is a paid subscription
    to GitHub
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有仓库允许协作者参与，并且需要订阅 GitHub 的付费服务。
- en: A local repository is a desktop version without the need for an internet connection
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地仓库是桌面版本，不需要互联网连接。
- en: A remote repository is a web-based repository for extended features like issue
    management and pull requests
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程仓库是一个基于 Web 的仓库，提供了如问题管理和拉取请求等扩展功能。
- en: GitHub provides options to synchronize code changes from a single computer or
    between multiple computers.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 提供选项，可以从单台计算机或多台计算机之间同步代码更改。
- en: Pull changes will sync code changes from a desktop with an online repository
    and clone options will create a new copy of the repository on the computer.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取更改将同步桌面与在线仓库之间的代码更改，而克隆选项将创建仓库的新副本到本地计算机。
- en: Performing these tasks enables us to maintain source code on cloud-based SaaS
    system
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些任务使我们能够在基于云的 SaaS 系统中维护源代码。
- en: Create a sign-in account on GitHub.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitHub 上创建一个登录账户。
- en: Create a project repository for organizing your project-related code.![Git (SCM)
    Integration with Jenkins](img/00027.jpeg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个项目仓库来组织与你项目相关的代码。![Git（SCM）与 Jenkins 集成](img/00027.jpeg)
- en: Integrating GitHub with Jenkins
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 GitHub 与 Jenkins 集成
- en: 'To integrate a GitHub repository with Jenkins, follow these steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 若要将 GitHub 仓库与 Jenkins 集成，请按以下步骤操作：
- en: In **Manage Plugins**, search for Git plugin under the filter section and install
    it.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**管理插件**中，在筛选器部分搜索 Git 插件并安装。
- en: If it's installed by default, we can find it on the **Installed** tab as follows:![Integrating
    GitHub with Jenkins](img/00028.jpeg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果默认已安装，我们可以在**已安装**标签下找到它，如下所示：![将 GitHub 与 Jenkins 集成](img/00028.jpeg)
- en: After Jenkins is restarted, create new item on the Jenkins home page will give
    the following screen:![Integrating GitHub with Jenkins](img/00029.jpeg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jenkins 重启后，创建新项目时，Jenkins 主页面会显示如下画面：![将 GitHub 与 Jenkins 集成](img/00029.jpeg)
- en: Select a job name and the next screen will show Git options as following, under
    the **Source Code Management** tab. You can add other SCM tools like CVS, subversion,
    and so on, in a similar manner:![Integrating GitHub with Jenkins](img/00030.jpeg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个工作名称，接下来的页面将显示如下 Git 选项，位于**源代码管理**标签下。你可以以类似的方式添加其他 SCM 工具，如 CVS、Subversion
    等：![将 GitHub 与 Jenkins 集成](img/00030.jpeg)
- en: Enter the Git repository address of the local machine or a web link in the preceding
    repository URL placeholder to configure Git with Jenkins.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前述的仓库 URL 占位符中输入本地计算机的 Git 仓库地址或 Web 链接，以配置 Git 与 Jenkins 的集成。
- en: Maven (Build) Tool Integration with Jenkins
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven（构建）工具与 Jenkins 集成
- en: 'Let''s perform the following steps for Maven (build) tool integration with
    Jenkins:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，将 Maven（构建）工具与 Jenkins 集成：
- en: Download Maven from [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi);
    this is the latest version of the binary file:![Maven (Build) Tool Integration
    with Jenkins](img/00031.jpeg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi)下载
    Maven，这是最新的二进制文件版本：![Maven（构建）工具与 Jenkins 集成](img/00031.jpeg)
- en: Extract the downloaded Maven file to a folder.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的 Maven 文件解压到一个文件夹中。
- en: Open **Manage Jenkins**:![Maven (Build) Tool Integration with Jenkins](img/00032.jpeg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**管理 Jenkins**：![Maven（构建）工具与 Jenkins 集成](img/00032.jpeg)
- en: Select Maven Plugins as follows and install them without the restart option.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按照如下选择 Maven 插件并安装，不要选择重启选项。
- en: '![Maven (Build) Tool Integration with Jenkins](img/00033.jpeg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Maven（构建）工具与 Jenkins 集成](img/00033.jpeg)'
- en: Monitor plugin progress as follows:![Maven (Build) Tool Integration with Jenkins](img/00034.jpeg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控插件进度如下所示：![Maven（构建）工具与 Jenkins 集成](img/00034.jpeg)
- en: Under **Configure** tools, add Maven by giving the repository location:![Maven
    (Build) Tool Integration with Jenkins](img/00035.jpeg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **配置** 工具下，通过提供仓库位置添加 Maven：![与 Jenkins 集成的 Maven（构建）工具](img/00035.jpeg)
- en: Create a new item job with the Maven project option:![Maven (Build) Tool Integration
    with Jenkins](img/00036.jpeg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Maven 项目选项创建一个新项目：![与 Jenkins 集成的 Maven（构建）工具](img/00036.jpeg)
- en: The Maven option in build environment is as follows:![Maven (Build) Tool Integration
    with Jenkins](img/00037.jpeg)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建环境中的 Maven 选项如下：![与 Jenkins 集成的 Maven（构建）工具](img/00037.jpeg)
- en: The project is created as follows:![Maven (Build) Tool Integration with Jenkins](img/00038.jpeg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目按以下方式创建：![与 Jenkins 集成的 Maven（构建）工具](img/00038.jpeg)
- en: Building Jobs with Jenkins
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 构建作业
- en: 'Let''s perform the following steps for building jobs with Jenkins:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤使用 Jenkins 构建作业：
- en: A simple application builds and runs the program:![Building Jobs with Jenkins](img/00039.jpeg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个简单的应用程序构建并运行程序：![使用 Jenkins 构建作业](img/00039.jpeg)
- en: The source code repository options as listed as follows:![Building Jobs with
    Jenkins](img/00040.jpeg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是列出的源代码仓库选项：![使用 Jenkins 构建作业](img/00040.jpeg)
- en: We can specify the location of files which need to be built either from a source
    Git code repository or the URL from GitHub:![Building Jobs with Jenkins](img/00041.jpeg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以指定需要构建的文件位置，可以选择从源 Git 代码仓库或 GitHub 的 URL 中获取：![使用 Jenkins 构建作业](img/00041.jpeg)
- en: Builds can be executed with multiple options, command modes, and Maven and so
    on:![Building Jobs with Jenkins](img/00042.jpeg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过多种选项、命令模式和 Maven 等执行构建：![使用 Jenkins 构建作业](img/00042.jpeg)
- en: Command-line programs can be executed as follows:![Building Jobs with Jenkins](img/00043.jpeg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令行程序可以如下执行：![使用 Jenkins 构建作业](img/00043.jpeg)
- en: After saving, the build option is visible, and history is also available:![Building
    Jobs with Jenkins](img/00044.jpeg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存后，构建选项可见，并且历史记录也可以查看：![使用 Jenkins 构建作业](img/00044.jpeg)
- en: Build progress can be seen and repository available as follows:![Building Jobs
    with Jenkins](img/00045.jpeg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以看到构建进度并且仓库可用，如下所示：![使用 Jenkins 构建作业](img/00045.jpeg)
- en: Source Code Review – Gerrit
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码审查 – Gerrit
- en: Code review is an important function in the software development framework.
    Having a good collaborative tool like Gerrit for a code review process is very
    appropriate and needed. Gerrit initiates a pull-based workflow to initiate change
    requests, wherein comments are included even for source code to allow the change
    to be merged into the code repository through the workflow process. Gerrit maintains
    a local repository of the mirrored Git project repositories with reference repositories.
    Gerrit creates another maintenance branch from master branch to track reviews
    to the code; it creates a change-id identifier for the commit message to keep
    track of each change in a code review.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查是软件开发框架中的一个重要功能。拥有像 Gerrit 这样的良好协作工具来进行代码审查过程非常合适且必要。Gerrit 发起一个基于拉取的工作流来启动变更请求，在该过程中，即使是源代码也会包含评论，以便通过工作流过程将变更合并到代码仓库中。Gerrit
    维护一个镜像 Git 项目仓库的本地仓库和参考仓库。Gerrit 从主分支创建另一个维护分支来跟踪代码的审查；它为提交信息创建一个 change-id 标识符，以跟踪每次代码审查中的变更。
- en: 'Gerrit allows for code change comparisons and a reviewer can give one of five
    ratings:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Gerrit 允许进行代码变更比较，审阅者可以给出五个评分之一：
- en: '**+2**: Looks good, approved'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**+2**：看起来不错，已批准'
- en: '**+1**: Looks good, but needs additional approval'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**+1**：看起来不错，但需要额外的审批'
- en: '**0**: No comments'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**0**：没有评论'
- en: '**-1**: Suggest not submit this'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-1**：建议不要提交'
- en: '**-2**: Block the submit![Source Code Review – Gerrit](img/00046.jpeg)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-2**：阻止提交![源代码审查 – Gerrit](img/00046.jpeg)'
- en: Installation of Gerrit
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gerrit 安装
- en: 'Let''s perform the following steps to install Gerrit:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤安装 Gerrit：
- en: Download Gerrit from [https://www.gerritcodereview.com/](https://www.gerritcodereview.com/).
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://www.gerritcodereview.com/](https://www.gerritcodereview.com/) 下载
    Gerrit。
- en: Follow the installation instructions as per the platform option and access Gerrit
    on port `8080` as follows to create users and projects:![Installation of Gerrit](img/00047.jpeg)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据平台选项按照安装说明进行操作，并通过端口 `8080` 访问 Gerrit，如下所示，以创建用户和项目：![Gerrit 安装](img/00047.jpeg)
- en: Configure in Jenkins under **Manage Plugins** for Gerrit:![Installation of Gerrit](img/00048.jpeg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jenkins 中的 **管理插件** 下配置 Gerrit：![Gerrit 安装](img/00048.jpeg)
- en: Version control tools listed in the [Lesson 2](part0014_split_000.html#DB7S1-9e1d43bf5c22491b83b15944fc98f0e3
    "Chapter 2. DevOps Framework"), *DevOps Framework*, for example Gerrit the web-based
    code review interface, allow reviewing changes online to push changes from any
    Git client and then auto-merging them with the master; it can also be configured
    as a remote Git repository.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Lesson 2](part0014_split_000.html#DB7S1-9e1d43bf5c22491b83b15944fc98f0e3
    "Chapter 2. DevOps Framework") 中列出的版本控制工具，例如 Gerrit，这是一个基于 Web 的代码审查界面，允许在线审查更改以从任何
    Git 客户端推送更改，然后与主分支自动合并；它也可以配置为远程 Git 仓库。
- en: Gerrit configuration includes user creation, Secure Shell (SSH) set up to exchange
    data with a Gerrit server. The configuration file `/etc/gerrit.config` has extensive
    parameters you need to set as per configuration requirements.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Gerrit 的配置包括用户创建，设置 Secure Shell（SSH）以与 Gerrit 服务器交换数据。配置文件 `/etc/gerrit.config`
    包含了需要根据配置需求设置的广泛参数。
- en: Repository Management
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仓库管理
- en: Maintaining multiple build version artifacts is the key feature of repository
    management and Nexus is a popular repository manager. It can be downloaded from
    [http://www.sonatype.org/nexus/downloads/](http://www.sonatype.org/nexus/downloads/).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 维护多个构建版本的制品是仓库管理的关键特性，而 Nexus 是一个流行的仓库管理器。可以从 [http://www.sonatype.org/nexus/downloads/](http://www.sonatype.org/nexus/downloads/)
    下载它。
- en: 'After installation, it can be accessed from `http://<nexus host>:8081/nexus`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，可以从 `http://<nexus host>:8081/nexus` 访问：
- en: '![Repository Management](img/00049.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![仓库管理](img/00049.jpeg)'
- en: 'Nexus can be configured with plugins for Jenkins integration:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Nexus 可以配置插件用于 Jenkins 集成：
- en: '![Repository Management](img/00050.jpeg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![仓库管理](img/00050.jpeg)'
- en: Testing with Jenkins
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 进行测试
- en: 'Jenkins provides many out-of-the-box functionalities and plugins for testing.
    The site [https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin](https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin)
    provides the plugins:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 提供许多开箱即用的功能和测试插件。该网站 [https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin](https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin)
    提供了这些插件：
- en: '![Testing with Jenkins](img/00051.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Jenkins 进行测试](img/00051.jpeg)'
- en: 'A list of available testing plugins is shown as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了一系列可用的测试插件：
- en: JUnit itself
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JUnit 本身
- en: AUnit
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AUnit
- en: MSTest (imported from MSTest Plugin)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSTest（从 MSTest 插件导入）
- en: NUnit (imported from NUnit Plugin)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NUnit（从 NUnit 插件导入）
- en: UnitTest++
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UnitTest++
- en: Boost Test Library
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Boost Test Library
- en: PHPUnit
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHPUnit
- en: Free Pascal Unit
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Free Pascal Unit
- en: CppUnit
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CppUnit
- en: MbUnit
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MbUnit
- en: Google test
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 测试
- en: EmbUnit
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EmbUnit
- en: gtester/glib
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gtester/glib
- en: QTestLib
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QTestLib
- en: Setting up Unit Testing
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置单元测试
- en: 'Let''s perform the following steps to set up unit testing:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来设置单元测试：
- en: Pick up the project we have set up:![Setting up Unit Testing](img/00052.jpeg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们设置的项目：![设置单元测试](img/00052.jpeg)
- en: Choose build option:![Setting up Unit Testing](img/00053.jpeg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择构建选项：![设置单元测试](img/00053.jpeg)
- en: Choose an **Advanced** option:![Setting up Unit Testing](img/00054.jpeg)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个 **高级** 选项：![设置单元测试](img/00054.jpeg)
- en: Enter the location of `build.xml`:![Setting up Unit Testing](img/00055.jpeg)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `build.xml` 的位置：![设置单元测试](img/00055.jpeg)
- en: Select the option of post-build option and choose **Publish JUnit test result
    report**:![Setting up Unit Testing](img/00056.jpeg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择后构建选项，并选择 **发布 JUnit 测试结果报告**：![设置单元测试](img/00056.jpeg)
- en: In the test `reports.xml`, enter the reports created a folder in our project
    so that Jenkins picks the resulting XML files produced by running of the JUnit
    test cases:![Setting up Unit Testing](img/00057.jpeg)
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试 `reports.xml` 中，将报告创建文件夹放入我们项目中，以便 Jenkins 检索通过运行 JUnit 测试用例生成的 XML 文件：![设置单元测试](img/00057.jpeg)
- en: We can select the build and drill-down to the test results.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择构建并深入到测试结果。
- en: Automated Test Suite
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化测试套件
- en: Continuous integration is the process of verifying a build to objectively access
    its readiness for the next level; this is accomplished with automated testing.
    So, the build artifacts are set to be tested automatically; Selenium is the most
    popular framework for this.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是验证构建以客观评估其进入下一级别准备就绪的过程；这通过自动化测试完成。因此，构建制品被设置为自动测试；Selenium 是最流行的框架。
- en: 'It can be downloaded from the following site:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从以下网站下载：
- en: '![Automated Test Suite](img/00058.jpeg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![自动化测试套件](img/00058.jpeg)'
- en: Under **Jenkins**, **Plugin Manager**, select the Selenium plugin and install,
    restart to initiate:![Automated Test Suite](img/00059.jpeg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Jenkins** 的 **插件管理器** 下，选择 Selenium 插件并安装，重新启动以启动：![自动化测试套件](img/00059.jpeg)
- en: Configure the `selenium server JAR` file:![Automated Test Suite](img/00060.jpeg)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`selenium server JAR`文件：![自动化测试套件](img/00060.jpeg)
- en: Configure the project we created to be set for this automated framework:![Automated
    Test Suite](img/00061.jpeg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置我们创建的项目，以适应这个自动化框架：![自动化测试套件](img/00061.jpeg)
- en: In the build process, add the option, **SeleniumHQ htmlSuite Run**:![Automated
    Test Suite](img/00062.jpeg)
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建过程中，添加选项**SeleniumHQ htmlSuite Run**：![自动化测试套件](img/00062.jpeg)
- en: Selenium IDE will generate Test Suite, the Selenium test is enabled with SuiteFile
    by launching the Selenium driver:![Automated Test Suite](img/00063.jpeg)
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Selenium IDE将生成测试套件，通过启动Selenium驱动程序，Selenium测试将通过SuiteFile启用：![自动化测试套件](img/00063.jpeg)
- en: Continuous Delivery- Build Pipeline
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付-构建流水线
- en: Continuous delivery is the process of building a robust pipeline from software
    development to deployment.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是从软件开发到部署的强大流水线构建过程。
- en: '![Continuous Delivery- Build Pipeline](img/00064.jpeg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![持续交付-构建流水线](img/00064.jpeg)'
- en: Install the Build Pipeline plugin from **Manage Plugins** as follows:![Continuous
    Delivery- Build Pipeline](img/00065.jpeg)![Continuous Delivery- Build Pipeline](img/00066.jpeg)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**管理插件**安装构建流水线插件，如下所示：![持续交付-构建流水线](img/00065.jpeg)![持续交付-构建流水线](img/00066.jpeg)
- en: To set up the Build Pipeline, Click on the **+** symbol, next to the **All**
    tab on the dashboard:![Continuous Delivery- Build Pipeline](img/00067.jpeg)
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置构建流水线，请点击仪表板上**所有**标签旁边的**+**符号：![持续交付-构建流水线](img/00067.jpeg)
- en: Select **Build Pipeline View** and choose a name for the pipeline:![Continuous
    Delivery- Build Pipeline](img/00068.jpeg)
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**构建流水线视图**并为流水线选择一个名称：![持续交付-构建流水线](img/00068.jpeg)
- en: Select the **Options** and the project created:![Continuous Delivery- Build
    Pipeline](img/00069.jpeg)
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**选项**并创建项目：![持续交付-构建流水线](img/00069.jpeg)
- en: The delivery pipeline view is created with the status of each stage of the project.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交付流水线视图通过显示项目每个阶段的状态来创建。
- en: Jenkins Features
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins功能
- en: Client-server
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端-服务器
- en: Security
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全
- en: Reporting
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告
- en: Larger projects need multiple machines to be configured instead of centralized
    builds on one machine. Also, there are requirements for several different environments
    for test builds. Slave machines are effective to offload these loads from a master
    server.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 较大的项目需要配置多个机器，而不是在一台机器上进行集中构建。同时，测试构建还需要多个不同的环境。Slave机器可以有效地将这些负载从主服务器中卸载。
- en: They need a bi-directional communication link from the master through a TCP/IP
    socket, with only a slave agent instead of the full Jenkins package or compiled
    binaries.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 它们需要一个从主服务器通过TCP/IP套接字的双向通信链接，仅需要一个Slave代理，而不是完整的Jenkins包或已编译的二进制文件。
- en: To set up slave/nodes under Jenkins, configure and select the manage nodes option
    and create a new node:![Jenkins Features](img/00070.jpeg)
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Jenkins中设置Slave/节点，请配置并选择管理节点选项，然后创建一个新节点：![Jenkins功能](img/00070.jpeg)
- en: Select name and **Dumb Slave** option.![Jenkins Features](img/00071.jpeg)
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择名称和**傻瓜Slave**选项。![Jenkins功能](img/00071.jpeg)
- en: The slave node details are to be given, then choose to let Jenkins consider
    the Windows slave as a Windows service. Details such as name node and login credentials
    of the machine are required.![Jenkins Features](img/00072.jpeg)
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要提供Slave节点的详细信息，然后选择让Jenkins将Windows Slave视为Windows服务。需要提供机器的节点名称和登录凭证等详细信息。![Jenkins功能](img/00072.jpeg)
- en: The slave machine will be available as follows; new jobs can be configured to
    run on this slave machine.![Jenkins Features](img/00073.jpeg)
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Slave机器将如图所示可用；新的作业可以配置为在此Slave机器上运行。![Jenkins功能](img/00073.jpeg)
- en: Security in Jenkins
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jenkins中的安全性
- en: 'Users with relevant permissions can be set up with security configuration:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有相关权限的用户可以进行安全配置设置：
- en: Under **Manage Jenkins**, select **Configure Global Security**, and choose to
    **Enable security** option:![Security in Jenkins](img/00074.jpeg)
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**管理Jenkins**下，选择**配置全局安全性**，然后选择**启用安全性**选项：![Jenkins中的安全性](img/00074.jpeg)
- en: Once you save the options, you will be prompted for an admin user.![Security
    in Jenkins](img/00075.jpeg)
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存选项后，系统将提示您输入管理员用户信息。![Jenkins中的安全性](img/00075.jpeg)
- en: 'Under **Jenkins Manage** setup, choose **Manage Users Options** to create users
    and then set up authorizations required to execute jobs with matrix based security:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Jenkins管理**设置中，选择**管理用户选项**来创建用户，然后设置执行作业所需的基于矩阵的安全授权：
- en: The **Reporting Options**, **Metrics Options**, and **Reporting Plugins** can
    be installed.![Security in Jenkins](img/00076.jpeg)
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以安装**报告选项**、**度量选项**和**报告插件**。![Jenkins中的安全性](img/00076.jpeg)
- en: 'Many Metrics are available such as the Build History Metrics Plugin:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有多种指标可供使用，例如构建历史指标插件：
- en: '**Mean Time To Failure** (**MTTF**)'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平均故障时间** (**MTTF**)'
- en: '**Mean Time To Recovery** (**MTTR**)'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平均恢复时间** (**MTTR**)'
- en: Standard deviation of build times
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建时间的标准偏差
- en: '![Security in Jenkins](img/00077.jpeg)'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Jenkins中的安全性](img/00077.jpeg)'
- en: It can be installed under **Manage Plugins** choosing the **Build History Metrics
    Plugin**, the above metrics will be reflected on the job page.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它可以在**管理插件**下安装，选择**构建历史指标插件**，上述指标将在工作页面上显示。
- en: To see a graphical representation, use Hudson global-build-stats and **Global
    Build Stats** plugins under **Manage Plugins**. Setting the options, initialize
    stats, create new chart options, and all the existing builds records will be displayed.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看图形化表示，请在**管理插件**下使用Hudson global-build-stats和**全局构建统计**插件。设置选项、初始化统计数据、创建新图表选项，所有现有的构建记录将显示出来。
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this lesson, we learned about processes and tools for implementing continuous
    development, continuous integration, and continuous deployment with the use of
    repository management, code reviews, and test automation.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节课中，我们学习了使用仓库管理、代码审查和测试自动化来实现持续开发、持续集成和持续部署的过程和工具。
- en: In the next lesson, we will cover the topics of infrastructure configuration
    management as code for continuous deployment with tools such as Chef, Puppet,
    and Ansible. We will discuss on continuous monitoring process with tools Splunk
    and Nagios.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节课中，我们将讨论基础设施配置管理作为持续部署代码的主题，使用的工具包括Chef、Puppet和Ansible。我们还将讨论使用Splunk和Nagios进行的持续监控过程。
- en: Assessments
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Continuous delivery is the process of extending the __________.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交付是延伸__________的过程。
- en: Continuous deployment
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续部署
- en: Continuous monitoring
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续监控
- en: Continuous integration
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous delivery
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交付
- en: 'State whether the following is True or False: The delivery manager will approve
    the acceptance tests to agree to deployment test systems.'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断以下陈述是对还是错：交付经理将批准接受测试，以同意部署测试系统。
- en: Which among the following are effective mechanisms to propose changes and check
    the quality of changes by identifying problems before they're pushed into the
    mainline, causing rework?
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项是有效的机制，用于在变更被推送到主线之前通过识别问题来提出变更并检查变更的质量，从而避免返工？
- en: Pull for review in Gerrit
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Gerrit中进行审查拉取
- en: Pull request in SVN
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SVN中的拉取请求
- en: Push request in GitHub
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub中的拉取请求
- en: Pull request in GitHub
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub中的拉取请求
- en: Which command is used to install Jenkins?
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令用于安装Jenkins？
- en: C:>java Jenkins.war
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: C:>java Jenkins.war
- en: C:>Java -jar Jenkins.war
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: C:>Java -jar Jenkins.war
- en: C:>Java –jar Jenkins.war
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: C:>Java –jar Jenkins.war
- en: C:>java –jar Jenkins.war
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: C:>java –jar Jenkins.war
- en: Which among the following is the process of building a robust pipeline from
    software development to deployment?
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项是从软件开发到部署构建强大管道的过程？
- en: Continuous monitoring
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续监控
- en: Continuous deployment
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续部署
- en: Continuous integration
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous delivery
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交付
