- en: Chapter 2. Introducing First-party Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章 引入第一方工具
- en: 'Docker provides several tools that extend the functionality outside of the
    core Docker engine. In this chapter, you will walk-through installing, configuring,
    and running the following tools:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供了多种工具来扩展核心 Docker 引擎之外的功能。在本章中，您将逐步了解如何安装、配置和运行以下工具：
- en: Docker Toolbox
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Toolbox
- en: Docker Machine
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Machine
- en: Docker Swarm
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Docker Compose
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose
- en: These tools, while not as functional as some of the more advanced ones that
    we will be working with in the upcoming chapters, will serve as a good introduction
    to both adding additional functionality to core Docker engine as well as concepts
    for deploying and orchestrating your containers, which we will be doing more of
    towards the end of the book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具虽然没有我们将在接下来的章节中使用的高级工具功能强大，但它们将作为一个良好的入门，帮助您理解如何为核心 Docker 引擎添加额外功能，以及容器部署和编排的概念，我们将在本书后面更多地探讨这些内容。
- en: Docker Toolbox
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Toolbox
- en: 'Before we start to look at how to use the three other tools, we should look
    at installing them on our local machine. In the previous chapter, we downloaded
    a script supplied by Docker and piped it through bash to quickly configure the
    official Docker YUM or APT repository (depending on the operating system you are
    running) on an already provisioned server, the command we executed was as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始了解如何使用其他三种工具之前，应该先看一下如何在本地机器上安装它们。在上一章中，我们下载了 Docker 提供的脚本，并通过 bash 快速配置了官方的
    Docker YUM 或 APT 仓库（具体取决于您使用的操作系统），我们执行的命令如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is useful if you already have a Linux-based server up and running on one
    of the many cloud services or locally on virtual machine; however, what if you
    want to install Docker on a non-Linux operating system such as Mac OSX or Windows?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在某个云服务或本地虚拟机上运行了基于 Linux 的服务器，这将非常有用；但是，如果您想在非 Linux 操作系统（如 Mac OSX 或 Windows）上安装
    Docker，怎么办呢？
- en: Tip
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Always check the source. It is best practice to check the source of the bash
    script that you are going to be downloading and installing; in our case, you can
    check this by going to [https://get.docker.com/](https://get.docker.com/) in your
    browser.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 始终检查源。最好的做法是检查您将要下载并安装的 bash 脚本的来源；在我们的案例中，您可以通过浏览器访问 [https://get.docker.com/](https://get.docker.com/)
    来检查。
- en: Before we look at the tools that Docker provides to do just that, we should
    answer the question why?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看 Docker 提供的工具之前，我们应该先回答一个问题：为什么？
- en: Why install Docker locally?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要在本地安装 Docker？
- en: So, why would we want to install Docker Toolbox, Compose, Machine, and Swarm
    on a non-Linux machine? Well, to start with, you need to remember that Docker,
    at its core, is an API to Linux Kernel-based technologies, such as run ([https://github.com/opencontainers/runc](https://github.com/opencontainers/runc))
    and LXC ([https://linuxcontainers.org](https://linuxcontainers.org)), so while
    you will not be able to launch containers on your Mac OS X or Windows machine,
    you will be able to interact with a Docker installation on a Linux machine.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我们需要在非 Linux 系统上安装 Docker Toolbox、Compose、Machine 和 Swarm 呢？首先，您需要记住，Docker
    本质上是一个针对基于 Linux 内核的技术的 API，例如 run ([https://github.com/opencontainers/runc](https://github.com/opencontainers/runc))
    和 LXC ([https://linuxcontainers.org](https://linuxcontainers.org))，因此虽然您无法在 Mac
    OS X 或 Windows 系统上启动容器，但您可以与 Linux 机器上的 Docker 安装进行交互。
- en: Being able to interact with Docker from your local machine means that you launch
    and interact with containers across multiple hosts that can be hosted externally
    on a public cloud/hosting service or locally on a virtual machine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 能够从本地机器与 Docker 进行交互，意味着您可以跨多个主机启动并与容器进行交互，这些主机可以托管在公共云/托管服务上，也可以本地托管在虚拟机中。
- en: Luckily, Docker has you covered for installing Docker and the three other services
    that we are going to be looking at in this chapter on your local machine.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Docker 提供了便捷的方式，帮助您在本地机器上安装 Docker 和本章要介绍的其他三种服务。
- en: Installing Docker Toolbox
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Docker Toolbox
- en: 'Docker provides a global installer for all of their tools called Docker Toolbox,
    it makes installing the following software as painless as possible:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供了一个名为 Docker Toolbox 的全球安装程序，它使得安装以下软件变得尽可能简单：
- en: Docker Client
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 客户端
- en: Docker Machine
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Machine
- en: Docker Compose
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose
- en: Docker Kitematic
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Kitematic
- en: VM VirtualBox
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机 VirtualBox
- en: 'To get started, you will need to be running a machine that either has Mac OS
    X 10.8+ or has Windows 7+ installed. In my case, I am running Mac OS X 10.11 (El
    Capitan); there is very little difference between the Mac OS X and Windows installers:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您需要运行一个安装有 Mac OS X 10.8+ 或 Windows 7+ 的机器。在我的例子中，我使用的是 Mac OS X 10.11（El
    Capitan）；Mac OS X 和 Windows 的安装程序差别很小：
- en: First of all, to get started, you will need to download the installer from the
    Docker website. You can find links to download an executable for your chosen operating
    system at [https://www.docker.com/docker-toolbox/](https://www.docker.com/docker-toolbox/).![Installing
    Docker Toolbox](img/B05468_02_01.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，要开始，您需要从 Docker 网站下载安装程序。您可以在[https://www.docker.com/docker-toolbox/](https://www.docker.com/docker-toolbox/)找到适用于您操作系统的可执行文件下载链接。![安装
    Docker Toolbox](img/B05468_02_01.jpg)
- en: Once you have downloaded the installer, you can launch it by double-clicking
    on it. You will then be presented by a series of screens and install options.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完安装程序后，您可以通过双击它来启动。接下来会显示一系列屏幕和安装选项。
- en: 'The first screen is a welcome page that confirms the version of the toolbox
    you are running. If you downloaded from the page in the preceding screenshot,
    then you will always have the latest version:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个屏幕是欢迎页面，确认您正在运行的工具箱版本。如果您是从前面截图中的页面下载的，那么您将始终拥有最新版本：
- en: '![Installing Docker Toolbox](img/B05468_02_02.jpg)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![安装 Docker Toolbox](img/B05468_02_02.jpg)'
- en: To move to the next step of the installation, click on **Continue**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要继续安装的下一步，请点击**继续**。
- en: The next screen goes into more detail about the packages that will be installed,
    as well as the location at which they will be installed. There is also a box,
    which, if left ticked, will gather data about the machine you are installing Docker
    Toolbox on, anonymize it, and then submit it back to Docker.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一屏幕将详细介绍将要安装的包以及它们将安装的位置。还有一个框，如果勾选此框，它将收集您安装 Docker Toolbox 的机器数据，对其进行匿名处理，然后提交给
    Docker。
- en: 'This information is useful in giving Docker an idea about the types of machine
    their software is being installed on, and also it will report back any errors
    that you may encounter when running the installer:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些信息有助于 Docker 了解您的软件安装在什么类型的机器上，还会反馈您在运行安装程序时遇到的任何错误：
- en: '![Installing Docker Toolbox](img/B05468_02_03.jpg)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![安装 Docker Toolbox](img/B05468_02_03.jpg)'
- en: I always recommend keeping this box ticked, as it all goes toward Docker making
    a better product and improving the experience of future versions of the installer.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我总是建议保持勾选此框，因为这有助于 Docker 改进产品并提升未来版本安装程序的用户体验。
- en: To progress to the next step of the installation, click on **Continue**.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要继续安装的下一步，点击**继续**。
- en: The next screen will give you the option of which disk you would like to install
    the various tools on. In most cases, you should stick with the defaults, unless
    you are running applications across multiple drives:![Installing Docker Toolbox](img/B05468_02_04.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一屏幕将允许您选择安装工具的磁盘位置。在大多数情况下，您应该使用默认设置，除非您在多个驱动器上运行应用程序：![安装 Docker Toolbox](img/B05468_02_04.jpg)
- en: To move on to the next step of the installation, again click on the **Continue**
    button.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要继续安装的下一步，再次点击**继续**按钮。
- en: For majority of the people, a standard installation will be enough; however,
    if its not to install one of the tools, you can click the **Customize** button.
    The only two tools you have to install are the Docker Client and Docker Machine.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于大多数人来说，标准安装就足够了；但是，如果不打算安装某些工具，您可以点击**自定义**按钮。您必须安装的两个工具是 Docker 客户端和 Docker
    机器。
- en: 'As I want to install all of the tools, I have chosen to go with the standard
    installation:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为我想安装所有工具，所以我选择了标准安装：
- en: '![Installing Docker Toolbox](img/B05468_02_05.jpg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![安装 Docker Toolbox](img/B05468_02_05.jpg)'
- en: Once you have chosen either a standard or custom installation, you can perform
    the installation by clicking the **Install** button.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您选择了标准或自定义安装，您可以点击**安装**按钮进行安装。
- en: The installation itself takes a few minutes, during which you will get feedback
    on the task the installer is running:![Installing Docker Toolbox](img/B05468_02_06.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装本身只需要几分钟，在此期间，您将看到安装程序正在执行的任务反馈：![安装 Docker Toolbox](img/B05468_02_06.jpg)
- en: Once the installation is complete, click on the **Continue** button.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，点击**继续**按钮。
- en: As running the installer also acts as an upgrader for any components you have
    installed, it will run a check to see if any of the files managed by the services
    (such as the virtual machine images used by the various tools) need to be updated.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于运行安装程序也会作为已安装组件的升级程序，它将检查服务管理的任何文件（例如各种工具使用的虚拟机映像）是否需要更新。
- en: Depending on the size of any updates and how much data you have, this process
    can take several minutes.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据更新的大小以及数据量的不同，这个过程可能需要几分钟。
- en: This process only applies to updates, so if you have performed a fresh installation
    like I have done, this section will be skipped.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该过程仅适用于更新，因此如果你像我一样进行了全新安装，则此部分将被跳过。
- en: Now that the tools have been installed, you will be given the options of launching
    either the Docker Quickstart Terminal or Kitematic. For the purpose of this book,
    we will be skipping past this screen by clicking on the **Continue** button:![Installing
    Docker Toolbox](img/B05468_02_07.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在工具已经安装完成，你将获得启动**Docker 快速启动终端**或 Kitematic 的选项。为了本书的目的，我们将通过点击**继续**按钮跳过此屏幕：![安装
    Docker 工具箱](img/B05468_02_07.jpg)
- en: If everything has gone as planned, you will see a message confirming that the
    installation has been completed and you can click on the **Close** button to quit
    the installer:![Installing Docker Toolbox](img/B05468_02_08.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，你将看到一条消息，确认安装已经完成，你可以点击**关闭**按钮退出安装程序：![安装 Docker 工具箱](img/B05468_02_08.jpg)
- en: Now, you have all of the tools installed on your local machine to continue with
    the rest of the chapter and the book.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经在本地机器上安装了所有工具，可以继续本章及整本书的内容了。
- en: Before we start to look at the individual tools, we need to configure the Docker
    agent. To do this, run the **Docker Quickstart Terminal** application. If you
    have multiple terminal emulators installed, it will pop up a prompt asking you
    which one you would like to use; I prefer to use the one that ships with Mac OS
    X, so I chose Terminal.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始查看各个工具之前，我们需要配置 Docker 代理。为此，请运行**Docker 快速启动终端**应用程序。如果你安装了多个终端模拟器，它会弹出提示，询问你想使用哪个终端；我更喜欢使用
    Mac OS X 自带的终端，因此我选择了终端。
- en: 'Once you have made your selection, a new terminal window will open and the
    application will configure your local installation of Docker for you:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你做出选择，一个新的终端窗口将打开，应用程序将为你配置本地的 Docker 安装：
- en: '![Installing Docker Toolbox](img/B05468_02_09.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Docker 工具箱](img/B05468_02_09.jpg)'
- en: In my case, I got the preceding terminal output when launching the **Docker
    Quickstart Terminal** application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就我而言，在启动**Docker 快速启动终端**应用程序时，我得到了前面的终端输出。
- en: Docker Machine
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 机器
- en: So, when you ran the **Docker Quickstart Terminal** application, it created
    a bunch of certificates, SSH keys, and configured your user's environment to run
    Docker. It also launched a virtual machine running Docker.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当你运行**Docker 快速启动终端**应用程序时，它会创建一堆证书、SSH 密钥，并配置你的用户环境以运行 Docker。它还启动了一个运行
    Docker 的虚拟机。
- en: Developing locally
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地开发
- en: 'The **Docker Quickstart Terminal** application did this using Docker machine,
    you can check the status of the machine launched by the application by running
    the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker 快速启动终端**应用程序是通过 Docker 机器完成此操作的，你可以通过运行以下命令来检查该应用程序启动的机器状态：'
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will list the names of any active machines, the default machine launched
    when you first install Docker is called `default`, if you run:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出任何活动机器的名称，第一次安装 Docker 时启动的默认机器名为`default`，如果你运行：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It should tell you that the virtual machine is currently running. Finally,
    you should be able to SSH into the virtual machine by running the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该会告诉你虚拟机当前正在运行。最后，你应该能够通过运行以下命令 SSH 连接到虚拟机：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You will notice that when you SSH into the virtual machine, it is running the
    Boot2Docker distribution.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，当你通过 SSH 连接到虚拟机时，它正在运行 Boot2Docker 发行版。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Boot2Docker is an extremely lightweight Linux distribution based on Tiny Core
    Linux, and its one purpose is to run Docker. Due to this, the entire distribution
    comes in at less than 30 MB, and it boots in around five seconds, which makes
    it perfect for running local development machines. For more information on Boot2Docker,
    refer to [http://boot2docker.io/](http://boot2docker.io/), and for Tiny Core Linux,
    refer to [http://tinycorelinux.net/](http://tinycorelinux.net/).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Boot2Docker 是一个极其轻量的 Linux 发行版，基于 Tiny Core Linux，它的唯一目的是运行 Docker。由于这个原因，整个发行版的大小不到
    30 MB，启动大约只需五秒钟，这使得它非常适合用于本地开发机器。关于 Boot2Docker 的更多信息，请参考 [http://boot2docker.io/](http://boot2docker.io/)，关于
    Tiny Core Linux，请参考 [http://tinycorelinux.net/](http://tinycorelinux.net/)。
- en: 'You should something similar to the following terminal session when running
    these commands:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这些命令时，你应该看到类似下面的终端会话：
- en: '![Developing locally](img/B05468_02_10.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![本地开发](img/B05468_02_10.jpg)'
- en: 'There isn''t much need to SSH into the virtual machine, though, as the Docker
    client that was installed by toolbox has been configured to connect to the Docker
    Engine on the virtual machine, this means that when you run the Docker commands
    locally, it passes all the calls through Docker on the virtual machine, try running
    the `hello-world` container:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有太多需要 SSH 进入虚拟机的必要，但由于通过工具箱安装的 Docker 客户端已被配置为连接到虚拟机上的 Docker 引擎，这意味着当你在本地运行
    Docker 命令时，它会将所有请求传递给虚拟机上的 Docker 引擎。试着运行 `hello-world` 容器：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see the following output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Developing locally](img/B05468_02_10.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![本地开发](img/B05468_02_10.jpg)'
- en: At this stage, you may be thinking to yourself, this all is very good, but it's
    hardly a tool to get excited about. Well, you are wrong. Docker Machine has a
    few more tricks up its sleeve than being able to launch a Boot2Docker virtual
    machine locally.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一阶段，你可能会想，这一切都很好，但这并不是一个值得兴奋的工具。嗯，你错了。Docker Machine 可不止能在本地启动 Boot2Docker
    虚拟机，它还有更多的“隐藏技能”。
- en: Heading into the cloud
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进入云端
- en: Docker Machine is able to connect to the following services, provision an instance,
    and configure your local Docker client to be able to communicate to the cloud-based
    instance.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Machine 能够连接到以下服务，创建实例，并配置你的本地 Docker 客户端，使其能够与基于云的实例进行通信。
- en: 'The public cloud providers that currently are supported are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当前支持的公共云服务提供商如下：
- en: '**Amazon Web Services (AWS)**: [https://aws.amazon.com/](https://aws.amazon.com/)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Web Services (AWS)**: [https://aws.amazon.com/](https://aws.amazon.com/)'
- en: '**DigitalOcean**: [https://www.digitalocean.com/](https://www.digitalocean.com/)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DigitalOcean**: [https://www.digitalocean.com/](https://www.digitalocean.com/)'
- en: '**Microsoft Azure**: [https://azure.microsoft.com/](https://azure.microsoft.com/)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Azure**: [https://azure.microsoft.com/](https://azure.microsoft.com/)'
- en: '**Google Compute Engine**: [https://cloud.google.com/compute/](https://cloud.google.com/compute/)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Compute Engine**: [https://cloud.google.com/compute/](https://cloud.google.com/compute/)'
- en: '**Rackspace**: [http://www.rackspace.co.uk/cloud/](http://www.rackspace.co.uk/cloud/)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rackspace**: [http://www.rackspace.co.uk/cloud/](http://www.rackspace.co.uk/cloud/)'
- en: '**IBM SoftLayer**: [http://www.softlayer.com](http://www.softlayer.com)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IBM SoftLayer**: [http://www.softlayer.com](http://www.softlayer.com)'
- en: '**Exoscale**: [https://www.exoscale.ch/](https://www.exoscale.ch/)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Exoscale**: [https://www.exoscale.ch/](https://www.exoscale.ch/)'
- en: '**VMware vCloud Air**: [http://vcloud.vmware.com/](http://vcloud.vmware.com/)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware vCloud Air**: [http://vcloud.vmware.com/](http://vcloud.vmware.com/)'
- en: 'The following self-hosted platforms can also be used:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下自托管平台也可以使用：
- en: '**OpenStack**: [https://www.openstack.org/](https://www.openstack.org/)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenStack**: [https://www.openstack.org/](https://www.openstack.org/)'
- en: '**Microsoft Hyper-V**: [http://www.microsoft.com/virtualization/](http://www.microsoft.com/virtualization/)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Hyper-V**: [http://www.microsoft.com/virtualization/](http://www.microsoft.com/virtualization/)'
- en: '**VMware vSphere**: [http://www.vmware.com/uk/products/vsphere/](http://www.vmware.com/uk/products/vsphere/)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware vSphere**: [http://www.vmware.com/uk/products/vsphere/](http://www.vmware.com/uk/products/vsphere/)'
- en: The DigitalOcean driver
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DigitalOcean 驱动程序
- en: Let's start creating some instances in the cloud. First, let's launch a machine
    in DigitalOcean.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始在云中创建一些实例。首先，启动一个在 DigitalOcean 上的虚拟机。
- en: There are two prerequisites for launching an instance with Docker Machine in
    DigitalOcean, the first is a DigitalOcean account and the second is an API token.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DigitalOcean 中启动实例的两个先决条件是：首先需要一个 DigitalOcean 帐户，其次需要一个 API 令牌。
- en: To sign up for a DigitalOcean account, visit [https://www.digitalocean.com/](https://www.digitalocean.com/)
    and click on the **Sign Up** button. Once you have logged in to your account,
    you can generate an API token by clicking on the **API** link in the top menu.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册一个 DigitalOcean 账户，请访问 [https://www.digitalocean.com/](https://www.digitalocean.com/)
    并点击**注册**按钮。登录到您的账户后，您可以通过点击顶部菜单中的**API**链接生成 API 令牌。
- en: 'To grab your token, click on the **Generate New Token** button and follow the
    on-screen instructions:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取您的令牌，请点击**生成新令牌**按钮并按照屏幕上的说明操作：
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You only get one chance to make a record of your token, make sure that you store
    it somewhere safe, as it will allow anyone who has it to launch instances into
    your account.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您只有一次机会记录下您的令牌，请确保将其存储在安全的地方，因为任何拥有它的人都能在您的账户中启动实例。
- en: '![The DigitalOcean driver](img/B05468_02_12.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![DigitalOcean 驱动程序](img/B05468_02_12.jpg)'
- en: 'Once you have the token, you can launch your instance using Docker Machine.
    To do this, run the following command; make sure to replace the example API token
    with your own:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了令牌，您可以使用 Docker Machine 启动您的实例。为此，运行以下命令；确保将示例 API 令牌替换为您自己的：
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Using a backslash: As we have a lot options to pass to the `docker-machine`
    command, we are using \ to split the command over multiple lines so that it''s
    easier to follow what is going on.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用反斜杠：由于我们需要传递很多选项给 `docker-machine` 命令，我们使用反斜杠 `\` 将命令分成多行，这样更容易跟踪发生了什么。
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will launch a `dotest` instance into your DigitalOcean account, you will
    see something similar to the following terminal output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把一个 `dotest` 实例启动到您的 DigitalOcean 账户中，您将看到类似以下终端输出的内容：
- en: '![The DigitalOcean driver](img/B05468_02_13.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![DigitalOcean 驱动程序](img/B05468_02_13.jpg)'
- en: 'If you check your DigitalOcean control panel, you will now see that the instance
    that was created by Docker Machine is listed here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查 DigitalOcean 控制面板，您现在会看到由 Docker Machine 创建的实例已列在这里：
- en: '![The DigitalOcean driver](img/B05468_02_14.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![DigitalOcean 驱动程序](img/B05468_02_14.jpg)'
- en: 'Now we have two instances launched by Docker Machine, one running locally running
    on our machine called `default` and one hosted in DigitalOcean called `dotest`.
    We can confirm this by running the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们通过 Docker Machine 启动了两个实例，一个是本地运行的，名为`default`，另一个是托管在 DigitalOcean 上的，名为`dotest`。我们可以通过运行以下命令来确认这一点：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will return all of the machines we have running and confirm their state,
    IP address, Docker version, and name. There is also a column that allows you to
    know which of the two machines your local environment is configured to communicate
    with:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回所有正在运行的机器，并确认它们的状态、IP 地址、Docker 版本和名称。还有一列显示您本地环境配置为与哪台机器通信：
- en: '![The DigitalOcean driver](img/B05468_02_15.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![DigitalOcean 驱动程序](img/B05468_02_15.jpg)'
- en: In the preceding example, our local Docker client is configured to communicate
    with the `default` instance, which is the run running locally. Let's change it
    so that it interacts with the DigitalOcean instance.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们的本地 Docker 客户端配置为与 `default` 实例进行通信，它是在本地运行的。现在让我们将其更改为与 DigitalOcean
    实例进行交互。
- en: To do this, you have change some local environment variables, luckily, Docker
    Machine provides an easy way to find out what these are and also change them.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，您需要更改一些本地环境变量，幸运的是，Docker Machine 提供了一种简单的方法来找出这些变量并进行更改。
- en: 'To find out what they all you have to do is simple, run the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解它们，只需运行以下命令：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will tell you exactly what you need to run to change from the `default`
    machine to `dotest`. The best thing is that the command itself formats the results
    in such a way that they can be executed, so we run the command again, but this
    time in a way where the output will be executed:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉您需要运行什么命令来从 `default` 机器切换到 `dotest`。最棒的是，该命令本身会以可执行的方式格式化结果，因此我们再次运行该命令，但这次的输出将被执行：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now if you get a listing from Docker Machine, you will notice that the `dotest`
    environment is now the active one:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您从 Docker Machine 获取列表，您会注意到 `dotest` 环境现在是活跃的：
- en: '![The DigitalOcean driver](img/B05468_02_16.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![DigitalOcean 驱动程序](img/B05468_02_16.jpg)'
- en: Now that we have our DigitalOcean instance active, you can run the `docker`
    command on your local machine, and they will have been executed on the DigitalOcean
    instance. Let's test this by running the hello-world container.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 DigitalOcean 实例已激活，您可以在本地机器上运行 `docker` 命令，这些命令将会在 DigitalOcean 实例上执行。我们通过运行
    hello-world 容器来测试这一点。
- en: 'If you run the following command, you should see the image download and then
    the output of running the hello-world container:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行以下命令，你应该看到镜像下载，然后是运行 hello-world 容器的输出：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you then run the following command, you will see that the hello-world image
    exited a few seconds ago:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果接着运行以下命令，你会看到几秒钟前退出的 hello-world 镜像：
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is demonstrated by the following Terminal output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是终端输出的示例：
- en: '![The DigitalOcean driver](img/B05468_02_17.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![DigitalOcean 驱动程序](img/B05468_02_17.jpg)'
- en: As you can see, I used `ssh` to get into the DigitalOcean instance and ran the
    `docker ps –a` and `docker images` commands to demonstrate that the commands I
    ran locally were executed on the DigitalOcean instance; however, the beauty of
    this setup is that you shouldn't have to SSH instance often.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我使用 `ssh` 进入 DigitalOcean 实例，并运行了 `docker ps -a` 和 `docker images` 命令来演示本地运行的命令是在
    DigitalOcean 实例上执行的；但这种设置的美妙之处在于，你不应该经常需要 SSH 进入实例。
- en: One thing you may have noticed is that all we told Docker Machine is that we
    want to use DigitalOcean and our API token; at no point did we tell it which region
    to launch the instance in, what specification we wanted, or which SSH key to use.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到的一件事是，我们告诉 Docker Machine 的只是我们要使用 DigitalOcean 和我们的 API 令牌；但从未告诉它在哪个区域启动实例，需要什么规格，或者要使用哪个
    SSH 密钥。
- en: 'Docker Machine has some following sensible defaults:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Machine 拥有一些合理的默认设置：
- en: '`digitalocean-image = ubuntu-15-10-x64`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`digitalocean-image = ubuntu-15-10-x64`'
- en: '`digitalocean-region = nyc3`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`digitalocean-region = nyc3`'
- en: '`digitalocean-size = 512mb`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`digitalocean-size = 512mb`'
- en: 'As I am based in the UK, let''s look at changing the region and the specifications
    of the machine. First of all, we should remove the `dotest` instance by running
    the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我位于英国，让我们看看如何更改区域和机器规格。首先，我们应该通过运行以下命令删除 `dotest` 实例：
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will terminate the `512mb` instance running in NYC3.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这将终止在 NYC3 运行的 `512mb` 实例。
- en: Tip
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is important to terminate instances that you are not using, as they will
    be costing you for each hour they are active. Remember one of the key advantages
    of using Docker Machine is that you can spin up instances both quickly and with
    as little interaction as possible.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 终止不使用的实例非常重要，因为它们每小时处于活动状态都会产生费用。记住使用 Docker Machine 的关键优势之一是你可以快速启动实例，并尽可能少地进行交互。
- en: 'Now that we have removed the old instance, let''s add some additional flags
    to our `docker-machine` command to launch the new instance in the desired region
    and specification, we will be calling our new instance `douktest`. The updated
    `docker-machine create` command now looks similar to the following (remember to
    replace the example API token with your own):'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经删除了旧实例，让我们为 `docker-machine` 命令添加一些额外的标志，以在所需的区域和规格中启动新实例，我们将称新实例为 `douktest`。更新后的
    `docker-machine create` 命令现在看起来类似于以下内容（记得用你自己的 API 令牌替换示例 API 令牌）：
- en: '[PRE12]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should see similar output from the command as before, once the instance
    has been deployed, you can make it active by running:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实例部署完成，你应该看到与之前命令相似的输出，然后可以通过运行以下命令使其激活：
- en: '[PRE13]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![The DigitalOcean driver](img/B05468_02_18.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![DigitalOcean 驱动程序](img/B05468_02_18.jpg)'
- en: 'When you enter the control panel, you will notice that the instance has launched
    in the specified region and at the desired specification:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进入控制面板时，你会注意到实例已在指定的区域以及所需的规格下启动：
- en: '![The DigitalOcean driver](img/B05468_02_19.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![DigitalOcean 驱动程序](img/B05468_02_19.jpg)'
- en: 'For full details on each of the regions and what machine types are available
    in each one, you can query the DigitalOcean API by running the following command
    (remember to replace the API token):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取每个区域的详细信息和每个区域可用的机器类型，请运行以下命令查询 DigitalOcean API（记得替换 API 令牌）：
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will output information about each region.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出每个区域的信息。
- en: 'One last thing, we still haven''t found out about the SSH key. Each time you
    run Docker Machine, a new SSH key for the instance you are launching is created
    and uploaded to the provider, each key is stored in the `.docker` folder in your
    user''s home directory. For example, the key for `douktest` can be found by running
    the following command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 还有最后一件事，我们还没弄清楚 SSH 密钥的情况。每次运行 Docker Machine，都会为你启动的实例创建一个新的 SSH 密钥并上传到提供者，每个密钥都存储在你用户主目录下的
    `.docker` 文件夹中。例如，可以通过以下命令找到 `douktest` 的密钥：
- en: '[PRE15]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here, you will also find the certificates used to authenticate the Docker agent
    with the Docker installation on the instance and also the configuration:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您还会找到用于通过实例上的 Docker 安装认证 Docker 代理的证书以及相关配置：
- en: '![The DigitalOcean driver](img/B05468_02_20.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![DigitalOcean 驱动程序](img/B05468_02_20.jpg)'
- en: This covers DigitalOcean, what about other services? Let's quickly look at Amazon
    Web Services so that we can get an idea between the drivers for the different
    cloud providers.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了 DigitalOcean，那么其他服务呢？让我们快速看一下 Amazon Web Services，以便我们可以对不同云服务提供商的驱动程序有个大致了解。
- en: The Amazon Web Services driver
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Amazon Web Services 驱动程序
- en: If you don't already have an Amazon Web Services account, you should sign up
    for one at [http://aws.amazon.com/](http://aws.amazon.com/). If you are new to
    AWS, then you will eligible for their free tier at [http://aws.amazon.com/free/](http://aws.amazon.com/free/).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有 Amazon Web Services 账户，应该在 [http://aws.amazon.com/](http://aws.amazon.com/)
    注册一个。如果您是 AWS 新用户，您将有资格获得他们的免费层服务，详情请见 [http://aws.amazon.com/free/](http://aws.amazon.com/free/)。
- en: I would recommend reading through Amazon's getting started guide if you are
    unfamiliar with AWS before working through this section of the chapter, you can
    find the guide at [http://docs.aws.amazon.com/gettingstarted/latest/awsgsg-intro/gsg-aws-intro.html](http://docs.aws.amazon.com/gettingstarted/latest/awsgsg-intro/gsg-aws-intro.html).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉 AWS，建议在开始本章内容之前先阅读 Amazon 的入门指南，您可以在 [http://docs.aws.amazon.com/gettingstarted/latest/awsgsg-intro/gsg-aws-intro.html](http://docs.aws.amazon.com/gettingstarted/latest/awsgsg-intro/gsg-aws-intro.html)
    找到该指南。
- en: 'The AWS driver is similar to the DigitalOcean driver and it has some sensible
    defaults, rather than going into too much detail about how to customize the EC2
    instance launched by Docker Machine, I will stick to the defaults. For AWS driver,
    the defaults are as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 驱动程序与 DigitalOcean 驱动程序类似，并具有一些合理的默认设置，考虑到我们不打算深入讨论如何自定义 Docker Machine
    启动的 EC2 实例，我将坚持使用默认设置。对于 AWS 驱动程序，默认设置如下：
- en: '`amazonec2-region = us-east-1 (North Virginia)`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`amazonec2-region = us-east-1 (北弗吉尼亚)`'
- en: '`amazonec2-ami = ami-26d5af4c (Ubuntu 15.10)`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`amazonec2-ami = ami-26d5af4c (Ubuntu 15.10)`'
- en: '`amazonec2-instance-type = t2.micro`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`amazonec2-instance-type = t2.micro`'
- en: '`amazonec2-root-size = 16GB`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`amazonec2-root-size = 16GB`'
- en: '`amazonec2-security-group = docker-machine`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`amazonec2-security-group = docker-machine`'
- en: Before we launch our instance, we will also need to know our AWS access and
    secret keys, and also the VPC ID will be launching our instance. To get these,
    log in to the AWS console that can be found at [https://console.aws.amazon.com/](https://console.aws.amazon.com/).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动实例之前，我们还需要知道我们的 AWS 访问密钥和密钥对，此外，还需要知道 VPC ID，因为我们将在其中启动实例。要获取这些信息，请登录到 AWS
    控制台，地址是 [https://console.aws.amazon.com/](https://console.aws.amazon.com/)。
- en: You should already have a copy of your access and secret ID as these are created
    when your user was first created in AWS. If you have lost these, then you can
    generate a new pair by navigating to **Services** | **IAM** | **Users**, then
    selecting your user, and finally going to the **Security Credentials** tab. There
    you should see a button that says **Create Access Key**.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经拥有您的访问密钥和密钥 ID 的副本，因为这些是在您的 AWS 用户首次创建时生成的。如果您丢失了它们，可以通过导航到 **服务** | **IAM**
    | **用户**，然后选择您的用户，最后转到 **安全凭证** 标签页来生成一对新密钥。在那里您应该能看到一个名为 **创建访问密钥** 的按钮。
- en: Note
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Amazon describes Amazon **Virtual Private Cloud** (**VPC**) as letting you provision
    a logically-isolated section of the AWS cloud, where you can launch resources
    in a virtual network that you define. You have complete control over your virtual
    networking environment, including selection of your own IP address range, creation
    of subnets, and configuration of route tables and network gateways.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon 将 **虚拟专用云**（**VPC**）描述为让您能够在 AWS 云中配置一个逻辑上隔离的区域，在该区域内您可以启动您定义的虚拟网络中的资源。您可以完全控制您的虚拟网络环境，包括选择您自己的
    IP 地址范围、创建子网、配置路由表和网络网关。
- en: Before you find your VPC ID, you should make sure that you are in the correct
    region by ensuring that it says **N. Virginia** at the top right-hand corner of
    your AWS console, if it doesn't select it from the drop-down list.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在查找 VPC ID 之前，您应该确保您处于正确的区域，可以通过确保 AWS 控制台右上角显示 **N. Virginia** 来验证，如果没有显示，您可以从下拉列表中选择正确的区域。
- en: 'Once you have ensured you are in the correct region, go to **Services** | **VPC**
    and click on **Your VPCs**. You don''t need to worry about creating and configuring
    a VPC as Amazon provides you with a default VPC in each region. Select the VPC
    and you should see the something similar to the following screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你处于正确的区域后，前往**服务** | **VPC**，点击**您的VPC**。你无需担心创建和配置VPC，因为Amazon在每个区域都会为你提供默认VPC。选择VPC后，你应该会看到类似于以下截图的内容：
- en: '![The Amazon Web Services driver](img/B05468_02_21.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![Amazon Web Services驱动程序](img/B05468_02_21.jpg)'
- en: 'Make a note of the VPC ID, you should now have enough information to launch
    your instance using Docker Machine. To do this, run the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 记下VPC ID，你现在应该有足够的信息通过Docker Machine启动实例。为此，请运行以下命令：
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If all goes well, you should see something similar to the following output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该会看到类似以下的输出：
- en: '![The Amazon Web Services driver](img/B05468_02_22.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![Amazon Web Services驱动程序](img/B05468_02_22.jpg)'
- en: 'You should also be able to see an EC2 instance launched in the AWS Console
    by navigating to **Services** | **EC2** | **Instances**:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该能够通过导航到**服务** | **EC2** | **实例**来在AWS控制台中看到启动的EC2实例：
- en: '![The Amazon Web Services driver](img/B05468_02_23.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![Amazon Web Services驱动程序](img/B05468_02_23.jpg)'
- en: You may have noticed that Docker Machine created the security group and also
    assigned an SSH key to the instance without any need for us to get involved, keeping
    within the principle that you don't need to be an expert in configuring the environments
    that you are launching your Docker instance into.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，Docker Machine创建了安全组，并且无需我们介入就为实例分配了SSH密钥，这符合我们不需要成为环境配置专家的原则，Docker实例的启动和配置都已自动完成。
- en: 'Before we terminate the instance, let''s switch our local Docker client over
    to use the AWS instance and launch the `Hello World` container:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们终止实例之前，先将本地Docker客户端切换为使用AWS实例，并启动`Hello World`容器：
- en: '![The Amazon Web Services driver](img/B05468_02_24.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![Amazon Web Services驱动程序](img/B05468_02_24.jpg)'
- en: As you can see, once you have launched an instance using Docker Machine and
    switched your local Docker client to it, there is no difference in usage between
    running Docker locally and on a cloud provider.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，一旦使用Docker Machine启动了实例并切换本地Docker客户端，你会发现本地运行Docker和在云服务商上运行Docker在使用上没有区别。
- en: 'Before we start to rack up the cost, we should terminate our test AWS instance
    by running the following command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始累积费用之前，我们应该通过运行以下命令来终止我们的测试AWS实例：
- en: '[PRE17]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then confirm that the instance has been terminated correctly in the AWS console:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 然后确认实例在AWS控制台中已经正确终止：
- en: '![The Amazon Web Services driver](img/B05468_02_25.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![Amazon Web Services驱动程序](img/B05468_02_25.jpg)'
- en: If you don't do this, the EC2 instance will quite happily sit there costing
    you **$0.013** per hour until it is terminated.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不这么做，EC2实例将毫不犹豫地一直运行，每小时收取**$0.013**的费用，直到它被终止。
- en: Note
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this is not Amazon's **Elastic Container Service** (**ECS**). We will
    be covering Amazon ECS in [Chapter 7](ch07.html "Chapter 7. Looking at Schedulers"),
    *Looking at Schedulers*.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这不是Amazon的**弹性容器服务**（**ECS**）。我们将在[第7章](ch07.html "第7章。查看调度器")，*查看调度器*中介绍Amazon
    ECS。
- en: Other considerations
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他考虑事项
- en: As you can see from examples we have worked through, Docker Machine is a powerful
    part of Docker Toolbox as it allows users of all skill levels to be able to launch
    an instance either locally or in a cloud provider without having to roll their
    sleeves up and get stuck in configuring server instances or their local Docker
    client.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所做的示例所示，Docker Machine是Docker Toolbox中的一个强大工具，它使所有技术水平的用户都能轻松启动本地或云提供商中的实例，而不需要动手配置服务器实例或本地Docker客户端。
- en: 'The examples we have used in this chapter have been launching either Boot2Docker
    or Ubuntu. Docker machine also supports the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们使用的示例均为启动Boot2Docker或Ubuntu。Docker Machine还支持以下操作系统：
- en: '**Debian (8.0+)**: [https://www.debian.org/](https://www.debian.org/)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Debian（8.0+）**：[https://www.debian.org/](https://www.debian.org/)'
- en: '**Red Hat Enterprise Linux (7.0+)**: [https://www.redhat.com/](https://www.redhat.com/)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Red Hat Enterprise Linux（7.0+）**：[https://www.redhat.com/](https://www.redhat.com/)'
- en: '**CentOS (7+)**: [https://www.centos.org/](https://www.centos.org/)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CentOS（7+）**：[https://www.centos.org/](https://www.centos.org/)'
- en: '**Fedora (21+)**: [https://getfedora.org/](https://getfedora.org/)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fedora（21+）**：[https://getfedora.org/](https://getfedora.org/)'
- en: '**RancherOS (0.3)**: [http://rancher.com/rancher-os/](http://rancher.com/rancher-os/)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RancherOS（0.3）**：[http://rancher.com/rancher-os/](http://rancher.com/rancher-os/)'
- en: 'The other thing to mention about Docker Machine is that, by default, it operates
    and opts in for crash reporting, considering the amount of different configuration/environment
    combinations Docker Machine can be used with, it is important that Docker get
    notified of any problems to help them make a better product. If, for any reason,
    you want to opt-out, then running the following command will disable crash reporting:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的关于 Docker Machine 的另一点是，默认情况下，它会启用崩溃报告功能。考虑到 Docker Machine 可以与许多不同的配置/环境组合一起使用，重要的是
    Docker 能够收到任何问题的通知，以帮助他们改进产品。如果由于某种原因你想退出此功能，可以运行以下命令来禁用崩溃报告：
- en: '[PRE18]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For more information on Docker Machine, you can refer to the official documentation:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Docker Machine 的更多信息，你可以参考官方文档：
- en: '**Docker Machine**: [https://docs.docker.com/machine/](https://docs.docker.com/machine/)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Machine**: [https://docs.docker.com/machine/](https://docs.docker.com/machine/)'
- en: '**Docker Machine Drivers**: [https://docs.docker.com/machine/drivers/](https://docs.docker.com/machine/drivers/)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Machine Drivers**: [https://docs.docker.com/machine/drivers/](https://docs.docker.com/machine/drivers/)'
- en: '**Docker Machine Command Reference**: [https://docs.docker.com/machine/reference/](https://docs.docker.com/machine/reference/)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Machine Command Reference**: [https://docs.docker.com/machine/reference/](https://docs.docker.com/machine/reference/)'
- en: Docker Swarm
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Now that we have discussed how to launch individual Docker instances using Docker
    Machine, let's get a little more adventurous and create a cluster of instances.
    To do this, Docker ships a tool called Swarm. When deployed, it acts as a scheduler
    between your Docker client and host Docker instances, deciding where to launch
    containers based on scheduling rules.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了如何使用 Docker Machine 启动单个 Docker 实例，让我们更进一步，创建一个实例集群。为此，Docker 提供了一个名为
    Swarm 的工具。当部署时，它充当你的 Docker 客户端与宿主 Docker 实例之间的调度器，根据调度规则决定在哪里启动容器。
- en: Creating a local cluster
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建本地集群
- en: 'To start off, we are going to be using Docker Machine to create a cluster locally
    using VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org)), which
    is bundled with Docker Toolbox. To start, we are going to launch a VM to generate
    a discovery token. To do this, run the following commands:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用 Docker Machine 在本地通过 VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org))
    创建一个集群，VirtualBox 是 Docker Toolbox 的一部分。首先，我们将启动一个虚拟机来生成发现令牌。为此，运行以下命令：
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then configure your Docker client to use the newly created local instance:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后配置你的 Docker 客户端以使用新创建的本地实例：
- en: '[PRE20]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can check that your Docker client is configured to use the `discover` instance
    by running `docker-machine ls` and making sure that `discover` has a star in the
    active column.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行`docker-machine ls`命令并确保 `discover` 在活动列中有星号，来检查你的 Docker 客户端是否配置为使用
    `discover` 实例。
- en: 'Finally, you can install the discovery service by running the following command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以通过运行以下命令来安装发现服务：
- en: '[PRE21]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will download and run the discovery service and generate the token. At
    the end of the process, you will be given a token; it is important that you keep
    a note of this for the next steps. If everything went as planned, you should see
    something similar to the following output:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载并运行发现服务并生成令牌。在过程结束时，你将获得一个令牌；请务必记下这个令牌，以便在后续步骤中使用。如果一切顺利，你应该会看到类似于以下输出的内容：
- en: '![Creating a local cluster](img/B05468_02_26.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![创建本地集群](img/B05468_02_26.jpg)'
- en: In the preceding example, the token is `40c3bf4866eed5ad14ade6633fc4cefc`. Now
    that we have our token, we need to launch an instance that will act as the scheduler,
    this is know as a Swarm manager.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，令牌是`40c3bf4866eed5ad14ade6633fc4cefc`。现在我们已经有了令牌，需要启动一个实例作为调度器，这个实例被称为
    Swarm 管理器。
- en: 'To do this, enter the following command, making sure that you replace the token
    with the one you generated:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请输入以下命令，并确保替换为你生成的令牌：
- en: '[PRE22]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now that we have the Swarm manager VM up and running, we can start launching
    VMs that act as nodes within the cluster. Again, using the discovery token, run
    the following commands to launch two nodes:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了 Swarm 管理器虚拟机，可以开始启动充当集群节点的虚拟机。同样，使用发现令牌，运行以下命令以启动两个节点：
- en: '[PRE23]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then launch the second node using the following command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令启动第二个节点：
- en: '[PRE24]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can check our VMs by running the `docker-machine ls` command and then switch
    our Docker client to use the cluster by running the following command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行 `docker-machine ls` 命令检查我们的虚拟机，然后运行以下命令将我们的 Docker 客户端切换到使用集群：
- en: '[PRE25]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now that your Docker client is communicating with the cluster, you can run
    `docker info` to find information about all the nodes and the cluster itself,
    you will see something similar to the following screenshot:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的Docker客户端已经与集群通信，您可以运行`docker info`来查找有关所有节点和集群本身的信息，您将看到类似以下屏幕截图的内容：
- en: '![Creating a local cluster](img/B05468_02_27.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![创建本地集群](img/B05468_02_27.jpg)'
- en: 'So, now we have a three CPU, 3-GB cluster running over three nodes. To test
    it, let''s run the `Hello World` container and then run `docker ps -a` so that
    we can see which node the container launched on:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个三CPU、3GB的集群，运行在三个节点上。为了测试它，让我们运行`Hello World`容器，然后运行`docker ps -a`，以便查看容器启动在哪个节点上：
- en: '![Creating a local cluster](img/B05468_02_28.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![创建本地集群](img/B05468_02_28.jpg)'
- en: 'As you can see from the terminal output, the container was launched on `swarm-node-01`,
    running the container again should launch it on our second node:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从终端输出中看到的，容器是在`swarm-node-01`上启动的，再次运行容器应该会将其启动在我们的第二个节点上：
- en: '![Creating a local cluster](img/B05468_02_29.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![创建本地集群](img/B05468_02_29.jpg)'
- en: So there you have it, a really basic Docker Swarm cluster that you can launch
    your containers into using your local Docker client, all launched a managed using
    Docker Machine.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你看，这是一个非常基础的Docker Swarm集群，您可以使用本地Docker客户端将容器启动到其中，所有操作都是通过Docker Machine启动和管理的。
- en: 'Before we move onto the next section, we should remove the local cluster. To
    do this, just run the following command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一部分之前，我们应该删除本地集群。为此，只需运行以下命令：
- en: '[PRE26]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Click on `yes` when prompted. You can then check whether the VMs have been terminated
    by running the `docker-machine ls` command.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示时点击`yes`。然后，您可以通过运行`docker-machine ls`命令检查虚拟机是否已终止。
- en: Creating a Remote Cluster
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建远程集群
- en: Before we move onto looking at the next tool, let's launch a cluster in the
    cloud. I am going to be using DigitalOcean for this.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看下一个工具之前，让我们在云中启动一个集群。我将使用DigitalOcean进行此操作。
- en: 'First of all, let''s create a new discovery token. As all we need to do is
    generate a discovery token, there is no need to launch an instance in DigitalOcean
    just for this task, so we will simply bring up a machine locally, make a note
    of the discovery token and then remove it:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个新的发现令牌。由于我们所需要做的只是生成一个发现令牌，因此没有必要仅为此任务在DigitalOcean上启动实例，因此我们将简单地在本地启动一台机器，记下发现令牌后再将其移除：
- en: '[PRE27]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now that we have our discovery token, let''s launch our Swarm cluster in DigitalOcean,
    first of all we will look into Swarm manager:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了发现令牌，让我们在DigitalOcean上启动我们的Swarm集群，首先我们将研究Swarm管理器：
- en: '[PRE28]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then the we will use the two nodes:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将使用这两个节点：
- en: '[PRE29]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'As you can see in the following screenshot, I launched the cluster in DigitalOcean''s
    London datacenter and gave the two nodes additional resources:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下屏幕截图所示，我在DigitalOcean的伦敦数据中心启动了集群，并为两个节点分配了更多资源：
- en: '![Creating a Remote Cluster](img/B05468_02_30.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![创建远程集群](img/B05468_02_30.jpg)'
- en: 'We will configure our local Docker client to use the remote cluster using the
    following command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置本地Docker客户端，使用以下命令连接远程集群：
- en: '[PRE30]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will give us the following information:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供以下信息：
- en: '![Creating a Remote Cluster](img/B05468_02_31.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![创建远程集群](img/B05468_02_31.jpg)'
- en: 'We are going to be using this cluster for the next part of this chapter, so
    try to keep it running for now. If you can''t, then you can remove the cluster
    by running the following command:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个集群进行本章的下一部分，因此目前尽量保持它运行。如果您无法保持运行，则可以通过运行以下命令删除该集群：
- en: '[PRE31]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You should also double the DigitalOcean control panel to ensure that your instances
    have terminated correctly.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该检查DigitalOcean控制面板，以确保您的实例已正确终止。
- en: Note
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that with public cloud services, you are paying for that you use, so
    if you have an instance sat powered on, even if it is an `errored` state, with
    Docker Machine, the meter is running and you will be incurring cost.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，使用公共云服务时，您是按使用量付费的，因此如果您的实例保持开机状态，即使它处于`errored`状态，使用Docker Machine时，计费仍然在继续，您会产生费用。
- en: Discovery backends
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现后端
- en: At this point, it is worth pointing out that Docker allows you to swap out the
    Discovery backends, at the moment we are using the default one which the Hosted
    Discovery with Docker Hub, which isn't recommend for production.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，值得指出的是，Docker允许您更换发现后端，目前我们正在使用默认的托管发现与Docker Hub，它不建议在生产环境中使用。
- en: 'Swarm supports the following discovery services:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm支持以下发现服务：
- en: '**etcd**: [https://coreos.com/etcd/](https://coreos.com/etcd/)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**etcd**: [https://coreos.com/etcd/](https://coreos.com/etcd/)'
- en: '**Consul**: [https://www.consul.io/](https://www.consul.io/)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Consul**: [https://www.consul.io/](https://www.consul.io/)'
- en: '**ZooKeeper**: [https://zookeeper.apache.org/](https://zookeeper.apache.org/)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ZooKeeper**: [https://zookeeper.apache.org/](https://zookeeper.apache.org/)'
- en: For the time being, we are just going to be looking at the tools Docker provides
    rather than any third-party options, so we are going to stick to the default Discovery
    backend.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只会查看 Docker 提供的工具，而不会考虑任何第三方选项，因此我们将坚持使用默认的 Discovery 后端。
- en: Unfortunately, the one thing that the default Discovery backend doesn't give
    you is high availability, this means that our Swarm manager is a single point
    of failure. For our needs, this isn't a problem; however, I would not recommend
    running this configuration in production.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，默认的 Discovery 后端没有提供高可用性，这意味着我们的 Swarm 管理器是单点故障。对于我们的需求来说，这不是一个问题；然而，我不建议在生产环境中运行这种配置。
- en: 'For more information on the different discovery backends and high availability
    with Swarm, refer to the following URLs:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 有关不同 Discovery 后端和 Swarm 高可用性的更多信息，请参考以下 URL：
- en: '**Discovery backends**: [https://docs.docker.com/swarm/discovery/](https://docs.docker.com/swarm/discovery/)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Discovery 后端**: [https://docs.docker.com/swarm/discovery/](https://docs.docker.com/swarm/discovery/)'
- en: '**Swarm High Availability**: [https://docs.docker.com/swarm/multi-manager-setup/](https://docs.docker.com/swarm/multi-manager-setup/)'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swarm 高可用性**: [https://docs.docker.com/swarm/multi-manager-setup/](https://docs.docker.com/swarm/multi-manager-setup/)'
- en: We are going to be looking a lot more at schedulers in later chapters, so for
    now, let's move onto the final service installed by Docker Toolbox.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中深入讨论调度器，所以现在让我们进入 Docker Toolbox 安装的最后一个服务。
- en: Docker Compose
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Compose
- en: So far in our exploration of the tools that ship with Docker Toolbox, we have
    been using services which manage our Docker host machines, the final service that
    we are going to look at in this chapter deals with containers. I am sure that
    you will agree that so far the tools provided by Docker are quite intuitive, Docker
    Compose is no different. It start off life as third-party service called Fig and
    was written by Orchard Labs (the project's original website is still available
    at [http://fig.sh/](http://fig.sh/)).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在我们对 Docker Toolbox 工具的探索中，我们一直在使用管理 Docker 主机的服务，本章我们要看的最后一个服务是处理容器的服务。我相信您会同意，到目前为止，Docker
    提供的工具非常直观，Docker Compose 也不例外。它最初作为一个名为 Fig 的第三方服务开始，由 Orchard Labs 编写（该项目的原始网站仍然可以访问：[http://fig.sh/](http://fig.sh/)）。
- en: 'The original project''s goal was the following:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 原始项目的目标如下：
- en: '*"Provide fast, isolated development environments using Docker"*'
  id: totrans-261
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"使用 Docker 提供快速、独立的开发环境"*'
- en: 'Since Fig became part of Docker, they haven''t strayed too far from the original
    goal:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 Fig 成为 Docker 的一部分后，它们并没有偏离最初的目标：
- en: '*"Compose is a tool for defining and running multi-container Docker applications.
    With Compose, you use a Compose file to configure your application''s services.
    Then, using a single command, you create and start all the services from your
    configuration."*'
  id: totrans-263
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Compose 是一个定义和运行多容器 Docker 应用程序的工具。使用 Compose，您通过 Compose 文件配置应用程序的服务。然后，使用单个命令，您可以从配置中创建并启动所有服务。"*'
- en: Before we start looking at Compose files and start containers up, let's think
    of why a tool such as Compose is useful.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始查看 Compose 文件并启动容器之前，让我们思考一下像 Compose 这样的工具为什么有用。
- en: Why Compose?
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择 Compose？
- en: 'Launching individual containers is as simple as running the following command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 启动单个容器就像运行以下命令一样简单：
- en: '[PRE32]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This will launch and then attach to an Ubuntu container. As we have already
    touched upon, there is a little more to it than just launching simple containers
    though. Docker is not here to replace virtual machines, it is here to run a single
    application.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动并附加到一个 Ubuntu 容器。如我们之前提到的，启动简单容器只是其中的一部分，Docker 并不是用来替代虚拟机的，而是用来运行单个应用程序的。
- en: This means that you shouldn't really run an entire LAMP stack in single container,
    instead, you should look at running Apache and PHP in one container, which is
    then linked with a second container running MySQL. You could take this further,
    running a NGINX container, a PHP-FPM container, and also a MySQL container. This
    is where it gets complicated. All of sudden, your simple line for launching is
    now several lines, all of which have to executed in the correct order with the
    correct flags.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你不应该在单个容器中运行整个LAMP堆栈，应该将Apache和PHP运行在一个容器中，然后与一个运行MySQL的第二个容器连接。你可以更进一步，运行NGINX容器、PHP-FPM容器以及MySQL容器。这就变得复杂了。突然间，你的简单启动命令变成了多行命令，所有命令必须按正确的顺序并带有正确的标志执行。
- en: This is exactly the problem Docker Compose tries to fix. Rather than several
    long commands, you can define your containers using a YAML file. This means that
    you will be able to launch your application with a single command and leave the
    logic of the order in which the containers will be launched to Compose.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是Docker Compose试图解决的问题。你可以使用YAML文件定义容器，而不是执行多个长命令。这意味着你可以通过一个命令启动应用程序，并将容器启动顺序的逻辑交给Compose来处理。
- en: Note
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**YAML Ain''t Markup Language** (**YAML**) is a human-friendly data serialization
    standard for all programming languages.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**YAML 不是标记语言**（**YAML**）是一种人类友好的数据序列化标准，适用于所有编程语言。'
- en: It also means that you can ship your application's Compose file with your code
    base or directly to another developer/administrator and they will be able to launch
    your application exactly how you intended it be executed.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着你可以将应用程序的Compose文件与代码库一起发布，或者直接发送给另一个开发者/管理员，他们将能够按照你预期的方式启动应用程序。
- en: Compose files
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Compose文件
- en: Almost everyone at some point would have installed, used, or read about WordPress,
    so for the next few examples, we will be using the official WordPress container
    from the Docker Hub, you can find details on the container at [https://hub.docker.com/_/wordpress/](https://hub.docker.com/_/wordpress/).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个人在某个时候都会安装、使用或阅读过WordPress，因此在接下来的几个例子中，我们将使用来自Docker Hub的官方WordPress容器，你可以在[https://hub.docker.com/_/wordpress/](https://hub.docker.com/_/wordpress/)上找到该容器的详细信息。
- en: Note
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: WordPress is web software that you can use to create a beautiful website, blog,
    or app. We like to say that WordPress is both free and priceless at the same time.
    For more information, check out [https://wordpress.org/](https://wordpress.org/).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress是一个可以用来创建美丽网站、博客或应用的Web软件。我们喜欢说WordPress既是免费的，又是无价的。欲了解更多信息，请查看[https://wordpress.org/](https://wordpress.org/)。
- en: 'Let''s start by getting a basic WordPress installation up and running, first
    of all create a folder called `wordpress` and then add the following content to
    a file called `docker-compose.yml`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装一个基本的WordPress开始，首先创建一个名为`wordpress`的文件夹，然后将以下内容添加到一个名为`docker-compose.yml`的文件中：
- en: '[PRE33]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You will be able to launch the application using your Swarm cluster by making
    sure that your local Docker client is configured to use it, run `docker-machine
    ls` and make sure that it is active and then run the following command:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 你将能够通过确保本地Docker客户端配置为使用Swarm集群来启动应用程序，运行`docker-machine ls`并确保其处于活动状态，然后运行以下命令：
- en: '[PRE34]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once your client is configured to communicate with your Swarm cluster, run
    the following command within the folder containing the `docker-compose.yml` file:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的客户端配置为与Swarm集群通信，在包含`docker-compose.yml`文件的文件夹中运行以下命令：
- en: '[PRE35]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Using the `-d` flag at the end of the command launches the containers in detached
    mode, this means that they will run in the background. If we didn't use the -d
    flag, then our containers would have launched in the foreground and we would not
    have been able to carry on using the same terminal session without stopping the
    running containers.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令末尾的`-d`标志会以分离模式启动容器，这意味着容器将在后台运行。如果我们不使用-d标志，那么我们的容器将会在前台启动，我们将无法继续使用同一终端会话，而不停止正在运行的容器。
- en: 'You will see something similar to the following output:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到类似以下的输出：
- en: '![Compose files](img/B05468_02_32.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![Compose文件](img/B05468_02_32.jpg)'
- en: 'As you can see, you can find out the IP address of the node where the WordPress
    application has been launched by running `docker ps`. If you were to go to the
    IP address shown in the figure, where `port 80` is listed, you will see a WordPress
    installation screen:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你可以通过运行`docker ps`来查找启动WordPress应用程序的节点的IP地址。如果你访问图中显示的IP地址，其中列出了`端口80`，你将看到一个WordPress安装界面：
- en: '![Compose files](img/B05468_02_33.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![Compose 文件](img/B05468_02_33.jpg)'
- en: One of the interesting things to note is that although the `my-wordpress-app`
    container was defined first in the `docker-compose.yml` file, Compose recognized
    that it was linked to the `my-wordpress-database` container and it launched that
    one first. Also, you may have noticed that the `wordpress:latest` and `mysql:latest`
    images were pulled down on all of the nodes in the Swarm cluster.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的地方是，尽管 `my-wordpress-app` 容器在 `docker-compose.yml` 文件中最先定义，Compose 仍然识别它与
    `my-wordpress-database` 容器的关联，并首先启动了后者。此外，你可能注意到 `wordpress:latest` 和 `mysql:latest`
    镜像已经在 Swarm 集群中的所有节点上被拉取下来。
- en: So, what of the `docker-compose.yml` file itself? Let's look at it again, but
    this time with some comments.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，`docker-compose.yml` 文件本身呢？让我们再看一遍，这次带上一些注释。
- en: 'As far as Compose is concerned, our WordPress application is split into two
    applications, one called **wordpress** and another called **mysql**. Let''s look
    at the `docker-compose.yml` file again:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 就 Compose 而言，我们的 WordPress 应用程序被拆分成两个应用程序，一个叫做 **wordpress**，另一个叫做 **mysql**。让我们再次看看
    `docker-compose.yml` 文件：
- en: '[PRE36]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: At the top level, we have the application name. From here, we then start to
    define the configuration for the application by giving a key and value, making
    sure that you pay close attention to the indentation. I tend to use two spaces
    to make it clear that the indent is there, but not so much that it becomes unreadable.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在最顶层，我们有应用程序名称。从这里开始，我们定义应用程序的配置，通过给出键和值，确保你密切关注缩进。我倾向于使用两个空格来明确表示有缩进，但又不会使其变得难以阅读。
- en: The first key that we are defining is `container_name`, we don't have to do
    this as Compose will name our containers automatically, based on the name of the
    folder we are in and the application name. If we hadn't defined this key, then
    our containers would have been called `wordpress_wordpress_01` and `wordpress_mysql_01`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义的第一个关键字是 `container_name`，我们不必这么做，因为 Compose 会根据我们所在的文件夹名称和应用程序名称自动命名我们的容器。如果我们没有定义这个关键字，那么我们的容器将被命名为
    `wordpress_wordpress_01` 和 `wordpress_mysql_01`。
- en: The next key tells the application which `image` to use, this will pull the
    image straight from the Docker Hub.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个关键字告诉应用程序使用哪个 `image`，这将直接从 Docker Hub 拉取镜像。
- en: Then we define the `ports`, not that we only define the ports for the **wordpress**
    application and not the **mysql** one. As we want our **wordpress** application
    to listen on port of the host machine, we have given 80:80\. In this case, the
    first 80 is the **host** port and the second one is the **container** port that
    we want to expose.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义了 `ports`，注意我们只为 **wordpress** 应用程序定义了端口，而没有为 **mysql** 应用程序定义。因为我们希望
    **wordpress** 应用程序监听宿主机的端口，所以我们给了 80:80。在这种情况下，第一个 80 是 **宿主机** 端口，第二个是我们希望暴露的
    **容器** 端口。
- en: Again, the next key is only used on the **wordpress** application, this defines
    the `links`. Links are used to link containers together, exposing, in this case,
    the **mysql** container to the **wordpress** container. This means that when the
    **wordpress** container is launched, it will know the IP address of the **mysql**
    container and only its ports will be exposed to the **wordpress** container.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，接下来的关键字只在 **wordpress** 应用程序中使用，它定义了 `links`。链接用于将容器连接在一起，这里将 **mysql** 容器暴露给
    **wordpress** 容器。这意味着当 **wordpress** 容器启动时，它将知道 **mysql** 容器的 IP 地址，并且只有 **mysql**
    容器的端口会暴露给 **wordpress** 容器。
- en: The final key we are defining is `environment`, here are we passing further
    keys and values that will be set as environment variables on the containers when
    they launch.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义的最后一个关键字是 `environment`，在这里我们传递更多的键和值，这些将在容器启动时设置为环境变量。
- en: A full break down of all of the keys available in compose files can be found
    in the official documentation at [https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/).
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: Compose 文件中所有可用键的详细说明可以在官方文档中找到：[https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)。
- en: Launching more
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动更多
- en: 'One of the advantages of using Compose is that each of the environments it
    launches is isolated, let''s launch another WordPress installation using the following
    `docker-compose.yml` file:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Compose 的一个优势是它启动的每个环境都是隔离的，让我们使用以下 `docker-compose.yml` 文件启动另一个 WordPress
    安装：
- en: '[PRE37]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'As you can see, other than the container names, it is exactly the same as the
    previous environment we launched:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，除了容器名称外，它与我们之前启动的环境完全相同：
- en: '![Launching more](img/B05468_02_34.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![启动更多](img/B05468_02_34.jpg)'
- en: The other thing you will notice is that the `my-other-wordpress` containers
    launched on the second node in the cluster. At the moment, each Compose environment
    will launch on a single node. As we launch more, we will start to have to change
    port assignments as they will start to clash on the hosts (that is, you can't
    have two `port 80` assigned to a single host).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到，`my-other-wordpress`容器已在集群的第二个节点上启动。目前，每个Compose环境会在单一节点上启动。随着我们启动更多的环境，我们将需要开始调整端口分配，因为它们将在主机上发生冲突（也就是说，你不能将两个`port
    80`分配给同一主机）。
- en: Note
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't forget to remove any cloud-based instances that you have launched by using
    the `docker-machine rm` command and also check your cloud provider's control panel
    to ensure that the instances have correctly terminated.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了通过使用`docker-machine rm`命令删除你启动的任何基于云的实例，同时检查你的云服务提供商的控制面板，确保这些实例已正确终止。
- en: Summary
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered the additional client tools provided by Docker
    to extend the functionality of your core Docker installation, all of the tools
    that we have looked at have been designed to slot into your workflow and be as
    simple as possible to use. In the later chapters, we will be looking at how to
    expand some of the core functionality of Docker using third-party services. When
    we do, we will revisit a few of the tools that we have been through in this chapter
    and look at how they add additional functionality to them.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Docker提供的附加客户端工具，这些工具可以扩展你核心Docker安装的功能。我们所查看的所有工具都旨在融入你的工作流程，并尽可能简单易用。在接下来的章节中，我们将探讨如何使用第三方服务扩展Docker的一些核心功能。到时，我们会重新审视本章中提到的一些工具，并看看它们如何为这些工具增加额外的功能。
