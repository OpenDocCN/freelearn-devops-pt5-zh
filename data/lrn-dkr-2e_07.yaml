- en: Securing Docker Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器安全性
- en: 'So far, we have talked a lot about the fast-evolving Docker technology in this
    book. It is not a nice and neat finish if the Docker-specific security issues
    and solution approaches are not articulated in detail to you. Hence, this chapter
    is specially crafted and incorporated into this book in order to explain all about
    the security challenges of Docker-inspired containerization. We also wanted to
    throw more light on how the lingering security concerns are being addressed through
    a host of pioneering technologies, high-quality algorithms, enabling tools, and
    best practices. In this chapter, we will deal with the following crucial topics
    in detail:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在本书中已经讨论了很多快速发展的 Docker 技术。如果不详细阐述 Docker 特有的安全问题及其解决方法，那就不算是一个完整的结尾。因此，本章特别为此而编写，并加入到本书中，目的是全面解释
    Docker 启发的容器化的安全挑战。我们还希望更多地揭示如何通过一系列开创性的技术、高质量的算法、支持工具和最佳实践来应对长期存在的安全隐患。本章中，我们将详细讨论以下关键主题：
- en: Are the Docker containers secure?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 容器安全吗？
- en: The security features of containers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器的安全特性
- en: The emerging security-enabling approaches
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新兴的安全支持方法
- en: The best practices for ensuring container security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保容器安全的最佳实践
- en: The security scenario in the containerization domain
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器化领域的安全态势
- en: Ensuring unbreakable and impenetrable security for any IT systems and business
    services has been one of the prime needs and the predominant challenges in the
    IT field for decades now. Brilliant minds can identify and exploit all kinds of
    security holes and flaws (some of them are being carelessly and unknowingly introduced
    at the system conceptualization and concretization stages). This loophole ultimately
    brings innumerable breaches and chaos during IT service delivery. Sometimes, systems
    are even becoming unavailable for consumers and clients.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 确保任何 IT 系统和商业服务的不可破坏和无法渗透的安全性，一直是几十年来 IT 领域的主要需求和主导挑战。聪明的人才能够识别并利用各种安全漏洞和缺陷（其中一些在系统构思和实现阶段就已经被疏忽或无意间引入）。这些漏洞最终会导致无数的安全
    breaches 和混乱，影响 IT 服务的交付。有时，系统甚至变得无法为消费者和客户提供服务。
- en: Security experts and engineers, on the other hand, try out every kind of trick
    and technique at their disposal in order to stop hackers in their evil journey.
    However, it has not been an outright victory so far. Here and there, there are
    some noteworthy intrusions from unknown sources resulting in highly disconcerting
    IT slowdowns and sometimes breakdowns. Organizations and governments across the
    globe are, therefore, investing heavily their talents, time, and treasures in
    security research endeavors in order to completely decimate all the security and
    safety-related incidents and accidents. There are many security-specific product
    vendors and managed security service providers aiming to minimize the irreparable
    and indescribable consequences of security threats and vulnerabilities on IT systems.
    Precisely speaking, for any existing and emerging technology, security has been
    the most crucial and critical aspect. The point to be noted here is that enterprise
    and cloud IT teams can't be carefree and complacent in fulfilling the security
    needs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，安全专家和工程师们则尝试使用各种技巧和技术，力图阻止黑客在他们的恶意旅程中得逞。然而，到目前为止，这场战斗并没有取得彻底的胜利。时不时地，来自未知来源的侵入事件引发了令人不安的
    IT 系统慢速，有时甚至崩溃。因此，全球的组织和政府正在大量投资他们的才智、时间和财富于安全研究，以完全消除所有与安全和安全性相关的事件和事故。许多专注于安全的产品供应商和托管安全服务提供商致力于最小化安全威胁和漏洞对
    IT 系统造成的无法修复和难以描述的后果。准确来说，对于任何现有或新兴技术，安全一直是最至关重要的方面。需要注意的是，企业和云计算 IT 团队在满足安全需求时，不能掉以轻心或自满。
- en: Docker-enabled containerization represents the next logical step on the memorable
    and indomitable journey from physical, underutilized, closed, monolithic, and
    single-tenanted IT resources to supple, open, affordable, automated, shared, service-oriented,
    optimally utilized, and virtual IT resources. Precisely speaking, we are tending
    toward software-defined and containerized cloud environments in order to reap
    a bunch of widely articulated business, technical, and user benefits. As accentuated
    several times in this book, Docker containers typically comprise a filesystem,
    network stack, process space, and everything else needed to run an application
    anywhere. This means that each Docker container includes the designated application
    and all its dependencies to be shipped, hosted, and executed in an independent
    manner. This widely celebrated abstraction, however, is prone to fresh and advanced
    security attacks, vulnerabilities, and holes. Systems can be made inaccessible,
    datasets can be breached, services can be stopped, and so on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Docker的容器化代表了从物理、未充分利用、封闭、单体且单租户的IT资源到灵活、开放、经济、自动化、共享、面向服务、优化利用并虚拟化的IT资源的不可抗拒而又充满意义的旅程的下一个逻辑步骤。精确来说，我们正朝着软件定义和容器化云环境的方向发展，以便收获一系列广泛表述的商业、技术和用户利益。正如本书多次强调的那样，Docker容器通常包括文件系统、网络栈、进程空间以及运行应用所需的一切。这意味着每个Docker容器都包含指定的应用程序及其所有依赖项，并以独立的方式进行打包、托管和执行。然而，这种广受赞誉的抽象化，容易受到新型且先进的安全攻击、漏洞和缺口的影响。系统可能无法访问，数据集可能被突破，服务可能会停止，等等。
- en: Precisely speaking, the raging Docker technology promises to drastically transform
    the way worldwide enterprises develop, deploy, and manage critical software applications.
    However, containers are no panacea. The same challenges we face while deploying
    and delivering an application on hybrid IT environments get replicated in containers.
    This chapter pinpoints the proven approaches for mitigating the containerization-induced
    and inspired security issues. As cloud environments are extensively containerized,
    the unbreakable and impenetrable containers ultimately vouch for safe, secure,
    and smart cloud centers. The long-term goal is to have many robust, resilient,
    and rewarding containers in publicly discoverable locations. There are undoubtedly
    pioneering tools and platforms to compose better and bigger containers out of
    those customizable, configurable, and compact containers through commingling and
    collaboration.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 精确来说，炙手可热的Docker技术承诺将极大地改变全球企业开发、部署和管理关键软件应用程序的方式。然而，容器并不是万能的。我们在混合IT环境中部署和交付应用程序时面临的相同挑战，也会在容器中得到复制。本章明确指出了减轻容器化引发的安全问题的有效方法。随着云环境被广泛容器化，坚不可摧且无法渗透的容器最终确保了安全、可靠和智能的云数据中心。长期目标是将许多强大、弹性和有价值的容器放置在公开可发现的地点。毫无疑问，已经有一些开创性的工具和平台，通过混合和协作，将这些可定制、可配置和紧凑的容器组合成更大、更好的容器。
- en: The security ramifications of Docker containers
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker容器的安全影响
- en: 'The surging popularity of Docker technology is primarily due to the fact that
    Docker Inc., in collaboration with other interested parties, has introduced an
    open and industry-strength image format for efficiently packaging, distribution,
    and running of software applications. However, stuffing many applications into
    a system opens up definite worries and vulnerabilities:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Docker技术日益流行，主要是因为Docker公司与其他相关方合作，推出了一个开源且具有行业强度的镜像格式，用于高效地打包、分发和运行软件应用程序。然而，将许多应用程序塞入一个系统中会带来明显的担忧和漏洞：
- en: '**Exploiting host kernels**: Containers share the same host kernel and this
    sharing may turn out to be a single point of failure for the containerization
    paradigm. A flaw in the host kernel could allow a process within a container to
    break out to bring down the host machine. Thus the domain of Docker security is
    about exploring various options toward limiting and controlling the attack surface
    on the kernel. Security administrators and architects have to meticulously leverage
    the security features of the host operating system to secure the kernel.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用主机内核**：容器共享相同的主机内核，而这种共享可能会成为容器化范式的单点故障。主机内核中的缺陷可能允许容器内的进程突破并使主机机器崩溃。因此，Docker安全领域的工作就是探索各种选项，限制和控制内核的攻击面。安全管理员和架构师必须精心利用主机操作系统的安全功能来保护内核。'
- en: '**Denial-of-service (DoS) attacks**: All containers ought to share kernel resources.
    If one container can monopolize access to certain resources including memory and
    processing, other containers on the host are bound to starve for computing, storage,
    and networking resources. Ultimately, the enigma of DoS creeps in and legitimate
    users would struggle for accessing the services.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拒绝服务（DoS）攻击**：所有容器都必须共享内核资源。如果某个容器可以垄断对某些资源（包括内存和处理能力）的访问，那么宿主机上的其他容器必定会因计算、存储和网络资源的不足而无法正常工作。最终，DoS
    的问题就会悄然出现，合法用户将难以访问服务。'
- en: '**Container breakouts**: An attacker who gains access to a container should
    not be able to gain access to other containers or the host. By default, users
    are not namespaced and hence any process that breaks out of the container will
    have the same privileges on the host as it has in the container. That is, if a
    process has the root privilege, then it has the root privilege on the host machine
    also. This means that a user can gain the elevated and even root privileges through
    a bug in an application code. Then the result is simply irreparable damages. That
    is, we need to adhere to the least privilege: each process and container should
    run with the minimum set of access rights and resources.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器突破**：一旦攻击者获得了对某个容器的访问权限，就不应能够访问其他容器或宿主机。默认情况下，用户没有命名空间，因此，任何突破容器的进程将拥有与在容器中相同的权限。也就是说，如果某个进程具有
    root 权限，那么它在宿主机上也拥有 root 权限。这意味着用户可以通过应用程序代码中的漏洞获取提升的权限，甚至是 root 权限。最终，结果将是无法修复的损害。因此，我们需要遵循最小权限原则：每个进程和容器都应该以最小的访问权限和资源集运行。'
- en: '**Poisoned images**: Docker images also can be compromised and tampered resulting
    in bad containers and hosts. We wrote about the methods for thoroughly cleansing
    and curating Docker images while depositing in image repositories. Similarly,
    strong access control mechanisms are in place for mitigating the poisoning of
    images.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中毒镜像**：Docker 镜像也可能被破坏和篡改，从而导致不良容器和宿主机的出现。我们曾经讨论过如何在镜像仓库中彻底清理和管理 Docker 镜像。类似地，也采取了强有力的访问控制机制，以减轻镜像中毒的风险。'
- en: Thus, Docker images, containers, clusters, hosts, and clouds are bound to be
    impeded with a litany of viruses, malware, and other crucial threats. Thus, the
    domain of Docker security has become the most challenging area for both researchers
    and practitioners lately and we can expect a number of game-changing and security-enhancing
    algorithms, approaches, and articulations in the days ahead.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Docker 镜像、容器、集群、宿主机和云服务将不可避免地受到病毒、恶意软件和其他关键威胁的影响。因此，Docker 安全领域近年来已经成为研究人员和从业者最具挑战性的领域之一，未来我们可以期待一系列具有突破性且增强安全性的算法、方法和论述。
- en: The security facets - virtual machines versus Docker containers
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全方面 - 虚拟机与 Docker 容器对比
- en: Docker security is being given prime importance, considering the fact that the
    adoption and adaptation of Docker containers are consistently on the rise. Undoubtedly,
    there are a lot of works for ensuring utmost security for Docker containers and
    the latest releases of the Docker platform have a number of security-enabling
    features embedded.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Docker 容器的采用和适应不断增加，Docker 安全性被赋予了极高的重要性。毫无疑问，为了确保 Docker 容器的最大安全性，已经有大量的工作在进行，而
    Docker 平台的最新版本也嵌入了多种安全增强功能。
- en: 'In this section, we are going to describe where the Docker containers stand
    as far as the security imbroglio is concerned. As containers are being closely
    examined in synchronization with **Virtual Machines** (**VMs**), we will start
    with a few security-related points of VMs and containers. Let''s start with understanding
    how VMs differ from containers. Typically, VMs are heavyweight and hence bloating,
    whereas containers are lightweight and hence, slim and sleek. The following table
    captures the renowned qualities of VMs and containers:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将描述在安全问题上，Docker 容器所处的位置。由于容器与**虚拟机**（**VMs**）正在密切配合进行研究，我们将从虚拟机和容器的一些安全相关点开始。首先，了解虚拟机和容器之间的区别。通常，虚拟机是重量级的，因此显得臃肿，而容器则是轻量级的，因此精简且流畅。下表概述了虚拟机和容器的知名特点：
- en: '| **Virtual Machines** | **Containers** |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **虚拟机** | **容器** |'
- en: '| A few VMs run together on a single physical machine (low density). | Tens
    of containers can run on a single physical machine or VM (high density). |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 一些虚拟机在单一物理机器上共同运行（低密度）。 | 数十个容器可以在单一物理机器或虚拟机上运行（高密度）。 |'
- en: '| This ensures complete isolation of VMs for security. | This enables the isolation
    at the process level and provides additional isolation using features, such as
    namespaces and cgroups. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 这确保了虚拟机的完全隔离以增强安全性。 | 这使得在进程级别上实现隔离，并通过诸如命名空间（namespace）和控制组（cgroups）等特性提供额外的隔离。
    |'
- en: '| Each VM has its own OS and the physical resources managed by an underlying
    hypervisor. | Containers share the same kernel with their Docker host. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 每个虚拟机都有自己的操作系统和由底层虚拟机监控程序管理的物理资源。 | 容器与 Docker 主机共享相同的内核。 |'
- en: '| For networking, VMs can be linked to virtual or physical switches. Hypervisors
    have a buffer for I/O performance improvement, NIC bonding, and so on. | Containers
    leverage standard IPC mechanisms, such as signals, pipes, sockets, and so on,
    for networking. Each container gets its own network stack. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 在网络方面，虚拟机可以与虚拟交换机或物理交换机连接。虚拟机监控程序具有用于提高 I/O 性能、NIC 绑定等的缓冲区。 | 容器利用标准的进程间通信（IPC）机制，如信号、管道、套接字等来实现网络通信。每个容器都有自己的网络栈。
    |'
- en: 'The following diagram illustrates how hypervisor-based virtualization enables
    the realization of VMs out of a physical machine:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了基于虚拟机监控程序的虚拟化如何实现从物理机中创建虚拟机：
- en: '![](img/image_11_001.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_11_001.jpg)'
- en: 'The following diagram vividly conveys how containerization is distinguishably
    deviating from hypervisor-based virtualization:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表生动地展示了容器化如何显著偏离基于虚拟机监控程序的虚拟化：
- en: '![](img/image_11_002.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_11_002.jpg)'
- en: The debate on the security side of VMs and containers is heating up. There are
    arguments and counter arguments in favor of one or the other. In the case of the
    virtualization paradigm, the hypervisors are the centralized and core controllers
    for the VMs. Any kind of access of freshly provisioned VMs needs to go through
    this hypervisor solution, which stands as a solid wall for any kind of unauthenticated,
    unauthorized, and unethical purposes. Therefore, the attack surface of a VM is
    smaller when compared to containers. The hypervisor has to be hacked or broken
    into in order to impact other VMs. This means that an attacker has to route an
    attack through both the VM kernel and the hypervisor before being able to touch
    the host kernel.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关于虚拟机（VM）和容器的安全性讨论正变得越来越激烈。对于这两者，都有支持和反对的观点。在虚拟化范式中，虚拟机监控程序（hypervisor）是虚拟机的集中式核心控制器。任何新创建虚拟机的访问都必须通过这个虚拟机监控程序解决方案，它作为一道坚固的防线，防止任何未经认证、未授权和不道德的目的。因此，虚拟机的攻击面相较于容器来说要小。黑客必须攻破或入侵虚拟机监控程序，才能影响其他虚拟机。这意味着攻击者必须先绕过虚拟机内核和虚拟机监控程序，才能接触到宿主机内核。
- en: In contrast to the virtualization paradigm, the containers are placed directly
    on top of the kernel of the host system. This lean and mean architecture gives
    a very much higher efficiency because it completely eliminates the emulation layer
    of a hypervisor and also offers a much higher container density. However, unlike
    the VM paradigm, the container paradigm does not have many layers, so one can
    easily gain access to the host and other containers if any of the containers is
    compromised. Therefore, the attack surface of a container is larger when compared
    to VMs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与虚拟化范式不同，容器直接部署在宿主系统的内核之上。这种简洁高效的架构提供了更高的效率，因为它完全消除了虚拟机监控程序的仿真层，并且能够提供更高的容器密度。然而，与虚拟机范式不同，容器范式没有那么多的层次结构，因此如果任何容器被攻破，攻击者就很容易访问宿主机和其他容器。因此，容器的攻击面相较于虚拟机来说要大。
- en: However, the designers of the Docker platform have given a due consideration
    to this security risk and designed the system to thwart most of the security risks.
    In the ensuing sections, we will discuss the security that is innately designed
    in the system, the solutions being prescribed to substantially enhance the container
    security, and the best practices and guidelines.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Docker 平台的设计者已经充分考虑了这一安全风险，并设计了系统来防止大多数安全风险。在接下来的部分，我们将讨论系统中天生设计的安全性、为显著增强容器安全性而采取的解决方案以及最佳实践和指南。
- en: The prominent security-fulfilment features of containers
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器的突出安全实现特性
- en: Linux containers, especially Docker containers, have a few interesting security-fulfilling
    features innately.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 容器，尤其是 Docker 容器，天生具备一些有趣的安全实现特性。
- en: 'As discussed, Docker uses a host of security barricades to stop breaking out.
    That is, if one security mechanism gets broken, other mechanisms quickly come
    in the way of containers being hacked. There are a few mainline zones that are
    to be examined when evaluating the security implications of Docker containers.
    As emphasized previously, Docker brings a variety of isolation capabilities to
    containerized applications to sharply increase their security. Most of them are
    made available out of the box. The policy addition, annulment, and amendment capabilities
    at granular level take care of the security requirements of containerization.
    The Docker platform allows you to do the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker 使用了一系列安全防护措施来防止容器越狱。也就是说，如果一个安全机制被突破，其他机制会迅速阻止容器被黑客攻击。在评估 Docker
    容器的安全性时，有几个主要领域需要检查。如前所述，Docker 为容器化应用程序提供了多种隔离功能，显著提高了它们的安全性。大多数功能是开箱即用的。细粒度的策略添加、废除和修改功能能够满足容器化的安全需求。Docker
    平台允许您执行以下操作：
- en: Isolate applications from each other
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序彼此隔离
- en: Isolate applications from the host
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序与宿主机隔离
- en: Improve the security of your application by restricting its capabilities
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过限制应用程序的能力来提高其安全性
- en: Encourage adoption of the principle of least privilege
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励采用最小权限原则
- en: This open-source platform is inherently able to provide these isolations for
    all kinds of applications on different runtime environments such as VMs, bare
    metal servers, and traditional IT.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个开源平台天生能够为不同运行时环境（如虚拟机、裸金属服务器和传统 IT）中的各种应用程序提供这些隔离功能。
- en: Immutable infrastructure
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可变基础设施
- en: When you deploy an update to your application, you should create new instances
    (servers and/or containers) and destroy the old ones, instead of trying to upgrade
    them in place. Once your application is running, *you don't touch it!* The benefits
    come in the form of repeatability, reduced management overhead, easier rollbacks,
    and so on. An **immutable image** is an image that contains everything it needs
    to run the application, so it comprises the source code. One of the principles
    of Docker containers is that an image is immutable. That is, once built, it is
    unchangeable, and if you want to make changes, you'll get a new image as a result.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为应用程序部署更新时，应该创建新的实例（服务器和/或容器）并销毁旧的实例，而不是尝试在原地进行升级。一旦应用程序开始运行，*你就不再触碰它了!* 这样带来的好处包括可重复性、减少管理开销、便于回滚等。一张**不可变镜像**是包含运行应用程序所需的一切内容的镜像，因此它包含了源代码。Docker
    容器的一个原则是镜像是不可变的。也就是说，一旦构建完成，它就不能更改，如果你想做更改，你将得到一个新的镜像作为结果。
- en: Docker containers are self-sufficient and hence we just have to run the container
    without any hassle about anything else, such as mounting volumes. This means that
    we can share our application with our users or partners in a more easy and transparent
    way. The direct consequence is that we can easily scale our system in an automated
    manner with tools, such as Kubernetes, that allows us to run a set of containers
    on a set of machines, that is, a **cluster**.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器是自给自足的，因此我们只需要运行容器，而不必为其他事项（如挂载卷）担忧。这意味着我们可以以更简单、更透明的方式与用户或合作伙伴共享我们的应用程序。直接的结果是，我们可以通过
    Kubernetes 等工具轻松地以自动化的方式扩展我们的系统，这些工具允许我们在一组机器上运行一组容器，也就是说，一个**集群**。
- en: Finally, the immutable containers are bound to collapse if someone tries to
    play with them and hence any kind of manipulation toward malfunctioning is nullified
    at the initial stage itself.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，不可变的容器如果被人尝试篡改，必定会崩溃，因此任何导致故障的操作都会在最初阶段就被无效化。
- en: Resource isolation
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源隔离
- en: 'As we all know, containers are being positioned for the era of the **Microservices
    Architecture** (**MSA**). That is, in a single system, there can be multiple generic
    as well as purpose-specific services that dynamically collaborate with one another
    for realizing easy-to-sustain distributed applications. With the multiplicity
    and heterogeneity of services in a physical system on the climb, it is natural
    that the security complexity is bound to shoot up. Therefore, resources need to
    be clearly demarcated and isolated in order to escape from any kind of perilous
    security breaches. The widely accepted security approach is to leverage the kernel
    features including namespaces. The following is the explanation of namespaces
    and cgroups:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，容器正逐步成为**微服务架构**（**MSA**）时代的核心组成部分。也就是说，在一个系统中，可以有多个通用的以及特定目的的服务，它们可以动态地协作，以实现易于维护的分布式应用程序。随着物理系统中服务的多样性和异质性不断增加，安全复杂性自然会急剧上升。因此，需要明确界定和隔离资源，以避免任何潜在的安全漏洞。被广泛接受的安全方法是利用内核特性，包括命名空间。以下是命名空间和cgroups的解释：
- en: '**Namespaces**: A Linux namespace wraps a set of system resources and presents
    them to processes within the namespace, making it look as if they are dedicated
    to the processes. In short, the namespace is a resource management tool that helps
    in isolating system resources for processes. Kernel namespaces provide the first
    and foremost form of isolation. Processes running in a container don''t affect
    processes running in another container or in the host system. The network namespace
    ensures that each container gets its own network stack, thus restricting the access
    to the interfaces of other containers.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名空间**：Linux命名空间将一组系统资源封装，并将其呈现给命名空间内的进程，使得它们看起来似乎是专门为这些进程分配的。简而言之，命名空间是一种资源管理工具，有助于为进程隔离系统资源。内核命名空间提供了最基本的隔离形式。运行在容器中的进程不会影响其他容器或主机系统中的进程。网络命名空间确保每个容器都拥有自己的网络栈，从而限制了对其他容器接口的访问。'
- en: '**Cgroups**: This is a Linux kernel concept that governs the isolation and
    usage of system resources, such as CPU and memory, for a group of processes. For
    example, if you have an application that is taking up a lot of CPU cycles and
    memory, such as a scientific computing application, you can put the application
    in a cgroup to limit its CPU and memory usage. It ensures that each container
    gets its fair share of memory, CPU, and disk I/O, and more importantly, that a
    single container cannot bring the system down by exhausting one of those resources.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cgroups**：这是一个Linux内核概念，用于管理一组进程的系统资源隔离和使用情况，如CPU和内存。例如，如果你有一个占用大量CPU周期和内存的应用程序，比如科学计算应用，你可以将该应用放入一个cgroup中，以限制其CPU和内存的使用。它确保每个容器能够公平地分配内存、CPU和磁盘I/O，更重要的是，单个容器无法通过耗尽这些资源导致系统崩溃。'
- en: Resource accounting and control
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 资源计量与控制
- en: Containers consume different physical resources in order to deliver their unique
    capabilities. However, the resource consumption has to be disciplined, orderly
    and hence, critically regulated. When there is a deviation, there is a greater
    possibility of invalidating the containers from performing their assigned tasks
    in time. For example, the DoS results if the resource usage is not systematically
    synchronized.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 容器需要消耗不同的物理资源，以提供其独特的功能。然而，资源消耗必须有序、规范，因此需要严格的管理。当出现偏差时，容器无法按时执行指定任务的可能性就会增大。例如，如果资源使用不同步，就可能导致DoS（拒绝服务）问题。
- en: The Linux containers leverage cgroups to implement resource accounting and auditing
    to run applications in a frictionless manner. As we all know, there are multiple
    resources that contribute to run the containers successfully. They provide many
    useful metrics and ensure that each container gets its fair share of memory, CPU,
    and disk I/O. Further, they guarantee that a single container cannot bring the
    system down by exhausting any one of these resources. This feature helps you fend
    off some DoS attacks. This feature helps in running containers as multi-tenant
    citizens in cloud environments to ensure their uptime and performance. Any kind
    of exploitation by other containers are identified proactively and nipped in the
    bud so that any kind of misadventure gets avoided.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 容器利用 cgroups 实现资源计量和审计，以无障碍地运行应用程序。正如我们所知道的，运行容器成功所需的资源有很多。它们提供许多有用的度量，并确保每个容器获得其公平的内存、CPU
    和磁盘 I/O 配额。此外，它们保证单个容器无法通过耗尽这些资源中的任何一项来使系统崩溃。此功能帮助你防御一些 DoS 攻击。此功能有助于在云环境中以多租户方式运行容器，以确保其正常运行时间和性能。任何其他容器的利用行为都会被主动识别并从源头上杜绝，从而避免任何不当行为。
- en: The root privilege - impacts and best practices
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: root 权限 - 影响及最佳实践
- en: The Docker Engine efficiently protects the containers from any malicious activities
    by leveraging the recently mentioned resource isolation and control techniques.
    Nonetheless, Docker exposes a few potential security threats because the Docker
    daemon runs with the root privilege. Here, in this section, we list out a few
    security risks and the best practices to mitigate them.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 引擎通过利用前面提到的资源隔离和控制技术，有效地保护容器免受任何恶意活动。然而，由于 Docker 守护进程以 root 权限运行，Docker
    暴露出一些潜在的安全威胁。在本节中，我们列出了一些安全风险以及缓解这些风险的最佳实践。
- en: Another important principle to adhere to is the least privilege. Each process
    within a container has to run with the minimal access rights and resources in
    order to deliver its function. The advantage here is that if a container gets
    compromised, the other resources and data can escape from further attacks.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要遵循的重要原则是最小权限。容器中的每个进程必须以最小的访问权限和资源运行，以完成其功能。这里的优势在于，如果一个容器被攻破，其他资源和数据可以避免进一步的攻击。
- en: The trusted user control
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 受信任用户控制
- en: Since the Docker daemon runs with the root privilege, it has the capability
    to mount any directory from the Docker host to the container, without limiting
    any access rights. That is, you can start a container, where the `/host` directory
    will be the `/` directory on your host, and the container will be able to alter
    your host filesystem without any restriction. This is just an example among a
    myriad of malicious uses. Considering these activities, the latter versions of
    Docker restricts the access to the Docker daemon through a UNIX socket. Docker
    can be configured to access the daemon through the REST API over HTTP if you explicitly
    decide to do so. However, you should ensure that it will be reachable only from
    a trusted network or VPN or protected with stunnel and client SSL certificates.
    You can also secure them with HTTPS and certificates.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Docker 守护进程以 root 权限运行，因此它有能力将 Docker 主机上的任何目录挂载到容器中，而不会限制任何访问权限。也就是说，你可以启动一个容器，其中
    `/host` 目录将是主机上的 `/` 目录，而容器将能够在没有任何限制的情况下更改主机文件系统。这只是众多恶意用途中的一个例子。考虑到这些活动，Docker
    的后续版本通过 UNIX 套接字限制了对 Docker 守护进程的访问。如果你明确决定这样做，Docker 可以配置为通过 HTTP 的 REST API
    访问守护进程。然而，你应该确保它仅能从受信任的网络或 VPN 访问，或者通过 stunnel 和客户端 SSL 证书保护。你还可以通过 HTTPS 和证书来保护它们。
- en: Non-root containers
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 非根容器
- en: As mentioned previously, the Docker containers by default run with the root
    privilege and so does the application that runs inside the container. This is
    another major concern from the security perspective because hackers can gain root
    access to the Docker host by hacking the application running inside the container.
    Docker provides a simple yet powerful solution to change the container's privilege
    to a non-root user and thus thwart malicious root access to the Docker host. This
    change to the non-root user can be accomplished using the `-u` or `--user` option
    of the `docker run` subcommand or the `USER` instruction in the `Dockerfile`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker 容器默认以根权限运行，容器内运行的应用程序也是如此。从安全角度来看，这是另一个主要的担忧，因为黑客可以通过攻击容器内运行的应用程序获得
    Docker 主机的根权限。Docker 提供了一个简单而强大的解决方案，将容器的权限更改为非根用户，从而防止恶意的根访问 Docker 主机。这个非根用户的修改可以通过
    `docker run` 子命令中的 `-u` 或 `--user` 选项，或者通过 `Dockerfile` 中的 `USER` 指令来实现。
- en: In this section, we will demonstrate by showing you the default root privilege
    of the Docker container and then continue to modify the root privilege to a non-root
    user using the `USER` instruction in the `Dockerfile`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过展示 Docker 容器的默认根权限，并继续使用 `Dockerfile` 中的 `USER` 指令将根权限修改为非根用户，来进行演示。
- en: 'First, demonstrate the default root privilege of the Docker container by running
    a simple `id` command in a `docker run` subcommand, as shown here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过在 `docker run` 子命令中运行简单的 `id` 命令，展示 Docker 容器的默认根权限，如下所示：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let us perform the following steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们执行以下步骤：
- en: 'Craft a `Dockerfile` that creates a non-root privilege user and modify the
    default root user to the newly-created non-root privilege user, as shown here:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个 `Dockerfile`，创建一个非根权限用户，并将默认的根用户修改为新创建的非根权限用户，如下所示：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Proceed to build the Docker image using the `docker build` subcommand, as depicted
    here:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `docker build` 子命令构建 Docker 镜像，如下所示：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, let''s verify the current user of our container using the `id` command
    in a `docker run` subcommand:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们通过在 `docker run` 子命令中使用 `id` 命令来验证容器当前的用户：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Evidently, the container's user, group, and the groups are now changed to a
    non-root user.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，容器的用户、组和组现在已更改为非根用户。
- en: Modifying the default root privilege to a non-root privilege is a very effective
    way of containing malevolent penetration into the Docker host kernel.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将默认的根权限修改为非根权限是防止恶意渗透到 Docker 主机内核的一个非常有效的方式。
- en: So far, we discussed the unique security-related kernel characteristics and
    capabilities. Most of the security holes can be closed down by understanding and
    applying those kernel capabilities. Security experts and exponents, having considered
    the faster and widespread adoption of the raging containerization idea in production
    environments, have brought forth a few more additional security solutions, described
    as follows in detail. These security methods need to be given utmost importance
    by developers as well as system administrators while developing, deploying, and
    delivering enterprise-class containers in order to nullify any kind of inside
    or outside security attacks.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了与安全相关的独特内核特性和功能。通过理解和应用这些内核特性，大多数安全漏洞可以被修补。安全专家和倡导者在考虑到容器化理念在生产环境中的快速普及后，提出了更多的安全解决方案，具体描述如下。这些安全方法在开发、部署和交付企业级容器时，开发人员和系统管理员必须给予极高的重视，以防范任何内部或外部的安全攻击。
- en: SELinux for container security
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器安全的 SELinux
- en: '**Security-Enhanced Linux** (**SELinux**) is a brave attempt to clean up the
    security holes in Linux containers and is an implementation of a **Mandatory Access
    Control** (**MAC**) mechanism, **Multi-Level Security** (**MLS**), and **Multi-Category
    Security** (**MCS**) in the Linux kernel. There is a new collaborative initiative,
    referred to as the sVirt project, which is being built on SELinux, and this is
    getting integrated with Libvirt to provide an adaptable MAC framework for VMs
    as well as containers. This new architecture provides a sheltered separation and
    safety net for containers, as it primarily prevents root processes, within the
    container, from interfacing and interfering with other processes running outside
    this container. Docker containers are automatically assigned to an SELinux context
    specified in the SELinux policy.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**增强安全Linux**（**SELinux**）是一个勇敢的尝试，旨在清除Linux容器中的安全漏洞，并且它是**强制访问控制**（**MAC**）机制、**多级安全**（**MLS**）和**多类别安全**（**MCS**）在Linux内核中的实现。有一个新的协作项目，称为sVirt项目，它正在基于SELinux构建，并且正与Libvirt集成，为虚拟机和容器提供一个适应性的MAC框架。这一新架构为容器提供了一个受保护的隔离和安全网，主要是防止容器内的root进程与外部其他进程进行交互和干扰。Docker容器会自动分配到SELinux策略中指定的SELinux上下文。'
- en: SELinux always checks for all the allowed operations after the standard **Discretionary
    Access Control** (**DAC**) is completely checked. SELinux can establish and enforce
    rules on files and processes in a Linux system and on their actions based on defined
    policies. As per the SELinux specifications, files, including directories and
    devices, are referred to as objects. Similarly, processes, such as a user running
    a command, are being termed as subjects. Most operating systems use a DAC system
    that controls how subjects interact with objects and one another. Using DAC on
    operating systems, users can control the permissions of their own objects. For
    example, on a Linux OS, users can make their home directories readable, giving
    users and subjects a handle to steal potentially sensitive information. However,
    DAC alone is not a fool-proof security method and DAC access decisions are solely
    based on user identity and ownership. Generally, DAC simply ignores other security
    enabling parameters, such as the role of the user, the function, trustworthiness
    of the program, and the sensitivity and integrity of the data.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux总是在标准**自主访问控制**（**DAC**）完全检查之后，检查所有允许的操作。SELinux可以根据定义的策略在Linux系统上建立和执行文件和进程的规则，并对其行为进行管理。根据SELinux的规格，文件（包括目录和设备）被称为对象。类似地，进程，如运行命令的用户，则被称为主体。大多数操作系统使用DAC系统来控制主体如何与对象及彼此之间进行交互。通过在操作系统上使用DAC，用户可以控制自己对象的权限。例如，在Linux操作系统上，用户可以使他们的主目录可读，从而给用户和主体提供了窃取潜在敏感信息的途径。然而，仅仅依靠DAC并不能提供万无一失的安全方法，DAC的访问决策完全依赖于用户身份和所有权。通常，DAC忽略了其他安全启用的参数，例如用户的角色、程序的功能、可信度以及数据的敏感性和完整性。
- en: As each user typically has the complete discretion over their files, ensuring
    a system-wide security policy is difficult. Further, every program run by a user
    simply inherits all the permissions granted to the user, and the user is free
    to change the access to their files. All this leads to a minimal protection against
    malicious software. Many system services and privileged programs run with coarse-grained
    privileges so that any flaw in any one of these programs can be easily exploited
    and extended to gain the catastrophic access to the system.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个用户通常对自己的文件拥有完全的自由裁量权，因此确保系统范围的安全策略非常困难。此外，每个用户运行的程序仅继承授予该用户的所有权限，用户可以自由地更改对其文件的访问权限。这一切导致了对恶意软件的最低保护。许多系统服务和特权程序以粗粒度的权限运行，因此这些程序中的任何漏洞都可以轻松被利用，并进一步扩展，导致系统的灾难性访问。
- en: As mentioned at the beginning, SELinux adds MAC to the Linux kernel. This means
    that the owners of an object have no control or discretion over the access to
    an object. The kernel enforces MAC, which is a general-purpose MAC mechanism,
    and it needs the ability to enforce administratively set security policies to
    all the processes and files in the system. These files and processes will be used
    to base decisions on labels containing a variety of security-centric information.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如开头所述，SELinux在Linux内核中增加了MAC机制。这意味着对象的所有者无法控制或决定对象的访问。内核强制执行MAC，它是一种通用的MAC机制，并且需要能够强制执行管理员设定的安全策略，应用于系统中的所有进程和文件。这些文件和进程将基于包含各种安全相关信息的标签来做出决策。
- en: MAC has the inherent capability to sufficiently protect the system. Further
    on, MAC ensures application security against any willful hacking and tampering.
    MAC also provides a strong separation of applications so that any attacked and
    compromised application runs separately.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: MAC具有足够保护系统的内在能力。此外，MAC确保应用程序的安全性，防止任何恶意的黑客攻击和篡改。MAC还提供强大的应用程序隔离，使任何被攻击或被破坏的应用程序能够独立运行。
- en: Next in line is MCS. It is mainly used to protect containers from other containers.
    That is, any affected container does not have the capability to bring down other
    containers in the same Docker host. MCS is based on the MLS capability and uniquely
    takes advantage of the last component of the SELinux label, *the MLS field*. In
    general, when containers are launched, the Docker daemon picks a random MCS label.
    The Docker daemon labels all of the content in the container with that MCS label.
    When the daemon launches the container process, it tells the kernel to label the
    processes with the same MCS label. The kernel only allows the container processes
    to read/write their own content as long as their MCS label matches the filesystem
    content's MCS label. The kernel blocks the container processes from reading/writing
    content that is labeled with a different MCS label. This way, a hacked container
    process is prevented from attacking different containers. The Docker daemon is
    responsible for guaranteeing that no containers use the same MCS label. The cascading
    of errors among containers is prohibited through the adroit usage of MCS.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是MCS。它主要用于保护容器免受其他容器的影响。也就是说，任何受影响的容器都没有能力使同一Docker主机中的其他容器崩溃。MCS基于MLS能力，并独特地利用SELinux标签的最后一个组件，*MLS字段*。一般来说，当容器启动时，Docker守护进程会选择一个随机的MCS标签。Docker守护进程会将容器内的所有内容标记为该MCS标签。当守护进程启动容器进程时，它会告诉内核用相同的MCS标签标记这些进程。内核只允许容器进程读写与其MCS标签匹配的文件系统内容。内核会阻止容器进程读取或写入带有不同MCS标签的内容。这样，被攻击的容器进程就无法攻击其他容器。Docker守护进程负责确保没有容器使用相同的MCS标签。通过巧妙使用MCS，容器之间的错误级联被有效地阻止。
- en: 'SELinux is not installed by default in Ubuntu 16.04, unlike, Red Hat Fedora
    or CentOS distribution, so install SELinux by running the `apt-get` command, as
    shown here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux在Ubuntu 16.04中默认未安装，与Red Hat Fedora或CentOS发行版不同，因此需要通过运行`apt-get`命令来安装SELinux，如下所示：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then continue to enable the SELinux mode by running the following `sed` scripts:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过运行以下`sed`脚本继续启用SELinux模式：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Application Armor** (**AppArmor**) is an effective and easy-to-use Linux
    application security system. AppArmor proactively protects the OS and applications
    from any kind of external or internal threats and prevents even unknown application
    flaws from being misused by any hackers. AppArmor is being made available for
    guaranteeing Docker containers and applications present inside the containers.
    Policies are turning out to be a powerful mechanism for ensuring container security.
    Policy formulation and the automated enforcement of policies go a long way in
    guaranteeing the safety of containers. AppArmor comes by default with Ubuntu 16.04,
    so this is always recommended to be used.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用程序保护**（**AppArmor**）是一个有效且易于使用的Linux应用程序安全系统。AppArmor主动保护操作系统和应用程序免受任何外部或内部威胁，并防止即使是未知的应用程序漏洞被黑客滥用。AppArmor现已用于确保Docker容器及容器内的应用程序的安全。政策制定正在成为确保容器安全的强大机制。政策制定和自动化执行政策在确保容器安全方面发挥着重要作用。Ubuntu
    16.04默认配备了AppArmor，因此强烈建议使用它。'
- en: On Docker versions 1.13.0 and later, the Docker binary generates this profile
    in TMPFS and then loads it into the kernel. On Docker versions earlier than 1.13.0,
    this profile is generated in `/etc/apparmor.d/docker` instead.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker版本1.13.0及之后的版本中，Docker二进制文件会在TMPFS中生成此配置文件，然后将其加载到内核中。而在1.13.0之前的Docker版本中，这个配置文件则会生成在`/etc/apparmor.d/docker`中。
- en: 'The `docker-default` profile is the default one for running containers. It
    is moderately protective while providing wide application compatibility. When
    you run a container, it uses the `docker-default` policy unless you override it
    with the `security-opt` option. For example, the following explicitly specifies
    the default policy:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-default`配置文件是运行容器时的默认配置文件。它提供适度的保护，同时保持广泛的应用程序兼容性。当你运行容器时，除非使用`security-opt`选项覆盖，否则会使用`docker-default`策略。例如，以下明确指定了默认策略：'
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Secure computing mode** (**seccomp**) is supported by the Docker Engine,
    a security feature made available in the Linux kernel. This allows the administrator
    to restrict the actions available within a container down to the granularity of
    a single system call. This capability greatly restricts the access that an application
    container has to the host system to perform actions. Enterprises can configure
    seccomp profiles accordingly and apply them to the Docker environment.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全计算模式**（**seccomp**）由Docker引擎支持，这是一项在Linux内核中提供的安全特性。它允许管理员限制容器内可用的操作，细化到单一系统调用的粒度。这一能力极大地限制了应用程序容器对宿主系统的访问，从而减少执行操作的可能性。企业可以根据需要配置seccomp配置文件，并将其应用于Docker环境。'
- en: The default seccomp profile provides a sane default for running containers with
    seccomp and disables around 44 system calls out of over 300\. It is moderately
    protective while providing wide application compatibility.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的seccomp配置文件为使用seccomp运行的容器提供了一个合理的默认设置，禁用了300多个系统调用中的大约44个。它提供了适度的保护，同时保证了广泛的应用兼容性。
- en: The vast majority of applications will be able to operate without any issue
    with the default profile. In fact, the default profile has been able to proactively
    protect Dockerized applications from several previously unknown bugs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序都可以在默认配置文件下正常运行。事实上，默认配置文件已经能够主动保护Docker化的应用程序免受几个以前未知的错误影响。
- en: 'This is enabled by default on Ubuntu 16.04:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能在Ubuntu 16.04中默认启用：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**SCONE: Secure Linux Containers with Intel SGX**, is described by Sergei Arnautov
    and his team as a secure container mechanism for Docker that uses the SGX trusted
    execution support of Intel CPUs to protect container processes from outside attacks.
    The design objectives of SCONE are fixed as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCONE：基于Intel SGX的安全Linux容器**，由Sergei Arnautov及其团队描述，是一种为Docker设计的安全容器机制，利用Intel
    CPU的SGX受信执行支持来保护容器进程免受外部攻击。SCONE的设计目标如下：'
- en: Firstly, it attains small **Trusted Computing Base** (**TCB**)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，它实现了小的**受信计算基础**（**TCB**）
- en: Secondly, it has to have a low-performance overhead
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，它必须具有较低的性能开销
- en: SCONE offers a secure C standard library interface that transparently encrypts/decrypts
    I/O data to significantly reduce the performance impact of thread synchronization
    and system calls within SGX enclaves. SCONE supports user-level threading and
    asynchronous system calls. As per their research paper, the evaluation of SCONE
    is greatly appreciated by Docker fans.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: SCONE提供了一个安全的C标准库接口，透明地加密/解密I/O数据，显著减少了线程同步和系统调用在SGX安全区内的性能影响。SCONE支持用户级线程和异步系统调用。根据他们的研究论文，Docker爱好者对SCONE的评估给予了高度评价。
- en: Loading the Docker images and the security implications
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 加载Docker镜像及其安全影响
- en: Docker typically pulls images from the network, which are usually curated and
    verified at the source. However, for the purpose of backup and restore, the Docker
    images can be saved using the `docker save` subcommand and loaded back using the
    `docker load` subcommand. This mechanism can also be used to load third-party
    images through unconventional means. Unfortunately, in such a practice, the Docker
    Engine cannot verify the source and, hence, the images can carry malicious code.
    So, as the first shield of safety, Docker extracts the image in a *chrooted* subprocess
    for privilege separation. Even though Docker ensures the privilege separation,
    it is not recommended to load arbitrary images.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Docker通常从网络拉取镜像，这些镜像通常在源头经过策划和验证。然而，为了备份和恢复的目的，Docker镜像可以使用`docker save`子命令保存，并使用`docker
    load`子命令加载回来。这个机制也可以用来通过非常规方式加载第三方镜像。不幸的是，在这种实践中，Docker引擎无法验证来源，因此镜像可能包含恶意代码。因此，作为安全的第一个防线，Docker会在*chrooted*子进程中提取镜像以进行权限分离。尽管Docker确保了权限分离，但不推荐加载任意镜像。
- en: '**Using container scanning to secure Docker deployments**: **Docker Content
    Trust** (**DCT**) gives publishers an easy and expedited way to guarantee the
    authenticity of containers that are getting published in web-scale repositories
    such as Docker Hub. However, organizations need to take pragmatic measures to
    access, assess, and act accordingly for ensuring the security of their containerized
    applications throughout their complete life cycle. Precisely speaking, DCT is
    a means by which you can securely sign your Docker images that you have created
    to ensure that they are from who they say they are from.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用容器扫描来确保 Docker 部署的安全性**：**Docker 内容信任**（**DCT**）为发布者提供了一种简便而快速的方式，保证在如
    Docker Hub 这样的 web 大规模仓库中发布的容器的真实性。然而，组织需要采取务实的措施，访问、评估并采取相应的行动，以确保容器化应用程序在整个生命周期中的安全性。准确来说，DCT
    是一种确保你创建的 Docker 镜像的签名安全的方法，以确保它们的来源可信。'
- en: '**Managing container security with Black Duck Hub**: Black Duck Hub is a vital
    tool for managing the security of application containers throughout the full application
    life cycle. Black Duck Hub allows organizations to identify and track vulnerable
    open-source applications and components within their environment. Assessments
    draw on Black Duck''s KnowledgeBase, which contains information on 1.1 million
    open-source projects and detailed data on more than 100,000 known open-source
    vulnerabilities across more than 350 billion lines of code. Through a partnership
    with Red Hat, Black Duck''s ability to identify and inventory open source and
    proprietary code production environments is now being applied to containerized
    environments. Red Hat has launched **Deep Container Inspection** (**DCI**), an
    enterprise-focused offering that wraps container certification, policy and trust
    into an overall architecture for deploying and managing application containers.
    As part of DCI, Red Hat is partnering with Black Duck to give organizations a
    means of validating the contents of a container before, during, and after deployment.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 Black Duck Hub 管理容器安全性**：Black Duck Hub 是一款重要工具，用于在整个应用生命周期中管理应用容器的安全性。Black
    Duck Hub 允许组织识别和追踪其环境中的开源应用和组件的漏洞。评估工作基于 Black Duck 的知识库，该库包含 110 万个开源项目的信息，以及超过
    100,000 个已知开源漏洞的详细数据，覆盖超过 3500 亿行代码。通过与 Red Hat 的合作，Black Duck 能够识别和清点开源及专有代码生产环境，这一能力也正在应用于容器化环境。Red
    Hat 推出了 **深度容器检查**（**DCI**），这是一款面向企业的解决方案，将容器认证、策略和信任整合到一个部署和管理应用容器的整体架构中。作为 DCI
    的一部分，Red Hat 与 Black Duck 合作，提供一种在部署前、部署中和部署后验证容器内容的方式。'
- en: Integration of Black Duck Hub's vulnerability scanning and mapping capabilities
    enables OpenShift customers to consume, develop, and run containerized applications
    with increased confidence and security, knowing that these applications contain
    code that has been independently validated and certified. The integration also
    provides a means to track the impact of newly disclosed vulnerabilities or changes
    related to container aging that may impact on security and risk. Black Duck Hub's
    application vulnerability scanning and mapping capability give Docker customers
    the ability to identify vulnerabilities both before and after deployment and spot
    issues that arise as containerized applications age or become exposed to new security
    vulnerabilities and attacks.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Black Duck Hub 的漏洞扫描和映射能力集成使 OpenShift 用户能够以更高的信心和安全性使用、开发和运行容器化应用程序，知道这些应用程序包含已经经过独立验证和认证的代码。该集成还提供了跟踪新披露的漏洞或与容器老化相关的变化的手段，这些变化可能会影响安全性和风险。Black
    Duck Hub 的应用漏洞扫描和映射能力使 Docker 用户能够在部署前后识别漏洞，并发现随着容器化应用老化或暴露于新的安全漏洞和攻击时出现的问题。
- en: Image signing and verification using TUF
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 TUF 进行镜像签名和验证
- en: The Docker community expects to have a strong cryptographic guarantee regarding
    the code and versions of the Dockerized software. DCT is the new security-related
    feature associated with the 1.8 version of the Docker platform. DCT intrinsically
    integrates **The Update Framework** (**TUF**) into Docker using Notary, an open
    source tool that provides trust over any content.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 社区期望对 Docker 化软件的代码和版本提供强有力的加密保证。DCT 是与 Docker 平台 1.8 版本相关的新安全功能。DCT
    本质上将 **更新框架**（**TUF**）集成到 Docker 中，使用 Notary 这一开源工具，为任何内容提供信任保障。
- en: TUF helps developers to secure new or existing software update systems, which
    are often found to be vulnerable to many known attacks. TUF addresses this widespread
    problem by providing a comprehensive and flexible security framework that developers
    can integrate with any software update system. A software update system is an
    application running on a client system that obtains and installs software. This
    can include updates to software that is already installed or even completely new
    software.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: TUF 帮助开发者保护新的或现有的软件更新系统，这些系统通常容易受到许多已知攻击的威胁。TUF 通过提供一个全面且灵活的安全框架来解决这个普遍问题，开发者可以将其与任何软件更新系统集成。软件更新系统是一个在客户端系统上运行的应用程序，用于获取和安装软件。这可以包括已安装软件的更新，甚至是全新的软件。
- en: '**Protection against image forgery**: Once trust is established, DCT provides
    the ability to withstand a malicious actor with a privileged network position
    also known as a **Man-in-the-Middle** (**MitM**) attack.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**防镜像伪造的保护**：一旦建立了信任，DCT 提供了防范恶意攻击者（拥有特权网络位置的攻击者，也称为**中间人攻击**（**MitM**））的能力。'
- en: '**Protection against replay attacks**: In the typical replay attacks, previously
    valid payloads are replayed to trick another system. In the case of software update
    systems, old versions of signed software can be presented as the most recent ones.
    If a user is fooled into installing an older version of a particular software,
    the malicious actor can make use of the known security vulnerabilities to compromise
    the user**''**s host. DCT uses the timestamp key when publishing the image, providing
    protection against replay attacks. This ensures that what the user receives is
    the most recent one.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**防重放攻击的保护**：在典型的重放攻击中，之前有效的负载被重新发送，以欺骗另一个系统。在软件更新系统中，旧版本的签名软件可能会被呈现为最新版本。如果用户被诱导安装了较旧版本的软件，恶意攻击者可以利用已知的安全漏洞来攻陷用户的主机。DCT
    在发布镜像时使用时间戳密钥，以防止重放攻击。这确保了用户收到的是最新的版本。'
- en: '**Protection against key compromise**: If a key is compromised, you can utilize
    that offline key to perform a key rotation. That key rotation can only be done
    by the one with the offline key. In this scenario, you will need to create a new
    key and sign it with your offline key.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**防密钥泄露的保护**：如果密钥被泄露，你可以利用该离线密钥进行密钥轮换。密钥轮换只能由拥有离线密钥的人执行。在这种情况下，你需要创建一个新密钥，并使用离线密钥对其进行签名。'
- en: 'Other security-enhancing projects include the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 其他增强安全性的项目包括：
- en: '**Clair**: This is an open-source project for the static analysis of vulnerabilities
    in application Docker containers ([https://github.com/coreos/clair](https://github.com/coreos/clair)).
    It audits the Docker image locally and also checks vulnerability in container
    registry integration. Finally, during the first run, Clair will bootstrap its
    database with vulnerability data from its data sources.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Clair**：这是一个开源项目，用于静态分析应用程序 Docker 容器中的漏洞（[https://github.com/coreos/clair](https://github.com/coreos/clair)）。它会在本地审计
    Docker 镜像，并检查容器注册表集成中的漏洞。最后，在第一次运行时，Clair 会通过其数据源引导其数据库，填充漏洞数据。'
- en: '**Notary**: The Docker Notary project is a framework that allows anyone to
    securely publish and access content (for example, Docker images) over a potentially
    insecure network. Notary allows a user to digitally sign and verify content.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Notary**：Docker Notary 项目是一个框架，允许任何人在潜在不安全的网络上安全地发布和访问内容（例如 Docker 镜像）。Notary
    允许用户对内容进行数字签名和验证。'
- en: '**Project Nautilus**: Nautilus is Docker''s image scanning capability, which
    can examine images in Docker Hub to help vulnerabilities that may exist in Docker
    containers. Today, Nautilus only works with Docker Hub. It does not support private
    or on-premises registries.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Project Nautilus**：Nautilus 是 Docker 的镜像扫描功能，它可以检查 Docker Hub 中的镜像，以帮助识别可能存在的
    Docker 容器漏洞。今天，Nautilus 只支持 Docker Hub，不支持私有或本地注册表。'
- en: '**AuthZ Plugins**: The native Docker access control is all or nothing—you either
    have access to all Docker resources or none. The AuthZ framework is Twistlock''s
    contribution to the Docker code base. AuthZ allows anyone to write an authorization
    plugin for Docker to provide fine-grained access control to Docker resources.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AuthZ 插件**：原生的 Docker 访问控制是全有或全无——你要么可以访问所有 Docker 资源，要么完全没有访问权限。AuthZ 框架是
    Twistlock 对 Docker 代码库的贡献。AuthZ 允许任何人编写 Docker 的授权插件，从而为 Docker 资源提供细粒度的访问控制。'
- en: '**Docker Trusted Registry** (**DTR**): This is Docker''s enterprise version
    of Docker Hub. You can run DTR on-premises or in your virtual private cloud to
    support security or compliance requirements. Docker Hub is open source, whereas
    DTR is a subscription-based product sold by Docker. Communications with the registries
    use TLS, to ensure both confidentiality and content integrity. By default, the
    use of certificates trusted by the public PKI infrastructure is mandatory, but
    Docker allows the addition of a company internal CA root certificate to the trust
    store.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 受信任注册中心**（**DTR**）：这是 Docker 的企业版 Docker Hub。你可以在本地或虚拟私有云中运行 DTR，以满足安全或合规性要求。Docker
    Hub 是开源的，而 DTR 是由 Docker 销售的基于订阅的产品。与注册中心的通信使用 TLS，以确保保密性和内容完整性。默认情况下，使用公共 PKI
    基础设施信任的证书是强制性的，但 Docker 允许将公司内部 CA 根证书添加到信任存储中。'
- en: The emerging security approaches
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新兴的安全方法
- en: As we all know, the Docker platform makes it easy for developers to update and
    control the data and software in containers. Similarly, Docker enables efficiently
    ensuring all the components that make an application are current and consistent
    at all times. Docker also innately delivers logical segregation of applications
    running on the same physical host. This celebrated isolation perfectly promotes
    fine-grained and efficient enforcement of security policies. However, as in the
    traditional environment, data at rest is susceptible to various attacks ceaselessly
    from cyber and internal attackers. There are other negative opportunities and
    possibilities for Docker environments to be subjected to heavy bombardment. Consequently,
    there is an insistence for proper safeguards to be in place. The faster and easier
    proliferation of containers and data can significantly expand the number and types
    of threats targeting containerized clouds.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，Docker 平台使开发人员能够轻松地更新和控制容器中的数据和软件。同样，Docker 也能高效地确保构成应用程序的所有组件始终保持最新和一致。Docker
    还天生提供了同一物理主机上应用程序的逻辑隔离。这种著名的隔离完美地促进了安全策略的细粒度和高效执行。然而，正如传统环境一样，静态数据容易受到来自网络和内部攻击者的各种攻击。Docker
    环境还面临着其他潜在的负面威胁，可能遭受沉重的攻击。因此，必须采取适当的保障措施。容器和数据的快速、便捷传播可能会显著增加针对容器化云的威胁数量和类型。
- en: About Vormetric transparent encryption
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Vormetric 透明加密
- en: Organizations can establish strong controls around their sensitive data in Docker
    implementations in an efficient manner. This solution enables data-at-rest encryption,
    privileged user access control, and the collection of security intelligence logs
    for structured databases and unstructured files. With these capabilities, organizations
    can establish persistent, strong controls around their stored Docker images and
    protect all data generated by Docker containers when the data is being written
    to the Docker host storage on an NFS mount or a local folder.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 组织可以高效地在 Docker 实现中围绕敏感数据建立强有力的控制。该解决方案支持静态数据加密、特权用户访问控制，并收集结构化数据库和非结构化文件的安全智能日志。通过这些功能，组织可以围绕存储的
    Docker 镜像建立持久且强大的控制，并保护所有由 Docker 容器生成的数据，尤其是在数据写入 Docker 主机存储（如 NFS 挂载或本地文件夹）时。
- en: The best practices for container security
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器安全的最佳实践
- en: There are robust and resilient security solutions to boost the confidence of
    providers as well as users toward embracing the containerization journey with
    clarity and alacrity. In this section, we provide a number of tips, best practices,
    and key guidelines collected from different sources in order to enable security
    administrators and consultants to tightly secure Docker containers. At the bottom
    line, if containers are running in a multi-tenant system and you are not using
    the proven security practices, then there are definite dangers lurking around
    the security front.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 存在强大且弹性的安全解决方案，可以增强供应商和用户对容器化进程的信心，使其以清晰和敏捷的方式推进。在本节中，我们提供了一些来自不同来源的提示、最佳实践和关键指南，帮助安全管理员和顾问紧密地保护
    Docker 容器。归根结底，如果容器运行在多租户系统中，并且你没有采用经过验证的安全实践，那么在安全方面肯定会存在潜在的危险。
- en: The first and foremost advice is, don't run random and untested Docker images
    on your system. Strategize and leverage trusted repositories of Docker images
    and containers to subscribe and use applications and data containers for application
    development, packaging, shipping, deployment, and delivery. It is clear from past
    experiences that any untrusted containers that are downloaded from the public
    domain may result in malevolent and messy situations. Linux distributions, such
    as **Red Hat Enterprise Linux** (**RHEL**), have the following mechanisms in place
    in order to assist administrators to ensure the utmost security.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先最重要的建议是，不要在系统上运行随机的、未经测试的 Docker 镜像。要有策略，利用受信任的 Docker 镜像和容器仓库来订阅和使用应用程序以及数据容器，用于应用程序开发、打包、运输、部署和交付。从以往的经验来看，任何从公共领域下载的不受信任的容器都可能导致恶意和混乱的情况。像**Red
    Hat 企业版 Linux**（**RHEL**）这样的 Linux 发行版已经实施了以下机制，帮助管理员确保系统的最大安全性。
- en: 'The best practices widely recommended by Docker experts (Daniel Walsh Consulting
    Engineer, Red Hat) are as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 专家（Daniel Walsh，Red Hat 咨询工程师）广泛推荐的最佳实践如下：
- en: Only run container images from trusted parties
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只运行来自可信方的容器镜像
- en: Container applications should drop privileges or run without privileges whenever
    possible
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器应用应尽可能降权或在没有特权的情况下运行
- en: Make sure the kernel is always updated with the latest security fixes; the security
    kernel is critical
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保内核始终更新到最新的安全修复；安全内核至关重要
- en: Make sure you have support teams watching for security flaws in the kernel
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保有支持团队监控内核中的安全漏洞
- en: Use a good quality supported host system for running the containers, with regular
    security updates
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个良好质量、受支持的宿主系统来运行容器，并定期进行安全更新
- en: Do not disable security features of the host operating system
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要禁用宿主操作系统的安全功能
- en: Examine your container images for security flaws and make sure the provider
    fixes them in a timely manner
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查容器镜像是否存在安全漏洞，并确保提供商及时修复这些问题
- en: 'As mentioned previously, the biggest problem is that everything in Linux is
    not namespaced. Currently, Docker uses five namespaces to alter the process''s
    view of any system: process, network, mount, hostname, and shared memory. While
    these give the users some level of security, it is by no means a comprehensive
    one such as KVM. In a KVM environment, processes in a VM do not talk to the host
    kernel directly. They do not have any access to kernel filesystems. Device nodes
    can talk to the VMs kernel, not the hosts. Therefore, in order to have a privilege
    escalation out of a VM, the process has to subvert the VM''s kernel, find an enabling
    vulnerability in the hypervisor, break through SELinux controls (sVirt), and attack
    the host''s kernel. In the container landscape, the approach is to protect the
    host from the processes within the container and to protect containers from other
    containers. It is all about combining or clustering together multiple security
    controls to defend containers and their contents.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，最大的问题在于 Linux 中的所有内容并未被命名空间化。目前，Docker 使用五种命名空间来改变进程对系统的视图：进程、网络、挂载、主机名和共享内存。虽然这些能为用户提供一定程度的安全性，但远不是像
    KVM 那样全面的安全性。在 KVM 环境中，虚拟机中的进程不会直接与宿主内核通信。它们无法访问内核文件系统。设备节点可以与虚拟机内核通信，而不能与宿主内核通信。因此，要想在虚拟机中进行权限提升，进程必须首先颠覆虚拟机的内核，找到虚拟化程序中的漏洞，突破
    SELinux 控制（sVirt），并攻击宿主内核。在容器环境中，方法是保护宿主机免受容器内进程的影响，同时保护容器免受其他容器的影响。这一切都在于将多个安全控制组合或集群起来，来防御容器及其内容。
- en: 'Basically, we want to put in as many security barriers as possible to prevent
    any sort of break out. If a privileged process can break out of one containment
    mechanism, the idea is to block them with the next barrier in the hierarchy. With
    Docker, it is possible to take advantage of as many security mechanisms of Linux
    as possible. The following are the possible security measures that can be taken:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们希望设置尽可能多的安全屏障，以防止任何形式的突破。如果一个特权进程能够突破某一限制机制，那么我们的目标是用下一个安全屏障将其阻挡。在 Docker
    中，尽可能利用 Linux 的各种安全机制是可行的。以下是可以采取的安全措施：
- en: '**Filesystem protection**: Filesystems need to be read-only in order to escape
    from any kind of unauthorized writing. That is, privileged container processes
    cannot write to them and do not affect the host system too. Generally, most of
    the applications need not write anything to their filesystems. There are several
    Linux distributions with read-only filesystems. It is, therefore, possible to
    block the ability of the privileged container processes from remounting filesystems
    as read and write. It is all about blocking the ability to mount any filesystems
    within the container.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件系统保护**：文件系统需要是只读的，以避免任何未经授权的写入。也就是说，特权容器进程不能对其进行写入，并且不会影响主机系统。通常，大多数应用程序不需要对其文件系统进行任何写入。有几个
    Linux 发行版提供了只读文件系统。因此，可以阻止特权容器进程将文件系统重新挂载为可读写。这完全是通过阻止容器内任何文件系统的挂载能力来实现的。'
- en: '**Copy-on-write filesystems**: Docker has been using the **Advanced Multi-Layered
    Unification Filesystem** (**AUFS**) as a filesystem for containers. AUFS is a
    layered filesystem that can transparently overlay one or more existing filesystems.
    When a process needs to modify a file, AUFS first creates a copy of that file
    and is capable of merging multiple layers into a single representation of a filesystem.
    This process is called copy-on-write, and this prevents one container from seeing
    the changes of another container even if they write to the same filesystem image.
    One container cannot change the image content to affect the processes in another
    container.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写时复制文件系统**：Docker 一直使用**高级多层统一文件系统**（**AUFS**）作为容器的文件系统。AUFS 是一种分层文件系统，可以透明地叠加一个或多个现有的文件系统。当进程需要修改文件时，AUFS
    会首先创建该文件的副本，并能够将多个层合并成一个文件系统的表现。这一过程被称为写时复制（copy-on-write），它防止一个容器看到另一个容器的更改，即使它们写入相同的文件系统镜像。一个容器不能更改镜像内容以影响另一个容器中的进程。'
- en: '**The choice of capabilities**: Typically, there are two ways to perform permission
    checks: privileged processes and unprivileged processes. Privileged processes
    bypass all sorts of kernel permission checks, while unprivileged processes are
    subject to the full permission checking based on the process''s credentials. The
    recent Linux kernel divides the privileges traditionally associated with the superuser
    into distinct units known as **capabilities**, which can be independently enabled
    and disabled. Capabilities are a per-thread attribute. Removing capabilities can
    bring forth several positive changes in Docker containers. Invariably, capabilities
    decide the Docker functionality, accessibility, usability, security, and so on.
    Therefore, it needs a deeper thinking while embarking on the journey of adding
    as well as removing capabilities.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能力选择**：通常，有两种方式进行权限检查：特权进程和非特权进程。特权进程绕过所有类型的内核权限检查，而非特权进程则根据进程的凭证进行完整的权限检查。最近的
    Linux 内核将传统上与超级用户相关联的权限划分为独立的单元，称为**能力**（capabilities），这些能力可以独立启用或禁用。能力是每个线程的属性。移除能力可以带来
    Docker 容器的一些积极变化。能力通常决定了 Docker 的功能、可访问性、可用性、安全性等。因此，在增加或移除能力时需要深入思考。'
- en: '**Keeping systems and data secure**: Some security issues need to be addressed
    before enterprises and service providers use containers in production environments.
    Containerization will eventually make it easier to secure applications for the
    following three reasons:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持系统和数据安全**：在企业和服务提供商在生产环境中使用容器之前，某些安全问题需要得到解决。容器化最终将使得应用程序更容易获得安全保障，原因有三：'
- en: A smaller payload reduces the surface area for security flaws
  id: totrans-134
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较小的负载减少了安全漏洞的暴露面
- en: Instead of incrementally patching the operating system, you can update it
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其逐步修补操作系统，不如直接更新它
- en: By allowing a clear separation of concerns, containers help IT and application
    teams collaborate purposefully
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过允许清晰的责任分离，容器帮助 IT 和应用团队有目的地进行协作
- en: The IT department is responsible for security flaws associated with the infrastructure.
    The application team fixes flaws inside the container and is also responsible
    for runtime dependencies. Easing the tension between IT and applications development
    teams helps smooth the transition to a hybrid cloud model. The responsibilities
    of each team are clearly demarcated in order to secure both containers and their
    runtime infrastructures. With such a clear segregation, proactively identifying
    any visible and invisible endangering security ordeals and promptly eliminating
    time, policy engineering and enforcement, precise and perfect configuration, leveraging
    appropriate security-unearthing and mitigation tools, and so on, are being systematically
    accomplished.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: IT 部门负责基础设施中与安全漏洞相关的事务。应用团队则修复容器内部的漏洞，并且还负责运行时的依赖关系。缓解 IT 和应用开发团队之间的紧张关系有助于顺利过渡到混合云模型。每个团队的责任划分明确，以确保容器及其运行时基础设施的安全。在这种明确的分工下，系统化地完成主动识别任何显性或隐性安全风险，并及时消除这些风险，进行政策制定和执行，进行精准和完美的配置，利用合适的安全挖掘和缓解工具等工作，已经成为常态。
- en: '**Leveraging Linux kernel capabilities**: An average server (bare metal or
    VM) needs to run a bunch of processes as root. These typically include `ssh`,
    `cron`, `syslogd`, hardware management tools (for example, load modules), and
    network configuration tools (for example, handling DHCP, WPA, or VPNs). A container
    is very different because almost all of these tasks are being handled by the infrastructures
    on which the containers are to be hosted and run. There are several best practices,
    key guidelines, technical know-how, and so on in various blogs authored by security
    experts. You can find some of the most interesting and inspiring security-related
    details at [https://docs.docker.com/](https://docs.docker.com/).'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用 Linux 内核功能**：一台普通的服务器（裸金属或虚拟机）需要以 root 权限运行一堆进程。这些进程通常包括 `ssh`、`cron`、`syslogd`、硬件管理工具（例如，加载模块）和网络配置工具（例如，处理
    DHCP、WPA 或 VPN）。容器则大不相同，因为几乎所有这些任务都是由容器托管和运行的基础设施处理的。在各种由安全专家撰写的博客中，提供了若干最佳实践、关键指南、技术诀窍等。你可以在
    [https://docs.docker.com/](https://docs.docker.com/) 找到一些最有趣和启发性的安全相关细节。'
- en: Secure deployment guidelines for Docker containers
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 容器的安全部署指南
- en: Docker containers are increasingly hosted in production environments to be publicly
    discovered and used by many. Especially, with the faster adoption of cloud technologies,
    the IT environments of worldwide organizations and institutions are getting methodically
    optimized and transformed to deftly and decisively host a wider variety of VMs
    and containers. There are new improvements and enablements, such as Flocker and
    Clocker, in order to speed up the process of taking containers to cloud environments
    (private, public, hybrid, and community). There are recommendations that have
    to be followed while deploying containers. As we all know, containers remarkably
    reduce the overhead by allowing developers and system administrators to seamlessly
    deploy containers for applications and services required for business operations.
    However, because Docker leverages the same kernel as the host system to reduce
    the need for resources, containers can be exposed to significant security risks
    if not adequately configured. There are a few carefully annotated guidelines to
    be strictly followed by both developers and system administrators while deploying
    containers. For example, [https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines](https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines)
    elaborates in a tabular form with all the right details.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器越来越多地在生产环境中托管，以便被公众发现并广泛使用。尤其是随着云技术的快速采用，全球各大组织和机构的 IT 环境正通过系统化的优化和转型，巧妙且果断地托管更多种类的虚拟机和容器。为了加速将容器带入云环境（私有云、公有云、混合云和社区云），例如
    Flocker 和 Clocker 等新技术不断涌现和启用。在部署容器时需要遵循一些建议。正如我们所知，容器通过允许开发者和系统管理员无缝部署应用程序和服务，从而显著降低了开销，这些应用程序和服务是业务运营所必需的。然而，由于
    Docker 利用与宿主系统相同的内核来减少对资源的需求，如果配置不当，容器可能会面临重大的安全风险。在部署容器时，开发者和系统管理员必须严格遵守一些经过仔细注解的指南。例如，[https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines](https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines)
    在表格形式中详细列出了所有正确的细节。
- en: An indisputable truth is that the software flaws in distributed and complex
    applications open the way for intelligent attackers and hackers to break into
    systems that host critical, confidential, and customer data. Therefore, security
    solutions are being insisted and ingrained across all the layers in the IT stack,
    and hence, there arise many types of security vulnerabilities at different levels
    and layers. For example, the perimeter security that solves only part of the problem
    because the changing requirements are mandated for allowing network access to
    employees, customers, and partners. Similarly, there are firewalls, intrusion
    detection and prevention systems, **Application Delivery Controllers** (**ADCs**),
    access controls, multifactor authentication and authorization, patching, and so
    on. Then, for securing data while in transit, persistence, and being used by applications,
    there are encryption, steganography, and hybrid security models. All these are
    reactive and realistic mechanisms, but the increasing tendency is all about virtual
    businesses insisting on proactive and preemptive security methods. As IT is tending
    and trending toward the much anticipated virtual IT, the security issues and implications
    are being given extra importance by security experts.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 不可否认的事实是，分布式和复杂应用中的软件缺陷为智能攻击者和黑客突破托管关键、机密及客户数据的系统打开了大门。因此，安全解决方案正在被坚持并深入到IT栈的各个层级，因此在不同的层次和级别上会出现许多类型的安全漏洞。例如，仅解决部分问题的边界安全，因为需要根据变化的需求允许员工、客户和合作伙伴访问网络。类似地，还有防火墙、入侵检测和防御系统、**应用交付控制器**（**ADCs**）、访问控制、多因素认证与授权、补丁修复等。然后，为了保护数据在传输、持久存储和应用使用过程中的安全，采用了加密、隐写术和混合安全模型。这些都是反应性和现实机制，但越来越多的趋势是虚拟企业坚持采取前瞻性和先发制人的安全方法。随着IT朝着备受期待的虚拟IT发展，安全问题和影响正受到安全专家的额外关注。
- en: The future of Docker security
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker安全的未来
- en: 'There will be many noteworthy improvisations, transformations, and disruptions
    in the containerization space in the near future. Through a host of innovations
    and integrations, the Docker platform is being positioned as the leading one for
    strengthening the containerization journey. The following are the prime accomplishments
    through the smart leverage of the Docker technology:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在不久的将来，容器化领域将会有许多值得关注的创新、转型和颠覆。通过一系列的创新和集成，Docker平台正被定位为强化容器化旅程的领先平台。以下是通过智能利用Docker技术所取得的主要成就：
- en: '**Strengthening the distributed paradigm**: While computing is going to be
    increasingly distributed and federated, the MSA plays a very decisive and deeper
    role in IT. Docker containers are emerging as the most efficient ones for hosting
    and delivering a growing array of microservices. With container orchestration
    technologies and tools gaining greater recognition, microservices (specific as
    well as generic) get identified, matched, orchestrated, and choreographed to form
    business-aware composite services.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加强分布式范式**：随着计算越来越向分布式和联合式发展，MSA在IT中扮演着至关重要和更深层次的角色。Docker容器正成为托管和交付日益增多的微服务的最有效方式。随着容器编排技术和工具获得更广泛的认可，微服务（无论是特定的还是通用的）被识别、匹配、编排和协调，形成业务感知的复合服务。'
- en: '**Empowering the cloud paradigm**: The cloud idea is strongly gripping the
    IT world to bring in the much-insisted IT infrastructure rationalization, simplification,
    standardization, automation, and optimization. The abstraction and virtualization
    concepts, the key ones for the unprecedented success of the cloud paradigm, are
    penetrating into every kind of IT module. Originally, it started with server virtualization
    and now it is all about storage and networking virtualization. With all the technological
    advancements around us, there is a widespread keenness to realize software-defined
    infrastructures (software-defined compute, storage, and networking). The Docker
    Engine, the core and critical portion of the Docker platform, is duly solidified
    in order to bring in the necessary eligibility for containers to run on software-defined
    environments without any hitch or hurdle.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**赋能云计算范式**：云计算概念正强力抓住IT世界，推动IT基础设施的理性化、简化、标准化、自动化和优化。抽象化和虚拟化概念——这些是云计算范式前所未有成功的关键——正渗透到每种IT模块中。从最初的服务器虚拟化到现在的存储和网络虚拟化，技术的进步使得软件定义基础设施（软件定义计算、存储和网络）得到了广泛关注。Docker引擎，作为Docker平台的核心和关键部分，已经得到了坚实的巩固，以确保容器能够在软件定义的环境中顺利运行。'
- en: '**Enabling IT elasticity, portability, agility, and adaptability**: Containers
    are emerging as the flexible and futuristic IT building blocks for bringing in
    more resiliency, versatility, elegance, and suppleness. Faster provisioning of
    IT resources for ensuring higher availability and real-time scalability, the easy
    elimination of all kinds of frictions between the development and operation teams,
    the guarantee of native performance of IT, the realization of organized and optimized
    IT for enhanced IT productivity, and so on, are some of the exemplary things being
    visualized for Docker containers toward the smarter IT.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用IT弹性、可移植性、敏捷性和适应性**：容器正在成为灵活且具有未来感的IT构建模块，以增强弹性、多样性、优雅性和柔韧性。为了确保更高的可用性和实时可扩展性，快速配置IT资源，消除开发与运维团队之间的所有摩擦，保证IT的原生性能，实现有序且优化的IT以提高IT生产力等，这些都是Docker容器面向智能IT所设想的典型应用。'
- en: Containers will be a strategic addition to VMs and bare metal servers in order
    to bring in deeper IT automation, acceleration, and augmentation, thereby the
    much-hyped and hoped for business agility, autonomy, and affordability will be
    achieved.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 容器将成为虚拟机和裸金属服务器的战略补充，以实现更深层次的IT自动化、加速和增强，从而实现备受期待的业务敏捷性、自治性和可负担性。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: Security is definitely a challenge and an important aspect not to be sidestepped.
    If a container gets compromised, then bringing down the container host is not
    a difficult task. Thus, ensuring security for containers and then hosts is indispensable
    for the flourishing of the containerization concept, especially when the centralization
    and federation of IT systems are on the climb. In this chapter, we specifically
    focused on the sickening and devastating security issues on Docker containers
    and explained the ways and means of having foolproof security solutions for containers
    that host dynamic, enterprise-class, and mission-critical applications. In the
    days to unfurl, there will be fresh security approaches and solutions in order
    to guarantee impenetrable and unbreakable security for Docker containers and hosts,
    as the security of containers and their contents is of the utmost importance for
    service providers as well as consumers.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性无疑是一个挑战，也是不能忽视的重要方面。如果一个容器被攻破，那么摧毁容器宿主机并不难。因此，确保容器及其宿主机的安全是容器化概念蓬勃发展的关键，尤其是在IT系统集中化和联合化日益上升的今天。本章专门聚焦于Docker容器中令人痛心和破坏性的安全问题，并解释了为容纳动态企业级和关键任务应用程序的容器提供万无一失的安全解决方案的方法和手段。在未来的日子里，将会有新的安全方法和解决方案来保证Docker容器和宿主机的安全性不可渗透且牢不可破，因为容器及其内容的安全对服务提供商和消费者至关重要。
