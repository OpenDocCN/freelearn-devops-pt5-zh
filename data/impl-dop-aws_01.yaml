- en: Chapter 1. What is DevOps and Should You Care?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：什么是 DevOps，为什么你应该关心？
- en: '**DevOps** can be seen as an extension of the successful and well established
    **Agile** methodology. Bringing operations into the picture helps the advance
    from continuous (Agile) development to integration to deployment, but more importantly
    it helps build a better working environment, one with stronger cross-team relationships.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps** 可以看作是成功且成熟的**敏捷**（Agile）方法论的延伸。将运维纳入其中有助于从持续（敏捷）开发到集成再到部署的进步，但更重要的是，它有助于构建一个更好的工作环境，一个具有更强团队间合作关系的环境。'
- en: If I had to describe DevOps in one word, it would be collaboration. The genuine
    willingness of both the **Dev** and **Ops** camps to work together is the foundation,
    the most important aspect of the philosophy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我只能用一个词来描述 DevOps，那就是“合作”。**开发（Dev）**和**运维（Ops）**阵营都愿意真正合作，这是其哲学的基础，也是最重要的方面。
- en: 'DevOps appears as the meeting point in the following diagram:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps出现在以下图表中的交汇点：
- en: '![What is DevOps and Should You Care?](img/image_01_001.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![什么是 DevOps，为什么你应该关心？](img/image_01_001.jpg)'
- en: 'In this chapter we will go through the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is DevOps?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 DevOps？
- en: Questions you should ask yourself before adopting it
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在采纳 DevOps 之前你应该问自己的问题
- en: What is DevOps?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 DevOps？
- en: So, let us examine the various principle characteristics of a DevOps environment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们来探讨一下 DevOps 环境的一些基本特征。
- en: What follows is a series of generally accepted definitions, invariably mixed
    with personal opinions - you have been warned.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一些普遍接受的定义，通常混合着个人意见——你已经被提醒了。
- en: A common goal
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共同目标
- en: The alignment of effort toward increasing system performance and stability,
    reducing the time it takes to deploy or improving the overall quality of the product,
    will result in happier customers and proud engineers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将努力方向对准提高系统性能与稳定性、减少部署时间或提升产品整体质量，将使客户更满意，工程师们也会更自豪。
- en: The goal needs to be repeated, clarified, and simplified until it is fully understood,
    argued against, and eventually committed to by everybody.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 目标需要反复重复、澄清和简化，直到每个人都完全理解、提出反对意见，并最终达成共识。
- en: DevOps shifts focus away from self-interest and toward that goal. It directs
    praise at group achievements rather than those of the individual; *KPIs* and *Employee
    of the Month* initiatives perhaps not so much.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps将焦点从个人利益转向共同目标。它将赞扬更多地放在团队成就上，而不是个人；*KPI*和*本月员工*之类的活动也许就不那么重要了。
- en: Allow people to look at the bigger picture past the realm of their cubicle.
    Trust them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让人们看到超越自己工位的小环境的大图景。相信他们。
- en: Shared knowledge (no silos)
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共享知识（无孤岛）
- en: The chances are you have already heard stories or read books about the notorious
    organizational silos.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能已经听说过关于臭名昭著的组织孤岛的故事，或者读过相关书籍。
- en: In the worst case, it would be somebody who refuses to let go and often becomes
    the main bottleneck in a development life cycle. They can be fiercely territorial,
    safe-guarding what exclusive knowledge they might have in a given field, likely
    (I speculate) because this provides them with a sense of importance, further catering
    to their ego.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在最坏的情况下，可能会出现一个拒绝放手的人，他们往往成为开发生命周期中的主要瓶颈。他们可能非常占有欲强，守护着自己在某一领域中的专属知识，可能（我推测）是因为这让他们感到重要，进一步迎合了他们的自我。
- en: On the other hand, there are also examples of people who find themselves in
    a silo purely due to unfortunate circumstances. My respect goes out to the many
    engineers stuck with supporting inherited legacy systems all by themselves.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，也有一些人由于不幸的情况而陷入孤岛。我对那些孤身一人支持遗留系统的工程师们深感敬意。
- en: Fortunately, DevOps blurs such borders of expertise with concepts like **cross-functional
    teams** and **full-stack engineers**. It is important to note here that this does
    not translate into an opportunity to cut costs by expecting people to be tech
    ninja experts at every single thing (which in real life equates to preceding average).
    But, as in one of those Venn diagrams, it is the cross-over between a **Dev**
    and an **Ops** set of skills.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，DevOps通过像**跨职能团队**和**全栈工程师**这样的概念，模糊了这些专业领域的界限。这里需要注意的是，这并不意味着可以通过期望人们在每个领域都成为技术高手来削减成本（这在现实中相当于在平均水平之上）。但就像Venn图中的交集一样，它是**开发（Dev）**和**运维（Ops）**技能集合之间的交汇点。
- en: Silos are avoided by encouraging knowledge sharing. Peer reviews, demo stand-ups,
    or shared documentation are a few ways to ensure that no task or piece of know-how
    is limited to a specific person. You could even adopt **Pair Programming**. It
    seems a bit heavy, but it evidently works!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过鼓励知识共享，避免了信息孤岛。同行评审、演示站立会议或共享文档是确保没有任务或知识被局限于特定人的几种方式。你甚至可以采用**结对编程**。这似乎有点重，但显然是有效的！
- en: Trust and shared responsibility
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信任与共享责任
- en: Should developers be given production access?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 是否应该给予开发人员生产环境访问权限？
- en: There are good reasons for maintaining strict role-based permissions; one of
    them is security another is integrity. This standpoint remains valid for as long
    as we maintain the stereotype of the developer who is so used to working in **devlocal**;
    to them, concepts such as **passphrase-protected** SSH keys or not manually editing
    all of the files take a back seat.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 维持严格的基于角色的权限管理是有充分理由的，其中之一是安全性，另一个是完整性。只要我们保持开发人员的刻板印象——他们习惯于在**devlocal**环境中工作；对他们来说，诸如**受密码保护的**SSH密钥，或者不手动编辑所有文件等概念，常常被忽略。
- en: In the era of DevOps, this is no longer the case. Shared knowledge and responsibility
    means operations engineers can rely on their developer colleagues to follow the
    same code of conduct when working in critical, production environments.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps时代，情况已经不再如此。共享知识和责任意味着运维工程师可以依赖他们的开发同事，在关键的生产环境中遵循相同的行为准则。
- en: Dev and Ops teams have access to the same set of tools and environments. Deployments
    are no longer a special task reserved for the Ops team and scheduled days in advance.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 开发和运维团队可以使用相同的工具和环境。部署不再是运维团队的特殊任务，也不再需要提前安排日期。
- en: In a team with such knowledge-sharing habits, I, as an operations engineer,
    can be confident about my Dev colleague's ability to perform my tasks, and vice
    versa.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个拥有这种知识共享习惯的团队中，作为运维工程师的我可以对我的开发同事能够执行我的任务充满信心，反之亦然。
- en: Developers participate in the **on-call** rota, supporting the software they
    produce.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员参与**值班**轮班，支持他们所开发的软件。
- en: This is not to be seen as an additional burden, but as a sign of trust and an
    opportunity to increase collaboration. Nobody is *throwing code over the wall*
    anymore. Responsibility and a sense of autonomy motivates people to do more than
    is expected of them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这不应被视为一种额外负担，而应视为信任的象征和增加协作的机会。现在没有人再*把代码扔到墙那边*了。责任感和自主性激励人们做出超出预期的贡献。
- en: Respect
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尊重
- en: As we spend more time talking to each other about the challenges we face and
    the problems we are trying to solve, our mutual respect grows.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们花更多时间相互交流面对的挑战和试图解决的问题，我们之间的相互尊重也在不断增加。
- en: This manifests itself in developers seeking input from the Operations team from
    the early stages of the software development process or in Ops tools being built
    to meet developers' needs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这表现在开发人员在软件开发过程的早期就寻求运维团队的意见，或是运维工具的构建是为了满足开发人员的需求。
- en: '|   | *Ops who think like Devs. Devs who think like Ops* |   |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | *像开发人员一样思考的运维人员，像运维人员一样思考的开发人员* |   |'
- en: '|   | --*John Allspaw and Paul Hammond, Velocity* |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | --*John Allspaw 和 Paul Hammond，《Velocity》* |'
- en: A DevOps environment is built on such respect. It is a place where every opinion
    matters, where people can and do openly question decisions in the interest of
    the best solution to a problem. This is a powerful indicator of one's commitment
    toward the common goal I mentioned earlier.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps环境建立在这种尊重之上。这是一个每个意见都很重要的地方，在这里，人们可以并且确实会公开质疑决策，以求得问题的最佳解决方案。这是一个强有力的标志，表明个人对我之前提到的共同目标的承诺。
- en: Automation
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化
- en: To draw an overly simplified conclusion from A. Maslow's *Theory of Motivation*,
    you are less likely to think about poetry when hungry. In other words, a team
    with basic needs will be solving basic problems.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从A. Maslow的*动机理论*中得出一个过于简化的结论：当你饥饿时，你不太可能去考虑诗歌。换句话说，一个满足基本需求的团队会在解决基本问题。
- en: Automating routine and mundane tasks allows engineers to concentrate on the
    more complex, higher-value ones. Also, people get bored, cut corners, and make
    mistakes – computers tend not to do so.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化日常且单调的任务使工程师能够集中精力处理更复杂、更有价值的工作。此外，人们会感到无聊，开始偷工减料，犯错——而计算机则不太容易犯错。
- en: Reproducible infrastructure
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可重现的基础设施
- en: 'Describing infrastructure as code has the following advantages:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将基础设施描述为代码具有以下优势：
- en: It can be kept under version control
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以通过版本控制进行管理。
- en: It is easily shared with others to re-use or reproduce
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以轻松地与他人共享，以供重用或复制。
- en: It serves as a very useful diary of what you did and how exactly you did it
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它充当了一个非常有用的日记，记录了你做了什么以及你是如何做的。
- en: Provisioning cloud environments becomes trivial (for example, with Terraform
    or CloudFormation)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置云环境变得非常简单（例如，通过Terraform或CloudFormation）。
- en: It makes modern Configuration Management possible
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使现代配置管理成为可能
- en: At any rate, I suspect anybody managing more than 10 servers is already codifying
    infrastructure in some way or another.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，我怀疑任何管理超过10台服务器的人，已经以某种方式在对基础设施进行编码了。
- en: Metrics and monitoring
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指标与监控
- en: '|   | *Measure All The Things!* |   |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|   | *测量一切！* |   |'
- en: '|   | --*Actual DevOps slogan* |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '|   | --*实际的DevOps口号* |'
- en: Storage is cheap. Develop the habit of gathering copious amounts of measurements
    and making those easily accessible across your organization. The more visibility
    engineers have into the performance of their infrastructure and applications,
    the more adequate their decisions will be in critical situations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 存储变得便宜。培养收集大量度量数据的习惯，并使这些数据在你的组织中容易访问。工程师们对其基础设施和应用程序性能的可见性越高，在关键情况下做出的决策就越得当。
- en: Graphs can convey a great deal of information, look rather cool on big screens,
    and the human mind has been proven excellent at recognizing patterns.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图表能够传达大量信息，在大屏幕上看起来相当酷，而且人类的大脑在识别模式方面表现出色。
- en: Another important role of metrics data is in performance optimization.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 指标数据的另一个重要作用是在性能优化中。
- en: '|   | *The trickiest part of speeding up a program is not doing it, but deciding
    whether it''s worth doing at all...Part of the problem is that optimization is
    hard to do well. It''s frighteningly easy to devolve into superstitious ritual
    and rationalization.* |   |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|   | *加速程序的最棘手部分不是做这件事，而是决定是否值得做这件事...问题的一部分在于，优化很难做好。令人害怕的是，它很容易变成迷信仪式和合理化的过程。*
    |   |'
- en: '|   | --*Mature Optimization, Carlos Bueno* |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '|   | --*成熟的优化，Carlos Bueno* |'
- en: To avoid falling prey to confirmation bias, you need an objective method of
    assessing your systems before and after attempting any optimization. Use those
    metrics; it is hard to argue with (valid) data.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免陷入确认偏误，你需要在尝试任何优化之前和之后使用客观的方法来评估你的系统。使用这些指标；（有效的）数据是很难被反驳的。
- en: 'On the subject of validity, please do calibrate your instruments regularly,
    sanity-check output and make sure what you think you are showing is what your
    colleagues think they are seeing (ref: [https://mars.jpl.nasa.gov/msp98/news/mco990930.html](https://mars.jpl.nasa.gov/msp98/news/mco990930.html)).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在有效性问题上，请定期校准你的仪器，进行合理性检查输出，并确保你认为展示的内容是同事们认为看到的内容（参考：[https://mars.jpl.nasa.gov/msp98/news/mco990930.html](https://mars.jpl.nasa.gov/msp98/news/mco990930.html)）。
- en: Continuous Integration, Delivery, and Deployment
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成、交付和部署
- en: The **Observe**, **Orient**, **Decide**, and **Act** (**OODA**) loop is a concept
    developed by Col. J. Boyd that shows the value in one's ability to adapt to ever-changing
    circumstances.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**观察**、**定位**、**决策**和**行动**（**OODA**）循环是由J·博伊德上校提出的概念，展示了一个人在不断变化的环境中适应能力的价值。'
- en: Faced with unforgiving (and productive) competition, organizations should be
    able to rapidly react to dynamic market conditions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 面对无情（而且富有成效）的竞争，组织应该能够迅速应对动态市场条件。
- en: This is probably best illustrated with the old Kodak and Netflix tales. The
    former after having been wildly successful is said to have failed to adapt to
    the new trends in their sector, causing the brand to gradually fade away. In contrast,
    Netflix keeps on skillfully molding their product to match the new ways in which
    we consume digital content. They completely transformed their infrastructure,
    shared some clever, new and somewhat controversial practices plus a ton of great
    software. Be like Netflix.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能通过老式的柯达和Netflix故事来最好地说明。前者在曾经获得巨大成功后，被认为未能适应其行业的新趋势，导致品牌逐渐消失。相比之下，Netflix不断巧妙地调整他们的产品以适应我们消费数字内容的新方式。他们彻底改变了他们的基础设施，分享了一些聪明的新做法，甚至是一些有争议的实践，再加上一堆出色的软件。像Netflix一样。
- en: Continuous Integration and Delivery is essentially OODA in practice. Teams continuously
    integrate relatively small code changes, delivering releases more often, thus
    getting feedback from their users much quicker. The type of feedback needed by
    an organization to be able to adequately respond to an ever changing market.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成与交付本质上就是OODA的实践。团队不断集成相对较小的代码更改，更频繁地交付版本，从而能更快地从用户那里获得反馈。这种反馈类型对组织在动态变化的市场中作出及时反应至关重要。
- en: None of the preceding suggests however that one should aim to become a *release
    hero*, rushing things into *Production*, setting it on fire twice a week. A *CI/CD*framework
    still implies the usual strict code review and test processes, despite how often
    you deploy. Though code reviews and testing require much less time and effort
    as typically the more frequent the deployments, the smaller the code changes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，以上并不意味着我们应该成为*发布英雄*，将一切仓促推向*生产环境*，每周两次点燃它。*CI/CD*框架依然意味着通常的严格代码审查和测试流程，不论你部署得多频繁。尽管代码审查和测试通常需要更少的时间和精力，因为部署频率越高，代码变动通常越小。
- en: Embracing failure
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拥抱失败
- en: Naturally, more experimentation is likely to increase the probability of error.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，更多的实验可能会增加错误的概率。
- en: I doubt this fact comes as a surprise to anybody; what might surprise you, however,
    is the advice to accept an additional, positive angle to failure.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我怀疑这一事实对任何人都不构成惊讶；然而，可能让你感到惊讶的是，接受失败的另一个积极角度的建议。
- en: Recall the video nerds from the previous section. Well, they didn't exactly
    breeze through all that change without casualties. I hereby spare you the Edison
    quotes; however, trial and error is indeed a valid form of the scientific method,
    and the DevOps processes serve as a great enabler to those who would agree.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下前一节中的视频极客们。他们可不是轻松地度过所有这些变化的，没有一点代价。此处我就不引用爱迪生的名言了；然而，试错确实是科学方法的一种有效形式，而DevOps流程为那些愿意同意这一点的人提供了极大的助力。
- en: In other words, an organization should encourage people to keep on challenging
    and improving the current state of affairs while also allowing them to openly
    talk about the times when things went wrong.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，组织应该鼓励人们不断挑战并改善当前的现状，同时也要允许他们公开讨论发生错误时的经历。
- en: But dealing with experimentation failures is possibly the more romantic side
    of the story compared to the cold, harsh reality of day-to-day operations.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，处理实验失败可能是这段故事中比日常操作中冷酷、严苛的现实更浪漫的一面。
- en: 'Systems fail. I would like to think most of us have come to accept that fact
    along with the chain of thought it provokes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会失败。我希望我们大多数人都已经接受了这一事实，并接受它引发的思维链条：
- en: 'we do not always know as much as we think we do:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们并不总是知道自己认为知道的那么多：
- en: '|   | *"Knowledge of the outcome makes it seem that events leading to the outcome
    should have appeared more salient to practitioners at the time than was actually
    the case...**After an accident, practitioner actions may be regarded as errors
    or violations, but these evaluations are heavily     biased by hindsight and ignore
    the other driving forces..."* |   |'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|   | *“对结果的了解使得事情似乎应该更明显地呈现给当时的实践者，然而这并非实际情况……**在事故发生后，实践者的行为可能会被视为错误或违反规定，但这些评估在很大程度上受到事后诸葛亮的偏见，忽视了其他推动因素……”*
    |   |'
- en: '|   | --*How Complex Systems Fail, R.I. Cook* |'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|   | --*复杂系统如何失败，R.I.库克* |'
- en: '*Excelsior!* Or how, in our long-standing pursuit of social dominance, we seem
    to have developed the convenient belief that following an event we not only know
    exactly what and how it happened but also why. This peculiar phenomenon has already
    been explained rather well by D. Kahneman in *Thinking Fast and Slow*; I will
    just add that indeed one often hears of overconfident characters who point fingers
    at their colleagues based on what appears to them as a coherent storyline.'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*向上攀登!* 或者说，在我们长期追求社会主导地位的过程中，我们似乎已经形成了这样一个便捷的信念：事件发生后，我们不仅能准确知道它发生了什么、怎么发生的，还能知道为什么会发生。这种奇特的现象已经在D.卡尼曼的《思考，快与慢》中得到了很好的解释；我只是想补充一点，确实经常听到一些过于自信的人，他们根据自己看似合理的故事线，指责同事。'
- en: 'The truth of the matter is this: we were not there. And keeping the details
    we now know and those known at the time separated is not an easy task.'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事情的真相是：我们当时不在现场。而将我们现在知道的细节与当时已知的事实区分开来并不容易。
- en: 'Blaming is of zero value:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指责毫无价值：
- en: Etsy and the likes in our community have shared enough observations to suggest
    that negative reinforcement as a strategy for reducing human error is less than
    optimal.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们社区中的Etsy及类似平台分享了足够多的观察结果，表明将负面强化作为减少人为错误的策略并不是最优选择。
- en: With the adoption of DevOps, we accept that people generally come to work every
    day with the intention to perform to the best of their abilities and in the interest
    of the organization. After an outage, we begin our analysis with the assumption
    that the operator has acted in the best possible way given the circumstances and
    information available to them at the time. We focus on what could have led to
    them making the given decisions, their thought process, the flow of events, and
    whether any of these can be improved.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 采用DevOps后，我们接受人们通常每天上班时的目标是尽最大努力工作，并为组织的利益着想。在停机发生后，我们的分析从假设操作员在当时的情境和信息基础上做出了最好的决策开始。我们关注可能导致他们做出决策的因素、他们的思考过程、事件的流动，以及这些是否能得到改进。
- en: 'Resilience can be accumulated:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 韧性是可以积累的：
- en: '*"What does not kill us..."***mithridatism** or Nassim Taleb''s concept of
    **antifragility** are all expressive of the idea that we get better at dealing
    with negative experiences as we encounter them, and what''s more, we should look
    for them every now and again.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*“使我们不死的……”*mithridatism*或纳西姆·塔勒布的**反脆弱**概念都在表达这样一个观点：我们在遇到负面经历时变得更擅长应对，而且更重要的是，我们应该时不时地去主动寻找这些经历。'
- en: We can train ourselves and our systems to recover from errors faster or even
    better to continue operating despite them. One way to achieve this is with controlled
    (and with practice, less controlled) outages.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以训练自己和我们的系统，更快速地从错误中恢复，甚至在错误发生时依然能够继续运行。实现这一目标的一种方式是通过有控制的（并且随着实践，变得不那么控制）停机。
- en: With the right monitoring and auditing tools in place, every abnormal activity
    offers us a more intimate view of our applications and infrastructure.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有了合适的监控和审计工具，每一次异常活动都能让我们更深入地了解我们的应用程序和基础设施。
- en: Now that I have bestowed upon you, my dear reader, the secret to a better life
    through DevOps, let us concern ourselves with the latter part of the title of
    this chapter.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我已将通过DevOps实现更好生活的秘密传授给你，亲爱的读者，接下来我们来关注本章标题的后半部分。
- en: Should you care
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你在乎吗？
- en: I fail to see a reason why one should not. Some seven or so years have passed
    since the inception of the idea of DevOps, and the amount of evidence of its effectiveness
    has been growing steadily. Having the respected Agile framework at its base further
    adds to its credibility and perhaps helps explain a good part of its success.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我看不出有什么理由不这样做。从DevOps概念诞生至今已过去七年左右，关于其有效性的证据也在稳步增长。以备受尊敬的敏捷框架为基础，更加增强了其可信度，也许能帮助解释其成功的很大一部分原因。
- en: That is not to say there are not considerations to be taken into account however.
    The critical thinker within you, would want to ask a question or two prior to
    embarking on such a cultural coup d'état.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说没有需要考虑的事项。你内心的批判性思维者，在开始这种文化政变之前，肯定会问上几个问题。
- en: Is this the right time?
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现在是时候了吗？
- en: Did you just finish adopting Lean or Agile Development? What else has been going
    on in the team? Is now the best time for yet another cry for change?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚完成了精益或敏捷开发的实施吗？团队里还有其他变化吗？现在是时候再一次呼吁变革了吗？
- en: Altering our habits makes us uneasy; it takes some time to adjust. Your perseverance
    is laudable, and pursuing DevOps as the next level of team collaboration is often
    the right choice.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 改变我们的习惯会让我们感到不安；需要一段时间来调整。你的坚持是值得赞扬的，追求DevOps作为团队协作的新阶段往往是正确的选择。
- en: There is no need to give it up altogether; perhaps put it on hold for a moment.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 不必完全放弃；或许可以暂时搁置一下。
- en: Will it work?
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它会有效吗？
- en: Look around you. Those faces, those different personalities, can you picture
    them all together singing Kumbaya? Maybe yes, maybe no, or not yet.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 环顾四周。那些面孔，那些不同的个性，你能想象他们一起唱《Kumbaya》吗？也许能，也许不能，或者还不能。
- en: Please do not e-mail an anonymous staff survey. Get everybody in a room, lay
    your DevOps propaganda out, and gauge their reactions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请不要通过电子邮件发送匿名员工调查。把大家聚在一起，展示你的DevOps宣传，并观察他们的反应。
- en: You will need everyone to fully understand the concepts, acknowledge the challenges,
    and accept the sacrifices for this to work. There can neither be exceptions nor
    ambiguity.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要每个人完全理解这些概念，承认挑战，并接受为此付出的牺牲。不能有任何例外，也不能有模糊不清之处。
- en: All of this requires a great degree of cultural change, which a team should
    be prepared for.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都需要极大的文化变革，团队应对此做好准备。
- en: Is it worth it?
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这值得吗？
- en: What would it take to change the current mentality? How much of a disturbance
    you would need to cause? What degree of backlash do you expect?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 改变当前思维方式需要什么？你需要制造多大的扰动？你预期会有多大的反响？
- en: While I am not suggesting this as an excuse to put up with the status quo, I
    beg you maintain a pragmatic view of the situation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我并不是建议将此作为容忍现状的借口，但我恳请你保持一种务实的态度看待当前的情况。
- en: Your type of organization might be better suited for a process of evolution
    rather than a revolution.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你的组织类型可能更适合逐步演变的过程，而不是一次彻底的革命。
- en: Do you need it?
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你需要它吗？
- en: How would you score your current processes? Would you say your cross-team communication
    is satisfactory? You regularly meet business expectations? You have already automated
    most of your workflow?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何评估你目前的流程？你会说你的跨团队沟通令人满意吗？你是否经常达成业务期望？你是否已经自动化了大部分工作流程？
- en: It sounds like you are doing fine as it is; you might already have some DevOps
    in your team without realizing it. The point is that it could be a better use
    of resources if you were to concentrate on optimizing elsewhere, solving other,
    more pressing problems at this time.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来你目前做得很好；你可能已经在团队中有一些 DevOps 实践，只是没有意识到而已。关键是，如果你能将资源集中在其他地方进行优化，解决其他更紧迫的问题，可能会更有效。
- en: Now that you have been through a yet another interpretation of the ideas behind
    DevOps, if you feel those match your way of thinking and the final few questions
    did not raise any concerns, then we can safely transition to the more technical
    topics where we put principles into practice.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经了解了 DevOps 背后思想的另一种诠释，如果你觉得这些观点与你的思维方式相符，并且最后几个问题没有引发任何疑虑，那么我们可以安全地过渡到更具技术性的主题，将原则付诸实践。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: First, we explored the main ideas contained in the DevOps philosophy, followed
    by a few questions aimed at helping you construct a more objective perspective
    when it comes to adopting DevOps within your organization.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们探讨了 DevOps 哲学中包含的主要理念，接着提出了一些问题，旨在帮助你在组织内采纳 DevOps 时构建一个更客观的视角。
- en: We have seen that DevOps is an effective combination of some older, proven Agile
    concepts and other more recently developed ones, and that it teaches us how to
    build better teams who write better software, get results faster, and collaborate
    effortlessly in an environment that encourages experimentation without compromising
    stability.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，DevOps 是一些老旧且经过验证的敏捷概念与其他较新发展出的理念的有效结合，它教会我们如何建立更好的团队，写出更好的软件，获得更快的成果，并在一个鼓励实验而不妥协稳定性的环境中轻松合作。
- en: Now that we have covered the theory, the next chapter takes us into the practical
    application of DevOps. We are going to begin with examples of deploying infrastructure
    as code in the cloud.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经覆盖了理论内容，接下来的章节将引导我们进入 DevOps 的实际应用。我们将从在云端部署基础设施作为代码的示例开始。
