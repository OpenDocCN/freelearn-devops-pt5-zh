- en: Chapter 4. Building Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 构建你的应用程序
- en: '|   | *"Measuring programming progress by lines of code is like measuring aircraft
    building progress by weight."* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *"用代码行数来衡量编程进度，就像用飞机的重量来衡量建造进度一样。"* |   |'
- en: '|   | --*Bill Gates* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*比尔·盖茨* |'
- en: 'TFS has introduced a new build system in TFS 2015 called TFBuild. In this chapter,
    you''ll learn the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 在 TFS 2015 中推出了一种新的构建系统，叫做 TFBuild。在本章中，你将学习以下内容：
- en: Configuring TFBuild Agent, Pool, and Queues
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 TFBuild 代理、池和队列
- en: Setting up a TFBuild Agent using an unattended installation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用无人值守安装设置 TFBuild 代理
- en: Creating a continuous integration build definition in TFBuild
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TFBuild 中创建持续集成构建定义
- en: Pinning a build badge to the welcome page in Team Portal
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将构建徽章固定到团队门户的欢迎页面
- en: Managing build resources using role-based access
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于角色的访问管理构建资源
- en: Using the build retention policy to automate build deletion
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用构建保留策略自动删除构建
- en: Using user capabilities to identify a build agent in a pool
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用户能力识别池中的构建代理
- en: Version DLLs in build output with build number
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建输出中使用构建号版本化 DLL
- en: Creating a new build task using the TFBuild Extensibility framework
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TFBuild 扩展框架创建新构建任务
- en: Integrating SonarQube with TFBuild to manage technical debt
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 SonarQube 与 TFBuild 集成以管理技术债务
- en: Building GitHub code repositories with TFBuild
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TFBuild 构建 GitHub 代码库
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: As a developer, compiling code and running unit tests gives you an assurance
    that your code changes haven't had an impact on the existing codebase. Integrating
    your code changes into the source control repository enables other users to validate
    their changes with yours. As a best practice, Teams integrate changes into the
    shared repository several times a day to reduce the risk of introducing breaking
    changes or worse, overwriting each other's.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，编译代码并运行单元测试可以确保你的代码更改不会影响现有的代码库。将代码更改集成到源代码控制库中，能够让其他用户验证他们的更改是否与你的更改兼容。作为最佳实践，团队通常每天将更改多次集成到共享库中，以减少引入破坏性更改或更糟糕的情况——互相覆盖的风险。
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Continuous integration** (**CI**) is a development practice that requires
    developers to integrate code into a shared repository several times a day. Each
    check-in is verified by an automated build, allowing Teams to detect problems
    early.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是一种开发实践，要求开发人员每天多次将代码集成到共享的代码库中。每次提交都会通过自动构建进行验证，从而帮助团队及早发现问题。'
- en: The automated build that runs as part of the CI process is often referred to
    as the CI build. There isn't a clear definition of what the CI build should do,
    but at the very minimum, it is expected to compile code and run unit tests. Running
    the CI build on a non-developer remote workspace helps identify the dependencies
    that may otherwise go unnoticed into the release process. We can talk endlessly
    about the benefits of CI; the key here is that it enables you to have potentially
    deployable software at all times.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 CI 过程的一部分运行的自动化构建通常被称为 CI 构建。关于 CI 构建应该做什么并没有明确的定义，但最基本的要求是编译代码并运行单元测试。在非开发者的远程工作区上运行
    CI 构建，有助于发现那些可能被忽视的依赖关系，避免它们进入发布流程。我们可以无休止地讨论 CI 的好处；关键是它使你能够随时拥有潜在的可部署软件。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Deployable software is the most tangible asset to customers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可部署的软件是客户最为看重的实际资产。
- en: 'Moving from concept to application, in this chapter, you''ll learn how to leverage
    the build tooling in TFS to set up a quality-focused CI process. But first, let''s
    have a little introduction to the build system in TFS. The following image illustrates
    the three generations of build systems in TFS:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念到应用，在本章中，你将学习如何利用 TFS 中的构建工具来设置一个以质量为中心的持续集成（CI）过程。但首先，让我们简单了解一下 TFS 中的构建系统。下图展示了
    TFS 中构建系统的三代演变：
- en: '![Introduction](img/image00544.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00544.jpeg)'
- en: TFS has gone through three generations of build systems. The very first was
    MSBuild using XML for configuration; the next one was XAML using Windows Workflow
    Foundation for configuration, and now, there's TFBuild using JSON for configuration.
    The XAML-based build system will continue to be supported in TFS 2015\. No automated
    migration path is available from XAML build to TFBuild. This is generally because
    of the difference in the architecture between the two build systems.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 经历了三代构建系统。最初的是使用 XML 配置的 MSBuild；接下来是使用 Windows Workflow Foundation 配置的
    XAML；现在是使用 JSON 配置的 TFBuild。基于 XAML 的构建系统将在 TFS 2015 中继续得到支持。XAML 构建系统无法自动迁移到
    TFBuild，这通常是因为这两种构建系统架构的差异。
- en: The new build system in TFS is called **Team Foundation Build** (**TFBuild**).
    It is an extensible task-based execution system with a rich web interface that
    allows authoring, queuing, and monitoring builds. TFBuild is fully cross platform
    with the underlying build agents that are capable of running natively on both
    Windows and non-Windows platforms. TFBuild provides out-of-the-box integration
    with Centralized Version Control such as TFVC and Distributed Version Controls
    such as Git and GitHub. TFBuild supports building .NET, Java, Android, and iOS
    applications. All the recipes in this chapter are based on TFBuild.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 中的新构建系统称为 **Team Foundation Build**（**TFBuild**）。它是一个可扩展的基于任务的执行系统，具有丰富的
    web 界面，允许创建、排队和监视构建。TFBuild 完全支持跨平台，底层构建代理能够在 Windows 和非 Windows 平台上原生运行。TFBuild
    提供开箱即用的集成，支持集中版本控制（如 TFVC）以及分布式版本控制（如 Git 和 GitHub）。TFBuild 支持构建 .NET、Java、Android
    和 iOS 应用程序。本章中的所有示例都基于 TFBuild。
- en: 'TFBuild is a task orchestrator that allows you to run any build engine, such
    as Ant, CMake, Gradle, Gulp, Grunt, Maven, MSBuild, Visual Studio, Xamarin, XCode,
    and so on. TFBuild supports Work Item integration, publishing drops, and publishing
    test execution results into the TFS that is independent of the build engine that
    you choose. The build agents are xCopyable and do not require any installation.
    The agents are auto-updating in nature; there''s no need to update every agent
    in your infrastructure:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: TFBuild 是一个任务协调器，允许你运行任何构建引擎，如 Ant、CMake、Gradle、Gulp、Grunt、Maven、MSBuild、Visual
    Studio、Xamarin、XCode 等。TFBuild 支持工作项集成、发布构建产物和将测试执行结果发布到 TFS，与所选择的构建引擎无关。构建代理是可直接复制的，无需任何安装。代理会自动更新，因此无需更新基础设施中的每个代理：
- en: '![Introduction](img/image00545.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00545.jpeg)'
- en: 'TFBuild offers a rich web-based interface. It does not require Visual Studio
    to author or modify a build definition. From simple to complex, all build definitions
    can easily be created in the web portal. The web interface is accessible from
    any device and any platform:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: TFBuild 提供了丰富的基于 web 的界面。它不需要 Visual Studio 来创建或修改构建定义。从简单到复杂，所有构建定义都可以轻松地在
    web 门户中创建。该 web 界面可以在任何设备和任何平台上访问：
- en: '![Introduction](img/image00546.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00546.jpeg)'
- en: The build definition can be authored from the web portal directly
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接从 web 门户编写构建定义
- en: 'A build definition is a collection of tasks. A task is simply a build step.
    Build definition can be composed by dragging and dropping tasks. Each task supports
    **Enabled**, **Continue on error**, and **Always run** flags making it easier
    to manage build definitions as the task list grows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 构建定义是任务的集合。一个任务就是一个构建步骤。构建定义可以通过拖放任务来组成。每个任务都支持 **启用**、**遇到错误继续执行** 和 **始终运行**
    标志，使得随着任务列表的增长，构建定义的管理变得更加容易：
- en: '![Introduction](img/image00547.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00547.jpeg)'
- en: The build system supports invoking PowerShell, batch, command line, and shell
    scripts. All out-of-the-box tasks are open source. If a task does not satisfy
    your requirements, you can download the task from GitHub at [https://github.com/Microsoft/vso-agent-tasks](https://github.com/Microsoft/vso-agent-tasks)
    and customize it. If you can't find a task, you can easily create one. You'll
    learn more about custom tasks in this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 构建系统支持调用 PowerShell、批处理、命令行和 shell 脚本。所有开箱即用的任务都是开源的。如果某个任务不满足你的需求，你可以从 GitHub
    下载该任务：[https://github.com/Microsoft/vso-agent-tasks](https://github.com/Microsoft/vso-agent-tasks)
    并进行自定义。如果你找不到某个任务，你也可以轻松创建一个。在本章中，你将了解更多关于自定义任务的内容。
- en: 'Changes to build definitions can be saved as drafts. Build definitions maintain
    a history of all changes in the **History** tab. A side-by-side comparison of
    the changes is also possible. Comments entered when changing the build definition
    show up in the change history:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 构建定义的更改可以保存为草稿。构建定义在**历史**标签中保持所有更改的历史记录。还可以进行更改的并排对比。更改构建定义时输入的评论会显示在更改历史记录中：
- en: '![Introduction](img/image00548.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00548.jpeg)'
- en: 'Build definitions can be saved as templates. This helps standardize the use
    of certain tasks across new build definitions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 构建定义可以保存为模板。这有助于在新的构建定义中标准化某些任务的使用：
- en: '![Introduction](img/image00549.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00549.jpeg)'
- en: An existing build definition can be saved as a template
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的构建定义可以保存为模板
- en: 'Multiple triggers can be set for the same build, including CI triggers and
    multiple scheduled triggers:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 同一个构建可以设置多个触发器，包括CI触发器和多个定时触发器：
- en: '![Introduction](img/image00550.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00550.jpeg)'
- en: 'Rule-based retention policies support the setting up of multiple rules. Retention
    can be specified by "days" or "number" of the builds:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 基于规则的保留策略支持设置多个规则。保留可以按“天”或“构建数量”来指定：
- en: '![Introduction](img/image00551.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00551.jpeg)'
- en: 'The build output logs are displayed in web portal in real time. The build log
    can be accessed from the console even after the build gets completed:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 构建输出日志会在Web门户中实时显示。即使构建完成后，构建日志也可以从控制台访问：
- en: '![Introduction](img/image00552.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00552.jpeg)'
- en: 'The build reports have been revamped to offer more visibility into the build
    execution, and among other things, the test results can now directly be accessed
    from the web interface. The `.trx` file does not need to be downloaded into Visual
    Studio to view the test results. We''ll be covering this in detail in [Chapter
    5](part0062.xhtml#aid-1R42S1 "Chapter 5. Testing Your Application"), *Testing
    Your Application*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 构建报告经过改版，提供了更多关于构建执行的可见性，除此之外，测试结果现在可以直接从Web界面访问。`.trx`文件不需要下载到Visual Studio中查看测试结果。我们将在[第5章](part0062.xhtml#aid-1R42S1
    "第5章 测试你的应用程序")，*测试你的应用程序*中详细介绍这一点：
- en: '![Introduction](img/image00553.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00553.jpeg)'
- en: 'The old build system had restrictions on one Team Project Collection per build
    controller and one controller per build machine. TFBuild removes this restriction
    and supports the reuse of queues across multiple Team Project Collections. The
    following image illustrates the architecture of the new build system:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的构建系统对每个构建控制器的团队项目集和每台构建机器的控制器有限制。TFBuild取消了这一限制，支持在多个团队项目集之间重用队列。以下图示展示了新构建系统的架构：
- en: '![Introduction](img/image00554.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00554.jpeg)'
- en: 'In the preceding diagram, we observe the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们观察到以下内容：
- en: Multiple agents can be configured on one machine
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在一台机器上配置多个代理
- en: Agents from across different machines can be grouped into a pool
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自不同机器的代理可以被分组到一个池中
- en: Each pool can have only one queue
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个池只能有一个队列
- en: One queue can be used across multiple Team Project Collections
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同一个队列可以在多个团队项目集之间共享
- en: To demonstrate the capabilities of TFBuild, we'll use the FabrikamTFVC and FabrikamGit
    Team Projects. If you don't already have these Team Projects, follow the *Creating
    a Team Project using the Scrum Template* recipe, in [Chapter 1](part0016.xhtml#aid-F8901
    "Chapter 1. Team Project Setup"), *Team Project Setup*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示TFBuild的功能，我们将使用FabrikamTFVC和FabrikamGit团队项目。如果你还没有这些团队项目，可以按照[第1章](part0016.xhtml#aid-F8901
    "第1章 团队项目设置")，*创建一个使用Scrum模板的团队项目*的食谱操作。
- en: Configuring TFBuild Agent, Pool, and Queues
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置TFBuild代理、池和队列
- en: In this recipe, you'll learn how to configure agents and create pools and queues.
    You'll also learn how a queue can be used across multiple Team Project Collections.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，你将学习如何配置代理并创建池和队列。你还将学习如何在多个团队项目集之间使用队列。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Scenario: At Fabrikam, the FabrikamTFVC and FabrikamGit Team Projects need
    their own build queues. The FabrikamTFVC Teams build process can be executed on
    a Windows Server. The FabrikamGit Team build process needs both Windows and OS
    X. The Teams want to set up three build agents on a Windows Server; one build
    agent on an OS X machine. The Teams want to group two Windows Agents into a Windows
    Pool for FabrikamTFVC Team and group one Windows and one Mac Agent into another
    pool for the FabrikamGit Team:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：在 Fabrikam，FabrikamTFVC 和 FabrikamGit 团队项目需要各自的构建队列。FabrikamTFVC 团队的构建过程可以在
    Windows 服务器上执行，而 FabrikamGit 团队的构建过程需要同时支持 Windows 和 OS X。团队希望在 Windows 服务器上设置三个构建代理，在
    OS X 机器上设置一个构建代理。团队还希望将两个 Windows 代理分组到一个 Windows 池中，供 FabrikamTFVC 团队使用，并将一个
    Windows 代理和一个 Mac 代理分组到另一个池中，供 FabrikamGit 团队使用：
- en: '![Getting ready](img/image00555.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00555.jpeg)'
- en: 'Permission: To configure a build agent, you should be in the Build Administrators
    Group.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 权限：要配置构建代理，您应该属于构建管理员组。
- en: 'The prerequisites for setting up the build agent on a Windows-based machine
    are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 系统上设置构建代理的前提条件如下：
- en: The build agent should have a supporting version of Windows. The list of supported
    versions is listed at [https://msdn.microsoft.com/en-us/Library/vs/alm/TFS/administer/requirements#Operatingsystems](https://msdn.microsoft.com/en-us/Library/vs/alm/TFS/administer/requirements#Operatingsystems).
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建代理应安装支持的 Windows 版本。支持的版本列表可以在 [https://msdn.microsoft.com/en-us/Library/vs/alm/TFS/administer/requirements#Operatingsystems](https://msdn.microsoft.com/en-us/Library/vs/alm/TFS/administer/requirements#Operatingsystems)
    中找到。
- en: The build agent should have Visual Studio 2013 or 2015.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建代理应安装 Visual Studio 2013 或 2015。
- en: The build agent should have PowerShell 3 or a newer version.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建代理应安装 PowerShell 3 或更高版本。
- en: 'A build agent is configured for your TFS as part of the server installation
    process if you leave the **Configure the build service to start automatically**
    option selected:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您选择保留 **Configure the build service to start automatically** 选项，构建代理将在 TFS
    服务器安装过程中为您配置： '
- en: '![Getting ready](img/image00556.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00556.jpeg)'
- en: 'For the purposes of this recipe, we''ll configure the agents from scratch.
    Delete the default pool or any other pool you have by navigating to the **Agent
    pools** option in the TFS Administration Console `http://tfs2015:8080/tfs/_admin/_AgentPool`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将从头开始配置代理。通过导航到 TFS 管理控制台中的 **Agent pools** 选项 `http://tfs2015:8080/tfs/_admin/_AgentPool`
    来删除默认池或您创建的任何其他池：
- en: '![Getting ready](img/image00557.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00557.jpeg)'
- en: How to do it
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作
- en: Log into the Windows machine that you desire to set the agents upon. Navigate
    to the **Agent pools** in the TFS Administration Console by browsing to `http://tfs2015:8080/tfs/_admin/_AgentPool`.
    Click on **New Pool**, enter the pool name as `Pool 1`, and uncheck **Auto-Provision
    Queue in Project Collections**:![How to do it](img/image00558.jpeg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您希望设置代理的 Windows 机器。通过浏览器访问`http://tfs2015:8080/tfs/_admin/_AgentPool`，在
    TFS 管理控制台中导航到 **Agent pools**。点击 **New Pool**，将池名称设置为 `Pool 1`，并取消勾选 **Auto-Provision
    Queue in Project Collections**：![如何操作](img/image00558.jpeg)
- en: Click on the **Download agent** icon. Copy the downloaded folder into `E:\`
    and unzip it into `E:\Win-A1`. You can use any drive; however, it is recommended
    to use the non-operating system drive:![How to do it](img/image00559.jpeg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Download agent** 图标。将下载的文件夹复制到 `E:\` 并解压到 `E:\Win-A1`。您可以使用任何驱动器，但建议使用非操作系统驱动器：![如何操作](img/image00559.jpeg)
- en: Run the PowerShell console as an administrator and change the current path in
    PowerShell to the location of the agent in this case `E:\Win-A1`. Call the `ConfigureAgent.ps1`
    script in the PowerShell console and click on *Enter*. This will launch the Build
    Agent Configuration utility:![How to do it](img/image00560.jpeg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份运行 PowerShell 控制台，并将当前路径更改为代理所在的位置，这里是 `E:\Win-A1`。在 PowerShell 控制台中调用
    `ConfigureAgent.ps1` 脚本并按 *Enter* 键。这将启动构建代理配置工具：![如何操作](img/image00560.jpeg)
- en: Enter the configuration details as illustrated in the following screenshot:![How
    to do it](img/image00561.jpeg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下截图所示输入配置详细信息：![如何操作](img/image00561.jpeg)
- en: Tip
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is recommended to install the build agent as a service; however, you have
    an option to run the agent as an interactive process. This is great when you want
    to debug a build or want to temporarily use a machine as a build agent.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 建议将构建代理安装为服务；但您也可以选择将代理作为交互式进程运行。如果您想调试构建或临时将机器用作构建代理，这个选项非常有用。
- en: 'The configuration process creates a JSON settings file; it creates the working
    and diagnostics folders:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置过程会创建一个 JSON 设置文件，并创建工作和诊断文件夹：
- en: '![How to do it](img/image00562.jpeg)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作](img/image00562.jpeg)'
- en: Refresh the **Agent pools** page in the TFS Administration Console. The newly
    configured agent shows up under **Pool 1**:![How to do it](img/image00563.jpeg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在TFS管理控制台中刷新**代理池**页面，新的配置代理将在**池 1**下显示：![如何操作](img/image00563.jpeg)
- en: Repeat steps 2 to 5 to configure **Win-A2** in **Pool 1**. Repeat steps 1 to
    5 to configure **Win-A3** in **Pool 2**. It is worth highlighting that each agent
    runs from its individual folder:![How to do it](img/image00564.jpeg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤2到5以在**池 1**中配置**Win-A2**。重复步骤1到5以在**池 2**中配置**Win-A3**。值得注意的是，每个代理都从各自的文件夹中运行：![如何操作](img/image00564.jpeg)
- en: Now, log into the Mac machine and launch terminal:![How to do it](img/image00565.jpeg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，登录到Mac机器并启动终端：![如何操作](img/image00565.jpeg)
- en: Install the agent installer globally by running the commands illustrated here.
    You will be required to enter the machine password to authorize the install:![How
    to do it](img/image00566.jpeg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行这里显示的命令来全局安装代理安装程序。你将需要输入机器密码以授权安装：![如何操作](img/image00566.jpeg)
- en: 'This will download the agent in the user profile, shown as follows:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在用户配置文件中下载代理，如下所示：
- en: '![How to do it](img/image00567.jpeg)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作](img/image00567.jpeg)'
- en: The summary of actions performed when the agent is downloaded
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下载代理时执行的操作摘要
- en: Run the following command to install the agent installer globally for the user
    profile:![How to do it](img/image00568.jpeg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以在用户配置文件中全局安装代理安装程序：![如何操作](img/image00568.jpeg)
- en: Running the following command will create a new directory called `osx-A1` for
    the agent; create the agent in the directory:![How to do it](img/image00569.jpeg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令将为代理创建一个名为`osx-A1`的新目录；在该目录中创建代理：![如何操作](img/image00569.jpeg)
- en: The agent installer has been copied from the user profile into the agent directory,
    shown as follows:![How to do it](img/image00570.jpeg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理安装程序已从用户配置文件复制到代理目录，如下所示：![如何操作](img/image00570.jpeg)
- en: Pass the following illustrated parameters to configure the agent:![How to do
    it](img/image00571.jpeg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传递以下显示的参数以配置代理：![如何操作](img/image00571.jpeg)
- en: This completes the configuration of the xPlatform agent on the Mac. Refresh
    the **Agent pools** page in the TFS Administration Console to see the agent appear
    in **Pool 2**:![How to do it](img/image00572.jpeg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这完成了在Mac上配置xPlatform代理的过程。在TFS管理控制台中刷新**代理池**页面，查看代理是否出现在**池 2**中：![如何操作](img/image00572.jpeg)
- en: The build agent has been configured at the Team Foundation Server level. In
    order to use the build agent for a Team Project Collection, a mapping between
    the build agent and Team Project Collection needs to be established. This is done
    by creating queues. To configure queues, navigate to the Collection Administration
    Console by browsing to `http://tfs2015:8080/tfs/DefaultCollection/_admin/_BuildQueue`.
    From the **Build** tab, click on **New queue**; this dialog allows you to reference
    the pool as a queue:![How to do it](img/image00573.jpeg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建代理已在团队基础服务器级别进行配置。为了将构建代理用于团队项目集合，必须在构建代理和团队项目集合之间建立映射。这是通过创建队列来完成的。要配置队列，请通过访问`http://tfs2015:8080/tfs/DefaultCollection/_admin/_BuildQueue`，导航到集合管理控制台。在**构建**选项卡中，点击**新建队列**；此对话框允许你将池作为队列引用：![如何操作](img/image00573.jpeg)
- en: Map **Pool 1** as **Queue 1** and **Pool 2** as **Queue 2** as shown here:![How
    to do it](img/image00574.jpeg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**池 1**映射为**队列 1**，将**池 2**映射为**队列 2**，如下所示：![如何操作](img/image00574.jpeg)
- en: The TFBuild Agent, Pools, and Queues are now ready to use. The green bar before
    the agent name and queue in the administration console indicates that the agent
    and queues are online.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，TFBuild代理、池和队列已经准备好使用。管理控制台中代理名称和队列前面的绿色条表示代理和队列处于在线状态。
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To test the setup, create a new build definition by navigating to the FabrikamTFVC
    Team Project Build hub by browsing to `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`.
    Click on the **Add a new build definition** icon. In the **General** tab, you''ll
    see that the queues show up under the **Queue** dropdown menu. This confirms that
    the queues have been correctly configured and are available for selection in the
    build definition:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试该设置，请通过访问`http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`，导航到FabrikamTFVC团队项目构建中心，创建一个新的构建定义。点击**添加新建构建定义**图标。在**常规**选项卡中，你会看到队列出现在**队列**下拉菜单中。这确认队列已正确配置，并可以在构建定义中进行选择：
- en: '![How it works...](img/image00575.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image00575.jpeg)'
- en: 'Pools can be used across multiple Team Project Collections. As illustrated
    in the following screenshot, in Team Project Collection 2, clicking on the **New
    queue...** shows that the existing pools are already mapped in the default collection:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 池可以跨多个团队项目集合使用。如以下截图所示，在团队项目集合 2 中，点击 **新队列...** 会显示现有的池已经在默认集合中映射：
- en: '![How it works...](img/image00576.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image00576.jpeg)'
- en: Setting up a TFBuild Agent using an unattended installation
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无人值守安装设置 TFBuild 代理
- en: The new build framework allows the unattended setup of build agents by injecting
    a set of parameter values via script. This technique can be used to spin up new
    agents to be attached into an existing agent pool. In this recipe, you'll learn
    how to configure and unconfigure a build agent via script.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 新的构建框架允许通过脚本注入一组参数值来无人值守地设置构建代理。此技术可用于启动新的代理，并将其附加到现有的代理池中。在本配方中，您将学习如何通过脚本配置和卸载构建代理。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Scenario: The FabrikamTFVC Team wants the ability to install, configure, and
    unconfigure a build agent directly via script without having to perform this operation
    using the Team Portal.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamTFVC 团队希望能够通过脚本直接安装、配置和卸载构建代理，而无需通过团队门户进行此操作。
- en: 'Permission: To configure a build agent, you should be in the Build Administrators
    Group.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 权限：要配置构建代理，您需要属于构建管理员组（Build Administrators Group）。
- en: Download the build agent as discussed in the earlier recipe *Configuring TFBuild
    Agent, Pool, and Queues*. Copy the folder to `E:\Agent`. The script refers to
    this `Agent` folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前的配方 *配置 TFBuild 代理、池和队列* 下载构建代理。将该文件夹复制到`E:\Agent`。脚本会引用这个`Agent`文件夹。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Launch PowerShell in the elevated mode and execute the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以提升权限模式启动 PowerShell，并执行以下命令：
- en: '[PRE0]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Replace the value of the username and password accordingly.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请相应地替换用户名和密码的值。
- en: 'Executing the script will result in the following output:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行脚本将产生以下输出：
- en: '![How to do it...](img/image00577.jpeg)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00577.jpeg)'
- en: The script installs an agent by the name **WinA-10** as Windows Service running
    as `svc_build`. The agent is added to **Pool 1**:![How to do it...](img/image00578.jpeg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该脚本通过名称为**WinA-10**的代理作为 Windows 服务运行，服务帐户为`svc_build`。该代理被添加到**Pool 1**：![如何操作...](img/image00578.jpeg)
- en: 'To unconfigure **WinA-10**, run the following command in an elevated PowerShell
    prompt:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要卸载**WinA-10**，请在提升权限的 PowerShell 提示符下运行以下命令：
- en: '[PRE1]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To unconfigure, script needs to be executed from outside the scope of the `Agent`
    folder. Running the script from within the `Agent` folder scope will result in
    an error message.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要卸载，脚本需要从`Agent`文件夹的范围之外执行。从`Agent`文件夹范围内运行脚本将导致错误信息。
- en: '![How to do it...](img/image00579.jpeg)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00579.jpeg)'
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The new build agent natively allows configuration via script. A new capability
    called **Personal Access Token** (**PAT**) is due for release in the future updates
    of TFS 2015\. PAT allows you to generate a personal OAuth token for a specific
    scope; it replaces the need to key in passwords into configuration files.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 新的构建代理本身支持通过脚本进行配置。未来的 TFS 2015 更新将发布一种新的功能，称为**个人访问令牌**（**PAT**）。PAT 允许您为特定范围生成个人
    OAuth 令牌；它取代了将密码输入配置文件的需求。
- en: Creating a continuous integration build definition in TFBuild
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 TFBuild 中创建一个持续集成构建定义
- en: In this recipe, you'll learn how to author a continuous integration build definition.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，您将学习如何编写一个持续集成构建定义。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Scenario: The FabrikamTFVC Team wants to set up a build definition that is
    executed on every code check-in. The Team wants to run this build definition using
    **Pool 1**, which has the required frameworks installed to compile the code and
    execute unit tests.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamTFVC 团队希望设置一个在每次代码提交时执行的构建定义。团队希望使用**Pool 1**来运行此构建定义，该池已安装所需的框架来编译代码并执行单元测试。
- en: To create a new build definition, you need to have the build definition author
    or builder's permissions. This permission can be granted by adding yourself to
    the Build Administrators Security Group.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新的构建定义，您需要拥有构建定义作者或构建者的权限。可以通过将自己添加到构建管理员安全组中来授予此权限。
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the **Build** hub in FabrikamTFVC Team Portal by browsing to `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`.
    Click on the **+** icon to create a new build definition. Select **Visual Studio**
    from the **DEFINITION TEMPLATES** window:![How to do it...](img/image00580.jpeg)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览到`http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`，导航到FabrikamTFVC团队门户中的**构建**中心。点击**+**图标以创建新的构建定义。在**定义模板**窗口中选择**Visual
    Studio**：![如何操作...](img/image00580.jpeg)
- en: 'This loads an empty build definition called **New Visual Studio definition
    1**:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将加载一个名为**New Visual Studio definition 1**的空构建定义：
- en: '![How to do it...](img/image00581.jpeg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00581.jpeg)'
- en: Navigate to the **General** tab, set the fields as illustrated in the following
    screenshot:![How to do it...](img/image00582.jpeg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**常规**标签，按照以下截图中的示例设置各字段：![如何操作...](img/image00582.jpeg)
- en: A build job timeout allows you to enter the minimum time a build job requires
    to execute, before it is cancelled by the server. An empty or `0` value in this
    field signifies an infinite timeout.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建作业超时允许你输入构建作业需要执行的最短时间，在此时间之前服务器会取消该构建。此字段中的空值或`0`值表示无限超时。
- en: The default value of **Build job authorization scope** is **Project Collection**.
    You should only use Project Collection if the build definition needs to access
    resources outside the scope of the Team Project.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**构建作业授权范围**的默认值是**项目集合**。只有当构建定义需要访问团队项目范围外的资源时，才应使用项目集合。'
- en: The default value of **Build number format** is `$(date:yyyyMMdd)$(rev:.r)`.
    As a development best practice, it is always advisable to stamp the DLLs of the
    build output with the build number. This approach won't work with the default
    build number format. Change the build number format to an assembly version format
    such as `1.0.$(date:yyyyMMdd)$(rev:.r)`. A complete list of build number macros
    can be found at [https://msdn.microsoft.com/en-us/library/hh190719.aspx](https://msdn.microsoft.com/en-us/library/hh190719.aspx).
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**构建号格式**的默认值为`$(date:yyyyMMdd)$(rev:.r)`。作为开发最佳实践，建议始终在构建输出的DLL文件中打印构建号。此方法不适用于默认的构建号格式。将构建号格式更改为程序集版本格式，例如`1.0.$(date:yyyyMMdd)$(rev:.r)`。有关构建号宏的完整列表，请访问[https://msdn.microsoft.com/en-us/library/hh190719.aspx](https://msdn.microsoft.com/en-us/library/hh190719.aspx)。'
- en: Navigate to the **Repository** tab. It allows you to specify source control
    settings for the build. Set the fields as illustrated in the following screenshot.
    The **Clean** field forces the server workspace to be recreated for each build.
    In general, cleaning the workspace prior to building will take more time to build
    a solution. To only pull incremental changes into the build workspace, set the
    value to **false**. Label sources labels the version of the code build by the
    build definition. The **Label format** field specified here will create the label
    names as `BuildDefinitionName_BuildNumber`:![How to do it...](img/image00583.jpeg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**代码库**标签。它允许你为构建指定源代码控制设置。按照以下截图中的示例设置各字段。**清理**字段会强制每次构建都重新创建服务器工作区。通常，在构建之前清理工作区会使构建时间更长。如果只想将增量变更拉入构建工作区，请将该值设置为**false**。标签源会标记构建定义构建的代码版本。此处指定的**标签格式**字段将创建标签名称，格式为`BuildDefinitionName_BuildNumber`：![如何操作...](img/image00583.jpeg)
- en: Navigate to the **Triggers** tab and check CI. Configure the filters as illustrated
    in the screenshot here. The batch changes setting allows multiple check-ins queued
    for the same build to be bundled together into a single CI build:![How to do it...](img/image00584.jpeg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**触发器**标签并勾选CI。按照此处截图中的示例配置过滤器。批量更改设置允许将为同一构建排队的多个提交合并成一个单一的CI构建：![如何操作...](img/image00584.jpeg)
- en: 'At least one filter needs to be applied when configuring CI. Any check-ins
    done under the path set as included will trigger the build definition. The **Exclude**
    filter is used to exclude check-ins from under the specified path to trigger the
    build definition. In this case, any check-ins under the `$/FabrikamTFVC/Main/Source/lib`
    folder will not trigger this build definition. Navigate to the **Options** tab
    and set the fields as illustrated in the following screenshot. **MultiConfiguration**
    allows you to build more than one configuration as a part of the same pass. It
    is recommended to build multiple configurations as a part of the same build definition
    specifically if the code being built has platform dependencies. Checking **Parallel**
    allows the build for multiple configurations to be executed in parallel:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置 CI 时需要应用至少一个过滤器。在设置为包含的路径下所做的任何检入都会触发构建定义。**排除**过滤器用于排除指定路径下的检入，避免触发构建定义。在这种情况下，任何在`$/FabrikamTFVC/Main/Source/lib`文件夹下的检入都不会触发此构建定义。导航到**选项**选项卡并按下图所示设置字段。**多配置**允许你在同一次构建过程中构建多个配置。如果构建的代码具有平台依赖性，建议将多个配置作为同一构建定义的一部分进行构建。选中**并行**后，多个配置的构建可以并行执行：
- en: '![How to do it...](img/image00585.jpeg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作方式...](img/image00585.jpeg)'
- en: Now, navigate to the **Build** tab. The new build engine manifests itself as
    an orchestrator. The steps orchestrated need to be specified in the **Build**
    tab. As you can see in the **Build** tab, four build steps namely **Visual Studio
    Build**, **Visual Studio Test**, **Index Sources And Publish Symbols**, and **Publish
    Build Artifacts** are pre-added for you through the chosen template. Click on
    **Visual Studio Build** and update the fields as illustrated in the following
    screenshot:![How to do it...](img/image00586.jpeg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到**构建**选项卡。新的构建引擎以协调者的形式出现。需要在**构建**选项卡中指定协调的步骤。正如你在**构建**选项卡中看到的那样，四个构建步骤——**Visual
    Studio Build**、**Visual Studio Test**、**索引源并发布符号**以及**发布构建工件**——会通过所选模板预先添加给你。点击**Visual
    Studio Build**并更新下图所示的字段：![操作方式...](img/image00586.jpeg)
- en: The Build tab includes the Visual Studio Build, Visual Studio Test, Index Sources
    And Publish Symbols, and Publish Build Artifact tasks. These tasks are pre added
    on creating a new build definition using the Visual Studio Build Template.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建选项卡包括 Visual Studio Build、Visual Studio Test、索引源并发布符号，以及发布构建工件任务。这些任务在使用 Visual
    Studio Build 模板创建新构建定义时会自动添加。
- en: Select the path to the solution that you wish to compile. Leaving it to the
    default value of `**/*.sln` will build all solutions under the path specified
    in the **Repositories** tab.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你希望编译的解决方案的路径。将其保持为默认值`**/*.sln`将会构建**Repositories**选项卡中指定路径下的所有解决方案。
- en: The **MSBuild Arguments** textbox allows you to pass additional MS Build Arguments.
    A complete list of MS Build Arguments can be found at [https://msdn.microsoft.com/en-us/library/ms164311.aspx](https://msdn.microsoft.com/en-us/library/ms164311.aspx).
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**MSBuild 参数**文本框允许你传递额外的 MSBuild 参数。MSBuild 参数的完整列表可以在[https://msdn.microsoft.com/en-us/library/ms164311.aspx](https://msdn.microsoft.com/en-us/library/ms164311.aspx)找到。'
- en: You'll notice that the platform and configuration are preconfigured with a variable.
    Variables provide you with the ability to centrally manage values rather than
    hard coding them into the build definition. Variables also provide you with the
    ability to overwrite the values at run time. The values for these variables are
    specified in the **Variables** tab; you can optionally navigate to the **Variables**
    tab to overwrite the default values injected by the template.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会注意到平台和配置已预先配置了一个变量。变量使你能够集中管理值，而不是将它们硬编码到构建定义中。变量还允许你在运行时覆盖这些值。这些变量的值在**变量**选项卡中指定；你可以选择导航到**变量**选项卡以覆盖模板注入的默认值。
- en: Selecting the **Restore NuGet Packages** checkbox allows the build system to
    download any dependant NuGet packages during the build execution time.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中**恢复 NuGet 包**复选框允许构建系统在构建执行期间下载任何依赖的 NuGet 包。
- en: Tip
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The auto restore of NuGet packages is quite a useful feature; this allows you
    to avoid having to check-in dependency packages into TFS.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动恢复 NuGet 包是一个非常有用的功能；它可以避免你将依赖包检查到 TFS 中。
- en: The **Advanced** settings allow you to specify a specific version of MSBuild
    or Visual Studio to compile against your code. The default is x86.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**高级**设置允许你指定特定版本的 MSBuild 或 Visual Studio 来编译代码。默认是 x86。'
- en: The **Control Options** textarea allows you to disable a specific build definition;
    this option also allows you to specify the behavior on build errors. You can choose
    to stop the build process on encountering the first build error.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**控制选项**文本框允许您禁用特定的构建定义；此选项还允许您指定构建错误时的行为。您可以选择在遇到第一个构建错误时停止构建过程。'
- en: Next, click on the **Visual Studio Test** step; you will see the list of configurable
    variables on the left panel. Similar to the build step, this step also offers
    you the ability to choose the version of VS Test Runner to use for executing the
    tests. The **Advanced** section also allows you to specify the path to custom
    test adapters. This is extremely useful if you are planning to use a non-VS Test
    Runner to execute the tests. Check the **Code Coverage Enabled** checkbox, and
    leave the defaults in the other fields:![How to do it...](img/image00587.jpeg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**Visual Studio 测试**步骤；您将看到左侧面板上的可配置变量列表。与构建步骤类似，此步骤还允许您选择用于执行测试的 VS Test
    Runner 版本。**高级**部分还允许您指定自定义测试适配器的路径。如果您计划使用非 VS Test Runner 执行测试，这将非常有用。勾选**启用代码覆盖率**复选框，其他字段保留默认值：![如何操作...](img/image00587.jpeg)
- en: Check the code coverage enabled checkbox, and leave the defaults in other fields
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 勾选代码覆盖率启用复选框，其他字段保留默认值
- en: '**Test Assembly**: The **Test Assembly** field should be used to specify the
    path to the test projects that you want the VS Test Runner to execute. The field
    accepts wildcards; as per the default, all the projects that have `*test*.dll`
    as an output will be picked up by the test runner for execution.'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试程序集**：**测试程序集**字段应指定您希望 VS Test Runner 执行的测试项目的路径。此字段接受通配符；根据默认设置，所有输出为
    `*test*.dll` 的项目将被测试运行器选择执行。'
- en: '**Test Filter criteria**: This field allows you to run selective tests using
    a specific filter. A run settings file can be passed in the **Run Settings File**
    field. This is useful if the Development Team wants to execute the tests using
    the same test settings on developer machines and build servers. Test run parameters
    specified in the test settings file can be overwritten using the **Override TestRun
    Parameters** field.'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试筛选条件**：此字段允许您使用特定筛选器运行选择性的测试。可以在**运行设置文件**字段中传递一个运行设置文件。如果开发团队希望在开发者机器和构建服务器上使用相同的测试设置执行测试，这将非常有用。可以通过**覆盖测试运行参数**字段覆盖测试设置文件中指定的测试运行参数。'
- en: 'Next, click on **Index Sources And Publish Symbols**. During the source code
    compilation process, the build engine generated symbol files. The symbol files
    are the `.PDB` files that match a particular assembly and contain information
    used by debugging tools. The symbol files for the .NET assemblies contain source
    file names, line numbers, and local variable names. The build definition is capable
    of publishing the symbols to the symbol server. The developers can point to this
    symbol server in Visual Studio; this automatically downloads the correct symbols
    during debugging. Follow the instructions here to set up a file share-based symbol
    server if you don''t already have one: [https://msdn.microsoft.com/en-us/library/windows/hardware/mt146873(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/windows/hardware/mt146873(v=vs.85).aspx).![How
    to do it...](img/image00588.jpeg)'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**索引源并发布符号**。在源代码编译过程中，构建引擎生成了符号文件。符号文件是与特定程序集匹配的 `.PDB` 文件，并包含调试工具使用的信息。对于
    .NET 程序集，符号文件包含源文件名、行号和局部变量名。构建定义能够将符号发布到符号服务器。开发人员可以在 Visual Studio 中指向该符号服务器；这将在调试时自动下载正确的符号。如果您尚未拥有符号服务器，可以按照此处的说明设置基于文件共享的符号服务器：[https://msdn.microsoft.com/en-us/library/windows/hardware/mt146873(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/windows/hardware/mt146873(v=vs.85).aspx)。![如何操作...](img/image00588.jpeg)
- en: Set the artifact name as Symbols_$(BuildConfiguration)
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将构件名称设置为 Symbols_$(BuildConfiguration)
- en: 'Last but not least, navigate to the **Publish Build Artifacts** task. This
    task allows you to specify the settings where the build artifacts are published.
    Choose the server to store the artifact on your TFS. This is the best and simplest
    option in most cases:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，导航到**发布构建工件**任务。此任务允许您指定构建工件发布的位置。选择用于存储构件的服务器，此选项在大多数情况下是最佳和最简单的：
- en: '![How to do it...](img/image00589.jpeg)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00589.jpeg)'
- en: In the Publish Artifact, set the Artifact Type as Server
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在发布构件中，将构件类型设置为服务器
- en: Click on **Save** and give the build definition a name; add a comment as illustrated
    in the following screenshot:![How to do it...](img/image00590.jpeg)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**并为构建定义命名；添加一个注释，如以下截图所示：![如何操作...](img/image00590.jpeg)
- en: Click on **Queue Build** to manually trigger a new build for this build definition.
    The Build Output Console starts to show the build agent activity in real time:![How
    to do it...](img/image00591.jpeg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**队列构建**以手动触发该构建定义的新构建。构建输出控制台开始实时显示构建代理的活动：![如何操作...](img/image00591.jpeg)
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you would have noticed, the out-of-the-box experience after selecting the
    Visual Studio Template preconfigures most of the settings for you giving you the
    ability to set up your CI process in next to no time.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所注意到的，选择Visual Studio模板后，默认体验会为你预配置大部分设置，使你能够几乎立刻设置好CI流程。
- en: There's more…
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The build output has also been revamped in the new build framework. As illustrated
    in the following screenshot, the build output includes the test results and code
    coverage results. The output also includes a separate view for timeline and artifacts
    for easier access:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的构建框架中，构建输出也进行了重构。如以下截图所示，构建输出包含了测试结果和代码覆盖率结果。输出还包括一个单独的视图，便于查看时间线和工件：
- en: '![There''s more…](img/image00592.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/image00592.jpeg)'
- en: Pinning a build badge to the welcome page in Team Portal
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将构建徽章固定到团队门户中的欢迎页面
- en: Build badge is a dynamically generated image showing the status of the last
    build for a build definition. In this recipe, you'll learn how to pin a build
    badge to a Dashboard in Team Portal.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 构建徽章是一个动态生成的图像，显示某个构建定义的最新构建状态。在本指南中，你将学习如何将构建徽章固定到团队门户中的仪表板。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To modify a build definition, you need to have the build definition author or
    builder's permissions. This permission can be granted by adding yourself to the
    Build Administrators Security Group.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改构建定义，你需要拥有构建定义作者或构建者的权限。通过将自己添加到构建管理员安全组，可以授予此权限。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the **Build** hub for FabrikamTFVC Team Project; browse to `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**构建**中心，进入FabrikamTFVC团队项目；浏览`http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`。
- en: Locate the build definition **FabrikamTFVC CI** from under the build definitions
    menu in the left panel and choose to edit the build definition.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板的构建定义菜单下找到构建定义**FabrikamTFVC CI**，然后选择编辑该构建定义。
- en: Navigate to the **General** tab of the build definition and check the option
    **Badge enabled**:![How to do it...](img/image00593.jpeg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到构建定义的**常规**标签页，并勾选**启用徽章**选项：![如何操作...](img/image00593.jpeg)
- en: Click on **Save** to update the changes in order to enable the badge build definition.
    Upon saving the changes, a new hyperlink **Show url…** appears next to the **Badge
    enabled** field. Click on the **Show url...** hyperlink and copy the hyperlink:![How
    to do it...](img/image00594.jpeg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**以更新更改，从而启用徽章构建定义。保存更改后，**徽章启用**字段旁会出现一个新的超链接**显示URL...**。点击**显示URL...**超链接并复制该超链接：![如何操作...](img/image00594.jpeg)
- en: Navigate to the **Welcome** page of the FabrikamTFVC Team in Team Portal by
    browsing to `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_welcome`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览`http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_welcome`，进入团队门户中的FabrikamTFVC团队的**欢迎**页面。
- en: Edit `README.md` and paste the build badge URL. Save the changes. In the following
    screenshot, the current status of the FabrikamTFVC build is represented in red
    as **Failed**. A passing build is represented in green. A partially successful
    build is in orange:![How to do it...](img/image00595.jpeg)![How to do it...](img/image00596.jpeg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`README.md`并粘贴构建徽章的URL。保存更改。在以下截图中，当前FabrikamTFVC构建的状态以红色显示为**失败**。通过的构建以绿色显示，部分成功的构建则以橙色显示：![如何操作...](img/image00595.jpeg)![如何操作...](img/image00596.jpeg)
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Team Foundation Server Build API exposes a public endpoint for the status
    of the last build. The URL calls into this endpoint by passing the build definition
    ID requesting for the build definition status to be rendered as a badge `_apis/public/build/definitions/94fb1544-b441-45f5-a54d-466fc5d66817/4/badge`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Team Foundation Server构建API暴露了一个公共端点，用于显示最后一次构建的状态。通过传递构建定义ID，URL会调用该端点，要求将构建定义状态呈现为徽章`_apis/public/build/definitions/94fb1544-b441-45f5-a54d-466fc5d66817/4/badge`。
- en: There is more
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'The build definitions now support saving changes as drafts. This can be done
    by choosing the **Save as a draft** option, as illustrated in the screenshot here:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，构建定义支持将更改保存为草稿。这可以通过选择**保存为草稿**选项来完成，如截图所示：
- en: '![There is more](img/image00597.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容](img/image00597.jpeg)'
- en: 'The build definitions, which are also saved as a draft, support the queue build
    function. Builds generated by draft build definitions contain the `DRAFT` keyword
    in the build name:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 构建定义，也可以保存为草稿，支持队列构建功能。由草稿构建定义生成的构建，其构建名称中包含`DRAFT`关键字：
- en: '![There is more](img/image00598.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容](img/image00598.jpeg)'
- en: This gives you a great way to validate build definition changes before sharing
    them broadly.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这为你提供了一种在广泛共享之前验证构建定义更改的好方法。
- en: Managing build resources using role-based access
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基于角色的访问管理构建资源
- en: The old build permissions model for build resources was flat, meaning you could
    grant someone permission to manage all or no build resources. In the new build
    system, the security is a proper hierarchy, so you can control permissions on
    a queue-by-queue or pool-by-pool basis. The build system provides a "role-based
    access control" instead of exposing the underlying permissions directly. In this
    recipe, you'll learn how to permission build resources at the pool and queue levels.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的构建资源权限模型是扁平化的，这意味着你只能授予某人管理所有或不管理任何构建资源的权限。在新的构建系统中，安全性是一个合理的层次结构，因此你可以按队列或池的基础来控制权限。该构建系统提供了“基于角色的访问控制”，而不是直接暴露底层权限。在这个教程中，你将学习如何在池和队列级别上为构建资源设置权限。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Scenario: To manage the all pools membership, you need to be a member of the
    Team Foundation Administrators Group. Membership to Team Project Collection Administrator
    Group is required to manage permissions for individual pools. In order to manage
    the permissions for the queues, you need to be a member of the Project Collection
    Build Administrators Group. Build Definition Administration requires membership
    to the Build Administrators Group.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：要管理所有池的成员资格，你需要是团队基础管理员组的成员。要管理单个池的权限，需要是团队项目集合管理员组的成员。为了管理队列的权限，你需要是项目集合构建管理员组的成员。构建定义管理需要是构建管理员组的成员。
- en: How to do it...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the **Agent** tab in the Account Administration Console by browsing
    to `http://tfs2015:8080/tfs/_admin/_AgentPool`. Click on **All Pools** and add
    build agent service accounts that you intend to use globally across TFS into the
    **Agent Pool Service Accounts** role:![How to do it...](img/image00599.jpeg)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览到`http://tfs2015:8080/tfs/_admin/_AgentPool`，在帐户管理控制台中导航到**代理**选项卡。点击**所有池**并将你打算在TFS中全局使用的构建代理服务帐户添加到**代理池服务帐户**角色：![如何操作...](img/image00599.jpeg)
- en: 'To scope a service account only to **Pool 1**, click on **Pool 1**, select
    the **Agent Pool Service Accounts** option, and click on **Add...** to add the
    account:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将服务帐户的作用域限制为**Pool 1**，点击**Pool 1**，选择**代理池服务帐户**选项，然后点击**添加...**以添加帐户：
- en: '![How to do it...](img/image00600.jpeg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00600.jpeg)'
- en: Navigate to the **Agent queues** tab in the Default Project Collection scope
    in Administration Console by browsing to `http://tfs2015:8080/tfs/DefaultCollection/_admin/_AgentQueue`.
    Click on **All Queues**. The role membership for all queues administrators, creators,
    and users can be set from here:![How to do it...](img/image00601.jpeg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览到`http://tfs2015:8080/tfs/DefaultCollection/_admin/_AgentQueue`，在默认项目集合作用域中，导航到**代理队列**选项卡。点击**所有队列**。从这里可以设置所有队列管理员、创建者和用户的角色成员资格：![如何操作...](img/image00601.jpeg)
- en: Administration, creation, and user roles at the Pool 1 level scope these permissions
    at the Pool 1 level only. These can be set by clicking on **Pool 1** and adding
    the users and groups to the relevant roles.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pool 1级别，管理员、创建者和用户角色仅作用于Pool 1级别。这些权限可以通过点击**Pool 1**并将用户和组添加到相关角色来设置。
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作...
- en: 'As illustrated in the following figure, the new build system contains a hierarchical
    role-based access control model. In the next section, we''ll go through each of
    the roles and accesses that they offer:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，新的构建系统包含了一个基于角色的层次化访问控制模型。在接下来的部分中，我们将逐一介绍每个角色及其提供的访问权限：
- en: '![How it works...](img/image00602.jpeg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![如何运作...](img/image00602.jpeg)'
- en: '**All Queues**:'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有队列**：'
- en: '**Agent Queue Administrators**: Users in this role have the ability to manage
    all the queues within the Project Collection.'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理队列管理员**：该角色中的用户能够管理项目集合中的所有队列。'
- en: '**Agent Queue Creators**: Users in this role have the ability to create new
    queues. If there is no pool with the same name as the queue, one will be provisioned
    at the queue creation time, and the caller will be added as an administrator of
    both the queue and the corresponding pool. If a pool with the same name already
    exists, the caller must have the **Manage** permission (must be a pool administrator)
    on the pool to create a new queue that uses the pool.'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理队列创建者**：该角色的用户可以创建新队列。如果没有与队列同名的池，则会在队列创建时创建一个池，并将调用者添加为该队列和相应池的管理员。如果已经存在同名池，则调用者必须拥有池的**管理**权限（必须是池管理员），才能创建使用该池的新队列。'
- en: '**Agent Queue Users**: Users in this role have the ability to use all the queues
    for the entire collection. Use means they can assign the queues to be used by
    definitions in the build space.'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理队列用户**：该角色的用户可以使用整个集合中的所有队列。使用意味着他们可以将队列分配给构建空间中的定义。'
- en: '**Individual Queues**:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单个队列**：'
- en: '**Agent Queue Administrators**: This is same as the previous role, but the
    permissions are restricted to a specific queue.'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理队列管理员**：与之前的角色相同，但权限仅限于特定队列。'
- en: '**Agent Queue Users**: This is same as the previous role, but the permissions
    are restricted to a specific queue.'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理队列用户**：与之前的角色相同，但权限仅限于特定队列。'
- en: '**All Pools**:'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有池**：'
- en: '**Agent Pool Administrators**: Users in this role have the ability to manage
    all the pools within the entire account.'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理池管理员**：该角色的用户可以管理整个帐户中的所有池。'
- en: '**Agent Pool Service Accounts**: Users in this role have the ability to connect
    to the pool and receive messages regarding build jobs, including control messages
    such as "update yourself" and "cancel this job".'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理池服务账户**：该角色的用户可以连接到池并接收有关构建作业的消息，包括控制消息，如“更新自己”和“取消此作业”。'
- en: '**Individual Pools**:'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单个池**：'
- en: '**Agent Pool Administrators**: This is same as the previous role, but the permissions
    are restricted to the specific pool.'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理池管理员**：与之前的角色相同，但权限仅限于特定池。'
- en: '**Agent Pool Service Accounts**: This is same as the previous role, but the
    permissions are restricted to the specific pool.'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理池服务账户**：与之前的角色相同，但权限仅限于特定池。'
- en: Using the build retention policy to automate build deletion
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用构建保留策略来自动化构建删除
- en: 'The build retention policy allows you to delete older builds including its
    output and related artifacts using a set of rules. The build retention policy
    in the old build system had two drawbacks:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 构建保留策略允许您使用一组规则删除旧的构建及其输出和相关工件。旧构建系统中的构建保留策略有两个缺点：
- en: The retention policy could only be applied per build definition
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留策略只能应用于每个构建定义
- en: The retention was based on the number of builds only
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留仅基于构建的数量
- en: The new build system allows a global retention policy; this makes it easier
    to administer build retention. The new system allows retention by the age of build,
    making it easier to create meaningful retention rules. In this recipe, you'll
    learn how to apply the build retention policy both globally at the Team Project
    Collection level and locally at the build definition level.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 新的构建系统允许全局保留策略；这使得管理构建保留更加容易。新系统支持按构建的年龄进行保留，简化了创建有意义的保留规则。在本教程中，您将学习如何在团队项目集合级别和构建定义级别分别应用构建保留策略。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To administer build resources for the collection, you need to be a member of
    the Project Collection Build Administrators Group.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理集合的构建资源，您需要是项目集合构建管理员组的成员。
- en: 'Scenario: The Fabrikam Team would like to enforce a default retention policy
    of 20 days across all build definitions in the Default Team Project Collection.
    The FabrikamTFVC Team only wants to keep builds from FabrikamTFVC CI build definition
    for 5 days. At Fabrikam, all the builds older than 45 days that haven''t been
    marked to be retained indefinitely should be deleted.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：Fabrikam团队希望在默认团队项目集合中强制执行所有构建定义的默认保留策略，保留期为20天。FabrikamTFVC团队只希望将FabrikamTFVC
    CI构建定义的构建保留5天。在Fabrikam，所有超过45天且未标记为永远保留的构建都应被删除。
- en: 'The retention policy applies to all builds in a Team Project Collection. There
    may be a few builds that you would like to retain longer than the maximum retention
    enforced by the global policy. This can be achieved by marking a build for indefinite
    retention. Browse to the specific build that you would like to exclude from the
    retention policy. Then, right-click on the build and set the **Retain indefinitely**
    flag on the build:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 保留策略适用于所有团队项目集合中的构建。如果有些构建需要比全局策略规定的最大保留期更长时间保留，可以通过将构建标记为永久保留来实现。浏览到您希望从保留策略中排除的特定构建。然后，右键点击该构建，并设置该构建的
    **永久保留** 标志：
- en: '![Getting ready](img/image00603.jpeg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/image00603.jpeg)'
- en: How to do it...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: Navigate to the **Build** tab in the Administration Console for the Default
    Project Collection by browsing to `http://tfs2015:8080/tfs/DefaultCollection/_admin/_buildQueue`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到默认项目集合的 **构建** 标签页，路径为 `http://tfs2015:8080/tfs/DefaultCollection/_admin/_buildQueue`。
- en: 'In the **Maximum Retention Policy** section, update the **Days to keep** textbox
    to `45`. This will enforce a maximum retention of 45 days for all builds excluding
    those marked as retain indefinitely. Click on **Save changes** to apply the changes:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **最大保留策略** 部分，将 **保留天数** 文本框更新为 `45`。这将强制所有构建的最大保留期为 45 天，排除那些标记为永久保留的构建。点击
    **保存更改** 以应用更改：
- en: '![How to do it...](img/image00604.jpeg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/image00604.jpeg)'
- en: 'In the **Default Retention Policy** section, update the **Days to keep** textbox
    to `20` days. This setting is cascaded to all the newly created build definitions.
    Click on **Save changes** to apply the changes:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **默认保留策略** 部分，将 **保留天数** 文本框更新为 `20` 天。此设置将级联到所有新创建的构建定义。点击 **保存更改** 以应用更改：
- en: '![How to do it...](img/image00605.jpeg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/image00605.jpeg)'
- en: 'Navigate to the FabrikamTFVC CI build definition, and then to the **Retention**
    tab. Update the value of **Days to keep** to `5` days. A retention rule can be
    deleted by clicking the delete icon; a new retention rule can be added by clicking
    on the **Add new rule...** icon:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 FabrikamTFVC CI 构建定义，然后进入 **保留** 标签页。将 **保留天数** 的值更新为 `5` 天。可以通过点击删除图标删除保留规则；也可以通过点击
    **添加新规则...** 图标添加新的保留规则：
- en: '![How to do it...](img/image00606.jpeg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/image00606.jpeg)'
- en: How it works...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: TFS has a set of background jobs that are scheduled to run to manage various
    operations in TFS. The build retention policy is orchestrated by the TFS Agent;
    only those builds that have been marked as retain indefinitely will be excluded
    from the deletion process. At the moment, it is not possible to change the global
    settings for deleting build records and test records, and applying branch filters.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 有一组计划任务，用于管理 TFS 中的各种操作。构建保留策略由 TFS Agent 协调；只有那些标记为永久保留的构建才会被排除在删除过程之外。目前，无法更改删除构建记录和测试记录的全局设置，也无法应用分支筛选器。
- en: 'At the build definition level, it is possible to change the settings for what
    is deleted as a part of the retention policy. The **Delete test results** setting
    only deletes test runs, results, and attachments, manual test results are not
    deleted:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建定义级别，可以更改作为保留策略一部分被删除的内容。**删除测试结果** 设置仅删除测试运行、结果和附件，手动测试结果不会被删除：
- en: '![How it works...](img/image00607.jpeg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00607.jpeg)'
- en: There's more…
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: 'The new build system also has a provision for associating tags within individual
    builds and filtering builds using tags. Let''s start off by tagging a build. Open
    a build and add a few tags under the **Tags** section as illustrated in the following
    screenshot:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 新的构建系统还提供了在单个构建中关联标签并使用标签筛选构建的功能。让我们从标记一个构建开始。打开一个构建并在 **标签** 部分添加一些标签，如下图所示：
- en: '![There''s more…](img/image00608.jpeg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多内容…](img/image00608.jpeg)'
- en: 'In the build list page, enter the tags you would like to filter the build list
    by. As illustrated in the following screenshot, the build list is filtered by
    the **Bug#1291** and **Investigate** tags:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建列表页面，输入您希望用来筛选构建列表的标签。如以下截图所示，构建列表通过 **Bug#1291** 和 **Investigate** 标签进行筛选：
- en: '![There''s more…](img/image00609.jpeg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多内容…](img/image00609.jpeg)'
- en: Using user capabilities to identify a build agent in a pool
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用用户权限识别池中的构建代理
- en: It is not uncommon to have specialized build agents for specific builds. For
    example, an application may have dependency on SharePoint SDK. A build agent can
    be stood up to cater for builds that have such dependencies. The new build system
    introduces the concept of **capabilities**. Capabilities, in their most basic
    form, are a collection of key value pairs used to recognize the abilities of a
    build server. A build that requires a specific ability for its execution can be
    routed to a relevant build agent by referring to these key/value pairs. A build
    agent supports both system and user capabilities. System capabilities are a list
    of software frameworks already available on the build agent. They are generated
    by the build agent. User capabilities can be manually added to a build agent;
    this is a useful way to tag on a key value pair to recognize a build agent. In
    this recipe, you'll learn how to add a user capability to a build agent to recognize
    it in a pool of build agents.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定构建设置专门的构建代理并不罕见。例如，一个应用程序可能依赖于SharePoint SDK。可以设置一个构建代理来处理具有这种依赖关系的构建。新的构建系统引入了**能力**的概念。能力，最基本的形式，是一组键值对，用于识别构建服务器的能力。需要特定能力来执行的构建，可以通过引用这些键值对，将其路由到相关的构建代理。构建代理支持系统能力和用户能力。系统能力是构建代理上已经可用的软件框架列表，由构建代理生成。用户能力可以手动添加到构建代理；这是为构建代理标记键值对的一种有用方式。在本教程中，您将学习如何向构建代理添加用户能力，以便在构建代理池中识别它。
- en: Getting ready
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Scenario: The FabrikamTFVC Team has a solution that has dependency on SharePoint
    2016 SDK. It has supplemented Pool 1 with an additional agent that has SharePoint
    2016 SDK installed. While other build definitions can use both **Win-A1** and
    **Win-A2**, all build requests from FabrikamTFVC CI build need to be routed to
    **Win-A2** only:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamTFVC团队有一个解决方案，依赖于SharePoint 2016 SDK。它已向Pool 1添加了一个附加的代理，该代理已安装SharePoint
    2016 SDK。虽然其他构建定义可以同时使用**Win-A1**和**Win-A2**，但所有来自FabrikamTFVC CI构建的构建请求需要仅路由到**Win-A2**：
- en: '![Getting ready](img/image00610.jpeg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00610.jpeg)'
- en: For example, to amend the build agent capabilities, you need to be a member
    of the Build Administrators Group.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要修改构建代理的能力，您需要是构建管理员组的成员。
- en: How to do it…
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Navigate to the **Agent pools** tab in the Administration Console by browsing
    to `http://tfs2015:8080/tfs/_admin/_AgentPool`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览`http://tfs2015:8080/tfs/_admin/_AgentPool`，导航到管理控制台中的**Agent pools**标签。
- en: Click on **Pool 1** and select **Win-A2**. From the **USER CAPABILITIES** section,
    click on the **Add capability** hyperlink. Add `SharePoint.SDK` as the key and
    `2016` as the value:![How to do it…](img/image00611.jpeg)
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Pool 1**并选择**Win-A2**。在**USER CAPABILITIES**部分，点击**Add capability**超链接。将`SharePoint.SDK`添加为键，`2016`添加为值：![如何操作…](img/image00611.jpeg)
- en: Navigate to the FabrikamTFVC CI build, edit the build definition, and browse
    to the **General** tab. In the **Demands** section, click on the **Add demand**
    hyperlink. Add `SharePoint.SDK` and set the comparator to **equals** and the **Value**
    field to `2016`. Click on **Save** to apply the changes to the build definition:![How
    to do it…](img/image00612.jpeg)
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到FabrikamTFVC CI构建，编辑构建定义，并浏览到**General**标签。在**Demands**部分，点击**Add demand**超链接。添加`SharePoint.SDK`并将比较符设置为**equals**，将**Value**字段设置为`2016`。点击**Save**以将更改应用到构建定义：![如何操作…](img/image00612.jpeg)
- en: Click on the **Queue build** icon. In the launched window, click on the **Demands**
    tab. You'll see the newly added `SharePoint.SDK` demand shows up in this view.
    Demands can be added, removed, or edited directly from this window. Click on **OK**
    to trigger a build from this build definition:![How to do it…](img/image00613.jpeg)
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Queue build**图标。在弹出的窗口中，点击**Demands**标签。你会看到新添加的`SharePoint.SDK`需求出现在此视图中。需求可以直接在此窗口中添加、删除或编辑。点击**OK**触发该构建定义的构建：![如何操作…](img/image00613.jpeg)
- en: How it works…
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The build framework scans **Pool 1** for agents that match the list of demands
    specified in the build definition. In case no agent fulfils the demands raised
    by the build definition, a warning message is generated by the queued build indicating
    that there are no available build agents to process the build request.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 构建框架扫描**Pool 1**以查找与构建定义中指定的需求列表匹配的代理。如果没有代理满足构建定义提出的需求，排队构建时会生成警告消息，指示没有可用的构建代理来处理构建请求。
- en: 'The following screenshot illustrates that the build has successfully been routed
    to **Win-A2** by matching the build demand and the agent capability:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示，构建已通过匹配构建需求和代理能力成功路由到 **Win-A2**：
- en: '![How it works…](img/image00614.jpeg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00614.jpeg)'
- en: The prior versions of TFS have allowed build routing via build agent and build
    definition tagging. The new build system enriches the experience by providing
    an auto-generated list of system capabilities as well as the use of comparators
    for authoring demands in the build definition.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 先前版本的 TFS 通过构建代理和构建定义标签允许构建路由。新的构建系统通过提供自动生成的系统能力列表以及使用比较符来创作构建定义中的需求，丰富了这一体验。
- en: Version DLLs in build output with build number
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在构建输出中为 DLL 版本打上构建号
- en: Traceability is very important in the software develop lifecycle. Teams strive
    for traceability between requirements and test cases, code check-ins and builds,
    and code changes and test runs. Talking of traceability, it would be useful to
    map the binaries in the build output back to the build. In this recipe, you'll
    learn how to stamp the DLLs in the build output with the build number they are
    being generated from.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 可追溯性在软件开发生命周期中非常重要。团队努力实现需求与测试用例、代码提交与构建、代码更改与测试运行之间的可追溯性。说到可追溯性，将构建输出中的二进制文件映射回构建是非常有用的。在此教程中，你将学习如何为构建输出中的
    DLL 文件打上它们生成时的构建号戳。
- en: Getting ready
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Scenario: The FabrikamTFVC Team wants to label the source code used in the
    build and tag the label and build output using the build number:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamTFVC 团队希望标记构建中使用的源代码，并使用构建号标记标签和构建输出：
- en: '![Getting ready](img/image00615.jpeg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00615.jpeg)'
- en: 'Download the `StampBuildNumber.ps1` script provided in the course material.
    Check-in the `StampBuildNumber.ps1` script into the `script` folder as illustrated
    in this screenshot:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 下载课程材料中提供的 `StampBuildNumber.ps1` 脚本。将 `StampBuildNumber.ps1` 脚本检查入 `script`
    文件夹，如下图所示：
- en: '![Getting ready](img/image00616.jpeg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00616.jpeg)'
- en: '**Permissions**: You''ll need to edit build definition permissions to execute
    this recipe; you can get these permissions by being added to the Build Administrators
    Group.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**权限**：你需要编辑构建定义权限以执行此操作；你可以通过被添加到构建管理员组来获得这些权限。'
- en: How to do it…
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Navigate to the **Build** hub in the FabrikamTFVC Team Project by browsing to
    `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`. Select the **FabrikamTFVC
    CI** Build for editing.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览 `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build` 导航到 FabrikamTFVC
    团队项目中的 **构建** 中心，选择要编辑的 **FabrikamTFVC CI** 构建。
- en: Navigate to the **General** tab and change the **Build number format** field
    to `1.0.$(Year:yy)$(DayOfYear).$(BuildID)`.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **常规** 选项卡，修改 **构建号格式** 字段为 `1.0.$(Year:yy)$(DayOfYear).$(BuildID)`。
- en: Navigate to the **Repository** tab in the build definition, select the **Labeling
    Of Source** option on successful build, and change the **Label format** field
    to `$(build.buildNumber)`.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建定义中的 **仓库** 选项卡中，选择成功构建后 **源代码标记** 选项，并将 **标记格式** 字段修改为 `$(build.buildNumber)`。
- en: Navigate to the **Build** tab, click on **Add build step...**, and select the
    **PowerShell** task:![How to do it…](img/image00617.jpeg)
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **构建** 选项卡，点击 **添加构建步骤...**，然后选择 **PowerShell** 任务：![如何操作](img/image00617.jpeg)
- en: Update the script file path in the **PowerShell** task to point to the location
    of the `StampBuildNumber.ps1` script, which in this case is `$/FabrikamTFVC/Main/Source/script/StampBuildNumber.ps1`.
    The script expects build number and agent workspace as input parameters. These
    values can be injected using the predefined variable `$(Build.BuildNumber) $(Agent.BuildDirectory)\$(Build.Repository.Name)`.
    A complete list of predefined variables can be found at [https://msdn.microsoft.com/Library/vs/alm/Build/scripts/variables](https://msdn.microsoft.com/Library/vs/alm/Build/scripts/variables).![How
    to do it…](img/image00618.jpeg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 **PowerShell** 任务中的脚本文件路径，将其指向 `StampBuildNumber.ps1` 脚本的位置，在此案例中为 `$/FabrikamTFVC/Main/Source/script/StampBuildNumber.ps1`。该脚本期望构建号和代理工作区作为输入参数。这些值可以通过预定义变量
    `$(Build.BuildNumber) $(Agent.BuildDirectory)\$(Build.Repository.Name)` 注入。可以在
    [https://msdn.microsoft.com/Library/vs/alm/Build/scripts/variables](https://msdn.microsoft.com/Library/vs/alm/Build/scripts/variables)
    找到预定义变量的完整列表。![如何操作](img/image00618.jpeg)
- en: Click on **Save** and enter a comment to apply the changes made to the FabrikamTFVC
    CI build definition. Queue a build to validate the build number stamping on the
    DLLs in the build output:![How to do it…](img/image00619.jpeg)
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **保存** 并输入评论，以应用对 FabrikamTFVC CI 构建定义所做的更改。排队一个构建来验证 DLL 中的构建号戳印：![如何操作……](img/image00619.jpeg)
- en: '**Build 1.0.15289.68** successfully executes the `StampBuildNumber.ps1` script;
    a build source label matching the build number is generated as a result of a successful
    build. The build output can be downloaded from the **Artifacts** view. The **File
    version** and **Product version** fields have the same values as the build number.
    This provides an end-to-end mapping of the build number across the different artifacts.'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**构建 1.0.15289.68** 成功执行了 `StampBuildNumber.ps1` 脚本；构建号匹配的构建源标签将在成功构建后生成。构建输出可以从
    **Artifacts** 视图中下载。**文件版本** 和 **产品版本** 字段的值与构建号相同。这提供了构建号在不同构件中的端到端映射。'
- en: How it works…
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In order to successfully stamp the build number on to the DLLs, the build number
    needs to use the assembly version format. There are some interesting recommendations
    on Semantic Versioning that you can read more about at [http://semver.org/](http://semver.org/).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功地在 DLL 上戳上构建号，构建号需要使用程序集版本格式。关于语义化版本控制（Semantic Versioning），有一些有趣的建议，您可以在[http://semver.org/](http://semver.org/)上阅读更多内容。
- en: 'Each C# project contains a file `AssemblyInfo.cs`; as illustrated in the following
    screenshot. This class contains properties for `AssemblyVersion` and `AssemblyFileVersion`.
    The `StampBuildNumber.ps1` script overwrites the `AssemblyVersion` and `AssemblyFileVersion`
    fields with the injected build number:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 C# 项目都包含一个 `AssemblyInfo.cs` 文件；如下图所示。此类包含 `AssemblyVersion` 和 `AssemblyFileVersion`
    的属性。`StampBuildNumber.ps1` 脚本会将 `AssemblyVersion` 和 `AssemblyFileVersion` 字段覆盖为注入的构建号：
- en: '![How it works…](img/image00620.jpeg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的……](img/image00620.jpeg)'
- en: The PowerShell task executing `StampBuildNumber` script needs to be run before
    the Visual Studio Build task to ensure the updated values for `AssemblyVersion`
    and `AssemblyFileVersion` properties are used during the compilation process.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `StampBuildNumber` 脚本的 PowerShell 任务需要在 Visual Studio Build 任务之前运行，以确保在编译过程中使用更新后的
    `AssemblyVersion` 和 `AssemblyFileVersion` 属性值。
- en: 'The `StampBuildNumber` script accepts two parameters as illustrated here. These
    parameters are injected through predefined variables via the build definition:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`StampBuildNumber` 脚本接受两个参数，如此处所示。这些参数通过构建定义中的预定义变量进行注入：'
- en: '![How it works…](img/image00621.jpeg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的……](img/image00621.jpeg)'
- en: 'The `Set-AssemblyVersion` function validates that the build number value abides
    to the assembly version format. A scan is then performed in the build workspace
    to locate the `AssemblyInfo.cs` class. The `AssemblyVersion` and the `AssemblyFileVersion`
    properties in the `AssemblyInfo.cs` file are then replaced with the value of the
    build number:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set-AssemblyVersion` 函数验证构建号值是否符合程序集版本格式。然后，在构建工作区中执行扫描以定位 `AssemblyInfo.cs`
    类。接着，将 `AssemblyInfo.cs` 文件中的 `AssemblyVersion` 和 `AssemblyFileVersion` 属性替换为构建号的值：'
- en: '![How it works…](img/image00622.jpeg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的……](img/image00622.jpeg)'
- en: 'The following screenshot illustrates the processed `AssemblyInfo.cs` file from
    the agent work directory:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了来自代理工作目录的处理过的 `AssemblyInfo.cs` 文件：
- en: '![How it works…](img/image00623.jpeg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的……](img/image00623.jpeg)'
- en: Creating a new build task using the TFBuild Extensibility framework
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TFBuild 可扩展性框架创建新的构建任务
- en: The new build system comes with a wide range of prepackaged build tasks. Out-of-the-box
    tasks are complimented with the presence of popular scripting engines. This helps
    address scenarios that aren't directly covered with the out-of box-tasks. The
    new build system has been architected from the ground up with a special focus
    on extensibility. In this recipe, you'll learn how to create a new build task
    using the extensibility framework available in the new build system.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 新的构建系统提供了一系列预打包的构建任务。开箱即用的任务与流行的脚本引擎相辅相成。这有助于解决一些未被开箱任务直接覆盖的场景。新的构建系统从头开始架构，特别注重可扩展性。在本配方中，您将学习如何使用新构建系统中提供的可扩展性框架创建一个新的构建任务。
- en: Getting ready
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The TFS Extensions command-line utility (`tfx-cli`) needs to be used for building
    task management. The utility is based on Node.js. As a prerequisite to using `tfx-cli`,
    download and install Node.js from [https://nodejs.org/en/download](https://nodejs.org/en/download).
    The extensibility command-line utility can directly be installed by launching
    command prompt and running the following command:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 扩展命令行工具（`tfx-cli`）需要用于构建任务管理。该工具基于 Node.js。作为使用 `tfx-cli` 的先决条件，需要从 [https://nodejs.org/en/download](https://nodejs.org/en/download)
    下载并安装 Node.js。扩展性命令行工具可以通过启动命令提示符并运行以下命令直接安装：
- en: '[PRE2]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Getting ready](img/image00624.jpeg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00624.jpeg)'
- en: To authenticate with TFS, the `tfx-cli` utility only accepts **Personal Access
    Tokens** (**PAT**) or alternate credentials. Since support for PATs is yet to
    be released in TFS, alternate credentials need to be used for authentication.
    Guidance on how to set up alternate credentials can be found at [https://github.com/Microsoft/tfs-cli/blob/master/docs/configureBasicAuth.md](https://github.com/Microsoft/tfs-cli/blob/master/docs/configureBasicAuth.md).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 要与 TFS 进行身份验证，`tfx-cli` 工具仅接受 **个人访问令牌**（**PAT**）或备用凭据。由于 TFS 尚未发布对 PAT 的支持，因此需要使用备用凭据进行身份验证。有关如何设置备用凭据的指导，请参见
    [https://github.com/Microsoft/tfs-cli/blob/master/docs/configureBasicAuth.md](https://github.com/Microsoft/tfs-cli/blob/master/docs/configureBasicAuth.md)。
- en: 'The following screenshot illustrates how to authenticate with `tfx-cli` by
    passing the connection details of the Team Project Collection along with alternate
    credentials:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图演示了如何通过传递团队项目集的连接详情以及备用凭据来使用 `tfx-cli` 进行身份验证：
- en: '![Getting ready](img/image00625.jpeg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00625.jpeg)'
- en: 'To validate that you have performed the setup correctly, try retrieving a list
    of build tasks by running the command `tfx build tasks list`:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证你是否正确完成了设置，可以通过运行命令 `tfx build tasks list` 来尝试获取构建任务列表：
- en: '![Getting ready](img/image00626.jpeg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00626.jpeg)'
- en: How to do it...
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To create a new task, run the command `tfx build tasks create`, shown as follows:![How
    to do it...](img/image00627.jpeg)
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建新任务，运行命令 `tfx build tasks create`，如下所示：![如何操作...](img/image00627.jpeg)
- en: 'A template task is downloaded to the working folder that is ready for you to
    start editing:'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个模板任务已下载到工作文件夹，准备好供你开始编辑：
- en: '![How to do it...](img/image00628.jpeg)'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00628.jpeg)'
- en: To upload this task to the library, run `tfx build tasks upload.\MyTask`:![How
    to do it...](img/image00629.jpeg)
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将此任务上传到库中，请运行 `tfx build tasks upload.\MyTask`：![如何操作...](img/image00629.jpeg)
- en: Navigate to the FabrikamTFVC CI build definition and click on **Edit** to edit
    the build definition. Select the newly added **MyTask** which shows up in the
    task list under the **Utility** section. Include this task in the definition by
    clicking **Add**:![How to do it...](img/image00630.jpeg)
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 FabrikamTFVC CI 构建定义，点击 **编辑** 来编辑构建定义。在任务列表中选择新添加的 **MyTask**，它会显示在 **Utility**
    部分下。点击 **添加** 将此任务包含在定义中：![如何操作...](img/image00630.jpeg)
- en: Update the message in the **Message** textbox and save the changes. Queue a
    new build:![How to do it...](img/image00631.jpeg)
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 **消息** 文本框中的消息并保存更改。排队一个新构建：![如何操作...](img/image00631.jpeg)
- en: 'The build successfully runs **MyTask** and prints the message `Hurray! My First
    Build Task...` in the console output:'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建成功运行 **MyTask**，并在控制台输出中打印消息 `Hurray! My First Build Task...`：
- en: '![How to do it...](img/image00632.jpeg)'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00632.jpeg)'
- en: How it works...
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'On running the `create new task` command, a set of template files are downloaded.
    The `task.json` file contains metadata about the task. As illustrated in the following
    screenshot, the file contains task metadata, agent dependencies, task specific
    properties, and output behavior. For example, if the default category is `utility`,
    the category that the build task gets uploaded to can be amended by changing the
    value of the category:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `create new task` 命令时，一组模板文件会被下载。`task.json` 文件包含有关任务的元数据。如以下截图所示，该文件包含任务元数据、代理依赖关系、任务特定属性和输出行为。例如，如果默认类别是
    `utility`，则可以通过更改类别的值来修改构建任务上传到的类别：
- en: '![How it works...](img/image00633.jpeg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image00633.jpeg)'
- en: 'The other files also have their significance:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 其他文件也有其重要意义：
- en: The `sample.ps1` file contains the PowerShell build task logic that is executed
    when running on a Windows agent
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample.ps1` 文件包含在 Windows 代理上运行时执行的 PowerShell 构建任务逻辑。'
- en: The `sample.js` file contains the JavaScript build task logic that is executed
    when running on a cross-platform agent (e.g. OS X or Linux)
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample.js` 文件包含在跨平台代理（如 OS X 或 Linux）上运行时执行的 JavaScript 构建任务逻辑。'
- en: The `icon.png` file is a default icon and should be replaced with a custom 32×32
    PNG file with transparencies set appropriately
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`icon.png` 文件是默认图标，应替换为具有透明背景的自定义 32×32 PNG 文件。'
- en: If you are looking for inspiration, all existing out-of-the-box tasks are open
    source and can directly be enhanced with contributions on GitHub at [https://github.com/Microsoft/vso-agent-tasks](https://github.com/Microsoft/vso-agent-tasks).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在寻找灵感，所有现有的现成任务都是开源的，可以直接通过 GitHub 上的贡献进行增强，链接在此：[https://github.com/Microsoft/vso-agent-tasks](https://github.com/Microsoft/vso-agent-tasks)。
- en: Integrating SonarQube with TFBuild to manage technical debt
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 SonarQube 与 TFBuild 集成以管理技术债务
- en: Technical debt can be classified as the measure between the current state and
    an optimal state of codebases. Technical debt saps productivity by making code
    hard to understand, easy to break, difficult to validate, and in turn, creating
    unplanned work ultimately blocking the progress. Technical debt is inevitable!
    It starts small and grows overtime through rushed changes and lack of context
    and discipline. Organizations often find that more than 50% of their capacity
    is sapped by technical debt. As discussed in [Chapter 2](part0027.xhtml#aid-PNV62
    "Chapter 2. Setting Up and Managing Code Repositories"), *Setting Up and Managing
    Code Repositories*, the biggest challenge is in identifying and managing Technical
    Debt. SonarQube is an open source platform that is the de facto solution for understanding
    and managing technical debt. In this recipe, you'll learn how to integrate with
    SonarQube using TFBuild to analyze .NET-based applications.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务可以被定义为当前状态与代码库最佳状态之间的差距。技术债务通过使代码难以理解、易于破坏、难以验证，进而产生计划外的工作，最终阻碍进展，从而消耗生产力。技术债务是不可避免的！它起初微小，并随着仓促的更改以及缺乏上下文和纪律而逐渐增长。组织通常发现，他们的超过
    50% 的能力都被技术债务所消耗。如 [第 2 章](part0027.xhtml#aid-PNV62 "第 2 章：设置和管理代码库")《设置和管理代码库》中所讨论的，最大的问题是识别和管理技术债务。SonarQube
    是一个开源平台，是理解和管理技术债务的事实标准解决方案。在本教程中，你将学习如何通过 TFBuild 集成 SonarQube 来分析基于 .NET 的应用程序。
- en: Getting ready
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: SonarQube is an open platform for managing code quality. As such, it covers
    the seven axes of code quality as illustrated in the following image. Originally
    famous in the Java community, SonarQube now supports over 20 programming languages.
    The joint investments made by Microsoft and SonarSource make SonarQube easier
    to integrate with TFBuild and better at analyzing .NET-based applications. You
    can read more about the capabilities offered by SonarQube at [http://www.sonarqube.org/resources/](http://www.sonarqube.org/resources/).
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: SonarQube 是一个用于管理代码质量的开放平台。因此，它涵盖了代码质量的七个维度，如下图所示。SonarQube 最初在 Java 社区中非常有名，现在已经支持超过
    20 种编程语言。微软和 SonarSource 的联合投资使得 SonarQube 更容易与 TFBuild 集成，并且在分析基于 .NET 的应用程序方面表现更好。你可以在
    [http://www.sonarqube.org/resources/](http://www.sonarqube.org/resources/) 阅读更多关于
    SonarQube 提供的功能。
- en: '![Getting ready](img/image00634.jpeg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00634.jpeg)'
- en: In this recipe, we'll analyze the technical debt in the FabrikamTFVC codebase
    using SonarQube. If you don't already have an instance of SonarQube, then set
    one up by following the instructions at [https://github.com/SonarSource/sonar-.net-documentation/blob/master/doc/installation-and-configuration.md](https://github.com/SonarSource/sonar-.net-documentation/blob/master/doc/installation-and-configuration.md).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 SonarQube 分析 FabrikamTFVC 代码库中的技术债务。如果你还没有 SonarQube 实例，可以通过访问 [https://github.com/SonarSource/sonar-.net-documentation/blob/master/doc/installation-and-configuration.md](https://github.com/SonarSource/sonar-.net-documentation/blob/master/doc/installation-and-configuration.md)
    按照说明进行设置。
- en: 'To work through this recipe, you''ll need the Sonar database connection string
    and user account details to connect to SonarQube from TFBuild. This recipe uses
    the single server setup described in the installation and configuration link shared
    earlier:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，你需要 Sonar 数据库连接字符串和用户帐户详细信息，以便从 TFBuild 连接到 SonarQube。本教程使用了前面提到的安装和配置链接中描述的单服务器设置：
- en: '[PRE3]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it…
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行…
- en: Navigate to the FabrikamTFVC CI build definition by browsing to the **Build**
    hub in FabrikamTFVC Team Portal. Click on the **Edit** hyperlink to start editing
    the FabrikamTFVC CI build definition.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览到 FabrikamTFVC 团队门户中的 **Build** 核心，导航到 FabrikamTFVC CI 构建定义。点击 **Edit**
    超链接开始编辑 FabrikamTFVC CI 构建定义。
- en: Add a new task by clicking on **Add Build** step. From the **Build** category,
    choose **SonarQube for MSBuild - Begin Analysis** and **SonarQube for MSBuild
    - End Analysis**:![How to do it…](img/image00635.jpeg)
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**添加构建**步骤来添加新任务。在**构建**类别中，选择**SonarQube for MSBuild - 开始分析**和**SonarQube
    for MSBuild - 结束分析**：![如何操作…](img/image00635.jpeg)
- en: Organize the begin analysis task before the Visual Studio Build task and the
    end analysis task after all the code build and test tasks have been executed:![How
    to do it…](img/image00636.jpeg)
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 构建任务之前组织开始分析任务，并在所有代码构建和测试任务执行完毕后组织结束分析任务：![如何操作…](img/image00636.jpeg)
- en: In the **SonarQube Begin Analysis** task, specify the connection details of
    your SonarQube instance. The SonarQube endpoint needs to be mapped and added through
    the endpoint manager as illustrated here:![How to do it…](img/image00637.jpeg)
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**SonarQube 开始分析**任务中，指定 SonarQube 实例的连接详细信息。SonarQube 端点需要通过端点管理器进行映射和添加，如下所示：![如何操作…](img/image00637.jpeg)
- en: Endpoints provide a role-based access control model similar to the build permission
    model. Users and groups can directly be set up for endpoint administration and
    consumption through this access control model:![How to do it…](img/image00638.jpeg)
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端点提供了类似于构建权限模型的基于角色的访问控制模型。用户和组可以通过此访问控制模型直接设置端点的管理和使用：![如何操作…](img/image00638.jpeg)
- en: Select the SonarQube service endpoint and update the database settings:![How
    to do it…](img/image00639.jpeg)
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 SonarQube 服务端点并更新数据库设置：![如何操作…](img/image00639.jpeg)
- en: Update the project settings as illustrated here:![How to do it…](img/image00640.jpeg)
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新项目设置，如下所示：![如何操作…](img/image00640.jpeg)
- en: Save the changes to the build definition and queue a new build. Using the information
    in the **SonarQube Start Analysis** task, the build agent will connect to the
    SonarQube instance. It will process the code using the Sonar MSBuild runner performing
    .NET and JavaScript code analysis, code clone analysis, code coverage analysis,
    and calculating the metrics for .NET and JavaScript. These results will be published
    by the **SonarQube End Analysis** task:![How to do it…](img/image00641.jpeg)
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存构建定义的更改并排队一个新构建。使用**SonarQube 开始分析**任务中的信息，构建代理将连接到 SonarQube 实例。它将使用 Sonar
    MSBuild 运行器处理代码，执行 .NET 和 JavaScript 代码分析、代码克隆分析、代码覆盖分析，并计算 .NET 和 JavaScript
    的度量标准。这些结果将由**SonarQube 结束分析**任务发布：![如何操作…](img/image00641.jpeg)
- en: How it works…
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The SonarQubeMSBuild runner is used to invoke the SonarQube analysis from TFBuild.
    Let''s see the results of the code analysis performed by the runner. Navigate
    to the SonarQube Dashboard by browsing to `http://localhost:9000/`. The home page
    shows the **Fabrikam CallCenter (Main)** project as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: SonarQubeMSBuild 运行器用于从 TFBuild 调用 SonarQube 分析。让我们查看运行器执行的代码分析结果。通过浏览`http://localhost:9000/`进入
    SonarQube 仪表盘。主页显示**Fabrikam CallCenter (Main)** 项目，如下所示：
- en: '![How it works…](img/image00642.jpeg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00642.jpeg)'
- en: 'By drilling into the Dashboard for the **Fabrikam CallCenter (Main)** project,
    you can see high-level metrics around various analyses:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 通过钻取**Fabrikam CallCenter (Main)** 项目的仪表盘，你可以看到各种分析的高级度量：
- en: '![How it works…](img/image00643.jpeg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00643.jpeg)'
- en: The dashboard gives you a high-level summary of analysis of code, complexity,
    duplications, unit test coverage, and debt analysis
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表盘为你提供代码、复杂性、重复、单元测试覆盖率和债务分析的高级总结
- en: 'The issues section displays a complete list of issues found across the codebase
    using the .NET code analysis ruleset. The issues can be tracked, suppressed, assigned,
    and planned for releases right from within this view:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 问题部分显示了使用 .NET 代码分析规则集在代码库中发现的所有问题的完整列表。可以在此视图中直接跟踪、抑制、分配问题并为发布计划做准备：
- en: '![How it works…](img/image00644.jpeg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00644.jpeg)'
- en: The issues section shows a list of issues identified in the codebase during
    the analysis
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 问题部分显示了在分析过程中识别出的代码库问题列表
- en: There's more…
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'The new build framework provides the ability to create custom variables. Variables
    provide the means to share common values across multiple fields in a build definition.
    Unlike values, variables can be dynamically updated during runtime. The framework
    also allows flagging a variable as secure, in which case its value is not displayed
    in the build definition not logged during the build execution. In this recipe,
    the SonarQube connection string and account details were passed directly in the
    build task. These values can instead be passed through using build variables as
    illustrated in the following screenshot:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 新的构建框架提供了创建自定义变量的功能。变量提供了一种方式，可以在构建定义中的多个字段之间共享公共值。与值不同，变量可以在运行时动态更新。该框架还允许将变量标记为安全，这样它的值就不会显示在构建定义中，也不会在构建执行时记录。在本教程中，SonarQube连接字符串和账户详情是直接传递给构建任务的。这些值也可以通过构建变量传递，如下图所示：
- en: '![There''s more…](img/image00645.jpeg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容…](img/image00645.jpeg)'
- en: Building GitHub code repositories with TFBuild
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TFBuild构建GitHub代码仓库
- en: The new build system offers seamless integration with GitHub. In this recipe,
    you'll learn how to use TFBuild to build a repository in GitHub.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 新的构建系统提供与GitHub的无缝集成。在本教程中，您将学习如何使用TFBuild来构建GitHub中的仓库。
- en: Getting ready
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't already have a GitHub repository, create one from [https://help.github.com/articles/create-a-repo](https://help.github.com/articles/create-a-repo).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有GitHub仓库，可以从[https://help.github.com/articles/create-a-repo](https://help.github.com/articles/create-a-repo)创建一个。
- en: For the walkthrough in this recipe, we'll be using the `VisualStudioGeeks` repository
    available at [https://github.com/visualstudiogeeks/](https://github.com/visualstudiogeeks/).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用位于[https://github.com/visualstudiogeeks/](https://github.com/visualstudiogeeks/)的`VisualStudioGeeks`仓库。
- en: How to do it...
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Log into the GitHub repository from your profile menu, navigate to **Settings**,
    and select **Personal access tokens**. Click on the **Generate new token** button
    to create a new personal access token:![How to do it...](img/image00646.jpeg)
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从个人资料菜单登录到GitHub仓库，导航到**设置**，然后选择**个人访问令牌**。点击**生成新令牌**按钮以创建新的个人访问令牌：![如何操作…](img/image00646.jpeg)
- en: Specify a name and select the access scope for the token. In order to trigger
    builds, the `admin:repo_hook` access level needs to be selected:![How to do it...](img/image00647.jpeg)
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定令牌名称并选择访问范围。为了触发构建，需要选择`admin:repo_hook`访问级别：![如何操作…](img/image00647.jpeg)
- en: Click on the **Generate token** button. Copy the access token and store it in
    a safe location. Note that you'll not be able to see this token again; should
    you lose it, you'll have to generate a new token:![How to do it...](img/image00648.jpeg)
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**生成令牌**按钮。复制访问令牌并将其保存在安全的位置。请注意，您将无法再次查看此令牌；如果丢失，必须重新生成一个新令牌：![如何操作…](img/image00648.jpeg)
- en: Navigate to the FabrikamTFVC Team Project and browse to the **Build** hub. Click
    on the **+** icon to create a new build definition. Select the Visual Studio Template,
    and click on **OK**. Save the build definition as `VisualStudioGeeks` CI.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到FabrikamTFVC团队项目并浏览到**构建**中心。点击**+**图标以创建新的构建定义。选择Visual Studio模板，然后点击**确定**。将构建定义保存为`VisualStudioGeeks`
    CI。
- en: Navigate to the **Repository** tab, and select **Repository type** to **External
    Git**. Enter the repository name, the URL of the repository, the username, and
    the personal access token to access this repository:![How to do it...](img/image00649.jpeg)
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**仓库**选项卡，并选择**仓库类型**为**外部Git**。输入仓库名称、仓库URL、用户名以及访问该仓库的个人访问令牌：![如何操作…](img/image00649.jpeg)
- en: From the **Triggers** tab, select the **Scheduled** option and specify the schedule
    for triggering the builds from this build definition. Save changes to this build
    definition and trigger a new build:![How to do it...](img/image00650.jpeg)
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**触发器**选项卡中，选择**计划**选项，并指定从此构建定义触发构建的计划。保存对此构建定义的更改并触发一个新构建：![如何操作…](img/image00650.jpeg)
- en: As illustrated in the previous screenshot, the `Build 20151020.5` successfully
    synchronizes the code from the repository `VisualStudioGeeks`.
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前图所示，`Build 20151020.5`成功地从仓库`VisualStudioGeeks`同步了代码。
- en: How it works...
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The personal token generated for the Visual Studio Geeks repository with scope
    `admin:repo_hook` provides full control over the repository hooks. This access
    permits the listener to subscribe to the commit event generated when the code
    changes are committed to the repository. While TFBuild provides the capability
    to build GitHub repositories in TFS 2015, it does not allow the continuous integration
    flow yet. As indicated in the TFS feature timeline, continuous integration build
    workflow is expected to be introduced in a future update of TFS 2015: [https://www.visualstudio.com/en-us/news/release-archive-vso.aspx](https://www.visualstudio.com/en-us/news/release-archive-vso.aspx).'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 为Visual Studio Geeks 仓库生成的个人令牌，具有 `admin:repo_hook` 范围，提供了对仓库钩子的完全控制权限。此访问权限允许监听器订阅代码更改提交到仓库时生成的提交事件。尽管TFBuild在TFS
    2015中提供了构建GitHub仓库的功能，但目前尚不支持持续集成流程。如TFS功能时间表所示，持续集成构建工作流预计将在TFS 2015的未来更新中引入：[https://www.visualstudio.com/en-us/news/release-archive-vso.aspx](https://www.visualstudio.com/en-us/news/release-archive-vso.aspx)。
