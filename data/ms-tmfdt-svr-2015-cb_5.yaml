- en: Chapter 5. Testing Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章：测试您的应用程序
- en: '|   | *"Walking on water and developing software from a specification are easy…If
    both are frozen!"* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *“在水面上行走和从规范中开发软件很容易……如果两者都被冻结！”* |   |'
- en: '|   | --*Edward Berard* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Edward Berard* |'
- en: 'In this chapter, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Running NUnit tests in the CI Pipeline using TFBuild
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CI 流水线中使用 TFBuild 运行 NUnit 测试
- en: Creating and setting up a Machine Group
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和设置机器组
- en: Deploying a test agent through the TFBuild task
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 TFBuild 任务部署测试代理
- en: Distributing test execution on a Lab Machine Group
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实验室机器组中分发测试执行
- en: Triggering Selenium Web Tests on a Selenium Test Grid using TFBuild
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TFBuild 在 Selenium 测试网格上触发 Selenium Web 测试
- en: Integrating the Cloud Load Testing Service in TFBuild
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 TFBuild 中集成云负载测试服务
- en: Analyzing test execution results from the Runs view
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从运行视图分析测试执行结果
- en: Exporting and importing test cases in Excel from TFS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 TFS 导出和导入 Excel 中的测试用例
- en: Copying and cloning test suites and test cases
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制和克隆测试套件和测试用例
- en: Exporting test artifacts and test results from the test hub
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从测试中心导出测试工件和测试结果
- en: Charting testing status on Dashboards in Team Portal
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Team Portal 的仪表板上绘制测试状态图表
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Software teams are constantly under pressure to deliver more… faster. End users
    expect software to simply work. Low quality software just isn't acceptable. But,
    you may ask what the right level of quality is? Quality is a very subjective term;
    it is therefore important for Teams to agree to a definition of quality for their
    software. Teams that are unable to define quality usually end up testing for coverage
    rather than testing for quality.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 软件团队时刻面临着交付更多、更快的压力。最终用户期望软件能正常工作。低质量的软件是不可接受的。但你可能会问，什么才是正确的质量标准呢？质量是一个非常主观的概念；因此，团队需要就其软件的质量标准达成一致。无法定义质量的团队通常会以覆盖率为测试目标，而非关注质量本身。
- en: 'The toolkit in Team Foundation Server provides tooling for both manual and
    automation testing. **Microsoft Test Manager** (**MTM**), first introduced with
    TFS 2010, enables testers to plan, track, and run manual, exploratory, and automated
    tests. While Test Manager fully integrates with TFS, it does not offer any integration
    with other testing platforms. The Test Manager architecture does not lend itself
    to extensibility. Microsoft has ambitions to support every developer and every
    app; however, it isn''t possible with tooling that can''t be run on non-window
    platforms. The test tooling is gradually moving out from the Test Manager client
    into the web-based Team Web Portal to enable extensibility, cross-platform availability,
    and integration with other testing platforms. The following screenshot provides
    a comparison of testing features already in test hub, those that will gradually
    move, and those that will remain in MTM. For a full comparison of all the features,
    download `Microsoft Test Manager Vs Test Hub Feature Comparison.png` from the
    course material:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Team Foundation Server 中的工具包提供了手动和自动化测试的工具。**Microsoft Test Manager**（**MTM**），首次在
    TFS 2010 中引入，使测试人员能够计划、跟踪和运行手动、探索性以及自动化测试。尽管 Test Manager 与 TFS 完全集成，但它并未与其他测试平台进行集成。Test
    Manager 的架构不支持扩展性。微软有支持每个开发者和每个应用的宏大目标；然而，无法在非 Windows 平台上运行的工具无法实现这一目标。测试工具正在逐步从
    Test Manager 客户端迁移到基于 Web 的 Team Web Portal，以实现扩展性、跨平台可用性和与其他测试平台的集成。以下截图展示了测试中心中已经具备的测试功能、将逐步迁移的功能以及将保留在
    MTM 中的功能。要查看所有功能的完整比较，请从课程材料中下载 `Microsoft Test Manager Vs Test Hub Feature Comparison.png`：
- en: '![Introduction](img/image00651.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00651.jpeg)'
- en: To speed up the software delivery loop, software testing needs to be incorporated
    into the **Continuous Integration** (**CI**) Pipeline. In order to do this, software
    testing needs to shift left in the development processes. **Test-driven development**
    (**TDD**) enables developers to write code that's maintainable, flexible, and
    easily extensible. Code backed by unit tests helps identify change impact and
    empowers developers to make changes confidently. In addition to this, functional
    testing needs to be automated. This enables software testers to focus on high-value
    exploratory testing rather than just coverage of test matrix.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快软件交付周期，软件测试需要融入到**持续集成**（**CI**）流水线中。为此，软件测试需要在开发过程中向左移动。**测试驱动开发**（**TDD**）使得开发人员能够编写可维护、灵活且易于扩展的代码。由单元测试支持的代码有助于识别变更的影响，并使开发人员能够自信地进行修改。除此之外，功能测试需要实现自动化。这使得软件测试人员能够专注于高价值的探索性测试，而不仅仅是覆盖测试矩阵。
- en: 'The DevOps movement at large supports bringing testing into the CI Pipeline.
    The tooling in TFS has evolved to enable this. The pre 2015 version of TFS shipped
    with a separate test controller and test agent, with the introduction of the new
    build framework in TFS 2015 test runner has been distilled down to a task in the
    build definition. TFS now provides a task based open and extensible build framework
    that allows you to pick not only a build framework of your choice, but also provides
    you full autonomy to pick and assemble the test frameworks of your choice too.
    The new build system enables the agent to be a generic task orchestrator. The
    agent is capable of executing the entire CI Pipeline. This new approach removes
    the need for managing multiple single purpose agents. This takes away the friction
    from the setup process and enables a scale up option without the need for tedious
    configuration. This also enables integrating other testing frameworks and platforms
    into the same pipeline:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps运动整体上支持将测试引入CI管道。TFS中的工具已发展到支持这一点。2015年之前的TFS版本配有独立的测试控制器和测试代理，而在TFS 2015中引入的新构建框架将测试运行器简化为构建定义中的一个任务。TFS现在提供基于任务的开放和可扩展构建框架，不仅允许你选择自己喜欢的构建框架，还可以完全自主选择并组合你喜欢的测试框架。新的构建系统使代理成为一个通用的任务协调器，代理能够执行整个CI管道。这种新方法消除了管理多个单一用途代理的需求，减少了设置过程中的摩擦，并在无需繁琐配置的情况下提供了扩展选项。这还使得将其他测试框架和平台集成到同一管道中成为可能：
- en: '![Introduction](img/image00652.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00652.jpeg)'
- en: Through the recipes in this chapter, you'll learn how to leverage tasks in the
    build definition to provision test agents on demand, perform a distributed test
    execution that includes a large number of diverse automated tests such as unit,
    functional UI, Selenium and, coded UI on remote Machine Groups. We'll also look
    at integrating with Visual Studio Team Systems to run cloud load tests. Last but
    not least, we will look at the rich test reports and test result analysis from
    the test executions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章中的教程，你将学习如何利用构建定义中的任务按需配置测试代理，执行分布式测试，涵盖大量不同的自动化测试，如单元测试、功能性UI测试、Selenium测试和远程机器组上的编码UI测试。我们还将探讨如何与Visual
    Studio Team Systems集成，运行云负载测试。最后，我们将查看来自测试执行的丰富测试报告和测试结果分析。
- en: Look at the richness of testing features within the bigger DevOps capabilities
    available in TFS; should you decide to move from your existing Test Case Management
    Solutions to the Microsoft Test Manager, you may wonder what the possibilities
    for migration are. We'll briefly cover a few tools that are available today to
    help you with the migration. In the end, we'll look at how to export and visualize
    test execution results with the help of light weight charts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 观察TFS中更大范围的DevOps能力所提供的丰富测试功能；如果你决定从现有的测试用例管理解决方案迁移到Microsoft Test Manager，你可能会想知道迁移的可能性。我们将简要介绍几种今天可用的工具，帮助你完成迁移。最后，我们将探讨如何借助轻量级图表导出并可视化测试执行结果。
- en: Along with providing world-class tooling for manual and automation testers,
    TFS also provides rich, integrated test tooling to stakeholders. The web-based
    testing extension allows you to perform exploratory testing of your web or mobile
    application right from the browser on any platform (Windows, Mac, or Linux). Your
    stakeholders now do not need to follow predefined test cases or test steps. Stakeholders
    can capture and annotate screenshots, log bugs, and share notes. The testing session
    records and logs every step providing developers rich action logs for diagnosing
    application and user experience issues. Read more on this at [http://bit.ly/1I82pfK](http://bit.ly/1I82pfK).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为手动和自动化测试人员提供世界级的工具外，TFS还为利益相关者提供了丰富的集成测试工具。基于Web的测试扩展允许你直接从浏览器中对Web或移动应用程序进行探索性测试，支持任何平台（Windows、Mac或Linux）。你的利益相关者现在无需遵循预定义的测试用例或测试步骤。利益相关者可以捕捉并注释截图、记录Bug并共享笔记。测试会话记录并记录每一步，为开发人员提供丰富的操作日志，用于诊断应用程序和用户体验问题。阅读更多内容，请访问[http://bit.ly/1I82pfK](http://bit.ly/1I82pfK)。
- en: These investments are taking the testing tooling from good to great. It is a
    very exciting time to be in the testing space!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些投资正在将测试工具从优秀提升到卓越。现在正是测试领域一个令人兴奋的时刻！
- en: Running NUnit tests in the CI Pipeline using TFBuild
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CI管道中使用TFBuild运行NUnit测试
- en: Traditionally, developers using the NUnit framework had to install the NUnit
    Test Adapter on the build machines. While this approach worked if you were dealing
    with a small number of build servers, it quickly became tedious when dealing with
    large number of build servers. An alternative to installing the NUnit adapter
    was to inject the NUnit adapter DLLs to the build machines using the custom assembly
    field available in the build controller properties. While this worked with TFVC-based
    repositories, there were challenges using this approach for Git-based repositories.
    This is a classic example of configuration hell when using non-Microsoft testing
    frameworks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，使用 NUnit 框架的开发人员需要在构建机器上安装 NUnit 测试适配器。如果构建服务器数量较少，这种方法是可行的，但当构建服务器数量较多时，就会变得非常繁琐。除了安装
    NUnit 适配器，还可以通过在构建控制器属性中使用自定义程序集字段，将 NUnit 适配器的 DLL 注入到构建机器中。这种方法在基于 TFVC 的代码库中有效，但在使用
    Git 仓库时会遇到一些挑战。这是使用非 Microsoft 测试框架时常见的配置地狱的例子。
- en: The new build framework makes running non-Microsoft unit test frameworks completely
    configuration free. In this recipe, you'll learn how to use the Visual Studio
    Test task in the build definition to run NUnit tests or generally any non-Microsoft
    unit testing frameworks.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 新的构建框架使得运行非 Microsoft 单元测试框架变得完全无需配置。在这个食谱中，你将学习如何在构建定义中使用 Visual Studio 测试任务来运行
    NUnit 测试，或者一般地运行任何非 Microsoft 单元测试框架。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to create a build definition, you'll need to be a member of the Project
    Build Administrator Group.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建构建定义，你需要是项目构建管理员组的成员。
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Launch Team Explorer and connect to the FarbikamTFVC Team Project. From the
    Source Control Explorer, open the `FabrikamFiber.CallCenter.sln` in Visual Studio:![How
    to do it...](img/image00653.jpeg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Team Explorer 并连接到 FarbikamTFVC 团队项目。从源代码管理资源管理器中，打开 `FabrikamFiber.CallCenter.sln`
    文件：![如何操作...](img/image00653.jpeg)
- en: Follow the instructions at [http://bit.ly/1XgG0UG](http://bit.ly/1XgG0UG) to
    create a new NUnit test project. Call the project `FabrikamFiber.Web.NUnit.Tests.csproj`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照[http://bit.ly/1XgG0UG](http://bit.ly/1XgG0UG)的说明创建一个新的 NUnit 测试项目。将项目命名为
    `FabrikamFiber.Web.NUnit.Tests.csproj`。
- en: Right-click on the `FabrikamFiber.Web.NUnit.Tests.csproj` project and select
    **Manage NuGet Packages...** from the context menu:![How to do it...](img/image00654.jpeg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `FabrikamFiber.Web.NUnit.Tests.csproj` 项目，从上下文菜单中选择 **管理 NuGet 包...**：![如何操作...](img/image00654.jpeg)
- en: From the NuGet package manager, search and install the NUnit test adapter.![How
    to do it...](img/image00655.jpeg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 NuGet 包管理器中搜索并安装 NUnit 测试适配器。![如何操作...](img/image00655.jpeg)
- en: Open the folder location of the solution and you'll notice that the `NUnitTestAdapter
    NuGet` package has been added under the packages folder:![How to do it...](img/image00656.jpeg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开解决方案的文件夹位置，你会注意到 `NUnitTestAdapter NuGet` 包已经添加到包文件夹中：![如何操作...](img/image00656.jpeg)
- en: Check in the code changes from the **Pending Changes** view in Team Explorer:![How
    to do it...](img/image00657.jpeg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Team Explorer 的 **待处理更改** 视图中检查代码更改：![如何操作...](img/image00657.jpeg)
- en: In the FabrikamTFVC Team Web Portal, navigate to the **BUILD** hub and click
    on the **+** icon to add a new build definition. Create it using Visual Studio
    Build Template:![How to do it...](img/image00658.jpeg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 FabrikamTFVC 团队 Web 门户中，导航到 **BUILD** 中心，点击 **+** 图标以添加一个新的构建定义。使用 Visual
    Studio 构建模板创建：![如何操作...](img/image00658.jpeg)
- en: In the Visual Studio Build Task, ensure that the **Restore NuGet Packages**
    flag is checked. You don't need to make any other changes in the build or test
    task. Ensure that the code repository is mapped as FabrikamTFVC in the repository
    tab. Save the build definition as `FabrikamTFVC NUnit CI`. You can learn more
    about setting up a build definition in the *Creating a continuous integration
    build definition in TFBuild* recipe in [Chapter 4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building
    Your Application"), *Building Your Application*.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 构建任务中，确保选中 **恢复 NuGet 包** 标志。你无需在构建或测试任务中做任何其他更改。确保代码仓库在仓库标签页中映射为
    FabrikamTFVC。将构建定义保存为 `FabrikamTFVC NUnit CI`。你可以在 *TFBuild 中创建持续集成构建定义* 这一食谱中，详细了解如何设置构建定义，[第
    4 章](part0050.xhtml#aid-1FLS42 "第 4 章. 构建你的应用")，*构建你的应用*。
- en: Queue a build. Once the build completes, you will see a summary of the test
    results in the build summary section. The build successfully executes all NUnit
    tests without any manual configuration specific to NUnit:![How to do it...](img/image00659.jpeg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排队构建。构建完成后，你将在构建摘要部分看到测试结果的摘要。构建成功执行了所有 NUnit 测试，且无需针对 NUnit 进行任何手动配置：![操作步骤...](img/image00659.jpeg)
- en: How it works
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'Let''s now understand how TFBuild manages to identify the test runner for NUnit
    tests. Open the FabrikamTFVC NUnit CI build definition. In the **Advanced** section
    of the Visual Studio Test task, you''ll see a field for specifying the path to
    custom adapters:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来了解一下 TFBuild 如何识别 NUnit 测试的测试运行器。打开 FabrikamTFVC 的 NUnit CI 构建定义。在 Visual
    Studio 测试任务的 **高级** 部分，你会看到一个用于指定自定义适配器路径的字段：
- en: '![How it works](img/image00660.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理](img/image00660.jpeg)'
- en: With the restore NuGet packages flag checked in the Visual Studio Build task,
    all NuGet packages that the solution has dependency on are downloaded into the
    agent's working directory. The Visual Studio Test task scans the agent working
    directory for all test adapter packages. In this instance, the NUnit Test Adapter
    NuGet package was checked into source control. The package would have been restored
    into the agent working directory during the package restore process; as a result
    the Visual Studio Test task loaded up the NUnit Test Adapter during the scan.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 构建任务中选中恢复 NuGet 包标志后，解决方案依赖的所有 NuGet 包将被下载到代理的工作目录中。Visual Studio
    测试任务会扫描代理的工作目录，查找所有的测试适配器包。在这个例子中，NUnit 测试适配器的 NuGet 包已提交到源代码管理中。在包恢复过程中，这个包会被恢复到代理的工作目录中；因此，Visual
    Studio 测试任务在扫描时加载了 NUnit 测试适配器。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: TFBuild publishes the test and coverage results into TFS independent of the
    testing framework used. This is automatically handled by the TFBuild framework.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: TFBuild 将测试和覆盖率结果发布到 TFS，无论使用的测试框架是什么。这一过程由 TFBuild 框架自动处理。
- en: This approach scales really well, as you add more machines to carry out testing,
    you do not need to worry about manually adding the NUnit Test Adapter on the test
    machines. This also simplifies upgrading test adapters. The test task can load
    multiple versions of one test adapter and use the adapter referenced by the unit
    tests.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法非常适合扩展，因为随着你增加更多机器进行测试，不需要担心手动将 NUnit 测试适配器添加到测试机器上。这也简化了测试适配器的升级。测试任务可以加载一个测试适配器的多个版本，并使用单元测试引用的适配器。
- en: 'The **Path to Custom Test Adapters** field wasn''t really put to use in this
    case. However, this field is useful for specifying the test adapter path if your
    solution uses a unit test framework that does not have a NuGet package associated
    with it. The path to the test adapter needs to be constructed using the build
    agent''s source directory variable. The `Build.SourceDirectory` variable points
    to the directory in the build agent where the source code has been synced. If
    your custom test adapter was in the `$\FabrikamTFVC\myAdapters` folder, you would
    need to specify the path: `$(Build.SourcesDirectory)\src\myAdapters\TestAdapter.1.2`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义测试适配器路径**字段在这种情况下并未实际使用。然而，如果你的解决方案使用的单元测试框架没有关联的 NuGet 包，那么这个字段非常有用，用于指定测试适配器的路径。测试适配器的路径需要通过构建代理的源目录变量来构建。`Build.SourceDirectory`
    变量指向构建代理中源代码已同步的目录。如果你的自定义测试适配器位于 `$\FabrikamTFVC\myAdapters` 文件夹中，你需要指定路径：`$(Build.SourcesDirectory)\src\myAdapters\TestAdapter.1.2`。'
- en: Creating and setting up a Machine Group
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和设置机器组
- en: Simply put, Machine Group is a logical grouping of machines. The Machine Group
    holds metadata, connectivity, and login details of the machines in the group.
    Machine Group can directly be referenced from build and release definitions. In
    this recipe, you'll learn how to create and set up a Machine Group.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，机器组是机器的逻辑分组。机器组保存了组内机器的元数据、连接信息和登录详细信息。机器组可以直接在构建和发布定义中引用。在这个教程中，你将学习如何创建和设置机器组。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Scenario: The FabrikamTFVC Team has a lab environment in the `Fabrikam.lab`
    domain. `Fabrikam.lab` comprises of five servers that serve different roles. The
    FabrikamTFVC Team wants the ability to directly reference these machines from
    the build definition and release definition to deploy test agents on all the machines
    and trigger a distributed test run. `Fabrikam.Lab` is managed by the Fabrikam
    Environments Team who cannot share environment credentials with the FabrikamTFVC
    Team. In this recipe, we''ll walk through the process followed by the Fabrikam
    Environments Team to set up and configure the Machine Group `Fabrikam-QA` for
    the FabrikamTFVC Team:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamTFVC 团队在 `Fabrikam.lab` 域中有一个实验环境。`Fabrikam.lab` 包括五台具有不同角色的服务器。FabrikamTFVC
    团队希望能够直接从构建定义和发布定义中引用这些机器，以便在所有机器上部署测试代理并触发分布式测试运行。`Fabrikam.Lab` 由 Fabrikam 环境团队管理，后者不能与
    FabrikamTFVC 团队共享环境凭据。在本食谱中，我们将演示 Fabrikam 环境团队为 FabrikamTFVC 团队设置和配置机器组 `Fabrikam-QA`
    的过程：
- en: '![Getting ready](img/image00661.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00661.jpeg)'
- en: 'The Machine Group will be accessed by a remote host; the remote host will likely
    be playing the role of a build agent or release agent. As illustrated in the following
    figure, the remote host is in the same network as the Machine Group and has a
    trust relationship with the Machine Group:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 机器组将被远程主机访问；远程主机很可能扮演构建代理或发布代理的角色。如以下图所示，远程主机与机器组处于同一网络，并与机器组建立了信任关系：
- en: '![Getting ready](img/image00662.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00662.jpeg)'
- en: The build agent uses Windows PowerShell remoting that requires the **Windows
    Remote Management** (**WinRM**) protocol to connect to the machines in the Machine
    Groups. WinRM needs to be enabled on a machine as a prerequisite before it can
    be added into the Machine Group. In this case, Kerberos will be used as the mode
    of authentication since the agent and Machine Group are in the same corp network.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 构建代理使用 Windows PowerShell 远程管理，这需要**Windows 远程管理**（**WinRM**）协议来连接到机器组中的机器。WinRM
    必须在机器上启用，才能作为前提条件将其添加到机器组中。在这种情况下，Kerberos 将作为认证模式使用，因为代理和机器组在同一企业网络中。
- en: '| **Target Machine state** | Target Machine trust with automation agent | Machine
    Identity | Auth Account | Auth Mode | Auth Account permission on target machine
    | Conn Type |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| **目标机器状态** | 目标机器与自动化代理的信任关系 | 机器身份 | 认证账户 | 认证模式 | 认证账户在目标机器上的权限 | 连接类型
    |'
- en: '| **Domain-joined machine in the corp network** | Trusted | DNS name | Domain
    account | Kerberos | Machine admin | WinRMHTTP |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **在企业网络中的域加入机器** | 受信任 | DNS 名称 | 域账户 | Kerberos | 机器管理员 | WinRMHTTP |'
- en: 'In the next few steps, we''ll walk through how to configure WinRM on a machine,
    and you''ll learn how to test connectivity through WinRM:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个步骤中，我们将演示如何在一台机器上配置 WinRM，并且你将学习如何通过 WinRM 测试连接性：
- en: PowerShell 2.0 and Windows Management Framework 4.0 ([http://bit.ly/1kNlxuW](http://bit.ly/1kNlxuW))
    are required to be installed on both the agent and machines in the Machine Group.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PowerShell 2.0 和 Windows 管理框架 4.0 ([http://bit.ly/1kNlxuW](http://bit.ly/1kNlxuW))
    需要在代理和机器组中的所有机器上安装。
- en: Log into the `QA-Web1.Farbikam.lab` machine, start Windows PowerShell as an
    administrator by right-clicking on the Windows PowerShell shortcut and selecting
    **Run as Administrator**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 `QA-Web1.Farbikam.lab` 机器，右键点击 Windows PowerShell 快捷方式并选择**以管理员身份运行**启动
    Windows PowerShell。
- en: 'By default, the WinRM service is configured for manual startup and stopped.
    Executing the `winrmquickconfig -q` command performs a series of actions:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，WinRM 服务配置为手动启动并已停止。执行 `winrmquickconfig -q` 命令会执行一系列操作：
- en: Starts the WinRM service.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 WinRM 服务。
- en: Sets the startup type on the WinRM service to **Automatic**.
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 WinRM 服务的启动类型设置为**自动**。
- en: Creates a listener to accept requests on any IP address.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个监听器，以便接受任何 IP 地址上的请求。
- en: Enables a firewall exception for WS-Management communications.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 WS-Management 通信启用防火墙例外。
- en: Registers the `Microsoft.PowerShell` and `Microsoft.PowerShell.Workflow` session
    configurations, if they are not already registered.
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未注册，注册 `Microsoft.PowerShell` 和 `Microsoft.PowerShell.Workflow` 会话配置。
- en: Registers the `Microsoft.PowerShell32` session configuration on 64-bit computers,
    if it is not already registered.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未注册，在 64 位计算机上注册 `Microsoft.PowerShell32` 会话配置。
- en: Enables all session configurations.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用所有会话配置。
- en: Changes the security descriptor of all session configurations to allow remote
    access.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改所有会话配置的安全描述符，以允许远程访问。
- en: Restarts the WinRM service to make the preceding changes effective.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启WinRM服务使前述更改生效。
- en: The next few commands will prepare WinRM for Kerberos authentication.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的几条命令将为WinRM准备Kerberos认证。
- en: 'Increase the maximum memory allocation per session:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增加每个会话的最大内存分配：
- en: '[PRE0]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, increase the session timeout period:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，增加会话超时时间：
- en: '[PRE1]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Allow the traffic between agent and Machine Group to be unencrypted:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许代理和机器组之间的流量不加密：
- en: '[PRE2]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Disable basic authentication:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用基本认证：
- en: '[PRE3]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Setup a firewall exception to allow inbound traffic on port `5985`; this is
    the default port used by WinRM when using HTTP:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置防火墙例外，允许端口`5985`的传入流量；这是WinRM在使用HTTP时的默认端口：
- en: '[PRE4]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Disable digest for client authentication:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用客户端认证的摘要：
- en: '[PRE5]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Set service authentication to use Kerberos:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置服务认证使用Kerberos：
- en: '[PRE6]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Trust all connections between agent and Machine Group:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信任代理和机器组之间的所有连接：
- en: '[PRE7]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Restart the `win-rm` service:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启`win-rm`服务：
- en: '[PRE8]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To ensure Kerberos authentication is enabled on WinRM, run the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保启用Kerberos认证，请运行以下命令：
- en: '[PRE9]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Getting ready](img/image00663.jpeg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![准备就绪](img/image00663.jpeg)'
- en: 'Now, let''s validate whether WinRM has correctly been set up on `QA-Web1.Fabrikam.lab`.
    Log into another VM in the lab, in this case `QA-Web2.Fabrikam.lab`. Launch PowerShell
    as an administrator by right-clicking on the Windows PowerShell shortcut and selecting
    **Run as administrator**. Execute the following command:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们验证是否在`QA-Web1.Fabrikam.lab`上正确设置了WinRM。登录到实验室中的另一台虚拟机，这里以`QA-Web2.Fabrikam.lab`为例。右键点击Windows
    PowerShell快捷方式并选择**以管理员身份运行**来启动PowerShell。执行以下命令：
- en: '[PRE10]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Getting ready](img/image00664.jpeg)'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![准备就绪](img/image00664.jpeg)'
- en: 'Execute the following command to check the port WinRM is listing on:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以检查WinRM监听的端口：
- en: '[PRE11]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Getting ready](img/image00665.jpeg)'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![准备就绪](img/image00665.jpeg)'
- en: Note
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Execute the following command should you want to change the port WinRM is currently
    configured to listen on:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想更改WinRM当前配置的监听端口，请执行以下命令：
- en: '[PRE12]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Most importantly, validate that you are able to invoke the Pssession on `QA-Web1.Fabrikam.lab`
    by manually running the following command from `QA-Web2.Fabrikam.lab`. Once you
    execute the first statement, you''ll receive a prompt to enter your credentials.
    Enter your domain account that has admin permissions:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最重要的是，验证你是否能够通过从`QA-Web2.Fabrikam.lab`手动运行以下命令来启动`QA-Web1.Fabrikam.lab`上的Pssession。一旦你执行第一条语句，你将被提示输入凭据。输入具有管理员权限的域账户：
- en: '[PRE13]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Executing the next command will use your domain account to connect to the destination
    server; DNS will be used to resolve the destination name:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行下一条命令将使用你的域账户连接到目标服务器；DNS将用于解析目标名称：
- en: '[PRE14]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Getting ready](img/image00666.jpeg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![准备就绪](img/image00666.jpeg)'
- en: Follow steps 1 to 5 to configure WinRM on other machines in the lab. Follow
    step 6 to validate WinRM connectivity before moving forward.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照步骤1到5在实验室中的其他机器上配置WinRM。按照步骤6验证WinRM连接性后再继续。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigating to the test hub in the FabrikamTFVC Team Web Portal, on the **Machines**
    page, click on the **+** icon to create a new Machine Group:![How to do it...](img/image00667.jpeg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入FabrikamTFVC团队Web门户的测试中心，在**机器**页面上，点击**+**图标创建一个新的机器组：![如何操作...](img/image00667.jpeg)
- en: Enter the details as illustrated in the following screenshot:![How to do it...](img/image00668.jpeg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下截图中的内容输入详细信息：![如何操作...](img/image00668.jpeg)
- en: The WinRM protocol in `Fabrikam.lab` will use HTTP since the remote machine
    has a trust relationship with `Fabrikam.lab.Add` and the details for all the machines.
    Now, click on **Done** to complete the setup:![How to do it...](img/image00669.jpeg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于远程机器与`Fabrikam.lab.Add`建立了信任关系，因此`Fabrikam.lab`中的WinRM协议将使用HTTP，并且所有机器的详细信息。现在，点击**完成**以完成设置：![如何操作...](img/image00669.jpeg)
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The Fabrikam-QA Machine Group setup uses a common administrator credentials
    for all machines in the Machine Group. It is alternatively possible to specify
    different credentials for the individual machines added in the Machine Group:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Fabrikam-QA机器组的设置为所有机器使用统一的管理员凭据。也可以为机器组中每台独立的机器指定不同的凭据：
- en: To enter credentials per machine, check the option **Use custom credentials
    for each machine along with global credentials**.![How it works...](img/image00670.jpeg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为每台机器输入凭据，请勾选**为每台机器使用自定义凭据并结合全局凭据**。![它是如何工作的...](img/image00670.jpeg)
- en: The password field is masked in the user interface. In addition to this, the
    value of this field is not printed in any of the log files either.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 密码字段在用户界面中被隐藏。此外，该字段的值也不会打印在任何日志文件中。
- en: The tags provide a great way to query for machines with in the Machine Group.
    For example, when using the test agent deployment task in build definition, you
    can specify a Machine Group and use Tags to filter the execution of the action
    on machines that include the Tag.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标签为查询机器提供了一个很好的方式。在构建定义中使用测试代理部署任务时，你可以指定机器组，并使用标签来过滤包含标签的机器执行操作。
- en: Machine Groups, at the moment, support limited scenarios mainly domain joined
    on premise machine and standalone machines in Azure. Refer to [http://bit.ly/1NFqYma](http://bit.ly/1NFqYma)
    for a full list of supported scenarios.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，机器组仅支持有限的场景，主要包括本地域加入的机器和 Azure 中的独立机器。请参考 [http://bit.ly/1NFqYma](http://bit.ly/1NFqYma)
    获取完整的支持场景列表。
- en: Deploying a test agent through the TFBuild task
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 TFBuild 任务部署测试代理
- en: In previous versions of TFS, the test controller and agent used to ship as separate
    installers. While the installers supported unattended installation, the configuration
    needed manual intervention. This limited the ability to scale out the test agents
    on demand. In TFS 2015, the test controller and agent do not ship as separate
    installers; instead, the capability offered by the test agent has been distilled
    into one build task. In this recipe, you'll learn how to deploy a test agent on
    multiple machines in a Machine Group.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TFS 的早期版本中，测试控制器和代理通常作为单独的安装程序发布。虽然这些安装程序支持无人值守安装，但配置过程需要人工干预。这限制了按需扩展测试代理的能力。在
    TFS 2015 中，测试控制器和代理不再作为单独的安装程序发布；相反，测试代理提供的功能已被简化为一个构建任务。在本教程中，你将学习如何在机器组中的多台机器上部署测试代理。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Scenario: The FabrikamTFVC Team has a dependency on the cucumber framework,
    since cucumber conflicts with the existing framework on the build agent, it cannot
    be installed on the build agent. The FabrikamTFVC Team instead wants the test
    agent to be deployed on the `QA-App1.Fabrikam.lab` server. This server is already
    part of the Fabrikam-QA Machine Group:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamTFVC 团队依赖于黄瓜框架（cucumber），由于黄瓜与构建代理上的现有框架存在冲突，无法在构建代理上安装。因此，FabrikamTFVC
    团队希望将测试代理部署到 `QA-App1.Fabrikam.lab` 服务器上。该服务器已经是 Fabrikam-QA 机器组的一部分：
- en: '![Getting ready](img/image00671.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00671.jpeg)'
- en: In this recipe, we'll be using the Fabrikam-QA Machine Group. If you don't already
    have Machine Group set up, follow the instructions in the recipe *Creating and
    setting up a Machine Group*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 Fabrikam-QA 机器组。如果你尚未设置机器组，请按照教程 *创建并设置机器组* 中的指示操作。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Navigating to the test hub in the FabrikamTFVC Team Web Portal, in the **Machine**
    page, edit the Fabrikam-QA Machine Group. Append the Tag `Framework: Cucumber`
    for the machine `QA-App1.Fabrikam.lab` and save.![How to do it...](img/image00672.jpeg)'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '导航到 FabrikamTFVC 团队网站中的测试中心，在 **机器** 页面中，编辑 Fabrikam-QA 机器组。为机器 `QA-App1.Fabrikam.lab`
    添加标签 `Framework: Cucumber` 并保存。![如何操作...](img/image00672.jpeg)'
- en: Navigate to the build hub and create a new build definition using the empty
    build template. Ensure that the code repository is mapped as FabrikamTFVC in the
    repository tab. Add the **Visual Studio Test Agent Deployment** task from the
    test section. The task comprises of three sections; configure the Fabrikam-QA
    Machine Group, select the machine by machine names or tags, and filter the machine
    using the Tag `Framework:Cucumber`:![How to do it...](img/image00673.jpeg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到构建中心，使用空构建模板创建一个新的构建定义。确保在代码仓库标签中将仓库映射为 FabrikamTFVC。然后从测试部分添加 **Visual Studio
    测试代理部署** 任务。该任务包括三个部分：配置 Fabrikam-QA 机器组、通过机器名称或标签选择机器，并使用标签 `Framework:Cucumber`
    过滤机器：![如何操作...](img/image00673.jpeg)
- en: The **Agent Configuration** section accepts the credentials and the test agent
    service will run under it once installed. Create a variable for the test agent
    username and the test agent password from the **Variables** tab. Add the variables
    to the **Agent Configuration** section. Check the **Interactive Process** option
    to run the agent as an interactive process. The agent is installed as a Windows
    service if it's not requested to be run as an interactive process:![How to do
    it...](img/image00674.jpeg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代理配置**部分接受凭据，并且一旦安装，测试代理服务将以此身份运行。从**变量**选项卡创建测试代理的用户名和密码变量。将变量添加到**代理配置**部分。选中**交互式进程**选项以将代理作为交互式进程运行。如果没有请求将其作为交互式进程运行，则代理将作为
    Windows 服务安装：![如何操作...](img/image00674.jpeg)'
- en: The **Advanced** section allows you to specify the location for the installer
    of the test agent. This is useful if you want to control the version of the agent
    getting installer. In the absence of a location, the latest version of the test
    agent is downloaded from the Internet. Check the option to enable data collection:![How
    to do it...](img/image00675.jpeg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**高级**部分允许你指定测试代理安装程序的位置。如果你想控制安装代理的版本，这非常有用。如果没有指定位置，将从 Internet 下载最新版本的测试代理。勾选启用数据收集选项：![如何操作...](img/image00675.jpeg)'
- en: Save the build definition as `FabrikamTFVC Agent Deployment`. Queue a new build
    from this build definition. Once the build is complete, navigate to the `QA-App1.Fabrikam.lab`
    server. The test agent has successfully been installed as a Windows service.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构建定义保存为`FabrikamTFVC Agent Deployment`。从该构建定义排队一个新构建。构建完成后，导航到 `QA-App1.Fabrikam.lab`
    服务器。测试代理已成功作为 Windows 服务安装。
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The build agent downloads the test agent installer from the Internet into a
    `temp` location. The installer is then pushed for installation into the remote
    `QA-App1.Fabrikam.lab` machine:![How it works...](img/image00676.jpeg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建代理从 Internet 下载测试代理安装程序到一个 `temp` 位置。然后将安装程序推送到远程 `QA-App1.Fabrikam.lab` 计算机进行安装：![它是如何工作的...](img/image00676.jpeg)
- en: The agent is installed as a Windows service on the machines in the Machine Group:![How
    it works...](img/image00677.jpeg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理程序作为 Windows 服务安装在机器组中的计算机上：![它是如何工作的...](img/image00677.jpeg)
- en: Distributing test execution on a Lab Machine Group
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在实验室机器组中分发测试执行
- en: Earlier in this chapter, you learned how to create a Machine Group and deploy
    the test agent on selected machines in the Machine Group. The TFBuild framework
    ships a task to distribute the test execution across multiple test agents. In
    this recipe, you'll learn how to trigger a distributed test run across a farm
    of test runners deployed in a Machine Group.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本章前面你学到了如何创建机器组并在机器组中的选定计算机上部署测试代理。TFBuild 框架提供了一个任务，用于将测试执行分发到多个测试代理。在这个配方中，你将学习如何触发跨多个测试运行器部署的测试农场进行分布式测试运行。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Scenario: The FabrikamTFVC Team has over 2,000 automated coded UI tests that
    need to be executed as part of the functional testing workflow. FabrikamTFVC Team
    would like the ability to parallelize the test execution. In order to do this,
    the Team wants to deploy the Visual Studio test agent to all machines in the Fabrikam-QA
    Machine Group and then parallelize by distributing the test execution at the test
    assembly level:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamTFVC 团队有超过 2,000 个自动化的代码 UI 测试，需要作为功能测试工作流的一部分执行。FabrikamTFVC 团队希望能够并行化测试执行。为此，团队希望将
    Visual Studio 测试代理部署到 Fabrikam-QA 机器组中的所有计算机，然后通过在测试程序集级别分发测试执行来实现并行化：
- en: '![Getting ready](img/image00678.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00678.jpeg)'
- en: In this recipe, you'll be using the Fabrikam-QA Machine Group. If you don't
    already have Machine Group set up, follow the instructions in the *Creating and
    setting up a Machine Group* recipe. Since test agents need to be deployed as a
    prerequisite to the distribution of the tests, follow the steps in the *Deploying
    a test agent through the TFBuild task* recipe to learn how TFBuild can be used
    to deploy the test agent in a Machine Group.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将使用 Fabrikam-QA 机器组。如果你还没有设置机器组，按照 *创建和设置机器组* 配方中的说明操作。由于测试代理需要作为先决条件部署，才能分发测试，请按照
    *通过 TFBuild 任务部署测试代理* 配方中的步骤操作，了解如何使用 TFBuild 在机器组中部署测试代理。
- en: How to do it…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Navigating to the build hub in the FabrikamTFVC Team Web Portal, click on **Edit**
    to open `FabrikamTFVC Agent Deployment` in edit mode.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 FabrikamTFVC 团队 Web 门户中导航到构建中心，点击**编辑**以在编辑模式下打开 `FabrikamTFVC Agent Deployment`。
- en: Click on **+** to add a build step and from the **Add Task** window, select
    the **Build** tab and add the Visual Studio Build task. This task will be used
    to compile the test projects:![How to do it…](img/image00679.jpeg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**添加一个构建步骤，然后在**添加任务**窗口中，选择**构建**标签并添加Visual Studio构建任务。这个任务将用于编译测试项目：![操作方法…](img/image00679.jpeg)
- en: From the **Deploy** tab, add the **Windows Machine File Copy** task. This task
    will copy the test assemblies across to the machines the test need to be executed:![How
    to do it…](img/image00680.jpeg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**部署**标签下，添加**Windows机器文件复制**任务。此任务将把测试程序集复制到需要执行测试的机器上：![操作方法…](img/image00680.jpeg)
- en: From the **Test** tab, add the **Visual Studio Test using Test Agent** task.
    This task will be used to manage the test distribution across the farm of test
    agents:![How to do it…](img/image00681.jpeg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**测试**标签下，添加**使用测试代理的Visual Studio测试**任务。这个任务将用于管理测试代理群组中的测试分发：![操作方法…](img/image00681.jpeg)
- en: Click on close icon to close the **Add Task** window. The tasks in the build
    definition need to be ordered as:![How to do it…](img/image00682.jpeg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击关闭图标以关闭**添加任务**窗口。构建定义中的任务需要按照以下顺序排列：![操作方法…](img/image00682.jpeg)
- en: Configure the Visual Studio Build task to build the solution the functional
    tests are part of:![How to do it…](img/image00683.jpeg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Visual Studio构建任务，以构建功能测试所涉及的解决方案：![操作方法…](img/image00683.jpeg)
- en: Configure the Windows Machine File Copy task to copy the test assemblies into
    a directory on the machines in the Machine Group. It is always recommended to
    parameterize the test locations with configuration variables. The preconfigured
    build variables can be used to construct the path to the assemblies on the build
    agent working folder that need to be copied across. If the **Clean Target** flag
    is checked, the build engine will delete the contents of the destination folder
    before copying the new files. The advanced section in this task also includes
    a flag to enable copying files in parallel and use this flag to allow the build
    system to copy the binaries across the machines on the Machine Group in parallel:![How
    to do it…](img/image00684.jpeg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Windows机器文件复制任务，将测试程序集复制到机器组中机器上的目录中。建议使用配置变量将测试位置参数化。可以使用预配置的构建变量来构造需要复制的程序集路径，这些程序集位于构建代理的工作文件夹中。如果勾选了**清理目标**标志，构建引擎将在复制新文件之前删除目标文件夹中的内容。此任务的高级部分还包括一个启用并行复制文件的标志，可以使用此标志允许构建系统并行复制机器组中的机器上的二进制文件：![操作方法…](img/image00684.jpeg)
- en: No changes need to be made to the Visual Studio test agent deployment task.
    The configuration set up in the *Deploying a test agent through the TFBuild task*
    recipe will carry out the test agent deployment across all machines in the Machine
    Group. The Visual Studio Tests using test agent task should immediately follow
    this task. Select the Fabrikam-QA Machine Group as the destination Machine Group,
    where the tests need to be executed. In addition to this, specify the test binaries
    location, the pattern of the test assemblies, the configuration, and the platform
    the tests need to be executed in. Check the code coverage flag in the **Advanced**
    section. You can inject the test settings file to optionally override the configuration
    in the test settings file through the **Override Test Run Parameters** field:![How
    to do it…](img/image00685.jpeg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不需要对Visual Studio测试代理部署任务进行更改。*通过TFBuild任务部署测试代理*配方中设置的配置将会在机器组中的所有机器上执行测试代理部署。使用测试代理的Visual
    Studio测试任务应紧随其后。选择Fabrikam-QA机器组作为目标机器组，在该机器组上执行测试。此外，还需要指定测试二进制文件的位置、测试程序集的模式、配置和测试执行的平台。在**高级**部分勾选代码覆盖率标志。你可以通过**覆盖测试运行参数**字段注入测试设置文件，选择性地覆盖测试设置文件中的配置：![操作方法…](img/image00685.jpeg)
- en: Save the changes to the build definition and queue a new build. Once the build
    completes, navigate to the build summary page; the logs for the Visual Studio
    Tests using test agent step shows the details of the test distribution:![How to
    do it…](img/image00686.jpeg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存对构建定义的更改并排队新的构建。一旦构建完成，导航到构建摘要页面；使用测试代理的Visual Studio测试步骤的日志会显示测试分发的详细信息：![操作方法…](img/image00686.jpeg)
- en: How it works…
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Let's look at the log files of the Visual Studio Test using a test agent task
    through the build summary. As illustrated in the preceding screenshot, the test
    DLLs have been distributed to multiple test agents in the group. The distribution
    is done at a DLL level rather than a test level. The test distribution significantly
    reduces the execution time if your tests are in multiple projects since each DLL
    is distributed to a test agent to execute.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过构建摘要中的测试代理任务查看Visual Studio测试的日志文件。如上图所示，测试DLL已经分发到组中的多个测试代理。分发是基于DLL而不是测试级别进行的。如果你的测试分布在多个项目中，这种DLL级别的分发可以显著减少执行时间，因为每个DLL都会分发到测试代理进行执行。
- en: 'It is also worth noting that the Windows Machine File Copy task successfully
    moves the files from the agent working directory across to the `C:\Fabrikam\FunctionalTests\$(Build.BuildNumber)`
    folder in the Machine Group:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得注意的是，Windows机器文件复制任务成功地将文件从代理工作目录移动到机器组中的`C:\Fabrikam\FunctionalTests\$(Build.BuildNumber)`文件夹：
- en: '![How it works…](img/image00687.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/image00687.jpeg)'
- en: You'll learn more about the Windows Machine File Copy task in [Chapter 6](part0074.xhtml#aid-26I9K1
    "Chapter 6. Releasing Your Application"), *Releasing Your Application*, as it'll
    be used extensively for deployments in release management.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在[第6章](part0074.xhtml#aid-26I9K1 "第6章：发布你的应用")，*发布你的应用*中了解更多关于Windows机器文件复制任务的内容，因为它将在发布管理中广泛用于部署。
- en: Triggering Selenium Web Tests on a Selenium Test Grid using TFBuild
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TFBuild在Selenium测试网格上触发Selenium Web测试
- en: The cost of testing can significantly increase if your software needs to support
    multiple devices and browsers. The rise in client-side scripting frameworks and
    responsive design technologies enable each browser to offer a unique immersive
    user experience. With the matrix of devices and browsers rapidly increasing, it
    is virtually impossible to cover the matrix with manual testing. There are a number
    of commercial and open source tools available for assisting with the development
    of test automation. Selenium is possibly the most widely used open source solution.
    TFS works better together with open source tools. In this recipe, you'll learn
    how to execute Selenium Tests from TFBuild.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的软件需要支持多个设备和浏览器，测试成本可能会显著增加。客户端脚本框架和响应式设计技术的兴起使得每个浏览器提供独特的沉浸式用户体验。随着设备和浏览器矩阵的迅速增加，几乎不可能通过手动测试覆盖所有矩阵。现在有许多商业和开源工具可以帮助开发测试自动化。Selenium可能是最广泛使用的开源解决方案。TFS与开源工具的结合效果更佳。在本教程中，你将学习如何通过TFBuild执行Selenium测试。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Scenario: The FabrikamGit Team has automated functional tests using Selenium.
    The Team now wants to validate the functionality by running the tests in Chrome,
    Firefox, and Internet Explorer. The FabrikamGit Team would like to trigger the
    execution of these tests on a Selenium grid via TFBuild.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamGit团队使用Selenium自动化了功能测试。现在，团队希望通过在Chrome、Firefox和Internet Explorer中运行测试来验证功能。FabrikamGit团队希望通过TFBuild触发这些测试在Selenium网格上执行。
- en: '![Getting ready](img/image00688.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00688.jpeg)'
- en: 'Follow the instructions in the blog post at [http://bit.ly/1PSjfWy](http://bit.ly/1PSjfWy)
    to set up a Selenium grid on a Windows machine. For the purposes of this recipe,
    we''ll follow a simple setup that comprises of both the Selenium hub and node
    on the same machine:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照[http://bit.ly/1PSjfWy](http://bit.ly/1PSjfWy)中的博客文章中的说明，在Windows机器上设置Selenium网格。为了本教程的目的，我们将按照一个简单的设置，在同一台机器上同时运行Selenium
    Hub和Node：
- en: '![Getting ready](img/image00689.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00689.jpeg)'
- en: 'The course material provided with this book includes a Selenium Test Project.
    Download the `SeleniumHelloWorld.zip` folder; alternatively, you can use your
    own Selenium Test Project. Commit and publish `Selenium.Web.Test.sln` into the
    master branch in the FabrikamGit repository:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 本书提供的课程材料包括一个Selenium测试项目。下载`SeleniumHelloWorld.zip`文件夹；或者，你也可以使用自己的Selenium测试项目。将`Selenium.Web.Test.sln`提交并发布到FabrikamGit仓库的主分支：
- en: '![Getting ready](img/image00690.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00690.jpeg)'
- en: More information on how to commit and publish changes to a Git repository is
    available in the introduction section of [Chapter 2](part0027.xhtml#aid-PNV62
    "Chapter 2. Setting Up and Managing Code Repositories"), *Setting Up and Managing
    Code Repositories*. The SeleniumHQ website ([http://bit.ly/1YmqRDJ](http://bit.ly/1YmqRDJ))
    includes great C# tutorials for authoring Selenium Tests.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于如何提交并发布更改到Git仓库的信息，请参阅[第2章](part0027.xhtml#aid-PNV62 "第2章 设置与管理代码仓库")的介绍部分，*设置与管理代码仓库*。SeleniumHQ网站（[http://bit.ly/1YmqRDJ](http://bit.ly/1YmqRDJ)）提供了很棒的C#教程，帮助编写Selenium测试。
- en: How to do it…
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In the FarbikamGit Team Web Portal, navigate to **Build** hub. Click on the
    **+** icon to add a new build definition. Select the Visual Studio Build Template
    and click on **Create**. Navigate to the **Repository** tab in the build definition
    and map the repository to the master branch of the FabrikamGit repository:![How
    to do it…](img/image00691.jpeg)
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在FabrikamGit团队Web门户中，导航到**构建**中心。点击**+**图标以添加新的构建定义。选择Visual Studio构建模板并点击**创建**。在构建定义中导航到**仓库**选项卡，并将仓库映射到FabrikamGit仓库的主分支：![如何操作…](img/image00691.jpeg)
- en: In the build definition navigate to the **Build** tab, select the **Visual Studio
    Build** task. Set the name of the solution containing the Selenium Test Project.
    Ensure that the **Restore NuGet Packages** flag is checked:![How to do it…](img/image00692.jpeg)
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建定义中，导航到**构建**选项卡，选择**Visual Studio构建**任务。设置包含Selenium测试项目的解决方案名称。确保勾选了**恢复NuGet包**标志：![如何操作…](img/image00692.jpeg)
- en: Select the Visual Studio Test task, enter the path to the test settings file,
    and inject the URL of the Selenium grid via the **Override TestRun Parameters**
    field:![How to do it…](img/image00693.jpeg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Visual Studio测试任务，输入测试设置文件的路径，并通过**覆盖TestRun参数**字段注入Selenium网格的URL：![如何操作…](img/image00693.jpeg)
- en: Save the build definition as `FabrikamGitSelenium`. Queue a new build for this
    definition. Once the build execution completes, you can see the test results from
    the build summary view:![How to do it…](img/image00694.jpeg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构建定义保存为`FabrikamGitSelenium`。为此定义排队新的构建。构建执行完成后，您可以在构建摘要视图中查看测试结果：![如何操作…](img/image00694.jpeg)
- en: How it works…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Let''s start by understanding why the Selenium grid URL was injected in the
    Visual Studio Test task via the **Override TestRun Parameters** field. The solution
    contains Selenium Test Project and a `Run` settings file. This is the configuration
    file holding test settings used by the Test Project. The new build system provides
    the ability to overwrite the values in the `Test` settings file by directly passing
    the values through the **Override TestRun Parameters** field, in this specific
    case, the value of `SeleniumTestGridURL`. This value is used by the Selenium Test
    to execute the test:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从理解为什么Selenium网格URL通过**覆盖TestRun参数**字段被注入到Visual Studio测试任务开始。解决方案包含Selenium测试项目和`Run`设置文件。这是一个配置文件，保存了测试项目使用的测试设置。新的构建系统提供了通过**覆盖TestRun参数**字段直接传递值来覆盖`Test`设置文件中的值的能力，在这种特定情况下，是`SeleniumTestGridURL`的值。这个值被Selenium测试用来执行测试：
- en: '![How it works…](img/image00695.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00695.jpeg)'
- en: 'Next, let''s look at the build execution log file for this task; this provides
    a clear summary of the test executed, duration, and update on the result publishing:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们查看此任务的构建执行日志文件；该文件提供了测试执行的清晰总结、持续时间和结果发布的更新：
- en: '![How it works…](img/image00696.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00696.jpeg)'
- en: 'Last but not least, the TFBuild system automatically handles the publishing
    of test results back to the TFS, independent of the testing framework used:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，TFBuild系统会自动处理将测试结果发布回TFS的过程，无论使用的是哪种测试框架：
- en: '![How it works…](img/image00697.jpeg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00697.jpeg)'
- en: As you can see in the preceding screenshot, the Selenium Test Project execution
    results can directly be viewed in the build summary section.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的截图中看到的，Selenium测试项目的执行结果可以直接在构建摘要部分查看。
- en: Integrating the Cloud Load Testing Service in TFBuild
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在TFBuild中集成云负载测试服务
- en: '*"Tests at Amazon revealed: every 100 ms increase in load time of Amazon.com
    decreased sales by 1% (Kohavi and Longbotham 2007)."*'
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“Amazon的测试揭示：每增加100毫秒的加载时间，Amazon.com的销售额就下降1%（Kohavi和Longbotham 2007年）。”*'
- en: Performance Testing can't be an afterthought! Mature software teams test for
    performance early in the development life cycle. The biggest entry barrier to
    performance testing is the high cost and low utilization of infrastructure required
    to generate sufficient load on the application. Today, a wide range of pay-as-you-go
    Cloud Load Test Services are available. Microsoft also offers a Load Test Service
    with Visual Studio Team Services. Each VSTS account receives 20,000 virtual user
    minutes of Load Test Quota free every month. In this recipe, you'll learn how
    to integrate the VSTS Cloud Load Test Service into your CI Pipeline in TFS.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试不能是事后考虑！成熟的软件团队会在开发生命周期的早期进行性能测试。进行性能测试的最大障碍是需要大量基础设施来为应用程序生成足够的负载，而这些基础设施的成本高且利用率低。如今，许多按需付费的云负载测试服务已经可用。微软还提供了与Visual
    Studio团队服务（VSTS）集成的负载测试服务。每个VSTS账户每月都会获得20,000个虚拟用户分钟的负载测试配额，免费提供。在本教程中，您将学习如何将VSTS云负载测试服务集成到TFS中的CI流水线。
- en: Getting ready
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Visual Studio Team Services is free for Teams of up to five people. You can
    create a free account at [http://bit.ly/1lANwhA](http://bit.ly/1lANwhA). In this
    recipe, we'll be using the account [https://tfs2015cookbook.visualstudio.com](https://tfs2015cookbook.visualstudio.com).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio团队服务对于最多五人的团队是免费的。您可以在[http://bit.ly/1lANwhA](http://bit.ly/1lANwhA)上创建一个免费账户。在本教程中，我们将使用账户[https://tfs2015cookbook.visualstudio.com](https://tfs2015cookbook.visualstudio.com)。
- en: For TFS to authenticate with the VSTS account using your identity, you will
    need to generate a personal access token in the VSTS account. Follow the instructions
    at [http://bit.ly/1I3kzVk](http://bit.ly/1I3kzVk) to generate a personal access
    token.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使TFS能够使用您的身份与VSTS账户进行身份验证，您需要在VSTS账户中生成一个个人访问令牌。请按照[http://bit.ly/1I3kzVk](http://bit.ly/1I3kzVk)上的说明生成个人访问令牌。
- en: Now that we have the Cloud Load Test service in VSTS and personal access token,
    the Cloud Load Test service needs to be added as an endpoint in TFS. Adding an
    endpoint in TFS requires that you have **Edit project level information** permissions.
    You can acquire this permission by being added to the Team Project Administrator
    Group. Follow the instructions here to add the Cloud Load Test Service endpoint
    to TFS.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在VSTS中拥有了云负载测试服务和个人访问令牌，接下来需要将云负载测试服务作为端点添加到TFS中。添加TFS中的端点需要您拥有**编辑项目级别信息**的权限。您可以通过被添加到团队项目管理员组来获得此权限。请按照此处的说明，将云负载测试服务端点添加到TFS。
- en: Navigate to FabrikamTFVC Team Administration Console. In the **Services** tab,
    click on the **+** icon to add a new endpoint. Select the **Generic** endpoint
    option and fill out the details as illustrated in the following screenshot. Name
    the endpoint `CLD-VSTS`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到FabrikamTFVC团队管理控制台。在**服务**标签页中，点击**+**图标添加一个新端点。选择**通用**端点选项，并按照下图填写详细信息。将端点命名为`CLD-VSTS`。
- en: '![Getting ready](img/image00698.jpeg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00698.jpeg)'
- en: How to do it…
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Navigate to the **Build** hub in the FabrikamTFVC Team Web Portal. Edit the
    FabrikamTFVC CI build definition.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到FabrikamTFVC团队Web门户中的**构建**中心。编辑FabrikamTFVC CI构建定义。
- en: Click on the **+** icon to launch the **Add New Task** window. From the **Test**
    tab, select and add the **Cloud-based Web Performance Test** task:![How to do
    it…](img/image00699.jpeg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**图标，启动**添加新任务**窗口。在**测试**标签页中，选择并添加**基于云的Web性能测试**任务：![如何操作…](img/image00699.jpeg)
- en: The Cloud Load Test Service was added as a generic endpoint in the Fabrikam
    Team Administration Console. Select the `CLD-VSTS` endpoint from the registered
    connection dropdown. Enter the endpoint you would like to run the test against.
    Specify the location to generate the load from:![How to do it…](img/image00700.jpeg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云负载测试服务作为通用端点被添加到Fabrikam团队管理控制台。从注册连接下拉菜单中选择`CLD-VSTS`端点。输入您希望进行测试的端点。指定生成负载的位置：![如何操作…](img/image00700.jpeg)
- en: Click on **Save** and trigger queue a new build. Once the build execution completes,
    the results of the load test execution is available as part of the build result:![How
    to do it…](img/image00701.jpeg)
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**并触发队列一个新的构建。构建执行完成后，负载测试执行的结果将作为构建结果的一部分提供：![如何操作…](img/image00701.jpeg)
- en: How it works…
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: You can start to load test your application with simple configuration. It is
    easy to get started and utilize the free Cloud Load Test Virtual User Minutes
    available in your VSTS account. TFBuild also includes a Cloud-based Load Test
    task that allows you to run multistep performance tests.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过简单的配置开始对你的应用程序进行负载测试。入门非常容易，而且可以利用你VSTS账户中可用的免费云负载测试虚拟用户分钟。TFBuild还包括一个基于云的负载测试任务，允许你运行多步骤的性能测试。
- en: Analyzing test execution results from the Runs view
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从运行视图分析测试执行结果
- en: In Team Foundation Server 2015, the test execution results of both manual and
    automated testing are surfaced in the **Runs** page. This page is a new addition
    to the **Test** hub in Team Web Portal. The **Runs** page offers a unified experience
    for analyzing the results of test executed using any framework. In this recipe,
    you'll learn how to analyze and action the test execution results in the **Runs**
    view in Team Web Portal.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在Team Foundation Server 2015中，手动和自动化测试的执行结果都显示在**运行**页面中。该页面是Team Web Portal中的**测试**中心的新添加功能。**运行**页面为使用任何框架执行的测试提供了统一的分析体验。在本教程中，你将学习如何在Team
    Web Portal的**运行**视图中分析和处理测试执行结果。
- en: How to do it...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the **Test** hub and click on **Runs** to load the **Runs** page.
    The **Runs** page displays the recent test runs. At first glance, you can see
    the test execution status, test configuration, build number, number of failed
    tests, and the pass rate:![How to do it...](img/image00702.jpeg)
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**测试**中心，点击**运行**以加载**运行**页面。**运行**页面显示了最近的测试运行。你可以一眼看到测试执行状态、测试配置、构建号、失败测试的数量和通过率：![如何操作...](img/image00702.jpeg)
- en: Navigate to the **Filters** view by clicking on the **Filters** tab. The query
    is defaulted to display the test runs from the last 7 days. Amend and add new
    clauses to show only the automated test runs for today:![How to do it...](img/image00703.jpeg)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**过滤器**标签，进入**过滤器**视图。默认查询会显示过去7天的测试运行记录。修改并添加新的条件，以仅显示今天的自动化测试运行：![如何操作...](img/image00703.jpeg)
- en: The query narrows down the test execution results to just one run:![How to do
    it...](img/image00704.jpeg)
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询将测试执行结果缩小为仅显示一次运行：![如何操作...](img/image00704.jpeg)
- en: Double-click on test run ID to open the test run for analysis. This view shows
    the run summary along with charts to visualize the test results by properties,
    traits, configuration, failures types, and resolution. Any attachments associated
    to the test run are also available in this view:![How to do it...](img/image00705.jpeg)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击测试运行ID以打开测试运行进行分析。此视图显示运行摘要，并通过图表可视化按属性、特征、配置、失败类型和解决方案来展示测试结果。与测试运行相关的任何附件也可以在此视图中查看：![如何操作...](img/image00705.jpeg)
- en: Navigate to the **Test results** tab to see the list of all tests executed as
    part of this test run. Prior to TFS 2015, you would have had to download the TRX
    file and open it in Visual Studio to get to this information. This view provides
    the next level of detail among other things. You can see the test execution duration
    and failure error messages:![How to do it...](img/image00706.jpeg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**测试结果**标签，查看此测试运行中执行的所有测试的列表。在TFS 2015之前，你需要下载TRX文件并在Visual Studio中打开它才能获取这些信息。这个视图提供了下一层的详细信息，包括测试执行时长和失败的错误消息：![如何操作...](img/image00706.jpeg)
- en: Select multiple tests and click on **Create Bug** to create a bug-type Work
    Item. Clicking on **Update Analysis** lets you add comments to the test results.
    You can also double-click on a test to go the next level of detail on its test
    execution:![How to do it...](img/image00707.jpeg)
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择多个测试并点击**创建Bug**来创建一个Bug类型的工作项。点击**更新分析**可以向测试结果添加评论。你还可以双击某个测试，进入该测试执行的更详细信息：![如何操作...](img/image00707.jpeg)
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This functionality gives you a unified test analysis experience irrespective
    of the framework you choose to execute your tests in. In summary, you can query
    all test runs available in your Team Project, drill down into a specific test
    run to get a summary view of that run, visualize test runs using charts, query/filter
    the test results within a run, drill down to a specific test result, download
    attachments, and last but not least, analyze test failures and file bugs.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能为你提供了统一的测试分析体验，无论你选择使用何种框架执行测试。总的来说，你可以查询团队项目中所有可用的测试运行，深入查看特定测试运行，获取该运行的摘要视图，使用图表可视化测试运行，查询/筛选某次运行中的测试结果，深入查看特定测试结果，下载附件，最后但同样重要的是，分析测试失败并提交Bug。
- en: Exporting and importing test cases in Excel from TFS
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从TFS中导出和导入Excel格式的测试用例
- en: While test cases in TFS can be accessed from Microsoft Test Manager as well
    as Team Web Access, you may still find stakeholders wanting to access the test
    cases from Excel. As a matter of preference, a few of your stakeholders may find
    it easier to document test cases in excel. While TFS does not offer an out-of-the-box
    feature to export and import test cases in Excel, it offers a good **Software
    Development Kit** (**SDK**) that can be used to create tools that enable such
    functionality. In this recipe, you'll learn how to use "test case export to excel"
    and "Test Case Migrator Plus (open source community tools)" to export test cases
    into Excel and import test cases from Excel into TFS.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以从 Microsoft Test Manager 和 Team Web Access 访问 TFS 中的测试用例，但你可能仍然会发现利益相关者希望从
    Excel 中访问测试用例。作为偏好，部分利益相关者可能会觉得在 Excel 中记录测试用例更为方便。尽管 TFS 没有提供开箱即用的功能来导出和导入 Excel
    格式的测试用例，但它提供了一个良好的**软件开发工具包**（**SDK**），可以用来创建工具以实现此类功能。在本教程中，你将学习如何使用“测试用例导出到
    Excel”和“测试用例迁移 Plus（开源社区工具）”将测试用例导出到 Excel，并将测试用例从 Excel 导入到 TFS。
- en: Getting ready
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Download and install the following utilities on your machine:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装以下工具到你的机器上：
- en: '**Test case** **export utility**: [https://tfstestcaseexporttoexcel.codeplex.com](https://tfstestcaseexporttoexcel.codeplex.com)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试用例** **导出工具**：[https://tfstestcaseexporttoexcel.codeplex.com](https://tfstestcaseexporttoexcel.codeplex.com)'
- en: '**Test case** **import utility**: [http://tcmimport.codeplex.com](http://tcmimport.codeplex.com)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试用例** **导入工具**：[http://tcmimport.codeplex.com](http://tcmimport.codeplex.com)'
- en: Note
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You'll need elevated permissions to install these utilities. The machine where
    these utilities are installed needs a version of Excel installed. These utilities
    do not need to be installed on the TFS application tier.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 安装这些工具需要提升权限。安装这些工具的机器需要安装 Excel 版本。无需在 TFS 应用程序层安装这些工具。
- en: How to do it…
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Exporting test cases from TFS
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 TFS 导出测试用例
- en: On starting the **Test Cases Export** utility, you'll be prompted to connect
    to TFS. Once connected, you'll see a list of test plans and test suits associated
    to that plan. Select the test suite and the file location for export and fill
    out the export output location and filename as illustrated in the following screenshot:![Exporting
    test cases from TFS](img/image00708.jpeg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**测试用例导出**工具时，你将被提示连接到 TFS。连接后，你将看到与该计划相关联的测试计划和测试套件列表。选择测试套件和导出文件位置，并填写导出的输出位置和文件名，如下图所示：![从
    TFS 导出测试用例](img/image00708.jpeg)
- en: The export process gives you the following options:![Exporting test cases from
    TFS](img/image00709.jpeg)
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出过程为你提供以下选项：![从 TFS 导出测试用例](img/image00709.jpeg)
- en: Select the **Export Each Test Suite into Separate Sheets** option to export
    each test suite into a separate sheet. In the preceding example, regression pack,
    payments, and website will be exported in three separate sheets in the workbook.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**将每个测试套件导出到单独的工作表**选项，以将每个测试套件导出到一个单独的工作表。在上面的示例中，回归包、支付和网站将被导出到工作簿中的三个单独的工作表。
- en: Once the export completes, open the spreadsheet from the export location to
    view the results of the export.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出完成后，打开导出位置的电子表格以查看导出的结果。
- en: Importing test cases from TFS
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 TFS 导入测试用例
- en: Start the **Test Case Migrator Plus** utility to launch the test case import
    wizard.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**测试用例迁移 Plus**工具以启动测试用例导入向导。
- en: Select the data source from the **Source** tab. The input format can either
    be **Excel Workbook** or **MHT/Word**. In this recipe, we'll be using the input
    source format as **Excel Workbook**. Key in the output folder location. Once the
    workbook has been parsed, you'll see the list of columns in the selected worksheet.
    Click on **Next** to configure the **Destination** settings:![Importing test cases
    from TFS](img/image00710.jpeg)
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**源**选项卡中选择数据源。输入格式可以是**Excel 工作簿**或**MHT/Word**。在本教程中，我们将使用输入源格式为**Excel 工作簿**。输入输出文件夹位置。一旦工作簿被解析，你将看到选定工作表中的列列表。点击**下一步**以配置**目标**设置：![从
    TFS 导入测试用例](img/image00710.jpeg)
- en: From the **Destination** tab, enter the destination details such as Team Project
    and Work Item type to import the test cases to. From the **Settings** tab, choose
    to create a new settings file and click on the **Next** button (the settings file
    will persist your selections for future imports). From the **Field** mapping tab,
    map the columns in the spreadsheet to the Work Item. For example, the **Title**
    field in the spreadsheet maps to the title field of the Work Item.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**目标**标签页，输入目标详细信息，如团队项目和工作项类型，以便将测试用例导入。 从**设置**标签页，选择创建一个新的设置文件，并点击**下一步**按钮（设置文件将保存您的选择，以供未来的导入使用）。
    从**字段**映射标签页，将电子表格中的列映射到工作项。例如，电子表格中的**标题**字段映射到工作项的标题字段。
- en: From the **Links mapping** tab, you can optionally enable linking between Work
    Items using the **Miscellaneous** tab to specify how the data is read from the
    source Excel file. Click on **Save and Migrate** to start the migration process
    based on the settings configured through the wizard. This will trigger the import
    process; progress on the update is shown on the user interface:![Importing test
    cases from TFS](img/image00711.jpeg)
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**链接映射**标签页，您可以选择启用工作项之间的链接，使用**其他**标签页指定如何从源Excel文件读取数据。点击**保存并迁移**以根据通过向导配置的设置开始迁移过程。这将触发导入过程；更新进度将在用户界面上显示：![从TFS导入测试用例](img/image00711.jpeg)
- en: Once the import has been completed, exit the wizard by clicking on the **Close**
    icon button. The import utility processes the worksheet and generates a report
    in the same location as the source worksheet. The import settings file is also
    generated in the same location. The import settings file stores the settings specified
    during the import process. The settings file can be used for future imports:![Importing
    test cases from TFS](img/image00712.jpeg)
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦导入完成，通过点击**关闭**图标按钮退出向导。导入工具会处理工作表并在与源工作表相同的位置生成报告。导入设置文件也会在相同的位置生成。该导入设置文件存储在导入过程中指定的设置。该设置文件可以用于将来的导入：![从TFS导入测试用例](img/image00712.jpeg)
- en: Open the `Report.xls` file and all successfully imported test cases will be
    listed in the **Passed** sheet. Any test cases that have issues during import
    will be listed in the warning sheet, and any test cases that couldn't be imported
    will be listed in the failed sheet.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Report.xls`文件，所有成功导入的测试用例将列在**已通过**表中。任何在导入过程中出现问题的测试用例将列在警告表中，而任何无法导入的测试用例将列在失败表中。
- en: To view the imported test results, navigate to the FabrikamTest hub in Team
    Web Portal. You'll see the new plans appear in the test plan dropdown. The following
    screenshot illustrates a test suite and a linked test case in Team Web Portal:![Importing
    test cases from TFS](img/image00713.jpeg)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看导入的测试结果，请导航到Team Web Portal中的FabrikamTest中心。您将看到新的计划出现在测试计划下拉菜单中。以下截图展示了Team
    Web Portal中的测试套件和一个链接的测试用例：![从TFS导入测试用例](img/image00713.jpeg)
- en: How it works…
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This, by no means, is a Test Case Migration solution, but it is worth pointing
    out that if you are using other Test Case Management tools that support extracting
    test cases into Excel, you could use these tools to import the artifacts into
    TFS.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝不是一个测试用例迁移解决方案，但值得指出的是，如果您使用支持将测试用例提取到Excel的其他测试用例管理工具，您可以使用这些工具将工件导入到TFS中。
- en: There is more
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容
- en: 'While we are on the subject of test suites, it is worth highlighting that TFS
    2015 now supports assigning multiple people to a test suite. This capability can
    be invoked by right-clicking on a test suite in test hub and choosing **Assign
    Individuals** from the context menu. As illustrated in the following screenshot,
    the new form allows assigning multiple testers to the test suite:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们谈到测试套件，值得强调的是，TFS 2015现在支持将多个人分配给一个测试套件。您可以通过右键点击测试中心中的测试套件，并从上下文菜单中选择**分配人员**来启用此功能。如以下截图所示，新表单允许将多个测试人员分配给测试套件：
- en: '![There is more](img/image00714.jpeg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多内容](img/image00714.jpeg)'
- en: This will iterate through the test suite and create test cases for each individual.
    An e-mail with the link to the test cases is e-mailed out to the individuals.
    This is a great way to enable multiple individuals to test using the same test
    suite, giving you the ability to track the test activity of each individual in
    isolation.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这将遍历测试套件，并为每个人创建测试用例。一个包含测试用例链接的电子邮件将发送给个人。这是让多个个人使用相同测试套件进行测试的好方法，同时您还可以单独跟踪每个个人的测试活动。
- en: Copying and cloning test suites and test cases
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制和克隆测试套件及测试用例
- en: TFS offers two types of copy operations for test suites and test cases, namely,
    **copy** and **clone**. Copy uses a mechanism called shallow copy that simply
    creates a reference to the artifact. If any amendment is made to the artifact,
    it reflects into all its references. Clone uses a mechanism called deep copy;
    the new artifacts have no reference back to its origin and is not impacted by
    any updates made to the original artifact. A common scenario for using shallow
    copy is when testing using the same scripts across multiple iterations. On the
    other hand, a common scenario for deep copy is creating a regression test script
    by copying several existing test suites and test cases. In this recipe, you'll
    learn how to use the copy and clone functionality.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 提供了两种用于测试套件和测试用例的复制操作，即**复制**和**克隆**。复制使用一种叫做浅拷贝的机制，它只是创建对工件的引用。如果对工件进行了任何修改，这些修改将反映到所有引用中。克隆使用深拷贝机制；新工件没有指向原始工件的引用，并且不会受到对原始工件所做更新的影响。使用浅拷贝的常见场景是在多个迭代中使用相同脚本进行测试。另一方面，使用深拷贝的常见场景是通过复制多个现有的测试套件和测试用例来创建回归测试脚本。在这个教程中，你将学习如何使用复制和克隆功能。
- en: Getting ready
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we'll be using Microsoft Test Manager. Microsoft Test Manager
    is installed with Visual Studio Enterprise or Visual Studio Test Professional.
    Launch Microsoft Test Manager and connect to the FabrikamTFVC Team Project.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将使用 Microsoft 测试管理器。Microsoft 测试管理器随 Visual Studio 企业版或 Visual Studio
    测试专业版一起安装。启动 Microsoft 测试管理器并连接到 FabrikamTFVC 团队项目。
- en: How to do it...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Copying (shallow copy)
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复制（浅拷贝）
- en: In Microsoft Test Manager, from the **Plan** tab, select a static test suite
    that will hold the new copy.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Microsoft 测试管理器中，从**计划**选项卡中，选择一个静态测试套件来存放新副本。
- en: From the toolbar, click on the **Create test suites by referencing existing
    test cases** button.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工具栏中，点击**通过引用现有测试用例创建测试套件**按钮。
- en: From the dialog, select the test plan and test suites that you want to copy
    and click on **Create Suite**.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框中，选择你想要复制的测试计划和测试套件，然后点击**创建套件**。
- en: Clone (deep copy)
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 克隆（深拷贝）
- en: In the Microsoft Test Manager, from the **Organize** tab, select a test plan.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Microsoft 测试管理器中，从**组织**选项卡中，选择一个测试计划。
- en: From the toolbar, click on the **Clone** button.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工具栏中，点击**克隆**按钮。
- en: From the dialog, select one or more test suites that you want to clone. You
    can optionally choose to clone requirements that are associated with the selected
    test suite.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框中，选择一个或多个你想要克隆的测试套件。你也可以选择克隆与所选测试套件关联的需求。
- en: Enter the name of the destination test plan and set the associated Area Path
    and Iteration Path.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入目标测试计划的名称，并设置相关的区域路径和迭代路径。
- en: Next, click on the **Clone** button to trigger the clone operation. The clone
    log appears showing updates of the clone process.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**克隆**按钮触发克隆操作。克隆日志将显示克隆过程的更新信息。
- en: Note
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Cloning test cases is supported between Team Projects, but only in the same
    Team Project Collection.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 克隆测试用例在团队项目之间是支持的，但仅限于同一个团队项目集合内。
- en: 'You can also use the `/clone` switch with `tcm.exe` from command line to clone
    test cases and test suites. In the following sample, you''ll notice that the `/clone`
    requirements is being used to clone the requirements. The value of the field Area
    Path and Iteration Path in the destination will be overridden with the specified
    value:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `tcm.exe` 的 `/clone` 参数通过命令行克隆测试用例和测试套件。在以下示例中，你会注意到使用了 `/clone` 参数来克隆需求。目标中的区域路径和迭代路径字段的值将被指定的值覆盖：
- en: '[PRE15]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'When you clone a test suite, the following objects get copied from the source
    test plan to the destination test plan:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 当你克隆一个测试套件时，以下对象会从源测试计划复制到目标测试计划：
- en: '| Test plan object | Notes |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 测试计划对象 | 备注 |'
- en: '| --- | --- |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Test case | Each new test case retains its shared steps. A link is made between
    the source and new test cases. The new test cases do not have test runs, bugs,
    test results, and build information. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 测试用例 | 每个新测试用例保留其共享步骤。源测试用例和新测试用例之间会建立链接。新测试用例不包含测试运行、缺陷、测试结果和构建信息。 |'
- en: '| Shared steps referenced by cloned test cases | Any shared steps referenced
    by the source test cases are maintained in the cloned test cases at destination.
    |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| 被克隆测试用例引用的共享步骤 | 所有源测试用例引用的共享步骤将在目标位置的克隆测试用例中保留。 |'
- en: '| Test suite | The following data is retained:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '| 测试套件 | 以下数据会被保留： |'
- en: Names and hierarchical structure of the test suites
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试套件的名称和层级结构
- en: Order of the test cases
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例的顺序
- en: Assigned testers
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配的测试人员
- en: Configurations
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置
- en: '|'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Action recordings linked from a cloned test case | Any action recording links
    are maintained in the clone test case. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| 从克隆的测试用例中链接的操作记录 | 任何操作记录的链接会保留在克隆的测试用例中。 |'
- en: '| Links and attachments | Any links and attachments in the source are also
    available in the cloned test case. |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| 链接和附件 | 源中的任何链接和附件在克隆的测试用例中也可用。 |'
- en: '| Test configuration | The test configuration is reapplied in the destination
    test plan. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| 测试配置 | 测试配置会在目标测试计划中重新应用。 |'
- en: Exporting test artifacts and test results from the test hub
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从测试中心导出测试工件和测试结果
- en: TFS test artifacts comprise of test plans, test suites, and test cases, and
    of course, test results. It is common to have to export the test artifacts for
    purposes of sharing and reporting. Back in the days of TFS 2013 Test Scribe delivered
    as a Visual Studio Extension, it was the only way to export these artifacts from
    TFS. Test hub now boasts the e-mail or print test artifacts functionality that
    allows you to easily share test artifacts with stakeholders. The feature is simple
    to use and can be triggered from several places within the test hub in Team Web
    Portal. In this recipe, you'll learn how to export the test artifacts from the
    test hub.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 测试工件包括测试计划、测试套件、测试用例，当然还有测试结果。为了分享和报告，通常需要导出测试工件。在 TFS 2013 的时代，Test Scribe
    作为 Visual Studio 扩展工具，是导出这些工件的唯一方式。现在，Test hub 提供了电子邮件或打印测试工件的功能，使你能够轻松与利益相关者分享测试工件。这个功能易于使用，可以在
    Team Web Portal 的多个位置触发。在本教程中，你将学习如何从测试中心导出测试工件。
- en: How to do it...
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Browse to the FabrikamTFVC Team web access and navigate into **Test** hub. To
    export at the test plan level, select the test plan, and then click on the **Email
    or print test artifacts** button from the toolbar:![How to do it...](img/image00715.jpeg)
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到 FabrikamTFVC 团队 Web 访问并进入 **测试** 中心。要在测试计划级别导出，选择测试计划，然后从工具栏中点击 **电子邮件或打印测试工件**
    按钮：![如何操作...](img/image00715.jpeg)
- en: To export at the test suite level, select the test suite open the context menu
    and chose the **Export** option:![How to do it...](img/image00716.jpeg)
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在测试套件级别导出，选择测试套件，打开上下文菜单并选择 **导出** 选项：![如何操作...](img/image00716.jpeg)
- en: Whether you choose to export from test plan or test suite, in both cases, you
    will get a new form to select "what" and "how". The "what" in this case being
    the artifacts. The "how" in this case being e-mail or print. A few items are worth
    highlighting in the following screenshot. The **Latest test outcome** option has
    been added in Update 1, selecting this option also exports the test results. Choosing
    **Selected suite + children** recursively exports all children of the selected
    suite:![How to do it...](img/image00717.jpeg)
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无论你选择从测试计划还是测试套件导出，在这两种情况下，你都会得到一个新表单来选择“导出内容的类型”和“导出方式”。在这个表单中，“内容的类型”指的是工件，而“导出方式”指的是电子邮件或打印。以下截图中的几个项目值得注意。**最新测试结果**选项是在更新1中新增的，选择此选项还会导出测试结果。选择
    **选定的套件及其子项** 会递归导出所选套件的所有子项：![如何操作...](img/image00717.jpeg)
- en: How it works...
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方式...
- en: 'Clicking on print or e-mail starts the process of generating the extract; this
    may take up to a few seconds to complete depending on the quantity and size of
    the artifacts being exported. Once the export has been completed, a form will
    pop up to show you the preview of the export. You can also edit and format the
    values from the preview form. Since we have chosen the e-mail option, the form
    has a field that allows us to choose the e-mail address of the person we would
    like the export to be sent out to:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 点击打印或电子邮件按钮将启动生成提取内容的过程；根据导出的工件的数量和大小，这一过程可能需要几秒钟才能完成。导出完成后，会弹出一个表单，显示导出的预览。你也可以在预览表单中编辑和格式化值。由于我们选择了电子邮件选项，该表单有一个字段，允许我们选择希望将导出内容发送给的电子邮件地址：
- en: '![How it works...](img/image00718.jpeg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![操作方式...](img/image00718.jpeg)'
- en: 'As illustrated in the following screenshot, the export also includes the test
    steps:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，导出还包括测试步骤：
- en: '![How it works...](img/image00719.jpeg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![操作方式...](img/image00719.jpeg)'
- en: There is more…
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'It is possible to customize the format of the export by modifying the underlying
    template used by TFS during the export/print process. The following points are
    to be kept in mind before customizing the template:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 通过修改TFS在导出/打印过程中使用的底层模板，可以自定义导出的格式。在自定义模板之前，需注意以下几点：
- en: You should create a backup of the original template, for example, copy and rename
    it to `TestSuite-Original.xsl`. If not, when you upgrade TFS, the changes you
    made in the `TestSuite.xsl` file may get overwritten. The export does not support
    customization per project; the style changes will affect all projects in your
    TFS instance.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 您应当创建原始模板的备份，例如将其复制并重命名为`TestSuite-Original.xsl`。如果不这样做，在升级TFS时，您在`TestSuite.xsl`文件中所做的更改可能会被覆盖。导出不支持按项目进行自定义；样式更改将影响TFS实例中的所有项目。
- en: 'Follow the steps listed here to add your company logo to the export:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 按照此处列出的步骤将贵公司徽标添加到导出中：
- en: Log on to the TFS application tier and navigate to the following path. Add your
    company logo (`companylogo.png`) in the `C:\Program Files\Microsoft Team Foundation
    Server 14.0\Application Tier\Web Services\_static\tfs\12\_content` folder path.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到TFS应用程序层，并导航到以下路径。将贵公司徽标（`companylogo.png`）添加到`C:\Program Files\Microsoft
    Team Foundation Server 14.0\Application Tier\Web Services\_static\tfs\12\_content`文件夹路径中。
- en: Modify the `TestSuite.xsl` file in the `C:\Program Files\Microsoft Team Foundation
    Server 14.0\Application Tier\Web Services\_tfs_resources\TestManagement\v1.0\Transforms\1033`
    folder.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`C:\Program Files\Microsoft Team Foundation Server 14.0\Application Tier\Web
    Services\_tfs_resources\TestManagement\v1.0\Transforms\1033`文件夹中的`TestSuite.xsl`文件。
- en: 'Open the `TestSuite.xsl` file in the notepad and add the following lines of
    code to include your company logo into the export template:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在记事本中打开`TestSuite.xsl`文件，并添加以下代码行以将贵公司徽标包含到导出模板中：
- en: '[PRE16]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The results of the customization can be tested by generating an export through
    the test hub in Team Web Portal.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过在Team Web Portal的测试中心生成导出，来测试自定义的结果。
- en: Charting testing status on Dashboards in Team Portal
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Team Portal中将测试状态图表化到仪表板
- en: The charting tools in Team Web Portal provide a great way to analyze and visualize
    test case execution. The charts created through the charting tools can be pinned
    to custom Dashboards. Both charts and Dashboards are fantastic information radiators
    to share the test execution results with Team members and stakeholders. In this
    recipe, you'll learn how to pin the test execution results on a custom Dashboard
    in Team Portal.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Team Web Portal中的图表工具提供了一种极好的方式来分析和可视化测试用例执行情况。通过图表工具创建的图表可以固定到自定义仪表板上。图表和仪表板是出色的信息展示工具，可以与团队成员和利益相关者共享测试执行结果。在本教程中，您将学习如何将测试执行结果固定到Team
    Portal中的自定义仪表板上。
- en: Getting Started
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: Follow the steps in the Configuring Dashboards in Team Project recipe in [Chapter
    1](part0016.xhtml#aid-F8901 "Chapter 1. Team Project Setup"), *Team Project Setup*,
    to create a custom Dashboard for testing.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[第1章](part0016.xhtml#aid-F8901 "Chapter 1. Team Project Setup") *Team Project
    Setup*中“配置团队项目仪表板”部分中的步骤，为测试创建自定义仪表板。
- en: How to do it...
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the **Test** hub in FabrikamTFVC Team Web Portal. The **Test Plan**
    page gives you a list of test suites and a list of test cases for the selected
    suite. The **Charts** tab gives you a great way to visualize this information.
    Click on the **+** icon and select **New test result** charts. Select a bar chart
    and group by **Outcome**; this renders the test case outcome in the bar chart.
    Click on **OK** to save the chart. Right-click on the newly created chart and
    pin the chart to the testing Dashboard:![How to do it...](img/image00720.jpeg)
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到FabrikamTFVC Team Web Portal中的**Test**中心。**Test Plan**页面为您提供所选测试套件的测试套件列表和测试用例列表。**Charts**标签为您提供了可视化这些信息的极好方式。点击**+**图标并选择**New
    test result**图表。选择条形图并按**Outcome**分组；这将在条形图中显示测试用例结果。点击**OK**保存图表。右键点击新创建的图表，将图表固定到测试仪表板上：![如何操作...](img/image00720.jpeg)
- en: Now, click on the **+** icon and select the **New test case** chart. Test case
    chart types support trend charts and the supported trend period is from 7 days
    to up to 12 months. Select the stacked area chart type and chose to stack by **State**.
    This will allow you to visualize the state of the test cases over time. Click
    on OK to save the chart, right-click on the chart and pin it to the Dashboard:![How
    to do it...](img/image00721.jpeg)
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**+**图标并选择**新建测试用例**图表。测试用例图表类型支持趋势图，支持的趋势周期从7天到最多12个月。选择堆叠区域图类型，并选择按**状态**进行堆叠。这将帮助你可视化测试用例随时间变化的状态。点击“确定”以保存图表，右键单击图表并将其固定到仪表板：![操作方式...](img/image00721.jpeg)
- en: How it works...
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The charts are calculated using the Work Item data in the transactional database.
    When Work Items are updated, the charts reflect the updates immediately. To learn
    more about the charting functionality in Team Web Portal refer to the walkthrough
    at [http://bit.ly/1PGP8CU](http://bit.ly/1PGP8CU).
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图表是通过事务数据库中的工作项数据进行计算的。当工作项更新时，图表会立即反映这些更新。要了解更多关于团队门户网站中图表功能的内容，请参考[http://bit.ly/1PGP8CU](http://bit.ly/1PGP8CU)的操作指南。
