- en: Implementing Serverless and Microservices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现无服务器和微服务
- en: In the previous chapter, we covered the objective of web applications. You read
    about web applications, App Service plans, containers, Web APIs, and more. You
    should now be aware of when to use these different features.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了 Web 应用程序的目标。您了解了 Web 应用程序、App Service 计划、容器、Web API 等内容。现在，您应该知道何时使用这些不同的功能。
- en: This chapter introduces serverless and microservices. It will cover serverless
    computing and what Azure has to offer regarding the creation of serverless applications,
    such as Azure Functions and Azure Logic Apps. You will read about how to design
    for serverless computing using Azure Containers and API Management. Finally, microservices-based
    solutions are covered. You will learn about containers for microservices and the
    different platforms that are available.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了无服务器和微服务。它将涵盖无服务器计算及 Azure 在创建无服务器应用程序方面的提供，如 Azure Functions 和 Azure Logic
    Apps。您将了解如何使用 Azure 容器和 API 管理设计无服务器计算。最后，还将讨论基于微服务的解决方案。您将了解微服务容器及其可用的不同平台。
- en: 'The following topics will be covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下主题将涵盖：
- en: Event-driven actions using Azure Functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure Functions 的事件驱动操作
- en: Designing applications using Azure Functions and Logic Apps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure Functions 和 Logic Apps 设计应用程序
- en: Designing for serverless computing using Azure Container Instances
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure 容器实例设计无服务器计算
- en: Container orchestrations and the different container orchestration platforms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器编排及不同的容器编排平台
- en: Azure Service Fabric
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Service Fabric
- en: API Management
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 管理
- en: Cloud-native deployments versus migrating assets
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生部署与资产迁移
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter uses the following tools for the examples:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用以下工具进行示例演示：
- en: Azure PowerShell: [https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps?view=azurermps-5.1.1](https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps?view=azurermps-5.1.1)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure PowerShell：[https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps?view=azurermps-5.1.1](https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps?view=azurermps-5.1.1)
- en: 'The source code for this chapter can be downloaded from here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以从这里下载：
- en: '[https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%204](https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%204)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%204](https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%204)'
- en: Event-driven actions using Azure Functions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure Functions 的事件驱动操作
- en: Azure Functions is a serverless compute service that enables you to create event-driven
    actions and triggers without the need to provision or manage your own infrastructure.
    In Azure Functions, you can run a script or custom code that responds to events
    from Azure, third-party services, or on-premises systems. You can build HTTP-based
    API endpoints (called HTTP triggers) that can be accessed by a wide range of applications,
    as well as mobile and IoT devices. You can also create **timer triggers**, which
    can run based on a schedule. With Azure Functions, you pay only for the resources
    you consume.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions 是一个无服务器计算服务，使您能够创建事件驱动的操作和触发器，而无需配置或管理自己的基础设施。在 Azure Functions
    中，您可以运行响应 Azure、第三方服务或本地系统事件的脚本或自定义代码。您可以构建基于 HTTP 的 API 端点（称为 HTTP 触发器），这些端点可以被各种应用程序、移动设备和物联网设备访问。您还可以创建
    **定时触发器**，根据计划运行。使用 Azure Functions，您只需为实际消耗的资源付费。
- en: Functions use an Azure storage account to store code and configuration bindings.
    It uses the standard Azure Storage, which provides blob, table, and queue storage
    for storing the files and triggers. You can use the same App Service plans for
    your functions as you use for web apps and APIs. Azure Functions can also be deployed
    in **App Service Environments** (**ASEs**).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Functions 使用 Azure 存储账户来存储代码和配置绑定。它使用标准的 Azure Storage，提供 Blob、表格和队列存储，用于存储文件和触发器。您可以为函数使用与
    Web 应用程序和 API 相同的 App Service 计划。Azure Functions 还可以部署在 **应用服务环境**（**ASEs**）中。
- en: For more information about Azure Functions and which events and triggers it
    supports, you can refer to the following site: [https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview](https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Azure Functions 及其支持的事件和触发器的更多信息，您可以参考以下网站：[https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview](https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview)。
- en: For more information about the different App Service plans and ASEs, you can
    refer to [Chapter 3](de2f1b21-edb1-4616-a8ff-8fbf484459a0.xhtml), *Designing Web
    Applications*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有关不同应用服务计划和ASE的更多信息，请参阅[第3章](de2f1b21-edb1-4616-a8ff-8fbf484459a0.xhtml)，*设计Web应用程序*。
- en: Azure Functions can be created from the Azure Portal and from Visual Studio
    2017 and can be created in a variety of programming languages, such as C#, F#,
    Node.js, Java, PHP, Batch, PowerShell, JavaScript, Python, and TypeScript. They
    can be created using ARM templates as well. They can be deployed on Windows or
    Linux and by using continuous deployment. At the time of writing this book, it
    supports Bitbucket, Dropbox, external repositories (Git or Mercurial), a Git local
    repository, GitHub, OneDrive, and Visual Studio Team Services as a deployment
    source. Continuous deployment can be configured from the Azure Portal.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions可以从Azure门户和Visual Studio 2017创建，并可以使用多种编程语言创建，例如C#、F#、Node.js、Java、PHP、Batch、PowerShell、JavaScript、Python和TypeScript。它们还可以使用ARM模板创建。它们可以部署在Windows或Linux上，并且可以使用持续部署。在编写本书时，它支持Bitbucket、Dropbox、外部存储库（Git或Mercurial）、本地Git存储库、GitHub、OneDrive和Visual
    Studio Team Services作为部署源。可以从Azure门户配置持续部署。
- en: '![](img/5de12eaf-3a26-4d5b-889f-4d981dcf515e.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5de12eaf-3a26-4d5b-889f-4d981dcf515e.jpg)'
- en: Continuous deployment for Azure Functions
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions的持续部署
- en: The Azure Functions tools in Visual Studio have been included since the 15.3
    release. If you want to create them using Visual Studio 2017, update Visual Studio
    to at least version 15.3 or higher.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio中的Azure Functions工具自15.3版本发布以来已包含在内。如果要使用Visual Studio 2017创建它们，请将Visual
    Studio更新至至少15.3版本或更高版本。
- en: Consumption App Service plan
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消耗应用服务计划
- en: For Azure Functions, Microsoft introduced a new hosting plan where you share
    a pool of instances with functions from other customers. This plan is called the
    **Consumption plan**. This plan is more cost effective then the other available
    App Service plans because it automatically scales down and up, depending on the
    workload. When your function isn't running, you don't have to pay anything and
    when the function is running, instances are added dynamically and removed based
    on the number of incoming events. Functions hosted on the Consumption plan can
    run for a maximum of 10 minutes (the default timeout is 5 minutes, but this can
    be increased to 10 minutes). The Azure Function code and the binding configurations
    are stored on Azure File Storage on a separate storage account.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Azure Functions，Microsoft引入了一种新的托管计划，其中您与其他客户的函数共享一组实例。此计划称为**消耗计划**。与其他可用的应用服务计划相比，此计划更具成本效益，因为它会根据工作负载自动缩减和扩展。当您的函数未运行时，您不需要支付任何费用；当函数运行时，实例会根据传入事件的数量动态添加和删除。在消耗计划上托管的函数最长可以运行10分钟（默认超时为5分钟，但可以增加到10分钟）。Azure
    Function代码和绑定配置存储在单独的存储帐户Azure File Storage上。
- en: When you need your function to run continuously, or for it to run in the same
    App Service plan as other functions, or you need more CPU power, or you want to
    host your function on Linux, then it is best to use a dedicated App Service plan
    for your functions. All the other available App Service plans can be used for
    Azure Functions as well.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要让你的函数持续运行，或者让它与其他函数在同一个应用服务计划中运行，或者需要更多的CPU功率，或者你想在Linux上托管你的函数时，最好为你的函数使用专用的应用服务计划。所有其他可用的应用服务计划也可以用于Azure
    Functions。
- en: Designing application solutions using Azure Functions
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure Functions设计应用程序解决方案
- en: 'In this demo, we are creating an Azure Function from the Azure Portal. This
    function is going to listen to an HTTP trigger and then add a message to a queue:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在此演示中，我们将从Azure门户创建一个Azure Function。此函数将监听HTTP触发器，然后将消息添加到队列中：
- en: Navigate to the Azure Portal by opening [https://portal.azure.com/](https://portal.azure.com/).
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开[https://portal.azure.com/](https://portal.azure.com/)导航到Azure门户。
- en: Click on New and and type `Function App` in the search bar. Click the Create
    button.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“New”，在搜索栏中键入`Function App`，然后单击“Create”按钮。
- en: 'A new blade opens up, where you can fill in the basic settings of the function.
    For the hosting plan, we are using a queue to store messages. When using the Consumption
    plan, queue storage is not part of your storage account, because it only uses
    Azure File Storage to store the function files. For the App Service plan, you
    can create a new App Service plan or pick an existing one. You can choose an ASE
    here as well. For the storage, by default, a new storage account is created. If
    you want to use an existing storage account, you can choose that as well. Add
    the following details and click on Create:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 会打开一个新的面板，你可以在其中填写函数的基本设置。对于托管计划，我们使用队列来存储消息。使用消费计划时，队列存储不是存储帐户的一部分，因为它仅使用 Azure
    文件存储来存储函数文件。对于应用服务计划，你可以创建一个新的应用服务计划，或者选择一个现有的计划。你也可以选择一个 ASE。对于存储，默认情况下，会创建一个新的存储帐户。如果你想使用现有存储帐户，也可以选择它。填写以下详细信息并点击创建：
- en: '![](img/8f02aab3-b11f-4606-8b68-2e8cf231d3a8.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f02aab3-b11f-4606-8b68-2e8cf231d3a8.jpg)'
- en: Creating an Azure Function from the Azure Portal
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Azure 门户创建 Azure 函数
- en: 'Once created, open the function from the Azure Portal and, in the left-hand
    menu, under Function Apps, select Functions | New function:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建后，从 Azure 门户打开函数，在左侧菜单中，选择**函数应用**下的**函数 | 新建函数**：
- en: '![](img/22bd157f-d91c-4f40-9280-35ff67dce9ed.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22bd157f-d91c-4f40-9280-35ff67dce9ed.png)'
- en: Azure Functions wizard from the Azure Portal
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Azure 门户的 Azure Functions 向导
- en: 'On the next screen, select HTTP trigger:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，选择 HTTP 触发器：
- en: '![](img/765be821-8502-44a7-a226-0a34dc34e7f3.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/765be821-8502-44a7-a226-0a34dc34e7f3.png)'
- en: Selecting the HTTP trigger
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 HTTP 触发器
- en: 'The next step is the HTTP trigger settings. Fill in the following values. For
    the Authorization level, you can choose Anonymous right now. However, this is
    only for demo purposes; you should not choose that for your production functions.
    Click on Create and the trigger is created:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是 HTTP 触发器设置。填写以下值。对于授权级别，目前可以选择**匿名**。然而，这仅用于演示目的；对于生产环境的函数不应该选择该选项。点击创建，触发器将被创建：
- en: '![](img/fb84923d-4f63-490e-90fa-aacf42e651fd.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb84923d-4f63-490e-90fa-aacf42e651fd.png)'
- en: HTTP trigger settings
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 触发器设置
- en: 'To configure the queue settings, click on Integrate | New Output and then select
    Azure Queue Storage. Click on Select:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置队列设置，点击**集成 | 新输出**，然后选择**Azure 队列存储**。点击选择：
- en: '![](img/d4a7f0fa-79f2-48cc-affd-b9cc0fd1cd2f.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4a7f0fa-79f2-48cc-affd-b9cc0fd1cd2f.jpg)'
- en: Configure queue
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 配置队列
- en: 'Under Azure Queue Storage output, keep the default settings and click on Save:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Azure 队列存储**输出中，保持默认设置并点击保存：
- en: '![](img/8d74b84a-afab-47cf-a069-68c8c3c55eb0.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d74b84a-afab-47cf-a069-68c8c3c55eb0.png)'
- en: Configure queue
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 配置队列
- en: 'In the left-hand menu, select your function. The code editor will open. Replace
    the code with the following:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中，选择你的函数。代码编辑器将打开。用以下代码替换现有代码：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code adds a message inside the queue and then you need to click
    on Save:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述代码会向队列中添加一条消息，接着你需要点击保存：
- en: 'To test the code, click the Test tab on the right-hand side of the screen.
    You can provide a message inside the JSON call and click on Save and run:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试代码，点击屏幕右侧的**测试**标签。你可以在 JSON 调用中提供一条消息，并点击保存并运行：
- en: '![](img/09dc3fd5-8780-49b1-ac74-5faf6fae7d8d.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09dc3fd5-8780-49b1-ac74-5faf6fae7d8d.jpg)'
- en: Testing the function
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 测试函数
- en: 'The default code generates an output message, which is displayed inside the
    output window. To see what is added to the queue, open the Azure Storage Explorer
    and connect to your Azure account using your credentials. In the left-hand tree
    view, navigate to the function storage account and click on Queues. The added
    message can be found there:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认代码会生成一个输出消息，并显示在输出窗口中。要查看添加到队列的内容，打开 Azure Storage Explorer 并使用凭证连接到你的 Azure
    帐户。在左侧树视图中，导航到函数存储帐户并点击队列。可以在那里找到已添加的消息：
- en: '![](img/9798bf78-5bfa-4905-9843-e4fe2527c72f.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9798bf78-5bfa-4905-9843-e4fe2527c72f.jpg)'
- en: Queue message inside the Azure Storage Explorer
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Storage Explorer 中的队列消息
- en: The Azure Storage Explorer is part of the Azure Tools for Visual Studio. You
    can view blob, queue, and table data from your storage accounts in Azure. You
    can also download the Azure Storage Explorer from this direct link: [https://go.microsoft.com/fwlink/?LinkId=708343&clcid=0x409](https://go.microsoft.com/fwlink/?LinkId=708343&clcid=0x409).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Storage Explorer 是 Visual Studio 的一部分 Azure 工具。你可以查看来自存储帐户的 Blob、队列和表数据。你还可以通过此直接链接下载
    Azure Storage Explorer：[https://go.microsoft.com/fwlink/?LinkId=708343&clcid=0x409](https://go.microsoft.com/fwlink/?LinkId=708343&clcid=0x409)。
- en: Durable Functions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化函数
- en: At the time of writing this book, Durable Functions is still in preview. Durable
    Functions is an extension of Azure Functions and Azure WebJobs, and it provides
    the ability to create stateful functions with state management capabilities, checkpoints,
    and a restarting mechanism.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本书时，Durable Functions 仍处于预览阶段。Durable Functions 是 Azure Functions 和 Azure
    WebJobs 的扩展，它提供了创建具有状态管理功能、检查点和重启机制的有状态函数的能力。
- en: 'It introduces a new orchestrator function that has a couple of advantages.
    These are as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它引入了一种新的协调器功能，具有一些优势，具体如下：
- en: Workflows can be created in code; JSON schemas are not needed.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流可以通过代码创建；不需要 JSON 架构。
- en: It can call other functions synchronously and asynchronously. The output can
    be stored in local variables.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以同步和异步地调用其他函数。输出可以存储在本地变量中。
- en: It saves the state of the function when VMs are waiting and rebooting.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它保存函数的状态，当虚拟机等待或重启时。
- en: Workflow-driven applications using Logic Apps
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Logic Apps 的工作流驱动应用程序
- en: Logic Apps, another service for the serverless offering from Azure, has a lot
    of overlap with Azure Functions. They can both be used to integrate apps or services.
    The main difference between the two is that Azure Functions are event-driven and
    Logic Apps are more workflow-driven. You can use Logic Apps to automate your business
    processes using a visual designer from the Azure Portal (developers can create
    them in Visual Studio as well), whereas Azure Functions are completely written
    in code. You can, however, call Azure Functions from within a Logic App.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Logic Apps 是 Azure 提供的无服务器服务之一，它与 Azure Functions 有很多重叠。两者都可以用于集成应用程序或服务。两者之间的主要区别在于，Azure
    Functions 是事件驱动的，而 Logic Apps 更侧重于工作流驱动。你可以使用 Logic Apps 通过 Azure 门户中的可视化设计器来自动化业务流程（开发人员也可以在
    Visual Studio 中创建它们），而 Azure Functions 完全由代码编写。然而，你仍然可以在 Logic App 中调用 Azure Functions。
- en: With Logic Apps, you can build apps that integrate numerous cloud services and
    on-premises applications. These can be Azure services, third-party cloud services,
    different data stores and databases, and LOB applications. Azure Logic Apps provide
    a number of pre-built connectors that you leverage inside your workflow. Besides
    that, you can also create your own connectors using Visual Studio. Each connector
    provides an API, which can be called from inside the Logic App. Authentication
    is added to this connector as well.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Logic Apps，你可以构建集成多个云服务和本地应用程序的应用程序。这些可以是 Azure 服务、第三方云服务、不同的数据存储和数据库以及 LOB
    应用程序。Azure Logic Apps 提供了许多内置的连接器，你可以在工作流中利用这些连接器。此外，你还可以使用 Visual Studio 创建自己的连接器。每个连接器都提供一个
    API，可以在 Logic App 中调用。此连接器也添加了身份验证。
- en: You can refer to the following article for an overview of all the available
    connectors for Azure Logic Apps: [https://docs.microsoft.com/en-us/azure/connectors/apis-list](https://docs.microsoft.com/en-us/azure/connectors/apis-list).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下文章，了解所有可用的 Azure Logic Apps 连接器概述：[https://docs.microsoft.com/en-us/azure/connectors/apis-list](https://docs.microsoft.com/en-us/azure/connectors/apis-list)。
- en: Besides using the Visual Editor, you can create and make adjustments to the
    Workflow Definition Language schema manually as well. This schema is created using
    JSON and can be created from scratch using Visual Studio or can be adjusted inside
    the Azure Portal. They both use the Code View editor (Visual Studio uses the same
    editor as the Azure Portal).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用可视化编辑器外，你还可以手动创建和调整工作流定义语言（WDL）架构。此架构使用 JSON 创建，可以在 Visual Studio 中从头开始创建，或者在
    Azure 门户中调整。它们都使用代码视图编辑器（Visual Studio 使用与 Azure 门户相同的编辑器）。
- en: Some capabilities can only be added to the schema directly and cannot be made
    from the Visual Editor. Examples of this are date and time formatting and string
    concatenation. Logic App definition files can be added to ARM templates and deployed
    using PowerShell, CLI, or REST APIs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一些功能只能直接添加到架构中，不能通过可视化编辑器创建。例如，日期和时间格式化以及字符串连接。Logic App 定义文件可以添加到 ARM 模板中，并通过
    PowerShell、CLI 或 REST API 部署。
- en: 'Here is an example of the JSON code-behind file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 JSON 后台代码文件的一个示例：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Designing application solutions using Logic Apps
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Logic Apps 设计应用程序解决方案
- en: 'In this demo, we are creating the same functionality as we did in the previous
    Azure Function demo. We are adding a message to a queue. This way, you can see
    the difference between an event-driven approach and a workflow-driven approach.
    The steps are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们创建了与之前的 Azure Function 演示相同的功能。我们将消息添加到队列中。通过这种方式，你可以看到事件驱动方法和工作流驱动方法之间的区别。步骤如下：
- en: Navigate to the Azure Portal by opening [https://portal.azure.com/](https://portal.azure.com/).
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开[https://portal.azure.com/](https://portal.azure.com/)导航到Azure门户。
- en: Click on New and and type `Logic App` in the search bar. Click on the Create button.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建**，并在搜索框中输入`Logic App`。点击**创建**按钮。
- en: 'A new blade opens up where you can fill in the basic settings of the Logic
    App. Add the following and click on Create:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个新的窗格将打开，你可以在其中填写逻辑应用程序的基本设置。添加以下内容并点击**创建**：
- en: '![](img/3f69971f-5971-41a5-b574-1da856d74de7.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f69971f-5971-41a5-b574-1da856d74de7.png)'
- en: Azure Logic App settings
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Azure逻辑应用程序设置
- en: 'When you navigate to the Logic App in the Azure Portal, the designer is opened.
    Click on the HTTP request trigger:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在Azure门户中导航到逻辑应用程序时，设计器将被打开。点击**HTTP请求触发器**：
- en: '![](img/9e231e0d-5d04-4438-aac2-ed2868c2e2a9.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e231e0d-5d04-4438-aac2-ed2868c2e2a9.png)'
- en: Azure Logic App designer
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Azure逻辑应用程序设计器
- en: 'The workflow canvas will open. Click the top action, When a HTTP request is
    received, and add the following JSON schema to it:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作流画布将打开。点击顶部动作，**当接收到HTTP请求时**，并向其中添加以下JSON架构：
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/0a3aa0c7-de34-4514-a8dc-80a604acd707.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a3aa0c7-de34-4514-a8dc-80a604acd707.png)'
- en: Azure Logic App designer
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Azure逻辑应用程序设计器
- en: 'Click on New step to add an action. Click Add an Action, and inside the search
    box type `Azure Queue`. Select Azure Queues - Put a message on a queue:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建步骤**以添加一个动作。点击**添加动作**，在搜索框中输入`Azure Queue`。选择**Azure队列 - 将消息放入队列**：
- en: '![](img/5fa5b0b3-6ad1-4259-bf9e-61a4d22709f1.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5fa5b0b3-6ad1-4259-bf9e-61a4d22709f1.png)'
- en: Add action in the Azure Logic App designer
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure逻辑应用程序设计器中添加动作
- en: Give your connection a name, such as `PacktQueueConnection`. You can then select
    a storage account from the different storage accounts that are available inside
    your Azure subscription. Pick the one that is used for the Azure Function as well.
    Click on Create.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给你的连接命名，比如`PacktQueueConnection`。然后，你可以从Azure订阅中的不同存储帐户中选择一个。选择同样用于Azure函数的存储帐户。点击**创建**。
- en: 'Select the outqueue and add the following message: `Name passed to the Logic
    App:`. Then add the name parameter after the colon and click on Save:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`outqueue`并添加以下消息：`传递给逻辑应用程序的名称:`。然后在冒号后添加名称参数，点击**保存**：
- en: '![](img/714baf35-dd8a-468e-9964-0df450cf5633.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/714baf35-dd8a-468e-9964-0df450cf5633.png)'
- en: Configuring the message
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 配置消息
- en: 'Go to the Overview settings page of the Logic App and copy the Callback url
    to the clipboard:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到逻辑应用程序的概览设置页面并将回调URL复制到剪贴板：
- en: '![](img/965e4a3d-c989-4e43-be2f-0a2ac117a3be.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/965e4a3d-c989-4e43-be2f-0a2ac117a3be.jpg)'
- en: Retrieving the API request URL
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 检索API请求URL
- en: 'Now open Postman, or some other tool for testing APIs, and paste the request
    URL. Add the same message to the Body as we used in the Azure Function example
    and click Enter:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开Postman，或其他API测试工具，并粘贴请求URL。将与我们在Azure函数示例中使用的相同消息添加到Body中，然后按回车键：
- en: '![](img/775b194a-4793-4a33-bb98-d2643fc15d21.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/775b194a-4793-4a33-bb98-d2643fc15d21.png)'
- en: Creating a POST request in Postman
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在Postman中创建POST请求
- en: 'Open the Azure Storage Explorer tool again and you''ll see the queue message
    created by the Logic App in there:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开Azure存储资源管理器工具，你将在其中看到由逻辑应用程序创建的队列消息：
- en: '![](img/90db17a5-c962-4042-955a-7c657e856fd8.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90db17a5-c962-4042-955a-7c657e856fd8.png)'
- en: Queue message created by the Logic App
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由逻辑应用程序创建的队列消息
- en: Postman can be downloaded from the following URL: [https://www.getpostman.com/](https://www.getpostman.com/).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Postman可以从以下网址下载：[https://www.getpostman.com/](https://www.getpostman.com/)。
- en: Designing for serverless computing using Azure Container Instances
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure容器实例设计无服务器计算
- en: Containers are a broadly accepted open standard, and have significantly changed
    the way applications are developed and deployed. A container is an application
    packaging and deployment mechanism that simplifies the way we develop and deploy
    software. With the use of a container, we can add all the different artifacts
    that make the application run, such as configuration files, databases, and Web
    APIs, in an isolated package and deploy it everywhere. This eliminates unexpected
    failures that usually pop up when deploying software to different environments,
    such as development, test, or production environments. And any further knowledge
    of those different environments, such as which operating system it's using, is
    not needed anymore. If your application runs on your development environment,
    it will run on all environments. Because of the isolation, containers also solve
    the problem of running different versions of runtimes or applications that can
    interfere with each other.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一种广泛接受的开放标准，并且显著改变了应用程序的开发和部署方式。容器是一种应用程序打包和部署机制，它简化了我们开发和部署软件的方式。通过使用容器，我们可以将所有使应用程序运行的不同工件（如配置文件、数据库和
    Web API）放入一个隔离的包中，并将其部署到任何地方。这消除了在将软件部署到不同环境（如开发、测试或生产环境）时通常出现的意外故障。而且，不再需要了解这些不同环境的任何信息，例如它使用的操作系统是什么。如果你的应用程序在开发环境中运行，它将在所有环境中运行。由于隔离，容器还解决了运行不同版本的运行时或应用程序之间可能相互干扰的问题。
- en: Azure provides **Azure Container Instances** (**ACI**), which provide a hosted
    environment for running containers in Azure without managing the VMs and the underlying
    infrastructure. One ACI is a single Docker container, and you pay only for the
    resources you consume (per second for each running instance). It offers **Role-Based
    Access Control **(**RBAC**) on the instance, and you can track the usage at the
    individual container level. Containers can be deployed on Windows and Linux.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供了**Azure 容器实例**（**ACI**），它提供了一个托管的环境，可以在 Azure 中运行容器，而无需管理虚拟机和底层基础设施。一个
    ACI 是一个单独的 Docker 容器，你只需为所消耗的资源付费（每个运行实例按秒计费）。它提供了**基于角色的访问控制**（**RBAC**）来管理实例，你可以在单个容器级别追踪资源使用情况。容器可以部署在
    Windows 和 Linux 上。
- en: Containers can be created using PowerShell, CLI, and in the Azure Portal.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可以通过 PowerShell、CLI 或 Azure 门户来创建。
- en: Creating containers
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建容器
- en: 'Containers can be easily created. In this example, the container is created
    from the CLI, with only a few parameters. To create a container, open the Azure
    Cloud Shell from the Azure Portal, select the `Bash` tab, and add the following
    code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可以很容易地创建。在这个示例中，容器是通过 CLI 创建的，仅需要几个参数。要创建容器，请从 Azure 门户打开 Azure Cloud Shell，选择`Bash`选项卡，并添加以下代码：
- en: 'This step is optional. You can use this if you want to check and change the
    default selected Azure subscription:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步是可选的。如果你想检查并更改默认选择的 Azure 订阅，可以使用此步骤：
- en: '[PRE3]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, create the resource group and the container:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建资源组和容器：
- en: '[PRE4]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can also install CLI 2.0 on your Windows device using the following URL: [https://azure.microsoft.com/nl-nl/blog/azure-cli-2-0-new-commands-features-available-now-in-azure-cloud-shell/](https://azure.microsoft.com/nl-nl/blog/azure-cli-2-0-new-commands-features-available-now-in-azure-cloud-shell/).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用以下 URL 在 Windows 设备上安装 CLI 2.0：[https://azure.microsoft.com/nl-nl/blog/azure-cli-2-0-new-commands-features-available-now-in-azure-cloud-shell/](https://azure.microsoft.com/nl-nl/blog/azure-cli-2-0-new-commands-features-available-now-in-azure-cloud-shell/)。
- en: Container orchestrations
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器编排
- en: A set of containers is managed by a container orchestration. An orchestration
    provides a single entity from where you manage scheduling, scaling, health monitoring,
    failover, networking, and application upgrades for your container instances. Also,
    continuous integration and continuous deployment are handled at the orchestration
    level.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一组容器由容器编排进行管理。编排提供了一个统一的实体，供你管理调度、扩展、健康监控、故障转移、网络和应用程序升级等任务。此外，持续集成和持续部署也在编排级别处理。
- en: ACI offers a layered approach for orchestrating your containers. ACI provides
    you with the features to manage one single container. It can manage simple applications,
    task automation, and build jobs for the isolated containers. For more advanced
    scenarios, where you need full container orchestration, including service discovery
    across multiple containers, automatic scaling, and coordinated application upgrades,
    you need to use orchestration platforms.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ACI 提供了一种分层方法来编排容器。ACI 为您提供了管理单个容器的功能。它可以管理简单应用程序、任务自动化以及孤立容器的构建任务。对于更高级的场景，当您需要完整的容器编排，包括跨多个容器的服务发现、自动扩展和协调的应用升级时，您需要使用编排平台。
- en: Orchestration platforms handle the tasks of managing a cluster of containers.
    The orchestration platform is only responsible for the multi-container architecture and
    doesn't have to worry about the underlying infrastructure because this is handled
    by Azure (using ACI).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 编排平台处理管理容器集群的任务。编排平台仅负责多容器架构，不需要担心底层基础设施，因为这些都由 Azure 处理（使用 ACI）。
- en: 'Container orchestrations offer the following features and capabilities:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 容器编排提供以下功能和能力：
- en: '**Scaling**: The orchestrator can add or remove container instances. This can
    be done manually or automatically.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展**：编排者可以添加或删除容器实例。此操作可以手动完成，也可以自动完成。'
- en: '**Service discovery**: This allows containers to locate each other, even when
    the IP addresses are changed, and when the containers are moved between physical
    host machines.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务发现**：该功能允许容器相互定位，即使 IP 地址发生变化，或者容器在物理主机之间移动时。'
- en: '**Networking**: This provides a network that can be used by the underlying
    containers for communication across multiple host machines.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：该功能提供一个网络，供底层容器在多个主机机器之间进行通信。'
- en: '**Scheduling**: The scheduler will use the container image and the resource
    request to locate a suitable VM to run the container on.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度**：调度器将使用容器镜像和资源请求来定位适合运行容器的虚拟机。'
- en: '**Health monitoring**: This monitors the health of the containers and can automatically
    provide rescheduling.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康监控**：该功能监控容器的健康状态，并能自动提供重新调度。'
- en: '**Application upgrades**: This provides coordinated container upgrades and
    rollbacks.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用升级**：该功能提供协调的容器升级和回滚。'
- en: '**Failover**: This checks the current state of the machines and reschedules
    containers from unhealthy to healthy machines.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障切换**：该功能检查机器的当前状态，并将容器从不健康的机器重新调度到健康的机器上。'
- en: '**Affinity/anti-affinity**: This determines that a set of containers should
    run near each other to improve the performance of the application, or far away
    from each other to improve the availability of the application.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亲和性/反亲和性**：该功能决定一组容器应该靠近运行，以提高应用性能，或者远离运行，以提高应用的可用性。'
- en: Azure offers support for different orchestration platforms. Platforms that are
    supported on Azure are Azure Container Service (AKS), Kubernetes, DC/OS (powered
    by Apache Mesos), Docker Swarm, and Azure Service Fabric.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供对不同编排平台的支持。Azure 支持的平台包括 Azure 容器服务（AKS）、Kubernetes、DC/OS（由 Apache Mesos
    提供支持）、Docker Swarm 和 Azure Service Fabric。
- en: Azure Service Fabric
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Service Fabric
- en: Azure Service Fabric is an orchestration platform from Microsoft that can be
    used to deploy, manage, and package microservices and containers. It is similar
    to Docker Cloud and Kubernetes, where Service Fabric is fully bound to the Azure
    platform.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Fabric 是 Microsoft 提供的一个编排平台，用于部署、管理和打包微服务与容器。它类似于 Docker Cloud
    和 Kubernetes，而 Service Fabric 完全集成在 Azure 平台中。
- en: The difference between the three is that Service Fabric is the only one that
    is fully bound to the Azure Platform. Examples of this tight integration with
    the Azure platform includes the fact that Azure Service Fabric can use API Management,
    Event Hub, and IoT Hub out of the box as stateless gateways. When using other
    providers, stateless gateways are mostly built manually. You can import Docker
    images in Azure Fabric as well, but the orchestration of the Docker containers
    is then fully handled by Azure Service Fabric.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 三者之间的区别在于，Service Fabric 是唯一一个完全绑定 Azure 平台的编排平台。与 Azure 平台的紧密集成的例子包括 Azure
    Service Fabric 可以直接使用 API 管理、事件中心（Event Hub）和物联网中心（IoT Hub）作为无状态网关。使用其他提供商时，无状态网关通常是手动构建的。您也可以在
    Azure Fabric 中导入 Docker 镜像，但 Docker 容器的编排将完全由 Azure Service Fabric 处理。
- en: Azure Service Fabric offers a lightweight runtime for building distributed,
    scalable, stateless and stateful microservices that can run inside containers.
    Using Service Fabric, you can deploy the microservices and containers across a
    cluster of machines. On top of that, it offers comprehensive application management
    capabilities to deploy, provision, upgrade and patch, delete, and monitor applications
    and services on containers. Service Fabric is tailored to create full cloud-native
    applications that can start small and eventually scale up to thousands of machines
    over time.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Fabric 提供了一个轻量级的运行时，用于构建分布式、可扩展、无状态和有状态的微服务，这些微服务可以运行在容器内。使用 Service
    Fabric，你可以将微服务和容器部署到一组机器的集群中。此外，它还提供了全面的应用管理功能，用于在容器中部署、配置、升级、打补丁、删除和监控应用程序和服务。Service
    Fabric 量身定制用于创建完整的云原生应用程序，这些应用程序可以从小规模起步，并随着时间的推移扩展到数千台机器。
- en: Service Fabric can be deployed inside your own data center as well, on Windows
    Server machines. On Azure, Service Fabric can be deployed on Windows, Linux, and
    Azure Stack. There are a number of Azure PaaS solutions or resources that run
    on Service Fabric, such as Azure SQL Database, Cosmos DB, Intune, IoT Hub, Event
    Hubs, Skype, Cortana, Power BI, and Microsoft Dynamics.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Service Fabric 也可以在你自己的数据中心内部署，运行在 Windows Server 机器上。在 Azure 上，Service Fabric
    可以部署在 Windows、Linux 和 Azure Stack 上。有许多基于 Service Fabric 运行的 Azure PaaS 解决方案或资源，例如
    Azure SQL 数据库、Cosmos DB、Intune、IoT Hub、Event Hubs、Skype、Cortana、Power BI 和 Microsoft
    Dynamics。
- en: '![](img/c371d310-5dc7-4462-b3c9-85f95f625075.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c371d310-5dc7-4462-b3c9-85f95f625075.png)'
- en: Azure Service Fabric overview
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Fabric 概述
- en: Applications use the Service Fabric programming models to create and manage
    your services. There are Service Fabric APIs that can be used in custom applications
    to take full advantage of the platform's features and application frameworks.
    You can deploy guest executables, which don't use the Service Fabric APIs, but
    can use the capabilities of the underlying platform. Guest executables are treated as
    stateless services and are deployed across different nodes inside a cluster. They
    can benefit from the affinity, anti-affinity and failover, application life cycle
    management, and discovery capabilities, for instance.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序使用 Service Fabric 编程模型来创建和管理你的服务。有 Service Fabric API 可用于自定义应用程序，以充分利用平台的功能和应用框架。你可以部署不使用
    Service Fabric API 的来宾可执行文件，它们可以利用底层平台的能力。来宾可执行文件被视为无状态服务，并在集群中的不同节点之间进行部署。它们可以从亲和性、反亲和性和故障转移、应用生命周期管理、发现能力等方面获益。
- en: Service Fabric supports two different programming models that can be used to
    build scalable and stateful services in Visual Studio 2017\. They are called the
    Reliable Services and the Reliable Actor programming model. By leveraging these
    models inside your code, Azure can guarantee that the services are consistent,
    scalable, reliable, and available inside Azure Service Fabric. Service Fabric
    integrates with ASP.NET Core as well, so you can write both stateless and stateful
    ASP.NET Core applications that take advantage of these reliable collections and
    the orchestration capabilities of Service Fabric.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Service Fabric 支持两种不同的编程模型，可以用于在 Visual Studio 2017 中构建可扩展和有状态的服务。它们分别是称为可靠服务（Reliable
    Services）和可靠演员（Reliable Actor）编程模型。通过在代码中利用这些模型，Azure 可以保证服务在 Azure Service Fabric
    内是一致的、可扩展的、可靠的并且可用的。Service Fabric 还与 ASP.NET Core 集成，因此你可以编写无状态和有状态的 ASP.NET
    Core 应用程序，利用这些可靠的集合和 Service Fabric 的编排能力。
- en: For more information on the available programming models for Azure Service Fabric,
    you can refer to the Microsoft documentation: [https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-reliable-services-introduction](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-reliable-services-introduction).
    For more information on the Reliable Actor programming model, you can refer to: [https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-reliable-actors-introduction](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-reliable-actors-introduction).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Azure Service Fabric 可用的编程模型的更多信息，可以参考 Microsoft 文档：[https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-reliable-services-introduction](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-reliable-services-introduction)。关于可靠演员编程模型的更多信息，可以参考：[https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-reliable-actors-introduction](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-reliable-actors-introduction)。
- en: Life cycle management
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生命周期管理
- en: 'With Azure Service Fabric, you can manage the entire life cycles of your microservice
    applications. It supports all the different tasks, from developing the microservices
    to deployment, management, and maintenance. To accomplish this, Azure Service
    Fabric provides different roles that can operate independently. These different
    roles are as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure Service Fabric，您可以管理微服务应用程序的整个生命周期。它支持从开发微服务到部署、管理和维护的所有不同任务。为了实现这一目标，Azure
    Service Fabric 提供了可以独立操作的不同角色。这些不同的角色如下：
- en: '**Service developer**: Develops generic microservices that can be leveraged
    in different applications. The developer uses the Reliable Services and Reliable
    Actor programming model to create the microservices.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务开发者**：开发可以在不同应用程序中使用的通用微服务。开发者使用可靠服务和可靠 Actor 编程模型来创建微服务。'
- en: '**Application developer**: Creates applications by using the various services
    developed by the service developer. The application developer creates the application
    manifest.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序开发者**：使用服务开发者开发的各种服务创建应用程序。应用程序开发者创建应用程序清单。'
- en: '**Application administrator**: Creates the application configuration files
    and creates the deployment packages. The administrator uses PowerShell to create
    the application packages.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序管理员**：创建应用程序配置文件并创建部署包。管理员使用 PowerShell 创建应用程序包。'
- en: '**Operator**: Deploys the application, monitors the application''s health and
    performance after deployment, and maintains the physical infrastructure. The operator
    uses PowerShell, CLI, or the REST API to deploy the application.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运维人员**：部署应用程序，在部署后监控应用程序的健康状态和性能，并维护物理基础设施。运维人员使用 PowerShell、CLI 或 REST API
    部署应用程序。'
- en: For more information on the Service Fabric application life cycle features,
    you can refer to the following article: [https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-lifecycle](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-lifecycle).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Service Fabric 应用程序生命周期功能的更多信息，请参阅以下文章：[https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-lifecycle](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-lifecycle)。
- en: API Management
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 管理
- en: API Management is an Azure service that can be used to expose different types
    of apps to the outside world as APIs.  You can import your custom APIs or serverless
    apps, such as Azure Functions, Web APIs, Logic Apps, or Service Fabric Apps.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: API 管理是一个 Azure 服务，可以用来将不同类型的应用程序作为 API 暴露到外部。您可以导入自定义 API 或无服务器应用程序，如 Azure
    Functions、Web API、Logic Apps 或 Service Fabric 应用程序。
- en: You can also use API Management for your internal organization and use it as
    a service repository that all developers can use to compose their applications
    or services.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将 API 管理用于您的内部组织，并将其作为所有开发人员可以用来组合他们的应用程序或服务的服务库。
- en: API Management offers an API Gateway, a Management portal, and a Developer portal,
    which are covered in more detail in the following sections.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: API 管理提供 API 网关、管理门户和开发者门户，以下部分将详细介绍这些内容。
- en: API Gateway
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 网关
- en: The API Gateway acts as a bridge between your app and the outside world. This
    app can be a custom API, or any other backend application. The API Gateway accepts
    API calls and routes them to the backend. It provides extra features, such as
    enhanced security, by adding policies and authentication methods. It can verify
    API keys, JWT tokens, certificates, and more. You can create transformations without
    using code modifications, and enforce usage quotas and rate limits. It adds support
    for caching and throttling, and can log call metadata for analytics purposes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: API 网关充当您的应用程序与外部世界之间的桥梁。这个应用程序可以是自定义 API，也可以是任何其他后端应用程序。API 网关接受 API 调用并将其路由到后端。它提供额外的功能，如通过添加策略和身份验证方法增强安全性。它可以验证
    API 密钥、JWT 令牌、证书等。您可以在不使用代码修改的情况下创建转换，并强制执行使用配额和速率限制。它还支持缓存和限流，并可以记录调用元数据以供分析使用。
- en: API Management portal
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 管理门户
- en: The API Management portal is where you define and import your custom APIs. You
    can package your APIs into **products** in there as well. APIs inside API Management
    are exposed as products to developers and can be configured with a title, description,
    and terms of use. Products can even be **open** or **protected.** For protected
    APIs, developers need a subscription. OpenAPIs can be used without a subscription.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: API 管理门户是你定义和导入自定义 API 的地方。你也可以在这里将你的 API 打包成 **产品**。在 API 管理中，API 被作为产品向开发者公开，可以配置标题、描述和使用条款。产品可以是
    **开放的** 或 **受保护的**。对于受保护的 API，开发者需要订阅。开放 API 可以在没有订阅的情况下使用。
- en: 'API Management uses **groups** to manage the visibility of products to developers.
    There are three different types of group:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: API 管理使用 **组** 来管理产品在开发者中的可见性。有三种不同类型的组：
- en: '**Administrators**: Administrators can create APIs, operations, and products
    that are used by developers and manage API Management service instances.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员**：管理员可以创建 API、操作和产品，供开发者使用，并管理 API 管理服务实例。'
- en: '**Developers**: Developers are the customers that build applications using
    your APIs. Developer portal users are part of this group. They can be granted
    access to the Developer portal and leverage the APIs in their custom applications.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者**：开发者是使用你的 API 构建应用程序的用户。开发者门户的用户属于这一群体。他们可以获得访问开发者门户的权限，并在他们的自定义应用中使用这些
    API。'
- en: '**Guests**: Guest users are only granted read-only access to the developer
    portal. They may be future customers or developers, or users that only need to
    have view access on the different products.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访客**：访客用户仅被授予对开发者门户的只读访问权限。他们可能是未来的客户或开发者，或者仅需查看不同产品的用户。'
- en: Inside the API Management portal, you can set up policies, such as access restriction
    policies and transformation policies. You can get insights from analytics and
    create different versions of the APIs.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在 API 管理门户中，你可以设置策略，如访问限制策略和转换策略。你可以通过分析获取洞察，并创建 API 的不同版本。
- en: Developer portal
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者门户
- en: API Management also offers a developer portal, from where developers can access
    your APIs and read API documentation. It provides a console from where APIs can
    be tested. From there, developers can subscribe to different products. Future
    customers can visit the portal, view the products with their included operations,
    and sign up for a subscription. Developers can get insights about their usage
    from there as well.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: API 管理还提供开发者门户，开发者可以从中访问你的 API 并阅读 API 文档。它提供一个控制台，开发者可以在其中测试 API。开发者还可以从那里订阅不同的产品。未来的客户可以访问门户，查看包含操作的产品，并注册订阅。开发者也可以从中获取关于他们使用情况的洞察。
- en: The look and feel of the Developer portal can be customized. You can add custom
    content and add custom styles and your company branding to the portal as well.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者门户的外观和风格可以自定义。你可以向门户添加自定义内容、样式以及公司的品牌标识。
- en: Cloud-native deployments versus migrating assets
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生部署与资产迁移
- en: Most organizations are moving to the cloud for cost reduction and to speed up
    the development process of applications. To migrate an application to Azure, there
    are a couple of strategies you can use. Which one to use depends on the type of
    application and the priorities and needs of the organization.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数组织迁移到云端是为了降低成本并加速应用程序的开发过程。将应用程序迁移到 Azure，你可以使用几种策略。选择哪种策略取决于应用程序的类型以及组织的优先事项和需求。
- en: Organizations are moving to the cloud to reduce costs and speed up the development
    process of applications. There are a couple of strategies you can use to migrate
    your applications to the cloud. Which strategy you use will depend on the type
    of application and the needs and priorities of the organization. Not all applications
    are worth the investment of moving to a PaaS model or developing a cloud-native
    app. For modern applications, you can choose to migrate to a cloud-optimized or
    cloud-native app, but with applications that are existing or legacy assets, the
    key is to spend minimal time and money (no re-architecting or code changes) while
    moving them to the cloud in order to realize the significant benefit therein.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 组织正在迁移到云端，以降低成本并加速应用程序的开发过程。你可以使用几种策略将应用程序迁移到云端。使用哪种策略取决于应用程序的类型以及组织的需求和优先级。并非所有应用程序都值得投入资金迁移到
    PaaS 模式或开发云原生应用。对于现代应用，你可以选择迁移到云优化或云原生应用，但对于现有或遗留资产应用，关键是要尽量节省时间和成本（无需重新架构或修改代码），同时将它们迁移到云端，以实现其中的显著利益。
- en: 'There are three different migration levels from which you can choose:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个不同的迁移级别可以选择：
- en: '**Cloud infrastructure-ready**: In this approach, you simply move your current
    application and host it inside of Azure VMs. There are no code changes needed
    for this approach.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云基础设施准备就绪**：在这种方法中，你只需将当前的应用程序迁移并将其托管在 Azure 虚拟机中。此方法无需对代码进行更改。'
- en: '**Cloud DevOps-ready**:By using this approach, you are using containers for
    developing and deploying your applications. This decouples your application from
    the infrastructure layer, which reduces the failures that are caused by the application
    dependencies. You can also leverage continuous development and integration on
    the orchestration level, which makes the deployment process a lot faster.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云 DevOps 准备就绪**：使用这种方法，你将使用容器来开发和部署应用程序。这将应用程序与基础设施层解耦，从而减少由应用程序依赖性引起的故障。你还可以在编排层面上利用持续开发和集成，这使得部署过程更加快速。'
- en: '**Cloud-optimized**:This migration approach targets the modernizing of your
    mission-critical applications. This type of modernization usually requires you
    to re-architect your application for the cloud. New code needs to be written,
    and you can create cloud-native applications and leverage microservices architectures.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云优化**：此迁移方法旨在现代化你的关键业务应用程序。这种现代化通常需要你为云环境重新架构应用程序。需要编写新的代码，你可以创建云原生应用程序并利用微服务架构。'
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered serverless and microservices. We covered Azure
    Function, Azure Logic Apps, and the main differences between them. We also covered
    Azure containers services and container orchestrations. We explained what Azure
    Service Fabric is and what API Management is. Next, we talked about when to choose
    to migrate your assets to the cloud and when to choose a cloud-native deployment
    model.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容涵盖了无服务器和微服务。我们讲解了 Azure Function、Azure Logic Apps 以及它们之间的主要区别。我们还介绍了 Azure
    容器服务和容器编排。我们解释了什么是 Azure Service Fabric 以及什么是 API 管理。接下来，我们讨论了何时选择将资产迁移到云端，何时选择云原生部署模型。
- en: This concludes the design compute infrastructure objective and, in the next
    chapter we will proceed with the design networking implementation objective, starting
    with robust networking implementations.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束了设计计算基础设施目标，下一章将开始设计网络实施目标，从强大的网络实施开始。
- en: Questions
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Answer the following questions to test your knowledge of the information in
    this chapter. You can find the answers in the *Assessments* section at the end
    of this book.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 请回答以下问题，以测试你对本章信息的理解。你可以在本书末尾的*评估*部分找到答案。
- en: Can you use API Management as a stateless gateway for your microservices hosted
    in Azure Service Fabric?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能否将 API 管理用作托管在 Azure Service Fabric 上的微服务的无状态网关？
- en: 'Yes'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是
- en: 'No'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不
- en: Can you deploy Kubernetes containers to Azure Container Instances?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能否将 Kubernetes 容器部署到 Azure 容器实例中？
- en: 'Yes'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是
- en: 'No'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不
- en: Is Azure Service Fabric suitable for DevOps environments?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Service Fabric 是否适合 DevOps 环境？
- en: 'Yes'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是
- en: 'No'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不
- en: Further reading
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can check the following links for more information about the topics that
    are covered in this chapter:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看以下链接，获取更多关于本章中涉及的主题的信息：
- en: '**Introducing Azure Functions**: [https://azure.microsoft.com/nl-nl/blog/introducing-azure-functions/](https://azure.microsoft.com/nl-nl/blog/introducing-azure-functions/)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**介绍 Azure Functions**：[https://azure.microsoft.com/nl-nl/blog/introducing-azure-functions/](https://azure.microsoft.com/nl-nl/blog/introducing-azure-functions/)'
- en: '**Azure Functions Documentation**: [https://docs.microsoft.com/en-us/azure/azure-functions/](https://docs.microsoft.com/en-us/azure/azure-functions/)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Functions 文档**：[https://docs.microsoft.com/en-us/azure/azure-functions/](https://docs.microsoft.com/en-us/azure/azure-functions/)'
- en: '**Durable Functions overview**: [https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-overview](https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-overview)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Durable Functions 概述**：[https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-overview](https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-overview)'
- en: '**Azure Logic Apps Documentation**: [https://docs.microsoft.com/en-us/azure/logic-apps/ ](https://docs.microsoft.com/en-us/azure/logic-apps/)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Logic Apps 文档**：[https://docs.microsoft.com/en-us/azure/logic-apps/](https://docs.microsoft.com/en-us/azure/logic-apps/)'
- en: '**API Management documentation**: [https://docs.microsoft.com/en-us/azure/api-management/](https://docs.microsoft.com/en-us/azure/api-management/)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 管理文档**：[https://docs.microsoft.com/en-us/azure/api-management/](https://docs.microsoft.com/en-us/azure/api-management/)'
- en: '**Azure Container Instances Documentation**: [https://docs.microsoft.com/en-us/azure/container-instances/](https://docs.microsoft.com/en-us/azure/container-instances/)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 容器实例文档**: [https://docs.microsoft.com/en-us/azure/container-instances/](https://docs.microsoft.com/en-us/azure/container-instances/)'
- en: '**Azure Container Instances and container orchestrators**: [https://docs.microsoft.com/en-us/azure/container-instances/container-instances-orchestrator-relationship](https://docs.microsoft.com/en-us/azure/container-instances/container-instances-orchestrator-relationship)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 容器实例与容器协调器**: [https://docs.microsoft.com/en-us/azure/container-instances/container-instances-orchestrator-relationship](https://docs.microsoft.com/en-us/azure/container-instances/container-instances-orchestrator-relationship)'
- en: '**Azure Service Fabric Documentation**: [https://docs.microsoft.com/en-us/azure/service-fabric/](https://docs.microsoft.com/en-us/azure/service-fabric/)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 服务结构文档**: [https://docs.microsoft.com/en-us/azure/service-fabric/](https://docs.microsoft.com/en-us/azure/service-fabric/)'
