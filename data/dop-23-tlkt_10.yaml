- en: Using Secrets to Hide Confidential Information
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Secrets隐藏机密信息
- en: We cannot treat all information equally. Sensitive data needs to be handled
    with additional care. Kubernetes provides an additional level of protection through
    Secrets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能对所有信息一视同仁。敏感数据需要额外的保护。Kubernetes通过Secrets提供了额外的保护层。
- en: A Secret is a relatively small amount of sensitive data. Some of the typical
    candidates for Secrets would be passwords, tokens, and SSH keys.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Secret是相对少量的敏感数据。典型的Secrets候选项包括密码、令牌和SSH密钥。
- en: Kubernetes Secrets are very similar to ConfigMaps. If you compare the differences
    in the syntax, you'll notice that there are only a few (if any). Conceptually,
    both ConfigMaps and Secrets are, more or less, the same. If you are familiar with
    ConfigMaps, you should have no trouble applying that knowledge to Secrets.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes Secrets与ConfigMaps非常相似。如果比较语法上的区别，你会注意到它们几乎没有区别（如果有的话）。从概念上讲，ConfigMaps和Secrets在本质上是相同的。如果你熟悉ConfigMaps，那么你应该能够轻松地将这些知识应用到Secrets上。
- en: We already used Secrets without even knowing. Every Pod we created so far had
    a Secret mounted automatically by the system. We'll start by exploring auto-generated
    Secrets and proceed to produce some ourselves.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在不知不觉中使用了Secrets。到目前为止，我们创建的每个Pod都由系统自动挂载了一个Secret。我们将从探索自动生成的Secrets开始，然后逐步创建我们自己的Secrets。
- en: Creating a Cluster
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集群
- en: We'll continue using Minikube, so the instructions for creating a cluster are
    still the same. They should be engraved in the back of your brain so we'll just
    execute them without any explanation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用Minikube，因此创建集群的指令仍然相同。这些指令应该已经刻在你脑海中，因此我们将直接执行它们而不再解释。
- en: All the commands from this chapter are available in the [`10-secret.sh`](https://gist.github.com/37b3ef7afeaf9237aeb2b9a8065b10c3)
    ([https://gist.github.com/vfarcic/37b3ef7afeaf9237aeb2b9a8065b10c3](https://gist.github.com/vfarcic/37b3ef7afeaf9237aeb2b9a8065b10c3))
    Gist.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有命令都可以在[`10-secret.sh`](https://gist.github.com/37b3ef7afeaf9237aeb2b9a8065b10c3)
    ([https://gist.github.com/vfarcic/37b3ef7afeaf9237aeb2b9a8065b10c3](https://gist.github.com/vfarcic/37b3ef7afeaf9237aeb2b9a8065b10c3))
    Gist中找到。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We'll start by deploying an application without creating any user-defined Secret.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从部署一个没有创建任何用户定义的Secret的应用开始。
- en: Exploring built-in Secrets
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索内置Secrets
- en: 'We''ll create the same Jenkins objects we defined earlier:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建与之前定义的Jenkins对象相同的对象：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We created an Ingress, a Deployment, and a Service object. We also executed
    the `kubectl rollout status` command that will tell us when the deployment is
    finished.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个Ingress、一个Deployment和一个Service对象。我们还执行了`kubectl rollout status`命令，该命令会告诉我们部署何时完成。
- en: The `secret/jenkins-unprotected.yml` definition does not use any new feature
    so we won't waste time going through the YAML file. Instead, we'll open Jenkins
    UI in a browser.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`secret/jenkins-unprotected.yml`定义没有使用任何新特性，因此我们不会浪费时间逐一解释这个YAML文件。相反，我们将直接在浏览器中打开Jenkins
    UI。'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Upon closer inspection, you'll notice that there is no login button. Jenkins
    is currently unprotected. The image does allow the option to define an initial
    administrative username and password. If the files `/etc/secrets/jenkins-user`
    and `/etc/secrets/jenkins-pass` are present, the init script will read them, and
    use the content inside those files to define the username and the password. Since
    we're already familiar with ConfigMaps, we could use them to generate those files.
    However, since the user and the password should be better protected than other
    configuration entries, we'll switch to Secrets.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察，你会发现没有登录按钮。Jenkins当前没有保护。镜像确实允许定义初始管理员用户名和密码。如果`/etc/secrets/jenkins-user`和`/etc/secrets/jenkins-pass`文件存在，初始化脚本将读取这些文件，并使用其中的内容来定义用户名和密码。由于我们已经熟悉ConfigMaps，我们可以用它们来生成这些文件。然而，由于用户名和密码应该比其他配置项更加保护，我们将切换到Secrets。
- en: If you're interested in details, please explore the [`jenkins/Dockerfile`](https://github.com/vfarcic/docker-flow-stacks/blob/master/jenkins/Dockerfile)
    ([https://github.com/vfarcic/docker-flow-stacks/blob/master/jenkins/Dockerfile](https://github.com/vfarcic/docker-flow-stacks/blob/master/jenkins/Dockerfile))
    from the [`vfarcic/docker-flow-stack`](https://github.com/vfarcic/docker-flow-stacks)
    ([https://github.com/vfarcic/docker-flow-stacks](https://github.com/vfarcic/docker-flow-stacks))
    repository. The important part is that it expects `/etc/secrets/jenkins-user`
    and `/etc/secrets/jenkins-pass` files. If we can provide them, in a relatively
    secure manner, our Jenkins will be (more) secured by default.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对详细信息感兴趣，请探索[`jenkins/Dockerfile`](https://github.com/vfarcic/docker-flow-stacks/blob/master/jenkins/Dockerfile)（[https://github.com/vfarcic/docker-flow-stacks/blob/master/jenkins/Dockerfile](https://github.com/vfarcic/docker-flow-stacks/blob/master/jenkins/Dockerfile)）来自[`vfarcic/docker-flow-stack`](https://github.com/vfarcic/docker-flow-stacks)（[https://github.com/vfarcic/docker-flow-stacks](https://github.com/vfarcic/docker-flow-stacks)）仓库。重要部分是它需要`/etc/secrets/jenkins-user`和`/etc/secrets/jenkins-pass`文件。如果我们能以相对安全的方式提供它们，我们的Jenkins将默认（更加）安全。
- en: 'We''ll start by checking whether we already have some Secrets in the cluster:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从检查集群中是否已有一些Secrets开始：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We did not create any Secret, and yet one is available in the system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有创建任何Secret，但系统中却有一个可用的Secret。
- en: The `default-token-l9fhk` Secret was created automatically by Kubernetes. It
    contains credentials that can be used to access the API. Moreover, Kubernetes
    automatically modifies the Pods to use this Secret. Unless we tweak Service Accounts,
    every Pod we create will have this Secret. Let's confirm that is indeed true.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`default-token-l9fhk` Secret是由Kubernetes自动创建的。它包含可用于访问API的凭据。此外，Kubernetes会自动修改Pods以使用此Secret。除非我们调整服务账户，否则我们创建的每个Pod都会包含此Secret。让我们确认这确实是事实。'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output, limited to the relevant sections, is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输出，仅限相关部分，如下：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can see that two volumes are mounted. The first one (`/var/jenkins_home`)
    was defined by us. It's the same mount volume we used in the previous chapter,
    and it is meant to preserve Jenkins' state by mounting its home directory.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到挂载了两个卷。第一个卷（`/var/jenkins_home`）是我们定义的。这与我们在上一章中使用的挂载卷相同，旨在通过挂载其主目录来保留Jenkins的状态。
- en: The second mount is the more interesting one. We can see that it references
    the auto-generated Secret `default-token-l9fhk` and that it mounts it as `/var/run/secrets/kubernetes.io/serviceaccount`.
    Let's take a look at that directory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个挂载更为有趣。我们可以看到它引用了自动生成的Secret `default-token-l9fhk`，并将其挂载为`/var/run/secrets/kubernetes.io/serviceaccount`。让我们查看一下这个目录。
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By auto-mounting that Secret, we got three files. They are required if we'd
    like to access the API server from within the containers. `ca.crt` is the certificate,
    the `namespace` contains the namespace the Pod is running in, and the last one
    is the token we'd need to establish communication with the API.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自动挂载该Secret，我们得到了三个文件。如果我们想从容器内访问API服务器，这些文件是必须的。`ca.crt`是证书，`namespace`包含Pod运行的命名空间，而最后一个是我们需要的token，用于与API建立通信。
- en: We won't go into examples that prove those files can be used to access the API
    server securely. Just remember that if you ever need to do that, Kubernetes has
    you covered through that auto-generated Secret.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入讨论证明这些文件可以安全地访问API服务器的示例。只需记住，如果你需要这样做，Kubernetes通过那个自动生成的Secret已经为你提供了保障。
- en: Let's get back to the task at hand. We want to make Jenkins more secure by providing
    it with an initial username and password.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到当前任务。我们希望通过为Jenkins提供初始的用户名和密码来增强其安全性。
- en: Creating and mounting generic Secrets
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和挂载通用Secrets
- en: The commands to create Secrets are almost the same as those we used to create
    ConfigMaps. We can, for example, generate Secrets based on literal values.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Secrets的命令几乎与创建ConfigMaps时相同。例如，我们可以基于字面值生成Secrets。
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The major difference is that we specified the type of the Secret as `generic`.
    It could also be `docker-registry` or `tls`. We won't explore those two, but only
    say that the former can be used to provide `kubelet` with credentials it needs
    to pull images from private registries. The latter is used for storing certificates.
    In this chapter, we'll focus on the `generic` type of secrets which happen to
    use the same syntax as ConfigMaps.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的区别在于我们指定了Secret的类型为`generic`。它也可以是`docker-registry`或`tls`。我们不会探讨这两种类型，只会提到前者可用于向`kubelet`提供从私有仓库拉取镜像所需的凭据，后者用于存储证书。在本章中，我们将重点讨论`generic`类型的秘密，它与ConfigMaps使用相同的语法。
- en: Just as with ConfigMaps, generic Secrets can use `--from-env-file`, `--from-file`,
    and `--from-literal` as sources. They can be mounted as files, or transformed
    into environment variables. Since creating Secrets is so similar to creating ConfigMaps,
    we won't go into all the permutations we can do. I expect that you'll consult
    the ConfigMaps chapter if you have already forgotten the arguments we can use.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 就像ConfigMaps一样，generic类型的Secrets也可以使用`--from-env-file`、`--from-file`和`--from-literal`作为源。它们可以作为文件挂载，或者转换为环境变量。由于创建Secrets与创建ConfigMaps非常相似，我们不会详细探讨所有可能的组合。如果你已经忘记了可以使用的参数，我建议你查阅ConfigMaps章节。
- en: For now, we created a Secret called `my-creds` which holds two literal values.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们创建了一个名为`my-creds`的Secret，包含两个字面值。
- en: 'Let''s take a look at the Secrets we now have in the cluster:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看现在集群中有哪些Secrets：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can see that the newly created Secret is available and that it has two pieces
    of data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到新创建的Secret已经可用，并且它包含两条数据。
- en: Let's see the `json` representation of the Secret and try to find out how to
    retrieve it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看Secret的`json`表示，并尝试找出如何检索它。
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output is as follows (`metadata` is removed for brevity):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下（`metadata`部分为了简洁被省略）：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can see that the `data` field contains the `password` and the `username`.
    They coincide with the literal values we specified in the command that created
    the Secret.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`data`字段包含`password`和`username`，它们与我们在创建Secret时指定的字面值一致。
- en: 'You''ll notice that the values are "strange". They are encoded. If we''d like
    to see the original values we stored as secrets, we''ll need to decode them:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到这些值“很奇怪”。它们是经过编码的。如果我们想看到我们存储为秘密的原始值，我们需要解码它们：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We used `jsonpath` to filter the output so that only the `username` data is
    retrieved. Since the value is encoded, we piped the output to `base64` command
    that decoded it for us. The result is `jdoe`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`jsonpath`过滤输出，使其仅检索`username`数据。由于值是编码的，我们将输出通过`base64`命令解码。结果是`jdoe`。
- en: 'Similarly, the command that will retrieve and decode the second Secret data
    is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，检索并解码第二个Secret数据的命令如下：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output is `incognito`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是`incognito`：
- en: 'Let''s see how we could mount the Secret we created:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何挂载我们创建的Secret：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output, limited to the relevant parts, is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 输出，限制为相关部分，如下所示：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We added `jenkins-creds` that mounts the `/etc/secrets` directory. The `jenkins-creds`
    Volume references the Secret named `my-creds`. Since we want the process inside
    the container to only read the Secret, we set the `defaultMode` to `0444`. That
    will give read permissions to everyone. Typically, we'd set it to `0400`, thus
    giving the read permissions only to the `root` user. However, since the Jenkins
    image uses the `jenkins` user, we gave read permissions to everyone instead of
    only to the `root` user.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了`jenkins-creds`，它挂载了`/etc/secrets`目录。`jenkins-creds`卷引用了名为`my-creds`的Secret。由于我们希望容器内的进程只能读取Secret，因此将`defaultMode`设置为`0444`。这将给予所有人读取权限。通常，我们会将其设置为`0400`，只给`root`用户读取权限。然而，由于Jenkins镜像使用的是`jenkins`用户，因此我们将读取权限授予了所有人，而不仅仅是`root`用户。
- en: Finally, since the image expected files named `jenkins-user` and `jenkins-pass`,
    we made explicit paths. Otherwise, Kubernetes would create files `username` and
    `password`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于镜像期望文件名为`jenkins-user`和`jenkins-pass`，我们明确指定了路径。否则，Kubernetes会创建名为`username`和`password`的文件。
- en: 'Let''s apply the new definition:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们应用新的定义：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We applied the definition and waited until the new objects were rolled out.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用了定义并等待新对象被部署。
- en: 'Now we can check whether the correct files are indeed stored in the `/etc/secrets`
    directory:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以检查是否正确地将文件存储在`/etc/secrets`目录中：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output of the latter command is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 后者命令的输出如下：
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The files we need are indeed injected. To be on the safe side, we''ll also
    check the content of one of them:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的文件确实是注入的。为了安全起见，我们还将检查其中一个文件的内容：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The output is `jdoe`, the username of our newly deployed Jenkins.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为`jdoe`，这是我们新部署的Jenkins的用户名。
- en: Finally, let's confirm that the application is indeed secured.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们确认应用程序确实是安全的。
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You'll see that, this time, the link to create new jobs is gone.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到，这次创建新任务的链接已经不见了。
- en: Please use `jdoe` and `incognito` if you'd like to login to your newly deployed
    and (more) secured Jenkins.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想登录到新部署的（并且更安全的）Jenkins，请使用`jdoe`和`incognito`。
- en: Secrets compared to ConfigMaps
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Secrets与ConfigMaps的比较
- en: So far, Kubernetes Secrets do not seem to differ from ConfigMaps. From a functional
    perspective, they are, indeed, the same. Both allow us to inject some content.
    Both can use files, literal values, and files with environment variables as data
    sources. Both can output data into containers as files or as environment variables.
    Even the syntax for using Secrets is almost the same as the one used for ConfigMaps.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Kubernetes Secrets似乎与ConfigMaps没有什么区别。从功能角度来看，它们确实是一样的。两者都允许我们注入一些内容。两者都可以使用文件、字面值和包含环境变量的文件作为数据源。两者都可以将数据作为文件或环境变量输出到容器中。甚至使用Secrets的语法几乎与ConfigMaps使用的相同。
- en: The only significant difference between ConfigMaps and Secrets is that the latter
    creates files in a tmpfs. They are constructed as in-memory files, thus leaving
    no trace on the host's files system. That, in itself, is not enough to call Secrets
    secure, but it is a step towards it. We'd need to combine them with *Authorization
    Policies* to make the passwords, keys, tokens, and other never-to-be-seen-by-publicly
    types of data secure. Even then, we might want to turn our attention towards third-party
    Secret managers like HashiCorp Vault ([https://www.vaultproject.io/](https://www.vaultproject.io/)).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMaps和Secrets之间唯一显著的区别是后者会在tmpfs中创建文件。它们作为内存中的文件构建，因此不会在主机的文件系统上留下痕迹。单凭这一点还不足以称Secrets为安全，但它是朝着这个目标迈出的一步。我们需要将它们与*授权策略*结合起来，确保密码、密钥、令牌以及其他绝不公开显示的数据的安全。即便如此，我们仍然可能希望将注意力转向像HashiCorp
    Vault这样的第三方Secret管理器（[https://www.vaultproject.io/](https://www.vaultproject.io/)）。
- en: Secrets are almost the same as ConfigMaps. The main difference is that the secret
    files are created in tmpfs. Kubernetes secrets do not make your system secure.
    They are only a step towards such a system.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Secrets几乎与ConfigMaps相同。主要的区别在于，Secret文件是在tmpfs中创建的。Kubernetes的Secrets并不能使你的系统更安全，它们只是朝着这个目标迈出的第一步。
- en: Not so secretive Secrets
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不那么机密的Secrets
- en: Almost everything Kubernetes needs is stored in etcd ([https://github.com/coreos/etcd](https://github.com/coreos/etcd)).
    That includes Secrets. The problem is that they are stored as plain text. Anyone
    with access to etcd has access to Kubernetes Secrets. We can limit the access
    to etcd, but that's not the end of our troubles. *etcd* stores data to disk as
    plain text. Restricting the access to etcd still leaves the Secrets vulnerable
    to who has access to the file system. That, in a way, diminishes the advantage
    of storing Secrets in containers in tmpfs. There's not much benefit of having
    them in tmpfs used by containers, if those same Secrets are stored on disk by
    etcd.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes几乎所需的一切都存储在etcd中（[https://github.com/coreos/etcd](https://github.com/coreos/etcd)）。其中包括Secrets。问题在于它们是以纯文本形式存储的。任何访问etcd的人都可以访问Kubernetes的Secrets。我们可以限制对etcd的访问，但这并不是我们问题的终结。*etcd*将数据以纯文本形式存储到磁盘上。限制对etcd的访问仍然会让Secrets暴露于那些可以访问文件系统的人。以某种方式来说，这减少了将Secrets存储在tmpfs中的优势。如果这些Secrets仍然被etcd存储在磁盘上，容器使用tmpfs存储它们就没有太大意义。
- en: Even after securing the access to etcd and making sure that unauthorized users
    do not have access to the file system partition used by etcd, we are still at
    risk. When multiple replicas of etcd are running, data is synchronized between
    them. By default, etcd communication between replicas is not secured. Anyone sniffing
    that communication could get a hold of our secrets.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们已经确保了etcd的访问安全，并确保未授权用户无法访问etcd所使用的文件系统分区，我们仍然面临风险。当多个etcd副本运行时，数据会在它们之间同步。默认情况下，etcd副本之间的通信没有加密。任何监听该通信的人都可能获取我们的Secrets。
- en: Kubernetes Secrets are a step in the right direction. It is, without a doubt,
    better to use Secrets than to expose confidential information as environment variables
    or other less secure methods. Still, Secrets can give us a false sense of security.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes Secrets是朝着正确方向迈出的第一步。毫无疑问，使用Secrets比将机密信息暴露为环境变量或其他不太安全的方法要好得多。然而，Secrets仍然可能给我们带来虚假的安全感。
- en: 'We need to take additional precautions to protect ourselves. That might include,
    but is not limited to, the following actions:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要采取额外的预防措施来保护自己。这可能包括但不限于以下措施：
- en: Secure the communication between etcd instances with SSL/TLS.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SSL/TLS保护etcd实例之间的通信。
- en: Limit the access to etcd and wipe the disk or partitions that were used by it.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制对etcd的访问并擦除已使用的磁盘或分区。
- en: Do not define Secrets in YAML files stored in a repository. Create Secrets through
    ad-hoc `kubectl create secret` commands. If possible, delete commands history
    afterward.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在存储库中的YAML文件中定义机密信息。通过临时的`kubectl create secret`命令创建机密信息。如果可能，之后删除命令历史记录。
- en: Make sure that the applications using Secrets do not accidentally output them
    to logs or transmit them to other applications.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保使用机密信息的应用程序不会不小心将其输出到日志中或传递给其他应用程序。
- en: Create policies that allow only trusted users to retrieve secrets. However,
    you should be aware that even with proper policies in place, any user with permissions
    to run a Pod could mount a Secret and read it.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建策略，仅允许受信任的用户检索机密信息。但是，你需要注意，即使有适当的策略，任何拥有运行Pod权限的用户也可以挂载机密并读取它。
- en: We did not yet explore etcd configuration, nor did we learn how to set up authorization
    policies. For now, just remember that Secrets are not as secured as one might
    think. At least, not those provided by Kubernetes community. I do encourage you
    to use them, as long as you're aware of their shortcomings.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尚未探索etcd配置，也没有学习如何设置授权策略。目前，只需记住，机密信息并不像人们想象的那样安全。至少，Kubernetes社区提供的机密信息并不安全。我鼓励你使用它们，只要你意识到它们的不足之处。
- en: What now?
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，接下来做什么？
- en: 'There isn''t much left to say, so we''ll enter into the destructive mode and
    eliminate the cluster we created:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 没有太多需要说的，我们将进入破坏模式并删除我们创建的集群：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you'd like to know more about Secrets, please explore Secret v1 core ([https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#secret-v1-core](https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#secret-v1-core))
    API documentation.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于机密信息的内容，请查阅Secret v1 core的API文档（[https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#secret-v1-core](https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#secret-v1-core)）。
- en: '![](img/a4078c60-a951-4aa5-8c6b-0cf6fd8939a9.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4078c60-a951-4aa5-8c6b-0cf6fd8939a9.png)'
- en: 'Figure 10-1: The components explored so far'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-1：到目前为止探索的组件
- en: Kubernetes Secrets compared to Docker Swarm Secrets
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes机密信息与Docker Swarm机密信息的对比
- en: Secrets are very similar to Kubernetes ConfigMaps and Docker Swarm configs.
    Everything we said for configurations applies to Secrets, with a few additional
    features.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 机密信息与Kubernetes的ConfigMaps和Docker Swarm的配置非常相似。我们为配置所说的一切同样适用于机密信息，只是多了一些附加功能。
- en: Both Kubernetes and Docker Swarm stores Secrets in tmpfs inside containers.
    From that aspect, they are equally secure. The significant difference is in the
    way Secrets are stored internally.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes和Docker Swarm都将机密信息存储在容器内的tmpfs中。从这一点上看，它们是同样安全的。显著的区别在于机密信息的存储方式。
- en: Kubernetes stores Secrets in etcd. By default, they are exposed, and we need
    to take extra precautions to protect them. Docker Swarm secrets are, on the other
    hand, more secure by default. They are synchronized between managers using SSL/TLS,
    and they are encrypted at rest. I prefer "secured by default" approach behind
    Docker Swarm secrets. In Kubernetes, we need to take extra steps to reach a similar
    level of security as with Docker Swarm.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes将机密信息存储在etcd中。默认情况下，它们是暴露的，因此我们需要采取额外的措施来保护它们。另一方面，Docker Swarm的机密信息默认更为安全。它们通过SSL/TLS在管理节点之间进行同步，并且在存储时是加密的。我更喜欢Docker
    Swarm机密信息的“默认安全”策略。在Kubernetes中，我们需要采取额外的步骤，才能达到与Docker Swarm相似的安全级别。
- en: On the other hand, Kubernetes integration with third-party solutions for secrets
    is much better. For example, plugging in HashiCorp Vault ([https://www.vaultproject.io/](https://www.vaultproject.io/))
    into a Kubernetes workflow is much smoother than if we'd try to integrate it with
    Docker Swarm. Using Vault is a better solution than what Kubernetes and Swarm
    offer.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Kubernetes与第三方解决方案集成以管理机密信息要好得多。例如，将HashiCorp Vault（[https://www.vaultproject.io/](https://www.vaultproject.io/)）集成到Kubernetes工作流中，要比将其与Docker
    Swarm集成要顺利得多。使用Vault比Kubernetes和Swarm本身提供的解决方案更为优秀。
- en: Even though Kubernetes can be made more secure with Vault and similar products,
    for now, we are evaluating secrets management that comes with Kubernetes and Docker
    Swarm. If we exclude third-party solutions, Docker Swarm has a clear advantage
    over Kubernetes. Its secrets are more secure by default. Even after tweaking Kubernetes
    (especially etcd), Docker Swarm is still more secure. That does not mean that
    secrets management with both products does not have a lot to be desired. Both
    have their shortcomings. However, I must proclaim Docker Swarm as a winner in
    this round. Its secrets are more secretive.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以通过Vault等产品提高Kubernetes的安全性，但目前我们正在评估Kubernetes和Docker Swarm自带的秘密管理功能。如果排除第三方解决方案，Docker
    Swarm在这方面明显优于Kubernetes。其默认的秘密管理更加安全。即便对Kubernetes进行一些调整（尤其是etcd），Docker Swarm依然更为安全。这并不意味着这两款产品的秘密管理就没有可改进之处，它们都有各自的不足之处。然而，我必须宣布Docker
    Swarm在这一回合中获胜。它的秘密更加**保密**。
