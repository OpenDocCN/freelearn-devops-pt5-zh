- en: DevOps Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps框架
- en: 'In this chapter, we will learn about different DevOps processes, frameworks,
    and best practices. We will present DevOps process maturity frameworks and progression
    models with checklist templates for each phase of DevOps. We will also become
    familiar with Agile terminology and methodology and the benefits accrued by an
    organization by adopting it. In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍不同的DevOps流程、框架和最佳实践。我们将展示DevOps流程成熟度框架和进阶模型，并提供每个阶段的检查表模板。我们还将熟悉敏捷术语和方法论，以及组织采纳它所带来的好处。本章将涵盖以下主题：
- en: DevOps process
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps流程
- en: DevOps progression frameworks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps进阶框架
- en: DevOps maturity models
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps成熟度模型
- en: DevOps best practices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps最佳实践
- en: Agile and DevOps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷与DevOps
- en: DevOps process
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps流程
- en: 'The DevOps standard processes prescribed across the industry and adopted by
    organizations are listed here; we will discuss them in detail:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 业界公认的DevOps标准流程并被组织采纳，列举如下；我们将详细讨论它们：
- en: Source code management
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码管理
- en: Source code review
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码审查
- en: Configuration management
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管理
- en: Build  management
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建管理
- en: Repository management
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库管理
- en: Release management
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布管理
- en: Test automation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试自动化
- en: Continuous integration
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous delivery
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous deployment
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署
- en: Infrastructure as Code
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: Application performance monitoring
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用性能监控
- en: Routine automation/continuous improvement
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常规自动化/持续改进
- en: 'DevOps frameworks--under DevOps frameworks, we will study the life cycle models,
    maturity states, progression and best practices frameworks, and also Agile methodology:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps框架——在DevOps框架下，我们将学习生命周期模型、成熟度状态、进阶和最佳实践框架，并同时研究敏捷方法论：
- en: DevOps project life cycle
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps项目生命周期
- en: Maturity states
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成熟度状态
- en: Progression frameworks
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进阶框架
- en: DevOps practices frameworks
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps实践框架
- en: Agile methodology
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷方法论
- en: DevOps best practices
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps最佳实践
- en: 'The adoption of DevOps best practices will help to align people and progress
    towards organizational goals. DevOps offers multiple process frameworks at every
    stage of software development. Full-scale implementation of DevOps in an organization
    requires a cultural shift integrating departments, people, and the process of
    software life cycles.  It enables organizations to move higher on the maturity
    road map in terms of compliance and process adherence:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 采纳DevOps最佳实践有助于使团队与组织目标保持一致，并推进组织目标的实现。DevOps在软件开发的每个阶段提供了多个流程框架。DevOps的全面实施需要组织文化的转变，将部门、人员和软件生命周期的过程整合在一起。这使得组织能够在合规性和流程遵循方面在成熟度路线图上不断向上发展：
- en: '![](img/52f7d8bf-991f-4558-8e49-17d06bedd297.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52f7d8bf-991f-4558-8e49-17d06bedd297.png)'
- en: DevOps process
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps流程
- en: The following are the DevOps standard processes prescribed across the industry
    and adopted by organizations, discussed in detail.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是业界公认并被组织采纳的DevOps标准流程，详细讨论如下。
- en: Source Code Management (SCM)
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码管理(SCM)
- en: Source code management systems have been in use for decades, offering many functions
    and benefits. However, integrating them with DevOps processes offers robust integration
    and automation. A source code management system enables multiple developers to
    develop code concurrently across multiple development centers spread across diverse
    geographies. SCM helps in the management of code base and version control at the
    file level, so developers don't overwrite each other's code, and they have ability
    to work in parallel on files in their respective branches.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码管理系统已经使用了数十年，提供了许多功能和优势。然而，将它们与DevOps流程集成则能提供强大的集成和自动化功能。源代码管理系统使得多个开发人员可以在不同的地理位置的多个开发中心同时开发代码。SCM有助于在文件级别进行代码库和版本控制，避免开发人员互相覆盖代码，并能让他们在各自的分支上并行工作。
- en: Developers merge their code changes to the main or sub branch which can be tracked,
    audited, enquired for bug fixes, and rolled back if needed.  Branching is an important
    functionality of SCM, multiple branches of the software are maintained for different
    major and minor releases, tracking the features and bug fixes across various release
    versions. SCM enables managing process adherence across environments of development,
    test and production, facilitating entire software life cycle management from development
    to support.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员将他们的代码更改合并到主分支或子分支，这些更改可以被跟踪、审计、查询以修复漏洞，并在需要时回滚。分支管理是版本控制系统（SCM）的一个重要功能，软件的多个分支被用于不同的大版本和小版本发布，跟踪各个版本发布中的功能和漏洞修复。SCM使得在开发、测试和生产环境中管理过程遵循成为可能，促进了从开发到支持的整个软件生命周期管理。
- en: 'The DevOps process framework emphasizes the adoption of SCM for accruing the
    following benefits for the organization:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps流程框架强调采用SCM为组织带来以下好处：
- en: Coordination of services between members of a software development team
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件开发团队成员之间服务的协调
- en: Define a single source of truth for any version, minor or major
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义任何版本的单一真实来源，无论是小版本还是大版本
- en: Review changes before implementing
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实施之前审查更改
- en: Track co-authoring, collaboration, and individual contributions
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪共同作者、协作和个人贡献
- en: Audit code changes and rollback facility
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计代码更改和回滚功能
- en: Incremental backup and recovery
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增量备份和恢复
- en: 'SCM tools prevalent in the market are as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上流行的SCM工具如下：
- en: IBM ClearCase
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM ClearCase
- en: Perforce
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perforce
- en: PVCS
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PVCS
- en: Team Foundation Server
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Team Foundation Server
- en: Visual Studio Team Services
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Team Services
- en: Visual SourceSafe
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual SourceSafe
- en: 'Open source SCM tools are as follows--their popularity is also attributed to
    DevOps'' widespread adoption:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 开源SCM工具如下——它们的流行也归功于DevOps的广泛采用：
- en: '**Subversion** (**SVN**)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Subversion** (**SVN**)'
- en: '**Concurrent Version System** (**CVS**)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Concurrent Version System** (**CVS**)'
- en: Git
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: SCCS
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCCS
- en: Revision control systems
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制系统
- en: Bitbucket
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bitbucket
- en: Code review
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码审查
- en: Code reviews are an important process to improve the quality of software instances
    before they are integrated into the main stream. They help identify and remove
    common vulnerabilities such as memory leaks, formatting errors and buffer overflows.
    Code review or inspection can be both formal and informal. In a formal code review,
    the process is through multiple methods such as formal meetings, and interactions
    to review the code line by line. Informal code reviews can be over the shoulder,
    emails, pair programming where a few authors codevelop, or tool assisted code
    reviews--these are also called **code walkthroughs**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查是提高软件实例质量的重要过程，在它们集成到主流之前。代码审查有助于识别并消除常见漏洞，如内存泄漏、格式错误和缓冲区溢出。代码审查或检查可以是正式的也可以是非正式的。在正式的代码审查中，过程通过多种方法进行，比如正式会议和逐行审查代码的互动。非正式的代码审查可以是肩膀上的审查、电子邮件、对编程、工具辅助代码审查——这些也叫做**代码走查**。
- en: 'A code review process framework benefits the organization as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查流程框架为组织带来的好处如下：
- en: Collaboration between software development team members
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件开发团队成员之间的协作
- en: Identification and elimination of code defects before integration
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集成之前识别并消除代码缺陷
- en: Improvement of code quality
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改善代码质量
- en: Quick turnaround of development cycle
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速的开发周期回转
- en: 'Proprietary tools for code review automation:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 用于代码审查自动化的专有工具：
- en: Crucible
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Crucible
- en: Collaborator
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Collaborator
- en: Codacy
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Codacy
- en: Upsource
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Upsource
- en: Understand
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Understand
- en: 'Open source tools for code review automation:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 用于代码审查自动化的开源工具：
- en: Review board
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Review board
- en: Phabricator
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Phabricator
- en: Gerrit
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gerrit
- en: GitLab
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab
- en: Configuration Management
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置管理
- en: '**Configuration Management** (**CM**) is the broad subject of governing configuration
    items at enterprise level, as per **Infrastructure Library** (**ITIL**); even
    the **configuration management database** (**CMDB**) is part of the CM strategy.
    Configuration management includes identification, verification, and maintenance
    of configuration items of both software and hardware, such as patches and versions.
    In simple terms, it''s about managing the configuration of a system and ensuring
    its fitness for its intended purpose. A configuration management tool will validate
    the appropriateness of the configurations on the system as per the requirements
    and its interoperability between systems. A common example is to ensure the code
    developed on a development system is effectively functional on a QA (test) system
    and production systems. Any loss of configuration parameters between the systems
    will be catastrophic for the application''s performance.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置管理**（**CM**）是根据**基础架构库**（**ITIL**）在企业级别管理配置项的广泛主题；即使是**配置管理数据库**（**CMDB**）也是配置管理策略的一部分。配置管理包括识别、验证和维护软件和硬件的配置项，例如补丁和版本。简而言之，它就是管理系统的配置，确保其适合预期用途。配置管理工具将验证系统配置的适当性，确保其符合需求并在各系统之间的互操作性。一个常见的例子是确保在开发系统上开发的代码在QA（测试）系统和生产系统上有效运行。系统之间的任何配置参数丢失都会对应用程序的性能造成灾难性影响。'
- en: 'As per DevOps, the benefits of incorporating configuration management processes
    and tools for an organization can be summarized as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 根据DevOps，结合配置管理流程和工具对组织的好处可以总结如下：
- en: Facilitates organizations with impact analysis due to the configuration change
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进组织进行配置变更影响分析
- en: Allows automated provisioning on different systems such as dev, QA, and prod
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许在不同系统上自动配置，如开发、QA和生产
- en: Facilitates audit, account, and verification of the systems
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进系统的审计、账户和验证
- en: Reduces redundant work by ensuring consistency
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过确保一致性来减少冗余工作
- en: Effectively manages simultaneous updates
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效管理同时更新
- en: Avoids configuration related problems of a single version of the truth
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免单一真相版本的配置相关问题
- en: Simplifies coordination between team members of development and operations
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化开发和运维团队成员之间的协调
- en: It is helpful in tracking defects and resolving them in time
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于跟踪缺陷并及时解决
- en: Helps in predictive and preventive maintenance
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有助于预测性和预防性维护
- en: 'A few popular configuration management tools for infrastructure are as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一些流行的基础设施配置管理工具如下：
- en: BMC Software's Atrium
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BMC Software的Atrium
- en: Hewlett Packard Enterprise's Universal Configuration Management Database
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 惠普企业的通用配置管理数据库
- en: 'A few popular software configuration management tools are as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一些流行的软件配置管理工具如下：
- en: Chef
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef
- en: Puppet
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet
- en: Ansible
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible
- en: Salt
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Salt
- en: Juju
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Juju
- en: Build management
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建管理
- en: Build management is the process of preparing a build environment to assemble
    all the components of a software application as a finished, workable product,
    fit for its intended purpose. The source code, the compilers, dependencies with
    hardware and software components, and so on, are compiled to function as a cohesive
    unit. Builds are manual, on demand and automatic. On-demand automated builds reinitiate
    with a script to launch the build and are used in few cases. Scheduled automated
    builds are the case with continuous integration servers running nightly builds.
    Triggered automated builds in a continuous integration server are launched just
    after being committed to a Git repository.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 构建管理是准备构建环境的过程，将软件应用程序的所有组件组装成一个完整、可工作的产品，适合其预期用途。源代码、编译器、与硬件和软件组件的依赖关系等被编译成一个有机的整体。构建可以是手动的、按需的或自动的。按需自动构建会使用脚本重新启动构建，并且只在少数情况下使用。计划的自动构建通常是在持续集成服务器上进行的夜间构建。触发的自动构建是在持续集成服务器中，一旦提交到Git仓库后即会启动。
- en: 'As per DevOps, the benefits of build management processes and tools for an
    organization can be summarized as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 根据DevOps，构建管理流程和工具对组织的好处可以总结如下：
- en: The vital function of ensuring software is usable
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保软件可用性的关键功能
- en: Ensures reusability and reliability of the software in client environments
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保软件在客户环境中的可重用性和可靠性
- en: Increases the efficiency and quality of software
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高软件的效率和质量
- en: It's also a regulatory requirement
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它也是一种监管要求
- en: 'A few build tools that are in use are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的构建工具如下：
- en: Ant
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ant
- en: Buildr
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Buildr
- en: Maven
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven
- en: Gradle
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle
- en: Grunt
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grunt
- en: MSbuild
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSbuild
- en: Visual Build
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Build
- en: Make (CMake/QMake)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Make (CMake/QMake)
- en: Artifacts repository management
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构件仓库管理
- en: A build Artifacts repository manager is a dedicated server for hosting multiple
    repositories of binary components (executables) of successful builds. By centralizing
    the management of diverse binary types, it reduces the complexity of access along
    with their dependencies.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 构建构件仓库管理器是用于托管多个成功构建的二进制组件（可执行文件）仓库的专用服务器。通过集中管理不同类型的二进制文件，它减少了访问的复杂性及其依赖关系。
- en: 'The benefits are as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 其好处如下：
- en: Manage artifact life cycles
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理构件生命周期
- en: Ensure builds are repeatable and reproducible
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保构建是可重复和可重现的
- en: Organized access to build artifacts
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有序访问构建构件
- en: Convenient to share builds across teams and vendors
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方便在团队和供应商之间共享构建
- en: Retention policies based on artifacts for audit compliance
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于构件的保留策略，以符合审计要求
- en: High availability of artifacts with access controls
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用性的构件和访问控制
- en: 'A few repository tools that are in use are as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的仓库工具如下：
- en: Sonatype Nexus
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sonatype Nexus
- en: JFrog Artifactory
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JFrog Artifactory
- en: Apache Archiva
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Archiva
- en: NuGet
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NuGet
- en: Docker hub
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub
- en: Pulp
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pulp
- en: Npm
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Npm
- en: Release management
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布管理
- en: Release management is the process of a software life cycle to facilitate a release's
    movement from development, testing, and deployment to support/maintenance. It
    interfaces with several other DevOps process areas in the SDLC.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理是软件生命周期中的一个过程，旨在促进发布从开发、测试、部署到支持/维护的顺利流动。它与 SDLC 中的其他 DevOps 过程领域进行接口交互。
- en: Release management has been an integral part of the development process for
    decades. However, its inclusion into the DevOps framework makes a complete cycle
    for automation.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理已经成为开发过程中的一个重要组成部分几十年。然而，它被纳入 DevOps 框架后，形成了一个完整的自动化周期。
- en: Release management is an iterative cycle initiating by a request for the addition
    of new features or changes to existing functionality. Once the change is approved,
    the new version is designed, built, tested, reviewed, and after acceptance, deployed
    to production. During the support phase, there could be a possibility of enhancement
    or performance leading to the initiation of a new development cycle.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理是一个迭代周期，由增加新功能或对现有功能进行更改的请求开始。一旦变更获得批准，新版本将被设计、构建、测试、审查，并在接受后部署到生产环境。在支持阶段，可能会有增强或性能改进的需求，从而启动新的开发周期。
- en: 'The benefits of adopting release management are as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 采用发布管理的好处如下：
- en: Product life cycle holistic management, tracking and integrating every phase
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品生命周期的整体管理，跟踪并整合每个阶段
- en: Orchestrate all the phase activities--development, version control, build, QA,
    systems provisioning, production deployment, and support
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协调所有阶段活动——开发、版本控制、构建、质量保证、系统配置、生产部署和支持
- en: Track the status of recent deployments in each of the environments
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪各个环境中最近部署的状态
- en: Audit history of all activities of work items that are associated with each
    release
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与每个发布相关的所有工作项活动的审计历史
- en: The automation of release management relies on automating all of its stages
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布管理的自动化依赖于其所有阶段的自动化
- en: Teams can author release definitions and automate deployment in repeatable,
    reliable ways while simultaneously tracking in-flight releases all the way to
    production
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队可以编写发布定义并以可重复、可靠的方式自动化部署，同时追踪从开发到生产的所有发布。
- en: Fine grain access control for authorized access and approval for change
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对授权访问和变更批准进行细粒度访问控制
- en: 'A few release management tools are:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一些发布管理工具如下：
- en: Electric Cloud
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Electric Cloud
- en: Octopus Deploy
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Octopus Deploy
- en: Continuum
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Continuum
- en: Automic
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Automic
- en: Quikbuild
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quikbuild
- en: UrbanCode Release
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UrbanCode Release
- en: CA Service Virtualization (LISA)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA Service Virtualization (LISA)
- en: BMC Release Process Management
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BMC 发布过程管理
- en: Plutora Release
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Plutora Release
- en: CA Release Automation
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA Release Automation
- en: Serena Release
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Serena Release
- en: MS Visual Studio
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MS Visual Studio
- en: StackStorm
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StackStorm
- en: Rally
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rally
- en: Test automation
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试自动化
- en: Testing manually for every possible scenario is tedious, labor intensive, time
    consuming and expensive. Test automation, or automatic testing, is for running
    test cases without manual intervention. Though not all test cases qualify to be
    automatically run, the majority can be scheduled. Automation is achieved by running
    the test cases with an automation tool or through the scheduling of automation
    scripts. Recent test data is used as input and the results are captured for analysis.
    The goal of test automation is to supplement manual testing by reducing the number
    of test cases to be run manually--not to replace manual testing all together.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 手动测试每一个可能的场景既繁琐、劳动密集，又费时费力且昂贵。测试自动化或自动化测试是指在没有人工干预的情况下运行测试用例。尽管并非所有测试用例都符合自动运行的条件，但大部分用例都可以安排自动执行。自动化是通过使用自动化工具运行测试用例，或通过调度自动化脚本来实现的。最近的测试数据作为输入，结果则被捕获以供分析。测试自动化的目标是通过减少需要手动运行的测试用例数量来补充手动测试，而不是完全替代手动测试。
- en: Automation testing is for test cases that are repetitive, monotonous, tedious,
    and time consuming, that have defined input and boundary conditions. It's not
    suitable for frequently changing, ad hoc or first time execution test cases. Software
    automation testing can be based on a few types of frameworks data; keyword, modular,
    and hybrid.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试适用于重复性、单调、繁琐且耗时的测试用例，且这些用例具有明确的输入和边界条件。不适用于频繁变更的、临时的或首次执行的测试用例。软件自动化测试可以基于几种框架类型：数据框架、关键字框架、模块化框架和混合框架。
- en: Testing big data systems encompasses multiple technologies, integrations, frameworks and testing
    modules such as functional, security, usability, performance, integration testing,
    and so on.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 测试大数据系统涉及多种技术、集成、框架和测试模块，如功能测试、安全性测试、可用性测试、性能测试、集成测试等。
- en: 'The benefits of adopting test automation are as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 采用测试自动化的好处如下：
- en: Improve software quality and responsiveness
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高软件质量和响应能力
- en: Quick turnaround by substituting manual effort with automation
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过用自动化替代手动工作实现快速周转
- en: Improve the effectiveness of the overall testing life cycle
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高整体测试生命周期的有效性
- en: Incremental and integration testing for continuous integration and delivery
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成和交付的增量和集成测试
- en: 'A few test automation tools are as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一些测试自动化工具如下：
- en: Visual Studio Test Professional
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Test Professional
- en: QTP (UFT)
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QTP (UFT)
- en: SoapUI
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SoapUI
- en: TestDrive
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TestDrive
- en: FitNesse
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FitNesse
- en: Telerik Test Studio
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Telerik Test Studio
- en: Selenium
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium
- en: TestComplete
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TestComplete
- en: Watir
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Watir
- en: Robotium
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Robotium
- en: Continuous integration
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous integration is a DevOps best practice wherein developers continuously
    integrate their code in small logical units to a common shared repository with
    regularity (for example, once a day). The advantage of such a process is the transparency
    of the code's quality and fitness for its intended purpose. Otherwise, bulk code
    integration after the lapse of a fixed time period could expose many defects or
    integration challenges which could be expensive to resolve.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是一种 DevOps 最佳实践，开发人员将他们的代码以小的逻辑单元连续集成到共享的公共仓库中，并保持规律性（例如，每天一次）。这种过程的优势在于代码质量和适应性透明化。如果不采用这种方式，而是等待固定时间后再进行批量代码集成，可能会暴露出许多缺陷或集成问题，而解决这些问题可能会很昂贵。
- en: 'To achieve continuous integration, there are few prerequisites to be implemented,
    as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现持续集成，需要实现一些前提条件，如下：
- en: Using a version repository for source code
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用版本库来管理源代码
- en: Regular code check in schedule
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期代码提交计划
- en: Automate testing for the code changes
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试代码更改
- en: Automate the build
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化构建
- en: Deploy build in preproduction
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在预生产环境中部署构建
- en: 'The benefits of continuous integration are as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成的好处如下：
- en: Availability of latest code as we commit early and often
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提前并频繁提交最新的代码
- en: Build cycles are faster as build issues are exposed early with check-ins
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于早期暴露了构建问题，构建周期更短，提交更频繁
- en: Transparency in the build process means better ownership and lesser defects
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建过程的透明性意味着更好的责任归属和更少的缺陷
- en: Automating the deployment process leads to quicker turnaround
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化部署过程可实现更快的周转时间
- en: 'Some continuous integration tools that are available are as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的持续集成工具如下：
- en: Jenkins
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins
- en: TeamCity
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TeamCity
- en: Travis
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis
- en: Go CD
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go CD
- en: Buddy
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Buddy
- en: Bitbucket
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bitbucket
- en: Chef
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef
- en: Microsoft Teamcenter
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Teamcenter
- en: CruiseControl
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CruiseControl
- en: Bamboo
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bamboo
- en: GitLab CI
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab CI
- en: CircleCI
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircleCI
- en: Codeship
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Codeship
- en: 'The following  figure represents the roles of continuous integration, delivery,
    and deployment:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了持续集成、持续交付和持续部署的角色：
- en: '![](img/8ee8cc23-8592-40e7-8d38-bafb4e6fbe9a.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ee8cc23-8592-40e7-8d38-bafb4e6fbe9a.png)'
- en: Continuous delivery
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous delivery is the next step of continuous integration in the software
    development cycle; it enables rapid and reliable development of software and delivery
    of product with the least amount of manual effort or overhead. In continuous integration,
    as we have seen, code is developed incorporating reviews, followed by automated
    building and testing.  In continuous delivery, the product is moved to the preproduction
    (staging) environment in small frequent units to thoroughly test for user acceptance.
    The focus is on understanding the performance of the features and functionality
    related issues of the software. This enables issues related to business logic
    to be found early in the development cycle, ensuring that these issues are addressed
    before moving ahead to other phases such as deployment to the production environment
    or the addition of new features. Continuous delivery provides greater reliability
    and predictability on the usability of the intended features of the product for
    the developers. With continuous delivery, your software is always ready to release
    and the final deployment into production is a manual step as per timings based
    on a business decision.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是软件开发周期中持续集成的下一步；它通过尽量减少人工努力和开销，实现软件的快速、可靠开发和产品交付。在持续集成中，正如我们所见，代码开发结合了审查，接着是自动化构建和测试。在持续交付中，产品以小的、频繁的单位移动到预生产（暂存）环境中，进行彻底的用户验收测试。重点是了解软件功能和性能相关的问题。这使得与业务逻辑相关的问题能在开发周期早期被发现，确保在进入生产环境部署或添加新功能等其他阶段之前解决这些问题。持续交付为开发人员提供了更高的可靠性和可预测性，确保预定功能的可用性。通过持续交付，您的软件始终准备好发布，最终的生产部署是根据业务决策在时间上手动进行的步骤。
- en: 'The benefits of the continuous delivery process are as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付过程的好处如下：
- en: Developed code is continuously delivered
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发的代码不断交付
- en: Code is constantly and regularly reviewed
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码不断且定期接受审查
- en: High-quality software is deployed rapidly, reliably, and repeatedly
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高质量的软件被快速、可靠且重复地部署
- en: Maximum automation and minimal manual overhead
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化自动化，最小化人工开销
- en: The tools that perform continuous integration do the job of continuous delivery
    as well.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 执行持续集成的工具同样完成持续交付的工作。
- en: Continuous deployment
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续部署
- en: Continuous deployment is the fully matured and complete process cycle of code
    change, passing through every phase of the software life cycle to be deployed
    to production environments.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是代码更改的完全成熟和完整的过程周期，涵盖了软件生命周期的每个阶段，最终将代码部署到生产环境中。
- en: Continuous deployment requires the entire process to be automated--also termed
    as automated application release--through all stages, such as the packaging of
    the application, ensuring the dependencies are integrated, deployment testing,
    and the production of adequate documentation for compliance.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署要求整个过程实现自动化——也称为自动化应用发布——涵盖所有阶段，如应用打包、确保依赖项集成、部署测试，以及为合规性生成充分的文档。
- en: 'The benefits of continuous deployment and automated application release are
    as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署和自动化应用发布的好处如下：
- en: Frequent product releases deliver software as fast as possible
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁的产品发布尽可能快地交付软件
- en: Automated and accelerated product releases with the code change
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过代码更改实现自动化和加速的产品发布
- en: Code changes qualify for production both from a technical and quality view point
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码更改从技术和质量角度都符合生产要求
- en: The most current version of the product is ready in shippable format
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品的最新版本以可交付格式准备好
- en: Deployment modeling reduces errors, resulting in better product quality
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署建模减少了错误，从而提高了产品质量
- en: Consolidated access to all tools, process and resource data leads to quicker
    troubleshooting and time to market
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中访问所有工具、流程和资源数据有助于更快地故障排除和缩短市场时间
- en: Effective collaboration between dev, QA, and operation teams leads to higher
    output and better customer satisfaction
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发、质量保证和运营团队之间的有效协作提高了产出和客户满意度
- en: Facilitates lower audit efforts owing to a centralized view of all phase activities
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于集中查看所有阶段的活动，减少了审计工作量
- en: The tools that perform continuous integration do the job of continuous delivery
    as well.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 执行持续集成的工具也完成持续交付的工作。
- en: Infrastructure as Code
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: '**Infrastructure as Code** (**IaC**) is a means to perform infrastructure services
    through the defining of configuration files. In DevOps'' scope, IaC is the automation
    of routine tasks through code, typically as configuration definition files, such
    as shell scripts, Ansible playbooks, Chef recipes, or Puppet manifests. It''s
    usually a server and client setup with push or pull-based mechanisms, or agentless
    through **secured shell** (**SSH**). Many regular tasks on systems such as create,
    start, stop, delete, terminate, and restarting virtual or bare-metal machines
    are performed through software. In traditional on-premise systems, many of the
    system administrative tasks were manual and person dependent. However, with the
    explosion of big data with cloud computing, all the regular system activities
    and tasks are managed like any software code. They are maintained in code repositories,
    and the latest build updates are tested for deployment.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础设施即代码**（**IaC**）是一种通过定义配置文件来执行基础设施服务的方式。在DevOps的范围内，IaC是通过代码自动化日常任务，通常是配置定义文件，如Shell脚本、Ansible剧本、Chef食谱或Puppet清单。通常是服务器和客户端的设置，采用推送或拉取机制，或者通过**安全外壳**（**SSH**）无代理进行操作。许多常规的系统任务，如创建、启动、停止、删除、终止和重启虚拟机或裸金属机器，都是通过软件来执行的。在传统的本地系统中，许多系统管理任务都是手动的，并且依赖于人为操作。然而，随着大数据和云计算的爆炸式发展，所有常规的系统活动和任务都像软件代码一样进行管理。它们被保存在代码仓库中，并且最新的构建更新会经过测试以进行部署。'
- en: 'The advantages of IaC are as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: IaC的优点如下：
- en: The use of definition files and code to update system configuration is quick
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用定义文件和代码更新系统配置非常快捷
- en: The version of all the code and changes is less error prone and has reproducible
    results
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有代码及其更改的版本更加不易出错，并且具有可复现的结果
- en: Thorough testing of the deployment with IaC and test systems
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对IaC部署和测试系统的彻底测试
- en: Smaller regular changes are easy to manage, bigger infrastructure updates are
    likely to contain errors that are difficult to detect
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较小的常规更改容易管理，而较大的基础设施更新可能包含难以检测的错误
- en: Audit tracking and compliance are easy with definition files
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用定义文件进行审计追踪和合规性检查非常容易
- en: Multiple servers update simultaneously
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多台服务器同时更新
- en: System availability is high, with less down time
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统可用性高，停机时间少
- en: 'Some tools for IaC are as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一些基础设施即代码（IaC）工具如下：
- en: Ansible tower
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible Tower
- en: CFEngine
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CFEngine
- en: Chef
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 厨师
- en: Puppet
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet
- en: SaltStack
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaltStack
- en: Routine automation
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常规自动化
- en: Every organization aims to automate routine, repetitive tasks; in fact the survival
    of most companies and software products is based on the degree to which they automate.
    ERP systems, data visualization, domain applications, data analytics, and so on;
    almost all segments are potential areas for automation. A few sections to automate
    are infrastructure (deployment, patching scalability), applications (development,
    integration, builds, delivery, deployment), load balancers, feedback, and defects/errors
    management.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组织都致力于自动化日常的重复任务；事实上，大多数公司和软件产品的生存依赖于它们自动化的程度。企业资源规划（ERP）系统、数据可视化、领域应用、数据分析等几乎所有环节都可以进行自动化。一些自动化的领域包括基础设施（部署、补丁、可扩展性）、应用程序（开发、集成、构建、交付、部署）、负载均衡器、反馈和缺陷/错误管理。
- en: There are several tools to automate each segment, as we have seen in the previous
    sections; we will explore their application in coming chapters.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个工具可以自动化每个环节，正如我们在前面的章节中所见，我们将在接下来的章节中探索它们的应用。
- en: Key application performance monitoring/indicators
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键应用性能监控/指标
- en: Performance metrics are part of every tool, product and service. Accordingly,
    organizations are ever vigilant of the performance metrics monitoring of their
    applications, products and services. To achieve high-quality output for any product,
    achieving a high degree of standard in process and metrics is prerequisite. There
    are many parameters to gauge performance metrics, such as, for example, applications
    or hardware systems availability or uptime versus downtime and responsiveness,
    tickets categorization, acknowledgement, resolution time lines, and so on.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 性能指标是每个工具、产品和服务的一部分。因此，组织始终保持对其应用程序、产品和服务的性能指标监控的警觉。为了实现任何产品的高质量输出，首先必须达到一定的标准化过程和度量标准。衡量性能指标有许多参数，例如：应用程序或硬件系统的可用性或运行时间与停机时间的对比和响应能力，工单分类、确认、解决时间表等。
- en: DevOps is all about measuring the metrics and feedback, with continuous improvement
    processes.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 关注的是度量指标和反馈，并通过持续改进流程推动发展。
- en: Several tools are available for application monitoring for various needs; we
    will cover the most appropriate and applicable tools in the context of the DevOps
    framework in further sections of this chapter.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种工具可用于各种需求的应用监控；我们将在本章后续部分中讨论在 DevOps 框架背景下最合适和最适用的工具。
- en: DevOps frameworks
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 框架
- en: Under DevOps frameworks we will study the life cycle models, maturity states,
    progression and best practices frameworks, as well as Agile methodology.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 框架下，我们将研究生命周期模型、成熟度状态、进展与最佳实践框架，以及敏捷方法论。
- en: Accomplishing DevOps maturity is a gradual progression to being well structured
    and planned, as stated in the following stages.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 DevOps 成熟度是一个逐步的过程，朝着良好的结构化和规划目标前进，如以下各阶段所述。
- en: DevOps maturity life cycle
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 成熟度生命周期
- en: 'DevOps project phases are on lines of the software development life cycle as
    described here. We will dwell on each phase in detail:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 项目的各个阶段与软件开发生命周期相对应，具体描述见此处。我们将详细探讨每个阶段：
- en: '**Discovery and requirements phase:  **The DevOps discovery phase is a highly
    interactive project phase for gathering inputs and feedback on the current state
    of process, frameworks and tools from key stakeholders. Templates and checklists
    are used to capture the inputs.  The timeline for the phase depends on the availability
    of key stakeholders, the existence of requisite documents, and the complexity
    of the processes to explore. Discovery phase deliverables are as follows:'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发现与需求阶段：** DevOps 发现阶段是一个高度互动的项目阶段，旨在从关键利益相关者处收集当前流程、框架和工具的输入与反馈。模板和检查表用于捕捉这些输入。该阶段的时间线取决于关键利益相关者的可用性、所需文档的存在以及待探索流程的复杂性。发现阶段的交付物如下：'
- en: Templates detailing the current state of process, tools, frameworks
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细描述当前流程、工具、框架状态的模板
- en: Signoff from key stakeholders on the details collated
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键利益相关者对收集的详细信息的签署确认
- en: Existing best practices and DevOps methods
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有最佳实践和 DevOps 方法
- en: Existing challenges, constraints as applicable
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有挑战、约束（如适用）
- en: Reusable tools, process, artifacts
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重用的工具、流程、工件
- en: '**Design print phase:** The design phase is also the architecture phase; it''s
    about producing a blueprint of the target state to accomplish. It''s an iterative
    process of weighing alternatives for tools, and processes arriving at agreement
    by key stakeholders. The timeline and cost will be base lined and revisited and
    revised regularly based on new learnings from the project as we move forward towards
    the target state. The timeline for this phase depends on how acceptable the processes,
    tools, and budgets are to the key stakeholders. Design phase deliverables are
    as follows:'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计阶段：** 设计阶段也是架构阶段；它旨在制作出实现目标状态的蓝图。这是一个反复权衡工具和流程替代方案的过程，最终通过关键利益相关者达成一致。时间线和成本将基准化，并根据项目的新发现进行定期回顾和修订。该阶段的时间线取决于关键利益相关者对流程、工具和预算的接受度。设计阶段的交付物如下：'
- en: Target state is agreed upon
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已达成目标状态共识
- en: Baseline of DevOps process to be adopted
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将要采用的 DevOps 流程基线
- en: Baseline of most viable tools to be implemented
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最可行工具的基线，准备实施
- en: Baseline agreed timelines and cost
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商定的时间线和成本基线
- en: '**Development phase:  **Artifacts base lined from the blueprint phase will
    be inputs for the development phase; the agreed upon process changes, tools to
    be implemented, frameworks to be adopted, and so on.  A detailed project plan
    covering deliverables, schedules, dependencies, constraints, resource leveling,
    and so on will be quite handy. Agile scrum methodology will be the framework to
    implement the DevOps, which will be discussed in detail. The timeline for the
    development phase will be as per the project plan base lined initially, and revised
    regularly with the progress of milestones that have been accomplished. Development
    phase deliverables are as follows:'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发阶段：** 从蓝图阶段基准的工件将作为开发阶段的输入；包括已商定的流程变更、要实施的工具、要采纳的框架等。一个涵盖交付物、时间表、依赖关系、约束条件、资源平衡等的详细项目计划将非常有用。敏捷
    Scrum 方法论将是实施 DevOps 的框架，并将在后续详细讨论。开发阶段的时间线将根据最初基准的项目计划来制定，并随着已完成的里程碑进度定期修订。开发阶段的交付物如下：'
- en: Initial project plan base lined and signoff
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初步项目计划已基准并已签署确认
- en: Incorporating regular feedback till project completion
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目完成之前持续收集反馈
- en: Allocation of resources for each stage
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个阶段的资源分配
- en: Including new skills, methods, process, and tools
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括新技能、新方法、新流程和工具
- en: Work arounds for project risks, constraints, and so on
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对项目风险、约束等的解决方案
- en: Deliverables as agreed in the project plan
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照项目计划约定的交付物
- en: '**Deployment phase:** The DevOps deployment phase is in accordance with the
    best practices outlined in the DevOps process framework detailed above. It depends
    on whether the deployment is a process, an application tool, or for infrastructure.
    The timeline will be evaluated as per experience gained in the development phase. Deployment
    phase deliverables are as follows:'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署阶段：** DevOps 部署阶段遵循上述 DevOps 流程框架中详细列出的最佳实践。它取决于部署的是流程、应用工具，还是基础设施。时间线将根据开发阶段积累的经验进行评估。部署阶段的交付物如下：'
- en: Deployment guide--cutover plan to production
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署指南——生产环境切换计划
- en: Deployment checklist
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署检查清单
- en: Signoff from key stakeholders
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键利益相关者的签字确认
- en: Rollback plan
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚计划
- en: Capacity planning
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容量规划
- en: '**Monitoring phase:** Monitors the key performance factors for each phase''s
    performance of development, build, integration and deployment over time duration.
    It''s followed by tracking the defects, bug fixes, user tickets and plans for
    continuous improvement. Monitoring phase timelines are as per organization need
    and performance benchmarks. Monitoring phase deliverables are as follows:'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控阶段：** 监控每个阶段在开发、构建、集成和部署过程中的关键性能因素，随着时间的推移进行跟踪。接着是跟踪缺陷、漏洞修复、用户反馈和持续改进的计划。监控阶段的时间线依据组织的需求和性能基准来设定。监控阶段的交付物如下：'
- en: Operations manual
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作手册
- en: Feedback forms and checklists
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反馈表和检查清单
- en: User guide, support manual
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户指南，支持手册
- en: Process flow manual
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程手册
- en: Performance benchmark
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能基准
- en: DevOps maturity map
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 成熟度图
- en: 'DevOps adoption is a value-added journey for an organisation. It''s not something
    achieved overnight quickly, but matured step by step over a period of time with
    manifested results. Like any **Capability Maturity Model** (**CMMI**) or Process
    Maturity Models, the critical success factors are to be defined for the program''s
    performance objectives. The initial maturity state of key evaluation parameters
    is agreed upon by key stakeholders. Then the target maturity level of the parameter
    variables to be accomplished will be defined in the project charter, along with
    detailed procedure, milestones, budgets and constraints as approved by stakeholders:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 采用是一个为组织增值的过程。它不是一蹴而就的，而是随着时间的推移，逐步成熟并显现出成效。就像任何**能力成熟度模型**（**CMMI**）或流程成熟度模型一样，关键的成功因素必须定义为程序的绩效目标。关键评估参数的初步成熟度状态由关键利益相关者达成一致。然后，项目章程中将定义要实现的参数变量的目标成熟度水平，并详细列出程序、里程碑、预算和由利益相关者批准的约束：
- en: '![](img/d632de0c-0df5-4ae0-ae24-716b92497688.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d632de0c-0df5-4ae0-ae24-716b92497688.png)'
- en: DevOps process maturity framework.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 流程成熟度框架
- en: DevOps progression framework/readiness model
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 进展框架/准备度模型
- en: 'As discussed in the previous model, DevOps adoption is a journey for an organisation
    to higher maturity states. In the following table, different practice areas and
    maturity levels of DevOps at a broad scale are listed. DevOps maturity levels
    may vary across teams as per their standards, similarly even a common department
    or division of the same organization may have significantly more varied and advanced
    practices than others for the same process flow. Enhancing to achieve the best
    possible DevOps process workflow throughout the entire enterprise should be the
    end goal for all teams and departments:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面模型中所讨论的，DevOps 的采用是组织向更高成熟度状态发展的过程。以下表格列出了 DevOps 在广泛范围内的不同实践领域和成熟度水平。DevOps
    的成熟度水平可能会根据团队的标准有所不同，甚至同一组织的不同部门或分支机构，在相同流程下，可能会有显著更为先进的实践。提升到整个企业的最佳 DevOps 流程工作流应成为所有团队和部门的最终目标：
- en: '![](img/41ecf58b-cea3-4852-a4cb-6503db11fb38.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41ecf58b-cea3-4852-a4cb-6503db11fb38.png)'
- en: DevOps maturity checklists
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 成熟度检查清单
- en: The process maturity framework, as seen in the preceding sections, is assessed
    with checklists and discussions. For each of the key focus areas, the detailed
    findings will indicate the maturity levels.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如前节所见，流程成熟度框架通过检查清单和讨论进行评估。对于每个关键重点领域，详细的发现将指示成熟度水平。
- en: 'The findings provide a general estimate of the maturity level and the impact
    it is causing:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 发现的结果提供了成熟度水平的一般估计，并评估其产生的影响：
- en: '![](img/784061ac-ce01-43c9-9639-a45101764a98.png)![](img/64b74c0c-0811-4553-8d74-c5ae8400e2dc.png)![](img/3226a40f-1033-40a1-8bfb-0019497ba188.png)![](img/77d7dd9e-c987-4c58-9207-6425bd05ed0d.png)![](img/5115fed1-92a5-4cea-8906-355c69db59dd.png)![](img/f78e013d-7631-43c0-9bec-b0d4aa1b60a4.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/784061ac-ce01-43c9-9639-a45101764a98.png)![](img/64b74c0c-0811-4553-8d74-c5ae8400e2dc.png)![](img/3226a40f-1033-40a1-8bfb-0019497ba188.png)![](img/77d7dd9e-c987-4c58-9207-6425bd05ed0d.png)![](img/5115fed1-92a5-4cea-8906-355c69db59dd.png)![](img/f78e013d-7631-43c0-9bec-b0d4aa1b60a4.png)'
- en: Agile framework for DevOps process projects
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 过程项目的敏捷框架
- en: DevOps projects are typically Agile-framework based, for the effective and quick
    turnaround of the development and implementation process cycle.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 项目通常基于敏捷框架，以实现开发和实施过程的高效快速周转。
- en: Agile software development-based projects have become widely accepted and adopted
    across the industry.  The traditional waterfall model is outdated and unable to
    keep up with the advantages offered by Agile methodology.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 基于敏捷软件开发的项目已经在行业内得到广泛接受和采纳。传统的瀑布模型已经过时，无法跟上敏捷方法论带来的优势。
- en: 'Agile methodology owes its success to its core objectives:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷方法论的成功归功于其核心目标：
- en: Individuals and interactions are valued over process and tools
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人和互动优先于流程和工具
- en: Working software is valued over comprehensive documentation
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作软件优先于全面文档
- en: Customer collaboration is valued over contract negotiation
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户协作优先于合同谈判
- en: Change adoption agility is valued over project plan adherence
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更采纳灵活性优于项目计划遵循
- en: Agile ways of development
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷开发方法
- en: 'Scrum is the Agile development methodology, focused on features development,
    from a team comprising of roles such as the following:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum 是一种敏捷开发方法，专注于功能开发，由以下角色组成的团队来执行：
- en: The scrum master is responsible for team setup, conducting sprint meetings,
    and removing development obstacles
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scrum Master 负责团队组建、主持冲刺会议和消除开发障碍
- en: The product owner creates and prioritizes product backlog, and is responsible
    for the delivery of the functionality at each sprint iteration cycle
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品负责人创建并优先排序产品待办事项列表，并负责每个冲刺迭代周期内功能的交付
- en: The scrum team manages and organizes the work to complete in the sprint cycle
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scrum 团队负责管理和组织在冲刺周期内完成的工作
- en: The product backlog is the list of features and requirements of functionality
    to be developed
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品待办事项列表是要开发的功能特性和需求的清单
- en: 'The Agile method of development is an incremental and iterative approach for
    developing user stories, software features or functionality. Customers can see
    the product features early and make necessary changes, if needed.  The development
    cycle is broken into sprint cycles of two to four weeks, to accomplish units of
    work. The idea is that smaller cycles can be developed and managed quickly with
    a team of developers and testers together. The structure and documentation are
    not important but a working feature of the code is considered valuable. The development
    process is iteratively accomplished in successive sprint cycles. Bugs identified
    are fixed at the earliest sprint with successful testing. Regression testing is
    performed when new functions or logic are developed. User acceptance tests are
    performed after the sprint cycle to flag the product for release:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发方法是一种增量和迭代的方法，用于开发用户故事、软件功能或功能模块。客户可以早期看到产品特性，并在需要时做出必要的更改。开发周期被划分为两个到四周的冲刺周期，以完成工作单元。其理念是，较小的周期能够与开发人员和测试人员共同快速开发和管理。结构和文档不重要，但工作特性被认为是有价值的。开发过程在连续的冲刺周期中迭代完成。发现的缺陷会在最早的冲刺中修复并成功测试。当开发新功能或逻辑时，会进行回归测试。用户验收测试会在冲刺周期后进行，以标记产品是否可以发布：
- en: '![](img/0e767ff1-3294-4b04-b104-ccda46ca4b0d.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e767ff1-3294-4b04-b104-ccda46ca4b0d.png)'
- en: 'The benefits of adopting the best practices of Agile software development are
    as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 采用敏捷软件开发最佳实践的好处如下：
- en: Working software makes the customer satisfied, as he can view the features
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作软件能够让客户满意，因为他可以查看功能特性
- en: Customers can add change requests at any phase of development
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以在任何开发阶段添加变更请求
- en: Quick and continuous delivery of software in weeks
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件能够在几周内快速且持续交付
- en: Projects are built around motivated individuals, who should be trusted
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目围绕着有动机的个体构建，并且应当信任这些个体
- en: Sprint teams are highly skilled and efficient in delivery
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冲刺团队在交付方面具备高技能和高效率
- en: Since developers and testers codevelop, bugs are solved within sprint
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于开发人员和测试人员共同开发，缺陷将在冲刺周期内解决
- en: The communication mode is effective so quality of product delivered is higher
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沟通方式有效，因此交付的产品质量更高
- en: Continuous attention to technical excellence leads to good design
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续关注技术卓越带来良好的设计
- en: Self-organizing teams focus on optimal architectures, requirements, and designs
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自组织团队专注于最佳架构、需求和设计
- en: The team is lean and effective, so productivity is maximised
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队精简且高效，因此生产力得到了最大化
- en: Summary
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we understood the application of DevOps processes, frameworks,
    best practices, and DevOps process maturity frameworks and progression models
    with checklist templates. We also looked into Agile terminology and methodology.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了DevOps流程、框架、最佳实践以及DevOps流程成熟度框架和进展模型，并且配有检查表模板。我们还探讨了敏捷术语和方法论。
- en: In the next chapter, we will cover in detail the big data ecosystem, different
    frameworks, Hadoop clusters, nodes, capacity planning, and so on.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将详细讲解大数据生态系统、不同的框架、Hadoop集群、节点、容量规划等内容。
