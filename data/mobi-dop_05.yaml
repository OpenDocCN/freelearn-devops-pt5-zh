- en: Implementing Automatic Testing Using Xamarin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Xamarin 实现自动化测试
- en: In today's world of fast-paced development and frequent distribution, an application
    needs to be delivered as fast as possible and the development lifecycle must be
    reduced to meet this goal of fast delivery. Testing is one of the most important
    aspects of software development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天这个快速发展的世界里，应用程序需要尽可能快地交付，开发生命周期必须缩短以达到这一快速交付的目标。测试是软件开发中最重要的方面之一。
- en: In the case of mobile applications, they need to be tested on all possible supported
    devices to make sure they deliver smoothly on all targeted devices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于移动应用程序来说，它们需要在所有可能支持的设备上进行测试，以确保它们在所有目标设备上平稳运行。
- en: 'Let''s have a look at the topics we''ll be learning in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看本章中我们将要学习的内容：
- en: Importance of automation testing in the DevOps cycle
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试在 DevOps 循环中的重要性
- en: Writing automatic UI tests with **Xamarin.UITest**
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Xamarin.UITest** 编写自动化 UI 测试
- en: Using Xamarin Test Cloud to test an application on multiple physical devices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Xamarin Test Cloud 在多个物理设备上测试应用程序
- en: Understanding the importance of automation testing in the DevOps cycle
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解自动化测试在 DevOps 循环中的重要性
- en: Testing is one of the most important factors when it comes to application development.
    Developers do their best to develop a sophisticated application that runs smoothly.
    But there are always scenarios that developers cannot think of, just because they
    can only be tested when the application is used with the mindset of an end user.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是应用程序开发中的一个重要因素。开发人员尽力开发一个平稳运行的复杂应用程序，但总会有一些开发人员无法预见的场景，因为只有在以最终用户的心态使用应用程序时，才可以进行测试。
- en: While developers are working hard to develop the application, it is crucial
    for the application to be tested with the user in mind, and to test things a developer
    wouldn't think of.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管开发人员正在努力开发应用程序，但对应用程序进行以用户为中心的测试，并测试开发人员未曾想到的内容，至关重要。
- en: Testers are there to make sure that the application performs as intended, and
    that one feature does not affect the other features in an application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员的职责是确保应用程序按预期运行，并且一个功能不会影响应用程序中的其他功能。
- en: While it is great to have manual testers testing the application, and it does
    make sure that the application is tested and used as an end user would actually
    use it in the real world, it is not always the best choice to only have manual
    testers test the application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有人工测试员测试应用程序是件好事，而且确实能确保应用程序像真实世界中的最终用户一样被测试和使用，但仅依赖人工测试员测试应用程序并不是最好的选择。
- en: Testing a mobile application
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试移动应用程序
- en: With a web application or a desktop application, the number of platform versions
    and devices to test with is very low.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Web 应用程序或桌面应用程序，测试的操作系统版本和设备数量非常少。
- en: It is always simpler to have manual testers test the application, find out the
    shortcomings and defects in an application, and notify the developers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让人工测试员测试应用程序，找出应用程序中的不足和缺陷，并通知开发人员，通常是更简单的。
- en: But when it comes to mobile applications, the story completely changes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当涉及到移动应用程序时，情况完全不同。
- en: If we only talk about an Android application, for example, let's have a look
    at the number of challenges in testing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只谈论一个 Android 应用程序，例如，来看看在测试中面临的挑战数量。
- en: Challenges in testing a mobile application
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试移动应用程序的挑战
- en: 'There are many challenges when it comes to testing a mobile app:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试移动应用程序时面临许多挑战：
- en: Testing against a real environment
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在真实环境中进行测试
- en: Deploying and testing frequently
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常部署和测试
- en: Continuous feedback
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续反馈
- en: Testing against a real environment
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在真实环境中进行测试
- en: 'The most important thing for mobile developers is that the final app works
    across all target devices. Using emulators or simulators is fine in the earliest
    phase of development, but when the app becomes more sophisticated and is about
    to get released to the market, the only acceptable way is to test mobile apps
    on real devices:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于移动开发者来说，最重要的事情是确保最终的应用程序在所有目标设备上都能正常工作。在开发的最早阶段，使用模拟器或仿真器是可以的，但当应用程序变得更加复杂并且即将发布到市场时，唯一可接受的方式是通过真实设备测试移动应用程序：
- en: '![](img/03a0fb50-b68a-470c-af13-a0b757238b71.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03a0fb50-b68a-470c-af13-a0b757238b71.png)'
- en: Deploy and test frequently
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 经常部署和测试
- en: Mobile applications are updated almost every week, or at least twice a month.
    So, they need to be tested even more frequently.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序几乎每周都会更新，或者至少每月更新两次。因此，它们需要更频繁地进行测试。
- en: Mobile applications should be tested with every nightly build, so defects can
    be recognized earlier and fixed sooner. Testing the same feature again and again
    efficiently and frequently might not be the best solution, and can slow down the
    process of delivery. If we have automation in place for repeated tasks, that can
    save a lot of time to market. Continuous development and testing enables companies
    to deliver to market.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序应该在每个夜间构建时进行测试，这样可以更早地发现缺陷并更快地修复它们。频繁而高效地测试相同的功能可能不是最佳解决方案，并且可能会拖慢交付过程。如果我们对重复任务有自动化处理，那将为我们节省大量时间，加速市场推广。持续开发和测试使得公司能够更快地向市场交付产品。
- en: Continuous feedback
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续反馈
- en: 'Continuous feedback goes along with frequently deploying and testing the application.
    As we have learned, the manual process of completing repetitive tasks takes up
    a lot of our time that can and should be saved in order to deliver to market faster.
    In the same way, getting continuous feedback from testing and production is very
    important to the quality of the application:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 持续反馈与频繁部署和测试应用程序相辅相成。正如我们所学，手动完成重复任务的过程占用了大量时间，而这些时间本应节省下来以便更快地交付到市场。同样，来自测试和生产环境的持续反馈对于应用程序的质量至关重要：
- en: '![](img/d69a369e-9a49-4b04-acb2-a50dc1922d35.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d69a369e-9a49-4b04-acb2-a50dc1922d35.png)'
- en: To overcome all these challenges in mobile application testing, we need to adopt
    a DevOps mindset, make testing an automated and integrated part of our development
    cycle, and have it happen on each build automatically (and give feedback to developers
    so they can take action in the early stages of development).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服移动应用测试中的所有挑战，我们需要采纳DevOps思维方式，将测试作为开发周期中自动化和集成的一部分，并使其在每次构建时自动执行（并向开发者反馈，以便他们在开发的早期阶段采取行动）。
- en: Writing tests with Xamarin.UITest
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Xamarin.UITest编写测试
- en: Before we start writing UI tests with Xamarin.UITest, it is good to have a brief
    look at what unit testing is and how Xamarin.UITest is going to help us achieve
    our goal of automated testing for our mobile application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用Xamarin.UITest编写UI测试之前，了解一下单元测试是什么，以及Xamarin.UITest将如何帮助我们实现移动应用程序自动化测试的目标，是很有帮助的。
- en: Xamarin.UITest
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xamarin.UITest
- en: Xamarin.UITest is a testing framework based on a popular test library in C#,
    **NUnit**. If you have used NUnit in your C# projects previously for unit testing,
    it will be really helpful to understand Xamarin.UITest faster. But if you don't
    have prior experience in NUnit, it's absolutely fine.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.UITest是一个基于C#中流行测试库**NUnit**的测试框架。如果你以前在C#项目中使用过NUnit进行单元测试，那么理解Xamarin.UITest会更加得心应手。但如果你没有NUnit的经验，也完全没问题。
- en: It is basically a set of libraries for C# (similar to JUnit for Java) to help
    write unit tests.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上是C#的一组库（类似于Java的JUnit），用于帮助编写单元测试。
- en: And by using UITest, we will be writing UI tests for our mobile application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UITest时，我们将为移动应用编写UI测试。
- en: Fundamentals of UITest
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UITest基础知识
- en: 'UITest, or in general any NUnit-based test, has a defined structure to follow:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: UITest，或者一般来说，任何基于NUnit的测试，都有一个明确的结构需要遵循：
- en: '**Test fixture**: Test fixture is a class containing tests, and it also does
    the initial setup for any test to be executed or any task that needs to be done
    after the test has finished executing'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试夹具**：测试夹具是一个包含测试的类，同时也进行任何测试执行前的初始化设置，或者任何在测试执行完毕后需要完成的任务。'
- en: '**Test**: UITest is written as a method inside the test fixture class'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：UITest作为一种方法写在测试夹具类中'
- en: Understanding the AAA pattern
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解AAA模式
- en: '**The Arrange-Act-Assert** (**AAA**) pattern should be followed when writing
    a UITest, to achieve the best results and fast feedback from the test. As the
    name suggests, it consists of three steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arrange-Act-Assert**（**AAA**）模式应该在编写UITest时遵循，以达到最佳效果并从测试中获得快速反馈。顾名思义，它包括三个步骤：'
- en: '**Arrange**: Eponymously, this step contains all the actions that help arrange
    the test, for example, initialization of things required later while running the
    test, setting up the environment, and much more.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安排**：顾名思义，这一步包含所有有助于安排测试的操作，例如初始化测试过程中后续所需的事物、设置环境等等。'
- en: '**Act**: This is when the test performs the desired interaction with the application,
    such as entering text, pushing a button, and so on.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行**：这是测试与应用程序进行期望交互的时刻，例如输入文本、点击按钮等。'
- en: '**Assert**: Assert is when our UITest asserts whether the interaction gave
    us the desired outcome or not, such as verifying that an error message was displayed.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Assert**：Assert是在我们的UITest中检查交互是否产生了预期结果，例如验证是否显示了错误消息。'
- en: Adding a UITest project to Solution
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向解决方案中添加UITest项目
- en: 'Let''s get back to Visual Studio and set up a new test project to write Xamarin.UITest:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到Visual Studio，设置一个新的测试项目来编写Xamarin.UITest：
- en: 'Right-click on Solution | Add | New Project:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击解决方案 | 添加 | 新建项目：
- en: '![](img/db1aee05-a673-41ed-8924-241ee388cfb8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db1aee05-a673-41ed-8924-241ee388cfb8.png)'
- en: 'In the Add New Project window, click on Test from the left section and then
    select UI Test App (Xamarin.UITest | Android), because we are going to write a
    test for our Android application. Give this project a name in the Name section
    and click OK:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”窗口中，点击左侧的Test，然后选择UI Test App（Xamarin.UITest | Android），因为我们将为我们的Android应用程序编写测试。在名称部分给这个项目命名，然后点击OK：
- en: '![](img/a824af11-9c0d-41f2-b9d4-f2de6fb9a513.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a824af11-9c0d-41f2-b9d4-f2de6fb9a513.png)'
- en: 'Visual Studio will create a new test project now. Once it is done, you should
    be able to see a new project created under Solution:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio现在会创建一个新的测试项目。完成后，你应该能看到在解决方案下创建了一个新项目：
- en: '![](img/6b863493-1f03-4531-a25c-b3912f96ac98.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b863493-1f03-4531-a25c-b3912f96ac98.png)'
- en: 'This new test project that we created through the Android Test Project template
    should also include the necessary Nuget packages required to run Xamarin.UITest.
    Those packages are:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过Android Test Project模板创建的这个新测试项目应该也包括运行Xamarin.UITest所需的NuGet包。这些包包括：
- en: NUnit
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: NUnit
- en: NUnit Test Adapter, to run UITests locally
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: NUnit测试适配器，用于本地运行UITests
- en: Xamarin.UITest, the framework we'll use to write tests
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xamarin.UITest，我们将用来编写测试的框架
- en: These are available in the form of Nuget packages, but usually come with the
    template we used to create the UITest project.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以作为NuGet包的形式提供，但通常会随我们用来创建UITest项目的模板一起提供。
- en: 'To make sure these required packages are available and installed, right-click
    on the UITest project and click on Manage Nuget Packages:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保这些必需的包可用并已安装，右键点击UITest项目，然后点击管理NuGet包：
- en: '![](img/0eea6fec-d259-4669-9bd5-6d443dec502a.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0eea6fec-d259-4669-9bd5-6d443dec502a.png)'
- en: 'On the next screen, you should be able to see the packages listed:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，你应该能看到列出的包：
- en: '![](img/7365c741-3df5-4c31-ac25-9764a769a2b1.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7365c741-3df5-4c31-ac25-9764a769a2b1.png)'
- en: Visual Studio suggests an update for the NUnit package to 3.X.X, but don't update
    NUnit because Xamarin.UITest does not work with NUnit 3.x. At the time of writing,
    it is compatible with 2.6.x. Also, because a version of Test Adapter is specific
    to a version of NUnit framework, it's better not to update Test Adapter either.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio建议将NUnit包更新到3.X.X版本，但不要更新NUnit，因为Xamarin.UITest与NUnit 3.x不兼容。撰写时，它与2.6.x版本兼容。此外，由于Test
    Adapter的版本与NUnit框架的版本相关联，因此最好也不要更新Test Adapter。
- en: Next, we need to add a reference to the application project, so the UITest project
    can build and run the application.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加对应用程序项目的引用，以便UITest项目可以构建并运行该应用程序。
- en: 'Right-click on References under the UITest project and click on Add Reference:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击UITest项目下的References，然后点击添加引用：
- en: '![](img/e8762ea6-5aa7-49aa-8595-670ed07b92ad.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8762ea6-5aa7-49aa-8595-670ed07b92ad.png)'
- en: 'On the next screen, select Projects from the left section, then select PhoneCallApp
    (the application project we want to test), and click OK:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，选择左侧的Projects，然后选择PhoneCallApp（我们要测试的应用程序项目），然后点击OK：
- en: '![](img/106780e7-3649-42d6-9e1b-7ed090281009.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/106780e7-3649-42d6-9e1b-7ed090281009.png)'
- en: 'Once you have added the application project, you should be able to see the
    reference added in Solution Explorer:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你添加了应用程序项目，你应该能够在解决方案资源管理器中看到添加的引用：
- en: '![](img/e8040405-5ab9-43e2-8e34-d46f90efadbc.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8040405-5ab9-43e2-8e34-d46f90efadbc.png)'
- en: As the application project and the UITest project are under the same solution,
    it is enough to add a reference to the application project, as shown in the previous
    step. But if you want to have both projects in different solutions, or if you
    want to test the application on Android 6.0, then Visual Studio requires you to
    supply the path to the APK in your system.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于应用程序项目和UITest项目位于同一解决方案下，因此只需像前一步那样添加对应用程序项目的引用即可。但如果你想将两个项目放在不同的解决方案中，或者如果你希望在Android
    6.0上测试应用程序，那么Visual Studio会要求你提供系统中APK的路径。
- en: 'To give this path, open the `Tests.cs` file under the UITest project:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要提供此路径，请打开UITest项目下的`Tests.cs`文件：
- en: '![](img/75c2f39e-2110-4295-85da-216e2c870df2.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75c2f39e-2110-4295-85da-216e2c870df2.png)'
- en: 'In `Tests.cs`, uncomment the `.ApkFile()` code, as shown in the following screenshot:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Tests.cs` 中，取消注释 `.ApkFile()` 代码，如下图所示：
- en: '![](img/3fa4e94e-6b21-4fb1-bbeb-4241f9906d60.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fa4e94e-6b21-4fb1-bbeb-4241f9906d60.png)'
- en: Change the path to the `.apk` file path, which can be found inside the `bin`
    folder of your application project. If you are not able to see the file there,
    try deploying the application once and then it should be created in `bin` | `debug`
    or `bin` | `release`, depending on your build configuration.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改为 `.apk` 文件的路径，您可以在应用程序项目的 `bin` 文件夹中找到此路径。如果您无法看到文件，请尝试先部署应用程序，之后它应该会在 `bin`
    | `debug` 或 `bin` | `release` 中创建，具体取决于您的构建配置。
- en: Tests.cs
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tests.cs
- en: 'This file is the default file that gets created when we add the UITest project
    in the solution through the Xamarin.UI Android Test Project template, and we will
    be writing our UI tests in this file. There are certain things to note in this
    file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是在我们通过 Xamarin.UI Android Test Project 模板在解决方案中添加 UITest 项目时自动创建的默认文件，我们将在这个文件中编写
    UI 测试。这个文件中有一些需要注意的事项：
- en: '`[TextFixture]`: This is an annotation added to the `Tests` class that tells
    the UITest framework that this class contains tests to be run.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[TextFixture]`：这是添加到 `Tests` 类中的注解，告诉 UITest 框架此类包含要运行的测试。'
- en: '`[Setup]`: Each class containing tests needs to set up an initial configuration,
    as with the APK file path in the previous section. This is added to the `BeforeEachTest()`
    method and tells the framework to run this method and perform the initial setup
    before running the test.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[Setup]`：每个包含测试的类都需要进行初始配置，就像前面部分中的 APK 文件路径一样。这会添加到 `BeforeEachTest()` 方法中，并告诉框架在运行测试之前运行此方法并执行初始设置。'
- en: '`[Test]`: This annotation identifies the method that contains the test.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[Test]`：这个注解标识包含测试的方法。'
- en: '![](img/cd072502-df5e-4af0-958d-114ad9bc6bd3.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd072502-df5e-4af0-958d-114ad9bc6bd3.png)'
- en: Recall the application code
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾应用程序代码
- en: Let's rewind to some of the things we wrote during application development.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下在应用开发过程中写过的一些内容。
- en: Elements in the PhoneCallApp
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PhoneCallApp 中的元素
- en: Textbox to enter phone number
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入电话号码的文本框
- en: CALL button to call
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 CALL 按钮拨打电话
- en: A text that gets displayed if the user taps on the CALL button without entering
    a number
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户在未输入号码的情况下点击 CALL 按钮，显示的文本
- en: A confirmation dialog box that appears when user taps on the CALL button after
    entering a number
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在输入号码后点击 CALL 按钮时会出现的确认对话框
- en: User interactions in the PhoneCallApp
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PhoneCallApp 中的用户交互
- en: Enter a number in the text box
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入一个号码
- en: Tap the CALL button
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 CALL 按钮
- en: Tap on OK or Cancel in the confirmation dialog box
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认对话框中点击确定或取消
- en: 'Open the `MainActivity.cs` file from the PhoneCallApp project and you''ll notice
    that we are showing a toast if the entered number string is empty:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 PhoneCallApp 项目中的 `MainActivity.cs` 文件，您会注意到如果输入的号码字符串为空，我们会显示一个 Toast：
- en: '![](img/f2d0d4ff-0344-4164-8327-1b49a777f39b.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2d0d4ff-0344-4164-8327-1b49a777f39b.png)'
- en: Steps to include in the test
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试中要包含的步骤
- en: 'To write an efficient test, certain steps should be followed, based on the
    AAA pattern discussed earlier:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写高效的测试，应该遵循一些步骤，基于前面讨论的 AAA 模式：
- en: '**Configure and start the application (Arrange)**: We need not write this step
    because that part is already taken care of in the `BeforeEachTest()` method:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置并启动应用程序（Arrange）**：我们不需要编写这一步，因为这部分已经在 `BeforeEachTest()` 方法中处理了：'
- en: '![](img/92e19bba-540b-45dd-b9d1-06cc8ea5db79.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92e19bba-540b-45dd-b9d1-06cc8ea5db79.png)'
- en: '**Perform an interaction with some element on the screen (Act)**: We''ll have
    to write code to enter text or tap on the CALL button'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与屏幕上的某个元素进行交互（操作）**：我们需要编写代码来输入文本或点击 CALL 按钮'
- en: '**Verify the desired output (Assert)**: We need code to verify the interaction
    gives us the desired output'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证预期输出（Assert）**：我们需要编写代码来验证交互是否给出预期的输出'
- en: As we can see, the first step of the test is already done, and now we need to
    write the next steps, which include performing interaction with the CALL button
    and then verifying the desired output.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，测试的第一步已经完成，现在我们需要编写下一步，包括与 CALL 按钮进行交互，然后验证预期的输出。
- en: Writing your first UITest
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写您的第一个 UITest
- en: 'It''s time to finally write our new UITest, inside `Tests.cs` under the UITest
    project, to test the test case described earlier:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候在 `Tests.cs` 文件中编写我们的新 UITest，位于 UITest 项目下，用于测试前面描述的测试用例：
- en: 'Write a new method under the `Tests.cs` class with an annotation `[Test]`,
    as described earlier:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Tests.cs` 类下编写一个新方法，并加上注释 `[Test]`，如前所述：
- en: '![](img/d27c2bc3-40f9-4092-b344-fc4c400575be.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d27c2bc3-40f9-4092-b344-fc4c400575be.png)'
- en: 'Write code to take a screenshot of the application once it loads:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写代码，在应用加载后截取屏幕截图：
- en: '![](img/bedcc5d0-ac6c-451c-bcb7-27c863442b6a.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bedcc5d0-ac6c-451c-bcb7-27c863442b6a.png)'
- en: 'Then, as mentioned in *step 2*, perform an interaction, that is, write code
    to tap the CALL button:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按照 *第 2 步* 提到的，进行交互，即编写代码点击 CALL 按钮：
- en: '![](img/98c8d3c7-1632-4cc2-bc3a-6ff212db3907.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98c8d3c7-1632-4cc2-bc3a-6ff212db3907.png)'
- en: In the preceding code, we are using the `AndroidApp.Tap()` method to perform
    the tap and the `AppQuery.Id()` method to identify the CALL button, then passing
    that app query inside the `Tap` button so that it knows where to tap.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了 `AndroidApp.Tap()` 方法来执行点击操作，并使用 `AppQuery.Id()` 方法来识别 CALL 按钮，然后将该
    app 查询传递给 `Tap` 按钮，以便它知道点击的位置。
- en: 'Again, let''s take a screenshot of the button being pressed:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，我们来截取按下按钮的屏幕截图：
- en: '![](img/587ba21c-d948-4f93-ba6d-f72824cff20e.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/587ba21c-d948-4f93-ba6d-f72824cff20e.png)'
- en: 'The next step is to verify the behavior is as desired. In PhoneCallApp, verify
    that the toast saying `Please provide number` appears:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是验证行为是否符合预期。在 PhoneCallApp 中，验证是否出现了显示 `Please provide number` 的 toast：
- en: '![](img/a43fa736-661c-4146-aa3c-6fc120f3c6ed.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a43fa736-661c-4146-aa3c-6fc120f3c6ed.png)'
- en: In the preceding code, we have used the `AndroidApp.Query()` method to query
    the UI screen for an element, and we have passed the `AppQuery.Marked()` method
    with the content of our toast to be identified.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了 `AndroidApp.Query()` 方法查询 UI 屏幕上的元素，并传递了 `AppQuery.Marked()` 方法，带有我们要识别的
    toast 内容。
- en: The `Marked()` method is similar to the `Id()` method but it searches for an
    element with a given string as either its ID or its content, and in our case it
    is the content of the toast.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`Marked()` 方法类似于 `Id()` 方法，但它会搜索一个元素，其 ID 或内容包含给定的字符串，在我们的案例中，它是 toast 的内容。'
- en: 'Now, we need to verify that the toast with the provided string `Please provide
    number` has been found; the `Assert.IsTrue()` method will verify the element has
    been found by checking for the result array:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要验证是否找到了包含提供字符串 `Please provide number` 的 toast；`Assert.IsTrue()` 方法将通过检查结果数组来验证该元素已被找到：
- en: '![](img/7da2e81e-b485-4abd-b656-d366b0b9762d.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7da2e81e-b485-4abd-b656-d366b0b9762d.png)'
- en: Running your test on your local machine
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地机器上运行测试
- en: 'Now that we have completed writing the UITest inside the `Tests.cs` class file,
    it''s time to run the test on your local machine:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了在 `Tests.cs` 类文件中编写 UITest，是时候在本地机器上运行测试了：
- en: 'Rebuild your solution with the build configurations of your device or emulator:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用设备或模拟器的构建配置重新构建解决方案：
- en: '![](img/c8106ca5-de5f-426f-9525-026a60f66d67.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8106ca5-de5f-426f-9525-026a60f66d67.png)'
- en: 'Before we run test, let''s deploy the solution to generate the `.apk` file:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们运行测试之前，让我们先部署解决方案以生成 `.apk` 文件：
- en: '![](img/16b28d04-20f0-4eb1-b068-0283192ed5e1.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16b28d04-20f0-4eb1-b068-0283192ed5e1.png)'
- en: 'Once the deploy is successful, click on Test | Windows | Test Explorer, as
    shown in the following screenshot:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦部署成功，请点击 Test | Windows | Test Explorer，如下图所示：
- en: '![](img/aac99465-6b03-4241-ae08-024f3918f8a0.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aac99465-6b03-4241-ae08-024f3918f8a0.png)'
- en: 'In Test Explorer, NUnit should identify the test we have written in the `Tests.cs`
    file because of the `[Test]` fixture:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Test Explorer 中，NUnit 应该能够识别我们在 `Tests.cs` 文件中编写的测试，因为我们使用了 `[Test]` 特性：
- en: '![](img/8dbe3b9d-53c1-433a-910e-3227761d5ed4.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8dbe3b9d-53c1-433a-910e-3227761d5ed4.png)'
- en: 'As shown in the previous screenshot, in Test Explorer click on the Run All
    button to run all the tests. If everything goes fine, you should see the Passed
    Tests message in Test Explorer:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前述截图所示，在 Test Explorer 中点击 "Run All" 按钮运行所有测试。如果一切顺利，您应该在 Test Explorer 中看到
    "Passed Tests" 的信息：
- en: '![](img/adb7f432-ca1f-4e06-9c6f-b7a9061e62d1.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/adb7f432-ca1f-4e06-9c6f-b7a9061e62d1.png)'
- en: Awesome, you have successfully written and run the test on your local machine.
    Next, we'll learn about Xamarin Test Cloud and how to use it to run our UI tests
    on multiple physical devices.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很棒，您已经成功编写并在本地机器上运行了测试。接下来，我们将学习 Xamarin Test Cloud 以及如何使用它在多个物理设备上运行我们的 UI
    测试。
- en: Using Xamarin Test Cloud to test on multiple devices
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Xamarin Test Cloud 在多个设备上进行测试
- en: 'Mobile application users are very demanding in terms of the quality and performance
    of an application. Platforms such as app stores, where users can promptly give
    feedback as they wish, make it even more important to take mobile application
    quality seriously:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用的用户对应用的质量和性能要求非常高。像应用商店这样的平台，用户可以随时给予反馈，这使得认真对待移动应用质量变得更加重要：
- en: '**Question**: How can we test a mobile application effectively?'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题**：我们如何有效地测试移动应用程序？'
- en: '**Answer**: By running the application on a real device and using it like a
    user would do'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**答案**：通过在真实设备上运行应用程序，并像用户一样使用它'
- en: Challenges in mobile app testing
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用测试中的挑战
- en: Mobile application testing involves many challenges that web applications don't
    have.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用测试涉及许多 Web 应用程序不具备的挑战。
- en: Different mobile OS versions
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同的移动操作系统版本
- en: Let's take Android, for example. Since Android started, it has grown at a very
    fast rate, with a new major release every year. That makes around 15 major versions
    out there in the market, out of which at least 6 versions are widely used in different
    parts of the world, depending on the region and smartphone availability.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以 Android 为例。自从 Android 开始以来，它的发展速度非常快，每年都有一个新的重大版本发布。这使得市场上大约有 15 个主要版本，其中至少有
    6 个版本在全球不同地区广泛使用，具体取决于区域和智能手机的可用性。
- en: These are only the major versions we are talking about; the minor versions are
    way too many to count.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是我们提到的主要版本，次要版本多得数不胜数。
- en: Considering this situation, it is almost impossible for a quality assurance
    team to test the application and guarantee it will work on all the targeted devices
    out there.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这种情况，质量保证团队几乎不可能测试所有目标设备上的应用程序，并保证其正常运行。
- en: Devices with different screen sizes
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同屏幕尺寸的设备
- en: We are all aware that the number of devices is increasing every day but older
    devices still continued to be used, with different screen sizes from 4.0 inches
    to 6.5 inches (some are even bigger).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道，设备数量每天都在增加，但旧设备仍在继续使用，屏幕尺寸从 4.0 英寸到 6.5 英寸不等（有些甚至更大）。
- en: Mobile applications can behave differently on different screen sizes and resolutions.
    If not developed properly, this can drastically change the look of an app from
    a device used for development to the device a real user is using.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序在不同的屏幕尺寸和分辨率下可能表现不同。如果开发不当，可能会导致应用程序在开发设备和真实用户使用的设备上的外观发生剧烈变化。
- en: So, testing on multiple devices with various screen sizes becomes a very important
    aspect of mobile app testing. To an extent, this can be done by getting all possible
    device sizes and testing the application on them, but in turn this can increase
    the cost to a very high level and can be very time-consuming.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在多个设备上进行测试，尤其是考虑到不同的屏幕尺寸，成为了移动应用测试中一个非常重要的方面。某种程度上，可以通过获取所有可能的设备尺寸来进行测试，但这会极大地增加成本，并且非常耗时。
- en: Solving challenges like these in a cost- and quality-effective way is only possible
    by using cloud test platforms that enable us to run tests on multiple devices
    simultaneously. All the devices on these cloud platforms are physical devices,
    not emulators, and they also provide instant feedback and support multiple testing
    frameworks, including NUnit.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以成本效益和质量为前提解决此类挑战，唯一的方式就是使用云测试平台，这些平台使我们能够同时在多个设备上运行测试。所有这些云平台上的设备都是物理设备，而非模拟器，它们还提供即时反馈，并支持包括
    NUnit 在内的多种测试框架。
- en: Introduction to Xamarin Test Cloud
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xamarin 测试云简介
- en: Xamarin Test Cloud is a cloud-based platform that provides tools to support
    the automated testing of mobile applications across various different devices,
    also known as **UI Acceptance Testing**. This enables us to ensure that the application
    performs correctly and efficiently across multiple devices with minimal effort.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin 测试云是一个基于云的平台，提供支持在各种不同设备上进行自动化测试的工具，也被称为**UI 接受测试**。这使我们能够确保应用程序在多个设备上正确高效地运行，且投入的精力最小。
- en: It also helps shift the testers' focus from repeating the same tests on multiple
    devices, and helps them focus on verifying that the app works as expected on the
    test cloud.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有助于将测试人员的焦点从在多个设备上重复相同的测试，转移到专注于验证应用程序在测试云上按预期工作。
- en: 'The Xamarin Test Cloud family consists of the following parts:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin 测试云家族包括以下几个部分：
- en: Xamarin.UITest
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xamarin.UITest
- en: It is a testing framework based on the very popular NUnit test libraries. If
    you have used NUnit in your C# projects before for unit testing, it will be really
    helpful to understand Xamarin.UITest faster. But if you don't have prior experience
    in NUnit, it's absolutely fine.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于非常流行的 NUnit 测试库的测试框架。如果你之前在 C# 项目中使用过 NUnit 进行单元测试，那么了解 Xamarin.UITest
    将会更加轻松。但如果你没有使用过 NUnit 也完全没有问题。
- en: Xamarin.UITest is basically a set of libraries for C# (similar to JUnit for
    Java) to help write unit tests.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.UITest 本质上是一组用于 C# 的库（类似于 Java 的 JUnit），帮助编写单元测试。
- en: Xamarin also supports the **Calabash** framework for writing tests, if you want
    to write them in Ruby and Cucumber.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin 还支持 **Calabash** 框架来编写测试，如果您想使用 Ruby 和 Cucumber 编写测试。
- en: We'll be focusing on Xamarin.UITest to write tests in C# for continuous testing.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于 Xamarin.UITest，用 C# 编写测试以进行持续测试。
- en: Test Cloud
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Test Cloud
- en: This is a cloud-based platform consisting of thousands of physical devices.
    Users can upload apps and tests written in Xamarin.UITest to Test Cloud; it will
    then install the apps on the available or chosen devices and run the given tests
    on them. Once tests are complete, results are then available to users to analyze
    and verify the behavior of the application.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于云的平台，由成千上万的物理设备组成。用户可以将使用 Xamarin.UITest 编写的应用程序和测试上传到 Test Cloud；然后，它会在可用的或选择的设备上安装应用程序，并在其上运行给定的测试。测试完成后，结果将提供给用户，以便分析和验证应用程序的行为。
- en: Xamarin Test Recorder
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xamarin Test Recorder
- en: This is another application in the Test Cloud ecosystem and helps write Xamarin.UITest.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Test Cloud 生态系统中的另一个应用程序，帮助编写 Xamarin.UITest。
- en: It basically allows you to plug the device in, run the test manually on the
    device, and then it writes all the test code for you by recording your actions
    on the application.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上允许您将设备连接上，手动在设备上运行测试，然后通过记录您在应用程序中的操作来为您编写所有测试代码。
- en: We will not be covering Test Recorder, but rather will learn how to write UI
    tests with Xamarin.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会涉及 Test Recorder，而是将学习如何使用 Xamarin 编写 UI 测试。
- en: Using Xamarin Test Cloud as part of continuous integration
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Xamarin Test Cloud 作为持续集成的一部分使用
- en: 'Xamarin Test Cloud helps us achieve continuous integration with automated test
    executions on every build, on a build server such as TeamCity, and, after executing
    the tests, gives feedback directly to developers:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Test Cloud 帮助我们实现持续集成，在每个构建上执行自动化测试，在像 TeamCity 这样的构建服务器上进行测试，执行测试后，直接向开发人员提供反馈：
- en: '![](img/23b26b3f-ba6c-4f94-92cc-92d12c90666d.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23b26b3f-ba6c-4f94-92cc-92d12c90666d.png)'
- en: Creating users and organizations on Test Cloud
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Test Cloud 上创建用户和组织
- en: 'Let''s start by creating an account on Xamarin Test Cloud:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 Xamarin Test Cloud 上创建帐户开始：
- en: 'Go to [https://testcloud.xamarin.com/register](https://testcloud.xamarin.com/register)
    to register a new account:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://testcloud.xamarin.com/register](https://testcloud.xamarin.com/register)
    注册新帐户：
- en: '![](img/4cf1404a-9807-4620-9055-5b0aad76bc92.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cf1404a-9807-4620-9055-5b0aad76bc92.png)'
- en: Enter your details and click the Continue button to start the process. The process
    requires you to register with a company email; a Gmail or Yahoo email will not
    work.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的详细信息，然后点击继续按钮以开始流程。该过程需要使用公司邮箱进行注册；Gmail 或 Yahoo 邮箱无法使用。
- en: 'On the next screen, enter your organization''s details and click on Get started:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，输入您组织的详细信息，然后点击开始使用：
- en: '![](img/8034f5ea-61b3-4e65-acae-2589e9aa12a3.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8034f5ea-61b3-4e65-acae-2589e9aa12a3.png)'
- en: 'In the next step, accept the terms and conditions to complete registration:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，接受条款和条件以完成注册：
- en: '![](img/81ec1db9-1c38-44f7-a16e-07c338573021.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81ec1db9-1c38-44f7-a16e-07c338573021.png)'
- en: After completing registration, make sure you verify your email address before
    beginning testing.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成注册后，请确保在开始测试之前验证您的电子邮件地址。
- en: Users and organizations
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户和组织
- en: Xamarin Test Cloud, being a continuous testing cloud platform, supports an organization
    structure to give access, make APIs, and run tests through the use of access keys.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Test Cloud 作为一个持续测试的云平台，支持组织结构，通过使用访问密钥提供访问权限、创建 API 和运行测试。
- en: It makes it much easier to separate team-based applications in an organization.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以更轻松地将组织中的团队应用程序进行隔离。
- en: Test Cloud hierarchy
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Test Cloud 层次结构
- en: 'The Test Cloud hierarchy structure is quite simple and easy to follow:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Test Cloud 的层次结构非常简单且易于理解：
- en: '**Organization**: An organization is basically the top level at which the subscription
    is managed for Test Cloud, and it is created when a person from an organization
    first creates an account on Xamarin Test Cloud.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织**：组织基本上是管理 Test Cloud 订阅的最高层级，当一个组织中的人员首次在 Xamarin Test Cloud 上创建帐户时，就会创建该组织。'
- en: '**Administrators**: Each organization will have at least one administrator,
    who creates teams and can manage users.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员**：每个组织将至少有一名管理员，管理员可以创建团队并管理用户。'
- en: '**Team**: A team usually has at least one application and some users working
    on that application. Each team gets their own API keys to access and run tests
    on the application:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队**：一个团队通常至少有一个应用和一些在该应用上工作的用户。每个团队会获得自己的 API 密钥，以访问并运行应用上的测试：'
- en: '![](img/7294fed6-297f-4779-b888-a45f15c3de0d.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7294fed6-297f-4779-b888-a45f15c3de0d.png)'
- en: Creating a team
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个团队
- en: 'To create a team in Xamarin Test Cloud, follow these steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xamarin 测试云中创建团队，按照以下步骤操作：
- en: 'Click on your profile and then click on Account settings:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你的个人资料，然后点击“帐户设置”：
- en: '![](img/07b1d5b7-a2e2-44cb-9140-7159d932678c.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07b1d5b7-a2e2-44cb-9140-7159d932678c.png)'
- en: 'Click on Teams & Apps:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“团队与应用”：
- en: '![](img/aebc4440-8220-4f69-a3bb-3c41ab861604.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aebc4440-8220-4f69-a3bb-3c41ab861604.png)'
- en: 'Then, click on the New team button to add a new team:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“新建团队”按钮来添加新团队：
- en: '![](img/b6bba5fe-5d6f-4e27-9663-298503414cb2.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6bba5fe-5d6f-4e27-9663-298503414cb2.png)'
- en: 'To edit team details, such as the team name, and add new members, click on
    the settings (gear) icon as shown in the following screenshot:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要编辑团队详情，比如团队名称，或添加新成员，点击如下截图中的设置（齿轮）图标：
- en: '![](img/02b87ae6-38fd-4b24-983b-9a7020ff62de.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02b87ae6-38fd-4b24-983b-9a7020ff62de.png)'
- en: 'After adding new members to the team, you can manage permissions for users:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向团队添加新成员后，你可以管理用户的权限：
- en: '![](img/c222d9e2-c747-45d4-907a-52eef48b83f0.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c222d9e2-c747-45d4-907a-52eef48b83f0.png)'
- en: Once the team details, members, and their permissions are all set up, click
    on Done.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦团队详情、成员和权限都设置完成，点击“完成”。
- en: Creating a test run for your application
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为你的应用创建测试运行
- en: 'Now that we have added a team and members to it, it''s time to add our application
    test run to it as well. To create a test run for PhoneCallApp, follow these steps:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经向团队添加了成员，是时候为团队添加我们的应用测试运行了。要为 PhoneCallApp 创建测试运行，请按照以下步骤操作：
- en: 'In Xamarin Test Cloud, click on New Test Run:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Xamarin 测试云中，点击“新建测试运行”：
- en: '![](img/b4df4e6b-c356-4d56-a71c-894d312af2f3.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4df4e6b-c356-4d56-a71c-894d312af2f3.png)'
- en: This will open a self-guiding dialog box, where we can select the platform and
    choose devices.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个自我引导的对话框，我们可以在其中选择平台并选择设备。
- en: 'In the first step in the dialog box, select I''m testing an Android app and
    click Next:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框的第一步中，选择“我正在测试一个 Android 应用”，然后点击“下一步”：
- en: '![](img/333ab789-64fd-469e-a7e1-a26d6383de0b.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/333ab789-64fd-469e-a7e1-a26d6383de0b.png)'
- en: 'Select appropriate devices to run your application on and go to the next step:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适当的设备来运行应用，并进入下一步：
- en: '![](img/a712d38e-e756-4a55-b857-02c58fb21c7e.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a712d38e-e756-4a55-b857-02c58fb21c7e.png)'
- en: 'Select an appropriate Test series, or you can create a new one, select the
    language, and click Next:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个合适的测试系列，或者你可以创建一个新的，选择语言后点击“下一步”：
- en: '![](img/899a8c02-6338-4f73-841f-24c171b46dd8.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/899a8c02-6338-4f73-841f-24c171b46dd8.png)'
- en: 'Select UITest on the next screen and click on Running on Windows:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕选择 UITest 并点击“在 Windows 上运行”：
- en: '![](img/fd19f80c-1b3e-460c-982a-043b65f16168.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd19f80c-1b3e-460c-982a-043b65f16168.png)'
- en: This page gives us a command with a device ID according the devices we selected
    in previous steps. As it says, please update the directory path to the `.apk`
    test assembly `bin` folder, and then run the command in the `root` folder of the
    application.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该页面根据我们在前面步骤中选择的设备，提供了带设备 ID 的命令。如页面所述，请更新目录路径至 `.apk` 测试程序集的 `bin` 文件夹，然后在应用的
    `root` 文件夹中运行该命令。
- en: Before you upload your application to Xamarin Test Cloud, it is important to
    build your application in the Release build configuration.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将应用上传到 Xamarin 测试云之前，确保你已经在 Release 配置中构建了应用。
- en: 'Once you have built the project with Release, you are ready to upload your
    application to Xamarin and run the UI tests there. Use the command and modify
    the Xamarin.UITest.xxx version and then the APK file name, with the full path
    to the `apk` and the relative path to the `UITest` folder, as shown in the following
    screenshot. Then run it from the `root` directory of your project:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你用 Release 构建了项目，就可以将应用上传到 Xamarin 并在那运行 UI 测试。使用命令并修改 Xamarin.UITest.xxx
    版本和 APK 文件名，带上 `apk` 的完整路径和 `UITest` 文件夹的相对路径，如下截图所示。然后从项目的 `root` 目录运行它：
- en: '![](img/f9fad212-4725-4bf8-bc3c-0072b3dc9987.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9fad212-4725-4bf8-bc3c-0072b3dc9987.png)'
- en: Congratulations, you have uploaded your first application to Xamarin Test Cloud
    with a test! After uploading the application, Xamarin Test Cloud should run the
    tests provided.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜，你已经成功将你的第一个应用上传到 Xamarin 测试云并进行了测试！上传应用后，Xamarin 测试云应当会运行提供的测试。
- en: 'Go to the Xamarin test cloud web interface and notice that the application
    is now visible in the dashboard:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Xamarin Test Cloud的网页界面，你会注意到应用现在出现在仪表板上：
- en: '![](img/9c4cf2fa-778b-4392-927f-e0893f2eeaa3.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c4cf2fa-778b-4392-927f-e0893f2eeaa3.png)'
- en: 'Click on the application to see the tests running on the devices we selected
    in step 4:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击应用查看在步骤4中选择的设备上运行的测试：
- en: '![](img/d3797a2a-58c7-4871-a06c-cf0b4b85d48b.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3797a2a-58c7-4871-a06c-cf0b4b85d48b.png)'
- en: You can further click on the test link and see more details about the tests
    and their statuses.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以进一步点击测试链接，查看有关测试的更多详细信息和状态。
- en: This completes running your first test run on Xamarin Test Cloud, where you
    can test your application on multiple physical devices available in the cloud.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这标志着你在Xamarin Test Cloud上运行第一个测试的完成，你可以在云中对多个物理设备上的应用进行测试。
- en: Summary
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned the importance of continuous testing in the application
    development cycle. We also learned about Xamarin.UITest and how to write automated
    UI tests for acceptance-testing our application, and we got familiar with Xamarin
    Test Cloud, which is useful for continuous testing on multiple physical devices.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了持续测试在应用开发周期中的重要性。我们还了解了Xamarin.UITest，如何编写自动化UI测试以进行应用的验收测试，同时熟悉了Xamarin
    Test Cloud，它对于在多个物理设备上进行持续测试非常有用。
- en: In the coming chapters, you'll learn more about continuous integration and continuous
    delivery using various tools.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学习如何使用各种工具进行持续集成和持续交付。
