- en: '*Chapter 15*'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '*第15章*'
- en: Docker Workflows
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker工作流
- en: By now, you should already be thinking about how you can start to introduce
    Docker into your everyday workflow. In this chapter, we'll put all the pieces
    together so you can start using Docker in your local development environment.
    We'll also look at some of the considerations that you need to take when planning
    your production environments.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该已经在思考如何将Docker引入到您的日常工作流程中。在本章中，我们将把所有部分整合在一起，这样您就可以在本地开发环境中开始使用Docker。我们还将讨论在规划生产环境时需要考虑的一些事项。
- en: 'We will be covering the following topics in this chapter, all of which will
    build on what we have learned in the previous chapters:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下主题，所有这些都将在我们之前章节所学内容的基础上展开：
- en: Docker for development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于开发的Docker
- en: Monitoring Docker and Kubernetes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控Docker和Kubernetes
- en: What does production look like?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境是什么样的？
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using Docker on the desktop. As with previous chapters,
    I will be using my preferred operating system, which is macOS. The Docker commands
    we will be running will work on all three of the operating systems we have installed
    Docker on so far; however, some of the supporting commands, which will be few
    and far between, may only apply to macOS- and Linux- based operating systems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在桌面上使用Docker。与之前的章节一样，我将使用我偏好的操作系统，即macOS。我们将运行的Docker命令适用于我们已经安装Docker的所有三种操作系统；然而，某些支持命令——虽然不多——可能仅适用于基于macOS和Linux的操作系统。
- en: Docker for development
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于开发的Docker
- en: We are going to start our look at the workflows by discussing how Docker can
    be used to aid developers. Right back at the start of [*Chapter 1*](B15659_01_Final_JM_ePub.xhtml#_idTextAnchor046),
    *Docker Overview*, one of the first things we discussed in the *Understanding
    Docker* section was developers and the, works on my machine, problem. So far,
    we have not really fully addressed this, so let's do that now.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过讨论Docker如何帮助开发人员来开始了解工作流。回到[*第1章*](B15659_01_Final_JM_ePub.xhtml#_idTextAnchor046)的开头，*Docker概述*部分，我们讨论的第一个话题之一是开发人员和“只在我机器上能运行”的问题。到目前为止，我们还没有完全解决这个问题，现在让我们来解决它。
- en: In this section, we are going to look at how a developer could develop their
    WordPress project on their local machine using Docker for macOS or Docker for
    Windows, along with Docker Compose.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何在本地计算机上使用Docker for macOS或Docker for Windows以及Docker Compose开发WordPress项目。
- en: 'The aim of this is for us to launch a WordPress installation, which is what
    you will do by going through the following steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是启动一个WordPress安装，您可以通过以下步骤来实现：
- en: Download and install WordPress.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装WordPress。
- en: Allow access to the WordPress files from desktop editors—such as Atom, Visual
    Studio Code, or Sublime Text—on your local machine.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许桌面编辑器（如Atom、Visual Studio Code或Sublime Text）从本地计算机访问WordPress文件。
- en: Configure and manage WordPress using the **WordPress command-line** tool (**WPCLI**).
    This allows you to stop, start, and even remove containers without losing your
    work.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**WordPress命令行**工具（**WPCLI**）配置和管理WordPress。这样，您可以停止、启动甚至删除容器而不会丢失工作。
- en: 'Before we launch our WordPress installation, let''s take a look at the Docker
    Compose file, which you can find in the `chapter14/docker-wordpress` folder of
    the accompanying repository:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动WordPress安装之前，让我们看一下Docker Compose文件，您可以在随附的仓库中的`chapter14/docker-wordpress`文件夹中找到它：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will be launching four different services, starting with `web`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将启动四个不同的服务，从`web`开始：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Followed by the `wordpress` service:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接着是`wordpress`服务：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next up, we have the `mysql` database service:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看一下`mysql`数据库服务：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, we have a supporting service simply called `wp`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个名为`wp`的辅助服务：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can visualize the Docker Compose file using the `docker-compose-viz` tool
    from `PMSIpilot`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`PMSIpilot`的`docker-compose-viz`工具来可视化Docker Compose文件。
- en: 'To do this, run the following command in the same folder as the `docker-compose.yml`
    file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现此操作，请在与`docker-compose.yml`文件相同的文件夹中运行以下命令：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will output a file called `docker-compose.png`, and you should get something
    that looks like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出一个名为`docker-compose.png`的文件，您应该会看到类似这样的内容：
- en: '![Figure 15.1: Output of the running docker-compose-viz against our WordPress
    Docker Compose file'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.1：运行docker-compose-viz与我们的WordPress Docker Compose文件的输出'
- en: '](img/Figure_15.01_B15659.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.01_B15659.jpg)'
- en: 'Figure 15.1: Output of the running docker-compose-viz against our WordPress
    Docker Compose file'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1：运行 docker-compose-viz 时我们 WordPress Docker Compose 文件的输出
- en: 'The first service is called web. This service is the only one of the four services
    that is exposed to the host network, and it acts as a frontend to our WordPress
    installation. It runs the official NGINX image from [https://store.docker.com/images/nginx/](https://store.docker.com/images/nginx/)
    and it performs two roles. Take a look at the NGINX configuration and see if you
    can guess what they are:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个服务叫做 web。这个服务是我们四个服务中唯一暴露给主机网络的，它作为我们 WordPress 安装的前端。它运行的是来自[https://store.docker.com/images/nginx/](https://store.docker.com/images/nginx/)的官方
    NGINX 镜像，并执行两个角色。看看 NGINX 配置，看看你是否能猜出它们是什么：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can see that we are serving all content, apart from PHP, using the NGINX
    from `/var/www/html/`, which we are mounting from our host machine using NGINX,
    and all requests for PHP files are being proxied to our second service, which
    is called `wordpress`, on port `9000`. The NGINX configuration itself is being
    mounted from our host machine to `/etc/nginx/conf.d/default.conf`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，我们除了 PHP 内容外，所有内容都通过 NGINX 从`/var/www/html/`提供，这些内容是通过 NGINX 从主机挂载的，所有针对
    PHP 文件的请求都被代理到我们的第二个服务，名为`wordpress`，端口为`9000`。NGINX 配置本身是从主机挂载到`/etc/nginx/conf.d/default.conf`。
- en: What this means is that our NGINX container is acting as a web server for the
    static content, the first role, and also as a proxy through to the WordPress container
    for the dynamic content, which is the second role the container takes on—did you
    guess right?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的 NGINX 容器充当静态内容的 Web 服务器，这是第一个角色；同时，它也充当了通往 WordPress 容器的代理，处理动态内容，这是容器承担的第二个角色——你猜对了吗？
- en: The second service is `wordpress`. This is the official WordPress image from
    [https://hub.docker.com/images/wordpress](https://hub.docker.com/images/wordpress),
    and I am using the `php7.2-fpm-alpine` tag. This gives us a WordPress installation
    running on PHP 7.2 using `PHP-FPM` built on top of an Alpine Linux base.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个服务是`wordpress`。这是来自[https://hub.docker.com/images/wordpress](https://hub.docker.com/images/wordpress)的官方
    WordPress 镜像，我使用的是`php7.2-fpm-alpine`标签。这让我们能够在 PHP 7.2 上运行一个 WordPress 安装，使用基于
    Alpine Linux 的`PHP-FPM`。
- en: Important note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**PHP FastCGI Process Manager** (**PHP-FPM**) is a PHP FastCGI implementation
    with some great features. For us, it allows PHP to run as a service that we can
    bind to a port and pass requests to; this fits in with the Docker method of running
    a single service on each container.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**PHP FastCGI 处理器管理器**（**PHP-FPM**）是一个具有许多优秀功能的 PHP FastCGI 实现。对我们而言，它允许 PHP
    作为一个服务运行，我们可以将其绑定到一个端口并传递请求；这与 Docker 每个容器运行一个单独服务的方法相契合。'
- en: We are mounting the same web root as we are using for the web service, which
    on the host machine is `wordpress/web` and on the service is `/var/www/html/`.
    To start off with, the folder on our host machine will be empty; however, once
    the WordPress service starts, it will detect that there isn't a core WordPress
    installation and copy one to that location, effectively bootstrapping our WordPress
    installation and copying it to our host machine, ready for us to start working
    on it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在挂载与我们为 web 服务使用的相同的 web 根目录，在主机上是`wordpress/web`，在服务上是`/var/www/html/`。首先，主机上的文件夹将是空的；然而，一旦
    WordPress 服务启动，它会检测到没有核心的 WordPress 安装，并将其复制到该位置，从而有效地引导我们的 WordPress 安装并将其复制到主机上，准备好供我们开始工作。
- en: The third service is MySQL, which uses the official MySQL image, which can be
    found at [https://hub.docker.com/images/mysql](https://hub.docker.com/images/mysql)
    and is the only image out of the four we are using that doesn't use Alpine Linux
    (come on MySQL; pull your finger out and publish an Alpine Linux-based image!).
    Instead, it uses `debian:buster-slim`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个服务是 MySQL，使用官方的 MySQL 镜像，可以在[https://hub.docker.com/images/mysql](https://hub.docker.com/images/mysql)找到，它是我们使用的四个镜像中唯一没有使用
    Alpine Linux 的（来吧 MySQL，赶紧发布一个基于 Alpine Linux 的镜像吧！）。它使用的是`debian:buster-slim`。
- en: We are passing a few environment variables so that a database, username, and
    password are all created when the container first runs; the password is something
    you should change if you ever use this as a base for one of your projects.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递了一些环境变量，以便在容器第一次运行时创建数据库、用户名和密码；如果你以后将这个作为项目的基础，密码是你应该更改的内容。
- en: Like the web and `wordpress` containers, we are mounting a folder from our host
    machine. In this case, it is `wordpress/mysql`, and we are mounting it to `/var/lib/mysql/`,
    which is the default folder where MySQL stores its databases and associated files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与 web 和 `wordpress` 容器一样，我们也从主机上挂载了一个文件夹。在这种情况下，是`wordpress/mysql`，我们将其挂载到`/var/lib/mysql/`，这是
    MySQL 存储其数据库和相关文件的默认文件夹。
- en: 'The fourth and final service is simply called `wp`. It differs from the other
    three services: this service will immediately exit when executed because there
    is no long-running process within the container. Instead of a long-running process,
    we have a single process that is used to interact with and manage our WordPress
    installation.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个也是最后一个服务被简单地称为`wp`。它与其他三个服务不同：当执行此服务时，它会立即退出，因为容器内没有长时间运行的进程。与长时间运行的进程不同，我们只有一个单一进程，用于与
    WordPress 安装进行交互和管理。
- en: The advantage of running this tool in a container is that the environment we
    are running the command-line tool in exactly matches our main `wordpress` container.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中运行此工具的优点是，我们运行命令行工具的环境与主`wordpress`容器完全匹配。
- en: You will notice that we are mounting the web root as we have done on the web
    and WordPress, meaning that the container has full access to our WordPress installation
    as well as a second mount called `/export`; we will look at this in more detail
    once we have WordPress configured.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，我们像在 web 和 WordPress 中一样挂载了 web 根目录，这意味着容器可以完全访问我们的 WordPress 安装，并且还有一个名为`/export`的第二个挂载；一旦我们配置好
    WordPress，我们将更详细地查看这一点。
- en: 'To start WordPress, we just need to run the following command to pull the images:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 WordPress，我们只需运行以下命令来拉取镜像：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will pull the images and start the web, `wordpress`, and `mysql` services,
    as well as readying the `wp` service. Before the services start, our `wordpress`
    folder looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将拉取镜像并启动 web、`wordpress`和`mysql`服务，并准备`wp`服务。在服务启动之前，我们的`wordpress`文件夹看起来像这样：
- en: '![Figure 15.2: Before launching WordPress'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.2：启动 WordPress 之前'
- en: '](img/Figure_15.02_B15659.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.02_B15659.jpg)'
- en: 'Figure 15.2: Before launching WordPress'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2：启动 WordPress 之前
- en: 'As you can see, we only have **nginx.conf** in there, which is part of the
    Git repository. Then we can use the following commands to start the containers
    and check their status:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，那里只有**nginx.conf**，它是 Git 仓库的一部分。然后，我们可以使用以下命令来启动容器并检查它们的状态：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Your Terminal output should look similar to the following screen:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你的终端输出应该类似于以下屏幕：
- en: '![Figure 15.3: Launching and checking the status of our WordPress installation'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.3：启动并检查 WordPress 安装的状态'
- en: '](img/Figure_15.03_B15659.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.03_B15659.jpg)'
- en: 'Figure 15.3: Launching and checking the status of our WordPress installation'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3：启动并检查 WordPress 安装的状态
- en: 'You should see that three folders have been created in the `wordpress` folder:
    `export`, `mysql`, and `web`. Also, remember that we are expecting `dockerwordpress_wp_1`
    to have an exit state of `Exit 1`, so that''s fine:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到在`wordpress`文件夹中创建了三个文件夹：`export`、`mysql`和`web`。另外，请记住，我们期望`dockerwordpress_wp_1`的退出状态为`Exit
    1`，所以这没问题：
- en: '![Figure 15.4: Checking the folders created by launching WordPress'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.4：检查启动 WordPress 后创建的文件夹'
- en: '](img/Figure_15.04_B15659.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.04_B15659.jpg)'
- en: 'Figure 15.4: Checking the folders created by launching WordPress'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4：检查启动 WordPress 后创建的文件夹
- en: 'Opening a browser and going to `http://localhost:8080/` should show you the
    standard WordPress preinstallation welcome page, where you can select the language
    you wish to use for your installation:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`http://localhost:8080/`，应该会显示标准的 WordPress 预安装欢迎页面，你可以选择安装时使用的语言：
- en: '![Figure 15.5: The WordPress setup screen'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.5：WordPress 设置页面'
- en: '](img/Figure_15.05_B15659.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.05_B15659.jpg)'
- en: 'Figure 15.5: The WordPress setup screen'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5：WordPress 设置页面
- en: Do not click on **Continue**, as it will take you to the next screen of the
    GUI-based installation. Instead, return to your Terminal.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不要点击**继续**，因为它会带你进入图形界面安装的下一屏。相反，返回到你的终端。
- en: 'Rather than using the GUI to complete the installation, we are going to use
    `wp-cli`. There are two steps to this. The first step is to create a `wp-config.php`
    file. To do this, run the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不打算使用图形界面（GUI）来完成安装，而是使用`wp-cli`。这有两个步骤。第一步是创建`wp-config.php`文件。为此，运行以下命令：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you will see in the following Terminal output, before I ran the command,
    I just had the `wp-config-sample.php` file, which ships with core WordPress. Then,
    after running the command, I had my own `wp-config.php` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将在以下终端输出中看到的，在我运行命令之前，我只有 `wp-config-sample.php` 文件，这是 WordPress 核心自带的文件。然后，在运行命令之后，我得到了我自己的
    `wp-config.php` 文件：
- en: '![Figure 15.6: Creating the wp-config.php file using wp-cli'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.6：使用 wp-cli 创建 wp-config.php 文件'
- en: '](img/Figure_15.06_B15659.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.06_B15659.jpg)'
- en: 'Figure 15.6: Creating the wp-config.php file using wp-cli'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.6：使用 wp-cli 创建 wp-config.php 文件
- en: You will notice that in the command, we are passing the database details that
    we defined in the Docker Compose file and telling WordPress that it can connect
    to the database service at the address of `mysql`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，在命令中，我们传递了在 Docker Compose 文件中定义的数据库详情，并告知 WordPress 它可以通过 `mysql` 地址连接到数据库服务。
- en: 'Now that we have configured database connection details, we need to configure
    our WordPress site, as well as create an admin user and set a password. To do
    this, run the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了数据库连接信息，我们需要配置我们的 WordPress 站点，并创建一个管理员用户并设置密码。为此，请运行以下命令：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Running this command will produce an error in the email service; do not worry
    about this message, as this is only a local development environment. We are not
    too worried about emails leaving our WordPress installation:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令会在电子邮件服务中产生错误；不要担心这个信息，因为这只是一个本地开发环境。我们不太担心 WordPress 安装中的电子邮件发送：
- en: '![Figure 15.7: Configuring WordPress using cp-cli'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.7：使用 cp-cli 配置 WordPress'
- en: '](img/Figure_15.07_B15659.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.07_B15659.jpg)'
- en: 'Figure 15.7: Configuring WordPress using cp-cli'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.7：使用 cp-cli 配置 WordPress
- en: 'We have used wp-cli to configure the following in WordPress:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用 wp-cli 在 WordPress 中配置了以下内容：
- en: Our URL is **http://localhost:8080**.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的 URL 是 **http://localhost:8080**。
- en: Our site title should be **Blog Title**.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的站点标题应该是**博客标题**。
- en: Our admin username is **admin** and our password is **password**, and the user
    has the email address **email@domain.com**.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的管理员用户名是 **admin**，密码是 **password**，用户的电子邮件地址是 **email@domain.com**。
- en: 'Going back to your browser and entering `http://localhost:8080/` should present
    you with a vanilla WordPress site:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 返回浏览器并输入 `http://localhost:8080/` 应该会展示一个原生的 WordPress 站点：
- en: '![Figure 15.8: A default WordPress site'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.8：默认的 WordPress 站点'
- en: '](img/Figure_15.08_B15659.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.08_B15659.jpg)'
- en: 'Figure 15.8: A default WordPress site'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.8：默认的 WordPress 站点
- en: 'Before we do anything further, let''s customize our installation a little,
    first by installing and enabling the **JetPack** plugin:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步操作之前，先稍微自定义一下我们的安装，首先安装并启用 **JetPack** 插件：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the command is given here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '![Figure 15.9: Installing the JetPack plugin'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.9：安装 JetPack 插件'
- en: '](img/Figure_15.09_B15659.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.09_B15659.jpg)'
- en: 'Figure 15.9: Installing the JetPack plugin'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.9：安装 JetPack 插件
- en: 'Then, `install` and enable the **Sydney** theme:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`install` 并启用 **Sydney** 主题：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the command is given here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '![Figure 15.10: Installing the Sydney theme'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.10：安装 Sydney 主题'
- en: '](img/Figure_15.10_B15659.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.10_B15659.jpg)'
- en: 'Figure 15.10: Installing the Sydney theme'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.10：安装 Sydney 主题
- en: 'Refreshing our WordPress page at `http://localhost:8080/` should show something
    like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新我们的 WordPress 页面 `http://localhost:8080/` 应该会显示类似如下内容：
- en: '![Figure 15.11: Viewing our site with the updated theme'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.11：查看更新主题后的站点'
- en: '](img/Figure_15.11_B15659.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.11_B15659.jpg)'
- en: 'Figure 15.11: Viewing our site with the updated theme'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.11：查看更新主题后的站点
- en: 'Before we open our IDE, let''s destroy the containers running our WordPress
    installation using the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们打开 IDE 之前，使用以下命令销毁运行我们 WordPress 安装的容器：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the command is given here:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下：
- en: '![Figure 15.12: Stopping and removing the containers that are running WordPress'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.12：停止并移除正在运行 WordPress 的容器'
- en: '](img/Figure_15.12_B15659.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.12_B15659.jpg)'
- en: 'Figure 15.12: Stopping and removing the containers that are running WordPress'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.12：停止并移除正在运行 WordPress 的容器
- en: 'As our entire WordPress installation, including all of the files and the database,
    is stored on our local machine, we should be able to run the following command
    to return our WordPress site where we left it:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的整个 WordPress 安装，包括所有文件和数据库，都存储在本地机器上，我们应该能够运行以下命令来恢复到我们停留的位置：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once you have confirmed that it is up and running as expected by going to `http://
    localhost:8080/`, open the `docker-wordpress` folder in your desktop editor. I
    used Visual Studio Code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确认它已按预期启动并运行，可以访问`http:// localhost:8080/`，然后在桌面编辑器中打开`docker-wordpress`文件夹。我使用的是Visual
    Studio Code。
- en: 'In your editor, open the `wordpress/web/wp-blog-header.php` file, add the following
    line to the opening PHP statement, and save it:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器中，打开`wordpress/web/wp-blog-header.php`文件，在开头的PHP语句中添加以下行，并保存：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The file should look something like the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 文件应该像下面这样：
- en: '![Figure 15\. 13: Editing wp-blog-header.php in Visual Studio Code'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15\. 13：在Visual Studio Code中编辑wp-blog-header.php'
- en: '](img/Figure_15.13_B15659.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.13_B15659.jpg)'
- en: 'Figure 15\. 13: Editing wp-blog-header.php in Visual Studio Code'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15\. 13：在Visual Studio Code中编辑wp-blog-header.php
- en: 'Once saved, refresh your browser. You should see the message **Testing editing
    in the IDE** at the very bottom of the page (the following screen is zoomed; it
    may be more difficult to spot if you are following along on screen, as the text
    is quite small):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，刷新浏览器。你应该能在页面最底部看到消息**测试IDE中的编辑功能**（以下屏幕已缩放；如果你在屏幕上跟随操作，可能较难找到该消息，因为文字很小）：
- en: '![Figure 15.14: Viewing our edit on the page'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.14：查看我们在页面上的编辑'
- en: '](img/Figure_15.14_B15659.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.14_B15659.jpg)'
- en: 'Figure 15.14: Viewing our edit on the page'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.14：查看我们在页面上的编辑
- en: The final thing we are going to look at is why we had the `wordpress/export`
    folder mounted on the `wp` container.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后要查看的是为什么我们将`wordpress/export`文件夹挂载到`wp`容器上。
- en: As already mentioned earlier in the chapter, you shouldn't really be touching
    the contents of the `wordpress/mysql` folder; this also includes sharing it. While
    it would probably work if you were to zip up your project folder and pass it to
    a colleague, this is not considered best practice. Because of this, we have mounted
    the export folder to allow us to use WPCLI to make a database dump and import
    it.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面提到的，你其实不应该随便修改`wordpress/mysql`文件夹的内容；这也包括共享它。虽然如果你将项目文件夹压缩并传给同事可能能工作，但这并不被认为是最佳实践。因此，我们将导出文件夹挂载到容器中，以便使用WPCLI进行数据库转储和导入。
- en: 'To do this, run the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，执行以下命令：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Depending on the version of Docker you are running, you may receive a permission-denied
    error when running the preceding command; if you do, then run the following command
    instead:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你运行的Docker版本，你可能在执行前述命令时遇到权限拒绝错误；如果遇到，请改用以下命令：
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will copy the database dump to `wordpress/wordpress` rather than `wordpress/export`.
    The reason for this is that different host operating systems handle the creation
    of local files differently, which can cause permission issues within the container
    itself.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这样会将数据库转储复制到`wordpress/wordpress`目录，而不是`wordpress/export`。之所以这样做，是因为不同的主机操作系统处理本地文件的创建方式不同，这可能会导致容器内的权限问题。
- en: 'The following Terminal output shows the export and also the contents of `wordpress/export`
    before and after the command being run, and lastly, the top few lines of the MySQL
    dump file:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下终端输出展示了导出操作的过程，以及执行命令前后`wordpress/export`的内容，最后是MySQL转储文件的顶部几行：
- en: '![Figure 15.15: Dumping the WordPress database'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.15：导出WordPress数据库'
- en: '](img/Figure_15.15_B15659.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.15_B15659.jpg)'
- en: 'Figure 15.15: Dumping the WordPress database'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.15：导出WordPress数据库
- en: 'If I had, say, made a mistake during development and accidently trashed part
    of my database, I could roll back to the backup of the database I made by running
    the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在开发过程中犯了个错误，意外地破坏了部分数据库，我可以通过运行以下命令恢复到我之前备份的数据库：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of the command is given here:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出结果如下：
- en: '![Figure 15.16: Importing the WordPress database'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.16：导入WordPress数据库'
- en: '](img/Figure_15.16_B15659.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.16_B15659.jpg)'
- en: 'Figure 15.16: Importing the WordPress database'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.16：导入WordPress数据库
- en: As you can seen, we have installed WordPress, interacted with it using both
    the WordPress command-line tool, `wp-cli`, and also in a web browser, edited the
    code, and backed up and restored the database, all without having to install or
    configure `NGINX`, `PHP`, `MySQL`, or `wp-cli` on our local machine. Nor did we
    have to log in to a container. By mounting volumes from our host machine, our
    content was safe when we tore our WordPress containers down and we didn't lose
    any work.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经安装了 WordPress，并使用 WordPress 命令行工具 `wp-cli` 和网页浏览器进行交互，编辑了代码，备份并恢复了数据库，所有这些都不需要在本地机器上安装或配置
    `NGINX`、`PHP`、`MySQL` 或 `wp-cli`。我们也没有需要登录到容器中。通过将宿主机的卷挂载进去，当我们拆卸 WordPress 容器时，内容是安全的，我们没有丢失任何工作。
- en: Also, if needed, we could have easily passed a copy of our project folder to
    a colleague who has Docker installed, and with a single command, they could be
    working on our code, knowing that it is running in the same exact environment
    as our own installation.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果需要，我们可以轻松地将项目文件夹的副本传递给一位安装了 Docker 的同事，通过一条命令，他们就能在完全相同的环境中运行我们的代码，就像我们自己安装的环境一样。
- en: Tip
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you like, you can stop and remove your WordPress containers by running `docker-compose`
    down. If you are following along, you might want to keep WordPress for the next
    section so that you have running containers to monitor.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以通过运行 `docker-compose down` 停止并删除您的 WordPress 容器。如果您正在跟随本书，您可能想保留 WordPress
    以便在下一个章节中监控运行中的容器。
- en: Finally, as we're using official images from the Docker Hub, we know we can
    safely ask to have them deployed into production, as they have been built with
    Docker's best practices in mind.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于我们使用的是来自 Docker Hub 的官方镜像，我们知道可以安全地将其部署到生产环境，因为它们是按照 Docker 的最佳实践构建的。
- en: One thing that you may find really useful is how well Docker can be integrated
    in your IDE of choice. A few pages back, when we edited the `wp-blog-header.php`
    file, you may have noticed a Docker icon on the left-hand side of the screen.
    Before we finish this section of the chapter, let's quickly discuss how Microsoft
    have integrated Docker support into Visual Studio Code, or VS Code, as we will
    be calling it from now on.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现一个非常实用的功能，那就是 Docker 能与您选择的 IDE 集成得如此顺畅。在前面的几页中，当我们编辑 `wp-blog-header.php`
    文件时，您可能注意到左侧出现了 Docker 图标。在我们结束本章节之前，让我们快速讨论一下微软是如何将 Docker 支持集成到 Visual Studio
    Code 中的，接下来我们将简称其为 VS Code。
- en: The first thing you need to do is install VS Code, which you can find at [https://code.visualstudio.com/](https://code.visualstudio.com/),
    and the Microsoft Docker extension, which can found in the Visual Studio Market
    place at [https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要安装 VS Code，您可以在[https://code.visualstudio.com/](https://code.visualstudio.com/)找到它，并安装
    Microsoft 的 Docker 扩展，您可以在 Visual Studio 市场上找到该扩展：[https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker)。
- en: 'You will notice that the extension is not in your face. This is because it
    integrates quite deeply with VS Code—for example, if you were to right-click over
    the `docker-compose.yml` file in the explorer, you will notice that the menu has
    some options that allow you to interact with Docker Compose:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到这个扩展并不会直接出现在您的面前。这是因为它与 VS Code 深度集成——例如，如果您右键点击资源管理器中的`docker-compose.yml`文件，您会发现菜单中有一些选项，允许您与
    Docker Compose 进行交互：
- en: '![Figure 15.17: Running Docker Compose from VS Code'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.17：从 VS Code 运行 Docker Compose'
- en: '](img/Figure_15.17_B15659.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.17_B15659.jpg)'
- en: 'Figure 15.17: Running Docker Compose from VS Code'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.17：从 VS Code 运行 Docker Compose
- en: 'Clicking on the **Docker** icon on the left-hand side will bring up a list
    running Containers, available Images, Registries that you are connected to, Networks,
    and Volumes:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 点击左侧的**Docker**图标将弹出一个列表，显示正在运行的容器、可用的镜像、您连接的注册表、网络和卷：
- en: '![Figure 15.18: Viewing your running containers'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.18：查看您正在运行的容器'
- en: '](img/Figure_15.18_B15659.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.18_B15659.jpg)'
- en: 'Figure 15.18: Viewing your running containers'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.18：查看您正在运行的容器
- en: 'Right-clicking over a container gives you the option to attach to the running
    container using the terminal that is built into VS Code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击容器，您可以选择使用 VS Code 内置的终端连接到正在运行的容器：
- en: '![Figure 15.19: Attaching to a container using the built-in terminal'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.19：使用内置终端连接到容器'
- en: '](img/Figure_15.19_B15659.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.19_B15659.jpg)'
- en: 'Figure 15.19: Attaching to a container using the built-in terminal'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.19：使用内置终端附加到容器
- en: 'Opening the folder from the Git repository that accompanies this title in VS
    Code and then pressing *CMD +Shift + P* will open the command prompt in VS Code.
    From here, type `Dockerfile` files and ask you which one you want to build:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Git 仓库中打开与本书配套的文件夹，在 VS Code 中按下*CMD +Shift + P*将打开 VS Code 中的命令提示符。从这里，输入
    `Dockerfile` 文件，并询问你想要构建哪个：
- en: '![Figure 15.20: Choosing a Dockerfile to build'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.20：选择一个 Dockerfile 进行构建'
- en: '](img/Figure_15.20_B15659.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.20_B15659.jpg)'
- en: 'Figure 15.20: Choosing a Dockerfile to build'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.20：选择一个 Dockerfile 进行构建
- en: 'Once built, your image will be listed in the Docker section, and you can right-click
    over the tag to push it to any of the registries you are connected to:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，你的镜像将在 Docker 部分列出，你可以右键点击标签并将其推送到你连接的任何注册表：
- en: '![Figure 15.21: Pushing our newly built image'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.21：推送我们新构建的镜像'
- en: '](img/Figure_15.21_B15659.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.21_B15659.jpg)'
- en: 'Figure 15.21: Pushing our newly built image'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.21：推送我们新构建的镜像
- en: 'You can also run the container. Once it is running, you can then right-click
    on it and select **Open in browser** to go straight to the application:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以运行容器。一旦容器运行，你可以右键点击它并选择**在浏览器中打开**，直接进入应用程序：
- en: '![Figure 15.22: Opening a running container in your browser'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.22：在浏览器中打开运行中的容器'
- en: '](img/Figure_15.22_B15659.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.22_B15659.jpg)'
- en: 'Figure 15.22: Opening a running container in your browser'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.22：在浏览器中打开运行中的容器
- en: The final trick up the VS Code Docker extension's sleeve that we are going to
    cover is an extremely useful one. Let's say that you have a repository with no
    `Dockerfile`—for example, the Go Training `helloworld` repository, which can be
    found at [https://github.com/go-training/helloworld/](https://github.com/go-training/helloworld/),
    has no `Dockerfile` or `docker-compose.yml` files. Grab a copy of it and open
    it in VS Code.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code Docker 扩展的最终技巧是一个非常有用的功能。假设你有一个没有 `Dockerfile` 的仓库——例如，可以在 [https://github.com/go-training/helloworld/](https://github.com/go-training/helloworld/)
    找到的 Go Training `helloworld` 仓库，它没有 `Dockerfile` 或 `docker-compose.yml` 文件。下载该仓库并在
    VS Code 中打开它。
- en: 'Once open, press *CMD +Shift + P*, type in `Add Docker`, and then select `3000`.
    Once you hit `Dockerfile`, which looks like the following, will be opened:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 打开后，按下*CMD +Shift + P*，输入 `Add Docker`，然后选择 `3000`。点击 `Dockerfile` 后，将打开如下内容：
- en: '![Figure 15.23: A VS-Code-generated, multistage Dockerfile'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.23：VS Code 生成的多阶段 Dockerfile'
- en: '](img/Figure_15.23_B15659.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.23_B15659.jpg)'
- en: 'Figure 15.23: A VS-Code-generated, multistage Dockerfile'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.23：VS Code 生成的多阶段 Dockerfile
- en: 'You will also notice that a `docker-compose.yml` file along with a `.dockerignore`
    and a few other files have been generated. From here, you can build the image,
    and then run it. I recommend using the **Run interactive** option as all the application
    does is print **Hello World!** and then exit, as shown in the following screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到一个 `docker-compose.yml` 文件以及一个 `.dockerignore` 文件和其他几个文件已被生成。从这里，你可以构建镜像，然后运行它。我建议使用**交互式运行**选项，因为应用程序所做的只是打印**Hello
    World!**然后退出，如下图所示：
- en: '![Figure 15.24: Running the application'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.24：运行应用程序'
- en: '](img/Figure_15.24_B15659.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.24_B15659.jpg)'
- en: 'Figure 15.24: Running the application'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.24：运行应用程序
- en: As I am sure you have seen, the Docker integration with VS Code is extremely
    powerful, and enables you to run pretty much every Docker command that we have
    covered in previous chapters from within VS Code. There are similar extensions
    for other IDEs. These are linked in the *Further reading* section.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你肯定已经看到的，Docker 与 VS Code 的集成非常强大，使你可以在 VS Code 中运行我们在前几章中介绍的几乎所有 Docker 命令。其他
    IDE 也有类似的扩展。相关链接在*进一步阅读*部分。
- en: Docker and Azure DevOps
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 和 Azure DevOps
- en: In [*Chapter 3*](B15659_03_Final_JM_ePub.xhtml#_idTextAnchor109)*, Storing and
    Distributing Images* in the *Reviewing third-party registries* section, we looked
    at how we can use GitHub to both host and also build our container images. We
    also discussed Azure Container Registry.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 3 章*](B15659_03_Final_JM_ePub.xhtml#_idTextAnchor109)*，存储和分发镜像*的*审查第三方注册表*部分，我们介绍了如何使用
    GitHub 来托管和构建我们的容器镜像。我们还讨论了 Azure 容器注册表。
- en: To close this section of the chapter, we are going to quickly look at getting
    an Azure DevOps pipeline configured that builds the multistage Dockerfile that
    we covered in [*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068)*,
    Building Container Images*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束本章这一部分，我们将快速了解如何配置一个 Azure DevOps 管道，该管道构建我们在[*第 2 章*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068)《构建容器镜像》中介绍的多阶段
    Dockerfile。
- en: 'Before we configure our pipeline, let''s discuss what Azure DevOps is. It is
    a service offered by Microsoft that provides the following capabilities:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们配置管道之前，先来讨论一下 Azure DevOps 是什么。它是 Microsoft 提供的一项服务，具有以下功能：
- en: Version control
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Reporting
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告
- en: Requirements management
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求管理
- en: Project management
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目管理
- en: Automated builds
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动构建
- en: Testing
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Release management
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布管理
- en: That might seem like a lot of different services, and it is, but Azure DevOps
    is the glue that can bind together various Microsoft services in both the Microsoft
    Azure ecosystem and their programming languages, such as .NET, and tools, such
    as Visual Studio. Covering everything would take up an entire book; in fact, there
    are several on the subject, so we will only be touching upon the basic functionality
    needed to build our container and push it to the Docker Hub.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能是很多不同的服务，的确如此，但 Azure DevOps 就是那种能够将各种 Microsoft 服务（包括 Microsoft Azure
    生态系统中的服务）以及编程语言（如 .NET）和工具（如 Visual Studio）紧密结合在一起的粘合剂。涵盖所有内容将占用整本书的篇幅；事实上，关于这个主题已有几本书，因此我们将只介绍构建容器并将其推送到
    Docker Hub 所需的基本功能。
- en: The only requirement you need to get started with Azure DevOps is an account—to
    sign up for free, go to [https://dev.azure.com/](https://dev.azure.com/%20) and
    follow the on-screen prompts. Once you have created your account, click on the
    **+ New project** button.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 Azure DevOps 的唯一要求是拥有一个账户——要免费注册，请访问[https://dev.azure.com/](https://dev.azure.com/%20)，并按照屏幕上的提示操作。创建账户后，点击
    **+ 新建项目** 按钮。
- en: Once you are on the **Create new project** page, you will find the option to
    fill in a **Project****Name** and **Description** and choose the **Visibility**;
    by default, projects are **Private**, but you can also make them **Public**.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进入 **创建新项目** 页面时，会看到可以填写 **项目名称** 和 **描述** 的选项，并选择 **可见性**；默认情况下，项目是 **私有的**，但你也可以将其设置为
    **公开**。
- en: Fill in the details and then click on **Create**. I would recommend making your
    project **Private**.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完详细信息后，点击 **创建**。我建议将项目设置为 **私有**。
- en: Once your project has been created, click on the **Project Settings** option,
    which can be found at the very bottom of the left-hand side menu. Once the **Project
    Settings** page loads, click on **Service connections**, which can be found under
    **Pipelines**.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，点击位于左侧菜单最底部的 **项目设置** 选项。当 **项目设置** 页面加载完毕后，点击 **服务连接**，它位于 **管道** 下方。
- en: From there, click the **Create Service** connection button and select **Docker
    Registry** from the list of services you are presented with.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，点击 **创建服务连接** 按钮，从显示的服务列表中选择 **Docker Registry**。
- en: 'From here, select the radio icon next to **Docker Hub**, enter your Docker
    ID, and then enter your **Docker password**. If your Docker Hub account is protected
    by multifactor authentication, which I really recommend you configure, then you
    will need a user access token—we covered this in the Docker Hub section of [*Chapter
    3*](B15659_03_Final_JM_ePub.xhtml#_idTextAnchor109)*, Storing and Distributing
    Images*:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，选择 **Docker Hub** 旁边的单选图标，输入你的 Docker ID，然后输入你的 **Docker 密码**。如果你的 Docker
    Hub 账户启用了多重身份验证（我强烈建议你配置此项），那么你将需要一个用户访问令牌——我们在[*第 3 章*](B15659_03_Final_JM_ePub.xhtml#_idTextAnchor109)《存储和分发镜像》一节中讲解过这个问题：
- en: '![Figure 15.25: Setting up the service connection to Docker Hub'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.25：设置与 Docker Hub 的服务连接'
- en: '](img/Figure_15.25_B15659.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.25_B15659.jpg)'
- en: 'Figure 15.25: Setting up the service connection to Docker Hub'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.25：设置与 Docker Hub 的服务连接
- en: Once you have entered your details, click on the **Verify** button, and if the
    details you entered are correct, you will get a green tick. Before you click on
    the **Verify and save** button, you need to enter a **Service connection name**;
    I entered **Docker**, but you can use whatever you like—just make a note of it
    as we will need it shortly.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 输入详细信息后，点击 **验证** 按钮，如果你输入的详情正确，将显示一个绿色勾号。在点击 **验证并保存** 按钮之前，你需要输入一个 **服务连接名称**；我输入的是
    **Docker**，但你可以随意选择，只需记住它，因为稍后我们将需要用到。
- en: Next up, you will need a Git repository that contains the `Dockerfile` as well
    as a file called `azure-pipelines.yml`—there is an example repository at [https://github.com/russmckendrick/DevOpsContainerBuild](https://github.com/russmckendrick/DevOpsContainerBuild)
    that you can fork.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要一个包含 `Dockerfile` 和名为 `azure-pipelines.yml` 的文件的 Git 仓库—您可以 fork [https://github.com/russmckendrick/DevOpsContainerBuild](https://github.com/russmckendrick/DevOpsContainerBuild)
    中的示例仓库。
- en: 'Once you have your repository, return to your Azure DevOps project and then
    click on **Pipelines** in the left-hand side menu—here, you will be presented
    with the following screen:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得您的仓库，返回到 Azure DevOps 项目，然后点击左侧菜单中的**Pipelines**，此时您将看到如下界面：
- en: '![Figure 15.26: Viewing the Pipelines page for the first time'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.26：第一次查看 Pipelines 页面](img/Figure_15.26_B15659.jpg)'
- en: '](img/Figure_15.26_B15659.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.26_B15659.jpg)'
- en: 'Figure 15.26: Viewing the Pipelines page for the first time'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.26：第一次查看 Pipelines 页面
- en: 'As you may have guessed, you need to click on **Create Pipeline**, this will
    ask you for several pieces of information:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所猜测，您需要点击**创建管道**，这会要求您输入几个信息项：
- en: '**Where is your code?** Select GitHub. You will notice that YAML is next to
    it. We will be talking about the YAML file once we have the pipeline configured.'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**您的代码在哪里？** 请选择 GitHub。您会注意到旁边有 YAML。我们将在管道配置完成后讨论 YAML 文件。'
- en: Follow the onscreen instructions to link Azure DevOps to your GitHub account.
    Once it is linked, you will be asked to **Select a repository**. Select the repository
    that you forked earlier.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照屏幕上的指示将 Azure DevOps 与您的 GitHub 账户链接。一旦链接完成，系统会要求您**选择一个仓库**。请选择您之前 fork 的仓库。
- en: If the `azure-pipelines.yml` file is not automatically selected and you stay
    on the **Configure** screen, click on the **Existing Azure Pipelines YAML file**
    option, select the file from the drop-down list, and then click on **Continue**.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`azure-pipelines.yml`文件没有被自动选中并且您停留在**配置**界面上，请点击**现有 Azure Pipelines YAML
    文件**选项，从下拉列表中选择文件，然后点击**继续**。
- en: The **Review** page gives you the option to **Review your pipeline YAML** file,
    as well as the option to **Run** it; however, before we do, click on **Variables**.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**审核** 页面为您提供了**审核您的管道 YAML** 文件的选项，还可以选择**运行**它；不过，在此之前，请点击**变量**。'
- en: We need to add two variables. The first will let the pipeline know the name
    of the service connection to Docker Hub that we configured earlier in this section
    and the second one will let the pipeline know the name of the Docker Hub repository
    we would like our Azure DevOps pipeline to push the image to once it has been
    built.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加两个变量。第一个变量将让管道知道我们在本节中配置的 Docker Hub 服务连接的名称，第二个变量将让管道知道我们希望 Azure DevOps
    管道将构建好的镜像推送到的 Docker Hub 仓库名称。
- en: Click on the `targetRegistry` in the `Docker`. Click on the `targetRepo`, then
    for the `russmckendrick/AzureDevOpsBuild`. Click on **OK** and then **Save**.
    Once saved, click on the **Run** button to trigger your build.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `Docker` 中的 `targetRegistry`，然后点击 `targetRepo`，接着为 `russmckendrick/AzureDevOpsBuild`
    设置值。点击**确定**，然后点击**保存**。保存后，点击**运行**按钮触发构建。
- en: 'The `azure-pipeline.yml` file looks like the following. First, we have the
    **trigger** configuration; this is set to **master**, which means that a build
    is triggered every time that the master branch is updated:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`azure-pipeline.yml` 文件如下所示。首先，我们有 **触发器** 配置；该配置设置为 **master**，意味着每当主分支更新时，都会触发构建：'
- en: '[PRE19]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next up, we have **pool**. This tells Azure DevOps which virtual image to launch
    when the pipeline is being executed; as you can see, we are using Ubuntu:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是**pool**。这告诉 Azure DevOps 在管道执行时启动哪个虚拟镜像；如您所见，我们使用的是 Ubuntu：
- en: '[PRE20]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The remainder of the `azure-pipeline.yml` file is the build `Docker@2` task
    to log in to Docker Hub:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`azure-pipeline.yml` 文件的其余部分是构建 `Docker@2` 任务，用于登录到 Docker Hub：'
- en: '[PRE21]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We are using the variable that we defined when setting up the pipeline by entering
    `$(targetRegistry)`. This lets the task know which service connection to use.
    The next task builds and pushes our container image:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用在设置管道时定义的变量 `$(targetRegistry)`。这会告诉任务使用哪个服务连接。下一个任务是构建并推送我们的容器镜像：
- en: '[PRE22]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As you can see, the syntax is easy to follow. We are also using the second
    variable `$(targetRepo)` to define the target for our image to be pushed to. The
    final task logs out of Docker Hub:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，语法非常易于理解。我们还使用了第二个变量 `$(targetRepo)` 来定义我们希望推送到的目标镜像仓库。最后一个任务是退出 Docker
    Hub：
- en: '[PRE23]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: While the last task is probably not really needed, as, while Azure DevOps spins
    up to build our image, the virtual machine is terminated once the build finishes,
    it will also be terminated if there are any errors, so we do not have to worry
    about the virtual machine being reused or our login being accessed by a third
    party.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一项任务可能不太需要，因为在 Azure DevOps 启动构建镜像时，虚拟机会在构建完成后被终止，如果构建过程中发生任何错误，虚拟机也会被终止，因此我们不必担心虚拟机被重复使用或我们的登录被第三方访问。
- en: 'A completed pipeline run looks something like the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的管道运行大致如下：
- en: '![Figure 15.27: A completed pipeline run'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.27：已完成的管道运行'
- en: '](img/Figure_15.27_B15659.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.27_B15659.jpg)'
- en: 'Figure 15.27: A completed pipeline run'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.27：已完成的管道运行
- en: Once finished, you should see the newly built container in your Docker Hub account.
    As mentioned before we started to configure our Azure DevOps pipeline, we have
    hardly scratched the surface of what Azure DevOps can do; see the *Further reading*
    section of this chapter for some interesting links on Azure DevOps.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你应该能够在你的 Docker Hub 账户中看到新构建的容器。如前所述，在我们开始配置 Azure DevOps 管道之前，我们几乎只触及了
    Azure DevOps 能做的事情；有关 Azure DevOps 的一些有趣链接，请参阅本章的*进一步阅读*部分。
- en: Next, we are going to take a look at how to monitor our containers and Docker
    hosts.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何监控我们的容器和 Docker 主机。
- en: Monitoring Docker and Kubernetes
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控 Docker 和 Kubernetes
- en: In [*Chapter 4*](B15659_04_Final_JM_ePub.xhtml#_idTextAnchor133), *Managing
    Containers*, we discussed the `docker container top` and `docker container stats`
    commands. You may recall that both of these commands show real-time information
    only—there is no historical data that is kept.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 4 章*](B15659_04_Final_JM_ePub.xhtml#_idTextAnchor133)，*管理容器*一章中，我们讨论了`docker
    container top`和`docker container stats`命令。你可能记得，这两个命令仅显示实时信息——没有保存历史数据。
- en: This is great if you are trying to debug a problem as it is running or want
    to quickly get an idea of what is going on inside your containers; however, it
    is not too helpful if you need to look back at a problem. For example, you may
    have configured your containers to restart if they have become unresponsive. While
    that will help with the availability of your application, it isn't much of a help
    if you need to look at why your container became unresponsive.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在调试一个正在运行的问题，或者想快速了解容器内部发生了什么，这非常有用；然而，如果你需要回顾一个问题，这就不太有帮助了。例如，你可能已配置容器在变得无响应时重启。虽然这有助于应用程序的可用性，但如果你需要查看容器为什么变得无响应，它帮助不大。
- en: 'In the GitHub repository in the `/chapter14` folder, there is a folder called
    `prometheus` in which there is a Docker Compose file that launches three different
    containers on two networks. Rather than looking at the Docker Compose file itself,
    let''s take a look at a visualization:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 仓库的 `/chapter14` 文件夹中，有一个名为 `prometheus` 的文件夹，里面有一个 Docker Compose
    文件，该文件在两个网络上启动了三个不同的容器。我们不直接查看 Docker Compose 文件本身，而是来看一下可视化效果：
- en: '![Figure 15.28: Visualization of the Prometheus Docker Compose file'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.28：Prometheus Docker Compose 文件的可视化'
- en: '](img/Figure_15.28_B15659.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.28_B15659.jpg)'
- en: 'Figure 15.28: Visualization of the Prometheus Docker Compose file'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.28：Prometheus Docker Compose 文件的可视化
- en: 'You can generate this yourself by running the following command:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令自行生成这个：
- en: '[PRE24]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As you can see, there is a lot going on. The three services that we are running
    are as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，事情正在发生变化。我们正在运行的三个服务如下：
- en: Cadvisor
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cadvisor
- en: Prometheus
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prometheus
- en: Grafana
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grafana
- en: 'Before we launch and configure our Docker Compose services, we should talk
    about why each one is needed, starting with `cadvisor`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们启动并配置 Docker Compose 服务之前，我们应该先讨论每个服务的必要性，从 `cadvisor` 开始：
- en: 'The `cadvisor` service is a project that was released by Google. As you can
    see from the Docker Hub username in the image we are using, the service section
    in the Docker Compose file looks like the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`cadvisor` 服务是一个由 Google 发布的项目。如图中所示的 Docker Hub 用户名，我们正在使用的服务部分在 Docker Compose
    文件中如下所示：'
- en: '[PRE25]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We are mounting the various parts of our host's filesystem to allow `cadvisor`
    access to our Docker installation in much the same way as we did in [*Chapter
    9*](B15659_09_Final_JM_ePub.xhtml#_idTextAnchor261), *Portainer* – *A GUI for
    Docker*. The reason for this is that, in our case, we are going to be using `cadvisor`
    to collect statistics on our containers. While it can be used as a standalone
    container-monitoring service, we do not want to publicly expose the `cadvisor`
    container. Instead, we are just making it available to other containers within
    our Docker Compose stack on the back network.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在挂载宿主机的各种文件系统部分，以便 `cadvisor` 访问我们的 Docker 安装，方式与我们在 [*第9章*](B15659_09_Final_JM_ePub.xhtml#_idTextAnchor261)
    中的 *Portainer* – *Docker 图形用户界面* 相似。这样做的原因是，在我们的案例中，我们将使用 `cadvisor` 来收集容器的统计信息。虽然它可以作为独立的容器监控服务使用，但我们不希望公开暴露
    `cadvisor` 容器。相反，我们仅将其提供给我们 Docker Compose 堆栈中的其他容器，在后台网络中使用。
- en: The `cadvisor` service is a self-contained web frontend to the Docker container
    stat command, displaying graphs and allowing you to drill down from your Docker
    host into your containers using an easy-to-use interface; however, it doesn't
    keep more than five minutes' worth of metrics.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`cadvisor` 服务是一个自包含的 Docker 容器状态命令的 Web 前端，能够显示图表，并允许你通过简洁的界面从 Docker 主机深入到容器中；但是，它不会保留超过五分钟的数据指标。'
- en: As we are attempting to record metrics that can be available hours or even days
    later, having no more than five minutes' worth of metrics means that we are going
    to have to use additional tools to record the metrics it processes. The `cadvisor`
    service exposes the information that we want to record in our containers as structured
    data at `http://cadvisor:8080/metrics/`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们试图记录的指标可能会在几小时甚至几天后才能获取，只有五分钟的指标数据意味着我们需要使用额外的工具来记录它所处理的指标。`cadvisor` 服务以结构化数据的形式暴露我们希望记录在容器中的信息，访问地址为
    `http://cadvisor:8080/metrics/`。
- en: 'We will look at why this is important in a moment. The `cadvisor` endpoint
    is being scraped automatically by our next service, `prometheus`. This is where
    most of the heavy lifting happens. The `prometheus` is a monitoring tool that
    is written and open sourced by SoundCloud:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后我们会看为什么这很重要。`cadvisor` 端点会被我们的下一个服务 `prometheus` 自动抓取。这是大多数重负载处理的地方。`prometheus`
    是一个由 SoundCloud 编写并开源的监控工具：
- en: '[PRE26]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As you can see from the preceding service definition, we are mounting a configuration
    file called `./prometheus/prometheus.yml` and a volume called `prometheus_data`.
    The configuration file contains information about the sources we want to scrape,
    as you can see from the following configuration:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面服务定义所示，我们挂载了一个名为 `./prometheus/prometheus.yml` 的配置文件和一个名为 `prometheus_data`
    的数据卷。该配置文件包含了我们希望抓取的数据源信息，正如以下配置所示：
- en: '[PRE27]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We are instructing Prometheus to scrape data from our endpoints every 15 seconds.
    The endpoints are defined in the `scrape_configs` section, and as you can see,
    we have `cadvisor` defined in there, as well as Prometheus itself. The reason
    we are creating and mounting the `prometheus_data` volume is that Prometheus is
    going to be storing all of our metrics, so we need to keep it safe.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指示 Prometheus 每 15 秒抓取一次我们的端点数据。端点在 `scrape_configs` 部分定义，如你所见，我们在那里定义了 `cadvisor`
    和 Prometheus 本身。我们创建并挂载 `prometheus_data` 数据卷的原因是 Prometheus 将存储我们所有的指标数据，因此我们需要确保其安全。
- en: At its core, Prometheus is a time-series database. It takes the data it has
    scraped, processes it to find the metric name and value, and then stores it along
    with a timestamp.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，Prometheus 是一个时间序列数据库。它获取抓取的数据，处理数据以找到指标名称和值，然后将其与时间戳一起存储。
- en: Prometheus also comes with a powerful query engine and API, making it the perfect
    database for this kind of data. While it does come with basic graphing capabilities,
    it is recommended that you use *Grafana*, which is our final service, and also
    the only one to be exposed publicly.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 还带有一个强大的查询引擎和 API，使其成为这类数据的完美数据库。虽然它确实具备基本的图表绘制功能，但建议使用 *Grafana*，这也是我们最终的服务，并且是唯一公开暴露的服务。
- en: '*Grafana* is an open source tool for displaying monitoring graphs and metric
    analytics, which allows you to create dashboards using time-series databases,
    such as Graphite, InfluxDB, and also Prometheus. There are also further backend
    database options that are available as plugins.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '*Grafana* 是一个开源工具，用于显示监控图表和指标分析，它允许你使用时间序列数据库（如 Graphite、InfluxDB 以及 Prometheus）来创建仪表盘。还有其他可作为插件提供的后端数据库选项。'
- en: 'The Docker Compose definition for Grafana follows a similar pattern to our
    other services:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana的Docker Compose定义遵循与我们其他服务类似的模式：
- en: '[PRE28]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We are using the `grafana_data` volume to store Grafana's own internal configuration
    database, and rather than storing the environment variables in the Docker Compose
    file, we are loading them from an external file called `./grafana/grafana.config`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`grafana_data`卷来存储Grafana自身的内部配置数据库，而不是将环境变量存储在Docker Compose文件中，而是从一个名为`./grafana/grafana.config`的外部文件加载它们。
- en: 'The variables are as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 变量如下所示：
- en: '[PRE29]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As you can see, we are setting the username and password here, so having them
    in an external file means that you can change these values without editing the
    core Docker Compose file.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在这里设置了用户名和密码，因此将它们放在外部文件中意味着你可以在不编辑核心Docker Compose文件的情况下更改这些值。
- en: Now that we know the role that each of the three services fulfills, let's launch
    them.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了这三个服务各自的角色，接下来让我们启动它们。
- en: 'To do this, simply run the following commands from the `prometheus` folder:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，只需从`prometheus`文件夹中运行以下命令：
- en: '[PRE30]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will create a network and the volumes and pull the images from the Docker
    Hub. It will then go about launching the three services:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个网络和卷，并从Docker Hub拉取镜像。然后，它将启动三个服务：
- en: '![Figure 15.29: Running docker-compose up -d to launch our Prometheus application'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.29：运行docker-compose up -d启动我们的Prometheus应用](img/Figure_15.29_B15659.jpg)'
- en: '](img/Figure_15.29_B15659.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.29_B15659.jpg)'
- en: 'Figure 15.29: Running docker-compose up -d to launch our Prometheus application'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.29：运行docker-compose up -d启动我们的Prometheus应用
- en: 'You may be tempted to go immediately to your Grafana dashboard. If you did,
    you would not see anything, as Grafana takes a few minutes to initialize itself.
    You can follow its progress by looking at the logs:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会立刻想进入Grafana仪表盘。如果你这么做，你什么也看不见，因为Grafana需要几分钟来初始化。你可以通过查看日志来跟踪它的进度：
- en: '[PRE31]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output of the command is given here:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下所示：
- en: '![Figure 15.30: Checking the logs to see if Grafana is ready'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.30：检查日志以查看 Grafana 是否准备就绪](img/Figure_15.30_B15659.jpg)'
- en: '](img/Figure_15.30_B15659.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.30_B15659.jpg)'
- en: 'Figure 15.30: Checking the logs to see if Grafana is ready'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.30：检查日志以查看 Grafana 是否准备就绪
- en: Once you see the `HTTP Server Listen` message, Grafana will be available. From
    Grafana version `5`, you can import data sources and dashboards, which is why
    we are mounting the `./grafana/provisioning/` folder from our host machine to
    `/etc/grafana/provisioning/`.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你看到`HTTP Server Listen`消息，Grafana将可用。从Grafana版本`5`开始，你可以导入数据源和仪表盘，这就是我们将`./grafana/provisioning/`文件夹从主机挂载到`/etc/grafana/provisioning/`的原因。
- en: This folder contains the configuration that automatically configures Grafana
    to talk to our Prometheus service and imports the dashboard, which will display
    the data that Prometheus is scraping from `cadvisor`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹包含自动配置Grafana与我们Prometheus服务对接并导入仪表盘的配置，该仪表盘将显示Prometheus从`cadvisor`抓取的数据。
- en: 'Open your browser and enter [http://localhost:3000/](http://localhost:3000/);
    you should be greeted with a login screen:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并输入[http://localhost:3000/](http://localhost:3000/)，你应该会看到登录界面：
- en: '![Figure 15.31: The Grafana login page'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.31：Grafana 登录页面](img/Figure_15.31_B15659.jpg)'
- en: '](img/Figure_15.31_B15659.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.31_B15659.jpg)'
- en: 'Figure 15.31: The Grafana login page'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.31：Grafana 登录页面
- en: 'Enter the `admin` with a `password`. Once logged in, if you have configured
    the data source, you should see the following page:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`admin`和`password`登录。一旦登录，如果你已经配置了数据源，你应该看到以下页面：
- en: '![Figure 15.32: Logging into Grafana'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.32：登录 Grafana](img/Figure_15.30_B15659.jpg)'
- en: '](img/Figure_15.32_B15659.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.32_B15659.jpg)'
- en: 'Figure 15.32: Logging into Grafana'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.32：登录到 Grafana
- en: 'As you can see, the initial steps of **Add your first data source** and **Create
    your first dashboard** have all been completed. Clicking on the **Home** button
    in the top left will bring up a menu that lists the available dashboards:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，**添加你的第一个数据源**和**创建你的第一个仪表盘**的初步步骤已经完成。点击左上角的**主页**按钮会弹出一个菜单，列出可用的仪表盘：
- en: '![Figure 15.33: Viewing the available dashboards'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.33：查看可用的仪表盘](img/Figure_15.33_B15659.jpg)'
- en: '](img/Figure_15.33_B15659.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.33_B15659.jpg)'
- en: 'Figure 15.33: Viewing the available dashboards'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.33：查看可用的仪表盘
- en: 'As you can see, we have one called **Docker Monitoring**. Clicking on it will
    take you to the following page:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们有一个名为**Docker Monitoring**的仪表盘。点击它会带你到以下页面：
- en: '![Figure 15.34: The Docker Monitoring dashboard'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.34：Docker Monitoring 仪表盘](img/Figure_15.34_B15659.jpg)'
- en: '](img/Figure_15.34_B15659.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.34_B15659.jpg)'
- en: 'Figure 15.34: The Docker Monitoring dashboard'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.34：Docker Monitoring 仪表盘
- en: 'As you can see from the timing information in the top right of the screen,
    by default, it displays the last five minutes'' worth of data. Clicking on it
    will allow you to change the time frame displays. For example, the following screen
    shows the last 15 minutes, which is obviously more than the five minutes that
    `cadvisor` is recording:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在屏幕右上角的时间信息中所看到的，默认情况下，它显示的是过去五分钟的数据。点击它可以更改时间范围的显示。例如，以下屏幕显示的是过去 15 分钟的数据，这显然比
    `cadvisor` 记录的五分钟更多：
- en: '![Figure 15.35: Viewing 15 minutes of data'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.35：查看 15 分钟的数据'
- en: '](img/Figure_15.35_B15659.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.35_B15659.jpg)'
- en: 'Figure 15.35: Viewing 15 minutes of data'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.35：查看 15 分钟的数据
- en: I have already mentioned that this is a complex solution; eventually, Docker
    will expand the recently built-in Prometheus endpoint, which currently only exposes
    information about Docker Engine and not the containers themselves. For more information
    on the built-in endpoint, check out the official Docker documentation, which can
    be found at [https://docs.docker.com/config/daemon/prometheus/](https://docs.docker.com/config/daemon/prometheus/).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经提到过，这是一个复杂的解决方案；最终，Docker 会扩展最近内建的 Prometheus 端点，目前它仅暴露 Docker 引擎的信息，而不包括容器本身。有关内建端点的更多信息，请查看官方
    Docker 文档，链接是 [https://docs.docker.com/config/daemon/prometheus/](https://docs.docker.com/config/daemon/prometheus/)。
- en: There are other monitoring solutions out there; most of them take the form of
    third-party **software as a service** (**SaaS**). As you can see from the list
    of services in the *Further reading* section, there are a few well-established
    monitoring solutions out there. In fact, you may already be using them, so it
    would be easy for you when expanding your configuration to take this into account
    when monitoring your containers.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有其他的监控解决方案；它们大多数以第三方**软件即服务**（**SaaS**）的形式存在。正如你从*进一步阅读*部分的服务列表中看到的那样，市面上有一些已经成熟的监控解决方案。事实上，你可能已经在使用它们，因此在扩展配置时，考虑到这些解决方案来监控你的容器会非常容易。
- en: '*What about Kubernetes?* you may be asking yourself. I have already mentioned
    that Prometheus was originally developed by *SoundCloud*, but it was also one
    of the first projects outside of Kubernetes to be donated to the **Cloud Native
    Computing Foundation** (**CNCF**).'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '*那 Kubernetes 呢？*你可能会问。我已经提到过，Prometheus 最初是由*SoundCloud*开发的，但它也是第一个被捐赠给**云原生计算基金会**（**CNCF**）的
    Kubernetes 以外的项目之一。'
- en: This means that there is support for Prometheus within Kubernetes and external
    services, such as Azure AKS—for example, Azure Monitor has seamless integration
    with Prometheus.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 Kubernetes 和外部服务（如 Azure AKS）中支持 Prometheus——例如，Azure Monitor 与 Prometheus
    有无缝集成。
- en: For a demonstration of this, see the Azure Friday presentation *How to use Prometheus
    to monitor containers in Azure Monitor* by *Keiko Harada with Scott Hanselman*,
    which can be found at the Microsoft Azure YouTube channel at [https://www.youtube.com/watch?v=5ARJ6DzqTYE](https://www.youtube.com/watch?v=5ARJ6DzqTYE).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，请查看 Azure Friday 的演讲 *如何使用 Prometheus 监控 Azure Monitor 中的容器*，由*Keiko
    Harada 与 Scott Hanselman* 主讲，视频可以在 Microsoft Azure YouTube 频道找到，链接是 [https://www.youtube.com/watch?v=5ARJ6DzqTYE](https://www.youtube.com/watch?v=5ARJ6DzqTYE)。
- en: What does production look like?
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境是什么样的？
- en: For the final section of this chapter, we are going to discuss what production
    should look like. This section isn't going to be as long as you think it will
    be, as the sheer number of options that are available means that it would be impossible
    to cover them all. You should also already have a good idea of what would work
    best for you based on the previous sections and chapters.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后部分，我们将讨论生产环境应该是什么样的。这个部分不会像你想象的那样长，因为可用的选项实在太多，无法一一覆盖。你也应该已经根据前面的部分和章节，形成了一个关于什么最适合你的良好概念。
- en: Instead, we are going to be looking at some questions that you should be asking
    yourself when planning your environments.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们将讨论在规划你的环境时，你应该问自己的一些问题。
- en: Your Docker hosts
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的 Docker 主机
- en: Docker hosts are the key component of your environment. Without these, you won't
    have anywhere to run your containers. As we have already seen in previous chapters,
    there are a few considerations to bear in mind when it comes to running your Docker
    hosts.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 主机是你环境中的关键组件。如果没有这些，你就没有地方运行你的容器。正如我们在前面章节中看到的，运行 Docker 主机时有一些需要考虑的事项。
- en: The first thing you need to take into account is that, if your hosts are running
    Docker, they should not run any other services.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要首先考虑的一点是，如果你的主机正在运行 Docker，它们不应该运行任何其他服务。
- en: Mixing of processes
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进程混合
- en: You should resist the temptation of quickly installing Docker on an existing
    host and launching a container. This might not only have implications for security,
    with you having a mixture of isolated and nonisolated processes on a single host,
    but it can also cause performance issues as you are not able to add resource limits
    to your noncontainerized applications, meaning that, potentially, they can also
    have a negative impact on your running containers.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该抵制在现有主机上快速安装 Docker 并启动容器的诱惑。这不仅可能对安全性产生影响，因为在单个主机上混合了隔离和非隔离的进程，还可能导致性能问题，因为你无法为非容器化应用程序添加资源限制，这意味着它们可能会对正在运行的容器产生负面影响。
- en: Multiple isolated Docker hosts
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多个隔离的 Docker 主机
- en: If you have more than a few Docker hosts, how are you going to manage them?
    Running a tool, such as Portainer, is great, but it can become troublesome when
    attempting to manage more than a few hosts. Also, if you are running multiple
    isolated Docker hosts, you do not have the option of moving containers between
    hosts.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有超过几个 Docker 主机，你打算如何管理它们？运行像 Portainer 这样的工具很好，但当尝试管理超过几个主机时，它可能会变得麻烦。此外，如果你运行多个隔离的
    Docker 主机，你就没有将容器在主机之间移动的选项。
- en: Sure, you can use tools such as Weave Net to span the container network across
    multiple individual Docker hosts. Depending on your hosting environment, you may
    also have the option of creating volumes on external storage and presenting them
    to Docker hosts as needed, but you are very much creating a manual process to
    manage the migration of containers between hosts.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以使用像 Weave Net 这样的工具，将容器网络跨多个独立的 Docker 主机进行扩展。根据你的托管环境，你也许有机会在外部存储上创建卷，并在需要时将其呈现给
    Docker 主机，但你实际上是在创建一个手动过程，用来管理容器在主机之间的迁移。
- en: Routing to your containers
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由到你的容器
- en: You need to consider how you are going to route requests among your containers
    if you have multiple hosts.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个主机，你需要考虑如何在容器之间路由请求。
- en: For example, if you have an external load balancer, such as an ELB in AWS, or
    a dedicated device in front of an on-premise cluster, do you have the ability
    to dynamically add routes for traffic hitting port **x** on your load balancer
    to port **y** on your Docker hosts, at which point the traffic is then routed
    through to your container?
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你有一个外部负载均衡器，比如 AWS 中的 ELB，或者一个位于本地集群前面的专用设备，你是否能够动态地为流量添加路由，将流量从负载均衡器上的端口
    **x** 路由到 Docker 主机上的端口 **y**，然后将流量路由到你的容器？
- en: If you have multiple containers that all need to be accessible on the same external
    port, how are you going handle that?
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个容器都需要在相同的外部端口上进行访问，你打算如何处理？
- en: Do you need to install a proxy, such as Traefik, HAProxy, or NGINX to accept
    and then route your requests based on virtual hosts based on domains or subdomains,
    rather than just using port-based routing?
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否需要安装代理，比如 Traefik、HAProxy 或 NGINX，用于根据虚拟主机（基于域名或子域名）来接收并路由请求，而不是仅仅使用基于端口的路由？
- en: Clustering
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群
- en: A lot of what we have discussed in the previous section can be solved by introducing
    clustering tools, such as Docker Swarm and Kubernetes.Let's quickly discuss some
    of the things that you should be asking yourself when assessing clustering technologies.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一节中讨论的许多问题可以通过引入集群工具来解决，比如 Docker Swarm 和 Kubernetes。我们快速讨论一下，在评估集群技术时，你应该问自己的一些问题。
- en: Compatibility
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 兼容性
- en: Even though an application might work fine on a developer's local Docker installation,
    you need to be able to guarantee that if you take the application and deploy it
    to, for example, a Kubernetes cluster, it works in the same way.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 即使一个应用程序在开发人员的本地 Docker 安装上运行良好，你也需要能够保证，当你将应用程序部署到比如 Kubernetes 集群时，它能够以相同的方式运行。
- en: Nine times out of ten, you will not have a problem, but you do need to consider
    how the application is communicating internally with other containers within the
    same application set.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 十有八九，你不会遇到问题，但你确实需要考虑应用程序如何与同一应用程序集内的其他容器进行内部通信。
- en: Reference architectures
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考架构
- en: Are there reference architectures available for your chosen clustering technology?
    It is always best to check when deploying a cluster. There are best-practice guides
    that are close to or match your proposed environment. After all, no one wants
    to create one big single point of failure.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有适用于你所选择的集群技术的参考架构？在部署集群时最好先检查一下。总有一些最佳实践指南，与你拟议的环境非常接近或完全匹配。毕竟，没有人希望创建一个大的单点故障。
- en: Also, what are the recommended resources? There is no point in deploying a cluster
    with five management nodes and a single Docker host, just like there is little
    point in deploying five Docker hosts and a single management server, as you have
    quite a large single point of failure.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，推荐的资源有哪些？部署一个有五个管理节点和一个 Docker 主机的集群是没有意义的，就像部署五个 Docker 主机和一个管理服务器一样没有意义，因为这样你有一个很大的单点故障。
- en: What supporting technologies does your cluster technology support (for example,
    remote storage, load balancers, and firewalls)?
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 你的集群技术支持哪些辅助技术（例如远程存储、负载均衡器和防火墙）？
- en: Cluster communication
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集群通信
- en: What are the requirements when it comes to the cluster communicating with either
    management or Docker hosts? Do you need an internal or separate network to isolate
    the cluster traffic?
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 集群与管理主机或 Docker 主机通信时有什么要求？你是否需要一个内部或独立的网络来隔离集群流量？
- en: Can you easily lock a cluster member down to only your cluster? Is the cluster
    communication encrypted? What information about your cluster could be exposed?
    Does this make it a target for hackers?
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否可以轻松地将一个集群成员锁定为仅限于你的集群？集群通信是否加密？关于你的集群有哪些信息可能被暴露？这会使其成为黑客的目标吗？
- en: What external access does the cluster need to APIs, such as your public cloud
    providers? How securely are any API/access credentials stored?
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 集群需要访问哪些外部 API，比如你的公共云提供商？任何 API/访问凭证是如何安全存储的？
- en: Image registries
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 镜像注册表
- en: How is your application packaged? Have you baked the code into the image? If
    so, do you need to host a private local image registry or are you okay with using
    an external service, such as Docker Hub, **Docker Trusted Registry** (**DTR**),
    or Quay?
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序是如何打包的？你是否已经将代码嵌入到镜像中？如果是，你是否需要托管一个私有的本地镜像注册表，还是可以接受使用外部服务，例如 Docker Hub、**Docker
    Trusted Registry**（**DTR**）或 Quay？
- en: If you need to host your own private registry, where in your environment should
    it sit? Who has or needs access? Can it hook into your directory provider, such
    as an Active Directory installation?
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要托管自己的私有注册表，应该将它放在你的环境中的哪里？谁有权限访问？它能否与目录提供商（例如 Active Directory 安装）连接？
- en: Summary
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at a few different workflows for Docker, along with
    how to get some monitoring for your containers and Docker hosts up and running.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们查看了几种不同的 Docker 工作流，并学习了如何为容器和 Docker 主机设置一些监控。
- en: The best thing you can do when it comes to your own environment is build a proof
    of concept and try as hard as you can to cover every disaster scenario you can
    think of. You can get a head start by using the container services provided by
    your cloud provider or by looking for a good reference architecture, which should
    both reduce your trial and error rates.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到自己的环境时，你能做的最好的事情就是建立一个概念验证，并尽力覆盖你能想到的所有灾难场景。你可以通过使用云服务提供商提供的容器服务或寻找一个好的参考架构来提前开始，这两者都能减少你的试错率。
- en: In the next chapter, we are going to take a look at what your next step in the
    world of containers could be.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨在容器世界中，你的下一步可能是什么。
- en: Questions
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which container serves our WordPress website?
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个容器为我们的 WordPress 网站提供服务？
- en: Why doesn't the `wp` container remain running?
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 `wp` 容器没有保持运行？
- en: In minutes, how long does `cadvisor` keep metrics for?
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cadvisor` 会保留多少分钟的指标数据？'
- en: What Docker Compose command can be used to remove everything to do with the
    application?
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 Docker Compose 命令可以用来删除与应用程序相关的所有内容？
- en: Further reading
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'You can find details on the software we have used in this chapter at the following
    sites:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下网站找到我们在本章中使用的软件的详细信息：
- en: 'WordPress: [http://wordpress.org/](http://wordpress.org/)'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'WordPress: [http://wordpress.org/](http://wordpress.org/)'
- en: 'WP-CLI: [https://wp-cli.org/](https://wp-cli.org/)'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'WP-CLI: [https://wp-cli.org/](https://wp-cli.org/)'
- en: 'PHP-FPM: [https://php-fpm.org/](https://php-fpm.org/)'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PHP-FPM: [https://php-fpm.org/](https://php-fpm.org/)'
- en: 'Cadvisor: [https://github.com/google/cadvisor/](https://github.com/google/cadvisor/)'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Cadvisor: [https://github.com/google/cadvisor/](https://github.com/google/cadvisor/)'
- en: 'Prometheus: [https://prometheus.io/](https://prometheus.io/)'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Prometheus: [https://prometheus.io/](https://prometheus.io/)'
- en: 'Grafana: [https://grafana.com/](https://grafana.com/)'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Grafana: [https://grafana.com/](https://grafana.com/)'
- en: 'Prometheus data model: [https://prometheus.io/docs/concepts/data_model/](https://prometheus.io/docs/concepts/data_model/)'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Prometheus 数据模型: [https://prometheus.io/docs/concepts/data_model/](https://prometheus.io/docs/concepts/data_model/)'
- en: 'Traefik: [https://containo.us/traefik/](https://containo.us/traefik/)'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Traefik: [https://containo.us/traefik/](https://containo.us/traefik/)'
- en: 'HAProxy: [https://www.haproxy.org/](https://www.haproxy.org/)'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'HAProxy: [https://www.haproxy.org/](https://www.haproxy.org/)'
- en: 'NGINX: [https://nginx.org/](https://nginx.org/)'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NGINX: [https://nginx.org/](https://nginx.org/)'
- en: 'For more information on Docker and Azure DevOps, go to the following links:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Docker 和 Azure DevOps 的更多信息，请访问以下链接：
- en: 'Azure DevOps Docker Build Task: [https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker?view=azure-devops)'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure DevOps Docker 构建任务: [https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker?view=azure-devops)'
- en: 'Azure DevOps Docker Compose Build Task: [https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker-compose?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker-compose?view=azure-devops)'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure DevOps Docker Compose 构建任务: [https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker-compose?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker-compose?view=azure-devops)'
- en: 'Azure DevOps and Azure Container Registry: [https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/acr-template?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/acr-template?view=azure-devops)'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure DevOps 和 Azure 容器注册表: [https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/acr-template?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/containers/acr-template?view=azure-devops)'
- en: 'Azure DevOps titles at Packt Publishing: [https://www.packtpub.com/catalogsearch/result/?q=Azure%20DevOps](https://www.packtpub.com/catalogsearch/result/?q=Azure%20DevOps)'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Packt Publishing 上的 Azure DevOps 书籍: [https://www.packtpub.com/catalogsearch/result/?q=Azure%20DevOps](https://www.packtpub.com/catalogsearch/result/?q=Azure%20DevOps)'
- en: 'Other externally hosted Docker monitoring platforms include the following:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 其他外部托管的 Docker 监控平台包括以下内容：
- en: 'Sysdig Cloud: [https://sysdig.com/](https://sysdig.com/)'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sysdig Cloud: [https://sysdig.com/](https://sysdig.com/)'
- en: 'Datadog: [https://docs.datadoghq.com/agent/docker/?tab=standard](https://docs.datadoghq.com/agent/docker/?tab=standard%20)'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Datadog: [https://docs.datadoghq.com/agent/docker/?tab=standard](https://docs.datadoghq.com/agent/docker/?tab=standard%20)'
- en: 'SignalFx: [https://signalfx.com/docker-monitoring/](https://signalfx.com/docker-monitoring/)'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SignalFx: [https://signalfx.com/docker-monitoring/](https://signalfx.com/docker-monitoring/)'
- en: 'New Relic: [https://newrelic.com/partner/docker](https://newrelic.com/partner/docker)'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'New Relic: [https://newrelic.com/partner/docker](https://newrelic.com/partner/docker)'
- en: 'Sematext: [https://sematext.com/docker/](https://sematext.com/docker/)'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sematext: [https://sematext.com/docker/](https://sematext.com/docker/)'
- en: 'There are also other self-hosted options, such as the following:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他自托管选项，例如以下内容：
- en: 'Elastic Beats: [https://www.elastic.co/products/beats](https://www.elastic.co/products/beats)'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Elastic Beats: [https://www.elastic.co/products/beats](https://www.elastic.co/products/beats)'
- en: 'Sysdig: [https://sysdig.com/opensource/](https://sysdig.com/opensource/)'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sysdig: [https://sysdig.com/opensource/](https://sysdig.com/opensource/)'
- en: 'Zabbix: [https://github.com/monitoringartist/zabbix-docker-monitoring](https://github.com/monitoringartist/zabbix-docker-monitoring)'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Zabbix: [https://github.com/monitoringartist/zabbix-docker-monitoring](https://github.com/monitoringartist/zabbix-docker-monitoring)'
- en: 'The following list shows some extensions for other IDEs:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表显示了一些其他 IDE 的扩展：
- en: 'Atom Docker Package: [https://atom.io/packages/docker](https://atom.io/packages/docker)'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Atom Docker 包: [https://atom.io/packages/docker](https://atom.io/packages/docker)'
- en: 'Sublime Text Docker Plugin: [https://github.com/domeide/sublime-docker](https://github.com/domeide/sublime-docker)'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sublime Text Docker 插件: [https://github.com/domeide/sublime-docker](https://github.com/domeide/sublime-docker)'
- en: 'Jetbrains Docker support: [https://www.jetbrains.com/help/idea/docker.html](https://www.jetbrains.com/help/idea/docker.html)'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Jetbrains Docker 支持: [https://www.jetbrains.com/help/idea/docker.html](https://www.jetbrains.com/help/idea/docker.html)'
