- en: Chapter 2. Exploring Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 探索Docker
- en: 'After reading this chapter, you will find yourself more comfortable talking
    about and using Docker. The following topics will be covered here:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完这一章后，你会发现自己更能舒适地谈论和使用Docker。本章将涵盖以下话题：
- en: The Docker image
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker镜像
- en: The Docker container
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker容器
- en: The Docker command-line interface
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker命令行界面
- en: The Docker Registry Hub
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Registry Hub
- en: You will find these topics important when building your PaaS, and you will use
    and interact with all of them throughout this book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建PaaS时，你会发现这些话题非常重要，整个书中你都会使用和与它们交互。
- en: The Docker image
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker镜像
- en: In the beginning, it can be hard to understand the difference between a Docker
    image and a Docker (or Linux) container.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，很难理解Docker镜像和Docker（或Linux）容器之间的区别。
- en: Imagine that our Linux kernel is layer zero. Whenever we run a Docker image,
    a layer is put on top of our kernel layer. This image, layer one, is a read-only
    image and cannot be changed or cannot hold a state.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，我们的Linux内核是零层。每当我们运行一个Docker镜像时，会在内核层上方添加一层。这层镜像（层一）是只读的，无法更改，也无法持有状态。
- en: A Docker image can build on top of another Docker image that builds on top of
    another Docker image and so on. The first image layer is called a **base image**,
    and all other layers except the last image layer are called **parent images**.
    They inherit all the properties and settings of their parent images and add their
    own configuration in the Dockerfile.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Docker镜像可以建立在另一个Docker镜像的基础上，而另一个Docker镜像又建立在另一个Docker镜像的基础上，依此类推。第一个镜像层称为**基础镜像**，除了最后一个镜像层之外的所有其他镜像层都称为**父镜像**。它们继承了父镜像的所有属性和设置，并在Dockerfile中添加了自己的配置。
- en: 'Docker images are identified by an image ID, which is a 64-character long hexadecimal
    string, but when working with images, we will almost never reference an image
    by this ID but use the image names instead. To list all our locally available
    Docker images, we use the `docker images` command. Take a look at the following
    image to see how the images are listed:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像通过镜像ID进行标识，它是一个64字符长的十六进制字符串，但在操作镜像时，我们几乎从不使用该ID引用镜像，而是使用镜像名称。要列出所有本地可用的Docker镜像，我们使用`docker
    images`命令。请查看以下图像，看看镜像是如何列出的：
- en: '![The Docker image](img/3946_02_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Docker镜像](img/3946_02_01.jpg)'
- en: 'Images can be distributed with different versions for us to choose from, and
    the mechanism for this is called **tags**. The preceding screenshot illustrates
    this with the **neo4j** image that has a **latest** and a **2.1.5** tag. This
    is how the command used to pull a specific tag looks:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像可以分发不同的版本供我们选择，这个机制被称为**标签**。前面的截图通过**neo4j**镜像展示了**latest**和**2.1.5**标签。这是拉取特定标签镜像的命令示例：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Docker container
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker容器
- en: 'A Docker container is created the moment we execute `docker run imagename`.
    A writeable layer is added on top of all the image layers. This layer has processes
    running on the CPU and can have two different states: running or exited. This
    is the container. When we start a container with the Docker run command, it enters
    the running state until it, for some reason, stops by itself or is stopped by
    us and then enters the exited state.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行`docker run imagename`时，会创建一个Docker容器。在所有镜像层之上，添加了一个可写层。这个层上有在CPU上运行的进程，并且可以有两种不同的状态：运行中或已退出。这就是容器。当我们通过Docker运行命令启动一个容器时，它进入运行状态，直到因为某种原因停止，或者被我们停止，然后进入退出状态。
- en: When we have a container running, all the changes we make to its filesystem
    are permanent between start and stop. Remember that changes made to the container's
    filesystem are not written to the underlying Docker image.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个容器正在运行时，对其文件系统所做的所有更改都是在启动和停止之间保持永久的。请记住，对容器文件系统所做的更改不会写入底层的Docker镜像。
- en: We can start as many instances of running containers as we want from the same
    image; they will all live side by side, totally separated by each other. All the
    changes we make to a container are limited to that container only.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从同一个镜像启动任意多个容器实例，它们将彼此并排运行，并且完全隔离。我们对容器所做的所有更改仅限于该容器本身。
- en: If changes are made to the container's underlying image, the running container
    is unaffected and there is no autoupdate happening. If we want to update our container
    to a newer version of its image, we have to be careful and make sure that we have
    set up the data structure in a correct way, otherwise we have the risk of losing
    all the data in the container. Later in this book, I will show you where to keep
    important data without the risk of losing it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对容器的底层镜像进行了更改，运行中的容器不会受到影响，并且不会自动更新。如果我们想要将容器更新为其镜像的新版本，我们必须小心，确保正确设置了数据结构，否则可能会丢失容器中的所有数据。本书稍后会向你展示如何在没有丢失数据风险的情况下存储重要数据。
- en: 'The corresponding screenshot is shown as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对应的截图如下所示：
- en: '![The Docker container](img/3946_02_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Docker 容器](img/3946_02_02.jpg)'
- en: A 64-character long hexadecimal string called **container ID** identifies Docker
    containers. This ID can be used when interacting with the container, and depending
    on how many containers we have running, we will usually only have to type the
    first four characters of the container ID. We can use the container name as well,
    but it's often easier to type the beginning of the ID.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个由 64 个字符组成的十六进制字符串被称为 **容器 ID**，它用于标识 Docker 容器。这个 ID 在与容器交互时可以使用，并且根据我们运行的容器数量，通常只需要输入容器
    ID 的前四个字符。我们也可以使用容器的名称，但通常输入 ID 的前几个字符更方便。
- en: The Docker command-line interface
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 命令行界面
- en: The command line interface is where we communicate with the daemon using the
    Docker command. The Docker daemon is the background process that receives the
    commands that are typed by us.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行界面是我们与守护进程使用 Docker 命令进行通信的地方。Docker 守护进程是后台进程，它接收我们输入的命令。
- en: 'In the previous chapter, we ran a few Docker commands to start and stop containers
    as well as to list containers and images. Now, we are going to learn a few more
    that will help us when handling containers for our PaaS, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们运行了一些 Docker 命令来启动和停止容器，并列出容器和镜像。现在，我们将学习一些更多的命令，这些命令将帮助我们在处理 PaaS 容器时，具体如下：
- en: '`docker logs <container-ID|name>`: Everything that is written to the `STDOUT`
    containers will end up in the file that can be accessed via this command. This
    is a very handy way to output information from within a container, as shown here:![The
    Docker command-line interface](img/3946_02_03.jpg)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker logs <container-ID|name>`：所有写入到 `STDOUT` 的容器信息都将被记录在文件中，通过此命令可以访问。这是从容器内部输出信息的一个非常方便的方式，如下所示：![Docker
    命令行界面](img/3946_02_03.jpg)'
- en: '`docker export <container-ID|name>`: If you have a container that holds data
    that you want to export, this is the command to be used. This creates a tar archive
    and sends it to `STDOUT`:![The Docker command-line interface](img/3946_02_04.jpg)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker export <container-ID|name>`：如果你有一个容器包含你想要导出的数据，可以使用这个命令。它会创建一个 tar
    存档并将其发送到 `STDOUT`：![Docker 命令行界面](img/3946_02_04.jpg)'
- en: '`docker cp CONTAINER:PATH HOSTPATH`: If you don''t want the whole file system
    from a container but just one directory or a file, you can use `docker cp` instead
    of `export`, as shown in the following screenshot:![The Docker command-line interface](img/3946_02_05.jpg)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker cp CONTAINER:PATH HOSTPATH`：如果你不想导出整个容器文件系统，而只想导出某个目录或文件，你可以使用 `docker
    cp`，而不是 `export`，如下截图所示：![Docker 命令行界面](img/3946_02_05.jpg)'
- en: The Docker Registry Hub
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 注册中心 Hub
- en: One important part of Docker's popularity is its community and the ease with
    which you can share, find, and extend Docker images. The central place for this
    is the Docker Registry Hub that can be found at [https://hub.docker.com/](https://hub.docker.com/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 流行的一个重要原因是它的社区，以及你可以轻松分享、查找和扩展 Docker 镜像的方式。其核心平台是 Docker 注册中心 Hub，可以在
    [https://hub.docker.com/](https://hub.docker.com/) 找到。
- en: Browsing repositories
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览仓库
- en: Here, we can search and, in many ways, browse for image repositories to find
    exactly what we're after. If we take a look at the popular ones, we will see what
    others are using the most.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以搜索并以多种方式浏览镜像仓库，找到我们需要的内容。如果查看流行的镜像，我们可以看到其他人使用最多的镜像。
- en: If we click on the Ubuntu repository, we will see lots of information about
    the image, the tags that are available, users' comments, the number of stars it
    has, and when it was updated.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击 Ubuntu 仓库，我们会看到很多关于该镜像的信息，包括可用的标签、用户评论、它的星标数量以及最后更新时间。
- en: 'The screenshot is displayed as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 截图显示如下：
- en: '![Browsing repositories](img/3946_02_06.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![浏览仓库](img/3946_02_06.jpg)'
- en: If we click on a tag in the main view, we'll see something called the `Dockerfile`.
    This is the image description that runs when an image is being created. Further
    in this book, we'll write our own.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击主视图中的标签，我们将看到一个叫做 `Dockerfile` 的文件。这是镜像描述文件，它在镜像创建时运行。在本书的后面，我们也会自己写一个。
- en: If you're interested in an image in the Docker hub, I recommend that you read
    the Information/README as well as the other users' comments. Often, you will find
    valuable information there that will help you to choose the right image and show
    you how to run it in the way the maintaining developer intended to.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 Docker Hub 上的某个镜像感兴趣，我建议你阅读它的 Information/README 文件，以及其他用户的评论。通常，你会在其中找到有价值的信息，帮助你选择正确的镜像，并展示如何按照维护开发者的意图运行它。
- en: Often, you will find images that almost fit your needs since most images are
    quite general, but as a developer, you might need specific settings or services
    installed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会发现一些镜像几乎符合你的需求，因为大多数镜像都非常通用，但作为开发者，你可能需要安装特定的设置或服务。
- en: Exploring published images
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索发布的镜像
- en: Take the official WordPress Docker image, for example ([https://registry.hub.docker.com/_/wordpress/](https://registry.hub.docker.com/_/wordpress/)).
    You'll find it on the Docker hub's browse page or you can search for it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以官方的 WordPress Docker 镜像为例（[https://registry.hub.docker.com/_/wordpress/](https://registry.hub.docker.com/_/wordpress/)）。你可以在
    Docker Hub 的浏览页面上找到它，或者直接搜索。
- en: 'Let''s forget about these shortcomings for now and see what the information
    page says:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在先不考虑这些缺点，看看信息页面上说了些什么：
- en: '![Exploring published images](img/3946_02_07.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![探索发布的镜像](img/3946_02_07.jpg)'
- en: This image reads the settings from the Docker container's environment variables.
    This means that image has to be started with the environment variables injected
    using the `docker run –e` command, or you can `--link` another container to it
    that injects these variables. We'll discuss container linking more later in this
    book.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个镜像会读取 Docker 容器的环境变量。这意味着镜像必须通过使用 `docker run –e` 命令注入环境变量，或者你可以 `--link`
    另一个容器到它，并注入这些变量。我们将在本书后面讨论容器链接。
- en: 'Let''s see what we''ll get if we were to pull this image. Click on the link
    to the Dockerfile in the apache directory:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果拉取这个镜像会得到什么。点击 Apache 目录中的 Dockerfile 链接：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Ok, we see that it builds on Debian Wheezy and installs Apache2, PHP5, and some
    other stuff. After that, it sets a bunch of environment variables and then downloads
    WordPress.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们看到它基于 Debian Wheezy，并安装了 Apache2、PHP5 和一些其他的东西。之后，它设置了一些环境变量，然后下载了 WordPress。
- en: 'We see a few lines starting with the command `COPY`. This means that files
    are shipped with the Docker image and are copied to the inside of the container
    when it''s started. This is how the `docker-apache.conf` file shipped with the
    WordPress image looks:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到几行以 `COPY` 命令开头。这意味着文件随 Docker 镜像一起传送，并在容器启动时复制到容器内部。这就是 WordPress 镜像随附的
    `docker-apache.conf` 文件的样子：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding line of code tells Apache where to look for files.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码行告诉 Apache 在哪里查找文件。
- en: What about the `docker-entrypoint.sh` file?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 `docker-entrypoint.sh` 文件呢？
- en: The `ENTRYPOINT` keyword tells the Docker daemon that if nothing else is specified,
    this file should be executed whenever the container is run. It is as if the whole
    container is an executable file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`ENTRYPOINT` 关键字告诉 Docker 守护进程，如果没有指定其他内容，那么每次运行容器时都应该执行这个文件。就好像整个容器是一个可执行文件一样。'
- en: 'If we take a look at what is present inside this file, we''ll see that it basically
    sets up the connection to the MySQL database and configures `.htaccess` and WordPress:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看看这个文件的内容，我们会发现它基本上是设置了与 MySQL 数据库的连接，并配置了 `.htaccess` 和 WordPress：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first thing that is done is to check whether the user has set environment
    variables for the MySQL connection. If not, it exits and writes some info to `STDERR`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先检查的是用户是否为 MySQL 连接设置了环境变量。如果没有，它将退出并将一些信息写入 `STDERR`。
- en: 'Why don''t you try and see whether you can trigger the MySQL error that writes
    **error: missing MYSQL_PORT_3306_TCP environment variable** to the `STDERR`, as
    follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '你不妨尝试一下，看看你是否能触发写入 `STDERR` 的 MySQL 错误，错误信息是 **error: missing MYSQL_PORT_3306_TCP
    environment variable**，如以下所示：'
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Exploring published images](img/3946_02_08.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![探索发布的镜像](img/3946_02_08.jpg)'
- en: The `--name some-wordpress` command names the container, so we can reference
    it by this name later. Also, the `–d` argument tells the container to run in detached
    mode, which means that it does not listen to commands from where we started it
    anymore. The last `wordpress` argument is the name of the Docker image we want
    to run.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`--name some-wordpress` 命令为容器命名，这样我们以后可以通过这个名字引用它。此外，`–d` 参数告诉容器在分离模式下运行，这意味着它不再接受我们启动它时发出的命令。最后的
    `wordpress` 参数是我们要运行的 Docker 镜像名称。'
- en: 'If we check the log for our new container, we''ll see what the screenshot shows
    us: the expected error message.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看新容器的日志，就会看到截图所示的错误信息。
- en: 'Let''s run a MySQL container and see whether we can get it to work. Navigate
    to [https://registry.hub.docker.com/_/mysql/](https://registry.hub.docker.com/_/mysql/)
    in order to get to the official MySQL docker repository on the Docker registry
    hub. Here, it states that in order to start a MySQL instance, we need to invoke
    **docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -d mysql**
    in the shell. Since we are doing this for educational purposes at the moment,
    we don''t have to choose a strong root user password. After some dependent images
    are downloaded, we should be able to see our running container when we execute
    `docker ps`. If we do, have a look at the installation log by running `docker
    logs some-mysql`, as shown here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一个 MySQL 容器，看看是否能让它正常工作。访问 [https://registry.hub.docker.com/_/mysql/](https://registry.hub.docker.com/_/mysql/)
    来访问 Docker 注册表中心的官方 MySQL 镜像库。在这里，它指出为了启动 MySQL 实例，我们需要在 shell 中执行 **docker run
    --name some-mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -d mysql**。由于我们目前只是为了教育目的，因此不需要选择一个强密码作为
    root 用户密码。在下载一些依赖镜像后，我们应该能够通过执行 `docker ps` 来看到我们正在运行的容器。如果看到，使用 `docker logs
    some-mysql` 查看安装日志，如下所示：
- en: '![Exploring published images](img/3946_02_09.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![探索发布的镜像](img/3946_02_09.jpg)'
- en: 'Great, now we have a running MySQL container that is needed to start a WordPress
    instance. Let''s start a new WordPress instance with the MySQL link in place:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，现在我们有了一个运行中的 MySQL 容器，它是启动 WordPress 实例所需要的。让我们在 MySQL 链接就位的情况下启动一个新的 WordPress
    实例：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `--link` parameter exposes the `some-mysql` containers' environment variables,
    interface, and exposed ports via the environment variables injected to the `some-wordpress`
    container.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`--link` 参数通过将环境变量注入到 `some-wordpress` 容器中，暴露 `some-mysql` 容器的环境变量、接口和暴露端口。'
- en: To open a port that can be reached from the outside, port 80 is exposed via
    the `–p 80` parameter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开一个可以从外部访问的端口，通过 `–p 80` 参数暴露端口 80。
- en: 'If you get an error message saying **Error response from daemon: Conflict,
    The name some-wordpress is already assigned to a11c101cacaf.**, you have to delete
    (or rename) that container to be able to assign `some-wordpress` to a container
    again. You need to give the new container a new name or delete the old (failing)
    WordPress container. Invoke `docker rm some-wordpress` to delete the old container
    using the desired name.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你收到如下错误信息 **Error response from daemon: Conflict, The name some-wordpress
    is already assigned to a11c101cacaf.**，你需要删除（或重命名）该容器，才能再次将 `some-wordpress` 分配给容器。你需要给新容器起一个新名字，或删除旧的（失败的）WordPress
    容器。调用 `docker rm some-wordpress` 删除旧容器并使用所需的名称。'
- en: When you have the container running, invoke `docker ps` command to find out
    which of our ports was assigned to the container's private port 80.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器正在运行时，调用 `docker ps` 命令以找出我们的端口是如何分配给容器的私有端口 80。
- en: 'We can either look at the ports column in the container list, or we can invoke
    `docker port some-wordpress 80` to explicitly find it, as shown here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看容器列表中的端口栏，或者可以通过调用 `docker port some-wordpress 80` 明确查找，如下所示：
- en: '![Exploring published images](img/3946_02_10.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![探索发布的镜像](img/3946_02_10.jpg)'
- en: In my case, it was port **49155**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的案例中，它是端口**49155**。
- en: Enter your Docker hosts' **ip:port** in your web browser to see whether you
    can reach it. If you're on your local computer running Windows or OS X, you can
    find your Docker IP by invoking `boot2docker ip`. If you're on a local Linux,
    **127.0.0.1** should be fine.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中输入 Docker 主机的**ip:port**，查看是否能访问它。如果你使用的是 Windows 或 OS X 本地计算机，可以通过调用
    `boot2docker ip` 查找 Docker IP。如果你使用的是本地 Linux，**127.0.0.1** 应该可以。
- en: I'm doing this on Amazon EC2, so I have to go to the EC2 Management console
    to get my public IP or public DNS.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我是在 Amazon EC2 上进行的操作，所以我需要进入 EC2 管理控制台获取我的公共 IP 或公共 DNS。
- en: 'Point your web browser to `http://yourip:yourport` (in my case, `http://myamazon-dns.com:49155`)
    and you should be presented with this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中输入 `http://yourip:yourport`（在我的案例中是 `http://myamazon-dns.com:49155`），你应该会看到这个界面：
- en: '![Exploring published images](img/3946_02_11.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![探索发布的镜像](img/3946_02_11.jpg)'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default Amazon AWS security policy is to block the default Docker public
    ports, so we have to change this in the **Security Groups** section in the EC2
    dashboard. See the *Docker on Amazon EC2* section in [Chapter 1](ch01.html "Chapter 1. Installing
    Docker"), *Installing Docker,* for how to do this.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 Amazon AWS 安全策略会阻止默认的 Docker 公共端口，因此我们需要在 EC2 控制台的**安全组**部分进行更改。有关如何操作，请参见
    [第 1 章](ch01.html "第 1 章. 安装 Docker")中的 *Docker 在 Amazon EC2 上* 部分，*安装 Docker*。
- en: Wonderful, it works!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，成功了！
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: The Docker image can be seen as a read-only template for containers, specifying
    what's supposed to be installed, copied, configured, and exposed when a container
    is started.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 镜像可以视为容器的只读模板，指定了在容器启动时需要安装、复制、配置和暴露的内容。
- en: We learned more about how we can interact with the Docker daemon and with individual
    Docker containers to read logs, copy files, and export the complete filesystem.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进一步了解了如何与 Docker 守护进程及单独的 Docker 容器进行交互，以读取日志、复制文件并导出完整的文件系统。
- en: The Docker hub was introduced and we looked at what the official WordPress Docker
    image consisted of and how they configured the OS in the Dockerfile as well as
    in an `ENTRYPOINT` file to some extent.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍了 Docker Hub，我们查看了官方 WordPress Docker 镜像的构成，以及它们如何在 Dockerfile 和一定程度上在 `ENTRYPOINT`
    文件中配置操作系统。
- en: We downloaded and ran the WordPress image that failed as expected, and we fixed
    it by linking the required MySQL container to it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下载并运行了预期失败的 WordPress 镜像，之后通过将所需的 MySQL 容器与之链接修复了它。
- en: In the next chapter, we will create a Dockerfile and publish a Docker image
    to the Docker registry hub so that we have a way to get our customized Docker
    images to wherever we decide to place our PaaS.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将创建一个 Dockerfile，并将 Docker 镜像发布到 Docker 注册中心，以便我们能够将定制的 Docker 镜像传输到我们决定放置
    PaaS 的任何地方。
