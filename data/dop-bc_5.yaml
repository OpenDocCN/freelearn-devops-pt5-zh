- en: Continuous Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付
- en: Technology is nothing. What's important is that you have a faith in people,
    that they're basically good and smart, and if you give them tools, they'll do
    wonderful things with them                                                    
                                                                             - Steve
    Jobs
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 技术并不重要。重要的是你要相信人们，他们本质上是善良和聪明的，如果你给他们工具，他们会用这些工具做出奇妙的事情。                    
                                                                                 
                               - 史蒂夫·乔布斯
- en: We have looked at different DevOps practices such as continuous integration,
    containers, and configuration management. Now we will look at how to deploy a
    package file in to a web container or web server. We will use Apache Tomcat as
    a web server in cloud virtual machines to deploy our Java-based application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了不同的 DevOps 实践，如持续集成、容器化和配置管理。接下来，我们将了解如何将包文件部署到 Web 容器或 Web 服务器。我们将使用
    Apache Tomcat 作为 Web 服务器，在云虚拟机中部署我们的 Java 应用程序。
- en: The main objective of this chapter is to make you the reader aware of different
    ways to deploy an application package into a web server. These ways can be utilized
    based on the access available to the team and, once we achieve this automated
    delivery into the web server, then we can utilize this operation in the overall
    build orchestration.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是让你了解不同的应用包部署到 Web 服务器的方式。这些方式可以根据团队可用的访问权限来选择，一旦我们实现了向 Web 服务器的自动化交付，我们就可以在整体构建流程中使用这个操作。
- en: So, we can create a build pipeline and this orchestration will help us to achieve
    continuous delivery and continuous deployment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以创建一个构建管道，这种协调将帮助我们实现持续交付和持续部署。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Continuous delivery in Docker container using Jenkins plugin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Jenkins 插件在 Docker 容器中实现持续交付
- en: Continuous delivery in AWS EC2 and Microsoft Azure VM using script
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用脚本在 AWS EC2 和 Microsoft Azure 虚拟机中实现持续交付
- en: Continuous delivery in AWS Elastic Beanstalk using a Jenkins plugin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Jenkins 插件在 AWS Elastic Beanstalk 中实现持续交付
- en: Continuous delivery in Microsoft Azure App Services using FTP
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FTP 在 Microsoft Azure 应用服务中实现持续交付
- en: Continuous delivery in Microsoft Azure App Services using VSTS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 VSTS 在 Microsoft Azure 应用服务中实现持续交付
- en: Continuous delivery in Docker container using Jenkins Plugin
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 插件在 Docker 容器中实现持续交付
- en: Let's understand how we can deploy a web application in Tomcat using the Jenkins
    plugin.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解如何使用 Jenkins 插件在 Tomcat 中部署 Web 应用程序。
- en: 'We can follow a few steps for that:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下几个步骤操作：
- en: Run Apache Tomcat
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 Apache Tomcat
- en: 'Use the proper IP address and port number combination to navigate to the Tomcat
    home page:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正确的 IP 地址和端口号组合访问 Tomcat 首页：
- en: '![](img/00028.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00028.jpeg)'
- en: Go to the `conf` directory and then open `tomcat-users.xml` in your Tomcat installation
    directory and un-comment the role and user lines or rewrite them. Set manager-script
    as the rolename for testing purposes. We need manager-script for deployment via
    the `Deploy to Container` plugin.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入 `conf` 目录，然后在 Tomcat 安装目录中打开 `tomcat-users.xml` 文件，取消注释角色和用户行，或者重新编写它们。为了测试目的，将
    rolename 设置为 manager-script。我们需要 manager-script 来通过 `Deploy to Container` 插件进行部署。
- en: 'For the Jenkins deploy plugin, change the rolename to manager-script as follows:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Jenkins 部署插件，将 rolename 更改为 manager-script，如下所示：
- en: '![](img/00058.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: Click on the manager application link on the Tomcat home page and enter the
    username and password you set in `tomcat-users.xml`. Now we can access the management
    application. For a local Tomcat, we can use localhost to access the Tomcat page
    or we can use the IP address as well. For a remote web server, we can utilize
    an IP address or domain name to access Tomcat.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 Tomcat 首页上的管理应用程序链接，并输入你在 `tomcat-users.xml` 中设置的用户名和密码。现在我们可以访问管理应用程序。对于本地
    Tomcat，我们可以使用 localhost 访问 Tomcat 页面，或者也可以使用 IP 地址。对于远程 Web 服务器，我们可以利用 IP 地址或域名来访问
    Tomcat。
- en: 'Restart Tomcat and visit `https://<IP Address>:8080/manager/text/list`. You
    should see this output:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重启 Tomcat 并访问 `https://<IP 地址>:8080/manager/text/list`。你应该看到以下输出：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Go to the Jenkins job build page and click on Configure. Select the proper
    JDK configuration for the Jenkins agent:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入 Jenkins 作业构建页面并点击配置（Configure）。选择适当的 JDK 配置用于 Jenkins 代理：
- en: '![](img/00060.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00060.jpeg)'
- en: 'Under Post-build Actions, select Deploy war/ear to a container. Provide the
    location of the WAR file in the Jenkins workspace, the Tomcat manager credentials,
    and the Tomcat URL with the port:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建后操作中，选择将war/ear部署到容器中。提供Jenkins工作区中WAR文件的位置、Tomcat管理凭证以及带端口的Tomcat URL：
- en: '![](img/00063.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00063.jpeg)'
- en: 'Click on Apply and Save. Click on Build now on the Jenkins build''s page. Verify
    that the console output is showing a fresh deployment:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击应用并保存。在Jenkins构建页面点击立即构建。验证控制台输出显示新的部署：
- en: '![](img/00066.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00066.jpeg)'
- en: 'Once the build is successful, visit the URL from your browser and notice the
    context. It is similar to the name of the application:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦构建成功，从浏览器访问URL，并注意到上下文。它与应用程序的名称类似：
- en: '![](img/00068.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: We already know the basic operations available in Docker, as we covered them
    in [Chapter 3](part0059.html#1O8H60-651ea628c0544d18a4415dfef8fe6271), *Containers*.
    We have created a customized Tomcat image with `tomcat-users.xml`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了Docker中可用的基本操作，因为我们在[第3章](part0059.html#1O8H60-651ea628c0544d18a4415dfef8fe6271)中讲解了*容器*。我们已经创建了一个自定义的Tomcat镜像，并且配置了`tomcat-users.xml`。
- en: 'Once Docker is up and running, we are ready to create a Docker container. Note
    the IP address of the default Docker machine in the following image:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Docker启动并运行，我们就准备好创建一个Docker容器了。请注意以下图像中默认Docker机器的IP地址：
- en: '![](img/00070.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.jpeg)'
- en: 'To change the name of the container, use :'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更改容器的名称，使用：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Verify the name using :'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下方式验证名称：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/00073.gif)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00073.gif)'
- en: 'Use the virtual machine IP address and use 9999 as a port number to access
    Tomcat running in the container:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟机IP地址，并使用9999作为端口号访问容器中运行的Tomcat：
- en: '![](img/00076.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00076.jpeg)'
- en: 'Verify the manager access with the `manager-script` role using the following URL:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下URL验证`manager-script`角色的管理访问：
- en: '![](img/00077.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00077.jpeg)'
- en: 'Let''s just try to deploy an application using the `Deploy to Container` plugin
    in Tomcat. If one build job generates a WAR file, then copy it from that build
    using the **copy artifact** plugin:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们尝试使用Tomcat中的`Deploy to Container`插件部署应用。如果某个构建任务生成了WAR文件，则使用**复制工件**插件从该构建任务复制WAR文件：
- en: '![](img/00080.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00080.jpeg)'
- en: 'In Post-build actions, select Deploy war/ear to a container. Give the user
    name and password provided in `tomcat-users.xml`. We will then provide the Tomcat
    URL, shown as follows. After filling in the details , click on Apply/Save:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建后操作中，选择将war/ear部署到容器中。提供在`tomcat-users.xml`中设置的用户名和密码。然后我们将提供Tomcat URL，如下所示。填写详细信息后，点击应用/保存：
- en: '![](img/00081.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00081.jpeg)'
- en: Click on Build Now.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击立即构建。
- en: 'Go to console output and verify the deployment process:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入控制台输出并验证部署过程：
- en: '![](img/00083.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00083.jpeg)'
- en: Verify the application URL using the Tomcat URL and application context.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Tomcat URL和应用上下文验证应用程序URL。
- en: Awesome!! We have successfully created an image and a container, and deployed
    the application in the Tomcat container.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！！我们已经成功创建了一个镜像和一个容器，并在Tomcat容器中部署了应用程序。
- en: Continuous Delivery in AWS EC2 and Microsoft Azure VM using Script
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用脚本在AWS EC2和Microsoft Azure虚拟机中进行持续交付
- en: 'We have already created VMs in AWS and Microsoft Azure in [Chapter 4](part0067.html#1VSLM0-651ea628c0544d18a4415dfef8fe6271),
    *Cloud Computing and Configuration Management*. To deploy an application in AWS
    and Microsoft Azure VM, we need a WAR package file. Once it is created by the
    Jenkins build job, we need to perform the following steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[AWS和Microsoft Azure的虚拟机](part0067.html#1VSLM0-651ea628c0544d18a4415dfef8fe6271)中创建了虚拟机。在AWS和Microsoft
    Azure虚拟机上部署应用程序时，我们需要一个WAR包文件。一旦它通过Jenkins构建任务创建，就需要执行以下步骤：
- en: '![](img/00085.gif)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00085.gif)'
- en: 'Let''s configure the build job to execute the deployment of the WAR file in
    the AWS instance by executing the commands shown as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置构建任务，在AWS实例中通过执行如下命令来部署WAR文件：
- en: 'Give rights to `ec2-user` in the `webapps` directory of Tomcat so we can copy
    the WAR file:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给`ec2-user`在Tomcat的`webapps`目录中赋予权限，以便我们可以复制WAR文件：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Copy the WAR file into the remote directory:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将WAR文件复制到远程目录：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Start/restart the Tomcat service:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动/重启Tomcat服务：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Use the `Copy Artifact` plugin to copy the **WAR** file from another build
    job and then execute the preceding commands in Execute Shell Build Actions:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Copy Artifact`插件从另一个构建任务复制**WAR**文件，然后在执行Shell构建操作中执行前述命令：
- en: '![](img/00087.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00087.jpeg)'
- en: Click on Save and then execute the build job. For application deployment in
    Microsoft Azure VM, utilize Jenkins plugin (Deploy to Container) or script utilized
    for AWS with required modification as self exercise.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存，然后执行构建任务。对于 Microsoft Azure VM 的应用程序部署，利用 Jenkins 插件（Deploy to Container）或用于
    AWS 的脚本，按需修改作为自我练习。
- en: Continuous delivery in AWS Elastic Beanstalk using Jenkins Plugin
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 插件在 AWS Elastic Beanstalk 中实现持续交付
- en: 'AWS Elastic Beanstalk is a **Platform as a Service**(**PaaS**) offering from
    Amazon. We will use it to deploy the PetClinic application on the AWS platform.
    The good part is we don''t need to manage the infrastructure or even the platform,
    as it is a PaaS offering. We can configure scaling and other details. These are
    the steps to deploy an application on AWS Elastic Beanstalk:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk 是 Amazon 提供的 **平台即服务**（**PaaS**）产品。我们将使用它在 AWS 平台上部署 PetClinic
    应用程序。好处是我们不需要管理基础设施或平台，因为它是一个 PaaS 产品。我们可以配置扩展和其他细节。以下是在 AWS Elastic Beanstalk
    上部署应用程序的步骤：
- en: '![](img/00088.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00088.jpeg)'
- en: Let's create a sample application to understand how Elastic Beanstalk works
    and then use the `Jenkins` plugin to deploy an application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例应用程序，以了解 Elastic Beanstalk 是如何工作的，然后使用 `Jenkins` 插件来部署应用程序。
- en: 'Go to the AWS management console and verify whether we have a default **Virtual
    Private Cloud** (**VPC**). If you''ve deleted the default VPC and subnet by accident,
    send a request to AWS customer support to recreate it:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入 AWS 管理控制台，验证我们是否有默认的 **虚拟私有云**（**VPC**）。如果你不小心删除了默认的 VPC 和子网，请向 AWS 客服请求重新创建：
- en: '![](img/00090.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00090.jpeg)'
- en: 'Click on Services in the AWS management console and select AWS Elastic Beanstalk.
    Create a new application named petclinic. Select Tomcat as a Platform and select
    the Sample application radio button:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 AWS 管理控制台中的服务，并选择 AWS Elastic Beanstalk。创建一个名为 petclinic 的新应用程序。选择 Tomcat
    作为平台，并选择示例应用程序单选按钮：
- en: '![](img/00091.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00091.jpeg)'
- en: 'Verify the sequence of events for the creation of a sample application:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证创建示例应用程序的事件顺序：
- en: '![](img/00172.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00172.jpeg)'
- en: 'It will take a while, and once the environment has been created, it will be
    highlighted in green, as shown here:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将需要一段时间，一旦环境创建完成，它将以绿色突出显示，如图所示：
- en: '![](img/00185.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00185.jpeg)'
- en: 'Click on the petclinic environment and verify Health and Running Version in
    the dashboard:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 petclinic 环境并验证仪表板中的健康状态和运行版本：
- en: '![](img/00201.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00201.jpeg)'
- en: 'Verify the environment ID and URL. Click on the URL and verify the default
    page:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证环境 ID 和 URL。点击 URL 并验证默认页面：
- en: '![](img/00193.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00193.jpeg)'
- en: Install the AWS Elastic Beanstalk `Publisher` plugin.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 AWS Elastic Beanstalk `Publisher` 插件。
- en: For more details, visit [https://wiki.jenkins-ci.org/display/JENKINS/AWS+Beanstalk+Publisher+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/AWS+Beanstalk+Publisher+Plugin).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多详细信息，请访问 [https://wiki.jenkins-ci.org/display/JENKINS/AWS+Beanstalk+Publisher+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/AWS+Beanstalk+Publisher+Plugin)。
- en: 'Open the Jenkins dashboard and go to Build job. Click on Post-build Actions
    and select Deploy into AWS Elastic Beanstalk:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开 Jenkins 仪表板，进入构建任务。点击构建后操作并选择部署到 AWS Elastic Beanstalk：
- en: '![](img/00195.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00195.jpeg)'
- en: A new section will come up in Post-build Actions for Elastic Beanstalk.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建后操作中会出现一个新的 Elastic Beanstalk 部分。
- en: Click on the Jenkins dashboard and select Credentials; add your AWS credentials.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 Jenkins 仪表板并选择凭证；添加你的 AWS 凭证。
- en: Go to your Jenkins build and select AWS Credential, which is set in the global
    configuration.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入你的 Jenkins 构建并选择在全局配置中设置的 AWS 凭证。
- en: Select AWS Region from the list and click on Get Available Applications. As
    we have created a sample application, it will show up like this.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中选择 AWS 区域并点击获取可用应用程序。由于我们已经创建了示例应用程序，它会像这样显示出来。
- en: 'In EnvironmentLookup, provide an environment ID in the Get Environments By
    Name box and click on Get Available Environments:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 EnvironmentLookup 中，在获取环境名称框中提供环境 ID 并点击获取可用环境：
- en: '![](img/00199.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00199.jpeg)'
- en: Save the configuration and click on Build now.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存配置并点击立即构建。
- en: 'Now let''s verify the AWS management console to check whether the **WAR** file
    is being copied in Amazon S3 or not:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们验证 AWS 管理控制台，检查 **WAR** 文件是否已被复制到 Amazon S3：
- en: 'Go to S3 Services and check the available buckets:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入 S3 服务并检查可用的存储桶：
- en: '![](img/00202.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00202.jpeg)'
- en: Since the WAR file is large, it will take a while to upload to Amazon S3\. Once
    it is uploaded, it will be available in the Amazon S3 bucket.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于 WAR 文件较大，上传到 Amazon S3 会需要一些时间。一旦上传完成，它将在 Amazon S3 存储桶中可用。
- en: 'Verify the build job''s execution status in Jenkins. Some sections of the expected
    output are that:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证 Jenkins 中构建任务的执行状态。预期输出的某些部分包括：
- en: The test case execution and WAR file creation are successful
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例执行和 WAR 文件创建成功
- en: The build is successful
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建成功
- en: 'Now check the AWS management console:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在检查 AWS 管理控制台：
- en: '![](img/00105.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00105.jpeg)'
- en: 'Go to Services, click on AWS Elastic Beanstalk, and verify the environment.
    The previous version was Sample Application. Now, the version is updated as given
    in **Version Label Format** in the Jenkins build job configuration:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到服务，点击 AWS Elastic Beanstalk，验证环境。之前的版本是“示例应用”，现在版本已更新，按照 Jenkins 构建任务配置中的**版本标签格式**进行更新：
- en: '![](img/00107.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00107.jpeg)'
- en: Go to the dashboard and verify Health and Running Version again.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到仪表板，再次验证健康状况和正在运行的版本。
- en: 'Once everything has been verified, click on the URL for the environment, and
    our PetClinic application is live:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦一切验证完毕，点击环境的 URL，我们的 PetClinic 应用就上线了：
- en: '![](img/00109.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00109.jpeg)'
- en: 'Once the application deployment is successful, terminate the environment:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦应用部署成功，终止环境：
- en: We have thus successfully deployed our application on Elastic Beanstalk.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功将应用部署到 Elastic Beanstalk 上。
- en: Continuous delivery in Microsoft Azure App Services Using FTP
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 FTP 在 Microsoft Azure 应用服务中实现持续交付
- en: Microsoft Azure app services is a PaaS. In this section, we will look at the
    Azure Web App and how we can deploy our PetClinic application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 应用服务是 PaaS。在本节中，我们将看看 Azure Web 应用以及如何部署我们的 PetClinic 应用。
- en: 'Let''s install the `Publish Over FTP` plugin in Jenkins. We will use the Azure
    Web App''s FTP details to publish the PetClinic WAR file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 Jenkins 中安装 `Publish Over FTP` 插件。我们将使用 Azure Web 应用的 FTP 详细信息来发布 PetClinic
    WAR 文件：
- en: 'Go to the Microsoft Azure portal at [https://portal.azure.com](https://portal.azure.com).
    Click on App Services and then on Add. Provide values for App Name, Subscription,
    Resource Group, and App Service plan/Location. Click on Create:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到 Microsoft Azure 门户 [https://portal.azure.com](https://portal.azure.com)，点击应用服务，然后点击“添加”。提供应用名称、订阅、资源组和应用服务计划/位置。点击“创建”：
- en: '![](img/00111.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00111.jpeg)'
- en: Once the Azure Web App is created, see whether it shows up in the Azure portal.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦 Azure Web 应用创建完成，查看是否能在 Azure 门户中显示。
- en: 'Click on DevOpsPetClinic in details related to the URL, Status, Location, and
    so on:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 DevOpsPetClinic，查看与 URL、状态、位置等相关的详细信息：
- en: '![](img/00212.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00212.jpeg)'
- en: 'Click on All Settings, go to the GENERAL section and click on Application settings
    to configure the Azure Web App for Java web application hosting. Select the Java
    version, Java Minor version, Web container, and Platform, and click on Always
    On:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“所有设置”，进入“常规”部分，点击“应用设置”以配置 Azure Web 应用用于 Java Web 应用托管。选择 Java 版本、Java 次版本、Web
    容器和平台，然后点击“Always On”：
- en: '![](img/00226.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00226.jpeg)'
- en: 'Visit the URL of an Azure Web App from your browser and verify that it is ready
    for hosting our sample spring application, PetClinic:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从浏览器访问 Azure Web 应用的 URL，并验证它是否已经准备好托管我们的示例 Spring 应用——PetClinic：
- en: '![](img/00118.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00118.jpeg)'
- en: Let's go to the Jenkins dashboard. Click on New Item and select Freestyle project.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们转到 Jenkins 仪表板，点击“新建项目”，选择自由风格项目。
- en: 'Click on All Settings, and go to Deployment credentials in the PUBLISHING section.
    Provide a username and password, and save your changes:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“所有设置”，然后转到 PUBLISHING 部分中的部署凭证。提供用户名和密码，并保存更改：
- en: '![](img/00252.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00252.jpeg)'
- en: In Jenkins, go to Manage Jenkins and click on Configure | Configure FTP settings.
    Provide a Hostname, Username, and Password, available in the Azure portal.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Jenkins 中，转到“管理 Jenkins”，点击“配置” | 配置 FTP 设置。提供 Azure 门户中可用的主机名、用户名和密码。
- en: Go to `devopspetclinic.scm.azurewebsites.net` and download the Kudu console.
    Navigate to the different options and find the `site directory` and `webapps`
    directory.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到 `devopspetclinic.scm.azurewebsites.net` 并下载 Kudu 控制台。导航到不同选项，找到 `site directory`
    和 `webapps` 目录。
- en: 'Click on Test Configuration and, once you get a Success message, you are ready
    to deploy the PetClinic application:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“测试配置”，一旦看到成功消息，就可以准备部署 PetClinic 应用了：
- en: '![](img/00266.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00266.jpeg)'
- en: 'In the build job we created, go to the Build section and configure Copy artifacts
    from another project. We will copy the WAR file to a specific location on a virtual
    machine:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们创建的构建任务中，转到“构建”部分，配置从另一个项目复制构建产物。我们将 WAR 文件复制到虚拟机上的特定位置：
- en: '![](img/00280.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00280.jpeg)'
- en: 'In Post-build Actions, click on Send build artifacts over FTP. Select the FTP
    Server Name configured in Jenkins. Configure Source files and the Remove prefix accordingly
    for deployment of an Azure Web App:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建后操作中，点击通过 FTP 发送构建工件。选择在 Jenkins 中配置的 FTP 服务器名称。相应地配置源文件和删除前缀，以便部署 Azure
    Web App：
- en: 'Tick Verbose output in console:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 勾选控制台中的详细输出：
- en: '![](img/00293.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00293.jpeg)'
- en: 'Click on Build now and see what happens behind the scenes:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击立即构建，看看幕后发生了什么：
- en: 'Go to the Kudu console, click on DebugConsole, and go to Powershell. Go to
    site | wwwroot | webapps. Check whether the WAR file has been copied:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入 Kudu 控制台，点击 DebugConsole，并进入 Powershell。进入 site | wwwroot | webapps。检查 WAR
    文件是否已被复制：
- en: 'Visit the Azure Web App URL in the browser with the context of an application:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中访问 Azure Web App URL，查看应用程序的上下文：
- en: '![](img/00129.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00129.jpeg)'
- en: Now we have an application deployed on Azure Web Apps.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在 Azure Web Apps 上部署了一个应用程序。
- en: It is important to note that the FTP username has to be with the domain. In
    our case, it can be `Sample9888\m1253966`. Using the username without the web
    app name won't work.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，FTP 用户名必须包含域名。在我们的例子中，它可以是 `Sample9888\m1253966`。如果不包含 Web 应用名称，用户名将无法使用。
- en: All these different ways of deploying to AWS IaaS, AWS PaaS, Microsoft Azure
    PaaS, and Docker container can be used in the final end-to-end automation.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不同的 AWS IaaS、AWS PaaS、Microsoft Azure PaaS 和 Docker 容器部署方式都可以在最终的端到端自动化中使用。
- en: Continuous delivery in Microsoft Azure App Services Using VSTS
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Microsoft Azure App Services 中使用 VSTS 进行持续交付
- en: 'Visual Studio Team Services provides a way to configure continuous integration
    and continuous delivery. We will first go to our VSTS account. Here, we need the
    following things to be accomplished:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Team Services 提供了一种配置持续集成和持续交付的方法。我们将首先进入我们的 VSTS 账户。在这里，我们需要完成以下任务：
- en: Configure Microsoft Azure Subscription so we can connect to Azure Web Apps from
    VSTS
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Microsoft Azure 订阅，以便我们可以从 VSTS 连接到 Azure Web Apps。
- en: Create a release definition that achieves the task of application deployment
    in Azure Web Apps
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个发布定义，实现 Azure Web Apps 中应用程序的部署任务。
- en: 'In the Recent projects & teams, click on PetClinic:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的项目和团队中，点击 PetClinic：
- en: 'It will open a Home page for the project created in VSTS:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 它将打开在 VSTS 中创建的项目的主页：
- en: 'In the top menu bar, click on Build & Release, which will open a menu. Click
    on the Releases menu item from it:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部菜单栏中，点击 Build & Release，打开一个菜单。从中点击 Releases 菜单项：
- en: '![](img/00131.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00131.jpeg)'
- en: Click on the Releases link on the page.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 点击页面上的 Releases 链接。
- en: As this is the new account, there is no Release definition created that has
    been created yet, so this section is empty. We can create a New Release definition
    so we can automate application deployment into Azure App Services or the App Service
    Environment.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是新账户，因此尚未创建任何发布定义，因此此部分为空。我们可以创建一个新的发布定义，以便自动化将应用程序部署到 Azure App Services
    或 App Service Environment。
- en: In the same way that we have built definition for continuous integration, we
    have release definition for continuous release or continuous delivery or continuous
    deployment. Release definition contains different tasks that can be used for application
    deployment in the target environment. Each release definition contains one or
    more environments, and each environment contains one or more tasks to deploy the
    application.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们为持续集成构建了定义一样，我们也有针对持续发布、持续交付或持续部署的发布定义。发布定义包含不同的任务，这些任务可以用于将应用程序部署到目标环境中。每个发布定义包含一个或多个环境，每个环境包含一个或多个任务来部署应用程序。
- en: So, let's create a new release definition. Each release definition can contain
    one or more environment and each environment can contain one or more tasks to
    deploy an application.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个新的发布定义。每个发布定义可以包含一个或多个环境，每个环境可以包含一个或多个任务来部署应用程序。
- en: 'Click on New definition:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 点击新的定义：
- en: '![](img/00302.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00302.jpeg)'
- en: Once we click on the new release definition, it will open a dialog box with
    deployment templates that can be used for deployment automation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击新的发布定义，它将打开一个对话框，展示可以用于部署自动化的部署模板。
- en: We are going to deploy the WAR file into Azure App Service / Azure Web Apps,
    so select Azure App Service Deployment.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把 WAR 文件部署到 Azure App Service / Azure Web Apps，因此选择 Azure App Service 部署。
- en: 'Click on Next:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 Next：
- en: '![](img/00135.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00135.jpeg)'
- en: Let's review a few things from earlier chapters before explaining this deployment
    automation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释此部署自动化之前，让我们回顾一下前面章节中的几个内容。
- en: We created a build definition PetClinic-Maven that compiles the source code,
    executes unit test cases and creates a WAR file. WAR file is our artifact. This
    artifact is the result of the build definition execution.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个构建定义PetClinic-Maven，它会编译源代码，执行单元测试并创建一个WAR文件。WAR文件就是我们的工件。这个工件是构建定义执行的结果。
- en: Now, in the release definition, we need to select where the artifact will come
    from, and that is from Build.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在发布定义中，我们需要选择工件的来源，那就是来自构建。
- en: Select the PetClinic project.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 选择PetClinic项目。
- en: In Source (Build definition), all build definitions related to the PetClinic
    project will be available. We will select PetClinic-Maven.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在源（构建定义）中，所有与PetClinic项目相关的构建定义将可用。我们将选择PetClinic-Maven。
- en: In a nutshell, we want to achieve continuous integration and continuous delivery
    here. It means that, when a developer checks any new code or bug fix in the repository,
    it will automatically trigger a build definition. Build definition will compile
    source files, execute unit tests, if any, conduct a static code analysis if sonar
    is configured, and create a WAR/package file. That is an artifact. Once build
    definition has completed successfully, it will trigger a release definition to
    deploy an artifact or a **WAR** file into Azure Web Apps that is hosted in an
    ASE or a non-ASE environment.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们想要在这里实现持续集成和持续交付。这意味着，当开发者在仓库中提交任何新的代码或修复时，它将自动触发构建定义。构建定义将编译源代码，执行单元测试（如果有的话），进行静态代码分析（如果配置了Sonar），并生成一个WAR/package文件。这就是工件。一旦构建定义成功完成，它将触发发布定义，将工件或**WAR**文件部署到托管在ASE或非ASE环境中的Azure
    Web应用程序。
- en: Click on the Continuous deployment (create release and deploy whenever a build
    completes) checkbox.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“持续部署（每当构建完成时创建发布并部署）”复选框。
- en: 'Click on Create:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建”：
- en: '![](img/00137.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00137.jpeg)'
- en: This will open a release definition in the edit mode. We selected Deploy Azure
    App Service. The first thing that is required is to configure an Azure subscription
    with VSTS.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开发布定义的编辑模式。我们选择了“部署Azure应用服务”。第一个需要做的事情是将Azure订阅与VSTS配置。
- en: Click on the task and see there are two fields named AzureRM Subscription and
    App Service Name. We need to configure Azure subscription here and App Service
    Name will come in the list automatically.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 点击任务，看到有两个字段，分别是AzureRM订阅和应用服务名称。我们需要在这里配置Azure订阅，应用服务名称将自动出现在列表中。
- en: 'Click on Manage link next to the AzureRM Subscription field:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“管理”链接，位于AzureRM订阅字段旁边：
- en: '![](img/00139.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00139.jpeg)'
- en: 'It will open a Services page in the VSTS portal. As of now, there is no service
    configured, so the list is empty:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在VSTS门户中打开一个服务页面。目前没有配置任何服务，所以列表是空的：
- en: Click on the New Service Endpoint.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“新建服务端点”。
- en: 'It will open a menu; select the Azure Resource Manager menu item from the menu
    to configure Azure subscription:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 它将打开一个菜单；从菜单中选择“Azure资源管理器”菜单项来配置Azure订阅：
- en: '![](img/00003.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00003.jpeg)'
- en: As we are already logged into VSTS and our Azure account, it will show the subscription
    name in the list. In Connection name, give the name that we will use in the release
    definition task to connect to our Azure Account.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经登录到VSTS和我们的Azure账户，所以它会在列表中显示订阅名称。在连接名称中，输入我们将在发布定义任务中用于连接到Azure账户的名称。
- en: Click on OK.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: The purpose of adding the Azure subscription here is to get a list of resources
    available in that subscription to VSTS so that we can configure them for deployment.
    In our example, we need a list of Azure Web Apps that are hosted in ASE or non-ASE
    so we can deploy the PetClinic application to Azure Web Apps.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处添加Azure订阅的目的是为了获取该订阅中可用资源的列表，以便VSTS能够将其配置用于部署。在我们的示例中，我们需要一份托管在ASE或非ASE中的Azure
    Web应用列表，以便我们可以将PetClinic应用程序部署到Azure Web应用程序。
- en: 'Once we close the box to add an Azure RM Endpoint, we can see a list of endpoints
    in services. Hence, we have Azure RM subscription configured successfully:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们关闭添加Azure RM端点的框，我们可以看到服务中列出了端点。因此，我们已经成功配置了Azure RM订阅：
- en: '![](img/00006.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: 'Click on the Roles link to verify the available roles of the Azure subscription:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“角色”链接以验证Azure订阅的可用角色：
- en: Now go to Release Definitions and click on the list box of AzureRM Subscription,
    and now our newly added Endpoint is available in the list.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到发布定义，点击AzureRM订阅的列表框，现在我们新添加的端点会出现在列表中。
- en: 'Select Endpoint:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 选择端点：
- en: '![](img/00146.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00146.jpeg)'
- en: 'So far, we have configured Azure Subscription Endpoint in VSTS so we can use
    it in Release Definitions to deploy the artifact in Azure App Services hosted
    in ASE and non-ASE environments. We have already configured AzureRM Subscription.
    Once it has completed successfully, we can select App Service Name. Click on the
    down arrow and the Azure Web Apps available in the configured AzureRM subscription
    will show in the list:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在 VSTS 中配置了 Azure 订阅端点，因此可以在发布定义中使用它，将工件部署到托管在 ASE 和非 ASE 环境中的 Azure
    应用服务中。我们已经配置了 AzureRM 订阅。一旦完成，我们可以选择应用服务名称。点击下拉箭头，已配置的 AzureRM 订阅中的 Azure Web
    应用将显示在列表中：
- en: Go to Select File Or Folder and click on the three dots (...); go to the PetClinic-Maven
    and select the **WAR** file created after successful execution of build definition.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 转到“选择文件或文件夹”并点击三个点（...）；转到 PetClinic-Maven，并选择在构建定义成功执行后创建的 **WAR** 文件。
- en: Our Release Definitions will pick this WAR file and deploy it in Azure Web Apps.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的发布定义将拾取这个 WAR 文件并将其部署到 Azure Web 应用中。
- en: Click on OK.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, we are all set to execute the Release Definitions, but before that, we
    need to save the Release Definitions:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已准备好执行发布定义，但在此之前，我们需要保存发布定义：
- en: '![](img/00011.jpeg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: 'Click on the Save button and it will open a new dialog box. Provide a Comment
    and click on OK to save the release definition in VSTS:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存按钮，它会打开一个新的对话框。提供一个评论并点击“确定”以在 VSTS 中保存发布定义：
- en: '![](img/00149.jpeg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00149.jpeg)'
- en: Verify that you have saved the release definition.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 验证你是否已经保存了发布定义。
- en: 'The Triggers section allows us to schedule when the new release should be created.
    We can set it when a new artifact version is available, or in other words, when
    a build definition execution has successfully completed:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: “触发器”部分允许我们安排何时创建新的发布。我们可以在新版本的工件可用时设置，或者换句话说，当构建定义执行成功完成时：
- en: '![](img/00017.jpeg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00017.jpeg)'
- en: To check end-to-end automation, we will start build definition execution. So,
    once it is successful, it will trigger a release definition. Save the release
    definition and click on Queue new build....
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查端到端自动化，我们将开始构建定义执行。所以，一旦成功，它将触发一个发布定义。保存发布定义并点击“Queue new build...”。
- en: 'Queue build for PetClinic-Maven build definition will trigger release definition
    if it is completed successfully. Click on OK:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为 PetClinic-Maven 构建定义排队构建，如果它成功完成，将触发发布定义。点击“确定”：
- en: '![](img/00154.jpeg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00154.jpeg)'
- en: Once the build definition has successfully completed, the PetClinic-Release
    release definition will be triggered. Its job is to deploy the `.war` artifact
    into Azure App Services.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建定义成功完成，PetClinic-Release 发布定义将被触发。它的任务是将 `.war` 工件部署到 Azure 应用服务中。
- en: Deployment Failed! Let's find out why this deployment has failed.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 部署失败！让我们找出此次部署失败的原因。
- en: 'Release definition execution has failed. Let''s try to troubleshoot the issue:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 发布定义执行失败。让我们尝试排查问题：
- en: '![](img/00198.jpeg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00198.jpeg)'
- en: 'Verify the History first: we can see that release definition was triggered
    but deployment has failed:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 首先验证历史记录：我们可以看到发布定义已被触发，但部署失败了：
- en: Let's find out the likely cause of this failure from the logs.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从日志中找出失败的可能原因。
- en: 'Go to the Logs section and verify the release definition execution steps. It
    clearly indicates that it is the final deployment operation that has failed:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 转到日志部分，验证发布定义执行步骤。它清楚地表明，最终的部署操作失败了：
- en: 'Click on the failed step, that is Deploy Azure App Service:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 点击失败的步骤，即“部署 Azure 应用服务”：
- en: '![](img/00158.jpeg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00158.jpeg)'
- en: After closely examining the logs, we can see that it is mentioned that `.war`
    does not have a `.zip` file extension.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查日志后，我们可以看到提到 `.war` 文件没有 `.zip` 文件扩展名。
- en: Remember, we selected `petclinic.war` and not `petclinic.zip`, so it is deploying
    the `.war` with this task; we need to have a `.zip` file and not a WAR file.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们选择的是 `petclinic.war` 而不是 `petclinic.zip`，所以它正在用这个任务部署 `.war` 文件；我们需要的是
    `.zip` 文件，而不是 WAR 文件。
- en: How to solve this?
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如何解决这个问题？
- en: 'If we can convert the WAR file into a .zip file, then it can be done and it
    should happen automatically:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们可以将 WAR 文件转换为 `.zip` 文件，那么它应该自动完成：
- en: '![](img/00160.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00160.jpeg)'
- en: The best way is to use any task that can convert `.war` in to a `.zip` file.
    So let's do it.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的方法是使用任何可以将 `.war` 转换为 `.zip` 文件的任务。那么我们就这样做。
- en: 'Click on Add Task and click on the Marketplace link:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加任务”，然后点击“Marketplace”链接：
- en: '![](img/00162.jpeg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00162.jpeg)'
- en: It will open a new Marketplace window.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 它将打开一个新的 Marketplace 窗口。
- en: 'Find Trackyon:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找 Trackyon：
- en: '![](img/00165.jpeg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00165.jpeg)'
- en: Before deployment, we will convert the WAR file into a ZIP file using Trackyon.
    Once that is done, our deployment on Azure Web Apps should work.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署之前，我们将使用 Trackyon 将 WAR 文件转换为 ZIP 文件。完成后，Azure Web 应用程序上的部署应该会正常工作。
- en: 'Click on Install:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安装：
- en: Select the VSTS account where we want to install Trackyon.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们希望安装 Trackyon 的 VSTS 账户。
- en: 'Click on Continue:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击继续：
- en: Click on Proceed to the account.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击继续到账户。
- en: 'Click on Close:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击关闭：
- en: '![](img/00092.jpeg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00092.jpeg)'
- en: After installation, our next task is to add that task in the release definition
    so that, before deployment into Azure Web Apps, the WAR file is converted into
    a ZIP file.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们的下一任务是将该任务添加到发布定义中，以便在部署到 Azure Web 应用程序之前，将 WAR 文件转换为 ZIP 文件。
- en: Select the Trackyon WAR converter task.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Trackyon WAR 转换任务。
- en: 'Click on Close:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击关闭：
- en: '![](img/00181.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00181.jpeg)'
- en: 'Select the folder where the WAR file is located:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 WAR 文件所在的文件夹：
- en: 'Select the folder where the ZIP file should be created:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 ZIP 文件应创建的文件夹：
- en: 'Now our release definition has two tasks to perform:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们的发布定义有两个任务要执行：
- en: Convert `.war` in to a `.zip` file.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `.war` 转换为 `.zip` 文件。
- en: 'Deploy the `.zip` file into Azure Web Apps:'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `.zip` 文件部署到 Azure Web 应用程序：
- en: '![](img/00184.jpeg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00184.jpeg)'
- en: Go to the PetClinic-Maven build definition and click on Queue new build...
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 PetClinic-Maven 构建定义并点击“队列新构建...”
- en: Build will start when the hosted agent is available.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当托管代理可用时，构建将开始。
- en: Wait till build execution has completed successfully.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 等待构建执行成功完成。
- en: As we have configured our release definition for continuous delivery, the successful
    build definition execution will trigger our release definition to achieve end-to-end
    automation.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经为持续交付配置了发布定义，成功的构建定义执行将触发发布定义，完成端到端的自动化。
- en: 'Note the Build number Build 20161230.2:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 注意构建编号 Build 20161230.2：
- en: '![](img/00186.jpeg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00186.jpeg)'
- en: This build will trigger the release definition if completed successfully.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建成功完成，这个构建将触发发布定义。
- en: Summary
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have looked at different ways to deploy an application package
    into a local Tomcat server using Jenkins plugins, into a Docker container, into
    AWS Elastic Beanstalk, into Microsoft Azure App Services using FTP, and into Microsoft
    Azure App Services using Visual Studio Team Services.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了不同的方式，将应用程序包部署到本地 Tomcat 服务器（使用 Jenkins 插件），Docker 容器，AWS Elastic
    Beanstalk，使用 FTP 部署到 Microsoft Azure 应用服务，以及使用 Visual Studio Team Services 部署到
    Microsoft Azure 应用服务。
- en: If we observe the previous automation, it is one of the ways to deploy an application
    in a web server that is available locally or in the cloud using different ways,
    such as script, plugin, and VSTS.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们观察之前的自动化，它是部署应用程序的一种方式，可以使用不同的方法，如脚本、插件和 VSTS，在本地或云服务器上部署应用程序。
- en: Build definition was all about continuous integration, while release definition
    is all about continuous delivery. Hence, we have covered CI and CD till now, using
    different tools that are open source and commercial.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 构建定义侧重于持续集成，而发布定义侧重于持续交付。因此，到目前为止，我们已经使用开源和商业工具覆盖了 CI 和 CD。
- en: In the next chapter, we will cover automated testing (functional and load testing),
    so that we can consider it as a part of continuous testing.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍自动化测试（功能测试和负载测试），以便将其视为持续测试的一部分。
- en: We will use Selenium and Apache JMeter for functional testing and load testing
    respectively in a local and a cloud environment.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本地和云环境中分别使用 Selenium 进行功能测试，使用 Apache JMeter 进行负载测试。
