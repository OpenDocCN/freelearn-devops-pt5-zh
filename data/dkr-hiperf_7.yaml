- en: Chapter 7. Troubleshooting Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章：容器故障排除
- en: Sometimes, instrumentation, such as the monitoring and logging system we set
    up in [Chapter 4](part0028_split_000.html#QMFO1-afc4585f6623427885a0b0c8e5b2e22e
    "Chapter 4. Monitoring Docker Hosts and Containers"), *Monitoring Docker Hosts
    and Containers*, is not enough. Ideally, we should put in place a way to troubleshoot
    our Docker deployments in a scalable fashion. However, sometimes, we have no choice
    but to log in to the Docker host and look at the Docker containers themselves.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，像我们在[第 4 章](part0028_split_000.html#QMFO1-afc4585f6623427885a0b0c8e5b2e22e
    "第4章：监控 Docker 主机和容器")中设置的监控和日志系统，*监控 Docker 主机和容器*，可能还不足够。理想情况下，我们应该建立一种可扩展的方式来排查
    Docker 部署中的问题。然而，有时我们别无选择，只能登录到 Docker 主机并查看 Docker 容器本身。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Inspecting containers with `docker exec`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `docker exec` 检查容器
- en: Debugging from outside Docker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Docker 外部进行调试
- en: Other debugging suites
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他调试套件
- en: Inspecting containers
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查容器
- en: 'When troubleshooting servers, the traditional way to debug is to log in and
    poke around the machine. With Docker, this typical workflow is split into two
    steps: the first is logging in to the Docker host using standard remote access
    tools such as `ssh`, and the second is entering the desired running container''s
    process namespace with `docker exec`. This is useful as a last resort to debug
    what is happening inside our application.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在故障排除服务器时，传统的调试方法是登录并随便查看机器。使用 Docker 时，这种典型的工作流程被分为两个步骤：第一步是使用标准的远程访问工具（如 `ssh`）登录到
    Docker 主机，第二步是通过 `docker exec` 进入所需的运行容器的进程命名空间。这在作为最后手段调试应用程序内部发生了什么时非常有用。
- en: 'For most of this chapter, we will troubleshoot and debug a Docker container
    running HAProxy. To prepare this container, create a configuration file for HAProxy
    named `haproxy.cfg` with the following content:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容将涉及故障排除和调试运行 HAProxy 的 Docker 容器。为准备该容器，创建一个名为 `haproxy.cfg` 的 HAProxy
    配置文件，内容如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, using the official Docker image for HAProxy (`haproxy:1.5.14`), we will
    run the container together with the configuration we created earlier. Run the
    following command in our Docker host to start HAProxy with our prepared configuration:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用官方的 HAProxy Docker 镜像（`haproxy:1.5.14`），我们将运行该容器并使用我们之前创建的配置。请在 Docker
    主机中运行以下命令来启动 HAProxy 并应用我们准备好的配置：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we can begin inspecting our container and debugging it. A good first example
    is to confirm that the HAProxy container is listening to port `80`. The `ss` program
    dumps a summary of sockets statistics available in most Linux distributions, such
    as our Debian Docker host. We can run the following command to display the statistics
    of the listening sockets inside our Docker container:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始检查容器并调试它。一个好的初步示例是确认 HAProxy 容器是否正在监听端口 `80`。`ss` 程序可以打印出大多数 Linux
    发行版中可用的套接字统计信息，例如我们的 Debian Docker 主机。我们可以运行以下命令来显示 Docker 容器内监听套接字的统计信息：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This approach with `docker exec` only worked because `ss` is included by default
    in the `debian:jessie` parent container of `haproxy:1.5.14`. We cannot use a similar
    tool that is not installed by default, such as `netstat`. Typing an equivalent
    `netstat` command will give the following error:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `ss` 默认包含在 `haproxy:1.5.14` 的 `debian:jessie` 父容器中，这种使用 `docker exec` 的方法才有效。我们不能使用类似的未默认安装的工具，比如
    `netstat`。输入相应的 `netstat` 命令将显示以下错误：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s investigate what happened by looking at the logs of Docker Engine Service.
    Typing the following command shows that the `netstat` program doesn''t exist inside
    our container:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看 Docker 引擎服务的日志来调查发生了什么。输入以下命令显示 `netstat` 程序在我们的容器内不存在：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An alternative way to find out whether `netstat` is installed in our system
    is to enter our container interactively. The `docker exec` command has the `-it`
    flags that we can use to spawn an interactive shell session to perform the debugging.
    Type the following command to use the `bash` shell to get inside our container:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 查找 `netstat` 是否已安装在系统中的另一种方式是交互式进入我们的容器。`docker exec` 命令具有 `-it` 标志，我们可以使用它来启动一个交互式的
    shell 会话来进行调试。输入以下命令，使用 `bash` shell 进入容器：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we are in a standard shell environment, we can debug with all the
    standard Linux utilities available inside our container. We will cover some of
    these commands in the next section. For now, let''s take a look at why `netstat`
    doesn''t work inside our container, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们处于标准的 shell 环境中，可以使用容器内所有标准的 Linux 工具进行调试。我们将在下一节介绍一些这些命令。现在，让我们来看一下为什么
    `netstat` 在容器内无法使用，具体如下：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we can see here, `bash` is telling us that at this point, we have figured
    out that we don't have `netstat` installed through a more interactive debugging
    session.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`bash` 告诉我们，经过更互动的调试过程后，我们已经确认没有安装 `netstat`。
- en: 'We can provide a quick workaround by installing it inside our container, similar
    to what we do in a normal Debian environment. While we are still inside the container,
    we will type the following command to install `netstat`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在容器内安装它来提供一个快速的解决方案，类似于在普通的 Debian 环境中所做的那样。虽然我们仍然在容器内，我们将输入以下命令来安装 `netstat`：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we can run `netstat` successfully, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以成功运行 `netstat`，如下所示：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This approach of ad hoc container debugging is not recommended! We should have
    proper instrumentation and monitoring in place the next time we iterate on the
    design of our Docker infrastructure. Let''s improve on what we initially built
    in [Chapter 4](part0028_split_000.html#QMFO1-afc4585f6623427885a0b0c8e5b2e22e
    "Chapter 4. Monitoring Docker Hosts and Containers"), *Monitoring Docker Hosts
    and Containers*, next time! The following are some limitations of this last-resort
    approach:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种临时容器调试方法不推荐使用！下一次我们在设计 Docker 基础架构时，应该使用适当的工具和监控系统。下次让我们改进在[第 4 章](part0028_split_000.html#QMFO1-afc4585f6623427885a0b0c8e5b2e22e
    "Chapter 4. Monitoring Docker Hosts and Containers")，*监控 Docker 主机和容器*，中构建的初始版本！以下是这种临时方法的一些局限性：
- en: When we stop and recreate the container, the `netstat` package we installed
    will not be available anymore. This is because the original HAProxy Docker image
    doesn't contain it in the first place. Installing ad hoc packages to run containers
    defeats the main feature of Docker, enabling an immutable infrastructure.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们停止并重新创建容器时，安装的 `netstat` 包将不再可用。这是因为原始的 HAProxy Docker 镜像根本就不包含它。临时安装包来运行容器违背了
    Docker 的主要特性，即启用不可变基础设施。
- en: In case we want to package all the debugging tools inside our Docker image,
    its size will increase correspondingly. This means that our deployments will get
    larger and become slower. Remember that in the [Chapter 2](part0018_split_000.html#H5A42-afc4585f6623427885a0b0c8e5b2e22e
    "Chapter 2. Optimizing Docker Images"), *Optimizing Docker Images*, we optimized
    to reduce our container's size.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想将所有调试工具打包到 Docker 镜像中，镜像的大小将相应增加。这意味着我们的部署将变得更大，变得更慢。记住，在[第 2 章](part0018_split_000.html#H5A42-afc4585f6623427885a0b0c8e5b2e22e
    "Chapter 2. Optimizing Docker Images")，*优化 Docker 镜像*，中我们优化了容器的大小以减小其体积。
- en: 'In the case of minimal containers with just the required binaries, we are now
    mostly blind. The `bash` shell is not even available! There is no way to enter
    our container; take a look at the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于仅包含所需二进制文件的最小容器，我们现在几乎是“盲目”的。连 `bash` shell 都不可用！我们无法进入容器，看看以下命令：
- en: '[PRE9]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In summary, `docker exec` is a powerful tool to get inside our containers and
    debug by running various commands. Coupled with the `-it` flags, we can get an
    interactive shell to perform deeper debugging. This approach has limitations because
    it assumes that all the tools available inside our Docker container are ready
    to use.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，`docker exec` 是一个强大的工具，可以让我们进入容器并通过运行各种命令进行调试。结合 `-it` 参数，我们可以获得一个交互式 shell
    来进行更深层次的调试。由于假设容器内的所有工具都可以使用，这种方法有一定的局限性。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information about the `docker exec` command can be found in the official
    documentation at [https://docs.docker.com/reference/commandline/exec](https://docs.docker.com/reference/commandline/exec).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 `docker exec` 命令的信息可以在官方文档中找到，[https://docs.docker.com/reference/commandline/exec](https://docs.docker.com/reference/commandline/exec)。
- en: The next section deals with how to go around this limitation by having tools
    from outside Docker inspect the state of our running container. We will provide
    a brief overview on how to use some of these tools.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将介绍如何通过外部工具检查正在运行的容器的状态，从而绕过这个限制。我们将简要概述如何使用其中一些工具。
- en: Debugging from the outside
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从外部调试
- en: Even though Docker isolates the network, memory, CPU, and storage resources
    inside containers, each individual container will still have to go to the Docker
    host's operating system to perform the actual command. We can take advantage of
    this trickling down of calls to the host operating system to intercept and debug
    our Docker containers from the outside. In this section, we will cover some selected
    tools and how to use them to interact with our Docker containers. We can perform
    the interaction from the Docker host itself or from inside a sibling container
    with elevated privileges to see some components of the Docker host.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Docker 在容器内隔离了网络、内存、CPU 和存储资源，每个容器仍然需要访问 Docker 主机的操作系统来执行实际命令。我们可以利用这些调用传递到主机操作系统的特性，从外部拦截并调试我们的
    Docker 容器。在本节中，我们将介绍一些选定的工具以及如何使用它们与 Docker 容器进行交互。我们可以在 Docker 主机本身或在具有提升权限的同级容器内部执行交互，以查看
    Docker 主机的一些组件。
- en: Tracing system calls
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟踪系统调用
- en: A **system call tracer** is one of the essential tools for server operations.
    It is a utility that intercepts and traces calls made by the application to the
    operating system. Each operating system has its own variation. Even if we run
    various applications and processes inside our Docker containers, it will eventually
    enter our Docker host's Linux operating system as a series of system calls.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统调用跟踪器** 是服务器操作中必不可少的工具之一。它是一种工具，能够拦截并跟踪应用程序向操作系统发出的调用。每个操作系统都有其独特的实现。即使我们在
    Docker 容器内部运行各种应用程序和进程，最终它们都会作为一系列系统调用进入 Docker 主机的 Linux 操作系统。'
- en: On Linux systems, the `strace` program is used to trace these system calls.
    This interception and logging functionality of `strace` can be used to inspect
    our Docker containers from the outside. The list of system calls made throughout
    our container's lifetime can give a profile-level view on how it behaves.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 系统中，`strace` 程序用于跟踪这些系统调用。`strace` 的拦截和日志记录功能可以用来从外部检查我们的 Docker 容器。容器生命周期内进行的系统调用列表可以提供关于其行为的概览。
- en: 'To get started using `strace`, simply type the following command to install
    it inside our Debian Docker host:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 `strace`，只需在我们的 Debian Docker 主机中输入以下命令来安装它：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: With the `--pid=host` option added to `docker run`, we can set a container's
    PID namespace to be of the Docker host's. This way, we'll be able to install and
    use `strace` inside a Docker container to inspect all the processes in the Docker
    host itself. We can also install `strace` from a different Linux distribution,
    such as CentOS or Ubuntu if we use the corresponding base image for our container.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向 `docker run` 命令添加 `--pid=host` 选项，我们可以将容器的 PID 命名空间设置为 Docker 主机的 PID 命名空间。这样，我们就能够在
    Docker 容器内安装并使用 `strace`，从而检查 Docker 主机上的所有进程。如果我们使用相应的基础镜像，还可以从其他 Linux 发行版（如
    CentOS 或 Ubuntu）安装 `strace`。
- en: More information describing this option is at [http://docs.docker.com/engine/reference/run/#pid-settings-pid](http://docs.docker.com/engine/reference/run/#pid-settings-pid).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此选项的更多信息，请访问 [http://docs.docker.com/engine/reference/run/#pid-settings-pid](http://docs.docker.com/engine/reference/run/#pid-settings-pid)。
- en: 'Now that we have `strace` installed in our Docker host, we can use it to inspect
    the system calls inside the HAProxy container we created in the previous section.
    Type the following commands to begin tracing the system calls from the `haproxy`
    container:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在 Docker 主机中安装了 `strace`，可以使用它来检查我们在上一节中创建的 HAProxy 容器内的系统调用。输入以下命令开始跟踪来自
    `haproxy` 容器的系统调用：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see, our HAProxy container makes `epoll_wait()` calls to wait for
    incoming network connections. Now, in a separate terminal, type the following
    command to make an HTTP request to our running container:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们的 HAProxy 容器发出了 `epoll_wait()` 调用，等待传入的网络连接。现在，在另一个终端中输入以下命令，向正在运行的容器发出
    HTTP 请求：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let''s go back to our running `strace` program earlier. We can see the
    following lines printed out:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到之前运行的 `strace` 程序。我们可以看到以下几行输出：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can see here that HAProxy made standard BSD-style socket system calls, such
    as `accept4()`, `socket()`, and `close()`, to accept, process, and terminate network
    connections from our HTTP client. Finally, it goes back to `epoll_wait()` again
    to wait for the next connections. Also, take note that `epoll_wait()` calls are
    spread throughout the trace even while HAProxy processes a connection. This shows
    how HAProxy can handle concurrent connections.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，HAProxy 执行了标准的 BSD 样式的套接字系统调用，如 `accept4()`、`socket()` 和 `close()`，用于接受、处理和终止来自
    HTTP 客户端的网络连接。最后，它再次回到 `epoll_wait()`，等待下一个连接。同时，请注意，`epoll_wait()` 调用在整个跟踪过程中都有出现，即使
    HAProxy 正在处理某个连接。这表明 HAProxy 可以处理并发连接。
- en: Tracing system calls is a very useful technique to debug live production systems.
    People in operations sometimes get paged and don't have access to the source code
    right away. Alternatively, there are instances where we are only given compiled
    binaries (or plain Docker images) running in production where there is no source
    code (nor `Dockerfile`). The only clue we can get from a running application is
    to trap the system calls it makes to the Linux kernel.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪系统调用是调试生产环境系统的一个非常有用的技巧。运维人员有时会接到页面通知，但并没有立即访问源代码的权限。或者，有时我们只会收到编译后的二进制文件（或普通的
    Docker 镜像），它们在生产环境中运行，而没有源代码（也没有 `Dockerfile`）。我们从正在运行的应用程序中能获取到的唯一线索，就是捕捉它对 Linux
    内核所做的系统调用。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `strace` webpage can be found at [http://sourceforge.net/projects/strace/](http://sourceforge.net/projects/strace/).
    More information can be accessed through its man page as well by typing the following
    command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`strace` 的网页可以在 [http://sourceforge.net/projects/strace/](http://sourceforge.net/projects/strace/)
    上找到。更多信息也可以通过其手册页面访问，方法是输入以下命令：'
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For a more comprehensive list of system calls in Linux systems, refer to [http://man7.org/linux/man-pages/man2/syscalls.2.html](http://man7.org/linux/man-pages/man2/syscalls.2.html).
    This will be useful in understanding the various outputs given by `strace`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更全面的 Linux 系统中系统调用的列表，请参考 [http://man7.org/linux/man-pages/man2/syscalls.2.html](http://man7.org/linux/man-pages/man2/syscalls.2.html)。这对于理解
    `strace` 输出的各种信息非常有用。
- en: Analyzing network packets
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析网络数据包
- en: Most Docker containers that we deploy revolve around providing some form of
    network service. In the example of HAProxy in this chapter, our container basically
    serves HTTP network traffic. No matter what kind of container we have running,
    the network packets will eventually have to get out of the Docker host for it
    to complete a request that we send it. By dumping and analyzing the content of
    these packets, we can gain some insight into the nature of our Docker container.
    In this section, we will use a packet analyzer called `tcpdump` to view the traffic
    of network packets being received and sent by our Docker containers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们部署的大多数 Docker 容器都涉及提供某种形式的网络服务。在本章的 HAProxy 示例中，我们的容器基本上提供 HTTP 网络流量。无论我们运行什么类型的容器，网络数据包最终都必须通过
    Docker 主机出去，以完成我们发送给它的请求。通过捕获和分析这些数据包的内容，我们可以深入了解 Docker 容器的性质。在本节中，我们将使用一个叫做
    `tcpdump` 的数据包分析器，查看我们的 Docker 容器接收和发送的网络数据包流量。
- en: 'To begin using `tcpdump`, we can issue the following command in our Debian
    Docker host to install it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 `tcpdump`，我们可以在我们的 Debian Docker 主机中输入以下命令来安装它：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We can also expose the Docker host's network interfaces to a container. With
    this approach, we can install t`cpdump` in a container and not pollute our main
    Docker host with ad hoc debugging packages. This can be done by specifying the
    `--net=host` flag on `docker run`. With this, we can access the `docker0` interface
    from inside our Docker container with `tcpdump`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将 Docker 主机的网络接口暴露给容器。通过这种方法，我们可以在容器中安装 `tcpdump`，而不会污染我们的主 Docker 主机与临时调试包。可以通过在
    `docker run` 时指定 `--net=host` 标志来实现。这样，我们就可以在 Docker 容器内部使用 `tcpdump` 访问 `docker0`
    接口。
- en: 'The example of using `tcpdump` will be very specific to the Vagrant VMware
    Fusion provider for VMware Fusion 7.0\. Assuming we have a Docker Debian host
    as a Vagrant VMware Fusion box, run the following command to suspend and unsuspend
    our Docker host''s virtual machine:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `tcpdump` 的示例将特别适用于 VMware Fusion 7.0 的 Vagrant VMware Fusion 提供程序。假设我们有一个
    Docker Debian 主机作为 Vagrant VMware Fusion box，运行以下命令来挂起和恢复我们 Docker 主机的虚拟机：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that we are back inside our Docker host, run the following command and
    note that we cannot resolve `www.google.com` anymore inside our interactive `debian:jessie`
    container, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们回到 Docker 主机内部，运行以下命令并注意到，我们再也无法在交互式的 `debian:jessie` 容器内解析 `www.google.com`，如下所示：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let''s run `tcpdump` in a separate terminal. While running the preceding
    ping command, we will notice the following output from our `tcpdump` terminal:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在一个独立的终端中运行 `tcpdump`。在运行前面的 ping 命令时，我们会注意到从 `tcpdump` 终端输出以下内容：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As we can see, the interactive `/bin/bash` container is looking for `172.17.42.1`,
    which is normally the IP address attached to the Docker Engine network device,
    `docker0`. With this figured out, take a look at `docker0` by typing the following
    command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，交互式 `/bin/bash` 容器正在查找 `172.17.42.1`，这通常是附加在 Docker 引擎网络设备 `docker0` 上的
    IP 地址。弄清楚这一点后，查看 `docker0`，请输入以下命令：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we can view the problem. The `docker0` device doesn''t have an IPv4 address
    attached to it. Somehow, VMware unsuspending our Docker host removes the mapped
    IP address in `docker0`. Fortunately, the solution is to simply restart the Docker
    Engine, and Docker will reinitialize the `docker0` network interface by itself.
    Restart Docker Engine by typing the following command in our Docker host:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以查看问题。`docker0` 设备没有附加 IPv4 地址。不知何故，VMware 恢复 Docker 主机时，会移除 `docker0`
    中映射的 IP 地址。幸运的是，解决方案是简单地重启 Docker 引擎，Docker 会自动重新初始化 `docker0` 网络接口。在 Docker 主机中输入以下命令以重启
    Docker 引擎：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, when we run the same command as earlier, will see that the IP address
    is attached, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行与之前相同的命令时，我们会看到 IP 地址已附加，如下所示：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s go back to our initial command showing the problem; we will see that
    it is now solved, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到最初显示问题的命令，我们将看到问题已经解决，如下所示：
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'More information about the `tcpdump` packet dumper and analyzer can be found
    at [http://www.tcpdump.org](http://www.tcpdump.org). We can also access the documentation
    from where we installed it by typing the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 `tcpdump` 数据包转储器和分析器的更多信息，请访问 [http://www.tcpdump.org](http://www.tcpdump.org)。我们还可以通过输入以下命令访问我们安装它的文档：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Observing block devices
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察块设备
- en: Data being accessed from our Docker containers will mostly reside in physical
    storage devices, such as hard disks or solid state drives. Underneath Docker's
    copy-on-write filesystems is a physical device that is randomly accessed. These
    drives are grouped together as block devices. Data here is randomly accessed fixed-size
    data called *blocks*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的 Docker 容器访问的数据通常存储在物理存储设备中，例如硬盘或固态硬盘。在 Docker 的写时复制文件系统下面，是一个随机访问的物理设备。这些硬盘被分组为块设备。这里存储的数据是随机访问的固定大小的数据，称为
    *块*。
- en: So, in case our Docker containers have peculiar I/O behavior and performance
    issues, we can trace and troubleshoot what is happening inside our block devices
    using a tool called `blktrace`. All events the kernel generates to interact with
    the block devices from processes are intercepted by this program. In this section,
    we will set up our Docker host to observe the block device supporting our containers
    underneath.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们的 Docker 容器出现异常的 I/O 行为和性能问题，我们可以使用名为 `blktrace` 的工具来追踪和排查发生在块设备中的问题。该程序会拦截内核生成的所有与块设备交互的事件，这些事件来自进程。在本节中，我们将设置
    Docker 主机，以便观察支持我们容器的块设备。
- en: 'To use `blktrace`, let''s prepare our Docker host by installing the `blktrace`
    program. Type the following command to install it inside our Docker host:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `blktrace`，我们需要通过安装 `blktrace` 程序来准备我们的 Docker 主机。在 Docker 主机内输入以下命令来安装它：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In addition, we need to enable the debugging of the filesystem. We can do this
    by typing the following command in our Docker host:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要启用文件系统的调试。我们可以通过在 Docker 主机中输入以下命令来实现：
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After the preparations, we need to figure out how to tell `blktrace` where
    to listen for I/O events. To trace I/O events for our containers, we need to know
    where the root of the Docker runtime is. In the default configuration of our Docker
    host, the runtime points to `/var/lib/docker`. To figure out which partition it
    belongs to, type the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 准备工作完成后，我们需要弄清楚如何告诉 `blktrace` 该在哪里监听 I/O 事件。要追踪我们容器的 I/O 事件，我们需要知道 Docker 运行时的根目录在哪里。在我们
    Docker 主机的默认配置中，运行时指向 `/var/lib/docker`。要找出它属于哪个分区，请输入以下命令：
- en: '[PRE26]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As described in the preceding output, our Docker host''s `/var/lib/docker`
    directory is under the `/` partition. This is where we will point `blktrace` to
    listen for events from. Type the following command to start listening for I/O
    events on this device:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述输出所示，我们的 Docker 主机的 `/var/lib/docker` 目录位于 `/` 分区下。这就是我们将指向 `blktrace` 监听事件的地方。输入以下命令来开始监听此设备的
    I/O 事件：
- en: '[PRE27]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Using the `--privileged` flag in `docker run`, we can use `blktrace` within
    a container. Doing so will allow us to mount the debugged filesystem with the
    increased privileges.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `docker run` 中使用 `--privileged` 标志，我们可以在容器内使用 `blktrace`。这样做将允许我们在提升的权限下挂载调试过的文件系统。
- en: More information on extended container privileges can be found at [https://docs.docker.com/engine/reference/run/#runtime-privilege-linux-capabilities-and-lxc-configuration](https://docs.docker.com/engine/reference/run/#runtime-privilege-linux-capabilities-and-lxc-configuration).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有关扩展容器权限的更多信息，请参考 [https://docs.docker.com/engine/reference/run/#runtime-privilege-linux-capabilities-and-lxc-configuration](https://docs.docker.com/engine/reference/run/#runtime-privilege-linux-capabilities-and-lxc-configuration)。
- en: 'To create a simple workload that will generate I/O events in our disk, we will
    create an empty file from a container until the / partition runs out of free space.
    Type the following command to generate this workload:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个简单的工作负载，在我们的磁盘中生成 I/O 事件，我们将从容器中创建一个空文件，直到 / 分区的可用空间耗尽。输入以下命令生成该工作负载：
- en: '[PRE28]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Depending on the free space available in our root partition, this command may
    finish quickly. Right away, let''s get the PID of the container we just ran using
    the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们根分区的可用空间，这个命令可能会很快完成。现在，让我们使用以下命令获取我们刚刚运行的容器的 PID：
- en: '[PRE29]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now that we know the PID of our Docker container that generated I/O events,
    we can look this up with the `blktrace` program''s complementary tool, `blkparse`.
    The `blktrace` program only listens for the events in the Linux kernel''s block
    I/O layer and dumps the results on a file. The `blkparse` program is the accompanying
    tool to view and analyze the events. In the workload we generated earlier, we
    can look for the I/O events that correspond to our Docker container''s PID using
    the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了生成 I/O 事件的 Docker 容器的 PID，我们可以通过 `blktrace` 程序的配套工具 `blkparse` 来查找该 PID。`blktrace`
    程序仅监听 Linux 内核的块 I/O 层的事件，并将结果输出到文件中。`blkparse` 程序是用来查看和分析这些事件的辅助工具。在我们之前生成的工作负载中，我们可以使用以下命令查找与
    Docker 容器的 PID 对应的 I/O 事件：
- en: '[PRE30]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the preceding highlighted output, we can see that the `/dev/dm-0` block
    offset the position of `11001856`, and there was a writing (`W`) of `1024` bytes
    of data that just completed (`C`). To probe further, we can look at this offset
    position on the events that it generated. Type the following command to filter
    out this offset position:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面突出显示的输出中，我们可以看到 `/dev/dm-0` 块偏移量的位置为 `11001856`，并且完成了一次 `1024` 字节的数据写入（`W`）。为了进一步探测，我们可以查看该偏移位置所生成的事件。输入以下命令来过滤出该偏移位置：
- en: '[PRE31]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We can see the write (`W`) being queued (`Q`) to our device by the `kworker`
    process, which means the write was queued by the kernel. After 40 milliseconds,
    the write request registered was completed for our Docker container process.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 `kworker` 进程正在将写入（`W`）请求排入队列（`Q`），这意味着写入操作已经被内核排队。40 毫秒后，注册的写入请求完成了 Docker
    容器进程的操作。
- en: The debugging walkthrough we just performed is just a small sample of what we
    can do by tracing block I/O events with `blktrace`. For example, we can also probe
    our Docker container's I/O behavior in greater detail and figure out the bottlenecks
    that are happening to our application. Are there a lot of writes being made? Are
    the reads so much that they need caching? Having the actual events rather than
    only the performance metrics provided by the built-in `docker stats` command is
    helpful in very deep troubleshooting scenarios.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚执行的调试过程只是通过 `blktrace` 跟踪块 I/O 事件可以做到的一小部分。例如，我们还可以更详细地探测 Docker 容器的 I/O
    行为，找出应用程序中出现的瓶颈。是否有大量的写入操作？读取操作是否如此频繁，以至于需要缓存？拥有实际的事件数据，而不仅仅是内建的 `docker stats`
    命令提供的性能指标，在深入排查问题时非常有帮助。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information on the different output values of `blkparse` and flags to capture
    I/O events in `blktrace` can be found in the user guide located at [http://www.cse.unsw.edu.au/~aaronc/iosched/doc/blktrace.html](http://www.cse.unsw.edu.au/~aaronc/iosched/doc/blktrace.html).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 `blkparse` 输出的不同值以及如何在 `blktrace` 中捕获 I/O 事件的更多信息，请参考位于 [http://www.cse.unsw.edu.au/~aaronc/iosched/doc/blktrace.html](http://www.cse.unsw.edu.au/~aaronc/iosched/doc/blktrace.html)
    的用户指南。
- en: A stack of troubleshooting tools
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一套故障排除工具
- en: Debugging applications inside Docker containers required a different approach
    from normal applications in Linux. However, the actual programs being used are
    the same because all the calls from inside the container will eventually go to
    the Docker host's kernel operating system. By knowing how calls go outside of
    our containers, we can use any other debugging tools we have to troubleshoot.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker 容器内调试应用程序需要一种不同于 Linux 上普通应用程序的方式。然而，实际使用的程序是相同的，因为容器内部的所有调用最终都会传递到
    Docker 主机的内核操作系统。通过了解调用如何穿越容器外部，我们可以使用任何其他调试工具来排查问题。
- en: 'In addition to standard Linux tools, there are several container-specific utilities
    that package the preceding standard utilities to be more friendly for container
    usage. The following are some of these tools:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的 Linux 工具外，还有一些特定于容器的工具，这些工具将前述的标准工具进行了封装，以便更适应容器的使用。以下是其中一些工具：
- en: Red Hat's `rhel-tools` Docker image is a huge container containing a combination
    of the tools we discussed earlier. Its documentation page at [https://access.redhat.com/documentation/en/red-hat-enterprise-linux-atomic-host/version-7/getting-started-with-containers/#using_the_atomic_tools_container_image](https://access.redhat.com/documentation/en/red-hat-enterprise-linux-atomic-host/version-7/getting-started-with-containers/#using_the_atomic_tools_container_image)
    shows how to run it with the proper Docker privileges for it to function correctly.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat 的 `rhel-tools` Docker 镜像是一个包含我们之前讨论的各种工具的巨大容器。其文档页面[https://access.redhat.com/documentation/en/red-hat-enterprise-linux-atomic-host/version-7/getting-started-with-containers/#using_the_atomic_tools_container_image](https://access.redhat.com/documentation/en/red-hat-enterprise-linux-atomic-host/version-7/getting-started-with-containers/#using_the_atomic_tools_container_image)展示了如何以正确的
    Docker 权限运行该工具，以确保其正常工作。
- en: The CoreOS t`oolbox` program is a small script utility that creates a small
    Linux container using Systemd's `systemd-nspawn` program. By copying the root
    filesystem from popular Docker images, we can install any tool we want without
    polluting the Docker host's filesystem with ad hoc debugging tools. Its use is
    documented on its webpage at [https://coreos.com/os/docs/latest/install-debugging-tools.html](https://coreos.com/os/docs/latest/install-debugging-tools.html).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreOS 的`t`oolbox`程序是一个小型脚本工具，它使用 Systemd 的`systemd-nspawn`程序创建一个小型的 Linux 容器。通过复制流行的
    Docker 镜像的根文件系统，我们可以安装任何我们需要的工具，而无需将临时调试工具污染 Docker 主机的文件系统。其使用方法已在其网页上进行文档说明，网址为[https://coreos.com/os/docs/latest/install-debugging-tools.html](https://coreos.com/os/docs/latest/install-debugging-tools.html)。
- en: The `nsenter` program is a utility to enter a Linux control group's process
    namespace. It is the predecessor to the `docker exec` program and is considered
    unmaintained. To get a history of how docker exec came to be, visit the `nsenter`
    program's project page at [https://github.com/jpetazzo/nsenter](https://github.com/jpetazzo/nsenter).
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nsenter`程序是一个进入 Linux 控制组进程命名空间的工具。它是`docker exec`程序的前身，并被认为已经不再维护。要了解 `docker
    exec` 如何诞生的历史，请访问 `nsenter` 程序的项目页面，网址为[https://github.com/jpetazzo/nsenter](https://github.com/jpetazzo/nsenter)。'
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Remember that logging in to Docker hosts isn't scalable. Adding instrumentation
    at the application level, in addition to the ones given by our operating system,
    helps in faster and more efficient diagnosing of the problems that we may encounter
    in the future. Remember, nobody likes waking up at two in the morning to run `tcpdump`
    to debug a Docker container on fire!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，登录到 Docker 主机并不是一种可扩展的方案。在应用程序层面添加监控工具，除了操作系统本身提供的工具外，能够帮助更快速、更高效地诊断未来可能遇到的问题。记住，没人愿意在凌晨两点起来运行`tcpdump`来调试一个着火的
    Docker 容器！
- en: In the next chapter, we will wrap up and look again at what it takes to get
    our Docker-based workloads to production.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将总结并再次审视将基于 Docker 的工作负载推向生产环境所需要的步骤。
