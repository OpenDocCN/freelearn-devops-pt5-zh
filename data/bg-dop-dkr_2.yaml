- en: Chapter 2. Application Container Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 应用容器管理。
- en: In this lesson, we will scale one of the containers we built into a multi-tier
    setup. This will involve splitting the application into different logical sections.
    For example, we could have an application running on a Docker container and the
    application's data in a separate database container; however, both should work
    as a single entity. For this, we will use Docker's tool for running multi-container
    applications. The tool goes by the name `docker-compose`. In summary, `docker-compose`
    is the tool used for defining and running multi-container Docker applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把我们构建的一个容器扩展为多层次的架构。这将涉及将应用程序拆分为不同的逻辑部分。例如，我们可以让一个应用程序在 Docker 容器上运行，而将应用程序的数据存储在一个独立的数据库容器中；然而，这两个容器应该作为一个整体工作。为此，我们将使用
    Docker 的工具来运行多容器应用程序。这个工具叫做 `docker-compose`。总之，`docker-compose` 是用来定义和运行多容器 Docker
    应用程序的工具。
- en: Lesson Objectives
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程目标。
- en: 'By the end of this lesson, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本节结束时，您将能够：
- en: Get an overview of a multi-container application setup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取多容器应用程序设置的概览。
- en: Work through the `docker-compose` file and CLI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习 `docker-compose` 文件和命令行界面（CLI）。
- en: Manage multiple containers and distributed application bundles
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理多个容器和分布式应用程序包。
- en: Set up a network with `docker-compose`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `docker-compose` 设置网络。
- en: Handle and debug the different application layers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理和调试不同的应用程序层。
- en: The docker-compose Tool
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: docker-compose 工具
- en: Let's begin the lesson by looking at what a multi-container setup is, why it
    is important, and how Docker, with the tool `docker-compose`, works like a charm
    in such scenarios.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过了解什么是多容器架构、它为什么重要以及 Docker 如何通过 `docker-compose` 工具在这种场景中表现得如此出色来开始本节课。
- en: 'We have recently been introduced to how applications work, with their separate
    elements: frontend, backend, and database.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最近了解了应用程序是如何工作的，包含其独立的元素：前端、后端和数据库。
- en: 'To run such a multi-tier application using Docker, one would need to run the
    following commands to spin up the containers in different terminal sessions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Docker 运行这样的多层应用程序，您需要在不同的终端会话中运行以下命令来启动容器：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can run `docker run` with (`-d`) as detached to prevent us from running
    the three commands in separate sessions, for example: `docker run <front-end>
    -d`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用（`-d`）选项将 `docker run` 运行在分离模式，以防止我们在不同的会话中运行这三个命令，例如：`docker run <front-end>
    -d`。
- en: That said, it even becomes particularly tasking linking different containers
    (networking).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，链接不同容器（网络设置）确实变得特别具有挑战性。
- en: '`docker-compose` comes in to save the day. We can define and run multi-containers
    from one file - `docker-compose.yml`. In the following topics, we''ll discuss
    this further. First, let''s install it.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose` 来拯救一天。我们可以从一个文件 `docker-compose.yml` 中定义和运行多个容器。在接下来的主题中，我们将进一步讨论这一点。首先，安装它。'
- en: Installing docker-compose
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 docker-compose。
- en: If you went through the installation of Docker in *Lesson 1*, *Images and Containers,*
    `docker-compose` was most likely installed with Docker. To confirm this, run `docker-compose`
    in your terminal.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 *第一课*，*镜像和容器* 中经历了 Docker 的安装，`docker-compose` 很可能已经与 Docker 一起安装。要确认这一点，请在终端中运行
    `docker-compose`。
- en: 'If the command is recognized, you should have an output like the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令被识别，您应该会看到如下输出：
- en: '![Installing docker-compose](img/image02_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![安装 docker-compose](img/image02_01.jpg)'
- en: Windows users should install the Community Edition of Docker to install `docker-compose`
    alongside it. Docker Toolbox includes `docker-compose` in its installation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 用户应该安装 Docker 的社区版，以便与 Docker 一起安装 `docker-compose`。Docker Toolbox 在其安装中包括了
    `docker-compose`。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For further `docker-compose` installation steps, check out the documentation
    at: [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 `docker-compose` 安装的更多步骤，请参阅文档：[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)。
- en: 'While on this subject, please note the various ways of uninstalling it. In
    order to uninstall the program:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这个，注意卸载它的各种方式。要卸载该程序：
- en: Go to **Programs and Features**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 进入 **程序和功能**。
- en: Look for Docker, right-click, and **Uninstall**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 找到 Docker，右键点击，然后选择 **卸载**。
- en: Overview of a Multi-Container Application Setup
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多容器应用程序设置概览。
- en: In the previous lesson, we introduced Docker and containerization. We ran sample
    Python and JavaScript scripts as demonstrations of how applications can be containerized
    and how images can be built. We are now ready to run an application that goes
    beyond that.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一课中，我们介绍了 Docker 和容器化。我们运行了示例 Python 和 JavaScript 脚本，演示了应用程序如何被容器化以及如何构建镜像。我们现在准备运行一个超越这些的应用程序。
- en: In a Dockerfile, every line describes a layer. The union filesystem used in
    Docker allows different directories to transparently overlay, forming a single,
    coherent filesystem. The foundational layer is always an image which you build
    upon. Each additional line with a command, say, RUN, CMD, and so on, adds a layer
    to it. The advantage of layers is that as long as the layer has not been modified,
    it will not bother building that part of the image. Secondly, as an image is pulled
    from a Docker image registry, it is pulled in layers, therefore mitigating issues
    such as connection cuts during pulling and pushing of images.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Dockerfile 中，每一行描述一个层。Docker 中使用的联合文件系统允许不同目录透明叠加，形成一个统一的文件系统。基础层始终是一个镜像，你在其上构建。每添加一行命令，比如
    RUN、CMD 等，都会为其添加一个层。层的优势在于，只要层未被修改，就不必重新构建该部分镜像。其次，镜像从 Docker 镜像仓库拉取时，是按层拉取的，因此可以减少在拉取和推送镜像时出现的连接中断等问题。
- en: 'Many applications are built under a common structure: **frontend, backend**,
    and **database**. Let''s break this down further and understand how we can set
    this up.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序都建立在一个常见的结构下：**前端，后端**和**数据库**。让我们进一步分解并理解如何设置这些。
- en: The Frontend
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前端
- en: When you open a web application, the page that you see is part of the frontend.
    Sometimes, the frontend has the controller (the logical end) and the view layer
    (the dumb end). The styling of the layout and content (Read, HTML, and CSS) is
    the view layer. The content here is managed by the controller.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开一个 web 应用时，看到的页面属于前端的一部分。有时，前端包含控制器（逻辑端）和视图层（哑端）。布局和内容的样式（即 HTML 和 CSS）属于视图层。这里的内容由控制器管理。
- en: 'The controller influences what is presented in the view layer based on the
    user''s action and/or database changes. Take, for example, an application like
    Twitter: if someone follows you, your data has changed. The controller will pick
    up this change and update the view layer with the new number of followers.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器根据用户的操作和/或数据库更改影响视图层中呈现的内容。以 Twitter 应用为例：如果有人关注你，你的数据就发生了变化。控制器将捕捉此更改，并更新视图层显示新的关注者数量。
- en: The Backend
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后端
- en: 'You might have heard of the term Model-view-controller (MVC) **.** The model
    sits on the backend side of things in an application. With the earlier example
    of Twitter, the model does not concern itself with the HTML or its layout. It
    handles the state of the application: the number of followers and people you are
    following, the tweets, images, videos, and so on.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过模型-视图-控制器（MVC）**。** 模型位于应用程序的后端。以 Twitter 的早期示例为例，模型不涉及 HTML 或其布局。它处理应用程序的状态：关注者数量、正在关注的人数、推文、图片、视频等。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is a summary of what the backend layer includes. The backend mainly deals
    with the application's logic. This includes the code that is manipulating the
    database; that means all queries come from the backend. However, requests come
    from the **frontend**. This happens when a user clicks a button, for example.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是后端层包含内容的摘要。后端主要处理应用程序的逻辑。这包括操作数据库的代码；也就是说，所有查询都来自后端。但是，请求来自**前端**。例如，当用户点击按钮时发生这种情况。
- en: You might have also heard of the term API. API is an acronym standing for **Application
    Program Interface**. This also sits at the backend. APIs expose the internal workings
    of an application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也听说过 API 这个术语。API 是应用程序接口的缩写。它同样位于后端。API 暴露了应用程序的内部工作方式。
- en: This means the API can also be an application's backend or logical layer.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 API 也可以是应用程序的后端或逻辑层。
- en: Let's use the Twitter example so that this is clear. Actions such as posting
    a tweet and searching for tweets can easily be in an API as methods which can
    be called from any frontend application if the API is made public.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Twitter 的例子来说明。像发布推文和搜索推文这样的操作可以很容易地作为 API 存在，可以从任何前端应用程序调用，如果 API 被公开的话。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Docker and `docker-compose` CLIs are actually API calls, for instance when
    interacting with external resources or content, such as Docker Hub.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Docker和`docker-compose` CLI实际上是API调用，例如在与外部资源或内容（如Docker Hub）交互时。
- en: The Database
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库
- en: The database contains organized data (information) that is easily accessible,
    managed, and updated. We have file-based databases and server-based databases.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库包含有组织的数据（信息），这些数据可以轻松访问、管理和更新。我们有基于文件的数据库和基于服务器的数据库。
- en: Server-based databases involve a server process running, accepting requests
    and reading and writing the database files themselves. The databases could be
    in the cloud, for example.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 基于服务器的数据库涉及一个服务器进程运行，接受请求并读取和写入数据库文件。数据库可以托管在云中，例如。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Server-based databases are hosted on virtual hosts, mostly on cloud platforms
    such as Google Cloud Platform and Amazon Web Services. Examples are Amazon RDS
    and Google Cloud SQL for PostgreSQL.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 基于服务器的数据库托管在虚拟主机上，通常是云平台，如Google Cloud Platform和Amazon Web Services。例子包括Amazon
    RDS和Google Cloud SQL for PostgreSQL。
- en: 'Obtain server-based databases from the following links:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下链接获取基于服务器的数据库：
- en: '[https://aws.amazon.com/rds/postgresql/](https://aws.amazon.com/rds/postgresql/)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://aws.amazon.com/rds/postgresql/](https://aws.amazon.com/rds/postgresql/)'
- en: '[https://cloud.google.com/sql/docs/postgres](https://cloud.google.com/sql/docs/postgres)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/sql/docs/postgres](https://cloud.google.com/sql/docs/postgres)'
- en: In a nutshell, development has always involved building application layers,
    and shipping has always been a hassle considering the price of the cloud platforms
    and development and operations (DevOps, for short) involved.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，开发一直涉及构建应用程序层，而交付一直是个麻烦，因为云平台的价格和涉及的开发及运维（简称DevOps）。
- en: Docker and `docker-compose` help us manage all our application components as
    a single bundle, which is cheaper, faster, and easier to manage. `docker-compose`
    helps us coordinate all the application layers through a single file and in very
    simple definitions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Docker和`docker-compose`帮助我们将所有应用程序组件管理为一个单一的包，这样既便宜、又快捷、易于管理。`docker-compose`帮助我们通过一个文件以非常简单的定义来协调所有应用程序层。
- en: 'As we conclude this overview, it is important to know that developers, over
    time, have coined different stack variations to summarize the frontend, backend,
    and database structure of their apps. Here''s a list of them with their meaning
    (we will not delve further than this during this course):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们总结本概述时，了解开发人员随着时间的推移，已创造出不同的技术栈变体，以总结其应用程序的前端、后端和数据库结构非常重要。以下是它们及其含义的列表（在本课程中我们不会深入讨论）：
- en: PREN - PostgresDB, React, Express, Node.js
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PREN - PostgresDB, React, Express, Node.js
- en: MEAN - MongoDB, Express, Angular, Node.js
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MEAN - MongoDB, Express, Angular, Node.js
- en: VPEN - VueJS, PostgresDB, Express, Node.js
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPEN - VueJS, PostgresDB, Express, Node.js
- en: LAMP - Linux, Apache, MySQL, PHP
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LAMP - Linux, Apache, MySQL, PHP
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to know that applications are structured in this manner to manage
    separation of concerns.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 了解应用程序按照这种方式构建，以便管理关注点的分离非常重要。
- en: With the knowledge of application structures, we can get to the `docker-compose`
    CLI and put this knowledge to work.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解应用程序结构，我们可以进入`docker-compose` CLI并将这些知识付诸实践。
- en: Using docker-compose
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用docker-compose
- en: 'Using `docker-compose` requires three steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`docker-compose`需要三个步骤：
- en: Build an application's environment as an image using a `Dockerfile`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dockerfile`将应用程序环境构建为镜像。
- en: Use the `docker-compose.yml` file to define the services your app requires to
    run.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker-compose.yml`文件定义您的应用程序运行所需的服务。
- en: Run `docker-compose up` to run the app.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`docker-compose up`以启动应用程序。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`docker-compose` is a **command-line interface (CLI)** just like the Docker
    CLI. Running `docker-compose` gives a list of commands and how to use each.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose`是一个**命令行接口（CLI）**，就像Docker CLI一样。运行`docker-compose`会列出命令及其使用方法。'
- en: We went through images in the previous lesson, so step 1 is checked off.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节课中已经了解了镜像，因此步骤1已经完成。
- en: Some `docker-compose` versions are incompatible with some Docker versions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 某些`docker-compose`版本与某些Docker版本不兼容。
- en: We'll dwell on step 2 for some time.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将花一些时间讨论步骤2。
- en: 'Here is the `docker-compose` file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`docker-compose`文件：
- en: 'One that runs the two images we created in our previous lesson:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它运行我们在上一节课中创建的两个镜像：
- en: '![Using docker-compose](img/image02_02.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![使用docker-compose](img/image02_02.jpg)'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer the complete code placed at `Code/Lesson-2/example-docker-compose.yml`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考位于`Code/Lesson-2/example-docker-compose.yml`的完整代码。
- en: Go to [https://goo.gl/11rwXV](https://goo.gl/11rwXV) to access the code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://goo.gl/11rwXV](https://goo.gl/11rwXV)获取代码。
- en: docker-compose first run
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: docker-compose 首次运行
- en: Create a new directory and name it `py-js`; you can have a different directory
    name if you prefer.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新目录并命名为 `py-js`；如果你更喜欢，可以使用其他目录名称。
- en: Create a new file in the directory and name it `docker-compose.yml`. Copy the
    content of the image above or the example shared on example-`docker-compose.yml`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目录中创建一个新文件，并命名为 `docker-compose.yml`。复制上面图片中的内容，或使用在 example-`docker-compose.yml`
    中共享的示例。
- en: Run the command `docker-compose up` from the directory.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从该目录下运行命令 `docker-compose up`。
- en: Notice the outputs of running both `js-docker` and `python-docker`. This is
    also because we have both images built locally from the previous lesson.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意运行 `js-docker` 和 `python-docker` 的输出。这是因为我们已经从上一课构建了这两个本地镜像。
- en: 'If you do not have the images, running `docker-compose up` will result in an
    error or an attempt to pull it from Docker Hub if it exists online:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有相关镜像，运行 `docker-compose up` 会导致错误，或者尝试从 Docker Hub 拉取镜像（如果它在线存在）：
- en: '![docker-compose first run](img/image02_03.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![docker-compose 首次运行](img/image02_03.jpg)'
- en: A `docker-compose.yml` that runs **WordPress**. WordPress is a free and open
    source **content** **management system** **(CMS)** based on PHP and MySQL.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个运行 **WordPress** 的 `docker-compose.yml` 文件。WordPress 是一个免费的开源 **内容管理系统** **(CMS)**，基于
    PHP 和 MySQL。
- en: Activity 1 — Running WordPress Using docker-compose
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 1 — 使用 docker-compose 运行 WordPress
- en: To get you conversant with running `docker-compose` commands.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让你熟悉运行 `docker-compose` 命令。
- en: You have been asked to build a WordPress website using `docker-compose`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你被要求使用 `docker-compose` 构建一个 WordPress 网站。
- en: Create a new directory and name it `sandbox`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新目录并命名为 `sandbox`。
- en: Create a new file and name it `docker-compose.yml.` Add the code in `wordpress-docker-compose.yml`
    or copy the following figure:![Activity 1 — Running WordPress Using docker-compose](img/image02_04.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件并命名为 `docker-compose.yml`。添加 `wordpress-docker-compose.yml` 中的代码，或复制以下图示：![活动
    1 — 使用 docker-compose 运行 WordPress](img/image02_04.jpg)
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer the complete code placed at `Code/Lesson-2/wordpress-docker-compose.yml`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 `Code/Lesson-2/wordpress-docker-compose.yml` 中的完整代码。
- en: Go to [https://goo.gl/t7UGvy](https://goo.gl/t7UGvy) to access the code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [https://goo.gl/t7UGvy](https://goo.gl/t7UGvy) 以获取代码。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Take heed of the indentation in the file. It is advised to use an equal number
    of tabs and spaces when indenting the lines.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意文件中的缩进。建议在缩进时使用相同数量的制表符和空格。
- en: 'Run `docker-compose up` in the `sandbox` directory:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sandbox` 目录下运行 `docker-compose up`：
- en: '![Activity 1 — Running WordPress Using docker-compose](img/image02_05.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![活动 1 — 使用 docker-compose 运行 WordPress](img/image02_05.jpg)'
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You'll notice that, based on one file, we have an application running. This
    example is the perfect showcase of the power of `docker-compose`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，基于一个文件，我们已经启动了一个应用程序。这个例子完美展示了 `docker-compose` 的强大功能。
- en: 'Run `docker ps`. You''ll see the containers running:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `docker ps`。你将看到正在运行的容器：
- en: '![Activity 1 — Running WordPress Using docker-compose](img/image02_06.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![活动 1 — 使用 docker-compose 运行 WordPress](img/image02_06.jpg)'
- en: 'Open your browser and go to the address at: `http://0.0.0.0:8000/`. We''ll
    have the WordPress website set up ready.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的浏览器并访问地址：`http://0.0.0.0:8000/`。我们将设置好的 WordPress 网站展示出来。
- en: Proceed with the set up and, in an instant, you have a WordPress site up and
    ready.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 按照设置步骤操作，一瞬间，你就可以拥有一个准备好的 WordPress 网站。
- en: 'The docker-compose file: docker-compose.yml'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: docker-compose 文件：docker-compose.yml
- en: '`docker-compose.yml` is a YAML file. It defines **services, networks**, and
    **volumes**.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose.yml` 是一个 YAML 文件，它定义了 **服务、网络** 和 **卷**。'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Services are application container definitions that include all components that
    relate to an application, for example, **DB, frontend**, or **backend**. What
    really weighs in when defining services is the components, which are networks,
    volumes, and environment variables.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是应用容器定义，包括与应用相关的所有组件，例如 **数据库、前端** 或 **后端**。定义服务时真正重要的是组件，它们包括网络、卷和环境变量。
- en: The first line of any `docker-compose.yml` defines the version of the `docker-compose`
    file format.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 `docker-compose.yml` 文件的第一行定义了 `docker-compose` 文件格式的版本。
- en: By running `docker -v`, you can tell which Docker version is running and thus
    know which version to put on the first line of the file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行 `docker -v`，你可以知道正在运行的 Docker 版本，从而知道在文件的第一行使用哪个版本。
- en: For `docker-compose` file format 1.0, the first line was not necessary. Each
    `docker-compose` file introduced a new configuration or deprecated an earlier
    one.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `docker-compose` 文件格式 1.0，第一行是可选的。每个 `docker-compose` 文件都引入了新的配置或弃用了之前的配置。
- en: We will use version 3.3 and the program should be compatible with version 3.0
    and above.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用版本3.3，程序应与版本3.0及以上兼容。
- en: Make sure everyone is running version 3 and at least a Docker that's 1.13.0+.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 确保每个人都在运行版本3及以上，并且至少使用Docker 1.13.0+版本。
- en: 'Next up is **services**. Let''s use this simplified skeleton:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是**服务**。我们使用这个简化的骨架：
- en: '![The docker-compose file: docker-compose.yml](img/image02_07.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![docker-compose文件：docker-compose.yml](img/image02_07.jpg)'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Take heed of the indentation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意缩进。
- en: In the above example, we have two services, that is, `db` and `web`. These two
    are indented just once.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们有两个服务，分别是`db`和`web`。这两个服务缩进仅一次。
- en: The next lines after defining the services defines the image or the Dockerfile
    from which the image is to be built.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义服务后的下一行定义了要从中构建镜像的镜像或Dockerfile。
- en: Line 4 will specify the image from which the `db` service container will run
    from. We earlier mentioned a number of stacks; the `db` image can be any of the
    server-based databases.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 第4行将指定`db`服务容器运行的镜像。我们之前提到过一些堆栈；`db`镜像可以是任何基于服务器的数据库。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To confirm whether a stack you want to use exists, run the following:`docker
    search <image or name of your preferred stack`> (for example, `docker search mongo
    or docker search postgres`).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认您想使用的堆栈是否存在，请运行以下命令：`docker search <image or name of your preferred stack>`（例如，`docker
    search mongo`或`docker search postgres`）。
- en: Line 6 explains that the web services image will be built from the Dockerfile
    in the location (`.`) relative to the `docker-compose.yml`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 第6行解释了Web服务镜像将从`docker-compose.yml`相对位置（`.`）中的Dockerfile构建。
- en: 'We can also define the name of the Dockerfile in line 6\. `docker-compose`
    will search for the file with a name as listed, for example, in the `docker-compose.yml`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在第6行定义Dockerfile的名称。`docker-compose`将会搜索列出名称的文件，例如，在`docker-compose.yml`中：
- en: '[PRE1]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Lines 7 to 10 gives more definition to the web services.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 第7行到第10行进一步定义了Web服务。
- en: 'As evidenced in the `docker-compose.yml` we used to build and run WordPress,
    there are two services: `db` and `wordpress`. In the output of `docker ps,` these
    are the container names: `sandbox_wordpress_1` and `sandbox_db_1`.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在构建并运行WordPress时所使用的`docker-compose.yml`所示，有两个服务：`db`和`wordpress`。在`docker
    ps`的输出中，这些是容器名称：`sandbox_wordpress_1`和`sandbox_db_1`。
- en: The first word before the underscore signifies the name of the directory holding
    the `docker-compose.yml`. The second word in that container name is the service
    name, as defined in `docker-compose.yml`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下划线前的第一个单词表示存放`docker-compose.yml`的目录名称。容器名称中的第二个单词是服务名称，正如在`docker-compose.yml`中定义的那样。
- en: We'll go into more context in the following topic.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的主题中深入讨论更多内容。
- en: The docker-compose CLI
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: docker-compose CLI
- en: As soon as `docker-compose` is installed, I mentioned that you expect a list
    of options when you run `docker-compose`. Run `docker-compose –v`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`docker-compose`，我提到过，当您运行`docker-compose`时，您应该会看到一系列选项。运行`docker-compose
    -v`。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: These two commands, `docker-compose` and `docker-compose -v`, are the only ones
    that can be ran from whichever working directory is open on your terminal command
    line or Git bash.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个命令，`docker-compose`和`docker-compose -v`，是唯一可以在您当前打开的终端命令行或Git bash中运行的命令。
- en: Otherwise, the other options in `docker-compose` are only run in the presence
    of the `docker-compose.yml` file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，`docker-compose`中的其他选项仅在`docker-compose.yml`文件存在的情况下运行。
- en: 'Let''s dig deep into the common commands: `docker-compose build`.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解常用命令：`docker-compose build`。
- en: 'This command builds images referenced in the `docker-compose line: (build:
    .)` in the template `docker-compose.ym`.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '该命令构建在模板`docker-compose.yml`中的`docker-compose line: (build: .)`所引用的镜像。'
- en: Building images can also be achieved through the command `docker-compose up`.
    Take note that this doesn't happen unless the image has not been built yet, or
    there has been a recent change that affects the container to be run.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 构建镜像也可以通过命令`docker-compose up`来实现。请注意，除非镜像尚未构建，或者有最近的更改影响到需要运行的容器，否则不会发生此操作。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This command will also work for the WordPress example, even though both services
    run from images in the Docker registry and not Dockerfiles within the directory.
    This would be **pulling** an image and **not building** because we build from
    a Dockerfile.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这两个服务是从Docker注册表中的镜像运行，而不是从目录中的Dockerfile构建，针对WordPress的示例此命令仍然有效。这将是**拉取**镜像，而**不是构建**，因为我们是从Dockerfile构建的。
- en: 'This command lists the services as configured in the `docker-compose.yml`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令列出了在`docker-compose.yml`中配置的服务：
- en: '`docker-compose config --services`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose config --services`'
- en: 'This command lists the images used by the created containers:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令列出所创建容器使用的镜像：
- en: '`docker-compose images`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose images`'
- en: 'This command lists the logs from the services:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令列出服务的日志：
- en: '`docker-compose logs`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose logs`'
- en: '`docker-compose logs <service>` lists the logs of a specific service, for example,
    `docker-compose logs db`.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose logs <service>`列出特定服务的日志，例如`docker-compose logs db`。'
- en: 'This command lists the containers running based on the `docker-compose`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令列出基于`docker-compose`运行的容器：
- en: '`docker-compose ps`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose ps`'
- en: Note that in most cases, there is a difference between the results of `docker-compose
    ps` and `docker ps`. Containers that were not running in the context of `docker-compose`
    will not be displayed by the command `docker-compose ps`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在大多数情况下，`docker-compose ps`和`docker ps`的结果是不同的。在`docker-compose`上下文中没有运行的容器将不会被`docker-compose
    ps`命令显示出来。
- en: 'This command builds, creates, recreates, and runs services:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令构建、创建、重建并运行服务：
- en: '`docker-compose up`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose up`'
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When running `docker-compose up`, if one service exits, the entire command exits.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行`docker-compose up`时，如果某个服务退出，整个命令会退出。
- en: Running `docker-compose up -d` is running `docker-compose up` in detached mode.
    That is, the command will be running in the background.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`docker-compose up -d`相当于在分离模式下运行`docker-compose up`。也就是说，命令会在后台运行。
- en: Activity 2 — Analyzing the docker- compose CLI
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动2 — 分析docker-compose CLI
- en: To get you conversant with the `docker-compose` CLI.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让你熟悉`docker-compose` CLI。
- en: You have been asked to demonstrate the difference in changes resulting from
    running two containers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你被要求演示运行两个容器所带来的变化差异。
- en: 'While still within the directory with the WordPress `docker-compose.yml`--
    in my case, sandbox -- run the commands of *Activity B-1*, then the following
    commands:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在WordPress的`docker-compose.yml`所在的目录下——在我这边是sandbox——运行*活动B-1*的命令，然后运行以下命令：
- en: '[PRE2]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Managing Multiple Containers and Distributed Application Bundles
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理多个容器和分布式应用程序包
- en: This is the `docker-compose.yml` for running a Django application. A similar
    application can be found in the `docker-compose` documentation under the Django
    example.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是运行Django应用程序的`docker-compose.yml`文件。一个类似的应用可以在`docker-compose`文档的Django示例中找到。
- en: 'Download the Django example from: [ttps://docs.docker.com/compose/django/](https://docs.docker.com/compose/django/):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下地址下载Django示例：[https://docs.docker.com/compose/django/](https://docs.docker.com/compose/django/)：
- en: '![Managing Multiple Containers and Distributed Application Bundles](img/image02_08.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![管理多个容器和分布式应用程序包](img/image02_08.jpg)'
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer the complete code placed at `Code/Lesson-2/django-docker-compose.yml`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考位于`Code/Lesson-2/django-docker-compose.yml`的完整代码。
- en: Go to [https://goo.gl/H624J1](https://goo.gl/H624J1) to access the code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://goo.gl/H624J1](https://goo.gl/H624J1)以获取代码。
- en: Improve a Docker Workflow
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进Docker工作流程
- en: To give more context on how `docker-compose` is involved and how it improves
    a Docker workflow.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供更多的上下文，说明`docker-compose`如何参与以及它如何改进Docker工作流程。
- en: Create a new directory and name it `django_docker`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的目录，并命名为`django_docker`。
- en: In the `django-docker` directory, create a new `docker-compose.yml` and add
    the information in the figure above, or in the `django-docker-compose.yml` script
    provided.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`django-docker`目录中，创建一个新的`docker-compose.yml`文件，并添加上述图中的信息，或使用提供的`django-docker-compose.yml`脚本。
- en: Create a new Dockerfile and add the content in the Dockerfile script provided.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Dockerfile，并添加提供的Dockerfile脚本中的内容。
- en: Create a requirements file; simply copy the `django-requirements.txt` file provided.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个requirements文件；只需复制提供的`django-requirements.txt`文件。
- en: Run `docker-compose` up and observe the logs.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`docker-compose` up并观察日志。
- en: Notice that we are able to spin up both containers with one simple command,
    docker-compose up.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们可以通过一个简单的命令`docker-compose up`来启动两个容器。
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: No prior experience with Django is needed; this is for basic demo purposes.
    `Code/Lesson-2/django-requirements.txt`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要Django的先前经验；这只是为了基本的演示目的。`Code/Lesson-2/django-requirements.txt`。
- en: '**The Django Compose File Broken Down**'
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Django Compose文件解析**'
- en: 'First things first, how many services does this file have? Yes, two: `db` and
    `web`. The service `db` is based on the Postgres image. The service web is built
    from the Dockerfile in the same directory that contains this `docker-compose.yml`.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这个文件包含多少个服务？是的，两个：`db`和`web`。服务`db`基于Postgres镜像，服务`web`是从同一目录下包含此`docker-compose.yml`文件的Dockerfile构建的。
- en: 'Without the `docker-compose` file, the `db` service container would have otherwise
    been run in this way:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有`docker-compose`文件，`db`服务容器本应以以下方式运行：
- en: '![The Django Compose File Broken Down](img/image02_09.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Django Compose文件解析](img/image02_09.jpg)'
- en: 'This command is translated to the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令翻译成如下内容：
- en: '![The Django Compose File Broken Down](img/image02_10.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![Django Compose文件解析](img/image02_10.jpg)'
- en: Open another tab or window in the terminal and run `docker ps`. You'll see the
    container running.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中打开另一个标签页或窗口并运行`docker ps`。你将看到正在运行的容器。
- en: 'On the other hand, the `web` service container as per the example would be
    run in the following steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，根据示例，`web`服务容器将按照以下步骤运行：
- en: '![The Django Compose File Broken Down](img/image02_11.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![Django Compose文件解析](img/image02_11.jpg)'
- en: 'The second command, broken down, is in the following format:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个命令的分解格式如下：
- en: '[PRE3]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Therefore, the aforementioned command is translated to the following:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，上述命令翻译成以下内容：
- en: '![The Django Compose File Broken Down](img/image02_12.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![Django Compose文件解析](img/image02_12.jpg)'
- en: One advantage of using `docker-compose.yml` is that instead of running the commands
    in the terminal again and again, you have one command to run as many containers
    as you've included in the file.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`docker-compose.yml`的一个优点是，你不需要一次又一次地在终端中运行命令，而是可以通过一个命令来运行文件中包含的所有容器。
- en: We did not cover volumes and ports in the last lesson. I'll take time to help
    us understand this.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一课没有讲解卷和端口的内容。现在我会花时间帮助大家理解这个部分。
- en: Endure Data Using Volumes
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用卷来持久化数据
- en: Volumes are used to persist data generated and used by Docker containers.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 卷用于持久化由Docker容器生成和使用的数据。
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Volumes persist any update to a local file or script. This makes an equal change
    on the container side.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 卷会持久化对本地文件或脚本的任何更新。这会在容器端同步进行相应的更改。
- en: 'In this case, the command is the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，命令如下：
- en: '![Endure Data Using Volumes](img/image02_13.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![使用卷来持久化数据](img/image02_13.jpg)'
- en: 'In the docker run options, which comes after the main command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在docker run选项中，紧接着主命令后的是：
- en: '[PRE4]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is in the `docker-compose.yml` file.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这在`docker-compose.yml`文件中。
- en: '![Endure Data Using Volumes](img/image02_14.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![使用卷来持久化数据](img/image02_14.jpg)'
- en: Note
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As long as volumes is defined in the `docker-compose` file, when a local change
    is made, such as a file update, the changes will be automatically synced to the
    files in the container(s).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 只要在`docker-compose`文件中定义了卷，当本地发生更改时（如文件更新），这些更改会自动同步到容器中的文件。
- en: '![Endure Data Using Volumes](img/image02_15.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![使用卷来持久化数据](img/image02_15.jpg)'
- en: Ports
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 端口
- en: 'Django, as other web servers do, runs on specific ports. The Dockerfile used
    to build the Django image has a similar command to this: `EXPOSE 8000`.This port
    remains open when the container is run and is open for connection.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Django与其他Web服务器一样，运行在特定的端口上。用于构建Django镜像的Dockerfile中有一个类似这样的命令：`EXPOSE 8000`。当容器运行时，这个端口会保持开放，并可以连接。
- en: In the Django Dockerfile, we defined our port as `8000` and prefixed the number
    with an address `(0.0.0.0):`
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django的Dockerfile中，我们将端口定义为`8000`，并在数字前加上了地址`(0.0.0.0):`
- en: '![Ports](img/image02_16.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![端口](img/image02_16.jpg)'
- en: The number `0.0.0.0` defines the host address running the container.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 数字`0.0.0.0`定义了运行容器的主机地址。
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The address tells `docker-compose` to run the container on our machine or, in
    short, localhost. If we were to skip the address and just expose the port, our
    set up would have unexpected results like a blank page.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这个地址告诉`docker-compose`在我们的机器上（或者简而言之，本地主机）运行容器。如果我们跳过地址并仅暴露端口，设置可能会导致意外结果，比如空白页面。
- en: 'Consider the following line in the `docker run` options:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考`docker run`选项中的以下行：
- en: '[PRE5]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Ports](img/image02_17.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![端口](img/image02_17.jpg)'
- en: 'And the following lines in the `do‑cker-compose.yml`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在`docker-compose.yml`文件中的以下几行：
- en: '![Ports](img/image02_18.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![端口](img/image02_18.jpg)'
- en: 'The `docker-compose` port format maps the local workstation port to container
    port. The format is as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose`端口格式将本地工作站的端口映射到容器端口。格式如下：'
- en: '[PRE6]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This allows us from our local machine to access the port 8000 which was mapped
    from the container port.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够从本地机器访问映射自容器端口的8000端口。
- en: There's one option at the end, `depends_on`, that is specific to `docker-compose.yml`.
    The `depends_on` specifies the order in which the containers are spun up as soon
    as we run `docker-compose` run.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后有一个选项`depends_on`，这是`docker-compose.yml`特有的。`depends_on`指定了容器启动的顺序，一旦我们运行`docker-compose`命令，它将按照此顺序启动。
- en: 'In our case, the `depends_on` option is under the web service. This means that
    the web service container depends on the `db` service container:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，`depends_on`选项位于Web服务下。这意味着Web服务容器依赖于`db`服务容器：
- en: '![Ports](img/image02_19.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![Ports](img/image02_19.jpg)'
- en: Activity 3 — Running the docker-compose File
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动3 — 运行docker-compose文件
- en: To get you conversant with the `docker-compose` syntax and commands.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让你熟悉`docker-compose`语法和命令。
- en: You have been asked to build and run a simple Python application which exposes
    port 5000 from the image `josephmuli/flask-app`. Define a `docker-compose` file
    and extend the Postgres image as the database. Make sure the database relates
    to the application.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你被要求构建并运行一个简单的Python应用程序，该应用程序从镜像`josephmuli/flask-app`暴露端口5000。定义一个`docker-compose`文件，并将Postgres镜像作为数据库进行扩展。确保数据库与应用程序相关联。
- en: I have prebuilt an image with the name `josephmuli/flask-app`. Extend this image
    in your `docker-compose.yml` file.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我已经预先构建了一个名为`josephmuli/flask-app`的镜像。在你的`docker-compose.yml`文件中扩展这个镜像。
- en: Make sure to write a version 3 `docker-compose` and define the two services.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保编写版本3的`docker-compose`并定义这两个服务。
- en: Run the application on port `5000`.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口`5000`上运行应用程序。
- en: Open your browser and check the listening port.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并检查监听端口。
- en: Networking with docker-compose
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用docker-compose进行网络配置
- en: By default, `docker-compose` sets up a single network for your application(s)
    where each container can reach and discover other containers.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`docker-compose`为你的应用程序设置一个单一网络，在该网络中每个容器都可以访问并发现其他容器。
- en: The network is given a name based on the name of the directory it lives in.
    Thus, if your directory is called `py_docker`, when your run `docker-compose up`,
    the network created is called `py_docker_default`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 网络根据所在目录的名称命名。因此，如果你的目录名为`py_docker`，当你运行`docker-compose up`时，创建的网络名称将是`py_docker_default`。
- en: 'We mentioned ports in the previous topic, when creating the WordPress container.
    To explain networking better, we''ll use the `docker-compose.yml` used to spin
    up a WordPress application:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一部分提到过端口，当创建WordPress容器时。为了更好地解释网络，我们将使用用于启动WordPress应用程序的`docker-compose.yml`：
- en: '![Networking with docker-compose](img/image02_20.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![Networking with docker-compose](img/image02_20.jpg)'
- en: 'In this file, we have two services: `db` and `wordpress`.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们有两个服务：`db`和`wordpress`。
- en: In the WordPress service, we have the `ports` option mapping port `80` to port
    `8000`. No wonder, the WordPress app runs on `0.0.0.0:8000` on our browsers.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在WordPress服务中，我们有`ports`选项将端口`80`映射到端口`8000`。难怪WordPress应用程序在浏览器中运行在`0.0.0.0:8000`上。
- en: 'The ports option is not in the `db` service. However, if you go to the `docker
    hub page for mysql`, you''ll notice that port `3306` is exposed. This is the standard
    port for MySQL. You can obtain more information on MySQL from: [https://hub.docker.com/r/library/mysql](https://hub.docker.com/r/library/mysql).'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`db`服务中没有`ports`选项。然而，如果你访问`docker hub mysql页面`，你会注意到端口`3306`已暴露。这是MySQL的标准端口。你可以从以下链接获取更多关于MySQL的信息：[https://hub.docker.com/r/library/mysql](https://hub.docker.com/r/library/mysql)。'
- en: Note
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We don't have port mapping for DB because we don't necessarily need the port
    mapped to our computer; instead, we want the WordPress app mapped to the DB for
    communication.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有为数据库映射端口，因为我们不一定需要将端口映射到我们的计算机；相反，我们希望将WordPress应用程序映射到数据库，以便进行通信。
- en: 'We don''t have port mapping for `db` because we don''t necessarily need the
    port mapped to our local workstation or computer. We only need it to be exposed
    in the container environment and thus it can be connected from the web service
    as in line 23: `WORDPRESS_DB_HOST: db:3306`.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '我们没有为`db`映射端口，因为我们不一定需要将端口映射到本地工作站或计算机。我们只需要它在容器环境中暴露出来，这样它就可以像第23行中所示那样从Web服务进行连接：`WORDPRESS_DB_HOST:
    db:3306`。'
- en: Note
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In the `docker-compose` file, this is how you connect one container to another:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在`docker-compose`文件中，这就是你如何将一个容器连接到另一个容器：
- en: Note the port exposed by the image(s) you want to connect.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意你想要连接的镜像暴露的端口。
- en: Reference the container under the service that is connecting to it; in our case,
    the `db` service is connected to by the WordPress service.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引用连接到该容器的服务；在我们的例子中，`db`服务由WordPress服务连接。
- en: Since we named the service `db`, we reference this connection as `db:3306`.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们将服务命名为`db`，我们将这个连接称为`db:3306`。
- en: Therefore, the format is `<service>:<port` exposed by that `service>`.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，格式为`<service>:<port`由该`service`暴露>。
- en: Run the WordPress Containers
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行WordPress容器
- en: To give more context on how containers are connected, sync, and communicate.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以便提供更多关于容器如何连接、同步和通信的背景。
- en: 'In the compose file, did you notice the restart option? The available values
    for this option are as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在compose文件中，你注意到重启选项了吗？该选项的可用值如下：
- en: 'no'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否
- en: always
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终
- en: on-failure
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误重启
- en: unless-stopped
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非停止
- en: '![Run the WordPress Containers](img/image02_21.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![运行WordPress容器](img/image02_21.jpg)'
- en: 'If it is not specified, the default is `no`. This means that the container
    will not be restarted under any circumstance. However, the `db` service here has
    been specified as restart: always, so the container always restarts.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '如果没有指定，默认值是`no`。这意味着无论如何容器都不会重新启动。然而，这里的`db`服务已指定为restart: always，所以容器会一直重启。'
- en: 'Let''s look at the Django example and see how networking works out there. This
    is the `docker-c` `ompose.yml`:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Django示例，了解那里网络是如何工作的。这是`docker-c` `ompose.yml`：
- en: '![Run the WordPress Containers](img/image02_22.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![运行WordPress容器](img/image02_22.jpg)'
- en: 'Immediately, you might not see the networking section present in the WordPress
    site. Here''s a snippet:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现，在WordPress站点中并没有立即显示网络部分。这是一个片段：
- en: '[PRE7]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The question here is, how did we know that the name and user is `postgres`,
    the HOST is `db`, and the port is `5432`?
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是，我们是如何知道名称和用户是`postgres`，主机是`db`，端口是`5432`的？
- en: These are the default values set in the `postgres` image and containers we run.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们运行的`postgres`镜像和容器中设置的默认值。
- en: 'For more clarity, you can take a look at this line, in the official Postgres
    Docker library:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清晰，你可以查看官方Postgres Docker库中的这一行：
- en: 'You can obtain a Postgres Docker sample from GitHub at: [https://github.com/docker-library/postgres/blob/master/10/docker-entrypoint.sh#L101.](https://github.com/docker-library/postgres/blob/master/10/docker-entrypoint.sh#L101.)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从GitHub获取Postgres Docker示例： [https://github.com/docker-library/postgres/blob/master/10/docker-entrypoint.sh#L101.](https://github.com/docker-library/postgres/blob/master/10/docker-entrypoint.sh#L101.)
- en: '![Run the WordPress Containers](img/image02_23.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![运行WordPress容器](img/image02_23.jpg)'
- en: As earlier explained, the Host is `DB` because the service name is `db` that
    is created by running the `postgres` image.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，主机是`DB`，因为服务名称是通过运行`postgres`镜像创建的`db`。
- en: 'You can obtain a Postgres Docker example from GitHub at: [https://github.com/docker-library/postgres/blob/master/10/Dockerfile#L132:](https://github.com/docker-library/postgres/blob/master/10/Dockerfile#L132:)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从GitHub获取Postgres Docker示例： [https://github.com/docker-library/postgres/blob/master/10/Dockerfile#L132:](https://github.com/docker-library/postgres/blob/master/10/Dockerfile#L132:)
- en: '![Run the WordPress Containers](img/image02_24.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![运行WordPress容器](img/image02_24.jpg)'
- en: Indirectly, it proves why the `settings.py` was configured in that manner.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 间接地，它证明了为什么`settings.py`是按那种方式配置的。
- en: Summary
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this lesson, we have done the following:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们做了以下事情：
- en: Discussed and displayed a multi-container setup
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论并展示了多容器设置
- en: Walked through `docker-compose` commands to build and run multiple containers
    in a parallel manner
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讲解了`docker-compose`命令，以并行方式构建和运行多个容器
- en: Gained a high-level understanding of networking containers and how data is persisted
    in a container from local machines
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得了关于网络容器的高级理解，以及如何将数据从本地机器持久化到容器中
- en: Built and run applications without even setting them up, via Docker Hub
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Docker Hub构建并运行应用程序，甚至不需要设置它们。
