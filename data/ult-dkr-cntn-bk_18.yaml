- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Running a Containerized Application in the Cloud
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云中运行容器化应用程序。
- en: In the previous chapter, we learned how to deploy, update, and scale applications
    into a Kubernetes cluster. We discovered how zero-downtime deployments are achieved
    to enable disruption-free updates and rollbacks of mission-critical applications.
    Finally, we were introduced to Kubernetes secrets as a means to configure services
    and protect sensitive data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何将应用程序部署、更新和扩展到 Kubernetes 集群中。我们了解了如何实现零停机部署，以实现不中断的更新和回滚关键应用程序。最后，我们介绍了
    Kubernetes 机密作为配置服务和保护敏感数据的手段。
- en: In this chapter, we will give an overview of the three most popular ways of
    running containerized applications in the cloud. We will explore each of the hosted
    solutions and discuss their pros and cons.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述在云中运行容器化应用程序的三种最流行的方式。我们将探讨每种托管解决方案，并讨论它们的优缺点。
- en: 'Here are the topics we will be discussing in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章中我们将讨论的主题：
- en: Why choose a hosted Kubernetes service?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择托管 Kubernetes 服务？
- en: Running a simple containerized application on **Amazon Elastic Kubernetes Service**
    (**Amazon EKS**)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **Amazon Elastic Kubernetes Service** (**Amazon EKS**) 上运行一个简单的容器化应用程序。
- en: Exploring Microsoft’s **Azure Kubernetes** **Service** (**AKS**)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Microsoft 的 **Azure Kubernetes Service** (**AKS**)。
- en: Understanding **Google Kubernetes** **Engine** (**GKE**)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 **Google Kubernetes Engine** (**GKE**)。
- en: 'After reading this chapter, you will be able to do the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您将能够执行以下操作：
- en: Reason about the pros and potential cons of a hosted Kubernetes service compared
    to a self-managed Kubernetes cluster
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析托管 Kubernetes 服务与自管理 Kubernetes 集群相比的优缺点。
- en: Deploy and run a simple distributed application in Amazon EKS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Amazon EKS 中部署并运行一个简单的分布式应用程序。
- en: Deploy and run a simple distributed application on Microsoft’s AKS
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署并在 Microsoft 的 **AKS** 上运行一个简单的分布式应用程序。
- en: Deploy and run a simple distributed application on GKE
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 GKE 上部署并运行一个简单的分布式应用程序。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We are going to use **Amazon Web Services** (**AWS**), Microsoft Azure, and
    Google Cloud in this chapter; therefore, it is necessary to have an account for
    each platform. If you do not have an existing account, you can ask for a trial
    account for all of these cloud providers.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章节中使用 **亚马逊网络服务** (**AWS**)，Microsoft Azure 和 Google Cloud；因此，每个平台都需要有一个账户。如果您没有现有账户，可以申请这些云服务提供商的试用账户。
- en: We’ll also use the files in the `~/The-Ultimate-Docker-Container-Book/sample-solutions/ch18`
    folder of our lab’s repository from GitHub at [https://github.com/PacktPublishing/The-Ultimate-Docker-Container-Book/tree/main/sample-solutions/ch18](https://github.com/PacktPublishing/The-Ultimate-Docker-Container-Book/tree/main/sample-solutions/ch18).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用我们实验室在 GitHub 存储库的 `~/The-Ultimate-Docker-Container-Book/sample-solutions/ch18`
    文件夹中的文件，网址为 [https://github.com/PacktPublishing/The-Ultimate-Docker-Container-Book/tree/main/sample-solutions/ch18](https://github.com/PacktPublishing/The-Ultimate-Docker-Container-Book/tree/main/sample-solutions/ch18)。
- en: 'Prepare the folder where you will put your own code. For this, first, navigate
    to the source folder, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 准备放置您自己代码的文件夹。首先，导航至源文件夹，如下所示：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, create a `ch18` subfolder and navigate to it, like so:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个 `ch18` 子文件夹并导航至该文件夹，如下所示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Why choose a hosted Kubernetes service?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择托管 Kubernetes 服务？
- en: 'Currently, the three most popular cloud providers, AWS, Microsoft Azure, and
    Google Cloud each have a managed Kubernetes offering, as outlined here:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，AWS、Microsoft Azure 和 Google Cloud 是最受欢迎的三大云服务提供商，每个都提供了托管 Kubernetes 服务，如下所述：
- en: '**Amazon EKS**: Amazon EKS is a managed service that makes it easy for you
    to run Kubernetes on AWS without needing to install, operate, and maintain your
    own Kubernetes control plane or nodes.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon EKS**：Amazon EKS 是一个托管服务，使您能够在 AWS 上运行 Kubernetes，无需安装、操作和维护自己的 Kubernetes
    控制平面或节点。'
- en: '**AKS**: AKS is Microsoft’s managed Kubernetes offering. It offers developer
    productivity with **continuous integration and continuous deployment** (**CI/CD**)
    capabilities and Kubernetes tools integration. It also has an Azure DevOps project
    for a complete container CI/CD platform.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AKS**：AKS 是 Microsoft 的托管 Kubernetes 服务。它提供了与 **持续集成和持续部署** (**CI/CD**) 能力以及
    Kubernetes 工具集成的开发人员生产力。它还具有完整的容器 CI/CD 平台的 Azure DevOps 项目。'
- en: '**GKE**: Google was the original creator of Kubernetes, and GKE was the first
    managed Kubernetes service available on the market. It offers advanced cluster
    management features, as well as integration with Google Cloud services.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GKE**：Google 是 Kubernetes 的原始创造者，GKE 是市场上第一个可用的托管 Kubernetes 服务。它提供了先进的集群管理功能，并与
    Google Cloud 服务集成。'
- en: Other providers also offer **Kubernetes as a service** (**KaaS**), such as IBM
    Cloud Kubernetes Service, Oracle Container Engine for Kubernetes, and **DigitalOcean
    Kubernetes** (**DOKS**). It’s always a good idea to check the latest offerings
    and their features since the cloud market evolves rapidly.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其他提供商也提供 **Kubernetes 即服务**（**KaaS**），例如 IBM Cloud Kubernetes 服务、Oracle Kubernetes
    容器引擎和 **DigitalOcean Kubernetes**（**DOKS**）。鉴于云市场发展迅速，查看最新的产品和功能始终是一个好主意。
- en: 'Managing a Kubernetes cluster, either on-premises or in the cloud, involves
    considerable operational complexity and requires expertise. Here are a few reasons
    why using a hosted Kubernetes service is often the preferred solution:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 管理一个 Kubernetes 集群，无论是在本地还是在云中，都涉及相当复杂的操作工作，并且需要专业知识。以下是使用托管 Kubernetes 服务通常是首选解决方案的一些原因：
- en: '**Ease of setup and management**: Hosted Kubernetes services handle the underlying
    infrastructure, reducing the operational burden of managing a Kubernetes cluster.
    They automatically take care of the provisioning, upgrades, patching, and scaling
    of the Kubernetes control plane.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置和管理的简易性**：托管 Kubernetes 服务处理底层基础设施，减少了管理 Kubernetes 集群的操作负担。它们会自动处理 Kubernetes
    控制平面的供应、升级、补丁和扩展。'
- en: '**High availability (HA) and high scalability**: Hosted services often offer
    out-of-the-box HA and high scalability for your applications. They handle the
    orchestration necessary to distribute applications across different nodes and
    data centers.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性（HA）和高可扩展性**：托管服务通常为你的应用提供开箱即用的高可用性和高可扩展性。它们处理必要的协调工作，以将应用分布到不同的节点和数据中心。'
- en: '**Security and compliance**: Hosted services often include built-in security
    features such as network policies, **role-based access control** (**RBAC**), and
    integration with cloud provider **Identity & Access Management** (**IAM**) services.
    They also handle security updates to the Kubernetes software itself.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全与合规性**：托管服务通常包括内置的安全功能，如网络策略、**基于角色的访问控制**（**RBAC**）和与云提供商 **身份与访问管理**（**IAM**）服务的集成。它们还负责
    Kubernetes 软件本身的安全更新。'
- en: '**Monitoring and diagnostics**: Hosted Kubernetes services typically include
    integration with monitoring and logging services, making it easier to observe
    and troubleshoot your applications.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控与诊断**：托管的 Kubernetes 服务通常包括与监控和日志服务的集成，使得观察和排除应用程序故障变得更加容易。'
- en: '**Cost**: While there is a cost associated with using a managed service, it
    can often be less than the cost of the dedicated personnel and infrastructure
    required to operate a Kubernetes cluster efficiently and securely.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本**：虽然使用托管服务会产生一定的费用，但其成本通常低于为高效、安全地运营一个 Kubernetes 集群所需的专职人员和基础设施成本。'
- en: '**Support**: When using a hosted Kubernetes service, you’ll have access to
    support from the cloud provider. This can be particularly valuable if you’re running
    production workloads and need fast resolution of any issues that arise.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持**：使用托管 Kubernetes 服务时，你将能够获得云服务提供商的支持。如果你在运行生产工作负载并需要快速解决任何问题，这尤其有价值。'
- en: In contrast, running your own Kubernetes clusters involves significant setup
    and maintenance work. You’re responsible for everything, from the installation
    and configuration of Kubernetes to the ongoing tasks of cluster upgrades, security
    patching, node provisioning, and scaling, as well as setting up monitoring and
    alerting.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，运行你自己的 Kubernetes 集群涉及大量的设置和维护工作。从 Kubernetes 的安装和配置，到集群升级、安全补丁、节点供应和扩展的持续任务，再到设置监控和告警，你都需要负责。
- en: While managing your own clusters provides more control and flexibility, it requires
    a substantial investment in time, resources, and expertise. For many organizations,
    the benefits of a managed service far outweigh the increased control of self-managing
    their clusters.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 管理自己的集群虽然提供了更多的控制和灵活性，但需要大量的时间、资源和专业知识投入。对于许多组织来说，托管服务的好处远远超过了自主管理集群所带来的控制力提升。
- en: "Running a simple containerized application on \LAmazon EKS"
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Amazon EKS 上运行一个简单的容器化应用程序
- en: In this section, we want to create a fully managed Kubernetes cluster on Amazon
    EKS using Fargate. The process of creating a new cluster is well described in
    the AWS documentation, and we will refer to the respective pages to not duplicate
    too much information. That said, let us start with the following steps.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们希望在 Amazon EKS 上使用 Fargate 创建一个完全托管的 Kubernetes 集群。创建新集群的过程在 AWS 文档中有详细描述，我们将参考相关页面，以避免重复过多信息。话虽如此，让我们从以下步骤开始。
- en: What is Fargate?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 Fargate？
- en: AWS Fargate is a serverless compute engine for containers provided by AWS. It
    removes the need to manage the underlying servers and allows you to focus on designing
    and building your applications. Fargate handles the deployment, scaling, and management
    of containers, enabling you to launch applications without worrying about the
    infrastructure.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Fargate 是由 AWS 提供的无服务器计算引擎，用于容器。它消除了管理底层服务器的需要，让你可以专注于设计和构建应用程序。Fargate
    处理容器的部署、扩展和管理，使你可以在无需担心基础设施的情况下启动应用程序。
- en: 'Let us first get a few prerequisites out of the way, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先处理一些前提条件，如下所示：
- en: 'Make sure you have access to an AWS account. If not, you can get a free 1-year
    trial account here: [https://aws.amazon.com/free](https://aws.amazon.com/free).'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你可以访问一个 AWS 账户。如果没有，你可以在这里获得一个免费的 1 年试用账户：[https://aws.amazon.com/free](https://aws.amazon.com/free)。
- en: Log in to your AWS account.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的 AWS 账户。
- en: Create a new *access key* and *access key secret* pair for your account, which
    you will use to configure your AWS CLI so that you can access your account from
    the command line.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的账户创建一对新的*访问密钥*和*访问密钥秘密*，你将用它们来配置你的 AWS CLI，从而可以通过命令行访问你的账户。
- en: Locate your profile at the top right of the screen, and from the dropdown, select
    **Security credentials**.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕右上角找到你的个人资料，从下拉菜单中选择**安全凭证**。
- en: 'Select **Access keys** (access key ID and secret access key) and then click
    **Create** **access key**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**访问密钥**（访问密钥 ID 和秘密访问密钥），然后点击**创建** **访问密钥**：
- en: '![Figure 18.1 – Note down the access key ID and secret pair in a safe place](img/Figure_18.01_B19199.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.1 – 将访问密钥 ID 和秘密配对记录在安全位置](img/Figure_18.01_B19199.jpg)'
- en: Figure 18.1 – Note down the access key ID and secret pair in a safe place
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.1 – 将访问密钥 ID 和秘密配对记录在安全位置
- en: Open a new terminal.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端。
- en: Make sure you have the AWS CLI installed.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已安装 AWS CLI。
- en: 'On a Mac, use the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 上，使用以下命令：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On Windows, use this command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，使用以下命令：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In both cases, test the installation with the following command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两种情况下，都可以使用以下命令来测试安装是否成功：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Configure your AWS CLI. For this, you need your *AWS access key ID* and *AWS
    secret access key* that you created in preceding *step 3*, as well as your default
    *region*.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置你的 AWS CLI。为此，你需要你在前面*步骤 3*中创建的*AWS 访问密钥 ID*和*AWS 秘密访问密钥*，以及你的默认*区域*。
- en: 'Then, use the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Enter the appropriate values when asked. For the default output format, select
    `JSON`, as shown here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在被询问时输入适当的值。对于默认输出格式，选择 `JSON`，如下所示：
- en: '![Figure 18.2 – Configuring the AWS CLI](img/Figure_18.02_B19199.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.2 – 配置 AWS CLI](img/Figure_18.02_B19199.jpg)'
- en: Figure 18.2 – Configuring the AWS CLI
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.2 – 配置 AWS CLI
- en: 'Try accessing your account with a command such as the following:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用如下命令访问你的账户：
- en: '[PRE6]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This should list all the **Simple Storage Service** (**S3**) buckets defined
    for your account. Your list may be empty. The important thing here is that the
    command succeeds.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该列出为你的账户定义的所有**简单存储服务**（**S3**）存储桶。你的列表可能为空。这里需要注意的是，命令成功执行即可。
- en: 'Finally, double-check that you have `kubectl` installed by running the following
    command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行以下命令来再次检查是否已安装 `kubectl`：
- en: '[PRE7]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we are ready to create the Amazon EKS cluster. Follow these steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好创建 Amazon EKS 集群。按照以下步骤操作：
- en: 'Define a few environment variables for later use, as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义几个环境变量，以便后续使用，如下所示：
- en: '[PRE8]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Make sure to replace `eu-central-1` with the AWS region closest to you.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将 `eu-central-1` 替换为离你最近的 AWS 区域。
- en: 'You can now create the necessary AWS stack consisting of VPC, private and public
    subnets, and a security group, using the following command, which—to simplify
    things—uses a sample YAML file from AWS:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以使用以下命令创建所需的 AWS 堆栈，其中包括 VPC、私有和公共子网以及安全组—为了简化操作，使用 AWS 提供的一个示例 YAML 文件：
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Please take a moment to download and inspect the preceding YAML file to understand
    what exactly the command is provisioning.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请花点时间下载并查看前面的 YAML 文件，以了解该命令具体在配置什么内容。
- en: 'In the next few steps, you need to define the right settings to grant the necessary
    access rights to the cluster:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接下来的几个步骤中，您需要定义正确的设置，以授予集群所需的访问权限：
- en: 'Start by creating an IAM role with this command:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先使用以下命令创建一个IAM角色：
- en: '[PRE10]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Proceed by attaching the necessary Amazon EKS-managed IAM policy to the role
    just created with this command:'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续通过此命令将必要的Amazon EKS管理的IAM策略附加到刚刚创建的角色：
- en: '[PRE11]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, we continue with some interactive steps using the Amazon EKS console at
    [https://console.aws.amazon.com/eks/home#/clusters](https://console.aws.amazon.com/eks/home#/clusters).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们继续进行一些交互步骤，使用Amazon EKS控制台：[https://console.aws.amazon.com/eks/home#/clusters](https://console.aws.amazon.com/eks/home#/clusters)。
- en: Note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that the AWS Region shown in the upper right of your console is the
    AWS Region in which you want to create your cluster in (for example, `eu-central-1)`
    in the author’s case). If it’s not, select the dropdown next to the AWS Region
    name and choose the AWS Region that you want to use.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 确保控制台右上角显示的AWS区域是您要创建集群的AWS区域（例如，在作者的案例中是`eu-central-1`）。如果不是，请选择AWS区域名称旁边的下拉菜单并选择您要使用的AWS区域。
- en: To create your cluster, choose the **Add cluster** command and then choose **Create**.
    If you don’t see this option, choose **Clusters** in the left navigation pane
    first.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要创建集群，请选择**添加集群**命令，然后选择**创建**。如果您没有看到此选项，请首先在左侧导航窗格中选择**集群**。
- en: On the `animals-cluster`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`animals-cluster`上。
- en: '`animals-cluster-role`. Please select it.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`animals-cluster-role`。
- en: All the other settings can be left as their default values.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有其他设置可以保持为默认值。
- en: Choose **Next**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**下一步**。
- en: On the `vpc-00x0000x000x0x000 | animals-stack-VPC`. Note the postfix of the
    name, indicating it is the one we defined just a moment ago.*   Once again, you
    can leave the remaining settings at their default values.*   Choose **Next** to
    continue.*   We do not need to change anything on the **Configure logging** page,
    so choose **Next**.*   The same applies for the **Select add-ons** page; thus,
    choose **Next**.*   And once again, on the **Configure selected add-ons** settings
    page, there is nothing to do, so choose **Next**.*   Finally, on the **Review
    and create** page, choose **Create**.*   To the right of the cluster’s name, the
    cluster status is **Creating** for several minutes until the cluster provisioning
    process completes, as shown in the following screenshot. Don’t continue to the
    next step until the status is **Active**:![Figure 18.3 – Creating an EKS cluster](img/Figure_18.03_B19199.jpg)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`vpc-00x0000x000x0x000 | animals-stack-VPC`上。注意名称的后缀，表示它是我们刚刚定义的那个。*同样，您可以保持其他设置为默认值。*选择**下一步**继续。*我们无需更改**配置日志记录**页面上的任何内容，因此请选择**下一步**。*同样的情况适用于**选择插件**页面，因此选择**下一步**。*再一次，在**配置已选择的插件**设置页面上，无需做任何操作，因此请选择**下一步**。*最后，在**审查并创建**页面，选择**创建**。*在集群名称的右侧，集群状态为**创建中**，持续几分钟，直到集群配置过程完成，如下图所示。在状态变为**活动**之前，请勿继续进行下一步：![图18.3
    – 创建EKS集群](img/Figure_18.03_B19199.jpg)
- en: Figure 18.3 – Creating an EKS cluster
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3 – 创建EKS集群
- en: 'Sadly, we are not done yet. We need to create a trust policy and attach it
    to our cluster. To do this, proceed as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不幸的是，我们还没有完成。我们需要创建一个信任策略并将其附加到我们的集群。为此，按照以下步骤操作：
- en: 'Start by creating a `pod-execution-role-trust-policy.json` file and add the
    following content to it:'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建一个`pod-execution-role-trust-policy.json`文件，并将以下内容添加到其中：
- en: '[PRE12]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, replace `<region-code>` with the code for your AWS region
    (`eu-central-1` in my case) and `<account-no>` with the number of your account.
    You can find the latter under your profile in the upper left of the AWS console.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，将`<region-code>`替换为您的AWS区域代码（在我的案例中是`eu-central-1`），将`<account-no>`替换为您的账户号码。您可以在AWS控制台左上角的个人资料中找到后者。
- en: 'Using the trust policy just provisioned, create a **Pod execution IAM role**
    with this command:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用刚刚配置的信任策略，使用以下命令创建一个**Pod执行IAM角色**：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, connect the required role and policy with each other using this command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下命令将所需的角色和策略连接在一起：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: On the `animals-cluster` cluster.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`animals-cluster`集群上。
- en: 'On the `animals-cluster` page, do the following:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`animals-cluster`页面上，执行以下操作：
- en: Select the `animals-profile`.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`animals-profile`。
- en: For `AmazonEKSFargatePodExecutionRole` role that you created in a previous step.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于在前一步创建的`AmazonEKSFargatePodExecutionRole`角色。
- en: Choose the **Subnets** dropdown and deselect any subnet with **Public** in its
    name. Only private subnets are supported for Pods that are running on Fargate.
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**子网**下拉框，并取消选择名称中包含**Public**的任何子网。仅支持在Fargate上运行的Pods使用私有子网。
- en: Choose **Next**.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**下一步**。
- en: On the `default`.*   Then choose **Next**.*   On the **Review and create page**,
    review the information for your Fargate profile and choose **Create**.*   After
    a few minutes, the status in the **Fargate Profile configuration** section will
    change from **Creating** to **Active**. Don’t continue to the next step until
    the status is **Active**.*   If you plan to deploy all Pods to Fargate (none to
    Amazon EC2 nodes), do the following to create another Fargate profile and run
    the default name resolver (CoreDNS) on Fargate.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`default`下。* 然后选择**下一步**。* 在**审查并创建页面**，审查你的Fargate配置文件的信息，并选择**创建**。* 几分钟后，**Fargate配置文件配置**部分的状态将从**创建中**变为**活动**。在状态变为**活动**之前，不要继续执行下一步。*
    如果你计划将所有Pods部署到Fargate（不使用Amazon EC2节点），请按以下步骤创建另一个Fargate配置文件并在Fargate上运行默认的名称解析器（CoreDNS）。
- en: Note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you don’t do this, you won’t have any nodes at this time.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不这样做，目前将不会有任何节点。
- en: On the `animals-profile`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`animals-profile`下。
- en: Under **Fargate profiles**, choose **Add** **Fargate Profile**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Fargate配置文件**下，选择**添加** **Fargate配置文件**。
- en: In the **Name** field, enter **CoreDNS**.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中输入**CoreDNS**。
- en: For `AmazonEKSFargatePodExecutionRole` role that you created in *step 13*.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于你在*步骤13*中创建的`AmazonEKSFargatePodExecutionRole`角色。
- en: Click the `Public` in its name. Fargate only supports Pods on private subnets.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击其名称中的`Public`。Fargate仅支持私有子网中的Pods。
- en: Choose **Next**.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**下一步**。
- en: In the `kube-system`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`kube-system`下。
- en: Choose **Match labels**, and then choose **Add label**.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**匹配标签**，然后选择**添加标签**。
- en: Enter `k8s-app` for `kube-dns` for **Value**. This is necessary for the default
    name resolver (CoreDNS) to deploy to Fargate.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**值**字段中输入`k8s-app`作为`kube-dns`。这是必要的，以便将默认的名称解析器（CoreDNS）部署到Fargate。
- en: Choose **Next**.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**下一步**。
- en: On the **Review and create** page, review the information for your Fargate profile
    and choose **Create**.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**审查并创建**页面，审查Fargate配置文件的信息并选择**创建**。
- en: 'Run the following command to remove the default `eks.amazonaws.com/compute-type
    : ec2` annotation from the CoreDNS Pods:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '运行以下命令，删除CoreDNS Pods上的默认`eks.amazonaws.com/compute-type : ec2`注解：'
- en: '[PRE15]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The system creates and deploys two nodes based on the Fargate profile label
    you added. You won’t see anything listed in **Node groups** because they aren’t
    applicable to Fargate nodes, but you will see the new nodes listed in the **Compute**
    tab.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会根据你添加的Fargate配置文件标签创建并部署两个节点。你不会在**节点组**中看到任何列出的内容，因为Fargate节点不适用，但你将在**计算**标签中看到新的节点。
- en: 'For a more detailed explanation, you can follow the step-by-step instructions
    at the following link to create your cluster:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 若需更详细的解释，可以按照以下链接中的逐步指南来创建集群：
- en: '[https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.xhtml)
    (*Getting started with Amazon EKS – AWS Management Console and* *AWS CLI*)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.xhtml)
    (*开始使用Amazon EKS – AWS管理控制台和* *AWS CLI*)'
- en: 'When your cluster is ready, you can then continue with the following steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的集群准备好后，可以继续执行以下步骤：
- en: 'Configure `kubectl` to access your new cluster on AWS, as follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`kubectl`以访问AWS上的新集群，如下所示：
- en: '[PRE16]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The response should be similar to the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 响应应类似于以下内容：
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, `<user-name>` corresponds to your username on the machine you’re working
    on.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`<user-name>`对应于你正在使用的机器上的用户名。
- en: 'Double-check that `kubectl` is using the correct context—the one that was just
    created for the cluster on AWS and added to your `~/.``kube/config` file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双重检查`kubectl`是否使用了正确的上下文——即刚为AWS上的集群创建并添加到你的`~/.kube/config`文件中的上下文：
- en: '[PRE18]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The answer should look similar to the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 答案应类似于以下内容：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In case another context is the active one, use the `kubectl config use-context`
    command in combination with the correct AWS context.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果另一个上下文是活动状态，请使用`kubectl config use-context`命令，并结合正确的AWS上下文。
- en: 'Use `kubectl` to list all the resources on your cluster, like so:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl`列出集群上的所有资源，像这样：
- en: '[PRE20]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The answer at this time should look like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此时的答案应如下所示：
- en: '![Figure 18.4 – Amazon EKS – kubectl get all](img/Figure_18.04_B19199.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图18.4 – Amazon EKS – kubectl get all](img/Figure_18.04_B19199.jpg)'
- en: Figure 18.4 – Amazon EKS – kubectl get all
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.4 – Amazon EKS – kubectl get all
- en: 'To see the nodes of your cluster, use the following command:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看集群的节点，请使用以下命令：
- en: '[PRE21]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should then see something like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你应该看到类似以下的内容：
- en: '![Figure 18.5 – List of nodes in the EKS cluster](img/Figure_18.05_B19199.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图18.5 – EKS集群中节点的列表](img/Figure_18.05_B19199.jpg)'
- en: Figure 18.5 – List of nodes in the EKS cluster
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.5 – EKS集群中节点的列表
- en: 'Navigate to the `ch18` folder of this chapter, create an `aws-eks` subfolder,
    and then navigate to it:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到本章的`ch18`文件夹，创建一个`aws-eks`子文件夹，然后进入该文件夹：
- en: '[PRE22]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In this subfolder, create a `deploy-nginx.yaml` file with the following content:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此子文件夹中，创建一个名为`deploy-nginx.yaml`的文件，内容如下：
- en: '![Figure 18.6 – Deployment specification for nginx on Amazon EKS](img/Figure_18.06_B19199.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图18.6 – 在Amazon EKS上部署nginx的规范](img/Figure_18.06_B19199.jpg)'
- en: Figure 18.6 – Deployment specification for nginx on Amazon EKS
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.6 – 在Amazon EKS上部署nginx的规范
- en: 'Use `kubectl` to deploy our deployment to the cluster, as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl`将我们的部署部署到集群，如下所示：
- en: '[PRE23]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Observe the creation of the Pods with the following command:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令观察Pod的创建过程：
- en: '[PRE24]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And wait until they are ready:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然后等待它们准备就绪：
- en: '![Figure 18.7 – Listing the Pods of the deployment to AWS](img/Figure_18.07_B19199.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图18.7 – 列出部署到AWS的Pods](img/Figure_18.07_B19199.jpg)'
- en: Figure 18.7 – Listing the Pods of the deployment to AWS
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.7 – 列出部署到AWS的Pods
- en: Wait until their value in the `1/1`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待它们在`1/1`的值。
- en: In the AWS console, navigate to your cluster.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS控制台中，导航到你的集群。
- en: In the `web` Pods and two `coredns` Pods were created.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`web` Pods和两个`coredns` Pods已创建。
- en: In the **Compute** tab, observe that multiple Fargate nodes have been created.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**计算**选项卡中，观察到已创建多个Fargate节点。
- en: Drill down to a node to see the Pod that has been deployed to it.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 深入到节点以查看已部署到其上的Pod。
- en: Drill further down to the Pod and observe the list of events shown in its **Details**
    view.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进一步深入到Pod，并观察其**详细信息**视图中显示的事件列表。
- en: Congratulations—you have created a fully hosted Kubernetes cluster on AWS and
    created a first Deployment on it using `kubectl`! As you will know, this is quite
    an achievement. It turns out that of all the discussed cloud providers, AWS requires
    by far the most steps to get a Kubernetes cluster up and running.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你——你已在AWS上创建了一个完全托管的Kubernetes集群，并使用`kubectl`在其上创建了第一个部署！正如你所知，这是一项相当了不起的成就。结果表明，在讨论的所有云提供商中，AWS需要远远比其他更多的步骤才能运行一个Kubernetes集群。
- en: 'Before you leave, and to avoid unexpected costs, make sure you clean up all
    the resources that you have created during this exercise. For this, follow the
    next steps:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在离开之前，并为了避免意外费用，请确保清理掉在此练习期间创建的所有资源。为此，请按照以下步骤操作：
- en: 'Use `kubectl` to delete the previous deployment:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl`删除先前的部署：
- en: '[PRE25]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Locate your `animals-cluster` cluster and select it.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位你的`animals-cluster`集群并选择它。
- en: In the `animals-profile` and `CoreDNS` profiles and delete them.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`animals-profile`和`CoreDNS`配置文件中删除它们。
- en: When both profiles are deleted—which may take a few minutes—then click the **Delete
    cluster** button to get rid of the cluster.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当删除这两个配置文件时（可能需要几分钟），然后点击**删除集群**按钮以摆脱该集群。
- en: Delete the VPC AWS CloudFormation stack that you created.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除你创建的VPC AWS CloudFormation堆栈。
- en: Open the **AWS CloudFormation** console at [https://console.aws.amazon.com/cloudformation](https://console.aws.amazon.com/cloudformation).
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**AWS CloudFormation**控制台，网址为[https://console.aws.amazon.com/cloudformation](https://console.aws.amazon.com/cloudformation)。
- en: Choose the `animals-stack` stack, and then choose **Delete**.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`animals-stack`堆栈，然后选择**删除**。
- en: In the **Delete animals-stack** confirmation dialog box, choose **Delete stack**.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**删除animals-stack**确认对话框中，选择**删除堆栈**。
- en: Delete the IAM roles that you created.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除你创建的IAM角色。
- en: Open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IAM控制台，网址为[https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/)。
- en: In the left navigation pane, choose **Roles**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航窗格中，选择**角色**。
- en: Select each role you created from the list (`myAmazonEKSClusterRole`, as well
    as `AmazonEKSFargatePodExecutionRole` or `myAmazonEKSNodeRole`). Choose **Delete**,
    enter the requested confirmation text, then choose **Delete**.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择你创建的每个角色（`myAmazonEKSClusterRole`，以及`AmazonEKSFargatePodExecutionRole`或`myAmazonEKSNodeRole`）。选择**删除**，输入请求的确认文本，然后选择**删除**。
- en: 'Alternatively, follow the steps in the *Step 5: Delete resources* section in
    the AWS documentation:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，按照AWS文档中*第5步：删除资源*部分的步骤执行：
- en: '[https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.xhtml)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.xhtml)'
- en: This was quite an achievement! Creating and managing an EKS cluster requires
    more intimate knowledge of details than we would want. We will see that other
    providers are more user-friendly in that regard.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一次相当了不起的成就！创建和管理一个 EKS 集群需要比我们预期更多的细节知识。我们将看到，其他提供商在这方面更加用户友好。
- en: Now that we have a rough understanding of what Amazon EKS offers, let us have
    a look at what the second-biggest cloud provider has in its portfolio.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们大致了解了 Amazon EKS 的功能，接下来让我们看看全球第二大云服务提供商的产品组合。
- en: Exploring Microsoft’s AKS
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索微软的 AKS
- en: 'To experiment with Microsoft’s container-related offerings in Azure, we need
    an account on Azure. You can create a trial account or use an existing account.
    You can get a free trial account here: [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/).'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Azure 中实验微软的容器相关服务，我们需要一个 Azure 账户。你可以创建一个试用账户或使用现有账户。你可以在这里获得免费试用账户：[https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)。
- en: Microsoft offers different container-related services on Azure. The easiest
    one to use is probably Azure Container Instances, which promises the fastest and
    simplest way to run a container in Azure, without having to provision any **virtual
    machines** (**VMs**) and without having to adopt a higher-level service. This
    service is only really useful if you want to run a single container in a hosted
    environment. The setup is quite easy. In the Azure portal ([https://portal.azure.com](https://portal.azure.com)),
    you first create a new resource group and then create an Azure container instance.
    You only need to fill out a short form with properties such as the name of the
    container, the image to use, and the port to open. The container can be made available
    on a public or private IP address and will be automatically restarted if it crashes.
    There is a decent management console available, for example, to monitor resource
    consumption such as CPU and memory.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在 Azure 上提供了不同的容器相关服务。最易使用的可能是 Azure 容器实例，它承诺是运行容器的最快和最简单方式，无需配置任何**虚拟机**（**VMs**），也不需要采用更高级的服务。如果你只想在托管环境中运行单个容器，这项服务非常有用。设置非常简单。在
    Azure 门户（[https://portal.azure.com](https://portal.azure.com)）中，你首先创建一个新的资源组，然后创建一个
    Azure 容器实例。你只需要填写一个简短的表格，填写容器名称、使用的镜像和要打开的端口等属性。容器可以通过公共或私有 IP 地址提供，并且如果容器崩溃，它会自动重启。这里有一个不错的管理控制台，例如用于监控资源消耗，如
    CPU 和内存。
- en: 'The second choice is **Azure Container Service** (**ACS**), which provides
    a way to simplify the creation, configuration, and management of a cluster of
    VMs that is preconfigured to run containerized applications. ACS uses Docker images
    and provides a choice between three orchestrators: Kubernetes, Docker Swarm, and
    the **Distributed Cloud Operating System** (**DC/OS**) (powered by Apache Mesos).
    Microsoft claims that its service can be scaled to tens of thousands of containers.
    ACS is free, and you are only charged for computing resources.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选择是**Azure 容器服务**（**ACS**），它提供了一种简化集群虚拟机创建、配置和管理的方式，这些虚拟机经过预配置可运行容器化应用。ACS
    使用 Docker 镜像，并提供三种编排工具的选择：Kubernetes、Docker Swarm 和**分布式云操作系统**（**DC/OS**）（由 Apache
    Mesos 提供支持）。微软声称其服务能够扩展到数万个容器。ACS 是免费的，只有计算资源会收费。
- en: 'In this section, we will concentrate on the most popular offering, based on
    Kubernetes. It is called AKS and can be found here: [https://azure.microsoft.com/en-us/services/kubernetes-service/](https://azure.microsoft.com/en-us/services/kubernetes-service/).
    AKS makes it easy for you to deploy applications in the cloud and run them on
    Kubernetes. All the difficult and tedious management tasks are handled by Microsoft,
    and you can concentrate fully on your applications. What that means is that you
    will never have to deal with tasks such as installing and managing Kubernetes,
    upgrading Kubernetes, or upgrading the operating system of the underlying Kubernetes
    nodes. All this is handled by the experts at Microsoft Azure. Furthermore, you
    will never have to deal with `etc` or Kubernetes master nodes. This is all hidden
    from you, and the only things you will interact with are the Kubernetes worker
    nodes that run your applications.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将重点讨论基于 Kubernetes 的最流行的产品。它叫做 AKS，可以在这里找到：[https://azure.microsoft.com/en-us/services/kubernetes-service/](https://azure.microsoft.com/en-us/services/kubernetes-service/)。AKS
    使你可以轻松地在云中部署应用并在 Kubernetes 上运行它们。所有复杂和繁琐的管理任务都由微软处理，你可以完全专注于你的应用程序。这意味着你永远不必处理安装和管理
    Kubernetes、升级 Kubernetes 或升级底层 Kubernetes 节点操作系统等任务。这些都由 Microsoft Azure 的专家处理。此外，你永远不必处理
    `etc` 或 Kubernetes 主节点。这些都被隐藏起来，你唯一需要交互的是运行你应用的 Kubernetes 工作节点。
- en: Preparing the Azure CLI
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备 Azure CLI
- en: That said, let’s start. We assume that you have created a free trial account
    or that you are using an existing account on Azure. There are various ways to
    interact with your Azure account. We will use the Azure CLI running on our local
    computer. We can either download and install the Azure CLI natively on our computer
    or run it from within a container running on our local version of Docker Desktop.
    Since this book is all about containers, let’s select the latter approach.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们开始。我们假设你已经创建了一个免费试用账户，或者正在使用 Azure 上的现有账户。有多种方式可以与 Azure 账户进行交互。我们将使用在本地计算机上运行的
    Azure CLI。我们可以将 Azure CLI 下载并安装到本地计算机，或者在本地 Docker Desktop 上的容器内运行它。由于本书的主题是容器，我们选择后者。
- en: 'The latest version of the Azure CLI can be found on Docker Hub. Let’s pull
    it:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的 Azure CLI 可以在 Docker Hub 上找到。让我们拉取它：
- en: '[PRE26]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will run a container from this CLI and executing all subsequent commands
    from within the shell running inside this container. Now, there is a little problem
    we need to overcome—this container will not have a Docker client installed. But
    we will also run some Docker commands, so we must create a custom image derived
    from the preceding image, which contains a Docker client. The Dockerfile that’s
    needed to do so can be found in the `sample-solutions/ch18` subfolder and has
    this content:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个 CLI 运行一个容器，并在这个容器内部的 shell 中执行所有后续命令。现在，我们需要克服一个小问题——这个容器中没有安装 Docker
    客户端。但是我们还需要运行一些 Docker 命令，因此我们必须创建一个从前面提到的镜像派生的自定义镜像，其中包含 Docker 客户端。为此所需的 Dockerfile
    可以在 `sample-solutions/ch18` 子文件夹中找到，其内容如下：
- en: '[PRE27]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'On *line 2*, we are just using the Alpine package manager, `apk`, to install
    Docker. We can then use Docker Compose to build and run this custom image. The
    corresponding `docker-compose.yml` file looks like this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 2 行*，我们仅使用 Alpine 包管理器 `apk` 来安装 Docker。然后我们可以使用 Docker Compose 来构建并运行这个自定义镜像。对应的
    `docker-compose.yml` 文件如下：
- en: '[PRE28]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `tail -F anything` command is used to keep the container running, as well
    as for the mounting of the Docker socket and the current folder in the `volumes`
    section.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`tail -F anything` 命令用于保持容器运行，并且用于挂载 Docker 套接字和当前文件夹到 `volumes` 部分。'
- en: Tip
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you are running Docker Desktop on Windows, then you need to define the `COMPOSE_CONVERT_WINDOWS_PATHS`
    environment variable to be able to mount the Docker socket. Use `export COMPOSE_CONVERT_WINDOWS_PATHS=1`
    from a Bash shell or `$Env:COMPOSE_CONVERT_WINDOWS_PATHS=1` when running PowerShell.
    Please refer to the following link for more details: [https://github.com/docker/compose/issues/4240](https://github.com/docker/compose/issues/4240).'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Windows 上运行 Docker Desktop，则需要定义 `COMPOSE_CONVERT_WINDOWS_PATHS` 环境变量，才能挂载
    Docker 套接字。你可以在 Bash shell 中使用 `export COMPOSE_CONVERT_WINDOWS_PATHS=1`，或在运行 PowerShell
    时使用 `$Env:COMPOSE_CONVERT_WINDOWS_PATHS=1`。更多详情请参见以下链接：[https://github.com/docker/compose/issues/4240](https://github.com/docker/compose/issues/4240)。
- en: 'Now, let’s build and run this container, as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建并运行这个容器，步骤如下：
- en: '[PRE29]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, let’s execute into the `az` container and run a Bash shell in it with
    the following command:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们进入 `az` 容器并在其中运行 Bash shell，使用以下命令：
- en: '[PRE30]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should get an output like this:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到如下输出：
- en: '[PRE31]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note that your hash code (`376f1e...`) representing the hostname inside the
    container will be different. To simplify the reading, we will omit this hash code
    in subsequent commands.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你的哈希码（`376f1e...`）代表容器内的主机名将会不同。为了简化后续命令的阅读，我们将省略哈希码。
- en: 'As you may have noted, we find ourselves running in a Bash shell inside the
    container. Let’s first check the version of the CLI:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所注意到的，我们发现自己正在容器内的 Bash shell 中运行。首先，我们来检查 CLI 的版本：
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This should result in an output like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成类似如下的输出：
- en: '[PRE33]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'OK—we’re running on version 2.49.0\. Next, we need to log in to our account.
    Execute this command:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 好的——我们运行的版本是 2.49.0。接下来，我们需要登录我们的账户。执行此命令：
- en: '[PRE34]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You will be presented with the following message:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下消息：
- en: '[PRE35]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Follow the instructions and log in through the browser. Once you have successfully
    authenticated your Azure account, you can go back to your terminal and you should
    be logged in, as indicated by the output you’ll get:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 按照指示通过浏览器登录。一旦成功认证了 Azure 账户，你可以返回终端并且应该已成功登录，输出结果会显示如下：
- en: '[PRE36]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now, we are ready to first move our container images to Azure.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好将容器镜像首先迁移到 Azure。
- en: Creating a container registry on Azure
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Azure 上创建容器注册表
- en: 'First, we create a new resource group named `animal-rg`. In Azure, resource
    groups are used to logically group a collection of associated resources. To have
    an optimal cloud experience and keep latency low, it is important that you select
    a data center located in a region near you. Follow these steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个名为 `animal-rg` 的新资源组。在 Azure 中，资源组用于逻辑上将一组相关资源归为一类。为了获得最佳的云体验并保持低延迟，选择一个靠近您的数据中心位置非常重要。请按照以下步骤操作：
- en: 'You can use the following command to list all regions:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用以下命令列出所有区域：
- en: '[PRE37]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The output should look like this:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '[PRE38]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This will give you a rather long list of all possible regions you can select
    from. Use the name—for example, `eastasia`—to identify the region of your choice.
    In my case, I will select `westeurope`. Please note that not all locations listed
    are valid for resource groups.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你一长串所有可供选择的区域。使用名称——例如，`eastasia`——来标识你选择的区域。在我的例子中，我将选择 `westeurope`。请注意，并非所有列出的区域都有效用于资源组。
- en: 'The command to create a resource group is simple; we just need a name for the
    group and the location, as demonstrated here:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建资源组的命令很简单；我们只需要为组指定名称和位置，如下所示：
- en: '[PRE39]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Make sure that your output shows `"``provisioningState": "Succeeded"`.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '确保你的输出显示 `"``provisioningState": "Succeeded"`。'
- en: Note
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When running a containerized application in production, we want to make sure
    that we can freely download the corresponding container images from a container
    registry. So far, we have always downloaded our images from Docker Hub, but this
    is often not possible. For security reasons, the servers of a production system
    often have no direct access to the internet and thus are not able to reach out
    to Docker Hub. Let’s follow this best practice and assume the same for our Kubernetes
    cluster that we are going to create in an instant.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中运行容器化应用时，我们希望确保能够从容器注册表中自由地下载相应的容器镜像。到目前为止，我们一直从 Docker Hub 下载镜像，但这通常是不可行的。出于安全原因，生产系统的服务器通常无法直接访问互联网，因此无法连接到
    Docker Hub。让我们遵循这一最佳实践，并假设我们即将创建的 Kubernetes 集群也面临相同的限制。
- en: 'So, what can we do? Well, the solution is to use a container image registry
    that is close to our cluster and that is in the same security context. In Azure,
    we can create an **Azure Container Registry** (**ACR**) instance and host our
    images there, so here’s what we’ll do:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们该怎么办呢？解决方案是使用一个接近我们集群并且处于相同安全上下文中的容器镜像注册表。在 Azure 中，我们可以创建一个 **Azure 容器注册表**（**ACR**）实例并在其中托管我们的镜像，接下来我们将执行以下操作：
- en: 'Let’s first create such a registry, as follows:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先创建一个注册表，如下所示：
- en: '[PRE40]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Note that `<acr-name>` needs to be unique. In my case, I have chosen the name
    `gnsanimalsacr`. The (shortened) output looks like this:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意 `<acr-name>` 必须是唯一的。在我的例子中，我选择了 `gnsanimalsacr` 这个名称。缩短后的输出如下所示：
- en: '[PRE41]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'After successfully creating the container registry, we need to log in to that
    registry using the following command:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功创建容器注册表后，我们需要使用以下命令登录该注册表：
- en: '[PRE42]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The response to the preceding command should be this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 对前述命令的响应应为：
- en: '[PRE43]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Once we are successfully logged in to the container registry on Azure, we need
    to tag our containers correctly so that we can then push them to ACR. Tagging
    and pushing images to ACR will be described next.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功登录到 Azure 上的容器注册表，我们需要正确标记我们的容器，以便我们能够将其推送到 ACR。接下来将描述如何标记和推送镜像到 ACR。
- en: Pushing our images to ACR
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将我们的镜像推送到 ACR
- en: 'Once we have successfully logged in to ACR, we can tag our images such that
    they can be pushed to the registry. For this, we need to know the URL of our ACR
    instance. It is as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功登录到 ACR，我们可以标记我们的镜像，以便它们可以推送到注册表中。为此，我们需要知道 ACR 实例的 URL。它如下所示：
- en: '[PRE44]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We now use the preceding URL to tag our images:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在使用前面提到的 URL 来标记我们的镜像：
- en: '[PRE45]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, we can push them to our ACR instance:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将其推送到我们的 ACR 实例：
- en: '[PRE46]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To double-check that our images are indeed in our ACR instance, we can use
    this command:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认我们的镜像确实位于 ACR 实例中，我们可以使用此命令：
- en: '[PRE47]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This should give you the following output:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给你以下输出：
- en: '[PRE48]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Indeed, the two images we just pushed are listed.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们刚刚推送的两个镜像已列出。
- en: With that, we are ready to create our Kubernetes cluster.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 到此，我们已准备好创建 Kubernetes 集群。
- en: Creating a Kubernetes cluster
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 Kubernetes 集群
- en: 'Once again, we will be using our custom Azure CLI inside the Docker container
    to create a Kubernetes cluster. We will have to make sure that the cluster can
    access the ACR instance that we just created; this is where our container images
    reside. So, the command to create a cluster named `animals-cluster` with two worker
    nodes looks like this:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次使用自定义的 Azure CLI，运行在 Docker 容器中来创建 Kubernetes 集群。我们需要确保集群能够访问我们刚刚创建的 ACR
    实例，镜像就在其中。所以，创建名为 `animals-cluster` 的集群，并配置两个工作节点的命令如下所示：
- en: '[PRE49]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This command takes a while, but after a few minutes, we should receive some
    JSON-formatted output with all the details about the newly created cluster.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令需要一些时间，但几分钟后，我们应该会收到一份 JSON 格式的输出，包含有关新创建集群的所有详细信息。
- en: 'To access the cluster, we need `kubectl`. We can easily get it installed in
    our Azure CLI container using this command:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问集群，我们需要 `kubectl`。我们可以通过以下命令轻松地在 Azure CLI 容器中安装它：
- en: '[PRE50]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Having installed `kubectl`, we need the necessary credentials to use the tool
    to operate on our new Kubernetes cluster in Azure. We can get the necessary credentials
    with this:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 `kubectl` 后，我们需要必要的凭证来使用该工具操作我们在 Azure 上的新 Kubernetes 集群。我们可以通过以下命令获取所需的凭证：
- en: '[PRE51]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The command should respond with the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 命令应返回以下内容：
- en: '[PRE52]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'After the success of the preceding command, we can list all the nodes in our
    cluster, like so:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面命令成功执行后，我们可以列出集群中的所有节点，如下所示：
- en: '[PRE53]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This provides us with the following list:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供以下列表：
- en: '[PRE54]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: As expected, we have two worker nodes up and running. The version of Kubernetes
    that is running on those nodes is `v1.25.68`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，我们有两个工作节点正在运行。这些节点上运行的 Kubernetes 版本是 `v1.25.68`。
- en: We are now ready to deploy our application to this cluster. In the next section,
    we are going to learn how we can deploy our application to Kubernetes.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备将应用程序部署到这个集群。在接下来的部分，我们将学习如何将应用程序部署到 Kubernetes。
- en: Deploying our application to the Kubernetes cluster
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将我们的应用程序部署到 Kubernetes 集群
- en: 'To deploy the application, we can use the `kubectl` `apply` command:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 为了部署应用程序，我们可以使用 `kubectl` `apply` 命令：
- en: '[PRE55]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The output of the preceding command should look similar to this:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出应该类似于此：
- en: '[PRE56]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now, we want to test the application. Remember that we created a service of
    type `LoadBalancer` for the web component. This service exposes the application
    to the internet.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们要测试应用程序。记住，我们为 Web 组件创建了一个类型为 `LoadBalancer` 的服务。该服务将应用程序暴露到互联网。
- en: 'This process can take a moment as AKS, among other tasks, needs to assign a
    public IP address to this service. We can observe this with the following command:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程可能需要一些时间，因为 AKS 需要为此服务分配一个公共 IP 地址，这只是其中的一项任务。我们可以通过以下命令来观察：
- en: '[PRE57]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Please note the `--watch` parameter in the preceding command. It allows us
    to monitor the progress of the command over time. Initially, we should see output
    like this:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述命令中的 `--watch` 参数。它允许我们监控命令的执行进度。最初，我们应该看到类似这样的输出：
- en: '[PRE58]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The public IP address is marked as `pending`. After a few minutes, that should
    change to this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 公共 IP 地址标记为 `pending`。几分钟后，它应该会变成这样：
- en: '![Figure 18.8 – The LoadBalancer service for the animals application on Microsoft’s
    AKS](img/Figure_18.08_B19199.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.8 – Microsoft AKS 上动物应用程序的 LoadBalancer 服务](img/Figure_18.08_B19199.jpg)'
- en: Figure 18.8 – The LoadBalancer service for the animals application on Microsoft’s
    AKS
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.8 – Microsoft AKS 上动物应用的 LoadBalancer 服务
- en: Our application is now ready at the IP address `20.76.160.79` and port number
    `3000`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用已经准备好，可以通过 IP 地址 `20.76.160.79` 和端口号 `3000` 访问。
- en: Note that the load balancer maps the internal port `32127` to the external port
    `3000`; this was not evident to me the first time.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，负载均衡器将内部端口 `32127` 映射到外部端口 `3000`；这点我第一次并未注意到。
- en: 'Let’s check it out. In a new browser tab, navigate to `http://20.76.160.79:3000/pet`
    and you should see our familiar application:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看。在新的浏览器标签页中，访问 `http://20.76.160.79:3000/pet`，你应该能够看到我们熟悉的应用：
- en: '![Figure 18.9 – Our sample application running on AKS](img/Figure_18.09_B19199.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.9 – 我们的示例应用在 AKS 上运行](img/Figure_18.09_B19199.jpg)'
- en: Figure 18.9 – Our sample application running on AKS
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.9 – 我们的示例应用在 AKS 上运行
- en: With that, we have successfully deployed our distributed application to Kubernetes
    hosted in Azure. We did not have to worry about installing or managing Kubernetes;
    we could concentrate on the application itself.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已成功将分布式应用部署到 Azure 托管的 Kubernetes 上。我们无需担心安装或管理 Kubernetes，可以专注于应用本身。
- en: 'Note that you can also manage your Azure resource group, your container registry,
    and your cluster via the Azure portal at [https://portal.azure.com/](https://portal.azure.com/).
    It will look similar to this:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你还可以通过 Azure 门户 [https://portal.azure.com/](https://portal.azure.com/) 管理你的
    Azure 资源组、容器注册表和集群。它的界面与此类似：
- en: '![Figure 18.10 – Microsoft Azure portal showing the animals resource group](img/Figure_18.10_B19199.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.10 – 显示动物资源组的 Microsoft Azure 门户](img/Figure_18.10_B19199.jpg)'
- en: Figure 18.10 – Microsoft Azure portal showing the animals resource group
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.10 – 显示动物资源组的 Microsoft Azure 门户
- en: Please make yourself familiar with the portal and try to drill down into the
    cluster, its nodes, and deployments.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 请熟悉该门户，并尝试深入了解集群、节点和部署情况。
- en: 'Now that we are done experimenting with the application, we should not forget
    to delete all resources on Azure to avoid incurring unnecessary costs. We can
    delete all resources created by deleting the resource group as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了应用的实验，不应忘记删除 Azure 上的所有资源，以避免产生不必要的费用。我们可以通过删除资源组来删除所有已创建的资源，操作如下：
- en: '[PRE59]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Azure has a few compelling offerings regarding the container workload, and the
    lock-in is not as evident as it is on AWS since Azure does mainly offer open source
    orchestration engines, such as Kubernetes, Docker Swarm, DC/OS, and Rancher.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 在容器工作负载方面有一些很有吸引力的服务，并且由于 Azure 主要提供开源的编排引擎，如 Kubernetes、Docker Swarm、DC/OS
    和 Rancher，其锁定效应不像 AWS 那么明显。
- en: Technically, we remain mobile if we initially run our containerized applications
    in Azure and later decide to move to another cloud provider. The cost should be
    limited.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度看，如果我们最初在 Azure 上运行容器化应用，后来决定迁移到其他云服务提供商，我们依然可以保持灵活性。成本应该是有限的。
- en: Note
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is worth noting that when you delete your resource group, the **Azure Active
    Directory** (**AAD**) service principal used by the AKS cluster is not removed.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，当你删除资源组时，AKS 集群使用的**Azure Active Directory**（**AAD**）服务主体并不会被删除。
- en: 'Refer to the online help page for details on how to delete the service principal.
    You can find this information here: [https://learn.microsoft.com/en-us/powershell/module/azuread/remove-azureadserviceprincipal?view=azureadps-2.0](https://learn.microsoft.com/en-us/powershell/module/azuread/remove-azureadserviceprincipal?view=azureadps-2.0).'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何删除服务主体的详细信息，请参阅在线帮助页面。你可以在这里找到相关信息：[https://learn.microsoft.com/en-us/powershell/module/azuread/remove-azureadserviceprincipal?view=azureadps-2.0](https://learn.microsoft.com/en-us/powershell/module/azuread/remove-azureadserviceprincipal?view=azureadps-2.0)。
- en: Next on the list is Google with its GKE service.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 Google 的 GKE 服务。
- en: Understanding GKE
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 GKE
- en: Google is the inventor of Kubernetes and, to this date, the driving force behind
    it. You would therefore expect that Google has a compelling offering around hosted
    Kubernetes.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: Google 是 Kubernetes 的发明者，并且至今仍是其背后的推动力。因此，你可以合理预期，Google 会提供一个吸引人的托管 Kubernetes
    服务。
- en: 'Let’s have a peek into it now. To continue, you need to either have an existing
    account with Google Cloud or create a test account here: [https://console.cloud.google.com/freetrial](https://console.cloud.google.com/freetrial).
    Proceed with the following steps:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们快速看一下。要继续，你需要有一个 Google Cloud 账户，或者在此处创建一个测试账户：[https://console.cloud.google.com/freetrial](https://console.cloud.google.com/freetrial)。请按照以下步骤操作：
- en: In the main menu, select **Kubernetes Engine**. The first time you do that,
    it will take a few moments until the Kubernetes engine is initialized.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主菜单中，选择**Kubernetes 引擎**。第一次操作时，它会花费几分钟初始化 Kubernetes 引擎。
- en: Next, create a new project and name it `massai-mara`; this may take a moment.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个新项目并命名为`massai-mara`；这可能需要一些时间。
- en: Once this is ready, we can create a cluster by clicking on **Create Cluster**
    in the popup.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦准备好，我们可以通过点击弹出窗口中的**创建集群**来创建一个集群。
- en: 'On the `animals-cluster` and select the region closest to you. In the author’s
    case, this is `europe-west1`. Then click **NEXT: NETWORKING**.'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`animals-cluster`上选择离你最近的区域。在作者的例子中，这是`europe-west1`。然后点击**下一步：网络**。
- en: Leave all settings at their default values and click **NEXT:** **ADVANCED SETTINGS**.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持所有设置为默认值，并点击**下一步：** **高级设置**。
- en: 'Once again, leave all settings at their default values and click **NEXT: REVIEW**
    **AND CREATE**.'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次保持所有设置为默认值，然后点击**下一步：审核** **并创建**。
- en: 'Review your cluster settings and if everything looks OK, then click on **CREATE
    CLUSTER**, as illustrated in the following screenshot:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审核你的集群设置，如果一切看起来正常，就点击**创建集群**，如下图所示：
- en: '![Figure 18.11 – The Review and create view of the GKE cluster creation wizard](img/Figure_18.11_B19199.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.11 – GKE 集群创建向导的审核和创建视图](img/Figure_18.11_B19199.jpg)'
- en: Figure 18.11 – The Review and create view of the GKE cluster creation wizard
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.11 – GKE 集群创建向导的审核和创建视图
- en: It will again take a few moments to provision the cluster for us.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这将再次花费一些时间来为我们配置集群。
- en: 'Once the cluster has been created, we can open Cloud Shell by clicking on the
    shell icon in the upper-right corner of the view. This is how it should look:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群创建完毕后，我们可以通过点击视图右上角的云端终端图标来打开 Cloud Shell。它应该是这样显示的：
- en: '![Figure 18.12 – The first Kubernetes cluster ready and Cloud Shell open in
    GKE](img/Figure_18.12_B19199.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.12 – 第一个 Kubernetes 集群已准备好，并且 GKE 中打开了 Cloud Shell](img/Figure_18.12_B19199.jpg)'
- en: Figure 18.12 – The first Kubernetes cluster ready and Cloud Shell open in GKE
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.12 – 第一个 Kubernetes 集群已准备好，并且 GKE 中打开了 Cloud Shell
- en: 'We can now clone our lab’s GitHub repository to this environment with the following
    command:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以通过以下命令将实验室的 GitHub 仓库克隆到这个环境中：
- en: '[PRE60]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Switch to the correct folder where you’ll find the sample solution:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到正确的文件夹，你将在其中找到示例解决方案：
- en: '[PRE61]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: You should now find an `animals.yaml` file in the current folder, which you
    can use to deploy the `animals` application into our Kubernetes cluster.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能在当前文件夹中找到一个`animals.yaml`文件，你可以使用它将`animals`应用部署到我们的 Kubernetes 集群中。
- en: 'Have a look at the file by running the following command:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令查看文件内容：
- en: '[PRE62]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'It has pretty much the same content as the same file we used in the previous
    chapter. The two differences are these:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 它与我们在上一章中使用的相同文件几乎内容一致。两者的区别在于：
- en: We use a service of type `LoadBalancer` (instead of `NodePort`) to publicly
    expose the `web` component. Note we did the same on Azure AKS.
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`LoadBalancer`类型的服务（而不是`NodePort`）来公开`web`组件。请注意，我们在 Azure AKS 上也做了相同的操作。
- en: We do not use volumes for the PostgreSQL database since configuring `StatefulSet`
    correctly on GKE is a bit more involved than in a product such as Minikube or
    Docker Desktop. The consequence of this is that our `animals` application will
    not persist the state if the `db` Pod crashes. How to use persistent volumes on
    GKE lies outside the scope of this book.
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们没有为 PostgreSQL 数据库使用卷，因为在 GKE 上正确配置`StatefulSet`比在 Minikube 或 Docker Desktop
    这样的产品中更复杂。其结果是，如果`db` Pod 崩溃，我们的`animals`应用将不会持久化状态。如何在 GKE 上使用持久卷超出了本书的范围。
- en: Also, note that we are not using **Google Container Registry** (**GCR**) to
    host the container images but are instead directly pulling them from Docker Hub.
    It is very easy—and similar to what we learned in the section about AKS—to create
    such a container registry in Google Cloud.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 同时请注意，我们没有使用**Google 容器注册表**（**GCR**）来托管容器镜像，而是直接从 Docker Hub 拉取它们。这非常简单——就像我们在关于
    AKS 的章节中学到的内容一样——在 Google Cloud 中创建这样的容器注册表非常容易。
- en: 'Before we can continue, we need to set up `gcloud` and `kubectl` credentials.
    Here’s the code we need to execute:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要设置`gcloud`和`kubectl`凭证。以下是我们需要执行的代码：
- en: '[PRE63]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Please replace `<zone>` with the same zone you selected in *step 5* when you
    created the cluster.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 请将`<zone>`替换为你在*第 5 步*创建集群时选择的相同区域。
- en: 'The response of the preceding command should be this:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的响应应该是这样的：
- en: '[PRE64]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Let’s have a look at which nodes for the cluster were created by running the
    following command:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过运行以下命令查看为该集群创建了哪些节点：
- en: '[PRE65]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You should see something like this:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似这样的内容：
- en: '![Figure 18.13 – Cluster nodes on GCE](img/Figure_18.13_B19199.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图18.13 – GCE上的集群节点](img/Figure_18.13_B19199.jpg)'
- en: Figure 18.13 – Cluster nodes on GCE
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.13 – GCE上的集群节点
- en: We can see that two nodes were created in our cluster, and the version of Kubernetes
    deployed is apparently `v1.25.8`.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在集群中创建了两个节点，并且部署的Kubernetes版本显然是`v1.25.8`。
- en: 'Having done that, it’s time to deploy the application, so run the following
    command:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成这些之后，是时候部署应用程序了，运行以下命令：
- en: '[PRE66]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The output should look like this:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 18.14 – Deploying the application on GKE](img/Figure_18.14_B19199.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![图18.14 – 在GKE上部署应用程序](img/Figure_18.14_B19199.jpg)'
- en: Figure 18.14 – Deploying the application on GKE
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.14 – 在GKE上部署应用程序
- en: 'Once the objects have been created, we can observe the `LoadBalancer web` service
    until it is assigned a public IP address, as follows:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦对象创建完成，我们可以观察`LoadBalancer web`服务，直到它分配到一个公共IP地址，如下所示：
- en: '[PRE67]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The preceding command yields this output:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令输出如下：
- en: '[PRE68]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The second line in the output is showing the situation while the creation of
    the load balancer is still pending, and the third one gives the final state. Press
    *Ctrl* + *C* to quit the `–watch` command. Apparently, we got the public IP address
    `35.195.160.243` assigned and the port is `3000`.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中的第二行显示了负载均衡器创建仍在待处理状态时的情况，而第三行则显示了最终状态。按*Ctrl* + *C*退出`–watch`命令。显然，我们已经分配到了公共IP地址`35.195.160.243`，端口是`3000`。
- en: We can then use this IP address and navigate to `http://<IP address>:3000/pet`,
    and we should be greeted by the familiar animal image.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用这个IP地址并导航到`http://<IP地址>:3000/pet`，我们应该会看到熟悉的动物图片。
- en: Take a moment and use the various `kubectl` commands you know to analyze what’s
    going on in the GKE cluster.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 花点时间，使用你熟悉的各种`kubectl`命令来分析GKE集群中的情况。
- en: Also, take a moment to use the web portal of GCE and drill down into the details
    of your cluster. Specifically, have a look into the **OBSERVABILITY** tab of the
    cluster.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，花点时间使用GCE的网页门户，深入查看你的集群详情。特别是，查看集群的**可观测性**标签。
- en: Once you are done playing with the application, delete the cluster and the project
    in the Google Cloud console to avoid any unnecessary costs.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你完成了与应用程序的交互，删除Google Cloud控制台中的集群和项目，以避免不必要的费用。
- en: 'You can use the `gcloud` CLI in the Cloud Shell to delete the cluster, as follows:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在Cloud Shell中使用`gcloud`命令行界面来删除集群，如下所示：
- en: '[PRE69]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: This will take a moment. Alternatively, you can do the same from the web portal.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 这会花费一点时间。或者，你也可以通过网页门户进行相同的操作。
- en: 'Next list all your projects, like so:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来列出你所有的项目，如下所示：
- en: '[PRE70]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Next, you can use this command to delete the project you created earlier:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你可以使用以下命令删除之前创建的项目：
- en: '[PRE71]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Here, you should get the correct `<project-id>` value from the previous `list`
    command.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你应该从之前的`list`命令中获得正确的`<project-id>`值。
- en: We have created a hosted Kubernetes cluster in GKE. We then used Cloud Shell,
    provided through the GKE portal, to first clone our lab’s GitHub repository and
    then the `kubectl` tool to deploy the `animals` application into the Kubernetes
    cluster.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在GKE上创建了一个托管的Kubernetes集群。然后，我们使用通过GKE门户提供的Cloud Shell，首先克隆我们实验室的GitHub仓库，然后使用`kubectl`工具将`animals`应用程序部署到Kubernetes集群中。
- en: When looking into a hosted Kubernetes solution, GKE is a compelling offering.
    It makes it very easy to start your projects, and since Google is the main driving
    force behind Kubernetes, we can rest assured that we will always be able to leverage
    the full functionality of Kubernetes.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看托管的Kubernetes解决方案时，GKE是一个极具吸引力的选择。它让你轻松启动项目，并且由于Google是Kubernetes的主要推动者，我们可以放心，始终能利用Kubernetes的全部功能。
- en: Summary
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter of the book, you first got an introduction to how to create
    a fully managed Kubernetes cluster on Amazon EKS using Fargate and how to deploy
    a simple application on this cluster. Then, you learned how to create a hosted
    Kubernetes cluster in Azure AKS and run the `animals` application on it, followed
    by doing the same for Google’s own hosted Kubernetes offering, GKE.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先介绍了如何在Amazon EKS上使用Fargate创建一个完全托管的Kubernetes集群，并在该集群上部署一个简单的应用程序。然后，你学习了如何在Azure
    AKS上创建托管的Kubernetes集群，并运行`animals`应用程序，随后又进行了相同的操作来使用Google的托管Kubernetes解决方案——GKE。
- en: Are you ready to unlock the secrets of keeping your production environment in
    peak health? In the next chapter, we will dive into the exciting realm of monitoring
    and troubleshooting an application running in production. We’ll explore diverse
    techniques for instrumenting and overseeing both individual services and entire
    distributed applications operating on a Kubernetes cluster. But it doesn’t stop
    there—you’ll also learn about creating alerts based on crucial metrics. And when
    things go awry, we’ll guide you on how to troubleshoot live applications without
    disrupting the cluster or its nodes. Stay tuned, because this final chapter promises
    to arm you with the tools you need to confidently maintain your applications at
    scale.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好解锁保持生产环境健康的秘密了吗？在下一章中，我们将深入探讨监控和排查在生产环境中运行的应用程序。我们将探索多种技术，用于对单个服务和整个分布式应用程序进行监控，尤其是它们在
    Kubernetes 集群上运行时的情况。但这还不是全部——你还将学习如何基于关键指标创建警报。而当事情出现问题时，我们将指导你如何在不干扰集群或节点的情况下，排查运行中的应用程序。敬请期待，因为这一章将为你提供必要的工具，让你自信地在大规模环境中维护应用程序。
- en: Questions
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'To assess your knowledge, please answer the following questions:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估你的知识，请回答以下问题：
- en: List a few reasons why you would select a hosted Kubernetes offering, such as
    Amazon EKS, Microsoft’s AKS, or Google’s GKE, to run your applications on Kubernetes.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出几个你会选择托管 Kubernetes 服务（如 Amazon EKS、Microsoft 的 AKS 或 Google 的 GKE）来运行应用程序的原因。
- en: Name two reasons when using a hosted Kubernetes solution, such as Amazon EKS,
    Azure AKS, or Google GKE, to consider hosting your container images in the container
    registry of the respective cloud provider.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举使用托管 Kubernetes 解决方案（如 Amazon EKS、Azure AKS 或 Google GKE）时，考虑将容器镜像托管在相应云服务提供商的容器注册表中的两个原因。
- en: Answers
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'Here are some sample answers to the chapter questions:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章问题的一些示例答案：
- en: 'Here are a few reasons to consider a hosted Kubernetes offering:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是考虑托管 Kubernetes 服务的一些原因：
- en: You do not want to or do not have the resources to install and manage a Kubernetes
    cluster
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不想，或者没有资源来安装和管理 Kubernetes 集群。
- en: You want to concentrate on what brings value to your business, which in most
    cases is the applications that are supposed to run on Kubernetes and not Kubernetes
    itself
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望集中精力在为你的业务带来价值的事情上，而大多数情况下，这些事情是应该在 Kubernetes 上运行的应用程序，而不是 Kubernetes 本身。
- en: You prefer a cost model where you pay only for what you need
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你更倾向于选择按需付费的成本模型。
- en: The nodes of your Kubernetes cluster are automatically patched and updated
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的 Kubernetes 集群节点会自动修补和更新。
- en: Upgrading the version of Kubernetes with zero downtime is easy and straightforward
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级 Kubernetes 版本且不产生停机时间是简单且直接的。
- en: 'The two main reasons to host container images on the cloud provider’s container
    registry (such as ACR on Microsoft Azure) are these:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器镜像托管在云服务提供商的容器注册表（例如 Microsoft Azure 上的 ACR）的两个主要原因如下：
- en: The images are geographically close to your Kubernetes cluster, and thus the
    latency and transfer network costs are minimal
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像离你的 Kubernetes 集群地理位置较近，因此延迟和传输网络成本最低。
- en: Production or production-like clusters are ideally sealed from the internet,
    and thus the Kubernetes cluster nodes cannot access Docker Hub directly
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产或类似生产的集群理想情况下应该与互联网隔离，因此 Kubernetes 集群节点无法直接访问 Docker Hub。
