- en: Scraping Metrics
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉取指标
- en: Prometheus is a pull-based system. It requires targets from which it will get
    metrics. They can be exposed from inside your services or as generic exporters
    acting as intermediaries between Prometheus and other services or systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 是一个基于拉取的系统。它需要从目标获取指标。这些指标可以从你的服务内部暴露，或者通过充当 Prometheus 和其他服务或系统之间中介的通用出口程序来暴露。
- en: Services can be instrumented to provide metrics using one of the [Client Libraries](https://prometheus.io/docs/instrumenting/clientlibs/).
    Many of the languages are supported. If no library is available for your programming
    language of choice, or if you don’t want to add one more dependency, there is
    always the option of implementing one of the [exposition formats](https://prometheus.io/docs/instrumenting/exposition_formats/).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 服务可以通过使用其中一个 [客户端库](https://prometheus.io/docs/instrumenting/clientlibs/) 来提供指标。许多编程语言都被支持。如果你的编程语言没有可用的库，或者你不想再增加一个依赖项，始终可以选择实现其中一种
    [暴露格式](https://prometheus.io/docs/instrumenting/exposition_formats/)。
- en: The alternative to instrumentation of our services is to use exporters. The
    [Exporters and Integrations](https://prometheus.io/docs/instrumenting/exporters/)
    page lists quite a few official and community maintained solutions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们服务的替代性监控方法是使用出口程序。 [出口程序与集成](https://prometheus.io/docs/instrumenting/exporters/)
    页面列出了许多官方和社区维护的解决方案。
- en: Having both options in front of us, we should make a decision which type to
    use. Should we instrument our services or use exporters? The decision does not
    have to be binary. We can use both.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们面前有这两种选择时，我们应该做出决定，选择哪种类型。我们是应该对服务进行监控，还是使用出口程序？这个决定不一定是二选一的。我们可以同时使用两者。
- en: In some cases, we do not have a choice. With third-party software like, for
    instance, HAProxy, exporters might be the only option since it does not natively
    provide metrics in Prometheus format. On the other hand, if there is a very particular
    set of metrics that should be scraped from one of our services, instrumentation
    is the best option unless that service already exposes metrics in a different
    format.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们没有选择。例如，对于第三方软件，如 HAProxy，出口程序可能是唯一的选择，因为它没有原生提供 Prometheus 格式的指标。另一方面，如果有一组非常特定的指标需要从我们的服务中抓取，监控是最佳选择，除非该服务已经以不同格式暴露了指标。
- en: More often than not, we do have a choice between using an exporter or instrumenting
    a service. In such a case, I have a strong preference towards exporters. Instrumentation,
    even though it is sometimes unavoidable, leads to undesirable coupling. Our services
    should do only what they are designed to do. If, for example, we have a service
    that acts as a shopping cart, adding instrumentation and, probably, dependency
    on Prometheus library introduces tight coupling. If we do that, our shopping cart
    is not focused on solving only that single business domain but has side functions
    as well. You might argue that adding instrumentation is not a significant effort.
    Still, keeping services focused exclusively on their business domain has multiple
    benefits, and we should avoid increasing their scope by adding any additional
    responsibilities. That is, as long as we can avoid doing that.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，我们确实有选择，既可以使用出口程序，也可以对服务进行监控。在这种情况下，我更倾向于使用出口程序。即使有时监控不可避免，它也会导致不必要的耦合。我们的服务应该只做它们被设计来做的事。例如，如果我们有一个充当购物车的服务，添加监控并且可能依赖于
    Prometheus 库，就会引入紧耦合。如果我们这样做，购物车就不再专注于解决单一的业务领域，而是还承担了其他附带功能。你可能会认为，添加监控不是一项很大的工作。然而，保持服务专注于其业务领域有诸多好处，我们应该避免通过增加额外的职责来扩展它们的范围。也就是说，前提是我们能够避免这样做。
- en: My advice is to always start with exporters, and instrument your services only
    if you require metrics that are not provided by one of the existing exporters.
    That way, your services will have clear responsibilities and be focused on a business
    domain while all infrastructure type of tasks will be delegated to vertical services
    like, in this case, exporters.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议是，始终从出口程序开始，只有当你需要的指标没有通过现有的出口程序提供时，才对服务进行监控。这样，你的服务将有明确的职责，并专注于某个业务领域，而所有与基础设施相关的任务将委托给像出口程序这样的垂直服务。
- en: In this chapter, we’ll use exporters as the only mean of providing targets that
    will be utilized by Prometheus to scrape metrics. If you realize that you do have
    to instrument your services, please consult [Prometheus documentation](https://prometheus.io/docs/instrumenting/clientlibs/)
    for more information.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将仅使用导出器作为提供目标的手段，这些目标将被Prometheus用于抓取指标。如果你意识到确实需要为你的服务添加监控功能，请查阅[Prometheus文档](https://prometheus.io/docs/instrumenting/clientlibs/)以获取更多信息。
- en: Later on in the book, we might instrument our demo service if we do realize
    that it provides a substantial advantage.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后续章节中，如果我们确实意识到它提供了实质性的优势，我们可能会为我们的演示服务添加监控功能。
- en: Now that we had a brief overview of the different ways to expose metrics, we
    can proceed towards a hands-on exploration of the subject.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经简要概述了不同的指标暴露方式，我们可以继续进行这一主题的实践探索。
- en: Creating The Cluster And Deploying Services
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建集群并部署服务
- en: We’ll start by recreating the cluster and deploying the stacks that we used
    in the previous chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从重新创建集群并部署上一章中使用的堆栈开始。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
