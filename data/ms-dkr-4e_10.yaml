- en: '*Chapter 10*'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '*第10章*'
- en: Running Docker in Public Clouds
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在公共云中运行Docker
- en: So far, we have been using Digital Ocean to launch containers on a cloud-based
    infrastructure. In this chapter, we will look at the container solutions offered
    by **Amazon Web Services** (**AWS**), Microsoft Azure, and Google Cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直使用Digital Ocean在基于云的基础设施上启动容器。在本章中，我们将探讨**Amazon Web Services**（**AWS**）、Microsoft
    Azure和Google Cloud提供的容器解决方案。
- en: Before we talk about these container services, we will also go into a little
    bit of the history behind each one of the cloud providers and cover the installation
    of any of the command-line tools required to launch the container services.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论这些容器服务之前，我们还将介绍每个云服务提供商的历史背景，并介绍启动容器服务所需的任何命令行工具的安装。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下主题：
- en: AWS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS
- en: Microsoft Azure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure
- en: Google Cloud Run
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Run
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using AWS, Microsoft Azure, and Google Cloud, so
    if you are following along, you will need active accounts with one or all of them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用AWS、Microsoft Azure和Google Cloud，因此如果你跟随操作，你需要拥有一个或多个云服务提供商的活跃账户。
- en: Don't forget that if you are following along, there may be charges for the services
    you launch in public cloud providers – please ensure that you terminate resources
    when you have finished with them to avoid any unexpected costs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果你跟随操作，可能会对你在公共云提供商处启动的服务产生费用——请确保在使用完资源后终止它们，以避免任何意外费用。
- en: Amazon Web Services
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Web Services
- en: 'The first of the public cloud providers we are going to be looking at in this
    chapter is AWS. It was first launched in July 2002 as an internal service used
    within Amazon to provide a few disparate services to support the Amazon retail
    site. A year or so later, an internal presentation at Amazon laid the groundwork
    for what AWS was to become: a standardized and completely automated compute infrastructure
    to support Amazon''s vision of a web-based retail platform.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将首先介绍的公共云提供商是AWS。它最早于2002年7月作为内部服务推出，用于在亚马逊内部提供一些分散的服务，支持亚马逊零售网站。大约一年后，亚马逊的一次内部演示为AWS的发展奠定了基础：一个标准化且完全自动化的计算基础设施，用来支持亚马逊构建基于网络的零售平台的愿景。
- en: At the end of the presentation, it was mentioned that Amazon could possibly
    sell access to some of the services AWS had to offer to help fund the infrastructure
    investment required to get the platform off the ground. In late 2004, the first
    of these public services was launched – **Amazon Simple Queue Service** (**Amazon
    SQS**), a distributed message queuing service. Around this time, Amazon started
    work on services that it could consume for the retail site and services it could
    sell to the public.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在演示的最后，提到亚马逊可能会出售一些AWS提供的服务访问权限，以帮助资助为启动平台所需的基础设施投资。2004年底，这些公共服务中的第一个服务——**Amazon
    Simple Queue Service**（**Amazon SQS**）——作为分布式消息队列服务发布。大约在这个时候，亚马逊开始开发既能为零售网站提供服务，又能向公众销售的服务。
- en: In 2006, AWS was relaunched, and Amazon SQS was joined by **Amazon Simple Storage
    Service** (**Amazon S3**) and **Amazon Elastic Compute Cloud** (**Amazon EC2**),
    and from there, AWS's popularity grew. At the time of writing, AWS has an annual
    revenue of over $25 billion and the number of services offered as part of the
    platform has grown from the original 3 to over 210.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年，AWS重新启动，**Amazon SQS**后加入了**Amazon Simple Storage Service**（**Amazon S3**）和**Amazon
    Elastic Compute Cloud**（**Amazon EC2**），从那时起，AWS的受欢迎程度不断增长。撰写本文时，AWS的年收入超过250亿美元，平台提供的服务数量也从最初的3个增长到了210多个。
- en: These services include **Amazon Elastic Container Registry** (**Amazon ECR**),
    which we looked at in [*Chapter 3*](B15659_03_Final_JM_ePub.xhtml#_idTextAnchor109),
    *Storing and Distributing Images*, **Amazon Elastic Container Service** (**Amazon
    ECS**), and **AWS Fargate**. While these last two services are actually designed
    to work together, let's take a quick look at what options were available for using
    Amazon ECS before Amazon introduced AWS Fargate.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务包括我们在[*第3章*](B15659_03_Final_JM_ePub.xhtml#_idTextAnchor109)中讨论过的**Amazon
    Elastic Container Registry**（**Amazon ECR**），*存储和分发镜像*，**Amazon Elastic Container
    Service**（**Amazon ECS**）和**AWS Fargate**。虽然后两个服务实际上是为了协同工作而设计的，但让我们快速回顾一下在AWS引入AWS
    Fargate之前，使用Amazon ECS时有哪些可用的选项。
- en: Amazon ECS – EC2-backed
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amazon ECS – 基于EC2
- en: 'Amazon ECS is described by Amazon as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊对Amazon ECS的描述如下：
- en: '"A highly scalable, fast, container management service that makes it easy to
    run, stop, and manage Docker containers on a cluster."'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '"一个高度可扩展、快速的容器管理服务，方便在集群上运行、停止和管理 Docker 容器。"'
- en: 'In essence, it allows you to manage the placement and availability of Docker
    containers on a cluster of compute resources before you launch your first ECS
    cluster. Let''s quickly have a look at some of the terminology involved and get
    an idea of how it is going to hang together. When we launch our Amazon ECS-hosted
    application, we will need to define the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，它允许你在启动第一个 ECS 集群之前，管理 Docker 容器在计算资源集群上的位置和可用性。让我们快速了解一下相关术语，并大致了解它是如何组合的。当我们启动托管在
    Amazon ECS 上的应用时，我们需要定义以下内容：
- en: Containers
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器
- en: Tasks
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务
- en: Services
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务
- en: Clusters
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群
- en: 'The following diagram will give you an idea of how the preceding elements are
    going to be utilized within our cluster; you can clearly see the containers, tasks,
    and the service, which in this diagram, is the box that spans the three instances:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示将给你一个如何在集群中使用前述元素的概念；你可以清晰地看到容器、任务和服务，在这个图示中，服务是跨越三个实例的框：
- en: '![Figure 10.1 – Amazon ECS container instances'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – Amazon ECS 容器实例'
- en: '](img/Figure_10.01_B15659.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.01_B15659.jpg)'
- en: Figure 10.1 – Amazon ECS container instances
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – Amazon ECS 容器实例
- en: 'The important difference between the preceding diagram and if we were going
    to be using AWS Fargate is the fact that we are running container instances. To
    launch a cluster of EC2 instances, do the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前述图示与如果我们使用 AWS Fargate 之间的一个重要区别在于我们正在运行容器实例。要启动 EC2 实例集群，请按照以下步骤操作：
- en: Open up the AWS console at [https://console.aws.amazon.com/](https://console.aws.amazon.com/).
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 AWS 控制台：[https://console.aws.amazon.com/](https://console.aws.amazon.com/)。
- en: Sign in.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录。
- en: Select **ECS** in the **Services** menu in the top-left corner of the page.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面左上角的 **服务** 菜单中选择 **ECS**。
- en: Once you have the Amazon ECS page open, select your preferred region in the
    region switcher in the top-right corner – as I am based in the UK, I have chosen
    **London**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Amazon ECS 页面后，在右上角的区域切换器中选择你喜欢的区域——由于我在英国，所以选择了**伦敦**。
- en: Click on **Clusters**, which is the first entry in the left-hand menu:![Figure
    10.2 – Creating Amazon ECS Clusters
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的 **集群**，这是第一个选项：![图 10.2 – 创建 Amazon ECS 集群
- en: '](img/Figure_10.02_B15659.jpg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.02_B15659.jpg)'
- en: Figure 10.2 – Creating Amazon ECS Clusters
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.2 – 创建 Amazon ECS 集群
- en: 'Click the **Create Cluster** button and you will be presented with three options:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建集群** 按钮后，你将看到三个选项：
- en: '**Networking only**'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**仅限网络**'
- en: '**EC2 Linux + Networking**'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**EC2 Linux + 网络**'
- en: '**EC2 Windows + Networking**'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**EC2 Windows + 网络**'
- en: As we are going to be launching an AWS Fargate cluster next and our test application
    is Linux-based, select **EC2 Linux + Networking** and then on the **Next Step**
    button at the bottom of the options, and you should find yourself on the **Configure
    cluster** page.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们接下来将启动一个 AWS Fargate 集群，并且我们的测试应用程序是基于 Linux 的，请选择 **EC2 Linux + 网络**，然后点击底部的
    **下一步** 按钮，你应该会看到 **配置集群** 页面。
- en: We need to name our cluster. A cluster name is a unique name; I have called
    mine `RussTestECSCluster`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为集群命名。集群名称是唯一的，我将我的命名为 `RussTestECSCluster`。
- en: Leave the `1` to `3`; when using spot instances, it is important that you have
    more than 1 instance to maintain a basic level of availability.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持 `1` 至 `3`；使用竞价实例时，确保至少有一个以上的实例，以保持基本的可用性。
- en: '**EC2 Ami Id**: This option can''t be changed.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**EC2 Ami Id**：此选项无法更改。'
- en: '**EBS storage (GiB)**: I left this at the default, **22GB**.'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**EBS 存储（GiB）**：我将其保留为默认值，**22GB**。'
- en: '**Key pair**: I left this as **None - Unable to SSH**.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**密钥对**：我将其保留为**无 - 无法 SSH**。'
- en: For **Networking**, **Container instance IAM role**, **Spot Fleet IAM role**,
    and **Tags**, I left everything at their defaults before finally reaching the
    very last option, **CloudWatch Container Insights**, I ticked the box for **Enable
    Container Insights**. Once everything's filled in, click on the **Create** button.
    Once clicked, your cluster will be launched, and you can track the progress as
    resources are configured and launched:![Figure 10.3 – Launcing the ECS cluster
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **网络**、**容器实例 IAM 角色**、**Spot Fleet IAM 角色** 和 **标签**，我将所有选项保持为默认值，直到最后一个选项
    **CloudWatch 容器洞察**，我勾选了 **启用容器洞察**。所有内容填写完毕后，点击 **创建** 按钮。点击后，集群将被启动，你可以跟踪资源配置和启动的进度：![图
    10.3 – 启动 ECS 集群
- en: '](img/Figure_10.03_B15659.jpg)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.03_B15659.jpg)'
- en: Figure 10.3 – Launcing the ECS cluster
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.3 – 启动 ECS 集群
- en: Once it's launched, you can click on the **View cluster** button, which will
    take you the following screen:![Figure. 10.4 – Looking at the ECS cluster
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动后，你可以点击**查看集群**按钮，这将带你到以下界面：![图 10.4 – 查看 ECS 集群
- en: '](img/Figure_10.04_B15659.jpg)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.04_B15659.jpg)'
- en: Figure 10.4 – Looking at the ECS cluster
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.4 – 查看 ECS 集群
- en: Now that we have a cluster, we need to create a task definition. To do this,
    click on **Task Definitions** in the left-hand menu and then click on the **Create
    new Task Definition** button. The first option we are presented with asks which
    launch type we want to use. We have just created an EC2-based cluster, so select
    **EC2**:![Figure 10.5 – Select which type of task we need
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了集群，我们需要创建一个任务定义。为此，点击左侧菜单中的**任务定义**，然后点击**创建新任务定义**按钮。首先给出的选项是选择我们要使用的启动类型。我们刚刚创建了一个基于
    EC2 的集群，因此选择**EC2**：![图 10.5 – 选择我们需要的任务类型
- en: '](img/Figure_10.05_B15659.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.05_B15659.jpg)'
- en: Figure 10.5 – Select which type of task we need
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.5 – 选择我们需要的任务类型
- en: Once selected, click on the `cluster-task`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择后，点击`cluster-task`。
- en: '`1gb`.'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`1gb`。'
- en: '`1 vcpu`.'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`1 vcpu`。'
- en: This brings us down to the container definitions. As a task definition is a
    collection of containers, you can enter multiple containers here. In this example,
    we are going to add a single container. To start, click on `cluster-container`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带我们进入容器定义部分。由于任务定义是容器的集合，你可以在这里输入多个容器。在这个示例中，我们将添加一个单独的容器。首先，点击`cluster-container`。
- en: '`russmckendrick/cluster:latest`.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`russmckendrick/cluster:latest`。'
- en: '`128`.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`128`。'
- en: '`80` for the `tcp`.'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`80`用于`tcp`。'
- en: Leave the remainder of the form at the default settings and then click on **Add**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持表单的其余部分为默认设置，然后点击**添加**。
- en: The final part of the task definition we need to define is `cluster-task`, leave
    **Volume type** as **Bind month** and **Source path** empty, and then click on
    the **Add** button. Now, click on **Create** and then return to the cluster via
    the left-hand **Clusters** menu.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要定义的任务定义的最后一部分是`cluster-task`，保持**卷类型**为**绑定月**，并将**源路径**留空，然后点击**添加**按钮。现在，点击**创建**，然后通过左侧的**集群**菜单返回到集群。
- en: Now that we have our cluster, and our task definition, we can create a service.
    To do this within the `cluster-service`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了集群和任务定义，我们可以创建一个服务。为此，在`cluster-service`中进行创建。
- en: '**Service Type**: Leave this as **REPLICA**.'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**服务类型**：保持为**REPLICA**。'
- en: '**Number of tasks**: Enter 2.'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**任务数量**：输入2。'
- en: '**Minimum healthy percent**: Leave at **100**.'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**最小健康百分比**：保持为**100**。'
- en: '**Maximum percent**: Leave at **200**.'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**最大百分比**：保持为**200**。'
- en: 'Leave the **Deployments** and **Task Placement** options at the defaults and
    click on the **Next step** button at the bottom of the page, which will take you
    to the **Configure network** page:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持**部署**和**任务放置**选项为默认值，并点击页面底部的**下一步**按钮，这将带你到**配置网络**页面：
- en: '**Load balancer type**: Select **None**.'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**负载均衡器类型**：选择**无**。'
- en: '**Enable service discovery integration**: Untick this option.'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**启用服务发现集成**：取消勾选此选项。'
- en: Click on **Next step** and leave **Service Auto Scaling** on the default **Do
    not adjust the service's desired count** option, and then click on **Next Step**.
    After reviewing the options, click on the **Create Service** button.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，将**服务自动扩展**设置为默认的**不调整服务的期望数量**选项，然后点击**下一步**。在审核选项后，点击**创建服务**按钮。
- en: Before we open our running container, we need to open the firewall rules. To
    do this, select `30000-60000`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开正在运行的容器之前，我们需要打开防火墙规则。为此，选择`30000-60000`。
- en: '`0.0.0.0/0`.'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`0.0.0.0/0`。'
- en: '`Container ports`.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`容器端口`。'
- en: Then, click on the **Save Rules** button. This should leave you with something
    like the following:![Figure 10.6 – Updating the security group rules
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**保存规则**按钮。这样你应该看到如下所示的内容：![图 10.6 – 更新安全组规则
- en: '](img/Figure_10.06_B15659.jpg)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.06_B15659.jpg)'
- en: Figure 10.6 – Updating the security group rules
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.6 – 更新安全组规则
- en: 'Once you have set the rule, return to your ECS cluster, click on the **Tasks**
    tab, then select one of the two running tasks. Once the task overview place loads,
    scroll down to the container and extend the container listed in the table, and
    then click on the external link. This will take you straight to the running container:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置完规则后，返回到你的 ECS 集群，点击**任务**标签，然后选择两个正在运行的任务之一。任务概览页面加载后，向下滚动到容器并展开表格中列出的容器，然后点击外部链接。这将直接带你到正在运行的容器：
- en: '![Figure 10.7 – Our working application'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.7 – 我们正在运行的应用程序'
- en: '](img/Figure_10.07_B15659.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.07_B15659.jpg)'
- en: Figure 10.7 – Our working application
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – 我们的工作应用程序
- en: Now that you have seen the running container, let's remove the cluster. To do
    this, go to the cluster overview page and click on the **Delete Cluster** button
    in the top-right corner – from there, follow the on-screen instructions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到正在运行的容器，接下来让我们删除集群。为此，请前往集群概览页面，并点击右上角的**删除集群**按钮 – 然后按照屏幕上的指示操作。
- en: Now that was the old way of launching containers sort-of nativity in AWS; I
    say sort of because we are still starting EC2 instances to power our cluster,
    and even though we used spot instances, we had a lot of unused resources that
    we would have been paying for – what if we could just launch containers and not
    have worry about managing a bunch of EC2 resources?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是以前在 AWS 中启动容器的传统方式；我说是“传统方式”，因为我们仍然需要启动 EC2 实例来为我们的集群提供支持，即便我们使用的是抢占实例，我们依然会有许多未被使用的资源，这些本应收费
    —— 那么如果我们只需要启动容器，而不必担心管理一堆 EC2 资源怎么办呢？
- en: Amazon ECS – AWS Fargate backed
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亚马逊 ECS – AWS Fargate 支持
- en: In November 2017, Amazon announced that they had been working on AWS Fargate
    – this is a service that is Amazon ECS-compatible and removes the need to launch
    and manage EC2 instances. Instead, your containers are launched on Amazon's backplane,
    and you get per-second billing, meaning you only pay for the vCPU and memory that
    your containerised application requests during its life cycle.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年11月，亚马逊宣布他们一直在开发 AWS Fargate —— 这是一项与 Amazon ECS 兼容的服务，消除了启动和管理 EC2 实例的需求。相反，您的容器将在亚马逊的后台启动，且按秒计费，这意味着您只需为容器化应用在生命周期中所请求的
    vCPU 和内存付费。
- en: 'We are going to cheat slightly and work through the Amazon ECS first-run process.
    You can access this by going to the following URL: https://console.aws.amazon.com/ecs/home?#/firstRun.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将稍微“作弊”一下，先通过亚马逊 ECS 的首次运行流程来操作。您可以通过访问以下网址进入：https://console.aws.amazon.com/ecs/home?#/firstRun。
- en: 'This will take us through the four steps we need to take to launch a container
    within a Fargate cluster. The first step in launching our AWS Fargate-hosted container
    is to configure the container and task definitions:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引导我们完成启动容器到 Fargate 集群中的四个步骤。启动我们的 AWS Fargate 托管容器的第一步是配置容器和任务定义：
- en: For our example, there are three predefined options and a custom option. Click
    on the `cluster-container`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的示例，有三个预定义选项和一个自定义选项。点击 `cluster-container`。
- en: '`russmckendrick/cluster:latest`.'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`russmckendrick/cluster:latest`。'
- en: '`80` and leave `tcp` selected.'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`80`，并保持选择 `tcp`。'
- en: Then, click on the `cluster-task`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击`cluster-task`。
- en: '`awsvpc`; you can''t change this option.'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`awsvpc`；您不能更改此选项。'
- en: '`ecsTaskExecutionRole`.'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ecsTaskExecutionRole`。'
- en: '`FARGATE` and you should not be able to edit it.'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FARGATE`，并且您不应该能够编辑它。'
- en: '**Task memory and Task CPU**: Leave both at their default options.'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**任务内存和任务 CPU**：将两者保持在默认选项。'
- en: Once everything's updated, click on the **Save** button. Now, you can click
    on the **Next** button at the bottom of the page. This will take us to the second
    step, which is where the service is defined.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦一切都已更新，点击**保存**按钮。现在，您可以点击页面底部的**下一步**按钮。这将带我们进入第二步，也就是定义服务的地方。
- en: As we discussed in the previous section, the service runs tasks, which in turn
    have a container associated with them. The default services are fine, so click
    on the **Next** button to proceed to the third step of the launch process. The
    first step is where the cluster is created. Again, the default values are fine,
    so click on the **Next** button to be taken to the review page.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们在上一节讨论的，服务运行任务，这些任务又与容器相关联。默认的服务设置是没问题的，因此点击**下一步**按钮继续进行启动过程的第三步。第一步是创建集群。再次强调，默认值是没问题的，因此点击**下一步**按钮进入审核页面。
- en: This is your last chance to double-check the task, service, and cluster definitions
    before any services are launched. If you are happy with everything, click on the
    **Create** button. From here, you will be taken to a page where you can view the
    status of the various AWS services that make our AWS Fargate cluster:![Figure
    10.8 – Launching our Fargate cluster
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是您在启动任何服务之前最后一次检查任务、服务和集群定义的机会。如果您对一切都满意，请点击**创建**按钮。从这里，您将进入一个页面，在该页面上您可以查看构建我们
    AWS Fargate 集群的各种 AWS 服务的状态：![图 10.8 – 启动我们的 Fargate 集群
- en: '](img/Figure_10.08_B15659.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.08_B15659.jpg)'
- en: Figure 10.8 – Launching our Fargate cluster
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.8 – 启动我们的 Fargate 集群
- en: Once everything has changed from **pending** to **complete**, you will be able
    to click on the **View service** button to be taken to the **Service** overview
    page:![Figure 10.9 – Looking at our Fargate cluster
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有内容从 **待处理** 状态变为 **完成**，你将能够点击 **查看服务** 按钮，进入 **服务** 概览页面：![图 10.9 – 查看我们的
    Fargate 集群
- en: '](img/Figure_10.09_B15659.jpg)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.09_B15659.jpg)'
- en: Figure 10.9 – Looking at our Fargate cluster
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.9 – 查看我们的 Fargate 集群
- en: 'Now, we need to know the public IP address of our container. To find this,
    click on the **Task** tab, and then select the unique ID of the running task.
    In the **Network** section of the page, you should be able to find both the private
    and public IP addresses of the tasks. Entering the public IP in your browser should
    bring up the now-familiar cluster application:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要知道容器的公网 IP 地址。要找到这个地址，点击 **任务** 标签，然后选择正在运行任务的唯一 ID。在页面的 **网络** 部分，你应该能够找到任务的私有和公网
    IP 地址。将公网 IP 输入浏览器后应该能够打开我们熟悉的集群应用：
- en: '![Figure 10.10 – Our working application'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.10 – 我们的工作应用程序'
- en: '](img/Figure_10.10_B15659.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.10_B15659.jpg)'
- en: Figure 10.10 – Our working application
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – 我们的工作应用程序
- en: 'You will notice that the container name that''s displayed is the hostname of
    the container, and includes the internal IP address. You can also view the logs
    from the container by click on the **Logs** tab:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到显示的容器名称是容器的主机名，并包含了内部 IP 地址。你还可以通过点击 **日志** 标签查看容器的日志：
- en: '![Figure 10.11 – Viewing the container logs'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.11 – 查看容器日志'
- en: '](img/Figure_10.11_B15659.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.11_B15659.jpg)'
- en: Figure 10.11 – Viewing the container logs
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – 查看容器日志
- en: So, how much is this costing? To be able to run the container for an entire
    month would cost around $14, which works out at about $0.019 per hour.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这个费用是多少呢？要运行一个容器整整一个月的费用大约是14美元，按每小时约0.019美元计算。
- en: This costing means that if you are going to be running a number of tasks 24/7,
    then Fargate may not be the most cost-effective way of running your containers.
    Instead, you may want to take the Amazon ECS EC2 option, where you can pack more
    containers onto your resource, or the Amazon EKS service, which we will look at
    later in this chapter. However, for quickly bringing up a container and then terminating
    it, Fargate is excellent—there is a low barrier to launching the containers and
    the number of supporting resources is small.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个费用意味着，如果你计划 24/7 全天候运行多个任务，那么 Fargate 可能不是最具成本效益的容器运行方式。相反，你可能希望选择 Amazon
    ECS EC2 选项，在那里你可以将更多容器打包到你的资源中，或者选择 Amazon EKS 服务，我们将在本章稍后讨论。然而，对于快速启动一个容器然后终止它，Fargate
    是非常出色的——启动容器的门槛低，支持的资源数量也很少。
- en: Once you have finished with your Fargate container, you should delete the cluster.
    This will remove all of the services associated with the cluster. Once the cluster
    has been removed, go into the **Task Definitions** page and deregister them if
    needed.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了 Fargate 容器的操作，应该删除集群。这将移除与集群关联的所有服务。删除集群后，进入 **任务定义** 页面，必要时注销它们。
- en: Summing up AWS
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 AWS
- en: In this section of the chapter, we have only touched on how Amazon ECS works;
    what we haven't covered is some of the close integration that an Amazon ECS-managed
    container has with other AWS services, such as **Elastic Load Balancing**, **Amazon
    Cloud Map**, and **AWS App Mesh**. Also, using the Amazon ECS command-line tool,
    you can launch your Docker Compose files into an Amazon ECS-managed cluster.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们仅介绍了 Amazon ECS 的基本工作原理；我们没有涵盖的是 Amazon ECS 管理的容器与其他 AWS 服务（如 **弹性负载均衡**、**Amazon
    Cloud Map** 和 **AWS App Mesh**）的紧密集成。此外，通过使用 Amazon ECS 命令行工具，你可以将 Docker Compose
    文件部署到 Amazon ECS 管理的集群中。
- en: Now that we have our AWS basics in place, let's move on to one of its major
    competitors, Microsoft Azure.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了 AWS 的基础知识，接下来让我们来看一下它的主要竞争对手之一，Microsoft Azure。
- en: Microsoft Azure
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft Azure
- en: '**Microsoft Azure**, or Windows Azure as it started life as, is Microsoft''s
    entry into the public cloud. It offers a mixture of the **software as a service**
    (**SaaS**), **platform as a service** (**PaaS**), and **infrastructure as a service**
    (**IaaS**) services. It began life as an internal Microsoft project with the codename
    of *Project Red Dog* around 2005\. Project Red Dog was a continuation of the *Red
    Dog OS*, which was a fork of the Windows operating system, which was focused on
    delivering data center services using core Windows components.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**Microsoft Azure**，或最初称为 Windows Azure，是微软进入公共云市场的产品。它提供了**软件即服务**（**SaaS**）、**平台即服务**（**PaaS**）和**基础设施即服务**（**IaaS**）的组合服务。它最初是一个内部微软项目，代号为*Project
    Red Dog*，大约在 2005 年启动。Project Red Dog 是*Red Dog 操作系统*的延续，后者是一个基于 Windows 操作系统的分支，专注于使用核心
    Windows 组件提供数据中心服务。'
- en: 'The service that was publicly announced at the Microsoft Developer conference
    in 2008 was made up of five core services:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务在 2008 年的微软开发者大会上公开宣布，由五个核心服务组成：
- en: 'Windows Azure: Allows users to spin up and manage compute instances, storage,
    and various networking services.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Azure：允许用户启动并管理计算实例、存储和各种网络服务。
- en: '**Microsoft SQL Data Services**: A cloud version of the Microsoft SQL database.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft SQL 数据服务**：微软 SQL 数据库的云版本。'
- en: '**Microsoft .NET services**: Services that would allow you to deploy your .NET
    instance to the cloud without having to worry about instances.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft .NET 服务**：允许您将 .NET 实例部署到云端，而无需担心实例问题的服务。'
- en: '**Microsoft SharePoint and** **Microsoft Dynamics services**: These would be
    SaaS offerings of Microsoft''s intranet and CRM software.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft SharePoint 和** **Microsoft Dynamics 服务**：这些将是微软的企业内部网和客户关系管理（CRM）软件的
    SaaS 提供。'
- en: It launched in early 2010 to mixed reviews as some people thought it was limited
    compared to AWS, which by this time had been available for 4 years and was much
    more mature. However, Microsoft persevered, and over the last 10 years has added
    numerous services that have moved it way beyond its Windows roots. This promoted
    the name change from Windows Azure to Microsoft Azure in 2014.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 它于 2010 年初推出，评价不一，因为有些人认为它相对于 AWS 来说功能有限，而 AWS 此时已经发布 4 年，且更加成熟。然而，微软坚持不懈，在过去的
    10 年里增加了许多服务，远远超越了其 Windows 根基。这促使了 Windows Azure 在 2014 年更名为 Microsoft Azure。
- en: Since then, Microsoft's cloud has quickly caught up feature-wise with AWS, and
    depending on which news source you read, is chosen by enterprises to run their
    cloud workloads thanks to its tight integration with other Microsoft services,
    such as **Microsoft Office** and **Microsoft 365**.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，微软的云在功能上迅速赶上了 AWS，根据你阅读的新闻来源，企业选择微软的云来运行其云工作负载，得益于与其他微软服务（如**Microsoft
    Office** 和 **Microsoft 365**）的紧密集成。
- en: Azure web app for containers
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 容器 Web 应用
- en: Microsoft Azure App Service is a fully managed platform that allows you to deploy
    your application and let Azure worry about managing the platform they are running
    on. There are several options available when launching an app service. You can
    run applications written in **.NET**, **.NET Core**, **Ruby**, **Node.js**, **PHP**,
    and **Python**, or you can launch an image directly from a container image registry.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 应用服务是一个完全托管的平台，允许您部署应用程序，并让 Azure 负责管理它们运行的平台。在启动应用服务时，有几种选项可供选择。您可以运行用**.NET**、**.NET
    Core**、**Ruby**、**Node.js**、**PHP** 和 **Python** 编写的应用程序，或者直接从容器镜像注册表中启动一个镜像。
- en: 'In this quick walkthrough, we are going to be launching the cluster image from
    the Docker Hub:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次简短的演练中，我们将从 Docker Hub 启动集群镜像：
- en: Log in to the Azure portal at [https://portal.azure.com/](https://portal.azure.com/).
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 Azure 门户：[https://portal.azure.com/](https://portal.azure.com/)。
- en: Select **App Services** from the left-hand menu, which can be accessed via the
    burger icon on the top left-hand corner of the screen:![Figure 10.12 – Preparing
    to launch an app service
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中选择**应用服务**，可以通过屏幕左上角的汉堡菜单图标访问：![图 10.12 – 准备启动应用服务
- en: '](img/Figure_10.12_B15659.jpg)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.12_B15659.jpg)'
- en: Figure 10.12 – Preparing to launch an app service
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.12 – 准备启动应用服务
- en: On the page that loads, click on the `Docker Container`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在加载的页面上，点击`Docker 容器`。
- en: '**Operating System**: Leave as **Linux**.'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**操作系统**：保留为**Linux**。'
- en: '**Region**: Select your preferred region.'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**区域**：选择你偏好的区域。'
- en: '**App Service plan**: By default, a more expensive production-ready plan is
    selected, so clicking **Change size** in the **Sku and size** section will give
    you options on changing the pricing tier. For our needs, the **Dev/Test** plan
    will be fine.'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**应用服务计划**：默认情况下，选择了一个更昂贵的生产就绪计划，所以在 **Sku and size** 部分点击 **Change size**
    将为您提供更改定价层次的选项。对于我们的需求，**Dev/Test** 计划将是合适的选择。'
- en: Once you have selected and filled out the preceding options, click on the `Single
    container`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您选择并填写了上述选项，请点击`Single container`。
- en: '`Docker Hub` from the dropdown list. This will open up the Docker Hub options
    below the form.'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从下拉列表中选择`Docker Hub`。这将在表单下方打开 Docker Hub 的选项。
- en: '`public`.'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`public`.'
- en: '`russmckendrick/cluster:latest`.'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`russmckendrick/cluster:latest`.'
- en: '**Startup command**: Leave blank.'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**启动命令**：留空。'
- en: Once that's all completed, click through the **Monitoring** and **Tag** tabs,
    and then click on the **Create** button after reviewing the information. After
    a minute or two, you should be presented with a screen that looks like the following:![Figure
    10.13 – Deploying the app service
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成所有步骤后，浏览 **Monitoring** 和 **Tag** 标签，然后在查看信息后点击 **Create** 按钮。一两分钟后，您将看到如下屏幕：![Figure
    10.13 – 部署应用服务
- en: '](img/Figure_10.13_B15659.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.13_B15659.jpg)'
- en: Figure 10.13 – Deploying the app service
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.13 – 部署应用服务
- en: 'Clicking on the **Go to resource** button will take you to the newly launched
    application:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Go to resource** 按钮将带您到新启动的应用程序：
- en: '![Figure 10.14 – Viewing our running app service'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.14 – 查看我们运行的应用服务'
- en: '](img/Figure_10.14_B15659.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.14_B15659.jpg)'
- en: Figure 10.14 – Viewing our running app service
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.14 – 查看我们运行的应用服务
- en: 'Now that our application has launched, you should be able to access the service
    via the URL provided by Azure – for example, mine was [https://masteringdocker4thedition.azurewebsites.net](https://masteringdocker4thedition.azurewebsites.net).
    Opening this, your browser will display the cluster application:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序已经启动，您应该能够通过 Azure 提供的 URL 访问服务，例如，我的是 [https://masteringdocker4thedition.azurewebsites.net](https://masteringdocker4thedition.azurewebsites.net)。打开这个链接，您的浏览器将显示集群应用程序：
- en: '![Figure 10.15 – Displaying the cluster application'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.15 – 显示集群应用程序'
- en: '](img/Figure_10.15_B15659.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.15_B15659.jpg)'
- en: Figure 10.15 – Displaying the cluster application
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.15 – 显示集群应用程序
- en: As you can see, this time, we have the container ID, rather than a full hostname
    as we got when launching the container on AWS Fargate. The container at this spec
    will cost us around $10 per month.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，这一次我们有容器 ID，而不是在启动 AWS Fargate 上时得到的完整主机名。这种规格的容器每月大约花费我们 $10。
- en: There are some other really useful advantages to launching your container as
    an application, rather than just a plain old container – for example, you may
    have noticed that our container URL has an **SSL certificate** enabled. While
    it is currently one that covers [azurewebsites.net](http://azurewebsites.net),
    you can add your own custom domain and provide your own SSL certificate.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将容器作为应用程序启动，而不仅仅是一个普通的容器还有一些其他非常有用的优势，例如，您可能已经注意到我们的容器 URL 启用了**SSL 证书**。虽然当前使用的是覆盖
    [azurewebsites.net](http://azurewebsites.net) 的证书，您可以添加自定义域并提供自己的 SSL 证书。
- en: 'Another handy feature is that you can configure your single container to automatically
    update itself via a trigger from a webhook. For example, when your new container
    image has successfully been built, you can find this option on the **Container
    settings** page for the application:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个方便的功能是，您可以通过来自 Webhook 的触发器自动更新单个容器。例如，当您的新容器镜像成功构建后，您可以在应用程序的**Container
    settings**页面找到此选项：
- en: '![Figure 10.16 – Launching multiple containers'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.16 – 启动多个容器'
- en: '](img/Figure_10.16_B15659.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.16_B15659.jpg)'
- en: Figure 10.16 – Launching multiple containers
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.16 – 启动多个容器
- en: Also, as touched on when we first configured the application, you can use a
    Docker Compose file to launch multiple containers in your Microsoft Azure web
    app.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如我们首次配置应用程序时提到的，您可以使用 Docker Compose 文件在 Microsoft Azure Web 应用程序中启动多个容器。
- en: Once you have finished with the web app, delete it and the resource group, assuming
    it doesn't contain any other resources you need.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 完成 Web 应用程序后，删除它和资源组，假设它不包含其他您需要的资源。
- en: Azure container instances
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 容器实例
- en: Now that we have learned how to launch Docker containers in Azure using Azure
    web apps, let's now look at the Azure Container Instance service. Think of this
    as being similar in concept to the AWS Fargate service in that it allows you to
    launch containers directly on, in this case, Microsoft's shared backplane.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了如何使用 Azure Web 应用启动 Docker 容器，接下来让我们看看 Azure 容器实例服务。可以将其视为类似于 AWS Fargate
    服务的概念，它允许你直接在微软的共享底层架构上启动容器。
- en: 'Let''s configure a container instance:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置一个容器实例：
- en: Enter `Container instances` into the search bar at the top of the screen and
    then click on the link for the **Container Instances** service.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕顶部的搜索栏中输入`Container instances`，然后点击**容器实例**服务的链接。
- en: Once the page loads, click on the `Public`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面加载完成后，点击`Public`。
- en: '`russmckendrick/cluster:latest`.'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`russmckendrick/cluster:latest`。'
- en: '`Linux`.'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Linux`。'
- en: '`1GB`.'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`1GB`。'
- en: Once you have filled in the information, click on the `Yes`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写完信息后，点击`是`。
- en: '`80` and **TCP** configured.'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置了`80`端口和**TCP**协议。
- en: '**DNS name label**: Enter a DNS name for your container.'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**DNS 名称标签**：为你的容器输入 DNS 名称。'
- en: Skip past the **Advance** and **Tags** sections and go straight to **Review
    + create**. Once the validation has passed, click on the **Create** button:![Figure
    10.17 – Launching our Azure container instance
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳过**高级**和**标签**部分，直接进入**审核 + 创建**。验证通过后，点击**创建**按钮：![图 10.17 – 启动我们的 Azure 容器实例
- en: '](img/Figure_10.17_B15659.jpg)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.17_B15659.jpg)'
- en: Figure 10.17 – Launching our Azure container instance
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.17 – 启动我们的 Azure 容器实例
- en: 'As before, click on the **Go to resource** button and you will be taken to
    the newly created Azure container instance, as you can see in the following screenshot:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如之前所示，点击**转到资源**按钮，你将被带到新创建的 Azure 容器实例，正如下面的截图所示：
- en: '![Figure 10.18 – An overview of our Azure container instance'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.18 – 我们的 Azure 容器实例概览'
- en: '](img/Figure_10.18_B15659.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.18_B15659.jpg)'
- en: Figure 10.18 – An overview of our Azure container instance
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.18 – 我们的 Azure 容器实例概览
- en: 'There are fewer options than we had in the web application, and that is because
    Azure container instances are designed to do just one thing: run containers.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 选项比我们在 Web 应用中看到的要少，这是因为 Azure 容器实例的设计目的是执行一项任务：运行容器。
- en: 'If you were to click on `/bin/sh` option:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击了`/bin/sh`选项：
- en: '![Figure 10.19 – Opening a session to our Azure container instance'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.19 – 打开会话连接到我们的 Azure 容器实例'
- en: '](img/Figure_10.19_B15659.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.19_B15659.jpg)'
- en: Figure 10.19 – Opening a session to our Azure container instance
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.19 – 打开会话连接到我们的 Azure 容器实例
- en: 'Entering the URL given in the overview page into a browser, which in my case
    was [http://masteringdocker4thedition-aci.uksouth.azurecontainer.io/](http://masteringdocker4thedition-aci.uksouth.azurecontainer.io/),
    will show you your container app:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 将概览页面中提供的 URL 输入浏览器，在我的例子中是 [http://masteringdocker4thedition-aci.uksouth.azurecontainer.io/](http://masteringdocker4thedition-aci.uksouth.azurecontainer.io/)，你将看到你的容器应用：
- en: '![Figure 10.20 – Our running application'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.20 – 我们正在运行的应用程序'
- en: '](img/Figure_10.20_B15659.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.20_B15659.jpg)'
- en: Figure 10.20 – Our running application
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.20 – 我们正在运行的应用程序
- en: As you can see, this time we have the container ID, which in my case was wk-caas-ca0c275b8f3e4ce2848c5802ee406a13-4e02f5281687aa1e58d98f.
    You might notice that there is no HTTPS this time, just plain old HTTP on port
    80\.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这次我们有了容器 ID，在我的案例中是 wk-caas-ca0c275b8f3e4ce2848c5802ee406a13-4e02f5281687aa1e58d98f。你可能会注意到这次没有
    HTTPS，只有普通的 HTTP，使用 80 端口\。
- en: Once you have finished with your Azure container instance, click on **Delete**,
    and also remove the resource group if required.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成 Azure 容器实例的操作，点击**删除**，如果需要的话，还要删除资源组。
- en: Summing up Microsoft Azure
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 Microsoft Azure
- en: While on the face of it the two services we have looked at in this section appear
    to quite similar, they are in fact really very different. Microsoft web apps are
    a managed service offered by Microsoft that is powered by containers. Typically,
    the container that is launched is for the code that the end user launches. However,
    when running containers, they end up running Docker in Docker. Azure container
    instances are just that, your running container – no wrappers or helpers, only
    vanilla containers.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上看，我们在本节中讨论的这两项服务似乎很相似，实际上它们非常不同。微软 Web 应用是微软提供的托管服务，基于容器技术。通常，启动的容器是为最终用户启动的代码。然而，在运行容器时，它们最终会在
    Docker 中运行 Docker。Azure 容器实例仅仅是运行中的容器——没有额外的包装或帮助程序，只有原生容器。
- en: We know have a foundation in Microsoft Azure. With Amazon and Microsoft established
    in the game, it's no surprise that Google launched its own competitor product.
    Let's take a look at it in the next section.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在 Microsoft Azure 上打下了基础。随着 Amazon 和 Microsoft 已经在云计算领域站稳脚跟，Google 推出了自己的竞争产品也就不足为奇了。接下来我们来看看它。
- en: Google Cloud
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Cloud
- en: Of the three major public clouds, **Google Cloud** is the newest. It started
    life as Google App Engine in 2008\. App Engine was Google's PaaS offering, which
    supported Java, PHP, Node.js, Python, C#, .Net, Ruby, and Go applications. Unlike
    AWS and Microsoft Azure, Google remained a PaaS service for over 4 years until
    it introduced Google Compute Engine.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在三大公共云平台中，**Google Cloud** 是最年轻的。它最初于 2008 年作为 Google App Engine 启动。App Engine
    是 Google 的 PaaS 产品，支持 Java、PHP、Node.js、Python、C#、.Net、Ruby 和 Go 应用程序。与 AWS 和 Microsoft
    Azure 不同，Google 作为 PaaS 服务存在了超过 4 年，直到推出 Google Compute Engine。
- en: We are going to be learning a lot more about Google's journey into the cloud
    in the next chapter when we start to talk about Kubernetes, so I am not going
    to go into much more detail here. So, let's jump right in.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习更多关于 Google 进入云计算的历程，尤其是当我们开始讨论 Kubernetes 时，所以我在这里不会详细展开。接下来，我们直接进入正题。
- en: Google Cloud Run
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google Cloud Run
- en: 'Google Cloud Run works slightly differently than the other container services
    we have looked at in this chapter. The first thing we need is to have an image
    hosted in Google Container Registry to use the service:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud Run 与我们在本章中查看的其他容器服务略有不同。我们需要做的第一件事是将镜像托管在 Google Container Registry
    中，以便使用该服务：
- en: 'Let''s grab a copy of our cluster image from Docker Hub:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从 Docker Hub 获取一个集群镜像的副本：
- en: '[PRE0]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we need to use the Google Cloud command-line tool to log in to our Google
    Cloud account. To do this, run the following:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要使用 Google Cloud 命令行工具登录到我们的 Google Cloud 账户。为此，运行以下命令：
- en: '[PRE1]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once logged in, we can configure Docker to use Google Container Registry by
    running the following:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，我们可以通过运行以下命令来配置 Docker 使用 Google Container Registry：
- en: '[PRE2]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that Docker is configured to interact with Google Container Registry, we
    can run the following commands to create a tag and push our image:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Docker 已配置为与 Google Container Registry 交互，我们可以运行以下命令来创建标签并推送我们的镜像：
- en: '[PRE3]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, in the search bar at the top of the page, enter `Cloud Run` and follow
    the link.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在页面顶部的搜索栏中，输入`Cloud Run`并点击链接。
- en: Once the Cloud Run page loads, click on the **Create Service** button at the
    top.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Cloud Run 页面加载完成，点击页面顶部的**创建服务**按钮。
- en: The first thing you need to do is choose which image to use. Click on **Select**
    and highlight the cluster image and then the version of the image you want to
    use:![Figure 10.22 – Selecting the Google Container Registry image
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要做的是选择要使用的镜像。点击**选择**，然后突出显示集群镜像，并选择你想要使用的镜像版本：![图 10.22 – 选择 Google Container
    Registry 镜像
- en: '](img/Figure_10.22_B15659.jpg)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.22_B15659.jpg)'
- en: Figure 10.22 – Selecting the Google Container Registry image
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.22 – 选择 Google Container Registry 镜像
- en: Once selected, click on **CONTINUE**.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择完成后，点击**继续**。
- en: For the deployment platform, we are going to be using **Cloud Run (fully managed)**.
    Choose the closest region to you from the drop-down box.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于部署平台，我们将使用**Cloud Run（完全托管）**。从下拉框中选择离你最近的区域。
- en: Next up, we need to name the server – I called mine `masteringdocker4cluster`
    – and then tick the **Allow unauthenticated invocations** radio box.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为服务器命名——我把它命名为`masteringdocker4cluster`——然后勾选**允许未认证调用**复选框。
- en: As our container listens on port `80`, we need to update the revision settings
    as the default is port `8080`. Clicking on `8080` to `80`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们的容器监听的是端口`80`，我们需要更新修订设置，因为默认端口是`8080`。点击`8080`改为`80`。
- en: 'Once everything is filled in, scroll to the bottom of the page and click on
    the **Create** button. After a short while, you should see something like the
    following screen:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切填写完毕后，滚动到页面底部并点击**创建**按钮。稍等片刻，你应该能看到类似以下屏幕的内容：
- en: '![Figure 10.23 – Viewing our Cloud Run application'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.23 – 查看我们的 Cloud Run 应用'
- en: '](img/Figure_10.23_B15659.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.23_B15659.jpg)'
- en: Figure 10.23 – Viewing our Cloud Run application
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.23 – 查看我们的 Cloud Run 应用
- en: 'As you can see, we have information on our running container, including a URL,
    which in this case was [https://cluster-5iidnzldtq-ez.a.run.app](https://cluster-5iidnzldtq-ez.a.run.app)
    – opening the URL in a browser shows the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们有关于正在运行的容器的信息，包括一个 URL，在本例中是[https://cluster-5iidnzldtq-ez.a.run.app](https://cluster-5iidnzldtq-ez.a.run.app)——在浏览器中打开该
    URL 会显示如下内容：
- en: '![Figure 10.24 – Our running application'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.24 – 我们的运行应用'
- en: '](img/Figure_10.24_B15659.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.24_B15659.jpg)'
- en: Figure 10.24 – Our running application
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.24 – 我们正在运行的应用程序
- en: This is what we would have expected to have seen; however, there is a difference
    between how Google Cloud Run and the other services we covered in the AWS and
    Azure section of this chapter work. With the other service, our container was
    running all of the time, but with Google Cloud Run, it only runs when it is needed.
    Google Cloud Run is built on top of **Knative**, which is an open source serverless
    platform designed to run on top of a Kubernetes, and we have been running our
    containers on Google's own Kubernetes cluster.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们预期会看到的内容；然而，Google Cloud Run 与我们在本章 AWS 和 Azure 部分所涵盖的其他服务之间存在差异。在其他服务中，我们的容器一直在运行，但在
    Google Cloud Run 中，它只在需要时才会运行。Google Cloud Run 构建在 **Knative** 之上，Knative 是一个开源的无服务器平台，旨在运行在
    Kubernetes 之上，我们一直在 Google 自家的 Kubernetes 集群上运行我们的容器。
- en: Summing up Google Cloud
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 Google Cloud
- en: As you may have guessed, Google is more geared to running Kubernetes-based services,
    as we have already seen with Google Cloud Run. So, we will revisit Google Cloud
    in a later chapter once we have covered Kubernetes in a little more depth.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的，Google 更倾向于运行基于 Kubernetes 的服务，正如我们在 Google Cloud Run 中已经看到的那样。所以，在我们深入了解
    Kubernetes 后，我们将在后面的章节重新审视 Google Cloud。
- en: Summary
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have looked at how we can deploy our Docker containers into
    services offered by the three leading public cloud providers using their container-only
    services. The services we looked at all approach both the deployment and management
    of containers in very different ways, from the fully managed Docker-based web
    app in Azure app services to AWS' own clustering service Amazon ECS.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何将 Docker 容器部署到三大公共云提供商的容器服务中。我们查看的这些服务在容器的部署和管理方式上有很大的不同，从 Azure
    应用服务中完全托管的基于 Docker 的 Web 应用，到 AWS 自有的集群服务 Amazon ECS。
- en: The differences between all of these services are quite important as it means
    that if you want to use them, then you are tied to just the one cloud provider.
    While in most cases, that shouldn't be too much of a problem, it could in the
    long term end up limiting you.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务之间的差异非常重要，因为这意味着如果你想使用它们，你就只能依赖于一个云提供商。虽然在大多数情况下，这不会造成太大问题，但从长远来看，它可能会限制你。
- en: 'In the next chapter (and in subsequent chapters), we will explore one of the
    most exciting services to arrive on the scene since Docker: Kubernetes.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章（以及后续章节）中，我们将探索自 Docker 以来最激动人心的服务之一：Kubernetes。
- en: Questions
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What type of application do we need to launch in Azure?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 中，我们需要启动什么类型的应用程序？
- en: What Amazon service don't you have to manage if you're using Amazon Fargate
    directly?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你直接使用 Amazon Fargate，Amazon 服务中哪些不需要你管理？
- en: 'True or false: Azure Container Instances comes with HTTPS support out of the
    box.'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对还是错：Azure 容器实例开箱即用支持 HTTPS。
- en: Name the open source service that Google Cloud Run is built on top of.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名 Google Cloud Run 所依赖的开源服务。
- en: Which of the services that we looked at support Docker Compose?
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们所查看的服务中，哪些支持 Docker Compose？
- en: Further reading
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For details on each of the services we have used in this chapter, refer to
    the following:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 有关我们在本章中使用的每项服务的详细信息，请参考以下内容：
- en: 'AWS: [http://aws.amazon.com/](http://aws.amazon.com/)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AWS: [http://aws.amazon.com/](http://aws.amazon.com/)'
- en: 'Amazon ECS: [https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Amazon ECS: [https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)'
- en: 'AWS Fargate: [https://aws.amazon.com/fargate/](https://aws.amazon.com/fargate/)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AWS Fargate: [https://aws.amazon.com/fargate/](https://aws.amazon.com/fargate/)'
- en: 'Microsoft Azure: [https://azure.microsoft.com/](https://azure.microsoft.com/)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Microsoft Azure: [https://azure.microsoft.com/](https://azure.microsoft.com/)'
- en: 'Azure App Service: [https://azure.microsoft.com/en-gb/services/app-service/](https://azure.microsoft.com/en-gb/services/app-service/)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure App Service: [https://azure.microsoft.com/en-gb/services/app-service/](https://azure.microsoft.com/en-gb/services/app-service/)'
- en: 'Azure Container Instances: [https://azure.microsoft.com/en-gb/services/container-instances/](https://azure.microsoft.com/en-gb/services/container-instances/)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure Container Instances: [https://azure.microsoft.com/en-gb/services/container-instances/](https://azure.microsoft.com/en-gb/services/container-instances/)'
- en: 'Google Cloud: [https://cloud.google.com](https://cloud.google.com)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google Cloud: [https://cloud.google.com](https://cloud.google.com)'
- en: 'Google Cloud Run: [https://cloud.google.com/run](https://cloud.google.com/run)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google Cloud Run: [https://cloud.google.com/run](https://cloud.google.com/run)'
- en: 'Knative: [http://knative.dev](http://knative.dev)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Knative: [http://knative.dev](http://knative.dev)'
