- en: Deploying Applications on AWS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS 上部署应用程序
- en: In this chapter, we will cover how to deploy applications to the cloud and look
    at the prerequisites to do so. Before going forward, we need to understand why
    we want to deploy applications to the cloud. We have gone through the differences
    of Cloud versus on-premises systems in [Chapter 1](69772d4d-8571-421f-83a8-a23b0411e8aa.xhtml),
    *Introduction*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何将应用程序部署到云端，并探讨部署的先决条件。在继续之前，我们需要了解为什么要将应用程序部署到云端。我们在[第 1 章](69772d4d-8571-421f-83a8-a23b0411e8aa.xhtml)中已经讲解了云计算与本地系统的区别，*介绍*。
- en: So far, we have gone through various DevOps mechanisms, which are where you
    will start writing your code and pushing it to a code repository (GitHub), as
    the commands are pretty straightforward (such as `git add`, `git commit`, and
    `git push`).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了各种 DevOps 机制，在这些机制中，你将开始编写代码并将其推送到代码仓库（GitHub），因为这些命令非常简单（例如 `git
    add`、`git commit` 和 `git push`）。
- en: Once the new version of the code is available in GitHub, it will be pulled as
    a new change to the **Continuous Integration** and **Continuous Deployment** (**CI**/**CD**)
    pipeline. We have demonstrated two examples in our book of how to deploy a CI/CD
    pipeline (Teamcity and VSTS). CI will start the process of building different
    parts of the software, including the code/software, database, and other dependent
    components of the pipeline. The software scripts will then be deployed to the
    environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 GitHub 中的新版本代码可用，它将作为新变更被拉取到 **持续集成** 和 **持续部署**（**CI**/**CD**）管道中。我们在书中展示了两个示例，说明如何部署
    CI/CD 管道（Teamcity 和 VSTS）。CI 将开始构建软件的不同部分，包括代码/软件、数据库以及管道中的其他依赖组件。然后，软件脚本将被部署到环境中。
- en: Before we deploy the code, we need to set up the environment, and the environment
    here includes a set of machines running on AWS. The virtual machines in AWS are
    called **Elastic Compute Cloud** (**EC2**). As the software is running on multiple
    machines, we have to make sure the requests go to all the machines. For that,
    we will create an **Elastic Load Balancer** (**ELB**). An ELB distributes user
    requests to multiple EC2 nodes and gives a single DNS host entry to point end
    user requests. In this chapter, we will also use **Auto Scaling Groups** (**ASGs**),
    used to scale in and out EC2 instances on the basis of various metrics, such as
    workload, CPU, memory consumption, and so on. You can configure an ASG to meet
    your application requirements.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署代码之前，我们需要设置环境，这里所说的环境包括一组在 AWS 上运行的机器。AWS 中的虚拟机称为 **弹性计算云**（**EC2**）。由于软件运行在多台机器上，我们必须确保请求能够发送到所有机器。为此，我们将创建一个
    **弹性负载均衡器**（**ELB**）。ELB 将用户请求分配到多个 EC2 节点，并为终端用户请求提供一个单一的 DNS 主机入口。在本章中，我们还将使用
    **自动伸缩组**（**ASGs**），用于根据工作负载、CPU、内存消耗等各种指标来动态调整 EC2 实例的数量。你可以配置 ASG 来满足你的应用需求。
- en: 'In this chapter, we will cover application deployment on AWS:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何在 AWS 上部署应用程序：
- en: 'Creation of an instance:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建实例：
- en: Lightsail
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lightsail
- en: EC2 CLI
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2 CLI
- en: Terraform
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform
- en: Creating an Elastic Load Balancer, launch configuration, and Auto Scaling Groups
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建弹性负载均衡器、启动配置和自动伸缩组
- en: Creation of an instance
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建实例
- en: 'Now, let''s continue with creating an EC2 instance. There are various methods
    to create EC2 instances in AWS. We will be going through the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续创建 EC2 实例。在 AWS 中有多种方法可以创建 EC2 实例。我们将介绍以下几种方法：
- en: Lightsail
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lightsail
- en: EC2 CLI
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2 CLI
- en: Teraform
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform
- en: Lightsail
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lightsail
- en: Lightsail is a one-click easy service to create instances, and it is very important
    for testing applications and development environments where you don't want to
    spend time on spinning and maintaining nodes. Lightsail also supports creating
    instances with predefined templates for MEAN, LAMP, Node.js, and LEMP (Nginx).
    Let's see how we can create instances with Lightsail.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Lightsail 是一种一键创建实例的简便服务，非常适合用于测试应用程序和开发环境，在这些环境中你不想花时间旋转和维护节点。Lightsail 还支持使用预定义模板创建实例，这些模板包括
    MEAN、LAMP、Node.js 和 LEMP（Nginx）。让我们看看如何使用 Lightsail 创建实例。
- en: 'The following are the required steps to create instances in Lightsail:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 Lightsail 中创建实例所需的步骤：
- en: Log in to the AWS console.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 AWS 控制台。
- en: 'Click on Lightsail under the Compute section:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在计算部分点击 Lightsail：
- en: '![](img/e6922c2d-f0bf-4b9b-bd65-f44faf1bc143.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6922c2d-f0bf-4b9b-bd65-f44faf1bc143.png)'
- en: 'The first screen of Lightsail is pretty straightforward; just click on Create
    instance:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lightsail 的第一个界面非常简单，只需点击创建实例：
- en: '![](img/c5652dfe-97fd-4557-b1f3-395ffbd32805.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5652dfe-97fd-4557-b1f3-395ffbd32805.png)'
- en: 'Now, you will be asked a bunch of basic questions:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你将被要求回答一系列基本问题：
- en: 'Select your instance location:'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的实例位置：
- en: '![](img/e39f7cdd-24e0-4d45-8625-dec00865b207.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e39f7cdd-24e0-4d45-8625-dec00865b207.png)'
- en: 'Pick your instance image and select a blueprint:'
  id: totrans-27
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的实例镜像并选择一个蓝图：
- en: '![](img/1252a228-14a4-4a6b-a68a-82be3157457b.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1252a228-14a4-4a6b-a68a-82be3157457b.png)'
- en: 'Click Create New and create a key pair for your instance:'
  id: totrans-29
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建新实例”并为你的实例创建密钥对：
- en: '![](img/2f4be806-5f33-45f7-88cf-32b7ee77cefa.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f4be806-5f33-45f7-88cf-32b7ee77cefa.png)'
- en: 'Provide a name to the key and click on Generate key pair:'
  id: totrans-31
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为密钥提供一个名称，并点击生成密钥对：
- en: '![](img/5b1751af-564f-4ce9-b190-cf06d364109e.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b1751af-564f-4ce9-b190-cf06d364109e.png)'
- en: 'Choose your instance plan:'
  id: totrans-33
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的实例计划：
- en: '![](img/5aedc6a1-b969-4354-af1d-110fe2cf90ee.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5aedc6a1-b969-4354-af1d-110fe2cf90ee.png)'
- en: 'Name the instance. You can create multiple instances as per your requirements.
    Instances will look as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为实例命名。根据需要可以创建多个实例。实例将如下所示：
- en: '![](img/14ca0e8a-d3f6-4044-aadd-b5cca78e9b91.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14ca0e8a-d3f6-4044-aadd-b5cca78e9b91.png)'
- en: 'You can connect to the instance by clicking on the three dots at the top-right
    corner of the instance icon and clicking on Connect:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击实例图标右上角的三个点并点击“连接”来连接到实例：
- en: '![](img/c77af472-ccc7-4e5d-abfe-2165dbf7c2af.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c77af472-ccc7-4e5d-abfe-2165dbf7c2af.png)'
- en: 'A connection screen will be shown as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示以下连接界面：
- en: '![](img/f0484c1e-52dd-413a-bd9b-bfd145bddc83.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0484c1e-52dd-413a-bd9b-bfd145bddc83.png)'
- en: Now, the instance has been created. We will now create instances using Terraform.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，实例已经创建。接下来，我们将使用Terraform创建实例。
- en: Terraform
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Terraform
- en: Terraform provides simple Infrastructure as a Service for multiple cloud providers
    and existing house systems. Using Terraform, we can manage very low-level tasks,
    such as creating an instance, adding EBS volume to the instance, and registering
    the instance to Route 53\. We will be using Terraform as self-service code; for
    example, for when we have developed the code and we want to deploy it somewhere,
    do the integration testing, and then destroy the machines/cluster. The setup can
    be very useful for software showcase/trial, multiple cloud setup, and replaceable
    infrastructure.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform为多个云提供商和现有内部系统提供简单的基础设施即服务。通过Terraform，我们可以管理非常低级的任务，如创建实例、为实例添加EBS卷以及将实例注册到Route
    53。我们将把Terraform用作自助服务代码；例如，当我们开发了代码并希望将其部署到某个地方，进行集成测试，然后销毁机器/集群时。此设置对于软件展示/试用、多云设置以及可替换的基础设施非常有用。
- en: Installation
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: Terraform installation can be done through downloading a single binary package.
    Download the binary package from [https://www.terraform.io/downloads.html](https://www.terraform.io/downloads.html)
    according to your OS.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform安装可以通过下载单个二进制包来完成。根据你的操作系统，从[https://www.terraform.io/downloads.html](https://www.terraform.io/downloads.html)下载相应的二进制包。
- en: 'Once the installation is done, verify it by running the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，通过运行以下命令进行验证：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Configuration files
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件
- en: Now we will see how to create EC2 instances using Terraform.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看如何使用Terraform创建EC2实例。
- en: 'Create a directory for your configuration file. Terraform will load all the
    files (`*.tf`) inside the directory called `workspace`, so make sure to keep the
    necessary files inside the directory:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的配置文件创建一个目录。Terraform会加载目录中所有的文件（`*.tf`），该目录称为`workspace`，所以请确保将必要的文件放在该目录中：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Terraform uses the `*.tf` format, known as Terraform configuration.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform使用`*.tf`格式，称为Terraform配置。
- en: Creating instances
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建实例
- en: 'To pass the variable for the AWS instance type, use the following code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要传递AWS实例类型的变量，请使用以下代码：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can also define `secret` variables in a file called `terraform.tfvars` or
    `*.auto.tfvars`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在名为`terraform.tfvars`或`*.auto.tfvars`的文件中定义`secret`变量。
- en: 'Define the AMI before you create an instance; `ami-id` will be different for
    all the regions. Please use the proper image ID as per your region. You can use
    tools such as Packer to create your own golden AMI. I''ve also attached Ansible
    code that you can use to create custom AMIs:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建实例之前定义AMI；`ami-id`在不同区域会有所不同。请根据你的区域使用正确的镜像ID。你可以使用Packer等工具创建自己的黄金AMI。我也附上了Ansible代码，你可以使用它来创建自定义AMI：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Use providers, such as `"aws"`, to create instances in AWS. You can also set
    multiple providers in the configuration file to create instances in multiple providers
    in one go:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用诸如`"aws"`等提供者来在AWS中创建实例。你还可以在配置文件中设置多个提供者，以便一次性在多个提供者中创建实例：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Don't pass the `access_key` and `secret_key` variables if you want to use IAM
    roles. We will create IAM roles in a later section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用IAM角色，请不要传递`access_key`和`secret_key`变量。我们将在后面的章节中创建IAM角色。
- en: 'Also, `access_key` and `secret_key` can be saved in `~/.aws/credentials` using
    the `profile` option:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以使用`profile`选项将`access_key`和`secret_key`保存到`~/.aws/credentials`中：
- en: '`**# aws configure --profile user1**`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`**# aws configure --profile user1**`'
- en: '`**AWS Access Key ID [None]: ABCDEFGHIJKLMNOPQ**`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`**AWS Access Key ID [None]: ABCDEFGHIJKLMNOPQ**`'
- en: '`**AWS Secret Access Key [None]: wjVDFVdfdfklfF/G6vFGFGr/fsjfERDFFDGgFGDFGDF**`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`**AWS Secret Access Key [None]: wjVDFVdfdfklfF/G6vFGFGr/fsjfERDFFDGgFGDFGDF**`'
- en: '`**Default region name [None]: us-west-2**`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Default region name [None]: us-west-2**`'
- en: '`**Default output format [None]: json**`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Default output format [None]: json**`'
- en: 'Region details are given as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 区域详情如下所示：
- en: '| **Region** | **Region Name** |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **区域** | **区域名称** |'
- en: '| US East (Ohio) | `us-east-2` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 美国东部（俄亥俄州） | `us-east-2` |'
- en: '| US East (N. Virginia) | `us-east-1` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 美国东部（弗吉尼亚北部） | `us-east-1` |'
- en: '| US West (N. California) | `us-west-1` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 美国西部（北加利福尼亚） | `us-west-1` |'
- en: '| US West (Oregon) | `us-west-2` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 美国西部（俄勒冈州） | `us-west-2` |'
- en: '| Asia Pacific (Tokyo) | `ap-northeast-1` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 亚太地区（东京） | `ap-northeast-1` |'
- en: '| Asia Pacific (Seoul) | `ap-northeast-2` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 亚太地区（首尔） | `ap-northeast-2` |'
- en: '| Asia Pacific (Osaka-Local) | `ap-northeast-3` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 亚太地区（大阪-本地） | `ap-northeast-3` |'
- en: '| Asia Pacific (Mumbai) | `ap-south-1` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 亚太地区（孟买） | `ap-south-1` |'
- en: '| Asia Pacific (Singapore) | `ap-southeast-1` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 亚太地区（新加坡） | `ap-southeast-1` |'
- en: '| Asia Pacific (Sydney) | `ap-southeast-2` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 亚太地区（悉尼） | `ap-southeast-2` |'
- en: '| Canada (Central) | `ca-central-1` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 加拿大（中部） | `ca-central-1` |'
- en: '| China (Beijing) | `cn-north-1` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 中国（北京） | `cn-north-1` |'
- en: '| China (Ningxia) | `cn-northwest-1` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 中国（宁夏） | `cn-northwest-1` |'
- en: '| EU (Frankfurt) | `eu-central-1` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 欧洲（法兰克福） | `eu-central-1` |'
- en: '| EU (Ireland) | `eu-west-1` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 欧洲（爱尔兰） | `eu-west-1` |'
- en: '| EU (London) | `eu-west-2` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 欧洲（伦敦） | `eu-west-2` |'
- en: '| EU (Paris) | `eu-west-3` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 欧洲（巴黎） | `eu-west-3` |'
- en: '| South America (São Paulo) | `sa-east-1` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 南美洲（圣保罗） | `sa-east-1` |'
- en: 'Initialize the configuration file by running the following command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令初始化配置文件：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once the configuration is done, the AWS plugin is set in a separate directory
    for further use.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，AWS插件将被设置在一个单独的目录中以供后续使用。
- en: 'Run the configuration in the same directory where your `main.tf` exists. You
    can also pass multiple variables in the command line:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`main.tf`文件相同的目录中运行配置。你还可以通过命令行传递多个变量：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The output is pretty human-readable and equivalent to Git output. The output
    contains the implementation steps in detail. If the implementation starts with
    `+` (a plus sign), that means Terraform is creating resources.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出非常易于阅读，类似于Git输出。输出包含了详细的实现步骤。如果实现以`+`（加号）开始，表示Terraform正在创建资源。
- en: 'Before starting the creation of instances, Terraform will ask for confirmation.
    You can review the plan and click `yes`. If you are running Terraform as part
    of your automation, add `auto-approve` to automatically approve all the configurations:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始创建实例之前，Terraform会要求确认。你可以查看计划并点击`yes`。如果你将Terraform作为自动化的一部分运行，可以添加`auto-approve`来自动批准所有配置：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The instance creation can take some time and once the instances are available,
    you can look for them in the console.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 实例创建可能需要一些时间，一旦实例可用，你可以在控制台中查看它们。
- en: 'To get the current status of Terraform, enter the following command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取Terraform的当前状态，请输入以下命令：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Modifying instances
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改实例
- en: 'To modify the instances, you need to make changes in `main.tf`. For example,
    I''m updating the elastic IP of the instance. The `aws_eip` module is used for
    allocation of elastic IPs:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要修改实例，你需要在`main.tf`中进行更改。例如，我正在更新实例的弹性IP。`aws_eip`模块用于分配弹性IP：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Save the file and run the following commands again to make the changes in the
    instance:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件后，再次运行以下命令以使实例更改生效：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Type `yes` to accept the changes and see the changes using the AWS console,
    or run the `terraform show` command.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`yes`以接受更改，并通过AWS控制台查看更改，或运行`terraform show`命令。
- en: 'Get the output by creating another `output.tf` file in the same directory.
    Add the following configuration details in the file:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在相同目录中创建另一个`output.tf`文件来获取输出。将以下配置详情添加到文件中：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can query separately to the IP output:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以单独查询IP输出：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Terminating instances
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终止实例
- en: 'Instances can be terminated with single commands. Make sure to run the commands
    from the same directory where your `main.tf` exists:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 实例可以通过单个命令终止。确保从与`main.tf`文件相同的目录中运行命令：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you want to forcefully destroy the instance, use the `"-force"` flag with
    the command.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想强制销毁实例，可以使用 `"-force"` 标志与命令一起使用。
- en: Example of instance creation using Terraform
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Terraform 创建实例的示例
- en: 'We have a sample configuration file to create an instance and set up a Route
    53 DNS using that instance. Save the file as `main.tf`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个示例配置文件，用于创建实例并使用该实例设置 Route 53 DNS。将文件保存为 `main.tf`：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'I''ve put the source details in another file, so a single configuration file
    can be used to create multiple machines. Create an `ec2_nodes` folder and create
    `main.tf` inside the directory:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我已经将源文件的详细信息放在另一个文件中，这样可以使用单个配置文件创建多个机器。创建一个 `ec2_nodes` 文件夹，并在该目录中创建 `main.tf`：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we will create another output file inside the same directory, `ec2_nodes`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将在同一目录中创建另一个输出文件，`ec2_nodes`：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the Terraform installation using the following commands:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行 Terraform 安装：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: EC2 CLI
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EC2 CLI
- en: AWS CLI contains multiple modules to manage AWS resources. EC2 CLI is a very
    straightforward way of creating and managing instances.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI 包含多个模块来管理 AWS 资源。EC2 CLI 是创建和管理实例的一种非常直接的方式。
- en: 'Install AWS CLI (commands):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 AWS CLI（命令）：
- en: '`**$ curl -O https://bootstrap.pypa.io/get-pip.py // Download pip**`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`**$ curl -O https://bootstrap.pypa.io/get-pip.py // 下载 pip**`'
- en: '`**$ python get-pip.py --user // Install pip for the user**`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`**$ python get-pip.py --user // 为用户安装 pip**`'
- en: '`**$pip install awscli --upgrade --user // Install AWS CLI (remove --user if
    you want to install for all users)**`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`**$ pip install awscli --upgrade --user // 安装 AWS CLI（如果要为所有用户安装，请删除 --user）**`'
- en: 'Format:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 格式：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output will contain all the details of the instance, including the instance
    ID as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将包含实例的所有详细信息，包括如下的实例 ID：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can get the details of the instance ID:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以获取实例 ID 的详细信息：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To terminate an instance, use the following command:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要终止实例，请使用以下命令：
- en: '[PRE22]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating an Elastic Load Balancer, launch configuration, and Auto Scaling Groups
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Elastic Load Balancer、启动配置和自动扩展组
- en: In this section, we will see how to create ELB and ASG using AWS CLI.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用 AWS CLI 创建 ELB 和 ASG。
- en: Elastic Load Balancer
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Elastic Load Balancer
- en: An ELB automatically distributes a load/traffic across multiple instances in
    a part of different **availability zones** (**AZs**). The member instances can
    be part of single AZ or multiple AZs. An ELB becomes the single point of contact
    for the DNS and the end users. An ELB also monitors the instance via a health
    check; if the instance is healthy, then only the requests will be routed to the
    instance.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ELB 会自动将负载/流量分配到多个实例中，这些实例可以位于不同的 **可用区**（**AZs**）。成员实例可以属于单一的 AZ 或多个 AZ。ELB
    成为 DNS 和最终用户的唯一接入点。ELB 还通过健康检查监控实例；如果实例健康，才会将请求路由到该实例。
- en: 'As we have already created instances, we will create an ELB using CLI. The
    command to do so is as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经创建了实例，接下来将使用 CLI 创建一个 ELB。执行此操作的命令如下：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the newly created instance to the ELB:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 将新创建的实例添加到 ELB：
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: An ELB can be monitored using CloudWatch, access logs, and AWS CloudTrail. An
    ELB can be internal or internet facing. Internet-facing ELBs can be associated
    with domain names.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 CloudWatch、访问日志和 AWS CloudTrail 监控 ELB。ELB 可以是内部的或面向互联网的。面向互联网的 ELB 可以与域名关联。
- en: Auto Scaling Groups
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动扩展组
- en: 'Let''s understand basic infrastructure scaling:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解基础设施扩展的基本概念：
- en: '**Scale out**: Achieving scalability by increasing the number of EC2 instances'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展**：通过增加 EC2 实例的数量来实现可扩展性'
- en: '**Scale up**: Achieving scalability by resizing the capacity (compute, memory,
    and EBS) of existing EC2 instances'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向上扩展**：通过调整现有 EC2 实例的容量（计算、内存和 EBS）来实现可扩展性'
- en: '**Scale down**: Decreasing the number of EC2 instances of the configuration
    for existing EC2'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向下扩展**：减少现有 EC2 配置的 EC2 实例数量'
- en: Auto Scaling takes care of scale out and scale down. Auto Scaling components
    are managed into groups so that they can be treated as separate logical units
    for management and scaling purposes. Auto Scaling Groups use **launch configuration**
    as a template to create EC2 instances
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 自动扩展处理扩展和缩减。自动扩展组件被管理成组，以便它们可以作为单独的逻辑单元进行管理和扩展。自动扩展组使用 **启动配置** 作为模板来创建 EC2
    实例
- en: '[PRE25]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Scaling plans will define the threshold and conditions for triggering the ASG:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展计划将定义触发 ASG 的阈值和条件：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: IAM roles
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IAM 角色
- en: AWS IAM role gives an extra layer of security by managing and rotating the keys
    themselves. Keys are encrypted credentials known as access key and secret key.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: AWS IAM 角色通过管理和旋转密钥本身提供了额外的安全层。密钥是加密的凭证，分别称为访问密钥和密钥。
- en: 'Access key example is as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 访问密钥示例如下：
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: A policy is JSON document consist of permission delegated from one AWS service
    to another AWS service. The default permission of an IAM role is all deny (by
    default blocks all the requests to any service until specified explicitly). Sample
    policy is for creating and managing an EC2 instance, S3 bucket, and Route 53.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 策略是一个 JSON 文档，包含从一个 AWS 服务到另一个 AWS 服务的权限委托。IAM 角色的默认权限是全拒绝（默认情况下会阻止所有对任何服务的请求，直到明确指定）。示例策略用于创建和管理
    EC2 实例、S3 存储桶和 Route 53。
- en: 'Sample policy (save the following text as `myTestKeyPolicy.json`):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 示例策略（将以下文本保存为 `myTestKeyPolicy.json`）：
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at various methods of creating EC2 instances for
    our software deployment. Once an instance has been created, push the software
    jars into your instances. Use the private instance IP, username (`ec2-user`),
    and private key (`test.pem`) to connect to your machine. Once the testing is completed,
    make sure you terminate the test instances so you don't pay for them.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了为软件部署创建 EC2 实例的各种方法。一旦实例创建完成，将软件 JAR 文件推送到实例中。使用私有实例的 IP 地址、用户名（`ec2-user`）和私钥（`test.pem`）连接到机器。一旦测试完成，确保终止测试实例，以免产生额外费用。
- en: '**T2.micro** EC2 instance type is free for use for one year for new AWS accounts.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**T2.micro** EC2 实例类型对于新的 AWS 账户可以免费使用一年。'
- en: Later on in the chapter, we went through the creation of ELBs and ASGs using
    AWS CLI.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们通过 AWS CLI 演示了如何创建 ELB 和 ASG。
- en: You can register your ELB DNS name with your domain service provider (for example,
    Route 53, GoDaddy, and BigRock) to resolve your application.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将您的 ELB DNS 名称注册到您的域名服务提供商（例如，Route 53、GoDaddy 和 BigRock），以解析您的应用程序。
- en: You can also try putting some workload into your application and see whether
    Auto Scaling is increasing the number of instances, and then remove the workload
    to test the termination policy.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以尝试将一些工作负载投入到您的应用程序中，查看 Auto Scaling 是否增加了实例数量，然后移除工作负载以测试终止策略。
- en: You can also use distributed filesystems, such as EFS, NFS, and GlusterFS, to
    share the workspaces among all nodes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用分布式文件系统，如 EFS、NFS 和 GlusterFS，在所有节点之间共享工作空间。
- en: In the next chapter, we will cover the optimization and monitoring of applications
    using Test Cloud and Android monitoring tools. Test cloud is a mobile testing
    tool powered by Xamarin that it tests the applications of over 2000 devices. Android
    Monitor provides a GUI to debug and optimize applications.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍使用 Test Cloud 和 Android 监控工具对应用程序进行优化和监控。Test Cloud 是由 Xamarin 提供支持的移动测试工具，它可以测试超过
    2000 台设备的应用程序。Android Monitor 提供图形界面，用于调试和优化应用程序。
