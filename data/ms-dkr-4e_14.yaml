- en: '*Chapter 14*'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '*第 14 章*'
- en: Docker Security
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 安全性
- en: 'In this chapter, we will take a look at Docker security, a topic at the forefront
    of everyone''s mind these days. We will split the chapter up into the following
    five sections:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点讨论 Docker 安全性，这是当今每个人都关注的话题。我们将把本章分成以下五个部分：
- en: Container considerations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器考虑因素
- en: Docker commands
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 命令
- en: Best practices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践
- en: The Docker Bench security "applications"
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Bench 安全性 "应用程序"
- en: Third-party security services
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方安全服务
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using Docker Desktop, and we will be using Multipass
    to launch a Docker host that we will then launch some poorly configured container
    on. As in the previous chapters, I will be using my preferred operating system,
    which is macOS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Docker Desktop，并且将使用 Multipass 启动一个 Docker 主机，随后在其上启动一些配置不当的容器。和之前的章节一样，我将使用我偏好的操作系统，即
    macOS。
- en: As previously, the Docker commands that we will run will work on all three of
    the operating systems that we have installed Docker on so far. However, some of
    the supporting commands, which will be few and far between, may only apply to
    macOS and Linux-based operating systems.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前一样，我们将运行的 Docker 命令适用于我们至今已安装 Docker 的所有三种操作系统。然而，某些辅助命令（虽然很少见）可能只适用于 macOS
    和基于 Linux 的操作系统。
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3m8ubVd](https://bit.ly/3m8ubVd)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码的实际操作：[https://bit.ly/3m8ubVd](https://bit.ly/3m8ubVd)
- en: Container considerations
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器考虑因素
- en: When Docker was first released, there was a lot of talk about Docker versus
    virtual machines. I remember reading articles in magazines, commenting on threads
    on Reddit, and reading endless blog posts. In the early days of the Docker alpha
    and beta versions, people used to approach Docker containers like virtual machines,
    because there weren't really any other points of reference, and we viewed them
    as tiny VMs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Docker 首次发布时，有很多关于 Docker 与虚拟机对比的讨论。我记得曾在杂志上阅读相关文章，在 Reddit 上评论线程，并阅读无数的博客文章。在
    Docker 的 alpha 和 beta 版本的早期，人们曾像对待虚拟机一样使用 Docker 容器，因为当时并没有其他参考点，我们把它们看作是微型虚拟机。
- en: In the past, I would enable SSH, run multiple processes in containers, and even
    create my container images by launching a container and running the commands to
    install my software stack. We discussed in [*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068),
    *Building Container Images*, that you should never install, configure, and export
    SSH on your containers as it is regarded as a bad practice as Docker provides
    ways for you to access your containers without having to use SSH.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，我会启用 SSH，在容器中运行多个进程，甚至通过启动容器并运行命令来安装我的软件栈，从而创建我的容器镜像。我们在 [*第 2 章*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068)《构建容器镜像》中讨论过，你不应该在容器上安装、配置和导出
    SSH，因为这被视为一种不良做法，而 Docker 提供了不需要使用 SSH 就能访问容器的方法。
- en: So, rather than discussing containers versus virtual machines, let's look at
    some of the considerations that you need to make when running containers, rather
    than virtual machines.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，与其讨论容器与虚拟机的对比，不如看看在运行容器时需要做的一些考虑事项，而不是虚拟机。
- en: The advantages
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优势
- en: When you start a Docker container, Docker Engine does a lot of work behind the
    scenes. One of the tasks that Docker Engine performs when launching your containers
    is setting up namespaces and control groups. What does that mean? By setting up
    namespaces, Docker keeps the processes isolated in each container, not only from
    other containers but also from the host system. The control groups ensure that
    each container gets its own share of items, such as CPU, memory, and disk `I/O`.
    More importantly, they ensure that one container doesn't exhaust all of the resources
    on a given Docker host.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动一个 Docker 容器时，Docker 引擎在后台做了很多工作。Docker 引擎启动容器时执行的其中一项任务是设置命名空间和控制组。这意味着什么呢？通过设置命名空间，Docker
    将每个容器中的进程进行隔离，不仅与其他容器隔离，还与宿主系统隔离。控制组确保每个容器获得自己的资源份额，例如 CPU、内存和磁盘 `I/O`。更重要的是，它们确保一个容器不会耗尽
    Docker 主机上的所有资源。
- en: As we saw in [*Chapter 4*](B15659_04_Final_JM_ePub.xhtml#_idTextAnchor133)*,
    Managing Containers*, being able to launch your containers in a Docker controlled
    network means that you can isolate your containers at the application level; all
    of the containers for Application A will not have any access, at the network layer,
    to the containers for Application B.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第 4 章*](B15659_04_Final_JM_ePub.xhtml#_idTextAnchor133)*《容器管理》*中看到的那样，能够在
    Docker 控制的网络中启动容器意味着你可以在应用层隔离你的容器；应用程序 A 的所有容器将无法在网络层访问应用程序 B 的容器。
- en: Additionally, this network isolation can run on a single Docker host by using
    the default network driver, or it can span multiple Docker hosts by using Docker
    Swarm's built-in, multi-host networking driver, or the Weave Net driver from Weave.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过使用默认的网络驱动程序，这种网络隔离可以在单个 Docker 主机上运行，或者通过使用 Docker Swarm 内置的多主机网络驱动程序，或者使用
    Weave 提供的 Weave Net 驱动程序，可以跨多个 Docker 主机进行。
- en: Lastly, what I consider one of the most significant advantages of Docker over
    a typical virtual machine is that you shouldn't have to log in to the container.
    Docker is trying its hardest to keep you from needing to log in to a container
    to manage the process that it is running. With commands such as `docker container
    exec`, `docker container top`, `docker container logs`, and `docker container
    stats`, you can do everything that you need to do, without exposing any more services
    than you have to.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我认为 Docker 相较于典型虚拟机的最大优势之一是你不需要登录到容器中。Docker 正在尽最大努力避免你需要登录容器来管理它正在运行的进程。通过诸如
    `docker container exec`、`docker container top`、`docker container logs` 和 `docker
    container stats` 等命令，你可以在不暴露任何多余服务的情况下完成所需的所有操作。
- en: Your Docker hosts
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的 Docker 主机
- en: When you are dealing with virtual machines, you can control who has access to
    which virtual machine. Let's suppose that you only want **User 1**, who is a developer,
    to have access to the development VMs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理虚拟机时，你可以控制谁有权访问哪台虚拟机。假设你只希望**用户 1**，一个开发人员，能够访问开发环境的虚拟机。
- en: However, **User 2** is an operator who is responsible for both the development
    and production environments, so they need access to all of the VMs. Most virtual
    machine management tools allow you to grant role-based access to your VMs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，**用户 2** 是负责开发和生产环境的操作员，因此他们需要访问所有虚拟机。大多数虚拟机管理工具允许你为虚拟机授予基于角色的访问权限。
- en: With Docker, you are at a slight disadvantage because everyone who has access
    to Docker Engine on your host, either through being granted sudo access or by
    having their user added to the Docker Linux group, will have access to every Docker
    container that you are running on that host.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker 时，你处于一个轻微的劣势，因为任何能够访问你主机上 Docker Engine 的人，无论是通过被授予 sudo 权限，还是通过将其用户添加到
    Docker Linux 组，都将能够访问你在该主机上运行的所有 Docker 容器。
- en: They can run new containers, they can stop existing containers, and they can
    delete images as well. Be careful to whom you grant permission to access Docker
    Engine on your hosts. They mostly hold the keys to the kingdom, concerning all
    of your containers. Knowing this, it is recommended to use Docker hosts only for
    Docker; keep other services separate from your Docker hosts.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以运行新容器，可以停止现有容器，还可以删除镜像。小心你向谁授予访问主机上 Docker Engine 的权限。因为他们基本上掌握了所有容器的控制权。知道这一点后，建议仅将
    Docker 主机用于 Docker，避免将其他服务与 Docker 主机混合使用。
- en: Image trust
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 镜像信任
- en: If you are running virtual machines, you will most likely be setting them up
    yourself, from scratch. It's likely that, due to the size of the download (and
    also the effort in launching it), you will not download a prebuilt machine image
    that some random person on the internet created. Typically, if you were to do
    this, it would be a prebuilt virtual appliance from a trusted software vendor.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行虚拟机，通常你会自己从零开始设置它们。由于下载的体积较大（并且启动它也需要一些努力），你很可能不会下载一个由互联网上某个随机人创建的预构建机器镜像。通常，如果你这样做，那会是一个来自受信软件供应商的预构建虚拟设备。
- en: So, you will be aware of what is inside the virtual machine and what isn't,
    as you were responsible for building and maintaining it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你将知道虚拟机内部的内容以及没有的内容，因为你负责构建和维护它。
- en: Part of the appeal of Docker is its ease of use; however, this ease of use can
    make it easy to ignore a quite crucial security consideration – do you know what
    it is running inside your container?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 的吸引力之一是它的易用性；然而，这种易用性可能会让人忽视一个非常关键的安全问题——你知道容器内正在运行什么吗？
- en: We have already touched upon image trust in earlier chapters. For example, we
    spoke about not publishing or downloading images that haven't been defined using
    Dockerfiles, and not embedding custom code or secrets (and so on) directly into
    an image that you will be pushing to Docker Hub.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的章节中已经提到了镜像的信任问题。例如，我们提到过不发布或下载未使用 Dockerfile 定义的镜像，也不将自定义代码或秘密（等）直接嵌入到您推送到
    Docker Hub 的镜像中。
- en: While containers have the protection of namespaces, control groups, and network
    isolation, we discussed how a poorly judged image download could introduce security
    concerns and risk into your environment. For example, a legitimate container running
    an unpatched piece of software can add risk to the availability of your application
    and data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然容器具备命名空间、控制组和网络隔离的保护机制，但我们讨论了如何不慎下载镜像可能会引入安全隐患和风险。例如，运行未打补丁的合法容器软件可能会对您的应用程序和数据的可用性带来风险。
- en: Now that we have covered some basic principles, let's take a look at the Docker
    commands that can be used to help tighten up security, as well as to view information
    about the images that you might be using.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了一些基本原则，让我们看看可以用于增强安全性并查看您可能使用的镜像信息的 Docker 命令。
- en: Docker commands
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 命令
- en: There are two commands that we will be looking at. The first will be the `docker
    container run` command so that you can see some of the items that you can use
    to your advantage with this command. Secondly, we will take a look at the `docker
    container diff` command, which you can use to view what has been done with the
    image that you are planning to use.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看两条命令。第一条是 `docker container run` 命令，您可以看到在该命令下可以利用的一些项。第二条是 `docker container
    diff` 命令，您可以使用它查看您计划使用的镜像已经发生了什么变化。
- en: Let's take a look at how we can use these two commands to help secure our containers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用这两个命令来帮助加固我们的容器安全。
- en: The Docker Run command
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 运行命令
- en: With respect to the `docker run` command, we will mainly focus on the option
    that allows you to set everything inside the container as read-only, instead of
    a specified directory or volume. This helps to limit the amount of damage that
    can be caused by malicious "applications" that could also hijack a vulnerable
    application by updating its binaries.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `docker run` 命令方面，我们将主要关注一个选项，它允许您将容器内的所有内容设置为只读，而不是指定某个目录或卷。这有助于限制恶意“应用程序”造成的损害，因为它们也可能通过更新二进制文件劫持一个脆弱的应用程序。
- en: 'Let''s take a look at how to launch a read-only container, and then break down
    what it does, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何启动一个只读容器，然后逐步解析它的作用，如下所示：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, we are running a MySQL container and setting the entire container as
    read-only, except for the following folders:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们运行一个 MySQL 容器并将整个容器设置为只读，除了以下文件夹：
- en: '`/var/lib/mysql`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/lib/mysql`'
- en: '`/var/run/mysqld`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/run/mysqld`'
- en: '`/tmp`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/tmp`'
- en: These will be created as three separate volumes, and then mounted as read/write.
    If you do not add these volumes, then MySQL will not be able to start, as it needs
    read/write access to be able to create the socket file in `/var/run/mysqld`, some
    temporary files in `/tmp`, and finally, the databases themselves, in `/var/lib/mysql`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将被创建为三个独立的卷，并以读写方式挂载。如果您没有添加这些卷，MySQL 将无法启动，因为它需要读写访问权限来创建 `/var/run/mysqld`
    中的套接字文件、`/tmp` 中的一些临时文件，以及最终在 `/var/lib/mysql` 中的数据库文件。
- en: 'Any other location inside the container won''t allow you to write anything
    in it. If you tried to run the following, it would fail:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 容器内的其他位置将无法进行写入。如果您尝试运行以下命令，它将失败：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding command would give you the following message:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令会给出以下信息：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This can be extremely helpful if you want to control where the containers can
    write to (or not write to). Be sure to use this wisely. Test thoroughly, as there
    can be consequences when "applications" can't write to certain locations.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望控制容器的写入位置（或不允许写入的位置），这将非常有用。务必明智地使用此功能，并进行彻底测试，因为当“应用程序”无法写入某些位置时可能会产生后果。
- en: Similar to the previous command, with `docker container run`, where we set everything
    to read-only (except for a specified volume), we can do the opposite and set just
    a single volume (or more, if you use more `-v` switches) to read-only.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的命令类似，使用 `docker container run` 时，我们将所有内容设置为只读（除非指定了某个卷），我们也可以做到相反的操作，只将一个单独的卷（如果使用多个
    `-v` 参数，更多卷也可以）设置为只读。
- en: 'The thing to remember about volumes is that when you use a volume and mount
    it in a container, it will mount as an empty volume over the top of the directory
    inside the container, unless you use the `--volumes-from` switch or add data to
    the container in some other way after it has been launched; for example, you could
    use something like the following command (which will not work):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 关于卷需要记住的一点是，当你在容器中使用并挂载一个卷时，它会作为一个空卷覆盖容器内的目录，除非你使用`--volumes-from`开关或在容器启动后以其他方式向容器添加数据；例如，你可能会使用如下命令（此命令将无法运行）：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will mount `/local/path/to/html/` from the Docker host to `/var/www/html/`
    and will set it to read-only. This can be useful if you don't want a running container
    to write to a volume, to keep the data or configuration files intact.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把Docker主机上的`/local/path/to/html/`挂载到`/var/www/html/`，并将其设置为只读模式。如果你不希望正在运行的容器写入卷以保持数据或配置文件不被更改，这将非常有用。
- en: The docker diff command
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker的`diff`命令
- en: Let's take another look at the `docker diff` command; since it relates to the
    security aspects of containers, you may want to use the images that are hosted
    on Docker Hub or other related repositories.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次查看`docker diff`命令；因为它涉及容器的安全性方面，你可能想使用托管在Docker Hub或其他相关仓库上的镜像。
- en: Remember that whoever has access to your Docker host and the Docker daemon has
    access to all of your running Docker containers. That being said, if you don't
    have monitoring in place, someone could be executing commands against your containers
    and doing malicious things.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，任何能够访问你Docker主机和Docker守护进程的人，都能够访问你所有正在运行的Docker容器。换句话说，如果你没有监控措施，某人可能会针对你的容器执行命令并做出恶意行为。
- en: 'Let''s take a look at the MySQL container that we launched in the previous
    section:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下我们在前一节中启动的MySQL容器：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You will notice that no files are returned. Why is that?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到没有返回任何文件。这是为什么呢？
- en: Well, the `docker diff` command tells you the changes that have been made to
    the image since the container was launched. In the previous section, we launched
    the MySQL container with the image read-only and then mounted volumes to where
    we knew MySQL would need to be able to read and write – meaning that there are
    no file differences between the image that we downloaded and the container that
    we are running.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker diff`命令告诉你自容器启动以来镜像的变化。在前面的部分，我们以只读模式启动了MySQL容器，并挂载了卷，以便MySQL能够进行读写操作——这意味着我们下载的镜像和正在运行的容器之间没有文件差异。'
- en: 'Stop and remove the MySQL container, then prune the volumes by running the
    following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 停止并删除MySQL容器，然后运行以下命令修剪卷：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, launch the same container again, minus the read-only flag and volumes;
    this gives us a different story, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新启动相同的容器，但去掉只读标志和卷挂载；这样会得到不同的情况，具体如下：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, there were two folders created, and several files added:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，已经创建了两个文件夹，并且添加了几个文件：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is a great way to spot anything untoward or unexpected that may be going
    on within your container. Now that we have looked at how we can launch our containers
    more securely, let's discuss some of the other best practices we can apply.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好地发现容器内任何异常或意外情况的方法。现在我们已经了解了如何更安全地启动容器，接下来让我们讨论一些可以应用的其他最佳实践。
- en: Best practices
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: In this section, we will look at best practices when it comes to Docker. Some
    of these we have already mentioned in previous chapters. We will then discuss
    the **Center for Internet Security** guide, which documents how to properly secure
    all aspects of your Docker environment.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨与Docker相关的最佳实践。我们之前的一些章节已经提到过其中的部分内容。接下来，我们将讨论**互联网安全中心**指南，它详细记录了如何正确地保护你Docker环境的各个方面。
- en: Docker best practices
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker最佳实践
- en: 'Before we dive into the Center for Internet Security guide, let''s go over
    some of the best practices for using Docker, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨《互联网安全中心指南》之前，让我们先回顾一些使用Docker的最佳实践，如下所示：
- en: '**Only launch one application per container**: Docker was built for this, and
    it makes everything easier, at the end of the day. The isolation that we discussed
    earlier is where this is key.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每个容器只启动一个应用程序**：Docker就是为此设计的，它让一切变得更加简单。最终，这种隔离性正是我们之前讨论的关键所在。'
- en: '**Only install what you need**: As we already covered in previous chapters,
    if you have to install more services to support the one process your container
    should be running, I would recommend that you review the reasons why. This not
    only keeps your images small and portable, but it also reduces the potential attack
    surface.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**只安装必要的软件**：正如我们在前几章中提到的，如果你必须安装更多的服务来支持容器应运行的唯一进程，我建议你重新审视这些原因。这不仅有助于保持镜像的小巧和可移植性，还能减少潜在的攻击面。'
- en: '**Review who has access to your Docker hosts**: Remember, whoever has root
    or sudo access to your Docker hosts has access to manipulate all of the images
    and running containers on the host, as well the ability to launch new ones.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审查谁能访问你的 Docker 主机**：记住，任何拥有 root 或 sudo 权限的人都可以访问你的 Docker 主机，操作主机上所有的镜像和正在运行的容器，并且能够启动新的容器。'
- en: '**Always use the latest version of Docker**: This will ensure that all security
    holes have been patched and that you have the latest features as well. While fixing
    security issues, keeping up to date using the community version may introduce
    problems caused by changes in functionality or new features. If this is a concern
    for you, then you might want to look at the LTS Enterprise versions available
    from Docker.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终使用最新版本的 Docker**：这将确保所有的安全漏洞都已经修补，并且你也可以使用到最新的功能。虽然更新安全问题，使用社区版可能会带来由于功能变化或新增功能所引发的问题。如果这对你来说是个问题，那么你可能需要查看
    Docker 提供的 LTS 企业版。'
- en: '**Use the resources available if you need help**: The Docker community is huge
    and immensely helpful. Use their website, documentation, and the Slack chat rooms
    to your advantage when planning your Docker environment and assessing platforms.
    For more information on how to access Slack and other parts of the community,
    see [*Chapter 16*](B15659_16_Final_JM_ePub.xhtml#_idTextAnchor922), *Next Steps
    with Docker*.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果需要帮助，利用可用资源**：Docker 社区庞大且极为友好。在规划 Docker 环境和评估平台时，利用他们的网站、文档和 Slack 聊天室。有关如何访问
    Slack 和社区其他部分的信息，请参见 [*第16章*](B15659_16_Final_JM_ePub.xhtml#_idTextAnchor922)，*与
    Docker 的下一步*。'
- en: The Center for Internet Security benchmark
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互联网安全中心基准
- en: The Center for Internet Security (CIS) is an independent, non-profit organization
    whose goal is to provide a secure online experience. They publish benchmarks and
    controls that are considered best practices for all aspects of IT.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网安全中心**（CIS）是一个独立的非营利组织，旨在提供安全的在线体验。他们发布的基准和控制措施被视为 IT 各个方面的最佳实践。'
- en: The CIS benchmark for Docker is available for download, for free. You should
    note that it is currently a 257-page PDF, released under the Creative Commons
    license, and it covers Docker CE 18.09 and later.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 的 CIS 基准可以免费下载。你应该注意到，它目前是一本 257 页的 PDF，发布在创意共享许可下，涵盖了 Docker CE 18.09
    及更高版本。
- en: 'You will be referring to this guide when you actually run the scan (in the
    next section of this chapter) and get results back as to what needs to (or should
    be) fixed. The guide is broken down into the following sections:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当你实际运行扫描并得到需要修复（或建议修复）的结果时，你将参考本指南（在本章的下一部分）。该指南分为以下几个部分：
- en: '**Host configuration**: This part of the guide is about the configuration of
    your Docker hosts. This is the part of the Docker environment where all your containers
    run. Thus, keeping it secure is of the utmost importance. This is the first line
    of defense against attackers.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机配置**：本指南的这一部分涉及 Docker 主机的配置。这是 Docker 环境中运行所有容器的地方，因此，保持其安全性至关重要。这是防御攻击者的第一道防线。'
- en: '**Docker daemon configuration**: This part of the guide has the recommendations
    that secure the running Docker daemon. Everything that you do to the Docker daemon
    configuration affects each and every container. These are the switches that you
    can attach to the Docker daemon that we saw previously, and to the items you will
    see in the next section when we run through the tool.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 守护进程配置**：本指南的这一部分提供了确保 Docker 守护进程安全运行的建议。你对 Docker 守护进程配置的每一项操作都会影响到每个容器。这里是你可以附加到
    Docker 守护进程的开关，之前我们已经提到过，并且接下来在我们运行工具时，你将会看到相关项。'
- en: '**Docker daemon configuration files**: This part of the guide deals with the
    files and directories that the Docker daemon uses. This ranges from permissions
    to ownership. Sometimes, these areas may contain information that you don''t want
    others to know about, which could be in a plain text format.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 守护进程配置文件**：本部分指南处理 Docker 守护进程使用的文件和目录。这些包括权限设置和所有权。有时，这些区域可能包含一些你不希望他人知道的信息，而这些信息可能是以纯文本格式存储的。'
- en: '**Container images/runtime and build files**: This part of the guide contains
    both the information for securing the container images and the build files. The
    first part contains images, covering base images, and the build files that were
    used. As we covered previously, you need to be sure about the images that you
    are using, not only for your base images, but for any aspect of your Docker experience.
    This section of the guide covers the items that you should follow while creating
    your own base images.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器镜像/运行时和构建文件**：本部分指南包含了有关保护容器镜像和构建文件的信息。第一部分涉及镜像，包括基础镜像，以及使用的构建文件。正如我们之前所述，你需要对自己使用的镜像非常确定，不仅仅是基础镜像，还包括
    Docker 环境中的任何方面。本节将涵盖你在创建自己基础镜像时应遵循的事项。'
- en: '**Container runtime**: This section was previously a part of a later section,
    but it has been moved into its own section in the CIS guide. The container runtime
    covers a lot of security-related items. Be careful with the runtime variables
    that you are using. In some cases, attackers can use them to their advantage,
    when you think you are using them to your own advantage. Exposing too much in
    your containers, such as exposing application secrets and database connections
    as environment variables, can compromise the security of not only your container
    but the Docker host and the other containers running on that host.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器运行时**：这一部分原本是后面章节的一部分，但已被移到 CIS 指南中的独立章节。容器运行时涉及很多与安全相关的内容。请小心使用的运行时变量。在某些情况下，攻击者可能会利用这些变量达到自己的目的，而你可能认为它们有利于自己。如果在容器中暴露过多内容，比如将应用程序的密钥和数据库连接作为环境变量暴露出来，可能不仅会危及容器的安全，还会危及
    Docker 主机以及在该主机上运行的其他容器的安全。'
- en: '**Docker security operations**: This part of the guide covers the security
    areas that involve deployment; the items are more closely tied to Docker best
    practices. Because of this, it is best to follow these recommendations.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 安全操作**：本部分指南涵盖了涉及部署的安全领域，这些项目与 Docker 最佳实践紧密相关。因此，遵循这些建议是最好的做法。'
- en: The Docker Bench Security application
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Bench Security 应用程序
- en: 'In this section, we will cover the Docker Bench Security application that you
    can install and run. The tool will inspect the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍可以安装和运行的 Docker Bench Security 应用程序。该工具将检查以下内容：
- en: The host configuration
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机配置
- en: The Docker daemon configuration files
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 守护进程配置文件
- en: Container images and build files
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器镜像和构建文件
- en: The container runtime
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器运行时
- en: The Docker security operations Docker Swarm configuration
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 安全操作 Docker Swarm 配置
- en: Looks familiar? It should, as these are the same items that we reviewed in the
    previous section, only built into an application that will do a lot of the heavy
    lifting for you. It will show you what warnings arise within your configurations
    and will provide information on other configuration items, and even the items
    that have passed the test.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很熟悉吗？应该是的，因为这些项目正是我们在上一节中审查过的内容，只不过它们已经被整合到一个应用程序中，帮你完成了许多繁重的工作。它会展示你配置中出现的警告，并提供其他配置项的信息，甚至包括通过测试的项。
- en: Now, we will look at how to run the tool, a live example, and what the output
    of the process means.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将介绍如何运行该工具、一个实际示例，以及该过程的输出意味着什么。
- en: Running the tool on Docker for macOS and Docker for Windows
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 macOS 上运行 Docker 工具和在 Windows 上运行 Docker 工具
- en: Running the tool is simple. It's already been packaged for us, inside a Docker
    container. While you can get the source code and customize the output or manipulate
    it in some way (say, emailing the output), the default may be all that you need.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该工具非常简单。它已经打包在一个 Docker 容器中了。虽然你可以获取源代码并自定义输出或以某种方式处理它（比如通过邮件发送输出），但默认配置可能已经足够满足你的需求。
- en: 'The tool''s GitHub project can be found at [https://github.com/docker/docker-bench-security/](https://github.com/docker/docker-bench-security/),
    and to run the tool on a macOS or Windows machine, you simply have to copy and
    paste the following into your Terminal. The following command is missing the line
    needed to check `systemd`, as Moby Linux, which is the underlying operating system
    for Docker for macOS and Docker for Windows, does not run `systemd`. We will look
    at a `systemd`-basedsystem when we run the container on an Ubuntu Docker host:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具的 GitHub 项目可以在 [https://github.com/docker/docker-bench-security/](https://github.com/docker/docker-bench-security/)
    找到，要在 macOS 或 Windows 机器上运行此工具，只需将以下内容复制并粘贴到你的终端中。以下命令缺少检查 `systemd` 所需的行，因为 Moby
    Linux（Docker for macOS 和 Docker for Windows 的底层操作系统）并不运行 `systemd`。当我们在 Ubuntu
    Docker 主机上运行容器时，我们将查看一个基于 `systemd` 的系统：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the image has been downloaded, it will launch and immediately start to
    audit your Docker host, printing the results as it goes, as shown in the following
    screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像下载完成，它会启动并立即开始审计你的 Docker 主机，打印出审计结果，具体如下面的截图所示：
- en: '![Figure 14.1 – Running a Docker Bench Security check'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.1 – 运行 Docker Bench 安全检查'
- en: '](img/image_00_0014.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0014.jpg)'
- en: Figure 14.1 – Running a Docker Bench Security check
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1 – 运行 Docker Bench 安全检查
- en: As you can see, there are a few warnings **[WARN]**, as well as notes **[NOTE]**
    and information **[INFO]**; however, as this host is managed by Docker, as you
    would expect, there is not too much to worry about.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有一些警告 **[WARN]**，还有提示 **[NOTE]** 和信息 **[INFO]**；然而，由于该主机由 Docker 管理，正如你所预期的那样，问题并不严重，不需要过多担心。
- en: Running on Ubuntu Linux
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行在 Ubuntu Linux 上
- en: 'Before we look into the output of the audit in a little more detail, I am going
    to launch a vanilla Ubuntu server using `multipass` and perform a clean installation
    of Docker using the official installer by running the following commands:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细查看审计输出之前，我将使用 `multipass` 启动一个纯净的 Ubuntu 服务器，并通过运行以下命令使用官方安装程序进行 Docker 的清洁安装：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once installed, I will launch a few containers, all of which don''t have very
    sensible settings. I will launch the following two containers from Docker Hub:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我将启动几个容器，它们的设置都不太合理。我将从 Docker Hub 启动以下两个容器：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, I will build a custom image, based on Ubuntu 16.04, that runs SSH using
    the following `Dockerfile`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我将构建一个基于 Ubuntu 16.04 的自定义镜像，并通过以下 `Dockerfile` 运行 SSH：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I will build and launch the preceding Dockerfile using the following commands:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用以下命令构建并启动前面的 Dockerfile：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, in one image, we are mounting the root filesystem of our host
    with full read/write access in the `root-nginx` container. We are also running
    with extended privileges in `priv-nginx`, and finally, running SSH in `sshd`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在这张图片中，我们将主机的根文件系统以完全读/写权限挂载在 `root-nginx` 容器中。我们还在 `priv-nginx` 中以扩展权限运行，最后，在
    `sshd` 中运行 SSH。
- en: Important note
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Please do run the previous Dockerfile or containers outside of this test; we
    are purposely launching containers that ignore best practices to get results from
    the scan.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必在此测试之外运行前面的 Dockerfile 或容器；我们故意启动不遵循最佳实践的容器，以便从扫描中获取结果。
- en: 'To start the audit on our Ubuntu Docker host, I ran the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始在我们的 Ubuntu Docker 主机上进行审计，我运行了以下命令：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As we are running on an operating system that supports `systemd`, we are mounting
    `/usr/lib/systemd` so that we can audit it.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们运行的操作系统支持 `systemd`，我们将 `/usr/lib/systemd` 挂载以便进行审计。
- en: There is a lot of output and a lot to digest, but what does it all mean? Let's
    take a look and break down each section.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多输出内容需要消化，但这些都意味着什么呢？让我们一起来看看并逐一解析每个部分。
- en: Understanding the output
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解输出内容
- en: 'There are four types of output that we will see, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到四种类型的输出，具体如下：
- en: '`[PASS]`: These items are solid and good to go. They don''t need any attention
    but are good to read, to make you feel warm inside. The more of these, the better!'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[PASS]`：这些项目是稳健且无问题的，可以继续使用。它们无需任何关注，但阅读它们会让你心里暖暖的。越多越好！'
- en: '`[WARN]`: These are those items that need to be fixed. These are the items
    that we don''t want to see.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[WARN]`：这些是需要修复的项目。我们不希望看到这些。'
- en: '`[INFO]`: These are items that you should review and fix if you feel they are
    pertinent to your setup and security needs.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[INFO]`：这些是你应该检查并修复的项目，如果你认为它们与你的设置和安全需求相关的话。'
- en: '`[NOTE]`: These give best-practice advice.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[NOTE]`：这些是最佳实践建议。'
- en: 'As mentioned, there are seven main sections that are covered in the audit,
    as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，审计涵盖了七个主要部分，如下所示：
- en: Host configuration
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机配置
- en: Docker daemon configuration
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 守护进程配置
- en: Docker daemon configuration files
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 守护进程配置文件
- en: Container images and build files
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器镜像和构建文件
- en: The container runtime
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器运行时
- en: Docker security operations
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 安全操作
- en: Docker Swarm configuration
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm 配置
- en: Let's take a look at what we see in each section of the scan. These scan results
    are from a default Ubuntu Docker host, with no tweaks made to the system at this
    point. We want to focus on the `[WARN]` items in each section.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在每个扫描部分中看到的内容。这些扫描结果来自一个默认的 Ubuntu Docker 主机，当前系统没有做任何调整。我们将重点关注每个部分中的`[WARN]`项。
- en: Other warnings may come up when you run yours, but these will be the ones that
    come up for most people (if not for everyone) at first.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时可能会出现其他警告，但这些是大多数人（如果不是所有人）初次使用时会遇到的警告。
- en: Host configuration
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主机配置
- en: 'I had five items with a `[WARN]` status for my host configuration, as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我的主机配置中有五个`[WARN]`状态项，如下所示：
- en: '[PRE14]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'By default, Docker uses `/var/lib/docker` on the host machine to store all
    of its files, including all images, containers, and volumes created by the default
    driver. This means that this folder may grow quickly. As my host machine is running
    a single partition (and depending on what your containers are doing), this could
    potentially fill the entire drive, which would render my host machine unusable:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker 在主机机器上使用`/var/lib/docker`来存储所有文件，包括所有镜像、容器和由默认驱动程序创建的卷。这意味着该文件夹可能会迅速增长。由于我的主机机器只运行一个分区（并且取决于容器的操作），这可能会填满整个硬盘，从而使我的主机无法使用：
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These warnings are being flagged because `auditd` is not installed, and there
    are no audit rules for the Docker daemon and associated files; for more information
    on `auditd`, see the blog post at [https://www.linux.com/topic/desktop/customized-file-monitoring-auditd/](https://www.linux.com/topic/desktop/customized-file-monitoring-auditd/).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这些警告被触发是因为`auditd`未安装，且没有为 Docker 守护进程及相关文件配置审计规则；有关`auditd`的更多信息，请参阅博客文章：[https://www.linux.com/topic/desktop/customized-file-monitoring-auditd/](https://www.linux.com/topic/desktop/customized-file-monitoring-auditd/)。
- en: Docker daemon configuration
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Docker 守护进程配置
- en: 'My Docker daemon configuration flagged up seven `[WARN]` statuses, as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我的 Docker 守护进程配置标记了七个`[WARN]`状态项，如下所示：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'By default, Docker allows traffic to pass between containers unrestricted,
    on the same host. It is possible to change this behavior; for more information
    on Docker networking, see [https://docs.docker.com/network/](https://docs.docker.com/network/):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker 允许在同一主机上的容器之间不受限制地传递流量。你可以更改此行为；有关 Docker 网络的更多信息，请参阅：[https://docs.docker.com/network/](https://docs.docker.com/network/)：
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'By default, the user namespace is not remapped. Mapping them, while possible,
    can currently cause issues with several Docker features; see [https://docs.docker.com/engine/reference/commandline/dockerd/](https://docs.docker.com/engine/reference/commandline/dockerd/)
    for more details on known restrictions:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，用户命名空间没有被重新映射。尽管可以进行映射，但这目前可能会导致与多个 Docker 功能相关的问题；有关已知限制的详细信息，请参阅：[https://docs.docker.com/engine/reference/commandline/dockerd/](https://docs.docker.com/engine/reference/commandline/dockerd/)：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'A default installation of Docker allows unrestricted access to the Docker daemon;
    you can limit access to authenticated users by enabling an authorization plugin.
    For more details, see [https://docs.docker.com/engine/extend/plugins_authorization/](https://docs.docker.com/engine/extend/plugins_authorization/):'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 的默认安装允许不受限制地访问 Docker 守护进程；你可以通过启用授权插件来限制访问仅限于经过认证的用户。详细信息请参阅：[https://docs.docker.com/engine/extend/plugins_authorization/](https://docs.docker.com/engine/extend/plugins_authorization/)：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As I am only running a single host, I am not using a service such as `rsyslog`
    to ship my Docker host''s logs to a central server, nor have I configured a log
    driver on my Docker daemon; see [https://docs.docker.com/config/containers/logging/configure/](https://docs.docker.com/config/containers/logging/configure/)
    for more details:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我只运行一个主机，我没有使用像`rsyslog`这样的服务将我的 Docker 主机日志传送到中央服务器，也没有在 Docker 守护进程上配置日志驱动程序；有关更多详细信息，请参阅：[https://docs.docker.com/config/containers/logging/configure/](https://docs.docker.com/config/containers/logging/configure/)：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `--live-restore` flag enables full support of daemon-less containers in
    Docker; this means that, rather than stopping containers when the daemon shuts
    down, they continue to run, and it properly reconnects to the containers when
    restarted.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`--live-restore`标志启用 Docker 守护进程无状态容器的完全支持；这意味着，当守护进程关闭时，容器不会停止运行，而是继续运行，并且在重启后能够正确重新连接到容器。'
- en: 'It is not enabled by default, due to backward compatibility issues. For more
    details, see [https://docs.docker.com/config/containers/live-restore/](https://docs.docker.com/config/containers/live-restore/%20):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下未启用此功能，这是由于向后兼容性问题。有关更多详细信息，请参阅 [https://docs.docker.com/config/containers/live-restore/](https://docs.docker.com/config/containers/live-restore/%20)：
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'There are two ways that your containers can route to the outside world: either
    by using a hairpin NAT, or a userland proxy. For most installations, the hairpin
    NAT mode is the preferred mode, as it takes advantage of iptables and has better
    performance. Where this is not available, Docker uses the userland proxy. Most
    Docker installations on modern operating systems will support hairpin NAT. For
    details on how to disable the userland proxy, see [https://docs.docker.com/config/containers/container-networking/](https://docs.docker.com/config/containers/container-networking/):'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你的容器可以通过两种方式连接到外部世界：使用发夹 NAT 或用户空间代理。对于大多数安装，发夹 NAT 模式是首选模式，因为它利用了 iptables，并且性能更好。在此不可用时，Docker
    会使用用户空间代理。大多数现代操作系统上的 Docker 安装都支持发夹 NAT。有关如何禁用用户空间代理的详细信息，请参阅 [https://docs.docker.com/config/containers/container-networking/](https://docs.docker.com/config/containers/container-networking/)：
- en: '[PRE22]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This stops the processes within the containers from potentially gaining any
    additional privileges by setting `suid` or `sgid` bits; this could limit the impact
    of any dangerous operations trying to access privileged binaries.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置 `suid` 或 `sgid` 位，阻止容器内的进程可能获得额外的权限；这可以限制任何尝试访问特权二进制文件的危险操作的影响。
- en: Docker daemon configuration files
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Docker 守护进程配置文件
- en: I had no `[WARN]` statuses in this section, which is to be expected, as Docker
    was deployed using the Docker installer.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中没有 `[WARN]` 状态，这是预期的，因为 Docker 是通过 Docker 安装程序部署的。
- en: Container images and build files
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 容器镜像和构建文件
- en: 'I had three `[WARN]` statuses for container images and build files; you may
    notice that multi-line warnings are prefixed with `*` after the status:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我在容器镜像和构建文件中发现了三个 `[WARN]` 状态；你可能注意到，多行警告在状态后会以 `*` 为前缀：
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The processes in the containers that I am running are all running as the root
    user; this is the default action of most containers. For more information, see
    [https://docs.docker.com/engine/security/security/](https://docs.docker.com/engine/security/security/):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在运行的容器中的进程都以 root 用户身份运行；这是大多数容器的默认行为。有关更多信息，请参阅 [https://docs.docker.com/engine/security/security/](https://docs.docker.com/engine/security/security/)：
- en: '[PRE24]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Enabling Content Trust for Docker ensures the provenance of the container images
    that you are pulling, as they are digitally signed when you push them; this means
    that you are always running the images that you intended to run. For more information
    on Content Trust, see [https://docs.docker.com/engine/security/trust/content_trust/](https://docs.docker.com/engine/security/trust/content_trust/):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 Docker 的内容信任可以确保你拉取的容器镜像的来源，因为当你推送镜像时，它们会被数字签名；这意味着你总是运行你打算运行的镜像。有关内容信任的更多信息，请参阅
    [https://docs.docker.com/engine/security/trust/content_trust/](https://docs.docker.com/engine/security/trust/content_trust/)：
- en: '[PRE25]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When building your image, it is possible to build in a `HEALTHCHECK`; this ensures
    that when a container launches from your image, Docker will periodically check
    the status of your container and, if needed, it will restart or relaunch it. More
    details can be found at [https://docs.docker.com/engine/reference/builder/#healthcheck](https://docs.docker.com/engine/reference/builder/#healthcheck).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建镜像时，可以设置 `HEALTHCHECK`；这确保当从你的镜像启动容器时，Docker 会定期检查容器的状态，如果需要，它会重启或重新启动容器。更多详情请参阅
    [https://docs.docker.com/engine/reference/builder/#healthcheck](https://docs.docker.com/engine/reference/builder/#healthcheck)。
- en: The container runtime
  id: totrans-170
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 容器运行时
- en: 'As we were a little silly when launching our containers on the Docker host
    that we audited, we know that there will be a lot of vulnerabilities here, and
    there are 11 of them altogether:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在启动我们审核的 Docker 主机上的容器时有些不太谨慎，我们知道这里会有很多漏洞，总共有 11 个：
- en: '[PRE26]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The preceding vulnerability is a false positive – we are not running SELinux,
    as it is an Ubuntu machine, and SELinux is only applicable to Red Hat-based machines.
    Instead, 5.1 shows us the result, which is a `[PASS]`, which we want:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 前述的漏洞是一个假阳性——我们并没有运行 SELinux，因为这是一个 Ubuntu 系统，而 SELinux 仅适用于基于 Red Hat 的系统。相反，5.1
    向我们展示了结果，即一个 `[PASS]`，这是我们希望看到的：
- en: '[PRE27]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The next `[WARN]` status is of our own making, as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个 `[WARN]` 状态是我们自己造成的，如下所示：
- en: '[PRE28]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following is also of our own making:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容也是我们自己造成的：
- en: '[PRE29]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: These can be safely ignored; it should be very rare that you have to launch
    a container running in `Privileged mode`. It is only if your container needs to
    interact with Docker Engine running on your Docker host; for example, when you
    are running a GUI (such as Portainer), which we covered in [*Chapter 9*](B15659_09_Final_JM_ePub.xhtml#_idTextAnchor261),
    *Portainer – A GUI for Docker*.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以安全忽略；应该非常少见需要启动运行在 `Privileged mode` 模式下的容器。只有当你的容器需要与 Docker 主机上的 Docker
    引擎进行交互时才需要这种模式；例如，当你运行 GUI（如 Portainer）时，我们在 [*第 9 章*](B15659_09_Final_JM_ePub.xhtml#_idTextAnchor261)
    中讨论过，*Portainer - Docker 的图形界面*。
- en: We have also discussed that you should not be running SSH in your containers.
    There are a few use cases, such as running a jump host within a certain network;
    however, these should be the exception.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论过你不应该在容器中运行 SSH。有一些用例，比如在特定网络中运行跳板主机；但这些应该是例外。
- en: 'The next two `[WARN]` statuses are flagged because, by default on Docker, all
    running containers on your Docker hosts share the resources equally; setting limits
    on memory and the CPU priority for your containers will ensure that the containers
    that you want to have a higher priority are not starved of resources by lower-priority
    containers:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个 `[WARN]` 状态被标记，因为在 Docker 中，默认情况下，所有运行中的容器会平等地共享 Docker 主机上的资源；为容器设置内存和
    CPU 优先级限制将确保你希望具有更高优先级的容器不会被较低优先级的容器饿死资源：
- en: '[PRE30]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As we already discussed earlier in the chapter, if possible, you should be
    launching your containers as read-only, and mounting volumes for where you know
    your process needs to write data to:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章前面讨论过的那样，如果可能的话，你应该以只读方式启动容器，并挂载你知道需要写入数据的卷：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The reason the following flags are raised is that we are not telling Docker
    to bind our exposed port to a specific IP address on the Docker host:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 提出以下标志的原因是我们没有告诉 Docker 将我们暴露的端口绑定到 Docker 主机上的特定 IP 地址：
- en: '[PRE32]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'As my test Docker host only has a single NIC, this isn''t too much of a problem.
    However, if my Docker host had multiple interfaces, then this container would
    be exposed to all of the networks, which could be a problem if I had, for example,
    an external and internal network. See [https://docs.docker.com/network/](https://docs.docker.com/network/)
    for more details:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我的测试 Docker 主机只有一个网络接口卡，这不是一个大问题。然而，如果我的 Docker 主机有多个接口，那么该容器将暴露给所有网络，如果我有外部和内部网络，这可能会成为问题。更多细节请参考
    [https://docs.docker.com/network/](https://docs.docker.com/network/)：
- en: '[PRE33]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Although I haven''t launched my containers using the `--restart` flag, there
    is no default value for `MaximumRetryCount`. This means that if a container failed
    over and over, it would quite happily sit there attempting to restart. This could
    have a negative effect on the Docker host; adding a `MaximumRetryCount` of `5`
    will mean that the container will attempt to restart five times before giving
    up:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我没有使用 `--restart` 标志启动我的容器，但 `MaximumRetryCount` 没有默认值。这意味着，如果一个容器反复失败，它会安稳地继续尝试重启。这可能会对
    Docker 主机产生负面影响；设置 `MaximumRetryCount` 为 `5` 将意味着容器在放弃之前会尝试重启五次：
- en: '[PRE34]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'By default, Docker does not put a restriction on a process or its child processes
    gaining new privileges via `suid` or `sgid` bits. To find out details on how you
    can stop this behavior, see [https://www.projectatomic.io/blog/2016/03/no-new-privs-docker/](https://www.projectatomic.io/blog/2016/03/no-new-privs-docker/):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker 不会限制进程或其子进程通过 `suid` 或 `sgid` 位获得新权限。要了解如何停止这种行为的细节，请参考 [https://www.projectatomic.io/blog/2016/03/no-new-privs-docker/](https://www.projectatomic.io/blog/2016/03/no-new-privs-docker/)：
- en: '[PRE35]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Again, we are not using any health checks, meaning that Docker will not periodically
    check the status of your containers. To see the GitHub issue for the pull request
    that introduced this feature, see [https://github.com/moby/moby/pull/22719](https://github.com/moby/moby/pull/22719):'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，我们没有使用任何健康检查，这意味着 Docker 不会定期检查容器的状态。要查看引入此功能的拉取请求的 GitHub 问题，请参考 [https://github.com/moby/moby/pull/22719](https://github.com/moby/moby/pull/22719)：
- en: '[PRE36]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Potentially, an attacker could trigger a fork bomb with a single command inside
    your container. This has the potential to crash your Docker host, and the only
    way to recover would be to reboot the host. You can protect against this by using
    the `--pids-limit` flag. For more information, see the pull request at [https://github.com/moby/moby/pull/18697](https://github.com/moby/moby/pull/18697).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在地，攻击者可以通过在你的容器内输入一个命令触发 fork bomb，这可能会崩溃你的 Docker 主机，而恢复的唯一方法就是重启主机。你可以通过使用
    `--pids-limit` 参数来防止这种情况。有关更多信息，请参见 [https://github.com/moby/moby/pull/18697](https://github.com/moby/moby/pull/18697)。
- en: Docker security operations
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Docker 安全操作
- en: 'This section includes `[INFO]` about best practices, as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包括有关最佳实践的 `[INFO]` 信息，如下所示：
- en: '[PRE37]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Docker Swarm configuration
  id: totrans-199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Docker Swarm 配置
- en: This section includes `[PASS]` information, as we don't have Docker Swarm enabled
    on the host.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包括 `[PASS]` 信息，因为我们没有在主机上启用 Docker Swarm。
- en: Removing the Multipass machine
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除 Multipass 机器
- en: 'Once you have finished with the Ubuntu server, you can remove it by running
    the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了对 Ubuntu 服务器的操作，你可以运行以下命令来移除它：
- en: '[PRE38]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Remember, there is no warning when running the preceding command; it will delete
    the running machine straight away.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，运行上述命令时不会出现任何警告；它会立即删除正在运行的机器。
- en: Summing up Docker Bench
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结 Docker Bench
- en: As you have seen, running Docker Bench against your Docker host is a much better
    way to get an understanding of how your Docker host stacks up against the CIS
    Docker Benchmark; it is certainly a lot more manageable than manually working
    through every single test in the 257-page document.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，通过对 Docker 主机运行 Docker Bench，能更好地了解你的 Docker 主机在 CIS Docker 基准测试中的表现；这显然比手动检查257页文档中的每个测试更为高效。
- en: Now that we have covered how you can assess and secure your Docker host, let's
    quickly discuss how we can secure images.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了如何评估和保护 Docker 主机，接下来快速讨论一下如何保护镜像。
- en: Third-party security services
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方安全服务
- en: Before we finish this chapter, we are going to take a look at some of the third-party
    services available to help you with the vulnerability assessment of your images.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，我们将看看一些第三方服务，它们可以帮助你评估镜像的漏洞。
- en: Quay
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Quay
- en: Quay, an image registry by Red Hat, is similar to Docker Hub/Registry; one difference
    is that Quay actually performs a security scan of each image after it is pushed/built.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Quay 是由 Red Hat 提供的镜像注册中心，类似于 Docker Hub/Registry；不同之处在于，Quay 在镜像推送/构建后，会对每个镜像执行安全扫描。
- en: 'You can see the results of the scan by viewing the **Repository Tags** for
    your chosen image. Here you will see a column for **Security Scan**. As you can
    see in the following screenshot, in the example image that we created, there are
    no problems:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查看所选镜像的**Repository Tags**来查看扫描结果。在这里，你会看到一个**Security Scan**的列。如以下截图所示，在我们创建的示例镜像中，没有发现任何问题：
- en: '![Figure 14.2 – A passed security scan on Quay'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.2 – Quay 上通过的安全扫描'
- en: '](img/image_00_0024.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0024.jpg)'
- en: Figure 14.2 – A passed security scan on Quay
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – Quay 上通过的安全扫描
- en: Clicking on **Passed** will take you to a more detailed breakdown of any vulnerabilities
    that have been detected within the image. As there are no vulnerabilities at the
    moment (which is a good thing), this screen does not tell us much. However, clicking
    on the **Packages** icon in the left-hand menu will present us with a list of
    the packages that the scan has discovered.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **Passed** 会将你带到更详细的漏洞报告页面，展示图像中检测到的任何漏洞。由于目前没有漏洞（这是好事），此页面不会显示太多信息。然而，点击左侧菜单中的
    **Packages** 图标，我们将看到扫描所发现的软件包列表。
- en: 'For our test image, it has found 34 packages with no vulnerabilities, all of
    which are displayed here, along with confirmation of the version of the package,
    and how they were introduced to the image:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的测试镜像，它发现了 34 个没有漏洞的软件包，所有这些软件包都显示在这里，并确认了软件包的版本及其如何被引入镜像：
- en: '![Figure 14.3 – A list of all packages installed'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.3 – 所有已安装包的列表'
- en: '](img/image_00_0034.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0034.jpg)'
- en: Figure 14.3 – A list of all packages installed
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3 – 所有已安装包的列表
- en: As you can also see, Quay is scanning our publicly available image, which is
    being hosted on the free-of-charge open source plan that Quay offers. Security
    scanning comes as standard with all plans on Quay.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你也可以看到，Quay 正在扫描我们公开的镜像，该镜像托管在 Quay 提供的免费开源计划中。安全扫描是 Quay 所有计划的标准配置。
- en: Clair
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Clair
- en: Clair is an open source project from Red Hat. In essence, it is a service that
    provides the static analysis functionality for both the hosted version of Quay
    and the commercially supported, enterprise version.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Clair 是 Red Hat 的一个开源项目。本质上，它是一个为托管版 Quay 和商业支持的企业版提供静态分析功能的服务。
- en: 'It works by creating a local mirror of the following vulnerability databases:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理是创建以下漏洞数据库的本地镜像：
- en: 'Debian Security Bug Tracker: [https://security-tracker.debian.org/tracker/](https://security-tracker.debian.org/tracker/)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Debian 安全漏洞追踪器：[https://security-tracker.debian.org/tracker/](https://security-tracker.debian.org/tracker/)
- en: 'Ubuntu CVE Tracker: [https://launchpad.net/ubuntu-cve-tracker/](https://launchpad.net/ubuntu-cve-tracker/%20)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu CVE 追踪器：[https://launchpad.net/ubuntu-cve-tracker/](https://launchpad.net/ubuntu-cve-tracker/%20)
- en: 'Red Hat Security Data: [https://www.redhat.com/security/data/metrics/](https://www.redhat.com/security/data/metrics/)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat 安全数据：[https://www.redhat.com/security/data/metrics/](https://www.redhat.com/security/data/metrics/)
- en: 'Oracle Linux Security Data: [https://linux.oracle.com/security/](https://linux.oracle.com/security/)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle Linux 安全数据：[https://linux.oracle.com/security/](https://linux.oracle.com/security/)
- en: 'Alpine SecDB: [https://git.alpinelinux.org/cgit/alpine-secdb/](https://git.alpinelinux.org/cgit/alpine-secdb/)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alpine SecDB：[https://git.alpinelinux.org/cgit/alpine-secdb/](https://git.alpinelinux.org/cgit/alpine-secdb/)
- en: 'NIST NVD: [https://nvd.nist.gov/](https://nvd.nist.gov/)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NIST NVD：[https://nvd.nist.gov/](https://nvd.nist.gov/)
- en: Once it has mirrored the data sources, it mounts the image's filesystem, and
    then performs a scan of the installed packages, comparing them to the signatures
    in the preceding data sources.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它镜像了数据源，它会挂载镜像的文件系统，然后执行安装包的扫描，将其与前面数据源中的签名进行比较。
- en: Clair is not a straightforward service; it only has an API-driven interface,
    and there are no fancy web-based or command-line tools that ship with Clair by
    default. The documentation for the API can be found at [https://app.swaggerhub.com/apis/coreos/clair/3.0](https://app.swaggerhub.com/apis/coreos/clair/3.0).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Clair 不是一个简单的服务；它仅有一个 API 驱动的接口，并没有默认随 Clair 提供的华丽的基于 Web 的或命令行工具。API 的文档可以在
    [https://app.swaggerhub.com/apis/coreos/clair/3.0](https://app.swaggerhub.com/apis/coreos/clair/3.0)
    找到。
- en: The installation instructions can be found at the project's GitHub page, at
    [https://github.com/quay/clair/](https://github.com/quay/clair/).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 安装说明可以在项目的 GitHub 页面找到，网址是 [https://github.com/quay/clair/](https://github.com/quay/clair/)。
- en: Also, you can find a list of tools that support Clair on its integration page,
    at [https://github.com/quay/clair/blob/master/Documentation/integrations.md](https://github.com/quay/clair/blob/master/Documentation/integrations.md).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以在 Clair 的集成页面找到支持 Clair 的工具列表，网址是 [https://github.com/quay/clair/blob/master/Documentation/integrations.md](https://github.com/quay/clair/blob/master/Documentation/integrations.md)。
- en: Before we finish, there is one more tool to look at, and this is one we can
    run locally.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束之前，我们还有一个工具需要介绍，它是我们可以在本地运行的工具。
- en: Anchore
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Anchore
- en: The final tool that we are going to cover is Anchore. This comes in several
    versions; there are cloud-based offerings and an "on-premises" enterprise version,
    both of which come with a full, web-based graphical interface. There is a version
    that hooks into Jenkins, and also the open source command-line scanner, which
    is what we are going to take a look at now.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要介绍的最终工具是 Anchore。它有多个版本；有基于云的版本和一个“本地”企业版本，二者都带有完整的基于 Web 的图形界面。还有一个版本可以与
    Jenkins 集成，此外还有一个开源的命令行扫描工具，这就是我们现在要介绍的内容。
- en: 'This version is distributed as a Docker Compose file, so we will start by creating
    the folders that we need, and we will also download the Docker Compose file:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本作为 Docker Compose 文件分发，因此我们将首先创建所需的文件夹，并下载 Docker Compose 文件：
- en: '[PRE39]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now that we have the basics in place, you can pull the images and start the
    containers, as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了基本配置，你可以拉取镜像并启动容器，具体步骤如下：
- en: '[PRE40]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Before we can interact with our Anchore deployment, we need the command-line
    client. Luckily, the Docker Compose file we downloaded comes with a container
    running the client configured out of the box:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在与我们的 Anchore 部署交互之前，我们需要命令行客户端。幸运的是，我们下载的 Docker Compose 文件自带一个配置好的客户端容器：
- en: '[PRE41]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This will show you the overall status of your installation; it might take a
    minute or two from when you first launched for everything to show as up and running:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示你安装的整体状态；从你第一次启动开始，可能需要一两分钟，才能显示所有内容正常运行：
- en: '![Figure 14.4 – Checking the status of the Anchore engine'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.4 – 检查 Anchore 引擎的状态'
- en: '](img/image_00_0044.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0044.jpg)'
- en: Figure 14.4 – Checking the status of the Anchore engine
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4 – 检查 Anchore 引擎的状态
- en: 'The next command shows you where Anchore is in the database sync:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令显示了 Anchore 在数据库同步中的位置：
- en: '[PRE42]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'As you can see in the following screenshot, my installation is currently syncing
    the databases. This process can take up to a few hours; however, for our example,
    we are going to be scanning an Alpine Linux-based database, which are the first
    databases to be downloaded:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在以下截图中看到的，我的安装目前正在同步数据库。这个过程可能需要几个小时；但是，对于我们的示例，我们将扫描一个基于 Alpine Linux 的数据库，这些是第一个下载的数据库：
- en: '![ Figure 14.5 – Checking the status of the feed download'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '![ 图 14.5 – 检查源下载状态'
- en: '](img/image_00_0054.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0054.jpg)'
- en: Figure 14.5 – Checking the status of the feed download
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.5 – 检查源下载状态
- en: 'Next up, we have to grab an image to scan; let''s grab an older image, as follows:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要获取一个镜像进行扫描；让我们获取一个旧的镜像，如下所示：
- en: '[PRE43]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'It will take a minute or two to run its initial scan; you can check the status
    by running the following command:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 执行初始扫描可能需要一两分钟；你可以通过运行以下命令来检查状态：
- en: '[PRE44]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'After a while, the status should change from **analyzing** to **analyzed**:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等一会，状态应从**分析中**更改为**已分析**：
- en: '[PRE45]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This will show you an overview of the image, as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示镜像的概览，如下所示：
- en: '![Figure 14.6 – Viewing information on the analyzed image'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.6 – 查看已分析镜像的信息'
- en: '](img/image_00_0064.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0064.jpg)'
- en: Figure 14.6 – Viewing information on the analyzed image
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.6 – 查看已分析镜像的信息
- en: 'You can then view a list of problems (if there are any) by running the following
    command:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来查看问题列表（如果有的话）：
- en: '[PRE46]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'As you can see in the following screenshot, each package that is listed has
    the current version, a link to the CVE issue, and also confirmation of the version
    number that fixes the reported issue:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在以下截图中看到的，每个列出的包都有当前版本、CVE 问题的链接，并确认了修复该问题的版本号：
- en: '![ Figure 14.7 – Reviewing the vulnerabilities found by Anchore'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '![ 图 14.7 – 审查 Anchore 查找到的漏洞'
- en: '](img/image_00_0074.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0074.jpg)'
- en: Figure 14.7 – Reviewing the vulnerabilities found by Anchore
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.7 – 审查 Anchore 查找到的漏洞
- en: 'You can use the following commands to remove the Anchore containers and database
    volume:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令来移除 Anchore 容器和数据库卷：
- en: '[PRE47]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Also, don't forget to remove the `anchore` folder we created at the start of
    the section.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，别忘了删除我们在本节开始时创建的`anchore`文件夹。
- en: Summary
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered some aspects of Docker security. First, we took
    a look at some of the things that you must consider when running containers (versus
    typical virtual machines) with regard to security. We looked at the advantages
    and your Docker host, and then we discussed image trust. We then took a look at
    the Docker commands that we can use for security purposes.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们介绍了 Docker 安全性的几个方面。首先，我们查看了运行容器时（与典型虚拟机相比）在安全性方面必须考虑的一些问题。我们查看了 Docker
    主机的优势，接着讨论了镜像信任。然后，我们了解了可以用于安全目的的 Docker 命令。
- en: We launched a read-only container so that we could minimize any potential damage
    an intruder could do within our running containers. As not all "applications"
    lend themselves to running in read-only containers, we then looked at how we can
    track changes that have been made to the image since it was launched. It is always
    useful to be able to easily discover any changes that were made on the filesystem
    at runtime when trying to look into any problems.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动了一个只读容器，以便最小化潜在的入侵者在我们运行的容器中可能造成的损害。由于并非所有“应用程序”都适合在只读容器中运行，我们随后查看了如何追踪自镜像启动以来所做的更改。在排查任何问题时，能够轻松发现运行时在文件系统上所做的更改总是非常有用的。
- en: 'Next, we discussed the Center for Internet Security guidelines for Docker.
    This guide will assist you in setting up multiple aspects of your Docker environment.
    Lastly, we took a look at Docker Bench Security. We looked at how to get it up
    and running, and we ran through an example of what the output would look like.
    We then analyzed the output to see what it meant. Remember the seven items that
    the application covered: the host configuration, the Docker daemon configuration,
    the Docker daemon configuration files, the container images and build files, the
    container runtime, the Docker security operations, and the Docker Swarm configuration.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了互联网安全中心（Center for Internet Security）针对 Docker 的指导方针。该指南将帮助你设置 Docker
    环境的多个方面。最后，我们查看了 Docker Bench Security。我们了解了如何启动并运行它，并演示了输出结果的示例。随后，我们分析了输出内容并解释其含义。请记住该应用程序涵盖的七个项目：主机配置、Docker
    守护进程配置、Docker 守护进程配置文件、容器镜像和构建文件、容器运行时、Docker 安全操作和 Docker Swarm 配置。
- en: In the next chapter, we will look at how Docker can fit into your existing workflows,
    as well as some new ways to approach working with containers.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Docker 如何融入你现有的工作流程，以及一些与容器协作的新方式。
- en: Questions
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: When launching a container, how can we make all of it, or parts of it, read-only?
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动容器时，如何使整个容器或部分容器为只读模式？
- en: How many processes should you be running per container?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个容器应该运行多少个进程？
- en: What is the best way to check your Docker installation against the CIS Docker
    benchmark?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的 Docker 安装是否符合 CIS Docker 基准测试的最佳方法是什么？
- en: When running the Docker Bench Security application, what should be mounted?
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Docker Bench Security 应用程序时，应该挂载什么？
- en: 'True or false: Quay only supports image scanning for private images'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断正误：Quay 仅支持对私有镜像进行扫描
- en: Further reading
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For more information, visit the website at [https://www.cisecurity.org/](https://www.cisecurity.org/).
    The Docker Benchmark can be found at [https://www.cisecurity.org/benchmark/docker/](https://www.cisecurity.org/benchmark/docker/).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请访问网站 [https://www.cisecurity.org/](https://www.cisecurity.org/)。Docker
    基准测试可以在 [https://www.cisecurity.org/benchmark/docker/](https://www.cisecurity.org/benchmark/docker/)
    找到。
