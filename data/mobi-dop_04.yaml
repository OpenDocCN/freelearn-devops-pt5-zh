- en: Writing Your First Android Application with Xamarin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Xamarin 编写您的第一个 Android 应用
- en: Now that Visual Studio is installed on your Windows machine to start development,
    and the **Android Virtual Device** (**AVD**) is ready, we can get started with
    our first Android application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Visual Studio 已经安装在你的 Windows 机器上，开发环境已经准备好，**Android 虚拟设备**（**AVD**）也已经就绪，我们可以开始第一个
    Android 应用的开发了。
- en: In this chapter, we are going to build our first Android application using Xamarin
    in Visual Studio, while learning some fundamentals of Android application development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Xamarin 在 Visual Studio 中构建我们的第一个 Android 应用，同时学习 Android 应用开发的一些基础知识。
- en: Create your first Android project
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个 Android 项目
- en: 'To create a new Android project in Visual Studio, follow these steps:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中创建一个新的 Android 项目，按照以下步骤操作：
- en: 'Click on File | New | Project:'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 文件 | 新建 | 项目：
- en: '![](img/c3540c2c-8a09-4416-a758-4e13256dfd54.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3540c2c-8a09-4416-a758-4e13256dfd54.png)'
- en: 'From the left pane, click on Android and then select Blank App (Android):'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧面板中点击 Android，然后选择空白应用（Android）：
- en: '![](img/fa3f306f-bacf-4960-9230-53d1ee62706b.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa3f306f-bacf-4960-9230-53d1ee62706b.png)'
- en: 'In the Name section, give a name to the project, select a preferred location
    for your project, and click on the OK button. You''ll get the screen shown in
    the following screenshot:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称部分，为项目命名，选择项目的首选位置，然后点击 OK 按钮。你将看到如下截图：
- en: '![](img/22796db1-aabe-46ca-87d3-8443eb399fef.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22796db1-aabe-46ca-87d3-8443eb399fef.png)'
- en: Congratulations, you've created your first Android project in Visual Studio.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你已经在 Visual Studio 中创建了第一个 Android 项目。
- en: Xamarin solution structure
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xamarin 解决方案结构
- en: 'Once the project is created, you''ll see the solution structure shown in the
    following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目创建完成，你将看到如下截图所示的解决方案结构：
- en: '![](img/90bb4fbe-52fe-47ae-8f68-32437fd509b2.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90bb4fbe-52fe-47ae-8f68-32437fd509b2.png)'
- en: 'The main parts of the solution that we need to understand for now are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们需要理解的解决方案的主要部分如下：
- en: '**References**: This section lists all the required libraries for the project.
    As we can see in the preceding screenshot, it references `Mono.Android`, which
    is the library for `Xamarin.Android`.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引用**：此部分列出了项目所需的所有库。正如我们在前面的截图中看到的，它引用了 `Mono.Android`，这是 `Xamarin.Android`
    的库。'
- en: '**Resources**: It contains all the resources, for example, images, layouts,
    and much more.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**：它包含所有的资源，例如图片、布局等等。'
- en: The `MainActivity.cs` file has our C# code for handling events and other things
    in our main screen.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainActivity.cs` 文件包含了我们用于处理事件和其他事项的 C# 代码。'
- en: Creating the UI for the application
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为应用程序创建 UI
- en: 'Let''s expand the `Resources` folder we saw in the previous screenshot, and
    then the `layout` folder in Solution Explorer. Double-click on `Main.axml` to
    open it. This is the layout file for the app''s screen. By default, it gets opened
    in Android Designer; you can also click on the Source tab at the bottom to see
    the XML code for it. This layout file is the main UI file that we''ll add our
    UI controls to, and what we''ll see when we run our app once it is finished:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们展开在前一截图中看到的 `Resources` 文件夹，然后展开解决方案资源管理器中的 `layout` 文件夹。双击 `Main.axml` 以打开它。这是应用程序屏幕的布局文件。默认情况下，它会在
    Android 设计器中打开；你也可以点击底部的 Source 标签查看其 XML 代码。这个布局文件是我们将添加 UI 控件的主要文件，也是我们运行应用程序时看到的界面：
- en: '![](img/5211f296-5d3d-4f29-8993-819ca85cea24.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5211f296-5d3d-4f29-8993-819ca85cea24.png)'
- en: 'Let''s add an input field to enter a phone number. Drag the Phone field from
    the Toolbox (left pane) into the Designer view of the `Main.axml` file:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个输入框来输入电话号码。从工具箱（左侧面板）中拖动“Phone”字段到 `Main.axml` 文件的设计视图中：
- en: '![](img/396daaba-43c0-49b8-9b2a-aacc9621437b.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/396daaba-43c0-49b8-9b2a-aacc9621437b.png)'
- en: Having the phone text field gives us the advantage of restricting the user to
    entering a phone number. Also, when the user taps on the input box, they'll only
    get a number pad instead of a full text keyboard.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有电话号码文本框的好处是可以限制用户只输入电话号码。同时，当用户点击输入框时，他们只会看到数字键盘，而不是完整的文字键盘。
- en: Now we have added an input for the user to add a phone number in order to make
    a call.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经为用户添加了一个输入框，用来输入电话号码，以便拨打电话。
- en: In order to recognize this field from the C# code and get a value inserted,
    we need to give it a unique ID.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 C# 代码中识别这个字段并插入一个值，我们需要为它指定一个唯一的 ID。
- en: 'With the phone text field selected on the design surface, use the Properties
    pane on the right side to change the id property of the Phone input field to @+id/PhoneNumber,
    as shown in the following screenshot:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计表面上选择电话文本字段时，使用右侧的属性面板将电话号码输入字段的 ID 属性更改为 @+id/PhoneNumber，如下图所示：
- en: '![](img/0ce4d81c-d39d-41ca-b55a-09f3b5084af9.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ce4d81c-d39d-41ca-b55a-09f3b5084af9.png)'
- en: Now that we have added the input field so the user can enter their phone number,
    we need a button to take the action to make a call.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经添加了输入字段，用户可以在其中输入电话号码，接下来我们需要一个按钮来执行拨打电话的操作。
- en: 'Drag a Button from Form Widgets in the left pane of the Toolbox to the Designer
    view of `Main.axml`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工具箱左侧窗格中的表单小部件拖动一个按钮到 `Main.axml` 的设计视图中：
- en: '![](img/636422bb-e839-4703-a813-c61972e670d8.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/636422bb-e839-4703-a813-c61972e670d8.png)'
- en: Similar to the input field, we need to give a unique ID to the button so that
    our C# code can recognize when the button is clicked and we can take the appropriate
    action; that is, make a call to the number inserted by the user.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 与输入字段类似，我们需要给按钮赋予一个唯一的 ID，这样我们的 C# 代码才能识别按钮何时被点击，并采取适当的行动；即拨打用户输入的号码。
- en: Also, the text on the button should say `Do you want to call`, right? So, let's
    make that change as well in the next step.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，按钮上的文本应该写成 `Do you want to call`，对吧？那么我们在下一步中也要做这个修改。
- en: 'Select Button in the Designer, go to the Properties window on the right, scroll
    down, and change the ID to @+id/CallButton and the text to CALL, as shown in the
    following screenshot:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计器中选择按钮，进入右侧的属性窗口，向下滚动并将 ID 更改为 @+id/CallButton，文本更改为 CALL，如下图所示：
- en: '![](img/230814f4-911a-44c3-936b-2672d8973b46.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/230814f4-911a-44c3-936b-2672d8973b46.png)'
- en: Now, a basic UI is ready for our app with a proper ID assigned to the respective
    fields and button.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的应用程序的基本 UI 已经准备就绪，所有字段和按钮都有了适当的 ID。
- en: It is now time to move to our C# code and connect our UI with some backend code
    to perform some actions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候转到我们的 C# 代码，将 UI 与后端代码连接起来，以执行某些操作。
- en: When a user opens the application, `MainActivity` is opened and the `Main.axml`
    file is associated with it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户打开应用程序时，`MainActivity` 会被打开，并且与之关联的是 `Main.axml` 文件。
- en: We will learn more about Activities later; for now, let's write code to handle
    interactions in `MainActivity`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将详细了解 Activities；现在，让我们编写代码来处理 `MainActivity` 中的交互。
- en: Handling user interactions
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理用户交互
- en: User interaction is the most important aspect of developing a mobile application.
    A mobile app should be interactive and easy to use.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 用户交互是开发移动应用程序最重要的方面。一个移动应用程序应该是互动的且易于使用的。
- en: 'In this basic application, we will be writing our user interaction code in
    C# and it will be part of the `MainActivity.cs` file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个基本应用程序中，我们将用 C# 编写用户交互代码，并将其作为 `MainActivity.cs` 文件的一部分：
- en: 'Let''s click on the `MainActivity.cs` file from the Solution Explorer on the
    left and open it:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击左侧解决方案资源管理器中的 `MainActivity.cs` 文件并打开它：
- en: '![](img/8257be22-e764-4664-8408-13eead70d835.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8257be22-e764-4664-8408-13eead70d835.png)'
- en: It has some autogenerated code that we are going to modify in order to make
    our application work.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它有一些自动生成的代码，我们将修改这些代码，以便使我们的应用程序正常工作。
- en: 'We need to write our code inside the `OnCreate()` method of the `MainActivity.cs`
    file:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在 `MainActivity.cs` 文件的 `OnCreate()` 方法中编写代码：
- en: '![](img/0e972491-63ba-4274-a873-d5bc82e2f989.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e972491-63ba-4274-a873-d5bc82e2f989.png)'
- en: 'Before we start writing user interaction code, let''s understand the autogenerated
    code first:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写用户交互代码之前，先理解一下自动生成的代码：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This piece of code calls the `OnCreate()` method of the parent/base class of
    `MainActivity.cs`, which is `Activity.cs`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码调用了 `MainActivity.cs` 的父类/基类 `Activity.cs` 的 `OnCreate()` 方法。
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As the comments already say, it sets the view from our layout resource file,
    `Main.axml`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如注释所说，它设置了来自我们布局资源文件 `Main.axml` 的视图。
- en: We need to write our `SetContentView(Resource.Layout.Mai)` code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编写 `SetContentView(Resource.Layout.Mai)` 代码。
- en: First, get a reference to the controls that were created in the `layout` file
    via Android Designer, that is, the input box for the phone number and the button
    to make a call.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过 Android Designer 获取在 `layout` 文件中创建的控件引用，也就是电话号码输入框和拨打电话的按钮。
- en: 'Add the following code inside the `OnCreate()` method:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `OnCreate()` 方法中添加以下代码：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we have a reference to the controls, we can write events to perform
    an action on the CALL button click. Let''s write an event for the CALL button
    click:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经获得了控件的引用，可以编写事件来在点击 CALL 按钮时执行操作。让我们为 CALL 按钮的点击编写一个事件：
- en: Type `callButton.Click +=` (IntelliSense will give you a suggestion to hit *Tab*).
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`callButton.Click +=`（IntelliSense将为您提供一个建议，按*Tab*键即可）。
- en: Hit the *Tab* key to autocomplete.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Tab*键以自动完成。
- en: This will create a method named `CallButton_Click`.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个名为`CallButton_Click`的方法。
- en: 'We''ll be using this newly created method to write our code for the button
    click as follows:'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用这个新创建的方法来编写按钮点击的代码，代码如下：
- en: '![](img/45df2f40-2c27-46d7-a5fd-0f5cbd86c921.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45df2f40-2c27-46d7-a5fd-0f5cbd86c921.png)'
- en: 'Because we are writing our `Click` event in a separate method, let''s declare
    the button and input the field variables that we used earlier in a global scope,
    where all the methods of the class can have access to their reference. Declare
    the following variables on the class level:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们将`Click`事件写在了一个单独的方法中，接下来让我们在类的全局作用域中声明按钮和输入框变量，这样类中的所有方法都可以访问它们的引用。请在类级别声明以下变量：
- en: '`EditText phoneNumberInput;`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EditText phoneNumberInput;`'
- en: '`Button callButton;`'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Button callButton;`'
- en: 'The `OnCreate()` method should now look as shown in following screenshot:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`OnCreate()`方法现在应该如以下截图所示：'
- en: '![](img/155645d4-85f3-4ef3-955d-d08704f69f9a.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/155645d4-85f3-4ef3-955d-d08704f69f9a.png)'
- en: 'In the `CallButton_Click`, we get the value inserted in the input field by
    the user:'
  id: totrans-68
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CallButton_Click`方法中，我们获取用户在输入框中插入的值：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we create an alert dialog box to ask for the user''s confirmation before
    making the actual call. To make that dialog box, write the following code:'
  id: totrans-70
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个警告对话框，在实际拨打电话之前请求用户确认。要创建该对话框，请编写以下代码：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We need to set two things in this dialog box:'
  id: totrans-72
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在此对话框中设置两件事：
- en: 'Message to show the user:'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示给用户的消息：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Events for the OK and Cancel buttons of the dialog box:'
  id: totrans-75
  prefs:
  - PREF_OL
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对话框的OK和Cancel按钮的事件：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Make some more changes to make the code look like the following screenshot:'
  id: totrans-77
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行一些修改，使代码看起来像下面的截图：
- en: '![](img/1edddd6f-4bc7-449d-9a3f-0362c7c7a605.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1edddd6f-4bc7-449d-9a3f-0362c7c7a605.png)'
- en: 'The code to handle user interaction is now complete; let''s select the emulator
    from the top and run the application:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理用户交互的代码现在已经完成；让我们从顶部选择模拟器并运行应用程序：
- en: '![](img/7df4aa5a-98ce-4d2a-a4f5-5a70dc3b6d88.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7df4aa5a-98ce-4d2a-a4f5-5a70dc3b6d88.png)'
- en: Running the project and deploying it on the emulator for the first time might
    take some time; be patient and let it complete the deployment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行项目并在模拟器上部署可能需要一些时间，请耐心等待并让它完成部署。
- en: 'Once the application is deployed, you should be able to see the application
    running on the emulator:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦应用程序部署完成，您应该能够在模拟器上看到应用程序正在运行：
- en: '![](img/49c7989b-2e32-4fed-99a8-dc28f069e367.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49c7989b-2e32-4fed-99a8-dc28f069e367.png)'
- en: As we can see in the preceding screenshot, the UI is what we created in the
    `Main.axml` layout file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中看到的，用户界面是我们在`Main.axml`布局文件中创建的。
- en: Let's test the code we wrote to handle user interactions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试我们编写的处理用户交互的代码。
- en: 'Click on the CALL button without giving any number as input:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击CALL按钮时不输入任何号码：
- en: '![](img/ac0c0da2-f3f9-4127-8185-4eeb692152f9.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac0c0da2-f3f9-4127-8185-4eeb692152f9.png)'
- en: We'll get a `toast`, as shown in the preceding screenshot, because we wrote
    a condition to check for empty or whitespace input in the input number field.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一个`toast`，如前面的截图所示，因为我们写了一个条件来检查输入号码字段中的空值或空格。
- en: 'And for no input is provided, we wrote the following code to show a `toast`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有输入的情况，我们编写了以下代码来显示一个`toast`：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s enter a phone number in the text input field and then press CALL:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在文本输入框中输入一个电话号码，然后按CALL：
- en: '![](img/07f316b9-fa09-43b8-b277-0bc11f8c64a0.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07f316b9-fa09-43b8-b277-0bc11f8c64a0.png)'
- en: As per our code, we should get a dialog box with a message saying Do you want
    to call 9980020860?.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的代码，应该会弹出一个对话框，显示“是否要拨打 9980020860?”。
- en: 'Clicking on Cancel should just close the dialog box. Let''s click on CALL:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Cancel按钮应该仅关闭对话框。现在点击CALL：
- en: '![](img/977ed25d-1343-4ebb-a2f7-7d59ee282689.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/977ed25d-1343-4ebb-a2f7-7d59ee282689.png)'
- en: If everything goes fine, a call should be made to the preceding number. But
    that's not what'll happen once we click on the CALL button.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，应该会拨打前面的号码。但一旦我们点击CALL按钮，这并不是发生的事情。
- en: 'A `java.Lang.SecurityException` will be thrown:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 会抛出一个`java.Lang.SecurityException`异常：
- en: '![](img/09e08dba-01bf-4d17-b51d-85a7a2ce125b.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09e08dba-01bf-4d17-b51d-85a7a2ce125b.png)'
- en: The reason why we got this exception is that the Android application requires
    permissions to do certain operations and tasks.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遇到这个异常的原因是因为Android应用程序需要权限才能执行某些操作和任务。
- en: These permissions should be listed in the Android application code so that the
    system knows all the permissions the application requires before installing it.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些权限应该在 Android 应用程序代码中列出，以便系统在安装前知道应用程序所需的所有权限。
- en: These permissions are listed for the user while installing; if the user allows
    such permissions for the application, then only the app can perform these operations.
    So, the next thing we need to do is add permissions to our Android application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些权限会在安装时显示给用户；如果用户允许该应用程序执行这些操作，则应用程序才可以执行这些操作。因此，接下来我们需要做的是为 Android 应用程序添加权限。
- en: Adding permissions to Android Manifest
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 Android Manifest 添加权限
- en: Our application needs only one permission as of now, and that is to place a
    call. To modify or add permissions for the application, we need to edit Android
    Manifest.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们的应用程序只需要一个权限，那就是拨打电话。要修改或添加应用程序权限，我们需要编辑 Android Manifest。
- en: 'To edit Android Manifest and give the permission, follow these steps:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要编辑 Android Manifest 并授予权限，请按照以下步骤操作：
- en: Open Solution Explorer.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开解决方案资源管理器。
- en: Double-click on Properties under the project.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击项目下的属性。
- en: This should open a UI to edit project properties.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个用于编辑项目属性的界面。
- en: 'Now, from the left-hand menu, click on Android Manifest to open it:'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从左侧菜单中点击 Android Manifest 以打开它：
- en: '![](img/2f5b6f98-ada8-4e93-bb17-d58760f1ef20.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f5b6f98-ada8-4e93-bb17-d58760f1ef20.png)'
- en: 'In the Required permissions section, scroll down, find the CALL_PHONE permissions,
    and select this option:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“所需权限”部分，向下滚动，找到 CALL_PHONE 权限，并选择该选项：
- en: '![](img/e6a9b1f3-4ded-4cdb-9176-b92852e71e4b.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6a9b1f3-4ded-4cdb-9176-b92852e71e4b.png)'
- en: Press *Ctrl* + *Shift* + *S* to save all the changes to the project.
  id: totrans-112
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *S*保存项目的所有更改。
- en: Close the Properties window.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭属性窗口。
- en: We are done adding permissions to the application.
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经完成了应用程序权限的添加。
- en: We need to build the solution now, so the resulting installation file has all
    the changes we made.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要构建解决方案，以便生成的安装文件包含我们所做的所有更改。
- en: 'Rebuild the project; right-click on Solution | Rebuild Solution:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新构建项目；右键单击解决方案 | 重新构建解决方案：
- en: '![](img/cdce0481-7150-4e28-aad5-a062ea62d158.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cdce0481-7150-4e28-aad5-a062ea62d158.png)'
- en: 'If everything is fine, we should be able to see in the output window that the
    rebuild succeeded; if you get errors, go back to the previous steps, compare the
    code, and rebuild:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，我们应该能够在输出窗口看到重建成功；如果遇到错误，请返回到前面的步骤，比较代码并重新构建：
- en: '![](img/12dcf056-ffd6-43ec-a3da-5a298074871b.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12dcf056-ffd6-43ec-a3da-5a298074871b.png)'
- en: Adding an icon for the Android app
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Android 应用添加图标
- en: 'App permissions are set and it''s ready to run, so let''s add an icon for our
    app:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序权限已设置完毕，准备运行，现在让我们为应用程序添加一个图标：
- en: Download an icon file that you like and that best suits your phone call app.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载一个你喜欢且最适合你的电话应用程序的图标文件。
- en: Go to Solution Explorer and add the downloaded file to the `drawable` folder
    under `Resources`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到解决方案资源管理器，将下载的文件添加到 `Resources` 下的 `drawable` 文件夹中。
- en: 'Right-click on `drawable` | Add | Existing Item, as shown in the following
    screenshot:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `drawable` | 添加 | 现有项，如下图所示：
- en: '![](img/f59dfea4-f3e8-44f4-ad7f-14c1ef34d3ef.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f59dfea4-f3e8-44f4-ad7f-14c1ef34d3ef.png)'
- en: 'A File Explorer window will open. Navigate to the icon file location, select
    the icon file, and click Add:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将打开文件资源管理器窗口。导航到图标文件的位置，选择图标文件，然后点击添加：
- en: '![](img/5d4770d0-ed59-4784-a98d-4267ac7b284a.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d4770d0-ed59-4784-a98d-4267ac7b284a.png)'
- en: 'The icon should now be added to the `drawable` folder of the project:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图标现在应该已经添加到项目的 `drawable` 文件夹中了：
- en: '![](img/bba4682a-e2d7-4401-bc52-b402ee87921c.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bba4682a-e2d7-4401-bc52-b402ee87921c.png)'
- en: 'Rename the icon file to `icon.png` by right-clicking on the file and then clicking
    Rename:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击文件并点击重命名，将图标文件重命名为 `icon.png`：
- en: '![](img/2bec0c66-ee1d-477c-a10d-3777160bf423.png)![](img/982611e4-4bc7-4c06-82c7-f048e4714a4e.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bec0c66-ee1d-477c-a10d-3777160bf423.png)![](img/982611e4-4bc7-4c06-82c7-f048e4714a4e.png)'
- en: After renaming the file, rebuild the project like we did in the previous steps.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名文件后，像之前一样重新构建项目。
- en: Once the rebuild is done successfully, let's add the icon to the application's
    Manifest file.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦重建成功完成，我们来为应用程序的 Manifest 文件添加图标。
- en: Double-click on Properties from Solution Explorer and open Android Manifest.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从解决方案资源管理器中双击属性并打开 Android Manifest。
- en: 'Choose @drawable/icon from the Application Icon drop-down menu:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序图标下拉菜单中选择 @drawable/icon：
- en: '![](img/0030ef87-6499-4756-8fda-e0aaf065f6ad.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0030ef87-6499-4756-8fda-e0aaf065f6ad.png)'
- en: Do *Ctrl* + *Shift* + *S* to save all and rebuild the solution to make sure
    everything works fine.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *S* 来保存所有内容并重建解决方案，以确保一切正常运行。
- en: Now, let's run the application in the emulator.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在模拟器中运行该应用。
- en: 'If we go to the app drawer and scroll down to the app name, we can see the
    app icon we just added now showing there:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们进入应用抽屉并向下滚动至应用名称，我们可以看到我们刚刚添加的应用图标，现在显示在那里：
- en: '![](img/ac4ddc9f-e22a-449c-8025-07d3ea0450eb.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac4ddc9f-e22a-449c-8025-07d3ea0450eb.png)'
- en: Congratulations, you've successfully added an icon for the new Android application.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜你，已经成功为新的 Android 应用添加了图标。
- en: Now that we have added the permissions and icon to the Manifest, it is time
    to test the main functionality of our app, *making a call*.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经在清单文件中添加了权限和图标，是时候测试应用的主要功能——*拨打电话*了。
- en: Testing user interaction
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试用户交互
- en: 'Click on the app on Android Emulator and run it. Repeat the previous steps
    of testing the application and at the end press the CALL button to make a call:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 模拟器中点击应用并运行它。重复之前测试应用的步骤，最后按下 CALL 按钮拨打电话：
- en: '![](img/ceb7dd82-575a-48af-9a0f-c06073eb7b20.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ceb7dd82-575a-48af-9a0f-c06073eb7b20.png)'
- en: This time, the application has the required permission, we have written the
    code to handle CALL button interaction, and we are creating a `callIntent` in
    `MainActivity.cs` to make a call.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，应用已经具有了所需的权限，我们已编写代码来处理 CALL 按钮的交互，并且我们在 `MainActivity.cs` 中创建了一个 `callIntent`
    来拨打电话。
- en: 'So, the call should be placed by clicking the CALL button, and we should get
    a screen as shown in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，应该通过点击 CALL 按钮来拨打电话，我们应该看到如下截图所示的屏幕：
- en: '![](img/db810003-faa4-4bbe-bb43-b0e84a9c6ba5.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db810003-faa4-4bbe-bb43-b0e84a9c6ba5.png)'
- en: Awesome! You just created your first working Android application using Xamarin
    and C# in Visual Studio.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你刚刚使用 Xamarin 和 C# 在 Visual Studio 中创建了你的第一个 Android 应用。
- en: Now that we have done the difficult part, let's understand some fundamentals
    of the Android application we just developed and see how it all comes together.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经完成了困难的部分，接下来让我们了解一下我们刚刚开发的 Android 应用的基础知识，看看它是如何结合在一起的。
- en: Application fundamentals
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用基础知识
- en: 'There are many topics that can be covered while explaining Android application
    fundamentals. But for the scope of this book we''ll try to understand the most
    important ones that we used in the development of our **PhoneCallApp**:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释 Android 应用基础知识时可以涉及许多主题。但是对于本书的范围，我们将尝试了解我们在开发 **PhoneCallApp** 时使用的最重要的一些主题：
- en: '**Android APIs**: Android has different API levels for different versions of
    Android. These API levels basically state which version of Android libraries our
    code uses and which versions of the Android OS our app is compatible with.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android API**：Android 为不同版本的 Android 提供了不同的 API 级别。这些 API 级别基本上说明了我们的代码使用了哪个版本的
    Android 库，并且我们的应用与哪些版本的 Android 操作系统兼容。'
- en: 'There are different configurations to be specified while developing an Android
    application. These configurations include:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 开发 Android 应用时需要指定不同的配置。这些配置包括：
- en: Target framework
  id: totrans-155
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标框架
- en: Minimum Android version
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低 Android 版本
- en: Target Android version
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标 Android 版本
- en: You'll read about these configurations in more detail.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你将更详细地了解这些配置。
- en: '**Resources**: Resources encapsulate many features used in Android to make
    a better Android application. An Android application uses many resources, such
    as:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**：资源封装了许多在 Android 中用于构建更好 Android 应用的特性。一个 Android 应用使用许多资源，例如：'
- en: The icon we used
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用的图标
- en: The layout file that makes the UI for the user
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于为用户创建 UI 的布局文件
- en: String files to store strings for application localization/internationalization,
    and much more
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于存储应用本地化/国际化字符串的字符串文件，等等
- en: '**Activities**: Activities are the main building block of applications in Android.
    Every UI element and its interactions are connected to an activity. Whenever we
    click on a button and open a new page, a new activity is called and control gets
    transferred.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动**：活动是 Android 应用的主要构建模块。每个 UI 元素及其交互都与一个活动关联。每当我们点击一个按钮并打开新页面时，都会调用一个新的活动，控制权也随之转移。'
- en: An activity in Android can have different states, based on the current operation
    being performed. We'll learn more about Activities in detail in future topics.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Android 活动可以有不同的状态，取决于当前正在执行的操作。我们将在未来的主题中更详细地学习活动。
- en: Android APIs
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android API
- en: Android APIs are known by an API level, for example, API level 23.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Android API 以 API 级别来标识，例如 API 级别 23。
- en: 'An API level represents a specific Android release. If you open Android SDK
    Manager in Visual Studio, you will see the following screen:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: API 等级代表特定的 Android 版本。如果您在 Visual Studio 中打开 Android SDK 管理器，您将看到如下界面：
- en: '![](img/9b0bf0bb-4b86-4ebc-a2d9-db10694acd52.png)![](img/07517709-8871-44ef-b86c-83959cf6a136.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b0bf0bb-4b86-4ebc-a2d9-db10694acd52.png)![](img/07517709-8871-44ef-b86c-83959cf6a136.png)'
- en: 'Each API level is specific to an Android release. An Android release is known
    by multiple names:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 API 等级特定于一个 Android 发布版本。一个 Android 版本通常有多个名称：
- en: The API level, such as API level 23
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 等级，例如 API 等级 23
- en: The Android version, such as Android 6.0
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 版本，例如 Android 6.0
- en: A code name, such as Marshmallow
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代号，例如 Marshmallow
- en: So, we can say that APIs have an integer value, a number to identify the release,
    because with each release this API level changes, and users upgrade their Android
    versions as they get released.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以说 API 具有整数值，用于标识版本发布，因为每次发布时此 API 等级都会发生变化，而用户会在发布新版本时更新他们的 Android 版本。
- en: An Android app should be able to run on different APIs and should be compatible
    with previous versions of releases, so that old devices can run applications as
    well, and when a user updates their OS version to a new one, existing apps don't
    break on their phones.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Android 应用程序应该能够在不同的 API 上运行，并与之前的版本兼容，以便旧设备也能运行应用程序，且当用户将操作系统版本更新到新版本时，现有应用不会在他们的手机上崩溃。
- en: 'To support multiple API levels, the Android project property has configurations
    to define:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持多个 API 等级，Android 项目属性有配置项来定义：
- en: '**Target Framework**: This setting can be found in the Application menu inside
    Properties. This tells `Xamarin.Android` to compile the project using specific
    API-level libraries. While compiling/building the application, `Xamarin.Android`
    uses the API level specified in this setting to load the libraries and build the
    application:'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标框架**：此设置可以在属性中的应用菜单下找到。此设置告诉`Xamarin.Android`使用特定的 API 等级库来编译项目。在编译/构建应用程序时，`Xamarin.Android`使用此设置中指定的
    API 等级来加载库并构建应用程序：'
- en: '![](img/64ff8484-d613-488a-9400-4dbc0b47d409.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64ff8484-d613-488a-9400-4dbc0b47d409.png)'
- en: '**Minimum Android version/API level**: This is the minimum Android version
    that the application can run on; this tells the Android system if the app is supported
    on the specific OS version. Specifying a lower minimum version means your application
    can be installed on all the versions between the minimum and target specified.
    But be careful, because even if the application compiles and gets installed on
    a lower version of Android, it does not necessarily mean it will run successfully
    as well.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最低 Android 版本/API 等级**：这是应用程序能够运行的最低 Android 版本；它告诉 Android 系统该应用程序是否支持特定的操作系统版本。指定较低的最低版本意味着您的应用程序可以安装在介于最低和目标版本之间的所有版本上。但要小心，因为即使应用程序已经编译并安装在较低版本的
    Android 上，也不一定意味着它会成功运行。'
- en: 'There might be some higher-level APIs that your application is using which
    cannot be run on an older version. This setting can be found under Android Manifest
    inside Properties:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有一些您的应用程序正在使用的高级 API，无法在较旧的版本上运行。此设置可以在属性中的 Android Manifest 下找到：
- en: '![](img/da5187c8-d4ba-4758-a87c-56b506e887b4.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da5187c8-d4ba-4758-a87c-56b506e887b4.png)'
- en: '**Target Android version/API level**: This is the OS version the app is developed
    to run on. Android uses this configuration to check whether it needs to enable
    any compatibility behaviors while running the application. This configuration
    can also be found in Android Manifest inside the project''s properties:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标 Android 版本/API 等级**：这是应用程序开发时所需运行的操作系统版本。Android 使用此配置来检查是否需要在运行应用程序时启用任何兼容性行为。此配置也可以在项目的属性中的
    Android Manifest 下找到：'
- en: '![](img/b091e4fe-dbcc-4d86-8fe6-4d56d87fba78.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b091e4fe-dbcc-4d86-8fe6-4d56d87fba78.png)'
- en: Resources
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: 'When we created a new `Xamarin.Android` application project, a folder named
    `Resources` was created in Solution Explorer:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个新的`Xamarin.Android`应用程序项目时，解决方案资源管理器中会创建一个名为`Resources`的文件夹：
- en: '![](img/d97039f9-371a-453a-8357-75ee70f21314.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d97039f9-371a-453a-8357-75ee70f21314.png)'
- en: Let's analyze the structure of our `Resources` folder in detail.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析一下`Resources`文件夹的结构。
- en: For an Android application structure, almost everything other than the actual
    code is a resource.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个 Android 应用程序的结构，除了实际的代码之外，几乎所有内容都是资源。
- en: '**A resource can be any of the following, but are not limited to the following:**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源可以是以下任何一种，但不限于以下内容：**'
- en: Images
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片
- en: Any image or icon used in the application
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序中使用的任何图片或图标
- en: They go in the `drawable` folder
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们位于`drawable`文件夹中
- en: Application View
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用视图
- en: View files for the application, that is, the `Main.axml` file that we created
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的视图文件，也就是我们创建的`Main.axml`文件
- en: Goes in the `layout` folder
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放在`layout`文件夹中
- en: Strings
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: These are text strings that are used across the application
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些是应用程序中使用的文本字符串
- en: For instance, the CALL text on the text button
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，文本按钮上的CALL文本
- en: It helps keep consistency throughout the application
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于保持应用程序的一致性
- en: Goes in the `values` folder
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放在`values`文件夹中
- en: '**Resources we used in the application**'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们在应用程序中使用的资源**'
- en: 'The main files that we used in our application in the `Resources` folder are
    as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Resources`文件夹中使用的主要文件如下：
- en: '`Icon.png`: The icon for the application we downloaded and added.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Icon.png`：我们下载并添加的应用程序图标。'
- en: '`Main.axml`: The default user interface layout file for our application. We
    only edited this file in the Designer, but you can also go ahead and open the
    file in XML view and try to understand the XML tags used for UI elements.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Main.axml`：我们应用程序的默认用户界面布局文件。我们只在设计器中编辑了这个文件，但你也可以打开该文件的XML视图，尝试理解UI元素使用的XML标签。'
- en: '`Resource.designer.cs`: This file is automatically generated and maintained
    by `Xamarin.Android` and holds the unique IDs assigned to each resource. It is
    automatically created by `Xamarin.Android` tools and will be regenerated from
    time to time.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resource.designer.cs`：这个文件是由`Xamarin.Android`自动生成和维护的，包含分配给每个资源的唯一ID。它是由`Xamarin.Android`工具自动创建的，并且会不定期重新生成。'
- en: 'This is why, to access certain resources in our C# code, we used the following
    code:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们要访问某些资源时，在C#代码中使用以下代码的原因：
- en: '[PRE8]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice `Resource.Id.PhoneNumber`; this information is basically stored in the
    `Resource.designer.cs` file, and all unique IDs assigned to resources are stored
    here.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`Resource.Id.PhoneNumber`；这个信息基本上存储在`Resource.designer.cs`文件中，所有分配给资源的唯一ID都存储在这里。
- en: Understanding Activities
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解活动（Activities）
- en: Activities are something very specific to Android application development. Usually,
    in other applications, we have an entry point or a main method as an entry point
    to start the application.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 活动（Activities）是Android应用开发中特有的概念。通常，在其他应用程序中，我们有一个入口点或一个主方法作为应用程序启动的入口。
- en: 'But in Android, the same purpose is fulfilled by Activities. Android applications
    can be started from any activity that is specified as a starting activity for
    the application using `MainLauncher`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在Android中，同样的目的由活动（Activities）来实现。Android应用程序可以从任何指定为启动活动的活动开始，使用`MainLauncher`：
- en: '![](img/48cf445d-15ac-4cf0-a21d-89de444c476f.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48cf445d-15ac-4cf0-a21d-89de444c476f.png)'
- en: Activity class
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动类
- en: The `Activity` class contains the code that controls the user interface. The
    `Activity` class is basically responsible for creating the UI and handling user
    interactions such as button clicks or touches.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`Activity`类包含控制用户界面的代码。`Activity`类基本上负责创建UI并处理用户交互，例如按钮点击或触摸。'
- en: 'Now, let''s take an example of our **PhoneCallApp** application. We have only
    one `Activity` in our project, and that is the `MainActivity.cs` class. It is
    the main entry point for the OS into this application, since we have set it as
    `MainLauncher`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们以我们的**PhoneCallApp**应用程序为例。我们在项目中只有一个`Activity`，那就是`MainActivity.cs`类。它是操作系统进入此应用程序的主要入口点，因为我们已经将其设置为`MainLauncher`：
- en: '![](img/8cfd1fc2-da31-4081-a239-b57ec5975c05.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cfd1fc2-da31-4081-a239-b57ec5975c05.png)'
- en: If we look closely, the `MainActivity` class inherits the `Activity` class,
    that is, it is a child of the `Activity` class. That means now `MainActivity`
    is also an `Activity`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细看，`MainActivity`类继承了`Activity`类，也就是说它是`Activity`类的子类。那意味着现在`MainActivity`也是一个`Activity`。
- en: Also, it is important to note that we have an `Activity` attribute defined above
    the `MainActivity` class, which specifies the `Label` and the `MainLaucher` property
    as well. This attribute tells Android that the `MainActivity` class is part of
    the application and is managed by its Manifest.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，值得注意的是，在`MainActivity`类上方定义了一个`Activity`属性，它指定了`Label`和`MainLauncher`属性。这个属性告诉Android，`MainActivity`类是应用程序的一部分，并且由其Manifest进行管理。
- en: 'By inheriting the `Activity` class, `MainActivity` gets access to the methods
    of the `Activity` class that provide developers with the ability to perform certain
    actions on different states of `MainActivity`, such as:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 通过继承`Activity`类，`MainActivity`可以访问`Activity`类中的方法，这些方法为开发者提供了在`MainActivity`不同状态下执行特定操作的能力，例如：
- en: When an activity is created
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个活动被创建时
- en: When an activity is paused
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个活动被暂停时
- en: When an activity is resumed
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个活动恢复时
- en: When developing an application and writing code for an `Activity` as discussed
    earlier, some methods are provided by the `Activity` class and we can use these
    to perform operations based on the different states of an `Activity`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序并编写`Activity`的代码时，如前所述，`Activity`类提供了一些方法，我们可以根据`Activity`的不同状态使用这些方法来执行操作。
- en: Methods in the Activity class
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Activity`类中的方法'
- en: '`OnCreate()`: When a user clicks on the app icon to start the application,
    this method is called. This method is used to perform some initial setup that
    might be required for the activity, for example, creating views, initializing
    variables, and much more:'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCreate()`：当用户点击应用图标启动应用程序时，调用此方法。此方法用于执行一些可能需要的初始设置，例如创建视图、初始化变量等：'
- en: '![](img/c4592b03-fd00-48ac-b6f9-e04e31a4583b.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4592b03-fd00-48ac-b6f9-e04e31a4583b.png)'
- en: 'Let''s have a look at our application code where we used the `OnCreate()` method
    to do some initialization and setup:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的应用程序代码，在这里我们使用`OnCreate()`方法进行了一些初始化和设置：
- en: '![](img/fce7c919-9156-4483-81f4-c5064f9bdcbe.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fce7c919-9156-4483-81f4-c5064f9bdcbe.png)'
- en: 'The things we are doing in our `OnCreate()` method are:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`OnCreate()`方法中所做的事情包括：
- en: Setting up a layout for the view
  id: totrans-229
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置视图的布局
- en: Initializing variables to get references to `TextInput` and `CallButton`
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化变量以获取对`TextInput`和`CallButton`的引用
- en: Binding the `Click` event to `CallButton`
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Click`事件绑定到`CallButton`
- en: '`OnStart()`: This method is always called by the system right after the `OnCreate()`
    method.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnStart()`：系统会在`OnCreate()`方法之后立即调用此方法。'
- en: '`OnResume()`: This method is called by the system when the application is up
    again and ready to interact with the user. `OnResume()` is important because any
    operation that is done in `OnPause()` should be undone in `OnResume()`, since
    it''s the only life cycle method that is guaranteed to execute after `OnPause()`
    when bringing the activity back.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnResume()`：当应用程序重新启动并准备与用户交互时，系统会调用此方法。`OnResume()`很重要，因为在`OnPause()`中执行的任何操作应该在`OnResume()`中撤销，因为它是唯一一个在`OnPause()`之后执行并将`Activity`恢复到前台的生命周期方法。'
- en: '`OnPause()`: This method is called when the system is about to put the activity
    into the background. It is also an important method, because an activity should
    perform certain tasks, such as:'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnPause()`：当系统即将将`Activity`放入后台时，会调用此方法。它也是一个重要的方法，因为`Activity`应该执行某些任务，例如：'
- en: Saving unsaved changes
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存未保存的更改
- en: Freeing up resources, such as the camera or other resources
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 释放资源，例如相机或其他资源
- en: '![](img/a16931fd-9017-4409-b1bf-5fdeb47408dc.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a16931fd-9017-4409-b1bf-5fdeb47408dc.png)'
- en: '`OnStop()`: This method is called when the activity is no longer visible to
    the user. This happens when one of the following happens:'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnStop()`：当`Activity`不再对用户可见时，会调用此方法。发生以下情况之一时，会调用该方法：'
- en: The Back button is pressed
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下返回按钮
- en: An existing activity is being opened and brought to the foreground
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开并将现有的`Activity`带到前台
- en: A new activity is being started and covers up the current activity
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动一个新的`Activity`，并覆盖当前的`Activity`
- en: '![](img/efc4621a-8092-4b97-bced-3844fa26385d.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efc4621a-8092-4b97-bced-3844fa26385d.png)'
- en: '`OnRestart()`: If an activity was stopped and then it is started again, this
    method gets called.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnRestart()`：如果一个`Activity`被停止然后再次启动，系统会调用此方法。'
- en: '`OnDestroy()`: This is the final method that is called on an `Activity` before
    it''s destroyed and completely removed from memory. It is used to clean up resources
    that might cause memory misuse.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnDestroy()`：这是在`Activity`被销毁并完全从内存中移除之前调用的最终方法。它用于清理可能导致内存误用的资源。'
- en: To understand more about the different Activity states, let's delve into the
    Activity life cycle.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解不同的`Activity`状态，让我们深入了解`Activity`生命周期。
- en: Activity life cycle
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Activity`生命周期'
- en: The Activity life cycle is usually defined by a list of methods inside the `Activity`
    class that provide us with ways to control the state of an activity. This allows
    developers to handle activities within an Android application.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`Activity`生命周期通常通过`Activity`类中的一系列方法来定义，这些方法为我们提供了控制`Activity`状态的方式。这使得开发人员能够在Android应用程序中处理`Activity`。'
- en: 'Let''s have a look at the different states of an Activity:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`Activity`的不同状态：
- en: '![](img/6a3be964-31e8-49b6-b9a7-360cd65cd1a7.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a3be964-31e8-49b6-b9a7-360cd65cd1a7.png)'
- en: 'These states can be broken into four main groups as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这些状态可以分为以下四个主要组：
- en: '**Running**: Activities are called active or running if they are in the foreground,
    also known as the top of the activity stack. This is known to be the highest priority
    activity in Android and will only be killed by the OS in extreme situations, such
    as if the activity tries to use more memory than is available on the device, since
    this could cause the application UI to become unresponsive.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行**：如果某个活动位于前台，即位于活动堆栈的顶部，我们称其为活跃或运行活动。这被认为是 Android 中优先级最高的活动，只有在极端情况下，如活动尝试使用超过设备可用内存的情况下，操作系统才会将其终止，因为这可能导致应用程序界面变得无响应。'
- en: '**Paused**: When a partial activity is called on top of a currently running
    activity, it is considered paused. Paused activities are still alive, that is,
    they maintain all state and member information, and remain in the activity stack.
    This is considered to be the second highest priority activity in Android and will
    only be killed by the OS if killing this activity will satisfy the resource requirements
    needed to keep the active/running activity stable and responsive.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暂停**：当一个部分活动位于当前运行活动之上时，它被视为暂停。暂停的活动仍然处于活动状态，即它们保持所有状态和成员信息，并保持在活动堆栈中。这被认为是
    Android 中第二高优先级的活动，只有当终止该活动能满足保持活跃/运行活动稳定和响应所需的资源时，操作系统才会将其终止。'
- en: '**Stopped/backgrounded**: If an activity is completely stopped or taken over
    by another activity, then it is considered as stopped or in the background. Stopped
    activities still try to retain their state and member information for as long
    as possible, but stopped activities have the lowest priority of the three states.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停止/后台**：如果一个活动完全停止或被另一个活动接管，则该活动被视为停止或处于后台。停止的活动仍尽可能保留其状态和成员信息，但停止的活动在这三种状态中优先级最低。'
- en: '**Restarted/Resumed**: If the user navigates back to the activity from another
    activity, or by tapping the App Switcher icon, it must be resumed if paused or
    restarted, or restored to its previously saved state, if stopped, and then displayed
    to the user.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重启/恢复**：如果用户从另一个活动中返回到当前活动，或者通过点击应用切换器图标返回，它必须在暂停时恢复，或在停止时恢复到先前保存的状态，然后显示给用户。'
- en: These categories are basic explanations of the different states of an activity
    in the activity life cycle.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类别是活动生命周期中不同状态的基本解释。
- en: Deploying an application on a mobile device
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在移动设备上部署应用程序
- en: So far, we have tested our application on Android Virtual Device (Android Emulator).
    But it's always a good practice to test the application on a physical device.
    So, let's learn how to set up an actual Android device for testing an application.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在 Android 虚拟设备（Android 模拟器）上测试了我们的应用程序。但最好还是在物理设备上测试应用程序。因此，让我们学习如何设置一个真实的
    Android 设备来进行应用程序测试。
- en: Screenshots shown in this topic were taken using an Android device running Lollipop;
    your device settings may differ depending on your device version.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 本主题中显示的截图是在运行 Lollipop 版本的 Android 设备上拍摄的；您的设备设置可能会根据设备版本的不同而有所不同。
- en: 'Here are the steps to set up a device for debugging:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是设置设备进行调试的步骤：
- en: '**Enable debugging on the device**: We will need to enable debugging on the
    device. By default, it will not be possible to debug applications on an Android
    device.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用设备调试**：我们需要在设备上启用调试。默认情况下，无法在 Android 设备上调试应用程序。'
- en: '**Install USB drivers**: On our Windows computers, we will need to install
    USB drivers for our device.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 USB 驱动程序**：在我们的 Windows 计算机上，我们需要为设备安装 USB 驱动程序。'
- en: '**Connect the device to the computer**: The final step involves connecting
    the device to the computer with a USB cable.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接设备到计算机**：最后一步是通过 USB 数据线将设备连接到计算机。'
- en: Enable debugging on the device
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用设备调试
- en: 'To enable debugging on the device, we need to perform the following steps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要在设备上启用调试，我们需要执行以下步骤：
- en: 'Click on the Settings icon from the notification bar:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击通知栏中的设置图标：
- en: '![](img/bc31ed31-2d9f-4cbe-8f93-e6223639aff8.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc31ed31-2d9f-4cbe-8f93-e6223639aff8.png)'
- en: Open Settings.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开设置。
- en: 'Scroll down to the end and click on About phone:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到底部并点击“关于手机”：
- en: '![](img/eaa3e3e7-3905-41af-8f23-85b3da3ecf9a.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaa3e3e7-3905-41af-8f23-85b3da3ecf9a.png)'
- en: Scroll down to Build number.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动至“版本号”。
- en: 'Tap on Build number seven times until it says You are now a developer!:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连续点击“版本号”七次，直到看到“您现在是开发者！”：
- en: '![](img/fcc6f6a3-48ed-45c8-9f69-e59950039ef7.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcc6f6a3-48ed-45c8-9f69-e59950039ef7.png)'
- en: 'Go back to the Settings menu and scroll down till the end:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回设置菜单，向下滚动到最底部：
- en: 'You should be able to see a new menu entry now for Developer options just before
    About phone:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该能够看到“开发者选项”菜单条目，位于“关于手机”之前：
- en: 'Click on Developer options:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击开发者选项：
- en: '![](img/62abc930-848b-4527-91f5-8b2c35956ed9.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62abc930-848b-4527-91f5-8b2c35956ed9.png)'
- en: 'Find the option to enable USB debugging and enable it:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找启用 USB 调试的选项并启用它：
- en: '![](img/a75f8b3e-6e09-4ce3-89aa-8a0910a413b4.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a75f8b3e-6e09-4ce3-89aa-8a0910a413b4.png)'
- en: Install USB drivers
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 USB 驱动程序
- en: For different devices, different drivers might need to be installed for the
    computer to recognize the device. Please make sure all the device drivers are
    properly installed and the computer can recognize your device properly.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不同的设备，可能需要安装不同的驱动程序才能使计算机识别设备。请确保所有设备驱动程序已正确安装，并且计算机可以正确识别你的设备。
- en: 'If you are downloading the device driver and want to install it manually on
    the computer, perform the following steps for Windows 7:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在下载设备驱动程序并希望手动安装到计算机上，请按照以下步骤在 Windows 7 上执行：
- en: Connect your device to the computer with a USB cable.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 USB 数据线将设备连接到计算机。
- en: Right-click on the Computer from your desktop or Windows Explorer and select
    Manage.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击桌面或 Windows 资源管理器中的计算机并选择“管理”。
- en: Select Devices in the left pane.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择设备。
- en: Locate and expand other devices in the right pane.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中定位并展开其他设备。
- en: Right-click the device name and select Update Driver Software.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击设备名称并选择更新驱动程序软件。
- en: This will launch the Hardware Update Wizard.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将启动硬件更新向导。
- en: Select Browse my computer for driver software and click Next.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“浏览我的计算机以查找驱动程序软件”并点击“下一步”。
- en: Click Browse and locate the USB driver folder.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击浏览，定位到 USB 驱动程序文件夹。
- en: Click Next to install the driver.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”以安装驱动程序。
- en: Connect the device to a computer
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将设备连接到计算机
- en: 'If you connect the device with a USB cable to a computer, **android debug bridge**
    (**adb**) should be able to communicate with the device and you should see a notification
    on the device saying USB debugging connected, as shown in the following screenshot:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过 USB 数据线将设备连接到计算机，**Android 调试桥**（**adb**）应该能够与设备通信，并且你应该在设备上看到“USB 调试已连接”的通知，如下图所示：
- en: '![](img/56a202ab-6444-4141-a073-a0caf71d36a5.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56a202ab-6444-4141-a073-a0caf71d36a5.png)'
- en: Now, you can go to Visual Studio, select your device listed in the running device
    list, and run the application. This will install the application on your device
    and run it.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以打开 Visual Studio，选择设备列表中的设备，并运行应用程序。这将把应用程序安装到你的设备并运行。
- en: Pushing code to a Git repository
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推送代码到 Git 仓库
- en: 'The application development is done. Let''s save our code to our Git repository
    so we can access the code from anywhere:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 应用开发完成。让我们将代码保存到 Git 仓库中，这样我们就可以从任何地方访问代码：
- en: 'In Visual Studio, in the bottom-right corner, click on Add to Source Control
    and then select Git:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，点击右下角的“添加到源代码控制”并选择 Git：
- en: '![](img/2f3f9025-da16-4ead-a6be-14908d9818d4.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f3f9025-da16-4ead-a6be-14908d9818d4.png)'
- en: 'Click on Connect | Settings:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击连接 | 设置：
- en: '![](img/d5d5c3f9-0329-4b17-928b-a9b5c9e73fe4.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5d5c3f9-0329-4b17-928b-a9b5c9e73fe4.png)'
- en: 'Click on Global Settings:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击全局设置：
- en: '![](img/07ff20ec-8e77-4cc4-84c0-695682c4da15.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07ff20ec-8e77-4cc4-84c0-695682c4da15.png)'
- en: 'Enter your GitHub account username and email and click Update:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的 GitHub 账户用户名和电子邮件，并点击更新：
- en: Click on the up arrow icon (push icon) at the bottom of the Team Explorer.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Team Explorer 底部的上箭头图标（推送图标）。
- en: Then, click on Publish Git Repo under Push to Remote Repository.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“发布 Git 仓库”以推送到远程仓库。
- en: 'Notice that it says there is no remote repository configured for this local
    repository. That is because we haven''t connected our remote GitHub repository
    to our local project:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，它说本地仓库没有配置远程仓库。这是因为我们还没有将远程 GitHub 仓库连接到本地项目：
- en: '![](img/61da07d6-2ebc-43c1-b5f2-5ea6a5450880.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61da07d6-2ebc-43c1-b5f2-5ea6a5450880.png)'
- en: 'Log in to your GitHub account and create an empty Git repository for your project,
    as we learned in [Chapter 2](1cdfeed6-6ce1-4f1c-b1f5-d307c611987a.xhtml), *Working
    with Code Repository Systems*, and copy that URL to the textbox shown in the following
    screenshot:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 登录你的 GitHub 账户并为你的项目创建一个空的 Git 仓库，正如我们在[第 2 章](1cdfeed6-6ce1-4f1c-b1f5-d307c611987a.xhtml)《与代码仓库系统的工作》中所学，并将该
    URL 复制到以下截图中的文本框：
- en: '![](img/e19a6297-f0b5-4279-aea6-dedd33238d48.png)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e19a6297-f0b5-4279-aea6-dedd33238d48.png)'
- en: 'After clicking on Publish, a new window will open asking for your GitHub credentials:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击发布后，将打开一个新窗口，要求输入你的 GitHub 凭证：
- en: '![](img/fa4725be-a616-4815-aa95-08c3a1197760.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa4725be-a616-4815-aa95-08c3a1197760.png)'
- en: 'Enter your GitHub credentials to authenticate and click Login:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的 GitHub 凭据进行认证，然后点击登录：
- en: 'After successfully logging in, the code will be pushed to the remote Git repository
    and you should see a success message as follows:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录成功后，代码将被推送到远程 Git 仓库，你应该会看到如下成功信息：
- en: '![](img/8ad42c95-5d59-4a53-8e6c-2329d1cc9f94.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ad42c95-5d59-4a53-8e6c-2329d1cc9f94.png)'
- en: Congratulations, the code has now been pushed to the remote repository, and
    can be checked by logging in to GitHub and going to the repository URL.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你的代码已经成功推送到远程仓库，可以通过登录 GitHub 并访问仓库 URL 来查看。
- en: Summary
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned to develop an Android application using Xamarin
    and Visual Studio. We also learned some detailed fundamentals of an Android application,
    Activities, and their life cycle. We ran the application on Emulator as well as
    set up an actual physical device to run the application; finally we pushed our
    code to a Git repository.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 Xamarin 和 Visual Studio 开发 Android 应用程序。我们还了解了一些 Android 应用的基本概念、Activity
    及其生命周期。我们在模拟器上运行了应用程序，并设置了一个实际的物理设备来运行应用；最后，我们将代码推送到了 Git 仓库。
- en: In the next chapter, we'll learn about implementing continuous testing using
    Xamarin Test Cloud.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何使用 Xamarin Test Cloud 实现持续测试。
