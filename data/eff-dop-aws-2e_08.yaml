- en: Hardening the Security of Your AWS Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加强AWS环境的安全性
- en: In this chapter, we will focus on how to secure our AWS account and application.
    The cloud and security are two concepts that don't always go together. This is
    not because of the cloud's nature, but because of the idea that a server on the
    premises is more secure than a server on the cloud. This is because you know exactly
    where an on-premise server is, and how the connections to it reach there. The
    purpose of this chapter is to look at some practical tools and information to
    demonstrate that a well-managed AWS cloud can be more secure than an on-premise
    environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点讨论如何确保我们的AWS账户和应用程序的安全。云计算和安全性是两个并不总是兼容的概念。这并非由于云的本质，而是因为人们认为本地服务器比云上的服务器更安全。因为你确切知道本地服务器的位置以及如何与它建立连接。本章的目的是通过一些实际的工具和信息，证明一个良好管理的AWS云环境可以比本地环境更安全。
- en: First we will look at how to secure access for our IAM users. Then, we will
    look at how to enable logging on for IAM usage with CloudTrail, and, at the network
    level, with VPC Flow Logs. Creating the right subnets is a crucial step to undertake
    before placing our application and infrastructure in the cloud. Finally, we will
    explore the power of a wonderful tool provided by AWS—the **web application firewall**
    (**WAF**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将研究如何为IAM用户确保访问安全。接着，我们将探讨如何启用CloudTrail记录IAM的使用日志，并在网络层面通过VPC流日志进行监控。在将应用程序和基础设施部署到云之前，创建正确的子网是至关重要的一步。最后，我们将探索AWS提供的一个强大工具——**Web应用防火墙**（**WAF**）。
- en: One of the most important security principles is that of the *least privilege*.
    This refers to limiting the access rights of users to the minimum permissions
    that they need in order to complete their work in the correct way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的安全原则之一是*最小权限*原则。这意味着将用户的访问权限限制到完成其工作所需的最小权限。
- en: 'In this chapter, we will implement this at many levels in the AWS infrastructure. Moving
    forward, we will take a closer look at the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在AWS基础设施的多个层级实施这一过程。接下来，我们将更详细地探讨以下主题：
- en: '**Identity Access Management** (**IAM**) security'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份与访问管理**（**IAM**）安全性'
- en: CloudTrail
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudTrail
- en: '**Virtual Private Cloud** (**VPC**) subnets'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟私有云**（**VPC**）子网'
- en: AWS WAF
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS WAF
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files included within the chapter can be found on GitHub at link: [https://github.com/giuseppeborgese/effective_devops_with_aws__second_edition](https://github.com/giuseppeborgese/effective_devops_with_aws__second_edition).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中包含的代码文件可以在GitHub上找到，链接为：[https://github.com/giuseppeborgese/effective_devops_with_aws__second_edition](https://github.com/giuseppeborgese/effective_devops_with_aws__second_edition)。
- en: IAM security
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IAM安全性
- en: IAM enables you to securely control access to AWS services. Here, we need to
    implement the least privilege principle, and monitor who does what by recording
    all of the users' actions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: IAM 使你能够安全地控制对AWS服务的访问。在这里，我们需要实施最小权限原则，并通过记录所有用户的操作来监控谁在做什么。
- en: Root account
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根账户
- en: 'When you create an AWS account and log in with the root account, you will see
    something like the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个AWS账户并使用根账户登录时，你将看到类似于以下截图的内容：
- en: '![](img/a4142040-f3e0-471a-b90e-7ccea505be86.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4142040-f3e0-471a-b90e-7ccea505be86.png)'
- en: It is important to perform all of the actions suggested by the IAM web console,
    and also, to change the root account's password.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 执行IAM web控制台所建议的所有操作非常重要，同时也要更改根账户的密码。
- en: Root account password
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根账户密码
- en: 'First, change the root account''s password. At the top right of the page, between
    the bell icon and the Global drop-down menu, you will find your AWS alias or account
    number. Click on this, and then click on the My Account option:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，更改根账户的密码。在页面的右上角，铃铛图标和全球下拉菜单之间，你将找到你的AWS别名或账户号码。点击它，然后点击“我的账户”选项：
- en: '![](img/39ca0b41-851a-46e7-b2bb-4c0c6ba1e18c.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39ca0b41-851a-46e7-b2bb-4c0c6ba1e18c.png)'
- en: 'Next, click on the Edit button. The others steps are more straightforward and
    logical, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击“编辑”按钮。其他步骤比较直接和合乎逻辑，如下所示：
- en: '![](img/0a6e4450-fee9-440e-9324-968e0a74b905.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a6e4450-fee9-440e-9324-968e0a74b905.png)'
- en: For security reasons, the web page will request that you provide your login
    information again. Password protection is never enough, especially for the root
    account; you should absolutely activate **multi-factor authentication** (**MFA**),
    whether you have a virtual or hardware device. Plenty of solutions are available
    on the market. Just to provide some examples, Google Authenticator is one of the
    most well-known apps for Android devices. I have also used a physical dongle made
    by Yubico ([https://www.yubico.com/](https://www.yubico.com/)).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全原因，网页会要求您再次提供登录信息。仅有密码保护是不够的，尤其是对于根账户；您应该绝对启用**多因素认证**（**MFA**），无论您是使用虚拟设备还是硬件设备。市场上有许多解决方案。例如，Google
    Authenticator 是安卓设备中最著名的应用之一。我也使用过 Yubico（[https://www.yubico.com/](https://www.yubico.com/)）生产的物理安全密钥。
- en: Delete your root access keys
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除根账户的访问密钥
- en: 'Access keys have the same permissions as those given following access with
    a password, so a more secure environment is created when this kind of access is
    removed from the root account, leaving only password access for use (except in
    some special cases). Don''t worry about the message shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 访问密钥的权限与使用密码访问时授予的权限相同，因此，当根账户的此类访问被移除，只留下密码访问时，能够创建一个更安全的环境（除非在某些特殊情况下）。不要担心以下截图中显示的消息：
- en: '![](img/2768c031-9a30-4859-9bb5-55f6ab30b17a.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2768c031-9a30-4859-9bb5-55f6ab30b17a.png)'
- en: 'If you created an access key for the root account and find that it was deleted,
    you will be shown the following message:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为根账户创建了访问密钥，并发现该密钥已被删除，系统将显示以下消息：
- en: '![](img/d0dbf61c-bbb4-4393-be9d-57aee578a269.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0dbf61c-bbb4-4393-be9d-57aee578a269.png)'
- en: Setting up a password policy for IAM users
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 IAM 用户设置密码策略
- en: 'The password policy that you should apply depends on the level of security
    that you want to apply to your IAM users passwords. I would suggest something
    like the following, but it will depend on your use case:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该应用的密码策略取决于您希望对 IAM 用户密码应用的安全级别。我建议以下类似的配置，但它会根据您的具体用例有所不同：
- en: '![](img/16a72718-7cc7-4ee0-8526-6ac5762cbe33.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16a72718-7cc7-4ee0-8526-6ac5762cbe33.png)'
- en: Creating an administrator group and a personal IAM user
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建管理员组和个人 IAM 用户
- en: 'To operate with the root account, it is more secure to create a personal IAM
    user and operate through that. It is also a best practice to assign permissions
    to the group, and not directly to the IAM users. Do this as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更安全地操作根账户，最好创建一个个人 IAM 用户并通过该用户进行操作。将权限分配给组而不是直接分配给 IAM 用户也是最佳实践。操作方法如下：
- en: Create a group called `admins` or something similiar.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `admins` 或类似名称的组。
- en: Assign the administrator policy to this group.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将管理员策略分配给该组。
- en: Create a personal IAM user with some kind of criteria. In my case, I would choose
    `myname.mysurname giuseppe.borgese`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据某些标准创建个人 IAM 用户。以我为例，我会选择 `myname.mysurname giuseppe.borgese`。
- en: Insert the new IAM user in to the `admins` group.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的 IAM 用户添加到 `admins` 组。
- en: This allows other IAM users to evaluate whether to create groups with fewer
    privileges than the administrator. It also allows them to assign the necessary
    rights, but not more than are required. For example, if an IAM user needed to
    manage EC2 machines, we could give them the predefined AmazonEC2FullAccess policy, and,
    correspondingly, if they needed to manage an RDS environment, they could be given
    an AmazonRDSFullAccess policy.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许其他 IAM 用户评估是否创建权限比管理员少的组，也允许他们分配必要的权限，但不会多于需要的权限。例如，如果一个 IAM 用户需要管理 EC2 实例，我们可以给他们预定义的
    AmazonEC2FullAccess 策略；如果他们需要管理 RDS 环境，则可以给他们 AmazonRDSFullAccess 策略。
- en: AmazonEC2FullAccess policy
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AmazonEC2FullAccess 策略
- en: 'The tasks that require root account access are listed clearly on the AWS documentation
    page at [https://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html](https://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html).
    To follow is a list of these tasks:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 需要根账户访问权限的任务在 AWS 文档页面中列得非常清楚，网址是 [https://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html](https://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html)。以下是这些任务的列表：
- en: Modifying root user details
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改根用户详情
- en: Changing your AWS support plan
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改 AWS 支持计划
- en: Closing an AWS account
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭 AWS 账户
- en: Signing up for GovCloud
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册 GovCloud
- en: Submiting a reverse DNS for Amazon EC2 requests
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交 Amazon EC2 请求的反向 DNS
- en: Creating a CloudFront key pair
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 CloudFront 密钥对
- en: Creating an AWS created X.509 signing certificate
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 AWS 创建的 X.509 签名证书
- en: Transfering a route 53 domain to another AWS account
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Route 53域名转移到另一个AWS账户
- en: Changing the Amazon EC2 setting for longer resource IDs
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改Amazon EC2设置以支持更长的资源ID
- en: Requesting the removal of the port `25` email throttle on your EC2 instance
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求移除EC2实例上`25`端口的电子邮件限制
- en: Finding your AWS account canonical user ID
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找你的AWS账户规范用户ID
- en: All of these operations are very rare, so it would be unusual for you to find
    one of these events cropping up among your everyday tasks.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些操作都非常罕见，因此在日常任务中遇到这些事件是不寻常的。
- en: Final security status
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终安全状态
- en: 'Now that all of your tasks have been accomplished, you can log out from the
    root user and start to use the IAM user with the administrator rights that you
    have created, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有任务已经完成，你可以从root用户注销，开始使用你创建的具有管理员权限的IAM用户，如下所示：
- en: '![](img/f250d8be-76fc-4b87-9fb5-93b414cc7d8c.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f250d8be-76fc-4b87-9fb5-93b414cc7d8c.png)'
- en: If you are completely new to the cloud approach, it is worth spending some time
    reading the *AWS Shared Responsibility Model* at [https://aws.amazon.com/compliance/shared-responsibility-model/](https://aws.amazon.com/compliance/shared-responsibility-model/).
    On the page, there is a clear definition of what AWS's responsibility is (*security
    of the cloud*), and also, what our responsibility is (*security in the cloud*).
    In a few words, it is our responsibility to ensure that what we create inside
    of the cloud, and all of the tools that we use to create it, are AWS-secure.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对云计算方法完全陌生，建议花一些时间阅读*AWS共享责任模型*，地址为[https://aws.amazon.com/compliance/shared-responsibility-model/](https://aws.amazon.com/compliance/shared-responsibility-model/)。在页面上，有清晰的定义，说明了AWS的责任是（*云的安全性*），同时也定义了我们的责任是（*云中的安全性*）。简而言之，我们的责任是确保我们在云中创建的内容，以及用于创建这些内容的所有工具，都符合AWS的安全要求。
- en: In the past, there were many security breaches in the famous AWS S3 service, because
    people configured the service to be readable/writable from anywhere in the world.
    AWS guarantees that the service is always updated and patched, but the permissions
    we give when accessing it are left in our court.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，著名的AWS S3服务曾发生过许多安全漏洞，因为人们将该服务配置为可以从世界任何地方进行读写。AWS保证该服务始终保持更新和修补，但我们在访问时所赋予的权限仍由我们自己掌控。
- en: 'On YouTube, it is possible to listen to a very nice song by Kate Turchin, located
    at [https://www.youtube.com/watch?v=tIb5PGW_t1o](https://www.youtube.com/watch?v=tIb5PGW_t1o).
    This song explains the shared responsibility model in an accessible way:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在YouTube上，你可以听到Kate Turchin的一首非常好听的歌，地址为[https://www.youtube.com/watch?v=tIb5PGW_t1o](https://www.youtube.com/watch?v=tIb5PGW_t1o)。这首歌以通俗易懂的方式解释了共享责任模型：
- en: '![](img/7148cfd4-56ce-4ebb-9f08-eca5271b5a7a.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7148cfd4-56ce-4ebb-9f08-eca5271b5a7a.png)'
- en: CloudTrail
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudTrail
- en: We have enabled IAM personal users and have avoided the root account. We have
    also assigned the necessary IAM policy to our groups, and have assigned each user
    to the right group. However, we also need to record all of their actions. To fulfill
    this purpose, the AWS service to enable is CloudTrail.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已启用IAM个人用户，并避免使用root账户。我们还为我们的组分配了必要的IAM策略，并将每个用户分配到正确的组。然而，我们也需要记录他们的所有操作。为实现这个目的，启用的AWS服务是CloudTrail。
- en: Each event performed over the AWS infrastructure by an IAM user or a resource
    with an IAM role assigned to it will be recorded in an S3 bucket and/or in a CloudWatch
    log group. My advice is to follow the AWS documentation at: [https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html). Creating
    a trail from the web console will be very straightforward, if you read this document.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每个由IAM用户或分配了IAM角色的资源在AWS基础设施上执行的操作都会记录在S3桶中和/或CloudWatch日志组中。我的建议是参考AWS文档：[https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html)。如果你阅读了这篇文档，通过网页控制台创建跟踪将非常简单。
- en: VPC Flow Logs
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VPC流日志
- en: 'An **intrusion**** d****etection system** (**IDS**) and an **i****ntrusion p****revention
    system** (**IPS**) are common tools in a secure network. In an on-premise environment,
    they are not so easy or cheap to implement, because you need dedicated hardware,
    and also a network structure that accommodates this feature. By contrast, in AWS,
    using only one feature of the VPC service, you can enable and disable these tools
    whenever and wherever you consider appropriate. You can have these tools at three
    levels of your network:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**入侵检测系统**（**IDS**）和 **入侵预防系统**（**IPS**）是安全网络中常见的工具。在本地环境中，它们不那么容易或便宜实现，因为您需要专用硬件，以及适合此功能的网络结构。相比之下，在
    AWS 中，只需使用 VPC 服务的一个特性，您可以在任何时候和任何地点启用和禁用这些工具。您可以在网络的三个级别上拥有这些工具：'
- en: The VPC level
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPC 级别
- en: The subnet level
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子网级别
- en: The **elastic network interface** (**ENI**) level
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性网络接口**（**ENI**）级别'
- en: 'As you know, a network interface belongs to one subnet, and one subnet belongs
    to a VPC. So, if you enable tools at the subnet level, you don''t have to apply
    them at the network interface level, and if you enable them at the VPC level,
    you don''t need to apply them at the subnet level. Before you activate this feature,
    you need to create the following three resources:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，网络接口属于一个子网，而一个子网属于一个 VPC。因此，如果在子网级别启用工具，则无需在网络接口级别应用它们，如果在 VPC 级别启用它们，则无需在子网级别应用它们。在激活此功能之前，您需要创建以下三个资源：
- en: An empty CloudWatch group, where the data will be stored
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空的 CloudWatch 组，数据将存储在那里
- en: An AWS role to perform the VPC Flow Log operation
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于执行 VPC 流日志操作的 AWS 角色
- en: A policy associated with the role, with the necessary permissions
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与角色相关联的策略，带有必要的权限
- en: Of course, you can create these resources manually, and all of the instructions
    to do this are available on the flow logs documentation page at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html).
    However, to take a more DevOps/automated approach, we can use a Terraform module.
    In this case, we use a remote module created on GitHub. As you can see in the
    official Terraform documentation about module sources at [https://www.terraform.io/docs/modules/sources.html#github](https://www.terraform.io/docs/modules/sources.html#github),
    GitHub is a supported source type. However, if you want to use your own GitHub
    repository, you can use `ssh` or `https` as module sources. For more information,
    refer to [https://www.terraform.io/docs/modules/sources.html#github](https://www.terraform.io/docs/modules/sources.html#github).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以手动创建这些资源，并且所有执行此操作的说明都可以在流日志文档页面上找到：[https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html)。但是，为了采用更
    DevOps/自动化的方法，我们可以使用 Terraform 模块。在这种情况下，我们使用在 GitHub 上创建的远程模块。正如您可以在有关模块来源的官方
    Terraform 文档中看到的那样：[https://www.terraform.io/docs/modules/sources.html#github](https://www.terraform.io/docs/modules/sources.html#github)，GitHub
    是一个支持的来源类型。但是，如果您想使用自己的 GitHub 仓库，可以使用 `ssh` 或 `https` 作为模块源。有关更多信息，请参阅：[https://www.terraform.io/docs/modules/sources.html#github](https://www.terraform.io/docs/modules/sources.html#github)。
- en: 'The code to call the module is very simple, and requires only two parameters—the
    `source` and the `prefix`. The `prefix` will be used to name all the module resources.
    You can download or look into the GitHub repository link given in the *Technical
    requirement* section to see what this module does, in detail. However, to use
    it, the following few lines are enough:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 调用模块的代码非常简单，仅需要两个参数——`source` 和 `prefix`。`prefix` 将用于命名所有模块资源。您可以下载或查看在 *技术要求*
    部分提供的 GitHub 仓库链接，详细了解此模块的功能。但是，要使用它，以下几行就足够了：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The names in the output are useful to use in the web console after that.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 Web 控制台中使用输出中的名称非常有用。
- en: After you have added the module lines to any of your existing files, or to a
    new one with a `.tf` extension, it is necessary to initialize them with `terraform
    init`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将模块行添加到任何现有文件中或具有 `.tf` 扩展名的新文件中后，需要使用 `terraform init` 进行初始化。
- en: 'The following is the output of the `terraform init` command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `terraform init` 命令的输出：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `terraform` binary has just downloaded the module code. At this point, if
    it wasn't been done beforehand, download the AWS provider information from the
    latest available version. The `-upgrade` option forces you to use the latest available
    version, so that is usually a good idea.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform` 二进制文件刚刚下载了模块代码。此时，如果之前没有进行此操作，它将从最新的可用版本下载 AWS 提供程序信息。`-upgrade`
    选项强制您使用最新的可用版本，因此通常这是一个好主意。'
- en: 'Now, with a `terraform plan`, we can see which three objects will be created:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过 `terraform plan`，我们可以看到将创建的三个对象：
- en: '[PRE2]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This plan was saved to: `/tmp/tf11.out`.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该计划已保存至：`/tmp/tf11.out`。
- en: 'To apply these actions, run the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用这些操作，请运行以下命令：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, create them with a `terraform apply` command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 `terraform apply` 命令创建它们：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Take a note of these last two pieces of output as we need to activate the flow
    log.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请记下最后两条输出内容，因为我们需要激活流日志。
- en: Creating the flow log for one subnet
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为一个子网创建流日志
- en: 'Now, with all of the prerequisites satisfied, we are going to create a flow
    log for one subnet that is open in the AWS web console for the VPC service:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在所有先决条件都满足的情况下，我们将为在 AWS 网页控制台中打开的 VPC 服务中的一个子网创建流日志：
- en: 'Select one subnet. Now, select the Flow Logs tab, and click on the Create flow
    log button, as shown in the following screenshot:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个子网。然后，选择 "Flow Logs" 标签，点击 "Create flow log" 按钮，如下图所示：
- en: '![](img/2c0781b0-a1fe-42a5-bb02-0f382c2075de.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c0781b0-a1fe-42a5-bb02-0f382c2075de.png)'
- en: 'Insert the information as it is given in the following screenshot. The log
    group and the role are the ones created with the Terraform module. In this example,
    we are interested in seeing the traffic that is accepted, so we select the Accept option
    in the Filter drop-down menu:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下截图中提供的信息进行填写。日志组和角色是使用 Terraform 模块创建的。在这个示例中，我们关心的是查看被接受的流量，因此我们在筛选器下拉菜单中选择了
    "Accept" 选项：
- en: '![](img/9e9d1489-e3d2-4152-85fc-4e108d682de1.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e9d1489-e3d2-4152-85fc-4e108d682de1.png)'
- en: Now that you have a situation like this in your AWS web console, take note of
    the subnet number, because we will need it when it comes to verification. Of course,
    your subnet ID will be different from mine, which is `subnet-15a59419`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您在 AWS 网页控制台中看到这样的情况时，请注意子网编号，因为在验证时我们将需要它。当然，您的子网 ID 会与我的不同，我的 ID 是 `subnet-15a59419`。
- en: Verifying the flow logs
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证流日志
- en: In order to verify whether a flow log is working, and to get practice with the
    flow log, we are going to create an EC2 machine for the subnet login in SSH, and
    we will analyze the traffic for that SSH login.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证流日志是否正常工作，并获得流日志的实践经验，我们将为该子网创建一个 EC2 实例，并通过 SSH 登录，分析该 SSH 登录的流量。
- en: We won't cover the full process of creating an EC2 machine here because it is
    a basic task. If you are at this point in the book, you should already know how
    to do it. What I suggest is to use a `t2.micro` that is a free-tier eligible type.
    Also, it is very important to create the machine in the subnet where you just
    activated the flow log, and to allow the SSH to have access from your location.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在这里涵盖创建 EC2 实例的完整过程，因为这是一个基础任务。如果您已经阅读到本书的这一部分，您应该已经知道如何操作了。我建议使用一个 `t2.micro`
    类型，它符合免费套餐的资格。此外，非常重要的一点是，您必须在刚刚激活流日志的子网上创建机器，并允许从您的位置访问 SSH。
- en: 'After a short period of time, you can go into the CloudWatch service, click
    on the Logs option, and select the log group, `devops2nd_flowlogs`, created with
    Terraform:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，您可以进入 CloudWatch 服务，点击 "Logs" 选项，选择通过 Terraform 创建的日志组 `devops2nd_flowlogs`：
- en: '![](img/7da9da5f-c804-4a19-9788-8903ae83a5a7.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7da9da5f-c804-4a19-9788-8903ae83a5a7.png)'
- en: 'Inside of that, you will find the name of the network interface associated
    with the EC2 instance created previously, as shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，您将找到与之前创建的 EC2 实例关联的网络接口名称，如下图所示：
- en: '![](img/80b36821-4fd6-4779-b97e-3ad60f4ae2f8.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80b36821-4fd6-4779-b97e-3ad60f4ae2f8.png)'
- en: 'If you have many network interfaces in the same subnet, this means that you
    have multiple machines, and you need to go to the EC2 service and the Network
    Interfaces option, and locate the network interface using the Instance ID column,
    as shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在同一子网中有多个网络接口，这意味着您有多个机器，您需要进入 EC2 服务并选择网络接口选项，利用实例 ID 列来定位网络接口，如下图所示：
- en: '![](img/c27fb070-6a18-457b-aa82-d8d6244bed68.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c27fb070-6a18-457b-aa82-d8d6244bed68.png)'
- en: However, you will probably only have one network interface, so click on its
    name. In my case, this is `eni-0d899a52e790058aa-accept`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能只有一个网络接口，所以点击它的名称。在我的例子中，这是 `eni-0d899a52e790058aa-accept`。
- en: 'There are many lines; to understand the details of each one, you can take a
    look at the record documentation at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多行；要了解每一行的详细信息，你可以查看记录文档，访问 [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records)：
- en: '![](img/e3e059f7-ad18-481d-938d-594609795052.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3e059f7-ad18-481d-938d-594609795052.png)'
- en: 'However, we want to find our SSH connection attempt, so it is necessary to
    recover our laptop''s public IP with a service like the one at [http://www.whatsmyip.org/](http://www.whatsmyip.org/),
    and put it in the filter, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们想要查找我们的 SSH 连接尝试，因此有必要通过像 [http://www.whatsmyip.org/](http://www.whatsmyip.org/)
    这样的服务找出我们笔记本的公网 IP，并将其放入过滤器中，如下所示：
- en: '![](img/53195b21-6167-4346-a95c-ee9aed34698c.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53195b21-6167-4346-a95c-ee9aed34698c.png)'
- en: 'In the first line, you can see the following items:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行中，你可以看到以下项目：
- en: The public IP of my laptop is `79.1.172.1`
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的笔记本的公网 IP 是 `79.1.172.1`
- en: The private IP of the EC2 instance is `172.31.61.129`
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2 实例的私有 IP 是 `172.31.61.129`
- en: The source port of my laptop is `61704`
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的笔记本的源端口是 `61704`
- en: The destination port of the EC2 instance for the SSH service is port `22`
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2 实例的 SSH 服务的目标端口是端口 `22`
- en: VPC Flow Log consideration
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VPC 流日志的考虑事项
- en: We have completed a tour of the VPC Flow Log service with a working **proof
    of concept** (**PoC**). Of course, there are many other options available in the
    service, which you can find in the official AWS documentation. By visiting these,
    you can continue to explore the potential of the VPC Flow Log.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了 VPC 流日志服务的概念验证（**PoC**）。当然，服务中还有许多其他选项，你可以在官方的 AWS 文档中找到它们。通过访问这些文档，你可以继续探索
    VPC 流日志的潜力。
- en: At this point, if you ever try to do the same task performed by the VPC Flow
    Log in an on-premise environment, it should be clear how easy it is to enable
    a full traffic monitor on the AWS cloud compared with doing do so in an on-premise
    environment.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时，如果你尝试在本地环境中完成与 VPC 流日志相同的任务，应该能清楚地意识到，与在本地环境中启用完全流量监控相比，在 AWS 云上启用它是多么简单。
- en: Don't forget to delete the EC2 instance that was created previously, in order
    to avoid incurring any unnecessary extra charges. The other resource will not
    have any costs, unless you generate a very great amount of traffic in that subnet.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了删除之前创建的 EC2 实例，以避免产生不必要的额外费用。其他资源不会产生费用，除非你在该子网中生成了大量流量。
- en: VPC subnets
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VPC 子网
- en: In this section, we will look at how to organize our VPC subnets, following
    the least privileged principle. We have to expose and give access to our resources
    (EC2, ELB, and RDS) in the fewest possible circumstances, in order to limit security
    attacks and data leaks.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何按照最小权限原则组织我们的 VPC 子网。我们必须在最少的情况下暴露并授予访问权限给我们的资源（EC2、ELB 和 RDS），以限制安全攻击和数据泄露。
- en: In each AWS region there is already a default VPC that has been created. If
    you want to know all of the details of this, I would recommend that you read the *Default
    VPC and Default Subnets* documentation at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html).
    However, in short, it is possible to say that everything you put there is potentially
    exposed to the public network if the security group that you configure allows
    that.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个 AWS 区域中，已经创建了一个默认 VPC。如果你想了解更多关于它的详细信息，我建议你阅读 *默认 VPC 和默认子网* 文档，地址是 [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html)。不过，简而言之，可以说，任何放在这里的东西如果你配置的安全组允许，都是有可能暴露给公网的。
- en: Routing and subnet types
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由和子网类型
- en: 'In the official documentation at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenarios.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenarios.html), there
    are four scenarios described for your VPC configuration, and it will be useful
    to look into that. It is important to understand that access to the resources
    that you place in your subnets is determined by the three following factors:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方文档[https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenarios.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenarios.html)中，描述了你VPC配置的四种场景，查阅这些内容会很有帮助。理解你在子网中放置的资源的访问方式由以下三个因素决定是很重要的：
- en: Routing
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由
- en: The **Network Access Control** (**NAC**) list (a stateless firewall)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络访问控制**（**NAC**）列表（无状态防火墙）'
- en: The security group (a stateful firewall)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组（有状态防火墙）
- en: 'My advice is to not touch the NAC; leave the default one attached to each subnet,
    which allows all of the inbound and outbound traffic, and use the security group as
    a firewall instead. A subnet can be classified into three types, based on their
    security levels:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议是不要修改NAC；保持默认的NAC附加到每个子网，它允许所有的入站和出站流量，并使用安全组作为防火墙。根据安全级别，子网可以分为三种类型：
- en: Public subnets
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公有子网
- en: Private subnets with internet access
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有互联网访问的私有子网
- en: Private subnets without internet access
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有互联网访问的私有子网
- en: Accessing private subnets
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问私有子网
- en: 'The resources in public subnets can be accessed by using the public IP and
    enabling the security group to receive connections. For private subnets, you have
    at least three ways to do this, as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 公有子网中的资源可以通过使用公共IP并启用安全组接收连接来访问。对于私有子网，你至少有三种方式可以做到这一点，如下所示：
- en: Jump on a bastion host in one public subnet, and, from there, reach the private
    resources.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳转到一个公有子网中的堡垒主机，然后从那里访问私有资源。
- en: Use site-to-site VPNs from the AWS VPN service, [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpn-connections.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpn-connections.html),
    to the physical router/s in your office. You can connect two routers, for redundancy.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWS VPN服务的站点到站点VPN，[https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpn-connections.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpn-connections.html)，连接到你办公室中的物理路由器/设备。你可以连接两个路由器以增加冗余。
- en: Place a virtual VPN software in an EC2 machine and connect your device to it.
    There are countless solutions that do this, and many are in the AWS Marketplace,
    ready to be used in exchange for a monthly fee.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在EC2实例中放置虚拟VPN软件，并将设备连接到它。有无数的解决方案可以做到这一点，许多都在AWS市场上，按月收费，可以直接使用。
- en: The preferred option, if you have an office with physical routers, is always
    the site-to-site solution.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有带物理路由器的办公室，首选方案始终是站点到站点的解决方案。
- en: What to place in which subnet?
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在哪个子网中放置什么资源？
- en: 'In my test VPC, I have six subnets—two for each type, as you can see in the
    following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的测试VPC中，我有六个子网——每种类型有两个子网，您可以在以下截图中看到：
- en: '![](img/7b0eca17-e3cb-47c3-9cce-a5ec97e788da.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b0eca17-e3cb-47c3-9cce-a5ec97e788da.png)'
- en: '*What should you insert in each kind of subnet?* Consider the following points:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*你应该在每种类型的子网中放置什么？* 请考虑以下几点：'
- en: '**Public subnets**: This refers to all of the external **Elastic Load Balancing**
    (**ELB**) with public access, the bastion host (if you have one), the virtual
    VPN software in an EC2 machine, and any other resource that requires access from
    the internet, and cannot be accessed in any other way.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公有子网**：指的是所有具有公共访问权限的外部**弹性负载均衡**（**ELB**），堡垒主机（如果有的话），位于EC2实例中的虚拟VPN软件，以及任何需要从互联网访问的资源，且无法通过其他方式访问。'
- en: '**Private subnets with internet access**: This refers to all of the internal
    ELBs as well as all EC2 machines behind an ELB (internal or external), that have
    to download or upload something to the internet, and a database that is required
    to download or upload something to the internet'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有互联网访问的私有子网**：指的是所有内部ELB以及所有位于ELB（内部或外部）后面的EC2实例，这些实例需要从互联网下载或上传内容，以及需要从互联网下载或上传内容的数据库。'
- en: '**Private subnets without internet access**: This refers to all resources that
    don''t need access to the internet for any reason, and also resources whose updates
    are downloaded from an internal repository'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有互联网访问的私有子网**：指的是所有不需要任何理由访问互联网的资源，以及那些从内部仓库下载更新的资源'
- en: Identifying subnets from the web console
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Web控制台中识别子网
- en: 'Keep the following points in mind :'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住以下几点：
- en: Every subnet can have one associated route table
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个子网可以关联一个路由表
- en: One route table can be associated with multiple subnets
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个路由表可以与多个子网关联
- en: If you don't explicitly associate a route table to a subnet, the default route
    table is associated automatically
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您没有明确将路由表关联到子网，默认的路由表会自动关联
- en: 'In the following screenshot, you can see three route tables, where the Public
    Route is the default route table:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，您可以看到三个路由表，其中公共路由是默认的路由表：
- en: '![](img/9cda0f1b-b81a-4165-82d0-d349b49e3bf2.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cda0f1b-b81a-4165-82d0-d349b49e3bf2.png)'
- en: 'In the Subnets section, you can see the route table associated with that subnet
    and the single routes, but to change the content of a route table**,** you have
    to edit from the Route Tables section. What differentiate a private route from
    a public route table/subnet is the destination of the `0.0.0.0/0` route. If it''s
    a forward internet gateway, `igw-xxxxx` means that this subnet is reachable from
    the outside world and can connect to the internet, as well (assuming that the
    security group allows for that):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在子网部分，您可以看到与该子网关联的路由表及其单个路由，但要更改路由表的内容，您必须从路由表部分进行编辑。私有路由与公共路由表/子网的区别在于`0.0.0.0/0`路由的目标。如果是一个转发互联网网关，`igw-xxxxx`意味着这个子网可以从外部世界访问，并且能够连接到互联网（假设安全组允许这样做）：
- en: '![](img/60bd4329-52ad-4d9a-a8b2-6373367960a3.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60bd4329-52ad-4d9a-a8b2-6373367960a3.png)'
- en: 'If it points to an NAT gateway or another EC2 instance instead, this means
    that it is a private subnet with internet access, and it can access the internet
    in any way, and so it is reachable from the external world. First, you have to click
    on the Create a NAT Gateway button, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它指向NAT网关或其他EC2实例，这意味着它是一个具有互联网访问权限的私有子网，并且可以通过任何方式访问互联网，因此它可以从外部世界访问。首先，您必须点击“创建NAT网关”按钮，如下所示：
- en: '![](img/ad9c7b44-6d02-4211-91f2-e0f87e0ab73e.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad9c7b44-6d02-4211-91f2-e0f87e0ab73e.png)'
- en: 'After that, you can change the routing table and have a situation like the
    one shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以更改路由表，并出现如以下截图所示的情况：
- en: '![](img/a08840b5-c40a-4099-ad57-8102b4f8d98f.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a08840b5-c40a-4099-ad57-8102b4f8d98f.png)'
- en: 'If the `0.0.0.0/0` isn''t present, as shown in the preceding screenshot, it
    is a completely private subnet:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`0.0.0.0/0`不在，如上截图所示，它是一个完全私有的子网：
- en: '![](img/e8cda0c6-bcb0-4919-9f81-2957619639c7.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8cda0c6-bcb0-4919-9f81-2957619639c7.png)'
- en: Endpoint routing
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点路由
- en: If a database has to upload a backup to a private S3 bucket in the same region,
    it should never use internet access, but should take a private, internal route.
    This is called a VPC endpoint. With this kind of route, you can avoid passing
    through the internet to reach an AWS service, such as S3, DynamoDB, or CloudWatch,
    and gain speed, security, and cost savings (internet traffic has a cost). To see
    all of the services with a VPC endpoint, you can take a look at the official documentation
    at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库必须将备份上传到同一区域的私有S3存储桶，则绝不应使用互联网访问，而应采用私有内部路由。这就是所谓的VPC端点。通过这种路由，您可以避免通过互联网访问AWS服务，如S3、DynamoDB或CloudWatch，从而提高速度、安全性并节省成本（互联网流量是有费用的）。要查看所有支持VPC端点的服务，您可以查看官方文档：[https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html)。
- en: 'Here, we will configure the first VPC endpoint available for the S3 service,
    as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将配置第一个可用的S3服务VPC端点，如下所示：
- en: 'Go to VPC | Endpoints | Create Endpoint:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到VPC | 端点 | 创建端点：
- en: '![](img/7a55f50e-9aa3-4a64-9d1a-0611a2711145.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a55f50e-9aa3-4a64-9d1a-0611a2711145.png)'
- en: 'Leave the default AWS service and select the S3 service, as seen in the following
    screenshot:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留默认的AWS服务并选择S3服务，如下截图所示：
- en: '![](img/ff40f237-8d4a-44a2-ad75-7e33af134d78.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff40f237-8d4a-44a2-ad75-7e33af134d78.png)'
- en: 'Select the VPC that you are working on, and all of the route tables to modify:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您正在使用的VPC，并修改所有路由表：
- en: '![](img/6a711d1b-fb73-4641-aa7f-64133709a0d5.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a711d1b-fb73-4641-aa7f-64133709a0d5.png)'
- en: 'Now, you can see a new route rule, as shown in the following screenshot:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以看到一个新的路由规则，如下截图所示：
- en: '![](img/2b8643d5-1fa1-40ee-9c77-a52f33f52ca1.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b8643d5-1fa1-40ee-9c77-a52f33f52ca1.png)'
- en: Keep in mind that this will work for all of the buckets created in the same
    VPC region. In this example, it is `us-east-1`, North Virginia.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这将适用于在同一VPC区域中创建的所有存储桶。在这个例子中，区域是`us-east-1`，即北弗吉尼亚。
- en: 'In the AWS documentation for the *Endpoints for Amazon S3* at [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints-s3.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints-s3.html), there
    is an interesting hardening rule for the S3 bucket policy, as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS文档的 *Endpoints for Amazon S3* 部分 [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints-s3.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints-s3.html)，有一个关于S3存储桶策略的有趣的强化规则，如下所示：
- en: '[PRE5]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I have changed this by adding my VPC endpoint ID, `vpce-039f31bfec07367ea` instead
    of the one in the documentation. With this rule, the bucket `my_secure_bucket`
    will be only reachable from the VPCs that are associated with that endpoint.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过添加我的VPC端点ID `vpce-039f31bfec07367ea` 替换了文档中的那个。根据此规则，`my_secure_bucket` 存储桶只能从与该端点关联的VPC访问。
- en: AWS WAF
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS WAF
- en: You restrict access by using security groups and private subnets for all your
    resources. All of the monitor logs, VPC Flow Logs, and CloudTrails are active.
    IAM policies are enforced, everything is correctly secured, and nothing is exposed.
    This is because you have the VPN service to access any resources. However, if
    you want to provide an internet service, you have to open at least one point of
    access to the external world. As we already discussed in the *VPC* *Subnets* section,
    you should expose as few resources in the public subnet as possible, with the
    `0.0.0.0/0` security group rule open. If possible, only an ELB should stay in
    this situation, passing connections to the EC2 machines in private subnets, since
    the EC2 machines communicate with the RDS databases with strict security rules.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用安全组和私有子网限制访问所有资源。所有监视日志、VPC流日志和CloudTrail都是活跃的。IAM策略已强制执行，所有内容都得到了正确的安全保护，没有任何内容暴露。这是因为您有VPN服务可以访问任何资源。但是，如果您想提供Internet服务，您必须至少打开一个对外界的访问点。正如我们在
    *VPC* *子网* 部分已经讨论过的那样，应该尽可能少地在公共子网中暴露资源，只有一个ELB应该处于此状态，将连接传递给私有子网中的EC2机器，因为EC2机器使用严格的安全规则与RDS数据库进行通信。
- en: This is the most classic AWS application, and it is not necessary to explain
    it in detail here. Instead, we want to focus on increasing the security of the
    ELB with the AWS WAF. For more information, refer to [https://aws.amazon.com/waf/](https://aws.amazon.com/waf/). AWS
    WAF is a firewall that works at the application level and can protect at level
    7 of the TCP/IP stack protocol, rather than at level 4 of the TCP/IP stack, where the
    security groups work.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最经典的AWS应用程序之一，在此无需详细解释。相反，我们希望关注如何通过AWS WAF增强ELB的安全性。有关更多信息，请参阅 [https://aws.amazon.com/waf/](https://aws.amazon.com/waf/)。AWS
    WAF是一种在应用程序级别工作的防火墙，可以在TCP/IP协议栈的第7层进行保护，而不是在第4层（安全组所在层）。
- en: '*What can the WAF do that a security group can''t?* Consider the following
    answers to this question:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*WAF能做什么安全组不能做到？* 考虑以下问题的答案：'
- en: Protect against SQL injection and cross-site scripting
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止SQL注入和跨站脚本攻击
- en: Block **denial-of-service** (**DoS**) and **distributed denial-of-service**
    (**DDoS**)
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻止**拒绝服务**（**DoS**）和**分布式拒绝服务**（**DDoS**）
- en: Protect a part of the URL of your web application, such as `www.mywebsite/admin`
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护您Web应用程序URL的一部分，例如 `www.mywebsite/admin`
- en: In this chapter, we will create two practical POCs with Terraform about DoS
    and a sub-URL. To do this, we are going to create a web application playground,
    apply the WAF, and test the rules to trigger its protection. Keep in mind that
    when this part of the book was being written, the WAF could only be applied to
    the **application load balancer** (**ALB**) and CloudFront, but AWS continuously
    updates its services, so there is no knowing what might be done in the near future.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Terraform创建两个关于DoS和子URL的实用POC。为此，我们将创建一个Web应用程序沙盒，应用WAF，并测试触发其保护规则。请注意，在撰写本书的这一部分时，WAF仅适用于**应用负载均衡器**（**ALB**）和CloudFront，但AWS不断更新其服务，所以未来可能会有所改变。
- en: Web application playground
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序沙盒
- en: Our test playground will be an ALB and an EC2 machine with an Apache2 web server installed.
    In this section, we will only create the environment and test it, without any
    WAF configuration. In the next section, however, we will add the WAF level on
    the ALB.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试沙盒将是一个ALB和一个安装了Apache2 Web服务器的EC2机器。在本节中，我们仅创建环境并进行测试，不涉及任何WAF配置。但在下一节中，我们将在ALB上添加WAF级别。
- en: 'To create the following playground, we will use a Terraform module that is
    available on GitHub:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建以下沙盒，我们将使用GitHub上提供的一个Terraform模块：
- en: '![](img/69c2e81d-c9e6-40e9-b752-5614a7d72dc6.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69c2e81d-c9e6-40e9-b752-5614a7d72dc6.png)'
- en: 'Start by adding the following code to your `main.tf` file:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在你的 `main.tf` 文件中添加以下代码：
- en: '[PRE6]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Some things to keep in mind are as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一些事项如下：
- en: The ALB must always live in at least two subnets, in two different availability
    zones.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ALB 必须始终位于至少两个子网中，且分别位于两个不同的可用区。
- en: This ALB is reachable on port `80` and uses an HTTP listener that can be acceptable
    for a PoC. However, in your real environment, it is best to register a public
    domain with AWS Route 53, create an SSL certificate with AWS Certificate Manager,
    associate this certificate to the ALB, and use an HTTPS listener.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个 ALB 可以通过端口 `80` 访问，并使用 HTTP 监听器，这对于 PoC（概念验证）来说是可以接受的。然而，在你的真实环境中，最好通过 AWS
    Route 53 注册一个公共域名，使用 AWS Certificate Manager 创建一个 SSL 证书，将这个证书关联到 ALB，并使用 HTTPS
    监听器。
- en: The security group settings are very strict, and you can take a look at the
    module code to see that the ALB security group ingress is reachable only from
    port `80` to the whole internet, `0.0.0.0/0`, and this can be reached in *egress*
    only from port `80` of the EC2 security group.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组设置非常严格，你可以查看模块代码，看到 ALB 的安全组入口仅从端口 `80` 到整个互联网 `0.0.0.0/0` 可达，并且只能从 EC2 安全组的端口
    `80` 进行 *出口* 访问。
- en: 'As usual, to create the resource you need to run the following commands:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，要创建资源，你需要运行以下命令：
- en: '[PRE7]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Find the DNS ALB name, as shown in the following screenshot, and copy it:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 找到 DNS ALB 名称，如下截图所示，并复制它：
- en: '![](img/3e2d7f8d-fcc7-4f29-91b5-efa188b5929a.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e2d7f8d-fcc7-4f29-91b5-efa188b5929a.png)'
- en: 'Open it from your browser, as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 通过浏览器打开它，如下所示：
- en: '![](img/1f443cb9-679c-48e6-afab-daac71e6a059.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f443cb9-679c-48e6-afab-daac71e6a059.png)'
- en: 'There is also a subdirectory that we can use to test our WAF later:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个子目录，我们可以稍后用来测试我们的 WAF：
- en: '![](img/feaf6ed6-30cd-45ff-814e-4f66514444c9.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/feaf6ed6-30cd-45ff-814e-4f66514444c9.png)'
- en: 'If you don''t use it quickly enough, your playground will destroy it with the `terraform` command,
    to avoid incurring any unnecessary charges. If you want to destroy just the playground,
    but not the other resources that were created, you can use a selective `destroy` module,
    as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有足够快地使用它，你的 playground 会通过 `terraform` 命令销毁它，以避免产生任何不必要的费用。如果你只想销毁 playground，而不销毁其他已创建的资源，你可以使用选择性
    `destroy` 模块，如下所示：
- en: '[PRE8]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you confirm with a `Yes`, then the 12 module resources will be destroyed.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确认选择 `Yes`，那么将销毁这 12 个模块资源。
- en: Allow a sub-URL to be accessible only from an IP
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 允许只有来自某个 IP 的子 URL 可访问
- en: Usually, in your web application, you have an admin area, and it could be the
    case that this part of your portal isn't accessible by everyone. Of course, you
    have a username and password, but an attacker can steal those credentials in many
    ways.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在你的 Web 应用程序中，你有一个管理区域，可能这个部分的门户并不是所有人都能访问的。当然，你有用户名和密码，但攻击者可以通过多种方式窃取这些凭证。
- en: If it is a sensitive application, for the principle of least privilege to be
    followed, it is convenient to restrict access to the locations where this kind
    of admin access needs to be used; for example, from the office. If you can have
    different access for the admin section you can put this behind an internal load
    balancer and connect the VPC to your office by using a VPN service, as discussed
    in previous sections. The internal load balancer DNS name is converted with the
    private IPs of your VPC, and, in this way, you can assure that connections are
    only made from a trusted source, such as your office.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个敏感应用程序，为了遵循最小权限原则，限制访问仅限于需要使用这种管理访问的位置是很方便的；例如，从办公室。如果你可以为管理区域设置不同的访问权限，你可以将其放在内部负载均衡器后面，并通过使用
    VPN 服务将 VPC 连接到你的办公室，正如之前的部分所讨论的那样。内部负载均衡器的 DNS 名称会转换为你的 VPC 的私有 IP 地址，通过这种方式，你可以确保连接仅来自受信任的来源，例如你的办公室。
- en: However, many times, you won't have this option, because the application is
    all in one bundle, and you cannot separate the admin sub-URL from the main part.
    In such cases, the only change available is to use an AWS WAF and apply a filter
    to the admin sub-URL only. We need to create a WAF and attach it to the ALB for
    our playground web app.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，很多时候你没有这个选项，因为应用程序是一个整体打包的，无法将管理子 URL 与主部分分开。在这种情况下，唯一可用的修改是使用 AWS WAF，并仅对管理子
    URL 应用过滤器。我们需要创建一个 WAF 并将其附加到 ALB 上，以供我们的 Web 应用程序使用。
- en: 'To do this, I have created a `terraform` module, and you can use it in your
    code with the following lines:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我创建了一个 `terraform` 模块，你可以通过以下几行代码将其用于你的代码中：
- en: '[PRE9]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Of course, don't forget to replace your office IP or home connection public
    IP in the `my_office_ip` field, and to use the subnet mask `/32` if it is a single
    IP, as in my case.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，不要忘记将你的办公IP或家庭连接的公共IP替换为`my_office_ip`字段中的内容，如果是单一IP，就像我的情况一样，使用子网掩码`/32`。
- en: 'The commands are the usual ones, as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 命令和往常一样，如下所示：
- en: '[PRE10]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To facilitate the test, I have added an `alb_url` output variable, as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便测试，我添加了一个`alb_url`输出变量，如下所示：
- en: '[PRE11]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, the WAF is associated to the ALB, and all of the requests will be filtered.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，WAF已与ALB关联，所有请求都将被过滤。
- en: Testing with the command line
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行进行测试
- en: 'This time, we are going to test it using the command-line tool, `curl`. As
    you can see from my office IP, no issues arose when trying to reach both the root
    directory and the sub-URL:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将使用命令行工具`curl`进行测试。从我的办公IP可以看到，当尝试访问根目录和子URL时，未出现任何问题：
- en: '[PRE12]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Instead, when I used a virtual machine with another public IP, I got back the
    following result:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，当我使用带有另一个公共IP的虚拟机时，得到了以下结果：
- en: '[PRE13]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Identifying the WAF from the web console
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Web控制台识别WAF
- en: 'Take a look at the resource created, that is, the service WAF, as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 查看所创建的资源，也就是服务WAF，如下所示：
- en: '![](img/ab338043-bd83-4d95-9747-9beb1f125b46.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab338043-bd83-4d95-9747-9beb1f125b46.png)'
- en: 'View the Web ACLs option, and select the region where you are working from
    the Filter menu. You can see what the Terraform module creates, as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Web ACL选项，并从过滤器菜单中选择你所在的区域。你可以看到Terraform模块所创建的内容，如下所示：
- en: '![](img/c79cb95c-dd32-4735-891f-a324d7023f48.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c79cb95c-dd32-4735-891f-a324d7023f48.png)'
- en: 'In the Rules section, it is possible to see the filter itself, and the IP that
    is allowed to access the restricted area:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在“规则”部分，可以看到过滤器本身，以及允许访问受限区域的IP：
- en: '![](img/f580a4a8-7dd0-40bf-b740-f97774e2b7b5.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f580a4a8-7dd0-40bf-b740-f97774e2b7b5.png)'
- en: Blocking DoS/DDoS attacks
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阻止DoS/DDoS攻击
- en: A DoS attack is an old problem for our applications, especially in their distributed
    versions, the DDoS, where multiple sources (usually hacked devices of many kinds,
    that form a botnet) try to run a DoS by running so many queries at the same time
    that a network becomes overloaded. In this case, to defend and continue to serve
    traffic to legitimate users, it is fundamental to identify and block malicious
    sources.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: DoS攻击是我们应用程序中的老问题，尤其是在分布式版本中，即DDoS攻击，其中多个来源（通常是许多被黑客攻击的设备，组成一个僵尸网络）试图通过同时发出大量查询来发起DoS攻击，导致网络过载。在这种情况下，为了防御并继续为合法用户提供流量服务，识别并阻止恶意源是至关重要的。
- en: It is worth spending a little bit of time reading the official documentation
    on *Denial of Service Attack Mitigation on AWS, *at [https://aws.amazon.com/answers/networking/aws-ddos-attack-mitigation/](https://aws.amazon.com/answers/networking/aws-ddos-attack-mitigation/).
    What we want to do here is to focus on a practical example of using WAF.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 值得花一点时间阅读关于*AWS上拒绝服务攻击缓解*的官方文档，[https://aws.amazon.com/answers/networking/aws-ddos-attack-mitigation/](https://aws.amazon.com/answers/networking/aws-ddos-attack-mitigation/)。我们在这里要做的是专注于使用WAF的实际示例。
- en: The AWS WAF can block a single public IP that is sending too many requests.
    The question that should pop up in your mind is, *how many requests are too many?*
    This depends on your web application, so what you should do before applying any
    filter of this kind is measure the number of requests received from a single IP
    in a five-minute time range.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: AWS WAF可以阻止发送过多请求的单一公共IP。你可能会问，*多少请求算太多？* 这个取决于你的Web应用程序，因此在应用任何此类过滤器之前，你需要测量来自单一IP在五分钟时间范围内接收到的请求数量。
- en: Keep in mind that the AWS WAF lower limit that it is 2,000 requests and also
    according to my tests, though request `2001` will be not blocked, after a while,
    you will see a number of subsequent requests blocked. As we did for the other
    examples, we will not trust what AWS declares, but we will test our PoC after
    its creation. To immediately see whether the system is working, we will set up
    the AWS limit for our sub-URL: `http://playground-1940933132.us-east-1.elb.amazonaws.com/subdir/`.
    We are not going to apply anything on the main page, at `http://playground-1940933132.us-east-1.elb.amazonaws.com`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，AWS WAF的下限是2000个请求，并且根据我的测试，虽然请求`2001`不会被阻止，但一段时间后，你会看到许多后续请求被阻止。就像我们对其他示例所做的那样，我们不会完全相信AWS的声明，而是会在创建后测试我们的PoC。为了立即看到系统是否在工作，我们将为我们的子URL`http://playground-1940933132.us-east-1.elb.amazonaws.com/subdir/`设置AWS限制。我们不会对主页`http://playground-1940933132.us-east-1.elb.amazonaws.com`应用任何限制。
- en: Creating AWS WAF with Terraform
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Terraform 创建 AWS WAF
- en: 'Destroy the `limit_admin_WAF` module to avoid conflicts. You can do so with
    the following command:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 销毁 `limit_admin_WAF` 模块以避免冲突。你可以使用以下命令进行操作：
- en: '[PRE14]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, comment on the module in your code, using `/* */`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在你的代码中使用 `/* */` 注释掉模块：
- en: '[PRE15]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create the new module with the following code:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码创建新的模块：
- en: '[PRE16]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As usual, include the following code snippet:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，包含以下代码片段：
- en: '[PRE17]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Take the DNS name from the output and test that everything is working with
    the `curl` command, as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中获取 DNS 名称，并使用 `curl` 命令测试一切是否正常，具体如下：
- en: '[PRE18]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following is a `playground` main directory:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `playground` 主目录：
- en: '[PRE19]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is a subdirectory. Log in to the web console, go to the WAF service, select
    the Virginia region, and note the `subdir` rule of the Rate-based type, as shown
    in the following screenshot:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个子目录。登录到 Web 控制台，进入 WAF 服务，选择弗吉尼亚区域，并注意 Rate-based 类型的 `subdir` 规则，如下图所示：
- en: '![](img/a8045127-8b44-40dd-999a-fa32ffc9b43b.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8045127-8b44-40dd-999a-fa32ffc9b43b.png)'
- en: 'Also, in the Rules section, you will notice that right now, there aren''t any
    IPs blocked:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在“规则”部分，你会注意到目前没有任何 IP 被阻止：
- en: '![](img/c7a96ad3-d9ef-4563-a078-d2a5e866f569.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7a96ad3-d9ef-4563-a078-d2a5e866f569.png)'
- en: Keep in mind that any kind of DoS test is forbidden by AWS by default, and it
    can be blocked, because it violates the terms and conditions. For more information
    on the *AWS Service Terms*, refer to [https://aws.amazon.com/service-terms/](https://aws.amazon.com/service-terms/).
    In our case, we are going to run 2,000/4,000 requests from a single IP in a short
    period of time. It is not so large an amount that it will trigger the AWS alarm. If
    you have a very good internet connection, you can run this script from your laptop,
    but my advice is to use an Amazon Linux EC2 machine in a public subnet directly
    exposed to the internet, so that we have the same conditions of experimentation.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，AWS 默认禁止任何形式的 DoS 测试，并且可能会被阻止，因为它违反了条款和条件。有关 *AWS 服务条款* 的更多信息，请参阅 [https://aws.amazon.com/service-terms/](https://aws.amazon.com/service-terms/)。在我们的案例中，我们将从单个
    IP 在短时间内发送 2,000/4,000 个请求。这么大数量的请求不会触发 AWS 的警报。如果你有非常好的互联网连接，可以从你的笔记本电脑运行此脚本，但我的建议是使用直接暴露在互联网上的
    Amazon Linux EC2 机器，这样我们能在相同的实验条件下进行操作。
- en: 'Log in on your machine and download the script with the following command:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到你的机器，并使用以下命令下载脚本：
- en: '[PRE20]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will run 4,000 requests to your ALB playground. From the output, you can
    see that the first 2,000/3,000 requests will be successful:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向你的 ALB 测试环境发送 4,000 个请求。从输出中，你可以看到前 2,000/3,000 个请求将会成功：
- en: '[PRE21]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'However, you will then start to receive rejected requests like the following:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你将开始收到如下的拒绝请求：
- en: '[PRE22]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you don''t see this during the first run, you will have to run the script again to
    trigger the requests. You can log in with the web console in the WAF service,
    and you will see the public IP of your EC machine in the Rules section:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在第一次运行时没有看到此项，你需要重新运行脚本来触发请求。你可以通过 WAF 服务中的 Web 控制台登录，然后在“规则”部分看到你的 EC 机器的公共
    IP：
- en: '![](img/a25056f8-5185-421e-bd53-dfe2724a4539.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a25056f8-5185-421e-bd53-dfe2724a4539.png)'
- en: Still, if you run a `curl` to the root directory, you will see that it is still
    accessible from your EC2 machine. If you try to access it from your laptop, the
    `subdir` URL will still be accessible. If you don't send any more requests for
    a while, the public IP of your EC2 machine will be removed from the blacklist,
    and this is correct, because that IP is not a threat if it returns to transmitting
    normal traffic amounts.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你运行 `curl` 请求根目录，你会看到它仍然可以从你的 EC2 机器访问。如果你尝试从你的笔记本电脑访问，`subdir` URL 仍然可以访问。如果你暂时不再发送请求，你
    EC2 机器的公共 IP 会从黑名单中移除，这是正确的，因为如果该 IP 恢复正常流量传输，它就不再是威胁。
- en: DDoS attach consideration
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DDoS 攻击考虑
- en: 'AWS WAF can be a very useful tool for mitigating DOS and DDOS attacks, but
    before starting to use it, it''s convenient to do the following:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: AWS WAF 是缓解 DoS 和 DDoS 攻击的非常有用的工具，但在开始使用之前，建议执行以下操作：
- en: Read and observe how to implement the DoS attack mitigation on AWS
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读并观察如何在 AWS 上实现 DoS 攻击缓解
- en: Know your application, and set up a good limit for concurrent connections, to
    avoid blocking valid traffic and getting false positive responses
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解你的应用程序，并为并发连接设置合理的限制，避免阻塞有效流量并获得误报响应
- en: Build a scalable web application, to respond to requests until the WAF understands
    that it is under attack and triggers its filters
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个可扩展的 web 应用程序，以响应请求，直到 WAF 理解到它正受到攻击并触发其过滤器。
- en: WAF for SQL Injection (SQLi)
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 注入（SQLi）的 WAF 防护
- en: We created and tested the WAF features for rate rules and sub-URL limits. As
    we said at the beginning, there is also the SQLi feature, and it is possible to
    find some CloudFormation templates related to this on the official AWS website
    at [https://github.com/aws-samples/aws-waf-sample](https://github.com/aws-samples/aws-waf-sample) GitHub
    repository.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建并测试了 WAF 的速率规则和子 URL 限制功能。正如我们在开始时所说的，还有 SQLi 功能，并且可以在官方 AWS 网站的[https://github.com/aws-samples/aws-waf-sample](https://github.com/aws-samples/aws-waf-sample)
    GitHub 仓库中找到与此相关的一些 CloudFormation 模板。
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we applied the least privilege principle at different level.
    In the IAM section, you learned how to lock in your root account and pass control
    to IAM users, by configuring a password policy and setting up permissions and
    groups. Enabling CloudTrail, we tracked and monitored every action performed on
    our infrastructure by an IAM user or by a service, in our environment. With VPC
    Flow Logs, we observed a powerful network monitor applicable at any point of our
    VPC, and we also created our prerequisites using Terraform, a wonderful tool for
    growing our practice. . We also covered the concept of the Terraform module. In
    the *VPC subnets* section, we looked at the three kinds of subnet that we can
    use in our AWS cloud, and where to place the different kinds of resources available
    in our infrastructure, exposing it to the internet as little as possible and keeping
    as much as possible in private zones.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在不同级别应用了最小权限原则。在 IAM 部分，您学习了如何锁定根账户并将控制权交给 IAM 用户，通过配置密码策略、设置权限和创建组。通过启用
    CloudTrail，我们跟踪并监控了由 IAM 用户或服务在我们环境中执行的每个操作。使用 VPC Flow Logs，我们观察到适用于 VPC 任意位置的强大网络监控工具，并且我们还使用
    Terraform 创建了我们的前提条件，Terraform 是一个用于扩展我们实践的绝佳工具。我们还介绍了 Terraform 模块的概念。在 *VPC
    子网* 部分，我们研究了可以在 AWS 云中使用的三种子网类型，以及如何将不同种类的资源放置在我们的基础设施中，尽量减少将其暴露到互联网，并尽可能将其保留在私有区域。
- en: While discussing the WAF service, we explored one of the most powerful services
    for security available in the AWS world. Protecting some sensitive parts of your
    web application can be useful. DoS protection is something that should always
    be present in professional web service. Configuring WAF is not always easy, but
    thanks to the power of Terraform automation and to the PoC modules available in
    this book, understanding the principles and configuring accordingly is only some
    `terraform` and `git` commands away.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 WAF 服务时，我们探索了 AWS 世界中最强大的安全服务之一。保护 Web 应用程序的某些敏感部分是非常有用的。DoS 保护是专业 Web 服务中应该始终存在的东西。配置
    WAF 并不总是容易的，但得益于 Terraform 自动化的强大功能以及本书中提供的 PoC 模块，理解原理并进行相应配置只需一些 `terraform`
    和 `git` 命令即可。
- en: Questions
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Suppose that I have just registered to the AWS cloud and received my password
    by email. Can I start to build my infrastructure, or do I have to follow some
    best practice beforehand?
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我刚刚注册了 AWS 云并通过电子邮件收到了我的密码。我可以开始构建我的基础设施吗？还是必须先遵循一些最佳实践？
- en: What type of logging in should I enable in my AWS account?
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我应该在我的 AWS 账户中启用哪种类型的登录？
- en: Are security groups and NACL the only firewalls available in AWS?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全组和 NACL 是 AWS 中唯一的防火墙吗？
- en: How can I protect my web application from DDoS attacks by using AWS?
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我如何使用 AWS 保护我的 web 应用程序免受 DDoS 攻击？
- en: Can I put all of my resources in one subnet?
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我可以将所有资源放在一个子网中吗？
- en: Further reading
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: Security is a very wide field and one chapter cannot be exhaustive. Further
    resources are available at [https://aws.amazon.com/whitepapers/aws-security-best-practices/](https://aws.amazon.com/whitepapers/aws-security-best-practices/).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 安全是一个非常广泛的领域，一章内容无法面面俱到。更多资源可以在[https://aws.amazon.com/whitepapers/aws-security-best-practices/](https://aws.amazon.com/whitepapers/aws-security-best-practices/)找到。
- en: 'The **Center for Internet Security** (**CIS**) Benchmark for AWS Foundation
    is a security hardening guideline for securing AWS accounts/environments. Refer
    to the following links:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网安全中心**（**CIS**）的 AWS 基础安全基准是一个用于保护 AWS 账户/环境的安全加固指南。请参考以下链接：'
- en: '*CIS Amazon Web Services Foundations* at [https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf](https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf)'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*CIS Amazon Web Services 基础* 请参阅 [https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf](https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf)。'
- en: '*CIS **Script to check benchmark against the AWS API* at [https://github.com/awslabs/aws-security-benchmark](https://github.com/awslabs/aws-security-benchmark)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*CIS **用于检查与 AWS API 基准匹配的脚本* 请参阅 [https://github.com/awslabs/aws-security-benchmark](https://github.com/awslabs/aws-security-benchmark)。'
- en: For more information on *AWS Certified Security - Specialty*, refer to [https://aws.amazon.com/certification/certified-security-specialty/](https://aws.amazon.com/certification/certified-security-specialty/).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多关于 *AWS认证安全专家* 的信息，请参考 [https://aws.amazon.com/certification/certified-security-specialty/](https://aws.amazon.com/certification/certified-security-specialty/)。
