- en: Cloud Data Centers - The New Reality
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云数据中心——新现实
- en: In the last few years, there has been a shift toward cloud systems, which enable
    the companies to scale in an easy and cheap way depending on the needs. They also
    enable companies to take advantage of something called **Infrastructure as Code**
    (**IAC**), which basically allows you to treat your physical resources (servers
    and routers) that previously had to be bought according to the needs as code that
    you can review, run, and re-run to adapt the infrastructure to your requirements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年，云系统逐渐成为主流，它们使得企业能够根据需求以一种简便且低成本的方式扩展。它们还使公司能够利用一种叫做**基础设施即代码**（**IAC**）的技术，这基本上允许你将之前需要根据需求购买的物理资源（服务器和路由器）视为代码，你可以查看、运行并重新运行这些代码，以使基础设施适应你的需求。
- en: In this chapter, we are going to walk through the main cloud providers, taking
    a look at their main strengths and weak points in order to form a clear picture
    of what they offer and how we can, as engineers, take advantage of it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍主要的云服务提供商，重点分析它们的主要优点和缺点，以便形成清晰的认识，了解它们提供了什么以及我们作为工程师如何利用这些服务。
- en: 'Out of all the providers in the market, we are going to focus on these two:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在市场上的所有提供商中，我们将重点关注这两家：
- en: '**Amazon Web Services** (**AWS**)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Web Services**（**AWS**）'
- en: Google Cloud Platform
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Platform
- en: 'We are also going to talk a bit about these:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将简要讨论以下内容：
- en: Heroku
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku
- en: Azure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure
- en: DigitalOcean
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DigitalOcean
- en: We should have an open minded attitude, as all of them can offer a different
    and valuable set of features, something that should not be overlooked.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该保持开放的心态，因为它们每个都可以提供不同且有价值的功能集，这是不容忽视的。
- en: We are going to introduce **Kubernetes**, which is, in my humble opinion, the
    answer to many problems in the modern DevOps world.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍**Kubernetes**，在我个人看来，它是现代 DevOps 世界中许多问题的答案。
- en: Amazon Web Services
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊网络服务
- en: 'Amazon is by far the biggest online retailer with an almost worldwide presence.
    Everyone has heard about Amazon and the possibilities that this type of store
    present to the busy society of the 21st century: they offer home delivery of pretty
    much anything that can be bought in a conventional store.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊无疑是全球最大的在线零售商，几乎在全球都有业务。每个人都听说过亚马逊，以及这种商店为21世纪繁忙社会带来的各种可能性：它们提供几乎任何可以在传统商店购买的商品的送货上门服务。
- en: Amazon was founded in 1994 by Jeff Bezos, and since then, it has grown consistently
    every year, offering more and more products and services, but at some point, they
    got into the cloud computing business. It makes sense that a big company such
    as Amazon needs a lot of processing power, is reliable, and is able to adapt to
    the necessities of the business quickly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊由 Jeff Bezos 于 1994 年创立，从那时起，它每年都在持续增长，提供越来越多的产品和服务，但有一天，它们进入了云计算业务。对于像亚马逊这样的大公司来说，拥有大量的处理能力是有意义的，同时它还具有可靠性，并能够迅速适应业务需求。
- en: Initially, the cloud services were an internal solution to satisfy the high
    availability needs of the business as well as have the capacity to grow in a uniform
    way. This created a lot of expertise within the company in building a top notch
    **Infrastructure as a Service** (**IaaS**) that, at some point, they realized
    could be sold to customers.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，云服务是为了满足业务的高可用性需求，并且能够以统一的方式扩展。这使得公司在构建一流的**基础设施即服务**（**IaaS**）方面积累了大量经验，最终他们意识到这些技术可以出售给客户。
- en: By 2006, there was nothing in the market to compete with them, so they were
    in the sweet spot for a successful start.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到了 2006 年，市场上没有任何竞争对手，所以它们处于成功起步的有利位置。
- en: I remember I was only in college when the first two services, EC2 and EC3, were
    introduced in a conference.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得当时我还在大学，EC2 和 EC3 两项服务首次在一个会议上推出。
- en: EC2 allowed you to create virtual machines on the cloud with an API that was
    manipulated through a command-line interface as well as a web interface that would
    act as a monitor of your resources.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: EC2 让你能够在云上创建虚拟机，提供一个通过命令行接口和 Web 界面进行操作的 API，后者可以作为你资源的监控工具。
- en: S3 was a key value (kind of) storage that allowed you to store immense sets
    of data at a very low price manipulated through the command-line interface as
    well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: S3 是一种关键价值存储（某种意义上），允许你以非常低的价格存储大量数据，并且同样可以通过命令行界面进行操作。
- en: 'It really was a revolution. It was a complete paradigm shift: now you could
    ask for more resources as you need. This was as simple as an API call, and there
    you go: three new machines ready to be used in 2 minutes. The following screenshot
    is a list of services on AWS:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的是一次革命。它是一个完全的范式转变：现在你可以根据需要请求更多资源。这就像是一个API调用，几分钟内就可以得到三台新机器。下面的截图展示了AWS上的服务列表：
- en: '![](img/22f5e569-6fcb-44b2-ae21-31e98ce48d4b.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22f5e569-6fcb-44b2-ae21-31e98ce48d4b.png)'
- en: Catalog of services in AWS at January 2017
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年1月AWS服务目录
- en: In the last few years, Amazon has been adding services very often, up until
    a point where it is hard to keep up with the pace. In this chapter, we are going
    to walk through the main services (or what I consider the most useful), showing
    their features and areas of application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，亚马逊频繁地添加服务，直到有时很难跟上这种速度。在本章中，我们将介绍一些主要的服务（或我认为最有用的服务），展示它们的功能和应用领域。
- en: EC2 - computing service
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EC2 - 计算服务
- en: The first element that a cloud system has to provide to the users is computing
    power. **EC2** stands for **Elastic Compute Cloud**, and it allows you to create
    machines on the cloud with a few clicks.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 云系统必须为用户提供的第一个元素是计算能力。**EC2**代表**弹性计算云**，它允许你通过几次点击在云端创建机器。
- en: 'This is what the EC2 interface looks like:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是EC2界面的样子：
- en: '![](img/42721bc2-6e22-4a08-8e95-062b2962f003.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42721bc2-6e22-4a08-8e95-062b2962f003.png)'
- en: EC2 interface
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: EC2界面
- en: EC2 was launched on August 25, 2006 (beta version), and it has evolved a lot
    since then. It provides the user with different sizes of machines and is available
    across the globe (11 different regions as of today). This means that the user
    can spin up machines in different parts of the globe for high availability and
    latency purposes, enabling the engineers of your company to build multi-zone applications
    without coordinating teams across the globe.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: EC2于2006年8月25日推出（beta版本），自那时以来已经经历了很多发展。它为用户提供不同大小的机器，并且在全球范围内可用（截至今天，覆盖11个不同的区域）。这意味着用户可以在全球不同地区启动机器，以实现高可用性和低延迟，使得你公司工程师能够在不需要跨国协调团队的情况下构建多区域应用。
- en: They also provide different types of instances optimized for different tasks
    so that the users can tailor the infrastructure to their needs. In total, there
    are 24 different type of instances, but they are also grouped by type, which we
    will walk through later on in this chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还提供不同类型的实例，针对不同任务进行了优化，使得用户可以根据自己的需求定制基础设施。总共有24种不同类型的实例，但它们也按类型进行了分组，我们将在本章后面详细介绍。
- en: Let’s look at an example of how to launch an instance.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个如何启动实例的示例。
- en: Launching an instance
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动实例
- en: The first thing you need to do is go to the AWS EC2 interface.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要进入AWS EC2界面。
- en: 'Now click on the Launch Instance button, which will bring you to the following
    screen:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击启动实例按钮，这将带你进入以下界面：
- en: '![](img/aa358a37-cb82-4374-98ea-f7cfd1b594a3.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa358a37-cb82-4374-98ea-f7cfd1b594a3.png)'
- en: This is where you can choose the image to run. As you can see, the image is
    the operating system that will run on top of the EC2 Instance. In Amazon jargon,
    this image is called **Amazon Machine Image** (**AMI**), and you can create your
    own ones and save them for later usage, allowing you to ship prebuilt software.
    For now, choose Ubuntu Server 16.04 by clicking on Select.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是你可以选择运行镜像的地方。如你所见，镜像是将运行在EC2实例上的操作系统。在亚马逊的术语中，这个镜像被称为**Amazon Machine Image**（**AMI**），你可以创建自己的镜像并保存以便后续使用，这样可以便捷地发布预先构建的软件。现在，选择Ubuntu
    Server 16.04并点击选择。
- en: The next screen is about the size of the image. AWS offers quite a big variety
    of sizes and types of images. This parameter drastically affects the performance
    of the application regarding the network, memory, and CPU performance as well
    as the I/O of the machine.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一屏显示的是镜像的大小。AWS提供了多种大小和类型的镜像。这一参数会显著影响应用程序的性能，包括网络、内存、CPU性能以及机器的I/O。
- en: 'Let’s look at the different types:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看一下不同类型的实例：
- en: '| **Type** | **Description** |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **描述** |'
- en: '| Bursting instances | T2 are general-purpose instances for burst processing.
    They provide a baseline level of CPU for peaks of processing power, but these
    peaks are available on an accumulative basis: while idle, the CPU accumulates
    credits that can be used during high demand periods, but once these credits are
    used, the performance goes back to the baseline level. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 突发型实例 | T2是用于突发处理的通用型实例。它们提供了一个CPU基线水平，以应对处理能力的高峰，但这些高峰是按累积方式提供的：在空闲时，CPU会累积积分，这些积分可以在需求高峰期使用，一旦这些积分用尽，性能就会恢复到基线水平。
    |'
- en: '| General purpose | M3 is a general-purpose instance with dedicated resources
    (no burst credits). It provides a good balance between CPU, memory, and network
    resources, and it is the minimum instance for production applications that need
    solid performance.M4 follows the same philosophy as M3 but with an updated hardware:
    **Amazon Elastic Block Store **(**Amazon ****EBS**) optimized and a better CPU
    as well as enhanced networking are the highlights of this instance type.  |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 通用型 | M3是一个通用型实例，具有专用资源（没有突发积分）。它在CPU、内存和网络资源之间提供了良好的平衡，是需要稳定性能的生产应用程序的最小实例。M4遵循与M3相同的理念，但硬件有所更新：**亚马逊弹性块存储**（**Amazon
    EBS**）优化、更好的CPU以及增强的网络系统是该实例类型的亮点。 |'
- en: '|  Compute Optimized | The compute optimized instances in AWS are C3 and C4\.
    In the same way as the M instances, C4 is a hardware upgrade of the C3\. These
    types of instances are prepared for intensive CPU work, such as data processing
    and analysis or demanding servers. C4 also comes with an enhanced network system,
    which is very helpful for high networking traffic applications. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 计算优化型 | AWS的计算优化型实例包括C3和C4。与M系列实例相同，C4是C3的硬件升级版。这些类型的实例适用于需要强大CPU性能的工作，如数据处理和分析或高要求的服务器。C4还配备了增强型网络系统，这对于高网络流量应用程序非常有帮助。
    |'
- en: '| Memory Optimized  | As you can guess, AWS also provides memory optimized
    instances that can be used for applications that need high memory usage. Applications
    based on Apache Spark (or big data in general), in memory databases and similar,
    benefit the most from these type of instances. In this case, the memory optimized
    instances are divided into two sub-families:X1: These are large scale enterprise
    grade instances. X1 can be used for the most demanding applications in the enterprise
    ecosystem and it is the flagship of the memory intensive instances and is only
    used for very large applications.R3/R4: Even though are more modest than X1, R
    instances are well capable of handling the majority of day-to-day memory intensive
    applications. Cache systems, in memory databases, and similar systems are the
    best use cases for X and R instances. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 内存优化型 | 如你所料，AWS还提供了内存优化型实例，适用于需要高内存使用的应用程序。基于Apache Spark（或大数据应用）的应用程序、内存数据库等，最能受益于这类实例。在这种情况下，内存优化型实例被划分为两个子系列：X1：这些是大规模企业级实例。X1可用于企业生态系统中最苛刻的应用程序，它是内存密集型实例的旗舰，仅用于非常大的应用程序。R3/R4：尽管比X1更为简朴，但R实例完全能够处理大多数日常内存密集型应用程序。缓存系统、内存数据库等是X和R实例的最佳应用场景。
    |'
- en: '| Accelerated Computing Instances  | Some applications, such as **Artificial
    Intelligence** (**AI**), have specific computing requirements, such as **Graphical
    Processing Unit** (**GPU**) processing or reconfigurable hardware. These instances
    are divided into three families:P2: GPU compute instances. These are optimized
    to carry specific processing tasks, such as breaking passwords through brute force
    as well as machine learning applications (they usually rely on GPU power).G2:
    Graphical processing instances. Rendering videos as well as ray tracing or video
    streaming are the best use cases for these instances. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 加速计算实例 | 一些应用程序，如**人工智能**（**AI**），具有特定的计算要求，如**图形处理单元**（**GPU**）处理或可重配置硬件。这些实例被分为三种系列：P2：GPU计算实例。这些实例经过优化，可执行特定的处理任务，如通过暴力破解密码以及机器学习应用（通常依赖GPU算力）。G2：图形处理实例。视频渲染、光线追踪或视频流媒体是这些实例的最佳应用场景。
    |'
- en: 'As you can see, there is an instance for every necessity that the user can
    have. For now, we are going to choose a small instance first because we are just
    testing AWS and second because AWS has a free tier, which enables you to use the
    `t2.micro` instances for up to 1 year without any charge, as shown in the following
    screenshot:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，每种用户需求都有一个相应的实例可用。目前，我们首先选择一个小型实例，因为我们只是测试AWS，其次是因为AWS提供免费套餐，允许你在1年内免费使用`t2.micro`实例，具体如以下截图所示：
- en: '![](img/e706b488-60fb-4543-96de-1a646d92ca27.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e706b488-60fb-4543-96de-1a646d92ca27.png)'
- en: Now we have two options. Click on Review Instance Launch or Configure Instance
    Details. In this case, we are going to click on Review Instance Launch, but by
    clicking on Configure Instance Details, we can configure several elements of the
    instance, such as networking, storage, and so on.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有两个选项。点击“审核实例启动”或“配置实例详情”。在本例中，我们将点击“审核实例启动”，但通过点击“配置实例详情”，我们可以配置实例的多个元素，例如网络、存储等。
- en: 'Once you click on Review Instance Launch, the review screen shows up. Click
    on Launch and you should get presented with something similar to what is shown
    in the following screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击“审核实例启动”后，审查页面将出现。点击“启动”，你应该看到类似于下图所示的界面：
- en: '![](img/87e704de-af4a-4e2e-b252-d3cddee8cba3.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87e704de-af4a-4e2e-b252-d3cddee8cba3.png)'
- en: Just assign a name to the key-pair name and click on the Download Key Pair button,
    which will download a `.pem` file that we will use later on to access via `ssh`
    to the instance.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需为密钥对命名并点击“下载密钥对”按钮，这将下载一个`.pem`文件，稍后我们将使用该文件通过`ssh`访问实例。
- en: Once you have specified the key pair, click on Launch Instance, as shown in
    the preceding screenshot, and that's all. After a few checks, your image will
    be ready for installing the required software ( this usually takes a couple of
    minutes).
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你指定了密钥对，点击“启动实例”，如前面的截图所示，就是这么简单。经过几次检查后，你的镜像将准备好安装所需软件（这通常需要几分钟）。
- en: This is the bare minimum needed to create a running instance in AWS. As you
    can see, the full process is very well explained on the screen and in general,
    if you know the basics of DevOps (`ssh`, networking, and device management), you
    don't really need much help creating instances.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在AWS中创建运行实例所需的最低配置。正如你所看到的，整个过程在屏幕上有非常详细的解释，一般来说，如果你了解DevOps的基础（`ssh`、网络配置和设备管理），你在创建实例时不需要太多帮助。
- en: Relational Database Service
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系型数据库服务
- en: What we have shown in the previous section are EC2 machines that can be used
    to install the required software. There is another service that allows you to
    administer high availability databases (MySQL, PostgreSQL, Maria DB, and Aurora
    as well as Oracle and SQL Server) across regions. This service is called RDS and
    it stands for Relational Database Service.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分中，我们展示了可以用来安装所需软件的EC2实例。还有一个服务可以让你管理跨区域的高可用数据库（MySQL、PostgreSQL、Maria DB、Aurora，以及Oracle和SQL
    Server）。这个服务叫做RDS，代表关系型数据库服务。
- en: 'One of the big headaches with relational databases is the high availability
    configuration: master-master configuration is something that is usually expensive
    and out of reach of small companies. AWS has raised the bar with RDS offering
    multi-region high availability databases with a few clicks.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库的一大难题是高可用性配置：主主配置通常费用较高，小公司往往无法承担。AWS通过RDS提升了标准，提供了可以通过几次点击就能设置的多区域高可用数据库。
- en: Networking in AWS and EC2
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS与EC2的网络配置
- en: 'AWS provides fine-grain control at the networking level. As with any physical
    data center, you can define your own networks, but AWS has a higher-level abstraction
    concept: The Virtual Private Cloud.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供了细粒度的网络控制。与任何物理数据中心一样，你可以定义自己的网络，但AWS有一个更高级的抽象概念：虚拟私有云（VPC）。
- en: Amazon **Virtual Private Cloud **(Amazon **VPC**) is a segment of the AWS cloud
    that allows you to group and segregate your resources in subnetworks to organize
    and plan your infrastructure matching your requirements. It also allows you to
    create a VPN between AWS and your physical data center to extend the latter one,
    adding more resources from AWS. Also, when you create a resource in EC2, you have
    the possibility of creating the resource in your custom defined subnet within
    your VPC.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊**虚拟私有云**（Amazon **VPC**）是 AWS 云的一部分，允许您将资源在子网中分组和隔离，以便按照您的需求组织和规划基础设施。它还允许您在
    AWS 和物理数据中心之间创建 VPN，从而扩展后者，增加更多来自 AWS 的资源。同时，当您在 EC2 中创建资源时，您可以选择将资源创建在您自定义的子网中。
- en: 'Before jumping into what a VPC looks like, let''s first explain how AWS works
    regarding the geographical distribution of resources. AWS provides you with different
    data centers in different regions such as Europe, Asia, and the US. As an example,
    let''s take EU West, which has three different availability zones:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解 VPC 的结构之前，让我们先解释一下 AWS 如何处理资源的地理分布。AWS 为您提供不同地区的数据中心，例如欧洲、亚洲和美国。以欧盟西部（EU
    West）为例，它有三个不同的可用区：
- en: '![](img/421b84ce-78c3-473c-8100-bc2170eee84d.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/421b84ce-78c3-473c-8100-bc2170eee84d.png)'
- en: The concept of region in AWS is basically a geographical area where the AWS
    data center lives. Knowing this information enables us to build global scale applications
    that serve the traffic from the closest data center in order to improve latency.
    Another very good reason for this geographical distribution is the data protection
    laws in several countries. By being able to choose where our data lives, we can
    enforce the compliance with the laws.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 中，“区域”概念基本上指的是 AWS 数据中心所在的地理区域。了解这些信息使我们能够构建全球规模的应用程序，通过将流量从最近的数据中心提供服务来提高延迟表现。地理分布的另一个重要原因是许多国家的
    数据保护法律。通过选择数据存储的位置，我们可以确保遵守这些法律。
- en: Inside of these geographical regions, sometimes, we can find availability zones.
    One availability zone is basically a physically separated data center that ensures
    the high availability of our system, as in the case of a catastrophe in one of
    the data centers, we can always fall back on the other availability zones.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些地理区域内，我们有时可以找到可用区。一个可用区基本上是一个物理上分离的数据中心，确保系统的高可用性。例如，在其中一个数据中心发生灾难时，我们可以始终依靠其他可用区进行恢复。
- en: 'Let''s see how the regions and availability zones look:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下区域和可用区的分布：
- en: '![](img/9a18dceb-63b1-4dca-9830-1b276a4e13ce.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a18dceb-63b1-4dca-9830-1b276a4e13ce.png)'
- en: Now that we understand how AWS works from the geographical perspective, let's
    dig deeper into what a VPC is in terms of regions and availability zones.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了 AWS 从地理角度的运作方式，让我们更深入地了解在区域和可用区层面上 VPC 的概念。
- en: 'A VPC is a logically separated segment of the AWS cloud that is private to
    the user, can hold resources, and spans across all the availability regions in
    an AWS zone. Inside of this VPC, we can define different subnets (public and privates
    in different availability zones) and define which machines are reachable from
    the Internet: AWS allows you to create routing tables, Internet gateways, and
    NAT gateways among other common networking resources that enable the user to build
    anything that they can build in a physical data center.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: VPC 是 AWS 云中逻辑上隔离的部分，对于用户而言是私有的，可以承载资源，并且跨越 AWS 区域的所有可用区。在这个 VPC 内，我们可以定义不同的子网（不同可用区中的公共和私有子网），并指定哪些机器可以从互联网访问：AWS
    允许您创建路由表、Internet 网关、NAT 网关以及其他常见的网络资源，使用户能够构建与物理数据中心中相同的基础设施。
- en: It would take a full book just to talk about the networking in AWS. We will
    go deeper into some concepts in the rest of the chapters of this book, but if
    you really want to dive deep into the networking side of AWS, you can find more
    data and examples at [http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Introduction.html](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Introduction.html).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要讨论 AWS 中的网络，仅这一部分就足以写一本完整的书。我们将在本书的后续章节深入探讨一些概念，但如果你真的想深入了解 AWS 的网络部分，你可以访问
    [http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Introduction.html](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Introduction.html)
    查找更多的数据和示例。
- en: 'AWS also provides a very powerful element: **Elastic Load Balancing **(**ELB**).
    An ELB is a modern version of the classic hardware load balancer. It enables us
    to health-check resources and only get the healthy ones into the pool. Also, AWS
    comes in two flavors: classic load balancer and application load balancer. The
    first version is, as the name suggests, an application load balancer that distributes
    the traffic depending on health checks and does not understand the data being
    transmitted, whereas the application load balancer can route the traffic based
    on advanced policies dependent on the information of the request. ELBs can also
    handle the full HTTPS flow so that we can carry the SSL termination in the load
    balancer and allow our applications to offload the encryption/decryption to them.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: AWS还提供了一个非常强大的元素：**Elastic Load Balancing **（**ELB**）。ELB是经典硬件负载均衡器的现代版本。它使我们能够对资源进行健康检查，只将健康的资源加入池中。此外，AWS提供两种类型的负载均衡器：经典负载均衡器和应用负载均衡器。第一种版本，顾名思义，是应用负载均衡器，它根据健康检查分配流量，并不理解传输的数据，而应用负载均衡器可以根据请求的信息，基于高级策略来路由流量。ELB还能够处理完整的HTTPS流量，这样我们就可以在负载均衡器中进行SSL终止操作，并允许我们的应用将加密/解密任务卸载给负载均衡器。
- en: Storage in AWS and EC2
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 和 EC2 中的存储
- en: 'Up until now, we have exposed how to create machines and networking infrastructure
    in AWS. One important thing when building applications is the storage of the data.
    By default, when we launch a machine in EC2, there are two types of storage that
    can be associated with the machine in the root volume in order to run the operating
    system:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经展示了如何在AWS中创建机器和网络基础设施。在构建应用程序时，一个重要的方面就是数据存储。默认情况下，当我们在EC2中启动机器时，根卷中可以关联两种存储类型来运行操作系统：
- en: Instance storage backed images
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例存储支持的镜像
- en: '**Amazon Elastic Block Store **(**Amazon** **EBS**) storage backed images'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Elastic Block Store **（**Amazon** **EBS**）存储支持的镜像'
- en: The first one, instance storage backed images, relies on the storage associated
    with the image to mount and run the root volume. This means that the data stored
    in the image will be lost once the machine is terminated (these type of images
    do not support the stop action; they just support termination).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种类型，即实例存储支持的镜像，依赖于与镜像相关联的存储来挂载并运行根卷。这意味着一旦机器终止，存储在镜像中的数据将丢失（这种类型的镜像不支持停止操作，只支持终止操作）。
- en: 'The second type of instances are the ones backed by EBS. Elastic Block Store
    is the name that AWS gives to its storage capabilities. With EBS, the user can
    create and destroy volumes (block devices) as needed as well as snapshots: we
    can create a copy of a running image before carrying a risky operation so we can
    restore it if something goes wrong.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型的实例是由EBS支持的。Elastic Block Store 是AWS提供的存储服务名称。使用EBS，用户可以根据需要创建和销毁卷（块设备）以及快照：我们可以在进行风险操作之前创建一个正在运行的镜像副本，以便如果发生错误时可以恢复。
- en: 'The type of storage can vary depending on our needs: you can create things
    from magnetic block devices to SSD drives as well as general-purpose units that
    can cover a lot of the use cases in all the applications.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 存储类型可以根据我们的需求有所不同：你可以从磁性块设备到SSD硬盘，也可以使用通用设备来覆盖所有应用中的大多数使用场景。
- en: In general, all the instances are backed by EBS as the fact that the storage
    is a logically segregated from compute enables us to do things such as resizing
    an instance (for example, creating a more powerful instance) without losing the
    data.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，所有实例都由EBS支持，因为存储在逻辑上与计算分离，这使得我们能够进行一些操作，例如调整实例大小（例如，创建更强大的实例），而不会丢失数据。
- en: Several volumes can be mounted into the same EC2 instance that gets exposed
    to it as if a physical device were attached to it, so if we are using a Linux-based
    image (such as Ubuntu), we can use the mount command to mount the devices into
    folders.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将多个卷挂载到同一个EC2实例中，这些卷会像物理设备一样暴露给它，因此如果我们使用的是基于Linux的镜像（如Ubuntu），我们可以使用mount命令将设备挂载到文件夹中。
- en: Amazon S3
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon S3
- en: Amazon **Simple Storage Service **(Amazon **S3**) is, as described by its name,
    a simple way of storing a large amount of data on the cloud at a very low cost
    with a nice set of features. Unlike EC2 storage based on devices with predefined
    size, Amazon S3 is practically a key value storage that enables us to identify
    data with a key. Unlike other key value storage technologies, S3 is prepared to
    store from tiny to very large objects (up to 5 terabytes) with very low response
    times and that are accessible anywhere.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊**简单存储服务**（Amazon **S3**）正如其名，是一种以非常低的成本，在云端存储大量数据的简单方式，并提供了一套不错的功能。与基于预定义大小的设备存储的
    EC2 不同，Amazon S3 实际上是一种键值存储，使我们能够通过键来识别数据。与其他键值存储技术不同，S3 准备好存储从小到非常大的对象（最大可达 5
    TB），且响应时间极低，且可以在任何地方访问。
- en: 'In the same way as EC2, Amazon S3 is a feature that has the concept of regions,
    but S3 does not understand availability zones: the S3 service itself manages to
    get the objects stored on different devices, so you don''t need to worry about
    it. The data is stored in an abstraction called buckets that, if we try to compare
    S3 with a filesystem, would be the equivalent to a folder but with one catch:
    the bucket name has to be unique across all the regions on your AWS account so
    we can''t create one bucket called `Documents` in two different regions.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 与 EC2 一样，Amazon S3 是一个具有区域概念的功能，但 S3 不理解可用区：S3 服务本身能够将对象存储在不同的设备上，因此您不需要担心这一点。数据存储在一种叫做桶（buckets）的抽象结构中，如果我们尝试将
    S3 与文件系统进行比较，它就像一个文件夹，但有一个限制：桶的名称必须在 AWS 账户的所有区域中唯一，因此我们不能在两个不同的区域创建一个名为 `Documents`
    的桶。
- en: Another advantage of S3 is that AWS provides a REST API to access objects in
    a very simple way, which makes it fairly easy to use it as storage for the modern
    web.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: S3 的另一个优势是 AWS 提供了一个 REST API，可以非常简单地访问对象，这使得它成为现代 Web 存储的理想选择。
- en: One of the best use cases that I've come across in my professional life for
    S3 is the management of a large number of documents in a financial institution.
    Usually, when companies are dealing with money, they have to onboard the customers
    to a process called **Customer Due Diligence** (**CDD**). This process ensures
    that the customers are who they claim to be and that the money is coming from
    a valid source. The company also has to keep the documents for a minimum of 6
    years due to financial regulations.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯中，我遇到的 S3 的最佳使用案例之一是在金融机构中管理大量文档。通常，当公司涉及到资金时，他们必须将客户纳入一个叫做 **客户尽职调查**（**CDD**）的过程。这个过程确保客户确实是他们声称的人，且资金来源是合法的。根据金融规定，公司还需要保存这些文件至少
    6 年。
- en: 'In order to carry on this investigation, the users need to send documents to
    the company, and Amazon S3 is the perfect match for it: the customer uploads the
    documents to the website of the company, which in reality is pushing the documents
    to S3 buckets (one per customer) and replicating them across regions with the
    Amazon S3 replication feature. Also, S3 provides another interesting feature for
    this model: links to objects that expire within a time frame. Basically, this
    enables you to create a link that is valid only for a period of time so that if
    the person reviewing documents exposes the link to a third party, S3 will reply
    with an error, making it really hard to leak documents accidentally (the user
    could always download it).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行这项调查，用户需要将文件发送给公司，而 Amazon S3 正好适合这个需求：客户将文件上传到公司的官网，实际上是将文件推送到 S3 桶（每个客户一个桶），并通过
    Amazon S3 的复制功能将文件跨区域复制。此外，S3 为这一模式提供了另一个有趣的功能：有效期内的对象链接。基本上，这使得您可以创建一个仅在特定时间内有效的链接，因此，如果审查文档的人将链接暴露给第三方，S3
    会返回错误，确保文件不容易被意外泄露（用户仍然可以下载它）。
- en: Another interesting feature of S3 is the possibility of integrating it with
    Amazon **Key Management System** (Amazon **KMS**), another feature provided by
    AWS), so all our objects in S3 are encrypted by a key stored in KMS that can be
    transparently rotated periodically.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: S3 另一个有趣的特点是可以与 Amazon **密钥管理系统**（Amazon **KMS**）集成（KMS 是 AWS 提供的另一项功能），因此我们在
    S3 中的所有对象都会由保存在 KMS 中的密钥加密，并且该密钥可以定期透明地轮换。
- en: Amazon ECR and ECS
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊 ECR 和 ECS
- en: 'Containers are the new norm. Every single company that I''ve come across in
    the last few years is using or considering using containers for their software.
    This enables us to build software with the microservices principles in mind (small
    individual software components running independently) as it provides a decent
    level of abstraction from the configuration and deployment of different apps:
    basically, the entire configuration is stored in a container and we only need
    to worry about how to run it.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 容器已成为新常态。在过去几年中，我遇到的每个公司都在使用或考虑使用容器来构建软件。这使我们能够在构建软件时考虑微服务的原则（小型独立运行的单个软件组件），因为它提供了从不同应用程序的配置和部署中抽象出一个合理的层次：基本上，所有配置都存储在容器中，我们只需要关心如何运行它。
- en: Amazon, as one of the pioneers of the microservices architectures, has created
    its own image registry and cluster (service).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 作为微服务架构的先驱之一，Amazon 创建了自己的镜像注册表和集群（服务）。
- en: 'As we will see in depth in [Chapter 3](fee45e6c-df39-48ae-ab43-a18911facbd8.xhtml),
    *Docker,* is built around two concepts: images and containers. An image is a definition
    of an application (configuration *+* software), whereas a container is an instance
    of the running image. The image is built through a Dockerfile (a description of
    the image with a very basic script language) and stored in a registry, in this
    case, Amazon **EC2 Container Registry **(**ECR**), our private registry in the
    AWS infrastructure. We don''t need to worry about availability or managing resources;
    we just choose the region where our containers are going to run and push our images
    into that repository.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第3章](fee45e6c-df39-48ae-ab43-a18911facbd8.xhtml)中将深入讨论的那样，*Docker* 是围绕两个概念构建的：镜像和容器。镜像是应用程序的定义（配置
    *+* 软件），而容器是运行镜像的实例。镜像通过 Dockerfile（一个带有非常基础脚本语言的镜像描述）构建并存储在注册表中，在这种情况下是 Amazon
    **EC2 容器注册表**（**ECR**），我们在 AWS 基础设施中的私有注册表。我们不需要担心可用性或管理资源；我们只需选择容器运行的区域，并将镜像推送到该存储库。
- en: 'Then, from our host running Docker, the image is pulled and the container is
    instantiated. This is simple and effective, but there are a few considerations:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从我们运行 Docker 的主机中，拉取镜像并实例化容器。这既简单又有效，但有一些需要考虑的因素：
- en: What happens when our host does not have enough resources to run as many containers
    as we want?
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们的主机没有足够的资源来运行我们想要的容器数量时，会发生什么情况？
- en: What happens if we want to ensure the high availability of our containers?
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们想确保容器的高可用性会发生什么情况？
- en: How do we ensure that the containers are restarted when they fail (for some
    reason)?
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何确保容器在故障（出于某种原因）时重新启动？
- en: How can we add more hardware resources to our system without downtime?
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何在不中断服务的情况下为系统添加更多的硬件资源？
- en: 'All those questions were trickier a few years ago but are simple now: Amazon **EC2
    Container Service **(Amazon **ECS**) will take care of it for us. ECS is basically
    a cluster of resources (EC2 machines) that work together to provide a runtime
    for our containers to be executed.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题在几年前更加棘手，但现在变得简单了：Amazon **EC2 容器服务**（Amazon **ECS**）会为我们处理这些问题。ECS 基本上是一个由资源（EC2
    机器）组成的集群，这些资源协同工作，为我们的容器提供运行环境。
- en: Within ECS, when creating a new service, we specify parameters such as how many
    replicas of our container should be running at the same time as well as what configuration
    (image) our container is supposed to use. Let's see how it works.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ECS 中，当创建一个新服务时，我们会指定一些参数，比如应该同时运行多少个容器副本，以及容器应使用什么配置（镜像）。让我们看看它是如何工作的。
- en: Creating a cluster
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集群
- en: First, we are going to create a cluster in the AWS console and see how it works.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在 AWS 控制台中创建一个集群，并查看它是如何工作的。
- en: 'Go to the Amazon ECS page and click on Get started button (the only button
    in the screen as you haven''t created any resources yet):'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 Amazon ECS 页面并点击“开始使用”按钮（屏幕上唯一的按钮，因为你还没有创建任何资源）：
- en: '![](img/bb1f951f-e6fe-43e7-9c58-08e68be6cb0f.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb1f951f-e6fe-43e7-9c58-08e68be6cb0f.png)'
- en: Make sure that the two checkboxes are ticked before continuing. We want to deploy
    a sample application to ECS but also we want to store the images in ECR.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，确保两个复选框都已勾选。我们想将一个示例应用部署到ECS，并且还希望将镜像存储在ECR中。
- en: 'The next screen is key: this is where we define the repository of our image,
    which will determine the repository URI that will be used for pushing images from
    our local machine using Docker.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一屏幕至关重要：这里是我们定义镜像存储库的地方，它将决定用于从本地机器通过 Docker 推送镜像的存储库 URI。
- en: '![](img/a3ce3b43-8026-4151-9ba7-6b8298935224.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3ce3b43-8026-4151-9ba7-6b8298935224.png)'
- en: Just use `devops-test` as the repository name, and our repository URI will look
    very similar to the one shown in the preceding screenshot.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需使用 `devops-test` 作为仓库名称，我们的仓库 URI 看起来将与前面截图中的非常相似。
- en: 'Step number 2 (out of 6) is a series of commands provided by AWS to log in
    into ECR and push the images of our project. In this case, we are going to use
    a very simple application in `Node.js`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步骤2（共6步）是 AWS 提供的一系列命令，用于登录 ECR 并推送我们项目的镜像。在本例中，我们将使用一个非常简单的 `Node.js` 应用：
- en: '[PRE0]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save the code from earlier in a file called `index.js` within a folder called
    `devops-test` on your local machine. As we are using express, we need to install
    the required dependency. Just execute the following command:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将之前的代码保存在名为 `index.js` 的文件中，放在本地机器上名为 `devops-test` 的文件夹内。由于我们正在使用 express，所以我们需要安装所需的依赖项。只需执行以下命令：
- en: '[PRE1]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After a few questions (just press Enter a few times and it should work), a
    file called `package.json` should be created. Now we need to install express for
    our program to run:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经过几个问题（只需按几次 Enter 就可以了），应该会创建一个名为 `package.json` 的文件。现在我们需要为程序安装 express：
- en: '[PRE2]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And voila! Our `package.json` file should have a line describing the required
    dependency:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！我们的 `package.json` 文件应该包含一行描述所需依赖项的内容：
- en: '[PRE3]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This file allows us to reinstall the dependencies whenever required without
    having to do it manually; it also allows us to specify a command that will be
    run when we execute `npm start` (a standard way of running a Node app using npm).
    Add the line and highlight it, as shown in the preceding code, as we will need
    it later (don't forget the semicolon from the previous line).
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个文件允许我们在需要时重新安装依赖项，而无需手动操作；它还允许我们指定一个命令，当我们执行 `npm start` 时会运行该命令（这是一种使用 npm
    运行 Node 应用的标准方式）。按前面的代码中所示添加并突出显示该行，因为我们稍后会需要它（不要忘记上一行的分号）。
- en: 'Now we need to write our Dockerfile. A Dockerfile, as we will see in [Chapter
    3](fee45e6c-df39-48ae-ab43-a18911facbd8.xhtml), *Docker, *is a file that describes
    what our Docker image looks like. In this case, we are going to reconstruct the
    steps needed to run the node application in a Docker container:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要编写我们的 Dockerfile。正如我们将在[第3章](fee45e6c-df39-48ae-ab43-a18911facbd8.xhtml)中看到的，*Docker*是一个描述我们的
    Docker 镜像外观的文件。在这个案例中，我们将重建在 Docker 容器中运行节点应用程序所需的步骤：
- en: '[PRE4]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Don''t try to understand the file; we will go deeper into this later on this
    book. Just save it with the name `Dockerfile` in the folder mentioned previously,
    `devops-test`. By now, your `devops-test` folder should look like this:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要试图理解这个文件；我们将在本书后面深入讲解。只需将其保存为 `Dockerfile`，并放在之前提到的文件夹 `devops-test` 中。到目前为止，你的
    `devops-test` 文件夹应该如下所示：
- en: '![](img/7513e983-3dc5-4e88-8ae6-b2e3332d865f.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7513e983-3dc5-4e88-8ae6-b2e3332d865f.png)'
- en: 'Now we are ready to follow step 2 in the ECS setup. Be aware that the following
    image is regarding my user in AWS; your user will have different parameters, so
    use yours instead of copying from the preceding screenshot:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备好按照 ECS 设置中的步骤2进行操作。请注意，以下图像与我在 AWS 中的用户相关；你的用户将有不同的参数，因此请使用你自己的参数，而不是复制前面截图中的内容：
- en: '![](img/17a7cc60-606f-4234-ba23-a2ad9ee811fd.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17a7cc60-606f-4234-ba23-a2ad9ee811fd.png)'
- en: Once you finish it, a new version of the image with your app image should be
    installed in your private ECR.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，包含你应用程序镜像的新版本应该会安装在你的私有 ECR 中。
- en: 'The next step (step 3) is creating what AWS calls a task definition, which
    is basically the configuration for one instance of our containers: how much memory
    we are going to use, which image we are going to run, and what ports we are going
    to expose in the container. Just leave the default memory but change the port
    to `3000`, as it is the port that we used in the preceding example (the node application).
    This is typical docker parameter and we will learn more about it in the next chapter,
    where we will dive deeper into docker.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步（步骤3）是创建 AWS 所谓的任务定义，它基本上是我们的容器实例的配置：我们将使用多少内存、运行哪个镜像以及在容器中暴露哪些端口。只需保留默认内存，但将端口更改为
    `3000`，因为这是我们在前面的示例中使用的端口（节点应用程序）。这是典型的 Docker 参数，我们将在下一章中详细了解 Docker。
- en: 'Once you are ready, click on next and we will be with step 4\. This step is
    where we are going to configure a service. By service, we mean the number of instances
    of our container are we going to keep alive and how are we going to expose them:
    using a load balancer or just in the EC2 instances that are part of the cluster.
    We will also be able to specify which IAM (AWS credential system) is going to
    be used for registering and deregistering running instances:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦准备好，点击下一步，我们将进入第4步。此步骤是我们将配置服务的地方。这里的服务指的是我们要保持活跃的容器实例数量，以及如何暴露它们：通过负载均衡器，还是仅通过集群中的EC2实例。我们还可以指定用于注册和注销正在运行实例的IAM（AWS凭证系统）：
- en: '![](img/f53dfe50-15ed-465d-913c-a4bd3193f608.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f53dfe50-15ed-465d-913c-a4bd3193f608.png)'
- en: 'We just leave everything by default except two parameters:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只需要保留默认设置，除了两个参数：
- en: 'The desired number of tasks: set to `2`'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所需任务数量：设置为`2`
- en: 'In the ELB section, we just select sample-app: `80` (or the option that isn''t
    No ELB so AWS provisions an ELB for us)'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在ELB部分，我们只需选择sample-app: `80`（或选择不是“No ELB”的选项，这样AWS会为我们提供一个ELB）'
- en: 'Click on the Next step, where we are going to define what our cluster is going
    to look like:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步，在这里我们将定义我们的集群将如何配置：
- en: The number of nodes
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的数量
- en: The size of the nodes
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的大小
- en: Once we are ready, just review and launch the instance. After a few minutes,
    our cluster should be up and running and ready to work with our deployed task.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦准备好，只需检查并启动实例。几分钟后，我们的集群应该启动并运行，准备好与我们部署的任务一起工作。
- en: You can access the instance of the task that we created in the load balancer
    provisioned by the cluster itself on the port `3000`. As you can see, ECS makes
    the task of setting up a container cluster simple.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过集群本身提供的负载均衡器，在端口`3000`上访问我们创建的任务实例。如你所见，ECS简化了设置容器集群的任务。
- en: In this book, we are going to give special attention to Kubernetes and Docker
    Swarm mainly because they are platform agnostic technologies, but I believe that
    Amazon ECS is a very valid technology to be considered when building a new container-based
    system.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将特别关注Kubernetes和Docker Swarm，主要是因为它们是平台无关的技术，但我相信Amazon ECS是构建新容器化系统时值得考虑的一个非常有效的技术。
- en: Other services
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他服务
- en: As you can see, the list of services in AWS is pretty much endless. We have
    visited the ones that I consider the most important, and in the following chapters,
    we will visit some of them that are also interesting, but unfortunately, we cannot
    go in deep through all of them. However, AWS is pretty good in terms of the documentation,
    and every service always comes with quite a comprehensive explanation on how to
    use it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，AWS中的服务列表几乎是无止境的。我们已经访问了我认为最重要的服务，接下来的章节中，我们将探讨一些其他也很有趣的服务，但遗憾的是，我们无法深入探讨所有服务。然而，AWS的文档相当完善，每项服务总是附带了详细的使用说明。
- en: In this section, we are going to touch base with some services that, even though
    are quite important, are not core to the development of this book.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍一些服务，尽管它们非常重要，但并不是本书开发的核心内容。
- en: Route 53
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Route 53
- en: 'Route 53 is the DNS service in AWS. It is a global and scalable DNS service
    that allows you to perform some advanced operations:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Route 53是AWS中的DNS服务。它是一个全球性的可扩展DNS服务，允许你执行一些高级操作：
- en: Register domain names
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册域名
- en: Transfer domain names from other registrars
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从其他注册商转移域名
- en: Create traffic routing policies (such as failovers across regions)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建流量路由策略（例如跨区域的故障转移）
- en: Monitor the availability of your applications (and reroute the traffic to healthy
    instances).
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控你应用程序的可用性（并将流量重定向到健康的实例）。
- en: With Route 53, we can link domain names to AWS resources, such as load balancers,
    S3 buckets, and other resources, enabling us to expose a human-readable name for
    our resources (mainly VMs) created within our AWS instance.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Route 53，我们可以将域名链接到AWS资源，如负载均衡器、S3存储桶和其他资源，使我们能够为在AWS实例中创建的资源（主要是虚拟机）公开一个人类可读的名称。
- en: CloudFront
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudFront
- en: 'CloudFront solves one of the biggest problems that low traffic websites experience
    when a spike in visits happens: it provides a cache in a way that makes us wonder
    whether AWS is the one that serves the data and not our server. Basically, CloudFront
    intercepts the request to our host, renders the page, and keeps it for up to 24
    hours so our site offloads the traffic to AWS. It is designed for serving static
    content, as the second time that the user hits the same URL, the cached version
    will be served instead of hitting your server again.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFront 解决了低流量网站在访问量激增时面临的最大问题之一：它提供了缓存，使我们不禁想是否是 AWS 在提供数据，而不是我们的服务器。基本上，CloudFront
    拦截对我们主机的请求，渲染页面，并将其缓存长达 24 小时，这样我们的网站就可以将流量卸载到 AWS。它是为提供静态内容而设计的，因为当用户第二次访问相同的
    URL 时，将会提供缓存版本，而不是再次访问您的服务器。
- en: It is highly recommended that you use CloudFront for the brochure site of your
    company so that you can serve all the traffic with a very small machine, saving
    some money in resources but also being able to improve your uptime when a traffic
    spike hits your site.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您使用 CloudFront 为公司的网站提供服务，这样您就可以使用一台非常小的机器处理所有流量，既节省了资源，也能在流量激增时提高站点的正常运行时间。
- en: Amazon ElasticCache
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon ElasticCache
- en: Amazon ElasticCache, as the name suggests, is a distributed and scalable in-memory
    cache system that can be used to store cached data within our applications.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon ElasticCache，顾名思义，是一个分布式和可扩展的内存缓存系统，可以用于在应用程序中存储缓存数据。
- en: 'It solves one of the biggest problems that we can face when building an application
    that relies on a cache for storing and retrieving data: high availability and
    a consistent temporary datastore.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 它解决了我们在构建依赖缓存存储和检索数据的应用程序时可能面临的最大问题之一：高可用性和一致的临时数据存储。
- en: Amazon RDS
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon RDS
- en: '**RDS** stands for **Relational Database Service**. With RDS, you can provision
    DB instances with a few clicks that could be used to store data: Oracle, MySQL,
    and MariaDB are some of the options that we have for RDS. It leverages the high
    availability to the underlying DB system, which might be a problem if we are looking
    to rely on AWS for it, but it is usually acceptable as high availability in SQL
    databases is a complicated subject.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**RDS** 代表 **关系型数据库服务**。通过 RDS，您可以通过几次点击配置 DB 实例，用于存储数据：Oracle、MySQL 和 MariaDB
    是我们在 RDS 中的几个选择。它利用底层数据库系统的高可用性，这可能是我们依赖 AWS 时面临的一个问题，但通常是可以接受的，因为 SQL 数据库中的高可用性是一个复杂的课题。'
- en: DynamoDB
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DynamoDB
- en: 'DynamoDB is a fine piece of engineering. It is a NoSQL database that is fine-tuned
    down to the millisecond of latency at any scale. It stores objects instead of
    rows (SQL cannot be used) and is a good candidate for storing a big amount of
    data in a schema-less fashion. DynamoDB, in essence, is very similar to MongoDB,
    but there is a basic difference: DynamoDB is a service provided by AWS and can
    run only within AWS, whereas MongoDB is a software that can be installed anywhere,
    including AWS. From the functional point of view, the majority of use cases for
    MongoDB are valid for modeling DynamoDB databases.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: DynamoDB 是一款出色的工程产品。它是一个 NoSQL 数据库，在任何规模下都能将延迟微调到毫秒级。它存储对象而不是行（无法使用 SQL），是存储大量数据的无模式方式的良好选择。从本质上讲，DynamoDB
    非常类似于 MongoDB，但有一个基本区别：DynamoDB 是 AWS 提供的服务，只能在 AWS 内运行，而 MongoDB 是一款可以安装在任何地方的软件，包括
    AWS。从功能角度来看，MongoDB 的大部分用例同样适用于建模 DynamoDB 数据库。
- en: Google Cloud Platform
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Cloud Platform
- en: Google has always been at the top of the hill when it comes to technology. Surprisingly,
    Google didn't have a federated layer of services; instead, it offered every service
    separately, which was far from ideal in providing a solid platform for developers
    to build applications on top of it. In order to solve that, they released Google
    Cloud Platform, which is a collection of services (infrastructure as a service,
    platform as a service, containers and big data, as well as many other features)
    that enables developers and companies to build highly reliable and scalable systems
    with some of the most up-to-date features, such as Kubernetes and a set of unique
    machine learning APIs.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Google 一直在技术领域处于领先地位。令人惊讶的是，Google 过去没有提供一个联合的服务层；相反，它提供了各个服务，这在为开发人员提供一个稳固的平台构建应用程序时远非理想。为了解决这个问题，它推出了
    Google Cloud Platform，这是一个服务集合（基础设施即服务、平台即服务、容器和大数据，以及许多其他功能），使开发人员和公司能够构建具有高度可靠性和可扩展性的系统，提供一些最先进的功能，如
    Kubernetes 和一套独特的机器学习 API。
- en: 'The interface is also one of the main points in Google Cloud: it offers you
    a web console where you basically have an available `ssh` Terminal that is connected
    to all your services, and you can operate from there without the need for any
    configuration on your local machine. Another good point in the interface is the
    fact that they use the terminology in the traditional sysadmin world, making the
    learning curve easy for the majority of the services.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 界面也是 Google Cloud 的主要亮点之一：它为你提供了一个 web 控制台，基本上你可以在这里使用一个与所有服务连接的 `ssh` 终端，直接操作，而无需在本地机器上做任何配置。界面中的另一个优点是它使用了传统系统管理员领域的术语，使得大多数服务的学习曲线变得容易。
- en: '![](img/96e99619-c350-4e5f-8124-7c271c72cfd3.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96e99619-c350-4e5f-8124-7c271c72cfd3.png)'
- en: In the same way as AWS, Google Cloud Platform allows engineers to create resources
    across the globe in regions and zones in order to ensure the high availability
    of our systems as well as the compliance with local laws.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 与 AWS 类似，Google Cloud Platform 允许工程师在全球各地的区域和可用区创建资源，以确保我们系统的高可用性，并遵守当地的法律法规。
- en: 'But the real jewel in the crown is their container engine. I am a big fan of
    container orchestration. Nowadays, everyone is gravitating toward microservices-based
    systems, and it is not strange to see companies hitting the wall of the operational
    reality of a microservices-based system: this is impossible to manage without
    orchestration tools. From all the potential choices on the market (Amazon ECS,
    Docker Swarm, and DCOS), there is one in particular that has been a game changer
    in my life: Kubernetes.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 但真正的皇冠上的明珠是他们的容器引擎。我是容器编排的忠实粉丝。如今，每个人都在朝着基于微服务的系统发展，看到公司遇到微服务系统操作现实的瓶颈并不奇怪：没有编排工具，这几乎是无法管理的。在市场上所有潜在的选择中（Amazon
    ECS、Docker Swarm 和 DCOS），有一个特别的工具改变了我的生活：Kubernetes。
- en: 'Kubernetes is the answer to the question that I raised during the writing of
    my first book (*Developling Microservices with Node.js*): how can we efficiently
    automate the operations in a microservices environment by providing a common ground
    between development and operations? Kubernetes has incorporated all the expertise
    from working with containers that Google has accumulated through the years in
    order to create a product that provides all the necessary components for the efficient
    management of deployment pipelines.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是我在撰写第一本书（*使用 Node.js 开发微服务*）时提出的一个问题的答案：如何通过为开发和运维提供一个共同的基础，有效地自动化微服务环境中的操作？Kubernetes
    融合了 Google 多年来在使用容器方面积累的所有专业经验，创造了一个产品，提供了有效管理部署管道所需的所有组件。
- en: In this book, we are going to place a special emphasis on Kubernetes, as in
    my opinion, it is the solution to many of the problems that teams have today when
    scaling up in members and resources.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将特别强调 Kubernetes，因为在我看来，它是今天许多团队在成员和资源扩展过程中遇到问题的解决方案。
- en: 'In order to start working with GCP, Google offers a trial version of 300 USD
    credit or 60 days free of charge test, which is more than enough to get your head
    around the majority of the services and, of course, more than enough to follow
    the examples of this book and play around with the majority of the concepts that
    we are going to be exposing. I would recommend that you activate your trial period
    and start playing around: once the credit is used or the 60 days are over, Google
    requires explicit confirmation to activate the billing so there is not going to
    be any extra charge in your account (this is the case at the time of writing this).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用 GCP，Google 提供了 300 美元的试用信用或 60 天的免费试用，这足以让你了解大部分服务，当然，也足够跟随本书中的示例，玩转我们将要介绍的大多数概念。我建议你激活试用期并开始尝试：一旦信用用完或
    60 天试用结束，Google 会要求明确确认启动计费，因此你的账户不会产生额外费用（在撰写本书时是这样的情况）。
- en: Google Compute Engine
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google 计算引擎
- en: 'Google Compute Engine is the equivalent of EC2 in Amazon Web Services. It allows
    you to manage instances of machines, networks, and storage with a simplicity that
    I have never seen before. One of the downsides that I found when ramping up with
    AWS is the fact that they have created abstractions with names that are not very
    intuitive: Virtual Private Cloud, Elastic Block Storage, and many more. This is
    not a big deal as AWS is well known in the market, but Google got the message
    and has named its resources in a very intuitive way, facilitating the onboarding
    of new people into the platform with little to no effort.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Google Compute Engine 相当于 Amazon Web Services 中的 EC2。它允许您以一种我前所未见的简便方式管理机器实例、网络和存储。在与
    AWS 上手时，我发现的一个缺点是，他们创建了一些命名抽象，名称并不直观：虚拟私有云、弹性块存储等。虽然这并不是什么大问题，因为 AWS 在市场中非常知名，但
    Google 领会了这一点，并且以非常直观的方式命名其资源，使得新用户几乎无需任何努力即可快速上手该平台。
- en: Regarding the machine types, Google Cloud Platform provides a simplified and
    limited set of machines when compared to AWS but enough variety to satisfy our
    needs. One of the features to keep in mind with Google Cloud Platform is the fact
    that the hardware improves with the size of the instance, which means that the
    64 cores machines get a better CPU than the two core machines.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 关于机器类型，与 AWS 相比，Google Cloud Platform 提供了一组简化且有限的机器类型，但足够多样化以满足我们的需求。需要注意的 Google
    Cloud Platform 特性之一是，硬件随着实例大小的增加而提升，这意味着 64 核心的机器比 2 核心的机器拥有更强的 CPU。
- en: Google Cloud Platform also provides a CLI tool to interact with the resources
    in GCP from a Terminal. In order to install it, just access this URL: [https://cloud.google.com/sdk/](https://cloud.google.com/sdk/).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud Platform 还提供了一个 CLI 工具，可以通过终端与 GCP 资源进行交互。要安装它，只需访问此网址：[https://cloud.google.com/sdk/](https://cloud.google.com/sdk/)。
- en: Then, follow the instructions depending on your operating system.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，根据您的操作系统，按照说明进行操作。
- en: Standard machine types
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准机器类型
- en: 'The standard machines are the most common to be used by any application. They
    offer a balance between CPU and memory that suits the majority of the tasks in
    all the projects that you can possibly imagine. These types of machines offer
    3.75 GB of RAM for every single virtual CPU. Let''s look at a few examples:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 标准机器是任何应用程序中最常用的类型。它们在 CPU 和内存之间提供平衡，适合所有项目中的大多数任务。这些类型的机器为每个虚拟 CPU 提供 3.75
    GB 的内存。让我们看几个示例：
- en: '| Name | CPUs | Memory |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | CPU | 内存 |'
- en: '| `n1-standard-1` | 1 | 3.75 GB |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `n1-standard-1` | 1 | 3.75 GB |'
- en: '| `n1-standard-2` | 2 | 7.50 GB |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `n1-standard-2` | 2 | 7.50 GB |'
- en: '| `n1-standard-64` | 64 | 240 GB |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `n1-standard-64` | 64 | 240 GB |'
- en: As you can see, the naming convention is fairly straightforward and is easy
    in order to guess the machine RAM and the number of CPUs out of the canonical
    name.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，命名约定非常简单，容易根据规范名称推测机器的内存和 CPU 数量。
- en: High-memory machine types
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高内存机器类型
- en: These machines are optimized for memory-intensive applications. They come with
    an extra amount of RAM for every virtual CPU that allows you to go the extra mile
    regarding memory power.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这些机器经过优化，适用于内存密集型应用程序。每个虚拟 CPU 配备了额外的内存，使您可以在内存方面做到更加出色。
- en: 'Every machine of the high-memory type comes with 6.5 GB of RAM for every single
    virtual CPU, and here are a few examples:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 每台高内存类型的机器都配备每个虚拟 CPU 6.5 GB 的内存，以下是一些示例：
- en: '| Name | CPUs | Memory |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | CPU | 内存 |'
- en: '| `n1-highmem-2` | 2 | 13 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `n1-highmem-2` | 2 | 13 |'
- en: '| `n1-highmem-8` | 8 | 52 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `n1-highmem-8` | 8 | 52 |'
- en: '| `n1-highmem-64` | 64 | 416 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `n1-highmem-64` | 64 | 416 |'
- en: These machines come with a massive amount of RAM and are well suited for distributed
    caches, databases, and many other types of applications that require a high memory
    consumption relative to the CPU power.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这些机器配备大量内存，非常适合分布式缓存、数据库以及许多其他需要相对较高内存消耗的应用程序。
- en: High-CPU machine types
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高 CPU 机器类型
- en: 'As the name states, high-CPU machines are instances that hold a high CPU/memory
    ratio with only 0.9 GB of RAM for every virtual CPU, which indicates that they
    are well suited for saving some money on high-intensive CPU tasks (as we cut down
    on a lot of memory). Here are some examples of these machines:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，高 CPU 型机器是具有高 CPU/内存比率的实例，每个虚拟 CPU 配备 0.9 GB 的内存，这意味着它们非常适合在高强度 CPU 任务中节省一些开销（因为我们减少了大量内存）。以下是这些机器的一些示例：
- en: '| Name | CPUs | Memory |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | CPU | 内存 |'
- en: '| `n1-highcpu-2` | 2 | 1.8 GB |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `n1-highcpu-2` | 2 | 1.8 GB |'
- en: '| `n1-highcpu-8` | 8 | 7.2 GB |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `n1-highcpu-8` | 8 | 7.2 GB |'
- en: '| `n1-highcpu-64` | 64 | 57.6 GB |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `n1-highcpu-64` | 64 | 57.6 GB |'
- en: As you can see, the only difference between the standard or high memory machines
    is that these machines are built with less amount of RAM, which allows us to save
    money on a resource that won't be used in some applications that are able to create
    machines with more CPUs at the same price. High-CPU machines are well suited for
    applications that require high CPU and low memory consumption, such as mathematical
    processing or other types of calculations.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，标准机器和高内存机器之间的唯一区别在于，这些机器配置了较少的 RAM，这使得我们在一些应用中可以节省不需要的资源，尤其是当这些应用能够在相同价格下创建更多
    CPU 的机器时。高 CPU 机器非常适合需要高 CPU 和低内存消耗的应用，比如数学处理或其他类型的计算。
- en: Shared-core machine types
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享核心机器类型
- en: 'Sometimes, we really don''t need a dedicated machine for our process, so Google
    Cloud offers shared machines that you can use for it. In my opinion, the shared-core
    machines are not suited for production usage, but they could well serve a prototype
    or experimenting with different resources. Here are the two types of machines:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们真的不需要为我们的流程提供专用的机器，因此 Google Cloud 提供了可以用作共享机器的选项。在我看来，分享核心的机器不适合生产使用，但它们非常适合用作原型或实验不同资源。以下是两种类型的机器：
- en: '| Name | CPUs | Memory |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | CPU | 内存 |'
- en: '| `f1-micro` | 0.2 | 0.6 |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `f1-micro` | 0.2 | 0.6 |'
- en: '| `g1-small` | 0.5 | 1.7 |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `g1-small` | 0.5 | 1.7 |'
- en: As you can see, there are only two options with different RAM and CPU power.
    I personally use these machines when I want to experiment with new software or
    new products of the Google Cloud Platform.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这里只有两种选项，它们在 RAM 和 CPU 功率上有所不同。我个人在想要尝试新的软件或 Google Cloud Platform 的新产品时，通常会使用这些机器。
- en: Don't forget that these are bursting machines that are only suited for short
    burst of intensive processing and not for sustained resource consumption as the
    CPU is shared across different applications.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了，这些是突发型机器，只适合短时间内的高强度处理，不适合持续消耗资源，因为 CPU 是在不同应用之间共享的。
- en: Custom machines and GPU processing
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义机器和 GPU 处理
- en: 'Sometimes, we need an extra amount of something on our machines, which is usually
    not in the predefined machine instances of other providers, but in this case,
    Google Cloud Platform comes to the rescue with an amazing feature: custom machine
    types.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们的机器需要额外的资源，这些资源通常不在其他提供商预定义的机器实例中，但在这种情况下，Google Cloud Platform 通过一个令人惊叹的功能来解救我们：自定义机器类型。
- en: With custom machine types in Google Cloud Platform, we can get the benefit of
    the upgraded hardware of the large machines in a resource-modest machine or create
    specific configurations that suit our needs.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Cloud Platform 上，使用自定义机器类型，我们可以在资源较少的机器上获得大型机器的硬件升级优势，或者创建适合我们需求的特定配置。
- en: One of the best examples that we can find for custom machines is when we want
    to add some GPU processing to our mix. In Google Cloud, GPUs can be attached to
    any non-shared (`f1` or `g1`) machine on demand. With the ability to create our
    custom machine types, we can define how many GPUs we want to burst our processing
    power in.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以找到自定义机器的一个最佳例子是，当我们希望在我们的配置中加入 GPU 处理时。在 Google Cloud 中，GPU 可以按需附加到任何非共享（`f1`
    或 `g1`）的机器上。借助创建自定义机器类型的能力，我们可以定义希望在其中提升处理能力的 GPU 数量。
- en: In general, when I design a system, I try to stick to the standard types as
    much as possible in order to simplify my setup, but there is nothing wrong in
    creating custom machine types aside from the fact that we can easily fall in the
    premature optimization of our system, which is probably one of the biggest problems
    that you can find when working in IT.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，当我设计系统时，我尽量坚持使用标准类型，以简化我的设置，但创建自定义机器类型并没有错，唯一的问题是，我们可能会轻易陷入过早优化系统的问题，这也是
    IT 工作中最常见的难题之一。
- en: Launching an instance
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动实例
- en: 'In Google Cloud Platform, everything is grouped in projects. In order to create
    resources, you need to associate them with projects, so the first step to launch
    an instance is to create a project. In order to do that, just select the new project
    button when entering the Google Cloud Platform interface the first time or in
    the drop-down in the top bar when you have already created one project:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Cloud Platform 中，一切都被组织在项目中。为了创建资源，你需要将它们与项目关联，因此启动实例的第一步是创建一个项目。为此，只需在第一次进入
    Google Cloud Platform 界面时选择“新建项目”按钮，或者在已经创建了一个项目后，点击顶部栏的下拉菜单：
- en: 'For the examples of this book, I am going to create a project called `Implementing
    Modern DevOps`, which I will to be using for running all the examples:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于本书的示例，我将创建一个名为`Implementing Modern DevOps`的项目，并用它来运行所有示例：
- en: '![](img/2f4f4f93-736a-4c28-a06a-19f235a856f1.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f4f4f93-736a-4c28-a06a-19f235a856f1.png)'
- en: 'Once we have created our project, we proceed to create a new VM instance. Even
    though it is possible to create instances with more than 64 cores (with the custom
    machine types), we are going to stick to the standard ones in order to save costs.
    Proceed to create the instance with the default values (just change the name):'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们创建了项目，就可以继续创建新的虚拟机实例。虽然可以创建超过64个核心的实例（通过自定义机器类型），但为了节省成本，我们将使用标准机器类型。继续使用默认值创建实例（只需更改名称）：
- en: '![](img/a83924d5-9f59-48a8-952c-f518bad5103e.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a83924d5-9f59-48a8-952c-f518bad5103e.png)'
- en: 'There are two details that I really like from Google Cloud Platform:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我非常喜欢Google Cloud Platform的两个特点：
- en: How easy they name their resources and make everything clear to understand
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们如何轻松地命名资源，并使一切都变得清晰易懂
- en: How transparent they are with the pricing
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们在定价方面的透明度
- en: 'While creating a virtual machine in Google Cloud Platform, these two characteristics
    are present: the form to create a machine has only a   few fields, and it gives
    you the cost of the machine per month (so there are no surprises).'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Google Cloud Platform上创建虚拟机时，存在这两个特点：创建机器的表单只有少数几个字段，并且会显示机器每月的费用（所以不会有意外费用）。
- en: In the same way as AWS, Google Cloud Platform allows you to select the region
    and the zone (remember, a physically separated data center) where your instance
    is going to live in order to ensure the high availability of the overall system.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 和AWS一样，Google Cloud Platform允许你选择实例将要部署的区域和可用区（记住，这是一个物理隔离的数据中心），以确保系统的高可用性。
- en: Also, this (not in the preceding figure) allows you a couple of clicks in two
    checkboxes in order to allow the `http` and `https` traffic into the instance
    from the outer world. This is just as simple and effective.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外（不在前面的图中），它允许你通过勾选两个复选框，只需几个点击即可允许`http`和`https`流量进入实例。这既简单又有效。
- en: 'You can also configure other things, such as networking, ssh keys, and other
    parameters that we are going to skip for now. Just click on the Create button
    (at the bottom of the form) and wait until the machine is fully provisioned (it
    might take up to few minutes), and you should see something similar to what is
    shown in the following screenshot:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以配置其他内容，如网络、SSH密钥以及其他我们暂时跳过的参数。只需点击创建按钮（表单底部），然后等待机器完全配置（可能需要几分钟），你应该会看到类似于以下截图的内容：
- en: '![](img/65df0081-936b-4bb2-9f9d-257c56928f01.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65df0081-936b-4bb2-9f9d-257c56928f01.png)'
- en: 'One of the most appealing features of Google Cloud Platform is how curated
    their usability is. In this case, you can see a column in your machine description
    called Connect that allows you to connect to the machine in a few different ways:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Google Cloud Platform最吸引人的特点之一是其用户界面的精心设计。在这种情况下，你可以看到机器描述中有一个名为“连接”的列，允许你通过几种不同的方式连接到机器：
- en: SSH
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH
- en: The `gcloud` command (a command-line tool from GCP)
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gcloud`命令（GCP的命令行工具）'
- en: Using another ssh client
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用另一个SSH客户端
- en: 'We are going to select SSH (the default one) and click on the SSH button. A
    popup should appear on the screen, and after a few seconds, we should see something
    similar to an `ssh` Terminal, which is a Terminal in our machine:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择SSH（默认选项），并点击SSH按钮。屏幕上应该会弹出一个窗口，几秒钟后，我们应该能看到类似于`ssh`终端的界面，它是我们机器上的终端：
- en: '![](img/7b23439c-d51b-45b2-a0fe-b55db8b59341.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b23439c-d51b-45b2-a0fe-b55db8b59341.png)'
- en: This is a very neat and useful feature that basically enables the engineer to
    avoid carrying a set of cryptographic keys that are always a risk as if they get
    leaked, your machines are exposed.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简洁且实用的功能，它基本上使工程师避免携带一组加密密钥，因为加密密钥总是存在泄露的风险，一旦泄露，你的机器就会暴露。
- en: Networking
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络设置
- en: 'One thing I cannot stress enough about the Google Cloud Platform is how it
    simplifies the concepts and make them look similar to the real-world physical
    data center concepts. The case of the networking was not an exception: all the
    concepts and names can be mapped one to one to real world physical network concepts.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我不能强调Google Cloud Platform如何简化概念并使其看起来类似于现实世界的物理数据中心概念这一点。这在网络设置中同样适用：所有的概念和名称都可以一一映射到现实世界的物理网络概念上。
- en: In Google Cloud, we can implement any required design that follows the principles
    of the IP networking (the same as AWS) with pretty much a few clicks. Another
    interesting feature that Google Cloud offers (along with other providers such
    as AWS) is the possibility of extending your data center into the cloud with a
    VPN network taking the benefits of the cloud products but achieving the level
    of security required by the most sensitive data that you could imagine.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Cloud 中，我们可以通过几次点击实现任何符合 IP 网络设计原则的需求（与 AWS 相同）。Google Cloud 还提供了一个有趣的功能（与
    AWS 等其他提供商一样），即可以通过 VPN 网络将数据中心扩展到云中，既能享受云产品的好处，又能达到最敏感数据所需的安全性。
- en: Google Container Engine
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google 容器引擎
- en: 'The **Google Container Engine** (**GKE**) is a proposal from Google for the
    container orchestration making use of one of the most powerful container clusters
    available in the market: Kubernetes.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**Google 容器引擎** (**GKE**) 是 Google 提出的一个容器编排方案，利用市场上最强大的容器集群之一：Kubernetes。'
- en: 'As we will discuss further in [Chapter 7](4e6a965e-c4bf-491d-9f60-c013269350c9.xhtml),
    *Docker Swarm and Kubernetes- Clustering Infrastructure, *Kubernetes is a feature-full
    cluster used for deploying and scaling container-based applications in a controlled
    manner, with a special emphasis on defining the common language between development
    and operations: a framework that blends development and operation concepts into
    a common ground: a YAML (or JSON) description of resources.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[第7章](4e6a965e-c4bf-491d-9f60-c013269350c9.xhtml)中将进一步讨论的那样，*Docker Swarm
    和 Kubernetes——集群基础设施*，Kubernetes 是一个功能丰富的集群，专门用于以受控方式部署和扩展基于容器的应用程序，特别强调定义开发和运维之间的共同语言：一个将开发和运维概念融合为共同基础的框架：资源的
    YAML（或 JSON）描述。
- en: 'One of the big problems of Kubernetes is ensuring high availability. When you
    deploy a cluster on premises or in a cloud provider, making use of the computing
    power (EC2 in AWS or Compute Engine in GCP), you are responsible for upgrading
    the cluster version and evolving it with the new releases of Kubernetes. In this
    case, Google Cloud Platform, through the container engine, has solved the operational
    problem: GCP keeps the master and is responsible for keeping it up to date and
    the users upgrade the nodes when a new version of Kubernetes is released, which
    allows us to articulate different procedures for upgrading our cluster.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的一个大问题是确保高可用性。当你在本地或云提供商上部署集群时，利用计算资源（AWS 中的 EC2 或 GCP 中的 Compute
    Engine），你需要负责升级集群版本，并随着 Kubernetes 的新版本发布而不断演进。在这种情况下，Google Cloud Platform 通过容器引擎解决了操作问题：GCP
    负责保持主节点的更新，而用户在 Kubernetes 发布新版本时升级节点，这使得我们能够制定不同的集群升级程序。
- en: Setting up a cluster
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置集群
- en: 'In [Chapter 7](4e6a965e-c4bf-491d-9f60-c013269350c9.xhtml), *Docker Swarm and
    Kubernetes- Clustering Infrastructure, *you are going to learn how to operate
    Kubernetes, but it is worth teaching you how to set up a cluster in the GKE in
    this chapter in order to show how easy it is before diving deep into the core
    concepts of Kubernetes:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](4e6a965e-c4bf-491d-9f60-c013269350c9.xhtml)中，*Docker Swarm 和 Kubernetes——集群基础设施*，你将学习如何操作
    Kubernetes，但值得在本章中教你如何在 GKE 中设置集群，以便在深入了解 Kubernetes 的核心概念之前，先展示设置集群的简便性：
- en: 'First, go to Container Engine within Google Cloud Platform:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，进入 Google Cloud Platform 中的容器引擎：
- en: '![](img/f77b6e67-5289-48f8-b288-2586a052b9e0.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f77b6e67-5289-48f8-b288-2586a052b9e0.png)'
- en: 'As you can see, there are no clusters set up, so we have two options:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，目前没有设置任何集群，所以我们有两个选择：
- en: Create a new container cluster
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的容器集群
- en: Take the quickstart
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速开始
- en: 'We are just going to click on Create a container cluster and follow up the
    onscreen instructions (a form) in order to set up our cluster:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只需点击“创建一个容器集群”，然后按照屏幕上的指示（表单）设置我们的集群：
- en: '![](img/075bff92-ef20-4785-9c1c-41191c88b23a.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/075bff92-ef20-4785-9c1c-41191c88b23a.png)'
- en: Ensure that Zone is the closest to your geographical area (even though right
    now it doesn't really matter) and the size is `3`. This parameter, the size, is
    going to ask GCP to create `3` instances in the Compute Engine in order to set
    up the cluster plus a master that is managed by GCP itself. Regarding the image,
    we have two options here, `gci` or `container-vm`. In this case, again, it doesn't
    really matter as it is just a test cluster, but just note that if you want to
    use NFS or any other advanced filesystem, you will need to use `container-vm.`
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保区域（Zone）靠近你的地理位置（尽管现在这并不重要），并且大小设置为 `3`。这个参数——大小——将要求 GCP 在计算引擎中创建 `3` 个实例来设置集群，并由
    GCP 自行管理一个主节点。关于镜像，我们在这里有两个选项，`gci` 或 `container-vm`。在这种情况下，实际上并不重要，因为这是一个测试集群，但请注意，如果你想使用
    NFS 或其他高级文件系统，你将需要使用 `container-vm`。
- en: 'Click on Create, and after few minutes, you should see two things:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建，几分钟后，你应该会看到两样东西：
- en: The cluster is created in the Google Container Engine section
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群是在 Google 容器引擎部分创建的
- en: Three new VMs are provisioned in the Compute Engine section
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个新的虚拟机在计算引擎部分配置
- en: This is a very smart setup because with some commands using the google cloud
    platform command tool (`gcloud`), we can scale up or down or cluster as well as
    change the size of our instances in order to satisfy our needs. If you explore
    the cluster (by clicking on its name), you will find a Connect to the clusterlink,
    which leads to a screen with instructions to connect to the Kubernetes dashboard.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个非常智能的设置，因为通过一些使用 Google Cloud Platform 命令工具（`gcloud`）的命令，我们可以对集群进行扩展或缩减，还可以调整实例的大小以满足我们的需求。如果你探索集群（点击它的名称），你会发现一个“连接到集群”的链接，它会引导你到一个包含连接
    Kubernetes 仪表板的说明的页面。
- en: '![](img/0843b6c9-0cb4-4b10-9a88-08aadb91deb2.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0843b6c9-0cb4-4b10-9a88-08aadb91deb2.png)'
- en: 'Sometimes, these instructions fail, and that is because `gcloud` is badly configured.
    If you find an error trying to configure the access to the cluster, run the following
    command:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有时，这些指令会失败，因为 `gcloud` 配置不当。如果你在配置集群访问时遇到错误，运行以下命令：
- en: '[PRE5]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then, follow the instructions. Assuming that you have already configured the
    Google Cloud SDK, everything should work fine, and after running the `kubectl
    proxy` command, you should be able to access the Kubernetes dashboard at `http://localhost:8001/ui`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按照说明操作。假设你已经配置好了 Google Cloud SDK，一切应该正常工作，运行 `kubectl proxy` 命令后，你应该能够通过
    `http://localhost:8001/ui` 访问 Kubernetes 仪表板。
- en: 'In order to test whether everything works as expected, just run a simple image
    in Kubernetes (in this case, a `busybox` image):'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试是否一切按预期工作，只需在 Kubernetes 中运行一个简单的镜像（在此案例中是 `busybox` 镜像）：
- en: '[PRE6]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we refresh the dashboard (`http://localhost:8001/ui`) while running the
    Kubernetes proxy (as specified earlier), we should see something similar to what
    is shown in the following figure in the Deployments section:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在运行 Kubernetes 代理时（如前所述）刷新仪表板 (`http://localhost:8001/ui`)，我们应该看到与以下图像相似的内容，位于“部署”部分：
- en: '![](img/86e9d64a-da62-4f42-95c6-3203f82a6ef3.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86e9d64a-da62-4f42-95c6-3203f82a6ef3.png)'
- en: This indicates that the deployment (a Kubernetes concept that we will explore
    in [Chapter 7](4e6a965e-c4bf-491d-9f60-c013269350c9.xhtml), *Docker Swarm and
    Kubernetes- Clustering Infrastructure*) was successful.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明部署（一个 Kubernetes 概念，我们将在[第 7 章](4e6a965e-c4bf-491d-9f60-c013269350c9.xhtml)，*Docker
    Swarm 和 Kubernetes - 集群基础设施*中探讨）成功。
- en: Other Google Cloud Platform products
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他 Google Cloud Platform 产品
- en: Google Cloud platform is not only Compute Engine and Container Engine, but it
    is also a collection of services that are very interesting for different purposes.
    As things are limited in scope, we won't see the majority of them and will only
    focus on the ones that are more relevant to the DevOps world.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud 平台不仅有计算引擎和容器引擎，它还是一系列非常有趣的服务集合，适用于不同的用途。由于涉及的范围有限，我们不会看到大多数服务，只会集中于与
    DevOps 相关的服务。
- en: Google App Engine
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google App Engine
- en: 'Up until now, we have been working with a side of DevOps called **IaaS**. Google
    Cloud platform also offers something called **Platform as a Service** (**PaaS**).
    In an IaaS model, we need not worry about the underlying infrastructure: provisioning
    machines, installing the software, patching the software. With **Google App Engine**
    (or any other major PaaS), we forget about the ops of our infrastructure and focus
    on the development of our application, leveraging the underlying infrastructure
    to Google. Instead of launching a machine and installing Java to run our Spring
    Boot-based application, we just specify that we want to run a Java application,
    and GCP takes care of everything else.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，我们一直在使用 DevOps 领域的一个方面，即**IaaS**。Google Cloud 平台还提供了一种名为**平台即服务**（**PaaS**）的服务。在
    IaaS 模型中，我们不需要担心底层基础设施：配置机器、安装软件、修补软件。使用**Google App Engine**（或任何其他主要的 PaaS），我们可以忘记基础设施的操作，专注于应用程序的开发，将底层基础设施交给
    Google 处理。我们不需要启动机器并安装 Java 来运行基于 Spring Boot 的应用程序，而是只需指定我们希望运行一个 Java 应用程序，GCP
    会处理其他一切。
- en: This product, the Google App Engine, fits the necessity of the majority of the
    small to mid sized projects, but in this book, we are going to focus on the DevOps
    that maintaining an IaaS involves.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这款产品——Google App Engine，满足了大多数小型到中型项目的需求，但在本书中，我们将重点讨论维护 IaaS 所涉及的 DevOps。
- en: Google App Engine also provides us with features such as user management, which
    is a recurring problem in all the applications.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Google App Engine 还为我们提供了诸如用户管理等功能，这是所有应用程序中经常遇到的问题。
- en: Machine Learning APIs
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习 API
- en: Google has always been famous for its innovation across the technology products
    that it has released. It has changed how people use e-mail with Gmail and how
    people use phones with Android.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Google 一直以其在技术产品上的创新而闻名。它改变了人们使用电子邮件的方式（通过 Gmail），也改变了人们使用手机的方式（通过 Android）。
- en: Regarding **Machine Learning**, they are also shaking up the world with an innovative
    set of APIs that people can use to process images (with the vision APIs), translate
    documents (with the translations API), and analyze large amounts of text with
    the natural language API.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 关于**机器学习**，它们也通过一套创新的 API 震撼了世界，用户可以使用这些 API 来处理图像（使用视觉 API）、翻译文档（使用翻译 API），并通过自然语言
    API 分析大量文本数据。
- en: One of the most amazing uses that I have seen of the vision API is a company
    that had to do some level of photo ID verification for its customers. There was
    a huge problem of people uploading invalid images (random images or even images
    with part of the face covered or similar), so we used the vision API to recognize
    images that contained a face without facial hair, hat, or any other accessories
    aside from glasses.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到的一个关于视觉 API 的最惊人的用法是，一家公司需要为其客户做一定程度的照片 ID 验证。问题是，很多人上传无效图像（随机图像，甚至是部分面部被遮挡或类似的图像），于是我们使用了视觉
    API 来识别那些包含面部且没有胡须、帽子或任何配饰（除了眼镜）的图像。
- en: The result was that the people doing the ID verification focused just on valid
    images instead of having to classify them as valid or invalid before proceeding
    to the verification.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，做身份验证的人只专注于有效的图像，而不必在继续验证之前对其进行有效或无效的分类。
- en: Big data
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大数据
- en: Big data is now a big thing. Everybody is trying to take the advantage of big
    data to explore new areas of business or unleash their potential in traditional
    businesses.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 大数据现在是一个重要的领域。每个人都在努力利用大数据探索新商业领域，或在传统业务中释放其潜力。
- en: Google Cloud Platform offers a set of big data APIs that enable the users to
    carry on pretty much any task in large sets of data. With tools such as BigQuery,
    a data analyst can run queries on terabytes of information in seconds without
    setting up a massive scale infrastructure.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud Platform 提供了一套大数据 API，使用户能够处理几乎任何大数据任务。通过像 BigQuery 这样的工具，数据分析师可以在几秒钟内对
    TB 级别的信息进行查询，而无需设置大规模的基础设施。
- en: 'In general, the big data APIs from Google are what is called no-ops tools in
    the DevOps world: they don''t require maintenance from users as they leverage
    it into Google. This means that if a big query requires a lot of processing power,
    Google is the one responsible for transparently offering this power to the user.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，来自 Google 的大数据 API 被称为 DevOps 世界中的“无操作工具”（no-ops tools）：它们不需要用户进行维护，因为这些工具已经被集成到
    Google 中。这意味着，如果一个大查询需要大量的处理能力，Google 会负责透明地将这些计算能力提供给用户。
- en: Other cloud providers
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他云服务提供商
- en: Unfortunately, there is a limit to the number of concepts we can develop in
    a book, and in this case, we are going to focus on AWS and GCP, as they are the
    most feature-full cloud providers in the market.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们在一本书中能讲解的概念有限，因此这次我们将重点介绍AWS和GCP，因为它们是市场上功能最全的云服务提供商。
- en: 'I always try to adopt an open mindset regarding technology, and there are three
    providers that I think you should know about:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我总是尝试以开放的心态看待技术，以下是我认为你应该了解的三个云服务提供商：
- en: DigitalOcean
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DigitalOcean
- en: Heroku
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku
- en: Azure
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure
- en: They have a lot to offer and they all are up to speed with the new trends of
    DevOps and security.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 他们提供的服务非常丰富，且都紧跟DevOps和安全的新趋势。
- en: Heroku
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Heroku
- en: 'Heroku''s battle horse is this phrase: build apps, not infrastructure. That
    is a powerful message. Basically, Heroku is going full throttle with the **PaaS**
    concept **Platform as a Service**, allowing you to avoid maintaining the underlying
    infrastructure: just specify what you want to run (for example, a Node.js application)
    and the scale.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku的核心理念就是这句话：构建应用，而非基础设施。这是一个非常有力的信息。基本上，Heroku全力推动**PaaS**（平台即服务）概念，让你避免维护底层基础设施：只需指定你想要运行的内容（例如，一个Node.js应用程序）以及规模。
- en: With this powerful philosophy, Heroku allows you to easily deploy instances
    of your application, databases, or communication buses, such as Kafka, with a
    few clicks and without all the hassle of having to provision them with a DevOps
    tool, such as Ansible, Chef, or similar.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一强大的理念，Heroku让你轻松地通过几个点击部署应用程序实例、数据库或通信总线（例如Kafka），而无需像使用DevOps工具（如Ansible、Chef或类似工具）那样进行繁琐的配置。
- en: Heroku is one of the cloud providers preferred by start-ups as you can save
    a lot of time as opposed to using AWS or Google Cloud Platform, as you just need
    to focus on your applications, not the infrastructure.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku是初创公司首选的云服务提供商之一，因为相比使用AWS或Google Cloud Platform，你可以节省大量时间，因为你只需专注于应用程序，而非基础设施。
- en: DigitalOcean
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DigitalOcean
- en: 'DigitalOcean is a provider that, even though not as well-known as AWS or GCP,
    offers a very interesting alternative to small to mid sized organizations to run
    their cloud systems. They have developed a very powerful concept: the droplet.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: DigitalOcean是一个即使不如AWS或GCP知名，但为中小型组织提供了一个非常有趣的替代方案的云服务提供商。他们开发了一个非常强大的概念：droplet。
- en: Basically, a droplet is a component that can run your software and be connected
    to different networks (private or public) through some configuration.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，droplet是一个可以运行你的软件并通过某些配置连接到不同网络（私有或公共）的组件。
- en: 'In order to assemble a droplet, we just need to define a few things:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个droplet，我们只需要定义几个内容：
- en: The image (the operating system or one-click images)
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像（操作系统或一键镜像）
- en: The size
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尺寸
- en: The region
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域
- en: And once you have chosen your configuration, the droplet starts running. This
    is very simple and effective, which is usually what companies look for.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了配置，droplet便开始运行。这非常简单有效，这也是公司通常所追求的。
- en: Azure
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure
- en: Azure is the Microsoft push for cloud systems and one of the providers that
    has grown the most in the last couple of years. As expected, Azure is a ;particularly
    good platform for running Windows-based applications, but that's not to say we
    can overlook its capability of running Linux applications as well.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Azure是微软推出的云系统平台，也是过去几年增长最快的云服务提供商之一。正如预期的那样，Azure是运行基于Windows的应用程序的**特别优秀**平台，但这并不意味着我们可以忽视它运行Linux应用程序的能力。
- en: The catalog of products is as complete as the catalog for AWS or Google Cloud
    Platform, and there is absolutely no reason not to choose Azure as a cloud provider
    for your systems.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的产品目录和AWS或Google Cloud Platform一样全面，完全没有理由不选择Azure作为你的系统云服务提供商。
- en: Azure is also one of the newest providers (it became widely available in 2013)
    in the market, so it has the advantage of being able to solve problems that other
    providers have presented.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Azure也是市场上最年轻的云服务提供商之一（自2013年广泛推出），因此它有一个优势，就是能够解决其他提供商所面临的问题。
- en: Summary
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Up until now, we showcased the features of AWS and GCP and introduced some other
    providers that are very interesting choices when building our systems. One of
    the advantages of having a good number of competitors in the market is the fact
    that each one of them has their own strong points and we can combine them by making
    use of VPNs, creating a big and extended virtual data center across different
    providers.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们展示了AWS和GCP的特点，并介绍了一些在构建系统时非常有趣的其他提供商。市场上有众多竞争者的一个优点是，每个提供商都有自己的强项，我们可以通过使用VPN将它们组合起来，在不同的提供商之间创建一个庞大且扩展的虚拟数据中心。
- en: Through the rest of the book, we are going to give special attention to AWS
    and GCP, as they have the most interesting characteristics for a DevOps book (not
    to overlook the rest of them, but remember, things are limited in terms of space).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将特别关注AWS和GCP，因为它们对于一本DevOps书籍来说具有最有趣的特点（当然不能忽视其他云服务提供商，但请记住，篇幅有限）。
- en: We are also going to take a special interest in container clusters such as Kubernetes
    or Docker Swarm as they are, without any kind of doubt, the future.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将特别关注容器集群，例如Kubernetes或Docker Swarm，因为它们无疑是未来的趋势。
