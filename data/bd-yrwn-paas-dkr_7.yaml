- en: Chapter 7. Deployment on Our PaaS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章：在我们的 PaaS 上部署
- en: In the previous chapters, we went from setting up our PaaS in a very hands-on
    manner to a "hacked-together-automated" way by combining tools such as Crane and
    nginx-proxy. One part is still missing—how to deploy your code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们通过结合 Crane 和 nginx-proxy 等工具，从非常实操的方式逐步过渡到“拼凑自动化”的方式。仍然有一部分缺失——如何部署你的代码。
- en: 'In this chapter we will go through the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将讨论以下主题：
- en: The problem with our current setup
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们当前设置的问题
- en: The tools/services available
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的工具/服务
- en: Dokku— mini-Heroku
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dokku——迷你版 Heroku
- en: Setting up a WordPress app with Dokku
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Dokku 设置 WordPress 应用程序
- en: The problem with our current setup
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们当前设置的问题
- en: 'Our current setup consists of three containers: a WordPress container, a MySQL
    container and a data volume container, tied together with Crane.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的设置由三个容器组成：一个 WordPress 容器，一个 MySQL 容器和一个数据卷容器，它们通过 Crane 连接在一起。
- en: The main problem with our current setup using a `VOLUME` container as file storage
    is that we need a way into the volume to edit files. As of now, the only way to
    get into it is by mounting it on another container.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前使用 `VOLUME` 容器作为文件存储的主要问题是，我们需要一种方式进入该卷以编辑文件。目前，进入它的唯一方法是将它挂载到另一个容器上。
- en: Another problem is that we don't version control our source code. We have just
    downloaded WordPress and some plugins and left it there. What if we update WordPress
    or make some other changes? We surely want to have that under version control.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是我们没有对源代码进行版本控制。我们只是下载了 WordPress 和一些插件并放在那里。如果我们更新了 WordPress 或做了其他更改怎么办？我们肯定希望将这些操作纳入版本控制中。
- en: 'If we want to keep the application architecture as it is, there are two options:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望保持当前的应用架构不变，有两种选择：
- en: Create a new container that mounts our data volume container, install it, and
    get access to it with SSH
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新容器，挂载我们的数据卷容器，安装它，并通过 SSH 访问它
- en: Install and open access to SSH in our WordPress container
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的 WordPress 容器中安装并打开 SSH 访问
- en: With SSH installed, we can access the containers shell from a remote machine,
    and so, we can install Git to version control to our files. In this way, we can
    connect and push new code into the data volume container when we need to.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 SSH 后，我们可以从远程机器访问容器的 shell，因此，我们可以安装 Git 以对文件进行版本控制。通过这种方式，当我们需要时，可以连接并将新代码推送到数据卷容器中。
- en: When connecting with SSH, you can go straight into the container without needing
    to connect to the Docker hosts shell.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 SSH 时，你可以直接进入容器，而不需要连接到 Docker 主机的 shell。
- en: If you are okay with connecting to the Docker host, and from there, if you open
    a new shell to get into your data volume container, a third option would be to
    SSH into your Docker hosts and then access the container with `docker exec –it
    container_name /bin/sh`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以连接到 Docker 主机，并且从那里打开一个新的 shell 进入你的数据卷容器，那么第三个选择是通过 SSH 进入 Docker 主机，然后使用
    `docker exec –it container_name /bin/sh` 访问容器。
- en: While this certainly works, there are easier ways to do it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这样肯定有效，但也有更简单的方法。
- en: The tools/services available
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用的工具/服务
- en: 'When we look at hosted PaaS providers available today, two of them come to
    mind—OpenShift and Heroku. Many developers love Heroku because of its ease of
    use. Their philosophy gives a hint why:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看到今天可用的托管 PaaS 提供商时，有两个会浮现在脑海中——OpenShift 和 Heroku。许多开发者喜欢 Heroku，因为它的易用性。它们的理念给出了一个提示，为什么会这样：
- en: '*"Developer Productivity:*'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“开发者生产力：*'
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Developer productivity is our battle cry, at the core of everything we do.
    Why require three steps when one will do? Why require any action at all when zero
    steps will do?"*'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*开发者生产力是我们的口号，是我们所做一切的核心。为什么要做三步操作，明明一步就够？为什么要做任何操作，当零步就能完成的时候？”*'
- en: Developers usually want to spend time on their code, not managing servers, deployment,
    and so on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员通常希望将时间花在他们的代码上，而不是管理服务器、部署等任务。
- en: '![The tools/services available](img/3946OT_07_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![可用的工具/服务](img/3946OT_07_01.jpg)'
- en: On Heroku, you get a remote Git repository into which you can push code. Your
    app's language and dependencies are identified by special files, depending on
    the language you use. Environment variables are used for configuration, and you
    instruct Heroku what to execute by specifying commands in a special file, called
    **Procfile**, that you include in your source code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Heroku 上，你会得到一个远程 Git 仓库，你可以将代码推送到其中。你的应用程序的语言和依赖项会通过特定的文件来识别，这些文件根据你使用的语言而有所不同。环境变量用于配置，并且你通过在一个特殊的文件中指定命令来指示
    Heroku 执行什么操作，这个文件称为**Procfile**，你需要将其包含在源代码中。
- en: Whenever your push code into your remote Heroku Git repository, the app rebuilds
    and you have it online right away. If you have special build requirements, Heroku
    lets you create your own buildpacks where you can specify exactly what's to be
    done.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你将代码推送到远程 Heroku Git 仓库时，应用程序会重建，并立即在线发布。如果你有特殊的构建需求，Heroku 允许你创建自己的构建包，其中可以精确指定要执行的操作。
- en: 'Basically, if you want to set up a WordPress blog on Heroku, you need to go
    through these steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，如果你想在 Heroku 上设置一个 WordPress 博客，你需要按照以下步骤操作：
- en: Locally download the latest version of WordPress.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地下载 WordPress 的最新版本。
- en: Create a Procfile and define what to execute (a buildpack that runs PHP and
    Apache2 in this case).
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Procfile 并定义要执行的内容（在此情况下是运行 PHP 和 Apache2 的构建包）。
- en: Create a `composer.json` file that specifies that PHP is a dependency.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `composer.json` 文件，指定 PHP 是一个依赖项。
- en: Make some changes to the WordPress config files.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 WordPress 配置文件进行一些更改。
- en: Create the Heroku app, add add-ons (such as a database), and define environment
    variables on Heroku.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Heroku 应用程序，添加附加组件（如数据库），并在 Heroku 上定义环境变量。
- en: Push your local code into Heroku.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将本地代码推送到 Heroku。
- en: When you make a change to the code, you just Git push to Heroku to deploy the
    new code. You cannot edit code directly on Heroku's servers, nor can you install
    themes or plugins (you have to do that locally and push the new code).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当你对代码进行更改时，只需通过 Git 推送到 Heroku 来部署新代码。你不能直接在 Heroku 服务器上编辑代码，也不能安装主题或插件（必须在本地做，然后推送新代码）。
- en: '![The tools/services available](img/3946OT_07_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![可用的工具/服务](img/3946OT_07_02.jpg)'
- en: If you chose a provider such as OpenShift instead, you will have a bit more
    control over your PaaS, You can connect to it with SSH and also store static files
    downloaded by apps.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了 OpenShift 等提供商，你将对你的 PaaS 拥有更多的控制权。你可以通过 SSH 连接并存储应用程序下载的静态文件。
- en: It is something like this we are looking for; it's just that we want to host
    our own platform and have Docker containers used in the background.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在寻找的就是这样的东西；只是我们想要托管自己的平台，并在后台使用 Docker 容器。
- en: Dokku – Docker-powered mini-Heroku
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dokku – 基于 Docker 的迷你 Heroku
- en: 'Dokku can be found at [https://github.com/progrium/dokku](https://github.com/progrium/dokku).
    It is a project that is described by its authors as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Dokku 可以在 [https://github.com/progrium/dokku](https://github.com/progrium/dokku)
    找到。它是一个由作者描述如下的项目：
- en: '*"Docker powered mini-Heroku in around 100 lines of Bash."*'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“大约 100 行 Bash 脚本，构建 Docker 支持的迷你 Heroku。”*'
- en: Feature wise, Dokku carries out deployment in the same way as Heroku does. Let's
    install Dokku and see what it can do for our PaaS.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能方面，Dokku 执行部署的方式与 Heroku 相同。让我们安装 Dokku，看看它能为我们的 PaaS 做些什么。
- en: Installation
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: Dokku requires Ubuntu 14.04 to run, and we start by creating a new EC2 instance
    running that.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Dokku 需要 Ubuntu 14.04 来运行，我们从创建一个运行该版本的 EC2 实例开始。
- en: 'Here is a screenshot of what we see:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们看到的截图：
- en: '![Installation](img/3946OT_07_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![安装](img/3946OT_07_03.jpg)'
- en: 'When we have created an instance and have it up and running, we can start by
    installing Docker itself:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建好实例并使其运行后，我们可以开始安装 Docker 本身：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When that is done, we go ahead and install Dokku.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们继续安装 Dokku。
- en: 'The recommended bootstrap bash installation didn''t work for me, so I cloned
    the repo instead:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐的引导式 bash 安装方法对我来说不起作用，因此我改为克隆了仓库：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read about the installation process on the official installation page
    at [http://progrium.viewdocs.io/dokku/installation](http://progrium.viewdocs.io/dokku/installation).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在官方安装页面 [http://progrium.viewdocs.io/dokku/installation](http://progrium.viewdocs.io/dokku/installation)
    阅读关于安装过程的信息。
- en: The installation part will take a while, but it should succeed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 安装部分可能需要一段时间，但应该会成功。
- en: According to the document through the preceding link, we should edit the `/home/dokku/VHOST`
    file to hold the content of a domain name we plan to use. We skip this for now
    because it includes setting some DNS records. When we leave that file empty, we
    will be reaching our PaaS in the form of `http://ip:port`. We will come back to
    this step at a later point.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面链接中的文档，我们应该编辑 `/home/dokku/VHOST` 文件，填写我们计划使用的域名。我们暂时跳过这一步，因为它涉及到设置一些 DNS
    记录。当我们将该文件留空时，我们将通过 `http://ip:port` 的形式访问我们的 PaaS。稍后我们会回到这一点。
- en: The only step left now is to create an `ssh` key pair on our local machine and
    add the public part in the server user Dokku's `authorized_keys` file so that
    we can connect with Git in a very secure way without using a password.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在剩下的唯一步骤是，在本地机器上创建一对 `ssh` 密钥，并将公钥部分添加到服务器用户 Dokku 的 `authorized_keys` 文件中，这样我们就可以通过
    Git 以非常安全的方式进行连接，而无需使用密码。
- en: 'On your local machine, use these commands:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地机器上，使用以下命令：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On the server, use the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，使用以下命令：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you name your `ssh-key` something other than `id_rsa`, you will have to edit
    your local `.ssh/config` file to get it to work.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将 `ssh-key` 命名为其他名称而不是 `id_rsa`，你将需要编辑本地的 `.ssh/config` 文件才能使其工作。
- en: Now the Dokku configuration is done and we should be able to start using it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Dokku 配置已完成，我们应该能够开始使用它了。
- en: Creating a sample Dokku app
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个示范的 Dokku 应用
- en: It is time for us to set up a demo app just so that you can learn the process.
    In this case, let's take Heroku's `Node.js` sample app.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候设置一个示范应用程序，让你可以学习这个过程。在这种情况下，我们以 Heroku 的 `Node.js` 示例应用为例。
- en: 'We start off by cloning Heroku''s `node-js-sample` GitHub repository to get
    the app''s content. The following tasks are all supposed to be done on your local
    machine, and when I enter **server.com**, you should enter the URL or the IP address
    of your server. If you use a domain, make sure that you''ve set up DNS records
    for it or entered a record in your local `/etc/hosts` file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过克隆 Heroku 的 `node-js-sample` GitHub 仓库来获取应用的内容。接下来的所有任务都应该在你的本地机器上完成，当我输入
    **server.com** 时，你应该输入你服务器的 URL 或 IP 地址。如果你使用的是域名，确保你已经为其设置了 DNS 记录，或者在本地的 `/etc/hosts`
    文件中输入了记录：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When we push to a non-existing branch or app name in Dokku, Dokku will create
    a new app and deploy it. When the push is done, you should see something like
    this at the bottom of the output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将代码推送到一个不存在的分支或应用名时，Dokku 会创建一个新应用并进行部署。当推送完成时，你应该会在输出的底部看到如下内容：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Of course, the IP address and port will not be the same for you.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，IP 地址和端口号对你来说不会相同。
- en: 'The output is displayed, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下所示：
- en: '![Creating a sample Dokku app](img/3946OT_07_04.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个示范的 Dokku 应用](img/3946OT_07_04.jpg)'
- en: Enter the `ip:port` in your web browser to find yourself a page saying **Hello
    World**. We've just deployed our first app on Dokku!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中输入 `ip:port`，你会看到一个页面显示 **Hello World**。我们刚刚在 Dokku 上部署了第一个应用！
- en: To modify and redeploy the site, we can create a file named `index.html` inside
    `public/ folder` in our `node-js-sample` project. This node app will always look
    for files in the public folder. If the requested file isn't found, the app falls
    back to just printing **Hello World**. So, if we create a file and request it,
    the node server will serve it to us.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修改并重新部署该网站，我们可以在 `node-js-sample` 项目的 `public/` 文件夹内创建一个名为 `index.html` 的文件。这个
    Node 应用始终会在公共文件夹中查找文件。如果请求的文件未找到，应用会回退到打印 **Hello World**。因此，如果我们创建一个文件并请求它，Node
    服务器会将其提供给我们。
- en: 'Paste this as the content of the `index.html` file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容粘贴到 `index.html` 文件中：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It's a simple HTML page.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简单的 HTML 页面。
- en: 'Let''s go ahead and create the file and push it, as shown in the following
    code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建文件并推送，代码如下所示：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note from the output that the port will change every time you deploy, since
    a new container is created and your old container is shut down.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以注意到，端口号每次部署时都会发生变化，因为会创建一个新的容器，旧容器会被关闭。
- en: Later, when we add a domain name to deploy on, the URL will, of course, be the
    same. The Nginx config file is updated upon deployment. Point your browser to
    the new `ip:port`, and you should see a huge headline saying **First edit!**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以后，当我们添加一个域名进行部署时，URL 当然会保持不变。Nginx 配置文件会在部署时更新。将浏览器指向新的 `ip:port`，你应该会看到一个巨大的标题，写着
    **First edit!**。
- en: Whenever you make edits, just push them. Dokku will take care of the rest.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你进行编辑时，只需推送即可。Dokku 会处理剩下的部分。
- en: How Dokku works
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dokku 的工作原理
- en: As I described the basic step of Heroku earlier, you might recognize the steps
    when deploying on Dokku, and that is also Dokku's goal. They want people like
    us to feel comfortable with the deployment process.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前描述 Heroku 的基本步骤一样，当你在 Dokku 上进行部署时，你可能会认出这些步骤，这也是 Dokku 的目标。他们希望像我们这样的人在部署过程中感到舒适。
- en: 'Dokku can be seen as the glue between the following tools: Docker, Buildstep,
    ssh-command, pluginhook, ssh, git, and nginx. The source code is just about 100
    lines long, and it ships with a few plugins that together contain about 500 lines
    of code. This is the power of Dokku—anyone can write plugins to extend the functionality
    of Dokku.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Dokku可以看作是以下工具之间的粘合剂：Docker、Buildstep、ssh-command、pluginhook、ssh、git和nginx。源代码大约有100行，并且附带了一些插件，这些插件加起来大约有500行代码。这就是Dokku的强大之处——任何人都可以编写插件来扩展Dokku的功能。
- en: We have not yet installed any plugins, and a clean installation like ours can
    do only basic stuff such as deploy, see an app's logs, delete an app, and run
    a command in the app's container. There are quite a lot of plugins; they are all
    listed at [http://progrium.viewdocs.io/dokku/plugins](http://progrium.viewdocs.io/dokku/plugins).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有安装任何插件，而像我们这样一个干净的安装只能执行一些基本操作，如部署、查看应用日志、删除应用和在应用容器中运行命令。插件有很多，所有插件都列在[http://progrium.viewdocs.io/dokku/plugins](http://progrium.viewdocs.io/dokku/plugins)上。
- en: The receive process
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收过程
- en: 'If we take a look at the main Dokku file (named `dokku` in the projects root),
    we notice that whenever a `receive` action is triggered (which happens when we
    push to the master branch), we see this code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看主Dokku文件（位于项目根目录下，名为`dokku`），我们会注意到每当触发`receive`操作时（即当我们推送到主分支时），会看到以下代码：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Through this output we can recognize when we have pushed to the master.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此输出，我们可以识别出何时已经推送到主分支。
- en: If we follow the plugin chain when `deploy` is called, we end up with a plugin
    hook named `post-deploy` being called. A standard plugin, named `nginx-vhosts`,
    is triggered, and this in turn calls a function inside that plugin named `nginx:build-config`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们跟随插件链，当调用`deploy`时，最终会调用一个名为`post-deploy`的插件钩子。一个标准插件`nginx-vhosts`会被触发，进而调用该插件中的`nginx:build-config`函数。
- en: 'A code snippet from that preceding file looks like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面文件中的一段代码：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If we look through that code, we can see that it looks for a domain name in
    the `$DOKKU_ROOT/$APP/VHOST` file, and if that is found, sets some config variables
    and inserts them into a copy of the `templates/nginx.conf` file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看这段代码，可以看到它会在`$DOKKU_ROOT/$APP/VHOST`文件中查找域名，如果找到，则会设置一些配置变量，并将其插入到`templates/nginx.conf`文件的副本中。
- en: 'That file has these contents:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的内容如下：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that looks very much like the nginx config we created in the last chapter,
    right? The post-deploy part of Dokku is basically Jason Wilder's `nginx-proxy`.
    They accomplish the same result, but they get there in very different ways.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这看起来非常像我们在上一章创建的nginx配置，对吧？Dokku的post-deploy部分基本上就是Jason Wilder的`nginx-proxy`。它们实现了相同的结果，但采用了完全不同的方法。
- en: Dokku plugins
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dokku插件
- en: Add-ons in Heroku are called plugins in Dokku. Since we cannot specify `docker`
    `run` command parameters directly from Dokku, we need plugins to connect containers
    and add data volume containers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku中的附加组件在Dokku中称为插件。由于我们无法直接从Dokku指定`docker run`命令参数，因此我们需要插件来连接容器并添加数据卷容器。
- en: Here's a list of a few usable Dokku plugins that we'll soon use.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些可用的Dokku插件列表，我们很快就会使用它们。
- en: Dokku domains plugin
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dokku域名插件
- en: 'Dokku domain plugin enables you to specify multiple domains in one app. By
    default, only one URL can be mapped to an app:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Dokku域名插件允许您在一个应用中指定多个域名。默认情况下，一个应用只能映射一个URL：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'URL: [https://github.com/wmluke/dokku-domains-plugin](https://github.com/wmluke/dokku-domains-plugin)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'URL: [https://github.com/wmluke/dokku-domains-plugin](https://github.com/wmluke/dokku-domains-plugin)'
- en: Dokku-docker-options
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dokku-docker-options
- en: 'With this plugin, you can pass any options to the Docker daemon when `docker
    run` command is executed. It can be used to mount volumes, link containers, and
    so on:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此插件，您可以在执行`docker run`命令时传递任何选项给Docker守护进程。它可以用于挂载卷、链接容器等：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'URL: [https://github.com/dyson/dokku-docker-options](https://github.com/dyson/dokku-docker-options)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'URL: [https://github.com/dyson/dokku-docker-options](https://github.com/dyson/dokku-docker-options)'
- en: Volume plugin for Dokku
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dokku的卷插件
- en: 'Here''s a plugin that enables you to mount volumes on your service containers.
    It also has commands to dump (export) and restore the data:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个插件，允许您在服务容器上挂载卷。它还提供了导出和恢复数据的命令：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'URL: [https://github.com/ohardy/dokku-volume](https://github.com/ohardy/dokku-volume)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 'URL: [https://github.com/ohardy/dokku-volume](https://github.com/ohardy/dokku-volume)'
- en: Dokku-link
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dokku-link
- en: 'You can link containers with this plugin:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此插件链接容器：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'URL: [https://github.com/rlaneve/dokku-link](https://github.com/rlaneve/dokku-link)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'URL: [https://github.com/rlaneve/dokku-link](https://github.com/rlaneve/dokku-link)'
- en: MariaDB plugin for Dokku
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MariaDB插件 for Dokku
- en: 'This plugin enables you to create and use MariaDB containers. MariaDB can be
    used as a replacement for MySQL and is generally faster:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件允许你创建和使用MariaDB容器。MariaDB可以作为MySQL的替代品，通常速度更快：
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'URL: [https://github.com/Kloadut/dokku-md-plugin](https://github.com/Kloadut/dokku-md-plugin)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'URL: [https://github.com/Kloadut/dokku-md-plugin](https://github.com/Kloadut/dokku-md-plugin)'
- en: 'MySQL plugin: [https://github.com/hughfletcher/dokku-mysql-plugin](https://github.com/hughfletcher/dokku-mysql-plugin)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'MySQL插件: [https://github.com/hughfletcher/dokku-mysql-plugin](https://github.com/hughfletcher/dokku-mysql-plugin)'
- en: Setting up a WordPress app with Dokku
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Dokku设置WordPress应用
- en: Now that we have played around with Dokku for a while, exploring how it works
    and what plugins are available, it's time to set up a WordPress site. After all,
    that's why we were exploring it in the first place.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经玩了一会儿Dokku，探索了它是如何工作的以及有哪些插件可用，是时候设置一个WordPress站点了。毕竟，这就是我们最初探索它的原因。
- en: 'This is what we are going to do:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要做的是：
- en: Create a new local Git repository and download WordPress on it.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的本地Git仓库，并下载WordPress。
- en: Install the MariaDB plugin, create a database, and link it to our app.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装MariaDB插件，创建数据库，并将其与我们的应用连接。
- en: Configure WordPress to connect to our linked database.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置WordPress连接到我们链接的数据库。
- en: On your local computer, download and unpack the latest version of WordPress
    and create a new Git repository. Create a `composer.json` file to tell Dokku that
    this is a PHP app we are creating.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的本地计算机上，下载并解压最新版本的WordPress，并创建一个新的Git仓库。创建一个`composer.json`文件，告诉Dokku这是一个PHP应用。
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: You can read more about how to hint Dokku on what type of app you are creating
    at [https://devcenter.heroku.com/articles/buildpacks](https://devcenter.heroku.com/articles/buildpacks)
    (yes, Dokku uses Heroku buildpacks) and looks to detect functions. Dokku uses
    a library called Buildstep to make application builds using Docker and Buildpacks.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://devcenter.heroku.com/articles/buildpacks](https://devcenter.heroku.com/articles/buildpacks)阅读更多关于如何提示Dokku你正在创建哪种类型的应用的内容（是的，Dokku使用Heroku的buildpacks），并会尝试检测功能。Dokku使用一个名为Buildstep的库，通过Docker和Buildpacks来构建应用。
- en: Let's go ahead and get started now.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始吧。
- en: 'I used a server on my domain, [ohdokku.com](http://ohdokku.com), for this app:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我在我的域名服务器上使用了[ohdokku.com](http://ohdokku.com)来托管这个应用：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'On the server we have to install the MariaDB or MySQL plugin:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，我们需要安装MariaDB或MySQL插件：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Back to the client side (you can do this on the server as well, but the whole
    point of this type of PaaS is being able to do all of this repetitive stuff on
    the client).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 回到客户端（你也可以在服务器上执行这些操作，但这种PaaS的核心是让你能够在客户端完成所有这些重复的工作）。
- en: 'The result is as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Setting up a WordPress app with Dokku](img/3946OT_07_05.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![使用Dokku设置WordPress应用](img/3946OT_07_05.jpg)'
- en: As you can see, the output from the create command will show our database credentials.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，创建命令的输出会显示我们的数据库凭证。
- en: 'Now that the database is set up, we can go ahead and push our app for the first
    time:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据库已经设置好了，我们可以开始第一次推送我们的应用：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You should notice that Dokku detects that you are pushing a PHP app. Since we
    haven't specified anything at all in our `composer.json` file, a default package
    of PHP and Apache2 will fire up.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意到Dokku检测到你正在推送一个PHP应用。由于我们在`composer.json`文件中没有指定任何内容，因此会启动一个PHP和Apache2的默认包。
- en: 'Create a MariaDB database called wp1_db:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为wp1_db的MariaDB数据库：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If we enter `ip:port` in a browser, a known page welcomes us—the WordPress installation
    page. When we click on the **Continue** button, we see that we can't continue
    before we create a `wp-config.php` file.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中输入`ip:port`，一个熟悉的页面欢迎我们——WordPress安装页面。当我们点击**继续**按钮时，我们会看到在创建`wp-config.php`文件之前，我们无法继续。
- en: We have just created the link between the MariaDB container and the WP container,
    but we haven't made the link in code yet. WordPress has no idea how to connect
    to the database.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚建立了MariaDB容器和WP容器之间的连接，但我们还没有在代码中建立连接。WordPress不知道如何连接到数据库。
- en: 'We start off by renaming the `wp-config-sample.php` file to `wp-config.php`
    and opening the file in an editor:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将`wp-config-sample.php`文件重命名为`wp-config.php`，然后在编辑器中打开这个文件：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Edit the credentials as you just saw to make WordPress look for environment
    variables that our linked MariaDB gives us:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你刚才看到的凭证，使WordPress查找我们的MariaDB容器所提供的环境变量：
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Wait until you get a new `ip:port` that our app is deployed to, and then enter
    the info in your web browser.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 等到你获得我们应用部署的新`ip:port`，然后在浏览器中输入信息。
- en: Now you should be able to install WordPress.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够安装WordPress了。
- en: 'The output is as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Setting up a WordPress app with Dokku](img/3946OT_07_06.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![使用Dokku设置WordPress应用程序](img/3946OT_07_06.jpg)'
- en: Starting multiple apps
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动多个应用程序
- en: 'To start multiple apps with Dokku, just repeat the simple process, as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Dokku启动多个应用程序，只需重复以下简单的过程：
- en: Create a local Git repository with WordPress in it, and create a remote Git
    repository.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含WordPress的本地Git仓库，并创建一个远程Git仓库。
- en: Create and link a database with the MariaDB plugin.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用MariaDB插件创建并链接数据库。
- en: Edit your `wp-config.php` file.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编辑你的`wp-config.php`文件。
- en: Push to deploy.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送以进行部署。
- en: 'The name you set on your app when adding the `remote` from Git command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你在使用Git命令添加`remote`时为你的应用设置的名称：
- en: '[PRE22]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This command will create the URL to the WordPress site ([wp1.ohdokku.com](http://wp1.ohdokku.com)).
    You can set a complete custom domain as the name like: `git remote add dokku dokku@ohdokku.com:wp1.oskarhane.com`
    that will work if I point [wp1.oskarhane.com](http://wp1.oskarhane.com) to my
    server.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将创建指向WordPress网站的URL（[wp1.ohdokku.com](http://wp1.ohdokku.com)）。你可以设置一个完整的自定义域名作为名称，如：`git
    remote add dokku dokku@ohdokku.com:wp1.oskarhane.com`，如果我将[wp1.oskarhane.com](http://wp1.oskarhane.com)指向我的服务器，这将有效。
- en: Adding a domain to Dokku
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Dokku添加域名
- en: I waited with setting up domains to Dokku, since it involves logging in to a
    DNS provider and setting up DNS records to point the domain to our server. We
    set up DNS records to point our domain name to our server's IP address so that
    our server can be reached by entering our domain name in the web browser's location
    bar.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我在将域名设置到Dokku时等了一下，因为这需要登录到DNS提供商并设置DNS记录，将域名指向我们的服务器。我们设置了DNS记录，将我们的域名指向服务器的IP地址，这样就可以通过在浏览器的地址栏输入我们的域名来访问服务器。
- en: I usually use Amazon Route 53 to handle DNS for domains, since they're very
    stable and easy to use. It costs about a dollar a month for low-traffic sites.
    The setup is the same for any DNS provider. You have to add two records, one for
    `yourdomain.com` and one for `*.yourdomain.com`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常使用Amazon Route 53来处理域名的DNS，因为它们非常稳定且易于使用。对于低流量站点，每月费用大约为一美元。任何DNS提供商的设置方式都是一样的。你需要添加两条记录，一条是`yourdomain.com`，另一条是`*.yourdomain.com`。
- en: The records we are going to enter are A-records, which means that we point the
    domain names to a specific IPv4 address. The **Time To Live** (**TTL**) value
    is not important right now, but it means TTL and tells all other DNS servers that
    get requests for this domain how long they can cache the current value.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要输入的记录是A记录，这意味着我们将域名指向特定的IPv4地址。**生存时间**（**TTL**）值目前不重要，但它代表TTL，并告诉所有其他请求该域名的DNS服务器可以缓存当前值的时间。
- en: 'The output is as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Adding a domain to Dokku](img/3946OT_07_07.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![向Dokku添加域名](img/3946OT_07_07.jpg)'
- en: You should, of course, change the IP to the public IP your server has. When
    setting the A-record for the wildcard subdomains, just enter *** in the input
    field at the top.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你应该将IP地址更改为服务器的公共IP。在为通配符子域设置A记录时，只需在顶部的输入框中输入***。
- en: To see whether your DNS provider can resolve your domain name, execute `ping
    yourdomain.com` in a terminal. You'll see the resolved IP right there. If you've
    just bought the domain, you should be able to see the result right away, but if
    you've used the domain for a while, the old TTL value might delay the effect a
    bit.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看你的DNS提供商是否可以解析你的域名，可以在终端中执行`ping yourdomain.com`。你会在命令行中看到解析后的IP。如果你刚刚购买了域名，应该能够立即看到结果，但如果你使用域名已经有一段时间，旧的TTL值可能会稍微延迟效果。
- en: 'If you want to wait for the setting of DNS records (which is common during
    development), you can set local records on your computer by editing the `/etc/hosts`
    file, as shown in the following command snippet:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想等待DNS记录的设置（这在开发过程中很常见），你可以通过编辑`/etc/hosts`文件，在你的计算机上设置本地记录，如下所示的命令片段：
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: One thing to remember here is that you can't enter records for wildcard subdomains.
    If you plan to develop multiple apps on subdomains, you have to enter one record
    for each of them. Also, don't forget to remove these records when you're done;
    it can get quite confusing (and interesting) when you forget you have records
    for the domains you used.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这里要记住的一点是，不能为通配符子域名输入记录。如果你计划在子域上开发多个应用程序，则必须为每个子域输入一条记录。另外，完成后别忘了删除这些记录；如果你忘记了曾为使用过的域名设置记录，它会变得相当混乱（甚至有点有趣）。
- en: On the Dokku server, create a file named `/home/dokku/VHOST` and enter `yourdomain.com`
    in it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dokku服务器上，创建一个名为`/home/dokku/VHOST`的文件，并在其中输入`yourdomain.com`。
- en: All apps being created from now on will be subdomains of this domain, unless
    you give the apps complete domain names.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始创建的所有应用程序都会是该域名的子域，除非你为应用程序提供完整的域名。
- en: More notes on Dokku
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多Dokku相关说明
- en: Just like Heroku, Dokku makes it easy for developers to deploy and push code.
    If you download a WordPress plugin straight from your Dokku app, it will be gone
    when you restart your Dokku app. It is advisable to keep a local copy that can
    easily be started or a dev, test, and staging server that you can download new
    plugins on and push to your Dokku app from to ensure they are persistent.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Heroku一样，Dokku让开发人员轻松部署和推送代码。如果你直接从Dokku应用下载WordPress插件，重新启动Dokku应用时它会消失。建议保持一个本地副本，可以轻松启动，或者使用开发、测试和预发布服务器，在这些服务器上下载新的插件并推送到你的Dokku应用，以确保插件持久存在。
- en: Tip
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Images and videos should be uploaded to something such as Amazon via a plugin
    when using this kind of infrastructure.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种基础设施时，图像和视频应该通过插件上传到像Amazon这样的服务。
- en: You must also have your WordPress site send e-mails from an external e-mail
    provider, such as Mandrill. A plugin like WP Mail SMTP will solve that for you.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须让你的WordPress站点通过外部电子邮件服务商（如Mandrill）发送电子邮件。像WP Mail SMTP这样的插件可以解决这个问题。
- en: We still have a few manual steps (for example, downloading WordPress and editing
    `wp-config.php`) to do when deploying a WordPress app on Dokku, but the task of
    creating a custom Buildstep to remove the manual parts is beyond the scope of
    this book.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dokku上部署WordPress应用时，我们仍然需要执行一些手动步骤（例如，下载WordPress并编辑`wp-config.php`），但是创建自定义构建步骤以去除手动部分超出了本书的范围。
- en: Another option is to have Composer handle the installation of WordPress with
    the `composer.json` file, but WordPress does not officially support this and it
    requires a few hacks, so I'll leave that up to you.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是让Composer通过`composer.json`文件来处理WordPress的安装，但WordPress并不官方支持这种方式，并且需要进行一些黑科技操作，所以我将留给你自己决定是否使用。
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to learn more about composer, you can go to the provided link [http://wpackagist.org](http://wpackagist.org).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于composer的信息，可以访问提供的链接[http://wpackagist.org](http://wpackagist.org)。
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we went all the way to create our own PaaS by adding deployment
    to the process. What we looked into up to this chapter was all about organizing
    containers and direct incoming traffic so that visitors can reach the correct
    container.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过向过程添加部署，最终创建了我们自己的PaaS。到本章为止，我们所探讨的内容都是关于组织容器并引导传入流量，以便访客能够访问正确的容器。
- en: With Dokku, we don't have to worry about that; all we have to care about is
    our code. As soon as we push our code, Dokku takes over and does the right things.
    Dokku makes it look really easy and that is why, I started from manually creating
    and linking containers and configuring reverse proxies—so that you would understand
    what Dokku does.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Dokku，我们不需要担心这些；我们只需要关注我们的代码。只要我们推送代码，Dokku就会接管并执行正确的操作。Dokku让这一切看起来非常简单，这也是我从手动创建和连接容器以及配置反向代理开始的原因——这样你就能理解Dokku的工作原理。
- en: 'The next chapter takes us to the bleeding edge: what''s being developed right
    now that can take private PaaS with Docker one step further?'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将带我们走向前沿：现在正在开发的技术，能够让使用Docker的私人PaaS更进一步？
