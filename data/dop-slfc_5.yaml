- en: Version Control
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制
- en: In the previous chapter, we looked at the Force.com migration tool. We went
    through a step-by-step procedure for setting up Force.com or the Ant migration
    tool on a Windows and Linux machine, studied the files that are required to retrieve
    metadata from a sandbox, and how to provide credentials to access a sandbox. We
    looked at the procedure to deploy metadata on sandboxes and discussed how Force.com
    helps developers and DevOps in everyday life.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了 Force.com 迁移工具。我们逐步讲解了如何在 Windows 和 Linux 机器上设置 Force.com 或 Ant
    迁移工具，研究了从沙箱中提取元数据所需的文件，以及如何提供凭据来访问沙箱。我们还了解了在沙箱上部署元数据的过程，并讨论了 Force.com 如何帮助开发者和
    DevOps 日常工作。
- en: In this chapter, we will study the source code versioning system and its types.
    We will mainly focus on Git distributed version control, and operations performed
    on the Git repository, such as commit, push, merge, and so on. We will also go
    through the step-by-step procedure for setting up our own GitLab server, adding
    a repository, adding users, and creating a branch. We will discuss Git branching
    strategies and protecting branches. Finally, we will learn how to use Git with
    a Salesforce project and how to save Salesforce metadata to Git.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习源代码版本控制系统及其类型。我们将主要关注 Git 分布式版本控制，以及在 Git 仓库上执行的操作，如提交、推送、合并等。我们还将逐步讲解如何搭建自己的
    GitLab 服务器、添加仓库、添加用户以及创建分支。我们将讨论 Git 分支策略及保护分支的相关内容。最后，我们将学习如何在 Salesforce 项目中使用
    Git，以及如何将 Salesforce 元数据保存到 Git 中。
- en: What is meant by SCVS?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SCVS 是什么？
- en: '**Source Code Versioning System** (**SCVS**) as the name indicates, it helps
    to manage source code changes over time. There are many source control versioning
    systems available such as CVS, SVN, Git, and so on. Version control maintains
    the history of every file change, and helps developers to track changes in an
    application. The main reasons behind having a version control system are to be
    able track changes in an application and to be able to revert back if something
    goes wrong. As code undergoes various changes, version control helps us to maintain
    a working version of code, and with the help of versioning, we can also maintain
    different environments such as testing, staging, and production. Multiple users
    can work on the same application source code simultaneously using version control.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**源代码版本控制系统**（**SCVS**）顾名思义，它帮助管理源代码随时间的变化。有许多源代码版本控制系统可供选择，如 CVS、SVN、Git 等。版本控制维护每个文件变更的历史记录，并帮助开发者追踪应用程序中的变更。实施版本控制的主要原因是能够追踪应用程序中的变更，以及在出现问题时能够回滚。随着代码经历各种变化，版本控制帮助我们保持代码的可用版本，并且借助版本控制，我们还能维护不同的环境，如测试、预生产和生产环境。多个用户可以同时在同一应用程序源代码上进行工作。'
- en: There are two varieties of version control, centralized and distributed. In
    centralized version control, there is one central repository where each user gets
    their own working copy. If anyone commits their changes to the source control
    system, other co-users can get those changes by updating their working copy. Subversion
    and CVS are centralized version systems.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制有两种类型：集中式和分布式。在集中式版本控制中，有一个中央仓库，每个用户都获得自己的工作副本。如果有人提交更改到源代码控制系统，其他共同用户可以通过更新自己的工作副本来获取这些更改。Subversion
    和 CVS 是集中式版本控制系统。
- en: In distributed version control, each user gets a local repository and working
    copy. Changes made by the user are saved in their local repository when they commit
    code. Co-users can get those changes when the user pushes the changes to the remote
    repository.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式版本控制中，每个用户都拥有一个本地仓库和工作副本。用户所做的更改会在提交代码时保存到他们的本地仓库。其他用户可以在该用户将更改推送到远程仓库后获取这些更改。
- en: Version control in Salesforce
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Salesforce 中的版本控制
- en: Salesforce has a limited audit capability to track changes in a sandbox. Making
    changes in the production environment is risky, and we are not able to see versions
    of files or track changes in a sandbox.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Salesforce 在沙箱中跟踪变更的审计能力有限。在生产环境中进行更改是有风险的，而且我们无法查看文件版本或跟踪沙箱中的变更。
- en: Reverting code in Salesforce is a very difficult task if we don't have version
    control in place.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有版本控制，回滚 Salesforce 中的代码是一个非常困难的任务。
- en: Why doesn't Salesforce provide its own version control? Salesforce was basically
    designed for users to get their application running on the cloud without much
    understanding of the  code. We can build small applications in Salesforce with
    just clicks, so Salesforce didn't focus on having version control. In Salesforce,
    we can modify the Salesforce organization in place so we don't need to have code
    on a local machine.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 Salesforce 不提供自己的版本控制？Salesforce 最初是为用户设计的，目的是让用户能够在云端运行应用程序，而无需深入理解代码。我们可以通过简单的点击构建小型应用程序，因此
    Salesforce 并没有关注版本控制。 在 Salesforce 中，我们可以直接修改 Salesforce 组织，所以不需要在本地计算机上存储代码。
- en: Mostly people working on Salesforce think that there is lot of work involved
    in setting up version control for Salesforce, which is only required if we have
    large teams. To set up version control for Salesforce projects, developers and
    administrators need to learn how to use version control systems, and they might
    need some knowledge of the command-line instructions involved. But we have many
    integrations of Git where we don't need to know about commands as we can use buttons
    or tabs instead.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数在 Salesforce 工作的人认为，为 Salesforce 设置版本控制需要做很多工作，实际上只有在团队较大时才需要。要为 Salesforce
    项目设置版本控制，开发人员和管理员需要学习如何使用版本控制系统，并且他们可能需要一些关于命令行指令的知识。但我们有许多 Git 的集成工具，不需要了解命令行指令，因为我们可以通过按钮或选项卡来操作。
- en: As we have mentioned here, Salesforce does not provide any in-built version
    control, so we need to set up a source code version control system. There are
    many version control systems, but the most popular version control system is Git.
    In the following section, we will go through the GitLab setup and using Git in
    a Salesforce project.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在此提到的，Salesforce 不提供内置的版本控制功能，因此我们需要设置一个源代码版本控制系统。有很多版本控制系统，但最流行的版本控制系统是
    Git。在接下来的部分中，我们将介绍 GitLab 的设置，并在 Salesforce 项目中使用 Git。
- en: Introduction to Git
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 介绍
- en: Git is a commonly used version control system invented by Linus Torvalds. It
    is a distributed type of version control which enables more than one developer
    to work on the same project simultaneously.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是由 Linus Torvalds 发明的常用版本控制系统。它是一种分布式版本控制，允许多个开发者同时在同一个项目上工作。
- en: It helps to maintain versions of source code so that if anything goes wrong,
    you can always revert back to the working version of your source code. To use
    Git, you will need a repository that will store your source code and make it available
    to all who are working on it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它有助于维护源代码的版本，以便在出现问题时，您可以随时恢复到工作版本的源代码。要使用 Git，您需要一个可以存储源代码并使其对所有参与者可用的代码仓库。
- en: 'Git uses the GitHub as a hosting service for Git repositories, and so first
    of all, you will need a GitHub account so that you will be able to create a repository
    to store your source code. There are two types of repository:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Git 使用 GitHub 作为 Git 仓库的托管服务，因此，首先，您需要一个 GitHub 账户，以便能够创建一个仓库来存储您的源代码。Git 仓库有两种类型：
- en: '**Public repository:** You can host public repositories on GitHub for free.
    These repositories will be accessible to all, so if you are going to save your
    important source code on GitHub, you should not save it on a public repository.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公开仓库：**您可以免费在 GitHub 上托管公开仓库。这些仓库对所有人开放，因此，如果您打算将重要的源代码保存到 GitHub，您不应该将它保存在公开仓库中。'
- en: '**Private repository:** These repositories are protected; nobody can access
    them unless you give them access. You have to pay for private repositories.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有仓库：**这些仓库是受保护的，除非您授予他人访问权限，否则任何人都无法访问它们。私有仓库需要付费。'
- en: We have introduced GitHub, but for now we will be using GitLab. GitLab is a
    fully featured open source Git server that you can install on your server. GitLab
    is a database-backend web application and is available in both community and enterprise
    editions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了 GitHub，但现在我们将使用 GitLab。GitLab 是一个功能齐全的开源 Git 服务器，您可以将其安装在自己的服务器上。GitLab
    是一个数据库后台的 Web 应用程序，提供社区版和企业版两种版本。
- en: Let's move to our next point, which is setting up our own GitLab server.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入下一个主题，即设置我们自己的 GitLab 服务器。
- en: Setting up a GitLab server on a Linux instance
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 实例上设置 GitLab 服务器
- en: To set up the server, an omnibus package installation is recommended. We will
    install the GitLab Community Edition on an Ubuntu 16.04 server. You can install
    GitLab on other operating systems such as Ubuntu, Centos, Debian, and so on; you
    can find a list here: [https://about.gitlab.com/installation/](https://about.gitlab.com/installation/).
    An omnibus package installation is the recommended method by GitLab itself, as
    the set up is easy and the upgrade process is also painless.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置服务器，推荐使用全包安装。我们将在 Ubuntu 16.04 服务器上安装 GitLab 社区版。您也可以在其他操作系统上安装 GitLab，例如
    Ubuntu、Centos、Debian 等；您可以在这里找到详细列表：[https://about.gitlab.com/installation/](https://about.gitlab.com/installation/)。全包安装是
    GitLab 推荐的方法，因为设置过程简单，升级过程也非常顺利。
- en: Prerequisites
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统要求
- en: 'GitLab recommends using a server with the following configuration:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 推荐使用以下配置的服务器：
- en: 2 cores
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 核心
- en: 4 GB of RAM
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4 GB 内存
- en: 'Install the required packages before installing GitLab Community Edition:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 GitLab 社区版之前，安装所需的包：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For the Postfix installation, choose Internet Site when prompted. On the next
    screen, enter your server''s domain name or IP address to configure the system
    that will send mail:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Postfix 安装，当系统提示时，选择“Internet Site”。在下一个屏幕中，输入您的服务器的域名或 IP 地址来配置将发送邮件的系统：
- en: '![](img/41906147-0b5a-4a4c-b251-105bf0518d4a.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41906147-0b5a-4a4c-b251-105bf0518d4a.png)'
- en: Let's move on to the GitLab server installation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续 GitLab 服务器的安装。
- en: Installing the GitLab server
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 GitLab 服务器
- en: 'We have installed all required dependencies for the GitLab server. Run the
    following commands to install GitLab:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已安装 GitLab 服务器所需的所有依赖项。运行以下命令以安装 GitLab：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can examine `script.deb.sh` and check all the packages that will be installed
    and their configuration, as you need to know what is being installed on your server.
    Once you have verified `script.deb.sh`, you are good to go for the next step in
    the installation:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查 `script.deb.sh` 并查看所有将要安装的包及其配置，因为您需要了解在服务器上安装了哪些内容。一旦您验证了 `script.deb.sh`，就可以继续安装的下一步：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The repository is set up! You can now install packages.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库已设置完毕！您现在可以安装包了。
- en: 'This script will set up our server to use the GitLab maintained repositories.
    After completing this script, we will install the actual GitLab application with
    `apt`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将设置我们的服务器以使用 GitLab 维护的仓库。在完成此脚本之后，我们将使用 `apt` 安装实际的 GitLab 应用程序：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will install the required components on our system, and the GitLab configuration
    file is `/etc/gitlab/gitlab.rb`. You can edit the configuration file and reconfigure
    the GitLab server:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装系统所需的组件，GitLab 配置文件路径为 `/etc/gitlab/gitlab.rb`。您可以编辑配置文件并重新配置 GitLab 服务器：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After installation is complete, visit your GitLab external URL and set up a
    password for the root user:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，访问您的 GitLab 外部 URL，并为 root 用户设置密码：
- en: '![](img/23e59a25-059a-449d-b414-a2dec15fc165.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23e59a25-059a-449d-b414-a2dec15fc165.png)'
- en: 'Log in with root user, and you will get the Welcome page for GitLab, as shown
    in this screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以 root 用户登录，您将看到 GitLab 的欢迎页面，如下图所示：
- en: '![](img/3721efa6-24d6-4ca7-a5ca-86629aacb6ad.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3721efa6-24d6-4ca7-a5ca-86629aacb6ad.png)'
- en: Now you have successfully set up GitLab, let's use it and create your first
    repository.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经成功设置了 GitLab，让我们开始使用它并创建您的第一个仓库。
- en: Creating your first project in GitLab
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GitLab 中创建您的第一个项目
- en: 'Log in to your GitLab server and follow the steps to create your first project
    repository:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到您的 GitLab 服务器，按照步骤创建您的第一个项目仓库：
- en: Choose Create a Project to create a project on the GitLab server. In the project,
    we will store all our code, configuration, and other information related to our
    application.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“创建项目”以在 GitLab 服务器上创建项目。在项目中，我们将存储所有与应用程序相关的代码、配置和其他信息。
- en: Provide a project name and description. For now, we will create a sample Hello
    World node application. Our project name is `Sample`*.*
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供项目名称和描述。目前，我们将创建一个示例的 Hello World node 应用程序。我们的项目名称是 `Sample`*。*
- en: Next, comes the visibility level of your project; it can be public, internal,
    or private.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，设置您的项目的可见性级别；它可以是公开的、内部的或私有的。
- en: Public  repositories can be cloned by anyone; any logged-in user can clone internal
    project repositories. To clone a private project, a user needs explicit access
    to clone the repository.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 公共仓库可以被任何人克隆；任何已登录的用户都可以克隆内部项目仓库。要克隆私有项目，用户需要明确的访问权限。
- en: For now we will keep it public and check Initialize repository with a README
    for a quick start.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前我们将保持公开，并勾选“初始化仓库并附加 README 以快速开始”。
- en: 'Click on Create Project:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建项目”：
- en: '![](img/6e074c17-5960-4b97-9c42-c835aaf6e127.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e074c17-5960-4b97-9c42-c835aaf6e127.png)'
- en: 'Clone the project URL:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆项目 URL：
- en: '![](img/f41ad861-d991-4223-96d8-a6c065487bd9.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f41ad861-d991-4223-96d8-a6c065487bd9.png)'
- en: 'If you have Git commands installed on your machine, run the following command
    to clone the repository to your local machine:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的计算机上已经安装了 Git 命令，运行以下命令将仓库克隆到本地计算机：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will see the `Readme.md` file is already created in the `Sample` project. You
    are all set to start working with your Git repository:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到 `Readme.md` 文件已经在 `Sample` 项目中创建好了。你可以开始使用你的 Git 仓库了：
- en: Working with a Git repository
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Git 仓库
- en: 'We have cloned the Sample repository on our local machine. Now we will see
    how to work with the Git repository:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将 Sample 仓库克隆到本地计算机。现在我们将了解如何使用 Git 仓库：
- en: 'Create a Node.js Hello World application that will create an HTTP server and
    respond to all requests on port `8080` with the string `Hello World`. Here is
    the sample code for the Node.js application:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Node.js Hello World 应用程序，该应用程序将创建一个 HTTP 服务器，并在 `8080` 端口上响应所有请求，返回字符串
    `Hello World`。下面是 Node.js 应用程序的示例代码：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save the code in  `**main.js** `and add this file to our Git repository.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码保存在 `**main.js**` 中，并将此文件添加到我们的 Git 仓库中。
- en: 'Check untracked changes in our Git repository with following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查我们 Git 仓库中的未跟踪更改：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By default, GitLab sets **master** branch as our default branch. The newly added `main.js`
    file is not present on the remote repository, and it is also not tracked in the
    local Git.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，GitLab 将 **master** 分支设置为我们的默认分支。新添加的 `main.js` 文件在远程仓库中不存在，它在本地 Git 中也没有被跟踪。
- en: Every file in the Git working directory is **tracked**, **untracked**, or **ignored**.
    The files which are committed or staged before are tracked files. Files that are
    not staged or committed are untracked files. The files that you don't want to
    add in the repository, such as files with credentials or machine-generated files,
    are mentioned in the `.gitignore` file.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 工作目录中的每个文件都可以是 **跟踪**、**未跟踪** 或 **忽略** 文件。已经提交或暂存过的文件是跟踪文件。没有暂存或提交的文件是未跟踪文件。你不想添加到仓库中的文件，例如包含凭据或机器生成的文件，会在
    `.gitignore` 文件中提到。
- en: 'An example of a `.gitignore` file coded to ignore all files with a `.log` extension
    is as follows:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 `.gitignore` 文件的示例，用于忽略所有 `.log` 扩展名的文件如下所示：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s add the `main.js` file to the local repository; it needs to be indexed
    first. The `git add` command updates the index using the content found in the
    working directory. These changes will be staged for commit. You can add all changes
    into the index using `*` or the `-a` option in the  `git add` command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将 `main.js` 文件添加到本地仓库中；首先需要将其索引。`git add` 命令会使用工作目录中的内容更新索引。这些更改将被暂存以备提交。你可以使用
    `*` 或 `-a` 选项将所有更改添加到索引中：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next step is to commit staged changes to the local repository:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将暂存的更改提交到本地仓库：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `commit` command is used to commit changes in the local repository. Other
    developers will not be able to see the changes. The important thing while committing
    your changes is to provide a commit message with the `-m` option in the command.
    Make sure your commit message relates to changes you're making in the code so
    that others using it will be able to understand your changes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`commit` 命令用于提交本地仓库中的更改。其他开发人员将无法看到这些更改。提交更改时，重要的是使用 `-m` 选项提供提交信息。确保你的提交信息与代码中的更改相关，以便其他使用它的人能够理解你的更改。'
- en: If you don't mention the filename, it will commit all the recent changes you
    made in the code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有指定文件名，它将提交你在代码中所做的所有最近更改。
- en: 'The final step is to push your local changes to the remote repository; the
    push operation refers to pushing changes to the remote repository. While pushing
    changes, it is important to mention the origin of the changes:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将本地更改推送到远程仓库；推送操作是指将更改推送到远程仓库。在推送更改时，重要的是要提到更改的来源：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Git will ask you for your credentials to authenticate the user and the push
    changes to the remote repository hosted on the GitLab server. Now you will be
    able to see those changes in the GitLab web URL.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Git 会要求你提供凭据以验证用户身份，并将更改推送到托管在 GitLab 服务器上的远程仓库。现在，你将能够在 GitLab 的网页 URL 上查看这些更改。
- en: 'It will look like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 它将是这样的：
- en: '![](img/4ceebb13-1b5c-4023-8156-c537446b9171.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ceebb13-1b5c-4023-8156-c537446b9171.png)'
- en: Viewing the commit history
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看提交历史
- en: 'You can check logs using the command line, switch to the Git repository and
    run the `git log` command, as shown here, to check the most recent commits. This
    command without any extra argument shows commits made in the repository in reverse
    order. The command output also contains information such as the SHA-1 checksum,
    the commit message, the date and time of the commit, and author details:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过命令行查看日志，切换到 Git 仓库并运行 `git log` 命令，如下所示，以查看最近的提交。此命令没有任何附加参数时，会按逆序显示仓库中的提交。命令输出还包含信息，如
    SHA-1 校验和、提交消息、提交的日期和时间，以及作者的详细信息：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can check Git commit messages with the timestamp and user details, as shown
    here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看带有时间戳和用户详细信息的 Git 提交消息，如下所示：
- en: '![](img/07b6d0f0-4fd0-476d-ba6d-45107a7fb47c.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07b6d0f0-4fd0-476d-ba6d-45107a7fb47c.png)'
- en: Adding a user to GitLab
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 GitLab 添加用户
- en: 'The steps to add a user are as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 添加用户的步骤如下：
- en: Log in to GitLab with admin user (root).
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用管理员用户（root）登录 GitLab。
- en: 'Click the spanner icon (top right) to enter Admin area:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击扳手图标（右上角）进入管理员区域：
- en: '![](img/e876e8bc-381f-4d24-be7e-991764ac3c9e.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e876e8bc-381f-4d24-be7e-991764ac3c9e.png)'
- en: 'You will see three buttons, New project, New user, and  New group. Click on
    New user:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到三个按钮：新项目、新用户和新组。点击“New user”：
- en: '![](img/3ef2aa1a-a16a-4e08-a67b-3372d640e0fe.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ef2aa1a-a16a-4e08-a67b-3372d640e0fe.png)'
- en: 'Fill in the required information – Name, Username, and Email:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写所需的信息——名称、用户名和电子邮件：
- en: '![](img/fd0ae5ea-f625-4c0f-b72c-cd678e28af51.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd0ae5ea-f625-4c0f-b72c-cd678e28af51.png)'
- en: 'Provide a project user limit as per your organization''s rules. Also, if you
    want a user to be able to create a group, give them access to creating a group
    by checking Can create group. If you want a user to have limited access, then
    select the Access level to be Regular, and if a user needs Admin privileges, then
    select the Access level to be Admin for the user:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您所在组织的规则提供项目用户限制。同时，如果您希望用户能够创建组，请勾选“Can create group”以授予其创建组的权限。如果您希望用户的访问权限有限，则选择“Access
    level”为Regular；如果用户需要管理员权限，则选择“Access level”为Admin：
- en: '![](img/4319775c-1803-42c1-9ceb-7db6c1f18db8.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4319775c-1803-42c1-9ceb-7db6c1f18db8.png)'
- en: After filling in all the required information, click on Create user. This will
    create the user and send a password reset link to the user's Email ID.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写完所有必填信息后，点击“Create user”。这将创建用户并将密码重置链接发送到该用户的电子邮件。
- en: Troubleshooting
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'Consider the following error:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下错误：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Solution
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'This issue can be due to the `LANG` and `LC_*` variables, which are unset in
    the Linux system. In the omnibus installation, we can set these variables using
    the following commands and run the installation command again or reconfigure GitLab:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题可能是由于 Linux 系统中未设置 `LANG` 和 `LC_*` 变量导致的。在 omnibus 安装中，我们可以使用以下命令设置这些变量，并重新运行安装命令或重新配置
    GitLab：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Branching strategy
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支策略
- en: Branching is a very useful feature provided by Git. It helps to develop multiple
    features in parallel. Branching can be useful to define environment specific codes
    such as develop, test, stage, and production. Usually, the environment to Git
    branch mapping will be, for example, the code for the development environment
    stored in the develop Git branch; for the test environment, we use the test Git
    branch, and so on. For the production environment, we use the master branch, as
    it is the first default branch created when we create any Git repository.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 分支是 Git 提供的一个非常有用的功能。它有助于并行开发多个功能。分支可以用于定义特定环境的代码，例如 develop、test、stage 和 production。通常，Git
    分支与环境的映射关系为：例如，将开发环境的代码存储在 develop Git 分支中；测试环境使用 test Git 分支，以此类推。对于生产环境，我们使用
    master 分支，因为它是创建任何 Git 仓库时默认创建的第一个分支。
- en: 'Let''s see how we can create a branch using the web UI:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用网页 UI 创建分支：
- en: Log in to GitLab.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 GitLab。
- en: 'Go to your repository, Sample*,* that we created in the *Creating your first
    project in GitLab* section:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到我们在“*创建你的第一个 GitLab 项目*”部分创建的仓库 Sample*，*：
- en: '![](img/3c844a81-0773-4d00-a0ef-f12190ac71ee.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c844a81-0773-4d00-a0ef-f12190ac71ee.png)'
- en: As you see in this screenshot, we have only one branch which is the master,
    and is the default branch.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您在此截图中所见，我们只有一个分支，即 master，它是默认分支。
- en: 'Click on Branch, you will be redirected to a page where you can see all the
    active branches for this repository. Currently, we have a master branch:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Branch”，您将被重定向到一个页面，您可以在该页面查看此仓库的所有活跃分支。目前，我们有一个 master 分支：
- en: '![](img/d47487d6-4589-463b-925b-568f041d5877.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d47487d6-4589-463b-925b-568f041d5877.png)'
- en: 'Click on New branch, type in the branch name,  `develop. `We will be using
    this branch for development:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新建分支，输入分支名称`develop`。我们将使用这个分支进行开发：
- en: '![](img/67f342b7-1ca6-43e8-8e9c-6484992a54b8.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67f342b7-1ca6-43e8-8e9c-6484992a54b8.png)'
- en: 'Click on Create branch. That''s it. You can see the new branch that''s been
    created from the master branch. You can now create another branch from the develop
    or master branch. As the develop branch is created from the master branch, all
    the code in the develop branch will be the same as in the master branch, for now:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建分支。就这样，你可以看到从主分支创建的新分支。现在你可以从开发分支或主分支创建另一个分支。由于开发分支是从主分支创建的，因此目前开发分支中的所有代码都与主分支相同：
- en: '![](img/6f05b46a-92f0-451b-bf4c-d9620a397cd4.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f05b46a-92f0-451b-bf4c-d9620a397cd4.png)'
- en: Now, if we go to Active Branches, we can see two branches in the list. There
    is a difference between those two branches. The master branch is the default branch
    and the **protected** branch, but the newly created develop branch is not a protected
    branch. The only users who are authorized to make modifications in a protected
    branch are mostly senior developers or project leads. Due to this, we can avoid
    the problem of multiple developers simultaneously working on different features.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们查看活动分支，我们可以在列表中看到两个分支。它们之间有所不同。主分支是默认分支和**受保护**分支，而新创建的开发分支不是受保护分支。只有被授权的用户才能在受保护的分支上进行修改，通常是高级开发人员或项目负责人。由于这个原因，我们可以避免多个开发人员同时在不同功能上进行工作的情况。
- en: Handling branches using the Git CLI
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Git CLI 处理分支
- en: 'After the Git clone, you will, by default, get code for the default branch
    set on your repository. In our case, it is the master branch. Let''s check which
    branch we have cloned using the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 克隆之后，默认情况下，你将获得仓库中设置的默认分支的代码。在我们的例子中，它是主分支。让我们通过以下命令检查我们克隆了哪个分支：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The asterisk in front of the branch name indicates a current branch.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 分支名称前的星号表示当前分支。
- en: 'Let''s create a **test** branch:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个**test**分支：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will create a new branch named `test`, on your local Git repository:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`test`的新分支，在你的本地 Git 仓库中：
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now you will see two branches in your local Git repository, the  `git branch
    <BRANCH_NAME>` command will create a branch from the current branch. So, the test
    branch is created from the master branch.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将在本地 Git 仓库中看到两个分支，`git branch <BRANCH_NAME>`命令将从当前分支创建一个新分支。因此，测试分支是从主分支创建的。
- en: 'Switch to the newly created the `test` branch and `push` it to the `remote`
    repository:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到新创建的`test`分支并将其`push`到`remote`仓库：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Verify if you can see the test branch in the GitLab web UI:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 验证是否能在 GitLab 网页 UI 中看到测试分支：
- en: '![](img/0bc49c78-a4de-4603-adcf-f574081d66d5.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bc49c78-a4de-4603-adcf-f574081d66d5.png)'
- en: Merging changes from develop to master
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将更改从开发分支合并到主分支
- en: 'Let''s see how to merge changes from the develop branch to the master branch:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下如何将更改从开发分支合并到主分支：
- en: 'You can specify which branch to clone from the Git repository:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以指定从 Git 仓库克隆哪个分支：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For testing, we will make a small change, such as changing the console log
    message from `Hello World` to `Hello Git`.  Add the changes to Git and push the
    changes to the remote develop branch:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试，我们将做一个小修改，比如将控制台日志消息从`Hello World`改为`Hello Git`。将更改添加到 Git 并将更改推送到远程开发分支：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you want to create a merge request, open the URL shown in `remote`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想创建合并请求，打开显示在`remote`的 URL。
- en: 'Assign it to the person who has the right to accept a merge request on the
    master branch:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其分配给有权接受主分支合并请求的人：
- en: '![](img/7afd5aae-3308-4fbf-b539-6f3ace6ef002.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7afd5aae-3308-4fbf-b539-6f3ace6ef002.png)'
- en: In our case, it is assigned to Administrator. Fill out the required information
    and click Submit Merge Request.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的例子中，分配给了管理员。填写所需的信息并点击提交合并请求。
- en: 'The Administrator user can see the merge request and, after verifying changes
    done by developers, if there are no merge conflicts and all previous checks are
    passed successfully, then the Administrator will accept the merge request by clicking
    on Merge. Changes in test will be moved to the master branch:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理员用户可以看到合并请求，经过开发人员验证更改后，如果没有合并冲突且所有之前的检查都成功通过，那么管理员将通过点击合并来接受合并请求。测试中的更改将被移动到主分支：
- en: '![](img/6d43bc9b-9d12-4cdd-b997-8cb2773a712b.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d43bc9b-9d12-4cdd-b997-8cb2773a712b.png)'
- en: 'The Administrator can modify the commit message, and remove the source branch
    if it is not required afterwards. If something goes wrong, the Administrator can
    revert the changes as well:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员可以修改提交信息，并在不需要时删除源分支。如果发生错误，管理员也可以还原更改：
- en: '![](img/613a13ec-68a0-434e-b9a2-279ff1ed43f6.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/613a13ec-68a0-434e-b9a2-279ff1ed43f6.png)'
- en: Using Git in the Eclipse IDE
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Eclipse IDE 中使用 Git
- en: 'Steps 1 to 3 are already explained in [Chapter 1](ba728059-d1a1-4d85-baf1-ac032fcc4b3c.xhtml),
    *Salesforce Development and Delivery Process*:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 1 至 3 已在[第一章](ba728059-d1a1-4d85-baf1-ac032fcc4b3c.xhtml)中解释，*Salesforce
    开发与交付流程*：
- en: Eclipse installation
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Eclipse 安装
- en: Install the Force.com IDE plugin
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Force.com IDE 插件
- en: Configure Force.com project in Eclipse
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Eclipse 中配置 Force.com 项目
- en: We will continue with the next steps in the following sections.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的部分继续进行下一步操作。
- en: Configuring Git and pushing code to Git
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Git 并推送代码到 Git
- en: Now we need to configure Git.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要配置 Git。
- en: 'Create the repository in a new folder by right-clicking on the folder and selecting  Git
    repository here...:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击文件夹并选择“在此创建 Git 仓库...”以在新文件夹中创建仓库：
- en: '![](img/0a3d3234-0f56-4354-aa5a-3e58f88565f2.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a3d3234-0f56-4354-aa5a-3e58f88565f2.png)'
- en: 'Here, we are not selecting the Make it Bare and click on OK:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们没有选择“Make it Bare”，点击确认：
- en: '![](img/bc9b2b70-393e-4fa8-90b1-3d0f2ab3d15d.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc9b2b70-393e-4fa8-90b1-3d0f2ab3d15d.png)'
- en: 'You will see the next screen. Click on OK:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到下一个屏幕。点击确认：
- en: '![](img/8d783631-0f56-43ec-bf46-4d67ca7a62c5.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d783631-0f56-43ec-bf46-4d67ca7a62c5.png)'
- en: 'Right-click on the folder and select TortoiseGit and click on Settings:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击文件夹，选择 TortoiseGit 并点击设置：
- en: '![](img/9cf475de-165d-470d-9a9e-3d014470ad02.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cf475de-165d-470d-9a9e-3d014470ad02.png)'
- en: 'You will see the next screen. Click on OK:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到下一个屏幕。点击确认：
- en: '![](img/1de26064-7707-47e2-8e6a-4cb9ff8decdf.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1de26064-7707-47e2-8e6a-4cb9ff8decdf.png)'
- en: 'Select the Git and enter the Name and Email:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Git 并输入名称和电子邮件：
- en: '![](img/b84aad3b-e9c7-4c8f-8f0d-c9c5e36b2915.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b84aad3b-e9c7-4c8f-8f0d-c9c5e36b2915.png)'
- en: 'You will see the next screen. Select the Git and click on Remote:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到下一个屏幕。选择 Git 并点击“远程”：
- en: '![](img/db226253-3903-4891-b9f7-9cd19dfebb2d.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db226253-3903-4891-b9f7-9cd19dfebb2d.png)'
- en: Open the Git project in the browser and select the project.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器中的 Git 项目并选择该项目。
- en: 'Copy the HTTP URL from the project:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目中复制 HTTP URL：
- en: '![](img/7e912ccd-8b5d-40c4-9f70-a253cddcc3a3.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e912ccd-8b5d-40c4-9f70-a253cddcc3a3.png)'
- en: 'Enter the copied URL in URL and Push URL. Select All in the Tags field and click
    on the Add New/Save button:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 URL 和 Push URL 中输入复制的 URL。选择标签字段中的全部，然后点击“添加新标签/保存”按钮：
- en: '![](img/316cad16-87ce-49c7-8fb6-99b38285e876.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/316cad16-87ce-49c7-8fb6-99b38285e876.png)'
- en: 'Click on the Yes button:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击是按钮：
- en: '![](img/f9e48ef1-2b57-4d52-89e4-5b8b7f91fb85.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9e48ef1-2b57-4d52-89e4-5b8b7f91fb85.png)'
- en: 'You will see this screen. Click on OK:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到此屏幕，点击确认：
- en: '![](img/619d8dfd-758e-4202-9ba0-a509eb285aa2.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/619d8dfd-758e-4202-9ba0-a509eb285aa2.png)'
- en: 'Enter the Git credentials in this screen:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此屏幕中输入 Git 凭证：
- en: '![](img/58aed3e3-cf49-46ab-8da0-adc3bdad5dca.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58aed3e3-cf49-46ab-8da0-adc3bdad5dca.png)'
- en: 'Click on OK:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确认：
- en: '![](img/3ab4161d-1b1b-4744-9261-8327b91b8321.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ab4161d-1b1b-4744-9261-8327b91b8321.png)'
- en: 'Once you have completed the process, click on the Close button:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成过程后，点击关闭按钮：
- en: '![](img/1affd969-3f5e-4b40-92a9-8c93bf4ac9ce.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1affd969-3f5e-4b40-92a9-8c93bf4ac9ce.png)'
- en: 'Finally, click on OK:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击确认：
- en: '![](img/8f9507bd-3742-4900-9a8b-7ed6ed540894.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f9507bd-3742-4900-9a8b-7ed6ed540894.png)'
- en: 'Now you have to pull the files from the Git repository, the steps are as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要从 Git 仓库拉取文件，步骤如下：
- en: 'Right-click on the same file and select TortoiseGit and click on Pull...:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击相同的文件并选择 TortoiseGit，点击拉取...：
- en: '![](img/de86ea7a-9ff3-4510-9aec-d166d4c19eb7.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de86ea7a-9ff3-4510-9aec-d166d4c19eb7.png)'
- en: 'You will get one popup, as shown. Select ... to select Remote Branch:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到一个弹出窗口，如图所示。选择“...”以选择远程分支：
- en: '![](img/67726e25-8b96-4476-8e15-9dde9ef413d7.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67726e25-8b96-4476-8e15-9dde9ef413d7.png)'
- en: 'Here you can see all the list of remote branches, select the specific branch
    and click on OK:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，你可以看到所有远程分支的列表，选择特定的分支并点击确认：
- en: '![](img/8fb207b9-3b5f-484d-8893-56ce4791fea5.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8fb207b9-3b5f-484d-8893-56ce4791fea5.png)'
- en: 'Once the process is complete, click on Close:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，点击关闭：
- en: '![](img/90c8d6c8-5027-418d-92be-60c4d0407234.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90c8d6c8-5027-418d-92be-60c4d0407234.png)'
- en: Now the connection has been created and all the files copied to the local folder
    from the Git repository.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，连接已经创建，所有文件已从 Git 仓库复制到本地文件夹。
- en: 'Add your files into this folder:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的文件添加到此文件夹：
- en: '![](img/4a9386f9-be4b-4129-aca2-40ea9f0dc712.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a9386f9-be4b-4129-aca2-40ea9f0dc712.png)'
- en: 'Right-click on the same folder and select the TortoiseGit and click on Add...:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击相同的文件夹，选择 TortoiseGit 并点击 Add...：
- en: '![](img/92357740-772d-4da5-a46c-1597eb5733e0.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92357740-772d-4da5-a46c-1597eb5733e0.png)'
- en: 'Select all the files and click on OK:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有文件并点击 OK：
- en: '![](img/86b87bf2-1377-463a-891c-28cdbed3079c.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86b87bf2-1377-463a-891c-28cdbed3079c.png)'
- en: 'Once the process is complete, click on Commit...:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦过程完成，点击 Commit...：
- en: '![](img/dc533217-4134-475d-8968-a8ad01220038.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc533217-4134-475d-8968-a8ad01220038.png)'
- en: 'Now add the commit message and click on Commit & Push:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加提交信息并点击 Commit & Push：
- en: '![](img/defa7325-e9c0-4dc0-8790-b6702cd639f2.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/defa7325-e9c0-4dc0-8790-b6702cd639f2.png)'
- en: 'To see all the remote branches, select the ... button:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看所有远程分支，点击 ... 按钮：
- en: '![](img/ac360500-b055-4ff3-ab9f-8fecbc4b94dc.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac360500-b055-4ff3-ab9f-8fecbc4b94dc.png)'
- en: 'Here you see all the branches, select the specific branch:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里你可以看到所有的分支，选择特定的分支：
- en: '![](img/d8ef0a17-c015-445e-b0f6-a97a3b2aee28.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8ef0a17-c015-445e-b0f6-a97a3b2aee28.png)'
- en: 'Now click on OK:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击 OK：
- en: '![](img/d4387f5c-a17c-4de1-829b-23399b14104b.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4387f5c-a17c-4de1-829b-23399b14104b.png)'
- en: 'Once the process is complete, click on Close:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦过程完成，点击 Close：
- en: '![](img/535b8f67-e3fa-486a-bef7-fdf6922f0237.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/535b8f67-e3fa-486a-bef7-fdf6922f0237.png)'
- en: 'Now all the files are moved to the Git repository. Check on the Git repository:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在所有文件都已移动到 Git 仓库。检查 Git 仓库：
- en: '![](img/f9e20018-aa5b-45fb-b57c-a914f1657f31.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9e20018-aa5b-45fb-b57c-a914f1657f31.png)'
- en: 'Check all the files have been committed correctly:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查所有文件是否已正确提交：
- en: '![](img/aed8b7ec-707c-44ee-a012-fcf6a2980bee.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aed8b7ec-707c-44ee-a012-fcf6a2980bee.png)'
- en: All code is successfully committed in the Git repository.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码已成功提交到 Git 仓库。
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about version control systems. We have seen what
    version control we have in Salesforce and why we need a version control system
    such as Git. We learned how to install GitLab on on-premise servers using the
    most recommended method by GitLab itself—the omnibus setup. After setting up our
    own GitLab server, we learned how to create our first project in GitLab using
    a web UI. We worked with the Git repository using Git commands, such as `git clone`, 
    `add`, `commit`, `push`, and so on.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，我们学习了版本控制系统。我们了解了 Salesforce 中的版本控制以及为什么我们需要像 Git 这样的版本控制系统。我们学习了如何使用
    GitLab 官方推荐的方式——全套安装方法，在本地服务器上安装 GitLab。设置好自己的 GitLab 服务器后，我们学会了如何通过 Web UI 在
    GitLab 中创建我们的第一个项目。我们使用 Git 命令（如 `git clone`、`add`、`commit`、`push` 等）操作 Git 仓库。
- en: We discussed the branching strategy in Git and general scenarios where we need
    to work with different branches. We have learned about concepts such as protected
    branch, and default branch. We also got to know how we can create a new branch
    from an existing branch, and merge code from one branch to another branch. Finally,
    we learned  how to use Git for our Salesforce project with Eclipse.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了 Git 中的分支策略以及在一般场景中如何处理不同的分支。我们了解了受保护分支和默认分支等概念，还知道了如何从现有分支创建新分支，并将代码从一个分支合并到另一个分支。最后，我们学会了如何在
    Eclipse 中使用 Git 进行 Salesforce 项目的开发。
- en: In the next chapter, we will go to our next stage, which is Continuous Integration
    using a Jenkins server. We will learn how Jenkins helps us to automate our daily
    tasks, such as retrieving and deploying metadata using the Force.com migration
    tool and Git.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节中，我们将进入下一阶段，即使用 Jenkins 服务器进行持续集成。我们将学习 Jenkins 如何帮助我们自动化日常任务，例如使用 Force.com
    迁移工具和 Git 检索和部署元数据。
