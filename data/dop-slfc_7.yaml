- en: Continuous Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续测试
- en: In the previous chapter, we learned about setting our own Jenkins server and
    using Jenkins for continuous integration, how to configure Jenkins for retrieving
    metadata from Salesforce sandbox, and pushing code to Git's version control. We
    also performed steps to deploy metadata to UAT sandbox, using Jenkins and the
    Ant migration tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何设置自己的 Jenkins 服务器并使用 Jenkins 进行持续集成，如何配置 Jenkins 从 Salesforce 沙盒中检索元数据，以及如何将代码推送到
    Git 版本控制系统。我们还进行了将元数据部署到 UAT 沙盒的步骤，使用 Jenkins 和 Ant 迁移工具。
- en: In this chapter, we will learn about code quality using PMD. We will discuss
    continuous testing and executing Apex tests in a deployment using Jenkins. We
    will get to know Selenium, and how to set up Selenium using Firefox. We will also
    go through record and playback for the Salesforce sample application. We will
    discuss using the Qualitia scriptless automation tool with Jenkins, where we get
    test reports in HTML format.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将学习使用 PMD 进行代码质量分析。我们将讨论在使用 Jenkins 进行部署时的持续测试和执行 Apex 测试。我们还将了解 Selenium，并学习如何使用
    Firefox 设置 Selenium。我们还将介绍 Salesforce 示例应用程序的录制和回放。我们将讨论如何在 Jenkins 中使用 Qualitia
    无脚本自动化工具，在其中我们可以获得 HTML 格式的测试报告。
- en: What is code quality?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是代码质量？
- en: '**Code quality** is identify based on some parameters such as best practices standards and
    rule sets. When code quality is increased, then user acceptance testing issues
    and production issues are reduced and productivity is increased. Using this PMD
    report, produced by an open source static source code analyzer that reports on
    issues found in the code, we can allocate extra time for reviewing code, and this
    increases product quality, along with best practice standards and effective governance.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码质量**是基于一些参数识别的，例如最佳实践标准和规则集。当代码质量提高时，用户接受度测试问题和生产问题减少，生产力提高。通过使用由开源静态源代码分析器生成的
    PMD 报告，我们可以分配更多时间来审查代码，从而提高产品质量，同时遵循最佳实践标准和有效的治理。'
- en: Checking code quality using a PMD report
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PMD 报告检查代码质量
- en: There are two methods for performing the analysis. We will discuss them in the
    next sections.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 执行分析有两种方法。我们将在接下来的章节中讨论它们。
- en: PMD static analysis for Salesforce Apex using a Visual Studio (VS) Code extension
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Visual Studio (VS) Code 扩展进行 Salesforce Apex 的 PMD 静态分析
- en: Here, we will learn to analyze directly in VS Code on Apex and Visual force
    files. First, you have to install Visual Studio Code on your machine. (We already
    learned how to install VS Code in [Chapter 3](40971566-9729-40d5-b267-f03be16b7245.xhtml),
    *Deployment in Salesforce*).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将学习如何直接在 VS Code 上分析 Apex 和 Visual force 文件。首先，你需要在你的机器上安装 Visual Studio
    Code。（我们已经在[第三章](40971566-9729-40d5-b267-f03be16b7245.xhtml)中学习了如何安装 VS Code，*Salesforce
    部署*）。
- en: 'You need to perform the following steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要执行以下步骤：
- en: 'Open Visual Studio Code and click on Extensions (*Ctrl* + *Shift* + *X*):'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio Code 并点击扩展 (*Ctrl* + *Shift* + *X*)：
- en: '![](img/0aae797b-f30f-43bf-b5ba-aa636b6fbf91.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0aae797b-f30f-43bf-b5ba-aa636b6fbf91.png)'
- en: 'In Search extension in Market Place, enter `pmd`:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在市场扩展中的搜索框输入 `pmd`：
- en: '![](img/65d5bdd2-fb92-4e29-b3a4-35fff956acb5.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65d5bdd2-fb92-4e29-b3a4-35fff956acb5.png)'
- en: 'Select Apex PMD and click Install:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Apex PMD 并点击安装：
- en: '![](img/89feb1da-a24b-4364-bf45-114ef6ebd1ec.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89feb1da-a24b-4364-bf45-114ef6ebd1ec.png)'
- en: 'Once installation is complete, click Reload and this will restart your VS Code:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，点击重新加载，这将重启你的 VS Code：
- en: '![](img/ec7c7e3f-9c1b-4297-83fa-72386e16105c.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec7c7e3f-9c1b-4297-83fa-72386e16105c.png)'
- en: 'Open the file about which you want to analyze the PMD report:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想分析的文件，以查看 PMD 报告：
- en: '![](img/0e53bcd6-c815-4790-b8f8-9bdb99420311.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e53bcd6-c815-4790-b8f8-9bdb99420311.png)'
- en: 'Now, open the command panel by right-clicking and selecting **All Commands**,
    or press *Ctrl* + *Shift* + *P*. Enter Apex `stat` in the command panel:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过右键单击并选择**所有命令**，或者按 *Ctrl* + *Shift* + *P* 打开命令面板。在命令面板中输入 Apex `stat`：
- en: '![](img/06c7ea59-1611-4b4a-86a1-10e4428aeab6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06c7ea59-1611-4b4a-86a1-10e4428aeab6.png)'
- en: 'Now, click on Apex Static Analysis: On File. It shows you all the analytical
    results in PROBLEMS.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 Apex 静态分析：在文件上。它将在 PROBLEMS 中显示所有分析结果。
- en: 'Resolve all the problems and run Apex Static Analysis: On File again.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决所有问题后，再次运行 Apex 静态分析：在文件上。
- en: PMD static analysis for Salesforce Apex using the command line
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行进行 Salesforce Apex 的 PMD 静态分析
- en: 'Here, we can run a PMD analysis on all files by using a single command. The
    steps are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以通过单个命令对所有文件执行 PMD 分析。步骤如下：
- en: 'First, download the PMD JAR file from [https://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/](https://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/),
    and then take a look at this screenshot:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从[https://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/](https://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/)下载
    PMD JAR 文件，然后查看此截图：
- en: '![](img/2f4eab99-47f9-4f76-aaf3-1df60626c3d5.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f4eab99-47f9-4f76-aaf3-1df60626c3d5.png)'
- en: Extract the JAR file, go inside the bin file, and copy the path of that folder.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压 JAR 文件，进入 bin 文件夹，复制该文件夹的路径。
- en: Now, open **Run** by pressing Windows + *R* and enter the command to open the
    command-line panel.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按下 Windows + *R* 打开 **运行**，然后输入命令以打开命令行面板。
- en: 'Go to your bin path by entering the path of that folder. If you are on another
    drive, then first go to that drive and enter the copied path:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入你的 bin 路径，方法是输入该文件夹的路径。如果你在另一个驱动器上，首先进入该驱动器并输入复制的路径：
- en: '![](img/65ad7548-c5b1-4654-aea3-0bc3cd776ffb.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65ad7548-c5b1-4654-aea3-0bc3cd776ffb.png)'
- en: 'Now, create your command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建你的命令：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, execute this command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，执行此命令：
- en: '![](img/4292b919-a9a3-4263-8cf4-72c7f3f5a8e0.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4292b919-a9a3-4263-8cf4-72c7f3f5a8e0.png)'
- en: 'You will get an exported CSV file:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将获得一个导出的 CSV 文件：
- en: '![](img/bf33fe75-d40e-4dd1-8dec-eaa14fb9beba.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf33fe75-d40e-4dd1-8dec-eaa14fb9beba.png)'
- en: Now, open that CSV file and correct your code based on the error types.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开那个 CSV 文件，并根据错误类型修改你的代码。
- en: 'In the CSV file, we get following columns:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSV 文件中，我们获取以下列：
- en: '**Problem**: This is just a serial number of the problems'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题**：这是问题的序列号'
- en: '**Package**: In this column, we get the package name of that file'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包**：在此列中，我们获取该文件的包名称'
- en: '**File**: In this column, we get the exact file path of that file'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件**：在此列中，我们获取该文件的准确文件路径'
- en: '**Priority**: There are different types of priorities, from 1 to 3, and they
    are added to this column'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级**：有不同类型的优先级，从 1 到 3，它们被添加到此列中'
- en: '**Line**: In this column, we get the exact line number of the problem'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行**：在此列中，我们获取问题的准确行号'
- en: '**Description**: In this column, we get a single-line description of the problem'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：在此列中，我们获取问题的单行描述'
- en: '**Rule set**: In this column, we get the rule set''s name'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则集**：在此列中，我们获取规则集的名称'
- en: '**Rule**: In this column, we get the rule''s name'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则**：在此列中，我们获取规则的名称'
- en: 'There are different types of rules and rule sets. Here are some examples of
    rules and rule sets:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 规则和规则集有不同的类型。以下是一些规则和规则集的示例：
- en: 'Best practices:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践：
- en: '`ApexUnitTestClassShouldHaveAsserts`'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApexUnitTestClassShouldHaveAsserts`'
- en: '`AvoidGlobalModifier`'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvoidGlobalModifier`'
- en: '`AvoidLogicInTrigger`'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvoidLogicInTrigger`'
- en: 'Code style:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码风格：
- en: '`ClassNamingConventions`'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClassNamingConventions`'
- en: '`ForLoopsMustUseBraces`'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ForLoopsMustUseBraces`'
- en: '`IfElseStmtsMustUseBraces`'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IfElseStmtsMustUseBraces`'
- en: '`IfStmtsMustUseBraces`'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IfStmtsMustUseBraces`'
- en: '`MethodNamingConventions`'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MethodNamingConventions`'
- en: '`VariableNamingConventions`'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VariableNamingConventions`'
- en: 'Design:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计：
- en: '`AvoidDeeplyNestedIfStmts`'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvoidDeeplyNestedIfStmts`'
- en: '`CyclomaticComplexity`'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CyclomaticComplexity`'
- en: '`ExcessiveClassLength`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExcessiveClassLength`'
- en: '`ExcessiveParameterList`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExcessiveParameterList`'
- en: '`ExcessivePublicCount`'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExcessivePublicCount`'
- en: '`NcssMethodCount`'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NcssMethodCount`'
- en: '`StdCyclomaticComplexity`'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StdCyclomaticComplexity`'
- en: '`TooManyFields`'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TooManyFields`'
- en: 'Errors prone:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易出错：
- en: '`AvoidHardcodingId`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvoidHardcodingId`'
- en: '`EmptyCatchBlock`'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmptyCatchBlock`'
- en: '`EmptyStatementBlock`'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmptyStatementBlock`'
- en: 'Performance:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能：
- en: '`AvoidSoqlInLoops`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvoidSoqlInLoops`'
- en: 'Security:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全：
- en: '`ApexCRUDViolation`'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApexCRUDViolation`'
- en: '`ApexSharingViolations`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApexSharingViolations`'
- en: '`ApexSOQLInjection`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApexSOQLInjection`'
- en: '`ApexXSSFromURLParam`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApexXSSFromURLParam`'
- en: Executing Apex tests in a deployment using Jenkins
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 在部署中执行 Apex 测试
- en: In Salesforce code, coverage of Apex components should be more than 75% to deploy
    changes to production. If any test case fails during deployment, then deployment
    to production will also fail. To avoid this, it is recommended that you test your
    deployment in sandbox first before deploying it to production. Sometimes, individual
    code coverage of Apex components may be less than 75%, but overall code coverage
    for your organization should be 75% or more. To ensure test cases don't fail in
    production, you can execute a subset of test cases in sandbox after it's deployed.
    We have already seen deploying changes from one sandbox to another in the previous
    chapter. We just need to make small changes in `build.xml` to specify the subset
    of tests to execute while deploying.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Salesforce代码中，Apex组件的覆盖率应该超过75%，才能将变更部署到生产环境。如果在部署过程中任何测试用例失败，则部署到生产环境也会失败。为了避免这种情况，建议先在沙盒环境中测试部署，再将其部署到生产环境。有时，Apex组件的单个代码覆盖率可能低于75%，但组织的整体代码覆盖率应该为75%或更高。为了确保在生产环境中测试用例不失败，可以在沙盒环境中执行一部分测试用例。我们已经在上一章中看到从一个沙盒部署变更到另一个沙盒。我们只需要在`build.xml`中做少量更改，以指定在部署时要执行的测试子集。
- en: 'Here is a sample `build.xml` with test cases to execute:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个带有要执行的测试用例的`build.xml`示例：
- en: '[PRE1]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To run specific tests, the value of the `testLevel` parameter should be set
    to `RunSpecifiedTests`. A child element, `</runTest>`, is used to specify the
    test classes to run.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行特定的测试，应该将`testLevel`参数的值设置为`RunSpecifiedTests`。一个子元素`</runTest>`用于指定要运行的测试类。
- en: 'To run all test cases from `sf:deploy` tasks with the `runAllTests="true"`
    attribute, `package.xml` should be empty, as shown here:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`sf:deploy`任务中运行所有测试用例，并且带有`runAllTests="true"`属性，`package.xml`应该为空，如下所示：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is a sample `build.xml` used to run all test cases:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例`build.xml`，用于运行所有测试用例：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The  role of Jenkins in deployment will be the same; developers just need to
    change the parameters in the `build.xml` and the `package.xml` configuration files.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins在部署中的角色将保持不变；开发人员只需要更改`build.xml`和`package.xml`配置文件中的参数。
- en: What is continuous testing?
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是持续测试？
- en: '**Continuous testing** is the process of executing test cases after new changes
    are deployed to the environment. In continuous testing, we evaluate deployments
    at every stage so that any bugs introduced in the existing code are reported earlier
    in the software development cycle. Software changes are continuously moved from
    the development to the test environment, and the testing team needs to test all
    the existing functionalities, along with new functionalities. Manual testing takes
    a longer time to complete, and feedback from the testing team is required to make
    further decisions about application delivery. Continuous testing helps us to get
    immediate feedback and makes the testing cycle easier. Having continuous testing
    in place reduces the business risk involved in releasing software with bugs:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续测试**是指在新变化部署到环境后执行测试用例的过程。在持续测试中，我们在每个阶段评估部署，以便在软件开发周期的早期发现现有代码中引入的任何漏洞。软件变更持续从开发环境移至测试环境，测试团队需要测试所有现有功能以及新功能。手动测试需要更长时间完成，并且需要测试团队的反馈来做出进一步的应用交付决策。持续测试帮助我们获得即时反馈，并使测试周期变得更容易。实施持续测试可以减少由于发布包含缺陷的软件而带来的业务风险：'
- en: '![](img/534af3ff-1a56-4f75-8bae-b8ed592a31e6.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/534af3ff-1a56-4f75-8bae-b8ed592a31e6.png)'
- en: Continuous testing is dein the preceding diagram. Whenever any new feature is
    developed by the development team, developers push code in a source code versioning
    system such as Git, so that the changes are tracked. Once a feature is ready in
    the development environment, it is moved to a continuous integration server such
    as Jenkins. Jenkins will build the source code, and once the build is deployed
    to the test environment, we will configure the Jenkins job to execute the test
    cases. For continuous testing, we can use tools to write and execute automation
    test cases, such as Selenium, Katalon Studio, Qualitia, and so on. In this chapter,
    we will only focus on the Selenium testing framework.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 持续测试在前面的图示中已经定义。每当开发团队开发出任何新功能时，开发人员将代码推送到源代码版本管理系统（如Git），以便跟踪变更。一旦开发环境中的功能准备就绪，它将被移至持续集成服务器，如Jenkins。Jenkins将构建源代码，一旦构建部署到测试环境，我们将配置Jenkins作业来执行测试用例。对于持续测试，我们可以使用工具编写并执行自动化测试用例，例如Selenium、Katalon
    Studio、Qualitia等。在本章中，我们将只关注Selenium测试框架。
- en: Introducing Selenium
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入Selenium
- en: Selenium is an open source tool used for automating tests we run on a web application.
    Selenium is a web-based application. We can automate the testing using Selenium.
    Selenium supports many browsers, including Chrome, Firefox, and Safari. You don't
    need scripting or development knowledge to get started with Selenium, a person
    with administration experience can also start setting up Selenium. Using a record/playback
    tool in Selenium, we can perform tests without knowledge of the scripting language.
    Selenium supports multiple platforms, including Windows, Linux, and Mac. We are
    going to look at the steps to set up Selenium on Mac.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium是一个开源工具，用于自动化我们在Web应用程序上运行的测试。Selenium是一个基于Web的应用程序。我们可以使用Selenium来自动化测试。Selenium支持多种浏览器，包括Chrome、Firefox和Safari。你不需要脚本或开发知识就可以开始使用Selenium，具有管理经验的人也可以开始设置Selenium。使用Selenium的录制/回放工具，我们可以在没有脚本语言知识的情况下进行测试。Selenium支持多个平台，包括Windows、Linux和Mac。我们将查看在Mac上设置Selenium的步骤。
- en: Setting up Selenium using Firefox
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Firefox设置Selenium
- en: We will set up Selenium with Firefox on macOS. The installation steps for Firefox
    might differ, depending on your operating system. We will be using Mac in this
    example.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在macOS上设置Selenium与Firefox。Firefox的安装步骤可能会有所不同，具体取决于你的操作系统。在本例中，我们使用的是Mac。
- en: 'Here are some prerequisites for installing Firefox on Mac:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Mac上安装Firefox的一些先决条件：
- en: 'Operating systems: macOS 10.9, 10.10, 10.11, 10.12, and 10.13'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统：macOS 10.9、10.10、10.11、10.12和10.13
- en: 'Recommended hardware: Macintosh computer with an Intel x86 processor'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐硬件：配备Intel x86处理器的Macintosh电脑
- en: 512 MB of RAM
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 512 MB内存
- en: 200 MB hard drive space
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 200 MB硬盘空间
- en: 'The installation steps are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 安装步骤如下：
- en: Visit [https://www.mozilla.org/firefox/new/?utm_medium=referralandutm_source=support.mozilla.org](https://www.mozilla.org/firefox/new/?utm_medium=referral&utm_source=support.mozilla.org).
    It will automatically detect the platform you are using and provide a download
    link in the browser.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://www.mozilla.org/firefox/new/?utm_medium=referral&utm_source=support.mozilla.org](https://www.mozilla.org/firefox/new/?utm_medium=referral&utm_source=support.mozilla.org)。它将自动检测你所使用的平台，并在浏览器中提供下载链接。
- en: Click the download button; it will start downloading Firefox.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下载按钮，它将开始下载Firefox。
- en: Once the download is complete, open the `Firefox.dmg` file.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，打开`Firefox.dmg`文件。
- en: 'Drag and drop Firefox into the applications folder:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Firefox拖放到应用程序文件夹中：
- en: '![](img/81e3a441-ed8c-4577-9151-38d48a2ec14a.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81e3a441-ed8c-4577-9151-38d48a2ec14a.png)'
- en: 'It will start copying the `Firefox.dmg` file to **Applications**:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 它将开始将`Firefox.dmg`文件复制到**应用程序**文件夹中：
- en: '![](img/253530b4-b67e-4fca-83eb-34e28e9ce8c1.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/253530b4-b67e-4fca-83eb-34e28e9ce8c1.png)'
- en: Open Firefox from Applications. You will see a warning that Firefox is being
    installed from the internet. Click on Open.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序中打开Firefox。你将看到一个警告，提示Firefox正从互联网安装。点击“打开”。
- en: We have Firefox installed on our system. We can skip email verification in Firefox.
    Open [https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/)
    in Firefox.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的系统中已经安装了Firefox。我们可以跳过Firefox中的邮箱验证。请在Firefox中打开[https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/)。
- en: 'Go to the Selenium IDE section and click on the For Firefox link. It will redirect
    you to the Add Selenium IDE extension page:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Selenium IDE部分并点击“For Firefox”链接。它会将你重定向到添加Selenium IDE扩展页面：
- en: '![](img/395b0c46-84a3-401b-a11b-709245d0c0ca.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/395b0c46-84a3-401b-a11b-709245d0c0ca.png)'
- en: 'Click on Add to Firefox:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加到Firefox”：
- en: '![](img/85f699b3-cd82-4e06-bcd9-02c934e55f75.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85f699b3-cd82-4e06-bcd9-02c934e55f75.png)'
- en: 'This extension require some permissions to work. Click on Add:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该扩展需要一些权限才能正常工作。点击“添加”：
- en: '![](img/c5447505-f2f9-41bb-a4aa-28ef85bf26a5.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5447505-f2f9-41bb-a4aa-28ef85bf26a5.png)'
- en: 'Once the **Selenium IDE** plugin is added, you will see the popup:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦添加了**Selenium IDE**插件，你将看到弹出窗口：
- en: '![](img/0408b34a-1d46-4653-beaf-23f7b81fbe02.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0408b34a-1d46-4653-beaf-23f7b81fbe02.png)'
- en: 'Once the Selenium IDE plugin is installed in Firefox, you can launch it by
    clicking on the Selenium IDE icon in the top-right corner:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Selenium IDE插件在Firefox中安装完成，你可以通过点击右上角的Selenium IDE图标来启动它：
- en: '![](img/0ba2a7df-b23c-4e90-9168-1df869d69563.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ba2a7df-b23c-4e90-9168-1df869d69563.png)'
- en: Recording tests using Selenium
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Selenium录制测试
- en: 'The steps to record tests are as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 录制测试的步骤如下：
- en: 'Once Selenium is launched, you will see the following window. Provide the base
    URL as [https://login.salesforce.com](https://login.salesforce.com/) and click
    on Start Recording:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦启动Selenium，你将看到以下窗口。提供基础URL：[https://login.salesforce.com](https://login.salesforce.com/)，然后点击“开始录制”：
- en: '![](img/105a400d-abdf-4edd-bd81-ba991d712475.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/105a400d-abdf-4edd-bd81-ba991d712475.png)'
- en: 'Every action you perform in Firefox will be tracked by Selenium. Open [https://login.salesforce.com](https://login.salesforce.com/),
    provide a username and password to log in, and click on Login:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您在 Firefox 中执行的每一个操作都将被 Selenium 跟踪。打开 [https://login.salesforce.com](https://login.salesforce.com/)，提供用户名和密码进行登录，然后点击登录：
- en: '![](img/95a5f065-7561-40e2-a6f5-9a6eb90d905c.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95a5f065-7561-40e2-a6f5-9a6eb90d905c.png)'
- en: 'Once logged in, you can click on any item or perform any action. You will see
    a notification about commands being recorded by Selenium:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦登录，您可以点击任何项目或执行任何操作。您将看到一个通知，表示 Selenium 正在录制命令：
- en: '![](img/dc290cbf-167f-457a-9acf-3545b19f3339.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc290cbf-167f-457a-9acf-3545b19f3339.png)'
- en: 'After performing the task, click on Logout. You can see the steps being recorded
    by Selenium in this screenshot:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行任务后，点击注销。您可以在此屏幕截图中看到 Selenium 录制的步骤：
- en: '![](img/7ac1376b-6745-4af3-b100-1d9a6af6fec3.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ac1376b-6745-4af3-b100-1d9a6af6fec3.png)'
- en: 'You can see the commands stored in the Selenium IDE:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在 Selenium IDE 中看到已存储的命令：
- en: '![](img/0250600a-a729-4c8d-baad-77659344e0f0.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0250600a-a729-4c8d-baad-77659344e0f0.png)'
- en: 'Go to the Selenium IDE window, and you will see the data collected by Selenium.
    Click on Stop Recording:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Selenium IDE 窗口，您将看到 Selenium 收集的数据。点击停止录制：
- en: '![](img/554a664f-7ae6-4a92-828d-0695dd753806.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/554a664f-7ae6-4a92-828d-0695dd753806.png)'
- en: 'Save the recording under any name, for example, `Sample`. You can keep the
    names specific to the tests you performed as a meaningful naming convention:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将录制保存为任意名称，例如 `Sample`。您可以将名称指定为您执行的测试，以便遵循有意义的命名约定：
- en: '![](img/ac702fd0-dc45-4f2e-8d41-e18bc97f1465.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac702fd0-dc45-4f2e-8d41-e18bc97f1465.png)'
- en: Playing back the recorded tests using Selenium
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Selenium 回放录制的测试
- en: 'A record step is completed by Selenium. Now, we can use the same file to re-run
    the steps. This process is called **playback**:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium 完成了一条记录步骤。现在，我们可以使用相同的文件重新运行这些步骤。这个过程叫做**回放**：
- en: Open Selenium IDE from the Firefox browser.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Firefox 浏览器打开 Selenium IDE。
- en: 'Click on **Open Project**:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**打开项目**：
- en: '![](img/c1d089ae-86d5-4763-b18f-9830fb35a72d.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1d089ae-86d5-4763-b18f-9830fb35a72d.png)'
- en: 'Browse to the file we stored in the record step as `Sample.side`. Open this
    file and click on **Run** **Current Test**:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到我们在录制步骤中存储的文件 `Sample.side`。打开该文件并点击**运行** **当前测试**：
- en: '![](img/5d902684-7b35-4117-9e60-6e87febc6da2.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d902684-7b35-4117-9e60-6e87febc6da2.png)'
- en: Selenium will open Salesforce UEL and perform steps from the sample test case.
    Log in to Salesforce and log out after performing the test case.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Selenium 会打开 Salesforce UEL，并执行示例测试用例中的步骤。登录 Salesforce 后，执行完测试用例再注销。
- en: 'Check the logs in Selenium''s **Log** console:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 Selenium 的**日志**控制台中的日志：
- en: '![](img/74cc487c-7ef1-4468-94a9-e660c5c0ab68.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74cc487c-7ef1-4468-94a9-e660c5c0ab68.png)'
- en: 'Click on **Stop Test execution** if you want to stop execution:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果要停止执行，请点击**停止测试执行**：
- en: '![](img/b7200150-33a7-4765-b4e3-022bb5040741.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7200150-33a7-4765-b4e3-022bb5040741.png)'
- en: We can write test cases in any language and execute test cases after deploying
    to Salesforce sandbox. Selenium can be used to automate tests. Whenever we deploy
    code from the development sandbox to the UAT sandbox or from sandbox, to production,
    we can execute test cases with Selenium to cover each and every scenario and make
    sure the application is bug-free. Manually testing all functionality can take
    a long time, and we end up having longer testing cycles. Releasing changes to
    production frequently involves a lot of testing and feedback loops to ensure the
    quality of the application.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用任何语言编写测试用例，并在部署到 Salesforce 沙盒后执行测试用例。Selenium 可以用于自动化测试。每当我们将代码从开发沙盒部署到
    UAT 沙盒，或从沙盒部署到生产环境时，我们可以使用 Selenium 执行测试用例，覆盖每一个场景，确保应用程序没有 bug。手动测试所有功能可能需要很长时间，最终会导致测试周期延长。频繁将更改发布到生产环境通常需要大量的测试和反馈循环，以确保应用程序的质量。
- en: We can create a Jenkins job for the execution of test cases with Selenium on
    the deployment sandbox. If the sandbox is not a full-copy sandbox, then we might
    need to add some test data, change email IDs of users, and so on. For such tasks,
    we can use Selenium to automate and speed up the process of software testing and
    delivery.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为在部署沙盒上使用 Selenium 执行测试用例创建一个 Jenkins 作业。如果沙盒不是完全复制沙盒，那么我们可能需要添加一些测试数据、修改用户的电子邮件
    ID 等。对于这样的任务，我们可以使用 Selenium 来自动化并加速软件测试和交付的过程。
- en: Introducing Qualitia
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 Qualitia
- en: '**Qualitia** is a scriptless testing tool. Qualitia is a functional test automation
    platform that provides us with a way to automate testing without scripting. Qualitia
    integrates with Jenkins as well. Qualitia is based on Selenium, in that it doesn''t
    require you to write any scripts. After executing test cases in sandbox, Qualitia
    presents the results for the test cases in HTML format so that they are readable
    by the end user. We can host these HTML files on a file server and developers
    and testers will be able to access them using web browser.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**Qualitia** 是一个无脚本测试工具。Qualitia 是一个功能测试自动化平台，提供了一种无需编写脚本即可自动化测试的方法。Qualitia
    也与 Jenkins 集成。Qualitia 基于 Selenium，不要求你编写任何脚本。执行 sandbox 中的测试用例后，Qualitia 会以 HTML
    格式呈现测试用例的结果，以便最终用户可以阅读。我们可以将这些 HTML 文件托管在文件服务器上，开发人员和测试人员可以使用 Web 浏览器访问它们。'
- en: Qualitia provides integration with Jenkins. We can execute automated test cases
    after deploying to the UAT sandbox. Also, we will be able to schedule our automated
    tests once per day in our pre-production or staging sandbox.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Qualitia 提供与 Jenkins 的集成。我们可以在部署到 UAT sandbox 后执行自动化测试用例。此外，我们还可以在我们的预生产或暂存
    sandbox 中每天定时执行自动化测试。
- en: Running test cases with Qualitia
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Qualitia 运行测试用例
- en: To run test cases with Qualitia, we need to integrate it with Jenkins. Qualitia's
    job will be executed on the Windows server, so if we don't have Jenkins on the
    Windows server, then we can add the Windows client to the Jenkins server and run
    Qualitia test cases on it. We need the Qualitia JAR and path to the XML test cases
    and Chrome's driver in order to execute tests. Qualitia will run a test case sandbox
    and generate reports in HTML.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Qualitia 运行测试用例，我们需要将其与 Jenkins 集成。Qualitia 的任务将在 Windows 服务器上执行，如果我们的 Windows
    服务器上没有 Jenkins，我们可以将 Windows 客户端添加到 Jenkins 服务器，并在其上运行 Qualitia 测试用例。我们需要 Qualitia
    JAR 文件、XML 测试用例的路径和 Chrome 驱动程序，以便执行测试。Qualitia 将运行一个测试用例 sandbox，并生成 HTML 格式的报告。
- en: Use case – continuous testing using Qualitia
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例 – 使用 Qualitia 进行持续测试
- en: 'The following diagram shows the integration of open source tools with Salesforce
    sandbox and provides versioning, scriptless testing, and automated deployments
    using GitLab, the Force.com Migration tool, Jenkins, and Qualitia:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了开源工具与 Salesforce sandbox 的集成，并使用 GitLab、Force.com Migration 工具、Jenkins
    和 Qualitia 提供版本控制、无脚本测试和自动化部署：
- en: '![](img/aad46350-1373-406c-85c1-5a913953d185.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aad46350-1373-406c-85c1-5a913953d185.png)'
- en: In the previous scenario, developers work with Eclipse and the Force.com IDE.
    sandbox will be in sync with the Eclipse workspace. After the changes are complete,
    the developer will push changes to Git and mention the components to be deployed
    in the `package.xml`  file. This Git push will trigger the Jenkins job, which
    will execute the Ant deployment script and deploy changes from the developer's
    sandbox to the test sandbox. If our deployment is successful, then it will trigger
    another job to run Qualitia tests, creating a report in HTML format.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的场景中，开发人员使用 Eclipse 和 Force.com IDE。sandbox 将与 Eclipse 工作空间保持同步。更改完成后，开发人员将把更改推送到
    Git，并在 `package.xml` 文件中提及要部署的组件。此 Git 推送将触发 Jenkins 任务，执行 Ant 部署脚本，并将开发人员的 sandbox
    更改部署到测试 sandbox。如果部署成功，将触发另一个任务运行 Qualitia 测试，并生成 HTML 格式的报告。
- en: 'Here is a list of the tools used:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是所使用工具的列表：
- en: '**Git**: For tracking Salesforce changes in Git'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**：用于跟踪 Salesforce 更改的 Git'
- en: '**Force.com Migration tool**: For Salesforce deployments'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Force.com Migration 工具**：用于 Salesforce 部署'
- en: '**Jenkins**: To automate deployments to the pre-UAT environment, with Jenkins
    and an Ant script'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins**：用于自动化部署到预 UAT 环境，通过 Jenkins 和 Ant 脚本'
- en: '**Qualitia**: Scriptless testing tool'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qualitia**：无脚本测试工具'
- en: 'Note: We can use Selenium for automation testing instead of Qualitia.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我们可以使用 Selenium 进行自动化测试，代替 Qualitia。
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about code quality and continuous testing. We discussed
    the tools used in automation testing, such as Selenium and Qualitia. We learned
    the step-by-step process for setting up Selenium with Firefox. We performed a
    test case on a sample Salesforce application, using record and playback in Selenium.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了代码质量和持续测试。我们讨论了自动化测试中使用的工具，如 Selenium 和 Qualitia。我们学习了如何一步一步地设置 Selenium
    与 Firefox 的集成。我们在一个示例 Salesforce 应用中执行了一个测试用例，使用 Selenium 的录制和回放功能。
- en: We discussed use cases for the Qualitia scriptless automation tool, used to
    perform tests on the Salesforce application and store the results of automation
    tests in HTML format. We demonstrated a use case of using a diagram with Git for
    version control Jenkins as a continuous integration server, and Qualitia for executing
    automation tests on a Salesforce application. We can replace Qualitia with Selenium
    if we wish to.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了Qualitia无脚本自动化工具的使用案例，该工具用于对Salesforce应用程序进行测试，并以HTML格式存储自动化测试的结果。我们演示了一个使用图表与Git进行版本控制、Jenkins作为持续集成服务器，以及使用Qualitia执行Salesforce应用程序自动化测试的使用案例。如果需要，我们可以将Qualitia替换为Selenium。
