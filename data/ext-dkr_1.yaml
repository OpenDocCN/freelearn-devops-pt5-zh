- en: Chapter 1. Introduction to Extending Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：扩展Docker简介
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Why Docker has been so widely accepted by the entire industry
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么Docker会被整个行业广泛接受
- en: What does a typical container's life cycle look like?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个典型的容器生命周期是什么样的？
- en: What plugins and third-party tools will be covered in the upcoming chapters?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的章节将涵盖哪些插件和第三方工具？
- en: What will you need for the remainder of the chapters?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来章节你需要什么？
- en: The rise of Docker
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker的崛起
- en: Not very often does a technology come along that is adopted so widely across
    an entire industry. Since its first public release in March 2013, Docker has not
    only gained the support of both end users, like you and I, but also industry leaders
    such as Amazon, Microsoft, and Google.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有技术能够在整个行业中如此广泛地被采纳。自2013年3月首次公开发布以来，Docker不仅赢得了像你我这样的最终用户的支持，还得到了Amazon、Microsoft和Google等行业领袖的支持。
- en: 'Docker is currently using the following sentence on their website to describe
    why you would want to use it:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Docker目前在其网站上使用以下句子来描述为什么你会想要使用它：
- en: '*"Docker provides an integrated technology suite that enables development and
    IT operations teams to build, ship, and run distributed applications anywhere."*'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Docker提供了一套集成技术套件，使开发和IT运维团队能够在任何地方构建、交付和运行分布式应用程序。"*'
- en: 'There is a meme, based on the disaster girl photo, which sums up why such a
    seemingly simple explanation is actually quite important:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个基于灾难女孩照片的网络迷因，总结了为什么这样一个看似简单的解释实际上非常重要：
- en: '![The rise of Docker](img/B05468_Ch01_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Docker的崛起](img/B05468_Ch01_01.jpg)'
- en: 'So as simple as Docker''s description sounds, it''s actually a been utopia
    for most developers and IT operations teams for a number of years to have tool
    that can ensure that an application can consistently work across the following
    three main stages of an application''s life cycle:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Docker的描述听起来简单，但实际上，对于大多数开发人员和IT运维团队来说，它一直是一个理想的工具，可以确保一个应用程序在以下三个主要阶段的生命周期中始终如一地运行：
- en: Development
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发
- en: Staging and Preproduction
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预发布和预生产
- en: Production
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生产
- en: To illustrate why this used to be a problem before Docker arrived at the scene,
    let's look at how the services were traditionally configured and deployed. People
    tended to typically use a mixture of dedicated machines and virtual machines.
    So let's look at these in more detail.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明在Docker出现之前为什么这是一个问题，让我们看看这些服务传统上是如何配置和部署的。人们通常倾向于使用专用机器和虚拟机器的组合。让我们更详细地看一下这些。
- en: While this is possible using configuration management tools, such as Puppet,
    or orchestration tools, such as Ansible, to maintain consistency between server
    environments, it is difficult to enforce these across both servers and a developer's
    workstation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以使用配置管理工具，如Puppet，或者像Ansible这样的编排工具来保持服务器环境之间的一致性，但在服务器和开发者的工作站之间强制执行这些一致性仍然是困难的。
- en: Dedicated machines
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专用机器
- en: Traditionally, these are a single piece of hardware that have been configured
    to run your application, while the applications have direct access to the hardware,
    you are constrained by the binaries and libraries you can install on a dedicated
    machine, as they have to be shared across the entire machine.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，这些是单个硬件设备，经过配置以运行你的应用程序。虽然这些应用程序可以直接访问硬件，但你受限于可以安装在专用机器上的二进制文件和库，因为它们必须在整个机器上共享。
- en: To illustrate one potential problem Docker has fixed, let's say you had a single
    dedicated server that was running your PHP application. When you initially deployed
    the dedicated machine, all three of the applications, which make up your e-commerce
    website, worked with PHP 5.6, so there was no problem with compatibility.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明Docker解决的一个潜在问题，假设你有一台单独的专用服务器运行你的PHP应用程序。当你最初部署这台专用机器时，构成你电子商务网站的三个应用程序都使用PHP
    5.6，因此在兼容性方面没有问题。
- en: Your development team has been slowly working through the three PHP applications.
    You have deployed it on your host to make them work with PHP 7, as this will give
    them a good boost in performance. However, there is a single bug that they have
    not been able to resolve with App2, which means that it will not run under PHP
    7 without crashing when a user adds an item to their shopping cart.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你的开发团队一直在缓慢地处理这三个PHP应用程序。你已经将它部署到主机上，以便让它们与PHP 7兼容，因为这将大大提升它们的性能。然而，他们始终无法解决App2中的一个错误，这意味着在用户将物品添加到购物车时，应用程序将无法在PHP
    7下运行，并会崩溃。
- en: 'If you have a single host running your three applications, you will not be
    able to upgrade from PHP 5.6 to PHP 7 until your development team has resolved
    the bug with App2, unless you do one of the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只有一个主机运行三款应用程序，直到开发团队解决 App2 的错误，你将无法从 PHP 5.6 升级到 PHP 7，除非你做以下其中一项：
- en: Deploy a new host running PHP 7 and migrate App1 and App3 to it; this could
    be both time consuming and expensive
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署一个运行 PHP 7 的新主机，并将 App1 和 App3 迁移到该主机上；这可能既费时又昂贵
- en: Deploy a new host running PHP 5.6 and migrate App2 to it; again this could be
    both time consuming and expensive
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署一个运行 PHP 5.6 的新主机，并将 App2 迁移到该主机上；同样，这也可能既费时又昂贵。
- en: Wait until the bug has been fixed; the performance improvements that the upgrade
    from PHP 5.6 to PHP 7 bring to the application could increase the sales and there
    is no ETA for the fix
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待直到错误被修复；从 PHP 5.6 升级到 PHP 7 所带来的性能提升可能会增加销售额，但目前没有修复的预计时间。
- en: If you go for the first two options, you also need to ensure that the new dedicated
    machine either matches the developer's PHP 7 environment or that a new dedicated
    machine is configured in exactly the same way as your existing environment; after
    all, you don't want to introduce further problems by having a poorly configured
    machine.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择前两个选项，你还需要确保新专用主机要么与开发者的 PHP 7 环境匹配，要么按完全相同的方式配置新专用主机；毕竟，你不希望因为机器配置不当而引入更多问题。
- en: Virtual machines
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟机
- en: 'One solution to the scenario detailed earlier would be to slice up your dedicated
    machine''s resources and make them available to the application by installing
    a hypervisor such as the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 解决前面提到的情况的一种方法是，通过安装一个如以下的虚拟化管理程序，将专用主机的资源切割并提供给应用程序：
- en: '**KVM**: [http://www.linux-kvm.org/](http://www.linux-kvm.org/)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KVM**: [http://www.linux-kvm.org/](http://www.linux-kvm.org/)'
- en: '**XenSource**: [http://www.xenproject.org/](http://www.xenproject.org/)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XenSource**: [http://www.xenproject.org/](http://www.xenproject.org/)'
- en: '**VMware vSphere**: [http://www.vmware.com/uk/products/vsphere-hypervisor/](http://www.vmware.com/uk/products/vsphere-hypervisor/)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware vSphere**: [http://www.vmware.com/uk/products/vsphere-hypervisor/](http://www.vmware.com/uk/products/vsphere-hypervisor/)'
- en: Once installed, you can then install your binaries and libraries on each of
    the different virtual hosts and also install your applications on each one.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，你就可以在每个不同的虚拟主机上安装你的二进制文件和库，并在每个虚拟主机上安装你的应用程序。
- en: Going back to the scenario given in the dedicated machine section, you will
    be able to upgrade to PHP 7 on the virtual machines with App1 and App2 installed,
    while leaving App2 untouched and functional while the development work on the
    fix.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 回到专用主机部分提到的场景，你将能够在安装了 App1 和 App2 的虚拟机上升级到 PHP 7，同时在修复开发工作进行时保持 App2 不变且可正常工作。
- en: 'Great, so what is the catch? From the developer''s view, there is none as they
    have their applications running with the PHP versions, which work best for them;
    however, from an IT operations point of view:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，那么问题在哪？从开发者的角度来看，根本没有问题，因为他们的应用程序可以在适合他们的 PHP 版本下运行；然而，从 IT 运维的角度来看：
- en: '**More CPU, RAM, and disk space**: Each of the virtual machines will require
    additional resources as the overhead of running three guest OS, as well as the
    three applications have to be taken into account'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更多的 CPU、RAM 和磁盘空间**：每个虚拟机都将需要额外的资源，因为运行三个来宾操作系统以及三款应用程序的开销需要考虑。'
- en: '**More management**: IT operations now need to patch, monitor, and maintain
    four machines, the dedicated host machine along with three virtual machines, where
    as before they only had a single dedicated host.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更多的管理**：现在，IT 运维需要修补、监控并维护四台机器，包括专用主机和三台虚拟机，而之前他们只需要维护一台专用主机。'
- en: As earlier, you also need to ensure that the configuration of the three virtual
    machines that are hosting your applications match the configuration that the developers
    have been using during the development process; again, you do not want to introduce
    additional problems due to configuration and process drift between departments.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你还需要确保托管应用程序的三个虚拟机的配置与开发人员在开发过程中使用的配置一致；同样，你不希望因为部门之间的配置和流程偏差而引入额外问题。
- en: Dedicated versus virtual machines
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专用主机与虚拟机
- en: 'The following diagram shows the how a typical dedicated and virtual machine
    host would be configured:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了典型的专用主机与虚拟机主机配置方式：
- en: '![Dedicated versus virtual machines](img/B05468_Ch01_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![专用主机与虚拟机](img/B05468_Ch01_02.jpg)'
- en: As you can see, the biggest differences between the two are quite clear. You
    are making a trade-off between resource utilization and being able to run your
    applications using different binaries/libraries.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，二者之间的最大区别非常明显。你正在进行资源利用与能够使用不同二进制文件/库运行应用之间的权衡。
- en: Containers
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: Now we have covered the way in which our applications have been traditionally
    deployed. Let's look at what Docker adds to the mix.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了传统应用部署的方式。接下来，让我们看看 Docker 为这个过程带来了什么。
- en: Back to our scenario of the three applications running on a single host machine.
    Installing Docker on the host and then deploying each of the applications as a
    container on this host gives you the benefits of the virtual machine, while vastly
    reducing the footprint, that is, removing the need for the hypervisor and guest
    operating system completely, and replacing them with a SlimLine interface directly
    into the host machines kernel.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的场景，三款应用运行在同一台主机上。你可以在主机上安装 Docker，然后将每个应用部署为容器，这样既能享受虚拟机的好处，又大大减少了占用空间，也就是完全去除了虚拟机管理程序和客户操作系统，取而代之的是一个直接与主机内核对接的精简界面。
- en: 'The advantages this gives both the IT operations and development teams are
    as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这为 IT 运维和开发团队带来的优势如下：
- en: '**Low overhead**: As mentioned already, the resource and management for the
    IT operations team is lower'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低开销**：如前所述，IT 运维团队的资源和管理负担较低'
- en: '**Development provide the containers**: Rather than relying on the IT operations
    team to configure each of the three applications environments to machine the development
    environment, they can simply pass their containers to be put into production'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发团队提供容器**：与其依赖 IT 运维团队为每个应用配置三个不同的环境，将它们与开发环境对接，不如直接将容器交给运维团队进行生产部署。'
- en: 'As you can see from the following diagram, the layers between the application
    and host operating system have been reduced:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从下面的图示可以看到，应用与主机操作系统之间的层次已被简化：
- en: '![Containers](img/B05468_Ch01_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![容器](img/B05468_Ch01_03.jpg)'
- en: All of this means that the need to use the disaster girl meme at the beginning
    of this chapter should be now redundant as the development team are shipping the
    application to the operations in a container with all the configuration, binaries,
    and libraries intact, which means that if it works in development, it will work
    in production.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些意味着，开篇提到的“灾难女孩”表情包应该不再适用了，因为开发团队已经将应用与所有配置、二进制文件和库一起打包成容器交给运维团队，这意味着如果在开发环境中能正常运行，那么在生产环境中也能运行。
- en: This may seem too good to be true, and to be honest, there is a "but". For most
    web applications or applications that are pre-compiled static binaries, you shouldn't
    have a problem.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能太好了，甚至让人怀疑，老实说，确实有一个“但是”。对于大多数 web 应用或已经预编译的静态二进制文件应用，你应该不会遇到问题。
- en: However, as Docker shares resources with the underlying host machine, such as
    the Kernel version, if your application needs to be compiled or have a reliance
    on certain libraries that are only compatible with the shared resources, then
    you will have to deploy your containers on a like-for-like operating system, and
    in some cases, hardware.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于 Docker 与底层主机共享资源，如内核版本，如果你的应用需要编译或依赖某些仅与共享资源兼容的库，那么你必须在相同的操作系统上部署容器，在某些情况下，甚至需要相同的硬件。
- en: Docker has tried to address this issue with the acquisition of a company called
    Unikernel Systems in January 2016\. At the time of writing this book, not a lot
    is known about how Docker is planning to integrate this technology into their
    core product, if at all. You can find out more about this technology at [https://blog.docker.com/2016/01/unikernel/](https://blog.docker.com/2016/01/unikernel/).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 通过收购一家名为 Unikernel Systems 的公司，试图解决这个问题，收购发生在 2016 年 1 月。到写本书时，关于 Docker
    如何将这一技术整合到其核心产品中的细节还不多。如果你想了解更多关于这一技术的信息，可以访问 [https://blog.docker.com/2016/01/unikernel/](https://blog.docker.com/2016/01/unikernel/)。
- en: Everyone should be using Docker?
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每个人都应该使用 Docker 吗？
- en: So, is it really that simple, should everyone stop using virtual machines and
    use containers instead?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，真的这么简单吗？每个人应该停止使用虚拟机，改用容器吗？
- en: 'In July 2014, Wes Felter, Alexandre Ferreira, Ram Rajamony, and Juan Rubio
    published an IBM research report titled An Updated Performance Comparison of Virtual
    Machines and Linux Containers and concluded:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 2014 年 7 月，Wes Felter、Alexandre Ferreira、Ram Rajamony 和 Juan Rubio 发表了一篇名为《虚拟机与
    Linux 容器的性能更新比较》的 IBM 研究报告，并得出结论：
- en: '*"Both VMs and containers are mature technology that have benefited from a
    decade of incremental hardware and software optimizations. In general, Docker
    equals or exceeds KVM performance in every case we tested. Our results show that
    both KVM and Docker introduce negligible overhead for CPU and memory performance
    (except in extreme cases). For I/O intensive workloads, both forms of virtualization
    should be used carefully."*'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“虚拟机和容器都是成熟的技术，受益于十年的硬件和软件渐进式优化。通常，Docker 在我们测试的所有案例中都等同于或超越了 KVM 性能。我们的结果显示，KVM
    和 Docker 都对 CPU 和内存性能引入了微不足道的开销（除了极端情况下）。对于 I/O 密集型工作负载，这两种虚拟化方式都应该谨慎使用。”*'
- en: 'It then goes on to say the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，它提到以下内容：
- en: '"Although containers themselves have almost no overhead, Docker is not without
    performance gotchas. Docker volumes have noticeably better performance than files
    stored in AUFS. Docker''s NAT also introduces overhead for workloads with high
    packet rates. These features represent a tradeoff between ease of management and
    performance and should be considered on a case-by-case basis."'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “虽然容器本身几乎没有开销，但 Docker 并非没有性能陷阱。Docker 卷比存储在 AUFS 中的文件有明显更好的性能。Docker 的 NAT
    也会为高数据包率的工作负载引入开销。这些特性代表了管理简便性与性能之间的权衡，应根据具体情况进行考虑。”
- en: 'The full 12-page report, which is an interesting comparison to the traditional
    technologies we have discussed and containers, can be downloaded from the following
    URL:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这份完整的 12 页报告，详细对比了我们讨论过的传统技术与容器，可以从以下网址下载：
- en: '[http://domino.research.ibm.com/library/cyberdig.nsf/papers/0929052195DD819C85257D2300681E7B/$File/rc25482.pdf](http://domino.research.ibm.com/library/cyberdig.nsf/papers/0929052195DD819C85257D2300681E7B/$File/rc25482.pdf)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://domino.research.ibm.com/library/cyberdig.nsf/papers/0929052195DD819C85257D2300681E7B/$File/rc25482.pdf](http://domino.research.ibm.com/library/cyberdig.nsf/papers/0929052195DD819C85257D2300681E7B/$File/rc25482.pdf)'
- en: Less than a year after the IBM research report was published, Docker introduced
    plugins for its ecosystem. One of the best descriptions I came across was from
    a Docker software engineer, Jessica Frazelle, who described the release as having
    batteries included, but replaceable, meaning that the core functionality can be
    easily replaced with third-party tools that can then be used to address the conclusions
    of the IBM research report.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IBM 研究报告发布不到一年后，Docker 为其生态系统引入了插件。我看到的其中一个最佳描述来自 Docker 软件工程师 Jessica Frazelle，她形容这个发布就像是“包含电池，但可以替换”，意味着核心功能可以轻松地被第三方工具替代，这些工具可以用来解决
    IBM 研究报告中的结论。
- en: At the time of writing this book, Docker currently supports volume and network
    driver plugins. Additional plugin types to expose more of the Docker core to third
    parties will be added in the future.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Docker 目前支持卷和网络驱动插件。未来将会增加更多插件类型，以将更多 Docker 核心功能暴露给第三方。
- en: Life cycle of a container
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器的生命周期
- en: Before we look at the various plugins and ways to extend Docker, we should look
    at what a typical life cycle of a container looks like.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看各种插件和扩展 Docker 的方式之前，应该先了解容器的典型生命周期。
- en: Using the example from the previous section, let's launch the official PHP 5.6
    container and then replace it with the official PHP 7.0 one.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前一节中的示例，让我们启动官方的 PHP 5.6 容器，然后将其替换为官方的 PHP 7.0 容器。
- en: Installing Docker
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: Before we can launch our containers, we need to get Docker up and running; luckily,
    this is a simple process.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们启动容器之前，需要先让 Docker 正常运行；幸运的是，这个过程很简单。
- en: In the following chapter, we will be getting into bootstrapping our Docker environments
    using Docker Machine; however, for now, let's perform a quick installation of
    Docker on a cloud server.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用 Docker Machine 来引导我们的 Docker 环境；但是现在，让我们先在云服务器上快速安装 Docker。
- en: 'The following instructions will work on Ubuntu 14.04 LTS or CentOS 7 instances
    hosted on any of the public clouds, such as the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指令适用于托管在公共云上的 Ubuntu 14.04 LTS 或 CentOS 7 实例，示例如下：
- en: '**Digital Ocean**: [https://www.digitalocean.com/](https://www.digitalocean.com/)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Digital Ocean**: [https://www.digitalocean.com/](https://www.digitalocean.com/)'
- en: '**Amazon Web Services**: [https://aws.amazon.com/](https://aws.amazon.com/)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊云服务**: [https://aws.amazon.com/](https://aws.amazon.com/)'
- en: '**Microsoft Azure**: [https://azure.microsoft.com/](https://azure.microsoft.com/)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微软 Azure**: [https://azure.microsoft.com/](https://azure.microsoft.com/)'
- en: '**VMware vCloud Air**: [http://vcloud.vmware.com/](http://vcloud.vmware.com/)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware vCloud Air**: [http://vcloud.vmware.com/](http://vcloud.vmware.com/)'
- en: You can also try a local virtual machine running locally using the follow
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以尝试在本地运行一个虚拟机，使用以下方法：
- en: '**Vagrant**: [https://www.vagrantup.com/](https://www.vagrantup.com/)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vagrant**: [https://www.vagrantup.com/](https://www.vagrantup.com/)'
- en: '**Virtualbox**: [https://www.virtualbox.org/](https://www.virtualbox.org/)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Virtualbox**: [https://www.virtualbox.org/](https://www.virtualbox.org/)'
- en: '**VMware Fusion**: [http://www.vmware.com/uk/products/fusion/](http://www.vmware.com/uk/products/fusion/)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware Fusion**: [http://www.vmware.com/uk/products/fusion/](http://www.vmware.com/uk/products/fusion/)'
- en: '**VMware Workstation**: [http://www.vmware.com/uk/products/workstation/](http://www.vmware.com/uk/products/workstation/)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware Workstation**: [http://www.vmware.com/uk/products/workstation/](http://www.vmware.com/uk/products/workstation/)'
- en: I am going to be using a CentOS 7 server hosted in Digital Ocean as it is convenient
    to quickly launch a machine and then terminate it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用托管在 Digital Ocean 上的 CentOS 7 服务器，因为它方便快捷，可以快速启动并随时终止。
- en: 'Once you have your server up and running, you can install Docker from the official
    Yum or APT repositories by running the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的服务器启动并运行，你可以通过运行以下命令从官方 Yum 或 APT 仓库安装 Docker：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If, like me, you are running a CentOS 7 server, you will need to ensure that
    the service is running. To do this, type the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样运行的是 CentOS 7 服务器，你需要确保该服务正在运行。为此，请输入以下命令：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once installed, you should be able to check whether everything worked as expected
    by running the Docker `hello-world` container by entering the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你应该能够通过运行 Docker `hello-world` 容器来检查一切是否按预期工作，输入以下命令：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once you have Docker installed and confirmed that it runs as expected, you
    can download the latest builds of the official PHP 5.6 and PHP 7.0 images by running
    the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了 Docker，并确认它按预期运行，你可以通过运行以下命令来下载官方 PHP 5.6 和 PHP 7.0 镜像的最新版本：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For more information on the official PHP images, refer to the Docker Hub page
    at [https://hub.docker.com/_/php/](https://hub.docker.com/_/php/).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有关官方 PHP 镜像的更多信息，请参阅 Docker Hub 页面：[https://hub.docker.com/_/php/](https://hub.docker.com/_/php/)。
- en: 'Now that we have the images downloaded, it''s time to deploy our application
    as we are keeping it really simple; all we going to be deploying is a `phpinfo
    page`, this will confirm the version of PHP we are running along with details
    on the rest of the containers environment:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经下载了镜像，是时候部署我们的应用程序了，因为我们保持得非常简单；我们将要部署的仅仅是一个 `phpinfo` 页面，这将确认我们正在运行的
    PHP 版本，以及容器环境的其他详细信息：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now the index.php file is in place. Let''s start the PHP 5.6 container by running
    the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，index.php 文件已经到位。让我们通过运行以下命令来启动 PHP 5.6 容器：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will have launch an `app1` container. If you enter the IP address of your
    server instance or a domain which resolves to, you should see a page that shows
    that you are running PHP 5.6:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个 `app1` 容器。如果你输入你的服务器实例的 IP 地址或解析到该地址的域名，你应该看到一个页面，显示你正在运行 PHP 5.6：
- en: '![Installing Docker](img/B05468_Ch01_04.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Docker](img/B05468_Ch01_04.jpg)'
- en: Now that you have PHP 5.6 up and running, let's upgrade it to PHP 7\. Traditionally,
    this would mean installing a new set of packages using either third-party YUM
    or APT repositories; speaking from experience, this process can be a little hit
    and miss, depending on the compatibility with the packages for the previous versions
    of PHP that you have installed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经成功运行了 PHP 5.6，让我们将其升级到 PHP 7。传统上，这意味着使用第三方 YUM 或 APT 仓库安装一组新的软件包；根据经验，这个过程可能有点不稳定，取决于你安装的
    PHP 先前版本的软件包的兼容性。
- en: 'Luckily in our case, we are using Docker, so all we have to do is terminate
    our PHP 5.6 container and replace with one running PHP 7\. At any time during
    this process, you can check the containers that are running using the following
    command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在我们的案例中，我们正在使用 Docker，所以我们所需要做的就是终止 PHP 5.6 容器，并替换为运行 PHP 7 的容器。在这个过程中，任何时候你都可以使用以下命令检查正在运行的容器：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will print a list of the running containers to the screen (as seen in
    the screenshot at the end of this section). To stop and remove the PHP 5.6 container,
    run the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出正在运行的容器列表（如本节末尾截图所示）。要停止并移除 PHP 5.6 容器，请运行以下命令：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once the container has terminated, run the following command to launch a PHP
    7 container:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器终止，运行以下命令来启动 PHP 7 容器：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you return to the `phpinfo` page in your browser, you will see that it is
    now running PHP 7:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你返回浏览器中的 `phpinfo` 页面，你将看到现在它正在运行 PHP 7：
- en: '![Installing Docker](img/B05468_Ch01_05.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Docker](img/B05468_Ch01_05.jpg)'
- en: 'To terminate the PHP 7 container, run the `docker rm` command again:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要终止 PHP 7 容器，请再次运行 `docker rm` 命令：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A full copy of the preceding terminal session can be found in the following
    screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 前面终端会话的完整副本可以在以下截图中找到：
- en: '![Installing Docker](img/B05468_Ch01_06.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Docker](img/B05468_Ch01_06.jpg)'
- en: This example probably shows the biggest advantage of Docker, being able to quickly
    and consistently launch containers on top of code bases that are stored on your
    local storage. There are, however, some limits.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可能展示了 Docker 的最大优势，那就是能够在存储在本地存储上的代码库之上，快速而一致地启动容器。不过，还是存在一些限制。
- en: What are the limits?
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有什么限制？
- en: So, in the previous example, we launched two containers, each running different
    versions of PHP on top of our (extremely simple) codebase. While it demonstrated
    how simple it is to launch containers, it also exposed some potential problems
    and single points of failure.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在前面的例子中，我们启动了两个容器，每个容器运行不同版本的 PHP，并在我们的（极其简单的）代码库上运行。虽然它演示了启动容器有多简单，但也暴露了一些潜在问题和单点故障。
- en: To start with, our codebase is stored on the host machines filesystem, which
    means that we can only run the container on our single-host machine. What if it
    goes down for any reason?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们的代码库存储在主机机器的文件系统中，这意味着我们只能在单台主机上运行容器。如果主机因任何原因宕机怎么办？
- en: 'There are a few ways we could get around this with a vanilla Docker installation.
    The first is use the official PHP container as a base to build our own custom
    image so that we can ship our code along with PHP. To do this, add `Dockerfile`
    to the `app1` directory that contains the following content:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯 Docker 安装中，有几种方法可以解决这个问题。第一种方法是使用官方 PHP 容器作为基础，构建我们自己的自定义镜像，这样我们就可以将代码和 PHP
    一起打包。为此，请在包含以下内容的 `app1` 目录中添加 `Dockerfile`：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can also build our custom image using the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下命令来构建自定义镜像：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you run the build command, you will see the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行构建命令时，您将看到以下输出：
- en: '![What are the limits?](img/B05468_Ch01_07.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![有什么限制？](img/B05468_Ch01_07.jpg)'
- en: Once you have your image built, you could push it as a private image to the
    Docker Hub or your own self-hosted private registry; another option is to export
    the custom image as a `.tar` file and then copy it to each of the instances that
    need to run your custom PHP container.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建好镜像，您可以将其作为私有镜像推送到 Docker Hub 或您自己的自托管私有注册中心；另一种选择是将自定义镜像导出为 `.tar` 文件，然后将其复制到每个需要运行您自定义
    PHP 容器的实例中。
- en: 'To do this, you will run the Docker save command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您需要运行 Docker save 命令：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will make a copy of our custom image, as you can see from the following
    terminal output, the image should be around a `482M` tar file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建我们自定义镜像的副本，从以下终端输出中可以看到，镜像大小应约为 `482M` 的 tar 文件：
- en: '![What are the limits?](img/B05468_Ch01_08.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![有什么限制？](img/B05468_Ch01_08.jpg)'
- en: 'Now that we have a copy of the image as a tar file, we can copy it to our other
    host machines. Once you have copied the tar file, you will need to run the Docker
    load command to import it onto our second host:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将镜像作为 tar 文件保存，我们可以将其复制到其他主机。一旦复制了 tar 文件，您需要运行 Docker load 命令将其导入到第二台主机上：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then we can launch a container that has our code baked in by running the following
    command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以通过运行以下命令启动一个包含我们代码的容器：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following terminal output gives you an idea of what you should see when
    importing and running our custom container:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下终端输出展示了在导入并运行我们自定义容器时应该看到的内容：
- en: '![What are the limits?](img/B05468_Ch01_09.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![有什么限制？](img/B05468_Ch01_09.jpg)'
- en: So far so good? Well, yes and no.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，进展如何？好吧，有是有，不是也不是。
- en: 'It''s great that we can add our codebase to a custom image out of the box,
    then ship the image via either of the following ways:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将代码库轻松地添加到自定义镜像中，然后通过以下方式之一将镜像发布：
- en: The official Docker Hub
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方 Docker Hub
- en: Our own private registry
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们自己的私有注册中心
- en: Exporting the image as a tar file and copying it across our other hosts
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将镜像导出为 tar 文件并复制到其他主机
- en: However, what about containers that are processing data that is changing all
    the time, such as a database? What are our options for a database?
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于那些处理不断变化的数据的容器，比如数据库，情况如何呢？我们的数据库选项是什么？
- en: Consider that we are running the official MySQL container from [https://hub.docker.com/_/mysql/](https://hub.docker.com/_/mysql/),
    we could mount the folder where our databases are stored (that is, `/var/lib/mysql/`)
    from the host machine, but that could cause us permissions issues with the files
    once they are mounted within the container.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们运行的是来自 [https://hub.docker.com/_/mysql/](https://hub.docker.com/_/mysql/)
    的官方 MySQL 容器，我们可以将数据库存储目录（即 `/var/lib/mysql/`）从主机挂载，但这可能会导致挂载后容器中文件的权限问题。
- en: To get around this, we could create a data volume that contains a copy of our
    `/var/lib/mysql/` directory, this means that we are keeping our databases separate
    from our container so that we can stop, start, and even replace the MySQL container
    without destroying our data.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，我们可以创建一个数据卷，包含我们 `/var/lib/mysql/` 目录的副本，这意味着我们将数据库与容器分离，这样我们就可以停止、启动，甚至替换
    MySQL 容器，而不会丢失数据。
- en: This approach, however, binds us to running our MySQL container on a single
    host, which is a big single point of failure.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法使我们只能将 MySQL 容器运行在单台主机上，这会成为一个大的单点故障。
- en: If we have the resources available, we could make sure that the host where we
    are hosting our MySQL container has multiple redundancies, such as a number of
    hard drives in RAID configuration that allows us to weather more than one drive
    failure. We can have multiple **power supply units** (**PSU**) being fed by different
    power feeds, so if we have any problems with the power from one of our feeds,
    the host machine stays online.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果资源允许，我们可以确保承载 MySQL 容器的主机具有多重冗余，例如多个硬盘的 RAID 配置，能够承受多个硬盘故障。我们可以使用多个**电源供应单元**（**PSU**），由不同的电源线路供电，这样即使某一电源线路出现问题，主机仍能保持在线。
- en: We can also have the same with the networking on the host machine, NICs plugged
    into different switches being fed by different power feeds and network providers.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 主机上的网络也可以做到同样的方式，网络接口卡（NIC）连接到不同的交换机，并由不同的电源线路和网络提供商供电。
- en: While this does leave us with a lot of redundancy, we are still left with a
    single host machine, which is now getting quite expensive as all of this redundancy
    with multiple drives, networking, and power feeds are additional costs on top
    of what we are already paying for our host machine.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种做法为我们提供了很多冗余，但我们仍然只有一台主机，而这台主机的成本也变得非常高，因为所有这些冗余——包括多个硬盘、网络和电源线路——都会增加我们原本已经支付的主机费用。
- en: So, what's the solution?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，解决方案是什么呢？
- en: This is where extending Docker comes in, while Docker, out of the box, does
    not support the moving of volumes between host servers, we can plug in a filesystem
    extension that allows us to migrate volumes between hosts or mount a volume from
    a shared filesystem, such as NFS.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Docker 扩展的作用，尽管 Docker 默认不支持在主机服务器之间移动卷，但我们可以插入一个文件系统扩展，使我们能够在主机之间迁移卷，或从共享文件系统（例如
    NFS）挂载卷。
- en: If we have this in place for our MySQL container, should there be a problem
    with the host machine, there will be no problem for us as the data volume can
    be mounted on another host.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的 MySQL 容器已经设置好，一旦主机出现问题，我们不会遇到问题，因为数据卷可以挂载到另一台主机上。
- en: Once we have the volume mounted, it can carry on where it left off, as we have
    our data on a volume that is being replicated to the new host or is accessible
    via a filesystem share from some redundant storage, such as a SAN.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们挂载了卷，容器可以继续从上次停止的地方运行，因为我们把数据保存在一个正在复制到新主机的卷中，或者通过来自某个冗余存储（例如 SAN）的文件系统共享进行访问。
- en: The same can also be said for networking. As mentioned in the summary of the
    IBM research report, Docker NAT-based networking could be a bottleneck when it
    comes to performance, as well as designing your container infrastructure. If it
    is a problem, then you can add a networking extension and offload your containers
    network to a **software-defined network** (**SDN**) rather than have the core
    of Docker manage the networking using NAT and bridged interfaces within iptables
    on the host machine.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 网络方面也可以做同样的处理。正如 IBM 研究报告总结中提到的，基于 Docker NAT 的网络在性能方面可能成为瓶颈，并且在设计容器基础设施时也可能会遇到问题。如果这是一个问题，那么可以添加网络扩展，将容器的网络卸载到**软件定义网络**（**SDN**）中，而不是让
    Docker 核心通过主机上的 iptables 使用 NAT 和桥接接口来管理网络。
- en: Once you introduce this level of functionality to the core of Docker, it can
    get difficult to manage your containers. In an ideal world, you shouldn't have
    to worry about which host your container is running on or if your container/host
    machine stops responding for any reason, then your containers will not automatically
    pop up on another host somewhere within your container network and carry on where
    it left off.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将这种功能引入到 Docker 的核心中，就可能会变得很难管理你的容器。在理想的情况下，你不应该担心容器运行在哪个主机上，或者如果容器/主机因某种原因停止响应，那么你的容器将不会自动在容器网络中的另一个主机上弹出并继续上次的工作。
- en: In the following chapters of this book, we will be looking at how to achieve
    some of the concepts that we have discussed in this chapter, and we will look
    at tools written by Docker, designed to run alongside the core Docker engine.
    While these tools may not be as functional as some of the tools we will be looking
    at in the later chapters, they serve as a good introduction to some of the core
    concepts that we will be covering when it comes to creating clusters of Docker
    hosts and then orchestrating your containers.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后续章节中，我们将探讨如何实现本章讨论的一些概念，并查看由 Docker 编写的工具，这些工具旨在与核心 Docker 引擎一起运行。虽然这些工具的功能可能不如我们在后续章节中讨论的某些工具那样强大，但它们为我们在创建
    Docker 主机集群并协调容器时所要覆盖的核心概念提供了一个很好的入门。
- en: Once we have looked at these tools, we will look at volume and networking plugins.
    We will cover a few of the more well-known plugins that add functionality to the
    Docker core that allows us to have a more redundant platform.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看这些工具之后，我们将探讨卷和网络插件。我们将介绍一些更著名的插件，这些插件为 Docker 核心添加了功能，使我们能够拥有一个更具冗余性的平台。
- en: Once we have been hands-on with pre-written plugins, we will look at the best
    way to approach writing your own plugin.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们对预编写的插件进行实践操作后，我们将探讨编写你自己插件的最佳方法。
- en: In the final chapters of the book, we will start to look at third-party tools
    that allow you to configure, deploy, and manage the whole life cycle of your containers.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在书的最后几章，我们将开始关注一些第三方工具，这些工具允许你配置、部署并管理容器的整个生命周期。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have looked at Docker and some of the problems it solves.
    We have also discussed some of the ways in which the core Docker engine can be
    extended and the problems that you can solve with the additional functionality
    that you gain by extending Docker.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Docker 及其解决的一些问题。我们还讨论了 Docker 核心引擎可以扩展的几种方式，以及通过扩展 Docker 获得的额外功能可以解决的一些问题。
- en: In the next chapter, we will look at four different tools provided by Docker
    to make deploying, managing, and configuring Docker host instances and containers
    as simple and seamless as possible.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看 Docker 提供的四种不同工具，使得部署、管理和配置 Docker 主机实例和容器尽可能简单和无缝。
