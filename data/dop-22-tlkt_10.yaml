- en: Alerting Humans
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向人类发送警报
- en: While Prometheus alerts are great by themselves, they are not very useful unless
    you’re planning to spend all your time in front of the *alerts* screen. There
    are much better things to stare. For example, you can watch Netflix instead. It
    is much more entertaining than watching Prometheus screen. However, before you
    start watching Netflix during your working hours, we need to find a way so that
    you do get notified when an alert is fired.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Prometheus 警报本身很有用，但除非你打算把所有时间都花在 *警报* 屏幕前，否则它们并不太有用。还有更好的事物可以盯着看。例如，你可以选择观看
    Netflix。它比看 Prometheus 屏幕要有趣得多。然而，在你开始在工作时间观看 Netflix 之前，我们需要找到一种方法，确保在警报触发时，你能够收到通知。
- en: Before we proceed, I must stress that alerts to humans (operators and sysadmins)
    are the last resort. We should receive them only if the system was not capable
    of fixing the problem. However, in the beginning, we do not have a self-healing
    system. The approach we’ll take is to send each alert to a human. That’s a quick
    fix. From there on, we’ll try to build the system that will receive those alerts
    instead us. It will be per use-case. We’ll create a system that sends us all alerts
    and then we’ll start exploring each of the scenarios. If we can make the system
    accept that alert and self-heal, we’ll stop sending it to a human. On the other
    hand, if we cannot add that scenario into the system, it will continue alerting
    us. In other words, all alerts will be sent to humans except those integrated
    into the self-healing system we’ll build.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我必须强调，向人类（操作员和系统管理员）发送警报是最后的手段。我们只有在系统无法自行修复问题时，才应该接收到警报。然而，在开始时，我们并没有一个自愈系统。我们将采取的方法是将每个警报发送给人类。这是一个快速修复。从那里开始，我们将努力构建一个能够接收这些警报的系统，而不是由我们来接收。这将根据具体用例进行。我们会创建一个发送所有警报的系统，然后开始探索每种情况。如果我们能让系统接受这个警报并进行自我修复，我们将停止将其发送给人类。另一方面，如果我们无法将该场景添加到系统中，它将继续向我们发出警报。换句话说，所有的警报都会发送给人类，除非它们被集成到我们将要构建的自愈系统中。
- en: Where should we send alert messages? Slack is probably a good candidate to start.
    Even if you do not use Slack, the principles we’ll explore will be the same no
    matter whether your end-point will be email, HangOuts, Messenger, HipChat, SMS,
    or pigeon couriers. As long as that end-point has an API, we should be able to
    utilize it. That might be easier for some than others. Pigeon couriers might not
    yet have an API.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该将警报消息发送到哪里？Slack 可能是一个不错的起点。即使你不使用 Slack，我们将探索的原则在无论你使用的是电子邮件、HangOuts、Messenger、HipChat、SMS，还是信鸽快递等终端时，都是相同的。只要该终端有
    API，我们应该能够利用它。对于一些人来说，这可能比其他人更容易。信鸽快递可能还没有 API。
- en: Creating The Cluster And Deploying Services
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建集群并部署服务
- en: We’ll start by recreating the cluster and deploying the stacks that we used
    in the previous chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从重新创建集群并部署在上一章中使用的堆栈开始。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
