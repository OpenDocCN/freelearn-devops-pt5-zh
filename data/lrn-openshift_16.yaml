- en: Building a Multi-Tier Application from Source Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建多层应用程序
- en: In the previous chapter, we learned what build entities are—created by OpenShift—and how
    to deploy a simple PHP application from source code. We showed you how to start
    a new build and how to customize a build process.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了什么是由OpenShift创建的构建实体，以及如何从源代码部署一个简单的PHP应用程序。我们向你展示了如何启动一个新的构建以及如何自定义构建过程。
- en: In this chapter, you are going to build and deploy a WordPress application from
    a custom template. You are also going to work with OpenShift templates, learn
    how to create and deploy OpenShift templates, and deploy applications from OpenShift
    templates.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将从自定义模板构建并部署一个WordPress应用程序。你还将学习如何使用OpenShift模板，了解如何创建和部署OpenShift模板，并从OpenShift模板部署应用程序。
- en: We are going to cover the topic that is building a multi-tier application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的主题是构建一个多层应用程序。
- en: Technical requirements
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter relies on a working installation of OpenShift. We assume that OpenShift
    master's address is `openshift.example.com` and the default subdomain is `example.com`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章依赖于已安装的OpenShift环境。我们假设OpenShift主节点的地址是`openshift.example.com`，默认子域名是`example.com`。
- en: Some of the lab items require a custom DNS record, which can be simulated by
    setting a record in `/etc/hosts`. Both methods are acceptable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一些实验项目需要自定义DNS记录，可以通过在`/etc/hosts`中设置记录来模拟。两种方法都是可以接受的。
- en: You will be required to run minishift in this Chapter, to avoid certain errors
    and reconfiguration you might be required to do with other openshift deployment
    methods.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求你运行minishift，为了避免在使用其他OpenShift部署方法时可能遇到的某些错误和重新配置，建议使用minishift。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Building a multi-tier application
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建多层应用程序
- en: We explained to you previously how to use templates to deploy simple and multi-tier
    applications. This allows for deploying complex applications by creating deployment
    configs and deploying a number of pods, services, and routes. This approach is
    limited since most of the multi-tier applications need to be built from source
    code. OpenShift templates allow building applications from source code. The combination
    of building an application from source code and using templates to deploy and
    build a multi-tier application is described in this chapter. This is a hands-on
    chapter that gives you real examples of leveraging OpenShift templates to deploy
    applications in a production environment. Now it is time to see how to build a
    WordPress application from source code using MariaDB as a database.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前向你解释了如何使用模板来部署简单和多层应用程序。这使得通过创建部署配置并部署多个Pod、服务和路由来部署复杂的应用程序成为可能。但这种方法存在局限性，因为大多数多层应用程序需要从源代码构建。OpenShift模板允许从源代码构建应用程序。本章将描述如何结合源代码构建应用程序和使用模板来部署和构建多层应用程序。这是一个实践章节，给你提供了实际示例，展示如何利用OpenShift模板在生产环境中部署应用程序。现在，让我们看看如何使用MariaDB作为数据库，从源代码构建一个WordPress应用程序。
- en: WordPress template
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress模板
- en: 'WordPress is a free and open-source **C****ontent Management System** (**CMS**)
    based on PHP and MySQL. We want to demonstrate the **Source-to-Image** (**S2I**)
    build process for WordPress using templates prepared at [https://github.com/openshift-evangelists/wordpress-quickstart](https://github.com/openshift-evangelists/wordpress-quickstart).
    This repository contains ready-to-use templates for deploying WordPress on an
    OpenShift cluster. There are two example templates available in the repository.
    Let''s clone the repository first:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress是一个免费的开源**内容管理系统**（**CMS**），基于PHP和MySQL。我们将演示使用[https://github.com/openshift-evangelists/wordpress-quickstart](https://github.com/openshift-evangelists/wordpress-quickstart)中准备的模板，通过**源代码到镜像**（**S2I**）构建过程来构建WordPress。这个仓库包含了用于在OpenShift集群上部署WordPress的现成模板。该仓库中有两个示例模板。让我们先克隆该仓库：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We are going to apply the `wordpress-quickstart/templates/classic-standalone.json` WordPress
    template. For simplicity, we converted the template from JSON to YAML and removed
    persistent storage-related entities. We also removed a default value for the `APPLICATION_NAME`
    parameter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将应用`wordpress-quickstart/templates/classic-standalone.json` WordPress模板。为了简化，我们将模板从JSON格式转换为YAML，并去除了与持久存储相关的实体。我们还移除了`APPLICATION_NAME`参数的默认值。
- en: Building a WordPress application
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建WordPress应用程序
- en: 'First, we want to place the application into a separate namespace:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将应用程序放置到一个单独的命名空间中：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'First, since it is a new template for us, we want to gather some information
    regarding available parameters. As was previously described, `oc process --parameters`
    can be helpful:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，由于这是我们使用的新模板，我们希望收集一些关于可用参数的信息。正如之前所描述的，`oc process --parameters`可以提供帮助：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that only `APPLICATION_NAME` doesn't have a default value.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，只有`APPLICATION_NAME`没有默认值。
- en: 'Let''s build the application from source code by instantiating that template
    with its `APPLICATION_NAME=wordpress`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过实例化模板并设置`APPLICATION_NAME=wordpress`来从源代码构建应用程序：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You may want to check the build logs for wordpress application:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要查看 WordPress 应用程序的构建日志：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After some time, all WordPress pods will be up and running, as shown as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 过了一段时间，所有 WordPress pod 都将启动并运行，如下所示：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This indicates that our application should work now. Let''s see what URL it
    was exposed through and try to access it via a web browser:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示我们的应用程序现在应该可以正常工作。让我们看看它通过什么 URL 被暴露出来，并尝试通过 Web 浏览器访问：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once you open your browser and go to `http://wordpress-wp.127.0.0.1.nip.io/`,
    the WordPress application should display a configuration page. Choose you favorite
    language and press `continue` On the next page, just fill in the fields, as shown
    here, and click on `Install WordPress`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你打开浏览器并访问`http://wordpress-wp.127.0.0.1.nip.io/`，WordPress 应用程序应该会显示一个配置页面。选择你喜欢的语言并点击`继续`，在下一页面中，按照此处所示填写字段，然后点击`安装
    WordPress`。
- en: '![](img/00068.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: 'The next window displays the installation status:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下一窗口显示安装状态：
- en: '![](img/00069.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00069.jpeg)'
- en: 'Once you click on the *Log In* button, the following page is displayed:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击*登录*按钮，下面的页面将会显示：
- en: '![](img/00070.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.jpeg)'
- en: 'You just need to type in the username and password provided during the setup
    phase. At this point, you should see the WordPress workspace:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要输入在设置阶段提供的用户名和密码。此时，你应该看到 WordPress 工作空间：
- en: '![](img/00071.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00071.jpeg)'
- en: This indicates that everything was configured properly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示一切配置正确。
- en: 'Use the following code to clean everything up for the next lab:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码清理一切，为下一个实验做准备：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You may also delete your minishift VM running `minishift destroy` command, if
    you are done for today. Or just keep minishift up and proceed with the next chapter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果今天的实验已经结束，你也可以通过运行`minishift destroy`命令删除你的 minishift 虚拟机，或者保持 minishift 运行并继续进行下一章。
- en: Summary
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to build and deploy a WordPress application
    from a custom template. You learned how to work with OpenShift templates, how
    to create and deploy OpenShift templates, and how to deploy applications from
    OpenShift templates.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了如何从自定义模板构建和部署 WordPress 应用程序。你学习了如何使用 OpenShift 模板，如何创建和部署 OpenShift
    模板，以及如何从 OpenShift 模板部署应用程序。
- en: The following chapter introduces readers to CI/CD, Jenkins, OpenShift pipelines,
    and Jenkins integration with OpenShift. We are going to show you how to create
    sample CI/CD pipelines in OpenShift, edit pipelines, and manage pipeline execution.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将向读者介绍 CI/CD、Jenkins、OpenShift 管道，以及 Jenkins 与 OpenShift 的集成。我们将展示如何在 OpenShift
    中创建示例 CI/CD 管道、编辑管道以及管理管道执行。
- en: Questions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Which of the following OpenShift entities controls the build process (choose
    one):'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个 OpenShift 实体控制构建过程（选择一个）：
- en: buildconfig
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: buildconfig
- en: deploymentconfig
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署配置
- en: replicationctonroller
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 副本控制器
- en: service
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: service
- en: pod
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: pod
- en: route
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: route
- en: 'Which of the following OpenShift entities can be created using templates (choose
    one):'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个 OpenShift 实体可以使用模板创建（选择一个）：
- en: pod
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: pod
- en: service
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: service
- en: route
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: route
- en: deployment config
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署配置
- en: buildconfig
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: buildconfig
- en: All of above
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述所有内容
