- en: Deploying Simple Applications in OpenShift
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 OpenShift 中部署简单应用程序
- en: Application deployment is the most important and frequently used feature of
    OpenShift, as that's what it was built for. All OpenShift users deal with application
    deployment from Docker images. If there is a well-known application and its image
    is already available on Docker Hub or any other registries, OpenShift users can
    deploy it in a simple and reproducible way. In this chapter, we will be working
    on the deployment of several simple applications from existing Docker images.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序部署是 OpenShift 最重要且最常用的功能，因为它就是为此而构建的。所有 OpenShift 用户都需要从 Docker 镜像进行应用程序部署。如果有一个知名应用且其镜像已经在
    Docker Hub 或其他注册表中可用，OpenShift 用户可以以简单且可重复的方式部署它。在本章中，我们将处理从现有 Docker 镜像部署几个简单应用程序。
- en: 'After completing this chapter, you will have learned about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将学到以下内容：
- en: Manual application deployment images, including manual Pod and Service object
    creation from a YAML file
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动应用程序部署镜像，包括从 YAML 文件手动创建 Pod 和 Service 对象
- en: How to make use of the `oc new-app` utility to deploy applications from existing
    Docker images
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何利用 `oc new-app` 工具从现有 Docker 镜像部署应用程序
- en: Exposing applications via routes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过路由暴露应用程序
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter doesn''t have strict environmental restrictions; any OpenShift
    installations and development environments are supported: MinitShift, `oc cluster
    up`, or standard production-ready deployment based on Ansible. It is up to you
    which flavor you use. However, this chapter is based on the `oc cluster up` running
    within vagrant. The following `Vagrantfile` can be used to deploy the lab:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有严格的环境限制；支持任何 OpenShift 安装和开发环境：MinitShift，`oc cluster up` 或基于 Ansible 的标准生产就绪部署。使用哪种方式由你决定。然而，本章基于在
    Vagrant 中运行的 `oc cluster up`。以下 `Vagrantfile` 可用于部署实验环境：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The environment can be deployed as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 环境可以按如下方式部署：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the previously listed vagrant machine is deployed, you may connect to it
    as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完之前列出的 Vagrant 虚拟机后，你可以按如下方式连接到它：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, log in as a `developer` user in order to be able to run most commands:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，作为 `developer` 用户登录，以便能够运行大多数命令：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can use any password
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用任何密码
- en: Manual application deployment
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动应用程序部署
- en: Among other methods, OpenShift allows for deploying applications directly from
    existing Docker images. Imagine that your development team has an in-house process
    of building Docker images from their applications—this way, you can deploy applications
    in an OpenShift environment by using these images without any modification, which
    greatly simplifies migration to OpenShift. It takes several steps to create all
    required OpenShift entities.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他方法中，OpenShift 允许直接从现有 Docker 镜像部署应用程序。假设你的开发团队有一个内部流程，用于从他们的应用程序构建 Docker
    镜像——通过这种方式，你可以在 OpenShift 环境中使用这些镜像部署应用程序，无需任何修改，这大大简化了迁移到 OpenShift 的过程。创建所有所需的
    OpenShift 实体需要几个步骤。
- en: First, you have to create a pod, which runs a container deployed from the application's
    Docker image. Once the pod is up and running, you may need to create a service
    to have a persistent IP address and internal DNS record associated with it. The
    service allows your application to be accessible via a consistent **address:port**
    pair internally inside OpenShift. This may be enough for internal applications
    that don't require external accesses, like databases or key/value storage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个 Pod，该 Pod 运行从应用程序的 Docker 镜像部署的容器。一旦 Pod 启动并运行，你可能需要创建一个服务，以便为其关联持久的
    IP 地址和内部 DNS 记录。该服务允许你的应用程序通过 OpenShift 内部的一个一致的 **地址:端口** 对外访问。如果是仅供内部使用的应用程序，不需要外部访问（例如数据库或键值存储），这就足够了。
- en: If your application has to be available from the outside, you need to `expose`
    it to make it available from an external network, like the internet. This process
    can be achieved by creating an OpenShift route.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序需要对外部可用，你需要通过创建 OpenShift 路由来 `expose` 它，使其可以通过外部网络（如互联网）访问。
- en: 'In short, the process looks like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，过程如下：
- en: Create a pod
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Pod
- en: Create a service by exposing the pod
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过暴露 Pod 创建服务
- en: Create a route by exposing the service
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过暴露服务创建路由
- en: In this chapter, we will be working with a simple httpd Docker container to
    demonstrate the application deployment process. We have chosen httpd because it
    is simple enough and it still allows us to focus on the main goal—the demonstration
    of OpenShift-related tasks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个简单的httpd Docker容器来演示应用部署过程。我们选择httpd是因为它足够简单，同时也能让我们专注于主要目标——演示与OpenShift相关的任务。
- en: Creating a pod
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Pod
- en: 'The `httpd` Docker image is available on Docker Hub. You may want to confirm
    this by running the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`httpd` Docker镜像可以在Docker Hub上找到。你可能想通过运行以下命令来确认这一点：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'According to the image documentation ([https://docs.docker.com/samples/library/httpd/](https://docs.docker.com/samples/library/httpd/)),
    it listens on TCP port `80`. We cannot simply use this container, because it binds
    to a privileged port. The default security policy in OpenShift doesn''t allow
    applications to bind on ports below 1024\. To avoid problems, OpenShift comes
    with an image stream named `httpd` which points to an OpenShift-ready `httpd`
    image build. For example, in our version of OpenShift, the `httpd` image stream
    points to the `docker.io/centos/httpd-24-centos7` Docker container. You may want
    to verify that by running the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 根据图片文档([https://docs.docker.com/samples/library/httpd/](https://docs.docker.com/samples/library/httpd/))，它监听TCP端口`80`。我们不能简单地使用这个容器，因为它绑定了一个特权端口。OpenShift的默认安全策略不允许应用程序绑定1024以下的端口。为了避免问题，OpenShift提供了一个名为`httpd`的镜像流，指向一个适用于OpenShift的`httpd`镜像构建。例如，在我们版本的OpenShift中，`httpd`镜像流指向`docker.io/centos/httpd-24-centos7`
    Docker容器。你可能需要通过运行以下命令来验证这一点：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Each time we want to deploy a pod using an `httpd` image, we need to use `centos/httpd-24-centos7`
    instead.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们想要使用`httpd`镜像部署Pod时，我们需要使用`centos/httpd-24-centos7`镜像。
- en: 'Let''s create a separate project for the lab as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为实验创建一个单独的项目，如下所示：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The simple `httpd` pod can be deployed manually from its definition:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的`httpd` Pod可以从其定义手动部署：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`centos/httpd-24-centos7` binds on port `8080`, which allows for running the
    container inside OpenShift without tuning its default security policy.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`centos/httpd-24-centos7`绑定到端口`8080`，这允许在不调整默认安全策略的情况下在OpenShift内部运行容器。'
- en: 'Once the file is created, we can create a pod by running `oc create`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件创建完成，我们可以通过运行`oc create`来创建Pod：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'OpenShift needs some time to download the Docker image and deploy the pod.
    Once everything is finished, you should be able to have the `httpd` pod in the `Running`
    state:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift需要一些时间来下载Docker镜像并部署Pod。一旦完成，你应该能够看到`httpd` Pod处于`Running`状态：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This pod provides the same functionality as a more complex application would
    (default `httpd` webpage). We may want to verify that, as shown as follows.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Pod提供与更复杂应用程序相同的功能（默认的`httpd`网页）。我们可能想要验证这一点，方法如下。
- en: 'First, get the pod''s internal IP address:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，获取Pod的内部IP地址：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And then use curl to query the IP from the output above:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用curl查询上面输出的IP地址：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note: This is the beginning of the default Apache welcome page. You may want
    to replace it for the production installation. This can be achieved by mounting
    a persistent volume at `/var/www/html`. For demo purposes, this output indicates
    that the application itself works and is accessible.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这是默认Apache欢迎页面的开始。你可能需要在生产环境中替换它。可以通过将一个持久卷挂载到`/var/www/html`来实现这一点。为了演示目的，这个输出表明应用程序本身可以正常工作并且是可访问的。
- en: Creating a service
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个服务
- en: 'The service may be created in two different ways:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 服务可以通过两种不同的方式创建：
- en: Using `oc expose`
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`oc expose`
- en: From the YAML/JSON definition
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从YAML/JSON定义
- en: We will describe both methods. You don't have to use both.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将描述这两种方法。你不必同时使用两者。
- en: Creating a service using oc expose
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用oc expose创建服务
- en: 'You can create a pod using `oc expose` in the following way:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方式使用`oc expose`创建Pod：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding command creates a service by exposing the pod, using `name=httpd`
    as a selector. You may define a custom service name via the `--name` option.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令通过暴露Pod创建了一个服务，使用`name=httpd`作为选择器。你可以通过`--name`选项定义一个自定义服务名称。
- en: 'The same `httpd` application will be available from the service IP address,
    which is `172.30.128.131` in our case, but your output from the previous command
    most likely will be different:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的`httpd`应用程序将从服务IP地址提供，假设在我们的例子中是`172.30.128.131`，但你从上一个命令得到的输出很可能会不同：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s delete the service to recreate it using another method, as shown in
    the following subsection:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除服务，并使用另一种方法重新创建它，如下小节所示：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating a service from a YAML definition
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从YAML定义创建一个服务
- en: 'The following YAML file allows you to define a `Service` OpenShift object:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 YAML 文件允许你定义一个 `Service` OpenShift 对象：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once the file is in place, you can create the service by running the following
    command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件就位，你可以通过运行以下命令来创建服务：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The service shows the same output as previously described:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 服务将显示与之前描述相同的输出：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Creating a route
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建路由
- en: The service allows an application to be accessible internally via a consistent
    address:port pair. To be able to access it from outside of the cluster, we need
    to make sure that an OpenShift `Route` is created. Once the route is created,
    OpenShift will expose the service to the outside world using the cluster's router,
    implemented via an HAProxy Docker container by default.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 服务使应用程序能够通过一致的地址：端口对在内部访问。为了能够从集群外部访问它，我们需要确保创建了 OpenShift `Route`。一旦路由创建完成，OpenShift
    将通过集群的路由器（默认通过 HAProxy Docker 容器实现）将服务暴露到外部。
- en: 'Like services, routes can be created in two ways:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 和服务一样，路由可以通过两种方式创建：
- en: Using `oc expose`
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `oc expose`
- en: From the YAML/JSON definition
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 YAML/JSON 定义
- en: This section shows both methods, but it is enough to use only one.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了两种方法，但只需使用其中一种即可。
- en: We assume that previously, you created a service named `httpd`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你之前创建了一个名为 `httpd` 的服务。
- en: Creating a route by using oc expose
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `oc expose` 创建路由
- en: 'You can create a route using `oc expose` in the following way:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方式使用 `oc expose` 创建路由：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `127.0.0.1.nip.io` DNS zone is used by default by the `oc cluster up` method.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`oc cluster up` 方法使用 `127.0.0.1.nip.io` DNS 区域。
- en: 'You may want to create a route with an alternate URL, using the `--hostname`
    option:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望通过 `--hostname` 选项创建一个具有备用 URL 的路由：
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: OpenShift allows for creating multiple routes per single application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 允许为单个应用程序创建多个路由。
- en: If you are using an alternate name, make sure that the DNS record points to
    the IP of the OpenShift node that hosts the router pod.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用了备用名称，请确保 DNS 记录指向托管路由器 pod 的 OpenShift 节点的 IP 地址。
- en: Once the route is created, you may access your application using this external
    route.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦路由被创建，你就可以通过这个外部路由访问你的应用程序。
- en: Creating a route from a YAML definition
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 YAML 定义创建路由
- en: 'Let''s create an alternate route for our application named `httpd2`. The route
    will have the `myhttpd.example.com` URL:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为名为 `httpd2` 的应用程序创建一个备用路由。该路由将具有 `myhttpd.example.com` URL：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The route may be created by `oc create`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 `oc create` 来创建路由：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You may see that the new route has been added successfully. Now, if there is
    a corresponding DNS record, you will be able to access your application using
    that alternate route.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到新路由已成功添加。现在，如果存在相应的 DNS 记录，你将能够通过该备用路由访问你的应用程序。
- en: Using oc new-app
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `oc new-app`
- en: The `oc` utility allows you to deploy a simple application in a user-friendly
    way. Generally, you just need to pass one or more options to the `oc new-app` command,
    which will then create all required resources, including pod(s) and service(s),
    for your application. Additionally, that command creates `ReplicationController` and `DeploymentConfig` API
    objects that control how your application is being deployed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`oc` 工具允许你以用户友好的方式部署简单的应用程序。通常，你只需传递一个或多个选项给 `oc new-app` 命令，命令会创建应用程序所需的所有资源，包括
    pod(s) 和 service(s)。此外，该命令还会创建 `ReplicationController` 和 `DeploymentConfig` API
    对象，用于控制应用程序的部署方式。'
- en: The oc new-app command
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`oc new-app` 命令'
- en: 'So, `oc new-app` creates the following resources during application deployment
    from an existing Docker image:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`oc new-app` 在应用程序部署过程中会从现有的 Docker 镜像创建以下资源：
- en: '| **Resource** | **Abbreviation** | **Description** |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| **资源** | **缩写** | **描述** |'
- en: '| Pod | pod | Pod representing your container |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| Pod | pod | 表示你容器的 Pod |'
- en: '| Service | svc | Service containing an internal application endpoint |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 服务 | svc | 包含内部应用程序端点的服务 |'
- en: '| ReplicationController | rc | A replication controller is an OpenShift object
    that controls the number of replicas for an application |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| ReplicationController | rc | 复制控制器是 OpenShift 对象，用于控制应用程序的副本数量 |'
- en: '| DeploymentConfig | dc | Deployment configuration is a definition of your
    deployment |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| DeploymentConfig | dc | 部署配置是你部署的定义 |'
- en: '`oc new-app` is a very simple utility, yet it''s powerful enough to satisfy
    most simple deployments.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`oc new-app` 是一个非常简单的工具，但它足够强大，可以满足大多数简单的部署需求。'
- en: '`oc new-app` doesn''t create a route when deploying an application from its
    Docker image!'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`oc new-app` 在从 Docker 镜像部署应用程序时不会创建路由！'
- en: The functionality provided by `oc new-app` is also exposed via a web console
    which is what developers usually are inclined to use.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`oc new-app` 提供的功能也可以通过 Web 控制台访问，开发人员通常更倾向于使用该方式。'
- en: Using oc new-app with default options
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用默认选项的 `oc new-app`
- en: 'Let''s delete the resources created previously:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除之前创建的资源：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Another method to delete everything is to delete the project and create it again.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 删除所有内容的另一种方法是删除项目并重新创建它。
- en: Recently, we showed that OpenShift comes with an image stream that contains
    the path to the OpenShift-ready `httpd` image. The `oc new-app` utility uses Docker
    images referenced by image streams by default.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我们展示了 OpenShift 自带一个镜像流，包含指向 OpenShift 准备好的 `httpd` 镜像的路径。默认情况下，`oc new-app`
    工具使用镜像流引用的 Docker 镜像。
- en: 'Here is an example of creating a basic `httpd` application:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建基础 `httpd` 应用程序的示例：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The deployment process takes some time. Once everything is ready, you can check
    that all resources have been created:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 部署过程需要一些时间。一旦一切准备就绪，你可以检查是否已创建所有资源：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s make sure that the proper image has been used:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认已使用正确的镜像：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'What is left is to expose the service to make the application externally available:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的工作是暴露服务，使应用可以在外部访问：
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Advanced deployment
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级部署
- en: The `oc new-app` command takes a number of parameters, allowing you to modify
    the deployment process according to your needs. For example, you may need to modify
    names, specify environment variables, and so on.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`oc new-app` 命令接受多个参数，允许你根据需求修改部署过程。例如，你可能需要修改名称、指定环境变量等。'
- en: 'Advanced options can always be displayed by using the built-in help function,
    which can be displayed by `oc new-app --help`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 高级选项始终可以通过使用内置的帮助功能显示，帮助功能可以通过 `oc new-app --help` 显示：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We are going to work with `oc new-app` a lot in the following chapters. You
    don't have to learn all options right now.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将大量使用 `oc new-app`。你现在不需要了解所有选项。
- en: Deploying MariaDB
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 MariaDB
- en: In this section, we will deploy a database container with additional configuration
    options. The container requires a number of parameters to be passed to `oc new-app`.
    Let's create a simple `mariadb` container as shown here.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将部署一个带有额外配置选项的数据库容器。容器需要将一些参数传递给 `oc new-app`。让我们按照下面的示例创建一个简单的 `mariadb`
    容器。
- en: 'First delete objects created previously:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先删除之前创建的对象：
- en: '[PRE29]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now we want to create a database container where the database user named `openshift`
    is allowed to connect to the database named `openshift`. For simplicity reasons,
    we will use `openshift` as the database password. The following example, shows
    how to start a MariaDB container:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想创建一个数据库容器，允许名为 `openshift` 的数据库用户连接到名为 `openshift` 的数据库。为了简化，我们将使用 `openshift`
    作为数据库密码。以下示例展示了如何启动一个 MariaDB 容器：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Verify mariadb is up and running:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 验证 mariadb 是否启动并运行：
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now you can access the database using container name, "po/mariadb-1-54h6x" in
    our case.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用容器名称 "po/mariadb-1-54h6x" 来访问数据库，针对我们的案例是这样。
- en: 'Now login to the container using ''oc exec'':'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用 'oc exec' 登录到容器：
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Connect to mariadb database and verify that database named 'openshift' is created
    and you have access to it running 'show dababases' command.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 mariadb 数据库，并验证名为 'openshift' 的数据库已创建，并且你可以通过运行 'show databases' 命令访问它。
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The previous output shows that the database service is up and running and ready
    to be used from the application side. We are going to work more on this topic
    in the following chapters.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出显示数据库服务已启动并运行，准备从应用端使用。我们将在接下来的章节中进一步探讨这个话题。
- en: You can exit database and get ready for the next chapter.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以退出数据库，为下一章节做好准备。
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Clear out your lab environment.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 清理你的实验环境。
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If you are going to continue with the following chapter, you can leave your
    OpenShift cluster up, otherwise you can shutdown or delete vagrant VM.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算继续进行下一章节，可以保持 OpenShift 集群运行，否则可以关闭或删除 vagrant 虚拟机。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we showed you how to deploy a number of simple applications
    from their Docker images, how to create a pod manually, and how to create a service
    manually. We went through the process of creating a service, and how to create
    a route manually, as well as how to create a route using `oc expose`. Finally,
    we showed you how to use the `oc new-app` command to deploy an application from
    its Docker image.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向您展示了如何从 Docker 镜像部署多个简单应用程序，如何手动创建 pod，以及如何手动创建服务。我们详细讲解了创建服务的过程，如何手动创建路由，以及如何使用
    `oc expose` 创建路由。最后，我们向您展示了如何使用 `oc new-app` 命令从 Docker 镜像部署应用程序。
- en: In the next chapter, we will be working on deployment of multi-tier application
    using OpenShift templates.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将使用 OpenShift 模板部署多层应用程序。
- en: Questions
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the following OpenShift entities is not created automatically by `oc
    new-app`?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个 OpenShift 实体不是 `oc new-app` 自动创建的？
- en: Pod
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pod
- en: Route
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由
- en: Replication controller
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 副本控制器
- en: Deployment config
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署配置
- en: Service
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务
- en: Which of the following entities should be created in order to make an application
    available externally in a minimal configuration (choose three)?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些实体应创建，以便在最小配置下将应用程序公开到外部？（选择三个）
- en: Pod
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pod
- en: Service
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务
- en: Route
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由
- en: Replication controller
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 副本控制器
- en: Deployment config
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署配置
- en: Image stream
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像流
- en: Which command creates a route with the custom URL `myservice.example.com`?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令创建了自定义 URL `myservice.example.com` 的路由？
- en: oc expose svc httpd
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: oc expose svc httpd
- en: oc expose svc httpd --host myservice.example.com
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: oc expose svc httpd --host myservice.example.com
- en: oc expose svc httpd --hostname myservice.example.com
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: oc expose svc httpd --hostname myservice.example.com
- en: oc create svc httpd --hostname myservice.example.com
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: oc create svc httpd --hostname myservice.example.com
- en: Which commands display all OpenShift routes (choose two)?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些命令显示所有 OpenShift 路由？（选择两个）
- en: oc get all
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: oc get all
- en: oc get pod
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: oc get pod
- en: oc get application
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: oc get application
- en: oc get route
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: oc get route
- en: docker ps
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: docker ps
- en: ip route
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: ip route
- en: Further reading
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'We gave you a basic knowledge of application deployment in OpenShift. The following
    links are useful if you want to read more:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经向您介绍了 OpenShift 中的应用程序部署基础知识。如果您想进一步了解，以下链接会对您有所帮助：
- en: '**Pods and Services**:[ https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html](https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pods 和 Services**：[https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html](https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html)'
- en: '**Creating applications from images**: [https://docs.openshift.org/latest/dev_guide/application_lifecycle/new_app.html#specifying-an-image](https://docs.openshift.org/latest/dev_guide/application_lifecycle/new_app.html#specifying-an-image)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从镜像创建应用程序**：[https://docs.openshift.org/latest/dev_guide/application_lifecycle/new_app.html#specifying-an-image](https://docs.openshift.org/latest/dev_guide/application_lifecycle/new_app.html#specifying-an-image)'
