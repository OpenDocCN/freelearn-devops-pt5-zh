- en: Tracking Application Changes and the ROI of Applying DevOps to Salesforce
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪应用程序变更和将DevOps应用于Salesforce的投资回报率（ROI）
- en: In this chapter, we will discuss how we can track application changes using
    open source technologies, such as the Git source control versioning system. We
    will learn the basics of Bugzilla and how to track issues when they are reported
    by a tester or user until the fix for the issue/feature is deployed to production.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论如何使用开源技术（例如Git源代码控制版本系统）来跟踪应用程序变更。我们将学习Bugzilla的基础知识，以及如何跟踪测试人员或用户报告的问题，直到问题/功能的修复部署到生产环境。
- en: We will also see how to add some post-build steps in Jenkins to report the build
    status to Git. This will allow developers to get information about the build status
    related to every commit. We will discuss how DevOps helps any Salesforce organization
    to deliver applications faster and what the ROI is from applying DevOps to Salesforce.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到如何在Jenkins中添加一些构建后步骤，将构建状态报告给Git。这将使开发人员能够获得与每个提交相关的构建状态信息。我们将讨论DevOps如何帮助任何Salesforce组织更快速地交付应用程序，以及将DevOps应用于Salesforce的投资回报率（ROI）。
- en: How to track application changes
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何跟踪应用程序变更
- en: Tracking application changes without a version control system is like finding a
    needle in a haystack. We have seen how to use GitLab to track application changes
    in [Chapter 5](45e26817-986f-4fa4-a9c3-3044e7aad5da.xhtml), *Version Control*.
    Whenever bugs are reported by testers, we use a bug tracker such as Bugzilla to
    track the life cycle of a bug—from identifying it until the fix is released to
    production. When a new bug or feature is added to the bug tracker, it is assigned
    to a developer and the developer starts working on that fix or new feature. Code
    changes are tracked in Git repositories when developers commit changes to the
    respective feature branch. The develop branch commit message should contain the
    bug ID to identify the changes done with respect to a particular bug or feature.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 没有版本控制系统的情况下跟踪应用程序的变更，就像在大海捞针。我们已经在[第5章](45e26817-986f-4fa4-a9c3-3044e7aad5da.xhtml)《版本控制》中看到如何使用GitLab跟踪应用程序变更。每当测试人员报告bug时，我们会使用Bugzilla等bug跟踪工具来追踪bug的生命周期——从发现问题到修复发布到生产环境。当一个新的bug或功能被添加到bug跟踪工具中时，它会被分配给开发人员，开发人员开始处理该修复或新功能。当开发人员提交变更到相应的功能分支时，代码变更会被记录在Git仓库中。开发分支的提交信息应包含bug
    ID，以便标识与特定bug或功能相关的变更。
- en: If a new feature is added or an issue is fixed, developers can add meaningful
    commit messages to help us track changes for a new functionality. When we want
    to merge changes to develop a branch or perform cherry-picks on commits, this
    becomes easy with meaningful commit messages with a bug ID.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果添加了新功能或修复了某个问题，开发人员可以添加有意义的提交信息，帮助我们追踪新功能的变更。当我们想将变更合并到开发分支或对提交进行樱桃挑选时，带有bug
    ID的有意义提交信息让这一过程变得更容易。
- en: Introducing Bugzilla
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Bugzilla
- en: Bugzilla bug tracking is an open source bug tracking system. Using Bugzilla,
    you can create a bug and track that bug until it is closed. Bugzilla provides
    project management and issue tracking features. Bugzilla is used to improve performance
    and scalability. Other features include an advanced query application that can
    remember your searches and integrated email capabilities.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Bugzilla是一款开源的错误跟踪系统。使用Bugzilla，你可以创建一个bug并追踪这个bug，直到它被关闭。Bugzilla提供了项目管理和问题跟踪功能。Bugzilla被用来提升性能和可扩展性。其他功能包括一个先进的查询应用，可以记住你的搜索记录以及集成的电子邮件功能。
- en: 'First, you have to install Bugzilla on your system or server, from where you
    can access Bugzilla using a web browser. The steps are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要在系统或服务器上安装Bugzilla，通过浏览器访问Bugzilla。步骤如下：
- en: You can install Bugzilla on a machine from [https://www.bugzilla.org/docs/4.4/en/html/installation.html](https://www.bugzilla.org/docs/4.4/en/html/installation.html).
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以从[https://www.bugzilla.org/docs/4.4/en/html/installation.html](https://www.bugzilla.org/docs/4.4/en/html/installation.html)安装Bugzilla到一台机器上。
- en: 'Now open Bugzilla through your browser; the screen looks like the following:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过浏览器打开Bugzilla，屏幕会显示如下内容：
- en: '![](img/714acd78-4701-4398-94e3-1cc4b47011d3.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/714acd78-4701-4398-94e3-1cc4b47011d3.png)'
- en: 'Click on Log In and enter the credentials. Once you have logged in, the page
    will look like this:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击登录并输入凭证。登录后，页面将显示如下内容：
- en: '![](img/fe2d1663-d574-4c3b-8251-5914d2c4fe6e.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe2d1663-d574-4c3b-8251-5914d2c4fe6e.png)'
- en: Now click on User Preferences or on Administration to open the admin panel.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击“用户偏好”或“管理”以打开管理面板。
- en: 'Once the admin panel is opened, click on Users:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开管理面板后，点击用户（Users）：
- en: '![](img/0a10bfaf-fdc3-4a4e-8eb1-62916ad234ff.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a10bfaf-fdc3-4a4e-8eb1-62916ad234ff.png)'
- en: 'In the next screen, click on add a new user:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个页面，点击添加新用户（add a new user）：
- en: '![](img/997db10b-5567-4c84-9736-73d80b05462a.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/997db10b-5567-4c84-9736-73d80b05462a.png)'
- en: 'Enter the Login name, Password, and Real name. Finally, click on Add:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入登录名、密码和真实姓名。最后，点击添加（Add）：
- en: '![](img/f9ac0f66-a604-4bb1-9ffb-45406757017c.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9ac0f66-a604-4bb1-9ffb-45406757017c.png)'
- en: 'Select the relevant accesses and click on Save Changes:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择相关权限并点击保存更改（Save Changes）：
- en: '![](img/4e25fa31-fccd-40fe-9d2c-9c3e05bbc332.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e25fa31-fccd-40fe-9d2c-9c3e05bbc332.png)'
- en: 'Now click on File a Bug on the home page:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击主页上的“报告 bug（File a Bug）”：
- en: '![](img/9a6dd36e-a57b-4d82-b9c3-4b71b0901874.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a6dd36e-a57b-4d82-b9c3-4b71b0901874.png)'
- en: 'In the following screen, you can see the multiple fields:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下一个页面，你可以看到多个字段：
- en: 'Product: Git Demo Project'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品：Git 演示项目
- en: 'Reporter: ngornalli'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告人：ngornalli
- en: 'Component: Git Project Model'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件：Git 项目模型
- en: 'Component Description: This component is created for Git Demo Project'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件描述：此组件是为 Git 演示项目创建的
- en: 'Version: 1.0'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本：1.0
- en: 'Severity: High'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严重性：高
- en: 'Hardware: Other'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件：其他
- en: 'OS: Windows'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统：Windows
- en: 'Org*: Transformer'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织*：Transformer
- en: 'Type of the Ticket*: Defect'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工单类型*：缺陷
- en: 'Raised By: QA'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提出者：QA
- en: 'Steps to Reproduce Issue*: Steps to reproduce issue'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复现问题的步骤*：复现问题的步骤
- en: 'Expected Result*: Expected Result'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期结果*：预期结果
- en: 'Summary: New Defect added for Git Demo Project'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摘要：为 Git 演示项目添加了新缺陷
- en: 'Description: Description'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：描述
- en: 'Attachment: If there is any screenshot then attach it here'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附件：如果有任何截图，请附在此处
- en: '![](img/1072a174-e5b6-4c14-b540-6a462ff5b625.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1072a174-e5b6-4c14-b540-6a462ff5b625.png)'
- en: Finally, click on Submit Bug.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击提交 bug（Submit Bug）。
- en: Publishing a build report to Git
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将构建报告发布到 Git
- en: As we have seen in [Chapter 6](c18c24e5-b3e1-467c-8e33-cc278016e0a6.xhtml),
    *Continuous Integration*, we can trigger a Jenkins job as code is pushed to Jenkins
    using a Git Webhook. Jenkins will start the build using the Ant Migration Tool
    and deploy metadata to the sandbox. However, whether the build failed or is successful
    is not shown anywhere. So we need to change the Jenkins job to deploy changes
    from Git to the sandbox. Go to the Jenkins job that you want to change and click
    on Configure.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第六章](c18c24e5-b3e1-467c-8e33-cc278016e0a6.xhtml)《*持续集成*》中看到的那样，我们可以通过
    Git Webhook 在代码推送到 Jenkins 时触发 Jenkins 任务。Jenkins 将使用 Ant Migration Tool 启动构建并将元数据部署到沙箱中。然而，构建是否成功或失败并不会显示出来。所以我们需要修改
    Jenkins 任务，使其从 Git 部署更改到沙箱。进入你想修改的 Jenkins 任务，点击配置（Configure）。
- en: 'Add the post-build Git Publisher step to set the build status to Git commit:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 添加构建后 Git 发布器（Git Publisher）步骤，以将构建状态设置为 Git 提交：
- en: '![](img/c4cf87bf-886d-4d77-8807-57a17ff24305.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4cf87bf-886d-4d77-8807-57a17ff24305.png)'
- en: 'In GitLab, you can view the status of the Jenkins job to check whether is successful
    or it failed. We can track each commit in Git and see if the deployment to the
    sandbox step build has passed. If we configure the Jenkins job to run automation
    test cases after deployment is done in testing the sandbox, we can get the status
    of the execution of automation test cases in Git:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitLab 中，你可以查看 Jenkins 任务的状态，以检查它是成功还是失败。我们可以跟踪 Git 中的每次提交，查看沙箱构建的部署步骤是否通过。如果我们配置
    Jenkins 任务在沙箱测试完成后运行自动化测试用例，我们可以在 Git 中获得自动化测试用例执行的状态：
- en: '![](img/569e4ab4-2309-44e3-b00c-b58e6c1c8739.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/569e4ab4-2309-44e3-b00c-b58e6c1c8739.png)'
- en: How DevOps helps organizations deliver quickly
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 如何帮助组织快速交付
- en: Version control helps us track issues and revert changes. Differentiating between
    branches becomes easy with GitLab. If something goes wrong, finding a bug or issue
    is easy as we have all the changes tracked in Git repositories. Also, with Jenkins
    being able to retrieve metadata from the sandbox and store it in Git, it is very
    useful while taking backups. We don't need to do the same task again. We can configure
    a Jenkins job to take a backup of metadata components in Git and send a notification
    email to the respective admins.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制帮助我们跟踪问题并回滚更改。在 GitLab 中区分分支变得更加容易。如果出现问题，查找 bug 或问题也变得更加简单，因为我们所有的更改都已在
    Git 仓库中跟踪。并且，Jenkins 能够从沙箱中检索元数据并将其存储到 Git，这在进行备份时非常有用。我们无需重复相同的任务。我们可以配置 Jenkins
    任务，在 Git 中备份元数据组件并发送通知邮件给相关管理员。
- en: The Jenkins continuous integration server helps us to deploy changes from a
    developer's machine to the sandbox or from one sandbox to another sandbox. We
    can configure Jenkins jobs to deploy changes as soon as they are pushed to Git
    using Jenkins Webhooks. Deployment of metadata from a developer sandbox to UAT
    sandboxes can be automated and your Salesforce credentials are safely stored in
    Jenkins Credentials in secret text, which will be only used during execution of
    a Jenkins job.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 持续集成服务器帮助我们将更改从开发人员的机器部署到沙箱环境，或从一个沙箱环境部署到另一个沙箱环境。我们可以通过 Jenkins Webhooks
    配置 Jenkins 作业，以便在更改推送到 Git 时自动进行部署。从开发人员沙箱到 UAT 沙箱的元数据部署可以自动化，并且 Salesforce 凭证安全地存储在
    Jenkins 凭证中的密文文本中，仅在执行 Jenkins 作业时使用。
- en: Code coverage is important for improving the quality of code written by developers.
    We can make sure that standard practices are being followed while developing an
    application. Making use of Jenkins to execute Apex tests in the deployment of
    metadata to the sandbox is an easy way to ensure we have 75% code coverage as
    per the Salesforce criteria.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率对于提高开发人员编写的代码质量至关重要。我们可以确保在开发应用程序时遵循标准实践。通过 Jenkins 执行 Apex 测试来部署元数据到沙箱环境，是确保按照
    Salesforce 标准实现 75% 代码覆盖率的简便方法。
- en: Enhanced productivity
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高生产力
- en: When we have most deployments automated using the Jenkins continuous integration
    server and all the changes being made are tracked in a source control versioning
    system such as Git, developers can spend more time on actual development tasks.
    As we have seen in [Chapter 7](95062e49-8aff-4b6f-a02d-d81ca0f7cc41.xhtml), *Continuous
    Testing*, with the help of automation testing, we can cover the testing cycle
    faster and fulfill code coverage criteria in Salesforce. Selenium makes it easy
    to automate test cases. Finding bugs in an early phase of the software development
    cycle is very important in order to make sure software is bug-free and application
    deliverables are deployed to production faster.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们大部分部署任务通过 Jenkins 持续集成服务器自动化，并且所有更改都在 Git 等源代码版本控制系统中进行追踪时，开发人员可以将更多时间投入到实际的开发任务中。如
    [第 7 章](95062e49-8aff-4b6f-a02d-d81ca0f7cc41.xhtml)《持续测试》中所示，借助自动化测试，我们可以更快地覆盖测试周期，并满足
    Salesforce 中的代码覆盖率标准。Selenium 使得自动化测试用例变得更加简单。在软件开发周期的早期阶段发现缺陷非常重要，这可以确保软件无缺陷，并使得应用交付到生产环境的速度更快。
- en: How to measure ROI?
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何衡量投资回报率（ROI）？
- en: Applying DevOps methodologies to Salesforce using open source tools, such as
    GitLab, Jenkins, Selenium, and so on, helps organizations set up their automation
    process at minimal cost and with minimal efforts (in doing a one-time setup and
    configuration).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用开源工具（如 GitLab、Jenkins、Selenium 等）将 DevOps 方法应用于 Salesforce，帮助组织以最小成本和最小努力（仅需一次性设置和配置）建立自动化流程。
- en: ROI cannot be measured as a number, but the ROI from applying DevOps can be
    measured as of the time we save in the deployment of Salesforce and the rework
    we do whenever developers accidentally overwrite each others' changes. Identifying
    issues faster with automation testing in the early stages of software development
    makes it easy to fix issues. Fixing defects in production costs us more time than
    fixing bugs early in a test or pre-production environment. Having a bug in production
    will have a business impact on our application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ROI 无法仅通过一个数字来衡量，但通过应用 DevOps 的 ROI 可以通过节省部署 Salesforce 所需的时间以及开发人员不小心覆盖彼此更改时需要返工的时间来衡量。在软件开发的早期阶段通过自动化测试更快地识别问题，使得修复问题变得更容易。修复生产环境中的缺陷所耗费的时间，比在测试或预生产环境中修复缺陷要多。生产环境中的缺陷会对我们的应用程序产生业务影响。
- en: The reduced time in the maintenance window when we are deploying changes to
    production and the reduced number of issues in production help us to measure the
    ROI from applying DevOps to our Salesforce organization. The release cycle can
    be reduced from weeks to days with automated test cases using Jenkins continuous
    integration.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在将更改部署到生产环境时，维护窗口内的时间缩短和生产环境中问题数量的减少，帮助我们衡量将 DevOps 应用于 Salesforce 组织的 ROI。通过
    Jenkins 持续集成，自动化测试用例可以将发布周期从几周缩短到几天。
- en: By applying DevOps practices to a Salesforce application, we can achieve customer
    satisfaction and speed up the product delivery process. Developers need to work
    less hard at maintaining an application, focusing more on developing new features.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 DevOps 实践应用于 Salesforce 应用程序，我们可以实现客户满意度，并加快产品交付过程。开发人员无需在应用程序维护上花费过多时间，而可以更多地专注于开发新功能。
- en: Summary
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about tracking application changes, Bugzilla, enhancing
    productivity, and measuring ROI.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何跟踪应用程序变化，使用Bugzilla，提升生产力以及衡量投资回报率（ROI）。
- en: We started this book with very basic or no knowledge of DevOps practices or
    tools used in DevOps. We learned some basics about Salesforce by creating a sample
    application in Salesforce and discussed the different sandbox environments. Using
    Eclipse with Salesforce, we can integrate Git with a sandbox to achieve a source
    control version system. We learned about different deployment methods used in
    Salesforce, and we automated Salesforce deployments using the Jenkins continuous
    integration server.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从对DevOps实践或相关工具几乎没有了解开始本书的学习。我们通过在Salesforce中创建一个示例应用程序，学习了一些Salesforce的基础知识，并讨论了不同的沙盒环境。通过将Eclipse与Salesforce结合使用，我们可以将Git与沙盒集成，实现源代码控制版本系统。我们了解了Salesforce中使用的不同部署方法，并使用Jenkins持续集成服务器自动化了Salesforce的部署。
- en: We learned about setting up our own GitLab server and pushing code changes from
    a Salesforce sandbox to a GitLab repository. Implementing continuous integration
    in a Salesforce environment with the Jenkins server helps us to speed up deployment
    to UAT or another sandbox.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何搭建自己的GitLab服务器，并将代码更改从Salesforce沙盒推送到GitLab仓库。在Salesforce环境中使用Jenkins服务器实现持续集成，帮助我们加速部署到UAT或其他沙盒环境。
- en: We learned how to automate testing for a Salesforce application with Selenium.
    We discussed Selenium record and playback with a sample Salesforce application.
    Automation testing helped us reduce the testing cycle from days to hours. We saw
    how DevOps tools can be used in a Salesforce application. You can apply the concepts
    learned in this book to any Salesforce application. Throughout this book, we tried
    to provide you with good insights into DevOps tools and step-by-step instructions
    to set up your own DevOps process with open source tools. Most of the exercises
    in this book can be followed using a free Salesforce account.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用Selenium自动化测试Salesforce应用程序。我们通过一个示例Salesforce应用程序讨论了Selenium的录制与回放功能。自动化测试帮助我们将测试周期从几天缩短到几个小时。我们看到DevOps工具如何在Salesforce应用程序中发挥作用。你可以将本书中学到的概念应用到任何Salesforce应用程序中。在本书中，我们尽力为你提供有关DevOps工具的有益见解，并提供一步步的指导，帮助你使用开源工具设置自己的DevOps流程。本书中的大多数练习都可以通过免费Salesforce账户来完成。
