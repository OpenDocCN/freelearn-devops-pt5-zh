- en: '*Chapter 15*: Scanning, Monitoring, and Using Third-Party Tools'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第十五章*：扫描、监控和使用第三方工具'
- en: So far, we have explored how we can manually configure our Docker containers
    to ensure security is a priority. In this chapter, we will look at some of the
    tools available to automatically scan our images and monitor our production loads.
    This will provide a jumping off spot for you to expand your Docker-based projects
    further, based upon your cloud provider if you use one.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了如何手动配置 Docker 容器，确保安全性优先。在本章中，我们将介绍一些可以自动扫描镜像并监控生产负载的工具。这将为你提供一个出发点，让你能够根据使用的云服务提供商进一步扩展基于
    Docker 的项目。
- en: We will start off by looking at DevOps solutions such as Anchore Engine for
    scanning images for security vulnerabilities, review `docker stats` and learn
    how it is useful, set up cAdvisor for local monitoring, and understand how Datadog
    can be used as a cloud-based solution for gathering container stats.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先查看 DevOps 解决方案，例如 Anchore Engine，用于扫描镜像中的安全漏洞，回顾 `docker stats` 并了解它的用途，设置
    cAdvisor 进行本地监控，并理解如何将 Datadog 作为基于云的解决方案，用于收集容器统计数据。
- en: This chapter will also briefly review AWS security options including GuardDuty
    for monitoring production environments and cover some of the features that Microsoft
    Azure offers. You'll gain an understanding of what tools are available to **Google
    Cloud Platform** (**GCP**) users and deploy the Datadog Agent to your container
    environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还将简要回顾 AWS 的安全选项，包括用于监控生产环境的 GuardDuty，并介绍微软 Azure 提供的一些功能。你将了解**谷歌云平台**（**GCP**）用户可以使用的工具，并将
    Datadog Agent 部署到你的容器环境中。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Scanning and monitoring – cloud and DevOps security for containers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描和监控 – 云端与 DevOps 安全性在容器中的应用
- en: Securing your containers using AWS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS 保护你的容器
- en: Securing your containers using Azure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure 保护你的容器
- en: Securing your containers using GCP
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GCP 保护你的容器
- en: Let's get started by looking at techniques for monitoring containers, scanning
    for security issues.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始了解监控容器、扫描安全问题的技术。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need to have access to a Linux machine running Docker.
    We recommend that you use the setup you have been using so far in this book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要访问一台运行 Docker 的 Linux 机器。我们建议你继续使用本书中至今为止的设置。
- en: In addition to this, you will need an account on Docker Hub in order to access
    images located there. If you have not already set one up during previous chapters,
    you can do so via [https://hub.docker.com:](https://hub.docker.com:)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，你还需要在 Docker Hub 上注册一个账户，以便访问其中的镜像。如果你之前没有设置过账户，可以通过[https://hub.docker.com:](https://hub.docker.com:)进行注册。
- en: In order to use many of the programs explored in this chapter, you will need
    to download them from the web. We'll provide links in each section where relevant
    so you know where to get them from. In some instances, you may need to set up
    an account in order to use a service or download a tool.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用本章中探讨的许多程序，你需要从网上下载它们。我们将在相关部分提供链接，以便你知道从哪里获取它们。在某些情况下，你可能需要注册账户才能使用某项服务或下载某个工具。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，观看代码的实际应用：
- en: '[https://bit.ly/30VfWu8](https://bit.ly/30VfWu8)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/30VfWu8](https://bit.ly/30VfWu8)'
- en: Scanning and monitoring – cloud and DevOps security for containers
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描和监控 – 云端与 DevOps 安全性在容器中的应用
- en: Before we begin to look at specific tools for monitoring and scanning your containers,
    we shall first define exactly what we mean by the term monitoring in a security
    context.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始查看用于监控和扫描容器的具体工具之前，首先需要明确定义在安全环境中我们所说的监控是什么意思。
- en: As you have seen throughout this book, containers provide a mechanism to serve
    up applications in small self-contained environments. However, we need to ensure
    that released software does not suffer from performance degradation while running.
    For example, we need to know if a container is consuming a lot of resources and
    thereby impacting the overall performance of our environment. You may already
    have some understanding of this concept from [*Chapter 10*](B11641_10_Final_AM_ePub.xhtml#_idTextAnchor226),
    *Monitoring Docker Using Prometheus, Grafana, and Jaeger*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本书中所见，容器提供了一种在小型自包含环境中提供应用程序的机制。然而，我们需要确保发布的软件在运行时不会出现性能下降。例如，我们需要知道一个容器是否消耗了大量资源，从而影响我们环境的整体性能。你可能已经从[*第10章*](B11641_10_Final_AM_ePub.xhtml#_idTextAnchor226)《使用
    Prometheus、Grafana 和 Jaeger 监控 Docker》中对这一概念有了一定的了解。
- en: Additionally, monitoring allows us to look for anomalies that may indicate that
    the system is under attack or has been compromised in some fashion. While elsewhere
    in this book monitoring has been focused on ensuring system stability and performance,
    we will use those concepts from a security angle. Security scanning applications
    are an important part of any tool chain, but may not pick up every issue, especially
    newer exploits. Therefore, looking for negative side effects of a malicious software's
    presence is an important defense mechanism. As such, combining scanning prior
    to release, monitoring post release, and incident response are important parts
    of running a production container system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，监控使我们能够查找可能表明系统遭受攻击或已被某种方式入侵的异常情况。虽然本书的其他部分集中于确保系统稳定性和性能的监控，但我们将从安全的角度使用这些概念。安全扫描应用程序是任何工具链的重要组成部分，但可能无法发现所有问题，特别是较新的漏洞。因此，查找恶意软件存在的负面副作用是一个重要的防御机制。因此，在发布前进行扫描、发布后进行监控以及事件响应是运行生产容器系统的重要部分。
- en: A note on sandbox environments
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 关于沙箱环境的说明
- en: One concept that may also be useful to understand is a sandbox environment.
    A sandbox provides an environment for isolating and testing untrusted code. These
    environments are useful for reviewing containers you believe may be infected with
    malware without risking impacting live systems or development environments your
    team uses.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能有用的概念是沙箱环境。沙箱为隔离和测试不受信任的代码提供了一个环境。这些环境对于审查可能感染恶意软件的容器非常有用，且无需冒着影响实时系统或团队使用的开发环境的风险。
- en: In this chapter, we are going to start by looking at the scanning stage in the
    CI/CD (DevOps) pipeline, before investigating how monitoring tools can be used
    in conjunction with them to protect our systems. Let's get started with Anchore
    Engine for scanning our containers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先了解 CI/CD（DevOps）流水线中的扫描阶段，然后再探讨如何将监控工具与它们结合使用，以保护我们的系统。让我们从使用 Anchore
    Engine 扫描容器开始。
- en: Scanning using Anchore Engine
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Anchore Engine 进行扫描
- en: When building out a DevOps pipeline, scanning our containers for security issues
    is an important consideration. One of the final steps in a typical CI process
    is to build the container itself, having tested the software we intend to deploy
    to it. As you have seen throughout this book, we have experimented with a number
    of technologies deployed within containers. While there are many security tools
    for each language, whether it be JavaScript or PHP (which are sadly out of scope
    for this book), we shouldn't fail to lessen our manual security burden at the
    container level by using automated tools.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 DevOps 流水线时，扫描我们的容器以查找安全问题是一个重要的考虑因素。典型 CI 过程的最后一步之一是构建容器本身，此前我们已经测试了计划部署到其中的软件。正如你在本书中所见，我们在容器中实验了多种技术。尽管每种语言都有许多安全工具，无论是
    JavaScript 还是 PHP（这些在本书的范围之外），但我们不应忽视通过使用自动化工具减少容器级别的手动安全负担。
- en: While we have seen the importance of pulling down signed images, it certainly
    doesn't hurt to scan them. As the saying goes, *better safe than sorry!*
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经看到拉取签名镜像的重要性，但扫描它们也无妨。正如俗话所说，*小心驶得万年船！*
- en: If we discover that an image we have included in our build is compromised or
    a tag violates an internal work security policy or compliance, we know that the
    whole build is thus vulnerable to attack and can in turn prevent it from reaching
    our production environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们发现构建中包含的镜像已被入侵，或某个标签违反了内部工作安全政策或合规性规定，我们就知道整个构建因此容易受到攻击，并可以防止其进入生产环境。
- en: 'Therefore, we can think of the security scanning process as the following two
    interrelated steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将安全扫描过程视为以下两个相互关联的步骤：
- en: Looking at the image we are including in the `Dockerfile`, and also the configuration
    in the `Dockerfile` itself.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看我们在 `Dockerfile` 中包含的镜像，以及 `Dockerfile` 本身的配置。
- en: Ensuring that the container matches any internal requirements that we may have
    such as not using blacklisted images. In this case, the image may have not been
    blacklisted purely for security reasons, but also for performance.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保容器符合我们可能有的任何内部要求，比如不使用黑名单中的镜像。在这种情况下，镜像可能并非仅因安全原因而被列入黑名单，还可能是出于性能考虑。
- en: In order to accommodate these two factors, we need a container scanning tool
    that allows us the flexibility of defining our own policies on top of standard
    security considerations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应这两个因素，我们需要一个容器扫描工具，它允许我们在标准安全考虑的基础上定义自己的策略。
- en: "One of the most popular open source tools on the market that allows us to meet\
    \ both these goals is Anchore Engine. You can find the official website at: \L\
    [https://anchore.com/engine/](https://anchore.com/engine/)."
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上最受欢迎的开源工具之一，允许我们实现这两个目标的是 Anchore Engine。你可以访问其官方网站：[https://anchore.com/engine/](https://anchore.com/engine/)。
- en: In addition to a large number of features we will shortly investigate, it is
    also an open source project. So, if you wish to contribute to it, make sure to
    check out the GitHub repository at [https://github.com/anchore/anchore-engine](https://github.com/anchore/anchore-engine).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们很快将要探讨的大量功能外，它还是一个开源项目。所以，如果你想为它做出贡献，确保访问 GitHub 仓库：[https://github.com/anchore/anchore-engine](https://github.com/anchore/anchore-engine)。
- en: At its heart, Anchore is an engine for scanning containers for security issues.
    It can easily be hooked into your CI pipeline to provide vulnerability and policy
    scanning prior to deployment. Let's take a look at getting it installed and running
    a basic scan against the latest Alpine image.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Anchore 的核心是一个扫描容器安全问题的引擎。它可以轻松集成到你的 CI 流水线中，在部署前提供漏洞和策略扫描。让我们看看如何安装并对最新的 Alpine
    镜像进行基本扫描。
- en: Installing Anchore Engine
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Anchore Engine
- en: 'Installing Anchore Engine is straightforward. First, we need to start with
    the engine portion of the product. Let''s create and navigate into a new directory
    called `aevolume`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Anchore Engine 非常简单。首先，我们需要从产品的引擎部分开始。让我们创建并进入一个名为 `aevolume` 的新目录：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, pull down the latest version of Anchore Engine:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，拉取最新版本的 Anchore Engine：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can now run Docker''s `create` command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行 Docker 的 `create` 命令：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Use curl to grab the docker-compose.yaml
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 curl 获取 docker-compose.yaml
- en: 'You can also copy the `docker-compose.yaml` via curl using: `curl` [https://docs.anchore.com/current/docs/engine/quickstart/docker-compose.yaml](https://docs.anchore.com/current/docs/engine/quickstart/docker-compose.yaml)
    `> docker-compose.yaml`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过 curl 复制 `docker-compose.yaml`，使用：`curl` [https://docs.anchore.com/current/docs/engine/quickstart/docker-compose.yaml](https://docs.anchore.com/current/docs/engine/quickstart/docker-compose.yaml)
    `> docker-compose.yaml`
- en: 'Copy over the `docker-compose` file to your current directory and then remove
    the `ae` folder that was created:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `docker-compose` 文件复制到当前目录，然后删除创建的 `ae` 文件夹：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, run the `pull` and `up` commands as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运行 `pull` 和 `up` 命令，如下所示：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we need to install the CLI that can interact with the engine. You have
    several options here, including the Docker container:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装一个可以与引擎交互的 CLI。你有几个选择，其中包括 Docker 容器：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also use one of the methods listed here, which will install the CLI
    locally onto your machine: [https://github.com/anchore/anchore-cli](https://github.com/anchore/anchore-cli).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用这里列出的一种方法，这将把 CLI 安装到你本地的机器上：[https://github.com/anchore/anchore-cli](https://github.com/anchore/anchore-cli)。
- en: 'The Python version of the CLI can be installed using the following commands:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令安装 Python 版本的 CLI：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you have pulled the container image and wish to use the default credentials,
    run the following command to be dropped into the CLI shell:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经拉取了容器镜像并希望使用默认凭据，请运行以下命令进入 CLI shell：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the following section will be use the Python command line version of the
    CLI to interact with the engine.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将使用 Python 版本的 CLI 来与引擎交互。
- en: 'You can now execute the CLI commands against the engine from within the container
    shell, or from the CLI if you''ve installed it manually. The following example
    demonstrates calling the endpoint via the CLI, passing in the credentials and
    endpoint, and requesting the system status information:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以在容器 shell 内或如果手动安装了 CLI，也可以从 CLI 执行命令。以下示例演示了如何通过 CLI 调用端点，传递凭证和端点，并请求系统状态信息：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should now see some status results in your console indicating the engines
    are up:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该在控制台中看到一些状态结果，表明引擎已启动：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now let's review the scanning step.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回顾一下扫描步骤。
- en: Adding and scanning images
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加并扫描镜像
- en: Let's try out Anchore Engine by running a scan on the latest Alpine container.
    You'll remember that Alpine is the base operating system that our `shipitclicker`
    image version 0.1 has been using so far. Therefore, confirming this is free of
    issues is a good first step.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用 Anchore Engine 扫描最新的 Alpine 容器。你会记得，Alpine 是我们 `shipitclicker` 镜像版本
    0.1 到目前为止使用的基础操作系统。因此，确认它没有问题是一个不错的第一步。
- en: When we run a scan, it checks the image against what is known as a set of **policies**.
    Policies in Anchore are collections of whitelists and checks that the image must
    pass.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行扫描时，它会根据一组**策略**检查镜像。Anchore 中的策略是镜像必须通过的白名单和检查的集合。
- en: 'The process to kick off a scan is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 启动扫描的过程如下：
- en: 'Let''s add the Alpine image using the CLI command by executing the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过执行以下命令，使用 CLI 添加 Alpine 镜像：
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When this completes successfully, you should see something similar to the following.
    This tells us the image was added:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当此步骤成功完成时，你应该会看到类似以下的内容。这告诉我们镜像已经被添加：
- en: '[PRE11]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Our image hasn''t been analyzed by Anchore yet. This is where we extract and
    classify metadata. So, let''s move the image into this state as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的镜像尚未通过 Anchore 分析。这是我们提取和分类元数据的地方。所以，让我们按以下步骤将镜像移动到这个状态：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once complete, we can now run a vulnerability scan on the Alpine image using
    this command. Here, we are checking for operating-system-level package vulnerabilities
    using the `os` property. In addition to `os`, we have the option of checking for
    `non-os` (this includes language-specific packages such as Python PIP and Ruby
    GEM types) and `all`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们现在可以使用此命令在 Alpine 镜像上运行漏洞扫描。在这里，我们使用 `os` 属性检查操作系统级别的包漏洞。除了 `os`，我们还可以选择检查
    `non-os`（这包括语言特定的包，如 Python PIP 和 Ruby GEM 类型）和 `all`：
- en: '[PRE13]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If everything is successful and the image passes, you will not see any vulnerabilities
    displayed on the screen.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一切顺利且镜像通过，你将不会在屏幕上看到任何漏洞。
- en: 'If a vulnerability is found, it will come back in the following format:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果发现漏洞，它将以以下格式返回：
- en: '[PRE14]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: By default, the basic Anchore installation policy will scan for CVE issues and
    Dockerfile problems, such as those we have explored in the previous few chapters.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，基本的 Anchore 安装策略将扫描 CVE 问题和 Dockerfile 问题，像我们在前几章中探讨过的那些问题。
- en: 'Now you have the scanning engine in place, you can begin to build out your
    own policies and scan against them. For more information, refer to the Anchor
    policy documentation:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经配置了扫描引擎，可以开始构建自己的策略并进行扫描。更多信息，请参见 Anchor 策略文档：
- en: '[https://docs.anchore.com/current/docs/using/cli_usage/policies/](https://docs.anchore.com/current/docs/using/cli_usage/policies/)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.anchore.com/current/docs/using/cli_usage/policies/](https://docs.anchore.com/current/docs/using/cli_usage/policies/)'
- en: 'Also, to see examples of policies you can copy and modify, check out the Anchore
    Hub page on GitHub:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，要查看你可以复制和修改的策略示例，请查看 GitHub 上的 Anchore Hub 页面：
- en: '[https://github.com/anchore/hub](https://github.com/anchore/hub)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/anchore/hub](https://github.com/anchore/hub)'
- en: 'Whether defining custom policies or reusing others, these JSON files can be
    added using the CLI:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是定义自定义策略还是重用其他策略，这些 JSON 文件都可以通过 CLI 添加：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once added, they can then be activated using the `activate` command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加完成，就可以使用 `activate` 命令激活它们：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you need to know a policy ID, you can use the `policy list` command from
    the CLI:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要知道一个策略 ID，可以使用 CLI 中的`policy list`命令：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As an experiment, you might like to run the default or your own policies against
    the other images in the Docker for Developers Docker Hub repository:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 作为实验，你可能希望在 Docker for Developers Docker Hub 仓库中的其他镜像上运行默认的或你自己的策略：
- en: '[https://hub.docker.com/r/dockerfordevelopers/shipitclicker/tags](https://hub.docker.com/r/dockerfordevelopers/shipitclicker/tags)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://hub.docker.com/r/dockerfordevelopers/shipitclicker/tags](https://hub.docker.com/r/dockerfordevelopers/shipitclicker/tags)'
- en: 'This covers the basics of getting up and running. If you wish to add scanning
    to your DevOps pipeline, Anchore integrates with a number of CI/CD systems, including
    the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了启动和运行的基础。如果您希望将扫描功能添加到您的 DevOps 流水线中，Anchore 可以与多个 CI/CD 系统集成，包括以下系统：
- en: CloudBees
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudBees
- en: GitHub
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: GitLab
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab
- en: CircleCI
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircleCI
- en: Codefresh
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Codefresh
- en: 'Integration instructions for each platform can be found on the Anchore website:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台的集成说明可以在 Anchore 网站上找到：
- en: '[https://docs.anchore.com/current/docs/using/integration/ci_cd/](https://docs.anchore.com/current/docs/using/integration/ci_cd/)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.anchore.com/current/docs/using/integration/ci_cd/](https://docs.anchore.com/current/docs/using/integration/ci_cd/)'
- en: 'Anchore also includes a plugin for Jenkins, so you can experiment with integrating
    it with the Jenkins setup we completed earlier in this book:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Anchore 还包括一个 Jenkins 插件，因此您可以尝试将其与本书中我们早些时候完成的 Jenkins 设置集成：
- en: '[https://plugins.jenkins.io/anchore-container-scanner/](https://plugins.jenkins.io/anchore-container-scanner/)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://plugins.jenkins.io/anchore-container-scanner/](https://plugins.jenkins.io/anchore-container-scanner/)'
- en: Let's quickly mention another tool before we move on to looking at monitoring
    tools.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续了解监控工具之前，先简单提一下另一个工具。
- en: A brief mention of Chef InSpec
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简要提及 Chef InSpec
- en: Another tool you may be interested in reviewing when considering scanning container
    infrastructure is Chef InSpec.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个您可能感兴趣的扫描容器基础设施的工具是 Chef InSpec。
- en: Chef InSpec is an open source framework like Anchore but geared toward testing
    and auditing all of your applications and infrastructure. This includes running
    auditing tests against Docker. If you are looking for an all-in-one solution for
    infrastructure beyond just your container environment, this may meet your needs.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Chef InSpec 是一个开源框架，类似于 Anchore，但它专注于测试和审计所有应用程序和基础设施。这包括对 Docker 进行审计测试。如果您在寻找一个不仅限于容器环境的基础设施一体化解决方案，这可能符合您的需求。
- en: Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A complete walk-through of InSpec is out of scope of this book, however, if
    you would like to read more about it, you can find further information in the
    document portal at the InSpec website: [https://www.inspec.io/docs/](https://www.inspec.io/docs/).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的范围不包括 InSpec 的完整操作指南，但如果您想了解更多，可以访问 InSpec 网站的文档门户：[https://www.inspec.io/docs/](https://www.inspec.io/docs/)。
- en: In summary, we can scan our containers before deploying them to check if they
    are secure. Let's now move on and look at Docker stats for container monitoring.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们可以在部署容器之前对其进行扫描，以检查其安全性。现在让我们继续，了解 Docker stats 用于容器监控。
- en: Native monitoring locally using Docker stats
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Docker stats 进行本地原生监控
- en: Now we have deployed our containers and believe that they are secure, we should
    consider using monitoring tools to review performance and help investigate problems
    when they arise.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经部署了容器，并相信它们是安全的，我们应考虑使用监控工具来检查性能，并在出现问题时帮助调查。
- en: Before exploring some of the complex and comprehensive tools available in the
    cloud, we can use Docker's native stats tool to get a quick overview of the container's
    health. This can be useful if you are quickly testing a container in an isolated
    sandbox environment due to a suspicion that some software on it may be using up
    resources in an anomalous fashion – for example, if you suspect a web application
    may be infected by a coin miner that wasn't picked up at the CI stage.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索云中一些复杂且全面的工具之前，我们可以使用 Docker 的原生 stats 工具快速概览容器的健康状况。如果您怀疑某些软件可能在容器中异常消耗资源，例如怀疑
    Web 应用程序可能感染了未在 CI 阶段被发现的矿工程序，这时该工具会非常有用，尤其是当您快速测试一个孤立沙箱环境中的容器时。
- en: Note
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Running a container in a VM sandbox, as well as allowing you to probe performance
    metrics, allows you to safely scan it for security issues without risking infecting
    the underlying machine.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟机沙箱中运行容器，并允许您探查性能指标，能够在不冒感染底层机器风险的情况下安全地扫描容器的安全问题。
- en: 'To access data on your container''s performance, you can execute the following
    command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问容器性能数据，您可以执行以下命令：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For each container, you will see CPU usage, memory usage, the memory limit
    (`MEM`), `% NET I/O`, and finally, `BLOCK I/O`. The following example demonstrates
    a typical output:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个容器，您将看到 CPU 使用率、内存使用率、内存限制（`MEM`）、`% NET I/O` 和最后的 `BLOCK I/O`。以下示例展示了一个典型的输出：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: While the `stats` command is useful when doing local development or if you wish
    to get a quick snapshot of how a system is performing, it would be nice to gather
    a more comprehensive set of metrics. One method of achieving this is to use the
    Stats API. We'll now briefly look at this and also consider some of the security
    implications around it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `stats` 命令在进行本地开发或快速获取系统性能快照时很有用，但收集更全面的指标会更好。实现这一目标的一种方法是使用 Stats API。我们现在简要了解一下它，并考虑它的安全影响。
- en: Using the Stats API
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Stats API
- en: 'The Stats API is a more comprehensive set of results, returned in JSON format,
    and is available on the Docker socket:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Stats API 是一组更全面的结果，以 JSON 格式返回，并可以通过 Docker 套接字访问：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You'll remember from the *Securing the Daemon Socket* section in [*Chapter 12*](B11641_12_Final_NM_ePub.xhtml#_idTextAnchor278),
    *Introduction to Container Security*, that we need to ensure an attacker cannot
    compromise the socket and then use it to gain root access to the underlying host.
    We can do this by encrypting the traffic using TLS. Refer back to this chapter
    if you need help in getting this set up.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该还记得在[*第 12 章*](B11641_12_Final_NM_ePub.xhtml#_idTextAnchor278)中的 *《守护进程套接字安全》*
    部分提到，我们需要确保攻击者无法攻破套接字，并利用它获得对底层主机的 root 访问权限。我们可以通过使用 TLS 加密流量来实现这一点。如果你需要帮助设置，可以参考这一章。
- en: The Stats API operates using a REST architecture and thus takes HTTP requests
    as queries. You can see examples on the official documentation site at [https://docs.docker.com/engine/api/latest/](https://docs.docker.com/engine/api/latest/).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Stats API 使用 REST 架构，因此接受 HTTP 请求作为查询。你可以在官方文档站点查看示例：[https://docs.docker.com/engine/api/latest/](https://docs.docker.com/engine/api/latest/)。
- en: Requests to the API can be made from the command line using netcat or `curl`,
    with a third-party tool such as Postman, or you can write your own script using
    Python, Bash, or similar, to hit the endpoint.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过命令行使用 netcat 或 `curl` 发送 API 请求，也可以使用第三方工具如 Postman，或者你可以使用 Python、Bash
    等编写脚本来访问 API 端点。
- en: 'Using `curl` as an example, you can replace the value in this command with
    your own and execute it:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以`curl`为例，你可以将命令中的值替换为你自己的，然后执行它：
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You should see a JSON object returned with the results. These are more comprehensive
    than using the Docker command, and may be more useful if you wish to save them
    as JSON files for further analysis, for example, if gathering data on a container
    you may believe is compromised.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个返回的 JSON 对象，包含结果。这些结果比使用 Docker 命令更为全面，如果你想将其保存为 JSON 文件以供进一步分析（例如，如果你认为某个容器可能被攻击时），它们可能会更有用。
- en: In addition to the native Docker tools, Google provides **Container Advisor**
    (**cAdvisor**) for gathering metrics on your container. We will now briefly take
    a look at this, as a third option for local monitoring.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本地 Docker 工具，谷歌还提供了 **容器顾问** (**cAdvisor**) 用于收集容器的指标。我们现在简要介绍一下它，作为本地监控的第三种选择。
- en: cAdvisor for container monitoring
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cAdvisor 用于容器监控
- en: 'cAdvisor is a Google-managed software project for providing container insights
    into container performance and resource usage. The source code for cAdvisor is
    available on GitHub at the following URL:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: cAdvisor 是一个由谷歌管理的软件项目，用于提供容器性能和资源使用情况的洞察。cAdvisor 的源代码可以在 GitHub 上找到，网址如下：
- en: '[https://github.com/google/cadvisor](https://github.com/google/cadvisor)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/google/cadvisor](https://github.com/google/cadvisor)'
- en: 'To test it out, you can use the standard demo container provided by Google.
    Simply run the following command to pull it down from Google Container Registry
    and start it up:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试，你可以使用谷歌提供的标准演示容器。只需运行以下命令，从 Google Container Registry 拉取并启动它：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can now access cAdvisor's web portal on port `8080` of `localhost`. If you
    have other services running on this port, such as Jenkins, you can change the
    cAdvisor port in the preceding command.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以在 `localhost` 的 `8080` 端口访问 cAdvisor 的 Web 门户。如果该端口上有其他服务运行，例如 Jenkins，你可以在之前的命令中更改
    cAdvisor 的端口。
- en: 'Try accessing `http://localhost:8080/containers/` and you should see the dashboard
    shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试访问 `http://localhost:8080/containers/`，你应该能看到以下截图中的仪表板：
- en: '![Figure 15.1 – cAdvisor dashboard](img/B11641_15_001.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.1 – cAdvisor 仪表板](img/B11641_15_001.jpg)'
- en: Figure 15.1 – cAdvisor dashboard
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – cAdvisor 仪表板
- en: From this dashboard, you can explore a variety of metrics ranging from filesystem
    and memory to CPU and processes. Monitoring these for poor performance can be
    a useful tool to monitor security issues as we have noted elsewhere.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从此仪表盘，你可以探索从文件系统、内存到 CPU 和进程等各种指标。监控这些指标以识别性能问题，可以作为我们在其他地方提到的监控安全问题的有用工具。
- en: For example, if resource usage seems to be abnormally high, this can be an indication
    of software that it isn't functioning properly, or a potential security issue,
    such as malware running on the container.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果资源使用量异常高，这可能表明软件无法正常运行，或者是潜在的安全问题，比如恶意软件在容器中运行。
- en: All of this is very useful for small local systems and perhaps a quick investigation
    of a potentially compromised container, but what about monitoring our containers
    in a production environment and gathering actionable data if we believe a security
    issue may exist? Well, we can look at one of the many third-party tools that exist
    that allow us to gather metrics and build comprehensive dashboard and alerting
    systems.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些对于小型本地系统以及可能对潜在被攻破的容器进行快速调查非常有用，但如果我们认为在生产环境中可能存在安全问题，如何监控我们的容器并收集可操作的数据呢？我们可以考虑使用一些市场上流行的第三方工具，来收集指标并构建全面的仪表盘和告警系统。
- en: To demonstrate this, we are going to look at one of the most popular tools on
    the market for gathering monitoring data for Kubernetes and Docker environments,
    Datadog.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，我们将看一下市场上最受欢迎的用于收集 Kubernetes 和 Docker 环境监控数据的工具之一，Datadog。
- en: Aggregating monitoring data in the cloud with Datadog
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在云中使用 Datadog 聚合监控数据
- en: For commercial projects where environments are deployed to a cloud environment
    or on your own data center, we need a platform that is capable of aggregating
    data from a variety of inputs and then presenting it in a fashion you can work
    with.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些将环境部署到云环境或自建数据中心的商业项目，我们需要一个平台，能够从各种输入源聚合数据，并以你可以操作的方式呈现数据。
- en: Datadog is one such product capable of achieving this and provides plugins for
    both simple Docker and advanced Kubernetes-based environments. It is also supported
    on a number of platforms, including major cloud providers such as AWS. Datadog
    ([https://www.datadoghq.com/](https://www.datadoghq.com/)) offers a free 14-day
    trial so you can experiment with their container features and decide if they meet
    your needs. You'll find this a worthy rival to some of the tools explored in earlier
    chapters.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog 是一个能够实现这一目标的产品，提供了适用于简单的 Docker 和高级 Kubernetes 环境的插件。它还支持多个平台，包括主要的云服务商，如
    AWS。Datadog（[https://www.datadoghq.com/](https://www.datadoghq.com/)）提供14天免费的试用期，你可以尝试其容器功能，看看是否符合你的需求。你会发现它是一些在前几章中探索过的工具的有力竞争者。
- en: So, now let's take a look at the agents you can run for Kubernetes and Docker
    on your nodes to start sending data back to Datadog.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看你可以在节点上运行的 Kubernetes 和 Docker 代理，以开始将数据发送回 Datadog。
- en: Datadog agents for Docker and Kubernetes
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 和 Kubernetes 的 Datadog 代理
- en: Once you have an account set up at [https://www.datadoghq.com/](https://www.datadoghq.com/),
    you can install the Datadog Agent on a test node to monitor performance.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在[https://www.datadoghq.com/](https://www.datadoghq.com/)设置了账户，你就可以在测试节点上安装
    Datadog 代理来监控性能。
- en: Tip
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'We''d recommend starting with a test environment before trying to deploy the
    production.  We also recommend that, before deploying to your production environment,
    you familiarize yourself with the Docker and Kubernetes agent documentation at:
    [https://docs.datadoghq.com/agent/docker/?tab=standard](https://docs.datadoghq.com/agent/docker/?tab=standard).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议在尝试部署到生产环境之前，先从测试环境开始。我们还建议在部署到生产环境之前，先熟悉 Docker 和 Kubernetes 代理文档，网址是：[https://docs.datadoghq.com/agent/docker/?tab=standard](https://docs.datadoghq.com/agent/docker/?tab=standard)。
- en: The following examples will cover installing Docker Agent and also the Kubernetes
    agent. Each example uses a cluster with only a single node for demonstration purposes.
    You are welcome to reuse the Docker container from [*Chapter 12*](B11641_12_Final_NM_ePub.xhtml#_idTextAnchor278),
    *Introduction to Container Security*, or one of the other containers used elsewhere
    in this book.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将涵盖安装 Docker 代理和 Kubernetes 代理。每个示例都使用仅包含单个节点的集群进行演示。你可以重复使用[*第 12 章*](B11641_12_Final_NM_ePub.xhtml#_idTextAnchor278)中的
    Docker 容器，*容器安全简介*，或者本书其他地方使用的容器之一。
- en: Installing and monitoring Docker Agent
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装并监控 Docker 代理
- en: Your first task is to install the Docker Agent on the host. The Datadog Docker
    Agent is responsible for collecting the metrics and passing them back to your
    account dashboard.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一个任务是安装主机上的Docker代理。Datadog Docker代理负责收集度量数据并将其传回你的账户仪表板。
- en: 'Installing the agent is now incredibly easy. From within your host, execute
    the following Docker command to include the Datadog Agent:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在安装代理变得非常简单。从你的主机内执行以下Docker命令，以包含Datadog代理：
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Based upon your OS version, and the version of the agent you have installed,
    you can then confirm it is running by checking the list of commands here:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的操作系统版本和已安装的代理版本，你可以通过检查此处的命令列表来确认它是否正在运行：
- en: https://docs.datadoghq.com/agent/guide/agent-commands/?tab=agentv6v7#agent-status-and-information
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: https://docs.datadoghq.com/agent/guide/agent-commands/?tab=agentv6v7#agent-status-and-information
- en: 'From the Datadog dashboard you should now see data being returned. You can
    now begin to explore the metrics that come back from your containers, and set
    alerts when issues arise:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 从Datadog仪表板中，你现在应该能看到返回的数据。你可以开始探索从容器返回的度量数据，并在出现问题时设置警报：
- en: '![Figure 15.2 – Example of the Datadog dashboard showing metrics](img/B11641_15_002.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.2 – Datadog仪表板显示度量的示例](img/B11641_15_002.jpg)'
- en: Figure 15.2 – Example of the Datadog dashboard showing metrics
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2 – Datadog仪表板显示度量的示例
- en: 'The next area you may be interested in exploring is the **Security** option
    in the menu. Select this and follow the wizard to set up security monitoring.
    Once complete, you can enable and disable security **Detection Rules**, as the
    following screenshot demonstrates:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能感兴趣的下一个领域是菜单中的**安全**选项。选择该项并按照向导设置安全监控。完成后，你可以启用和禁用安全**检测规则**，如下图所示：
- en: '![Figure 15.3 – Detection rules in Datadog](img/B11641_15_003.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.3 – Datadog中的检测规则](img/B11641_15_003.jpg)'
- en: Figure 15.3 – Detection rules in Datadog
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3 – Datadog中的检测规则
- en: 'For more on setting monitors and alerts for containers in Datadog, please refer
    to the documentation here:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在Datadog中为容器设置监视器和警报的更多信息，请参阅此文档：
- en: '[https://docs.datadoghq.com/monitors/](https://docs.datadoghq.com/monitors/)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.datadoghq.com/monitors/](https://docs.datadoghq.com/monitors/)'
- en: Let's now look at the Kubernetes agent equivalent.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一下Kubernetes代理的对应内容。
- en: Installing and monitoring the Kubernetes agent
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装并监控Kubernetes代理
- en: As with our previous Docker example, we need to install the agent first. To
    do this, we can deploy a DaemonSet via Helm. The following instructions use Helm
    version 3.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 和我们之前的Docker示例一样，我们需要先安装代理。为此，我们可以通过Helm部署一个DaemonSet。以下指令使用的是Helm 3版本。
- en: Tip
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Remember to run add `helm repo add stable,` [https://kubernetes-charts.storage.googleapis.com](https://kubernetes-charts.storage.googleapis.com),
    if you haven't already, to add stable to your repositories.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有运行，记得添加 `helm repo add stable,` [https://kubernetes-charts.storage.googleapis.com](https://kubernetes-charts.storage.googleapis.com)，以将stable添加到你的仓库。
- en: You can download the official Helm file (`values.yaml`) containing the configuration
    from GitHub at ([https://github.com/helm/charts/blob/master/stable/datadog/values.yaml](https://github.com/helm/charts/blob/master/stable/datadog/values.yaml)).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从GitHub下载包含配置的官方Helm文件（`values.yaml`），地址为([https://github.com/helm/charts/blob/master/stable/datadog/values.yaml](https://github.com/helm/charts/blob/master/stable/datadog/values.yaml))。
- en: 'Next, you will need to grab your API key from your account. With the API key,
    we can now complete the installation process. In the following command, replace
    `{API_KEY}` with your own:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要从你的账户中获取API密钥。使用API密钥，我们现在可以完成安装过程。在以下命令中，将`{API_KEY}`替换为你自己的密钥：
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You should see a confirmation in your terminal that the deployment was successful:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在终端中看到一个确认信息，表明部署已成功：
- en: '![Figure 15.4 – Datadog Agent deployment ](img/B11641_15_004.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.4 – Datadog代理部署](img/B11641_15_004.jpg)'
- en: Figure 15.4 – Datadog Agent deployment
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4 – Datadog代理部署
- en: 'Now you have deployed the agent, it will start to collect metrics from Kubernetes:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经部署了代理，它将开始从Kubernetes收集度量数据：
- en: '![Figure 15.5 – Example dashboard metrics](img/B11641_15_005.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.5 – 仪表板度量示例](img/B11641_15_005.jpg)'
- en: Figure 15.5 – Example dashboard metrics
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5 – 仪表板度量示例
- en: As part of this installation process, the `kube-state-metrics` Helm chart is
    also included. This Helm chart installs the `kube-state-metrics` service ([https://github.com/kubernetes/kube-state-metrics](https://github.com/kubernetes/kube-state-metrics)).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个安装过程中，`kube-state-metrics` Helm图表也被包含在内。这个Helm图表安装了`kube-state-metrics`服务([https://github.com/kubernetes/kube-state-metrics](https://github.com/kubernetes/kube-state-metrics))。
- en: A variety of data is collected by this service and you can view the exposed
    metrics at [https://github.com/kubernetes/kube-state-metrics/tree/master/docs](https://github.com/kubernetes/kube-state-metrics/tree/master/docs).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此服务收集了多种数据，你可以通过 [https://github.com/kubernetes/kube-state-metrics/tree/master/docs](https://github.com/kubernetes/kube-state-metrics/tree/master/docs)
    查看暴露的指标。
- en: For example, you may be interested in the metrics around secrets, so you can
    see what data is being gathered by reviewing the Kubernetes log collection document.
    You can also enable log collection via Helm. To do this, update the `datadog-values.yaml`
    file to set the `enabled` and `containerCollectAll` key-value pairs both to `true`.
    Once you have done this, run `helm upgrade` to update your Datadog Helm chart.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能对与机密相关的指标感兴趣，这样你就可以通过查看 Kubernetes 日志收集文档来了解收集了哪些数据。你还可以通过 Helm 启用日志收集。为此，更新
    `datadog-values.yaml` 文件，将 `enabled` 和 `containerCollectAll` 键值对都设置为 `true`。完成后，运行
    `helm upgrade` 更新 Datadog Helm 图表。
- en: With the metrics from your nodes being sent back to the Datadog default Kubernetes
    dashboard, you can start to configure alerting and monitoring and explore the
    many features Datadog offers.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将节点的指标发送回 Datadog 默认的 Kubernetes 仪表盘，你可以开始配置警报和监控，并探索 Datadog 提供的众多功能。
- en: 'For example, you can create a custom dashboard that displays the number of
    security signals discovered:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以创建一个自定义仪表盘，显示发现的安全信号数量：
- en: '![](img/B11641_15_006.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B11641_15_006.jpg)'
- en: Figure 15.6 – Dashboard list
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.6 – 仪表盘列表
- en: We've briefly seen how we can use third-party tools to monitor our containers
    in a security context. This can help to alert us about security issues that may
    manifest their symptoms as performance problems.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经简要了解了如何使用第三方工具在安全上下文中监控我们的容器。这可以帮助我们对可能表现为性能问题的安全问题发出警报。
- en: Let's now look at some of the tools provided by the major cloud platforms out
    there. Both Datadog and the CI/CD scanning pipeline we discussed can be integrated
    with the providers listed in the following sections, to provide an even more comprehensive
    security posture.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看一些主要云平台提供的工具。我们之前讨论的 Datadog 和 CI/CD 扫描管道可以与以下各节中列出的提供商集成，以提供更加全面的安全防护。
- en: Securing your containers using AWS
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS 来保护你的容器
- en: There are a number of approaches we can take to securing containers in the cloud.
    We will start by looking at **Amazon Web Services**, commonly known as **AWS**.
    This section of the book assumes you are already familiar with working in AWS
    for hosting container-based projects. If you use a different service, such as
    Azure or GCP, then please feel free to skip ahead to the *Azure container security*
    and *Google container security options* sections respectively. The topic of AWS
    and container hosting is also discussed in [*Chapter 5*](B11641_05_Final_NM_ePub.xhtml#_idTextAnchor080),
    *Alternatives for Deploying and Running Containers in Production*, and [*Chapter
    8*](B11641_08_Final_AM_ePub.xhtml#_idTextAnchor157), *Deploying Docker Apps to
    Kubernetes*. Let's take a look at the tools used for monitoring in AWS.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采取多种方法来保护云中的容器。我们将从 **Amazon Web Services**（通常称为 **AWS**）开始。本书的这一部分假设你已经熟悉在
    AWS 中托管基于容器的项目。如果你使用的是其他服务，如 Azure 或 GCP，可以跳过并直接阅读 *Azure 容器安全* 和 *Google 容器安全选项*
    部分。AWS 和容器托管的主题也在 [*第 5 章*](B11641_05_Final_NM_ePub.xhtml#_idTextAnchor080)，*生产环境中部署和运行容器的替代方案*，以及
    [*第 8 章*](B11641_08_Final_AM_ePub.xhtml#_idTextAnchor157)，*将 Docker 应用部署到 Kubernetes*
    中进行了讨论。让我们看看在 AWS 中用于监控的工具。
- en: Security alerts for AWS with GuardDuty
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GuardDuty 的 AWS 安全警报
- en: A number of tools exist either in AWS or as third-party plugins that can be
    used to monitor your Amazon environment hosting your container infrastructure.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 或作为第三方插件存在的多种工具可以用于监控托管容器基础设施的 Amazon 环境。
- en: Amazon's major tool for monitoring security issues within a VPC is GuardDuty
    ([https://aws.amazon.com/guardduty/](https://aws.amazon.com/guardduty/)).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊用于监控 VPC 中安全问题的主要工具是 GuardDuty ([https://aws.amazon.com/guardduty/](https://aws.amazon.com/guardduty/))。
- en: We've seen how we can monitor container health with Datadog, but also saw how
    important it is to monitor the environment that supports our infrastructure. Complex
    production instances often use AWS services that sit outside of **Elastic Kubernetes
    Service** (**EKS**), **Elastic Container Service** (**ECS**), and **Elastic Compute
    Cloud** (**EC2**). Examples include the IAM roles you might have used to set up
    CloudWatch metrics or S3 buckets earlier in this book.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何使用 Datadog 监控容器健康状况，但也看到监控支持我们基础设施的环境是多么重要。复杂的生产实例通常会使用 AWS 服务，这些服务位于**弹性
    Kubernetes 服务**（**EKS**）、**弹性容器服务**（**ECS**）和**弹性计算云**（**EC2**）之外。例如，您可能在本书早些时候设置
    CloudWatch 指标或 S3 存储桶时使用的 IAM 角色。
- en: AWS GuardDuty provides a mechanism to monitor our cloud-based environment to
    ensure that any attacks within the VPC that hosts our containers can be tracked
    down. This is achieved by being integrated with CloudWatch, which allows us to
    trigger certain security actions based upon the type of alert we see, such as
    triggering a lambda function, or sending the events on to a third-party application
    or an S3 bucket for storage.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: AWS GuardDuty 提供了一种机制来监控我们的云环境，确保可以追踪到托管容器的 VPC 中发生的任何攻击。这是通过与 CloudWatch 集成实现的，CloudWatch
    使我们能够基于我们看到的警报类型触发某些安全操作，例如触发 Lambda 函数，或将事件发送到第三方应用程序或 S3 存储桶进行存储。
- en: If you wish to enable GuardDuty, you will need a VPC setup hosting your containers,
    such as the one configured in [*Chapter 8*](B11641_08_Final_AM_ePub.xhtml#_idTextAnchor157),
    *Deploying Docker Apps to Kubernetes*.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望启用 GuardDuty，您需要一个托管容器的 VPC 设置，例如在[*第 8 章*](B11641_08_Final_AM_ePub.xhtml#_idTextAnchor157)中配置的那种，*将
    Docker 应用部署到 Kubernetes*。
- en: With this in place, you can now create a rule to allow CloudWatch to send events
    for anything that GuardDuty discovers. This is especially useful for spotting
    whether containers are generating suspicious network traffic in your VPC.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，您现在可以创建一个规则，允许 CloudWatch 发送 GuardDuty 发现的任何事件。这对于检测容器是否在您的 VPC 中生成可疑的网络流量尤其有用。
- en: 'Using the AWS CLI, we can now enable CloudWatch to start sending the previously
    mentioned events. To do this, execute the following command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWS CLI，我们现在可以启用 CloudWatch，开始发送之前提到的事件。为此，请执行以下命令：
- en: '[PRE25]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With these events enabled, you have a number of options for next steps. You
    could, for example, attach a lambda function that will handle events that are
    triggered and act on them, or integrate CloudWatch GuardDuty events with your
    Datadog setup, as outlined here:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 启用这些事件后，您将有多种选择来进行后续操作。例如，您可以附加一个 Lambda 函数，该函数将处理被触发的事件并对其进行操作，或者按照这里的说明，将
    CloudWatch GuardDuty 事件与您的 Datadog 设置集成：
- en: '[https://github.com/DataDog/datadog-serverless-functions/tree/master/aws/logs_monitoring](https://github.com/DataDog/datadog-serverless-functions/tree/master/aws/logs_monitoring)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/DataDog/datadog-serverless-functions/tree/master/aws/logs_monitoring](https://github.com/DataDog/datadog-serverless-functions/tree/master/aws/logs_monitoring)'
- en: 'If you wish to write the results of CloudWatch GuardDuty events to the S3 bucket
    created in [*Chapter 10*](B11641_10_Final_AM_ePub.xhtml#_idTextAnchor226), *Monitoring
    Docker Using Prometheus, Grafana, and Jaeger*, in the *Storing logs for the long
    term with AWS S3* section, then you can attach the lambda function as an event
    rule:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望将 CloudWatch GuardDuty 事件的结果写入[*第 10 章*](B11641_10_Final_AM_ePub.xhtml#_idTextAnchor226)中创建的
    S3 存储桶，*使用 Prometheus、Grafana 和 Jaeger 监控 Docker*部分中的*长期存储日志到 AWS S3*，那么您可以将 Lambda
    函数附加为事件规则：
- en: '[PRE26]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'An example of a lambda function that can be used to write to the S3 bucket
    is provided by AWS at the following link:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了一个可以用来将数据写入 S3 存储桶的 Lambda 函数示例，链接如下：
- en: '[https://aws.amazon.com/blogs/database/monitoring-your-security-with-guardduty-in-real-time-with-amazon-elasticsearch-service/](https://aws.amazon.com/blogs/database/monitoring-your-security-with-guardduty-in-real-time-with-amazon-elasticsearch-service/)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://aws.amazon.com/blogs/database/monitoring-your-security-with-guardduty-in-real-time-with-amazon-elasticsearch-service/](https://aws.amazon.com/blogs/database/monitoring-your-security-with-guardduty-in-real-time-with-amazon-elasticsearch-service/)'
- en: 'Once you have modified this lambda to your needs and added it between the `<`
    and `>` brackets, you can include the required permissions  by running the following
    command:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您根据需要修改了这个 Lambda 并将其添加到 `<` 和 `>` 括号之间，您可以通过运行以下命令来添加所需的权限：
- en: '[PRE27]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This should act as a jumping-off point for you to explore GuardDuty in more
    detail and expand upon the setup you have created over the course of this book.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该作为一个出发点，帮助您更详细地探索 GuardDuty，并扩展您在本书中所创建的设置。
- en: Another way to store findings to S3
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 将发现结果存储到 S3 的另一种方式
- en: 'You can also use the steps provided by AWS here for exporting GuardDuty findings
    to an S3 bucket: [https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_exportfindings.html](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_exportfindings.html)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 AWS 提供的以下步骤，将 GuardDuty 发现结果导出到 S3 存储桶：[https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_exportfindings.html](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_exportfindings.html)
- en: 'Other security features in AWS you may be interested in checking out include
    the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 中，你可能感兴趣的其他安全功能包括：
- en: 'Amazon Inspector for analyzing application security: [https://aws.amazon.com/inspector/](https://aws.amazon.com/inspector/)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于分析应用程序安全的 Amazon Inspector：[https://aws.amazon.com/inspector/](https://aws.amazon.com/inspector/)
- en: 'AWS Security Hub for creating a unified central security center: [https://aws.amazon.com/security-hub/](https://aws.amazon.com/security-hub/)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于创建统一安全中心的 AWS Security Hub：[https://aws.amazon.com/security-hub/](https://aws.amazon.com/security-hub/)
- en: 'Amazon Detective for detecting potential security issues: [https://aws.amazon.com/detective/](https://aws.amazon.com/detective/)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于检测潜在安全问题的 Amazon Detective：[https://aws.amazon.com/detective/](https://aws.amazon.com/detective/)
- en: Each of these services can be enabled through your AWS web console. Let's now
    move on and take a look at some of the options available in Microsoft Azure.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务都可以通过你的 AWS 网站控制台启用。现在，让我们继续，看看 Microsoft Azure 中可用的一些选项。
- en: Securing your containers using Azure
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure 保护你的容器
- en: Azure is Microsoft's flagship cloud service and provides a number of tools you
    can use to deploy and monitor Docker containers. This section assumes some familiarity
    with both Azure and the Log Analytics service.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 是微软的旗舰云服务，提供一系列工具，可以帮助你部署和监控 Docker 容器。本节假设你对 Azure 和 Log Analytics 服务有一定的了解。
- en: Container monitoring in Azure
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 中的容器监控
- en: Microsoft's Container Monitoring solution provides a mechanism to manage Docker
    and Windows hosts from a single place and supports Kubernetes and Docker Swarm,
    both of which have been discussed in this book.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的容器监控解决方案提供了一种机制，可以从一个地方管理 Docker 和 Windows 主机，并支持 Kubernetes 和 Docker Swarm，这两者在本书中都有讨论。
- en: If you are already using Microsoft's AKS service, you may be familiar with the
    monitoring services available on the AKS page, however, it is also possible to
    monitor containers across your whole Microsoft infrastructure in Azure.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在使用微软的 AKS 服务，你可能已经熟悉 AKS 页面上可用的监控服务，但你也可以在 Azure 中监控整个微软基础设施中的容器。
- en: 'To enable the monitoring of your containers, you will need to start by enabling
    the feature by adding it to Log Analytics. You can do this by clicking the **GET
    IT NOW** button on the Azure Marketplace website:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用容器监控，你需要先通过将其添加到 Log Analytics 来启用此功能。你可以通过点击 Azure Marketplace 网站上的**立即获取**按钮来完成：
- en: '[https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.containersoms?tab=overview](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.containersoms?tab=overview)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.containersoms?tab=overview](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.containersoms?tab=overview)'
- en: Once this is complete, you can create a new Log Analytics workspace. From this
    new workspace, record the name you chose, and also obtain the workspace ID and
    key. These are available under the **Advanced settings** of your workspace and
    can be found under the **Connected Sources** | **Linux Servers** options.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你可以创建一个新的 Log Analytics 工作区。从这个新工作区中，记录你选择的名称，并获取工作区 ID 和密钥。这些信息可以在工作区的**高级设置**下找到，并位于**连接的源**
    | **Linux 服务器**选项中。
- en: 'For the purpose of this overview, we are going to assume an environment of
    a single host as we did for Datadog running on Linux. In this scenario, you will
    need to install the Log Analytics agent as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本概述的目的，我们假设一个单主机的环境，就像我们为 Linux 上的 Datadog 所做的那样。在这种情况下，你需要按照以下步骤安装 Log Analytics
    代理：
- en: '[PRE28]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can now restart the agent using the following command:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用以下命令重新启动代理：
- en: '[PRE29]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now let''s try running the monitor against the container as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试对容器运行监控，如下所示：
- en: '[PRE30]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We can modify the event data we collect under the **Data** option of the Log
    Analytics workspace. From here, we can add syslog and also enable the Linux Performance
    Counters.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Log Analytics 工作区的**数据**选项下修改我们收集的事件数据。在这里，我们可以添加 syslog，并启用 Linux 性能计数器。
- en: Once the solution is enabled, you will see the **Container** tile appear. You
    can then drill into the **Container** dashboard to gather metrics.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用该解决方案，你将看到**容器**磁贴出现。然后，你可以深入**容器**仪表盘收集指标。
- en: Now we have some monitoring in place, let's look at some security features that
    are available in Azure for container-based platforms.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一些监控措施，让我们来看看 Azure 中可用于基于容器平台的一些安全功能。
- en: Using Security Center to secure your containers in Azure
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用安全中心保护 Azure 中的容器
- en: With monitoring in place, you can now move on to looking at Microsoft's container
    security tools. The recommended native tool for achieving this in Azure is the
    Security Center service.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 通过监控到位后，您可以继续查看微软的容器安全工具。在 Azure 中实现这一点的推荐本地工具是安全中心服务。
- en: You can sign up to add it to your Azure account by clicking the **Turn on Security
    Center** button at [https://azure.microsoft.com/en-us/services/security-center/](https://azure.microsoft.com/en-us/services/security-center/)
    and sign up for an Azure account at the same time if you wish.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击[https://azure.microsoft.com/en-us/services/security-center/](https://azure.microsoft.com/en-us/services/security-center/)上的**开启安全中心**按钮来注册并将其添加到您的
    Azure 帐户中，如果愿意，您还可以同时注册一个 Azure 帐户。
- en: 'Once you have the feature enabled, you will see that Security Center provides
    a number of features, including the following:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用此功能，您将看到安全中心提供多个功能，包括以下内容：
- en: Container runtime protection
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器运行时保护
- en: Vulnerability management
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞管理
- en: Environment hardening
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境加固
- en: We'll take a look at each of these briefly.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要看一下这些内容。
- en: Container runtime protection
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器运行时保护
- en: 'Security Center''s runtime protection for container environments allows you
    to generate real-time threat metrics that can be used to plan remediation efforts.
    The threat detection mechanism is broken down into two core areas:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 安全中心为容器环境提供的运行时保护功能，允许您生成实时的威胁指标，用于规划修复工作。威胁检测机制分为两个核心领域：
- en: '**At the host level**: At this level, we can monitor for containers acting
    in a malicious or suspicious fashion, including an exposed Docker daemon or a
    privileged command run within the container.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在主机级别**：在此级别，我们可以监控容器是否存在恶意或可疑行为，包括暴露的 Docker 守护进程或容器内运行的特权命令。'
- en: '**At the AKS cluster level**: AKS cluster-level threat detection analyzes the
    Kubernetes audit logs for suspicious activity such as highly privileged role creation
    or a coin miner being detected.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 AKS 集群级别**：AKS 集群级别的威胁检测会分析 Kubernetes 审计日志中的可疑活动，例如创建高度特权角色或检测到矿工程序。'
- en: These two features combined can help to look at the layers of your container
    stack and detect suspicious activity.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个功能结合使用有助于查看容器堆栈的各个层次并检测可疑活动。
- en: Vulnerability management
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞管理
- en: Here, you can use the Container Registries bundle to scan new images when they
    are pushed. Security Center integration with third-party security provider Qualys
    scans the container for some of the vulnerabilities we've discussed in this book.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以使用容器注册表包在推送新镜像时进行扫描。安全中心与第三方安全提供商 Qualys 的集成扫描容器，检测我们在本书中讨论的一些漏洞。
- en: When an issue is detected, it will be logged on the dashboard with a recommended
    remediation step.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测到问题时，它将被记录在仪表板上，并附有推荐的修复步骤。
- en: Environment hardening
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境加固
- en: Security Center provides a variety of tools for monitoring the security of your
    container environment. One of the most important features is running bench mark
    tests, such as the CIS Docker Benchmark, to alert you if your environment's configuration
    is weakened. An example of a CIS control is checking whether containers have unrestricted
    network traffic being exchanged between each other.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 安全中心提供了多种工具来监控容器环境的安全性。最重要的功能之一是运行基准测试，如 CIS Docker 基准测试，如果您的环境配置被削弱，它会发出警告。CIS
    控制的一个示例是检查容器之间是否存在不受限制的网络流量交换。
- en: 'You can download a copy of the CIS Docker Benchmark for free from the CIS website:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 CIS 网站免费下载 CIS Docker 基准测试的副本：
- en: '[https://learn.cisecurity.org/benchmarks](https://learn.cisecurity.org/benchmarks)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.cisecurity.org/benchmarks](https://learn.cisecurity.org/benchmarks)'
- en: Note
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: InSpec users may be interested in downloading the InSpec profile for CIS Docker
    Benchmarking at [https://github.com/dev-sec/cis-docker-benchmark](https://github.com/dev-sec/cis-docker-benchmark).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: InSpec 用户可能对下载用于 CIS Docker 基准测试的 InSpec 配置文件感兴趣，链接在此：[https://github.com/dev-sec/cis-docker-benchmark](https://github.com/dev-sec/cis-docker-benchmark)。
- en: When Security Center spots a problem with your environment, it will flag it
    on the **Recommendations** page of the dashboard for you, so you can start remediating
    the issue.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当安全中心发现您的环境存在问题时，它会在仪表板的**建议**页面上标记出来，以便您可以开始修复该问题。
- en: We've briefly looked at what is available in Azure. Let's wrap up with a quick
    tour of some of GCP's features.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要地了解了Azure中可用的功能。现在，让我们通过快速浏览GCP的一些功能来结束本部分。
- en: Securing your containers using GCP
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GCP保护您的容器
- en: Google offers a number of tools for monitoring containers in both Anthos and
    **Google Kubernetes Engine** (**GKE**).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Google为在Anthos和**Google Kubernetes Engine**（**GKE**）中监控容器提供了多个工具。
- en: For those unfamiliar with Google's offerings, Anthos is a platform that is designed
    for hybrid and multi-cloud deployment and allows you, among other features, to
    deploy container-oriented platforms such as Kubernetes. GKE is Google's enterprise-grade
    Kubernetes platform offered via **Google Cloud Platform** (**GCP**) and can be
    thought of as a rival to Amazon's EKS. Googles Container Registry is a platform
    for storing images that can be reused across your projects.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不熟悉Google产品的人来说，Anthos是一个设计用于混合云和多云部署的平台，它允许您在其中部署容器导向的平台，如Kubernetes等。GKE是Google提供的企业级Kubernetes平台，提供于**Google
    Cloud Platform**（**GCP**），可以视为与Amazon的EKS竞争的对手。Google的容器注册表是一个用于存储镜像的平台，这些镜像可以在您的项目中重用。
- en: 'For the following sections, it is assumed that you have some prior knowledge
    of GCP. If you would like to know more about getting started with GCP, please
    visit the following link:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分中，假设您已具备一定的GCP基础知识。如果您想了解更多关于如何开始使用GCP的信息，请访问以下链接：
- en: '[https://cloud.google.com/gcp/getting-started](https://cloud.google.com/gcp/getting-started)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/gcp/getting-started](https://cloud.google.com/gcp/getting-started)'
- en: Let's start by looking at container security in GCP.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从GCP中的容器安全开始。
- en: Container Analysis and Binary Authorization in GCP
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GCP中的容器分析和二进制授权
- en: A useful feature that Google offers is the **Container Analysis** scanner for
    Container Registry. This feature allows you to scan images for security issues
    and exposes an API for your use to pull down the metadata results. If you enable
    this feature on your account, it will scan all new images that are pushed to the
    registry, however, for existing images you will need to re-push them to trigger
    the scan.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: Google提供的一个有用功能是**容器分析**扫描器，用于容器注册表。此功能允许您扫描镜像中的安全问题，并暴露一个API供您使用，您可以通过它提取元数据结果。如果您在账户中启用此功能，它将扫描所有推送到注册表的新镜像，但对于现有镜像，您需要重新推送它们以触发扫描。
- en: 'The two core features of Container Analysis are the following:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 容器分析的两个核心功能如下：
- en: '**Incremental scans**: This handles the scanning of new images and generates
    the metadata related to them.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增量扫描**：此功能负责扫描新镜像并生成相关的元数据。'
- en: '**Continuous monitoring**: The metadata generated by incremental scans is continuously
    analyzed to see if it matches new sets of security vulnerabilities.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续监控**：增量扫描生成的元数据会不断进行分析，以查看是否与新的安全漏洞集匹配。'
- en: When running scans, a severity level for effective severity (the level defined
    by the Linux distribution owner) and **Common Vulnerability Scoring System** (**CVSS**)
    score is assigned to a matching issue.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行扫描时，会为匹配的安全问题分配一个严重性级别（由Linux发行版所有者定义的级别）和**常见漏洞评分系统**（**CVSS**）得分。
- en: Note
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you would like to know more about CVSS, please visit the CVSS website: [https://www.first.org/cvss/specification-document](https://www.first.org/cvss/specification-document).'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于CVSS的信息，请访问CVSS官方网站：[https://www.first.org/cvss/specification-document](https://www.first.org/cvss/specification-document)。
- en: 'Severity levels are categorized as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 严重性级别的分类如下：
- en: Critical
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严重
- en: High
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高
- en: Medium
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中
- en: Low
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低
- en: Minimal
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小
- en: 'These results are stored within your Container Registry account and can be
    viewed from there. Additionally, they can be retrieved by the RESTful API. For
    an overview of the REST commands available, please refer to the Container Analysis
    API documentation:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果存储在您的容器注册表账户中，并可以从那里查看。此外，它们可以通过RESTful API进行检索。有关可用REST命令的概述，请参阅容器分析API文档：
- en: '[https://cloud.google.com/container-registry/docs/reference/rest](https://cloud.google.com/container-registry/docs/reference/rest)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/container-registry/docs/reference/rest](https://cloud.google.com/container-registry/docs/reference/rest)'
- en: 'To explore Container Analysis further, you can enable it within your account
    and test it out by pushing an existing image to the registry. For example, you
    could use one of the `shipitclicker` projects we have used throughout this book.
    To do this, remember to tag the image first:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步探索容器分析，您可以在账户中启用该功能，并通过将现有镜像推送到注册表来进行测试。例如，您可以使用本书中介绍的`shipitclicker`项目之一。执行此操作时，请记得首先为镜像打标签：
- en: '[PRE31]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The hostname will be one of the four following storage regions:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 主机名将是以下四个存储区域之一：
- en: '[gcr.io](http://gcr.io) (US)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[gcr.io](http://gcr.io)（美国）'
- en: '[us.gcr.io](http://us.gcr.io) (US)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[us.gcr.io](http://us.gcr.io)（美国）'
- en: '[eu.gcr.io](http://eu.gcr.io) (EU)'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[eu.gcr.io](http://eu.gcr.io)（欧盟）'
- en: '[asia.gcr.io](http://asia.gcr.io) (Asia)'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[asia.gcr.io](http://asia.gcr.io)（亚洲）'
- en: 'Then, to push to the registry, use the `docker push` command in the following
    format:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`docker push`命令，以以下格式推送到注册表：
- en: '[PRE32]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It's as simple as that, you can then pull the container image as and when you
    need to and use the Container Analysis service. In addition to conducting analysis
    on containers, we can enforce rules around using signed images to complement this.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单，您可以随时拉取容器镜像，并使用容器分析服务。除了对容器进行分析外，我们还可以执行规则，要求使用签名镜像来补充这一点。
- en: Google have built a deploy-time security feature geared toward preventing untrusted
    container images from making it into GKE. This is called **Binary Authorization**
    ([https://cloud.google.com/binary-authorization](https://cloud.google.com/binary-authorization)).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Google构建了一个部署时的安全功能，旨在防止不受信任的容器镜像进入GKE。这被称为**二进制授权**（[https://cloud.google.com/binary-authorization](https://cloud.google.com/binary-authorization)）。
- en: 'Binary Authorization is built around **Kritis**, which defines a specification
    for the deployment authorization of Kubernetes applications. You can read more
    about it here on GitHub:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kritis**是二进制授权的核心，它定义了Kubernetes应用程序部署授权的规范。您可以在GitHub上查看更多关于它的信息：'
- en: '[https://github.com/grafeas/kritis/blob/master/docs/binary-authorization.md](https://github.com/grafeas/kritis/blob/master/docs/binary-authorization.md)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/grafeas/kritis/blob/master/docs/binary-authorization.md](https://github.com/grafeas/kritis/blob/master/docs/binary-authorization.md)'
- en: Using this service will allow you to enforce rules around requiring Docker images
    to be signed by trusted authorities. This involves a process known as attestations.
    Effectively, each container image has a unique hash (called a digest), which is
    signed by the signer. You might remember we saw how digests can be used earlier
    in this book, in [*Chapter 13*](B11641_13_Final_NM_ePub.xhtml#_idTextAnchor299),
    *Docker Security Fundamentals and Best Practices*.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此服务将使您能够执行规则，要求Docker镜像必须由可信的授权方签名。这涉及到一个名为“证明”的过程。实际上，每个容器镜像都有一个唯一的哈希值（称为摘要），该哈希值由签署者签名。您可能还记得我们在本书的[*第13章*](B11641_13_Final_NM_ePub.xhtml#_idTextAnchor299)中看到过摘要如何使用，*Docker安全基础与最佳实践*。
- en: When a digest is signed, this is known as an attestation. When we come to deploy
    a container image, we can use a Binary Authorization attestor to verify the attestation.
    This allows us to prevent unauthorized – that is, unsigned – container images
    being used.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当摘要被签名时，这就是所谓的“证明”。当我们部署容器镜像时，我们可以使用二进制授权验证者来验证证明。这使我们能够防止未经授权的（即未签名的）容器镜像被使用。
- en: 'If you are interested in learning more, to set up Binary Analysis you can follow
    the simple steps documented here:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣了解更多，您可以按照这里记录的简单步骤来设置二进制分析：
- en: '[https://cloud.google.com/binary-authorization/docs/quickstart](https://cloud.google.com/binary-authorization/docs/quickstart)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/binary-authorization/docs/quickstart](https://cloud.google.com/binary-authorization/docs/quickstart)'
- en: Let's now take a look at another feature of GCP, Security Command Center.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看GCP的另一个功能——安全指挥中心。
- en: Understanding your attack surface with Security Command Center
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过安全指挥中心了解您的攻击面
- en: The final tool we will quickly take a look at is Google's Security Command Center.
    For this, you will need to have set up an organization and project in GCP to work
    with. If not, please refer back to the preceding section for a link to Google's
    own quick-start guide.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将快速了解的最后一个工具是Google的安全指挥中心。为此，您需要在GCP中设置组织和项目。如果没有，请参考前面的部分，获取Google的快速入门指南链接。
- en: 'To enable Security Command Center for this new organization and project, follow
    these steps:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 要为此新组织和项目启用安全指挥中心，请按照以下步骤操作：
- en: Log into Cloud Console at [https://console.cloud.google.com](https://console.cloud.google.com).
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到Cloud Console：[https://console.cloud.google.com](https://console.cloud.google.com)。
- en: Add the following two roles via `organizationAdmin` (`roles/resourcemanager.organizationAdmin`)
    from `securitycenter.admin` (`roles/securitycenter.admin`) from **Security Center**
    | **Security Center Admin**.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`organizationAdmin`（`roles/resourcemanager.organizationAdmin`）和**安全中心** |
    **安全中心管理员**的`securitycenter.admin`（`roles/securitycenter.admin`）角色，添加以下两个角色。
- en: Save the changes and navigate to the Security Command Center page in the web
    console.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并导航到Web控制台中的安全指挥中心页面。
- en: Select the organization you added in step 2 from the drop-down list called **Organization**.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从名为**组织**的下拉列表中选择您在第2步中添加的组织。
- en: You will now be presented with the **Enable asset discovery** page.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将为您展示**启用资产发现**页面。
- en: Enable the **All current and future projects** option.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用**所有当前和未来的项目**选项。
- en: Asset discovery will now begin.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资产发现现在开始。
- en: Once Security Command Center has finished scanning your resources, you will
    be able to see the results on the dashboard. By default, anomaly detection is
    enabled, however, Google provides a number of security sources you can integrate,
    or you can plug in container-specific third-party services.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安全指挥中心完成扫描您的资源，您就能在仪表板上查看结果。默认情况下，异常检测已启用，然而，Google提供了许多您可以集成的安全来源，或者您可以插入特定于容器的第三方服务。
- en: 'A full list of the potential sources you can integrate can be found here:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此找到可集成的所有潜在来源列表：
- en: '[https://cloud.google.com/security-command-center/docs/how-to-security-sources](https://cloud.google.com/security-command-center/docs/how-to-security-sources)'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/security-command-center/docs/how-to-security-sources](https://cloud.google.com/security-command-center/docs/how-to-security-sources)'
- en: With these two basic services set up, you are now free to explore integrating
    other third-party providers such as Twistlock or experiment with these services
    to get comfortable rolling them out to a production environment.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好这两个基本服务后，您现在可以自由探索集成其他第三方供应商，例如 Twistlock，或尝试这些服务以便熟悉将它们部署到生产环境中的流程。
- en: That concludes our whistle-stop tour of a few of the major cloud providers'
    offerings. Let's summarize what we have looked at.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对几个主要云提供商产品的简短介绍。让我们总结一下我们所查看的内容。
- en: Summary
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've provided you with some pointers for where you can take
    your cloud skills to next. This has included looking at scanning tools such as
    Anchore, reviewing metric-gathering platforms such as Datadog, and looking briefly
    at some of the features offered by the major cloud providers.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为您提供了一些指引，帮助您决定接下来将云技能应用到哪里。我们讨论了扫描工具如 Anchore，回顾了度量收集平台如 Datadog，并简要了解了主要云提供商提供的一些功能。
- en: These cloud platforms included AWS, Microsoft Azure, and GCP. Each of these
    companies also provide a number of other cloud-based container infrastructure
    products you may wish to explore further.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这些云平台包括 AWS、Microsoft Azure 和 GCP。每个公司还提供了一些其他基于云的容器基础设施产品，您可能希望进一步探索。
- en: We hope this high-level overview has provided you with some thoughtful insights
    on how to apply these skills to your own projects. Each topic in this chapter
    should act as a jumping-off point to explore each tool further, or provide you
    with the basics to start experimenting with monitoring in a cloud-based container
    environment. For those of you working with local projects, tools such as Docker
    stats and cAdvisor will provide a handy mechanism for monitoring container performance.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这个高层次的概述能为您提供一些深思熟虑的见解，帮助您将这些技能应用到自己的项目中。本章中的每个主题应作为一个跳板，帮助您进一步探索每个工具，或者为您提供基础，开始在基于云的容器环境中进行监控实验。对于那些处理本地项目的人，Docker
    stats 和 cAdvisor 等工具将为您提供便捷的监控容器性能机制。
- en: Now we will move on to the final chapter, where we shall recap what we have
    studied throughout the book and leave you with some takeaway points for where
    to take your learning to next.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将进入最后一章，在这一章中，我们将回顾整个书中的学习内容，并为您总结一些关键要点，帮助您决定接下来要如何进行学习。
- en: Further reading
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Don''t forget you can visit each provider''s website for a list of these further
    features:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了，您可以访问每个提供商的网站，查看这些额外功能的列表：
- en: 'Containers on AWS: [https://aws.amazon.com/containers/services/](https://aws.amazon.com/containers/services/)'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS上的容器：[https://aws.amazon.com/containers/services/](https://aws.amazon.com/containers/services/)
- en: 'Container services in Azure: [https://azure.microsoft.com/en-us/product-categories/containers/](https://azure.microsoft.com/en-us/product-categories/containers/)'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure中的容器服务：[https://azure.microsoft.com/en-us/product-categories/containers/](https://azure.microsoft.com/en-us/product-categories/containers/)
- en: 'Container options in GCP: [https://cloud.google.com/container-options](https://cloud.google.com/container-options)'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCP中的容器选项：[https://cloud.google.com/container-options](https://cloud.google.com/container-options)
