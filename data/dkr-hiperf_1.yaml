- en: Chapter 1. Preparing Docker Hosts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 准备Docker主机
- en: 'Docker allows us to deliver applications to our customers faster. It simplifies
    the workflows needed to get code from development to production by enabling us
    to easily create and launch Docker containers. This chapter will be a quick refresher
    on how to get our environment ready to run a Docker-based development and operations
    workflow by:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker使我们能够更快地将应用交付给客户。它通过使我们能够轻松创建并启动Docker容器，简化了将代码从开发到生产所需的工作流程。本章将简要回顾如何准备我们的环境，以便运行基于Docker的开发和运维工作流，具体包括：
- en: Preparing a Docker host
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备Docker主机
- en: Working with Docker images
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker镜像
- en: Running Docker containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Docker容器
- en: Most parts of this chapter are concepts that we are already familiar with and
    are readily available on the Docker documentation website. This chapter shows
    selected commands and interactions with the Docker host that will be used in the
    succeeding chapters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容是我们已经熟悉的概念，并且可以在Docker文档网站上轻松找到。本章展示了在后续章节中将使用的与Docker主机的选定命令和交互。
- en: Preparing a Docker host
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备Docker主机
- en: 'It is assumed that we are already familiar with how to set up a Docker host.
    For most of the chapters of this book, we will run our examples against the following
    environment, unless explicitly mentioned otherwise:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经熟悉如何设置Docker主机。本书的大多数章节将基于以下环境来运行示例，除非另有明确说明：
- en: Operating system—Debian 8.2 Jessie
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统——Debian 8.2 Jessie
- en: Docker version—1.10.0
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker版本——1.10.0
- en: 'The following command displays the operating system and Docker version:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令显示操作系统和Docker版本：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we haven't set up our Docker environment yet, we can follow the instructions
    on the Docker website found at [https://docs.docker.com/installation/debian](https://docs.docker.com/installation/debian)
    to prepare our Docker host.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还没有设置Docker环境，可以按照Docker官网的[https://docs.docker.com/installation/debian](https://docs.docker.com/installation/debian)上的说明来准备Docker主机。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你的账户中下载所有你购买的Packt书籍的示例代码文件，网址为[http://www.packtpub.com](http://www.packtpub.com)。如果你是在其他地方购买的这本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，文件将通过电子邮件直接发送给你。
- en: Working with Docker images
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker镜像
- en: 'Docker images are artifacts that contain our application and other supporting
    components to help run it, such as the base operating system, runtime and development
    libraries, and so on. They get deployed and downloaded into Docker hosts in order
    to run our applications as Docker containers. This section will cover the following
    Docker commands to work with Docker images:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像是包含我们的应用程序和其他支持组件的工件，帮助运行它们，比如操作系统基础镜像、运行时和开发库等。它们被部署并下载到Docker主机中，以便将我们的应用作为Docker容器运行。本节将涵盖以下与Docker镜像相关的命令：
- en: '`docker build`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker build`'
- en: '`docker images`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker images`'
- en: '`docker push`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker push`'
- en: '`docker pull`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker pull`'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Most of the material in this section is readily available on the Docker documentation
    website at [https://docs.docker.com/userguide/dockerimages](https://docs.docker.com/userguide/dockerimages).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的大部分内容可以在Docker文档网站[https://docs.docker.com/userguide/dockerimages](https://docs.docker.com/userguide/dockerimages)上轻松找到。
- en: Building Docker images
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建Docker镜像
- en: 'We will use the `Dockerfile` of `training/webapp` from the Docker Education
    Team to build a Docker image. The next few steps will show us how to build this
    web application:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Docker教育团队提供的`training/webapp`的`Dockerfile`来构建一个Docker镜像。接下来的几步将展示如何构建这个Web应用：
- en: 'To begin, we will clone the Git repository of `webapp`, which is available
    at [https://github.com/docker-training/webapp](https://github.com/docker-training/webapp)
    via the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将克隆`webapp`的Git仓库，可以通过以下命令从[https://github.com/docker-training/webapp](https://github.com/docker-training/webapp)获取：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, let''s build the Docker image with the `docker build` command by executing
    the following:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过执行以下命令使用`docker build`命令构建Docker镜像：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `-t` flag is used to tag the image as `hubuser/webapp`. Tagging containers
    as `<username>/<imagename>` is an important convention to be able to push our
    Docker images in the later section. More details on the `docker build` command
    can be found at [https://docs.docker.com/reference/commandline/build](https://docs.docker.com/reference/commandline/build)
    or by running `docker build --help`.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`-t` 标志用于将镜像标记为 `hubuser/webapp`。将容器标记为 `<username>/<imagename>` 是推送 Docker
    镜像到后续部分的重要约定。有关 `docker build` 命令的更多细节，可以参考 [https://docs.docker.com/reference/commandline/build](https://docs.docker.com/reference/commandline/build)，或运行
    `docker build --help`。'
- en: 'Finally, let''s confirm that the image is already available in our Docker host
    with the `docker images` command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们通过 `docker images` 命令确认镜像已经在我们的 Docker 主机中可用：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Pushing Docker images to a repository
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Docker 镜像推送到仓库
- en: 'Now that we have made a Docker image, let''s push it to a repository to share
    and deploy across other Docker hosts. The default installation of Docker pushes
    images to Docker Hub. Docker Hub is a publicly hosted repository of Docker, Inc.,
    where anyone with an account can push and share their Docker images. The following
    steps will show us how to do this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经制作了一个 Docker 镜像，让我们将其推送到仓库中，以便在其他 Docker 主机之间共享和部署。Docker 的默认安装会将镜像推送到
    Docker Hub。Docker Hub 是由 Docker, Inc. 公共托管的一个仓库，任何拥有账户的人都可以推送和分享他们的 Docker 镜像。以下步骤将展示如何操作：
- en: 'Before being able to push to Docker Hub, we will need to authenticate with
    the `docker login` command, as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在能够推送到 Docker Hub 之前，我们需要使用 `docker login` 命令进行身份验证，如下所示：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we don't have a Docker Hub account yet, we can follow the instructions to
    sign up for an account at [https://hub.docker.com/account/signup](https://hub.docker.com/account/signup).
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们还没有 Docker Hub 账户，可以按照以下指示在 [https://hub.docker.com/account/signup](https://hub.docker.com/account/signup)
    注册一个账户。
- en: 'We can now push our images to Docker Hub. As mentioned in the previous section,
    the tag of the image identifies `<username>/<imagename>` in the repository. Issue
    the `docker push` command shown as follows in order to push our image to Docker
    Hub:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以将镜像推送到 Docker Hub。正如前面部分提到的，镜像的标签标识了仓库中的 `<username>/<imagename>`。使用以下
    `docker push` 命令来推送我们的镜像到 Docker Hub：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have successfully pushed our Docker image, it will be available
    in Docker Hub. We can also get more information about the image we pushed in its
    Docker Hub page, which is similar to that shown in the following image. In this
    example, our Docker Hub URL is `https:// hub.docker.com/r/hubuser/webapp`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功地将 Docker 镜像推送到 Docker Hub，它将会在 Docker Hub 中可用。我们还可以在 Docker Hub 页面中获取我们推送的镜像的更多信息，页面与下图类似。在这个例子中，我们的
    Docker Hub URL 是 `https:// hub.docker.com/r/hubuser/webapp`：
- en: '![Pushing Docker images to a repository](img/00002.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![将 Docker 镜像推送到仓库](img/00002.jpeg)'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details on pushing Docker images to a repository are available at `docker
    push --help` and [https://docs.docker.com/reference/commandline/push](https://docs.docker.com/reference/commandline/push).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于将 Docker 镜像推送到仓库的细节，请参考 `docker push --help` 和 [https://docs.docker.com/reference/commandline/push](https://docs.docker.com/reference/commandline/push)。
- en: Docker Hub is a good place to start hosting our Docker images. However, there
    are some cases where we want to host our own image repository. For example, when
    we want to save bandwidth when pulling images to our Docker hosts. Another reason
    could be that our Docker hosts inside a datacenter may have firewalled off the
    Internet. In [Chapter 2](part0018_split_000.html#H5A42-afc4585f6623427885a0b0c8e5b2e22e
    "Chapter 2. Optimizing Docker Images"), *Optimizing Docker Images*, we will discuss
    in greater detail how to run our own Docker registry to have an in-house repository
    of Docker images.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 是一个很好的开始托管我们 Docker 镜像的地方。然而，在某些情况下，我们可能希望托管自己的镜像仓库。例如，当我们希望在将镜像拉取到
    Docker 主机时节省带宽时。另一个原因可能是我们的 Docker 主机位于数据中心内部，可能已将 Internet 防火墙隔离开来。在[第 2 章](part0018_split_000.html#H5A42-afc4585f6623427885a0b0c8e5b2e22e
    "第 2 章 优化 Docker 镜像")，*优化 Docker 镜像*中，我们将更详细地讨论如何运行我们自己的 Docker 注册表，以便拥有一个内部的
    Docker 镜像仓库。
- en: Pulling Docker images from a repository
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从仓库拉取 Docker 镜像
- en: 'Once our Docker images are built and pushed to a repository, such as Docker
    Hub, we can pull them to our Docker hosts. This workflow is useful when we first
    build our Docker image in our development workstation Docker host and want to
    deploy it to our production environment''s Docker host in the cloud. This removes
    the need to rebuild the same image in our other Docker hosts. Pulling images can
    also be used to grab the existing Docker images from Docker Hub to build over
    our own Docker images. So, instead of cloning the Git repository as we did earlier
    and redoing the build in another one of our Docker hosts, we can pull it instead.
    The next few steps will walk us through pulling the `hubuser/webapp` Docker image
    that we just pushed earlier:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的 Docker 镜像构建并推送到如 Docker Hub 的仓库中，我们可以将它们拉取到 Docker 主机上。当我们在开发工作站的 Docker
    主机上首次构建 Docker 镜像，并希望将其部署到云中生产环境的 Docker 主机时，这一工作流程特别有用。这样就不需要在其他 Docker 主机上重新构建相同的镜像。拉取镜像也可以用来从
    Docker Hub 获取现有的 Docker 镜像，在此基础上构建我们的 Docker 镜像。所以，与我们之前克隆 Git 仓库并在其他 Docker 主机上重新构建不同，我们可以选择拉取镜像。接下来的步骤将引导我们拉取我们之前推送的`hubuser/webapp`
    Docker 镜像：
- en: 'First, let''s clean our existing Docker host to make sure that we will download
    the image from Docker Hub. Type the following command to make sure we have a clean
    start:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们清理现有的 Docker 主机，确保我们将从 Docker Hub 下载镜像。输入以下命令，确保我们从干净的环境开始：
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we can now download the image using `docker pull`, as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以使用`docker pull`命令下载镜像，如下所示：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, let''s confirm again that we have downloaded the image successfully
    by executing the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们通过执行以下命令再次确认是否成功下载了镜像：
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details on how to pull Docker images is available at `docker pull --help`
    and [https://docs.docker.com/reference/commandline/pull](https://docs.docker.com/reference/commandline/pull).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何拉取 Docker 镜像的更多详细信息，请参见`docker pull --help`和[https://docs.docker.com/reference/commandline/pull](https://docs.docker.com/reference/commandline/pull)。
- en: Running Docker containers
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Docker 容器
- en: 'Now that we have pulled or built Docker images, we can run and test them with
    the `docker run` command. This section will review selected command-line flags
    that we will use throughout the succeeding chapters. This section will also use
    the following Docker commands to get more information about the Docker containers
    being run inside the Docker host:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拉取或构建了 Docker 镜像，可以使用`docker run`命令来运行和测试它们。本节将回顾一些我们将在后续章节中使用的命令行标志，并使用以下
    Docker 命令获取关于在 Docker 主机内运行的 Docker 容器的更多信息：
- en: '`docker ps`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker ps`'
- en: '`docker inspect`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker inspect`'
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More comprehensive details on all the command-line flags are found at `docker
    run --help` and [https://docs.docker.com/reference/commandline/run](https://docs.docker.com/reference/commandline/run).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 更全面的命令行标志详细信息可以在`docker run --help`和[https://docs.docker.com/reference/commandline/run](https://docs.docker.com/reference/commandline/run)找到。
- en: Exposing container ports
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暴露容器端口
- en: In the `training/webapp` example, its Docker container is run as a web server.
    To have the application serve web traffic outside its container environment, Docker
    needs information on which port the application is bound to. Docker refers to
    this information as exposed ports. This section will walk us through how to expose
    port information when running our containers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在`training/webapp`示例中，其 Docker 容器作为 Web 服务器运行。为了让应用程序能够为容器环境外的 Web 流量提供服务，Docker
    需要知道该应用程序绑定的端口。Docker 将这些信息称为暴露端口。本节将引导我们在运行容器时如何暴露端口信息。
- en: 'Going back to the `training/webapp` Docker image we worked on earlier, the
    application serves a Python Flask web application that listens to port `5000`,
    as highlighted here in `webapp/app.py`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们之前使用的`training/webapp` Docker 镜像，该应用程序提供了一个监听端口`5000`的 Python Flask Web
    应用程序，具体内容见`webapp/app.py`中的突出部分：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Correspondingly, the Docker image makes the Docker host aware that the application
    is listening on port `5000` via the `EXPOSE` instruction in the `Dockerfile`,
    which can be described as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 相应地，Docker 镜像通过`Dockerfile`中的`EXPOSE`指令让 Docker 主机知道该应用程序在端口`5000`上监听，具体说明如下：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that we have a basic idea of how Docker exposes our container''s ports,
    follow the next few steps to run the `hubuser/webapp` container:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对 Docker 如何暴露容器的端口有了基本了解，接下来的步骤将引导我们运行`hubuser/webapp`容器：
- en: 'Use `docker run` with the `-d` flag to run the container as a daemon process,
    as follows:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker run`命令，并带上`-d`标志，以守护进程方式运行容器，如下所示：
- en: '[PRE11]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, confirm that the Docker host has the container running with port `5000`
    exposed with `docker ps`. We can do this through the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过`docker ps`确认Docker主机上容器运行并暴露了`5000`端口。我们可以通过以下命令来执行此操作：
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In addition to the `EXPOSE` instruction, exposed ports can be overridden during
    runtime with the `--expose=[]` flag. For example, use the following command to
    have the `hubuser/webapp` application expose ports `4000`-`4500`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`EXPOSE`指令外，还可以在运行时通过`--expose=[]`标志覆盖暴露的端口。例如，使用以下命令使`hubuser/webapp`应用暴露`4000`到`4500`端口：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This ad hoc `docker run` flag is useful when debugging applications. For example,
    let's say our web application uses ports `4000`-`4500`. However, we normally don't
    want these ranges to be available in production. We can then use `--expose=[]`
    to enable it temporarily to spin up a debuggable container. Further details on
    how to use techniques such as this to troubleshoot Docker containers will be discussed
    in [Chapter 7](part0046_split_000.html#1BRPS2-afc4585f6623427885a0b0c8e5b2e22e
    "Chapter 7. Troubleshooting Containers"), *Troubleshooting Containers*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个临时的`docker run`标志在调试应用时非常有用。例如，假设我们的Web应用使用`4000`到`4500`端口。然而，我们通常不希望这些端口范围在生产环境中可用。我们可以使用`--expose=[]`暂时启用它，以启动一个可调试的容器。有关如何使用此类技术来排除Docker容器故障的更多细节，将在[第7章](part0046_split_000.html#1BRPS2-afc4585f6623427885a0b0c8e5b2e22e
    "第7章 容器故障排除")，*容器故障排除*中讨论。
- en: Publishing container ports
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布容器端口
- en: Exposing only makes the port available inside the container. For the application
    to be served outside its Docker host, the port needs to be published. The `docker
    run` command uses the `-P` and `-p` flags to publish a container's exposed ports.
    This section talks about how to use these two flags to publish ports on the Docker
    host.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 暴露仅使端口在容器内可用。为了使应用能够在其Docker主机外部提供服务，端口需要被发布。`docker run`命令使用`-P`和`-p`标志来发布容器的暴露端口。本节将讲解如何使用这两个标志在Docker主机上发布端口。
- en: --publish-all
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --publish-all
- en: 'The `-P` or `--publish-all` flag publishes all the exposed ports of a container
    to random high ports in the Docker host port within the ephemeral port range defined
    in `/proc/sys/net/ipv4/ip_local_port_range`. The next few steps will go back to
    the `hubuser/webapp Docker` image that we were working on to explore publishing
    exposed ports:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`-P`或`--publish-all`标志将容器的所有暴露端口发布到Docker主机的随机高端口，这些端口位于`/proc/sys/net/ipv4/ip_local_port_range`定义的临时端口范围内。接下来的几步将回到我们之前使用的`hubuser/webapp
    Docker`镜像，探讨如何发布暴露的端口：'
- en: 'First, type the following command to run a container publishing all the exposed
    ports:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，输入以下命令运行一个发布所有暴露端口的容器：
- en: '[PRE14]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, let''s confirm that the Docker host publishes port `32771` to forward
    traffic to the Docker container''s exposed port `5000`. Type the `docker ps` command
    as follows to perform this verification:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们确认Docker主机将端口`32771`发布到Docker容器暴露的端口`5000`。输入如下的`docker ps`命令进行验证：
- en: '[PRE15]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can also verify that the allocated port `32771` is within the configured
    ephemeral port range of our Docker host:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以验证分配的端口`32771`是否位于我们Docker主机配置的临时端口范围内：
- en: '[PRE16]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In addition, we can confirm that our Docker host is listening on the allocated
    port `32771` as well via the following command:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们还可以通过以下命令确认Docker主机正在监听分配的端口`32771`：
- en: '[PRE17]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, we can validate that the Docker host''s port `32771` is indeed mapped
    to the running Docker container by confirming that it is the `training/webapp`
    Python application responding by making an actual HTTP request. Run the following
    command to confirm:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以通过实际发起HTTP请求来验证Docker主机的端口`32771`确实映射到正在运行的Docker容器，并确认它是由`training/webapp`
    Python应用响应的。运行以下命令进行确认：
- en: '[PRE18]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: --publish
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: --publish
- en: 'The `-p` or `--publish` flag publishes container ports to the Docker host.
    If the container port is not yet exposed, the said container will also be exposed.
    According to the documentation, the `-p` flag can take the following formats to
    publish container ports:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p`或`--publish`标志将容器端口发布到Docker主机。如果容器端口尚未暴露，则该容器也会被暴露。根据文档，`-p`标志可以使用以下格式来发布容器端口：'
- en: '`containerPort`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`containerPort`'
- en: '`hostPort:containerPort`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostPort:containerPort`'
- en: '`ip::containerPort`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ip::containerPort`'
- en: '`ip:hostPort:containerPort`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ip:hostPort:containerPort`'
- en: 'By specifying the `hostPort`, we can specify which port in the Docker host
    the container port should be mapped to instead of being assigned a random ephemeral
    port. By specifying `ip`, we can restrict the interfaces that the Docker host
    will accept connections from to relay the packets to the mapped Docker container''s
    exposed port. Going back to the `hubuser/webapp` example, the following is the
    command to map the Python application''s exposed port `5000` to our Docker host''s
    port `80` on the loopback interface:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定`hostPort`，我们可以确定将容器端口映射到Docker主机的哪个端口，而不是分配随机的临时端口。通过指定`ip`，我们可以限制Docker主机接受连接的接口，以将数据包中继到映射的Docker容器的暴露端口。回到`hubuser/webapp`的例子，以下是将Python应用程序的暴露端口`5000`映射到我们Docker主机的端口`80`的回环接口的命令：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With the preceding invocation of `docker run`, the Docker host can only serve
    HTTP requests in the application from `http://localhost`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述的`docker run`调用，Docker主机只能从`http://localhost`中提供应用程序的HTTP请求。
- en: Linking containers
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接容器
- en: The published ports described in the previous section also allow containers
    to talk to each other by connecting to the published Docker host ports. Another
    way to directly connect containers with each other is establishing container links.
    Linked containers allow a source container to send information to the destination
    containers. It enables the communicating containers to discover each other in
    a secure manner.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分描述的发布端口还允许容器通过连接到发布的Docker主机端口相互通信。另一种直接连接容器的方法是建立容器链接。链接的容器允许源容器将信息发送到目标容器。它使得通信的容器可以安全地发现彼此。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details about linked containers can be found on the Docker documentation
    site at [https://docs.docker.com/userguide/dockerlinks](https://docs.docker.com/userguide/dockerlinks).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于链接容器的详细信息可以在Docker文档网站上找到：[https://docs.docker.com/userguide/dockerlinks](https://docs.docker.com/userguide/dockerlinks)。
- en: 'In this section, we will work with the `--link` flag to connect containers
    securely. The next few steps give us an example of how to work with linked containers:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`--link`标志安全地连接容器。接下来的几个步骤将为我们展示如何使用链接的容器的示例：
- en: 'As preparation, make sure that our `hubuser/webapp` container runs with only
    the exposed ports. We will create a container called source that will serve as
    our source container. Type the following command to recreate this container:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为准备工作，请确保我们的`hubuser/webapp`容器仅运行具有暴露端口的情况。我们将创建一个名为`source`的容器，作为我们的源容器。输入以下命令以重新创建此容器：
- en: '[PRE20]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we will create a destination container. We will use `--link` `<source>:<alias>`
    to create a link from the source container named `source` to an alias called `webapp`.
    Type the following command to create this link to our destination container:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个目标容器。我们将使用`--link` `<source>:<alias>`来创建从名为`source`的源容器到名为`webapp`的别名的链接。输入以下命令以创建到我们目标容器的链接：
- en: '[PRE21]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s now confirm that the link was made by inspecting the newly created destination
    container called `destination`. Execute the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过检查新创建的目标容器`destination`，来确认链接已经建立。执行以下命令：
- en: '[PRE22]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'What happened during the linking process was that the Docker host created a
    secure tunnel between the two containers. We can confirm this tunnel in the Docker
    host''s iptables, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在链接过程中发生的情况是Docker主机在两个容器之间创建了一个安全隧道。我们可以在Docker主机的iptables中确认这个隧道，如下所示：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding iptables, the Docker host allowed the destination container
    called `destination (172.17.0.28)` to accept outbound connections to port `5000`
    of the source container called `source (172.17.0.15)`. The second iptable's entry
    allows the container called `source` to receive connections to its port `5000`
    from the container called `destination`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述iptables中，Docker主机允许名为`destination (172.17.0.28)`的目标容器接受到来自名为`source (172.17.0.15)`的源容器端口`5000`的出站连接。第二个iptables条目允许容器`source`从容器`destination`接收到其端口`5000`的连接。
- en: 'In addition to the secure connections established by the Docker host between
    containers, the Docker host also exposes information about the source container
    to the destination container through the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Docker主机之间建立的安全连接之外，Docker主机还通过以下方式向目标容器公开源容器的信息：
- en: Environment variables
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量
- en: Entries in `/etc/hosts`
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/hosts`中的条目'
- en: These two sources of information will be further explored in the next section
    as an example use case of working with interactive containers.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种信息源将在下一节中作为使用交互式容器的示例用例进一步探讨。
- en: Interactive containers
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互式容器
- en: 'By specifying the `-i` flag, we can specify that a container running in the
    foreground is attached to the standard input stream. By combining it with the
    `-t` flag, a pseudoterminal is also allocated to our container. With this, we
    can use our Docker container as an interactive process, similar to normal shells.
    This feature is useful when we want to debug and inspect what is happening inside
    our Docker containers. Continuing from the previous section, we can debug what
    happens when containers are linked through the following steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定 `-i` 标志，我们可以指定一个在前台运行的容器连接到标准输入流。结合使用 `-t` 标志时，还会为容器分配一个伪终端。这样，我们就可以像正常的
    Shell 一样使用 Docker 容器进行交互式操作。当我们想要调试并检查 Docker 容器内发生的事情时，这个功能非常有用。从前面的章节继续，我们可以通过以下步骤调试容器链接发生的情况：
- en: 'To prepare, type the following command to establish an interactive container
    session linking to the container called `source` that we ran earlier:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了准备，输入以下命令以建立与先前运行的名为 `source` 的容器链接的交互式容器会话：
- en: '[PRE24]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, let''s first explore the environment variables that are exposed to the
    interactive destination container via the following command:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们首先通过以下命令探索暴露给交互式目标容器的环境变量：
- en: '[PRE25]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In general, the following environment variables are set in linked containers:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，在链接的容器中会设置以下环境变量：
- en: '`<alias>_NAME=/container_name/alias_name` for each source container'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<alias>_NAME=/container_name/alias_name` 针对每个源容器'
- en: '`<alias>_PORT_<port>_<protocol>` shows the URL of each exposed port. It also
    serves as a unique prefix expanding to the following more environment variables:'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<alias>_PORT_<port>_<protocol>` 显示每个暴露端口的 URL。它还作为一个独特的前缀，扩展到以下更多的环境变量：'
- en: '`<prefix>_ADDR` contains the IP address of the source container'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<prefix>_ADDR` 包含源容器的 IP 地址'
- en: '`<prefix>_PORT` shows the exposed port''s number'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<prefix>_PORT` 显示暴露端口的号码'
- en: '`<prefix>_PROTO` describes the protocol of the exposed port which is either
    TCP or UDP'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<prefix>_PROTO` 描述了暴露端口的协议，可以是 TCP 或 UDP'
- en: '`<alias>_PORT` shows the source container''s first exposed port'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<alias>_PORT` 显示源容器的第一个暴露端口'
- en: 'The second container discovery feature in linked containers is an updated `/etc/hosts`
    file. The alias of the `webapp` linked container is mapped to the IP address of
    the `source` source container The name of the source container is also mapped
    to the same IP address. The following snippet is the content of the `/etc/hosts`
    file inside our interactive container session, and it contains this mapping:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 链接容器中的第二个容器发现功能是更新过的 `/etc/hosts` 文件。`webapp` 链接容器的别名被映射到 `source` 源容器的 IP 地址，源容器的名称也映射到相同的
    IP 地址。以下片段是我们交互式容器会话中 `/etc/hosts` 文件的内容，包含了这个映射：
- en: '[PRE26]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, we can use the alias to connect to our source container. In the following
    example, we will connect to the web application running in our source container
    by making an HTTP request to its alias, `webapp`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以使用别名连接到源容器。在以下示例中，我们将通过向别名 `webapp` 发起 HTTP 请求来连接运行在源容器中的 Web 应用：
- en: '[PRE27]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Interactive containers can be used to build containers as well, together with
    `docker commit`. However, this is a tedious process, and this development process
    doesn't scale beyond a single developer. Use `docker build` instead and manage
    our `Dockerfile` in version control.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 交互式容器也可以用来构建容器，配合 `docker commit` 使用。但这是一个繁琐的过程，而且这种开发过程不能扩展到多个开发者。应该改用 `docker
    build`，并在版本控制中管理我们的 `Dockerfile`。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Hopefully by this time, we are refamiliarized with most of the commands that
    will be used throughout the book. We prepared a Docker host to be able to interact
    with Docker containers. We then built, downloaded, and uploaded various Docker
    images to develop and deploy containers to our development and production Docker
    hosts alike. Finally, we ran Docker containers from built or downloaded Docker
    images. In addition, we established some basic skills of how to communicate and
    interact with running containers by learning about how Docker containers are run.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 希望到这个时候，我们已经重新熟悉了本书中将要使用的大部分命令。我们准备了一个 Docker 主机来与 Docker 容器进行交互。接着，我们构建、下载并上传了各种
    Docker 镜像，以便在我们的开发和生产 Docker 主机上开发和部署容器。最后，我们从构建或下载的 Docker 镜像中运行了 Docker 容器。此外，我们还通过学习
    Docker 容器的运行方式，掌握了如何与正在运行的容器进行通信和交互的一些基本技能。
- en: In the next chapter, you'll learn how to optimize our Docker images. So, let's
    dive right in!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何优化我们的 Docker 镜像。那么，让我们直接开始吧！
