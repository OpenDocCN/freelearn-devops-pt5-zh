- en: Chapter 5. Building Your Own Plugin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 构建你自己的插件
- en: Along with providing the core tools, Docker also documents an API that allows
    the core Docker engine to talk to the plugin services written by third-party developers.
    At the moment, this API allows you to hook your own storage and networking engines
    into Docker.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供核心工具外，Docker还记录了一个API，允许核心Docker引擎与第三方开发者编写的插件服务进行通信。目前，这个API允许你将自己的存储和网络引擎接入Docker。
- en: This may seem like it is limiting you to a very niche set of plugins, and it
    is. However, there is a good reason that Docker has taken this decision.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来像是将你限制在一个非常小众的插件集合中，确实如此。然而，Docker作出这个决定是有充分理由的。
- en: Let's have a look at some of the plugins that we have already installed in the
    previous chapters; however, rather than covering the functionality, we will take
    a look at what goes on behind the scenes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下我们在前几章已经安装的一些插件；然而，我们不会介绍它们的功能，而是看看它们背后的操作过程。
- en: Third-party plugins
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方插件
- en: The first page about plugins on the Docker documentation site lists a lot of
    third-party plugins. As already mentioned, let's get an idea of what's going on
    in the background of the plugins that we have already installed and used in [Chapter
    3](ch03.html "Chapter 3. Volume Plugins"), *Volume Plugins*, and [Chapter 4](ch04.html
    "Chapter 4. Network Plugins"), *Network Plugins*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Docker文档网站上关于插件的第一页列出了许多第三方插件。如前所述，让我们了解一下我们已经在[第3章](ch03.html "第3章 卷插件")，*卷插件*和[第4章](ch04.html
    "第4章 网络插件")，*网络插件*中安装并使用的插件背后的操作。
- en: Convoy
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Convoy
- en: Convoy was the first third-party plugin we looked at in [Chapter 3](ch03.html
    "Chapter 3. Volume Plugins"), *Volume Plugins*. To install it, we launched a Docker
    host in DigitalOcean as we needed a more complete underlying operating system
    than is provided by the Boot2Docker operating system, which is favored by Docker
    Machine.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Convoy是我们在[第3章](ch03.html "第3章 卷插件")中查看的第一个第三方插件，*卷插件*。为了安装它，我们在DigitalOcean启动了一个Docker主机，因为我们需要一个比Docker
    Machine偏好的Boot2Docker操作系统更完整的底层操作系统。
- en: To install Convoy, we downloaded a release file from GitHub. This tar archive
    contained the static binaries required to run Convoy on a Linux system, once the
    static binaries were in place, we created a Docker plugin folder and then added
    a symbolic link to the socket file that Convoy creates when it is first executed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装Convoy，我们从GitHub下载了一个发布文件。这个tar压缩包包含了运行Convoy所需的静态二进制文件，一旦静态二进制文件到位，我们创建了一个Docker插件文件夹，并添加了一个符号链接到Convoy在首次执行时创建的套接字文件。
- en: We then went on to configure a loopback device that we created on a volume.
    We then instructed Convoy to use the newly created volume by launching Convoy
    as a daemon using the Convoy static binary that we downloaded.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们继续配置了一个我们在卷上创建的回环设备。接着，我们指示Convoy使用新创建的卷，通过启动我们下载的Convoy静态二进制文件将Convoy作为守护进程运行。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In multitasking computer operating systems, a daemon is a computer program
    that runs as a background process, rather than being under the direct control
    of an interactive user:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在多任务计算机操作系统中，守护进程是一个作为后台进程运行的计算机程序，而不是直接由交互式用户控制：
- en: '[https://en.wikipedia.org/wiki/Daemon(computing)](https://en.wikipedia.org/wiki/Daemon(computing)).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Daemon(computing)](https://en.wikipedia.org/wiki/Daemon(computing))。'
- en: As far as Docker is concerned, for each request it gets when the `--volume-driver=convoy`
    flag is used to launch a container, it will simply offload anything to do with
    volume the daemonized Convoy process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就Docker而言，当使用`--volume-driver=convoy`标志启动容器时，每个请求将简单地将与卷相关的任何任务交给守护进程化的Convoy进程处理。
- en: If you review the *Convoy* section of [Chapter 3](ch03.html "Chapter 3. Volume
    Plugins"), *Volume Plugins*, you will notice that all of our interaction with
    Convoy is using the `convoy` command and not the `docker` one, in fact, the Convoy
    client is using the same socket file as we symbolically linked to the `Docker
    plugins` folder.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾一下[第3章](ch03.html "第3章 卷插件")中的*Convoy*部分，*卷插件*，你会注意到我们与Convoy的所有交互都使用`convoy`命令而不是`docker`命令，实际上，Convoy客户端使用的是与我们符号链接到`Docker插件`文件夹的同一个套接字文件。
- en: REX-Ray
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: REX-Ray
- en: Next up, we installed REX-Ray. To do this, we ran a command, which downloaded
    and executed a bash script from [https://dl.bintray.com/emccode/rexray/install](https://dl.bintray.com/emccode/rexray/install).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们安装了REX-Ray。为此，我们运行了一个命令，该命令从[https://dl.bintray.com/emccode/rexray/install](https://dl.bintray.com/emccode/rexray/install)下载并执行了一个bash脚本。
- en: This script works out the operating system you are running and then downloads
    and installs either the DEB or RPM file. These packages, as you may have already
    guessed, install the correct static binaries for your operating system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本会判断您正在运行的操作系统，然后下载并安装 DEB 或 RPM 文件。正如您可能已经猜到的，这些软件包会安装适合您操作系统的静态二进制文件。
- en: REX-Ray goes one step further by also installing init, upstart, or systemd service
    scripts for the daemon, meaning that you can start and stop it as you would with
    any other services on your Docker host.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: REX-Ray 更进一步，还通过安装 init、upstart 或 systemd 服务脚本来启动守护进程，这意味着您可以像管理 Docker 主机上的其他服务一样启动和停止它。
- en: Again, once we have installed REX-Ray, the only interaction we had with the
    tool is by using the `rexray` command.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，一旦我们安装了 REX-Ray，我们与该工具的唯一交互方式就是使用 `rexray` 命令。
- en: Flocker
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flocker
- en: Flocker went one step further, rather than installing an installation script,
    we used the AWS CloudFormation templates supplied by Cluster HQ to bootstrap the
    environment for us.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Flocker 更进一步，而不是安装安装脚本，我们使用 Cluster HQ 提供的 AWS CloudFormation 模板来为我们引导环境。
- en: This did the obvious task of launching the Docker host, setting up the security
    groups, and installing and configuring both Docker and Flocker.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序完成了显而易见的任务：启动 Docker 主机、设置安全组，并安装和配置 Docker 和 Flocker。
- en: Flocker goes one step further than Convoy and REX-Ray by installing an agent
    that interacts with the remotely-hosted web API, the volume hub.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Flocker 比 Convoy 和 REX-Ray 更进一步，通过安装一个与远程托管的 Web API（卷中心）交互的代理。
- en: Also, as mentioned in this chapter, Flocker existed before the concept of volume
    plugins existed. So again, a lot of interaction with Flocker is done outside of
    Docker; in fact, Cluster HQ wrote their own wrapper for Docker so that you could
    easily create Flocker volumes before the option existed within Docker.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章所述，Flocker 在卷插件概念出现之前就已经存在。因此，许多与 Flocker 的交互是在 Docker 之外进行的；实际上，Cluster
    HQ 编写了他们自己的 Docker 封装程序，以便在 Docker 内部选项出现之前，您就可以轻松创建 Flocker 卷。
- en: Weave
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Weave
- en: This was the only third-party network plugin we looked at. Like Flocker, Weave
    existed before Docker launched its plugin functionality.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们查看的唯一第三方网络插件。像 Flocker 一样，Weave 在 Docker 推出插件功能之前就已经存在。
- en: Weave is slightly different from the other third-party tools that we have looked
    at. In this, what is downloaded is actually a bash script rather than a static
    binary.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Weave 与我们查看的其他第三方工具略有不同。在 Weave 中，下载的实际上是一个 Bash 脚本，而不是静态二进制文件。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This script is used to configure the host and download containers from the Weaveworks
    Docker Hub account, which can be found at [https://hub.docker.com/u/weaveworks/](https://hub.docker.com/u/weaveworks/).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本用于配置主机，并从 Weaveworks Docker Hub 帐户下载容器，您可以在 [https://hub.docker.com/u/weaveworks/](https://hub.docker.com/u/weaveworks/)
    找到该帐户。
- en: The script launches and configures the containers with enough permissions to
    interact with the host machine. The script is also responsible for sending commands
    via the `docker exec` command to the running containers and also configure `iptables`
    on the host machine.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本启动并配置容器，给予足够的权限以便与主机机器交互。该脚本还负责通过 `docker exec` 命令向运行中的容器发送命令，并在主机上配置 `iptables`。
- en: The commonalities among the plugins
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件之间的共性
- en: As you can see, and as you have experienced, all of these plugins have scripts
    and binaries that are external to Docker itself.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，正如您所经历的，这些插件都有脚本和二进制文件，它们是 Docker 本身之外的外部文件。
- en: 'They are also pretty much all written in the same language as Docker:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 它们几乎都是用与 Docker 相同的语言编写的：
- en: '| Plugin | Language |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 插件 | 语言 |'
- en: '| --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Convoy | Go |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| Convoy | Go |'
- en: '| REX-Ray | Go |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| REX-Ray | Go |'
- en: '| Flocker | Python |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| Flocker | Python |'
- en: '| Weave | Go |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| Weave | Go |'
- en: 'Majority of the services are written in Go, the only exception is Flocker,
    which is mostly written in Python:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务都是用 Go 编写的，唯一的例外是 Flocker，它主要是用 Python 编写的：
- en: '*Go is expressive, concise, clean, and efficient. Its concurrency mechanisms
    make it easy to write programs that get the most out of multicore and networked
    machines, while its novel type system enables flexible and modular program construction.
    Go compiles quickly to machine code yet has the convenience of garbage collection
    and the power of run-time reflection. It''s a fast, statically typed, compiled
    language that feels like a dynamically typed, interpreted language. [https://golang.org/](https://golang.org/).*'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Go语言简洁、清晰、有效率，其并发机制使得编写高效利用多核和联网机器的程序变得容易，而其新颖的类型系统则使得灵活且模块化的程序构建成为可能。Go语言快速编译为机器代码，同时具备垃圾回收的便利性和运行时反射的强大功能。它是一种快速的静态类型编译语言，使用起来却像是一种动态类型解释语言。[https://golang.org/](https://golang.org/)。*'
- en: Understanding a plugin
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解插件
- en: So far, we have established that all the plugins that we have installed have
    actually nothing to do with Docker directly, so what does a plugin do?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经确定，所有我们安装的插件实际上与Docker没有直接关系，那么插件到底做什么呢？
- en: 'Docker describes a plugin as:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Docker将插件描述为：
- en: '*"Docker plugins are out-of-process extensions which add capabilities to the
    Docker Engine."*'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“Docker插件是外部进程扩展，能够为Docker引擎添加功能。”*'
- en: This is exactly what we have seen when installing third-party tools, they all
    run alongside Docker as separate daemons.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们在安装第三方工具时所看到的，它们都作为独立的守护进程与Docker并行运行。
- en: Let's assume that we are going to be creating a volume plugin called `mobyfs`
    for the remainder of this chapter. The mobyfs plugin is a fictional service which
    is written in Go and it runs as a daemon.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将在本章的其余部分创建一个名为`mobyfs`的卷插件。mobyfs插件是一个虚构的服务，它是用Go语言编写的，并作为一个守护进程运行。
- en: Discovery
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现
- en: 'Typically, a plugin will be installed on the same host as the Docker binary.
    We can register our mobyfs plugin with Docker by creating the following files
    in either `/run/docker/plugins` if it''s a Unix socket file, or `/etc/docker/plugins`
    or `/usr/lib/docker/plugins` if it is one of the other two files:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，插件会安装在与Docker二进制文件相同的主机上。我们可以通过在`/run/docker/plugins`目录下创建以下文件（如果是Unix套接字文件），或者在`/etc/docker/plugins`或`/usr/lib/docker/plugins`目录下创建（如果是其他两种文件）来将mobyfs插件注册到Docker中：
- en: '`mobyfs.sock`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mobyfs.sock`'
- en: '`mobyfs.spec`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mobyfs.spec`'
- en: '`mobyfs.json`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mobyfs.json`'
- en: Plugins that use a Unix socket file must run on the same hosts as your Docker
    installation. Ones which use either a `.spec` or `.json` file can run on external
    hosts if your daemon supports TCP connections.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Unix套接字文件的插件必须与Docker安装在同一主机上。使用`.spec`或`.json`文件的插件，如果你的守护进程支持TCP连接，可以在外部主机上运行。
- en: 'If you were using a .spec file, your file would just contain a single URL to
    either a TCP host and port or local socket file. Any of the following three examples
    are valid:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是.spec文件，那么文件只需包含一个URL，指向TCP主机和端口或本地套接字文件。以下三种示例都是有效的：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you wanted to use a `.json` file, it must look something similar to the
    following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用`.json`文件，它的内容应类似于以下代码：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `TLSConfig` section of the JSON file is optional; however, if you are running
    your service on host other than your Docker host, I would recommend using HTTPS
    for communication between Docker and your plugin.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: JSON文件中的`TLSConfig`部分是可选的；然而，如果你将服务运行在Docker主机之外，我建议使用HTTPS进行Docker与插件之间的通信。
- en: Startup order
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动顺序
- en: 'Ideally, your plugin service should be started before Docker. If you are running
    a host, which has `systemd` installed, this can be achieved by using a `systemd`
    service file similar to the following one, which should be called `mobyfs.service`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，插件服务应在Docker之前启动。如果你正在运行的主机安装了`systemd`，则可以通过使用类似以下的`systemd`服务文件来实现这一点，文件应命名为`mobyfs.service`：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will ensure that your plugin service is always started before the main
    Docker service.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保你的插件服务始终在主Docker服务之前启动。
- en: If you are hosting your Plugin service on an external host, you may have to
    restart Docker for Docker to start communicating with your plugin service.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将插件服务托管在外部主机上，可能需要重启Docker才能让Docker开始与插件服务通信。
- en: It is possible to package your plugin inside a container. To get around Docker
    having to be started before the plugin service, each activation request will retry
    several times over 30 seconds.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将插件打包在容器内。为了避免Docker必须在插件服务之前启动，每个激活请求将在30秒内尝试多次。
- en: This will give the container enough time to start and to run the plugin service
    run though any bootstrapping processes before binding itself to a port on the
    container.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为容器提供足够的时间来启动，并在绑定自己到容器的端口之前运行插件服务的任何引导过程。
- en: Activation
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活
- en: 'Now that the plugin service has started, and we need to let Docker know where
    it should send requests to if the plugin service is called. According to our example,
    service is a volume plugin and we should run something similar to the following
    command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在插件服务已经启动，我们需要告诉 Docker 在调用插件服务时应该将请求发送到哪里。根据我们的示例，服务是一个卷插件，我们应该运行类似于以下命令的内容：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will mount the `volumename` volume, which we have already configured in
    our plugin service to `/data` in a container, which runs my base container image
    and attaches us to a shell.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把我们已经在插件服务中配置的 `volumename` 卷挂载到容器中的 `/data`，该容器运行我的基础容器镜像，并将我们连接到一个 shell。
- en: When the mobyfs volume driver is called, Docker will search through the three
    plugin directories that we covered in the *Discovery* section. By default, Docker
    will always look for a socket file, then either a `.spec` or `.json` file. The
    plugin name must match the filename in front of the file extension. If it is doesn't,
    the plugin will not be recognized by Docker.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 mobyfs 卷驱动程序时，Docker 将在我们在 *发现* 部分中讨论的三个插件目录中进行搜索。默认情况下，Docker 将始终先查找套接字文件，然后是
    `.spec` 或 `.json` 文件。插件名称必须与文件扩展名前的文件名匹配。如果不匹配，Docker 将无法识别该插件。
- en: API calls
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 调用
- en: Once the plugin has been called, the Docker daemon will make a post request
    using RPC-style JSON over HTTP to the plugin service using either the socket file
    or the URL defined in the `.spec` or `.json` file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件被调用，Docker 守护进程将通过 HTTP 使用 RPC 风格的 JSON 向插件服务发送 POST 请求，使用 `.spec` 或 `.json`
    文件中定义的套接字文件或 URL。
- en: This means that your plugin service must implement an HTTP server and bind itself
    to the socket or port that you defined in the Discovery section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你的插件服务必须实现一个 HTTP 服务器，并将其绑定到你在发现部分中定义的套接字或端口。
- en: 'The first request that is made by Docker will be to `/Plugin.Activate`. Your
    plugin service must respond to one of three responses. As mobyfs is a volume plugin,
    the response would be as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 发出的第一个请求将是 `/Plugin.Activate`。你的插件服务必须对三种响应之一作出回应。由于 mobyfs 是一个卷插件，响应将如下所示：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If it was a network driver, then the response our plugin service should give
    would be as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它是一个网络驱动程序，那么我们的插件服务应给出的响应将如下所示：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The final response of plugin service is as shown in the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 插件服务的最终响应如下所示：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Any other responses will be rejected and the activation will fail. Now that
    Docker has activated the plugin, it will continue to make post requests to the
    plugin service depending on the response it got when calling `/Plugin.Activate`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 任何其他响应都将被拒绝，激活将失败。现在 Docker 已经激活了插件，它将继续根据调用 `/Plugin.Activate` 时收到的响应，向插件服务发送
    POST 请求。
- en: Writing your plugin service
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写你的插件服务
- en: 'As mentioned in the previous section, Docker will interact with your plugin
    service by making HTTP calls. These calls are documented on the following pages:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如前节所述，Docker 将通过发出 HTTP 调用与插件服务进行交互。这些调用的文档可以在以下页面中找到：
- en: '**Volume** **Driver Plugins**: [https://docs.docker.com/engine/extend/plugins_volume/](https://docs.docker.com/engine/extend/plugins_volume/)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卷** **驱动插件**：[https://docs.docker.com/engine/extend/plugins_volume/](https://docs.docker.com/engine/extend/plugins_volume/)'
- en: '**Network** **Driver Plugins**: [https://docs.docker.com/engine/extend/plugins_network/](https://docs.docker.com/engine/extend/plugins_network/)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络** **驱动插件**：[https://docs.docker.com/engine/extend/plugins_network/](https://docs.docker.com/engine/extend/plugins_network/)'
- en: '**Authorization** **Plugins**: [https://docs.docker.com/engine/extend/plugins_authorization/](https://docs.docker.com/engine/extend/plugins_authorization/)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权** **插件**：[https://docs.docker.com/engine/extend/plugins_authorization/](https://docs.docker.com/engine/extend/plugins_authorization/)'
- en: 'Docker also provides an SDK as a collection for Go helpers, these can be found
    at the following URL:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 还提供了一个 SDK，作为 Go 帮助程序的集合，这些可以在以下 URL 找到：
- en: '[https://github.com/docker/go-plugins-helpers](https://github.com/docker/go-plugins-helpers)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/docker/go-plugins-helpers](https://github.com/docker/go-plugins-helpers)'
- en: Each helper comes with examples, as well as links to open source projects, which
    serve as further examples on how to implement the helper.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个帮助程序都附带示例以及开源项目的链接，这些项目提供了如何实现该帮助程序的进一步示例。
- en: 'These API requests should not be confused with the Docker Remote API, which
    is documented at the following URL:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 API 请求不应与 Docker 远程 API 混淆，Docker 远程 API 的文档可在以下网址查看：
- en: '[https://docs.docker.com/engine/reference/api/docker_remote_api/](https://docs.docker.com/engine/reference/api/docker_remote_api/)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/engine/reference/api/docker_remote_api/](https://docs.docker.com/engine/reference/api/docker_remote_api/)'
- en: This is the API, which allows your applications to interact with Docker, and
    not Docker to interact with your application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 API，它允许您的应用与 Docker 进行交互，而不是 Docker 与您的应用进行交互。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As you can see, we only discussed how Docker will interact with the plugin service
    that you have written and didn't cover how you can actually write a plugin service.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们只讨论了 Docker 如何与您编写的插件服务进行交互，并没有涉及如何实际编写插件服务。
- en: 'The reason for this is that due to the plugin service that we would have had
    to cover, we would also need the following features:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因是由于我们需要涵盖的插件服务，我们还需要以下功能：
- en: To be written in Go
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Go 编写
- en: To be able run as a daemon
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够作为守护进程运行
- en: To contain an HTTP server bound to a Unix socket or TCP port
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含一个绑定到 Unix 套接字或 TCP 端口的 HTTP 服务器
- en: To be able to accept and answer requests made to it by the Docker daemon
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够接受并回答 Docker 守护进程向其发出的请求
- en: To translate the API requests that Docker is making to a filesystem or network
    service
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Docker 发出的 API 请求转化为文件系统或网络服务
- en: As you can imagine, this has the potential of being an entire book by itself.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所想，这本身就有可能成为一本完整的书。
- en: Also, building your own plugin is quite an undertaking as you already have to
    have the foundations of a service written. While it seems like there are a lot
    of Docker plugins out there, searching GitHub for Docker plugins only returns
    a few dozen plugins that have been written to use the Docker plugin API.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，构建自己的插件是一个相当大的工程，因为您已经需要编写服务的基础部分。虽然似乎有很多 Docker 插件，但在 GitHub 上搜索 Docker
    插件只会返回一些几十个已经使用 Docker 插件 API 编写的插件。
- en: The other projects returned are all tools or plugins for third-party services
    (such as Jenkins, Maven, and so on) that communicate with the Docker Remote API.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 其余返回的项目都是与 Docker 远程 API 通信的第三方服务工具或插件（例如 Jenkins、Maven 等）。
- en: In the next chapter, we are going to look at third-party tools to extend your
    infrastructure past using Docker Machine.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨第三方工具，以便在使用 Docker Machine 之外扩展您的基础设施。
