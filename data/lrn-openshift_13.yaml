- en: Deploying Multi-Tier Applications Using Templates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板部署多层应用程序
- en: Previously, you learned how to run a standalone container in OpenShift. In the
    real world, almost all applications are composed of multiple interconnected containers.
    For example, the WordPress container requires access to a database instance. OpenShift
    provides a facility that lets you pack everything related to your application
    into a single object, called a *template, *and deploy everything at once by processing
    that template. The basic template concept was explained in [Chapter 9](part0195.html#5PUTM0-78aafb146b304cdeb9b3261a70edabde), *Advanced
    OpenShift Concepts*, and it is very similar to Docker Compose. This chapter will
    be a hands-on lab experiment, illustrating how to use OpenShift templates to deploy
    applications. The upcoming labs will show you, in detail, how to create a multi-tier
    application from scratch.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，你已经学会了如何在 OpenShift 中运行一个独立的容器。在现实世界中，几乎所有的应用程序都是由多个相互连接的容器组成。例如，WordPress
    容器需要访问一个数据库实例。OpenShift 提供了一个功能，可以将与你的应用程序相关的所有内容打包到一个对象中，这个对象叫做*模板*，并通过处理该模板一次性部署所有内容。基本的模板概念已在[第
    9 章](part0195.html#5PUTM0-78aafb146b304cdeb9b3261a70edabde)，*高级 OpenShift 概念*中进行了解释，它与
    Docker Compose 非常相似。本章将进行一个实践实验，演示如何使用 OpenShift 模板来部署应用程序。接下来的实验将详细展示如何从零开始创建一个多层应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: An OpenShift template overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift 模板概述
- en: Creating a custom template
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义模板
- en: Using templates to deploy applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模板部署应用程序
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter doesn''t have strict environmental restrictions; any OpenShift
    installations and development environments are supported: MinitShift, `oc cluster
    up`, or standard production-ready deployment based on Ansible. It is up to you
    which flavor you use. However, this chapter is based on the `oc cluster up` running
    within vagrant. The following `Vagrantfile` can be used to deploy the lab:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有严格的环境限制；支持任何 OpenShift 安装和开发环境：MinitShift、`oc cluster up` 或基于 Ansible 的标准生产就绪部署。你可以选择使用哪种版本。然而，本章基于在
    Vagrant 中运行的 `oc cluster up`。以下 `Vagrantfile` 可用于部署实验：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The environment can be deployed as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 环境可以按如下方式部署：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the previously listed vagrant machine is deployed, you may connect to it
    as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦先前列出的 Vagrant 虚拟机部署完成，你可以按照以下方式连接到它：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, log in as a `developer` user in order to be able to run most commands:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以 `developer` 用户身份登录，以便能够运行大多数命令：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can use any password, as OpenShift uses the `AllowAll` identity provider
    by default.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用任何密码，因为 OpenShift 默认使用 `AllowAll` 身份提供程序。
- en: Some of the lab items will require a custom DNS record, which can be simulated
    by setting a record in `/etc/hosts`. Both methods are acceptable.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一些实验项目将需要自定义 DNS 记录，可以通过在 `/etc/hosts` 中设置记录来模拟。两种方法都可以接受。
- en: It is also assumed that you have a web browser, such as Mozilla Firefox or Google
    Chrome.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还假设你有一个 web 浏览器，如 Mozilla Firefox 或 Google Chrome。
- en: OpenShift template overview
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenShift 模板概述
- en: An OpenShift template is a set of API resources that can be parameterized and
    processed to produce a list of objects for creation by OpenShift. A template can
    be processed to create any desired OpenShift objects (such as deployment configurations,
    build configurations, and so on). A template can also define a set of labels to
    apply to every object defined in the template. You can apply a template by using
    the CLI or the web console. For example, a template might contain two pods (an
    application and a database), a service, and a route. Once the template has been
    developed, you can reuse it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 模板是一组可以参数化并处理的 API 资源，用于生成由 OpenShift 创建的对象列表。模板可以处理并创建任何所需的 OpenShift
    对象（例如部署配置、构建配置等）。模板还可以定义一组要应用于模板中每个对象的标签。你可以使用 CLI 或 Web 控制台来应用模板。例如，一个模板可能包含两个
    pod（一个应用程序和一个数据库）、一个服务和一个路由。模板开发完成后，你可以重复使用它。
- en: Template syntax
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板语法
- en: 'Templates, like any other OpenShift resources, can be created from a raw YAML
    or JSON definition. An example is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 模板与任何其他 OpenShift 资源一样，可以通过原始的 YAML 或 JSON 定义来创建。一个示例如下：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding example includes only one resource—a pod named `app1`. It also
    includes a parameter—`SHOW_DATA`. Parameters can be used to customize application
    deployment and accommodate all kinds of use cases.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例仅包含一个资源——名为 `app1` 的 pod。它还包含一个参数——`SHOW_DATA`。参数可以用于自定义应用程序部署，以适应各种使用场景。
- en: 'Parameters can also have the following default values:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 参数也可以有以下默认值：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In some cases, we may want to generate values according to a certain pattern,
    as shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们可能希望根据某种模式生成值，如下所示：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding example, instantiating the template will generate a random
    password, eight characters long, consisting of all upper and lowercase alphabet
    letters, as well as numbers. Although that syntax is highly reminiscent of regular
    expressions, it implements only a small subset of **Perl Compatible Regular Expressions**
    (**PCRE**), so you can still use the `\w`, `\d`, and `\a` modifiers:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，实例化模板将生成一个随机密码，长度为八个字符，由所有大写和小写字母以及数字组成。尽管该语法与正则表达式非常相似，但它仅实现了**Perl兼容正则表达式**（**PCRE**）的一个小子集，因此你仍然可以使用`\w`、`\d`和`\a`修饰符：
- en: '`[w]{10}`: This expands to 10 alphabet characters, numbers, and underscores.
    This follows the PCRE standard and is the same as `[a-zA-Z0-9_]{10}`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[w]{10}`：这会扩展为10个字母字符、数字和下划线。遵循PCRE标准，与`[a-zA-Z0-9_]{10}`相同。'
- en: '`[\d]{10}`: This expands to 10 numbers. This is the same as `[0-9]{10}`.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[\d]{10}`：这会扩展为10个数字。与`[0-9]{10}`相同。'
- en: '`[\a]{10}`: This expands to 10 alphabetical characters. This is the same as `[a-zA-Z]{10}`.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[\a]{10}`：这会扩展为10个字母字符。与`[a-zA-Z]{10}`相同。'
- en: This capability is very useful for generating random passwords.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能对于生成随机密码非常有用。
- en: It's important to understand that the process of parameter expansion takes place
    when resources are being created from the template, not when the template itself
    is created; so, each generated resource gets its own unique value.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 需要理解的是，参数扩展过程发生在从模板创建资源时，而不是模板本身创建时；因此，每个生成的资源都会获得其独特的值。
- en: Adding templates
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加模板
- en: Once a template is developed, it can be added to OpenShift like any other YAML
    or JSON-defined objects, using the `oc create` command. It is a common practice
    to use a separate tenant specifically for templates, which will be shared between
    multiple projects. A default installation of the Red Hat **OpenShift Container
    Platform** (**OCP**) provides a number of templates in the `openshift` project. All
    of an OpenShift cluster's users have read access to the project, but only the
    cluster admin is able to modify or create templates in the project.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模板开发完成，它可以像任何其他YAML或JSON定义的对象一样，通过`oc create`命令添加到OpenShift中。通常做法是使用专门的租户来存放模板，该租户将在多个项目间共享。Red
    Hat **OpenShift容器平台**（**OCP**）的默认安装在`openshift`项目中提供了许多模板。OpenShift集群的所有用户都可以读取该项目，但只有集群管理员能够修改或创建项目中的模板。
- en: 'The following example shows how to add a template to your current project:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何将模板添加到当前项目：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will need to become the `system:admin` user to create a template in the
    `openshift` tenant:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要成为`system:admin`用户才能在`openshift`租户中创建模板：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Displaying template parameters
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示模板参数
- en: The OpenShift community has developed many useful OpenShift templates, to deploy
    a number of well-known services. Once the template is determined, you will need
    to understand which parameters it accepts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift社区开发了许多有用的OpenShift模板，用于部署一些知名的服务。一旦确定了模板，你需要了解它接受哪些参数。
- en: 'There are a couple of ways to list all of the parameters:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以列出所有参数：
- en: Using the `oc process --parameters` command (this is the easiest one)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`oc process --parameters`命令（这是最简单的一种）
- en: Looking for the `parameters` section in the template's definition
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板定义中查找`parameters`部分
- en: 'Among many others, the OpenShift default installation comes with the `mariadb-persistent`
    template, as shown here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在众多其他模板中，OpenShift默认安装包含了`mariadb-persistent`模板，如下所示：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That template has a number of parameters, listed as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该模板有多个参数，列出如下：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you don''t want to import the template into OpenShift, the same method allows
    you to display the parameters of a locally stored OpenShift template:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想将模板导入到OpenShift中，同样的方法也可以显示本地存储的OpenShift模板的参数：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Another method is to use the `oc describe` command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用`oc describe`命令：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Processing a template
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理模板
- en: 'The following is a real-life example of deploying an application from a predefined
    template using `oc new-app` command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`oc new-app`命令从预定义模板部署应用程序的实际示例：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding example, we passed the template''s name to the command as
    a parameter; the `oc` utility can also build an application from the template you
    specify. The following is the list of objects created by the `oc new-app` command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将模板的名称作为参数传递给命令；`oc` 工具也可以从你指定的模板中构建应用程序。以下是 `oc new-app` 命令创建的对象列表：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This easy you can create a fully functional jenkins CI/CD application running
    within OpenShift.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你可以在 OpenShift 中轻松创建一个完全功能的 Jenkins CI/CD 应用程序。
- en: 'Clean out your project before we proceed:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，清理你的项目：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Creating a custom template
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义模板
- en: In most cases, developers use the predefined OpenShift templates that come with
    the OpenShift installation; however, at times they don't suit a particular case,
    so a customized template has to be developed. In this section, we will provide
    you with an overview of how to create your own template.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，开发人员使用 OpenShift 安装时自带的预定义模板；然而，有时这些模板并不适用于特定的情况，因此需要开发定制化的模板。在本节中，我们将向你介绍如何创建你自己的模板。
- en: Developing YAML/JSON template definitions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发 YAML/JSON 模板定义
- en: If you are familiar with the template layout, you might want to develop a template
    from scratch, using a standard YAML or JSON-based file. This method will allow
    you to create a clean template, without any runtime data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉模板布局，可能会想从头开始开发一个模板，使用标准的 YAML 或 JSON 文件。这种方法可以让你创建一个干净的模板，没有任何运行时数据。
- en: Some of OpenShift's features may speed up the process of template development.
    For example, `oc explain` allows you to explore the syntax of all OpenShift API
    objects, serving as a form of documentation.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 的一些功能可能会加速模板开发的过程。例如，`oc explain` 允许你探索所有 OpenShift API 对象的语法，作为一种文档形式。
- en: 'If given no parameters, `oc explain` lists all of the kinds of resources supported
    by the current version of OpenShift:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有给定参数，`oc explain` 会列出当前版本 OpenShift 支持的所有资源类型：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding command accepts the type of a resource as an argument, in order
    to display its syntax:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令接受资源类型作为参数，以显示其语法：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Some OpenShift resources have multilevel structures. Use `.` (the dot) as a
    level separator, to find out the structure of such an attribute:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 OpenShift 资源有多级结构。使用 `.`（点）作为级别分隔符，以了解此类属性的结构：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And you can go even further in this hierarchy:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个层次结构中进一步深入：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: OpenShift documentation is very good and helpful this way.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 的文档在这方面非常好且有帮助。
- en: Exporting existing resources as templates
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将现有资源导出为模板
- en: Existing OpenShift resources may be exported as templates by using the `oc export`
    command. Let's create a running application using `oc new-app` command first.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的 OpenShift 资源可以通过使用 `oc export` 命令导出为模板。让我们先使用 `oc new-app` 命令创建一个运行中的应用程序。
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once the template is created, you can see its contents:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 模板创建后，你可以查看其内容：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This method of creating a template is fast; however, you have to remove all
    runtime data from the template. For example, all timestamps and status records
    should be deleted.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这种创建模板的方法很快；然而，你必须从模板中删除所有运行时数据。例如，所有时间戳和状态记录应该被删除。
- en: Using the oc new-app -o command
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `oc new-app -o` 命令
- en: 'By default, the `oc new-app` command creates all of the resources required
    for a project. You can modify this behavior and get the utility to create a resource
    definition file, instead of creating resources:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`oc new-app` 命令会创建项目所需的所有资源。你可以修改此行为，让工具创建资源定义文件，而不是创建资源：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This doesn't create an OpenShift template, but it can be used to create a skeleton
    of the template's structure.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会创建一个 OpenShift 模板，但它可以用来创建模板结构的骨架。
- en: Clear out your your project environment, before we proceed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，清理你的项目环境。
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Using templates to deploy a multi-tier application
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板部署多层应用程序
- en: During this lab, we will deploy **Gogs** (Git repository management software)
    with a PostgreSQL backend, using all of the knowledge that we have acquired so
    far.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们将部署**Gogs**（Git 仓库管理软件），并使用 PostgreSQL 后端，运用我们目前为止学到的所有知识。
- en: The Gogs application template
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gogs 应用模板
- en: 'We are going to use a template from the OpenShift demos that are available
    at [https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml](https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自 OpenShift 演示的模板，该模板可以从[https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml](https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml)获取：
- en: 'Let''s download this template locally using the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令将此模板下载到本地：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'According to the preceding output, most parameters have a default value (except
    for the `HOSTNAME` parameter). If you need to list parameters separately, you
    can use the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述输出，大多数参数都有默认值（除了`HOSTNAME`参数）。如果需要单独列出参数，可以使用以下命令：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Creating the Gogs application
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Gogs 应用
- en: 'Now that we have created the template, it''s time to use it:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了模板，是时候使用它了：
- en: 'First, we need to create a separate project for this lab:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为本实验创建一个单独的项目：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let''s try to deploy Gogs without specifying a mandatory `HOSTNAME` parameter:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试在不指定必需的`HOSTNAME`参数的情况下部署 Gogs：
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: OpenShift aborted the processing of the template, as the `HOSTNAME` wasn't provided.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 中止了模板的处理，因为未提供`HOSTNAME`。
- en: 'Let''s try again, with the `HOSTNAME` set:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们重新尝试，并设置`HOSTNAME`：
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The template has been processed by OpenShift. After some time, all of the OpenShift
    objects specified in the template should be created:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 模板已由 OpenShift 处理。经过一段时间后，模板中指定的所有 OpenShift 对象应该被创建：
- en: '[PRE29]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The route `gogs` uses the `gogs.example.com` hostname, which we specified when
    instantiating the template.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 路由`gogs`使用了`gogs.example.com`主机名，这是我们在实例化模板时指定的。
- en: Add gogs.example.com record to your hosts file
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 将 gogs.example.com 记录添加到您的 hosts 文件
- en: '[PRE30]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Gogs has been successfully deployed. To verify that it works properly, we need
    to access it through a web browser on `http://gogs.example.com:1080/`
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Gogs 已成功部署。为了验证它是否正常工作，我们需要通过 Web 浏览器访问 `http://gogs.example.com:1080/`
- en: '![](img/00067.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.jpeg)'
- en: Clear out your environment.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 清理您的环境。
- en: '[PRE31]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If you are going to continue with the following Chapter, you can leave your
    OpenShift cluster up, otherwise you can shutdown or delete vagrant VM.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算继续进行下一章的内容，可以保持 OpenShift 集群运行，否则可以关闭或删除 vagrant 虚拟机。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about OpenShift templates, including how to write
    your own templates and deploy applications from templates.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了 OpenShift 模板，包括如何编写自己的模板并从模板部署应用。
- en: In the following chapter, you will learn how OpenShift simplifies Docker image
    life cycles by providing a Docker build strategy that automates application deployment
    from the source code, if a Dockerfile is available.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将学习 OpenShift 如何通过提供 Docker 构建策略简化 Docker 镜像生命周期，如果有 Dockerfile 文件，OpenShift
    会自动从源代码部署应用。
- en: Questions
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the following OpenShift projects holds default templates?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个 OpenShift 项目包含默认模板？
- en: default
  id: totrans-119
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认
- en: openshift
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: openshift
- en: openshift-infra
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: openshift-infra
- en: openshift-node
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: openshift-node
- en: templates
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板
- en: 'Which of the following commands can show you a list of parameters for the `mytemplate`
    template? choose three:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令可以列出`mytemplate`模板的参数？选择三项：
- en: '`oc get template mytemplate -n openshift -o yaml`'
  id: totrans-125
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc get template mytemplate -n openshift -o yaml`'
- en: '`oc process --parameters -f mytemplate.json`'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc process --parameters -f mytemplate.json`'
- en: '`oc describe template mytemplate -n openshift`'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc describe template mytemplate -n openshift`'
- en: '`oc get parameters -t mytemplate`'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc get parameters -t mytemplate`'
- en: '`oc get template mytemplate -n openshift`'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc get template mytemplate -n openshift`'
- en: '`oc new-app mytrmplate`'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc new-app mytemplate`'
- en: Which of the following OpenShift entities can be created using templates?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种 OpenShift 实体可以通过模板创建？
- en: Pod
  id: totrans-132
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pod
- en: Service
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务
- en: Route
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由
- en: Deployment config
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署配置
- en: All of the above
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上所有
- en: Further reading
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Consider the following links for further reading:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下链接以获取进一步的阅读资料：
- en: Templates at [https://docs.openshift.org/latest/dev_guide/templates.html](https://docs.openshift.org/latest/dev_guide/templates.html).
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于模板的信息请参见[https://docs.openshift.org/latest/dev_guide/templates.html](https://docs.openshift.org/latest/dev_guide/templates.html)。
- en: Loading the Default Image Streams and Templates at [https://docs.openshift.org/latest/install_config/imagestreams_templates.html](https://docs.openshift.org/latest/install_config/imagestreams_templates.html).
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载默认的镜像流和模板，请访问[https://docs.openshift.org/latest/install_config/imagestreams_templates.html](https://docs.openshift.org/latest/install_config/imagestreams_templates.html)。
