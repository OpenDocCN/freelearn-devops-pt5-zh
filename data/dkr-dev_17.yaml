- en: '*Chapter 14*: Advanced Docker Security – Secrets, Secret Commands, Tagging,
    and Labels'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第14章*：高级 Docker 安全性——秘密、秘密命令、标记和标签'
- en: We've seen several examples so far of the need to use files that contain secrets.
    We can think of secrets as a generic term for the types of sensitive data that
    would typically be stored in config and ENV files, such as database access credentials
    or API tokens. Docker provides a handy method for securing this type of data and
    sharing it. For legacy systems using swarm mode instead of Kubernetes, having
    an understanding of how to apply security to these environments is important,
    as you may have to retroactively fix environments in your career.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到多个需要使用包含秘密数据的文件的例子。我们可以将“秘密”视为一个通用术语，指的是通常存储在配置文件和环境文件中的敏感数据类型，如数据库访问凭证或API令牌。Docker
    提供了一种方便的方法来保护这类数据并进行共享。对于使用 Swarm 模式而非 Kubernetes 的遗留系统，了解如何在这些环境中应用安全措施非常重要，因为在你的职业生涯中，可能需要对这些环境进行后期修复。
- en: Along with managing secret data, we can also use labels and tags to help ensure
    we are working with security in mind. You've seen tags already in the previous
    chapter and we will explore these further later in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了管理秘密数据外，我们还可以使用标签和标记来帮助确保我们在进行安全性工作时考虑到这些因素。你在上一章中已经看到了标记，我们将在本章后续内容中进一步探讨这些。
- en: Additionally, we will explore how metadata labels can be used to provide extra
    information about a container and how to use the `security.txt` file.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将探讨如何使用元数据标签提供容器的额外信息，以及如何使用 `security.txt` 文件。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: An introduction to securely storing secrets in Docker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Docker 中安全存储秘密的介绍
- en: What secrets are and why we need them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是秘密以及我们为什么需要它们
- en: A walk through the Raft log file
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历 Raft 日志文件
- en: Adding, editing, and removing secrets from a swarm
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Swarm 中添加、编辑和移除秘密
- en: Using tags more effectively to ensure we use secure images
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更有效地使用标签，确保我们使用安全的镜像
- en: Implementing metadata labels and the secrets.txt file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现元数据标签和 secrets.txt 文件
- en: Let's get started by looking at what Docker secrets are and why they are beneficial.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从了解 Docker 秘密是什么以及它们为什么有益开始。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need to have access to a Linux machine running Docker.
    We recommend that you use the setup you have been using so far in this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章，你需要访问一台运行 Docker 的 Linux 机器。我们建议你使用本书中到目前为止所使用的设置。
- en: 'In addition to this, you will need an account on Docker Hub in order to access
    images located there. If you have not already set one up, you can do so via the
    following link:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还需要一个 Docker Hub 账户，以便访问那里的镜像。如果你还没有设置，可以通过以下链接进行设置：
- en: '[https://hub.docker.com](https://hub.docker.com)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://hub.docker.com](https://hub.docker.com)'
- en: 'Finally, in order to explore using Docker secrets, you will need to set up
    at least two containers and use Docker''s swarm feature. You can read more about
    swarm mode here: [https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了探索使用 Docker 秘密，你需要设置至少两个容器并使用 Docker 的 Swarm 功能。你可以在这里了解更多关于 Swarm 模式的信息：[https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/)
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码是如何运行的：
- en: '[https://bit.ly/3iDsjkA](https://bit.ly/3iDsjkA)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3iDsjkA](https://bit.ly/3iDsjkA)'
- en: Securely storing secrets in Docker
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Docker 中安全存储秘密
- en: An inevitable part of working with complex, networked software projects is having
    to deal with secret data. This can be a range of things such as private keys for
    SSH access, SSL certificates, passwords, and API keys.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 处理复杂的网络化软件项目时，不可避免的一部分就是要处理秘密数据。这可以包括像 SSH 访问的私钥、SSL 证书、密码和 API 密钥等各种数据。
- en: In order to share secrets securely with multiple containers, you will, of course,
    need to avoid attempts to store the secret in the container itself in a fashion
    that allows a potential attacker to access it. This layer of abstraction is not
    only useful for managing different sets of credentials based upon the environment,
    but also provides an extra layer of security should the container be compromised
    in some fashion.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在多个容器之间安全共享秘密，当然，你需要避免尝试将秘密存储在容器本身中，避免以允许潜在攻击者访问的方式存储秘密。这个抽象层不仅对于根据环境管理不同的凭证集有用，而且还提供了一层额外的安全保障，以防容器以某种方式被破坏。
- en: Thankfully, Docker comes with a useful feature for achieving this goal. It is
    simply called Docker secrets. In order to use this feature or the Kubernetes equivalent,
    you will need to implement swarm services or Kubernetes itself. As we have recommended
    elsewhere in this book, you may wish to avoid swarm services if possible, in favor
    of Kubernetes. However, you may have to work with legacy systems where they are
    in use, so understanding secrets in this case is important. With this in mind,
    containers should, therefore, run as a service.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Docker 提供了一个有用的功能来实现这一目标，名为 Docker secrets。要使用这个功能或 Kubernetes 对应的功能，你需要实现
    Swarm 服务或 Kubernetes 本身。正如我们在本书的其他地方所建议的，如果可能的话，你可能希望避免使用 Swarm 服务，转而使用 Kubernetes。然而，在处理使用
    Swarm 的遗留系统时，你可能需要与之合作，因此理解在这种情况下如何使用 secrets 是很重要的。考虑到这一点，容器应作为服务运行。
- en: 'Mirantis, having purchased Docker, has pledged open-ended support for Docker
    Swarm as of February 2020 ([https://www.mirantis.com/blog/mirantis-will-continue-to-support-and-develop-docker-swarm/](https://www.mirantis.com/blog/mirantis-will-continue-to-support-and-develop-docker-swarm/)).
    You may be familiar with this concept from [*Chapter 5*](B11641_05_Final_NM_ePub.xhtml#_idTextAnchor080),
    *Alternatives for Deploying and Running Containers in Production*; however, if
    you need a refresher you can follow the steps provided on the Docker website for
    getting started with swarm mode as an alternative to Kubernetes if you wish:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Mirantis 在 2020 年 2 月收购 Docker 后，承诺对 Docker Swarm 提供长期支持（[https://www.mirantis.com/blog/mirantis-will-continue-to-support-and-develop-docker-swarm/](https://www.mirantis.com/blog/mirantis-will-continue-to-support-and-develop-docker-swarm/)）。你可能已经在
    [*第 5 章*](B11641_05_Final_NM_ePub.xhtml#_idTextAnchor080)《*在生产环境中部署和运行容器的替代方案*》中熟悉过这个概念；然而，如果你需要复习，可以按照
    Docker 网站上提供的步骤开始使用 Swarm 模式，作为 Kubernetes 的替代方案：
- en: '[https://docs.docker.com/engine/swarm/swarm-tutorial/](https://docs.docker.com/engine/swarm/swarm-tutorial/)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/engine/swarm/swarm-tutorial/](https://docs.docker.com/engine/swarm/swarm-tutorial/)'
- en: The secrets feature in both swarms and Kubernetes allows you to manage data
    such as passwords and API keys centrally and then securely share it with the containers
    of your choice. This avoids having to hardcode values in an insecure fashion within
    the container, or having to allow all containers access to the sensitive data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm 和 Kubernetes 中的机密功能允许你集中管理数据（如密码和 API 密钥），然后将其安全地共享给你选择的容器。这避免了在容器内不安全地硬编码值，或者让所有容器都能访问敏感数据。
- en: Additionally, secrets, when shared with other containers in a swarm by Docker
    secrets, for example, are transferred over a secure connection encrypted via SSL/TLS.
    Let's now take a deeper look at how Docker secrets work at a fundamental level,
    including an important feature called the Raft log.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当通过 Docker secrets 与 Swarm 中的其他容器共享机密时，这些机密会通过 SSL/TLS 加密的安全连接进行传输。现在，让我们更深入地了解
    Docker secrets 如何在基础层面上工作，包括一个名为 Raft 日志的重要功能。
- en: The Raft log
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Raft 日志
- en: In order to share content between swarm nodes, we need to ensure there is both
    consensus and fault tolerance. In short, this means that all nodes in the network
    agree on some set of values to maintain a consistent state.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Swarm 节点之间共享内容，我们需要确保既有共识又有容错能力。简而言之，这意味着网络中的所有节点都需就某一组值达成一致，以保持一致的状态。
- en: 'The algorithm that Docker Swarm uses is called Raft. You can read more about
    the technical details in the paper *In Search of an Understandable Consensus Algorithm*,
    available at the Raft GitHub account:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm 使用的算法叫做 Raft。你可以在论文《*寻找可理解的共识算法*》中阅读更多技术细节，论文可在 Raft 的 GitHub 账户上找到：
- en: '[https://raft.github.io/raft.pdf](https://raft.github.io/raft.pdf)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://raft.github.io/raft.pdf](https://raft.github.io/raft.pdf)'
- en: 'Docker Swarm uses a file known as the Raft log file as part of its implementation
    of the algorithm. The benefit of this file is that it can be used for storing
    secrets, which subsequently have to be shared across 1 to *n* nodes. When a secret
    is added via the `docker secret` command, a value is added to the Raft log file
    and is then made available via a temporary filesystem, as seen in this example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm 使用一个称为 Raft 日志文件的文件，作为其实现算法的一部分。这个文件的好处在于它可以用于存储机密数据，这些数据随后需要在
    1 到 *n* 个节点之间共享。当通过 `docker secret` 命令添加机密时，一个值会被添加到 Raft 日志文件中，然后通过临时文件系统提供，如下所示的示例：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And this in essence is how a secret can be shared between multiple Docker containers
    in a swarm. Reading the secret in an application will depend on what language
    you are using. For example, if you were modifying the ShipIt Clicker application
    you would be using JavaScript. If we had a secret such as an API key file, we
    could access it directly in the JavaScript source code using the `fs` module,
    as the following example demonstrates:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，这就是如何在 Docker Swarm 中的多个容器之间共享一个秘密。应用程序读取秘密的方式取决于你使用的语言。例如，如果你在修改 ShipIt
    Clicker 应用程序，你会使用 JavaScript。如果我们有一个 API 密钥文件之类的秘密，我们可以直接在 JavaScript 源代码中使用 `fs`
    模块访问它，如以下示例所示：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, this is a fairly simple approach.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这是一种相当简单的方法。
- en: Although this file is encrypted, we can also add an extra layer of security
    through locking.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此文件是加密的，但我们也可以通过锁定提供额外的安全层。
- en: Swarms can be locked using the `--autolock` flag in order to prevent an attacker
    from decrypting the Raft log file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `--autolock` 标志锁定 Swarm，以防止攻击者解密 Raft 日志文件。
- en: 'Refer to the Docker documentation for more details:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 Docker 文档以获取更多详细信息：
- en: '[https://docs.docker.com/engine/swarm/swarm_manager_locking/](https://docs.docker.com/engine/swarm/swarm_manager_locking/)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/engine/swarm/swarm_manager_locking/](https://docs.docker.com/engine/swarm/swarm_manager_locking/)'
- en: Now you have a basic understanding of how the Docker secrets feature works,
    let's look at how we use it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经基本了解了 Docker secrets 功能的工作原理，我们来看看如何使用它。
- en: Adding, inspecting, and removing secrets
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加、查看和删除秘密
- en: We will now begin exploring the various commands associated with secrets.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将开始探索与 secrets 相关的各种命令。
- en: Feel free to also substitute the commands in this section with their Kubernetes
    equivalent if you wish to try those instead. You can find the list of `kubectl`
    commands at [https://kubernetes.io/docs/concepts/configuration/secret/](https://kubernetes.io/docs/concepts/configuration/secret/).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意尝试 Kubernetes 等效的命令，也可以替换本节中的命令。你可以在 [https://kubernetes.io/docs/concepts/configuration/secret/](https://kubernetes.io/docs/concepts/configuration/secret/)
    上找到 `kubectl` 命令的列表。
- en: Or you can refer back to [*Chapter 8*](B11641_08_Final_AM_ePub.xhtml#_idTextAnchor157),
    *Deploying Docker Apps to Kubernetes*, where we created, described, retrieved,
    and edited secrets via `kubectl`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以参考 [*第8章*](B11641_08_Final_AM_ePub.xhtml#_idTextAnchor157)，*将 Docker 应用部署到
    Kubernetes*，我们在那里通过 `kubectl` 创建、描述、检索和编辑了秘密。
- en: In relation to Docker, we will start by creating secrets first.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Docker，我们将首先从创建秘密开始。
- en: Creating
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建
- en: 'The `create` command is how we add a new secret to the Raft log file. Its basic
    format is the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`create` 命令是我们将新秘密添加到 Raft 日志文件中的方法。其基本格式如下：'
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You may notice this is similar to the command in `kubectl`, which is `kubectl
    create secret`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到这与 `kubectl` 中的命令类似，即 `kubectl create secret`。
- en: 'When creating a secret, we can use the `-l` flag to add a label to the secret,
    such as the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建秘密时，我们可以使用 `-l` 标志为秘密添加标签，如下所示：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This allows us to label values, so we know which environment they are destined
    for. For example, we can add a key value for the environment such as **Quality
    Assurance** (**QA**), **Development** (**DEV**), and **Production** (**PROD**).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够为值添加标签，从而知道它们是针对哪个环境的。例如，我们可以为环境添加一个键值对，如**质量保证**（**QA**）、**开发**（**DEV**）和**生产**（**PROD**）。
- en: 'A secret can also be a file. For example, if we want to add a private key,
    we might do the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个秘密也可以是一个文件。例如，如果我们想添加一个私钥，可能会如下操作：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you wish to add/update a secret to a running service, you will need to use
    the `--secret-add` flag on the `update` command. See the following, for example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望将秘密添加或更新到正在运行的服务中，你需要在 `update` 命令上使用 `--secret-add` 标志。例如，可以按如下方式操作：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Having added a secret, let's explore how we can now review it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了一个秘密后，让我们来探讨一下如何查看它。
- en: Inspecting
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看
- en: 'There are a number of techniques we can use to examine Docker secrets. To list
    any secrets that have been added to the Raft log file, we can use the `ls` command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以用来查看 Docker secrets。要列出添加到 Raft 日志文件中的任何秘密，我们可以使用 `ls` 命令：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'On running this command, the current secrets will be displayed, as shown in
    the following example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，当前的秘密将被显示，如下所示：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can gather more information about this secret using the `inspect` command.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `inspect` 命令收集有关该秘密的更多信息。
- en: 'The format for this is the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 其格式如下：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So, using the preceding example, we could run the command as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，使用前面的示例，我们可以如下执行命令：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will then return a JSON object containing the ID, version created and
    updated dates, and the `spec` object containing the labels and name. An example
    of this output is now provided:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这将返回一个包含 ID、版本、创建和更新日期的 JSON 对象，并且包含标签和名称的`spec`对象。现在提供了一个该输出的示例：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We've added and inspected secrets, so now we shall explore how to delete them
    when we no longer need them.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加并检查了机密，现在我们将探索如何在不再需要它们时将其删除。
- en: Deleting
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除
- en: Removing a secret is as easy as adding one, and uses the same syntax as its
    Linux equivalent for removing files, that being `rm`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 删除一个机密与添加一个机密一样简单，语法与 Linux 删除文件的命令`rm`相同。
- en: 'The format of the command is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的格式如下：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In Kubernetes, the equivalent would be `kubectl delete secret`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，相应的命令是`kubectl delete secret`。
- en: 'To remove our example secret from earlier, we would run the command as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除我们之前的示例机密，我们可以运行如下命令：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you wish to remove a secret being used by a current service, you will need
    to use the `--secret-rm` flag with the `update` command, such as in the following
    example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望删除当前服务正在使用的机密，你需要在`update`命令中使用`--secret-rm`标志，如以下示例所示：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, adding, removing, and inspecting secrets is simple. Let's now
    try the preceding commands out using the SSH file from [*Chapter 13*](B11641_13_Final_NM_ePub.xhtml#_idTextAnchor299),
    *Docker Security Fundamentals and Best Practices*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，添加、删除和检查机密非常简单。现在，让我们尝试使用[*第13章*](B11641_13_Final_NM_ePub.xhtml#_idTextAnchor299)中的
    SSH 文件，*Docker 安全基础与最佳实践*，运行前面的命令。
- en: Secrets in action – examples
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机密操作 – 示例
- en: 'It''s now time to try out the commands we just reviewed (`create`/`inspect`/`ls`/`rm`).
    Make sure your setup is configured to use swarms. You can also re-use the image
    from the previous chapter for this section. This can be obtained using the following
    command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候尝试我们刚才回顾过的命令（`create`/`inspect`/`ls`/`rm`）了。确保你的设置已经配置为使用 Swarm。你也可以重用上一章中的镜像进行此部分的操作。可以使用以下命令获取该镜像：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Important note
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Remember, you can use the `docker swarm init` command to initialize the swarm.
    Use the `--advertise-addr` flag with the IP address of your initial container
    as well.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以使用`docker swarm init`命令初始化 swarm。也可以使用`--advertise-addr`标志，并指定你初始容器的 IP
    地址。
- en: 'Previously, we used the following command to add an SSH private key for use
    with SCP to a single container:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们使用以下命令为 SCP 添加了一个 SSH 私钥，供单个容器使用：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To add this key to our swarm, we would use the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此密钥添加到我们的 swarm 中，我们将使用以下命令：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, we have created a new secret with the same name as the build argument
    we used previously, and we output the content of our private key to it. We also
    included a label, which has a `key=val` pair denoting the environment we are working
    in. In this case, it is the development environment.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个与之前使用的构建参数相同名称的新机密，并将我们的私钥内容输出到其中。我们还包含了一个标签，标签的`key=val`对表示我们所在的环境。在此情况下，它是开发环境。
- en: 'Let''s now check that we have added it correctly. We can do this by running
    the `ls` command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查一下我们是否正确添加了它。我们可以通过运行`ls`命令来验证：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, we see the ID of the secret and the name. This looks good! Now let''s
    execute the `inspect` command on the key using the `NAME` value:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到机密的 ID 和名称。看起来不错！现在我们使用`NAME`值在密钥上执行`inspect`命令：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should now see a JSON object displayed, similar to the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能看到一个类似以下内容的 JSON 对象：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you have multiple containers in your swarm, then you can grant them access
    to this secret. The following example demonstrates how we can send the secret
    we just created to a new container that uses our example image:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Swarm 中有多个容器，那么你可以授予它们访问这个机密的权限。以下示例演示了如何将我们刚刚创建的机密发送到一个使用我们示例镜像的新容器：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, the `--secret source` value is set to the name of the Docker secret we
    created. We are then going to store it in the variable defined in the target value.
    For clarity, we have called this `second_ssh_prv_key`.  The mode has been set
    to `0400` to make the secret accessible and then chosen our tagged image as the
    source image for the `create` command.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`--secret source`值设置为我们创建的 Docker 机密的名称。然后，我们将它存储在目标值中定义的变量里。为了清晰起见，我们将其命名为`second_ssh_prv_key`。模式已设置为`0400`，以便使机密可访问，并选择我们标记过的镜像作为`create`命令的源镜像。
- en: To confirm the secret is available, we can check the temporary filesystem we
    discussed earlier. For this, you will need to grab the container ID of the new
    container. You can use the `docker ps` command for this.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认秘密是否可用，我们可以检查我们早些时候讨论过的临时文件系统。为此，您需要获取新容器的容器ID。您可以使用`docker ps`命令来执行此操作。
- en: 'Next, use the container ID as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用容器ID如下：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You should see that the contents of the secret are the same as those you passed
    into the first container, namely the private SSH key we have been testing with
    so far.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到秘密的内容与您传递给第一个容器的内容相同，即我们迄今为止一直在测试的私有SSH密钥。
- en: Other options
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 其他选项
- en: In addition to using native Docker and Kubernetes tools, a variety of other
    options exist for storing secrets in cloud-based systems. AWS, GCP, and Azure
    offer native support, and HashiCorp provides a comprehensive cloud-agnostic secrets-managing
    mechanism in the form of HashiCorp Vault, at [https://www.vaultproject.io/](https://www.vaultproject.io/).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用本机Docker和Kubernetes工具外，还存在各种其他选项可用于在基于云的系统中存储秘密。AWS、GCP和Azure提供本机支持，而HashiCorp通过HashiCorp
    Vault提供了一种全面的与云无关的秘密管理机制，网址为[https://www.vaultproject.io/](https://www.vaultproject.io/)。
- en: We are now going to build upon our knowledge of Docker secrets by understanding
    how tags can be used.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将进一步了解Docker秘密，以及如何使用标签。
- en: Docker tags for security
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker安全标签
- en: We've just seen how we can make sure we are sharing secrets securely between
    containers in a swarm. In [*Chapter 12*](B11641_12_Final_NM_ePub.xhtml#_idTextAnchor278),
    *Introduction to Container Security*, we gained an appreciation for how to use
    tags combined with other security features, to ensure we use the correct image.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到如何确保在容器集群中安全共享秘密。在[*第12章*](B11641_12_Final_NM_ePub.xhtml#_idTextAnchor278)，*容器安全介绍*，我们学习了如何使用标签结合其他安全功能，确保使用正确的镜像。
- en: Now, we'll see how these two worlds can intersect by using tags with secrets
    and labels so we can annotate which environment a given secret and tag are used
    in.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到如何通过使用标签与秘密和标签结合，我们可以注释给定秘密和标签在哪个环境中使用。
- en: As a good security practice, we should always use different secrets for different
    environments. For example, the passwords for database access in your development,
    staging, and production instances should not be the same. Typically, as part of
    your development process, you will likely be using newer versions of containers
    in research, development, and QA environments compared to production.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 作为良好的安全实践，我们应始终在不同环境中使用不同的秘密。例如，在您的开发、演示和生产实例中，数据库访问密码不应相同。通常，在您的开发过程中，与生产环境相比，您可能会在研究、开发和QA环境中使用更新版本的容器。
- en: We can use Docker tags to help ensure that once we have credentials/secrets
    set up for a development environment, we are also pulling in the right image as
    well; that is, the one we intended to use for development purposes with the development
    credentials we created. Using fixed tags provides a layer of security through
    immutability and prevents an experimental image that may contain security flaws
    from accidentally being used outside of the development environment.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Docker标签来帮助确保一旦为开发环境设置了凭据/秘密，我们也会拉取正确的镜像；也就是说，我们打算用于开发目的的镜像与我们创建的开发凭据。使用固定的标签通过不可变性提供了一层安全性，并防止意外地在开发环境之外使用可能包含安全漏洞的实验性镜像。
- en: 'Typically, a methodology such as semantic versioning ([https://semver.org/](https://semver.org/))
    should be in place. This will result in tags using a format that communicates
    the level of change you should expect when using the release. Major version numbers
    indicate a backward-incompatible set of changes. A minor release is usually a
    new feature to an existing release. Finally, we have a patch release, which could
    be a small security fix or similar. A typical format might be the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，应采用语义化版本控制（[https://semver.org/](https://semver.org/)）。这将导致标签使用一种格式，以传达您在使用版本时应期待的变更级别。主要版本号指示了一组不向后兼容的更改。次要版本通常是对现有版本的新功能。最后，我们有了修补程序版本，这可能是一个小的安全修复或类似的内容。一个典型的格式可能如下：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When choosing the tag, in line with your versioning system, choose the one that
    most closely matches the environment you want to deploy in. For example, choose
    `:1.1.2-dev` over `:1`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择标签时，与您的版本控制系统一致，选择最接近您希望部署的环境的标签。例如，选择`:1.1.2-dev`而不是`:1`。
- en: 'In this instance, you know you will be pulling the patch release. You can then
    deploy credentials via `docker secret`, specifically for this build and for the
    environment you are deploying it to. One useful method is to pair up the secret
    label with the tag version you are using, as in the following code, for example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你知道你将要拉取补丁发布。然后，你可以通过`docker secret`部署凭证，专门为这个构建和你部署的环境。例如，一种有用的方法是将密钥标签与使用的标签版本配对，如以下代码所示：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this example, a secret has been created (an SSH key) and we know it should
    be used with tag version `1.1.2` and that this is a development environment. Here,
    the labels provide annotations to give us the context of the secret. Simple techniques
    like this can help to provide more information to an engineering team and avoid
    a production credential from accidentally being used with an experimental development
    container or in the wrong environment.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，已经创建了一个密钥（一个SSH密钥），并且我们知道它应该与标签版本`1.1.2`一起使用，并且这是一个开发环境。这里，标签提供了注释，给我们提供了密钥的上下文。像这样的简单技巧有助于向工程团队提供更多信息，避免生产凭证被错误地与实验性开发容器一起使用或用于错误的环境。
- en: We've seen how we can combine tags, secrets, and labels. Let's now look at other
    labeling options.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何将标签、密钥和标签结合使用。现在让我们看看其他标记选项。
- en: Using labels for metadata application
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标签进行元数据应用
- en: Metadata labels are a way of annotating your containers with extra information
    to provide development teams with useful facts. This can be useful for other developers
    on your team when they need to understand key features of the image, such as its
    version and a description.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据标签是一种在容器中注释额外信息的方式，旨在为开发团队提供有用的信息。当团队中的其他开发者需要了解镜像的关键特性，比如版本号和描述时，这会非常有用。
- en: We saw with the `docker secrets` command how we could add labels via the command
    line. With metadata labels, we can also add labels to the Dockerfile so that when
    we build out a new container, this information is baked in.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`docker secrets`命令看到了如何通过命令行添加标签。使用元数据标签，我们还可以将标签添加到Dockerfile中，这样在构建新容器时，这些信息就会被内嵌。
- en: 'A label takes the following format:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 标签采用以下格式：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Building upon our preceding example, we can set the version inside of our container
    via the Dockerfile as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例基础上，我们可以通过Dockerfile在容器内设置版本，代码如下：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once you''ve built out a container, you can view any of the metadata you have
    added using the `docker inspect` command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你构建了一个容器，你可以使用`docker inspect`命令查看任何你添加的元数据：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: When releasing software for public consumption, you should consider also linking
    to a `security.txt` file. Like a code of conduct or contributors' guide, this
    provides a mechanism to alert security researchers on how to responsibly disclose
    any security issues they may find with your software.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布供公众使用的软件时，你还应考虑链接到一个`security.txt`文件。就像行为规范或贡献者指南一样，它提供了一种机制，提醒安全研究人员如何负责任地披露他们可能发现的任何安全问题。
- en: 'You can automatically generate a `security.txt` file from the following website:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从以下网站自动生成一个`security.txt`文件：
- en: '[https://securitytxt.org/](https://securitytxt.org/)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://securitytxt.org/](https://securitytxt.org/)'
- en: 'Save this file to your code repository, and then link it via `LABEL` in your
    Dockerfile as in the following example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存到你的代码库中，然后通过Dockerfile中的`LABEL`链接它，如以下示例所示：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: That wraps up our guide to secrets, tags, and labels. Let's recap what we have
    learned so far.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们关于密钥、标签和标签的指南总结。让我们回顾一下到目前为止学到的内容。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned all about Docker secrets, the counterpart to Kubernetes
    secrets. We saw how this feature can be used to securely share sensitive data
    between containers in a swarm if you need to work with this technology instead
    of Kubernetes. We also learned this can be useful for segmenting sets of credentials
    based upon the environment you are working in. Finally, we walked through how
    we can create, inspect, and delete them.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们了解了关于Docker密钥的所有内容，它是Kubernetes密钥的对等物。我们看到如果需要使用这种技术而不是Kubernetes时，如何安全地在容器之间共享敏感数据。我们还了解了这对于基于工作环境划分凭证集有多么有用。最后，我们演示了如何创建、检查和删除这些密钥。
- en: Following this, we looked at tags once again and discussed how these can be
    used to ensure the right image is being pulled from the right environment. A combination
    of environment-based secrets and tags were shown to help you secure your development
    processes further.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们再次回顾了标签，并讨论了如何使用这些标签确保从正确的环境中拉取正确的镜像。我们展示了环境相关的密钥和标签的结合，帮助你进一步保护开发过程。
- en: Finally, we discussed how containers can be annotated with metadata labels.
    This also included using the `security.txt` file.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了如何为容器添加元数据标签。这也包括了使用`security.txt`文件。
- en: In the next chapter, we will explore how third-party tools can be used to help
    secure our containers and enforce some of the practices we have learned so far.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨如何利用第三方工具帮助我们保护容器，并加强我们迄今为止学到的一些实践方法。
