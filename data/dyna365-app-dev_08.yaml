- en: Leverage Azure Extensions in Dynamics 365
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 Dynamics 365 中的 Azure 扩展
- en: In the previous chapter, we learned how we can consume the new REST Web API
    endpoint in Dynamics 365 to perform various operations and how to use it to develop
    custom business applications. In this chapter, we will learn how Dynamics 365
    natively supports integration with Microsoft Azure. This chapter assumes a basic
    understanding of fundamentals of the Microsoft Azure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何在 Dynamics 365 中使用新的 REST Web API 端点执行各种操作，并如何利用它来开发自定义的业务应用程序。在本章中，我们将学习
    Dynamics 365 如何原生支持与 Microsoft Azure 的集成。本章假定你已经对 Microsoft Azure 的基础知识有基本的了解。
- en: For Microsoft Azure reference—[https://docs.microsoft.com/en-us/azure/fundamentals-introduction-to-azure](https://docs.microsoft.com/en-us/azure/fundamentals-introduction-to-azure)
    and [https://azure.microsoft.com/en-in/training/](https://azure.microsoft.com/en-in/training/)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Microsoft Azure 的参考资料—[https://docs.microsoft.com/en-us/azure/fundamentals-introduction-to-azure](https://docs.microsoft.com/en-us/azure/fundamentals-introduction-to-azure)
    和 [https://azure.microsoft.com/en-in/training/](https://azure.microsoft.com/en-in/training/)
- en: Microsoft Azure can be defined as a cloud computing platform or collection of
    cloud-based services that developers and IT professionals can use to build, test,
    deploy and manage applications through various data centers across the globe.
    Microsoft Azure provides **Infrastructure as a service **(**IaaS**), **Platform
    as a service** (**PaaS**) and **Software** **as a service** (**SaaS**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 可以定义为一个云计算平台或一组基于云的服务，开发人员和 IT 专业人员可以通过全球各地的数据中心，使用这些服务来构建、测试、部署和管理应用程序。Microsoft
    Azure 提供 **基础设施即服务**（**IaaS**）、**平台即服务**（**PaaS**）和 **软件即服务**（**SaaS**）。
- en: With **IaaS,** we are basically referring to Azure virtual machines, that is
    servers hosted on the cloud. The cloud computing service provider, Microsoft in
    this case, manages the infrastructure and we need to pay for using the resources.
    Here we have complete control and are responsible for managing operating systems,
    middleware and applications running there. We can also deploy Dynamics 365 On-premises
    in Microsoft Azure virtual machines.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **IaaS**，我们基本上是在指 Azure 虚拟机，即托管在云中的服务器。云计算服务提供商（在这里是 Microsoft）管理基础设施，而我们需要为使用这些资源付费。在这种模式下，我们拥有完全的控制权，并且负责管理操作系统、中间件以及在其上运行的应用程序。我们还可以将
    Dynamics 365 部署到 Microsoft Azure 虚拟机中的本地环境。
- en: With **PaaS**, we have a complete development and deployment environment available
    to us inside the cloud, which we can use to build, deploy, and manage our applications
    in the cloud. We pay for the cloud services that we are using. Here, we only manage
    our applications and services, and the cloud service provider manages everything
    else.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **PaaS**，我们可以在云中获得完整的开发和部署环境，可以用来构建、部署和管理我们的云应用程序。我们只需为使用的云服务付费。在这里，我们只管理我们的应用程序和服务，而云服务提供商管理其他一切。
- en: With **SaaS**, we basically connect and use software or cloud-based apps over
    the internet. Here, we just need to pay for the cloud-based app that we are going
    to use. The cloud service provider manages everything, be it underlying infrastructure,
    middleware, application software and so on. We just need to connect to these apps,
    mostly using a web browser over the internet to use them. Dynamics 365 Online
    falls under SaaS.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **SaaS**，我们基本上是通过互联网连接并使用软件或基于云的应用程序。在这种模式下，我们只需要为所使用的云应用程序付费。云服务提供商管理所有内容，包括底层基础设施、中间件、应用程序软件等。我们只需连接到这些应用程序，通常通过浏览器在互联网上使用它们。Dynamics
    365 在线版属于 SaaS。
- en: 'In this chapter, we will be covering the following points:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Understanding Azure Integration with Dynamics 365
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Azure 与 Dynamics 365 的集成
- en: Configuring Azure Integration with Dynamics 365
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Azure 与 Dynamics 365 的集成
- en: Writing Azure-aware plugins and different listener applications
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写支持 Azure 的插件和不同的监听器应用程序
- en: Understanding Azure integration with Dynamics 365
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Azure 与 Dynamics 365 的集成
- en: Microsoft Azure Service Bus is the main component in Microsoft Azure Stack that
    enables us to connect Dynamics 365 with Microsoft Azure. Through Azure Service
    Bus we can pass the details of an operation performed inside Dynamics 365 to multiple
    applications that are listening to it and can read and process that information.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 服务总线是 Microsoft Azure Stack 中的主要组件，它使我们能够将 Dynamics 365 与 Microsoft
    Azure 连接。通过 Azure 服务总线，我们可以将 Dynamics 365 内部执行的操作详情传递给多个监听该信息的应用程序，并且这些应用程序可以读取和处理这些信息。
- en: Introduction to Microsoft Azure Service Bus
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft Azure 服务总线简介
- en: 'Azure Service Bus can be defined as a cloud messaging service that runs in
    Microsoft''s Azure Data Center. Azure Service Bus enables us to connect different
    applications, services or devices that are hosted in the cloud or on-Premises
    inside the firewalled networks. It can be used to connect different **line-of-business**
    (**LOB**) applications, tablets, phones or even any household appliances or sensors.
    This Azure Service Bus supports two different communication mechanisms: brokered
    messaging (queues, topics, and subscriptions) and relay service.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Bus 可以定义为在微软 Azure 数据中心运行的云消息传递服务。Azure Service Bus 使我们能够连接不同的应用程序、服务或设备，这些应用程序、服务或设备可能托管在云中或防火墙内的本地网络中。它可以用于连接不同的**业务线**（**LOB**）应用程序、平板电脑、手机，甚至任何家用电器或传感器。该
    Azure Service Bus 支持两种不同的通信机制：经纪人消息传递（队列、主题和订阅）和中继服务。
- en: The Azure Service Bus brokered messaging capabilities include queues and topics
    that can be created and hosted in Microsoft's Azure Data Center. An application
    can connect to the queue or topics created and send messages to them. These messages
    will be stored durably. Receiving applications can then connect to them and can
    receive and process the messages. The sending applications and the receiving applications
    can either be hosted in the cloud or can be on-premises. Queues provide unidirectional
    asynchronous communication where the publisher publishes a message and the subscriber
    receives the message. Each message is received by a single subscriber. Topics
    also provide unidirectional asynchronous messaging infrastructure where a publisher
    publishes a message and receivers receive the message like a queue. The main difference
    is that the same message can be received by multiple subscribers, who can optionally
    specify some criteria so that they only receive the messages that match the rules
    specified. As they provide one-way asynchronous communication through a broker,
    that is there is no direct connection between senders and receivers, it is not
    suitable for scenarios where we want both sender and receiver to exchange messages
    or directly connect to each other, or want synchronous communication between them.
    To address this Azure Service provides relays.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Bus 的经纪人消息传递功能包括可以在微软 Azure 数据中心创建和托管的队列和主题。应用程序可以连接到创建的队列或主题，并向其发送消息。这些消息将被持久存储。接收应用程序随后可以连接到这些队列或主题，接收并处理消息。发送应用程序和接收应用程序可以托管在云中，也可以托管在本地。队列提供单向异步通信，发布者发布消息，订阅者接收消息。每条消息只会被单个订阅者接收。主题同样提供单向异步消息传递基础设施，发布者发布消息，接收者像队列一样接收消息。主要区别在于，相同的消息可以被多个订阅者接收，订阅者可以选择性地指定一些标准，使其只接收符合规定规则的消息。由于它们通过经纪人提供单向异步通信，即发送者和接收者之间没有直接连接，因此不适用于我们希望发送者和接收者交换消息或直接连接，或希望它们之间进行同步通信的场景。为了解决这个问题，Azure
    Service 提供了中继服务。
- en: The Azure Service Bus relay service provides bi-directional synchronous communication
    capabilities between applications, unlike queues and topics. The relay service
    allows us to expose an endpoint in the cloud that serves as a proxy for our services
    hosted on the cloud or on-premises services. Any client with internet access can
    then make calls to this endpoint, which are relayed back to the service hosted
    behind the firewall or any other application listening for the messages. This
    provides a very reliable and cost-effective way for organizations to expose service.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Bus 的中继服务提供应用程序之间的双向同步通信能力，不同于队列和主题。中继服务允许我们在云中暴露一个端点，作为我们托管在云中或本地服务的代理。任何能够访问互联网的客户端都可以调用这个端点，这些请求将被中继回防火墙后面托管的服务或任何其他侦听消息的应用程序。这为组织提供了一种非常可靠且具有成本效益的方式来暴露服务。
- en: Azure Service Bus documentation :[ https://docs.microsoft.com/en-us/azure/service-bus-messaging/](https://docs.microsoft.com/en-us/azure/service-bus-messaging/).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Bus 文档：[https://docs.microsoft.com/en-us/azure/service-bus-messaging/](https://docs.microsoft.com/en-us/azure/service-bus-messaging/)。
- en: Understanding Dynamics 365 and Azure Service Bus
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Dynamics 365 和 Azure Service Bus
- en: In the previous section, we covered the basics of Azure Service Bus, in this
    section we will look at how Dynamics 365 is integrated with Azure Service Bus.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分中，我们介绍了 Azure Service Bus 的基础知识，本部分将讨论 Dynamics 365 如何与 Azure Service Bus
    集成。
- en: 'The following diagram shows how Dynamics 365 works along with Azure Service
    Bus to connect to applications that can be in the cloud or hosted behind the firewall:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了Dynamics 365如何与Azure Service Bus协作，连接到可以位于云端或托管在防火墙后面的应用程序：
- en: '![](img/741fde55-1da3-414a-8a00-ae41e8165c52.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/741fde55-1da3-414a-8a00-ae41e8165c52.png)'
- en: 'Here is a step-by-step explanation for the same:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该过程的逐步解释：
- en: A Dynamics 365 user performs an operation inside CRM, like creating a lead record,
    updating an opportunity and so on.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dynamics 365用户在CRM内执行操作，例如创建潜在客户记录、更新机会等。
- en: This triggers the execution of registered Azure-aware OOB (out of the box) plugins
    or custom Azure-aware plugins or workflow activity, which then notifies the asynchronous
    service system job.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这会触发已注册的Azure感知OOB（开箱即用）插件或自定义Azure感知插件或工作流活动的执行，然后通知异步服务系统作业。
- en: Once the asynchronous service receives the notification, it handles the posting
    of data context of the request message to the Azure Service Bus. The posting is
    performed through a system job. Dynamics 365 User can check the status of the
    system job inside Dynamics 365 Web application, (Settings | System Jobs).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦异步服务收到通知，它会处理将请求消息的数据上下文发布到Azure Service Bus的过程。此发布操作通过系统作业执行。Dynamics 365用户可以在Dynamics
    365 Web应用中检查系统作业的状态，（设置 | 系统作业）。
- en: Microsoft Azure Service Bus then relays the execution context to Microsoft Azure
    Service Bus listener applications. The Azure Service Bus also manages the authorization.
    Dynamics 365 that posts the data to Service Bus and any listener application that
    reads it, are authorized by using **either Access Control Service** (**ACS**)
    or **Shared Access Signature** (**SAS**).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Microsoft Azure Service Bus随后将执行上下文转发给Microsoft Azure Service Bus监听应用程序。Azure
    Service Bus还负责管理授权。发布数据到Service Bus的Dynamics 365和任何读取数据的监听应用程序，都是通过**访问控制服务**（**ACS**）或**共享访问签名**（**SAS**）进行授权的。
- en: 'Azure Service Bus: Authentication and Authorization—[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-authentication-and-authorization](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-authentication-and-authorization).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Bus：身份验证与授权——[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-authentication-and-authorization](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-authentication-and-authorization)。
- en: Microsoft Azure Service Bus listener applications that are registered on an
    Azure Service Bus solution endpoint can read and process the Dynamics 365 execution
    context posted by Azure Service Bus.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册在Azure Service Bus解决方案端点上的Microsoft Azure Service Bus监听应用可以读取并处理Azure Service
    Bus发布的Dynamics 365执行上下文。
- en: The Azure Service Bus then sets the status of the related system job as completed.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，Azure Service Bus将相关系统作业的状态设置为完成。
- en: SAS Authorization was introduced in CRM Online 2016 Update 1 and performs better
    than ACS. SAS is the recommended authorization method for Dynamics 365.  Refer
    here for updating a service endpoint from ACS to SAS Authorization—[https://msdn.microsoft.com/en-us/library/mt728940.aspx](https://msdn.microsoft.com/en-us/library/mt728940.aspx).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: SAS授权在CRM Online 2016 Update 1中引入，并且比ACS性能更好。SAS是推荐的Dynamics 365授权方法。有关将服务端点从ACS更新为SAS授权的内容，请参阅此处——[https://msdn.microsoft.com/en-us/library/mt728940.aspx](https://msdn.microsoft.com/en-us/library/mt728940.aspx)。
- en: Understanding the Azure-aware plugin
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Azure感知插件
- en: As we saw earlier, we can register an Azure-aware plugin against a particular
    event inside Dynamics 365, which then passes this execution context to Azure Service
    Bus, which in turn relays it to the listener applications. Here, we can either
    use the OOB Azure-aware plugin or we can write our own custom Azure-aware plugin
    or custom workflow activity.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所见，我们可以在Dynamics 365中针对特定事件注册一个Azure感知插件，该插件将此执行上下文传递给Azure Service Bus，然后由它将上下文转发给监听应用程序。在这里，我们可以使用OOB
    Azure感知插件，或者我们可以编写自己的自定义Azure感知插件或自定义工作流活动。
- en: With Dynamics 365 Online Version 9.0, we can use Webhooks as an alternative
    to Azure Service Bus to send data about the events to a web application—[https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/use-webhooks](https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/use-webhooks).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Dynamics 365 Online Version 9.0时，我们可以使用Webhook作为Azure Service Bus的替代方案，将关于事件的数据发送到Web应用程序——[https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/use-webhooks](https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/use-webhooks)。
- en: 'For the OOB Azure-aware plugin, we need to first register the new service endpoint
    through the plugin registration tool:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于OOB Azure感知插件，我们需要通过插件注册工具首先注册新的服务端点：
- en: '![](img/1df8a907-14d4-4e8f-8514-c253c434f362.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1df8a907-14d4-4e8f-8514-c253c434f362.png)'
- en: 'Inside service endpoint registration, we need to specify a connection to Azure
    Service Bus to which we want to pass the plugin events:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务端点注册中，我们需要指定一个连接到 Azure Service Bus 的地址，以便将插件事件传递给它：
- en: '![](img/0538aa22-6ecd-4146-b59b-aa5de641d363.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0538aa22-6ecd-4146-b59b-aa5de641d363.png)'
- en: The service endpoint holds the authorization information about the Azure Service
    Bus such as Service Bus Namespace address and SAS Key. After successful registration,
    we can then add a plugin step to the service endpoint added, the way we do for
    our usual plugin assemblies.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 服务端点包含有关 Azure Service Bus 的授权信息，如 Service Bus 命名空间地址和 SAS 密钥。成功注册后，我们可以像处理常规插件程序集一样，为已添加的服务端点添加插件步骤。
- en: This Azure-aware OOB plugin executes in full trust. However, there are certain
    limitations with the OOB Azure-aware plugin, such as it can only run asynchronously,
    cannot call CRM SDK Method, and cannot write trace statements for logging, or
    auditing purposes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Azure 感知的现成插件以完全信任模式执行。然而，现成的 Azure 感知插件存在某些限制，例如它只能异步执行，不能调用 CRM SDK 方法，也不能编写跟踪语句用于日志记录或审计目的。
- en: Apart from the OOB Azure-aware plugin that Dynamics 365 provides, we can also
    create our own custom Azure-aware plugin or custom workflow activity.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Dynamics 365 提供的现成的 Azure 感知插件外，我们还可以创建自定义的 Azure 感知插件或自定义工作流活动。
- en: 'The `IServiceProvider` passed to the `Execute` method of IPlugin contains an
    instance of `IServiceEndpointNotificationService`**.** We can call its `Execute`
    method to post the execution context to Azure Service Bus. The `Execute` method
    needs an entity reference of the service endpoint; we can grab the service endpoint
    ID from the plugin registration tool. Adding this code to invoke the endpoint
    notification service makes our Plugin **Azure aware**:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 IPlugin `Execute` 方法的 `IServiceProvider` 包含 `IServiceEndpointNotificationService`
    的实例。我们可以调用其 `Execute` 方法，将执行上下文发布到 Azure Service Bus。`Execute` 方法需要一个服务端点的实体引用；我们可以从插件注册工具中获取服务端点
    ID。添加这段代码以调用端点通知服务，使我们的插件**Azure 感知**：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The custom Azure-aware plugin executes in partial trust mode in the sandbox.
    The benefit of writing a custom plugin is that we can call CRM SDK methods and
    can also receive a response from the listener applications in case of two-way
    relay service. Additionally, the plugin can be registered as either synchronous
    or asynchronous.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义的 Azure 感知插件在沙盒中以部分信任模式执行。编写自定义插件的好处是我们可以调用 CRM SDK 方法，并且在双向中继服务的情况下，还可以接收监听应用程序的响应。此外，插件可以注册为同步或异步执行。
- en: For Azure-aware plugins, it is recommended to register them to run asynchronously
    for best system performance.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Azure 感知插件，建议将其注册为异步执行，以获得最佳的系统性能。
- en: Understanding different contracts between Dynamics 365 and an Azure solution
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Dynamics 365 与 Azure 解决方案之间的不同合同
- en: 'The following are the different types of contract that can be defined while
    registering a new service endpoint through the plugin registration tool:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在通过插件注册工具注册新服务端点时，可以定义的不同类型的合同：
- en: '**Queue:**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**队列：**'
- en: For a queue contract, a message queue needs to be created in Azure Service Bus.
    The listener application waits for the message to be posted by Service Bus in
    the queue. When the message is available in the queue, the listener application
    can read and process the message. The listener application doesn't need to be
    actively listening in the case of a queue contract.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于队列合同，需要在 Azure Service Bus 中创建一个消息队列。监听应用程序等待 Service Bus 在队列中发布的消息。当队列中有消息时，监听应用程序可以读取并处理这些消息。在队列合同的情况下，监听应用程序不需要主动监听。
- en: '**One-way:**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**单向：**'
- en: In the case of a one-way contract, the listener application needs to be actively
    listening. The post to the Service Bus fails if there is no active listener and
    the status of the system job is set to "Failed" after the system job runs out
    of retries.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在单向合同的情况下，监听应用程序需要主动监听。如果没有活动的监听器，向 Service Bus 发送的请求会失败，系统作业在重试次数用尽后，其状态会被设置为“失败”。
- en: The listener application needs to implement the `IServiceEndpointPlugin` interface's
    `Execute` method along with `WS2007HttpRelayBinding`, to which `RemoteExecutionContext`
    is passed from the Azure Service Bus.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 监听应用程序需要实现`IServiceEndpointPlugin`接口的`Execute`方法，并结合`WS2007HttpRelayBinding`，`RemoteExecutionContext`由
    Azure Service Bus 传递。
- en: '**Two-way:**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**双向：**'
- en: The two-way contract is similar to a one-way contract, the only difference is
    that in the case of the two-way contract a message of type string can be returned
    back to the custom plugin workflow activity that posted the message to Azure Service
    Bus from the listener application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 双向合同类似于单向合同，唯一的区别是，在双向合同中，可以将类型为字符串的消息从监听应用程序返回给发布消息到 Azure 服务总线的自定义插件工作流活动。
- en: The listener application needs to implement `ITwoWayServiceEndpointPlugin` interface's
    `Execute` method along with `WS2007HttpRelayBinding`, to which `RemoteExecutionContext`
    is passed from the Azure Service Bus.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 监听应用程序需要实现 `ITwoWayServiceEndpointPlugin` 接口的 `Execute` 方法，并配合使用 `WS2007HttpRelayBinding`，该绑定将
    `RemoteExecutionContext` 从 Azure 服务总线传递过来。
- en: '**REST:**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**REST：**'
- en: A REST contract is similar to a two-way contract. Here, the listener application
    needs to implement the `IWebHttpServiceEndpointPlugin` interface's `Execute` method,
    along with `WebHttpRelayBinding`, to which `RemoteExecutionContext` is passed
    from the Azure Service Bus.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: REST 合同类似于双向合同。在这里，监听应用程序需要实现 `IWebHttpServiceEndpointPlugin` 接口的 `Execute`
    方法，并配合使用 `WebHttpRelayBinding`，该绑定将 `RemoteExecutionContext` 从 Azure 服务总线传递过来。
- en: '**Topic:**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**主题：**'
- en: Topics are similar to queues. However, with topics, one or more listeners can
    subscribe to receive messages from the topic. The messages are filtered and routed
    to the subscriber via the corresponding subscription from the topic.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 主题类似于队列。然而，使用主题时，一个或多个监听器可以订阅该主题，以接收来自主题的消息。消息将经过筛选，并通过主题的相应订阅路由到订阅者。
- en: '**Event Hub:**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件中心：**'
- en: Microsoft Azure event hubs provide telemetry services on a very large scale.
    They are typically used for large-scale application telemetry and Internet of
    Things scenarios. Several devices or applications can send telemetry messages
    to the event hubs. The messages can be in thousands or millions per second to
    be read and processed. Creating an event hub solution application is similar to
    writing an Azure Service Bus listener application. Here, we first start by creating
    an event hub in Microsoft Azure just as in Azure Service Bus. Next, we need to
    specify the event hub connection string while registering the Dynamics 365 service
    endpoint through the plugin registration tool. We will talk in more detail about
    it later on in the chapter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 事件中心提供大规模的遥测服务。它们通常用于大规模应用程序遥测和物联网场景。多个设备或应用程序可以将遥测消息发送到事件中心。消息可以达到每秒数千或数百万条，并被读取和处理。创建事件中心解决方案应用程序类似于编写
    Azure 服务总线监听应用程序。在这里，我们首先开始在 Microsoft Azure 中创建一个事件中心，就像在 Azure 服务总线中一样。接下来，我们需要在通过插件注册工具注册
    Dynamics 365 服务端点时指定事件中心连接字符串。我们将在本章后面详细讨论这一点。
- en: To write listener applications for the above contracts, we need to use Azure
    SDK Version 1.7 or later—[https://azure.microsoft.com/en-in/downloads/](https://azure.microsoft.com/en-in/downloads/).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要为上述合同编写监听应用程序，我们需要使用 Azure SDK 版本 1.7 或更高版本—[https://azure.microsoft.com/en-in/downloads/](https://azure.microsoft.com/en-in/downloads/)。
- en: Now, as we have a basic understanding of the Azure Extensions available inside
    Dynamics 365, we will implement a simple business scenario in the next section
    to see it in action.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然我们已经对 Dynamics 365 中可用的 Azure 扩展有了基本了解，接下来我们将在下一部分实施一个简单的业务场景，看看它是如何运作的。
- en: Configuring Dynamics 365 and Azure Service Bus integration
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Dynamics 365 与 Azure 服务总线的集成
- en: Let us take a simple scenario for implementation which will help us in understanding
    how to configure Azure Extensions inside Dynamics 365 and how to write different
    listener applications for different contract types. The listener application is
    basically a third-party application which needs to get notified whenever an event
    occurs in Dynamics 365.  The listener application and the Dynamics 365 are two
    separate disconnected applications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个简单的场景为例进行实施，这将帮助我们理解如何在 Dynamics 365 中配置 Azure 扩展，以及如何为不同的合同类型编写不同的监听应用程序。监听应用程序本质上是一个第三方应用程序，当
    Dynamics 365 中发生事件时，它需要被通知。监听应用程序和 Dynamics 365 是两个独立的、断开连接的应用程序。
- en: 'Scenario: On creation of a lead record in Dynamics 365, pass its information
    (execution context) to the listener application through Azure Service Bus. The
    listener application can then read and process that information.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：在 Dynamics 365 中创建潜在客户记录时，将其信息（执行上下文）通过 Azure 服务总线传递给监听应用程序。然后，监听应用程序可以读取并处理该信息。
- en: 'Let us walk through all the steps in detail:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细地逐步讲解：
- en: Log in to an Azure Management portal [https://portal.azure.com](https://portal.azure.com)
    using an existing account or create a free account at [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用现有账户登录到 Azure 管理门户 [https://portal.azure.com](https://portal.azure.com)，或在
    [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)
    创建一个免费账户
- en: Search and Add a new Service Bus service in the portal. Provide the required
    details and click on Create namespace to create the Service Bus namespace. The
    name that must be specified needs to be unique across the entire data center.
    This creates a URI for the Service Bus namespace which can be used to access it
    over the internet. This Service Bus namespace acts as a container for the communication
    mechanisms such as relay service and brokered messaging (queues and topics):![](img/4368cfd1-3ea4-4f4c-aebc-a155c9b37887.png)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在门户中搜索并添加一个新的服务总线服务。提供所需的详细信息并点击创建命名空间，以创建服务总线命名空间。必须指定的名称需要在整个数据中心内唯一。这将为服务总线命名空间创建一个
    URI，可以通过它在互联网上访问服务总线。此服务总线命名空间充当通信机制的容器，如中继服务和经纪消息（队列和主题）：![](img/4368cfd1-3ea4-4f4c-aebc-a155c9b37887.png)
- en: Next, we would create a queue to which we would be posting the message from
    Dynamics 365\. Open the Service Bus and click on the **+** Que**ue** button to
    create a queue with the required details:![](img/a9fd163c-7023-4ab2-8bfe-f791488cf5c7.png)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个队列，用于将消息从 Dynamics 365 发布到该队列。打开服务总线，点击**+**队列按钮，创建一个包含所需详细信息的队列：![](img/a9fd163c-7023-4ab2-8bfe-f791488cf5c7.png)
- en: 'Provide the details as shown here and click on the Create button to create
    the queue:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照此处显示的详细信息提供，并点击创建按钮以创建队列：
- en: '![](img/30a56508-769f-44b1-861e-d6230b8df185.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30a56508-769f-44b1-861e-d6230b8df185.png)'
- en: 'For the Queue created, select Shared access policies and click on Add to create
    a new shared access policy. As the name suggests, send rights are required for
    sending messages to a listener at a namespace, similarly, listen rights will be
    required by a listener application to begin listening on a namespace. Manage rights
    would be required to create a queue, delete a queue, create a subscription, enumerate
    topics, subscriptions and so on. Here, we have selected the Send and Listen checkbox
    while adding the SAS policy as we are going to use the same policy for both sending
    and listening. We can also create two separate policies, one for the sender and
    another for the listening application. Click on Create, to create a new SAS policy:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于创建的队列，选择共享访问策略并点击添加，创建一个新的共享访问策略。顾名思义，发送权限是将消息发送到命名空间监听器所需的权限，类似地，监听权限是监听应用程序在命名空间上开始监听所需的权限。管理权限是创建队列、删除队列、创建订阅、枚举主题、订阅等所需的权限。在这里，我们在添加
    SAS 策略时选择了**发送**和**监听**复选框，因为我们将使用相同的策略同时进行发送和监听。我们也可以创建两个单独的策略，一个用于发送者，另一个用于监听应用程序。点击创建，以创建一个新的
    SAS 策略：
- en: '![](img/5773cd38-b0c3-4fd3-bc39-9578e78ab78b.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5773cd38-b0c3-4fd3-bc39-9578e78ab78b.png)'
- en: Rights required for **Service Bus Operations** (**SAS**) are detailed here—[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas#rights-required-for-service-bus-operations](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas#rights-required-for-service-bus-operations)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务总线操作**（**SAS**）所需的权限详细信息请参见此处—[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas#rights-required-for-service-bus-operations](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas#rights-required-for-service-bus-operations)'
- en: Select the shared access policy created and copy its primary connection string.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择已创建的共享访问策略并复制其主连接字符串。
- en: Back in Dynamics 365, we need to register a service endpoint through the plugin
    registration tool. Select Register New Service Endpoint in the plugin registration
    tool.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Dynamics 365，我们需要通过插件注册工具注册一个服务端点。在插件注册工具中选择注册新服务端点。
- en: Download the latest Microsoft Dynamics 365 SDK from—[https://www.microsoft.com/en-us/download/details.aspx?id=50032](https://www.microsoft.com/en-us/download/details.aspx?id=50032)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下地址下载最新的 Microsoft Dynamics 365 SDK—[https://www.microsoft.com/en-us/download/details.aspx?id=50032](https://www.microsoft.com/en-us/download/details.aspx?id=50032)
- en: Paste the connection string into the Register New Service Endpoint dialog box
    and click Next:![](img/35de414d-9e59-493d-be8f-b1fc87cb4d75.png)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将连接字符串粘贴到注册新服务端点对话框中，并点击下一步：![](img/35de414d-9e59-493d-be8f-b1fc87cb4d75.png)
- en: This auto-populates the Service Endpoint Registration details. Click on Save:![](img/b497793f-38fa-43f8-baea-1a5511b2c764.png)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这会自动填充服务端点注册的详细信息。点击保存：![](img/b497793f-38fa-43f8-baea-1a5511b2c764.png)
- en: 'This adds the service endpoint in the plugin registration tool. Next, we register
    a new step for create message on the Lead entity. Set Execution Mode to Asynchronous.
    If we try setting it as Synchronous we will get the following alert Only asynchronous
    steps are supported for Service Endpoint plug-ins as OOB Azure-aware plugin only
    supports asynchronous execution mode:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加服务端点到插件注册工具。接下来，我们为在潜在客户实体上创建消息注册一个新步骤。设置执行模式为异步。如果我们尝试将其设置为同步模式，将会收到以下警告：只有异步步骤才支持服务端点插件，因为OOB
    Azure感知插件仅支持异步执行模式：
- en: '![](img/5728f833-6414-4640-82d9-e37f68d1a39d.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5728f833-6414-4640-82d9-e37f68d1a39d.png)'
- en: Now let us create a lead record inside Dynamics 365 to trigger the plugin:![](img/603709d0-fd5d-4bf9-9c2f-01c454a05bc6.png)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在Dynamics 365中创建一个潜在客户记录以触发插件：![](img/603709d0-fd5d-4bf9-9c2f-01c454a05bc6.png)
- en: 'Go to Settings | System Jobs, a corresponding system job would have been created
    which shows the status of the message posted to Azure Service Bus from the asynchronous
    service:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到设置 | 系统作业，相应的系统作业已创建，显示从异步服务发布到Azure Service Bus的消息状态：
- en: '![](img/cafb16d2-db7d-467e-b224-1a25155d02f1.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cafb16d2-db7d-467e-b224-1a25155d02f1.png)'
- en: Back in our queue, we can see a new message added to ACTIVE MESSAGE COUNT:![](img/cae56573-5469-4d0e-83b3-a22da4725bdd.png)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回我们的队列，我们可以看到一个新的消息已添加到ACTIVE MESSAGE COUNT：![](img/cae56573-5469-4d0e-83b3-a22da4725bdd.png)
- en: In next section, we will create listener applications to read the data posted
    to Azure Service Bus from Dynamics 365.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将创建监听应用程序来读取从Dynamics 365发布到Azure Service Bus的数据。
- en: Writing a queue listener
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个队列监听器
- en: 'Let us create a simple queue listener to read the message passed to queue:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的队列监听器来读取传递到队列的消息：
- en: Open Visual Studio and select Project Type as Console Application.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio，选择项目类型为控制台应用程序。
- en: Install the following NuGet Package in the project—`WindowsAzure.ServiceBus`.
    It provides a client library for Microsoft Azure Service Bus operations.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中安装以下NuGet包——`WindowsAzure.ServiceBus`。它提供了用于Microsoft Azure Service Bus操作的客户端库。
- en: Add a reference to the `Microsoft.Xrm.Sdk` assembly or install the following
    NuGet Package – `Microsoft.CrmSdk.Core` assemblies.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加对`Microsoft.Xrm.Sdk`程序集的引用，或者安装以下NuGet包——`Microsoft.CrmSdk.Core`程序集。
- en: Specify the same connection string that was defined for the service endpoint
    in the plugin registration tool.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定在插件注册工具中为服务端点定义的相同连接字符串。
- en: 'We need to create a `QueueClient` object using the connection string and get
    the remote execution context using the `BrokeredMessage` received. Next, we are
    retrieving the value for the topic field, the name of the entity and the message
    on which the plugin was fired from the `RemoteExecutionConext` and writing it
    to console as shown as follows:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要使用连接字符串创建一个`QueueClient`对象，并使用接收到的`BrokeredMessage`获取远程执行上下文。接下来，我们从`RemoteExecutionContext`中检索主题字段的值、实体名称和触发插件的消息，并将其写入控制台，如下所示：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: On running our application, we can see the following details passed as `RemoteExecutionContext`
    to the queue in the output:![](img/14523ab2-794e-4d20-a6f5-b1824c6f1fa7.png)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行我们的应用程序时，我们可以看到以下细节作为`RemoteExecutionContext`传递到队列中的输出：![](img/14523ab2-794e-4d20-a6f5-b1824c6f1fa7.png)
- en: The sample application, when run, will read the message in the queue and print
    the details in the console.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例应用程序运行时，将读取队列中的消息并在控制台中打印详细信息。
- en: Here, the **Message Time to Live** property of the queue defines the time span
    the message will remain in the queue, if not processed. After which it is will
    be either removed or dead lettered, that is, moved to another secondary sub-queue
    named dead letter queue. The dead letter queue holds the messages that were not
    delivered or processed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，队列的**消息生存时间**属性定义了消息如果未处理，将在队列中保留的时间跨度。之后，它将被移除或转为死信，即移动到另一个名为死信队列的次级子队列。死信队列保存未成功投递或处理的消息。
- en: Azure Service Bus dead letter queue—[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Bus死信队列——[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues)。
- en: The **Lock Duration** property of the queue specifies the number of seconds
    for which a message will be locked by a receiver once it receives it. This specifies
    the time the listener application has to process the message. If not processed,
    the message will be available to be received by another receiver.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 队列的 **锁定持续时间** 属性指定一条消息被接收者接收后会被锁定的秒数。这指定了监听器应用程序处理消息的时间。如果消息未被处理，其他接收者将可以接收该消息。
- en: Writing a topic listener
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写主题监听器
- en: 'Let us continue with our previous scenario of the creation of a lead record
    and update it to use topics instead of queues:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续之前的潜在客户记录创建场景，并将其更新为使用主题而不是队列：
- en: Log in to Azure Portal to create a topic in Azure Service Bus by clicking on
    +Topic.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 Azure 门户，通过点击 +主题来创建 Azure Service Bus 中的主题。
- en: 'Add the required details and click on the Create button:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加所需的详细信息并点击创建按钮：
- en: '![](img/6e3a8600-1894-47cf-a8cf-bd0caf3da7e2.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e3a8600-1894-47cf-a8cf-bd0caf3da7e2.png)'
- en: Inside Topic, create a new shared access policy and copy its primary connection
    string. This connection string will be used while registering a new service endpoint
    in the plugin registration tool as shown here:![](img/cbf1843a-93b4-4b3d-84e1-d1bb6b8ce6ff.png)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主题内，创建一个新的共享访问策略，并复制其主连接字符串。此连接字符串将在插件注册工具中注册新服务端点时使用，如此处所示：![](img/cbf1843a-93b4-4b3d-84e1-d1bb6b8ce6ff.png)
- en: Add a new step to this registered service endpoint for it to be triggered by
    the Create of the lead record in Dynamics 365.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向此已注册的服务端点添加一个新步骤，使其通过在 Dynamics 365 中创建潜在客户记录来触发。
- en: 'Now let us go back to our created topic. Click on the + Subscription button
    inside Topic to add a new subscription. Specify required details as shown here
    and click on Create:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们回到我们创建的主题。点击主题内的 + 订阅按钮以添加一个新订阅。按此处所示指定所需的详细信息并点击创建：
- en: '![](img/0ff12b0a-9240-4985-8030-e14920b80d0c.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ff12b0a-9240-4985-8030-e14920b80d0c.png)'
- en: This creates a new subscription inside Topic. We can create multiple subscriptions
    and each subscription will receive a copy of the message that has been posted
    to the Azure Service Bus.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在主题内创建一个新订阅。我们可以创建多个订阅，每个订阅都会收到已发布到 Azure Service Bus 的消息副本。
- en: 'The following is the sample code for our topic listener application. Here instead
    of a `QueueClient` object, we would be using a `SubscriptionClient` object to
    read and process the context passed:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是我们的主题监听器应用程序的示例代码。在这里，我们将使用一个 `SubscriptionClient` 对象来读取和处理传递的上下文，而不是使用 `QueueClient`
    对象：
- en: '[PRE2]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, let us go back to Dynamics 365 and create a lead record to trigger our
    plugin:![](img/6b362696-9c1e-492e-b6d6-d1d1c431c8a2.png)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们回到 Dynamics 365 并创建一个潜在客户记录，以触发我们的插件：![](img/6b362696-9c1e-492e-b6d6-d1d1c431c8a2.png)
- en: 'Inside our topic, we can see that all the subscriptions created for that topic
    have received the message:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的主题中，我们可以看到为该主题创建的所有订阅都已接收到消息：
- en: '![](img/c97b1a1d-29bf-4603-b1d8-0c9ba5b3b9bb.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c97b1a1d-29bf-4603-b1d8-0c9ba5b3b9bb.png)'
- en: 'Running our subscription listener, we get the expected output:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行我们的订阅监听器，我们得到了预期的输出：
- en: '![](img/02029edc-0e90-419b-8e1d-45518c52e53c.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02029edc-0e90-419b-8e1d-45518c52e53c.png)'
- en: Until now we have covered how to write a listener application for queues and
    topics, in the next section we will cover writing listener applications for one-way,
    two-way and REST contracts.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了如何为队列和主题编写监听器应用程序，在下一部分中，我们将介绍如何编写单向、双向和 REST 合约的监听器应用程序。
- en: Writing a one-way listener
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单向监听器
- en: 'Let us walk through all the steps required for writing a one-way listener:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解编写单向监听器所需的所有步骤：
- en: Continuing with the same scenario, first, we need to register our service endpoint.
    For this, create a new shared access policy for the Azure Service Bus namespace.
    Go to shared access policies settings for the Azure Service Bus and click on Add
    to create a new policy with send and listen rights and copy its primary connection
    string.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续相同的场景，首先，我们需要注册我们的服务端点。为此，为 Azure Service Bus 命名空间创建一个新的共享访问策略。进入 Azure Service
    Bus 的共享访问策略设置，点击“添加”创建一个具有发送和监听权限的新策略，并复制其主连接字符串。
- en: Paste the copied connection string in the Register Service Endpoint dialog box
    of the plugin registration tool.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将复制的连接字符串粘贴到插件注册工具中的注册服务端点对话框中。
- en: When we create an Azure Service Bus namespace, a policy called `RootManageSharedAccessKey`
    is automatically created. It has an associated pair of primary and secondary keys
    that grant send, listen, and manage rights to the Service Bus namespace. It is
    recommended you create additional policies instead of using this default policy
    which has all the permissions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个Azure服务总线命名空间时，会自动创建一个名为`RootManageSharedAccessKey`的策略。它具有一对主密钥和副密钥，授予对服务总线命名空间的发送、监听和管理权限。建议您创建其他策略，而不是使用这个默认的具有所有权限的策略。
- en: 'Update the value for properties in Service Endpoint Registration as shown here:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新服务端点注册中的属性值，如下所示：
- en: 'Namespace Address: Replace `sb` with `https`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间地址：将`sb`替换为`https`
- en: 'Designation type: `OneWay`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定类型：`OneWay`
- en: 'Path: `MyPath`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径：`MyPath`
- en: 'The following screenshot shows the Service Endpoint Registration dialog box
    populated with the appropriate values:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了已填充适当值的服务端点注册对话框：
- en: '![](img/45196d0c-5aca-477a-8b16-ab802bba4047.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45196d0c-5aca-477a-8b16-ab802bba4047.png)'
- en: Register a step, on the Create ofthe lead record for the service endpoint registered
    and trigger it by creating a lead record inside Dynamics 365.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册一个步骤，在创建潜在客户记录时为注册的服务端点触发，并通过在Dynamics 365中创建潜在客户记录来触发它。
- en: Go to Settings | System Jobs and check the corresponding system job created.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到设置 | 系统作业并检查相应创建的系统作业。
- en: 'Here the system job will fail with the following message:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，系统作业将失败并显示以下消息：
- en: '![](img/c807d437-5b9b-4ede-9a1a-64bd0427707a.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c807d437-5b9b-4ede-9a1a-64bd0427707a.png)'
- en: As we discussed earlier, for the relay service, an active listener is required,
    unlike queues or topics.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，对于中继服务，要求有一个主动监听器，这与队列或主题不同。
- en: In our one-way listener application, we need to implement the `IServiceEndpointPlugin`
    interface and use `WS2007HttpRelayBinding`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的单向监听器应用程序中，需要实现`IServiceEndpointPlugin`接口，并使用`WS2007HttpRelayBinding`。
- en: 'In the following, we are self hosting the service in a console application:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将在控制台应用程序中自托管该服务：
- en: '[PRE4]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the listener application so that it can actively listen for messages passed
    to it and create the lead record inside Dynamics 365\. This will invoke the `Execute`
    method in our listener application and output the remote execution context details
    in the console window.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行监听器应用程序，使其能够主动监听传递给它的消息，并在Dynamics 365中创建潜在客户记录。这将触发我们监听器应用程序中的`Execute`方法，并在控制台窗口中输出远程执行上下文的详细信息。
- en: In this section, we learned how to write a one-way listener, in the next section
    we will cover how to write a two-way listener application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们学习了如何编写单向监听器，在下一部分我们将介绍如何编写双向监听器应用程序。
- en: Writing a two-way listener and an Azure-aware plugin
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写双向监听器和Azure感知插件
- en: 'Let us walk through all the steps in detail for writing a two-way listener:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细地走一遍编写双向监听器的所有步骤：
- en: In the case of a two-way contract, we need to implement a custom Azure-aware
    plugin that can receive the response back from the two-way listener application,
    but before that let's register a new service endpoint for a two-way contract as
    shown here:![](img/52f70e55-d4c6-4cf6-8308-3720e0d4f6e2.png)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在双向合同的情况下，我们需要实现一个自定义的Azure感知插件，该插件可以接收来自双向监听器应用程序的响应，但在此之前，我们先注册一个新的服务端点用于双向合同，如下所示：![](img/52f70e55-d4c6-4cf6-8308-3720e0d4f6e2.png)
- en: The two-way listener application needs to implement the `ITwoWayServiceEndPointPlugin`
    interface and use `WS2007HttpRelayBinding`. Also, the `Execute` method returns
    a string that enables the two-way communication. As mentioned earlier, with relay,
    it is real time, so the listener needs to be actively listening to the messages,
    unlike queue and topics.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双向监听器应用程序需要实现`ITwoWayServiceEndPointPlugin`接口，并使用`WS2007HttpRelayBinding`。此外，`Execute`方法返回一个字符串，启用双向通信。如前所述，使用中继时是实时的，因此监听器需要主动监听消息，不同于队列和主题。
- en: 'In the following, we are self-hosting the service in a console application:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将在控制台应用程序中自托管该服务：
- en: '[PRE5]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To read the message returned from the listener application in a two-way relay,
    let us write a custom Azure-aware plugin.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了读取双向中继中从监听器应用程序返回的消息，让我们编写一个自定义的Azure感知插件。
- en: 'The first thing we need here is the GUID of the service endpoint we registered.
    We can get the GUID, ServiceEndpointId from the properties window of the service
    endpoint registered as shown here:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里需要的第一件事是我们注册的服务端点的GUID。我们可以从服务端点的属性窗口中获取GUID，ServiceEndpointId，如下所示：
- en: '![](img/43afe7b4-e7a9-421f-b8ad-f2a763cd647a.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43afe7b4-e7a9-421f-b8ad-f2a763cd647a.png)'
- en: Here, `IServiceEndpointNotificationService` will provide us with the service
    endpoint, for which we will pass the service endpoint entity reference to it.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，`IServiceEndpointNotificationService`将为我们提供服务端点，我们将其服务端点实体引用传递给它。
- en: 'We need to call the `Execute` method of the notification service to post the
    execution context to the Azure Service Bus. The `Execute` method returns the response
    received from the listener application, which we are then tracing using the `ITracingService`
    inside our custom Azure-aware plugin:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要调用通知服务的`Execute`方法，将执行上下文发送到Azure Service Bus。`Execute`方法返回从监听器应用程序接收到的响应，然后我们使用`ITracingService`在自定义的Azure感知插件中进行跟踪：
- en: '[PRE6]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Register the plugin and add a new step forthe **Lead on Create** message to
    it. The custom Azure-aware plugin can be registered as synchronous, unlike the
    OOB Azure-aware plugin.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册插件并为**潜在客户创建**消息添加一个新的步骤。与OOB Azure感知插件不同，自定义的Azure感知插件可以注册为同步。
- en: Create a lead record to trigger the plugin. Make sure our two-way listener application
    is running and ready to receive the message.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个潜在客户记录以触发插件。确保我们的双向监听器应用程序正在运行并准备好接收消息。
- en: The listener application, on successfully receiving the context passed from
    the Azure Service Bus, returns the string Message Processed.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 听众应用程序在成功接收到来自Azure Service Bus传递的上下文后，返回字符串“Message Processed”。
- en: Inside Dynamics 365, go to Settings |Plug-In Trace Log to verify the same:![](img/b89b1454-526b-4fe4-96da-267a48f14ccc.png)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Dynamics 365中，转到设置 | 插件跟踪日志进行验证：![](img/b89b1454-526b-4fe4-96da-267a48f14ccc.png)
- en: To enable logging for the Plug-in Trace Log, go to Settings |System Settings
    |Customization tab. Select **All options** to enable logging to the Plug-in Trace
    Log field.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件跟踪日志的日志记录，请转到设置 | 系统设置 | 自定义选项卡。选择**所有选项**以启用插件跟踪日志字段的日志记录。
- en: In the next section, we will cover how to write REST listener applications,
    which is similar to the two-way listener application, the main difference being
    that it uses a REST endpoint.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将介绍如何编写REST监听器应用程序，这与双向监听器应用程序类似，主要区别在于它使用REST端点。
- en: Writing a REST listener
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写REST监听器
- en: 'Let us walk through all the steps in detail for writing a two-way REST listener.
    As it uses a REST endpoint, it allows us to create a relay service in Node.js
    which can be executed on multiple platforms such as macOS, Windows, Linux and
    so on:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细介绍编写双向REST监听器的所有步骤。由于它使用REST端点，它允许我们在Node.js中创建一个中继服务，并可以在多个平台（如macOS、Windows、Linux等）上执行：
- en: Before writing a REST listener, let us first register a new service endpoint
    as shown here:![](img/b5c27824-531f-42a1-86eb-6f0b925dc144.png)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编写REST监听器之前，我们首先按照下图所示注册一个新的服务端点：![](img/b5c27824-531f-42a1-86eb-6f0b925dc144.png)
- en: 'The REST Listener needs to implement the `IWebHttpServiceEndpointPlugin` interface
    and use `WebHttpRelayBinding`. Here again, we are self hosting the service in
    a console application:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: REST监听器需要实现`IWebHttpServiceEndpointPlugin`接口并使用`WebHttpRelayBinding`。在这里，我们再次在控制台应用程序中自托管该服务：
- en: '[PRE7]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Back in Dynamics 365, create a lead record to trigger the plugin, which calls
    the `Execute` method of the listener application. The listener, on receiving the
    message, returns the string Message Processed by Rest Listener, which is traced
    by the plugin in the Plug-in Trace Logs as shown here:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Dynamics 365，创建一个潜在客户记录以触发插件，该插件调用监听器应用程序的`Execute`方法。监听器接收到消息后，返回字符串“Message
    Processed by Rest Listener”，该信息将在插件的插件跟踪日志中被追踪，如下所示：
- en: '![](img/f6dc9d9b-810c-47ca-9aa7-d33f7b144b4c.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6dc9d9b-810c-47ca-9aa7-d33f7b144b4c.png)'
- en: In this section, we learned how to write a REST listener, in the next section
    we will cover how to write an event hub listener application.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何编写REST监听器，在接下来的部分中，我们将介绍如何编写事件中心监听器应用程序。
- en: Writing an event hub listener
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写事件中心监听器
- en: 'Let us walk through all the steps in detail for writing an event hub listener.
    To create an event hub listener:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细介绍编写事件中心监听器的所有步骤。要创建事件中心监听器：
- en: Go to Azure Portal, search for event hubs, and create a new event hubs namespace.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Azure门户，搜索事件中心，并创建一个新的事件中心命名空间。
- en: Select Event Hubs inside Event Hubs Namespace and click on Add Event Hub to
    create a new event hub.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件中心命名空间中选择事件中心，然后点击“添加事件中心”以创建一个新的事件中心。
- en: 'For the event hub created, add a new `SharedAccessKey` with appropriate rights
    and copy its connection string and use it while registering a new service endpoint
    in the plugin registration tool as shown here:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于创建的事件中心，添加一个新的`SharedAccessKey`，并为其分配适当的权限，复制其连接字符串，并在插件注册工具中注册新的服务端点时使用，如下所示：
- en: '![](img/de11c177-145a-4cc5-ad04-30f0ad938744.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de11c177-145a-4cc5-ad04-30f0ad938744.png)'
- en: Add a step to trigger the plugin on Create of the Lead record.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个步骤，以便在创建潜在客户记录时触发插件。
- en: For the event hub listener application, create a new console application, add
    the following NuGet Package in it—`WindowsAzure.ServiceBus`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于事件中心监听器应用程序，创建一个新的控制台应用程序，添加以下 NuGet 包——`WindowsAzure.ServiceBus`。
- en: 'The following is the sample code for our event hub listener application. Here
    we are using the `EventHubClient` object to create the receiver:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是我们事件中心监听器应用程序的示例代码。在这里，我们使用 `EventHubClient` 对象来创建接收器：
- en: '[PRE8]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Create a new lead inside Dynamics 365.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Dynamics 365 中创建一个新的潜在客户。
- en: 'Running our event hub listener, we see the expected JSON output inside the
    console:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行我们的事件中心监听器时，我们可以在控制台中看到预期的 JSON 输出：
- en: '![](img/deb1181e-2a8d-4a48-bdd8-0ea14d32100f.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/deb1181e-2a8d-4a48-bdd8-0ea14d32100f.png)'
- en: The recommended way to receive events from event hubs is by using the event
    processor host—[https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-dotnet-standard-api-overview#event-processor-host-apis](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-dotnet-standard-api-overview#event-processor-host-apis).
    (The source code for the chapter includes the example of receiving events using
    the event processor.)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接收事件的推荐方式是使用事件处理器主机—[https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-dotnet-standard-api-overview#event-processor-host-apis](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-dotnet-standard-api-overview#event-processor-host-apis)。
    （本章的源代码包括使用事件处理器接收事件的示例。）
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered Azure Extensions provided within Dynamics 365 and
    how to configure and write listener applications for different supported contract
    types.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们讲解了 Dynamics 365 中提供的 Azure 扩展以及如何配置和编写监听应用程序来支持不同的合同类型。
- en: In the next chapter, we will look at the new Editable Grid introduced with CRM
    2016 and different properties that are supported.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍 CRM 2016 引入的新可编辑网格及其支持的不同属性。
