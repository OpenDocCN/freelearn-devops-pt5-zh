- en: Chapter 6. Continuous Deployment - A Fully Automated Workflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章：持续部署 - 完全自动化工作流
- en: Welcome to the final stage of the CI workflow - the **Continuous Deployment**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 CI 流程的最后阶段——**持续部署**。
- en: We are now ready to take the AMI we produced during the Continuous Delivery
    step and deploy that to production.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好将我们在持续交付步骤中生成的 AMI 部署到生产环境。
- en: 'For this process, we are going to use **blue/green deployment** approach. Our
    production environment is going to consist of ELB and two Auto scaling Groups
    (blue and green):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个过程，我们将使用**蓝绿部署**方法。我们的生产环境将由 ELB 和两个自动扩展组（蓝色组和绿色组）组成：
- en: '![Continuous Deployment - A Fully Automated Workflow](img/image_06_001.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![持续部署 - 完全自动化工作流](img/image_06_001.jpg)'
- en: 'If we assume that the blue group holds our current production nodes, then upon
    deployment, we do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们假设蓝色组包含当前的生产节点，那么在部署时，我们会执行以下操作：
- en: Attach ELB to the green group
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ELB 附加到绿色组
- en: Scale the green group up using the new AMI
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新的 AMI 扩展绿色组
- en: Check for errors
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查错误
- en: Scale the blue group down, effectively shifting traffic to the instances of
    the new AMI
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩小蓝色组的规模，将流量有效地转移到新 AMI 实例上
- en: As we are building on top of our existing CI pipelines, there are only a few
    changes we need to make to the code from the previous chapter. We need to add
    a few extra Terraform resources; let us take a look at those.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们是在现有的 CI 流水线基础上进行构建，因此我们只需要对上一章的代码进行一些小的修改。我们需要添加几个额外的 Terraform 资源；让我们来看看这些资源。
- en: Terraform code (resources.tf)
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Terraform 代码 (resources.tf)
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Please refer to: [https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/Terraform/resources.tf](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/Terraform/resources.tf) .'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考：[https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/Terraform/resources.tf](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/Terraform/resources.tf)。
- en: We add a second public and a matching private subnet so that we can distribute
    the production instances across multiple availability zones.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了第二个公共子网和一个匹配的私有子网，以便能够将生产实例分布到多个可用区。
- en: 'The `aws_subnet` resource creates a subnet named `public-2`. It takes attributes
    such as a VPC ID, CIDR BLOCK and AZs, the values of which we pull from variables.
    To compute the CIDR and AZ values we use Terraform''s interpolation functions
    (ref: [https://www.terraform.io/docs/configuration/interpolation.html](https://www.terraform.io/docs/configuration/interpolation.html)):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`aws_subnet` 资源创建一个名为 `public-2` 的子网。它需要一些属性，如 VPC ID、CIDR 块和可用区（AZ），这些值我们从变量中获取。为了计算
    CIDR 和 AZ 值，我们使用 Terraform 的插值函数（参考：[https://www.terraform.io/docs/configuration/interpolation.html](https://www.terraform.io/docs/configuration/interpolation.html)）：'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we associate the newly created subnet with a routing table:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将新创建的子网与路由表关联：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then repeat for the `Private` subnet:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对`Private`子网重复此操作：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this VPC, we are going to end up with subnets 1 and 3 public, and 2 and 4
    private.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 VPC 中，我们最终会得到子网 1 和 3 为公共子网，子网 2 和 4 为私有子网。
- en: 'The next change is the addition of a prod ELB and a security group for it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是添加生产 ELB 和为其配置的安全组：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note the protocol value of `"-1"`, meaning "all":'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意协议值`"-1"`，表示“所有”：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let us also update the `demo-app` security group Ingress rules to allow traffic
    from the ELB. To help visualize, here is our earlier diagram with more labels:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还更新`demo-app`安全组的入站规则，以允许来自 ELB 的流量。为了更直观地展示，下面是我们之前的图示，并加上了更多标签：
- en: '![Terraform code (resources.tf)](img/image_06_002.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Terraform 代码 (resources.tf)](img/image_06_002.jpg)'
- en: 'And in code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then we introduce our blue/green **Auto Scaling Groups** (**ASG**) and a temporary
    launch configuration:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们引入我们的蓝绿**自动扩展组**（**ASG**）和一个临时启动配置：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The launch configuration here is really only a placeholder, so that we can define
    the Auto Scaling Groups (which is why we reuse the Jenkins variables). We are
    going to create a new, real launch configuration to serve the `demo-app` later
    on as part of the pipeline.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的启动配置实际上只是一个占位符，以便我们可以定义自动扩展组（这也是为什么我们重复使用 Jenkins 变量）。稍后，我们将创建一个新的真实启动配置，用于作为流水线的一部分服务`demo-app`。
- en: outputs.tf
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: outputs.tf
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Please refer to: [https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/Terraform/outputs.tf](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/Terraform/outputs.tf).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考：[https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/Terraform/outputs.tf](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/Terraform/outputs.tf)。
- en: 'A minor addition to the outputs, to give us the Production ELB endpoint:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对输出做了一些小的添加，以便给我们生产环境ELB端点：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Deployment
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署
- en: 'It is time for exercise. Using the earlier-mentioned templates and the rest
    of the familiar code from [https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/tree/master/5585_06_CodeFiles](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/tree/master/5585_06_CodeFiles) plus
    your previous experience you should be able to bring up a VPC plus a Jenkins instance
    with two pipelines, exactly as we did in the chapter on Continuous Delivery. Do
    not forget to update any deployment-specific details such as the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是练习时间。使用之前提到的模板和来自[https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/tree/master/5585_06_CodeFiles](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/tree/master/5585_06_CodeFiles)的其余熟悉代码，再加上你的先前经验，你应该能够创建一个VPC并启动一个Jenkins实例，配置两个流水线，正如我们在持续交付章节中所做的那样。别忘了更新任何与部署相关的细节，如下所示：
- en: The SSH public key in `salt:states:users:files`
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`salt:states:users:files`中的SSH公钥'
- en: The authorized key in the `serverspec` test specification
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serverspec`测试规范中的授权密钥'
- en: The S3 URI in `salt:states:yum-s3:files:s3.repo`
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`salt:states:yum-s3:files:s3.repo`中的S3 URI'
- en: The S3 bucket name in `demo-app/Jenkinsfile`
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`demo-app/Jenkinsfile`中的S3桶名称'
- en: The variables in `packer:demo-app_vars.json`
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packer:demo-app_vars.json`中的变量'
- en: The variables in `demo-app-cdelivery/Jenkinsfile`
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`demo-app-cdelivery/Jenkinsfile`中的变量'
- en: I would recommend you to disable the SCM Polling in the **demo-app** job so
    that we don't trigger a run before all our downstream jobs have been configured.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你禁用**demo-app**任务中的SCM轮询，这样在所有下游任务配置完之前，我们不会触发运行。
- en: 'Assuming that all went well, we are back where we left off:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一切顺利，我们回到之前的状态：
- en: '![Deployment](img/image_06_003.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![部署](img/image_06_003.jpg)'
- en: Jenkins pipelines
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 流水线
- en: Earlier we have our Integration and Delivery pipelines chained together, taking
    code and producing and AMI artifact. Our next task is to design a third pipeline
    to take that AMI and deploy it into our production environment.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们已经将集成和交付流水线串联起来，获取代码并生成AMI工件。我们的下一个任务是设计一个第三个流水线，将AMI部署到生产环境中。
- en: 'Before we can create the new job in Jenkins, we need to make the code for it
    available via Git:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以在Jenkins中创建新任务之前，我们需要通过Git使其代码可用：
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Please refer to: [https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/tree/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/tree/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考：[https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/tree/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/tree/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment)。
- en: We will examine the files in detail shortly, for now just create and populate
    a `demo-app-cdeployment` CodeCommit repository. Similar to our other repositories,
    the new one would have an URL such as [https://git-codecommit.us-east-1.amazonaws.com/v1/repos/demo-app-cdeployment](https://git-codecommit.us-east-1.amazonaws.com/v1/repos/demo-app-cdeployment).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将详细检查文件，目前请先创建并填充一个名为`demo-app-cdeployment`的CodeCommit仓库。与我们其他仓库类似，新仓库的URL将是[https://git-codecommit.us-east-1.amazonaws.com/v1/repos/demo-app-cdeployment](https://git-codecommit.us-east-1.amazonaws.com/v1/repos/demo-app-cdeployment)。
- en: 'With that in hand, we proceed to create the pipeline:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，我们继续创建流水线：
- en: '![Jenkins pipelines](img/image_06_004.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins 流水线](img/image_06_004.jpg)'
- en: 'It will need to take an `AMI ID` parameter (to be passed on from the Delivery
    job):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它将需要一个`AMI ID`参数（从交付任务传递过来）：
- en: '![Jenkins pipelines](img/image_06_005.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins 流水线](img/image_06_005.jpg)'
- en: 'Then of course, it needs the `Jenkinsfile` location ([https://git-codecommit.us-east-1.amazonaws.com/v1/repos/demo-app-cdeployment](https://git-codecommit.us-east-1.amazonaws.com/v1/repos/demo-app-cdeployment)):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当然，还需要`Jenkinsfile`的位置（[https://git-codecommit.us-east-1.amazonaws.com/v1/repos/demo-app-cdeployment](https://git-codecommit.us-east-1.amazonaws.com/v1/repos/demo-app-cdeployment)）：
- en: '![Jenkins pipelines](img/image_06_006.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins 流水线](img/image_06_006.jpg)'
- en: 'With that final job ready, our Jenkins dashboard looks like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有了最后的任务，我们的Jenkins仪表板看起来是这样的：
- en: '![Jenkins pipelines](img/image_06_007.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins 流水线](img/image_06_007.jpg)'
- en: Continuous Deployment pipeline
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续部署流水线
- en: 'Back to the code, as promised:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 回到代码，如之前所承诺：
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please refer to [https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment/Jenkinsfile](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment/Jenkinsfile).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 [https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment/Jenkinsfile](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment/Jenkinsfile)。
- en: 'Our Jenkinsfile is rather simple:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Jenkinsfile 非常简单：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We simply check out the associated repository and execute a shell script. Naturally,
    we could have coded the whole task in Groovy, but I personally am more used to
    Bash, hence the resulting `cdeployment.sh`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要检查关联的代码库并执行一个 shell 脚本。自然，我们本可以用 Groovy 编写整个任务，但我个人更习惯于使用 Bash，因此最终使用了
    `cdeployment.sh`。
- en: We briefly described the deployment task in the beginning of this chapter. Generally
    speaking, we are going to be serving the application code from two separate clusters
    of instances and swap traffic from one to the other. We will use the extensive
    and user friendly AWS CLI to carry out most operations plus Bash to process any
    input/output data.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章开头简要描述了部署任务。一般来说，我们将从两个独立的实例集群中提供应用程序代码，并在它们之间切换流量。我们将使用功能强大且用户友好的 AWS
    CLI 执行大部分操作，并使用 Bash 处理任何输入/输出数据。
- en: Let us dive into the script for more details.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解脚本的更多细节。
- en: cdeployment.sh
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cdeployment.sh
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please refer to [https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment/cdeployment.sh](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment/cdeployment.sh).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 [https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment/cdeployment.sh](https://github.com/PacktPublishing/Implementing-DevOps-on-AWS/blob/master/5585_06_CodeFiles/CodeCommit/demo-app-cdeployment/cdeployment.sh)。
- en: 'At the top, we define the names of our Auto Scaling Groups, the Production
    ELB, and the ID of the AMI, which we will be working with (passed on from the
    upstream pipeline):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部，我们定义了 Auto Scaling Groups 的名称、生产环境的 ELB 以及我们将使用的 AMI ID（从上游管道传递过来）：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A couple of helper functions:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一些辅助函数：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Namely, the `techo` (timestamped echo) for a more informative output and `ERR`
    for when we encounter problems.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 即，`techo`（带时间戳的回显）以便输出更多信息，以及当我们遇到问题时的 `ERR`。
- en: 'If we need to abort a deployment and restore our infrastructure to its original
    state, we will use this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要中止部署并将基础设施恢复到原始状态，我们将使用此方法：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In our case, we would abort if we detect an increase in the error count of certain
    metrics. We would put the newly deployed instances in **Standby** mode then detach
    the ELB from the given Auto Scaling Group.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，如果我们检测到某些指标的错误计数增加，我们将中止部署。我们会将新部署的实例设置为 **Standby** 模式，然后将 ELB 从指定的
    Auto Scaling Group 中分离。
- en: Every time we launch new instances, we should pause to allow those to fully
    initialize then verify what they have done so far and the following `wait_for_instances()`function
    will help us with this task.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们启动新的实例时，都应该暂停，允许它们完全初始化，然后验证它们到目前为止所做的工作，下面的 `wait_for_instances()` 函数将帮助我们完成此任务。
- en: 'Wait for the expected number of instances to launch:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 等待预期数量的实例启动：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Wait for them to become available:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 等待它们变为可用：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let the ELB declare them `InService`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让 ELB 将其声明为 `InService`：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, since we know the region we will be working with, we set it in advance
    to avoid having to append it to each AWS CLI command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，由于我们知道将要使用的区域，我们提前设置它，以避免在每个 AWS CLI 命令中都需要附加区域：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Before going any further, we make sure that there is a valid `AMI ID` to work
    with:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步操作之前，我们确保有一个有效的 `AMI ID` 可供使用：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We will be working with two Auto Scaling Groups and one ELB, we check the properties
    of each group and extract the ELB name:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用两个 Auto Scaling Groups 和一个 ELB，我们检查每个组的属性并提取 ELB 名称：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we ensure that only one of the groups has the Production ELB associated
    with it:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们确保只有一个组与生产环境 ELB 关联：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: At this point, we have established which of the two groups is currently serving
    traffic (`Active`) and the one to take over from it (`newActive`).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经确定了当前处理流量的两个组中的哪个（`Active`）以及哪个将接管它（`newActive`）。
- en: 'Ideally, the `newActive` will be empty, before we deploy any instances within
    it:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，在我们部署任何实例之前，`newActive` 应为空：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If that is so, we can proceed to get some stats from the `Active` group:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，我们可以继续获取 `Active` 组的一些统计信息：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`Desired`/`Min`/`Max` are the standard Auto Scaling values that we will end
    up transferring onto the `newActive` group. The `scaleStep`, in this case, 30%
    of the instances presumably in service, is the initial number of instances we
    would like to introduce (allowing them to receive live traffic) during the deployment.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`Desired`/`Min`/`Max`是标准的自动扩展值，我们最终会将它们转移到`newActive`组。`scaleStep`在这种情况下是服务中实例的30%，这是我们希望在部署过程中引入的初始实例数量（允许它们接收实时流量）。'
- en: 'It would be rather strange if our `Active` group is empty, otherwise should
    it have a low count, we round up the `scaleStep` to at least 1:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的`Active`组为空，那就非常奇怪；如果它的数量较少，我们应该将`scaleStep`四舍五入到至少1：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Those were the prerequisites; now let us start the deployment by slowly scaling
    up the `newActive` group.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是先决条件；现在让我们开始部署，通过逐步扩展`newActive`组。
- en: 'We would need a launch configuration. To create one, we can either pass all
    needed parameters ourselves or let EC2 copy most of those by providing an example
    instance from our `Active` group:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个启动配置。要创建一个，我们可以自己传递所有需要的参数，或者通过提供`Active`组中的一个示例实例，让EC2自动复制大部分参数：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Attach the newly created launch configuration to the group as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，将新创建的启动配置附加到该组：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add ELB as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示添加ELB：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Start scaling up as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式开始扩展：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Wait for a moment or two, for the instances to boot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 等待片刻，直到实例启动：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Our initial batch of instances should now have been deployed, attached to the
    Production ELB, and started serving traffic. Before we launch even more copies
    of the new AMI, we ought to check that we have not caused any issues so far. One
    way to do this is to pause the deployment for a few minutes and examine metrics,
    such as number of non-200 responses, exceptions, or requests per second. For simplicity,
    in this example, we assume that this has been done; in real life, you would query
    your monitoring system(s) or perhaps pull samples of CloudWatch ELB/EC2 statistics.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的初始实例组现在应该已经部署，附加到生产ELB，并开始服务流量。在我们启动更多新的AMI副本之前，我们应该检查到目前为止是否没有造成任何问题。为此，我们可以暂停部署几分钟，并检查一些指标，例如非200响应的数量、异常情况或每秒请求数。为了简单起见，在这个示例中，我们假设这已经完成；在现实生活中，你会查询你的监控系统，或者可能拉取CloudWatch
    ELB/EC2统计数据的样本。
- en: 'If we do not detect any anomalies, we scale the `newActive` group further to
    match the size of the `Active` one:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有检测到任何异常，我们进一步扩展`newActive`组，以匹配`Active`组的大小：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As you would expect, another check is in order:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所预期的，还需要做一次检查：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This time, we could simulate a problem and trigger a rollback:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们可以模拟一个问题并触发回滚：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `rollback` function should take care of the rest. If we keep `doRollback`
    as `false`, our deployment continues as planned and we shift traffic completely
    from the `Active` to the `newActive` group by scaling the former down:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`rollback`功能应该会处理剩下的部分。如果我们将`doRollback`设置为`false`，我们的部署将按计划继续，并通过缩小`Active`组，将流量完全转移到`newActive`组：'
- en: '[PRE30]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And detach ELB from it:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将ELB从其中移除：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, let us see our script in action. First, we should simulate an `Active`
    group by manually scaling up, say the blue one, and attach the Production ELB
    to it:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们的脚本如何运行。首先，我们应该通过手动扩展一个组（比如蓝色组）来模拟一个`Active`组，并将生产ELB附加到该组：
- en: '![cdeployment.sh](img/image_06_008.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![cdeployment.sh](img/image_06_008.jpg)'
- en: 'In a few moments, you should have three instances and ELB in blue:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等片刻，你应该能看到三个实例和蓝色的ELB：
- en: '![cdeployment.sh](img/image_06_009.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![cdeployment.sh](img/image_06_009.jpg)'
- en: Now, let us re-enable SCM polling for the `demo-app` job and trigger a run by
    pushing a code change to its CodeCommit repo. You should see the pipeline running,
    invoking the two downstream ones along the way.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们重新启用`demo-app`作业的SCM轮询，并通过推送代码更改到其CodeCommit仓库来触发一个运行。你应该能看到管道在运行，并沿途调用下游的两个管道。
- en: 'If you choose to simulate a metrics problem and cause a rollback, then the
    deployed instances should end up in the **Standby** mode:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择模拟一个指标问题并导致回滚，那么已部署的实例应该进入**Standby**模式：
- en: '![cdeployment.sh](img/image_06_010.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![cdeployment.sh](img/image_06_010.jpg)'
- en: In this case, the `rollback` was triggered after the initial deployment of one
    instance (`scaleStep=1`). Theoretically, the next step would be to investigate
    the instance looking for a possible cause for the error metrics.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`rollback`是在一个实例初次部署后触发的（`scaleStep=1`）。理论上，下一步应该是检查该实例，寻找可能导致错误指标的原因。
- en: If the instance is deemed healthy, then we would need to complete the deployment
    manually by bringing the instance into service, scaling the group up further,
    then scaling the other group down (essentially completing the remaining steps
    in the `cdeployment` script).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实例被认为是健康的，那么我们需要通过将实例投入使用，进一步扩展该组，然后缩小另一个组来手动完成部署（本质上完成 `cdeployment` 脚本中的剩余步骤）。
- en: Otherwise, the instance can be put into service, then the group scaled down
    to zero, bringing the infrastructure back to its original state with the blue
    group remaining as `Active`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，实例可以投入使用，然后将组缩减为零，使基础设施恢复到其原始状态，蓝色组保持为 `Active`。
- en: 'Should you have chosen not to cause any rollbacks, the deployment ought to
    proceed as planned and in the end the green group would have taken over the blue
    one, indicating a successful deployment:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择不进行任何回滚，部署应该按计划进行，最终绿色组会接管蓝色组，表示部署成功：
- en: '![cdeployment.sh](img/image_06_011.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![cdeployment.sh](img/image_06_011.jpg)'
- en: At this point, if you load the ELB URI in your browser, you should get a response
    from our `demo-app` as served from the newly deployed AMI.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，如果你在浏览器中加载 ELB URI，你应该会收到来自我们新部署的 AMI 提供的 `demo-app` 的响应。
- en: Congratulations!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we finalized our Jenkins CI solution by adding the Deployment
    component to it. We made extensive use of the AWS CLI to orchestrate a blue/green
    deployment process. The resulting pipeline or a collection of such allows us to
    continuously integrate our application's code changes and build an AMI containing
    those, which is then deployed to a given environment after certain tests have
    been passed and criteria met.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过添加部署组件完成了我们的 Jenkins CI 解决方案。我们广泛使用了 AWS CLI 来编排蓝绿部署过程。生成的流水线或此类集合使我们能够持续集成应用程序的代码更改，并构建包含这些更改的
    AMI，之后在通过某些测试并满足标准后，将其部署到指定的环境中。
- en: The next chapter takes us in a new direction, introducing the topic of monitoring,
    metrics, and log collection. We will take a look at tools that can help us stay
    aware of the state of our infrastructure at any given time, visualize performance,
    and react to issues.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将带我们进入一个新方向，介绍监控、指标和日志收集的主题。我们将看看一些工具，帮助我们随时了解基础设施的状态，直观地呈现性能，并对问题作出反应。
