- en: Using ConfigMaps to Inject Configuration Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ConfigMap 注入配置文件
- en: ConfigMaps allow us to keep configurations separate from application images.
    Such separation is useful when other alternatives are not a good fit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMap 允许我们将配置与应用镜像分开存储。这种分离在其他替代方案不适合时非常有用。
- en: Almost every application can be fine-tuned through configuration. Traditional
    software deployment methods fostered the use of configuration files. However,
    we are not discussing traditional, but advanced, distributed, and immutable deployments
    through Kubernetes schedulers. Usage of fundamentally new technology often requires
    new processes and different architecture, if we are to leverage its potential
    to its maximum. On the other hand, we cannot just throw away everything we have
    and start anew.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个应用程序都可以通过配置进行微调。传统的软件部署方法促进了配置文件的使用。然而，我们现在讨论的不是传统的部署，而是通过 Kubernetes 调度器进行的先进、分布式和不可变部署。使用根本性的新技术通常需要新的流程和不同的架构，才能最大化其潜力。另一方面，我们不能仅仅抛弃所有现有的东西，从头开始。
- en: We'll have to try to balance new principles and the legacy needs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须尝试平衡新原则和遗留需求。
- en: If we were to start developing a new application today, it would be, among other
    things, distributed, scalable, stateless, and fault tolerant. Those are some of
    the today's needs. While we might question how many of us know how to design an
    application with those quality attributes in mind, hardly anyone would argue against
    having any of them. What is often forgotten is the configuration. Which mechanism
    should your new application use to configure itself? How about environment variables?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们今天开始开发一个新的应用，它将是分布式的、可扩展的、无状态的，并且具有容错能力。这些是当今的需求。尽管我们可能会质疑是否有足够的人知道如何设计一个具有这些质量属性的应用，但几乎没有人会反对拥有这些属性。经常被忽视的是配置。你的新应用应该使用什么机制来配置自己？环境变量怎么样？
- en: Environment variables fit well into distributed systems. They are easy to define,
    and they are portable. They are the ideal choice for configuration mechanism of
    new applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量非常适合分布式系统。它们易于定义，并且是可移植的。它们是新应用配置机制的理想选择。
- en: However, in some cases, the configuration might be too complex for environment
    variables. In such situations, we might need to fall back to files (hopefully
    YAML). When those cases are combined with legacy applications which are almost
    exclusively using file-based configuration, it is evident that we cannot rely
    only on environment variables.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某些情况下，配置可能对环境变量来说过于复杂。在这种情况下，我们可能需要退回到文件（希望是 YAML）。当这些情况与几乎完全使用基于文件配置的遗留应用结合时，很明显我们不能仅仅依赖环境变量。
- en: When a configuration is based on files, the best approach we can take is to
    bake the configuration into a Docker image. That way, we are going down the fully-immutable
    road. Still, that might not be possible when our application needs different configuration
    options for various clusters (for example, testing and production). I'll ignore
    my internal need to convert this into a discussion that ends with "you do NOT
    need a different configuration for different environments". Rather just assume
    that you might have an excellent reason for something like that. In such a case,
    baking config files into images will not do the trick. That's where ConfigMaps
    comes into play.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置基于文件时，我们可以采取的最佳方法是将配置嵌入到 Docker 镜像中。这样，我们就走上了完全不可变的道路。然而，当我们的应用需要为不同集群（例如，测试和生产）提供不同的配置选项时，这可能不可行。我将忽略我内心想要将其转化为“你不需要为不同环境使用不同配置”这一讨论的需求。只是暂时假设你有非常充分的理由来使用这样的配置。在这种情况下，将配置文件嵌入到镜像中是行不通的。这就是
    ConfigMap 发挥作用的地方。
- en: ConfigMap allows us to "inject" configuration into containers. The source of
    the configs can be files, directories, or literal values. The destination can
    be files or environment variables.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMap 允许我们将配置“注入”到容器中。配置的来源可以是文件、目录或字面值。目标可以是文件或环境变量。
- en: ConfigMap takes a configuration from a source and mounts it into running containers
    as a volume.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMap 从一个源获取配置，并将其挂载到正在运行的容器中，作为一个卷。
- en: That's all the theory you'll get up-front. Instead of a lengthy explanation,
    we'll run some examples, and comment on the features we experience. We'll be learning
    by doing, instead of learning by memorizing theory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你将获得的全部理论内容。我们不会进行冗长的解释，而是通过一些示例进行实践，并评论我们所体验到的特性。我们将通过实践学习，而不是通过记忆理论来学习。
- en: Let's prepare the cluster and see ConfigMaps in action.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备集群并查看ConfigMap的实际应用。
- en: Creating a cluster
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集群
- en: It's still the same process as before, so let's get over with it silently.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这与之前的过程相同，所以让我们默默地完成它。
- en: All the commands from this chapter are available in the `09-config-map.sh` ([https://gist.github.com/vfarcic/717f8418982cc5ec1c755fcf7d4255dd](https://gist.github.com/vfarcic/717f8418982cc5ec1c755fcf7d4255dd))
    Gist.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有命令都可以在`09-config-map.sh` ([https://gist.github.com/vfarcic/717f8418982cc5ec1c755fcf7d4255dd](https://gist.github.com/vfarcic/717f8418982cc5ec1c755fcf7d4255dd))
    Gist中找到。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now we can try out the first variation of a ConfigMap.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以尝试ConfigMap的第一个变体。
- en: Injecting configurations from files
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件注入配置
- en: 'In its purest, and probably the most common form, a ConfigMap takes a single
    file. For example, we can create one from the `cm/prometheus-conf.yml` file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最纯粹、也可能是最常见的形式下，ConfigMap包含一个文件。例如，我们可以从`cm/prometheus-conf.yml`文件创建一个ConfigMap：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We created a **ConfigMap** (`cm`) called `my-config`. The data of the map is
    the content of the `cm/prometheus-conf.yml` file.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为**ConfigMap**（`cm`）的`my-config`。该映射的数据来自`cm/prometheus-conf.yml`文件的内容。
- en: Let's describe it, and see what we'll get.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们描述它，看看会得到什么。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output is as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The important part is located below `Data`. We can see the key which, in this
    case, is the name of the file (`prometheus-conf.yml`). Further down you can see
    the content of the file. If you execute `cat cm/prometheus-conf.yml`, you'll see
    that it is the same as what we saw from the ConfigMap's description.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的部分位于`Data`下方。我们可以看到键，这里是文件的名称（`prometheus-conf.yml`）。再往下，你可以看到文件的内容。如果你执行`cat
    cm/prometheus-conf.yml`，你会看到它与我们从ConfigMap描述中看到的内容相同。
- en: ConfigMap is useless by itself. It is yet another Volume which, like all the
    others, needs a mount.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMap本身是没有用的。它只是另一个卷，就像所有其他卷一样，需要挂载。
- en: Let's take a look at a Pod specification defined in `cm/alpine.yml`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在`cm/alpine.yml`中定义的Pod规格。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output is as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The essential sections are `volumeMounts` and `volumes`. Since `volumeMounts`
    are the same no matter the type of the Volume, there's nothing special about it.
    We defined that it should be based on the volume called `config-vol` and that
    it should mount the path `/etc/config`. The `volumes` section uses `configMap`
    as the type and, in this case, has a single item `name`, that coincides with the
    name of the ConfigMap we created earlier.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的部分是`volumeMounts`和`volumes`。由于`volumeMounts`在所有Volume类型中都是相同的，因此它没有什么特别的。我们定义了它应该基于名为`config-vol`的卷，并且应该挂载路径`/etc/config`。`volumes`部分使用`configMap`作为类型，在这种情况下，只有一个`name`项，与我们之前创建的ConfigMap的名称一致。
- en: Let's create the Pod and see what happens.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建Pod并看看会发生什么。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Please confirm that the Pod is indeed running before moving on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请在继续之前确认Pod确实正在运行。
- en: Let's see the content of the `/etc/config` directory inside the Pod's only container.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Pod内唯一容器中`/etc/config`目录的内容。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `/etc/config` now has a single file that coincides with the file we stored
    in the ConfigMap.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`/etc/config`目录下有一个文件，它与我们在ConfigMap中存储的文件一致。
- en: If you add `-l` to the `ls` command we executed a moment ago, you'll see that
    `prometheus-conf.yml` is a link to `..data/prometheus-conf.yml`. If you dig deeper,
    you'll see that `..data` is also a link to the directory named from a timestamp.
    And so on, and so forth. For now, the exact logic behind all the links and the
    actual files is not of great importance. From the functional point of view, there
    is `prometheus-conf.yml`, and our application can do whatever it needs to do with
    it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在刚才执行的`ls`命令中添加`-l`，你会看到`prometheus-conf.yml`是指向`..data/prometheus-conf.yml`的链接。如果你深入查看，你会发现`..data`也是指向一个由时间戳命名的目录的链接。如此类推。目前，所有链接背后的确切逻辑和实际文件并不十分重要。从功能的角度来看，`prometheus-conf.yml`存在，我们的应用可以对其执行所需的操作。
- en: 'Let''s confirm that the content of the file inside the container is indeed
    the same as the source file we used to create the ConfigMap:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认容器内文件的内容确实与我们用来创建ConfigMap的源文件相同：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output should be the same as the contents of the `cm/prometheus-conf.yml`
    file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该与`cm/prometheus-conf.yml`文件的内容相同。
- en: 'We saw one combination of ConfigMap. Let''s see what else we can do with it.
    We''ll remove the objects we created thus far and start over:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了ConfigMap的一个组合。让我们看看还能用它做些什么。我们将删除迄今为止创建的对象，并重新开始：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are not limited to a single `--from-file` argument. We can specify as many
    as we need.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不限于使用一个`--from-file`参数。我们可以根据需要指定多个。
- en: 'Let''s see what happens when we execute the commands that follow:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看执行接下来的命令时会发生什么：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We created a ConfigMap with two files, and we created the same Pod based on
    the `alpine.yml` definition. Finally, we output the list of files from the `/etc/config`
    directory inside the Pod''s only container. The output of the latter command is
    as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个包含两个文件的 ConfigMap，并根据 `alpine.yml` 定义创建了相同的 Pod。最后，我们输出了 Pod 唯一容器中 `/etc/config`
    目录下的文件列表。最后命令的输出如下：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can see that both files are present in the container. That leads us to the
    conclusion that a ConfigMap can contain multiple files, and all will be created
    inside containers that mount it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到两个文件都存在于容器中。这让我们得出结论，ConfigMap 可以包含多个文件，所有文件都会被创建在挂载它的容器中。
- en: Let's delete the objects (again), and explore one more option behind the `--from-file`
    argument.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次删除对象，并探索 `--from-file` 参数背后的另一个选项。
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `--from-file` argument might lead you to the conclusion that you can specify
    only a file path as its value. It works with directories as well. We can, for
    example, add all files from the `cm` directory to a ConfigMap.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`--from-file` 参数可能会让你得出结论，认为它的值只能指定一个文件路径。其实它也可以与目录一起使用。例如，我们可以将 `cm` 目录中的所有文件添加到
    ConfigMap 中。'
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We created `my-config` ConfigMap with the directory `cm`. Let's describe it,
    and see what's inside.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了 `my-config` ConfigMap 并使用了 `cm` 目录。让我们描述它，并查看里面有什么。
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The output is as follows (content of the files is removed for brevity).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下（为了简洁，文件内容被省略）。
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can see that all six files from the `cm` directory are now inside the `my-config`
    ConfigMap.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 `cm` 目录中的所有六个文件现在都在 `my-config` ConfigMap 内。
- en: 'I''m sure you already know what will happen if we create a Pod that mounts
    that ConfigMap. We''ll check it out anyways:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你已经知道，如果我们创建一个挂载该 ConfigMap 的 Pod，会发生什么。我们还是来看一下：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output of the latter command is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后命令的输出如下：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: All the files are there, and the time has come to move away from files and directories.
    So, let's remove the objects first, and discuss the other sources.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有文件都在那里，现在是时候从文件和目录转移开了。所以，首先让我们删除这些对象，并讨论其他配置源。
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Injecting configurations from key/value literals
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从键/值字面量注入配置
- en: Hopefully, even when our applications need different configs to work in distinct
    clusters, the differences are limited. Often, they should be limited to only a
    few key/value entries. In such cases, it might be easier to create ConfigMaps
    using `--from-literal`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 希望即使我们的应用需要不同的配置来在不同的集群中工作，这些差异也会受到限制。通常，它们应该仅限于少数几个键/值条目。在这种情况下，使用 `--from-literal`
    创建 ConfigMap 可能更容易。
- en: 'Let''s take a look at an example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of the latter command is as follows (`metadata` is removed for brevity):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后命令的输出如下（`metadata` 为了简洁被省略）：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We can see that two entries were added, one for each literal.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到添加了两个条目，每个字面量对应一个条目。
- en: 'Let''s create a Pod with the ConfigMap mounted:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个挂载了 ConfigMap 的 Pod：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output of the latter command is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后命令的输出如下：
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Finally, let's confirm that the content of one of the files is correct.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们确认其中一个文件的内容是正确的。
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE25]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `--from-literal` argument is useful when we're in need to set a relatively
    small set of configuration entries in different clusters. It makes more sense
    to specify only the things that change, than all the configuration options.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`--from-literal` 参数在我们需要在不同的集群中设置一小组配置条目时非常有用。它更合理的做法是只指定发生变化的部分，而不是所有的配置选项。'
- en: The problem is that most of the existing applications are not designed to read
    separate configuration entries from different files. On the other hand, if you're
    sketching a new application, you might not choose this option either since you'd
    be able to develop it in a way that it reads environment variables. When faced
    with a choice between ConfigMap and environment variables, the latter wins most
    of the time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，大多数现有应用程序并没有设计成从不同的文件中读取独立的配置条目。另一方面，如果你正在开发一个新应用程序，你也许不会选择这种方式，因为你可以将它开发成读取环境变量的方式。在
    ConfigMap 和环境变量之间做出选择时，大多数情况下环境变量会胜出。
- en: All in all, I'm not sure how often you'll be using the `--from-literal` argument.
    Maybe a lot, more likely not at all.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我不确定你会多频繁使用 `--from-literal` 参数。可能会用很多次，更可能完全不会用。
- en: There's one more config source left to explore, so let's delete the objects
    we're currently running, and move on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个配置源需要探索，所以让我们删除当前正在运行的对象，然后继续。
- en: '[PRE26]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Injecting configurations from environment files
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从环境文件注入配置
- en: 'Let''s take a look at the `cm/my-env-file.yml` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下 `cm/my-env-file.yml` 文件：
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The file has the same key/value pairs as those we used in the example with
    `--from-literal`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含与我们在使用 `--from-literal` 时示例中使用的相同的键值对：
- en: Let's see what happens if we create a ConfigMap using that file as the source.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果我们使用该文件作为源来创建 ConfigMap，会发生什么。
- en: '[PRE29]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We created the ConfigMap using the `--from-env-file` argument, and we retrieved
    the ConfigMap in `yaml` format.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `--from-env-file` 参数创建了 ConfigMap，并以 `yaml` 格式获取了 ConfigMap。
- en: 'The output of the latter command is as follows (`metadata` is removed for brevity):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 后者命令的输出如下（为了简便，`metadata` 被删除）：
- en: '[PRE30]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can see that there are two entries, each corresponding to key/value pairs
    from the file. The result is the same as when we created a ConfigMap using `--from-literal`
    arguments. Two different sources produced the same outcome:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到有两个条目，每个条目都对应文件中的键值对。结果与我们使用 `--from-literal` 参数创建 ConfigMap 时相同。两个不同的源产生了相同的结果：
- en: 'If we used `--from-file` argument, the result would be as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 `--from-file` 参数，结果将如下：
- en: '[PRE31]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: All in all, `--from-file` reads the content of a one or more files, and stores
    it using file names as keys. `--from-env-file`, assumes that content of a file
    is in key/value format, and stores each as a separate entry.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，`--from-file` 读取一个或多个文件的内容，并使用文件名作为键存储它。`--from-env-file` 假定文件的内容是键值对格式，并将每个键值对作为单独的条目存储。
- en: Converting ConfigMap output into environment variables
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 ConfigMap 输出转换为环境变量
- en: All the examples we've seen so far are differing only in the source. The destination
    is always the same. No matter whether ConfigMap is created from a file, from a
    directory, from literal values, or from an environment file, it perpetually resulted
    in one or more files being injected into a container.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的所有示例只是源不同。目标始终是相同的。无论是通过文件、目录、字面值还是环境文件创建 ConfigMap，最终都会将一个或多个文件注入到容器中。
- en: This time we'll try something different. We'll see how we can convert a ConfigMap
    into environment variables.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们会尝试一些不同的方式。我们将看到如何将 ConfigMap 转换为环境变量。
- en: 'Let''s take a look at a sample definition:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个示例定义：
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The output is as follows.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下。
- en: '[PRE33]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The major difference, when compared with `cm/alpine.yml`, is that `volumeMounts`
    and `volumes` sections are gone. This time we have `env` section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `cm/alpine.yml` 相比，主要的区别是 `volumeMounts` 和 `volumes` 部分消失了。这次我们有了 `env` 部分。
- en: Instead of a `value` field, we have `valueFrom`. Further on, we declared that
    it should get values from a ConfigMap (`configMapKeyRef`) named `my-config`. Since
    that ConfigMap has multiple values, we specified the `key` as well.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有 `value` 字段，而是有 `valueFrom`。进一步来说，我们声明它应该从名为 `my-config` 的 ConfigMap 中获取值。由于该
    ConfigMap 有多个值，我们也指定了 `key`。
- en: 'Let''s create the Pod:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 Pod：
- en: '[PRE34]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We created the Pod and executed the `env` command inside its only container.
    The output of the latter command, limited to the relevant parts, is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了 Pod，并在其唯一的容器内执行了 `env` 命令。后者命令的输出，限于相关部分，如下所示：
- en: '[PRE35]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'There''s another, often more useful way to specify environment variables from
    a ConfigMap. Before we try it, we''ll remove the currently running Pod:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种方法，通常更有用，可以从 ConfigMap 中指定环境变量。在尝试之前，我们将删除当前正在运行的 Pod：
- en: '[PRE36]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s take a look at yet another definition:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看另一个定义：
- en: '[PRE37]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The output is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE38]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The difference is only in the way environment variables are defined. This time,
    the syntax is much shorter. We have `envFrom`, instead of the `env` section. It
    can be either `configMapRef` or `secretRef`. Since we did not yet explore Secrets,
    we'll stick with the prior. Inside `configMapRef` is the name reference to the
    `my-config` ConfigMap.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 区别仅在于环境变量的定义方式。这次，语法更简短了。我们有了 `envFrom`，而不是 `env` 部分。它可以是 `configMapRef` 或 `secretRef`。由于我们还没有探索
    Secrets，我们将继续使用前者。在 `configMapRef` 中是指向 `my-config` ConfigMap 的名称引用。
- en: Let's see it in action.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下实际效果。
- en: '[PRE39]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We created the Pod and retrieved all the environment variables from inside
    its only container. The output of the latter command, limited to the relevant
    parts, is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了 Pod，并从其唯一的容器内获取了所有环境变量。后者命令的输出，限于相关部分，如下所示：
- en: '[PRE40]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The result is the same as before. The difference is only in the way we define
    environment variables. With `env.valueFrom.configMapKeyRef` syntax, we need to
    specify each ConfigMap key separately. That gives us control over the scope and
    the relation with the names of container variables.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 结果与之前相同。唯一的区别在于我们定义环境变量的方式。使用 `env.valueFrom.configMapKeyRef` 语法时，我们需要分别指定每个
    ConfigMap 键。这让我们可以控制作用域，并与容器变量的名称建立关系。
- en: The `envFrom.configMapRef` converts all ConfigMap's data into environment variables.
    That is often a better and simpler option if you don't need to use different names
    between ConfigMap and environment variable keys. The syntax is short, and we don't
    need to worry whether we forgot to include one of the ConfigMap's keys.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`envFrom.configMapRef` 会将所有 ConfigMap 的数据转换为环境变量。如果你不需要在 ConfigMap 和环境变量键之间使用不同的名称，这通常是一个更好、更简单的选择。语法简短，而且我们不需要担心是否遗漏了
    ConfigMap 的某个键。'
- en: Defining ConfigMaps as YAML
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 ConfigMap 定义为 YAML
- en: All ConfigMaps we created so far were done through `kubectl create cm` commands.
    It would be a shame if we could not specify them through YAML definitions, just
    like other Kubernetes resources and objects. Fortunately, we can. Everything in
    Kubernetes can be defined as YAML, and that includes ConfigMaps as well.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们创建的所有 ConfigMap 都是通过 `kubectl create cm` 命令完成的。如果我们不能像定义其他 Kubernetes
    资源和对象一样通过 YAML 定义它们，那就太可惜了。幸运的是，我们可以。Kubernetes 中的一切都可以通过 YAML 定义，包括 ConfigMap。
- en: Even though we have not yet specified ConfigMaps as YAML, we have seen the format
    quite a few times throughout this chapter. Since I cannot be sure whether you
    can create a ConfigMap YAML file from memory, let's make things easy on ourselves
    and use `kubectl` to output our existing `my-config` ConfigMap in YAML format.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们还没有将 ConfigMap 以 YAML 格式进行定义，但在本章中我们已经多次见过这种格式。由于我无法确定你是否能凭记忆创建一个 ConfigMap
    的 YAML 文件，让我们简化操作，使用 `kubectl` 来输出我们现有的 `my-config` ConfigMap 以 YAML 格式。
- en: '[PRE41]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The output is as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE42]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Just as with any other Kubernetes object, ConfigMap has `apiVersion`, `kind`,
    and `metadata`. The data is where the maps are defined. Each must have a key and
    a value. In this example, there's the key `weather` with the value `sunny`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何其他 Kubernetes 对象一样，ConfigMap 也有 `apiVersion`、`kind` 和 `metadata`。数据部分是定义映射的地方。每个映射必须有一个键和值。在这个例子中，有一个键
    `weather`，值为 `sunny`。
- en: Let's try to translate that knowledge into the objects we'd need to deploy Prometheus.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将这些知识转化为部署 Prometheus 所需的对象。
- en: '[PRE43]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The output, limited to the relevant parts, is as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 输出，限制在相关部分，结果如下：
- en: '[PRE44]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The `Deployment` object defines the `volumeMount` that references the `prom-conf`
    Volume, which is a `configMap`. We saw quite a few similar examples before.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`Deployment` 对象定义了引用 `prom-conf` 卷的 `volumeMount`，该卷是一个 `configMap`。我们之前见过不少类似的例子。'
- en: The `ConfigMap` object's `data` section has only one key (`prometheus.yml`).
    Once this ConfigMap is mounted as a volume, the name of the file will be the same
    as the key (`prometheus.yml`). The value has a bit of "special" syntax. Unlike
    the previous example where the value was a single word written directly after
    the colon, the structure of the value is now a bit more complex. To be more precise,
    it contains multiple lines. When working with a large value, we can start with
    the pipe sign (`|`). Kubernetes will interpret the value as "everything that follows,
    as long as it is indented." You'll notice that all the lines of the value are
    at least two spaces to the right of the beginning of the key (`prometheus.yml`).
    If you'd like to insert an additional key, all you'd need to do is to add it on
    the same level (indentation), as the other `prometheus.yml`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConfigMap` 对象的 `data` 部分只有一个键（`prometheus.yml`）。一旦这个 ConfigMap 被挂载为卷，文件的名称将与键相同（`prometheus.yml`）。该值具有一些“特殊”的语法。与之前例子中值直接跟在冒号后面的单一单词不同，现在值的结构要复杂一些。更准确地说，它包含多行内容。在处理较大值时，我们可以从管道符号（`|`）开始。Kubernetes
    将把值解释为“后续所有内容，只要它有缩进”。你会注意到，值的所有行都至少比键（`prometheus.yml`）的起始位置向右缩进了两个空格。如果你想插入额外的键，只需将其添加在与其他
    `prometheus.yml` 相同的缩进级别即可。'
- en: Let's create the application and confirm that everything works as expected.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建应用并确认一切按预期工作。
- en: '[PRE45]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We created the objects (with the help of `sed` transformations), we waited until
    the Deployment rolled out, and, finally, we opened the Prometheus targets screen
    in a browser. The result should be a green target towards Prometheus internal
    metrics.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了对象（通过 `sed` 转换），等待直到 Deployment 部署完成，最后，我们在浏览器中打开了 Prometheus 目标页面。结果应该是指向
    Prometheus 内部指标的绿色目标。
- en: A plea NOT to use ConfigMaps!
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请不要使用 ConfigMaps！
- en: ConfigMaps, in my experience, are overused.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，ConfigMaps 被过度使用了。
- en: If you have a configuration that is the same across multiple clusters, or if
    you have only one cluster, all you should do is include it in your Dockerfile
    and forget it ever existed. When there are no variations of a config, there's
    no need to have a configuration file. At least, not outside an immutable image.
    Unfortunately, that is not always the case. Heck, it's almost never the case.
    We tend to make things more complicated than they should be. That, among other
    things, often means an endless list configuration options hardly anyone ever uses.
    Still, some things usually do change, from one cluster to another, and we might
    need to look into alternatives to configurations baked into images.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个在多个集群中相同的配置，或者你只有一个集群，那么你所需要做的就是将它包含在你的 Dockerfile 中，然后忘记它的存在。当配置没有变化时，就没有必要使用配置文件。至少，在不可变镜像之外是不需要的。不幸的是，这并不总是这样，实际上，几乎从来都不是这样。我们往往把事情弄得比应该更复杂。除此之外，这通常意味着一个几乎没人用的冗长配置选项列表。不过，一些东西通常会发生变化，从一个集群到另一个集群，我们可能需要考虑替代配置的方式，而不是将其硬编码在镜像中。
- en: Design your new applications to use a combination of configuration files and
    environment variables. Make sure that the default values in a configuration file
    are sensible and applicable in most use-cases. Bake it into the image. When running
    a container, declare only the environment variables that represent the differences
    of a specific cluster. That way, your configuration will be portable and simple
    at the same time.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 设计你的新应用程序时，使用配置文件和环境变量的组合。确保配置文件中的默认值合理，并适用于大多数使用场景。将其打包到镜像中。在运行容器时，只声明代表特定集群差异的环境变量。这样，你的配置将既便于移植，又简洁。
- en: What if your application is not new and it does not support configuration through
    environment variables? Refactor it so that it does. It shouldn't be hard to add
    the ability to read a few environment variables. Keep in mind that you don't need
    all the settings, but only those that differ from one cluster to another. It would
    be hard to imagine that such a trivial request would be complex or time-consuming.
    If it is, you might have more significant issues to fix before even thinking about
    putting your application into a container.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序不是新的，并且不支持通过环境变量进行配置怎么办？那么就重构它，使它支持这种方式。添加读取一些环境变量的能力不应该很难。记住，你不需要所有的设置，只需要那些在不同集群之间有所不同的设置。很难想象这样的请求会复杂或耗时。如果是的话，你可能在考虑将应用程序容器化之前，应该先修复更重要的问题。
- en: Still, configuration files will not disappear. No matter which strategy we choose,
    each image should have a copy of them with sensible default values. Maybe, we
    can put in an extra effort and change the application, so that configuration entries
    are loaded from two locations. That way, we can load the default values from one,
    and only the differences from the other. That would, at least, reduce the need
    to have to specify more than the minimum required for each cluster. In such a
    case, ConfigMap's `--from-literal` and `--from-env-file` sources are an excellent
    choice.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，配置文件不会消失。无论我们选择哪种策略，每个镜像都应该有一份配置文件，并包含合理的默认值。也许，我们可以额外努力一下，修改应用程序，使得配置条目可以从两个位置加载。这样，我们就可以从一个位置加载默认值，只从另一个位置加载差异值。至少，这样可以减少为每个集群指定更多的配置的需求。在这种情况下，ConfigMap
    的 `--from-literal` 和 `--from-env-file` 源是一个很好的选择。
- en: When everything else fails, the `--from-file` source is your friend. Just make
    sure that ConfigMap is not defined in the same file as the objects that mount
    it. If it is, it would mean that they could be used only inside one cluster. Otherwise,
    we'd be deploying the same config, and we should go back to the initial idea of
    having it baked into the image together with the application.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当其他一切都失败时，`--from-file` 源就是你的朋友。只需确保 ConfigMap 不与挂载它的对象定义在同一个文件中。如果它们在同一个文件中，这就意味着它们只能在一个集群内使用。否则，我们就会部署相同的配置，并且我们应该回到最初的想法，将其与应用程序一起打包进镜像。
- en: Do not let this pessimism discourage you from using ConfigMaps. They are very
    handy, and you should adopt them. My intent to discourage you from doing so had
    the intention of making you think of alternatives, not to tell you never to use
    ConfigMaps.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 不要让这种悲观情绪阻止你使用 ConfigMap。它们非常方便，你应该采用它们。我之所以试图让你感到沮丧，是想让你思考替代方案，而不是告诉你永远不要使用
    ConfigMap。
- en: What now?
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么现在该怎么办？
- en: The next chapter will explore something very similar to ConfigMaps. The significant
    difference is that we'll be more secretive this time.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将探讨与 ConfigMap 非常相似的内容。显著的区别在于，这次我们会更加保密。
- en: For now, we'll destroy the cluster we used in this chapter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将销毁本章使用的集群。
- en: '[PRE46]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: If you'd like to know more about ConfigMaps, please explore ConfigMap v1 core
    ([https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#configmap-v1-core](https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#configmap-v1-core))
    API documentation.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 ConfigMap 的信息，请查看 ConfigMap v1 核心的 API 文档（[https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#configmap-v1-core](https://v1-9.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#configmap-v1-core)）。
- en: '![](img/b59369c1-925f-4718-ac20-8ccb2113093f.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b59369c1-925f-4718-ac20-8ccb2113093f.png)'
- en: 'Figure 9-1: The components explored so far'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-1：到目前为止探索的组件
- en: Kubernetes ConfigMaps compared to Docker Swarm configs
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes ConfigMap 与 Docker Swarm 配置的比较
- en: The mechanisms behind Kubernetes ConfigMaps and Docker Swarm Configs are almost
    the same. At least, from the functional perspective. Both allow us to store some
    literal texts in the scheduler's internal data store, and both enable us to add
    them to containers. The syntax is equally simple and straightforward in both cases.
    Still, there are a few differences.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes ConfigMap 和 Docker Swarm 配置的机制几乎相同。至少，从功能角度来看是这样的。两者都允许我们将一些字面文本存储在调度器的内部数据存储中，并且都允许将它们添加到容器中。两者的语法都非常简单直观。不过，还是有一些区别。
- en: Docker is good at preventing people from doing silly things (the politically
    correct version of the word *stupid*). An example would be an attempt to delete
    a configuration. It cannot be deleted if there are Docker services that reference
    the configuration. Only after all the services that reference it are removed,
    are we allowed to remove the configuration source. Kubernetes, on the other hand,
    will let us delete a ConfigMap object without even a hint about the consequences.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 擅长防止人们做傻事（“傻事”这个词的政治正确版本）。一个例子就是尝试删除配置。如果有 Docker 服务引用了该配置，它是不能被删除的。只有在删除了所有引用它的服务后，我们才允许删除配置源。另一方面，Kubernetes
    允许我们删除 ConfigMap 对象，而不会提示任何后果。
- en: Kubernetes ConfigMap, on the other hand, provides a wider variety of options.
    While a Docker Swarm configuration can be created only from a file or `stdin`,
    the Kubernetes equivalent can be generated from a file, from a directory, from
    a literal value, and from files with environment variables. Each of those sources
    can be used multiple times. We can even combine them. Further on, Kubernetes ConfigMaps
    can be converted not only to files, but also to environment variables. Flexibility
    and extra functionalities are available both at the source and the destination
    end-points.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Kubernetes ConfigMap 提供了更多的选项。虽然 Docker Swarm 配置只能通过文件或 `stdin` 创建，但 Kubernetes
    的等效配置可以通过文件、目录、字面值以及带有环境变量的文件生成。每个来源都可以多次使用。我们甚至可以将它们结合起来。此外，Kubernetes ConfigMap
    不仅可以转换为文件，还可以转换为环境变量。灵活性和额外的功能在源端和目标端都可以使用。
- en: Docker Swarm wins a user experience point. Kubernetes gains a star for providing
    more choices. Neither has a significant difference that would warrant a win, so
    I'm proclaiming it a *tie*.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm 赢得了用户体验分。Kubernetes 则因为提供更多选择而获得了一颗星。两者之间没有显著差异足以决定胜负，所以我宣布它们是
    *平局*。
- en: There are many more features worthwhile comparing. We're not yet finished. Stay
    tuned for more.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他值得比较的功能。我们还没有完成。敬请期待更多内容。
