- en: Chapter 1. Installing Docker with Puppet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：使用 Puppet 安装 Docker
- en: 'In this chapter, we will be setting up our development environment so that
    we can develop our first container application. To do this, we will use Vagrant.
    In our first topic, we will look at how to install Vagrant. We will look at how
    a Vagrantfile is constructed using Puppet as the provisioner. We will also look
    at how to get Puppet modules from the Puppet Forge using a puppetfile and r10k.
    In the last topic, we will install Docker on a Centos 7 box with Puppet. The following
    are the topics that we will cover in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设置我们的开发环境，以便开发第一个容器应用程序。为此，我们将使用 Vagrant。在第一个话题中，我们将介绍如何安装 Vagrant。我们将了解如何使用
    Puppet 作为提供者构建 Vagrantfile。我们还将探讨如何通过 puppetfile 和 r10k 从 Puppet Forge 获取 Puppet
    模块。在最后一个话题中，我们将使用 Puppet 在 Centos 7 环境中安装 Docker。本章我们将涵盖以下主题：
- en: Installing Vagrant
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Vagrant
- en: An introduction to Puppet Forge
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet Forge 介绍
- en: Installing Docker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: Installing Vagrant
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Vagrant
- en: You may ask, why are we using Vagrant for our development environment?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么我们要使用 Vagrant 作为开发环境？
- en: Vagrant is a must-have for Puppet development. The idea that you can spin up
    environments for development locally in minutes was a revolution in Vagrant's
    early releases. The product has now grown in leaps and bounds, with multiple provisioners
    such as Chef and Salt. Paired with multiple virtualization backends such as VirtualBox,
    VMware Workstation/Fusion, KVM, and we are going to use VirtualBox and Puppet
    as your provisioner.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 是 Puppet 开发的必备工具。能够在几分钟内为本地开发创建环境，这一想法是 Vagrant 初期版本的革命性特点。如今，Vagrant
    已经发展迅速，支持多个提供者，如 Chef 和 Salt。并且支持多种虚拟化后端，如 VirtualBox、VMware Workstation/Fusion、KVM，我们将使用
    VirtualBox 和 Puppet 作为提供者。
- en: The installation
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: Let's install Vagrant. Firstly, we will need our virtualization backend, so
    let's download and install VirtualBox. At the time of writing, we use VirtualBox
    5.0.10 r104061\. If that's outdated by the time you read this book, just grab
    the latest version.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装 Vagrant。首先，我们需要我们的虚拟化后端，所以我们先下载并安装 VirtualBox。在撰写本书时，我们使用的是 VirtualBox
    5.0.10 r104061。如果你在阅读本书时发现版本已经过时，只需下载最新版本即可。
- en: 'You can download VirtualBox from [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
    Choose the version for your OS, as shown in the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)下载
    VirtualBox。选择适合你操作系统的版本，如下图所示：
- en: '![The installation](img/B05201_01_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![安装过程](img/B05201_01_01.jpg)'
- en: Once the package is downloaded, follow the given installation process for your
    OS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完安装包后，按照适合你操作系统的安装过程进行操作。
- en: VirtualBox
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: VirtualBox
- en: 'Follow these steps to install Vagrant on Mac OSX:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 Mac OSX 上安装 Vagrant：
- en: Go to your `Downloads` folder and double-click on `VirtualBox.xxx.xxx.dmg`.
    The following installation box will pop up:![VirtualBox](img/B05201_01_02.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的 `Downloads` 文件夹，双击 `VirtualBox.xxx.xxx.dmg`。接下来会弹出以下安装框：![VirtualBox](img/B05201_01_02.jpg)
- en: Then, click on `VirtualBox.pkg`. Move on to the next step, as shown in the following
    screenshot:![VirtualBox](img/B05201_01_03.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 `VirtualBox.pkg`。继续进入下一步，如下图所示：![VirtualBox](img/B05201_01_03.jpg)
- en: The installer will then check whether the software is compatible with the Mac
    OSX version.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装程序将检查该软件是否与 Mac OSX 版本兼容。
- en: After this, click on **Continue**. Once the check is successful, we can move
    on to the next step:![VirtualBox](img/B05201_01_04.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **继续**。检查通过后，我们可以进入下一步：![VirtualBox](img/B05201_01_04.jpg)
- en: We then choose the default location for the installation and click on **Install**.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择默认的安装位置并点击 **安装**。
- en: Then, enter your admin password and click on **Install Software**:![VirtualBox](img/B05201_01_05.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，输入你的管理员密码并点击 **安装软件**：![VirtualBox](img/B05201_01_05.jpg)
- en: 'The installation is now complete. The following screenshot shows what the screen
    looks like after completing the installation:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 安装现在已经完成。下图显示了完成安装后的屏幕界面：
- en: '![VirtualBox](img/B05201_01_06.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![VirtualBox](img/B05201_01_06.jpg)'
- en: 'Now that we have the virtualization backend, we can install Vagrant:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了虚拟化后端，可以安装 Vagrant 了：
- en: '![VirtualBox](img/B05201_01_07.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![VirtualBox](img/B05201_01_07.jpg)'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing this book, we are going to use Vagrant 1.7.4; if that
    is no longer the latest version, please grab the latest one. You can find this
    version of Vagrant at [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html).
    Again, download the installation package for your OS.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，我们将使用 Vagrant 1.7.4；如果该版本不再是最新版本，请下载最新版本。您可以在 [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)
    找到该版本的 Vagrant。再次提醒，请下载适用于您操作系统的安装包。
- en: Vagrant
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vagrant
- en: 'Here, we are just going to complete a standard installation. Follow these steps
    to do so:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将进行一个标准安装。请按照以下步骤进行操作：
- en: Go to the folder in which you downloaded `vagrant.1.7.4.dmg` and double-click
    on the installer. You will then get the following pop up:![Vagrant](img/B05201_01_08.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到您下载 `vagrant.1.7.4.dmg` 的文件夹，双击安装程序。然后，您将看到以下弹窗：![Vagrant](img/B05201_01_08.jpg)
- en: Double-click on `vagrant.pkg`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `vagrant.pkg`。
- en: Then, in the next dialogue box, click on **Continue**:![Vagrant](img/B05201_01_09.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在下一个对话框中，点击 **继续**：![Vagrant](img/B05201_01_09.jpg)
- en: Then, click on the **Install** button:![Vagrant](img/B05201_01_12.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **安装** 按钮：![Vagrant](img/B05201_01_12.jpg)
- en: Enter your admin password in the given field:![Vagrant](img/B05201_01_10.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在给定的字段中输入您的管理员密码：![Vagrant](img/B05201_01_10.jpg)
- en: Once the installation is complete, open your terminal application. In the command
    prompt, type `vagrant`. After this, you should see the following screenshot:![Vagrant](img/B05201_01_11.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，打开您的终端应用程序。在命令提示符中输入 `vagrant`。然后，您应该会看到以下截图：![Vagrant](img/B05201_01_11.jpg)
- en: Vagrantfile
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vagrantfile
- en: 'Now that we have a fully working Vagrant environment, we can start with and
    look at how Vagrant works and how we are going to provision our machines. As this
    book is not about Vagrant, we won''t be writing a Vagrantfile from scratch. Instead,
    I have created a Vagrantfile that we will be using throughout the book:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个完全工作的 Vagrant 环境，我们可以开始查看 Vagrant 是如何工作的，以及我们如何为我们的机器进行配置。由于本书并不是关于
    Vagrant 的，所以我们不会从头编写一个 Vagrantfile。相反，我已经创建了一个我们将在全书中使用的 Vagrantfile：
- en: '![Vagrantfile](img/B05201_01_13.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Vagrantfile](img/B05201_01_13.jpg)'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can download or Git pull the repo from [https://github.com/scotty-c/vagrant-template](https://github.com/scotty-c/vagrant-template).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [https://github.com/scotty-c/vagrant-template](https://github.com/scotty-c/vagrant-template)
    下载或 Git 拉取该仓库。
- en: 'Let''s look at the Vagrantfile construct:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 Vagrantfile 的构建：
- en: '![Vagrantfile](img/B05201_01_14.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Vagrantfile](img/B05201_01_14.jpg)'
- en: 'As you can see from the preceding screenshot, the Vagrantfile is actually a
    Ruby file. As it is Ruby, it opens up a world of opportunities for us to make
    our code elegant and efficient. So, in this Vagrantfile, we have extracted all
    the low-level configurations and replaced them with a few parameters. Why are
    we doing this? The reason is to split up our logic from our configuration and
    also iterate our configuration in order to stop replication of our code. So, where
    is all the configuration stored? The answer is in the `servers.yaml` file. This
    is where we set the vagrant box that we want to deploy, the number of CPUs for
    the box, the internal network''s IP, the hostname, the forwarded ports between
    the guest and host, and the RAM and shell provider for bash commands that we need
    to get the environment ready for Puppet to run, for example, downloading modules
    and their dependencies from the Puppet Forge:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，Vagrantfile 实际上是一个 Ruby 文件。由于它是 Ruby 文件，我们可以利用 Ruby 来使我们的代码优雅且高效。因此，在这个
    Vagrantfile 中，我们提取了所有底层配置，并用几个参数替代它们。为什么我们要这么做？原因是将逻辑与配置分离，并且通过迭代配置来避免代码重复。那么，所有的配置都存储在哪里呢？答案是
    `servers.yaml` 文件。在这个文件中，我们设置了我们想要部署的 Vagrant box、box 的 CPU 数量、内部网络的 IP、主机名、来宾与主机之间的转发端口、内存以及我们需要用来准备环境供
    Puppet 运行的 bash 命令的 shell 提供者，例如，从 Puppet Forge 下载模块及其依赖项：
- en: '![Vagrantfile](img/B05201_01_15.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Vagrantfile](img/B05201_01_15.jpg)'
- en: The benefit of this approach is also that any developer using a Vagrantfile
    does not need to actually modify the logic in the Vagrantfile. They only need
    to update the configuration in `servers.yaml`. As we go through the book, we will
    work with the other files in the repository, such as `Puppetfile`, `hieradata`,
    and `manifests`. Now that we have set up our Vagrant environment, let's look at
    how to get our Puppet modules from the Puppet Forge.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的好处还在于，任何使用Vagrantfile的开发者都不需要实际修改Vagrantfile中的逻辑。他们只需要更新`servers.yaml`中的配置。随着我们继续本书的内容，我们将一起工作仓库中的其他文件，比如`Puppetfile`、`hieradata`和`manifests`。现在我们已经设置好了Vagrant环境，接下来让我们看看如何从Puppet
    Forge获取我们的Puppet模块。
- en: Welcome to the Puppet Forge
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢迎来到Puppet Forge
- en: In this topic, we will look at how to find modules from the Puppet Forge. Then,
    we will see how to pull them with their dependencies using a puppetfile and r10k.
    This will set us up for our last topic, *Installing Docker with Puppet*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本主题中，我们将学习如何从Puppet Forge查找模块。接着，我们将看到如何通过puppetfile和r10k拉取这些模块及其依赖项。这为我们最后一个主题——*使用Puppet安装Docker*奠定基础。
- en: The Puppet Forge
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet Forge
- en: One of the great things about puppetlabs and their products is the community.
    If you ever get a chance to attend PuppetConf or a Puppet Camp, depending on where
    you live, I would really recommend you to attend it. There will be a wealth of
    knowledge there and you will meet some really great people.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Puppetlabs及其产品的一大亮点是其社区。如果你有机会参加PuppetConf或Puppet Camp，无论你住在哪个地方，我都强烈推荐你参加。那里会有丰富的知识，你还能结识到一些非常棒的人。
- en: The Puppet Forge is a website that puppetlabs runs. It is a place where other
    Puppet developers publish modules that are ready to use. You might be asking,
    what about GitHub? Can't you get modules from there? Yes, you can. The difference
    between the Puppet Forge and GitHub is that the Puppet Forge is the stable, releasable
    version of the module, whereas GitHub is the place to contribute to the module,
    that is, a place to create pull requests.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet Forge是由puppetlabs运行的一个网站。它是其他Puppet开发者发布已准备好使用的模块的地方。你可能会问，GitHub呢？难道不能从那里获取模块吗？当然可以。从Puppet
    Forge和GitHub的区别在于，Puppet Forge是模块的稳定版本，而GitHub是贡献模块的地方，也就是说，是用来创建pull request的地方。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the Puppet Forge at [https://forge.puppetlabs.com/](https://forge.puppetlabs.com/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[Puppet Forge](https://forge.puppetlabs.com/)找到Puppet Forge。
- en: 'The following screenshot shows the home page of Puppet Forge:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Puppet Forge的首页：
- en: '![The Puppet Forge](img/B05201_01_16.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![The Puppet Forge](img/B05201_01_16.jpg)'
- en: Now that we have been introduced to the Puppet Forge, let's use it to find our
    Docker module that we will be using to build our environment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Puppet Forge，接下来让我们利用它来查找我们将用来构建环境的Docker模块。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are going to use the garethr/docker Docker module, which you can find at
    [https://forge.puppetlabs.com/garethr/docker](https://forge.puppetlabs.com/garethr/docker).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用garethr/docker Docker模块，你可以在[Puppet Forge](https://forge.puppetlabs.com/garethr/docker)上找到它。
- en: 'Now that we have selected our module, we can move on to setting up our puppetfile:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经选择了模块，可以继续设置我们的puppetfile：
- en: '![The Puppet Forge](img/B05201_01_17.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![The Puppet Forge](img/B05201_01_17.jpg)'
- en: Creating our puppetfile
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的puppetfile
- en: In the previous topic, we cloned our Vagrant template using Git. In that repo,
    there is also a puppetfile. A puppetfile is used as a control file for our modules.
    It will list all the modules that we need (in this instance, just to install Docker).
    r10k will then reference the puppetfile and pull the modules from the Puppet Forge
    into our environment's directory.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个主题中，我们使用Git克隆了Vagrant模板。在那个仓库中，也有一个puppetfile。puppetfile作为我们模块的控制文件，它会列出所有我们需要的模块（在这个例子中，就是安装Docker）。r10k随后会引用puppetfile，将模块从Puppet
    Forge拉取到我们环境的目录中。
- en: 'As modules have dependencies, we need to make sure that we capture them in
    our puppetfile. For the Docker module, we have three dependencies: **puppetlabs/stdlib
    (>= 4.1.0)**, **puppetlabs/apt (>= 1.8.0 <= 3.0.0)**, and **stahnma/epel (>= 0.0.6)**,
    as shown in the following screenshot.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模块之间有依赖关系，我们需要确保在puppetfile中捕捉到它们。对于Docker模块，我们有三个依赖项：**puppetlabs/stdlib
    (>= 4.1.0)**、**puppetlabs/apt (>= 1.8.0 <= 3.0.0)** 和 **stahnma/epel (>= 0.0.6)**，如下面的截图所示。
- en: Now, we know all the modules that we need to build a Docker environment. We
    just need to add them to our puppetfile.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道了构建Docker环境所需的所有模块。我们只需要将它们添加到我们的puppetfile中。
- en: 'The following screenshot is an example of what the puppetfile should look like:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是puppetfile应该是什么样子的示例：
- en: '![Creating our puppetfile](img/B05201_01_18.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的 puppetfile](img/B05201_01_18.jpg)'
- en: 'Now, when we run `vagrant up`, r10k will pull the modules from the Puppet Forge.
    We invoke r10k on line 13 of `servers.yaml` with the `r10k puppetfile install—verbose`
    command. The following screenshot shows the output of this command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行 `vagrant up` 时，r10k 将从 Puppet Forge 拉取模块。我们在 `servers.yaml` 的第 13 行调用
    r10k，使用 `r10k puppetfile install—verbose` 命令。以下截图显示了该命令的输出：
- en: '![Creating our puppetfile](img/B05201_01_19.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的 puppetfile](img/B05201_01_19.jpg)'
- en: 'If we are successful, the terminal will provide the following output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，终端将显示以下输出：
- en: '![Creating our puppetfile](img/B05201_01_20.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的 puppetfile](img/B05201_01_20.jpg)'
- en: Now that we have our puppetfile set up, we can install Docker.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好 puppetfile，就可以安装 Docker 了。
- en: Installing Docker
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: In this topic, we will put together all the configuration from our Vagrant repo
    and knowledge of the Puppet Forge to create the Docker environment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将结合 Vagrant 仓库中的所有配置和对 Puppet Forge 的了解，创建 Docker 环境。
- en: Setting our manifests
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置我们的清单
- en: The first thing that we need to do to install Docker is set our manifest to
    include the Docker class on our node. To do this, let's go to our Vagrant repo.
    In the repo, there is a file in the `manifests` directory called `default.pp`.
    We need to edit the file to include the Docker class `node 'node-01' { include
    docker}`. We can now save the file, and we are ready to run our environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Docker 的第一步是将我们的清单设置为在节点上包含 Docker 类。为此，让我们进入我们的 Vagrant 仓库。在该仓库中，`manifests`
    目录下有一个名为 `default.pp` 的文件。我们需要编辑该文件，以包含 Docker 类 `node 'node-01' { include docker}`。现在我们可以保存该文件，并准备好运行我们的环境。
- en: 'The first step is to open our terminal and change to root of the Vagrant repo.
    Then, we need to enter the `vagrant up` command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是打开终端并切换到 Vagrant 仓库的根目录。然后，我们需要输入 `vagrant up` 命令：
- en: '![Setting our manifests](img/B05201_01_21.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![设置我们的清单](img/B05201_01_21.jpg)'
- en: 'This will now provide us with our CentOS 7 box. Install r10k and then run Puppet
    and apply the Docker class. This will take about 4 minutes depending on your laptop
    and network connection. If the box was provisioned successfully, you will see
    the following output:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将得到 CentOS 7 环境。安装 r10k 后，运行 Puppet 并应用 Docker 类。根据你的笔记本和网络连接，这个过程大约需要
    4 分钟。如果环境成功配置，你将看到以下输出：
- en: '![Setting our manifests](img/B05201_01_22.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![设置我们的清单](img/B05201_01_22.jpg)'
- en: We can also verify that the Docker installation was successful by logging in
    to the box via SSH. We will do that with the `vagrant ssh` command. Once we are
    in, we will sudo up to root (`sudo -i`). Now, let's just check whether Docker
    is installed with the `docker` command.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过 SSH 登录到环境中来验证 Docker 是否安装成功。我们可以使用 `vagrant ssh` 命令进行登录。登录后，我们将使用 `sudo
    -i` 提升为 root 用户。现在，让我们通过 `docker` 命令检查 Docker 是否已经安装。
- en: 'You will see the following output on the terminal:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在终端看到以下输出：
- en: '![Setting our manifests](img/B05201_01_23.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![设置我们的清单](img/B05201_01_23.jpg)'
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered how to create a development environment with Docker
    using Puppet. We looked at how to install Vagrant and VirtualBox. Then, we looked
    at the Puppet Forge, how to search for modules and their dependencies. We then
    took the dependencies and mapped them to a puppetfile. We briefly touched on r10k,
    which is our transport mechanism from the Puppet Forge to our environment. Then,
    we built our environment with Puppet.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讲解了如何使用 Puppet 创建 Docker 开发环境。我们首先安装了 Vagrant 和 VirtualBox，然后介绍了 Puppet
    Forge，讲解了如何搜索模块及其依赖项。接着，我们将依赖项映射到 puppetfile 中。我们简要介绍了 r10k，这是从 Puppet Forge 到我们环境的传输机制。最后，我们使用
    Puppet 构建了我们的环境。
- en: In the next chapter, we'll take a look at how to access Docker Hub and pull
    public images.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何访问 Docker Hub 并拉取公共镜像。
