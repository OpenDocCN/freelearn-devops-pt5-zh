- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git Basics in Practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for intermediate and advanced Git users to help them on
    their road to mastering Git. Therefore, the chapters following this one will assume
    you know the basics of Git, and have advanced past the beginner stage.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will serve as a reminder of version control basics with Git. The
    focus will be on providing practical aspects of the technology, showing and explaining
    basic version control operations on the example of the development of an example
    project, and the collaboration between two developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief introduction to version control and Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Git environment and Git repository (**init** and **clone**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding files, checking status, creating commits, and examining the history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with other Git repositories (**pull** and **push**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and listing branches, switching to a branch, and merging changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving a simple merge conflict
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and publishing a tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the examples shown in this chapter, you will need Git: [https://git-scm.com/](https://git-scm.com/).
    You will also need an interactive shell (for example, Git Bash if you are using
    MS Windows), a text editor or an IDE for web development (for editing JavaScript
    and HTML), and a web browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the code of an example project used in this chapter at the following
    URLs: [https://github.com/PacktPublishing/Mastering-Git---Second-Edition/tree/main/chapter01](https://github.com/PacktPublishing/Mastering-Git---Second-Edition/tree/main/chapter01)
    and [https://github.com/jnareb/Mastering-Git---Second-Edition---chapter01-sample_project](https://github.com/jnareb/Mastering-Git---Second-Edition---chapter01-sample_project).'
  prefs: []
  type: TYPE_NORMAL
- en: A brief introduction to version control and Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **version control system** (sometimes called **revision control**) is a tool
    that lets you track the history and attribution of your project files over time
    (stored in a **repository**) and helps the developers in the team to work together.
    Modern version control systems give each developer their own sandbox, preventing
    their work in progress from conflicting, and all the while providing a mechanism
    to merge changes and synchronize work. They also allow us to switch between different
    lines of development, called **branches**; this mechanism allows the developer
    to change, for example, from working on introducing a new feature step by step
    to fixing the bug in an older, released version of the project.
  prefs: []
  type: TYPE_NORMAL
- en: '**Distributed version control systems** (such as Git) give each developer their
    own copy of the project’s history, which is called a **clone** of a repository.
    This is what makes Git fast, because nearly all operations are performed locally.
    It is also what makes Git flexible because you can set up repositories in many
    ways. Repositories meant for development also provide a separate **working area**
    (or a **worktree**) with project files for each developer. Git’s branching model
    enables cheap local branching, allowing the use of branches for context switching
    by creating sandboxes for different tasks. It also makes it possible to use a
    very flexible *topic branch* workflow for collaboration.'
  prefs: []
  type: TYPE_NORMAL
- en: The fact that the whole history is accessible allows for a *long-term undo*,
    rewinding to the last working version, and so on. Tracking ownership of changes
    automatically makes it possible to find out who was responsible for any given
    area of code, and when each change was done. You can compare different revisions,
    go back to the revision a user is sending a bug report against, and even automatically
    find out which revision introduced a regression bug (with `git bisect`). Tracking
    changes to the tips of branches with **reflog** allows for easy undo and recovery.
  prefs: []
  type: TYPE_NORMAL
- en: A unique feature of Git is that it enables explicit access to the **staging
    area** for creating **commits** (new revisions—that is, new versions of a project).
    This brings additional flexibility to managing your working area and deciding
    on the shape of a future commit.
  prefs: []
  type: TYPE_NORMAL
- en: All this flexibility and power come at a cost. It is not easy to master using
    Git, even though it is quite easy to learn its basic use. This book will help
    you attain this expertise, but let us start with a reminder about the basics of
    Git.
  prefs: []
  type: TYPE_NORMAL
- en: Git by example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s follow a step-by-step, section-by-section, simple example of two developers
    using Git to work together on a simple project. You can find all three repositories
    (for two developers, and the bare server repository) with the example code files
    for this chapter, where you can examine the code, history, and reflog, at [https://github.com/PacktPublishing/Mastering-Git---Second-Edition](https://github.com/PacktPublishing/Mastering-Git---Second-Edition),
    in a `sample_project.zip` archive.
  prefs: []
  type: TYPE_NORMAL
- en: Following the example
  prefs: []
  type: TYPE_NORMAL
- en: To follow this example of the team development process on a single computer,
    you can simply create three folders called, for example, **alice/**, **bob/**,
    and **server/**, and switch to the appropriate folder when following work done
    by Alice, Bob, and Carol, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few simple changes you need to make for this simulation to work.
    When creating a repository as Carol, you don’t need to create and switch to the
    **/srv/git** directory, so you can simply skip these commands. In Alice or Bob’s
    role, you need to create separate identities in the repository’s *local* configuration,
    either with the **git config** command without the **--user** option or by editing
    the **.git/config** file in the appropriate repository. In place of the **https://git.company.com/random**
    repository URL, which does not exist, simply use the path to the server repository:
    **../server/random.git**.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, if you plan on moving the directory with **alice/**, **bob/**,
    and **server/** subdirectories, you will need to edit the “origin” repository
    URL that is stored in repository config files by changing it from the absolute
    path to a relative path—namely, **../../server/random.git**.
  prefs: []
  type: TYPE_NORMAL
- en: Setup and initialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A company has begun work on a new product. This product calculates a random
    number—an integer value of a specified range.
  prefs: []
  type: TYPE_NORMAL
- en: The company has assigned two developers to work on this new project, Alice and
    Bob. Both developers are telecommuting to the company’s corporate headquarters.
    After a bit of discussion, they have decided to implement their product as a simple
    web application in JavaScript and HTML and to use Git 2.41.0 ([git-scm.com](http://git-scm.com))
    for version control.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This project and the code are intended for demonstration purposes only and will
    be much simplified. The details of code are not important here—what is important
    is how the code changes, and how Git is used to help with the development.
  prefs: []
  type: TYPE_NORMAL
- en: Repository setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With a small team, they have decided on the setup shown in the following diagram.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: This is only one possible setup, with the **central canonical repository**,
    and without a dedicated maintainer responsible for this repository (all developers
    are equal in this setup). It is not the only possibility; other ways of configuring
    repositories will be shown in [*Chapter 6*](B21194_06.xhtml#_idTextAnchor140),
    *Collaborative Development* *with Git*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Repository setup for the sample project (using a centralized
    workflow)](img/B21194_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Repository setup for the sample project (using a centralized workflow)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Git repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Alice gets the project started by asking Carol, an administrator, to create
    a new repository specifically for collaborating on a project, to share work with
    the whole team:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Command-line examples follow the Unix convention of having **user@host:directory**
    at the beginning of the command prompt, to make it easier to guess from first
    glance who performs a command, on what computer, and in which directory (here,
    the tilde, **~**, denotes the user’s home directory). This is the usual command
    prompt setup on Linux; a similar-looking prompt is used by Git Bash.
  prefs: []
  type: TYPE_NORMAL
- en: You can configure your command prompt to show Git-specific information, such
    as the name of the repository, the subdirectory within the repository, the current
    branch, and even the worktree status (see [*Chapter 13*](B21194_13_split_000.xhtml#_idTextAnchor320),
    *Customizing and* *Extending Git*).
  prefs: []
  type: TYPE_NORMAL
- en: I consider the details of server configuration to be too much for this chapter.
    Just imagine that it happened, and nothing went wrong, or look at [*Chapter 14*](B21194_14.xhtml#_idTextAnchor349),
    *Git Administration*.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use a tool to manage Git repositories (for example, `gitolite`);
    creating a public repository on a server would then, of course, look different.
    Often, though, it involves creating a Git repository with `git init` (without
    `--bare`) in your own home directory and then pushing it with an explicit URI
    to the server, which would then automatically create the public repository.
  prefs: []
  type: TYPE_NORMAL
- en: Or perhaps the repository was created through the web interface of tools such
    as GitHub, Bitbucket, or GitLab (either hosted in the cloud, or installed on-premises).
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the repository and creating the first commit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bob gets the information that the project repository is ready, and he can start
    coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this is Bob’s first time using Git, he first sets up his `~/.gitconfig`
    file with information that will be used to identify his commits (for example,
    with `git config --``global --edit`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, he needs to get his own repository instance (which currently is empty):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'All examples in this chapter use the command-line interface. Those commands
    might be given using a Git GUI or IDE integration, as explained in the *Graphical
    interfaces* section in [*Chapter 13*](B21194_13_split_000.xhtml#_idTextAnchor320),
    *Customizing and Extending Git*. The book *Git: Version Control for Everyone*,
    published by Packt Publishing, shows GUI equivalents for the command line.'
  prefs: []
  type: TYPE_NORMAL
- en: Bob notices that Git said that it is an empty repository with no source code
    yet, and starts coding. He opens his text editor (or IDE of choice) and creates
    the starting point for their product.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, he creates an HTML file (`index.html`) with the simplest possible interface
    for the web application being created, just a button and an input field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, Bob writes JavaScript source code (`random.js`) that is responsible for
    web application behavior—in this case, generating and displaying a random integer
    number within a given range from 1 to a configurable maximum, inclusive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Typically, for most initial implementations, this version is missing a lot of
    features but it is a good place to begin. Before committing his code, Bob wants
    to make sure that it looks all right and that it works correctly. He opens the
    `index.html` file in a web browser or uses a live preview feature of his IDE,
    as shown in *Figure 1**.2*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Preview of the first version of the example application](img/B21194_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Preview of the first version of the example application
  prefs: []
  type: TYPE_NORMAL
- en: 'Alright! It’s time to *add* both files to the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Bob uses the `status` operation to make sure that the pending changeset (the
    future commit) looks proper.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use a short form of `git status` here to reduce the amount of space taken
    by examples; you can find an example of a full `status` output further in the
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it’s time to *commit* to the current version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Normally, you would create a **commit message** not by using the **-m <message>**
    command-line option but by letting Git open an editor. We use this form here to
    make the examples more compact. In actual practice, it is recommended to provide
    a more detailed description of changes.
  prefs: []
  type: TYPE_NORMAL
- en: The **-a**/**--all** option in the **git commit -a** command means to take *all*
    changes to the tracked files. This is not the only possible way of creating revisions;
    you can separate manipulating the staging area from creating a commit—this is,
    however, a separate issue, left for [*Chapter 3*](B21194_03_split_000.xhtml#_idTextAnchor049),
    *Managing* *Your* *Worktrees*.
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s time to make those changes visible to Alice.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborative development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main goals of a version control system is to help developers work
    together on a common project. With a distributed version control system, such
    as Git, this involves an explicit step of publishing changes to be visible to
    others.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After finishing working on the initial version of the project, Bob decides
    that it is ready to be published (to be made available for other developers).
    He *pushes* the changes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Note that, depending on the speed of the network, Git could show progress information
    during remote operations such as **clone**, **push**, and **fetch**. Such information
    is omitted from examples in this book, except where that information is actually
    discussed while examining the history and viewing changes.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you use an older Git version, it could require setting a **push.default**
    configuration variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since it is Alice’s first time using Git on her desktop machine, she first
    tells Git how her commits should be identified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, Alice needs to set up her own repository instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Alice examines the working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The **.git** directory contains Alice’s whole copy (clone) of the repository
    in Git internal format and some repository-specific administrative information.
    See the **gitrepository-layout(5)** man page for details of the file layout, which
    can be done, for example, with the **git help** **repository-layout** command.
  prefs: []
  type: TYPE_NORMAL
- en: 'She wants to check the log to see the details (to examine the project history):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Naming revisions
  prefs: []
  type: TYPE_NORMAL
- en: At the lowest level, a Git version identifier is a SHA-1 hash, for example,
    **2b953b4e80**. Git supports various forms of referring to revisions, including
    unambiguously shortened SHA-1 (with a minimum of four characters)—see [*Chapter
    4*](B21194_04.xhtml#_idTextAnchor083), *Exploring Project History*, for more ways.
  prefs: []
  type: TYPE_NORMAL
- en: When Alice decides to take a look at the application, she decides that using
    `alert()` to show the result is not a good user interface. To generate a new random
    number, the user needs to first close the window. It would be better if it was
    possible to generate a new result immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'She decides that a better solution would be to put the result on the page,
    below the form. She adds a single line to `index.html` to make a place for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'She then replaces the use of `alert()` in the JavaScript code by showing the
    result directly on the application page, using just the added `<div` `id="result"></div>`
    placeholder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'She then opens her web browser to check that it works correctly. She clicks
    the **Generate number** button a few times to check that it really generates random
    numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Application after Alice’s changes, with the result on the page
    itself](img/B21194_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Application after Alice’s changes, with the result on the page
    itself
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything looks alright, so she uses the `status` operation to see the pending
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'No surprise here. Git knows that `index.html` and `random.js` have been modified.
    She wants to double-check by reviewing the actual changes with the `diff` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it’s time to commit the changes and push them to the public repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Renaming and moving files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While this is happening, Bob moves on to his next task, which is to restructure
    the tree a bit. He doesn’t want the top level of the repository to get too cluttered,
    so he decides to follow one of the established conventions for the directory structure,
    and to move all the JavaScript source code files into the `scripts/` subdirectory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'He then checks that everything works correctly, and it turns out that he needs
    to update the path to the JavaScript code in the `index.html` file, so he does
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'He checks that everything works fine now, examines the status, and commits
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'While he’s at it, to minimize the impact of reorganization on the `diff` output,
    he configures Git to always use `rename` and copy detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Bob then decides the time has come to add a `README.md` file for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Bob decides to rename `random.js` to `gen_random.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This, of course, also requires changes to `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: He then commits those changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Updating your repository (with merge)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Reorganization done, now Bob tries to publish those changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: But Alice was working at the same time, and she had her change ready to commit
    and push first. Git is not allowing Bob to publish his changes because Alice has
    already pushed something to the `master` branch, and Git is preserving her changes.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Hints and pieces of advice in Git command output will be skipped from here on
    for the sake of brevity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bob uses `pull` to bring in changes (as described in `hint` in the command
    output):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `git pull` command fetched the changes, automatically merged them with Bob’s
    changes, and created a merge commit—opening editor to confirm committing the merge.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: From version 2.31 onward, Git asks the user to set the **pull.rebase** configuration
    variable; we assume that Alice and Bob set it to **false**. See [*Chapter 9*](B21194_09.xhtml#_idTextAnchor229),
    *Merging Changes Together*, the *Methods of combining changes* section, for a
    more detailed description of the difference between using merge commits and using
    rebasing to combine changes.
  prefs: []
  type: TYPE_NORMAL
- en: Everything now seems to be good. The merge commit is done. Apparently, Git was
    able to merge Alice’s changes directly into Bob’s moved and renamed copy of a
    file without any problems. Marvelous!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Bob checks that it works correctly (because automatically merging does not
    necessarily mean that the merge output is correct). It works fine and he is ready
    to push the merge:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Creating a tag – a symbolic name for the revision
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Alice and Bob decide that the project is ready for wider distribution. Bob
    creates a **tag** so they can more easily access and refer to the released version.
    He uses an **annotated tag** for this; an often-used alternative is to use a **signed
    tag**, where the annotation contains a PGP signature (which can later be verified):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, the `v0.1` tag wouldn’t help if it was only in Bob’s local repository.
    He, therefore, pushes the just-created tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Alice updates her repository to get the `v0.1` tag, and to start with up-to-date
    work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Resolving a merge conflict
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Alice decides that it would be a good idea to add a piece of information about
    where the result of the random number generator would appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Grand! Let’s see that it works correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – After adding information about where the result would appear](img/B21194_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – After adding information about where the result would appear
  prefs: []
  type: TYPE_NORMAL
- en: 'Good. Time to commit the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: No problems here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Meanwhile, Bob notices that if one has JavaScript disabled in the web browser
    or uses a text browser without support for JavaScript, the web application as
    it is now does not work , without explaining why. It would be a good idea to notify
    the user about this issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'He decides to add a `<noscript>` tag to explain that JavaScript is required
    for the application to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Bob uses the w3m text-based web browser to check that `<noscript>` works as
    intended:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.5 – Testing the application in w3m, a \uFEFFtext-based web browser\
    \ without JavaScript support](img/B21194_01_05.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Testing the application in w3m, a text-based web browser without
    JavaScript support
  prefs: []
  type: TYPE_NORMAL
- en: 'He then checks in a graphical web browser (or a live preview) that nothing
    changed for JavaScript-capable clients. He has his change ready to commit and
    push first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'So, when Alice is ready to push her changes, Git rejects them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Ah. Bob must have pushed a new changeset already. Alice once again needs to
    pull and merge to combine Bob’s changes with her own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The merge didn’t go quite as smoothly this time. Git wasn’t able to automatically
    merge Alice’s and Bob’s changes. Apparently, there was a conflict. Alice decides
    to open the `index.html` file in her editor to examine the situation (she could
    have used a graphical merge tool via `git` `mergetool` instead):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Git has included both Bob’s code (between the `<<<<<<<< HEAD` and `========`
    conflict markers) and Alice’s code (between `========` and `>>>>>>>>`). What we
    want as a final result is to include both blocks of code. Git couldn’t merge it
    automatically because those blocks were not separated. Alice work adding `Result:`
    can be simply included right before `<noscript>` added by Bob. After resolving
    the conflict, the changes look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'That should take care of the problem. Alice refreshes the web application in
    a web browser to check that it works correctly. She marks the conflict as resolved
    and commits changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'And then she retries the push:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: And… done.
  prefs: []
  type: TYPE_NORMAL
- en: Adding files in bulk and removing files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Bob decides to add a `COPYRIGHT` file with a copyright notice for the project.
    There was also a `NEWS` file planned (but not created), so he uses a bulk add
    to add all the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Oops! Because Bob didn’t configure his `COPYRIGHT~`, was caught too (such a
    system-specific pattern should go to the repository’s `.git/info/exclude` or personal
    ignore file, `~/.config/git/ignore`, as described in [*Chapter 3*](B21194_03_split_000.xhtml#_idTextAnchor049),
    *Managing Your* *Worktrees*, in the *Ignoring files* section). Let’s remove this
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s check the status and commit the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Undoing changes to a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A bit bored, Bob decides that their web application looks bland, and adds the
    Bootstrap CSS library ([https://getbootstrap.com](https://getbootstrap.com)) to
    the `index.html` header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'He checks how much source code it changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'That looks all right; however, the application doesn’t look that much better
    without further changes, and now it requires access to the internet. Bob decides
    that it is not the time to move to the Bootstrap CSS framework, and undoes the
    changes to `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If you can’t remember how to revert a particular type of change or to update
    what is to be committed (using `git commit` without `-a`), the output of `git
    status` (without `-s`) contains information about what commands to use. This is
    shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Branching and merging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Developers often need to isolate a specific set of changes that is expected
    to not be ready for some time, to create another line of development: a branch.
    Usually, when the mentioned set of changes is ready, you would then want to join
    those branches, which can be done with a merge operation.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Alice decides that it would be a good idea to provide a way for the user to
    configure the lower bound of the range the random number is chosen from (currently
    set to `1`)—that is, make both the minimum and maximum of the generated number
    configurable.
  prefs: []
  type: TYPE_NORMAL
- en: 'She needs to add a new input to the `index.html` file. Alice notices that labels
    for inputs need to be adjusted, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, Alice needs to adjust the JavaScript code to read another input and to
    generate a random integer between two given values, inclusive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Alice then checks that everything works correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Upper and lower bounds are made configurable](img/B21194_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Upper and lower bounds are made configurable
  prefs: []
  type: TYPE_NORMAL
- en: However, during testing, she notices that the application does not ensure that
    the minimum is smaller than or equal to the maximum value, and does not behave
    correctly if the input’s order is switched.
  prefs: []
  type: TYPE_NORMAL
- en: She decides to try to fix this issue. However, to make each commit small and
    self-contained, ensuring that the application works sanely in such cases (when,
    for example, the user provides `10` and `5` as the minimum and maximum, respectively)
    will be done as a separate change.
  prefs: []
  type: TYPE_NORMAL
- en: 'To isolate this line of development from other changes and prevent integrating
    the feature that is not fully ready, she decides to create her own branch named
    ''`min-max''` (see also [*Chapter 8*](B21194_08_split_000.xhtml#_idTextAnchor196),
    *Advanced Branching Techniques*), and switch to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using the **git checkout –b min-max** or **git switch --create min-max**
    shortcut to create a new branch and switch to it in one command invocation, Alice
    could have first created a branch with **git branch min-max**, then switched to
    it with **git** **switch min-max**.
  prefs: []
  type: TYPE_NORMAL
- en: 'She commits her changes and pushes them, knowing that the push will succeed
    because she is working on her private branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Alright! Git just wants Alice to set up a remote origin as the `push` strategy);
    this will also push this branch explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If she wants to make her branch visible but private (so nobody but her can push
    to it), she needs to configure the server with **hooks** or use Git repository
    management software such as **gitolite** to manage it for her.
  prefs: []
  type: TYPE_NORMAL
- en: Merging a branch (no conflicts)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Meanwhile, over in the default branch, Bob decides to push his changes by adding
    the `COPYRIGHT` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'OK. Alice was busy working at making the minimum value of the range configurable
    to choose random integers from (and resolving a merge conflict), and she pushed
    her changes first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Git then opens the editor with the commit message for the merge. Bob exits
    the editor to confirm the default description:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Well, Git has merged Alice’s changes cleanly, but there is a new branch present.
    Let’s take a look at what is in it, showing only those changes exclusive to the
    `min-max` branch (the double-dot syntax is described in [*Chapter 4*](B21194_04.xhtml#_idTextAnchor083),
    *Exploring* *Project History*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Interesting! Bob decides he wants that. So, he asks Git to merge stuff from
    Alice’s branch (which is available in the respective remote tracking branch) into
    the default branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Undoing an unpublished merge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Bob realizes that it should be up to Alice to decide when the feature is ready
    for inclusion (and hears that it is not ready yet). He decides to undo a merge.
    Because it is not published, it is as simple as **rewinding** to the previous
    state of the current branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: This example demonstrates the use of the **reflog** for undoing operations;
    another solution would be to go to a previous (pre-merge) commit following the
    first parent, with **HEAD^** instead of **@{1}**.
  prefs: []
  type: TYPE_NORMAL
- en: Bob then pushes his changes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter walked us through the process of working on a simple example project
    by a small development team.
  prefs: []
  type: TYPE_NORMAL
- en: We have recalled how to start working with Git, either by creating a new repository
    or by cloning an existing one. We have seen how to prepare a commit by adding,
    editing, moving, and renaming files, how to revert changes to the file, how to
    examine the current status and view changes to be committed, and how to tag a
    new release.
  prefs: []
  type: TYPE_NORMAL
- en: We have recalled how to use Git to work at the same time on the same project,
    how to make our work public, and how to get changes from other developers. Though
    using a version control system helps with simultaneous work, sometimes Git needs
    user input to resolve conflicts in work done by different developers. We have
    seen how to resolve a merge conflict.
  prefs: []
  type: TYPE_NORMAL
- en: We have recalled how to create a tag marking a release, and how to create a
    branch starting an independent line of development. Git requires tags and new
    branches to be pushed explicitly, but it fetches them automatically. We have seen
    how to merge a branch.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover creating new revisions and new lines of development
    in much more detail, and it will introduce and explain the concept of the staging
    area for commits.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Describe how to create a repository from existing files and how to get your
    own copy of an existing repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe how to create a new version of the project locally, and how to publish
    those changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain how to get changes from other developers, and how to combine those changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do merge conflict markers look like, and how can you resolve a merge conflict?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What can you do to make Git not show temporary backup files as unknown files
    in the status output? What about the products and byproducts of the build system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can you find information about how to undo adding a file, or how to undo
    changes to a file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you abandon the commit? What are the dangers of doing so?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain how Git manages moving, copying, and renaming files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the answers to the questions given above:'
  prefs: []
  type: TYPE_NORMAL
- en: Use **git init**, **git add .**, and **git commit** to create a repository from
    existing files. Use **git clone** to get your own copy of the existing repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use **git commit** or **git commit -a** to create a new revision, and use **git
    push** to publish changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use **git fetch** to get updates from other developers, or **git pull** to get
    updates and merge them together. Use **git merge** (or, as mentioned in later
    chapters, **git rebase**) to combine changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Merge conflicts are presented using the **<<<<<<<**, **=======**, and **>>>>>>>**
    markers; you can also find the **|||||||** marker used, depending on the configuration.
    To resolve the conflicts, you need to edit files marked as conflicting into shape,
    use **git add** on them when finished, and then finalize the merge with **git
    commit** or **git merge --continue** (or rebase with **git** **rebase --continue**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To make Git ignore specific types of files, you need to add appropriate glob
    patterns to one of the **ignore** files. It is a good practice to ignore byproducts
    of the build system and other generated files using the **.gitignore** file and
    add patterns for temporary files specific to one’s individual choice to a per-repository
    (**.git/info/ignore**) or per-user **ignore** file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All information about how to undo adding, removing, or staging a file can be
    found in the **git** **status** output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can abandon a commit with **git reset --hard HEAD^**, but it may lead to
    losing your changes (you can recover committed changes with the help of reflog
    if it did not expire; uncommitted changes are lost forever).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Git handles code movement, such as renaming, moving, and copying files, by using
    rename detection during merging and **diff** generation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need a reminder about Git basics, the following references might help
    you.
  prefs: []
  type: TYPE_NORMAL
- en: '*Everyday Git With 20 Commands or So*, part of the Git documentation as **giteveryday(7)**:
    [https://git-scm.com/docs/giteveryday](https://git-scm.com/docs/giteveryday)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A tutorial introduction to Git*, part of the Git documentation as **gittutorial(7)**:
    [https://git-scm.com/docs/gittutorial](https://git-scm.com/docs/gittutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The Git User’s Manual*, part of the Git documentation: [https://git-scm.com/docs/user-manual](https://git-scm.com/docs/user-manual)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Eric Sink, *Version Control by Example*, Pyrenean Gold Press (2011): [https://ericsink.com/vcbe/index.html](https://ericsink.com/vcbe/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scott Chacon and Ben Straub, *Pro Git, 2nd Edition*, Apress (2014): [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
