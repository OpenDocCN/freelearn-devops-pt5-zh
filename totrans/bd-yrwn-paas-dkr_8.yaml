- en: Chapter 8. What's Next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have run our PaaS on a single host, which can be a problem if we
    need to scale out. There is a lot happening in this space, and I have selected
    a few projects that I will introduce in this chapter. These projects vary a lot
    in how mature they are, one is ready for use in production while the other is
    in a prototype state. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a Twelve-Factor app?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flynn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rocket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Orchestration tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a Twelve-Factor app?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of today's apps are, in fact, web apps that you run in your web browser.
    Gmail, Slack, Wunderlist, Trello, and so on are all web apps or software-as-a-service.
  prefs: []
  type: TYPE_NORMAL
- en: It is these kind of apps that are suitable to be run on a PaaS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Twelve-Factor app is a methodology for building software-as-a-service apps
    that fulfill the following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: Use declarative formats to set up automation as well as to minimize the time
    and cost for new developers who join the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a clean contract with the underlying operating system, offering maximum
    portability between execution environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suitable for deployment on modern cloud platforms, obviating the need for servers
    and systems administration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimize divergence between development and production, enabling continuous
    deployment for maximum agility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale up without significant changes to tooling, architecture, or development
    practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Twelve Factors are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Codebase** (One codebase tracked in revision control, many deploys): This
    puts your code in a version control system such as Git.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependencies** (Explicitly declare and isolate dependencies): This lists
    all the versions of all the libraries that your app depends on in a single place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Config** (Store config in the environment): Since config will vary between
    environments such as the username or pass to a database, it should not be part
    of the code. You can set the config file in environment variables and have your
    app read them in at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backing Services** (Treat backing services as attached resources): These
    have all the backing services, such as mail server, database, and cache system,
    among others. These will be referenced by a URL endpoint. This way your code doesn''t
    have to care whether the backing service is running on the same machine or across
    the world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build, release, run** (Strictly separate build and run stages): The build
    stage creates bundles, assets, and binaries. This is the developer''s job. When
    you''ve placed a package on a server, you are ready to enter the run stage by
    starting your application and making it available on the server. This stage should
    be as easy as possible so that anyone can do it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Processes** (Execute the app as one or more stateless processes): As stated
    earlier in this book, you should separate your application data from your application
    service, that is, it makes the service stateless. All the states should be in
    the shared storages and databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port binding** (Export services via port binding): An example is backing
    services; your service should be reachable via a URL endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Concurrency** (Scale out via the process model): This keeps every process
    as an independent service. This way you can scale just the parts of your app that
    really need to be scaled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disposability** (Maximize robustness with a fast startup and graceful shutdown):
    This is for app startup, which should be fast, and your app should be able to
    recover from a crash by itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dev/prod parity** (Keep development, staging, and production as similar as
    possible): This keeps your development environment and setup as equal as possible
    to your production environment and setup. Docker really excels here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logs** (Treat logs as event streams): Place your app''s error logs into a
    central place where you get notified when a new error has occurred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Admin processes** (Run admin/management tasks as one-off processes): If you
    are doing administrative tasks, run them on a machine in the production environment
    with the latest code base. You should run queries directly against the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I encourage you to go to [http://12factor.net](http://12factor.net) in order
    to read more about each one of the Twelve Factors. It's a good read; you will
    get an understanding of why some design decisions were made on the following projects.
  prefs: []
  type: TYPE_NORMAL
- en: Flynn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Flynn](img/3946OT_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The guy who created Dokku, Jeff Lindsay, has also co-created Flynn. Flynn is
    like a super-Dokku that, among other things, lets you run your PaaS on multiple
    hosts.
  prefs: []
  type: TYPE_NORMAL
- en: '*"Flynn is two things:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*A distribution of components that out-of-the-box gives companies a reasonable
    starting point for an internal platform for running their applications and services.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The banner for a collection of independent projects that together make up
    a toolkit or loose framework for building distributed systems.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Flynn is both a whole and many parts, depending on what is most useful for
    you. The common goal is to democratize years of experience and best practices
    in building distributed systems. It is the software layer between operators and
    developers that makes both their lives easier."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I have tried using Flynn a few times, but I have always gone back to using Dokku
    again because I find Dokku easier to use, and my clients don't need the extra
    features such as multihost PaaS.
  prefs: []
  type: TYPE_NORMAL
- en: 'URL: [http://flynn.io](http://flynn.io)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Status: This is not suitable for use in the production environment because
    it''s in a beta stage.'
  prefs: []
  type: TYPE_NORMAL
- en: Deis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Deis](img/3946OT_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Deis is built on a lightweight Linux distribution that is built to run containers,
    called CoreOS, and on Docker to take advantage of the distributed services, such
    as etcd, available there.
  prefs: []
  type: TYPE_NORMAL
- en: '*"Deis is a lightweight application platform that deploys and scales Twelve-Factor
    apps as Docker containers across a cluster of CoreOS machines."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I found Deis to be a very promising project and would like to work with it more.
    I have barely touched it but what I have seen so far looks good.
  prefs: []
  type: TYPE_NORMAL
- en: Deis can deploy any language or framework running on Linux using Docker, and
    it also includes Heroku buildpacks for Ruby, Python, Node.js, Java, Clojure, Scala,
    Play, PHP, Perl, Dart, and Go.
  prefs: []
  type: TYPE_NORMAL
- en: The workflow is Heroku-like and you just need to deploy twelve-factor apps,
    that is, save the application state in a backing service.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fun fact**: Deis financially backs/supports Dokku.'
  prefs: []
  type: TYPE_NORMAL
- en: '**URL**: [http://deis.io](http://deis.io)'
  prefs: []
  type: TYPE_NORMAL
- en: '**State**: Deis is ready for production from version 1.0.'
  prefs: []
  type: TYPE_NORMAL
- en: Rocket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Rocket](img/3946OT_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CoreOS has been one of the most popular ways to run a multihost Docker PaaS.
    They have done excellent work and have built some multihost PaaS tools, such as
    Deis, that use CoreOS tools and services to deliver their version of PaaS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In December 2014, the CoreOS team decided to announce their own container runtime:
    Rocket. Rocket is a direct competitor to the original Docker. The reason why they
    are launching Rocket is because they believe Docker has lost its initial idea:
    running reusable standard containers. The CoreOS team believes that Docker is
    stepping away from the initial idea by adding more and more features and services
    around the Docker environment.'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Rocket is a new container runtime, designed for composability, security,
    and speed. Today we are releasing a prototype version on GitHub to begin gathering
    feedback from our community and explain why we are building Rocket."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: According to the CoreOS team, they will continue to have CoreOS to be the perfect
    thing to run Docker. I guess we will see what happens in the future, but I hope
    they stand by their words.
  prefs: []
  type: TYPE_NORMAL
- en: '**URL**: [https://github.com/coreos/rocket](https://github.com/coreos/rocket)'
  prefs: []
  type: TYPE_NORMAL
- en: '**State**: Rocket is in its very early state and not ready for production.'
  prefs: []
  type: TYPE_NORMAL
- en: Orchestration tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tools I have introduced now are tools that will help you keep your mind
    on the code and give you an easy way to deploy your apps to production. If you
    are more interested in an orchestration tool—a tool that helps you manage container
    clusters—there are a few of them out there as well. The tools that currently come
    to mind are Google's Kubernetes, Apache Mesos/Marathon, CoreOS Fleet, and the
    soon to be released Swarm from Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you feel it's time to move your PaaS from a single host to scale across
    multiple hosts, these tools are what you should be looking for. I'm sure some
    worthy competitors will pop up in the future since this is a hot area right now.
  prefs: []
  type: TYPE_NORMAL
