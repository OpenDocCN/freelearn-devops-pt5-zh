- en: Chapter 8. What's Next?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 接下来是什么？
- en: 'So far, we have run our PaaS on a single host, which can be a problem if we
    need to scale out. There is a lot happening in this space, and I have selected
    a few projects that I will introduce in this chapter. These projects vary a lot
    in how mature they are, one is ready for use in production while the other is
    in a prototype state. In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的PaaS在单个主机上运行，如果需要扩展，这可能会成为一个问题。这个领域有很多进展，我挑选了一些项目将在本章中介绍。这些项目在成熟度上差异很大，有的已经可以投入生产使用，而有的仍处于原型阶段。在本章中，我们将涵盖以下主题：
- en: What is a Twelve-Factor app?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是十二要素应用？
- en: Flynn
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flynn
- en: Deis
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Deis
- en: Rocket
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 火箭
- en: Orchestration tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编排工具
- en: What is a Twelve-Factor app?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是十二要素应用？
- en: Many of today's apps are, in fact, web apps that you run in your web browser.
    Gmail, Slack, Wunderlist, Trello, and so on are all web apps or software-as-a-service.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的许多应用程序，实际上都是您在网页浏览器中运行的Web应用程序。Gmail、Slack、Wunderlist、Trello等都属于Web应用或软件即服务。
- en: It is these kind of apps that are suitable to be run on a PaaS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这种类型的应用程序适合在PaaS上运行。
- en: 'The Twelve-Factor app is a methodology for building software-as-a-service apps
    that fulfill the following criteria:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 十二要素应用是一种构建软件即服务应用的方法论，符合以下标准：
- en: Use declarative formats to set up automation as well as to minimize the time
    and cost for new developers who join the project
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用声明性格式设置自动化，并最小化新加入项目的开发人员的时间和成本
- en: Have a clean contract with the underlying operating system, offering maximum
    portability between execution environments
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与底层操作系统有一个清晰的契约，提供在执行环境之间的最大可移植性
- en: Suitable for deployment on modern cloud platforms, obviating the need for servers
    and systems administration
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适合部署在现代云平台上，避免了对服务器和系统管理的需求
- en: Minimize divergence between development and production, enabling continuous
    deployment for maximum agility
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化开发与生产之间的差异，实现最大敏捷性的持续部署
- en: Scale up without significant changes to tooling, architecture, or development
    practices
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不对工具、架构或开发实践做出重大改变的情况下进行扩展
- en: 'The Twelve Factors are defined as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 十二要素定义如下：
- en: '**Codebase** (One codebase tracked in revision control, many deploys): This
    puts your code in a version control system such as Git.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码库**（一个代码库在版本控制中追踪，多个部署）：将您的代码放在版本控制系统中，例如Git。'
- en: '**Dependencies** (Explicitly declare and isolate dependencies): This lists
    all the versions of all the libraries that your app depends on in a single place.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖关系**（显式声明并隔离依赖关系）：这会列出您的应用程序依赖的所有库的所有版本，并将其集中在一个地方。'
- en: '**Config** (Store config in the environment): Since config will vary between
    environments such as the username or pass to a database, it should not be part
    of the code. You can set the config file in environment variables and have your
    app read them in at runtime.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**（将配置存储在环境中）：由于配置会在不同环境之间变化，例如数据库的用户名或密码，它不应成为代码的一部分。您可以将配置文件设置在环境变量中，并让您的应用程序在运行时读取它们。'
- en: '**Backing Services** (Treat backing services as attached resources): These
    have all the backing services, such as mail server, database, and cache system,
    among others. These will be referenced by a URL endpoint. This way your code doesn''t
    have to care whether the backing service is running on the same machine or across
    the world.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后台服务**（将后台服务视为附加资源）：这些包括所有后台服务，如邮件服务器、数据库和缓存系统等。这些将通过URL端点进行引用。这样，您的代码就不必关心后台服务是运行在同一台机器上，还是跨越全球。'
- en: '**Build, release, run** (Strictly separate build and run stages): The build
    stage creates bundles, assets, and binaries. This is the developer''s job. When
    you''ve placed a package on a server, you are ready to enter the run stage by
    starting your application and making it available on the server. This stage should
    be as easy as possible so that anyone can do it.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建、发布、运行**（严格区分构建和运行阶段）：构建阶段创建包、资产和二进制文件。这是开发人员的工作。当您将一个包放置到服务器上时，您就准备进入运行阶段，启动应用程序并使其在服务器上可用。这个阶段应该尽可能简单，以便任何人都可以执行。'
- en: '**Processes** (Execute the app as one or more stateless processes): As stated
    earlier in this book, you should separate your application data from your application
    service, that is, it makes the service stateless. All the states should be in
    the shared storages and databases.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程**（将应用程序作为一个或多个无状态进程执行）：正如本书前面所述，您应该将应用程序数据与应用程序服务分开，也就是说，这使得服务成为无状态的。所有状态应该存储在共享存储和数据库中。'
- en: '**Port binding** (Export services via port binding): An example is backing
    services; your service should be reachable via a URL endpoint.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口绑定**（通过端口绑定导出服务）：例如，后台服务；你的服务应该可以通过URL端点访问。'
- en: '**Concurrency** (Scale out via the process model): This keeps every process
    as an independent service. This way you can scale just the parts of your app that
    really need to be scaled.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发性**（通过进程模型进行扩展）：这保持每个进程都是一个独立的服务。这样，你可以仅扩展那些真正需要扩展的应用程序部分。'
- en: '**Disposability** (Maximize robustness with a fast startup and graceful shutdown):
    This is for app startup, which should be fast, and your app should be able to
    recover from a crash by itself.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可处置性**（通过快速启动和优雅关闭最大化健壮性）：这是针对应用程序启动的要求，启动应该快速，且你的应用程序应该能够自行从崩溃中恢复。'
- en: '**Dev/prod parity** (Keep development, staging, and production as similar as
    possible): This keeps your development environment and setup as equal as possible
    to your production environment and setup. Docker really excels here.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发/生产一致性**（保持开发、暂存和生产环境尽可能相似）：这使得你的开发环境和设置尽可能与生产环境和设置一致。Docker在这一点上表现尤为出色。'
- en: '**Logs** (Treat logs as event streams): Place your app''s error logs into a
    central place where you get notified when a new error has occurred.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志**（将日志视为事件流）：将应用程序的错误日志放置在一个集中位置，在出现新错误时会收到通知。'
- en: '**Admin processes** (Run admin/management tasks as one-off processes): If you
    are doing administrative tasks, run them on a machine in the production environment
    with the latest code base. You should run queries directly against the database.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理进程**（将管理/维护任务作为一次性进程运行）：如果你在做管理任务，将它们运行在生产环境中的一台机器上，且该机器使用的是最新的代码库。你应该直接对数据库运行查询。'
- en: I encourage you to go to [http://12factor.net](http://12factor.net) in order
    to read more about each one of the Twelve Factors. It's a good read; you will
    get an understanding of why some design decisions were made on the following projects.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你访问[http://12factor.net](http://12factor.net)以便阅读更多关于十二因子的内容。这是一个很好的阅读，你会理解为什么在以下项目中做出了一些设计决策。
- en: Flynn
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flynn
- en: '![Flynn](img/3946OT_08_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Flynn](img/3946OT_08_01.jpg)'
- en: The guy who created Dokku, Jeff Lindsay, has also co-created Flynn. Flynn is
    like a super-Dokku that, among other things, lets you run your PaaS on multiple
    hosts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Dokku的那位人，Jeff Lindsay，也共同创建了Flynn。Flynn就像一个超级Dokku，除了其他功能外，它允许你在多个主机上运行PaaS。
- en: '*"Flynn is two things:*'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“Flynn有两个特性：*'
- en: ''
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*A distribution of components that out-of-the-box gives companies a reasonable
    starting point for an internal platform for running their applications and services.*'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*一个组件的发行版，开箱即用地为公司提供一个合理的起点，用于构建运行其应用程序和服务的内部平台。*'
- en: ''
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The banner for a collection of independent projects that together make up
    a toolkit or loose framework for building distributed systems.*'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*一组独立项目的横幅，这些项目一起构成了构建分布式系统的工具包或松散框架。*'
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Flynn is both a whole and many parts, depending on what is most useful for
    you. The common goal is to democratize years of experience and best practices
    in building distributed systems. It is the software layer between operators and
    developers that makes both their lives easier."*'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Flynn既是一个整体，也是许多部分，这取决于对你最有用的是什么。共同的目标是将多年构建分布式系统的经验和最佳实践民主化。它是操作员和开发者之间的软件层，使他们的工作更轻松。*'
- en: I have tried using Flynn a few times, but I have always gone back to using Dokku
    again because I find Dokku easier to use, and my clients don't need the extra
    features such as multihost PaaS.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试过几次使用Flynn，但总是回到使用Dokku，因为我发现Dokku更容易使用，而且我的客户不需要像多主机PaaS这样的额外功能。
- en: 'URL: [http://flynn.io](http://flynn.io)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: URL：[http://flynn.io](http://flynn.io)
- en: 'Status: This is not suitable for use in the production environment because
    it''s in a beta stage.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 状态：由于处于测试阶段，因此不适合在生产环境中使用。
- en: Deis
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Deis
- en: '![Deis](img/3946OT_08_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Deis](img/3946OT_08_02.jpg)'
- en: Deis is built on a lightweight Linux distribution that is built to run containers,
    called CoreOS, and on Docker to take advantage of the distributed services, such
    as etcd, available there.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Deis构建在一个轻量级的Linux发行版上，旨在运行容器，名为CoreOS，并基于Docker，利用那里提供的分布式服务，如etcd。
- en: '*"Deis is a lightweight application platform that deploys and scales Twelve-Factor
    apps as Docker containers across a cluster of CoreOS machines."*'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“Deis是一个轻量级的应用平台，将十二因子应用作为Docker容器部署并扩展，在一组CoreOS机器上运行。”*'
- en: I found Deis to be a very promising project and would like to work with it more.
    I have barely touched it but what I have seen so far looks good.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现 Deis 是一个非常有前景的项目，想要更深入地使用它。我目前仅仅了解了一些，但到目前为止看到的效果不错。
- en: Deis can deploy any language or framework running on Linux using Docker, and
    it also includes Heroku buildpacks for Ruby, Python, Node.js, Java, Clojure, Scala,
    Play, PHP, Perl, Dart, and Go.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Deis 可以使用 Docker 部署在 Linux 上运行的任何语言或框架，还包括 Heroku 的构建包，支持 Ruby、Python、Node.js、Java、Clojure、Scala、Play、PHP、Perl、Dart
    和 Go。
- en: The workflow is Heroku-like and you just need to deploy twelve-factor apps,
    that is, save the application state in a backing service.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程类似于 Heroku，你只需部署十二因子应用，也就是将应用状态保存在后端服务中。
- en: '**Fun fact**: Deis financially backs/supports Dokku.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**有趣的事实**：Deis 在财政上支持/资助 Dokku。'
- en: '**URL**: [http://deis.io](http://deis.io)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址**：[http://deis.io](http://deis.io)'
- en: '**State**: Deis is ready for production from version 1.0.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态**：Deis 从版本 1.0 起已准备好用于生产环境。'
- en: Rocket
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rocket
- en: '![Rocket](img/3946OT_08_03.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Rocket](img/3946OT_08_03.jpg)'
- en: CoreOS has been one of the most popular ways to run a multihost Docker PaaS.
    They have done excellent work and have built some multihost PaaS tools, such as
    Deis, that use CoreOS tools and services to deliver their version of PaaS.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 一直是运行多主机 Docker PaaS 最流行的方式之一。他们做得非常出色，并构建了一些多主机 PaaS 工具，如 Deis，这些工具使用
    CoreOS 的工具和服务来提供他们版本的 PaaS。
- en: 'In December 2014, the CoreOS team decided to announce their own container runtime:
    Rocket. Rocket is a direct competitor to the original Docker. The reason why they
    are launching Rocket is because they believe Docker has lost its initial idea:
    running reusable standard containers. The CoreOS team believes that Docker is
    stepping away from the initial idea by adding more and more features and services
    around the Docker environment.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年12月，CoreOS团队决定宣布他们自己的容器运行时：Rocket。Rocket 是 Docker 的直接竞争对手。他们推出 Rocket 的原因是因为他们认为
    Docker 已经偏离了最初的理念——运行可重用的标准容器。CoreOS 团队认为，Docker 通过增加越来越多的功能和服务，正在逐渐远离最初的理念。
- en: '*"Rocket is a new container runtime, designed for composability, security,
    and speed. Today we are releasing a prototype version on GitHub to begin gathering
    feedback from our community and explain why we are building Rocket."*'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“Rocket 是一个新的容器运行时，旨在可组合性、安全性和速度方面进行优化。今天我们在 GitHub 上发布了一个原型版本，开始收集社区反馈，并解释为什么我们要构建
    Rocket。”*'
- en: According to the CoreOS team, they will continue to have CoreOS to be the perfect
    thing to run Docker. I guess we will see what happens in the future, but I hope
    they stand by their words.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 CoreOS 团队的说法，他们将继续使 CoreOS 成为运行 Docker 的完美平台。我猜我们将看到未来会发生什么，但我希望他们能坚持自己的承诺。
- en: '**URL**: [https://github.com/coreos/rocket](https://github.com/coreos/rocket)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址**：[https://github.com/coreos/rocket](https://github.com/coreos/rocket)'
- en: '**State**: Rocket is in its very early state and not ready for production.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态**：Rocket 目前处于非常早期的阶段，尚未准备好用于生产环境。'
- en: Orchestration tools
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编排工具
- en: The tools I have introduced now are tools that will help you keep your mind
    on the code and give you an easy way to deploy your apps to production. If you
    are more interested in an orchestration tool—a tool that helps you manage container
    clusters—there are a few of them out there as well. The tools that currently come
    to mind are Google's Kubernetes, Apache Mesos/Marathon, CoreOS Fleet, and the
    soon to be released Swarm from Docker.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在介绍的工具是帮助你集中精力编写代码，并为你提供一种轻松将应用部署到生产环境的方法。如果你更感兴趣的是一个编排工具——帮助你管理容器集群的工具——现在也有一些这样的工具可供选择。目前让我想起的工具有Google的Kubernetes、Apache
    Mesos/Marathon、CoreOS Fleet，以及即将发布的Docker Swarm。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: When you feel it's time to move your PaaS from a single host to scale across
    multiple hosts, these tools are what you should be looking for. I'm sure some
    worthy competitors will pop up in the future since this is a hot area right now.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你觉得是时候将你的 PaaS 从单一主机迁移到多个主机进行扩展时，这些工具正是你应该寻找的。我相信未来会出现一些有竞争力的工具，因为这是一个目前非常热门的领域。
