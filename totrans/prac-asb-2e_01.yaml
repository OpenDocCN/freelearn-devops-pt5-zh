- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible enables you to easily deploy applications and systems consistently and
    repeatably using native communication protocols such as SSH and WinRM. As a result,
    Ansible is agentless and so requires nothing to be installed on the managed systems
    (except for Python, which, these days, is present on most systems). As a result,
    it enables you to build a simple yet robust automation platform for your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible is straightforward to install and also comes packaged for many modern
    systems. Its architecture is serverless as well as agentless, so it has a minimal
    footprint. You can choose to run it from a central server or your own laptop—the
    choice is entirely yours. You can manage anything from a single host to hundreds
    of thousands of remote hosts from one Ansible control machine. All remote machines
    can be managed by Ansible, and with sufficient playbooks created, you may never
    have to log in to any of these machines individually again.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will begin to teach you practical skills to cover the very
    fundamentals of Ansible, starting with how to install Ansible on a wide variety
    of operating systems. We will then look at how to configure Windows hosts to enable
    them to be managed with Ansible automation, before delving in greater depth into
    how Ansible connects to its target hosts. We’ll then look at node requirements
    and how to validate your Ansible installation, before finally looking at how to
    obtain and run the very latest Ansible source code if you wish to either contribute
    to its development or gain access to the very latest features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting to know your Ansible installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managed node requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible has a fairly minimal set of system requirements—as such, you should
    find that if you have a machine (either a laptop, a server, or a **virtual machine**
    (**VM**)) that is capable of running Python, then you will be able to run Ansible
    on it. Later in this chapter, we will demonstrate the installation methods for
    Ansible on a variety of operating systems—it is hence left to you to decide which
    operating systems are right for you.
  prefs: []
  type: TYPE_NORMAL
- en: The one exception to the preceding statement is Microsoft Windows—although there
    are Python environments available for Windows, there is as yet no native build
    of Ansible for Windows. Readers running more recent versions of Windows will be
    able to install Ansible using **Windows Subsystem for Linux** (henceforth, **WSL**)
    by following the procedures outlined later for their chosen WSL environment (for
    example, if you install Ubuntu on WSL, you should simply follow the instructions
    given in this chapter for installing Ansible on Ubuntu).
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is written in Python and, as such, can be run on a wide range of systems.
    This includes the most popular flavors of Linux, FreeBSD, and macOS. The one exception
    to this is Windows, where though native Python distributions exist, there is as
    yet no native Ansible build. As a result, your best option at the time of writing
    is to install Ansible under WSL, proceeding as if you were running on a native
    Linux host.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have established the system on which you wish to run Ansible, the installation
    process is normally simple. In the following sections, we will discuss how to
    install Ansible on a wide range of different systems so that most readers should
    be able to get up and running with Ansible in a matter of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Ansible version numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the previous edition of this book was published, Ansible followed a relatively
    simple version numbering scheme. All releases of Ansible included all the modules,
    plugins, and other code accepted into the Ansible release (which was version 2.9
    in the previous edition of this book).
  prefs: []
  type: TYPE_NORMAL
- en: This worked well for many years but also created a problem for the maintainers
    of Ansible—as its popularity and adoption grew, the number of modules (the lifeblood
    of Ansible, which perform the actual automation tasks you will run) numbered in
    the thousands. Releasing these with the core Ansible software meant that if a
    bug was discovered in a module, or perhaps a new release with new features was
    available, then there had to be a new release of Ansible before end users could
    take advantage of this. Not only did this slow down releases of new module code,
    but it also created a significant workload for the Ansible maintainers.
  prefs: []
  type: TYPE_NORMAL
- en: As a direct result of this, Ansible was split into two separate packages. The
    first is called `ansible-core`, and this contains just the Ansible runtime code
    (such as the `ansible-playbook` command, which we’ll see in use later), as well
    as some built-in functionality that is core to all playbooks and roles. The `ansible-core`
    package follows the *classic* Ansible versioning scheme, and so where the previous
    release of this book was written around Ansible 2.9, this version of the book
    will be based around `ansible-core` 2.15.
  prefs: []
  type: TYPE_NORMAL
- en: All the modules and plugins that provided the functionality present in the 2.9
    release (the last release before the package split was implemented) are contained
    in the **Ansible community package** release. This follows semantic versioning,
    meaning that, as the current release at the time of writing is 8.0, the next major
    release will be 9.0.
  prefs: []
  type: TYPE_NORMAL
- en: To enable this separate management of `ansible-core` and modules, plugins, and
    the like, an implementation called **collections** was created. Collections are
    individually bundled sets of modules, plugins, and roles intended for a specific
    purpose; we’ll be learning all about these in detail in [*Chapter 6*](B20846_06.xhtml#_idTextAnchor318),
    *Creating and Consuming Collections*, so don’t worry if this all seems a bit daunting—it
    will all become clear later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each release of the Ansible community package is dependent on a specific version
    of the `ansible-core` package, and the 8.0 release we will use in this book depends
    upon `ansible-core` version 2.15\. You can find the change log and other details
    about the 8.0 release here: [https://github.com/ansible-community/ansible-build-data/blob/8.0.0/8/CHANGELOG-v8.rst#v8-0-0](https://github.com/ansible-community/ansible-build-data/blob/8.0.0/8/CHANGELOG-v8.rst#v8-0-0).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The beauty of this separation of code lies in this: let’s say you want to create
    a playbook or role based around new functionality in a module; you can install
    an updated collection containing the module without updating your entire Ansible
    installation (or, indeed, waiting for the next release, as you would have had
    to until after version 2.9 was released).'
  prefs: []
  type: TYPE_NORMAL
- en: With this information in hand, we’ll proceed to explore the specifics of installing
    Ansible on a variety of systems, but it’s important to discuss this upfront as
    if you’ve had exposure to any of the 2.x releases of Ansible, the new versioning
    scheme will look rather different.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d like to read more details on the rationale behind the new versioning
    scheme, release cadence, and how it works, the official Ansible documentation
    here has more details: [https://docs.ansible.com/ansible/latest/reference_appendices/release_and_maintenance.xhtml](https://docs.ansible.com/ansible/latest/reference_appendices/release_and_maintenance.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ansible on Linux and FreeBSD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The release cycle for Ansible is usually about six months, and during this short
    release cycle, there are normally many changes, from minor bug fixes to major
    ones, new features, and even sometimes fundamental changes to the language. At
    the end of each release cycle, you would expect to see a new version of the Ansible
    community package (for example, 8.0), and a corresponding release of the `ansible-core`
    package (for example, 2.15). While there are native packages still built for many
    operating systems, your mileage will vary as to how up to date these are, and
    the recommended way to install Ansible is now to use the PIP package manager for
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: There will, of course, be exceptions to this. For example, if you are using
    a commercial Linux distribution such as **Red Hat Enterprise Linux** (**RHEL**),
    especially to perform workflows supported by your operating system vendor, then
    you should make sure you use the packages provided by that vendor. They will invariably
    also provide instructions on how to install Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: This does bring with it a separate challenge. When Ansible was installed using
    your native package manager such as `yum`, `dnf`, or `apt`, it would be updated
    along with your system. When using PIP, you will need to ensure that you update
    Ansible separately (we will show you how shortly).
  prefs: []
  type: TYPE_NORMAL
- en: Talking of upgrades, most playbooks that were created under the 2.x releases
    of Ansible will still work today, and you will often find that updating does not
    specifically cause any issues. However, it is strongly recommended that you read
    the porting notes for each release to ensure your code remains functional as you
    intended it. As such, an Ansible upgrade should be a planned activity, and it
    is almost certainly not desirable to patch Ansible in line with your operating
    system. In short, the move away from native operating system packages to PIP package
    management is unlikely to cause you any issues, and may even prove beneficial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you want to install Ansible on a node—the following procedure should
    work on any version of Linux or FreeBSD provided the required version of Python
    is available:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check that Python is installed on your intended node—henceforth, we will refer
    to this as the `PATH` using a command such as this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, you can see that Python 3.10.6 is installed. The minimum requirement for
    Ansible 8.0 is Python 3.9, so in this instance, we are good to proceed. However,
    if you find that Python is not present, please refer to the documentation for
    your operating system for guidance on how to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Depending upon your system, Python may be run using a command such as `python`,
    `python3`, or `python3.10`—again, please refer to the documentation for your operating
    system to learn more. Ansible will work in any of these cases, but it is important
    to understand how to run Python on your system to complete the rest of this process.
    Here, we will assume that Python is executed using the `python3` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you know that Python is installed, the next step is to ensure that the
    PIP package manager is installed. A successful query of this should look something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You may see output such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In such cases, you will need to install PIP. You can do this by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Most operating systems will also have a native package for installing PIP—for
    example, on Ubuntu, you can install PIP using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How you install PIP doesn’t matter—as long as it’s installed, you can proceed
    to the next step.
  prefs: []
  type: TYPE_NORMAL
- en: With these steps completed, all that is left is to install Ansible. Now, this
    might seem like a bit of a departure from the previous ways of installing Ansible,
    where operating-system-native packages were available for most major operating
    systems. Yet the beauty of using PIP is that once you’ve learned how to install
    and manage Ansible on one system, the method is exactly the same on all others,
    regardless of whether you are using Fedora, Ubuntu, FreeBSD, Debian, or Gentoo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In fact, even if you’re using Linux under WSL, the installation method is exactly
    the same once you’ve got WSL up and running. The simplest and easiest way to complete
    your Ansible install is to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Installing Ansible using PIP on Linux](img/B20846_01_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Installing Ansible using PIP on Linux
  prefs: []
  type: TYPE_NORMAL
- en: From the output here, you can see that this command has successfully installed
    Ansible 8.0.0, along with its dependent package, `ansible-core` 2.15.0—these are
    the latest versions available at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you will note that Ansible has been installed in `/home/james/.local/bin`,
    which is not on the system path, so you won’t be able to run commands such as
    `ansible-playbook` without either updating the path or specifying the full path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, if you want to run the `ansible-playbook` command, you could run it as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you could update your path, and then you can run the command
    without needing to specify the full path, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Of course, this process is only installing Ansible for the current user. This
    will often be sufficient for most scenarios, but there might be times when you
    have multiple developers accessing the same control node, and in this case, you
    would want them all to access one centrally installed copy of Ansible—otherwise,
    one developer might have version 6.2.0 and another 8.0.0, and your development
    processes would be inconsistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to install Ansible for everyone, you should follow the preceding
    process up to *step 2* to ensure that PIP is installed. Then, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Ansible as the root user by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you will find that Ansible is installed centrally—on my Ubuntu Server
    22.04 test system, I see the following results after running this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: PIP has more tricks up its sleeve, however, and we’re going to show you another
    one now—specifying your installation version.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve just been specifying the `ansible` package for installation. This
    works great if you always want the latest and greatest version, but what if, for
    reasons of development or consistency, you want to install a specific version?
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, suppose that you want to install Ansible 6.2.0 because you need
    to test or develop against that version. You could do this by altering your `install`
    command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This will install version `6.2.0` (and the corresponding version of `ansible-core`,
    which in this example is `2.13.8`) in your local user directory, and if you watch
    the installation process closely, you’ll see that it uninstalls any version you
    have already installed, even if it’s newer. Proceed with caution if this isn’t
    what you want.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can, of course, add a `==6.2.0` suffix to any of the installation commands
    we’ve given previously to specify the version to be installed. You can also change
    `6.2.0` to any valid version number. You can explore the available versions by
    browsing to the following URL: [https://pypi.org/project/ansible/#history](https://pypi.org/project/ansible/#history).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any time you want to upgrade your installed Ansible version (when it has been
    installed using PIP), you can simply add the `--upgrade` flag to the installation
    command, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This example command will install the very latest version, as we have not explicitly
    set one otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you ever need to remove Ansible from your system for any reason, PIP can
    also handle this—for example, you could run this command to remove the version
    of Ansible and `ansible-core` that you installed (note that you must specify both—dependencies
    are not automatically removed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Once you’ve mastered these commands, you will be set to install, maintain, and
    uninstall Ansible on all your control nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Working with virtual environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another incredibly useful and powerful feature of Python is **virtual environments**
    (henceforth **venvs**). Venvs are small isolated Python environments that are
    separate from both the system install of Python (and its libraries) and all other
    virtual environments. This is incredibly useful for Ansible development. For example,
    let’s say that you have a set of playbooks and roles that you developed under
    Ansible 2.7.18, and these have all been tested and known to work well. You want
    to upgrade to Ansible 8.0.0, but you can’t take the risk of the existing code
    being inoperable in case you have to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'With venvs, you can have an isolated Ansible 2.7.18 and an isolated Ansible
    8.0.0 environment on the same machine, and you can switch between them at will.
    To get started, follow the process provided next:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with, you will need to make sure you have both an operable Python
    environment and PIP, as described earlier in this chapter. Once these are in place,
    proceed to *step 2*. If you are going back to a version of Ansible as old as 2.7.18,
    you’ll also need to ensure it supports the Python version you are using. My Python
    environment on Ubuntu Server 22.04 is version 3.10, which is not supported by
    Ansible 2.7.18\. As a result, I’ll install Python 2.7, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ sudo pip2 install virtualenv
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’re now ready to create your first venv—let’s create one for Ansible 2.7.18:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will create a venv under the current directory containing the minimum
    set of files for an operating Python 2 environment. Now, we’ll activate the environment
    (without this step, you will still be using the system Python environment):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: (ansible-2.7.18) $ python -m pip install ansible==2.7.18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’ll see Ansible installed via PIP in the usual way. Now, you should be able
    to query the version of Ansible installed, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That’s it—we have Ansible 2.7.18 working in its own Python environment, all
    isolated from the system and other environments. Now, we can repeat the process
    for Ansible 8.0.0\. You will doubtless have received warnings that Python 2.7
    is deprecated during this process (this is to be expected), so we definitely want
    to use our system-installed version of Python 3.10 for the later version of Ansible.
    As such, we first want to deactivate our venv so that we can revert to the system-installed
    Python libraries. Here’s how we can do that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note how your prompt returns to normal, demonstrating that the venv is no longer
    active. As before, we need to ensure we have the Python venv library installed—however,
    there is a native package for it, so we can simply install it using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you can create a Python 3 venv for Ansible 8.0.0 and activate it using
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now install Ansible via PIP in the same manner as before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, we’ve used completely different versions of Python and Ansible,
    yet they remain isolated from each other on the system. As such, you can safely
    use the older version to run your playbooks while you test your updated code on
    the newer version. This is quite an extreme example, and you almost certainly
    won’t need to go back to Python 2.7 and Ansible 2.7.18, but it does demonstrate
    how nicely you can create completely separate Python environments for your development
    and testing work without needing multiple systems.
  prefs: []
  type: TYPE_NORMAL
- en: Installing from GitHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It has always been possible to run the very latest development version of Ansible
    from GitHub, and this is as true today as it has always been. However, there is
    now one important caveat. If you have done this previously (on releases of Ansible
    from the 2.x series or earlier, on which the previous edition of this book was
    based), then you would be working with the complete install of Ansible, including
    all the modules you might want to use. Since the introduction of collections,
    you will now only be checking out the code for `ansible-core` when you do this.
    As such, if you want to test code including module calls, you will need to install
    or manage collections to go alongside your `ansible-core` setup.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore the management of collections in [*Chapter 6*](B20846_06.xhtml#_idTextAnchor318),
    *Creating and Consuming Collections*, so we won’t specifically explore this here—however,
    for completeness, we will show you how to install `ansible-core` development releases
    from code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Check that you have PIP installed—if you don’t, please take a look at how we
    did this earlier in the chapter. Once you have this (and, by inference, a working
    Python 3 environment), you can move forward to the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the Ansible GitHub repository, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure you have all development requirements installed using PIP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ansible, ansible-playbook, and ansible-galaxy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'On Linux distributions such as Ubuntu 22.04, the default Python installation
    is Python 3, and the binary used to execute it is named `python3`. This won’t
    work on the development install of Ansible, which expects the Python binary to
    be called `python`. You can fix this on Ubuntu 22.04 by installing a special meta
    package. To do so, run this command: `sudo apt install python-is-python3`. Or,
    you could just create a symbolic link from `python3` to `python` by running the
    following command: `sudo ln -s /``usr/bin/python3 /usr/bin/python`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the `env-setup` script, Ansible runs from the source code checkout,
    and the default inventory file is `/etc/ansible/hosts`, which will not have been
    created by your code checkout; however, you can optionally specify an inventory
    file wherever you want on your machine (see *How to build your inventory*, [https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.xhtml#inventory-basics-formats-hosts-and-groups](https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.xhtml#inventory-basics-formats-hosts-and-groups),
    for more details). The following command provides an example of how you might
    do this, but obviously, your filename and contents are almost certainly going
    to vary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This demonstrates another powerful way to configure Ansible—environment variables.
    The `ANSIBLE_INVENTORY` variable is used to tell Ansible where to look for its
    inventory file by default—this is normally `/etc/ansible/hosts`, but in the preceding
    example, we are changing this to the `my_ansible_inventory` file in our home directory.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn about the various Ansible configuration variables here: [https://docs.ansible.com/ansible/latest/reference_appendices/config.xhtml#environment-variables](https://docs.ansible.com/ansible/latest/reference_appendices/config.xhtml#environment-variables).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have completed these steps, you can run Ansible exactly as we have
    discussed throughout this chapter. The `env-setup` script alters your `PATH` variable
    so that you don’t need to specify the location where you checked out the Ansible
    repository. By way of example, if you set up your inventory using the environment
    variable as demonstrated previously, and have cloned the Ansible source and run
    the `env-setup` script, you could run the ad hoc `ansible.builtin.ping` command
    that we are now familiar with, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this in place, you can now work with the development branch of Ansible
    just as you would if you had installed it by any other means.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, the Ansible source tree is constantly changing, and it is unlikely
    you would just want to stick with the copy you cloned. When the time comes to
    update it, you don’t need to clone a new copy; you can simply update your existing
    working copy using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This concludes our look at installing Ansible on Linux—now that we’ve done that,
    we’ll look at some of the specifics of installing Ansible on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ansible on macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you will learn how to install Ansible on macOS. The easiest
    installation method is to use Homebrew, but you could also use the Python package
    manager (PIP). The procedure for installation with PIP is the same as for Linux,
    so we won’t go over that again here.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, let’s get started with the Homebrew installation method, which is probably
    your fastest and easiest approach on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t already have Homebrew installed on macOS, you can easily install
    it, as detailed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Normally, the two commands shown here are all that is required to install Homebrew
    on macOS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you have already installed the Xcode command-line tools for another purpose,
    you might see the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You may want to open the **Software Update** setting from **System Settings**
    on macOS and check whether updates to the Xcode command-line tools are required,
    but as long as they are installed, your Homebrew installation should proceed smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to confirm that your installation of Homebrew was successful, you
    can run the following command, which will warn you about any potential issues
    with your install—for example, the following output is warning us that, although
    Homebrew is installed successfully, it is not in our `PATH`, and so we may not
    be able to run any executables without specifying their absolute path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ brew install python3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: …
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ which python3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /opt/homebrew/bin/python3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ python3  --version
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Python 3.11.3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this completed, you can now proceed to install Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Ansible via Homebrew, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible --version
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ansible [core 2.15.0]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: config file = None
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: configured module search path = ['/Users/james/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ansible python module location = /opt/homebrew/Cellar/ansible/8.0.0/libexec/lib/python3.11/site-packages/ansible
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ansible collection location = /Users/james/.ansible/collections:/usr/share/ansible/collections
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: executable location = /opt/homebrew/bin/ansible
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: python version = 3.11.3 (main, Apr  7 2023, 20:13:31) [Clang 14.0.0 (clang-1400.0.29.202)]
    (/opt/homebrew/Cellar/ansible/8.0.0/libexec/bin/python3.11)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: jinja version = 3.1.2
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'brew command, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that you have learned the steps to install Ansible on macOS, let’s see how
    to configure a Windows host for automation with Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Windows hosts for Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed earlier, there is no direct installation method for Ansible on
    Windows—simply, it is recommended that, where available, you install WSL and install
    Ansible as if you were running Linux natively, using the processes outlined earlier
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Despite this limitation, however, Ansible is not limited to managing just Linux-
    and BSD-based systems—it is capable of the agentless management of Windows hosts
    using the native WinRM protocol, with modules and raw commands making use of PowerShell,
    which is available in every modern Windows installation. In this section, you
    will learn how to configure Windows to enable task automation with Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of what Ansible is capable of when automating Windows
    hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: Gathering facts about remote hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and uninstalling Windows features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing and querying Windows services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing user accounts and a list of users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing packages using Chocolatey (a software repository and accompanying management
    tool for Windows)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing Windows updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching multiple files from a remote machine to the Windows host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing raw PowerShell commands and scripts on target hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible allows you to automate tasks on Windows machines by connecting with
    either a local user or a domain user. You can run actions as an administrator
    using the Windows `runas` support, just as with the `sudo` command on Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Also, as Ansible is **open source software** (**OSS**), it is easy to extend
    its functionality by creating your own modules in PowerShell or even sending raw
    PowerShell commands. For example, an InfoSec team could manage filesystem **access
    control lists** (**ACLs**), configure Windows Firewall, and manage hostnames and
    domain membership with ease, using a mix of native Ansible modules and, where
    necessary, raw commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Windows host must meet the following requirements for the Ansible control
    machine to communicate with it:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible attempts to support all Windows versions that are under either current
    or extended support from Microsoft, including desktop platforms such as Windows
    8.1, 10, and 11, along with server operating systems, including Windows Server
    2012 (and R2), 2016, 2019, and 2022.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also need to install PowerShell 3.0 or later and at least .NET 4.0
    on your Windows host.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need to create and activate a WinRM listener, which is described in
    detail later. For security reasons, this is not enabled by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s look in more detail at how to prepare a Windows host to be automated
    by Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With regard to prerequisites, you have to make sure PowerShell 3.0 and .NET
    Framework 4.0 are installed on Windows machines. On many modern Windows versions,
    you will find these are already in place, but if you’re still using an older version
    of PowerShell or .NET Framework, you will need to upgrade them. You are free to
    perform this manually, or the following PowerShell script can handle it automatically
    for you. You will observe that this script is not from the official Ansible repository—however,
    the owner is a maintainer and reviewer of the official Ansible repository. Nonetheless,
    whenever downloading scripts, it is good practice to review the source code and
    ensure that it is aligned with your security protocols and requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script works by examining the programs that need to be installed (such
    as .NET Framework 4.5.2) and the required PowerShell version (we have specified
    `5.1` on the last line of the preceding code snippet—valid values for this are
    `3.0`, `4.0`, or `5.1`. We also specify an account with administrator privileges,
    so be sure to set the `$username` and `$password` variables appropriately for
    your system. If a valid username and password are set, and a reboot is required
    after the script finishes, it will automatically restart and log on at reboot
    so that no more action is required, and the script will continue until the PowerShell
    version matches the target version.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to note that if the credentials are set to enable automatic
    reboots, they are also stored in plaintext in the registry, so it’s important
    to check that they have been cleared out after the script run. The following snippet
    of PowerShell will achieve this, and it is recommended you run it after the script
    as a matter of routine to ensure your credentials do not get leaked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Force
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Set-ExecutionPolicy -ExecutionPolicy Restricted -Force
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Get-ExecutionPolicy
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: $selector_set = @{
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Address = "*"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Transport = "HTTPS"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $value_set = @{
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CertificateThumbprint = "2c8951160e63b33593e7bbc3a22414a5ab259717"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New-WSManInstance -ResourceURI "winrm/config/Listener" -SelectorSet $selector_set
    -ValueSet $value_set
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: New-NetFirewallRule -DisplayName 'WinRM over HTTPS' -Profile 'Any' -Direction
    Inbound -Action Allow -Protocol TCP -LocalPort 5986
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Set-Item -Path "WSMan:\localhost\Service\Auth\Basic" -Value $true
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12'
  prefs: []
  type: TYPE_NORMAL
- en: $url = "https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Install-WMF3Hotfix.ps1"
  prefs: []
  type: TYPE_NORMAL
- en: $file = "$env:temp\Install-WMF3Hotfix.ps1"
  prefs: []
  type: TYPE_NORMAL
- en: (New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)
  prefs: []
  type: TYPE_NORMAL
- en: powershell.exe -ExecutionPolicy ByPass -File $file -Verbose
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: winrm enumerate winrm/config/Listener
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Listener
  prefs: []
  type: TYPE_NORMAL
- en: Address = *
  prefs: []
  type: TYPE_NORMAL
- en: Transport = HTTP
  prefs: []
  type: TYPE_NORMAL
- en: Port = 5985
  prefs: []
  type: TYPE_NORMAL
- en: Hostname
  prefs: []
  type: TYPE_NORMAL
- en: Enabled = true
  prefs: []
  type: TYPE_NORMAL
- en: URLPrefix = wsman
  prefs: []
  type: TYPE_NORMAL
- en: CertificateThumbprint
  prefs: []
  type: TYPE_NORMAL
- en: ListeningOn = 10.0.50.100, 127.0.0.1, ::1, fe80::460:ba22:fac4:71ff%5
  prefs: []
  type: TYPE_NORMAL
- en: Listener
  prefs: []
  type: TYPE_NORMAL
- en: Address = *
  prefs: []
  type: TYPE_NORMAL
- en: Transport = HTTPS
  prefs: []
  type: TYPE_NORMAL
- en: Port = 5986
  prefs: []
  type: TYPE_NORMAL
- en: Hostname
  prefs: []
  type: TYPE_NORMAL
- en: Enabled = true
  prefs: []
  type: TYPE_NORMAL
- en: URLPrefix = wsman
  prefs: []
  type: TYPE_NORMAL
- en: CertificateThumbprint = 2c8951160e63b33593e7bbc3a22414a5ab259717
  prefs: []
  type: TYPE_NORMAL
- en: ListeningOn = 10.0.50.100, 127.0.0.1, ::1, fe80::460:ba22:fac4:71ff%5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: test out HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: winrs -r:http://<server address>:5985/wsman -u:Username -p:Password ipconfig
  prefs: []
  type: TYPE_NORMAL
- en: test out HTTPS (will fail if the cert is not verifiable)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: winrs -r:https://<server address>:5986/wsman -u:Username -p:Password -ssl ipconfig
  prefs: []
  type: TYPE_NORMAL
- en: test out HTTPS, ignoring certificate verification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: $username = "Username"
  prefs: []
  type: TYPE_NORMAL
- en: $password = ConvertTo-SecureString -String "Password" -AsPlainText -Force
  prefs: []
  type: TYPE_NORMAL
- en: $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList
    $username, $password
  prefs: []
  type: TYPE_NORMAL
- en: $session_option = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
  prefs: []
  type: TYPE_NORMAL
- en: Invoke-Command -ComputerName <server address> -UseSSL -ScriptBlock { ipconfig
    } -Credential $cred -SessionOption $session_option
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: $ python3 -m pip install pywinrm
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[windows]'
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.50.101
  prefs: []
  type: TYPE_NORMAL
- en: '[windows:vars]'
  prefs: []
  type: TYPE_NORMAL
- en: ansible_user=administrator
  prefs: []
  type: TYPE_NORMAL
- en: ansible_password=password
  prefs: []
  type: TYPE_NORMAL
- en: ansible_port=5986
  prefs: []
  type: TYPE_NORMAL
- en: ansible_connection=winrm
  prefs: []
  type: TYPE_NORMAL
- en: ansible_winrm_server_cert_validation=ignore
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible -i inventory -m ansible.windows.win_ping windows
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.50.101 | SUCCESS => {
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[webservers]'
  prefs: []
  type: TYPE_NORMAL
- en: web01.example.org
  prefs: []
  type: TYPE_NORMAL
- en: web02.example.org
  prefs: []
  type: TYPE_NORMAL
- en: '[apservers]'
  prefs: []
  type: TYPE_NORMAL
- en: app01.example.org
  prefs: []
  type: TYPE_NORMAL
- en: app02.example.org
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible webservers -m anisble.builtin.ping
  prefs: []
  type: TYPE_NORMAL
- en: web01.example.org | SUCCESS => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: web02.example.org | SUCCESS => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: $ eval $(ssh-agent)
  prefs: []
  type: TYPE_NORMAL
- en: Agent pid 3064
  prefs: []
  type: TYPE_NORMAL
- en: $ ssh-add ~/.ssh/id_rsa
  prefs: []
  type: TYPE_NORMAL
- en: 'Identity added: /home/james/.ssh/id_rsa (james@controlnode)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[webservers]'
  prefs: []
  type: TYPE_NORMAL
- en: web01.example.org
  prefs: []
  type: TYPE_NORMAL
- en: web02.example.org
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible webservers -i /etc/ansible/hosts -m ansible.builtin.ping
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible webservers -i /etc/ansible/hosts -m ansible.builtin.setup | less
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible webservers -i /etc/ansible/hosts -m ansible.builtin.setup -a "filter=ansible_distribution*"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible webservers -m ansible.builtin.ping
  prefs: []
  type: TYPE_NORMAL
- en: web02.example.org | SUCCESS => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: web01.example.org | SUCCESS => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible -i machost.example.org, -m ansible.builtin.setup -a "filter=ansible_distribution*"
    all
  prefs: []
  type: TYPE_NORMAL
- en: machost.example.org | SUCCESS => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_distribution": "MacOSX",'
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_distribution_major_version": "13",'
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_distribution_release": "22.4.0",'
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_distribution_version": "13.3.1",'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/opt/homebrew/bin/python3.11"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": false'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'webservers inventory group, and create it with specific ownership and permissions,
    as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'apache2 package with apt if it is not already present—if it is present, do
    not update it. Again, this applies to all hosts in the webservers inventory group.
    Note the presence of the --become switch—as we’re installing packages, we must
    *become* the root user using sudo. This command assumes that the user account
    on the managed node can perform passwordless sudo commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible webservers -m ansible.builtin.apt -a "name=apache2 state=latest" --become
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible all -m ansible.builtin.setup
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'dnf package manager instead. Here’s the command you’d execute:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ sudo dnf install python39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: $ sudo apt update
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ sudo apt install python3.10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '- name: Bootstrap a host without python3 installed'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.raw: dnf install -y python3 python3-dnf libselinux-python3'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: Run a command that uses non-posix shell-isms (in this example /bin/sh
    doesn''t handle redirection and wildcards together but bash does)'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.raw: cat < /tmp/*txt'
  prefs: []
  type: TYPE_NORMAL
- en: 'args:'
  prefs: []
  type: TYPE_NORMAL
- en: 'executable: /bin/bash'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: safely use templated variables. Always use quote filter to avoid injection
    issues.'
  prefs: []
  type: TYPE_NORMAL
- en: 'ansible.builtin.raw: "{{package_mgr|quote}} {{pkg_flags|quote}} install {{python|quote}}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
