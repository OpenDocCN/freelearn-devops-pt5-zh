- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Targeting Multiple Distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, throughout the previous chapters, we have been targeting a single operating
    system, Ubuntu, when running on our playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will examine how to work with multiple Linux distributions within
    the same roles and playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will take the WordPress playbook and the roles we created in [*Chapter 5*](B21620_05.xhtml#_idTextAnchor253),
    *Deploying WordPress*, and do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Discover what the difference is between our two target operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look at and implement our WordPress roles, making them work on both target operating
    systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss and apply best practices for targeting multiple distributions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Debian and Red Hat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-distribution considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adapting the roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the playbook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Given that we will be launching two different operating systems, we will be
    changing the approach that we have taken in previous chapters and launching a
    pair of virtual machines in a cloud provider rather than two different virtual
    machines on our local machines.
  prefs: []
  type: TYPE_NORMAL
- en: The primary reason for this is that Multipass only really supports Ubuntu machines
    as it was created by Canonical, the creators and maintainers of Ubuntu, to give
    people a quick, easy, and consistent way to launch an Ubuntu virtual machine across
    multiple host platforms.
  prefs: []
  type: TYPE_NORMAL
- en: As we will be looking at automating cloud deployments in [*Chapter 9*](B21620_09.xhtml#_idTextAnchor411),
    *Moving to the Cloud*, we won’t use Ansible to deploy the cloud resources for
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, I would recommend using a cloud provider such as **DigitalOcean**
    ([https://www.digitalocean.com/](https://www.digitalocean.com/)) or **Linode**
    ([http://www.linode.com/](http://www.linode.com/)), both of whom support the operating
    systems we will be covering in this chapter and whose virtual machine costs start
    at around 5 USD per month.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will not cover how to launch virtual machines; if you are following
    along, please review your chosen cloud provider’s documentation. Additionally,
    for the full working code, please see the GitHub repository at [https://github.com/PacktPublishing/Learn-Ansible-Second-Edition](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: Debian and Red Hat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is where the world of Linux operating systems can get slightly confusing.
    Although we launch Ubuntu `22.04` and Rocky Linux `9` virtual machines to run
    our playbooks against, we will reference Debian and Red Hat within the playbook
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Why is that? The reason behind this lies in the lineage of Linux distributions.
    Ubuntu is a descendant of the Debian operating system, inheriting its package
    management system and many other features. Similarly, Rocky Linux is a descendant
    of Red Hat, designed to be a downstream, bug-for-bug compatible release with **Red
    Hat Enterprise** **Linux** (**RHEL**).
  prefs: []
  type: TYPE_NORMAL
- en: So, when we mention Debian and Red Hat in our playbooks, we’re referring to
    the fundamental bases from which our two operating systems, Ubuntu and Rocky Linux,
    have evolved.
  prefs: []
  type: TYPE_NORMAL
- en: In practical terms, the playbook code will often check the underlying distribution
    type to determine how to proceed with specific tasks. For example, the commands
    to install a software package on a Debian-based system such as Ubuntu might differ
    from those on a Red Hat-based system such as Rocky Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Debian-based systems use the Debian package management system, with `dpkg` as
    the core utility, and often utilize either `apt` or `apt-get`, or in some cases
    all of them, for user-friendly interactions.
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat-based systems employ the RPM package management system, using `rpm`
    as the core utility, often complemented by `yum` or its successor `dnf` for a
    more user-friendly interface for managing packages.
  prefs: []
  type: TYPE_NORMAL
- en: There are other differences, such as Debian and Red Hat-based systems that have
    different directory structures and configuration file locations, which can affect
    the system administration that we must consider in our playbook roles.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest, at the time of writing, and most relevant difference between the
    two is licensing.
  prefs: []
  type: TYPE_NORMAL
- en: Debian is known for its strict adherence to free software principles. In contrast,
    Red Hat-based systems may incorporate more proprietary or closed-source software,
    especially in the case of Red Hat Enterprise Linux’s commercial enterprise distribution
    of Red Hat.
  prefs: []
  type: TYPE_NORMAL
- en: This came to a head in June 2023 when Red Hat altered its terms, ceasing the
    public availability of RHEL’s source code and restricting access solely to customers.
  prefs: []
  type: TYPE_NORMAL
- en: This move impacted downstream projects, relying on RHEL source code to create
    compatible distributions such as Rocky Linux. The change means that only customers
    bound by contracts preventing code sharing can access RHEL source code, aligning
    with the GPL license’s terms, which mandates source code availability only for
    binary users, who are, essentially, the paying customers in this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the fallout from this change is still being felt, and
    the dust is still settling, although it does seem like distributions such as Rocky
    Linux have found ways of being compliant; see the *Further reading* section at
    the end of this chapter for more information.
  prefs: []
  type: TYPE_NORMAL
- en: So, back to our playbook, by referencing either (or both) Debian and Red Hat
    in the code, we create more adaptable roles that can handle different Linux distributions
    and their derivatives consistently.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-distribution considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Looking at each of the Ansible built-in modules used in the three roles, `stack_install`,
    `stack_config`, and `wordpress`, we are using a few that will not work on our
    newly introduced Rocky Linux box.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s quickly work through each module and consider what we need to change or
    take into account when targeting two different distributions.
  prefs: []
  type: TYPE_NORMAL
- en: The Stack Install role
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This role uses the following built-in modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible.builtin.apt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.apt_key`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.apt_repository`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use these modules to update our operating system, add the NGINX mainline
    repository, and install all the packages we require for our WordPress installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'As these modules all deal with package management, we won’t be able to reuse
    any of these tasks, meaning that we will need to split the role into two parts:
    one that deals with Debian-based systems and the other for Red Hat systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we won’t be able to reuse the variables, as there are subtle differences
    in the package names between the two distributions.
  prefs: []
  type: TYPE_NORMAL
- en: This means that our best approach to this role is to use two different sets
    of tasks depending on the distribution Ansible is targeting. Luckily, there are
    built-in Ansible modules that make this approach simple. After reviewing the modules
    in the two remaining roles, we will cover these in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Stack Config role
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This role is slightly different from the previous one in that we don’t need
    to split the tasks into two here; most of the tasks will work across both our
    Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that the tasks which make use of the following modules won’t need
    any changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible.builtin.group`: Creating a group is the same for both distributions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.user`: Creating a user is the same for both distributions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.template`: This only renders and copies files to the target
    hosts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.file`: This only copies files to the target hosts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.copy`: This only copies files on the target hosts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.lineinfile`: This only searches for text and, if required,
    updates it within the files on the target hosts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.service`: This is supported on both distributions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.stat`: Only checks for the presence of a file on the host’s
    file system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.mysql_user`: As this interacts with the database service,
    it is distribution agnostic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible.builtin.mysql_db`: As with the previous task, it interacts with the
    database service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This list is mostly true; however, the file paths will change between the two
    distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Still, as we already mentioned in [*Chapter 5*](B21620_05.xhtml#_idTextAnchor253),
    *Deploying WordPress*, when we looked at the variables for the Stack Config role,
    we are referencing files that contain the variables we want to load into the playbook
    run, so we will need to load in an additional set of variables for the distribution
    as well as the standard ones.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to execute some additional tasks as part of adding the second distribution.
    Some Red Hat distributions come with a firewall enabled out of the box and SELinux
    enabled, so we will need to perform some Red Hat-only tasks at the end.
  prefs: []
  type: TYPE_NORMAL
- en: '**SELinux**, or to give it its full name, **Security-Enhanced Linux**, is a
    security module of the Linux kernel that provides a mechanism for supporting access
    control security policies.'
  prefs: []
  type: TYPE_NORMAL
- en: However, we can keep these tasks within the `main.yml` file rather than loading
    a different set of tasks by getting creative with the conditions when calling
    the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The WordPress role
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the previous two roles have already installed and configured everything
    that we need to run our WordPress installation, this role is entirely distribution
    agnostic, and we don’t need to make any changes to the tasks within the role.
    If you remember, in [*Chapter 5*](B21620_05.xhtml#_idTextAnchor253), *Deploying
    WordPress*, when we ran the command to configure WordPress, we set the following
    fact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This used the facts gathered by Ansible when first connecting to the host to
    figure out which distribution and version we were connecting to; we will expand
    on this logic as we dive deeper into the changes outlined in this section for
    the Stack Install and Config roles.
  prefs: []
  type: TYPE_NORMAL
- en: Adapting the roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, how do we build the logic into our roles to execute only certain parts of
    them on different operating systems? As we know, the package names will be different.
    How do we define different sets of variables per operating system?
  prefs: []
  type: TYPE_NORMAL
- en: Operating system family
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have looked at the `ansible.builtin.setup` module in [*Chapter 1*](B21620_01.xhtml#_idTextAnchor017),
    *Installing and Running Ansible*; this module gathers facts about our target hosts.
  prefs: []
  type: TYPE_NORMAL
- en: One of these facts is `ansible_os_family`; this tells us the type of operating
    system we are running.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, I have launched two hosts, one running Ubuntu `22.04`,
    and the second running Rocky Linux `9` as its operating system. I have created
    an inventory file which looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The preceding inventory file is only for illustrative purposes; if you are following
    along, you will need to update it to consider your host IP addresses, user names,
    and private key file locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the hosts up and running, we can target each one individually using the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Running these two commands should show you something like the following terminal
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Checking the values of ansible_os_family](img/B21620_06_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Checking the values of ansible_os_family
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, each of the two hosts correctly returns the operating system
    family.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can take this one step further and update our commands to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Checking the values of ansible_distribution](img/B21620_06_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Checking the values of ansible_distribution
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this gives much more detail on the operating system itself and
    not just the flavor of Linux; it is based on `RedHat` or `Debian`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will target both hosts within the same Ansible run and return a terminal
    output that should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Checking the values of ansible_distribution in a single run](img/B21620_06_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Checking the values of ansible_distribution in a single run
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can identify which operating system is in use on each host, we can
    start adapting the roles to consider the changes we discussed in the previous
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Stack Install role
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first part of the role we will look at is the content of `roles/stack_install/tasks/main.yml`.
    The previous version of the role contained all of the tasks to install the repos
    and packages for our Ubuntu server; all of those tasks should be moved to a file
    called `roles/stack_install/tasks/Debian.yml`, and a new file called `roles/stack_install/tasks/RedHat.yml`
    should have been created; finally, we should update `roles/stack_install/tasks/main.yml`
    so that it has the following contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the three task loads in the variables file for the operating system
    we are targeting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this uses the `ansible.builtin.include_vars` module to load
    variables from the variables path within the roles folder, which would be `roles/stack_install/vars/`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, it loads a file called `RedHat.yml` or `Debian.yml`; these two file names
    are populated using the `{{ ansible_os_family }}` variable in the task, meaning
    that the variables relevant to the operating system being targeted are loaded.
  prefs: []
  type: TYPE_NORMAL
- en: If you look in the repository on GitHub, you will notice that, although being
    subtle, there are differences in the packages listed in the `system_packages`,
    `extra_packages`, and `stack_packages` package lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next task uses the `when` condition when calling the `ansible.builtin.import_tasks`
    module, first of all for the Debian-based system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In our case, this means that when the Ansible playbook is targeting a Debian-based
    host, it will load the tasks from `roles/stack_install/tasks/Debian.yml`, which
    are essentially the same as those we discussed at length in [*Chapter 5*](B21620_05.xhtml#_idTextAnchor253),
    *Deploying WordPress*, and execute them against the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next task does the same function, but this time for Red Hat-based hosts,
    using the tasks listed in the `roles/stack_install/tasks/RedHat.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `roles/stack_install/tasks/RedHat.yml` file contains three tasks, which
    are pretty much the same as the `Debian.yml` tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start the role by running an update of all the installed packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this uses the `ansible.builtin.dnf` modules rather than the
    `ansible.builtin.apt` one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we have the task that installs the NGINX mainline repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Although this uses the `ansible.builtin.yum_repository` module, DNF will pick
    up the new repo once it is added. This is also the only task we need to run to
    add the repo, and adding a Yum repository is very different from adding a repository
    on a Debian-based system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final task for Red Hat-based systems is to install all the packages, including
    the NGINX one from the mainline repository we just enabled by, again, calling
    the `ansible.builtin.dnf` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, with a little change to the logic in which the tasks are being
    called, it was relativity painless to update the role to target Debian and Red
    Hat distributions.
  prefs: []
  type: TYPE_NORMAL
- en: For the next role we need to change, the Stack Config role, we will take a slightly
    different approach to considering the different operating system distributions.
  prefs: []
  type: TYPE_NORMAL
- en: The Stack Config role
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from a single task at the start and half a dozen at the end, the bulk
    of this role remains as-is.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some changes to the default variables file in the `roles/stack_config/default/main.yml`
    file; first off, the following variables are added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As I am sure you can guess from their names, these deal with SELinux and the
    Firewall.
  prefs: []
  type: TYPE_NORMAL
- en: The next change is to move the `mysql_socket_path`, `php_fpm_path`, `php_ini_path`,
    and `php_service_name` variables to distribution-specific files at `roles/stack_config/vars/Debian.yml`
    and `roles/stack_config/vars/RedHat.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: As we have already discussed, one of the key differences between the two distributions
    is the paths to both the core files and the configuration files for the services
    we installed during the Stack Install role.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `roles/stack_config/vars/Debian.yml` file, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'However, for the `roles/stack_config/vars/RedHat.yml` file, we need to define
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, at first glance, they look a little similar, but the paths and
    file names are different.
  prefs: []
  type: TYPE_NORMAL
- en: 'These files are called by a task, which is the same as we used at the start
    of the Stack Install role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: From here, all the original tasks we covered in [*Chapter 5*](B21620_05.xhtml#_idTextAnchor253),
    *Deploying WordPress*, are called and executed, ending with the task that removes
    the test MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: From here, in the role, we have the tasks that consider the additional steps
    needed to configure our Red Hat-based host, starting with configuring SELinux;
    for our role, we need to enable the policy that allows web servers to run, for
    which, on a lot of Red Hat distributions, is blocked by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'The task to do this looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `when` condition here ensures that the task is only executed
    when the `selinux.http_permissive` variable is set to `true`, and the `ansible_os_family`
    is equal to `RedHat`.
  prefs: []
  type: TYPE_NORMAL
- en: While our Debian-based system will meet the `selinux.http_permissive` condition,
    the task will be skipped on those hosts, as it doesn’t meet the second condition.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have the tasks for configuring the `firewalld` service, which is
    the default firewall on most modern Red Hat-based distributions.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Although we are using `firewall-cmd` in this section, there is an Ansible module
    that supports the firewalld service called `ansible.posix.firewalld`. As this
    is the only instance in the title that we will be targeting a Red Hat-based operating
    system with, we have, instead, used `ansible.builtin.command` to show how we can
    meet more complex conditions based on the output commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like some of the roles we have included in other chapters, configuring the
    firewall is a task we only have to do once. The first thing we will do is check
    for the presence of a file at `~/firewall-configured` and register the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to check whether `firewalld` is running, but only if it’s a RedHat
    distribution. To do this, we need to run the `firewall-cmd --state` shell command
    and the output result is registered in the `fireweall_status` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, as the remaining tasks could also be executed on a Debian-based host,
    we need to take that into account as we now have a variable containing the `stdout`
    of the command we ran called `fireweall_status`, which won’t be present, resulting
    in an error that would stop playbook execution on a Debian-based host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding task, if `ansible_os_family` is `Debian`,
    we are setting the `fireweall_status.stdout` variable to `notrunning`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have all of the information we need to make a decision on whether we
    should run the commands to configure the firewall, the following conditions need
    to be met:'
  prefs: []
  type: TYPE_NORMAL
- en: The `firewall-cmd --state` command returns `running`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The operating system is `RedHat`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `~/firewall-configured` file does not exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If all three of these conditions are met, which are defined in the following
    task, then the commands to configure the firewall to open and allow traffic on
    port `80` are executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The final task then creates the `~/firewall-configured` file so that the commands
    are not executed again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: It does this on both distributions, as it doesn’t matter if it is set on Debian-based
    systems, and we don’t want to run the commands regardless; on Red Hat systems,
    it will mean that any subsequent executions of the playbook will not be able to
    meet the three conditions where the commands are executed to configure the firewall
    service.
  prefs: []
  type: TYPE_NORMAL
- en: The WordPress role
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As already mentioned, we do not have to make any changes to this role.
  prefs: []
  type: TYPE_NORMAL
- en: Running the playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are no changes to our `site.yml` file, meaning that we need to run the
    following command to run the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'There is way too much output to cover here, but I will include some of the
    highlights from the playbook execution, starting with the gathering of the facts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that Ansible knows about our two hosts, it makes a start on running the
    tasks; here are the updated ones from the Stack Install role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this was the `apt` one, and the `dnf` one looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, moving onto the Stack Config role, this is where tasks are being run on
    both distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To update the firewall on just the Red Hat-based distribution, we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we complete the playbook run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'All of which means that I should now have two WordPress installations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – WordPress running on Ubuntu 22.04](img/B21620_06_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – WordPress running on Ubuntu 22.04
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – WordPress running on Rocky Linux 9.2](img/B21620_06_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – WordPress running on Rocky Linux 9.2
  prefs: []
  type: TYPE_NORMAL
- en: While the preceding screens aren’t the most exciting of websites, as you can
    see, we have WordPress up and running on two different operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, if you have been following along, don’t forget to delete any
    resources you have deployed to run your playbooks against.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have adapted the WordPress installation playbook we wrote
    in [*Chapter 5*](B21620_05.xhtml#_idTextAnchor253), *Deploying WordPress*, to
    target multiple operating systems. We did this by using Ansible’s built-in auditing
    module to determine which operating system the playbook is running against and
    running only the tasks that will work on the two target distributions.
  prefs: []
  type: TYPE_NORMAL
- en: While targeting multiple Linux distributions is one use for the approach we
    have taken with the conditions we have been using, I am sure that you will already
    have some ideas on how you could use some of the logic we used in your projects,
    such as bootstrapping different software based on the role on a virtual machine
    host, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this approach is beneficial when publishing your roles to Ansible
    Galaxy, as discussed in [*Chapter 2*](B21620_02.xhtml#_idTextAnchor080), *Exploring
    Ansible Galaxy*, by making the operating system agnostic.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed so far that we have been targeting Linux virtual machines;
    in the next chapter, we will look at Ansible support for Windows-based operating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Red Hat Enterprise** **Linux**: [https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux](https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debian**: [https://www.debian.org/](https://www.debian.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ubuntu**: [https://ubuntu.com/](https://ubuntu.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rocky** **Linux**: [https://rockylinux.org/](https://rockylinux.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Register**, *Red Hat strikes a crushing blow against RHEL* *downstreams*:
    [https://www.theregister.com/2023/06/23/red_hat_centos_move/](https://www.theregister.com/2023/06/23/red_hat_centos_move/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Ansible Posix Firewalld** **Module**: [https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_module.html](https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_module.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
