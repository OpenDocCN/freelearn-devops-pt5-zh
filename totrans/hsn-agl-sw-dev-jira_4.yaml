- en: Working with Reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we are going to learn about versions and releases—what they
    are and how they're different from each other. We'll talk about how to read burndowns,
    Sprint reports, and velocity charts to determine whether or not your team is doing
    well. We will take a look at releasing epic burndowns as well as versions and
    epic reports, which give us the ability to do forecasting, which is very powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Versions and releases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burndown report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sprint report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Velocity chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release and epic burndowns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version and epic reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Versions and releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with versions and releases. In this section, we're going to learn
    about what versions and releases are and how they interact with one another. We're
    going to talk about how to create and manage these versions, how to assign work
    to two versions, how to perform a release, and then finally how to view the contents
    of a release once we've made one.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we talk about versions and releases, versions come from the concept of
    software. We''re all familiar with major and minor versions of a software, for
    example, Version 2.0 versus Version 2.1\. They really represent a large amount
    of value, so that''s a way to think about it: a version represents a chunk of
    value that''s being deployed or released. Versions can be released, so once we''ve
    determined what''s in a version, and we complete that version, then we can release
    it, and then that version becomes a release. They''re the same thing—just one
    is pre-deployment and one is post-deployment. Once a version has been released,
    we can view the contents of that version as release notes, so we''ll take a look
    at that too.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s hop over to JIRA and take a look at our Second Project. In the Backlog,
    we can see that we have VERSIONS. We can actually have a look at these versions
    by clicking on them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, this is where all our bot versions
    will be stored. We mentioned before that a version is a release before it''s been
    released; they''re the same thing. Let''s go under Releases and have a look at
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see in the preceding screenshot that we have the version Name, a Start
    date, the Release date, and a Description. We will make a version and we''ll call
    it `test version`. Our Start date and Release date are optional, but let''s go
    ahead and write `test version` in the description, as shown in the following screenshot.
    Then, we''ll click  on Add:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have the option to look at Released, Unreleased, and Archived versions.
    We also have our test version. We can create another one if we like. In the following
    screenshot, we can see that we have the ability  to Release, Archive, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we go back to our Backlog, we can see that if we click on the VERSIONS tab
    on the left, as we can see in the following screenshot, we actually have our test
    version. We can see the number of Issues, Completed, Unestimated, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can actually take two stories and drag them in. If we do that, we can see
    in the following screenshot that these stories are now a part of the test version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we go under Releases again, we can take a look at the version. We can see
    in the following screenshot that there are 2 issues in this version, the two that
    we added, and there are 0 in Issues Done, 0 in In Progress, and 2 issues in To
    Do. Once we''re done with this, we can actually hit Release and release this item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will go back to the Backlog and we''ll put the other three stories into VERSIONS.
    This means that we now have five issues. We''ll go back to Releases and then we''ll
    go ahead and release our version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, we''ve released the items, we can
    see the item in progress, and we can see that some are in the to do list. If we
    go to our Release notes, then we can see what was contained within our version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Release notes
  prefs: []
  type: TYPE_NORMAL
- en: Burndown report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to talk about the burndown report. We've spent a little time previously
    looking at the burndown report in regards to how we use it during running a Sprint
    iteration, and how we use it with our team. But in this section, we're going to
    talk more specifically about the report itself and how we read it, and then what
    kinds of data we can use for a burndown report.
  prefs: []
  type: TYPE_NORMAL
- en: As we already know, burndown is used to measure progress within an iteration
    and helps us understand whether we are on track or off track from our ideal state.
    In a burndown, the vertical axis represents the total amount of work that exists
    inside of that iteration, and the horizontal axis represents time.
  prefs: []
  type: TYPE_NORMAL
- en: Burndowns tell stories. The more we look at them, the more we understand what
    may or may not have happened during an iteration, and we get pretty good at telling
    the story from looking at those burndowns. In a burndown, we can burn down all
    kinds of things, so we can burn down points, we can burn down hours, we can burn
    down risks, and there's other things too.
  prefs: []
  type: TYPE_NORMAL
- en: Burndown example 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll now take a look at how to set these things up in JIRA. Let''s look at
    this first example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Burndown example 1
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we can see on the vertical axis that we have **STORY POINTS**.
    In this iteration, we've got about 36 story points at the beginning of this Sprint.
    We can see at the end that we actually want to burn down two 0 story points, so
    ideally we're handling all of the work that was committed to in this iteration.
    On the bottom, we can see that we have **TIME**. As we can see, this would be
    a two-week Sprint, and we can see that as we go through time, the ideas that we
    burn down makes the story points go down to zero. The gray line represents the
    **Ideal** scenario, so, assuming that the work is being sorted through correctly,
    we want to be close to that gray line, as this would show the pattern that we're
    looking for. The gray bars in the preceding graph, on the other hand, represent
    a **Weekend**, or a time that the team is not working, and so we can see that
    they're flat because ideally we're not working on the weekends. We can also see
    that there's a blue check box in the upper right-hand side that says **Show Non-Working
    Days**. We can uncheck that and get rid of those weekends if we don't want to
    look at them.
  prefs: []
  type: TYPE_NORMAL
- en: Burndown example 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll be talking about how burndowns can tell us a story about the Sprint.
    Let''s take a look at the following Burndown example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Burndown example 2
  prefs: []
  type: TYPE_NORMAL
- en: One of the things that we want to keep an eye on, as we can see at the beginning
    of this particular Sprint, is that we started with 25 story points, and we didn't
    quite burndown to zero. As we can see in the preceding screenshot, there's a little
    hump in red, and this hump is caused by work being added to the Sprint once it's
    already been started.
  prefs: []
  type: TYPE_NORMAL
- en: Burndown report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at JIRA—we want to have a look at a couple of things. First
    of all, the way to get to a burndown is to go to Reports. Burndown Chart is the
    first item that we''ll see, and this is where we can get to our burndown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: All reports
  prefs: []
  type: TYPE_NORMAL
- en: 'The other thing we want to talk a little bit about is burning down other values.
    If we go back to our Backlog in the upper right corner, we can see that we have
    our Board settings, so we''ll click that, and then under our SETTINGS, we''ve
    got Estimation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: And we can see in the preceding screenshot, we're estimating in story points,
    but we've also got the ability to estimate in original time as well. Then, we
    can use this time tracking so that instead of seeing story points on that vertical
    axis, we'll actually see hours, and so we can burndown hours. As we move through
    the Sprint items, let's say we've got an item that started with 10 hours, we can
    then update that value to be, say, 8 hours or 6 hours long, and it will actually
    burn down the amount of hours as we move through the Sprint.
  prefs: []
  type: TYPE_NORMAL
- en: Sprint report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to talk about the Sprint report. We'll talk about
    what it is, and we'll talk about how to read it. In the Sprint report, there's
    a summary of the Sprint iteration. It's going to show us the burndown, the work
    that's been completed, the work that wasn't completed, and any work that was added
    and removed during the iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at JIRA, and get more information about a Sprint report.
    Do we remember the demo project that we used? For going into reports, we can click
    on Reports on the left, and then we can take a look at our Sprint report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Sprint report
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that our burndown is not going to be beautiful because this was
    a one-day Sprint. Normally, the burndown would be more appropriate based on the
    iteration length of our we Sprint. But let's pay attention to the bottom. As we
    can see in the preceding screenshot, we've got the Completed Issues (items that
    were completed during this Sprint). If we look at any issues that were added after
    the Sprint started, we'll notice that they have an asterisk by them, which allows
    us to see any items that came in that were not part of the original commitment.
    We can also see items that were not completed, so SP-7 was not completed during
    this Sprint. We can also see any items that were removed from the Sprint. In total,
    we've got completed items, we've got added items, we've got removed items, and
    then anything not completed. Of course, we also have a Sprint name and we've got
    the date range for that Sprint as well.
  prefs: []
  type: TYPE_NORMAL
- en: Velocity chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to talk about the velocity chart. The velocity
    chart is very valuable. First, we'll talk about what it is, how to read it, and
    then we're going to talk about how to use our past velocity to plan our future
    commitments.
  prefs: []
  type: TYPE_NORMAL
- en: Velocity chart example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at an example of a velocity chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Velocity chart
  prefs: []
  type: TYPE_NORMAL
- en: To orient us to the preceding chart, let's take a look at the different elements.
    The gray bars represent what we've committed to in our Sprint, and we can see
    that this is measured in **Story Points**. In this example, we can see that in
    **Sprint 3**, we've actually committed to **25** story points. The green bar represents
    what people created, and so we've completed **25** story points, and we've met
    **100** percent of our commitment. That's great! We can also see some examples
    where the gray bar is lower than the green bar, which means we've committed, but
    we've actually completed even more than we committed, which is even better.
  prefs: []
  type: TYPE_NORMAL
- en: If we look at **Sprint 5**, it doesn't have a commitment, so there may have
    been some sort of data problem there, or there was no commitment and the Sprint
    was started without a commitment in place, which means we would probably see a
    burn up when Sprint work was added after the beginning of the iteration. We have
    already talked about reports telling a story; this report tells a different story,
    which is interesting. We can see that our velocity is actually dropping, which
    would definitely be a cause for alarm and it'd be something to talk about with
    our Scrum master or with the team if we're looking at this report. It's important
    to get some information about what's going on and use this to gather some knowledge
    about what's going on with this project. That was the velocity chart.
  prefs: []
  type: TYPE_NORMAL
- en: Release and epic burndowns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to talk about release and epic burndowns, how important
    they are, and how we can use them to give us some insight into how things are
    going. We're going to learn about what release and epic burndowns are, how to
    read these burndown reports, and how to use these reports for forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: Release burndown example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to show an example of a release burndown.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that it releases a version. Essentially, it's a version that's
    been deployed. An epic is also a container of work.
  prefs: []
  type: TYPE_NORMAL
- en: Recall to our backlog. A release is generally larger than an epic, so an epic
    would be a large story that spans multiple Sprints, but the same concepts apply,
    and so when we're looking at an epic burndown report, it's going to be the same
    as a release burndown report, but probably smaller. However it will allow us to
    project when that epic might be completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at this release burndown. We want to familiarize it with
    the different elements of this report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Release burndown example
  prefs: []
  type: TYPE_NORMAL
- en: First of all, what we're seeing in the first column is our estimate of the work
    that's contained within this version, which will eventually be our release. We
    can see that it has **184** points. The thing that's interesting about this report,
    in this specific example, is that we have **28%** of the work that's unestimated,
    which means that it's hidden. There's **20%** of the issues that are contained
    within that do not have story point estimates, which means that our original scope
    is actually larger than the **184**, but we don't have that work sized, which
    means that that would be very important to go and make sure that all of the work
    is sized so that it's all contained within our forecast right away. As we said
    before, those **184** points represent our original scope, and so that medium
    blue bar represents the original scope of the version at the time of creation.
    The dark blue in the preceding example, plus **32** points from **Sprint 2**,
    represents the new scope. This is work that was added in this iteration to this
    version and is now part of this release. We can see that the green bar represents
    work that's been completed, so in **Sprint 2**, we finished **46** points of the
    original scope and added **32** points. We still have **128** points of the original
    scope remaining. Given this, we can see that we are starting to establish a velocity.
    We know that this team's velocity is **45** points per Sprint, and, based on that,
    we can see the dashed line and where we are today. We know that we have **50**
    story points remaining in the scope of this version. This tells us that we've
    got just over a Sprint worth of work, so essentially two Sprints remains. If our
    two Sprints are two weeks each, then we can see that we have essentially one month
    remaining before this version will be available for release, and that gives us
    the ability to forecast.
  prefs: []
  type: TYPE_NORMAL
- en: Version and epic reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section about reporting, we're going to talk about version and epic
    reports. In the previous section, we talked about release and epic burndowns,
    and we're going to get a similar kind of view in this report, but it's a different
    look, with slightly different information. In this section, we're going to learn
    about what version and epic reports are. Again, they're very similar.
  prefs: []
  type: TYPE_NORMAL
- en: A version report is large and contains a larger piece of value and an epic is
    small. It is basically the same kind of report, but it allows us to look at a
    specific version or a specific epic, and then we get some sort of forecast as
    to when that item will be completed. We'll look at how to read a version report,
    and then we'll also look at how we can use these reports to provide a forecast.
  prefs: []
  type: TYPE_NORMAL
- en: Version report example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to look at an example version report, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Version report
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the preceding figure, we've got the work in the vertical axis
    represented in **STORY POINTS**. We can see that there's actually quite a few
    story points in the preceding report, because usually a version has a lot of functionality
    built into it. We can also see that the horizontal axis represents **TIME**. There's
    a red line in the report which represents the amount of unestimated work as it
    goes up and down, as we move through this version. We can see from the blue line
    that this version started in January, we can see **Today**, which is represented
    by a dotted line, and we can see that we have a projected completion date. Some
    other things to note is the completed date is a cone shape, and that there's an
    optimistic date a little bit to the left of that projected completion date, and
    a little bit to the right of that is a pessimistic date.
  prefs: []
  type: TYPE_NORMAL
- en: We actually have an optimistic and pessimistic release date and projected based
    on the actual velocity of the team and the work that's included inside of that
    version. This value is actually dynamically generated as we move through time.
    If we remove the scope from this version, this will pull the date in and it will
    actually deliver earlier, and if the team slows down or if we add more scope,
    then that date will get pushed out. The closer we get to the actual release date
    (the projected completion date), the tighter that cone gets until there's no more
    cone left at all. When we first started in February or March, we'd have a much
    broader wider cone, given the fact that there's a lot of variables that could
    affect that completed date. This gives us a useful ability to look at this version
    over time, and figure out what that completion date might look like, and do some
    things very far ahead that would allow us to affect that. Should we bring the
    team together into one room, should we add more people, more to resources to the
    project, should we change the scope, and so on, we've got lots of choices assuming
    we've got a good view of what's coming and what lies ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That brings us to the end of this chapter. In this chapter, we learned about
    what versions and releases are, what iteration release epic burndown reports have
    and how we should read them, what a Sprint report is, the data that's inside a
    Sprint report and how we can read it, what a velocity report looks like and why
    it's important for planning future Sprints, what version and epic reports are
    and how to read them, and then we also talked about version and epic reports and
    used those to provide forecasts for when our version will be completed.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to talk about searching and filtering.
  prefs: []
  type: TYPE_NORMAL
