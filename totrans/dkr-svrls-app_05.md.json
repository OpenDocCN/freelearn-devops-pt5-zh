["```\n$ curl -LSs https://raw.githubusercontent.com/fnproject/cli/master/install | sh\n```", "```\n$ fn\nfn 0.4.43\n\nFn command line tool\n\nENVIRONMENT VARIABLES:\n FN_API_URL - Fn server address\n FN_REGISTRY - Docker registry to push images to, use username only to push to Docker Hub - [[registry.hub.docker.com/]USERNAME]\n\nCOMMANDS:\n...\n```", "```\n$ fn start\n\ntime=\"2018-03-17T08:48:39Z\" level=info msg=\"Setting log level to\" level=info\ntime=\"2018-03-17T08:48:39Z\" level=info msg=\"datastore dialed\" datastore=sqlite3 max_idle_connections=256\ntime=\"2018-03-17T08:48:40Z\" level=info msg=\"agent starting cfg=&{MinDockerVersion:17.06.0-ce FreezeIdle:50ms EjectIdle:1s HotPoll:200ms HotLauncherTimeout:1h0m0s AsyncChewPoll:1m0s MaxResponseSize:0 MaxLogSize:1048576 MaxTotalCPU:0 MaxTotalMemory:0 MaxFsSize:0}\"\ntime=\"2018-03-17T08:48:40Z\" level=info msg=\"no docker auths from config files found (this is fine)\" error=\"open /root/.dockercfg: no such file or directory\"\n\n ______\n / ____/___\n / /_ / __ \\\n / __/ / / / /\n /_/ /_/ /_/\n v0.3.381\n\ntime=\"2018-03-17T08:48:41Z\" level=info msg=\"available memory\" availMemory=12357627495 cgroupLimit=9223372036854771712 headRoom=1373069721 totalMemory=13730697216\ntime=\"2018-03-17T08:48:41Z\" level=info msg=\"sync and async ram reservations\" ramAsync=9886101996 ramAsyncHWMark=7908881596 ramSync=2471525499\ntime=\"2018-03-17T08:48:41Z\" level=info msg=\"available cpu\" availCPU=4000 totalCPU=4000\ntime=\"2018-03-17T08:48:41Z\" level=info msg=\"sync and async cpu reservations\" cpuAsync=3200 cpuAsyncHWMark=2560 cpuSync=800\ntime=\"2018-03-17T08:48:41Z\" level=info msg=\"Fn serving on `:8080`\" type=full\n```", "```\n$ docker ps --format=\"table {{.ID}}\\t{{.Names}}\\t{{.Ports}}\"\nCONTAINER ID    NAMES       PORTS\nab5cd794b787    fnserver    2375/tcp, 0.0.0.0:8080->8080/tcp\n```", "```\n$ tree\n.\n└── data\n ├── fn.db\n └── fn.mq\n\n1 directory, 2 files\n```", "```\n$ fn apps list\nno apps found\n```", "```\n$ fn apps create demo\nSuccessfully created app: demo\n\n$ fn apps list\ndemo\n```", "```\n$ fn init --runtime java hello\nCreating function at: /hello\nRuntime: java\nFunction boilerplate generated.\nfunc.yaml created.\n```", "```\n$ fn build\nBuilding image hello:0.0.1 \nFunction hello:0.0.1 built successfully.\n\n$ fn deploy --app demo --registry chanwit\nDeploying hello to app: demo at path: /hello\nBumped to version 0.0.2\nBuilding image chanwit/hello:0.0.2 \nPushing chanwit/hello:0.0.2 to docker registry...The push refers to repository [docker.io/chanwit/hello]\n07a85412c682: Pushed \n895a2a3582de: Mounted from fnproject/fn-java-fdk \n5fb388f17d37: Mounted from fnproject/fn-java-fdk \nc5e4fcfb11b0: Mounted from fnproject/fn-java-fdk \nae882186dfca: Mounted from fnproject/fn-java-fdk \naaf375487746: Mounted from fnproject/fn-java-fdk \n51980d95baf3: Mounted from fnproject/fn-java-fdk \n0416abcc3238: Mounted from fnproject/fn-java-fdk \n0.0.2: digest: sha256:c7539b1af68659477efac2e180abe84dd79a3de5ccdb9b4d8c59b4c3ea429402 size: 1997\nUpdating route /hello using image chanwit/hello:0.0.2...\n```", "```\n$ fn routes list demo\npath     image                 endpoint\n/hello   chanwit/hello:0.0.2   localhost:8080/r/demo/hello\n```", "```\n$ curl -v localhost:8080/r/demo/hello\n\n* Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> GET /r/demo/hello HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.47.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Content-Length: 13\n< Content-Type: text/plain\n< Fn_call_id: 01C8SPGSEK47WGG00000000000\n< Xxx-Fxlb-Wait: 78.21µs\n< Date: Sat, 17 Mar 2018 10:01:43 GMT\n< \n* Connection #0 to host localhost left intact\nHello, world!\n```", "```\n$ fn init --runtime go hello_go\n\nCreating function at: /hello_go\nRuntime: go\nFunction boilerplate generated.\nfunc.yaml created.\n```", "```\n$ cd hello_go\n\n$ tree .\n.\n├── func.go\n├── func.yaml\n└── test.json\n```", "```\n$ cat func.yaml\n\nversion: 0.0.1\nruntime: go\nentrypoint: ./func\n```", "```\npackage main\n\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"os\"\n)\n\ntype Message struct {\n  Name string\n}\n\nfunc main() {\n  m := &Message{Name: \"world\"}\n\n  err := json.NewDecoder(os.Stdin).Decode(m)\n  if err != nil {\n    fmt.Fprintf(os.Stderr, \"err JSON Decode: %s\\n\", err.Error())\n    os.Exit(250)\n  }\n\n  fmt.Printf(`{\"success\": \"Hello %s\"}`, m.Name);\n  os.Exit(0)\n}\n```", "```\n$ fn deploy --app demo --registry chanwit\n\nDeploying hello_go to app: demo at path: /hello_go\nBumped to version 0.0.2\nBuilding image chanwit/hello_go:0.0.2 .......\nPushing chanwit/hello_go:0.0.2 to docker registry...The push refers to repository [docker.io/chanwit\n/hello_go]\n00a6a1467505: Pushed \n96252b84ae14: Pushed \n97dedccb7128: Mounted from fnproject/go \nc9e8b5c053a2: Mounted from fnproject/go \n0.0.2: digest: sha256:8a57737bff7a8e4444921959532716654230af0534b93dc6be247ac88e4e7ef2 size: 1155\nUpdating route /hello_go using image chanwit/hello_go:0.0.2...\n```", "```\n$ fn call demo /hello_go \n\n{\"error\":{\"message\":\"container exit code 250\"}}\nERROR: error calling function: status 502\n```", "```\n$ echo '{\"Name\": \"chanwit\"}' | fn call demo /hello_go \n\n{\"success\": \"Hello chanwit\"}\n```", "```\n$ fn calls list demo \n\nID: 01C8VRGN9R47WGJ00000000000\nApp: demo\nRoute: /hello_go\nCreated At: 2018-03-18T05:15:04.376Z\nStarted At: 2018-03-18T05:15:04.738Z\nCompleted At: 2018-03-18T05:15:07.519Z\nStatus: success\n\nID: 01C8VRFE3647WGE00000000000\nApp: demo\nRoute: /hello_go\nCreated At: 2018-03-18T05:14:24.230Z\nStarted At: 2018-03-18T05:14:24.566Z\nCompleted At: 2018-03-18T05:14:27.375Z\nStatus: error\n```", "```\n$ fn logs get demo 01C8VRFE3647WGE00000000000\nerr JSON Decode: EOF\n```", "```\n$ docker network create \\\n --driver weaveworks/net-plugin:2.1.3\n --attachable \\\n --subnet 10.32.3.0/24 \\\n fn_net\n```", "```\n$ docker volume create mysql_vol\n```", "```\n$ docker run \\\n --detach \\\n --name mysql \\\n --network fn_net \\\n --network-alias mysql \\\n -e MYSQL_DATABASE=fn_db \\\n -e MYSQL_USER=func \\\n -e MYSQL_PASSWORD=funcpass \\\n -e MYSQL_RANDOM_ROOT_PASSWORD=yes \\\n -v mysql_vol:/var/lib/mysql \\\n mysql\n```", "```\n$ docker run --privileged \\\n --detach \\\n --network fn_net \\\n --network-alias fn_0 \\\n --name fn_0 \\\n -e \"FN_DB_URL=mysql://func:funcpass@tcp(mysql:3306)/fn_db\" \\\n fnproject/fnserver\n```", "```\n$ docker run --privileged \\\n --detach \\\n --network fn_net \\\n --network-alias fn_1 \\\n --name fn_1 \\\n -e \"FN_DB_URL=mysql://func:funcpass@tcp(mysql:3306)/fn_db\" \\\n fnproject/fnserver\n```", "```\n$ docker run --detach \\\n --network fn_net \\\n --network-alias fnlb \\\n --name fnlb \\\n -p 8080:8081 \\\n fnproject/fnlb:latest --nodes fn_0:8080,fn_1:8080\n```", "```\n$ docker ps --format \"table {{.ID}}\\t{{.Names}}\\t{{.Command}}\\t{{.Ports}}\"\nCONTAINER ID   NAMES     COMMAND                  PORTS\nce4f8e9bc300   fnlb      \"./fnlb --nodes fn_0…\"   0.0.0.0:8080->8081/tcp\ndae4fb892b4d   fn_1      \"preentry.sh ./fnser…\"   2375/tcp\n8aefeb9e19ef   fn_0      \"preentry.sh ./fnser…\"   2375/tcp\n67bd136c331a   mysql     \"docker-entrypoint.s…\"   3306/tcp\n```", "```\n$ docker run --detach \\\n --network fn_net \\\n --network-alias fnui \\\n -p 4000:4000 \\\n -e \"FN_API_URL=http://fnlb:8081\" fnproject/ui\n```", "```\n$ curl -X POST -d '{\"Name\":\"chanwit\"}' http://localhost:8080/r/demo/hello_go\n```", "```\n$ curl -X POST -d '' http://localhost:8080/r/demo/hello_go\n```", "```\n$ docker run --detach \\\n --name myadmin \\\n --network fn_net \\\n --network-alias myadmin \\\n -p 9000:80 \\\n -e PMA_HOST=mysql \\\n phpmyadmin/phpmyadmin\n```", "```\n$ docker ps --format \"table {{.ID}}\\t{{.Names}}\\t{{.Command}}\\t{{.Ports}}\"\nCONTAINER ID   NAMES     COMMAND                  PORTS\n70810f341284   fnui      \"npm start\"              0.0.0.0:4000->4000/tcp\nce4f8e9bc300   fnlb      \"./fnlb --nodes fn_0…\"   0.0.0.0:8080->8081/tcp\ndae4fb892b4d   fn_1      \"preentry.sh ./fnser…\"   2375/tcp\n8aefeb9e19ef   fn_0      \"preentry.sh ./fnser…\"   2375/tcp\n8645116af77d   myadmin   \"/run.sh phpmyadmin\"     9000/tcp, 0.0.0.0:9000->80/tcp\n67bd136c331a   mysql     \"docker-entrypoint.s…\"   3306/tcp\n```"]