- en: Chapter 8. Extending and Customizing Team Foundation Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"First, solve the problem. Then, write the code."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*John Johnson* |'
  prefs: []
  type: TYPE_TB
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring the TFS object model from the NuGet Gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Team Project Picker to connect to TFS programmatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the version of TFS using the TFS object model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving TFS permissions programmatically using the TFS object model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the Process Template name for a Team Project programmatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting build details programmatically using the REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of Git repositories programmatically using the REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a Work Item by ID programmatically using the REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Team field to the Product Backlog Item to an existing Team Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding multi-item select control in the Work Item form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'TFS provides integrated tooling for software application delivery and life
    cycle management. It is not uncommon for organizations to have different tools
    for managing different parts of the life cycle, for example, Jira for Agile Project
    Management, TeamCity for builds, Jenkins for release management, and ServiceNow
    for service management. Customers expect to be able to integrate and share information
    between different systems. Team Foundation Server has a fairly large ecosystem
    of tools and services it integrates with. The following screenshot shows some
    of the partners from the TFS ecosystem, you can find the complete list at [https://vsipprogram.com/Directory](https://vsipprogram.com/Directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00836.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is virtually impossible to provide out-of-the-box integration with every
    other system; to bridge the gap, TFS provides a very rich library that allows
    you to retrieve, edit, update, insert, and delete data in TFS. The API makes these
    operations secure and auditable. Today, TFS has two extensibility technologies,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00837.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s explain these two extensibility technologies in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The TFS object model**: The TFS object model supports both .NET and Java
    platforms and has been offered in the product from as early as TFS 2005\. The
    object model library has been enriched with more functionality over releases.
    Extensions built using the object model can be integrated into Visual Studio and
    Team Explorer or can be used as standalone tools. The object model has the following
    limitations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not support Team Web Portal extensibility
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not support non-Windows operating systems
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not support client-side extensions for mobile devices
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The RESTful services**: The RESTful services first debuted in TFS 2013\.
    The RESTful services are JSON-based REST services, primarily focused on bridging
    the limitations of the TFS object model. The services enable Team Web Portal extensibility,
    extensions for non-Windows platforms, and client-side extensions for mobile devices.
    The RESTful services can also be called from within the TFS object model. This
    is quite powerful as this enables you to build extensibility for features that
    do not support any extension points within the TFS object model. For example,
    Team Rooms is a web-only feature that has no extensibility points within the TFS
    object model. The Team Rooms Visual Studio Extension ([http://bit.ly/1TeNIO7](http://bit.ly/1TeNIO7))
    has been built using the Team Rooms REST APIs with the TFS object model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The TFS object model and RESTful services open up limitless opportunities for
    extensibility. While RESTful services can be used in conjunction with TFS object
    model today, the RESTful services aren''t quite ready for extending Team Web Portal
    in TFS. The RESTful services use OAuth for authentication and authorization. TFS
    does not have an OAuth token provisioning capability. As a work-around, it is
    possible to use alternate credentials for authenticating with the REST APIs. Organizations
    may be reluctant to enable alternate credentials since it requires basic authentication
    to be enabled on the instance of IIS hosting TFS. Recipes in this chapter using
    REST APIs have been implemented using alternate credentials. Follow the instructions
    here to enable alternate credentials: [http://bit.ly/1IhEQH1](http://bit.ly/1IhEQH1).'
  prefs: []
  type: TYPE_NORMAL
- en: Since TFS does not have an OAuth token provisioning capability, it is not possible
    to build Team Web Portal extensions for TFS. The OAuth token provision capability
    is expected to be released in TFS 2015 in future updates. The RESTful extensibility
    model is the same between TFS and VSTS. Since VSTS has an OAuth token provisioning
    system, you can use the RESTful services in VSTS to start building extensions
    for Team Web Portal in VSTS. The RESTful services are the foundation to the marketplace
    capability recently introduced in VSTS. It is expected that this capability will
    be available in TFS in future updates. You can learn more about the VSTS marketplace
    at [http://bit.ly/1Q6afgw](http://bit.ly/1Q6afgw).
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from covering extensibility, we''ll be learning about the possibilities
    of customization in TFS. TFS provides a customization framework that enables customization
    at the Team Project level. Customizations to Team Projects are applied through
    Process Templates. A Process Template is a collection of XML files that hold instructions
    for artifacts and the processes that need to be applied to a Team Project. To
    give you an example, the Process Template holds instructions for security groups,
    areas, iterations, Work Items, and backlogs. The template also applies the workflow
    and behavior these artifacts exhibit, for example, a Bug Work Item in CMMI template
    has a ready-for-testing state, the Bug Work Item in the Scrum Template does not.
    While TFS comes preloaded with the Scrum, Agile, and CMMI Process Templates, TFS
    supports customizing of existing Process Templates and creating new Process Templates
    to best meet the needs of your Team. A Process Template consists of nine plugins;
    each plugin executes a set of tasks during the Team Project setup. The following
    diagram illustrates the plugins and the object files that can be customized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00838.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The current Process Template structure and tooling is limited in various ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tooling**: To edit a Process Template, you need to install the Process Template
    Editor. This editor can only be installed by installing the TFS power tools ([http://bit.ly/1jJkEmt](http://bit.ly/1jJkEmt)).
    The Process Template Editor is strongly linked to the version of TFS. The editor
    can only be launched via Visual Studio. The editor does not support non-Windows
    platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complexity**: To edit a Process Template, you need to have good working knowledge
    of Process Templates and Team Projects. The Process Template Editor is rudimentary;
    it does not provide any validation or the means to test the changes being made.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintainability**: If the Process Template for a Team Project has been modified,
    TFS does not upgrade that product to the latest features automatically. Features
    need to be manually enabled on such projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To remove the limitations of the current Process Template customization tooling,
    a new process customization experience is being developed in Team Web Portal.
    The new experience will be web based to make it available on non-Windows devices.
    The new experience will simply modify the process by providing a rich guided experience
    for common tasks. The new tooling will enable Team Projects to be automatically
    updated with new functionality after upgrades. To enable this, all system fields
    in the Process Templates will be locked and won't be customizable. The new tooling
    has been released in preview in VSTS. You can learn more about it at [http://bit.ly/1OxP31n](http://bit.ly/1OxP31n).
    The new tooling is expected to be released in TFS 2015 in one of the future updates.
    The recipes in this chapter are based on customizing the Process Templates using
    the Process Template Editor.
  prefs: []
  type: TYPE_NORMAL
- en: To recap, the extensibility recipes in this chapter are based on the TFS object
    model and RESTful services with alternate credentials. The customization recipes
    in this chapter are based on the Process Template Editor. Both extensibility and
    customization are undergoing a great change. While the changes to both have been
    released in VSTS, they aren't available in TFS 2015 Update 1\. These changes are
    expected to be available in TFS 2015 in future updates.
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring TFS object model from the NuGet Gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have used the TFS object model before, you will acknowledge that acquiring
    the DLLs and the dependencies is a cumbersome process. The TFS DLLs need to be
    picked out from the install directory. The licensing framework does not allow
    the distribution of these DLLs. This means anyone working with the code either
    needs all dependencies installed or needs to manually add the DLLs into project
    references. In TFS 2013, a standalone installer was introduced that deployed all
    TFS object model binaries on the machine. While this simplified the setup, it
    did add an extra step for the developers. This complicates not only the development,
    but also the build and test process.
  prefs: []
  type: TYPE_NORMAL
- en: NuGet has become the Standard Package Manager for the Microsoft development
    platform including .NET. The NuGet client tools provide the ability to produce
    and consume packages. The NuGet Gallery is the central package repository used
    by all package authors and consumers. It seems natural to offer the object model
    as a package through NuGet. With the Team Foundation Server 2015, the object model
    can now directly be acquired through NuGet. Additionally, the licensing policies
    have been amended to allow distribution of the package. In this recipe, you will
    learn how to acquire the TFS object model through NuGet.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires Visual Studio 2015\. If you do not have Visual Studio installed,
    you can use the freely available Visual Studio Community edition available at
    [https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx](https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open Visual Studio, create a new project of type Windows Console Application,
    and name the project `asPlayPit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Solution Explorer, right-click on the project and choose **Manage NuGet
    Packages**. This will load the NuGet package search window within the Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search and add the `Microsoft.TeamFoundationServer.Client` and `Microsoft.TeamFoundationServer.ExtendedClient`
    packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing these packages will also install the dependant packages. Once the
    package installation has completed successfully, from the Solution Explorer expand
    the references section in the `PlayPit` project. You'll see that all TFSs and
    dependency DLLs have been successfully added as project reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Team Foundation Server 2015, Team Explorer is now installed as a VSIX package.
    There are two ramifications of this:'
  prefs: []
  type: TYPE_NORMAL
- en: The Team Explorer install location will likely be different for each install
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TFS assemblies are not in the **Global Assembly Cache** (**GAC**) anymore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are developing an extension, your extension will not be able to resolve
    TFS references on its own since TFS DLLs are no longer in the GAC. It is, therefore,
    recommended that you add a reference to TFS NuGet packages in your project to
    resolve these dependencies. The primary reason for moving the TFS DLLs out of
    GAC is to reduce the complexities in managing multiple versions of the product
    and their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding the packages through NuGet creates a `package` folder at the solution
    level. All packages added are also stored in this folder. As you can see in the
    following screenshot, the TFS and related packages that were installed as part
    of this recipe have been downloaded into this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00839.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When checking in code, these packages will be checked into source control too.
    The benefit here is that anyone working on the code does not have to worry about
    the references. The **auto restore NuGet Packages** option can be enabled at the
    solution level. This will restore all NuGet references on other developer machines
    at compile time (this does not require packages to be checked into source control).
    It also applies during the build and test workflow, and significantly reduces
    the overhead on development setup. The license terms have been changed so that
    you can now redistribute the TFS 2015 client OM with your application. Refer to
    [http://bit.ly/1jkoSQj](http://bit.ly/1jkoSQj) for more details on the packages,
    their content, and purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Using Team Project Picker to connect to TFS programmatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TFS object model exposes a few options for connecting to Team Foundation
    Server. The **Team Project Picker** (**TPP**) is one of the options; the advantage
    of using the project picker is that the user sees a TFS connection dialog that
    they are familiar with. The user can specify the TFS Server details and authenticate
    using this dialog. In this recipe, you'll learn how to use the TPP to authenticate
    and connect to TFS programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps in the *Acquiring TFS object model from the NuGet Gallery*
    recipe to create a project in Visual Studio and add the TFS NuGet packages to
    this project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the following code into the `Program.cs` class in the newly created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From `Main`, make a call to the `ConnectToTfsUsingTeamProjectPicker` method.
    As soon as the `tfsPp.ShowDialog()`statement is triggered, the TPP pops up. As
    illustrated in the following screenshot, the project picker allows you to configure
    the TFS server, collection, and project interactively:![How to do it...](img/image00840.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `TeamProjectPicker` class accepts the `TeamProjectPickerMode` and `DisableCollectionChange`
    as parameters. In the preceding snippet, we are forcing the `TeamProjectPicker`
    class to be launched in single-project mode, that is, only one Team Project can
    be selected. The false value is used to override, disabling the Team Project Collection
    change option available in the picker. The rest of the code is simply reading
    and storing the name of the selected Team Project in a global variable.
  prefs: []
  type: TYPE_NORMAL
- en: You can alternatively pass the `TeamProjectPicker.MultiProject` value to allow
    the user to pick multiple Team Projects. You can also disable the change project
    collection dropdown by passing the `true` value for the `DisableCollectionChange`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the version of TFS using the TFS object model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are building an extension using the TFS object model that is going to
    target multiple versions of TFS, you would most likely want to programmatically
    figure out the version of the TFS Server you are currently pointing at. Some of
    the API services introduced in the later version of TFS aren't available in earlier
    versions of TFS. Unfortunately, the API does not expose a property or function
    that will give you the exact version of TFS. In this recipe, you'll learn how
    to determine the TFS version programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps in the *Acquiring TFS object model from the NuGet Gallery*
    recipe to create a project in Visual Studio. Name the project `DetermineTFSVersion`
    and add the TFS NuGet packages to this project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy the following code into the `Program.cs` class in the newly created project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Main` method, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The server version will be printed in the console output, as shown in the following
    output:![How to do it...](img/image00841.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While the output of this program does not necessarily give you the full assembly
    version of TFS, it helps you work out the version of the product. In the following
    screenshot, you can see that the TFS version in the TFS Administration Console
    is showing up as `14.0.24706.0` while the program returns `Dev14.M89-Part7`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00841.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go through the code to understand what is being done:'
  prefs: []
  type: TYPE_NORMAL
- en: The `TfsTeamProjectCollection` class is used to initialize a new connection
    to the server. The server details in this case are passed as a URI to the class.
    There are other ways to establish a connection with the TFS Server, as discussed
    earlier in this chapter in the *Using Team Project Picker to connect to TFS programmatically*
    recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EnsureAuthenticate` method is called to invoke the authentication connection
    process if the connection hasn't already been authenticated before.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the connection has been authenticated, the `ServerVersion` property nested
    in the `ServerDataProvider` class holds the value of the TFS Server version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of the `ServerVersion` property is printed to the console using the
    console `WriteLine` method. The console's `Readkey` method is used to pause the
    console so the result of `ServerVersion` being printed to the console output can
    be read.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is an alternate approach to identify the version of TFS programmatically;
    the TFS location service returns a list of services available in TFS. The list
    and version of the services can be used to identify the version of TFS. More information
    on this approach is available at [http://bit.ly/21l0YX8](http://bit.ly/21l0YX8).
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving TFS permissions programmatically using the TFS object model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TFS administrators are often required to publish and review user permissions.
    In this recipe, you will learn how to use the TFS object model to programmatically
    generate the security groups, members, permissions, and security settings of users
    in Team Projects in TFS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps in the *Acquiring TFS object model from the NuGet Gallery*
    recipe to create a project in Visual Studio and add the TFS NuGet packages to
    this project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Connect to TFS programmatically**: As a first step, a connection to the TFS
    needs to be established. This can be done using the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Get an instance of the version control server service**: The version control
    server service exposes an interface with a set of methods to work with TFS version
    control component programmatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Application groups**: The `IGroupSecurityService` interface is used to retrieve
    a list of group membership for a Team Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This information can be retrieved through the Team Explorer by navigating into
    the **Settings** page and clicking on the **Group Membership** hyperlink. Clicking
    on the **Group Membership** hyperlink will navigate you to the security page in
    Team Web Portal. The left-hand side of the following screenshot shows the groups
    in the security page for FabrikamTFVC project and the right-hand side of the screenshot
    shows the results returned programmatically:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00842.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Get members within the application groups**: Each application group comprises
    of either users or further AD groups. The following code snippet loops through
    the members of the application groups and gets the identity of each member:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The program now not only returns the name of the group, but also the members
    in each of the nested groups:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00843.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Get the user membership settings**: The user in the application group either
    inherits the permissions or is directly assigned the permissions. The following
    code snippet uses the `GetPermissions` method in the version control service to
    work out the user membership setting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This information can be retrieved through Team Explorer by navigating into
    the **Settings** page and clicking on the **Security** hyperlink. The **Security**
    hyperlink launches the security page in Team Web Portal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00844.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Version control permissions**: Individual user permissions on version control
    can be retrieved using the `GetEffectivePermissions` method in the version control
    service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This returns the version control permission for each user in the group. As
    illustrated in the following screenshot, the user `Tarun` is a member of the `Project
    Valid Users` group and has the `Manage Branch` permission:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00845.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Getting the Process Template name for a Team Project programmatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to get the name of the Process Template used
    to create a Team Project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps in the *Acquiring TFS object model from the NuGet Gallery*
    recipe to create a project in Visual Studio and add the TFS NuGet packages to
    this project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, connect to TFS programmatically. As a first step, a connection to the
    TFS needs to be established. This can be done using the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To obtain the Process Template details for a Team Project, we need an instance
    of the `VersionControlServer` service and the `Now` instance to get `ICommonServerService`.
    The `VersionControlServer` service is used to get the project details, specifically,
    it is `AbsoluteUri` that we are after. `AbsoluteUri` for the Team Project is used
    by `ICommonServerService` to identify the project properties such as the Process
    Template name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Executing this returns the list of properties and their values. As you can
    see in the following screenshot, the `Scrum` template has been used to create
    the FabrikamTFVC Team Project. The `SourceControlGitEnabled` and `SourceControlTfvcEnabled`
    properties tell you source control capabilities in the Team Project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00846.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the Process Template Manager to download the Scrum Process Template from
    TFS. From the download location, open the `Classification.xml` file from under
    the `Classification` folder. The API basically renders the contents of `Classification.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00847.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can add more properties and values to the `Classification.xml` file and
    use this version of the template to create Team Projects. The `GetProjectProperties`
    method in the `ICommonStructureServer` service will return the newly added properties.
    In addition to this, you can use the `UpdateProjectProperties` method in `ICommonStructureService`
    to update the values of these properties.
  prefs: []
  type: TYPE_NORMAL
- en: Getting build details programmatically using the REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to get a list of builds with details in a Team
    Project using the `BuildHttpClient` REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As alluded to in the chapter introduction, Team Foundation Server 2015 does
    not yet have OAuth token provisioning capability; for this reason, the only way
    to consume the REST API is using alternate credentials. Alternate credentials
    uses basic authentication as the authentication protocol. When using basic authentication,
    the user credentials are sent to the server in plain text. This type of setup
    simply isn't acceptable in a professional environment. Follow the instructions
    at [http://bit.ly/1Nfe8e0](http://bit.ly/1Nfe8e0) to set up a self-signed certificate
    to configure SSL for TFS. With SSL, the traffic between the client and TFS is
    encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you simply want to play around with the REST API without getting into the
    complexities of the setup, then API Sandbox is a great place to start: [https://apisandbox.msdn.microsoft.com](https://apisandbox.msdn.microsoft.com).
    The API Sandbox is wired up to a sample Visual Studio Team Services account, it
    gives you pre-configured code samples to try out the capabilities offered by the
    API, you can additionally connect to your Visual Studio Team Services instance
    too. While API Sandbox does not offer the capability to connect an on-premise
    TFS instance, it allows you to call older versions of the API by specifying the
    version of the API in the version parameter in the constructed service URL. An
    alternate to the API Sandbox is Postman ([http://bit.ly/1l044iU](http://bit.ly/1l044iU)).
    Postman is available as a free extension in the Chrome store. It''s a fantastic
    utility to build, test, and document APIs faster. You can trigger all REST operations
    by directly passing the server URLs and parameters right from within Postman.
    This enables you to connect to on-premise TFS instance too; this is very useful
    to try the APIs against real data.'
  prefs: []
  type: TYPE_NORMAL
- en: Download the `RESTDemo` solution provided with the course material. The solution
    contains three projects, namely, `GetBuildDetails`, `GetGitRepos`, and `GetWorkitemById`.
    Open the `RESTDemo` solution in Visual Studio. In this recipe, we'll be going
    through the `GetBuildDetails` project to get a list of builds with details from
    a Team Project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `RESTDemo` solution, set `GetBuildDetails` as the startup project:![How
    to do it…](img/image00848.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `GetBuildDetails` project, this will launch a console, enter the TFS
    server URL, and press *Enter*:![How to do it…](img/image00849.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username and password of the user you want to connect to TFS with
    and press *Enter*:![How to do it…](img/image00850.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the project name you would like to retrieve the build details from:![How
    to do it…](img/image00851.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The console outputs the list of builds in FabrikamTFVC along with the details
    of the build, such as the name of the build definition, the build number, result,
    requested by, start time, and finish time of the build:![How to do it…](img/image00852.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll go through the code in the `GetBuildDetails` project to understand the
    working of the code. To connect and get the data from TFS, the project requires
    TFS API binaries. The project uses the `Microsoft.TeamFoundationServer.ClientNuGet`
    package to get the right binary references:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00853.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the Solution Explorer, open the `Program.cs` file in the `GetBuildDetails`
    project. The program gets the TFS Server URL, username, and password details as
    an input from the user. The password is asterisked on the console by replacing
    the entered characters into asterisk form before printing out to the console.
    An instance of `VssBasicCredential` is created with the username and password.
    This information is then passed into `BuildHttpClient`. When an instance of the
    `BuildHttpClient` class is created, the constructor takes the server URL and credentials.
    The `BuildHttpClient` object validates the connection to TFS as part of the instantiation
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `BuildHttpClient` class contains the `GetBuildsAsync` method. The Team
    Project name is passed as a parameter to the `GetBuildsAsync` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The function returns a list of build. The build entity contains all build properties,
    as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00854.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The program then loops through the list of builds and prints the properties
    to the console. You can get more details about the build REST API at [https://www.visualstudio.com/integrate/api/build/overview](https://www.visualstudio.com/integrate/api/build/overview).
  prefs: []
  type: TYPE_NORMAL
- en: Getting a list of Git repositories programmatically using the REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to get a list of Git repositories in a Team
    Project programmatically using the `GitHttpClient` REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to instructions in the *Getting ready* section of the *Getting build details
    programmatically using the REST API* recipe for setup details. Download the `RESTDemo`
    solution provided with the course material. In this recipe, we'll be going through
    the `GetGitRepos` project to get a list of Git repositories with details from
    a Team Project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `RESTDemo` solution, set `GetGitRepos` as the startup project:![How to
    do it…](img/image00855.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `GetGitRepos` project, this will launch a console. Enter the TFS Server
    URL and press *Enter*:![How to do it…](img/image00856.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username and password of the user you want to connect to the TFS with
    and press *Enter*:![How to do it…](img/image00850.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the project name you would like to retrieve the build details from:![How
    to do it…](img/image00857.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The console outputs the list of Git repositories in FabrikamGit project along
    with the details of the repositories such as its ID, name, and remote URL:![How
    to do it…](img/image00858.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll go through the code in the `GetGitRepos` project to understand the working
    of the code. To connect and get the data from TFS, the project requires TFS API
    binaries; the project uses the `Microsoft.TeamFoundationServer.ClientNuGet` package
    to get the right binary references:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00853.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the Solution Explorer open the `Program.cs` file in `GetGitRepos` project.
    The program gets the TFS Server URL, username, and password details as an input
    from the user. The password is asterisked on the console by replacing the entered
    characters into asterisk form before printing out to the console. An instance
    of `VssBasicCredential` is created with the username and password. This information
    is then passed into the `GitHttpClient`. An instance of the `GitHttpClient` class
    is created, the constructor takes the server URL and credentials. The `GitHttpClient`
    class validates the connection to TFS as part of the instantiation process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `GitHttpClient` class contains the `GetRepositoriesAsync` method. The Team
    Project name is passed as a parameter to this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The function returns a list of `GitRepository`. The `GitRepository` entity
    contains all `GitRepository` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00859.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The program then loops through the list of `GitRepositories` and prints the
    properties to the console. You can get more details about the Git REST API at
    [https://www.visualstudio.com/integrate/api/git/overview](https://www.visualstudio.com/integrate/api/git/overview).
  prefs: []
  type: TYPE_NORMAL
- en: Getting a Work Item by ID programmatically using the REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to get details of a Work Item programmatically
    using the `WorkItemTrackingHttpClient` REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to instructions in the *Getting ready* section of the *Getting build details
    programmatically using the REST API* recipe for setup details. Download the `RESTDemo`
    solution provided with the course material. In this recipe, we'll be going through
    the `GetWorkItemById` project to get the details of a Work Item.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `RESTDemo` solution, set `GetWorkItemById` as the startup project:![How
    to do it…](img/image00860.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `GetWorkItemById` project, this will launch a console, enter the TFS
    server URL, and press *Enter*:![How to do it…](img/image00861.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username and password of the user you want to connect to TFS with
    and press *Enter*:![How to do it…](img/image00850.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the Work Item ID you would like to query the API for:![How to do it…](img/image00862.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The console outputs the details of the Work Item such as the Team Project it
    belongs to, its type, title, state, and created by:![How to do it…](img/image00863.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll go through the code in the `GetWorkItemById` project to understand the
    workings of the code. To connect and get the data from TFS, the project requires
    TFS API binaries; the project uses the `Microsoft.TeamFoundationServer.ClientNuGet`
    package to get the right binary references:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00853.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the Solution Explorer, open the `Program.cs` file in the `GetWorkItemById`
    project. The program gets the TFS server URL, username, and password details as
    an input from the user. The password is asterisked on the console by replacing
    the entered characters into asterisk form before printing out to the console.
    An instance of `VssBasicCredential` is created with the username and password.
    This information is then passed into `WorkItemTrackingHttpClient`. An instance
    of the `WorkItemTrackingHttpClient` class is created, the constructor takes the
    server URL and credentials. The `WorkItemTrackingHttpClient` class validates the
    connection to TFS as part of the instantiation process. As you would have noticed,
    in this sample we did not have to ask for the Team Project name, that''s because
    Work Item IDs are scoped at the Team Project Collection level. This means a Work
    Item ID is unique at a Team Project Collection level, since the TFS Server URL
    contains the collection name this information does not need to be requested separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `WorkItemTrackingHttpClient` class contains the `GetWorkItemAsync` method.
    The Work Item ID is passed as a parameter to this method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The function returns an object of type `WorkItem`. The `WorkItem` class contains
    information about the Work Item fields along with information about the relation
    and revision:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00864.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The program then prints the values of the fields to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You can get more details about the Work Item REST API at [https://www.visualstudio.com/integrate/api/wit/overview](https://www.visualstudio.com/integrate/api/wit/overview).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Team field to the Product Backlog Item to an existing Team Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The original purpose of the Area Path field was to logically group Work Items
    based on the functional or technical area they belong to before this field got
    hijacked as the Team Backlog Path. If you intend to use the Area Path for functional
    or technical grouping of the Work Items, you will need a new field to allocate
    the Work Items to Teams within a Team Project. In this recipe, you'll learn how
    to add a Team field to a Team Project by modifying an existing Process Template.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Process Template can be downloaded using the Process Template manager. To
    do this, navigate to the Team Explorer''s **Settings** page. Select the **Process
    Template Manager** hyperlink from the **Team Project Collection** view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00865.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The out-of-the-box Process Templates in TFS have been locked for editing. This
    has been done by adding a known GUID to the Process Template. This ID helps identify
    the out-of-the-box Process Template from others. If you intend to customize a
    Process Template, then it is advisable to modify the GUID of the out-of-the-box
    Process Template to a different GUID. As illustrated in the following screenshot,
    this can be done by downloading the Process Template and chaining the GUID to
    a different value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00866.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Modifying an existing Team Project can lead to corruption of data, it is, therefore,
    advisable that you create a Test Project using the updated Process Template before
    trying out the changes highlighted in this recipe. You need to be a member of
    the Project Administrators Group to make these changes to the Team Project.
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the TFS Power Tools ([http://bit.ly/1jJkEmt](http://bit.ly/1jJkEmt)),
    this will install the Process Editor extension.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a `ProcessTemplateRecipe` directory and a new file `TeamGlobalList.xml`.
    Copy and save the following text in the `TeamGlobalList` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open Visual Studio, and launch the Process Editor from the **Tools** menu. From
    the context menu, select **Import Global List**:![How to do it…](img/image00867.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To upload the `TeamGlobalList.xml` file, navigate to the directory and select
    `TeamGlobalList.xml`. To validate the upload, choose **Open Global List** from
    the server:![How to do it…](img/image00868.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open WIT from server by selecting this option from the **Process Editor** menu.
    Select the FabrikamTFVC Team Project and the Product Backlog Item type Work Item:![How
    to do it…](img/image00869.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Process Editor launches the Product Backlog Item type Work Item in a graphical
    interface:![How to do it…](img/image00870.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **New** button is used to add a new field to the Work Item type. Click on
    **New** and enter the details as illustrated in the following screenshot:![How
    to do it…](img/image00871.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Rules** tab, click on **New**, choose **Allowed Values**. Click on
    **New** and choose the Team's global list created earlier:![How to do it…](img/image00872.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Layout** tab and create a new control for Team under the **Status
    Group** column. Configure the Team control as illustrated in the following screenshot:![How
    to do it…](img/image00873.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the preview form button to load the preview of changes in the Work
    Item form. Click on **Save** in the **Work Item Type** form to apply the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the changes, create a new Work Item of type **Product Backlog Item**.
    The form now includes the **Team** field. The changes are applied to the Work
    Item form in Visual Studio and Team Web Portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00874.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By choosing to add the field as a dimension, it now supports being reporting
    using the TFS warehouse. This is great if you intend to use this field for reporting.
  prefs: []
  type: TYPE_NORMAL
- en: The Process Templates support customization not only at the Work Item form level,
    but also at other levels such as security groups, project defaults, version control,
    and reports. MSDN has comprehensive guidance and walkthroughs on how to apply
    this customization; read more about it at [http://bit.ly/1lmwLGr](http://bit.ly/1lmwLGr).
  prefs: []
  type: TYPE_NORMAL
- en: Adding multi-item select control in the Work Item form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Natively, the Work Item forms in Team Project do not support multivalue fields.
    While there isn't native support for multivalue fields in the Process Template,
    there is an open source multivalue field control that allows you to achieve exactly
    this. In this recipe, you'll learn how to set up and use the multivalue field
    control in an existing Team Project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download and install the custom Work Item Control from CodePlex [http://witcustomcontrols.codeplex.com](http://witcustomcontrols.codeplex.com).
    The download includes a web extension and an extension for Visual Studio. The
    Visual Studio extension needs to be installed on all machines you intend to use
    the multivalue control from in Visual Studio. You do not need to install this
    control on machines where you intend to use this control in Web Portal only. You
    need to be a member of the Project Administrator Group to make these changes.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll be extending the Team Global List field set up earlier
    in the chapter in the *Adding a Team field to the Product Backlog Item to an existing
    Team Project* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch the Team Web Portal extensions console by browsing `http://tfs2015:8080/tfs/_admin/_extensions`:![How
    to do it…](img/image00875.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Install** button to upload the multivalue field control extension
    in the Web Portal. Select and add the extension from the download location:![How
    to do it…](img/image00876.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the extension once it has been uploaded. This will activate this extension
    across the TFS instance:![How to do it…](img/image00877.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Visual Studio and launch the Process Editor, choose **Open WIT from server**
    from the context menu. Connect to the FabrikamTFVC Team Project and open the Product
    Backlog Item Work Item Type. In the previous recipe, a **Team** field was added
    and associated to a control of type `FieldType`. Navigate to the **Layout** tab,
    locate the **Team** field, and change the type of the control to `MultiValueControl`.
    Click on **Save** to apply the changes:![How to do it…](img/image00878.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the changes, create a new Work Item of type Product Backlog Item using
    the Team Web Portal. As illustrated in the following screenshot, the **Team**
    field shows a checkbox next to each Team name that allows you to select multiple
    items. Select multiple values and save the changes to the Work Item. The values
    set in the Work Item can also be queried from the **Work Item Query** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00879.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will also see the multivalue selector option in the Product Backlog Item
    Work Item form when you open it in Visual Studio on a machine that has the multivalue
    selector control installed.
  prefs: []
  type: TYPE_NORMAL
