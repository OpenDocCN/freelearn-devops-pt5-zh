- en: Chapter 8. Extending and Customizing Team Foundation Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：扩展和自定义 Team Foundation Server
- en: '|   | *"First, solve the problem. Then, write the code."* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *“首先解决问题，然后再写代码。”* |   |'
- en: '|   | --*John Johnson* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*约翰·约翰逊* |'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Acquiring the TFS object model from the NuGet Gallery
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 NuGet Gallery 获取 TFS 对象模型
- en: Using Team Project Picker to connect to TFS programmatically
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用团队项目选择器程序化连接到 TFS
- en: Determining the version of TFS using the TFS object model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TFS 对象模型确定 TFS 的版本
- en: Retrieving TFS permissions programmatically using the TFS object model
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TFS 对象模型程序化检索 TFS 权限
- en: Getting the Process Template name for a Team Project programmatically
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序化获取团队项目的过程模板名称
- en: Getting build details programmatically using the REST API
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 REST API 程序化获取构建详细信息
- en: Getting a list of Git repositories programmatically using the REST API
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 REST API 程序化获取 Git 仓库列表
- en: Getting a Work Item by ID programmatically using the REST API
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 REST API 程序化根据 ID 获取工作项
- en: Adding a Team field to the Product Backlog Item to an existing Team Project
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向现有的团队项目的产品待办项中添加团队字段
- en: Adding multi-item select control in the Work Item form
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作项表单中添加多项选择控件
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'TFS provides integrated tooling for software application delivery and life
    cycle management. It is not uncommon for organizations to have different tools
    for managing different parts of the life cycle, for example, Jira for Agile Project
    Management, TeamCity for builds, Jenkins for release management, and ServiceNow
    for service management. Customers expect to be able to integrate and share information
    between different systems. Team Foundation Server has a fairly large ecosystem
    of tools and services it integrates with. The following screenshot shows some
    of the partners from the TFS ecosystem, you can find the complete list at [https://vsipprogram.com/Directory](https://vsipprogram.com/Directory):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 提供了集成的软件应用交付和生命周期管理工具。组织通常会使用不同的工具来管理生命周期的不同部分，例如，使用 Jira 进行敏捷项目管理，使用 TeamCity
    进行构建，使用 Jenkins 进行发布管理，使用 ServiceNow 进行服务管理。客户期望能够在不同的系统之间集成和共享信息。Team Foundation
    Server 有一个相当大的工具和服务生态系统，以下截图显示了 TFS 生态系统中的一些合作伙伴，你可以在 [https://vsipprogram.com/Directory](https://vsipprogram.com/Directory)
    找到完整的列表：
- en: '![Introduction](img/image00836.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/image00836.jpeg)'
- en: 'It is virtually impossible to provide out-of-the-box integration with every
    other system; to bridge the gap, TFS provides a very rich library that allows
    you to retrieve, edit, update, insert, and delete data in TFS. The API makes these
    operations secure and auditable. Today, TFS has two extensibility technologies,
    as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上不可能提供与每个其他系统的开箱即用集成；为了弥补这一差距，TFS 提供了一个非常丰富的库，允许你在 TFS 中检索、编辑、更新、插入和删除数据。该
    API 使这些操作变得安全且可审计。如今，TFS 有两种扩展技术，如下图所示：
- en: '![Introduction](img/image00837.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/image00837.jpeg)'
- en: 'Let''s explain these two extensibility technologies in detail:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细解释这两种扩展技术：
- en: '**The TFS object model**: The TFS object model supports both .NET and Java
    platforms and has been offered in the product from as early as TFS 2005\. The
    object model library has been enriched with more functionality over releases.
    Extensions built using the object model can be integrated into Visual Studio and
    Team Explorer or can be used as standalone tools. The object model has the following
    limitations:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TFS 对象模型**：TFS 对象模型支持 .NET 和 Java 平台，并且自 TFS 2005 起就已包含在产品中。随着版本的发布，对象模型库增加了更多功能。使用对象模型构建的扩展可以集成到
    Visual Studio 和 Team Explorer 中，也可以作为独立工具使用。对象模型有以下限制：'
- en: It does not support Team Web Portal extensibility
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不支持团队网站门户的扩展性
- en: It does not support non-Windows operating systems
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不支持非 Windows 操作系统
- en: It does not support client-side extensions for mobile devices
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不支持移动设备的客户端扩展
- en: '**The RESTful services**: The RESTful services first debuted in TFS 2013\.
    The RESTful services are JSON-based REST services, primarily focused on bridging
    the limitations of the TFS object model. The services enable Team Web Portal extensibility,
    extensions for non-Windows platforms, and client-side extensions for mobile devices.
    The RESTful services can also be called from within the TFS object model. This
    is quite powerful as this enables you to build extensibility for features that
    do not support any extension points within the TFS object model. For example,
    Team Rooms is a web-only feature that has no extensibility points within the TFS
    object model. The Team Rooms Visual Studio Extension ([http://bit.ly/1TeNIO7](http://bit.ly/1TeNIO7))
    has been built using the Team Rooms REST APIs with the TFS object model.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RESTful 服务**：RESTful 服务首次在 TFS 2013 中亮相。RESTful 服务是基于 JSON 的 REST 服务，主要集中在弥补
    TFS 对象模型的局限性。这些服务使团队 Web 门户的扩展性、非 Windows 平台的扩展以及移动设备的客户端扩展成为可能。RESTful 服务也可以在
    TFS 对象模型中调用。这非常强大，因为它使你能够为 TFS 对象模型中没有任何扩展点的功能构建扩展性。例如，Team Rooms 是一个仅限 Web 的功能，在
    TFS 对象模型中没有扩展点。Team Rooms Visual Studio 扩展（[http://bit.ly/1TeNIO7](http://bit.ly/1TeNIO7)）是使用
    Team Rooms REST API 和 TFS 对象模型构建的。'
- en: 'The TFS object model and RESTful services open up limitless opportunities for
    extensibility. While RESTful services can be used in conjunction with TFS object
    model today, the RESTful services aren''t quite ready for extending Team Web Portal
    in TFS. The RESTful services use OAuth for authentication and authorization. TFS
    does not have an OAuth token provisioning capability. As a work-around, it is
    possible to use alternate credentials for authenticating with the REST APIs. Organizations
    may be reluctant to enable alternate credentials since it requires basic authentication
    to be enabled on the instance of IIS hosting TFS. Recipes in this chapter using
    REST APIs have been implemented using alternate credentials. Follow the instructions
    here to enable alternate credentials: [http://bit.ly/1IhEQH1](http://bit.ly/1IhEQH1).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 对象模型和 RESTful 服务为扩展性提供了无限的机会。尽管今天可以将 RESTful 服务与 TFS 对象模型一起使用，但 RESTful
    服务尚未完全准备好用于扩展 TFS 中的团队 Web 门户。RESTful 服务使用 OAuth 进行身份验证和授权，而 TFS 并没有提供 OAuth 令牌生成能力。作为一种变通方法，可以使用备用凭据来验证
    REST API。由于需要在托管 TFS 的 IIS 实例上启用基本身份验证，组织可能会不愿意启用备用凭据。本文中的配方通过使用备用凭据实现了 REST API。请按照此处的说明启用备用凭据：[http://bit.ly/1IhEQH1](http://bit.ly/1IhEQH1)。
- en: Since TFS does not have an OAuth token provisioning capability, it is not possible
    to build Team Web Portal extensions for TFS. The OAuth token provision capability
    is expected to be released in TFS 2015 in future updates. The RESTful extensibility
    model is the same between TFS and VSTS. Since VSTS has an OAuth token provisioning
    system, you can use the RESTful services in VSTS to start building extensions
    for Team Web Portal in VSTS. The RESTful services are the foundation to the marketplace
    capability recently introduced in VSTS. It is expected that this capability will
    be available in TFS in future updates. You can learn more about the VSTS marketplace
    at [http://bit.ly/1Q6afgw](http://bit.ly/1Q6afgw).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 TFS 没有 OAuth 令牌生成能力，因此无法为 TFS 构建团队 Web 门户扩展。OAuth 令牌生成能力预计将在 TFS 2015 的未来更新中发布。TFS
    和 VSTS 的 RESTful 扩展模型是相同的。由于 VSTS 拥有 OAuth 令牌生成系统，因此你可以在 VSTS 中使用 RESTful 服务开始为
    VSTS 中的团队 Web 门户构建扩展。RESTful 服务是最近在 VSTS 中引入的市场能力的基础。预计这一能力将在未来的 TFS 更新中提供。你可以在这里了解更多关于
    VSTS 市场的信息：[http://bit.ly/1Q6afgw](http://bit.ly/1Q6afgw)。
- en: 'Apart from covering extensibility, we''ll be learning about the possibilities
    of customization in TFS. TFS provides a customization framework that enables customization
    at the Team Project level. Customizations to Team Projects are applied through
    Process Templates. A Process Template is a collection of XML files that hold instructions
    for artifacts and the processes that need to be applied to a Team Project. To
    give you an example, the Process Template holds instructions for security groups,
    areas, iterations, Work Items, and backlogs. The template also applies the workflow
    and behavior these artifacts exhibit, for example, a Bug Work Item in CMMI template
    has a ready-for-testing state, the Bug Work Item in the Scrum Template does not.
    While TFS comes preloaded with the Scrum, Agile, and CMMI Process Templates, TFS
    supports customizing of existing Process Templates and creating new Process Templates
    to best meet the needs of your Team. A Process Template consists of nine plugins;
    each plugin executes a set of tasks during the Team Project setup. The following
    diagram illustrates the plugins and the object files that can be customized:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了涵盖扩展性外，我们还将学习 TFS 中定制化的可能性。TFS 提供了一个定制框架，使得在团队项目级别上进行定制成为可能。对团队项目的定制是通过过程模板应用的。过程模板是一个包含
    XML 文件的集合，这些文件保存了需要应用于团队项目的工件和过程的指令。举个例子，过程模板中包含了关于安全组、区域、迭代、工作项和积压项的指令。模板还应用了这些工件所展现的工作流和行为，例如，CMMI
    模板中的 Bug 工作项有一个“准备测试”状态，而 Scrum 模板中的 Bug 工作项则没有。虽然 TFS 默认加载了 Scrum、Agile 和 CMMI
    过程模板，但 TFS 支持定制现有过程模板以及创建新的过程模板，以最好地满足你团队的需求。一个过程模板由九个插件组成；每个插件在团队项目设置过程中执行一组任务。下图展示了可以定制的插件和对象文件：
- en: '![Introduction](img/image00838.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/image00838.jpeg)'
- en: 'The current Process Template structure and tooling is limited in various ways:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的过程模板结构和工具存在多种限制：
- en: '**Tooling**: To edit a Process Template, you need to install the Process Template
    Editor. This editor can only be installed by installing the TFS power tools ([http://bit.ly/1jJkEmt](http://bit.ly/1jJkEmt)).
    The Process Template Editor is strongly linked to the version of TFS. The editor
    can only be launched via Visual Studio. The editor does not support non-Windows
    platforms.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具**：要编辑过程模板，你需要安装过程模板编辑器。该编辑器只能通过安装 TFS 强力工具 ([http://bit.ly/1jJkEmt](http://bit.ly/1jJkEmt))
    来安装。过程模板编辑器与 TFS 的版本密切相关。该编辑器只能通过 Visual Studio 启动。该编辑器不支持非 Windows 平台。'
- en: '**Complexity**: To edit a Process Template, you need to have good working knowledge
    of Process Templates and Team Projects. The Process Template Editor is rudimentary;
    it does not provide any validation or the means to test the changes being made.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性**：要编辑过程模板，你需要对过程模板和团队项目有深入的了解。过程模板编辑器很基础；它没有提供任何验证功能，也没有测试所做更改的方式。'
- en: '**Maintainability**: If the Process Template for a Team Project has been modified,
    TFS does not upgrade that product to the latest features automatically. Features
    need to be manually enabled on such projects.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**：如果团队项目的过程模板已被修改，TFS 不会自动将该产品升级到最新的功能。这样的项目需要手动启用新功能。'
- en: To remove the limitations of the current Process Template customization tooling,
    a new process customization experience is being developed in Team Web Portal.
    The new experience will be web based to make it available on non-Windows devices.
    The new experience will simply modify the process by providing a rich guided experience
    for common tasks. The new tooling will enable Team Projects to be automatically
    updated with new functionality after upgrades. To enable this, all system fields
    in the Process Templates will be locked and won't be customizable. The new tooling
    has been released in preview in VSTS. You can learn more about it at [http://bit.ly/1OxP31n](http://bit.ly/1OxP31n).
    The new tooling is expected to be released in TFS 2015 in one of the future updates.
    The recipes in this chapter are based on customizing the Process Templates using
    the Process Template Editor.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了去除当前过程模板定制工具的限制，正在团队 Web 门户中开发一个新的过程定制体验。这个新体验将是基于 Web 的，因此可以在非 Windows 设备上使用。新的体验将通过提供丰富的引导体验来简化常见任务的过程修改。新工具将使得团队项目在升级后能够自动更新新功能。为了实现这一点，过程模板中的所有系统字段将被锁定，无法定制。新工具已经在
    VSTS 中发布预览版。你可以在 [http://bit.ly/1OxP31n](http://bit.ly/1OxP31n) 了解更多信息。预计新工具将在
    TFS 2015 的未来更新中发布。本章中的示例基于使用过程模板编辑器定制过程模板。
- en: To recap, the extensibility recipes in this chapter are based on the TFS object
    model and RESTful services with alternate credentials. The customization recipes
    in this chapter are based on the Process Template Editor. Both extensibility and
    customization are undergoing a great change. While the changes to both have been
    released in VSTS, they aren't available in TFS 2015 Update 1\. These changes are
    expected to be available in TFS 2015 in future updates.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，本章的扩展性方案基于TFS对象模型和带有备用凭据的RESTful服务。本章的自定义方案则基于过程模板编辑器。扩展性和自定义功能正在经历巨大的变化。虽然这两者的变更已经在VSTS中发布，但它们在TFS
    2015 Update 1中不可用。预计这些变化将在未来的TFS 2015更新中提供。
- en: Acquiring TFS object model from the NuGet Gallery
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从NuGet Gallery获取TFS对象模型
- en: If you have used the TFS object model before, you will acknowledge that acquiring
    the DLLs and the dependencies is a cumbersome process. The TFS DLLs need to be
    picked out from the install directory. The licensing framework does not allow
    the distribution of these DLLs. This means anyone working with the code either
    needs all dependencies installed or needs to manually add the DLLs into project
    references. In TFS 2013, a standalone installer was introduced that deployed all
    TFS object model binaries on the machine. While this simplified the setup, it
    did add an extra step for the developers. This complicates not only the development,
    but also the build and test process.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前使用过TFS对象模型，你会认识到获取DLL及其依赖项是一个繁琐的过程。TFS的DLL需要从安装目录中提取。许可框架不允许分发这些DLL。这意味着，任何与代码一起工作的人，要么需要安装所有依赖项，要么需要手动将DLL添加到项目引用中。在TFS
    2013中，引入了一个独立安装程序，将所有TFS对象模型的二进制文件部署到机器上。虽然这简化了设置过程，但它确实增加了开发者的一步操作。这不仅复杂了开发过程，也使得构建和测试流程变得更加复杂。
- en: NuGet has become the Standard Package Manager for the Microsoft development
    platform including .NET. The NuGet client tools provide the ability to produce
    and consume packages. The NuGet Gallery is the central package repository used
    by all package authors and consumers. It seems natural to offer the object model
    as a package through NuGet. With the Team Foundation Server 2015, the object model
    can now directly be acquired through NuGet. Additionally, the licensing policies
    have been amended to allow distribution of the package. In this recipe, you will
    learn how to acquire the TFS object model through NuGet.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: NuGet已经成为Microsoft开发平台（包括.NET）的标准包管理工具。NuGet客户端工具提供了生成和使用软件包的能力。NuGet Gallery是所有包作者和消费者使用的中央包仓库。通过NuGet提供对象模型似乎是自然而然的。随着Team
    Foundation Server 2015的发布，现在可以通过NuGet直接获取对象模型。此外，许可政策已被修改，以允许软件包的分发。在本方案中，你将学习如何通过NuGet获取TFS对象模型。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires Visual Studio 2015\. If you do not have Visual Studio installed,
    you can use the freely available Visual Studio Community edition available at
    [https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx](https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本方案需要使用Visual Studio 2015。如果你没有安装Visual Studio，可以使用免费提供的Visual Studio Community版，下载地址为[https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx](https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx)。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio, create a new project of type Windows Console Application,
    and name the project `asPlayPit`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio，创建一个新的Windows控制台应用程序项目，并将项目命名为`asPlayPit`。
- en: From the Solution Explorer, right-click on the project and choose **Manage NuGet
    Packages**. This will load the NuGet package search window within the Visual Studio.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中，右键点击项目并选择**管理NuGet包**。这将打开Visual Studio中的NuGet包搜索窗口。
- en: Search and add the `Microsoft.TeamFoundationServer.Client` and `Microsoft.TeamFoundationServer.ExtendedClient`
    packages.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索并添加`Microsoft.TeamFoundationServer.Client`和`Microsoft.TeamFoundationServer.ExtendedClient`软件包。
- en: Installing these packages will also install the dependant packages. Once the
    package installation has completed successfully, from the Solution Explorer expand
    the references section in the `PlayPit` project. You'll see that all TFSs and
    dependency DLLs have been successfully added as project reference.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装这些软件包时，还会安装相关的依赖包。一旦软件包安装成功完成，在`PlayPit`项目的解决方案资源管理器中展开引用部分。你会看到所有的TFS和依赖的DLL已经成功添加为项目引用。
- en: How it works…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In Team Foundation Server 2015, Team Explorer is now installed as a VSIX package.
    There are two ramifications of this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Team Foundation Server 2015中，Team Explorer现在作为VSIX包安装。这有两个影响：
- en: The Team Explorer install location will likely be different for each install
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次安装的 Team Explorer 安装位置可能会有所不同。
- en: The TFS assemblies are not in the **Global Assembly Cache** (**GAC**) anymore
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TFS 程序集不再位于 **全局程序集缓存** (**GAC**) 中。
- en: If you are developing an extension, your extension will not be able to resolve
    TFS references on its own since TFS DLLs are no longer in the GAC. It is, therefore,
    recommended that you add a reference to TFS NuGet packages in your project to
    resolve these dependencies. The primary reason for moving the TFS DLLs out of
    GAC is to reduce the complexities in managing multiple versions of the product
    and their dependencies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发扩展，您的扩展将无法自行解析 TFS 引用，因为 TFS DLL 已不再位于 GAC 中。因此，建议您在项目中添加对 TFS NuGet
    包的引用来解决这些依赖关系。将 TFS DLL 移出 GAC 的主要原因是为了减少管理多个版本及其依赖关系的复杂性。
- en: 'Adding the packages through NuGet creates a `package` folder at the solution
    level. All packages added are also stored in this folder. As you can see in the
    following screenshot, the TFS and related packages that were installed as part
    of this recipe have been downloaded into this folder:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 NuGet 添加包会在解决方案级别创建一个 `package` 文件夹。所有添加的包也存储在该文件夹中。如以下截图所示，作为此配方一部分安装的 TFS
    及相关包已被下载到该文件夹中：
- en: '![How it works…](img/image00839.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/image00839.jpeg)'
- en: When checking in code, these packages will be checked into source control too.
    The benefit here is that anyone working on the code does not have to worry about
    the references. The **auto restore NuGet Packages** option can be enabled at the
    solution level. This will restore all NuGet references on other developer machines
    at compile time (this does not require packages to be checked into source control).
    It also applies during the build and test workflow, and significantly reduces
    the overhead on development setup. The license terms have been changed so that
    you can now redistribute the TFS 2015 client OM with your application. Refer to
    [http://bit.ly/1jkoSQj](http://bit.ly/1jkoSQj) for more details on the packages,
    their content, and purpose.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交代码时，这些包也会被提交到源代码管理中。这样做的好处是，任何处理该代码的人都不需要担心引用问题。可以在解决方案级别启用 **自动恢复 NuGet
    包** 选项。这样，在编译时，其他开发者机器上的所有 NuGet 引用都会被恢复（这不需要将包提交到源代码管理中）。它还适用于构建和测试工作流，显著减少了开发环境设置的开销。许可条款已经更改，现在您可以将
    TFS 2015 客户端 OM 与您的应用一起重新分发。有关包、其内容和用途的更多细节，请参阅 [http://bit.ly/1jkoSQj](http://bit.ly/1jkoSQj)。
- en: Using Team Project Picker to connect to TFS programmatically
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用团队项目选择器以编程方式连接到 TFS。
- en: The TFS object model exposes a few options for connecting to Team Foundation
    Server. The **Team Project Picker** (**TPP**) is one of the options; the advantage
    of using the project picker is that the user sees a TFS connection dialog that
    they are familiar with. The user can specify the TFS Server details and authenticate
    using this dialog. In this recipe, you'll learn how to use the TPP to authenticate
    and connect to TFS programmatically.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 对象模型提供了几种连接到 Team Foundation Server 的选项。**团队项目选择器** (**TPP**) 是其中之一；使用项目选择器的优点是用户可以看到他们熟悉的
    TFS 连接对话框。用户可以通过该对话框指定 TFS 服务器的详细信息并进行身份验证。在此配方中，您将学习如何使用 TPP 以编程方式进行身份验证并连接到
    TFS。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Follow the steps in the *Acquiring TFS object model from the NuGet Gallery*
    recipe to create a project in Visual Studio and add the TFS NuGet packages to
    this project.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照 *从 NuGet Gallery 获取 TFS 对象模型* 配方中的步骤，在 Visual Studio 中创建项目并将 TFS NuGet 包添加到该项目中。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Copy the following code into the `Program.cs` class in the newly created project:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到新创建项目中的 `Program.cs` 类中：
- en: '[PRE0]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From `Main`, make a call to the `ConnectToTfsUsingTeamProjectPicker` method.
    As soon as the `tfsPp.ShowDialog()`statement is triggered, the TPP pops up. As
    illustrated in the following screenshot, the project picker allows you to configure
    the TFS server, collection, and project interactively:![How to do it...](img/image00840.jpeg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Main` 调用 `ConnectToTfsUsingTeamProjectPicker` 方法。一旦触发 `tfsPp.ShowDialog()`
    语句，TPP 窗口就会弹出。如下图所示，项目选择器允许您交互式地配置 TFS 服务器、集合和项目：![如何操作...](img/image00840.jpeg)
- en: How it works…
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: The `TeamProjectPicker` class accepts the `TeamProjectPickerMode` and `DisableCollectionChange`
    as parameters. In the preceding snippet, we are forcing the `TeamProjectPicker`
    class to be launched in single-project mode, that is, only one Team Project can
    be selected. The false value is used to override, disabling the Team Project Collection
    change option available in the picker. The rest of the code is simply reading
    and storing the name of the selected Team Project in a global variable.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`TeamProjectPicker` 类接受 `TeamProjectPickerMode` 和 `DisableCollectionChange`
    作为参数。在前面的代码片段中，我们强制 `TeamProjectPicker` 类以单项目模式启动，即只能选择一个团队项目。`false` 值用于覆盖，禁用选择器中可用的更改团队项目集合选项。其余代码仅是读取并将选定的团队项目名称存储在全局变量中。'
- en: You can alternatively pass the `TeamProjectPicker.MultiProject` value to allow
    the user to pick multiple Team Projects. You can also disable the change project
    collection dropdown by passing the `true` value for the `DisableCollectionChange`
    parameter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以传递 `TeamProjectPicker.MultiProject` 值，允许用户选择多个团队项目。你还可以通过传递 `true` 值给 `DisableCollectionChange`
    参数来禁用更改项目集合的下拉菜单。
- en: Determining the version of TFS using the TFS object model
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TFS 对象模型确定 TFS 版本
- en: If you are building an extension using the TFS object model that is going to
    target multiple versions of TFS, you would most likely want to programmatically
    figure out the version of the TFS Server you are currently pointing at. Some of
    the API services introduced in the later version of TFS aren't available in earlier
    versions of TFS. Unfortunately, the API does not expose a property or function
    that will give you the exact version of TFS. In this recipe, you'll learn how
    to determine the TFS version programmatically.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在构建一个使用 TFS 对象模型的扩展，且目标是多个版本的 TFS，那么你很可能希望通过编程方式确定当前指向的 TFS 服务器版本。TFS 后期版本中引入的一些
    API 服务在早期版本的 TFS 中不可用。不幸的是，API 并未暴露能够提供 TFS 精确版本的属性或函数。在这个配方中，你将学习如何通过编程方式确定 TFS
    版本。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Follow the steps in the *Acquiring TFS object model from the NuGet Gallery*
    recipe to create a project in Visual Studio. Name the project `DetermineTFSVersion`
    and add the TFS NuGet packages to this project.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 *从 NuGet Gallery 获取 TFS 对象模型* 配方中的步骤，在 Visual Studio 中创建一个项目。将项目命名为 `DetermineTFSVersion`，并向该项目添加
    TFS NuGet 包。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Copy the following code into the `Program.cs` class in the newly created project.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到新创建项目中的 `Program.cs` 类中。
- en: 'In the `Main` method, add the following code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Main` 方法中，添加以下代码：
- en: '[PRE1]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The server version will be printed in the console output, as shown in the following
    output:![How to do it...](img/image00841.jpeg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器版本将在控制台输出中打印出来，如以下输出所示：![如何实现...](img/image00841.jpeg)
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'While the output of this program does not necessarily give you the full assembly
    version of TFS, it helps you work out the version of the product. In the following
    screenshot, you can see that the TFS version in the TFS Administration Console
    is showing up as `14.0.24706.0` while the program returns `Dev14.M89-Part7`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然此程序的输出不一定会给出 TFS 的完整程序集版本，但它有助于你了解产品的版本。在以下截图中，你可以看到 TFS 管理控制台中显示的 TFS 版本为
    `14.0.24706.0`，而程序返回的是 `Dev14.M89-Part7`：
- en: '![How it works...](img/image00841.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image00841.jpeg)'
- en: 'Let''s go through the code to understand what is being done:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步查看代码，理解具体做了什么：
- en: The `TfsTeamProjectCollection` class is used to initialize a new connection
    to the server. The server details in this case are passed as a URI to the class.
    There are other ways to establish a connection with the TFS Server, as discussed
    earlier in this chapter in the *Using Team Project Picker to connect to TFS programmatically*
    recipe.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TfsTeamProjectCollection` 类用于初始化与服务器的新连接。在此情况下，服务器的详细信息作为 URI 传递给该类。建立与 TFS
    服务器连接的其他方式已在本章 *使用团队项目选择器以编程方式连接到 TFS* 配方中讨论。'
- en: The `EnsureAuthenticate` method is called to invoke the authentication connection
    process if the connection hasn't already been authenticated before.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果连接尚未通过身份验证，`EnsureAuthenticate` 方法会被调用，启动身份验证连接过程。
- en: Once the connection has been authenticated, the `ServerVersion` property nested
    in the `ServerDataProvider` class holds the value of the TFS Server version.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦连接已通过身份验证，`ServerVersion` 属性（嵌套在 `ServerDataProvider` 类中）将保存 TFS 服务器版本的值。
- en: The value of the `ServerVersion` property is printed to the console using the
    console `WriteLine` method. The console's `Readkey` method is used to pause the
    console so the result of `ServerVersion` being printed to the console output can
    be read.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServerVersion`属性的值通过控制台的`WriteLine`方法打印到控制台。控制台的`ReadKey`方法用于暂停控制台，以便可以读取打印到控制台输出中的`ServerVersion`结果。'
- en: There is an alternate approach to identify the version of TFS programmatically;
    the TFS location service returns a list of services available in TFS. The list
    and version of the services can be used to identify the version of TFS. More information
    on this approach is available at [http://bit.ly/21l0YX8](http://bit.ly/21l0YX8).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种替代方法可以通过编程识别TFS的版本；TFS位置服务返回TFS中可用服务的列表。此列表和服务的版本可以用来识别TFS的版本。关于这种方法的更多信息，请访问[http://bit.ly/21l0YX8](http://bit.ly/21l0YX8)。
- en: Retrieving TFS permissions programmatically using the TFS object model
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TFS对象模型通过编程检索TFS权限
- en: TFS administrators are often required to publish and review user permissions.
    In this recipe, you will learn how to use the TFS object model to programmatically
    generate the security groups, members, permissions, and security settings of users
    in Team Projects in TFS.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: TFS管理员通常需要发布和审查用户权限。在本食谱中，您将学习如何使用TFS对象模型通过编程生成TFS中团队项目用户的安全组、成员、权限和安全设置。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Follow the steps in the *Acquiring TFS object model from the NuGet Gallery*
    recipe to create a project in Visual Studio and add the TFS NuGet packages to
    this project.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 按照*从NuGet Gallery获取TFS对象模型*食谱中的步骤，在Visual Studio中创建一个项目，并将TFS NuGet包添加到该项目中。
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: '**Connect to TFS programmatically**: As a first step, a connection to the TFS
    needs to be established. This can be done using the following snippet:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**通过编程连接到TFS**：第一步需要建立与TFS的连接。可以使用以下代码片段完成此操作：'
- en: '[PRE2]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Get an instance of the version control server service**: The version control
    server service exposes an interface with a set of methods to work with TFS version
    control component programmatically:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取版本控制服务器服务的实例**：版本控制服务器服务公开了一个接口，其中包含一组方法，用于通过编程操作TFS版本控制组件：'
- en: '[PRE3]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Application groups**: The `IGroupSecurityService` interface is used to retrieve
    a list of group membership for a Team Project:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用程序组**：`IGroupSecurityService`接口用于检索团队项目的组成员列表：'
- en: '[PRE4]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This information can be retrieved through the Team Explorer by navigating into
    the **Settings** page and clicking on the **Group Membership** hyperlink. Clicking
    on the **Group Membership** hyperlink will navigate you to the security page in
    Team Web Portal. The left-hand side of the following screenshot shows the groups
    in the security page for FabrikamTFVC project and the right-hand side of the screenshot
    shows the results returned programmatically:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过Team Explorer，您可以进入**设置**页面并点击**组成员资格**超链接来检索此信息。点击**组成员资格**超链接将带您进入Team Web
    Portal中的安全页面。以下截图的左侧显示了FabrikamTFVC项目安全页面中的组，右侧显示了通过编程返回的结果：
- en: '![How to do it...](img/image00842.jpeg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00842.jpeg)'
- en: '**Get members within the application groups**: Each application group comprises
    of either users or further AD groups. The following code snippet loops through
    the members of the application groups and gets the identity of each member:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取应用程序组中的成员**：每个应用程序组包含用户或进一步的AD组。以下代码片段遍历应用程序组的成员并获取每个成员的身份：'
- en: '[PRE5]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The program now not only returns the name of the group, but also the members
    in each of the nested groups:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，程序不仅返回组的名称，还返回每个嵌套组中的成员：
- en: '![How to do it...](img/image00843.jpeg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00843.jpeg)'
- en: '**Get the user membership settings**: The user in the application group either
    inherits the permissions or is directly assigned the permissions. The following
    code snippet uses the `GetPermissions` method in the version control service to
    work out the user membership setting:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取用户会员设置**：应用程序组中的用户要么继承权限，要么直接分配权限。以下代码片段使用版本控制服务中的`GetPermissions`方法来计算用户的会员设置：'
- en: '[PRE6]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This information can be retrieved through Team Explorer by navigating into
    the **Settings** page and clicking on the **Security** hyperlink. The **Security**
    hyperlink launches the security page in Team Web Portal:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过Team Explorer，您可以进入**设置**页面并点击**安全**超链接来检索此信息。点击**安全**超链接将打开Team Web Portal中的安全页面：
- en: '![How to do it...](img/image00844.jpeg)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00844.jpeg)'
- en: '**Version control permissions**: Individual user permissions on version control
    can be retrieved using the `GetEffectivePermissions` method in the version control
    service:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**版本控制权限**：可以使用版本控制服务中的`GetEffectivePermissions`方法检索版本控制上的单个用户权限：'
- en: '[PRE7]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This returns the version control permission for each user in the group. As
    illustrated in the following screenshot, the user `Tarun` is a member of the `Project
    Valid Users` group and has the `Manage Branch` permission:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回组中每个用户的版本控制权限。如下截图所示，用户`Tarun`是`Project Valid Users`组的成员，并具有`Manage Branch`权限：
- en: '![How to do it...](img/image00845.jpeg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤...](img/image00845.jpeg)'
- en: Getting the Process Template name for a Team Project programmatically
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以编程方式获取Team Project的流程模板名称
- en: In this recipe, you'll learn how to get the name of the Process Template used
    to create a Team Project.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，您将学习如何获取用于创建Team Project的流程模板名称。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Follow the steps in the *Acquiring TFS object model from the NuGet Gallery*
    recipe to create a project in Visual Studio and add the TFS NuGet packages to
    this project.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 按照*从NuGet Gallery获取TFS对象模型*中的步骤，在Visual Studio中创建项目，并向此项目添加TFS NuGet包。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'First, connect to TFS programmatically. As a first step, a connection to the
    TFS needs to be established. This can be done using the following snippet:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，以编程方式连接到TFS。作为第一步，需要建立与TFS的连接。可以使用以下代码片段完成此操作：
- en: '[PRE8]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To obtain the Process Template details for a Team Project, we need an instance
    of the `VersionControlServer` service and the `Now` instance to get `ICommonServerService`.
    The `VersionControlServer` service is used to get the project details, specifically,
    it is `AbsoluteUri` that we are after. `AbsoluteUri` for the Team Project is used
    by `ICommonServerService` to identify the project properties such as the Process
    Template name:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取Team Project的流程模板详细信息，我们需要`VersionControlServer`服务的一个实例和`Now`实例来获取`ICommonServerService`。`VersionControlServer`服务用于获取项目详细信息，特别是我们需要的`AbsoluteUri`。`AbsoluteUri`用于由`ICommonServerService`标识项目属性，例如流程模板名称：
- en: '[PRE9]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Executing this returns the list of properties and their values. As you can
    see in the following screenshot, the `Scrum` template has been used to create
    the FabrikamTFVC Team Project. The `SourceControlGitEnabled` and `SourceControlTfvcEnabled`
    properties tell you source control capabilities in the Team Project:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此操作将返回属性及其值的列表。如下截图所示，`Scrum`模板已用于创建FabrikamTFVC Team Project。`SourceControlGitEnabled`和`SourceControlTfvcEnabled`属性告诉您Team
    Project中的源控制功能：
- en: '![How to do it...](img/image00846.jpeg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作步骤...](img/image00846.jpeg)'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Use the Process Template Manager to download the Scrum Process Template from
    TFS. From the download location, open the `Classification.xml` file from under
    the `Classification` folder. The API basically renders the contents of `Classification.xml`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用流程模板管理器从TFS下载Scrum流程模板。从下载位置打开`Classification`文件夹下的`Classification.xml`文件。API基本上渲染了`Classification.xml`的内容：
- en: '![How it works...](img/image00847.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image00847.jpeg)'
- en: You can add more properties and values to the `Classification.xml` file and
    use this version of the template to create Team Projects. The `GetProjectProperties`
    method in the `ICommonStructureServer` service will return the newly added properties.
    In addition to this, you can use the `UpdateProjectProperties` method in `ICommonStructureService`
    to update the values of these properties.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`Classification.xml`文件中添加更多属性和值，并使用此模板版本创建Team Projects。`ICommonStructureServer`服务中的`GetProjectProperties`方法将返回新添加的属性。此外，您还可以使用`ICommonStructureService`中的`UpdateProjectProperties`方法更新这些属性的值。
- en: Getting build details programmatically using the REST API
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用REST API以编程方式获取构建详细信息
- en: In this recipe, you'll learn how to get a list of builds with details in a Team
    Project using the `BuildHttpClient` REST APIs.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，您将学习如何使用`BuildHttpClient` REST API获取Team Project中带有详细信息的构建列表。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As alluded to in the chapter introduction, Team Foundation Server 2015 does
    not yet have OAuth token provisioning capability; for this reason, the only way
    to consume the REST API is using alternate credentials. Alternate credentials
    uses basic authentication as the authentication protocol. When using basic authentication,
    the user credentials are sent to the server in plain text. This type of setup
    simply isn't acceptable in a professional environment. Follow the instructions
    at [http://bit.ly/1Nfe8e0](http://bit.ly/1Nfe8e0) to set up a self-signed certificate
    to configure SSL for TFS. With SSL, the traffic between the client and TFS is
    encrypted.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在章节介绍中提到的，Team Foundation Server 2015 尚未具备 OAuth 令牌提供能力；因此，使用 REST API 的唯一方法是使用备用凭据。备用凭据使用基本身份验证作为认证协议。在使用基本身份验证时，用户凭据以明文形式发送到服务器。在专业环境中，这种设置是不能接受的。请按照
    [http://bit.ly/1Nfe8e0](http://bit.ly/1Nfe8e0) 中的说明设置自签名证书，为 TFS 配置 SSL。通过 SSL，客户端和
    TFS 之间的流量将被加密。
- en: 'If you simply want to play around with the REST API without getting into the
    complexities of the setup, then API Sandbox is a great place to start: [https://apisandbox.msdn.microsoft.com](https://apisandbox.msdn.microsoft.com).
    The API Sandbox is wired up to a sample Visual Studio Team Services account, it
    gives you pre-configured code samples to try out the capabilities offered by the
    API, you can additionally connect to your Visual Studio Team Services instance
    too. While API Sandbox does not offer the capability to connect an on-premise
    TFS instance, it allows you to call older versions of the API by specifying the
    version of the API in the version parameter in the constructed service URL. An
    alternate to the API Sandbox is Postman ([http://bit.ly/1l044iU](http://bit.ly/1l044iU)).
    Postman is available as a free extension in the Chrome store. It''s a fantastic
    utility to build, test, and document APIs faster. You can trigger all REST operations
    by directly passing the server URLs and parameters right from within Postman.
    This enables you to connect to on-premise TFS instance too; this is very useful
    to try the APIs against real data.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是想尝试一下 REST API 而不想涉及设置的复杂性，那么 API 沙盒是一个很好的起点：[https://apisandbox.msdn.microsoft.com](https://apisandbox.msdn.microsoft.com)。API
    沙盒已经连接到一个示例 Visual Studio Team Services 帐户，它提供了预配置的代码示例来尝试 API 提供的功能，你还可以额外连接到你自己的
    Visual Studio Team Services 实例。虽然 API 沙盒不能连接本地 TFS 实例，但是通过在构造服务 URL 中指定 API 版本参数，你可以调用旧版本的
    API。API 沙盒的替代方案是 Postman ([http://bit.ly/1l044iU](http://bit.ly/1l044iU))。Postman
    作为 Chrome 商店的免费扩展程序提供。它是一个非常好用的工具，可以更快地构建、测试和文档化 API。你可以直接在 Postman 中传递服务器 URL
    和参数来触发所有的 REST 操作。这使得你也可以连接到本地的 TFS 实例；这对于尝试针对真实数据的 API 非常有用。
- en: Download the `RESTDemo` solution provided with the course material. The solution
    contains three projects, namely, `GetBuildDetails`, `GetGitRepos`, and `GetWorkitemById`.
    Open the `RESTDemo` solution in Visual Studio. In this recipe, we'll be going
    through the `GetBuildDetails` project to get a list of builds with details from
    a Team Project.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下载课程材料提供的 `RESTDemo` 解决方案。该解决方案包含三个项目，分别是 `GetBuildDetails`、`GetGitRepos` 和
    `GetWorkitemById`。在 Visual Studio 中打开 `RESTDemo` 解决方案。在这个示例中，我们将通过 `GetBuildDetails`
    项目来获取团队项目中具有详细信息的构建列表。
- en: How to do it…
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In the `RESTDemo` solution, set `GetBuildDetails` as the startup project:![How
    to do it…](img/image00848.jpeg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `RESTDemo` 解决方案中，将 `GetBuildDetails` 设置为启动项目：![如何操作…](img/image00848.jpeg)
- en: Run the `GetBuildDetails` project, this will launch a console, enter the TFS
    server URL, and press *Enter*:![How to do it…](img/image00849.jpeg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `GetBuildDetails` 项目，这将启动一个控制台，输入 TFS 服务器 URL，然后按 *Enter*：![如何操作…](img/image00849.jpeg)
- en: Enter the username and password of the user you want to connect to TFS with
    and press *Enter*:![How to do it…](img/image00850.jpeg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入要连接到 TFS 的用户名和密码，然后按 *Enter*：![如何操作…](img/image00850.jpeg)
- en: Enter the project name you would like to retrieve the build details from:![How
    to do it…](img/image00851.jpeg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您希望从中检索构建详细信息的项目名称：![如何操作…](img/image00851.jpeg)
- en: The console outputs the list of builds in FabrikamTFVC along with the details
    of the build, such as the name of the build definition, the build number, result,
    requested by, start time, and finish time of the build:![How to do it…](img/image00852.jpeg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台将输出 FabrikamTFVC 中构建的列表以及构建的详细信息，如构建定义的名称、构建编号、结果、请求者、开始时间和完成时间：![如何操作…](img/image00852.jpeg)
- en: How it works…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'We''ll go through the code in the `GetBuildDetails` project to understand the
    working of the code. To connect and get the data from TFS, the project requires
    TFS API binaries. The project uses the `Microsoft.TeamFoundationServer.ClientNuGet`
    package to get the right binary references:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一起查看`GetBuildDetails`项目中的代码，以理解代码的工作原理。为了连接并从 TFS 获取数据，该项目需要 TFS API 二进制文件。该项目使用`Microsoft.TeamFoundationServer.ClientNuGet`包来获取正确的二进制文件引用：
- en: '![How it works…](img/image00853.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/image00853.jpeg)'
- en: 'From the Solution Explorer, open the `Program.cs` file in the `GetBuildDetails`
    project. The program gets the TFS Server URL, username, and password details as
    an input from the user. The password is asterisked on the console by replacing
    the entered characters into asterisk form before printing out to the console.
    An instance of `VssBasicCredential` is created with the username and password.
    This information is then passed into `BuildHttpClient`. When an instance of the
    `BuildHttpClient` class is created, the constructor takes the server URL and credentials.
    The `BuildHttpClient` object validates the connection to TFS as part of the instantiation
    process:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从解决方案资源管理器中，打开`GetBuildDetails`项目中的`Program.cs`文件。该程序获取 TFS 服务器 URL、用户名和密码作为用户输入。密码在控制台中会显示为星号形式，将输入的字符替换为星号后再输出到控制台。创建一个`VssBasicCredential`实例，使用用户名和密码。然后，这些信息传递给`BuildHttpClient`。当创建`BuildHttpClient`类的实例时，构造函数将接收服务器
    URL 和凭据。`BuildHttpClient`对象在实例化过程中会验证与 TFS 的连接：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `BuildHttpClient` class contains the `GetBuildsAsync` method. The Team
    Project name is passed as a parameter to the `GetBuildsAsync` method:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`BuildHttpClient`类包含`GetBuildsAsync`方法。团队项目名称作为参数传递给`GetBuildsAsync`方法：'
- en: '[PRE11]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The function returns a list of build. The build entity contains all build properties,
    as seen in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能返回一个构建列表。构建实体包含所有构建属性，如以下截图所示：
- en: '![How it works…](img/image00854.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/image00854.jpeg)'
- en: The program then loops through the list of builds and prints the properties
    to the console. You can get more details about the build REST API at [https://www.visualstudio.com/integrate/api/build/overview](https://www.visualstudio.com/integrate/api/build/overview).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 程序随后遍历构建列表，并将属性打印到控制台。您可以在[https://www.visualstudio.com/integrate/api/build/overview](https://www.visualstudio.com/integrate/api/build/overview)获取更多关于构建
    REST API 的详情。
- en: Getting a list of Git repositories programmatically using the REST API
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 REST API 以编程方式获取 Git 仓库列表
- en: In this recipe, you'll learn how to get a list of Git repositories in a Team
    Project programmatically using the `GitHttpClient` REST API.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，您将学习如何使用`GitHttpClient` REST API 以编程方式获取团队项目中的 Git 仓库列表。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to instructions in the *Getting ready* section of the *Getting build details
    programmatically using the REST API* recipe for setup details. Download the `RESTDemo`
    solution provided with the course material. In this recipe, we'll be going through
    the `GetGitRepos` project to get a list of Git repositories with details from
    a Team Project.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考*准备工作*部分中*使用 REST API 以编程方式获取构建详情*食谱中的说明，了解设置细节。下载课程材料中提供的`RESTDemo`解决方案。在本食谱中，我们将通过`GetGitRepos`项目获取来自团队项目的
    Git 仓库列表及其详情。
- en: How to do it…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: In the `RESTDemo` solution, set `GetGitRepos` as the startup project:![How to
    do it…](img/image00855.jpeg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RESTDemo`解决方案中，将`GetGitRepos`设置为启动项目：![如何实现…](img/image00855.jpeg)
- en: Run the `GetGitRepos` project, this will launch a console. Enter the TFS Server
    URL and press *Enter*:![How to do it…](img/image00856.jpeg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`GetGitRepos`项目，这将启动一个控制台。输入 TFS 服务器 URL 并按*Enter*：![如何实现…](img/image00856.jpeg)
- en: Enter the username and password of the user you want to connect to the TFS with
    and press *Enter*:![How to do it…](img/image00850.jpeg)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您想要连接到 TFS 的用户名和密码，然后按*Enter*：![如何实现…](img/image00850.jpeg)
- en: Enter the project name you would like to retrieve the build details from:![How
    to do it…](img/image00857.jpeg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您希望从中获取构建详情的项目名称：![如何实现…](img/image00857.jpeg)
- en: The console outputs the list of Git repositories in FabrikamGit project along
    with the details of the repositories such as its ID, name, and remote URL:![How
    to do it…](img/image00858.jpeg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台输出包含 FabrikamGit 项目的 Git 仓库列表，并附带仓库的详细信息，如其 ID、名称和远程 URL：![如何实现…](img/image00858.jpeg)
- en: How it works…
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'We''ll go through the code in the `GetGitRepos` project to understand the working
    of the code. To connect and get the data from TFS, the project requires TFS API
    binaries; the project uses the `Microsoft.TeamFoundationServer.ClientNuGet` package
    to get the right binary references:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过`GetGitRepos`项目的代码来了解代码的工作原理。为了连接并从TFS获取数据，项目需要TFS API二进制文件；项目使用`Microsoft.TeamFoundationServer.ClientNuGet`包来获取正确的二进制引用：
- en: '![How it works…](img/image00853.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/image00853.jpeg)'
- en: 'From the Solution Explorer open the `Program.cs` file in `GetGitRepos` project.
    The program gets the TFS Server URL, username, and password details as an input
    from the user. The password is asterisked on the console by replacing the entered
    characters into asterisk form before printing out to the console. An instance
    of `VssBasicCredential` is created with the username and password. This information
    is then passed into the `GitHttpClient`. An instance of the `GitHttpClient` class
    is created, the constructor takes the server URL and credentials. The `GitHttpClient`
    class validates the connection to TFS as part of the instantiation process:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从解决方案资源管理器中打开`GetGitRepos`项目中的`Program.cs`文件。程序从用户那里获取TFS服务器的URL、用户名和密码作为输入。密码在控制台中通过将输入的字符转换为星号的形式进行掩码处理，然后输出到控制台。创建一个`VssBasicCredential`实例，包含用户名和密码。该信息随后传递给`GitHttpClient`。创建`GitHttpClient`类的实例，构造函数接受服务器URL和凭据。`GitHttpClient`类在实例化过程中验证与TFS的连接：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `GitHttpClient` class contains the `GetRepositoriesAsync` method. The Team
    Project name is passed as a parameter to this method:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`GitHttpClient`类包含`GetRepositoriesAsync`方法。团队项目名称作为参数传递给该方法：'
- en: '[PRE13]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The function returns a list of `GitRepository`. The `GitRepository` entity
    contains all `GitRepository` properties:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数返回一个`GitRepository`列表。`GitRepository`实体包含所有`GitRepository`的属性：
- en: '![How it works…](img/image00859.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/image00859.jpeg)'
- en: The program then loops through the list of `GitRepositories` and prints the
    properties to the console. You can get more details about the Git REST API at
    [https://www.visualstudio.com/integrate/api/git/overview](https://www.visualstudio.com/integrate/api/git/overview).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 程序接着遍历`GitRepositories`列表，并将属性打印到控制台。你可以在[https://www.visualstudio.com/integrate/api/git/overview](https://www.visualstudio.com/integrate/api/git/overview)获取更多关于Git
    REST API的详细信息。
- en: Getting a Work Item by ID programmatically using the REST API
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用REST API通过ID编程获取工作项
- en: In this recipe, you'll learn how to get details of a Work Item programmatically
    using the `WorkItemTrackingHttpClient` REST API.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将学习如何通过`WorkItemTrackingHttpClient` REST API编程获取工作项的详细信息。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to instructions in the *Getting ready* section of the *Getting build details
    programmatically using the REST API* recipe for setup details. Download the `RESTDemo`
    solution provided with the course material. In this recipe, we'll be going through
    the `GetWorkItemById` project to get the details of a Work Item.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考*通过REST API编程获取构建详细信息*示例中的*准备工作*部分获取设置详情。下载课程材料中提供的`RESTDemo`解决方案。在这个示例中，我们将通过`GetWorkItemById`项目来获取工作项的详细信息。
- en: How to do it…
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In the `RESTDemo` solution, set `GetWorkItemById` as the startup project:![How
    to do it…](img/image00860.jpeg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RESTDemo`解决方案中，将`GetWorkItemById`设置为启动项目：![如何操作…](img/image00860.jpeg)
- en: Run the `GetWorkItemById` project, this will launch a console, enter the TFS
    server URL, and press *Enter*:![How to do it…](img/image00861.jpeg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`GetWorkItemById`项目，这将启动一个控制台，输入TFS服务器的URL，按*Enter*键：![如何操作…](img/image00861.jpeg)
- en: Enter the username and password of the user you want to connect to TFS with
    and press *Enter*:![How to do it…](img/image00850.jpeg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你想要连接到TFS的用户名和密码，按*Enter*键：![如何操作…](img/image00850.jpeg)
- en: Enter the Work Item ID you would like to query the API for:![How to do it…](img/image00862.jpeg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你想查询API的工作项ID：![如何操作…](img/image00862.jpeg)
- en: The console outputs the details of the Work Item such as the Team Project it
    belongs to, its type, title, state, and created by:![How to do it…](img/image00863.jpeg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台输出工作项的详细信息，如所属的团队项目、类型、标题、状态和创建者：![如何操作…](img/image00863.jpeg)
- en: How it works…
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: 'We''ll go through the code in the `GetWorkItemById` project to understand the
    workings of the code. To connect and get the data from TFS, the project requires
    TFS API binaries; the project uses the `Microsoft.TeamFoundationServer.ClientNuGet`
    package to get the right binary references:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过`GetWorkItemById`项目中的代码来了解代码的工作原理。为了连接并从TFS获取数据，该项目需要TFS API的二进制文件；该项目使用`Microsoft.TeamFoundationServer.ClientNuGet`包来获取正确的二进制引用：
- en: '![How it works…](img/image00853.jpeg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00853.jpeg)'
- en: 'From the Solution Explorer, open the `Program.cs` file in the `GetWorkItemById`
    project. The program gets the TFS server URL, username, and password details as
    an input from the user. The password is asterisked on the console by replacing
    the entered characters into asterisk form before printing out to the console.
    An instance of `VssBasicCredential` is created with the username and password.
    This information is then passed into `WorkItemTrackingHttpClient`. An instance
    of the `WorkItemTrackingHttpClient` class is created, the constructor takes the
    server URL and credentials. The `WorkItemTrackingHttpClient` class validates the
    connection to TFS as part of the instantiation process. As you would have noticed,
    in this sample we did not have to ask for the Team Project name, that''s because
    Work Item IDs are scoped at the Team Project Collection level. This means a Work
    Item ID is unique at a Team Project Collection level, since the TFS Server URL
    contains the collection name this information does not need to be requested separately:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从解决方案资源管理器中，打开`Program.cs`文件，位于`GetWorkItemById`项目中。该程序获取TFS服务器的URL、用户名和密码信息作为用户输入。密码在控制台上以星号形式显示，即在打印到控制台之前将输入的字符替换为星号。使用用户名和密码创建`VssBasicCredential`实例。然后将这些信息传递给`WorkItemTrackingHttpClient`。创建`WorkItemTrackingHttpClient`类的实例，构造函数接受服务器URL和凭据。`WorkItemTrackingHttpClient`类会在实例化过程中验证与TFS的连接。正如你可能已经注意到的，在这个示例中我们并不需要询问团队项目的名称，因为工作项ID是在团队项目集合级别作用域内的。这意味着工作项ID在团队项目集合级别是唯一的，既然TFS服务器URL包含集合名称，那么不需要单独请求此信息：
- en: '[PRE14]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `WorkItemTrackingHttpClient` class contains the `GetWorkItemAsync` method.
    The Work Item ID is passed as a parameter to this method.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`WorkItemTrackingHttpClient`类包含`GetWorkItemAsync`方法。工作项ID作为参数传递给此方法。'
- en: '[PRE15]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The function returns an object of type `WorkItem`. The `WorkItem` class contains
    information about the Work Item fields along with information about the relation
    and revision:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数返回一个`WorkItem`类型的对象。`WorkItem`类包含关于工作项字段的信息，以及关于关系和修订的信息：
- en: '![How it works…](img/image00864.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00864.jpeg)'
- en: 'The program then prints the values of the fields to the console:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后程序将字段的值打印到控制台：
- en: '[PRE16]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can get more details about the Work Item REST API at [https://www.visualstudio.com/integrate/api/wit/overview](https://www.visualstudio.com/integrate/api/wit/overview).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.visualstudio.com/integrate/api/wit/overview](https://www.visualstudio.com/integrate/api/wit/overview)获取关于工作项REST
    API的更多详细信息。
- en: Adding a Team field to the Product Backlog Item to an existing Team Project
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向现有的团队项目中的产品待办事项添加团队字段
- en: The original purpose of the Area Path field was to logically group Work Items
    based on the functional or technical area they belong to before this field got
    hijacked as the Team Backlog Path. If you intend to use the Area Path for functional
    or technical grouping of the Work Items, you will need a new field to allocate
    the Work Items to Teams within a Team Project. In this recipe, you'll learn how
    to add a Team field to a Team Project by modifying an existing Process Template.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 区域路径字段的最初目的是根据工作项所属的功能或技术领域对工作项进行逻辑分组，在这个字段被用作团队待办事项路径之前。如果你打算将区域路径用于工作项的功能或技术分组，你将需要一个新字段来将工作项分配到团队项目中的各个团队。在这个方案中，你将学习如何通过修改现有的流程模板向团队项目添加团队字段。
- en: Getting ready
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'A Process Template can be downloaded using the Process Template manager. To
    do this, navigate to the Team Explorer''s **Settings** page. Select the **Process
    Template Manager** hyperlink from the **Team Project Collection** view:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用流程模板管理器下载流程模板。为此，请导航到团队资源管理器的**设置**页面。从**团队项目集合**视图中选择**流程模板管理器**超链接：
- en: '![Getting ready](img/image00865.jpeg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00865.jpeg)'
- en: 'The out-of-the-box Process Templates in TFS have been locked for editing. This
    has been done by adding a known GUID to the Process Template. This ID helps identify
    the out-of-the-box Process Template from others. If you intend to customize a
    Process Template, then it is advisable to modify the GUID of the out-of-the-box
    Process Template to a different GUID. As illustrated in the following screenshot,
    this can be done by downloading the Process Template and chaining the GUID to
    a different value:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: TFS 中的开箱即用流程模板已被锁定为不可编辑。这是通过向流程模板添加已知的 GUID 实现的。该 ID 帮助区分开箱即用的流程模板和其他模板。如果你打算自定义流程模板，建议将开箱即用的流程模板的
    GUID 修改为不同的 GUID。如以下截图所示，可以通过下载流程模板并将 GUID 更改为不同的值来完成此操作：
- en: '![Getting ready](img/image00866.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/image00866.jpeg)'
- en: Modifying an existing Team Project can lead to corruption of data, it is, therefore,
    advisable that you create a Test Project using the updated Process Template before
    trying out the changes highlighted in this recipe. You need to be a member of
    the Project Administrators Group to make these changes to the Team Project.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 修改现有的团队项目可能会导致数据损坏，因此建议在尝试本教程中突出显示的更改之前，使用更新后的流程模板创建一个测试项目。你需要是项目管理员组的成员才能对团队项目进行这些更改。
- en: Download and install the TFS Power Tools ([http://bit.ly/1jJkEmt](http://bit.ly/1jJkEmt)),
    this will install the Process Editor extension.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装 TFS Power Tools（[http://bit.ly/1jJkEmt](http://bit.ly/1jJkEmt)），这将安装流程编辑器扩展。
- en: How to do it…
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create a `ProcessTemplateRecipe` directory and a new file `TeamGlobalList.xml`.
    Copy and save the following text in the `TeamGlobalList` file:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `ProcessTemplateRecipe` 目录，并创建一个新文件 `TeamGlobalList.xml`。将以下文本复制并保存到 `TeamGlobalList`
    文件中：
- en: '[PRE17]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Open Visual Studio, and launch the Process Editor from the **Tools** menu. From
    the context menu, select **Import Global List**:![How to do it…](img/image00867.jpeg)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio，并从**工具**菜单启动流程编辑器。在上下文菜单中，选择**导入全局列表**：![如何操作…](img/image00867.jpeg)
- en: To upload the `TeamGlobalList.xml` file, navigate to the directory and select
    `TeamGlobalList.xml`. To validate the upload, choose **Open Global List** from
    the server:![How to do it…](img/image00868.jpeg)
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要上传 `TeamGlobalList.xml` 文件，请导航到该目录并选择 `TeamGlobalList.xml`。要验证上传，请从服务器中选择**打开全局列表**：![如何操作…](img/image00868.jpeg)
- en: Open WIT from server by selecting this option from the **Process Editor** menu.
    Select the FabrikamTFVC Team Project and the Product Backlog Item type Work Item:![How
    to do it…](img/image00869.jpeg)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从服务器打开 WIT，方法是从**流程编辑器**菜单中选择此选项。选择 FabrikamTFVC 团队项目和产品待办事项类型的工作项：![如何操作…](img/image00869.jpeg)
- en: The Process Editor launches the Product Backlog Item type Work Item in a graphical
    interface:![How to do it…](img/image00870.jpeg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流程编辑器以图形界面启动产品待办事项类型的工作项：![如何操作…](img/image00870.jpeg)
- en: The **New** button is used to add a new field to the Work Item type. Click on
    **New** and enter the details as illustrated in the following screenshot:![How
    to do it…](img/image00871.jpeg)
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**新建**按钮用于向工作项类型添加一个新字段。点击**新建**并输入如下截图所示的详细信息：![如何操作…](img/image00871.jpeg)'
- en: From the **Rules** tab, click on **New**, choose **Allowed Values**. Click on
    **New** and choose the Team's global list created earlier:![How to do it…](img/image00872.jpeg)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**规则**选项卡中，点击**新建**，选择**允许的值**。点击**新建**并选择先前创建的团队全局列表：![如何操作…](img/image00872.jpeg)
- en: Navigate to the **Layout** tab and create a new control for Team under the **Status
    Group** column. Configure the Team control as illustrated in the following screenshot:![How
    to do it…](img/image00873.jpeg)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**布局**选项卡，并在**状态组**列下为团队创建一个新控件。根据如下截图配置团队控件：![如何操作…](img/image00873.jpeg)
- en: Click on the preview form button to load the preview of changes in the Work
    Item form. Click on **Save** in the **Work Item Type** form to apply the changes.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击预览表单按钮以加载工作项表单中的更改预览。在**工作项类型**表单中点击**保存**以应用更改。
- en: How it works…
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'To test the changes, create a new Work Item of type **Product Backlog Item**.
    The form now includes the **Team** field. The changes are applied to the Work
    Item form in Visual Studio and Team Web Portal:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这些更改，请创建一个新的**产品待办事项**类型的工作项。表单现在包括**团队**字段。这些更改已应用于 Visual Studio 和团队 Web
    门户中的工作项表单：
- en: '![How it works…](img/image00874.jpeg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00874.jpeg)'
- en: By choosing to add the field as a dimension, it now supports being reporting
    using the TFS warehouse. This is great if you intend to use this field for reporting.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择将字段添加为维度，现在支持使用 TFS 数据仓库进行报告。如果你打算将此字段用于报告，这是非常棒的。
- en: The Process Templates support customization not only at the Work Item form level,
    but also at other levels such as security groups, project defaults, version control,
    and reports. MSDN has comprehensive guidance and walkthroughs on how to apply
    this customization; read more about it at [http://bit.ly/1lmwLGr](http://bit.ly/1lmwLGr).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 过程模板支持在工作项表单级别进行自定义，也支持在其他级别进行自定义，如安全组、项目默认设置、版本控制和报告。MSDN 提供了全面的指导和操作步骤，介绍了如何应用这些自定义设置；你可以在[http://bit.ly/1lmwLGr](http://bit.ly/1lmwLGr)了解更多信息。
- en: Adding multi-item select control in the Work Item form
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在工作项表单中添加多项选择控件
- en: Natively, the Work Item forms in Team Project do not support multivalue fields.
    While there isn't native support for multivalue fields in the Process Template,
    there is an open source multivalue field control that allows you to achieve exactly
    this. In this recipe, you'll learn how to set up and use the multivalue field
    control in an existing Team Project.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 原生情况下，团队项目中的工作项表单不支持多值字段。虽然过程模板中没有原生支持多值字段，但有一个开源的多值字段控件，它可以帮助你实现这一点。在本操作中，你将学习如何在现有的团队项目中设置并使用多值字段控件。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Download and install the custom Work Item Control from CodePlex [http://witcustomcontrols.codeplex.com](http://witcustomcontrols.codeplex.com).
    The download includes a web extension and an extension for Visual Studio. The
    Visual Studio extension needs to be installed on all machines you intend to use
    the multivalue control from in Visual Studio. You do not need to install this
    control on machines where you intend to use this control in Web Portal only. You
    need to be a member of the Project Administrator Group to make these changes.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 从 CodePlex 下载并安装自定义工作项控件：[http://witcustomcontrols.codeplex.com](http://witcustomcontrols.codeplex.com)。下载包包括
    Web 扩展和 Visual Studio 扩展。Visual Studio 扩展需要安装在你打算在 Visual Studio 中使用多值控件的所有机器上。如果你只打算在
    Web 门户中使用该控件，则不需要在机器上安装此控件。你需要是项目管理员组的成员，才能进行这些更改。
- en: In this recipe, we'll be extending the Team Global List field set up earlier
    in the chapter in the *Adding a Team field to the Product Backlog Item to an existing
    Team Project* recipe.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个操作中，我们将扩展本章前面介绍的**团队全局列表**字段，该字段在*将团队字段添加到现有团队项目的产品待办事项中*的操作中已经设置过。
- en: How to do it…
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Launch the Team Web Portal extensions console by browsing `http://tfs2015:8080/tfs/_admin/_extensions`:![How
    to do it…](img/image00875.jpeg)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览`http://tfs2015:8080/tfs/_admin/_extensions`启动 Team Web Portal 扩展控制台：![如何操作…](img/image00875.jpeg)
- en: Click on the **Install** button to upload the multivalue field control extension
    in the Web Portal. Select and add the extension from the download location:![How
    to do it…](img/image00876.jpeg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**安装**按钮，以将多值字段控件扩展上传到 Web 门户。从下载位置选择并添加扩展：![如何操作…](img/image00876.jpeg)
- en: Enable the extension once it has been uploaded. This will activate this extension
    across the TFS instance:![How to do it…](img/image00877.jpeg)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传后启用扩展。这将激活整个 TFS 实例中的扩展：![如何操作…](img/image00877.jpeg)
- en: Open Visual Studio and launch the Process Editor, choose **Open WIT from server**
    from the context menu. Connect to the FabrikamTFVC Team Project and open the Product
    Backlog Item Work Item Type. In the previous recipe, a **Team** field was added
    and associated to a control of type `FieldType`. Navigate to the **Layout** tab,
    locate the **Team** field, and change the type of the control to `MultiValueControl`.
    Click on **Save** to apply the changes:![How to do it…](img/image00878.jpeg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 并启动过程编辑器，从上下文菜单中选择**从服务器打开 WIT**。连接到 FabrikamTFVC 团队项目并打开产品待办事项工作项类型。在前一个操作中，添加了**团队**字段，并将其与类型为`FieldType`的控件关联。导航到**布局**标签，找到**团队**字段，将控件类型更改为`MultiValueControl`。点击**保存**以应用更改：![如何操作…](img/image00878.jpeg)
- en: How it works…
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'To test the changes, create a new Work Item of type Product Backlog Item using
    the Team Web Portal. As illustrated in the following screenshot, the **Team**
    field shows a checkbox next to each Team name that allows you to select multiple
    items. Select multiple values and save the changes to the Work Item. The values
    set in the Work Item can also be queried from the **Work Item Query** window:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试更改，请使用团队 Web 门户创建一个类型为产品待办事项（Product Backlog Item）的新的工作项。如下面的截图所示，**团队**字段在每个团队名称旁边显示一个复选框，允许你选择多个项目。选择多个值并保存工作项的更改。工作项中设置的值也可以从**工作项查询**窗口中查询：
- en: '![How it works…](img/image00879.jpeg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00879.jpeg)'
- en: You will also see the multivalue selector option in the Product Backlog Item
    Work Item form when you open it in Visual Studio on a machine that has the multivalue
    selector control installed.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在安装了多值选择控件的计算机上使用 Visual Studio 打开产品待办事项工作项表单时，你也将看到多值选择器选项。
