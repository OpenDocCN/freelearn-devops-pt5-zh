- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing Containers Using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the introduction of containerization, organizations have been able to
    deploy applications faster and accelerate release cycles with frequent updates
    and deployments. However, containerizing applications involve more steps compared
    to traditional server-based deployments. For example, you need to ensure the packaged
    container image is working as per expectation, security standards are in place,
    volume mounting is working, secrets are safe inside, and more. When you have more
    frequent application releases, automating such container build and deployment
    tasks will help you implement better CI/CD workflows and save time on manual processes.
  prefs: []
  type: TYPE_NORMAL
- en: With the Ansible collections for container management, we can manage the entire
    life cycle of our containers. This includes building them, pushing them to the
    registry, scanning them for vulnerabilities, and deploying them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing the container host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible, containers, and CI/CD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing containers using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building container images using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing multi-container applications using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, you will learn how to use Ansible to deploy the container engine to the
    host machine and run containers inside it. Later, you will learn how to manage
    the container image build and manage it in the container registry.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A Linux machine for the Ansible control node (with internet access)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Linux machine for installing and configuring Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to a Docker container registry (`hub.docker.com`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic knowledge about containers and container registries (Docker or Podman)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible code and playbooks, as well as the commands and snippets, for
    this chapter can be found in this book’s GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-10](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-10).
  prefs: []
  type: TYPE_NORMAL
- en: Managing the container host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Various types of container software are available, such as **Docker** and **Podman**.
    In this chapter, we will be using Docker to explain and demonstrate container
    management using Ansible. We will be using Docker **Community Edition** (**CE**),
    which is free, though you can use Docker **Enterprise Edition** (**EE**) if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Docker prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the `docker` library, which you can do using `Python pip` or standard
    packages managers such as `yum` (`yum install python-docker-py`) of `dnf` if available.
    If you are using the old version of Python (2.6), then you should install and
    use the old library called `docker-py`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker on the host using Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing Docker software on a host involves multiple steps and configurations.
    These steps can be completed manually or we can use the Ansible role available
    in Ansible Galaxy. We will be using the community Ansible role called `geerlingguy.docker`
    ([https://github.com/geerlingguy/ansible-role-docker](https://github.com/geerlingguy/ansible-role-docker)),
    which was created by the well-known Ansible contributor *Jeff Geerling*.
  prefs: []
  type: TYPE_NORMAL
- en: We will also use `geerlingguy.pip` to install the Docker libraries (for example,
    `docker`) using Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to install the Docker software on a Linux machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the inventory with `node1` under the `dockerhost` host group (`chapter-10/hosts`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Configure Docker host in inventory ](img/B18383_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Configure Docker host in inventory
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `geerlingguy.docker` in the `roles` directory, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Installing Docker role ](img/B18383_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Installing Docker role
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a playbook called `Chapter-10/deploy-docker.yaml` to install the role
    and libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Using deploy-docker.yaml to install Docker on the host ](img/B18383_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Using deploy-docker.yaml to install Docker on the host
  prefs: []
  type: TYPE_NORMAL
- en: The `pip_install_packages` variable will be used by the `geerlingguy.pip` role
    to install the listed packages using `pip`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook to deploy Docker on the host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Execute the playbook to deploy Docker on the host ](img/B18383_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Execute the playbook to deploy Docker on the host
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that it has been installed. Log into `node1` and check the details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Verifying the Docker installation ](img/B18383_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Verifying the Docker installation
  prefs: []
  type: TYPE_NORMAL
- en: With that, Docker has been installed and configured on the host, which means
    we can start running containers.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will learn about the capabilities of Ansible for managing containerized
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible, containers, and CI/CD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Containerizing applications will give you more options for integrating, delivering,
    and deploying them since most of the tools support automated builds, tests, and
    executions. A typical containerized application workflow can be seen in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Typical CI/CD tasks in a Docker-based deployment ](img/B18383_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Typical CI/CD tasks in a Docker-based deployment
  prefs: []
  type: TYPE_NORMAL
- en: Most of the tasks in the preceding diagram can be automated using Ansible as
    the Ansible collection for Docker and Podman contains several modules to support
    building, running, and managing containers on your container host. Either implement
    the entire workflow using Ansible or use Ansible with our favourite CI/CD tools
    and execute the tasks more flexibly. You will learn how to integrate Ansible with
    Jenkins in *Chapter 12*, *Integrating Ansible with Your Tools*.
  prefs: []
  type: TYPE_NORMAL
- en: In this next section, you will learn how to manage containers using Ansible
    and manage the container life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Managing containers using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible collection, `community.docker` ([https://galaxy.ansible.com/community/docker](https://galaxy.ansible.com/community/docker)),
    contains more than 25 Ansible modules and ~10 plugins for connection, inventory,
    and more. These modules will help you manage containers, container images, images
    in the container registry, the Docker network, Docker volumes, Docker swarm, and
    other container-based operations.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Podman, then check out the `containers.podman` collection ([https://galaxy.ansible.com/containers/podman](https://galaxy.ansible.com/containers/podman))
    in Ansible Galaxy.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming sections, you will learn how to build, start, and manage containers
    using Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Ansible Docker collection
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing a collection is straightforward, as you learned in the previous
    chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update your `ansible.cfg` with the collection path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – ansible.cfg with the collection and role paths ](img/B18383_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – ansible.cfg with the collection and role paths
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `community.docker` Ansible collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Installing community.docker collection ](img/B18383_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Installing community.docker collection
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the collection has been installed in the collection path, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Docker collection installed in the collection path ](img/B18383_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Docker collection installed in the collection path
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using the Ansible community package, then there might be an old
    version of the `community.docker` collection in the default path. This is the
    reason we are installing the latest version of the collection on our project path
    (`COLLECTIONS_PATHS =`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Docker collection from the default Ansible installation ](img/B18383_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – Docker collection from the default Ansible installation
  prefs: []
  type: TYPE_NORMAL
- en: Once the collection is available to use, start using the Docker modules that
    have been installed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing an Ansible Collection on a Disconnected Ansible Control Node
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are inside a restricted environment (disconnected or no internet), then
    follow an alternative method to install an Ansible collection and roles: *How
    to install an Ansible Collection on a disconnected Ansible control node* ([https://www.techbeatly.com/how-to-install-an-ansible-collection-on-a-disconnected-ansible-control-node](https://www.techbeatly.com/how-to-install-an-ansible-collection-on-a-disconnected-ansible-control-node)).'
  prefs: []
  type: TYPE_NORMAL
- en: Starting a Docker container using Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use your own container images or use the existing container images from the
    public Docker registries such as Docker Hub (`https://hub.docker.com`), Quay.io
    ([https://quay.io/repository](https://quay.io/repository)), and GitHub Container
    Registry ([https://ghcr.io](https://ghcr.io)). It is also possible to use the
    container images from private repositories, but you will need to authenticate
    to the container registries (with a username, password, or tokens) to pull or
    push the container images. You will learn about registry authentication in the
    *Building container images using Ansible* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to run a Docker container using Ansible.
    To make this demonstration simple, we will be using the default `nginx` ([https://hub.docker.com/_/nginx](https://hub.docker.com/_/nginx))
    container image, but always explore using other container images later:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a playbook called `Chapter-10/container-manage.yaml`, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.11 – container-manage.yaml ](img/B18383_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – container-manage.yaml
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The variables can be configured in different variable files dynamically, such
    as `host_vars` or `group_vars`, or via external variables. The variables that
    have been used inside the playbook have been provided to demonstrate the use case’s
    execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a task to start a container using the variable details, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.12 – container-manage.yaml – part 2  ](img/B18383_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – container-manage.yaml – part 2
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `container_action` variable later to control other actions for
    the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add another `Chapter-10/container-manage.yaml` in the repository for the full
    playbook):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.13 – container-manage.yaml – using a second play to verify the
    application running inside the container ](img/B18383_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – container-manage.yaml – using a second play to verify the application
    running inside the container
  prefs: []
  type: TYPE_NORMAL
- en: (Refer to [*Chapter 1*](B18383_01.xhtml#_idTextAnchor014), *Ansible Automation
    – Introduction* to see a playbook with multiple plays.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook with `NODES` set to `dockerhost`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Execute the playbook on the Docker host ](img/B18383_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – Execute the playbook on the Docker host
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the playbook has been successfully executed, verify the container from
    the Docker host (`node1`), as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.15 – An nginx container running on the Docker host ](img/B18383_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – An nginx container running on the Docker host
  prefs: []
  type: TYPE_NORMAL
- en: Here, the `nginx` container is called `web` and is exposing the service on port
    `8080` of the Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Access the website running inside the `nginx` container. You need to remember
    to pass port `8080` since the Docker port is exposed on `8080`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.16 – The nginx application available after using the curl command
    ](img/B18383_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – The nginx application available after using the curl command
  prefs: []
  type: TYPE_NORMAL
- en: 'Access the website from a web browser, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.17 – The nginx web server running inside a Docker container deployed
    using Ansible ](img/B18383_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.17 – The nginx web server running inside a Docker container deployed
    using Ansible
  prefs: []
  type: TYPE_NORMAL
- en: Add more complex configurations to the container, such as different Docker networks,
    mounted volumes, and so on. Refer to the documentation at [https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.xhtml](https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.xhtml)
    for various arguments and parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping Docker containers using Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the CI/CD process, when you build containers for testing, you also need to
    take care of the cleanup tasks. Once the tests have been completed, you need to
    stop the container and delete it as part of housekeeping. Use the same Ansible
    module, `community.docker.docker_container`, to handle the entire container life
    cycle, such as stopping, deleting, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to stop and remove the container we created
    in the previous exercise. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the previous playbook, `Chapter-10/container-manage.yaml`, and add tasks
    to the first play, `Manage Docker containers`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.18 – Adding tasks to stop and remove the container ](img/B18383_10_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.18 – Adding tasks to stop and remove the container
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook and pass `container_action=stop` as an extra variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.19 - Execute the container-manage.yaml file to stop the container
    ](img/B18383_10_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.19 - Execute the container-manage.yaml file to stop the container
  prefs: []
  type: TYPE_NORMAL
- en: 'On the container host (`node1`), verify whether any containers are running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.20 – The nginx container has been stopped and removed ](img/B18383_10_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.20 – The nginx container has been stopped and removed
  prefs: []
  type: TYPE_NORMAL
- en: Add more tasks to the playbook, such as for verifying the ports, backing up
    some configurations from container volumes, and accessing API calls as part of
    testing, as needed.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you tested simple container executions using the public container
    image from Docker Registry. In the next section, you will learn how to build a
    custom container image with all the necessary dependencies using Ansible and run
    containers using custom images.
  prefs: []
  type: TYPE_NORMAL
- en: Managing container images using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned from *Figure 10.6*, your integration stage will begin when the
    developers push the code or merge the branches in a Git repository. Call the container
    build commands directly from your CI/CD tools, such as **Jenkins** or **GitHub
    Actions**. However, commands and pipeline tasks are unpredictable, so you will
    not have much control over the output and results. This is where you can utilize
    Ansible playbooks as you have more flexibility and control over the build processes
    and outputs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few sections, you will learn how to create Docker container registry
    access, build container images using Ansible, and save the container images in
    the container registry.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Docker Registry access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before pushing the latest images to the container registries, you need to log
    into the registry with your credentials. Access Docker Registry using a username
    and password, but it is a best practice to use **Access Tokens** instead of passwords.
    The following diagram shows how Ansible accesses the container registry to manage
    container images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.21 – Ansible to Container Registry access ](img/B18383_10_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.21 – Ansible to Container Registry access
  prefs: []
  type: TYPE_NORMAL
- en: 'For this demonstration, you will be using Docker Registry. Check out the documentation
    (refer to the *Container Registry Access Tokens* information box) for other registries.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Docker Hub at [hub.docker.com](http://hub.docker.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top right, click on your profile name and select **Account Settings**
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Security** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **New Access Token** button and enter a name for your token. After
    that, select the **Read, Write, Delete** permission under **Access permissions**
    and click **Generate**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.22 – Creating a new access token in Docker Hub ](img/B18383_10_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.22 – Creating a new access token in Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: You will see the instructions and token text on the next screen. Remember to
    copy and keep the token safe as this token text will not be visible later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Container Registry Access Tokens
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Access Tokens, please refer to [https://docs.docker.com/docker-hub/access-tokens/](https://docs.docker.com/docker-hub/access-tokens/)
    (Docker Hub) and [https://docs.quay.io/glossary/access-token.xhtml](https://docs.quay.io/glossary/access-token.xhtml)
    (Quay).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an Ansible Vault file to keep the Docker Registry credentials in, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.23 – Using an Ansible Vault file for your Docker Registry credentials
    ](img/B18383_10_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.23 – Using an Ansible Vault file for your Docker Registry credentials
  prefs: []
  type: TYPE_NORMAL
- en: 'Add your Docker username and Access Token value to the file and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.24 – Adding your Docker username and password to the Ansible Vault
    file ](img/B18383_10_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.24 – Adding your Docker username and password to the Ansible Vault
    file
  prefs: []
  type: TYPE_NORMAL
- en: These variables will be used to access Docker Registry in the next sections.
    It is possible to keep this sensitive information in environment variables or
    the built-in secret management features of your CI/CD software (such as credentials
    in Jenkins).
  prefs: []
  type: TYPE_NORMAL
- en: Building container images using Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you may recall, you can use the existing available Docker container images
    from public registries such as Docker Hub or Quay. But for our application, we
    need to build container images and use them to deploy the application.
  prefs: []
  type: TYPE_NORMAL
- en: With the help of `community.docker.docker_image` and other modules, we can easily
    build container images and push those images to container registries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create applications or find sample applications on the internet and use them
    for practicing further. The following are some options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/spring-projects/spring-petclinic](https://github.com/spring-projects/spring-petclinic)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/docker/getting-started/tree/master/app](https://github.com/docker/getting-started/tree/master/app)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/dockersamples/example-voting-app](https://github.com/dockersamples/example-voting-app)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/dockersamples](https://github.com/dockersamples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this section, you will containerize a simple Node.js application ([https://github.com/ginigangadharan/nodejs-todo-demo-app](https://github.com/ginigangadharan/nodejs-todo-demo-app))
    using a Dockerfile. A Dockerfile ([https://docs.docker.com/engine/reference/builder](https://docs.docker.com/engine/reference/builder))
    is a simple plain text file containing instructions for building the container
    image. After that, you will use Ansible to build the container image and push
    it to Docker Registry. The following diagram shows the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.25 – Building and managing a container image using Ansible ](img/B18383_10_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.25 – Building and managing a container image using Ansible
  prefs: []
  type: TYPE_NORMAL
- en: Podman and Containerfiles
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a different container engine, such as Podman, then check out
    the respective module documentation and use it accordingly. Podman modules for
    Ansible can be found at [https://docs.ansible.com/ansible/latest/collections/containers/podman/index.xhtml](https://docs.ansible.com/ansible/latest/collections/containers/podman/index.xhtml),
    while the Podman build documentation is available at [https://docs.podman.io/en/latest/markdown/podman-build.1.xhtml](https://docs.podman.io/en/latest/markdown/podman-build.1.xhtml).
    This will help you learn more about Containerfiles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Access the repository and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the Dockerfile inside the application repository ([https://github.com/ginigangadharan/nodejs-todo-demo-app](https://github.com/ginigangadharan/nodejs-todo-demo-app)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.26 – Verifying the Dockerfile to build the container image  ](img/B18383_10_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.26 – Verifying the Dockerfile to build the container image
  prefs: []
  type: TYPE_NORMAL
- en: The Dockerfile contains instructions for building the container image and exposing
    the application on port `3000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The repository also contains a simple **ToDo** application written in **Node.js**
    with supported files and directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.27 – Application repository content ](img/B18383_10_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.27 – Application repository content
  prefs: []
  type: TYPE_NORMAL
- en: Fork this repository and make changes as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a playbook called `Chapter-10/container-build.yaml` and add the required
    variables to build the container image as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.28 – Playbook to build the container image ](img/B18383_10_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.28 – Playbook to build the container image
  prefs: []
  type: TYPE_NORMAL
- en: Using variables will help you dynamically pass the values to the same playbook
    for different image build tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Registry URL
  prefs: []
  type: TYPE_NORMAL
- en: Note that [https://index.docker.io/v1/](https://index.docker.io/v1/) is the
    default URL for the Docker Hub registry. If you are using a different registry
    or other private container registries, then find the correct registry URL and
    use it as `container_registry_url`.
  prefs: []
  type: TYPE_NORMAL
- en: Also check the included variable file `vars/docker-credential.yaml`, which contains
    the Docker Registry username and Access Token (refer to the *Configuring Docker
    Registry access* section in this chapter for more details).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a task that will create a temporary working directory on the host and check
    out the application repository. This is to avoid using the default directory names
    and overwriting issues when the same playbook executes in parallel. You also need
    to delete the directory at the end of the play as part of housekeeping:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.29 – Tasks to build the container image ](img/B18383_10_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.29 – Tasks to build the container image
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a task to delete the image if it already exists with the same name and
    tag before creating the new container image. Also add the task for building the
    container image by providing the working directory path – that is, `temp_location.path`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.30 – Delete and create new container image ](img/B18383_10_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.30 – Delete and create new container image
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to include tasks such as scanning the image, testing the vulnerabilities,
    and more, they can be included at this stage (or include this as part of the `post-build`
    stage in your CI/CD pipeline):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.31 – Include scanning or testing tasks ](img/B18383_10_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.31 – Include scanning or testing tasks
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to authenticate to Docker Registry before pushing the image to
    the repository. Once authenticated, push the image to Docker Registry, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.32 – Authenticate to Docker Hub and push the image to the container
    registry ](img/B18383_10_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.32 – Authenticate to Docker Hub and push the image to the container
    registry
  prefs: []
  type: TYPE_NORMAL
- en: 'Optionally, add the `latest` tag to the image that will be used when you don’t
    mention any tag while pulling the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.33 – Add the latest tag to the image and log out from Docker Hub
    ](img/B18383_10_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.33 – Add the latest tag to the image and log out from Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: Also, notice the last task to log out from the container registry. For security
    reasons, always log out of Docker Registry once the image has been pushed (or
    pulled).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, delete the temporary working directory as part of the cleanup process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.34 – Delete the temporary working directory ](img/B18383_10_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.34 – Delete the temporary working directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbooks and verify the result. Remember to include `--ask-vault-password`
    in the command since you have included the Docker credential using Ansible Vault:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.35 – Execute the playbook to build and push the container image
    ](img/B18383_10_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.35 – Execute the playbook to build and push the container image
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, verify the image from multiple places, such as from a Docker host and
    the Docker Registry GUI (Docker Hub: [https://hub.docker.com/repositories](https://hub.docker.com/repositories)).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the image on the Docker host (`node1`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.36 – Container image built using Ansible ](img/B18383_10_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.36 – Container image built using Ansible
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, verify the image in the Docker Hub GUI ([https://hub.docker.com/repositories](https://hub.docker.com/repositories)),
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.37 – Docker image in Docker Hub ](img/B18383_10_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.37 – Docker image in Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the container image entry to view more details about the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.38 – Docker image details ](img/B18383_10_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.38 – Docker image details
  prefs: []
  type: TYPE_NORMAL
- en: Add more details to the image, such as `README` information about the container
    image, supported tags, documentation links, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have the latest container image ready with our application in
    the container registry. We can test it with the same `Chapter-10/container-manage.yaml`
    playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to run container with new image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run a new container using the `Chapter-10/container-manage.yaml` playbook but
    pass appropriate extra variables such as `container_image`, `container_name`,
    `container_port`, and `container_expose_port`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.39 – Run container with different image ](img/B18383_10_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.39 – Run container with different image
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the container has been created, verify it on the Docker host (`node1`),
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.40 – The ToDo application container deployed using Ansible ](img/B18383_10_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.40 – The ToDo application container deployed using Ansible
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the application from a web browser. Remember to add port `8081`, as
    shown in the following screenshot, since we used port `8081` while running the
    container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.41 – Accessing the ToDo app from a web browser ](img/B18383_10_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.41 – Accessing the ToDo app from a web browser
  prefs: []
  type: TYPE_NORMAL
- en: 'Add some entries and test the application, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.42 – Testing the ToDo application with sample entries ](img/B18383_10_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.42 – Testing the ToDo application with sample entries
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the container as part of housekeeping using the same playbook but by passing
    the `container_action=stop` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.43 – Stop container using playbooks ](img/B18383_10_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.43 – Stop container using playbooks
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The data you have stored will be lost when you stop and kill the container as
    you did not mount any volumes for data persistence. Add more configurations and
    volume details to `Chapter-10/container-manage.yaml` and enhance your playbook.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to handle single containers and container images.
    But it is possible to handle any number of images and containers using Ansible
    based on your application stack. In the next section, you will learn how to handle
    multiple containers using Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Managing multi-container applications using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will use the well-known **Content Management System** (**CMS**)
    application stack known as WordPress ([https://wordpress.org](https://wordpress.org)).
    The WordPress application is based on multiple application stacks, including PHP,
    a web server, and a database. The WordPress application is available as a container
    image ([https://hub.docker.com/_/wordpress](https://hub.docker.com/_/wordpress)).
    For the database, we will deploy another container using MariaDB ([https://hub.docker.com/_/mariadb](https://hub.docker.com/_/mariadb)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Please refer to the `Chapter-10/deploy-wordpress-on-docker.yaml` file to see
    the Ansible playbook for deploying the WordPress CMS using Ansible. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We declared the essential parameters on top of the playbook, as shown in the
    following screenshot. Remember to store sensitive data such as database usernames
    and passwords using Ansible Vault (or Credential in Ansible Automation Controller)
    or other secret management services. These variables are then passed to the container
    as environment variables and Docker volumes will be created, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.44 – Deploying WordPress using Ansible ](img/B18383_10_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.44 – Deploying WordPress using Ansible
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two tasks, as shown in the following screenshot. The first task will
    deploy the MariaDB container, while the second task will deploy the WordPress
    container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.45 – Ansible tasks for deploying the WordPress and MariaDB containers
    ](img/B18383_10_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.45 – Ansible tasks for deploying the WordPress and MariaDB containers
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook to deploy the WordPress stack with the MariaDB database
    on `node1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.46 – Deploy WordPress using Ansible ](img/B18383_10_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.46 – Deploy WordPress using Ansible
  prefs: []
  type: TYPE_NORMAL
- en: 'On `node1`, verify the Docker containers and Docker volumes, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.47 – The WordPress and MariaDB containers running on the Docker
    host ](img/B18383_10_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.47 – The WordPress and MariaDB containers running on the Docker host
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the WordPress application from a browser using port `8082`, which we
    have configured to expose. The initial configuration for WordPress will be visible,
    as shown in the following screenshot. Now, we can configure the WordPress CMS
    application ([https://wordpress.org/support/article/how-to-install-wordpress/#setup-configuration-file](https://wordpress.org/support/article/how-to-install-wordpress/#setup-configuration-file)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.48 – The initial WordPress configuration screen ](img/B18383_10_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.48 – The initial WordPress configuration screen
  prefs: []
  type: TYPE_NORMAL
- en: The playbook can be enhanced by configuring additional volumes and configurations;
    please refer to the WordPress installation documentation to implement more automation
    steps for such use cases ([https://wordpress.org/support/article/how-to-install-wordpress/#setup-configuration-file](https://wordpress.org/support/article/how-to-install-wordpress/#setup-configuration-file)).
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have learned that the entire container image life cycle can be
    automated using Ansible in different stages of your CI/CD pipelines. This will
    give you more control over building and testing compared to using the native container
    management features in the available CI/CD tools.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install and configure Docker on a Linux
    machine using Ansible. Then, you learned how to pull an image from the container
    registry, and then start that container and stop it using Ansible modules. Finally,
    you learned how to use Ansible to build container images with a Dockerfile, as
    well as how to build application content and push a container image to the container
    registry. You also tested the newly built container images by running a container
    with Ansible modules. Knowing how to manage containers and container images using
    Ansible will help you implement better and more efficient CI/CD workflows and
    pipelines. Instead of struggling with the limited features in the CI/CD tools,
    utilize the flexibility of Ansible to add more validations, tests, and integrations
    to the container build process.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to manage containerized applications
    in Kubernetes and manage other Kubernetes resources and applications using Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Container registry access tokens for Docker Hub*: [https://docs.docker.com/docker-hub/access-tokens](https://docs.docker.com/docker-hub/access-tokens)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible docker-compose module*: [https://docs.ansible.com/ansible/latest/collections/community/docker/docker_compose_module.xhtml](https://docs.ansible.com/ansible/latest/collections/community/docker/docker_compose_module.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Docker RUN and environment variables*: [https://docs.docker.com/engine/reference/commandline/run/#set-environment-variables--e---env---env-file](https://docs.docker.com/engine/reference/commandline/run/#set-environment-variables--e---env---env-file)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dockerfile documentation*: [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Top 5 Free Resources to Learn Docker*: [https://www.techbeatly.com/top-5-free-resources-to-learn-docker/](https://www.techbeatly.com/top-5-free-resources-to-learn-docker/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
