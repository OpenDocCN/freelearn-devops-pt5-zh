- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating and Consuming Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules have been a very obvious and key part of our journey through Ansible
    so far. They are used to execute well-defined tasks and can be used either in
    one-off commands (using ad hoc commands) or as part of a much larger playbook.
    Plugins are just as important to Ansible, and we have used them in all of our
    testing so far without even realizing it! While modules are always used to create
    some kind of task in Ansible, the way that plugins are used depends on their use
    case. There are many different types of plugins; we will introduce them to you
    in this chapter and give you an idea of their purpose. But, as a tester, did you
    realize that when Ansible connects to a remote server using SSH, functionality
    is provided by a connection plugin? This demonstrates the important role that
    plugins play.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will provide you with an in-depth introduction to plugins,
    as well as show you how to explore the various plugins that come with Ansible.
    We’ll then expand on this by demonstrating how you can create your own plugins
    and use them in an Ansible project, in very much the same way as we did with our
    custom module in the previous chapter. This will hopefully help you understand
    the limitless possibilities that open source software such as Ansible provides.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the plugin types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the included plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter assumes that you have set up your control host with Ansible, as
    detailed in [*Chapter 1*](B20846_01.xhtml#_idTextAnchor015), *Getting Started
    with Ansible*, and that you are using the most recent version available. The examples
    in this chapter have been tested with `ansible-core` version 2.15\. This chapter
    also assumes that you have at least one additional host to test against; ideally,
    this should be Linux-based.
  prefs: []
  type: TYPE_NORMAL
- en: Although we will give specific examples of hostnames in this chapter, you are
    free to substitute them with your own hostname and/or IP addresses, and details
    of how to do this are provided at the appropriate places. The plugin development
    work covered in this chapter assumes the presence of a Python 3 development environment
    on your computer, and that you are running either Linux, FreeBSD, or macOS. Where
    additional Python modules are needed, their installation is documented. The task
    of building module documentation has some very specific requirements in Python
    3.10 or later, so it is assumed you can install a suitable Python environment
    if you wish to attempt this.
  prefs: []
  type: TYPE_NORMAL
- en: The code bundle for this chapter is available at [https://github.com/PacktPublishing/Practical-Ansible-Second-Edition/tree/main/Chapter%207](https://github.com/PacktPublishing/Practical-Ansible-Second-Edition/tree/main/Chapter%207).
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the plugin types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible’s code has always been designed to be modular—indeed, this is one of
    its core strengths. Whether that is through the use of modules to perform tasks
    or through plugins (as we will see shortly), Ansible’s modular design allows it
    to be as versatile and powerful as it has demonstrated itself to be so far in
    this book. As with modules, Ansible plugins are all written in Python and are
    expected to ingest and return data in a certain well-defined format (more on this
    later). Ansible’s plugins are often invisible in their function in that you rarely
    call them by name in your commands or playbooks, yet they are responsible for
    some of the most important features Ansible has to offer, including SSH connectivity,
    the ability to parse inventory files (in INI format, YAML, or otherwise), and
    the ability to run `jinja2` filters on your data.
  prefs: []
  type: TYPE_NORMAL
- en: 'As ever, let’s validate the presence of a suitably installed version of Ansible
    on your test machine before proceeding further:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As much work goes into documenting the plugins as it does into documenting the
    modules, so you will be pleased to know that there is a plugin index available
    at [https://docs.ansible.com/ansible/latest/plugins/plugins.xhtml](https://docs.ansible.com/ansible/latest/plugins/plugins.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `ansible-doc` command as we did before, only you need to
    add the `-t` with the module’s name, too. Plugins are always placed in an appropriate
    category as their function is radically different between categories. If you don’t
    specify the `-t` switch with `ansible-doc`, you end up specifying the `ansible-doc
    -t` module, which returns a list of the available modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, the following plugin types can be found in Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: '`become`: Responsible for enabling Ansible to obtain super-user access (for
    example, through `sudo`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache`: Responsible for caching facts retrieved from backend systems to improve
    automation performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callback`: Allows you to add new behaviors when responding to events – for
    example, changing the format that data is printed in in the output of an Ansible
    playbook run'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cliconf`: Provides abstractions to the command-line interfaces of various
    network devices, giving Ansible a standard interface to operate on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection`: Provides connectivity from Ansible to remote systems (for example,
    over SSH, WinRM, Docker, and many more)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`httpapi`: Tells Ansible how to interact with a remote system’s API (for example,
    for a Fortinet firewall)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inventory`: Provides Ansible with the ability to parse various static and
    dynamic inventory formats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lookup`: Allows Ansible to look up data from an external source (for example,
    by reading a flat text file)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`netconf`: Provides Ansible with abstractions to enable it to work with NETCONF-enabled
    networking devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shell`: Provides Ansible with the ability to work with various shells on different
    systems (for example, `powershell` on Windows versus `sh` on Linux)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strategy`: Provides plugins to Ansible with different execution strategies
    (for example, the debug strategy we saw in [*Chapter 4*](B20846_04.xhtml#_idTextAnchor207),
    *Playbooks* *and Roles*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vars`: Provides Ansible with the ability to source variables from certain
    sources, such as the `host_vars` and `group_vars` directories we explored in [*Chapter
    3*](B20846_03.xhtml#_idTextAnchor158), *Defining* *Your Inventory*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will leave exploring the plugin documentation on the Ansible website as
    an exercise for you to complete. However, if you want to explore the various plugins
    using the `ansible-doc` tool, you would need to run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `ansible-doc` command to list all the plugins available in a given
    category, you can run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return a textual index of the connection plugins, similar to what
    we saw when we were looking at the module documentation. The first few lines of
    the index output are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: ￼
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Ansible documentation for connection
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then explore the documentation for a given plugin. For example, if
    we want to learn about the `paramiko_ssh` plugin, we can issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will find that the plugin documentation takes on a very familiar format,
    similar to what we saw for the modules in [*Chapter 5*](B20846_05.xhtml#_idTextAnchor279),
    *Creating and* *Consuming* *Modules*:'
  prefs: []
  type: TYPE_NORMAL
- en: ￼
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Ansible documentation for the paramiko_ssh connection
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to all the hard work and effort that goes into documenting every area
    of Ansible, you can easily find out about the plugins that are included with Ansible
    and how to work with them. So far, we have seen that the documentation for plugins
    is no less complete than it is for modules. In the next section of this chapter,
    we’ll dive a bit deeper into how to find the plugin code that accompanies your
    Ansible distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Finding included plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in the preceding section, plugins are not as apparent in Ansible
    as their module counterparts are, and yet we have been using them behind the scenes
    in every single Ansible command we’ve issued so far! Let’s build on our work in
    the previous section, where we looked at the plugin documentation, by looking
    at where we can find the source code for the plugins. This, in turn, will serve
    as a precursor to us building a simple plugin of our own.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you installed Ansible on a Linux system using a package manager (that is,
    via an RPM or DEB package), then the location of your plugins will depend on your
    OS. For example, on my test CentOS 8 system where I installed Ansible from the
    official RPM package, I can see the plugins installed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how the plugins are separated into subdirectories, all named after their
    categories. If we want to look up the `paramiko_ssh` plugin, which we reviewed
    the documentation of in the preceding section, we can look in the `connection/`
    subdirectory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'However, in general, I do not recommend that you edit or change the files that
    are installed from a package as you might all too easily overwrite them when upgrading
    the package. As one of our goals in this chapter is to write a simple custom plugin,
    let’s look at how to find the plugins in the official Ansible source code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the official Ansible repository from GitHub, as we did previously, and
    change the directory to the location of your clone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'connection directory:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The exact contents of this directory will depend on the version of the Ansible
    source code that you have cloned. At the time of writing, it looks as follows,
    with one Python file for each plugin (similar to how we saw one Python file for
    each module in [*Chapter 5*](B20846_05.xhtml#_idTextAnchor279), *Creating and*
    *Consuming* *Modules*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can review the contents of each plugin to learn more about how they work,
    which is again part of the beauty of open source software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An example of the beginning of this file is shown in the following code block
    to give you an idea of the kind of output you should be seeing if this command
    runs correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: ├── hosts
  prefs: []
  type: TYPE_NORMAL
- en: ├── lookup_plugins
  prefs: []
  type: TYPE_NORMAL
- en: │ └── firstchar.py
  prefs: []
  type: TYPE_NORMAL
- en: ├── myplugin2.yml
  prefs: []
  type: TYPE_NORMAL
- en: └── testdoc.txt
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: (c) 2020, James Freeman <james.freeman@example.com>
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'def improve_automation(a):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return a.replace("Puppet", "Ansible")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class FilterModule(object):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''''''improve_automation filters'''''''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def filters(self):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'return {''improve_automation'': improve_automation}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: Play to demonstrate our custom filter'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'hosts: frontends'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'gather_facts: false'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'vars:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'statement: "Puppet is an excellent automation tool!"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: make a statement'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'debug:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'msg: "{{ statement | improve_automation }}"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: ├── filter_plugins
  prefs: []
  type: TYPE_NORMAL
- en: │ ├── custom_filter.py
  prefs: []
  type: TYPE_NORMAL
- en: ├── hosts
  prefs: []
  type: TYPE_NORMAL
- en: ├── myplugin.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible-playbook -i hosts myplugin.yml
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [Play to demonstrate our custom filter] ***********************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [make a statement] ********************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [frt01.example.com] => {'
  prefs: []
  type: TYPE_NORMAL
- en: '"msg": "Ansible is an excellent automation tool!"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP *********************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'frt01.example.com : ok=1 changed=0 unreachable=0 failed=0 skipped=0 rescued=0
    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: (c) 2023, Daniel Oh <daniel.oh@example.com>
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: (c) 2020, James Freeman <james.freeman@example.com>
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: (c) 2012, Daniel Hokka Zakrisson <daniel@hozac.com>
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: (c) 2017 Ansible Project
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: from __future__ import (absolute_import, division, print_function)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: __metaclass__ = type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: DOCUMENTATION = """
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'lookup: firstchar'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'author: James Freeman <james.freeman@example.com>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'version_added: "2.15"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'short_description: read the first character of file contents'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- This lookup returns the first character of the contents from a file on the
    Ansible controller''s file system.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'options:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '_terms:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description: path(s) of files to read'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'required: True'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'notes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- if read in variable context, the file can be interpreted as YAML if the content
    is valid to the parser.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- this lookup does not understand ''globing'', use the fileglob lookup instead.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"""'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: EXAMPLES = """
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- debug: msg="the first character in foo.txt is {{lookup(''firstchar'', ''/etc/foo.txt'')
    }}"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"""'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: RETURN = """
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '_raw:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- first character of content of file(s)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"""'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: from ansible.errors import AnsibleError, AnsibleParserError
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from ansible.plugins.lookup import LookupBase
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from ansible.utils.display import Display
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display = Display()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class LookupModule(LookupBase):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def run(self, terms, variables=None, **kwargs):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ret = []
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'for term in terms:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'display.debug("File lookup term: %s" % term)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: lookupfile = self.find_file_in_search_path(variables, 'files', term)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: display.vvvv(u"File lookup using %s as file" % lookupfile)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'try:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if lookupfile:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: contents, show_data = self._loader._get_file_contents(lookupfile)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ret.append(contents.rstrip()[0])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: raise AnsibleParserError()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except AnsibleParserError:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'raise AnsibleError("could not locate file in lookup: %s" % term)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: return ret
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: Play to demonstrate our custom lookup plugin'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'hosts: frontends'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'gather_facts: false'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'tasks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: make a statement'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'debug:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'msg: "{{ lookup(''firstchar'', ''testdoc.txt'')}}"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Hello
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-playbook -i hosts myplugin2.yml
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PLAY [Play to demonstrate our custom lookup plugin] ****************************
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: TASK [make a statement] ********************************************************
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ok: [frt01.example.com] => {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"msg": "H"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PLAY RECAP *********************************************************************
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'frt01.example.com : ok=1 changed=0 unreachable=0 failed=0 skipped=0 rescued=0
    ignored=0'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'lookup plugin would go into the lookup plugin’s directory, using a command
    such as the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ . hacking/env-setup
  prefs: []
  type: TYPE_NORMAL
- en: running egg_info
  prefs: []
  type: TYPE_NORMAL
- en: creating lib/ansible.egg-info
  prefs: []
  type: TYPE_NORMAL
- en: writing requirements to lib/ansible.egg-info/requires.txt
  prefs: []
  type: TYPE_NORMAL
- en: writing lib/ansible.egg-info/PKG-INFO
  prefs: []
  type: TYPE_NORMAL
- en: writing top-level names to lib/ansible.egg-info/top_level.txt
  prefs: []
  type: TYPE_NORMAL
- en: writing dependency_links to lib/ansible.egg-info/dependency_links.txt
  prefs: []
  type: TYPE_NORMAL
- en: writing manifest file 'lib/ansible.egg-info/SOURCES.txt'
  prefs: []
  type: TYPE_NORMAL
- en: reading manifest file 'lib/ansible.egg-info/SOURCES.txt'
  prefs: []
  type: TYPE_NORMAL
- en: reading manifest template 'MANIFEST.in'
  prefs: []
  type: TYPE_NORMAL
- en: 'warning: no files found matching ''SYMLINK_CACHE.json'''
  prefs: []
  type: TYPE_NORMAL
- en: writing manifest file 'lib/ansible.egg-info/SOURCES.txt'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Ansible to run out of checkout...
  prefs: []
  type: TYPE_NORMAL
- en: PATH=/home/james/ansible/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
  prefs: []
  type: TYPE_NORMAL
- en: PYTHONPATH=/home/james/ansible/lib
  prefs: []
  type: TYPE_NORMAL
- en: MANPATH=/home/james/ansible/docs/man:/usr/local/share/man:/usr/share/man
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you may wish to specify your host file with -i
  prefs: []
  type: TYPE_NORMAL
- en: Done!
  prefs: []
  type: TYPE_NORMAL
- en: $ ansible-doc -t lookup firstchar
  prefs: []
  type: TYPE_NORMAL
- en: FIRSTCHAR (/home/james/ansible/lib/ansible/plugins/lookup/firstchar.py)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This lookup returns the first character of the contents from a
  prefs: []
  type: TYPE_NORMAL
- en: file on the Ansible controller's file system.
  prefs: []
  type: TYPE_NORMAL
- en: '* This module is maintained by The Ansible Community'
  prefs: []
  type: TYPE_NORMAL
- en: 'OPTIONS (= is mandatory):'
  prefs: []
  type: TYPE_NORMAL
- en: = _terms
  prefs: []
  type: TYPE_NORMAL
- en: path(s) of files to read
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '$ git clone https://github.complugins/ directory. The copy command used in
    the following code block is just an example to give you an idea as to what to
    do – in reality, you should choose the appropriate category subdirectory for your
    plugin as it won’t necessarily fit into the lookup category. Once you’ve added
    your Python file, perform a git add command to make Git aware of the new file,
    and then commit it with a meaningful commit message. Some example commands are
    shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ git push
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
