- en: Chapter 3. Volume Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will get an overview of both first and third-party volume
    plugins. We will be discussing installing, configuring, and using the following
    storage plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Volumes**: [https://docs.docker.com/engine/userguide/containers/dockervolumes/](https://docs.docker.com/engine/userguide/containers/dockervolumes/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convoy**: [https://github.com/rancher/convoy/](https://github.com/rancher/convoy/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**REX-Ray**: [https://github.com/emccode/rexray/](https://github.com/emccode/rexray/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flocker**: [https://clusterhq.com/flocker/introduction/](https://clusterhq.com/flocker/introduction/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also get an understanding of how to interact with Docker plugins and
    how they both differ and work with the supporting tools that we covered in [Chapter
    2](ch02.html "Chapter 2. Introducing First-party Tools"), *Introducing First-party
    Tools*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter assumes that you are using Docker 1.10+. Note that some commands
    may not work in previous versions.
  prefs: []
  type: TYPE_NORMAL
- en: Zero volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we look at volumes, let's look at what happens when you do not use any
    volumes at all and store everything directly on the containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with, let''s create a new Docker instance called `chapter03` locally
    using Docker Machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Zero volumes](img/B05468_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our machine, we can use Docker Compose to run through a scenario
    with WordPress. First of all, we will need to launch our WordPress containers,
    we are using the official WordPress and MySQL images from the Docker Hub as we
    did earlier, our `docker-compose.yml` file looks similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there is nothing special about the compose file. You can launch
    it by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have launched the containers, check their status by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If they both have state of `Up`, you can go to the WordPress installation screen
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open your browser and go to the IP address of your Docker instance.
    In my case, this is `http://192.168.99.100/`. You should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zero volumes](img/B05468_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s click on **Continue** button and install WordPress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zero volumes](img/B05468_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the information has been filled in, click on Install WordPress to complete
    the installation. When you do, the MySQL database will be updated with your settings
    and the test posts and comments will also be added. When this is completed, you
    will be shown a success screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zero volumes](img/B05468_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should now be able to rerun the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will take you to your very empty WordPress site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zero volumes](img/B05468_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Your command line history should look something similar to the following terminal
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zero volumes](img/B05468_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our WordPress site installed, let''s destroy the containers
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure you type `y` when prompted. You will then receive a confirmation
    message that your two containers have been removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zero volumes](img/B05468_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have removed our containers, let''s recreate them by running through
    the commands again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, you are presented with an installation screen again, which is
    to be expected as the MySQL database was stored on the `mysql` container that
    we removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move onto looking at what ships with Docker, let''s do some housekeeping
    and remove the containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The default volume driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start using the third-party volume plugins, we should take a look
    at what ships with Docker and how volumes solve the scenario we just worked through.
    Again, we will be using a `docker-compose.yml` file; however, this time, we will
    add a few lines to create and mount volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, here we are creating two volumes, one called `uploads`, which
    is being mounted to the WordPress uploads folder on the WordPress container. The
    second volume called `database`, which is being mounted in `/var/lib/mysql` on
    our MySQL container.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can launch the containers and open WordPress, using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we complete the WordPress installation in the browser, we should make
    sure that the `uploads` folder has the right permissions by running `docker exec`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that the permissions are correctly set on the `uploads` folder, we can go
    through the WordPress installation as per the previous test.
  prefs: []
  type: TYPE_NORMAL
- en: 'As WordPress creates a `Hello World!` test post as part of the installation,
    we should go and edit the post. To do this, log in to WordPress using the credentials
    that you entered during the installation. Once logged in, go to **Posts** | **Hello
    World** and then upload a featured image by clicking on **Set featured image**
    button. Your edit should look similar to the following screenshot once you have
    uploaded the featured image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The default volume driver](img/B05468_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once your image has been uploaded, click on **Update** button and then go to
    your WordPress homepage by clicking on the title on the top left-hand side of
    the screen. Once the home page opens, you should see your featured image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The default volume driver](img/B05468_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we remove our containers, you can run the following command to show
    all the volumes that have been created in Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When running the command, you should the two volumes that we defined in our
    `docker-compose.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The default volume driver](img/B05468_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Remember, as we discussed in the previous chapter, Docker Compose will prefix
    names with the project title (which is the name of the folder that `docker-compose.yml`
    is in), in this case, the project is called `wordpress-vol` and as `-` is not
    allow in names, it has been stripped out, leaving `wordpressvol`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the basic WordPress installation with updated content, let''s
    remove the containers as we did before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![The default volume driver](img/B05468_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this stage, you can probably guess what is going to happen next, let''s
    relaunch our containers and open the WordPress site in our browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It may take a few seconds for everything to start up, so if you don''t see
    your WordPress when the browser opens, refresh the page. If everything goes as
    planned, you should be presented with your edited `Hello World!` post:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The default volume driver](img/B05468_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While it looks like the same screenshot as earlier, you will notice that you
    have been logged out of WordPress. This is because, by default, WordPress stores
    its sessions on the filesystem, and as they are not stored in the uploads directory,
    the session files were lost when we removed the containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Volumes can also be shared between containers, if we add the following to our
    `docker-compose.yml` file anywhere in the `Services` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can launch a second container with WordPress running on `port 8080` and
    access the file we uploaded at `http://192.168.99.100:8080/wp-content/uploads/2016/02/containers-1024x512.png`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the preceding URL will differ for your installation as the IP address
    may be different, along with the upload date and file name.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get more information on a volume by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, this returns the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The default volume driver](img/B05468_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will have noticed that we have been using the `local` driver for our two
    volumes, this creates the volume on our Docker instance and mounts a folder from
    host machine, which is the Docker Machine host running under VirtualBox in this
    case.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the contents on the folder by SSHing into the host machine and
    going to the folder listed under the mount point returned by the `docker volume
    inspect` command. To SSH into the host and change to the root user, run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You will then be able to change to the folder containing the volume, the reason
    for changing to the root user is to make sure that you have permissions to see
    the contents on the folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The default volume driver](img/B05468_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding terminal output, the files are owned by an
    unknown user with a user ID and group ID of 32, in the container, this is the
    Apache user. Be careful if you add files directly or make any changes, as you
    may find yourself causing all sorts of permission errors when it comes to your
    containers accessing the files you have added/changed.
  prefs: []
  type: TYPE_NORMAL
- en: So far so good, but what are the limits? The biggest one is that your data is
    tied to a single instance. In the last chapter, we looked at clustering Docker
    using Swarm, we discussed that the containers launched with Docker Compose are
    tied to a single instance, which is great for development, but not so hot for
    production, where we may have several host instances that we want to start spreading
    our containers across, this is where third-party volume drivers come into play.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party volume drivers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several third-party volume drivers available, they all bring different
    functionality to the table. To start with, we are going to be looking at Convoy
    by Rancher.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we look at installing Convoy, we should look at launching a Docker instance
    somewhere in the cloud. As we already have launched Docker instance in both DigitalOcean
    and Amazon Web Services, we should terminate our local `chapter03` instance and
    relaunch it in one of these providers, I am going to be using DigitalOcean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![Third-party volume drivers](img/B05468_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One of the reasons that we have launched the instance in a cloud provider is
    that we need a full underlying operating system to be able install and use Convoy,
    while the image provided by Boot2Docker is good, it is a little too lightweight
    for our requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we do anything further, I would recommend you to attach a floating IP
    address to your DigitalOcean droplet. The reason for this is that, in this section
    of the chapter, we are going to be installing WordPress and then moving the installation
    to a new machine. Without a floating IP address, your WordPress installation may
    appear broken. You can find more details on floating IPs on the DigitalOcean website
    at [https://www.digitalocean.com/community/tutorials/how-to-use-floating-ips-on-digitalocean](https://www.digitalocean.com/community/tutorials/how-to-use-floating-ips-on-digitalocean).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Convoy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As already mentioned, we need to install Convoy on our underlying Docker hosts
    operating system. To do this, you should first SSH onto your Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the machine has been launched in DigitalOcean, we have connected as the root
    user; this means that we don't have to use `sudo` in front of the commands, however,
    as you could have launched the instance in another provider, I will keep them
    there so that you don't end up getting permission errors if you are not the root
    user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have used `ssh` command to get into our Docker host, we can install
    and start Convoy. Convoy is written in Go and ships as a static binary. This means
    that we don''t have to compile it manually; instead, we just need to grab the
    binary and copy it into place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There are later versions of Convoy available at [https://github.com/rancher/convoy/releases](https://github.com/rancher/convoy/releases);
    however, these are flagged for use with Rancher only. We will be looking at Rancher
    in detail in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our binary in place, we need to set up our Docker installation
    so that it loads the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `convoy.spec` file tells Docker where it can access Convoy; for more details
    on how plugins work refer to [Chapter 5](ch05.html "Chapter 5. Building Your Own
    Plugin"), *Building Your Own Plugin*.
  prefs: []
  type: TYPE_NORMAL
- en: Convoy is installed and ready to go, now we just have to add some storage. For
    testing purposes, we are going to be creating and using a loopback device; however,
    do not do this in production!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Loopback Device is a mechanism used to interpret files as real devices. The
    main advantage of this method is that all tools used on real disks can be used
    with a loopback device. Refer to [http://wiki.osdev.org/Loopback_Device](http://wiki.osdev.org/Loopback_Device).
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the loopback device and mount it, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our storage ready, we can start Convoy by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Convoy](img/B05468_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have Convoy running, type `exit` to leave the Docker host and return
    to your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Launching containers with a Convoy volume
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have Convoy up and running, we can make some changes to our `docker-compose.yml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Put the `docker-compose.yml` file in a `wordpressconvoy` folder if don't you
    will find you will need change the name of the volume in some of the later steps
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, I have highlighted a few changes. The first being that we have
    moved over to using MariaDB, the reason for this is that as we now using an actual
    filesystem rather just a folder on the host machine, we have a `lost` + `found`
    folder created, presently the official MySQL container fails to work as it believes
    there are already databases on the volume. To get around this, we can use the
    `--ignore-db-dir` directive when starting MySQL, which MariaDB supports.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s launch our containers and take a look at the volume that is created
    by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching containers with a Convoy volume](img/B05468_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we do anything further, complete the WordPress installation and upload
    some content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember to set the correct permissions on the volume before uploading content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Creating a snapshot using Convoy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, it's no different from the default volume driver. Let's look at creating
    a snapshot and then backing up of the volume, you will see why later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of call, let''s jump back to the Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create our first snapshot by running the following the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Once a snapshot has been created, you will receive a unique ID. In my case,
    these were `c00caa88-087d-45ad-9498-7610844c075e` and `4e2a2a6f-887c-4692-b2a8-e1f08aa42400`.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up our Convoy snapshot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have our snapshots, we can use these as a basis to create our backups.
    To do this, we must first make sure that the destination directory where we are
    going to store it exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have somewhere to store the backup, let''s create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the backup has been completed, you will receive confirmation in the form
    of a URL. For the uploads, the URL returned is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'For the database, the URL was as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: It is important that you make a note of the URLs, as you will need these to
    restore the backups. There is one flaw, the backups we have created are being
    stored on our Docker host machine. What if it was to go down? All our hard work
    would be then lost!
  prefs: []
  type: TYPE_NORMAL
- en: Convoy supports creating backups for Amazon S3, so let's do that. First, you
    will need to log in to your Amazon Web Services account and create an S3 bucket
    to store your backups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created a bucket, you need to add your credentials to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on how to create an Amazon S3 bucket, refer to the getting
    started guide at [https://aws.amazon.com/s3/getting-started/](https://aws.amazon.com/s3/getting-started/),
    and for details on `credentials` files, refer to [http://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs](http://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now your Amazon S3 bucket is created. I have named mine `chapter03-backup-bucket`
    and created it in the `us-west-2` region. Your Docker host has access to Amazon''s
    API. You can make your backups again, but this time, push them to Amazon S3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the destination URL takes the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, you will receive URLs once the backups has been completed. In my case,
    there are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'For the database backup, we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'When running the preceding commands, your terminal output should have looked
    something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Backing up our Convoy snapshot](img/B05468_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have off instance backups of our data volumes, let''s terminate
    the Docker host and bring up a new one. If you haven''t already, `exit` from the
    Docker host and terminate it by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Restoring our Convoy backups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you can see from the following screen, we have backups of our snapshots
    in an Amazon S3 bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Restoring our Convoy backups](img/B05468_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before we restore the backups, we need to recreate our Docker instance. Use
    the instructions for launching a Docker host in DigitalOcean, installing and starting
    Convoy, and also setting up your AWS credentials file from the previous sections
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to reassign your floating IP address to the Droplet before you continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have everything backed up and running, you should be able to run the
    following commands to restore the volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You should also be able to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The process of restoring the volumes will take several minutes, during which
    you will see a lot of output streamed to your terminal. The output should look
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Restoring our Convoy backups](img/B05468_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see towards the end of the preceding terminal session, the restore
    process restores each block from the S3 bucket so that you will most see these
    messages scroll past.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have both volumes restored, go back to your Docker Compose file and
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything goes as planned, you should be able to open a browser and see
    your content intact and how you left it using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget, if you have finished with the Docker host, you will need to stop
    and remove using `docker-machine stop chapter03 && docker-machine rm chapter03`,
    otherwise you may incur unwanted costs.
  prefs: []
  type: TYPE_NORMAL
- en: Summing up Convoy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Convoy is a great tool to start looking at Docker volumes, it is great to quickly
    move the content around different environments, which means that you can not only
    share your containers, but also share your volumes with fellow developers or sysadmins.
    It is also straightforward to install and configure, as it ships as a precompiled
    binary.
  prefs: []
  type: TYPE_NORMAL
- en: Block volumes using REX-Ray
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, we have looked at drivers that use local storage with backups to remote
    storage. We are now going to take this one step further by looking at remote storage
    that is directly attached to our container.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are you going to be launching a Docker instance in Amazon
    Web Services and launch our WordPress example and attach Amazon Elastic Block
    Store volumes to our containers using REX-Ray, a volume driver by EMC.
  prefs: []
  type: TYPE_NORMAL
- en: 'REX-Ray supports several storage types on both public clouds and EMC''s own
    range, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS EC2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Compute Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EMC Isilon, ScaleIO, VMAX, and XtremIO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The driver is in active development and more types of supported storage are
    promised soon.
  prefs: []
  type: TYPE_NORMAL
- en: Installing REX-Ray
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we are going to be using Amazon EBS volumes, we will need to launch the
    Docker host in AWS, as EBS volumes can not be mounted as block devices to instances
    in other cloud providers. As per the previous chapter, this can be accomplished
    using Docker Machine and the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Switch Docker Machine to use the newly created host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, SSH into the host, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are on the Docker host, run the following command to install REX-Ray:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This will download and perform the basic configuration of the latest stable
    release of REX-Ray:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing REX-Ray](img/B05468_03_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once REX-Ray is installed, we will need to configure it to use Amazon EBS volumes.
    This will need to be done as the root user, to the following to add a file called
    `config.yml` to `/etc/rexray/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The file should contain the following, remember to replace the values for AWS
    credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have added the configuration file, you should be able to use REX-Ray
    straight away, running the following command should return a list of EBS volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see the list of volumes, then you will need to start the process. If
    you don''t see the volumes, check whether the user that you have provided `accesskey`
    and `secretkey` for has access to read and create EBS volumes. To start the process
    and check whether everything is OK, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following terminal output if everything
    works as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing REX-Ray](img/B05468_03_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final step of the installation is to restart Docker on the instance so
    that it picks up the new volume driver. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now its time to launch some containers. The only change we need make to the
    Docker Compose file from the Convoy one is to change the name of the volume driver,
    everything else stays the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the application has launched, set the permissions on the upload folder
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In the AWS Console, you will notice that now there are some additional volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing REX-Ray](img/B05468_03_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open your new WordPress installation in a browser by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have a problem opening the WordPress site in your browser, find the
    running instance in the AWS Console and add a rule for `port 80`/`HTTP` to the
    **DOCKER-MACHINE** security group. Your rules should look similar to the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing REX-Ray](img/B05468_03_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will only have to add the rule once, as Docker Machine will reassign the
    `docker-machine` security group whenever you launch more Docker hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the page open, complete the WordPress installation and edit or
    upload some content. You know the drill by now, once you have added your content,
    it''s time to stop the containers, remove them, and then terminate the Docker
    host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Before removing the host, you can check the status of the volumes by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see something similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing REX-Ray](img/B05468_03_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, it''s time to remove the Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Moving the REX-Ray volume
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we bring up a new Docker host with Docker Machine, it is worth pointing
    out that our WordPress installation will probably look a little broken.
  prefs: []
  type: TYPE_NORMAL
- en: This is because moving our containers to a new host changes the IP address that
    we will be accessing the WordPress site on, meaning that until you change the
    settings to use the second node's IP address, you will see a broken site.
  prefs: []
  type: TYPE_NORMAL
- en: This is because it is trying to load content, such as CSS and JavaScript, from
    the first Docker host's IP address.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on how to update these settings, refer to the WordPress
    Codex at [https://codex.wordpress.org/Changing_The_Site_URL](https://codex.wordpress.org/Changing_The_Site_URL).
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if you have logged into the AWS Console, you may have noticed that your
    EBS volumes are not currently attached to any instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving the REX-Ray volume](img/B05468_03_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have this out of the way, let''s launch our new Docker host using
    Docker Machine. If you followed the instructions in the previous section to launch
    the host, connect, install REX-Ray, and launch the WordPress and Database containers.
    As we have already discussed, you could update the site''s IP address by connecting
    to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Should you want to update the IP address, then you can run the following. First
    of all, connect to your database container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then make a connection to MariaDB using the MySQL client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Switch to the `wordpress` database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then finally run the following SQL. In my case, `http://54.175.31.251` is the
    old URL and `http://52.90.249.56` is the new one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your terminal session should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving the REX-Ray volume](img/B05468_03_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, we can see that the content is present, even though the site looks
    broken.
  prefs: []
  type: TYPE_NORMAL
- en: Summing up REX-Ray
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: REX-Ray is very much in early development, with more features being added all
    the time. Over the next few releases, I can foresee it getting more and more useful
    as it is slowly moving towards being a cluster-aware tool rather than the standalone
    tool it is at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: However, even in this early stage of its development, it serves as a great introduction
    to using external storage with Docker Volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Flocker and Volume Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next tool that we are going to look at is Flocker by ClusterHQ. It''s certainly
    the most feature-rich of the third-party volume drivers that we are going to be
    looking at in this chapter. As you can see from the following list of supported
    storage options, it has the widest coverage of storage backends out of all of
    the volume drivers:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS Elastic Block Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack Cinder with any supported backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EMC ScaleIO, XtremeIO, and VMAX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMware vSphere and vSan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NetApp OnTap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dell Storage SC Series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HPE 3PAR StoreServ and StoreVirtual (with OpenStack only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Huawei OceanStor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hedvig
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NexentaEdge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ConvergeIO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saratoga Speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is also support for the following storage options coming soon:'
  prefs: []
  type: TYPE_NORMAL
- en: Ceph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Persistent Disk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As most people will have access to AWS, we are going to look at launching a
    Flocker cluster in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Forming your Flock
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rather than rolling our sleeves up and installing Flocker manually, we are going
    to take a look at how to get Flocker up and running quickly.
  prefs: []
  type: TYPE_NORMAL
- en: For this part of the chapter, we will be launching a cluster using an AWS CloudFormation
    template provided by ClusterHQ to get a Flocker cluster up and running quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AWS CloudFormation is the orchestration tool provided by Amazon that allows
    you to define how you would like your AWS infrastructure to look and be configured.
    CloudFormation is free to use; however, you do pay for the resources that are
    launched by it. At the time of writing, the estimated cost for running the template
    for one month is $341.13\. For more information on CloudFormation, refer to [https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/),
    or for a breakdown of the costs, refer to [http://calculator.s3.amazonaws.com/index.html#r=IAD&s=EC2&key=calc-D96E035B-5A84-48DE-BF62-807FFE4740A8](http://calculator.s3.amazonaws.com/index.html#r=IAD&s=EC2&key=calc-D96E035B-5A84-48DE-BF62-807FFE4740A8).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few steps that we will need to perform before we launch the CloudFormation
    template. First of all, you will need to create a key pair to be used by the template.
    To do this, log in to the AWS console at [https://console.aws.amazon.com/](https://console.aws.amazon.com/),
    select your region, then click on EC2, and then on the left-hand side **Key Pairs**
    menu, the key pair you create should be called something like flocker-test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forming your Flock](img/B05468_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After you click on the **Create** button, your key pair will be downloaded,
    **keep this safe** as you will not be able to download it again. Now that you
    have your key pair created and safely downloaded, it's time to create an account
    on the ClusterHQ Volume Hub, you can do this by going to [https://volumehub.clusterhq.com/](https://volumehub.clusterhq.com/).
  prefs: []
  type: TYPE_NORMAL
- en: The Volume Hub (at the time of writing this book, it is in Alpha testing) is
    a web-based interface to manage your Flocker volumes. You can either signup for
    an account using your e-mail address or signin using your Google ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have signed up/in, you will be presented with a notice pointing out
    that *You don''t appear to have a cluster yet*. and the option of either creating
    a new cluster or connect to an existing cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forming your Flock](img/B05468_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on **Create new** button will open an overlay with instructions about
    what you need to do to create a cluster using AWS CloudFormation. As we have already
    actioned step one, scroll down to step two. Here, you should see a button that
    says **Start CloudFormation Configuration Process**, click on this to open a new
    tab that will take you directly to the AWS CloudFormation page on the AWS console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forming your Flock](img/B05468_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first step of launching the AWS CloudFormation stack is selecting the template,
    this has already been done for us, so you can click on the **Next** button.
  prefs: []
  type: TYPE_NORMAL
- en: You will now be asked to give some details about your stack, this includes a
    name for the stack, EC2 key pair name, AWS access and secret keys, and also your
    Volume Hub token.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get your Volume Hub token, visit [https://volumehub.clusterhq.com/v1/token](https://volumehub.clusterhq.com/v1/token)
    and you will be presented with a token. This token is unique to your Volume Hub
    account, it is important you don''t share it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forming your Flock](img/B05468_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have filled in the details you can click on the **Next** button. On
    the next page, you will be asked to tag your resources, this is optional. You
    should follow your normal processes for tagging resources here. Once you have
    added your tags, click on the **Next** button.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that clicking on create will launch resources in your AWS account that
    will incur hourly charges. Only click on create if you are planning on working
    through the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: The next page gives you an overview of the details that you have provided. If
    you are happy with these, click on the **Create** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you click on the **Create** button, you will be taken back to the AWS
    CloudFormation page, where should see your stack with a **CREATE_IN_PROGRESS**
    status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forming your Flock](img/B05468_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you don't see your stack, click on the refresh icon on the right-hand top
    corner. Typically, it will take around 10 minutes to create your cluster. While
    the stack is being created, you can click on one of the **Split pane** icons on
    the bottom-right of the screen and view the events that are taking place to launch
    your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Also, as the cluster is launching, you should start seeing Nodes registering
    themselves in your Volume Hub account. It is important, however tempting, to not
    start using the Volume Hub until your stack has a **CREATE_COMPLETE** status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your stack has been deployed, click on the **Outputs** tab. This will
    give you the details you will need to connect to the cluster. You should see something
    similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forming your Flock](img/B05468_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing we need to do is set the correct permissions on the key pair
    that we created earlier. In my case, it is in my `Downloads` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have set the permission, you will need to log in to the client node
    using `ubuntu` as the username and your key pair. In my case, the client node
    IP address is 23.20.126.24:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are logged in, you need to run a few more commands to get the cluster
    ready. For this, you will need to make a note of the IP addresses of the **Control
    Node**, which in the preceding screen is `54.198.167.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have connected to the control service, you should be able to get
    an overview of the cluster using the `flockerctl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'When running the `flockerctl ls` command, you shouldn''t see any datasets listed.
    Now we should connect to Docker. To do this, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: At the time of writing this book, the Flocker AWS CloudFormation template installs
    and configures Docker 1.9.1 and Docker Compose 1.5.2\. This means that you will
    not be able to use the new Docker Compose file format. There should be, however,
    Docker Compose files in both the old and new formats in the GitHub repository,
    which accompanies this book.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the repository at [https://github.com/russmckendrick/extending-docker/](https://github.com/russmckendrick/extending-docker/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Your terminal output should look similar to the following session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forming your Flock](img/B05468_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have everything up and running, let's launch our WordPress installation
    using Flocker volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying into the Flock
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First thing we should do is create the volumes. We could let Flocker use its
    defaults, which is a 75 GB EBS volume, but this is a little overkill for our needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this is a more sensible size and we are choosing the same volume
    names as we have done in the previous examples. Now that we have our volumes created,
    we can launch WordPress. To do this, we have two Docker Compose files, one will
    launch the containers on AgentNode1 and the other on AgentNode2\. First of all,
    create a folder to store the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'As already mentioned, at the time of writing this book, only the original Docker
    Compose file format is support, due to this, our file should have the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it isn't too different from the new format. The important thing
    to note is the lines that bind the containers to a node, this has been highlighted
    in the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the containers, we have to pass the filename to `docker-compose`.
    To do this, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the container''s have launched, run the following to set the correct permissions
    on the `uploads` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our volumes created and containers launched, let''s take a
    quick look at the Volume Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying into the Flock](img/B05468_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, there are two volumes being shown as attached to the node with
    the internal IP of `10.168.86.184`. Looking at the Volumes page gives us a lot
    more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying into the Flock](img/B05468_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we have information on the size, name, its unique ID, and which
    node it is attached to. We can also see the information on the containers that
    are running within our cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying into the Flock](img/B05468_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we stop and remove the containers, you should configure WordPress and
    then log in and upload a file. You will be able to get the IP address you can
    access WordPress on by running the following command and opening the IP address
    where port 80 is mapped to in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have made these changes, you can stop and remove the containers by
    running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have removed the containers, it''s time to launch them on the
    second node. You will need to create a second Docker Compose file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, all that has changed is the node number. To launch the containers,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take a little longer to launch, as Flocker has to unattach and reattach
    the volumes to the second node. Once the containers are running, you will see
    that they are now showing as being attached to the second node in the Volume Hub,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying into the Flock](img/B05468_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is also reflected in the other sections of the Volume Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying into the Flock](img/B05468_03_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you can see your new containers on the **Containers** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying into the Flock](img/B05468_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the following command and open the IP address in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned in the REX-Rey section of this chapter, opening WordPress should
    show you a broken-looking WordPress page, but this shouldn't matter as some content
    is being served out of the database volume; otherwise, you would be seeing the
    Install WordPress page.
  prefs: []
  type: TYPE_NORMAL
- en: So, there you have it. You have used Flocker and Volume Hub to launch and view
    your Docker volumes, as well as move them between hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned at the start of this section, you are paying by the hour to have
    the cluster up and running. To remove it, you should go to the AWS Console, switch
    to the CloudFormation service, select your Stack, and then delete from the actions
    drop-down menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying into the Flock](img/B05468_03_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you get an error about not being able to remove the S3 bucket, don't worry,
    all of the expensive stuff will have been terminated. To resolve the error, just
    go to the S3 bucket it is complaining about in the AWS Console and remove the
    content. Once you have removed the content, go back to the CloudFormation page
    and attempt to delete the stack again.
  prefs: []
  type: TYPE_NORMAL
- en: Summing up Flocker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Flocker is the grandfather of Docker volumes, it was one of the original solutions
    for managing volumes even before the volume plugin architecture was released.
    This means that it is both mature and easily the most complicated of the volume
    plugins that we have looked at.
  prefs: []
  type: TYPE_NORMAL
- en: To get an idea of its complexity, you can view the CloudFormation template at
    [https://s3.amazonaws.com/installer.downloads.clusterhq.com/flocker-cluster.cloudformation.json](https://s3.amazonaws.com/installer.downloads.clusterhq.com/flocker-cluster.cloudformation.json).
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are a lot of steps. Viewing the template in the CloudFormation
    visualizer gives you more of an idea of how everything is linked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Summing up Flocker](img/B05468_03_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add to the mix that Docker itself is regularly being updated and you have a
    very complex installation process. This is the reason why I have not gone into
    detail about how to manually install it in this chapter, as the process will no
    doubt have changed by the time you come to read it.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, Cluster Labs have an extremely good documentation that is regularly
    updated. It can be found at [https://docs.clusterhq.com/en/latest/](https://docs.clusterhq.com/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: It's also worth pointing out that, at the time of writing this book, Volume
    Hub is in early alpha and more functionality is being added regularly. Eventually,
    I can see this being quite a powerful combination of tools.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at three different volume drivers that all work
    with Docker's plugin architecture.
  prefs: []
  type: TYPE_NORMAL
- en: While the three drivers offer three very different approaches to providing persistent
    storage for your containers, you may have noticed that Docker Compose files and
    how we interact with the volumes using the Docker client was pretty much the same
    experience across all three tools, probably to the point where I am sure it was
    starting to get a little repetitive.
  prefs: []
  type: TYPE_NORMAL
- en: This repetitiveness showcases, in my opinion, one of the best features of using
    Docker plugins, the consistent experience from the client's point of view. At
    no point, after we configured the tools, did we have to really think about or
    take into consideration how we were using the storage, we just got on with it.
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to reuse our resources, such as Docker Compose files and containers,
    across multiple environments such as local VMs, cloud-based Docker hosts, or even
    Docker clusters.
  prefs: []
  type: TYPE_NORMAL
- en: However, at the moment, we are still bound to a single Docker host machine.
    In the next chapter, we will look at how to start spanning multiple Docker hosts
    by looking at Docker Networking plugins.
  prefs: []
  type: TYPE_NORMAL
