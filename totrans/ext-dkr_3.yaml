- en: Chapter 3. Volume Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：卷插件
- en: 'In this chapter, you will get an overview of both first and third-party volume
    plugins. We will be discussing installing, configuring, and using the following
    storage plugins:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将概述第一方和第三方卷插件。我们将讨论安装、配置和使用以下存储插件：
- en: '**Docker Volumes**: [https://docs.docker.com/engine/userguide/containers/dockervolumes/](https://docs.docker.com/engine/userguide/containers/dockervolumes/)'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 卷**：[https://docs.docker.com/engine/userguide/containers/dockervolumes/](https://docs.docker.com/engine/userguide/containers/dockervolumes/)'
- en: '**Convoy**: [https://github.com/rancher/convoy/](https://github.com/rancher/convoy/)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Convoy**：[https://github.com/rancher/convoy/](https://github.com/rancher/convoy/)'
- en: '**REX-Ray**: [https://github.com/emccode/rexray/](https://github.com/emccode/rexray/)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REX-Ray**：[https://github.com/emccode/rexray/](https://github.com/emccode/rexray/)'
- en: '**Flocker**: [https://clusterhq.com/flocker/introduction/](https://clusterhq.com/flocker/introduction/)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flocker**：[https://clusterhq.com/flocker/introduction/](https://clusterhq.com/flocker/introduction/)'
- en: You will also get an understanding of how to interact with Docker plugins and
    how they both differ and work with the supporting tools that we covered in [Chapter
    2](ch02.html "Chapter 2. Introducing First-party Tools"), *Introducing First-party
    Tools*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将了解如何与 Docker 插件交互，以及它们与我们在[第 2 章](ch02.html "第 2 章：介绍第一方工具")中讨论的支持工具的区别和如何协同工作，*介绍第一方工具*。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This chapter assumes that you are using Docker 1.10+. Note that some commands
    may not work in previous versions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设你使用的是 Docker 1.10+。请注意，某些命令在旧版本中可能无法工作。
- en: Zero volumes
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 零卷
- en: Before we look at volumes, let's look at what happens when you do not use any
    volumes at all and store everything directly on the containers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看卷之前，让我们先看看如果不使用任何卷，将一切存储在容器中会发生什么。
- en: 'To start with, let''s create a new Docker instance called `chapter03` locally
    using Docker Machine:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用 Docker Machine 在本地创建一个名为 `chapter03` 的新 Docker 实例：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Zero volumes](img/B05468_03_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![零卷](img/B05468_03_01.jpg)'
- en: 'Now that we have our machine, we can use Docker Compose to run through a scenario
    with WordPress. First of all, we will need to launch our WordPress containers,
    we are using the official WordPress and MySQL images from the Docker Hub as we
    did earlier, our `docker-compose.yml` file looks similar to the following code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了机器，可以使用 Docker Compose 来运行 WordPress 场景。首先，我们需要启动我们的 WordPress 容器，正如之前那样，我们使用来自
    Docker Hub 的官方 WordPress 和 MySQL 镜像，我们的 `docker-compose.yml` 文件类似于以下代码：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, there is nothing special about the compose file. You can launch
    it by running the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，compose 文件没有什么特别之处。你可以通过运行以下命令启动它：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once you have launched the containers, check their status by running the following
    command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 启动容器后，通过运行以下命令检查它们的状态：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If they both have state of `Up`, you can go to the WordPress installation screen
    by running the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们的状态都为 `Up`，你可以通过运行以下命令进入 WordPress 安装界面：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will open your browser and go to the IP address of your Docker instance.
    In my case, this is `http://192.168.99.100/`. You should see the following screen:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开你的浏览器并转到 Docker 实例的 IP 地址。在我的例子中是 `http://192.168.99.100/`。你应该看到以下屏幕：
- en: '![Zero volumes](img/B05468_03_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![零卷](img/B05468_03_02.jpg)'
- en: 'Let''s click on **Continue** button and install WordPress:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **继续** 按钮并安装 WordPress：
- en: '![Zero volumes](img/B05468_03_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![零卷](img/B05468_03_03.jpg)'
- en: 'Once the information has been filled in, click on Install WordPress to complete
    the installation. When you do, the MySQL database will be updated with your settings
    and the test posts and comments will also be added. When this is completed, you
    will be shown a success screen:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完信息后，点击安装 WordPress 以完成安装。完成后，MySQL 数据库将更新你的设置，测试帖子和评论也将被添加。当安装完成后，你将看到一个成功屏幕：
- en: '![Zero volumes](img/B05468_03_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![零卷](img/B05468_03_04.jpg)'
- en: 'You should now be able to rerun the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够重新运行以下命令：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will take you to your very empty WordPress site:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带你到一个非常空的 WordPress 网站：
- en: '![Zero volumes](img/B05468_03_05.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![零卷](img/B05468_03_05.jpg)'
- en: 'Your command line history should look something similar to the following terminal
    output:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你的命令行历史记录应该类似于以下终端输出：
- en: '![Zero volumes](img/B05468_03_06.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![零卷](img/B05468_03_06.jpg)'
- en: 'Now that we have our WordPress site installed, let''s destroy the containers
    by running the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 WordPress 网站，让我们通过运行以下命令销毁容器：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Make sure you type `y` when prompted. You will then receive a confirmation
    message that your two containers have been removed:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在提示时输入`y`。然后你会收到一个确认信息，说明你的两个容器已经被删除：
- en: '![Zero volumes](img/B05468_03_07.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![零卷](img/B05468_03_07.jpg)'
- en: 'Now that we have removed our containers, let''s recreate them by running through
    the commands again:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经删除了容器，让我们通过重新执行命令来重新创建它们：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, you are presented with an installation screen again, which is
    to be expected as the MySQL database was stored on the `mysql` container that
    we removed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你再次看到一个安装界面，这是正常的，因为 MySQL 数据库存储在我们已删除的`mysql`容器中。
- en: 'Before we move onto looking at what ships with Docker, let''s do some housekeeping
    and remove the containers:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续查看 Docker 自带的功能之前，先做一些整理，删除掉容器：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The default volume driver
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认卷驱动
- en: 'Before we start using the third-party volume plugins, we should take a look
    at what ships with Docker and how volumes solve the scenario we just worked through.
    Again, we will be using a `docker-compose.yml` file; however, this time, we will
    add a few lines to create and mount volumes:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用第三方卷插件之前，应该先了解一下 Docker 自带的功能以及卷如何解决我们刚才处理的场景。再次提醒，我们将使用一个`docker-compose.yml`文件；不过这次，我们会添加几行代码来创建和挂载卷：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, here we are creating two volumes, one called `uploads`, which
    is being mounted to the WordPress uploads folder on the WordPress container. The
    second volume called `database`, which is being mounted in `/var/lib/mysql` on
    our MySQL container.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这里我们创建了两个卷，一个叫`uploads`，它被挂载到 WordPress 容器的上传文件夹中。第二个卷叫`database`，它被挂载到
    MySQL 容器的`/var/lib/mysql`目录中。
- en: 'You can launch the containers and open WordPress, using the following commands:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令启动容器并打开 WordPress：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Before we complete the WordPress installation in the browser, we should make
    sure that the `uploads` folder has the right permissions by running `docker exec`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成浏览器中的 WordPress 安装之前，我们应该通过运行`docker exec`命令确保`uploads`文件夹具有正确的权限：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that the permissions are correctly set on the `uploads` folder, we can go
    through the WordPress installation as per the previous test.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`uploads`文件夹的权限已经正确设置，我们可以按照之前的测试继续进行 WordPress 安装：
- en: 'As WordPress creates a `Hello World!` test post as part of the installation,
    we should go and edit the post. To do this, log in to WordPress using the credentials
    that you entered during the installation. Once logged in, go to **Posts** | **Hello
    World** and then upload a featured image by clicking on **Set featured image**
    button. Your edit should look similar to the following screenshot once you have
    uploaded the featured image:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 WordPress 会在安装过程中创建一个`Hello World!`测试帖子，我们应该去编辑该帖子。要做到这一点，请使用安装时输入的凭证登录到
    WordPress。登录后，进入**文章** | **Hello World**，然后点击**设置特色图片**按钮上传一张特色图片。上传完特色图片后，你的编辑界面应该类似于以下截图：
- en: '![The default volume driver](img/B05468_03_08.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![默认卷驱动](img/B05468_03_08.jpg)'
- en: 'Once your image has been uploaded, click on **Update** button and then go to
    your WordPress homepage by clicking on the title on the top left-hand side of
    the screen. Once the home page opens, you should see your featured image:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上传完图片后，点击**更新**按钮，然后通过点击屏幕左上角的标题返回到你的 WordPress 首页。当首页打开后，你应该能看到你上传的特色图片：
- en: '![The default volume driver](img/B05468_03_09.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![默认卷驱动](img/B05468_03_09.jpg)'
- en: 'Before we remove our containers, you can run the following command to show
    all the volumes that have been created in Docker:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除容器之前，你可以运行以下命令来显示 Docker 中已创建的所有卷：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When running the command, you should the two volumes that we defined in our
    `docker-compose.yml` file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该命令时，你应该能看到我们在`docker-compose.yml`文件中定义的两个卷：
- en: '![The default volume driver](img/B05468_03_10.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![默认卷驱动](img/B05468_03_10.jpg)'
- en: Remember, as we discussed in the previous chapter, Docker Compose will prefix
    names with the project title (which is the name of the folder that `docker-compose.yml`
    is in), in this case, the project is called `wordpress-vol` and as `-` is not
    allow in names, it has been stripped out, leaving `wordpressvol`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 记得，正如我们在上一章讨论的那样，Docker Compose 会将项目标题（即`docker-compose.yml`所在文件夹的名称）作为前缀，这个项目名叫做`wordpress-vol`，由于名称中不允许有`-`，因此它被去掉了，留下了`wordpressvol`。
- en: 'Now that we have the basic WordPress installation with updated content, let''s
    remove the containers as we did before:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了基本的 WordPress 安装并且更新了内容，让我们像之前一样删除容器：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![The default volume driver](img/B05468_03_11.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![默认卷驱动](img/B05468_03_11.jpg)'
- en: 'At this stage, you can probably guess what is going to happen next, let''s
    relaunch our containers and open the WordPress site in our browser:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你大概可以猜到接下来会发生什么，让我们重新启动容器，并在浏览器中打开 WordPress 网站：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It may take a few seconds for everything to start up, so if you don''t see
    your WordPress when the browser opens, refresh the page. If everything goes as
    planned, you should be presented with your edited `Hello World!` post:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 启动可能需要几秒钟的时间，因此如果浏览器打开时没有看到你的 WordPress，刷新页面。如果一切顺利，你应该能看到你编辑过的 `Hello World!`
    博客文章：
- en: '![The default volume driver](img/B05468_03_12.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![默认卷驱动](img/B05468_03_12.jpg)'
- en: While it looks like the same screenshot as earlier, you will notice that you
    have been logged out of WordPress. This is because, by default, WordPress stores
    its sessions on the filesystem, and as they are not stored in the uploads directory,
    the session files were lost when we removed the containers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这看起来和之前的截图相同，但你会注意到你已经从 WordPress 中登出了。这是因为默认情况下，WordPress 将其会话存储在文件系统中，并且由于会话文件不存储在上传目录中，因此在我们删除容器时会丢失会话文件。
- en: 'Volumes can also be shared between containers, if we add the following to our
    `docker-compose.yml` file anywhere in the `Services` section:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 卷也可以在容器之间共享，如果我们在 `docker-compose.yml` 文件的 `Services` 部分添加以下内容：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can launch a second container with WordPress running on `port 8080` and
    access the file we uploaded at `http://192.168.99.100:8080/wp-content/uploads/2016/02/containers-1024x512.png`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以启动一个第二个容器，在 `port 8080` 上运行 WordPress，并访问我们上传的文件，网址是 `http://192.168.99.100:8080/wp-content/uploads/2016/02/containers-1024x512.png`。
- en: Note that the preceding URL will differ for your installation as the IP address
    may be different, along with the upload date and file name.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的 URL 会因你的安装环境而有所不同，因为 IP 地址可能不同，上传日期和文件名也可能不同。
- en: 'You can get more information on a volume by running the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令获取更多关于卷的信息：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In our case, this returns the following information:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，返回以下信息：
- en: '![The default volume driver](img/B05468_03_13.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![默认卷驱动](img/B05468_03_13.jpg)'
- en: You will have noticed that we have been using the `local` driver for our two
    volumes, this creates the volume on our Docker instance and mounts a folder from
    host machine, which is the Docker Machine host running under VirtualBox in this
    case.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们为两个卷使用了 `local` 驱动，这会在我们的 Docker 实例上创建卷，并挂载来自主机的文件夹，这里是指运行在 VirtualBox
    下的 Docker Machine 主机。
- en: 'You can view the contents on the folder by SSHing into the host machine and
    going to the folder listed under the mount point returned by the `docker volume
    inspect` command. To SSH into the host and change to the root user, run the following
    commands:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 SSH 登录到主机并进入 `docker volume inspect` 命令返回的挂载点目录来查看文件夹中的内容。要通过 SSH 登录并切换到
    root 用户，运行以下命令：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You will then be able to change to the folder containing the volume, the reason
    for changing to the root user is to make sure that you have permissions to see
    the contents on the folder:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你就可以切换到包含卷的文件夹，切换到 root 用户的原因是确保你有权限查看文件夹中的内容：
- en: '![The default volume driver](img/B05468_03_14.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![默认卷驱动](img/B05468_03_14.jpg)'
- en: As you can see from the preceding terminal output, the files are owned by an
    unknown user with a user ID and group ID of 32, in the container, this is the
    Apache user. Be careful if you add files directly or make any changes, as you
    may find yourself causing all sorts of permission errors when it comes to your
    containers accessing the files you have added/changed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面终端输出所示，这些文件属于一个未知用户，其用户 ID 和组 ID 为 32，在容器中，这是 Apache 用户。如果你直接添加文件或进行更改，请小心，因为你可能会遇到各种权限错误，尤其是在容器访问你添加或更改的文件时。
- en: So far so good, but what are the limits? The biggest one is that your data is
    tied to a single instance. In the last chapter, we looked at clustering Docker
    using Swarm, we discussed that the containers launched with Docker Compose are
    tied to a single instance, which is great for development, but not so hot for
    production, where we may have several host instances that we want to start spreading
    our containers across, this is where third-party volume drivers come into play.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切顺利，但有什么限制呢？最大的限制是你的数据绑定到单个实例。在上一章中，我们讨论了如何使用 Swarm 进行 Docker 集群化，我们提到使用
    Docker Compose 启动的容器绑定到单个实例，这对于开发非常好，但对于生产环境来说就不太适用了，因为我们可能有多个主机实例，希望将容器分布到多个实例上，这时候第三方卷驱动就派上用场了。
- en: Third-party volume drivers
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三方卷驱动
- en: There are several third-party volume drivers available, they all bring different
    functionality to the table. To start with, we are going to be looking at Convoy
    by Rancher.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种第三方卷驱动可供选择，它们各自提供不同的功能。首先，我们将研究 Rancher 提供的 Convoy。
- en: 'Before we look at installing Convoy, we should look at launching a Docker instance
    somewhere in the cloud. As we already have launched Docker instance in both DigitalOcean
    and Amazon Web Services, we should terminate our local `chapter03` instance and
    relaunch it in one of these providers, I am going to be using DigitalOcean:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始安装 Convoy 之前，应该先考虑在云端某个地方启动一个 Docker 实例。由于我们已经在 DigitalOcean 和 Amazon Web
    Services 中启动了 Docker 实例，我们应该终止本地的 `chapter03` 实例，并在这些提供商中重新启动它，我将使用 DigitalOcean：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Third-party volume drivers](img/B05468_03_15.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![第三方卷驱动](img/B05468_03_15.jpg)'
- en: One of the reasons that we have launched the instance in a cloud provider is
    that we need a full underlying operating system to be able install and use Convoy,
    while the image provided by Boot2Docker is good, it is a little too lightweight
    for our requirement.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在云提供商中启动实例的原因之一是，我们需要一个完整的底层操作系统来安装和使用 Convoy，而 Boot2Docker 提供的镜像虽然不错，但对于我们的需求来说，它稍微有些轻量级。
- en: Tip
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Before we do anything further, I would recommend you to attach a floating IP
    address to your DigitalOcean droplet. The reason for this is that, in this section
    of the chapter, we are going to be installing WordPress and then moving the installation
    to a new machine. Without a floating IP address, your WordPress installation may
    appear broken. You can find more details on floating IPs on the DigitalOcean website
    at [https://www.digitalocean.com/community/tutorials/how-to-use-floating-ips-on-digitalocean](https://www.digitalocean.com/community/tutorials/how-to-use-floating-ips-on-digitalocean).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步操作之前，我建议您为 DigitalOcean 的 Droplet 配置一个浮动 IP 地址。原因是，在本章节中，我们将安装 WordPress，并将安装迁移到新机器上。如果没有浮动
    IP 地址，您的 WordPress 安装可能会出现问题。您可以在 DigitalOcean 网站上找到有关浮动 IP 地址的更多信息，网址是 [https://www.digitalocean.com/community/tutorials/how-to-use-floating-ips-on-digitalocean](https://www.digitalocean.com/community/tutorials/how-to-use-floating-ips-on-digitalocean)。
- en: Installing Convoy
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Convoy
- en: 'As already mentioned, we need to install Convoy on our underlying Docker hosts
    operating system. To do this, you should first SSH onto your Docker host:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们需要在底层 Docker 主机操作系统上安装 Convoy。为此，您应首先通过 SSH 登录到 Docker 主机：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As the machine has been launched in DigitalOcean, we have connected as the root
    user; this means that we don't have to use `sudo` in front of the commands, however,
    as you could have launched the instance in another provider, I will keep them
    there so that you don't end up getting permission errors if you are not the root
    user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于机器已在 DigitalOcean 启动，我们已经以 root 用户身份连接；这意味着我们在执行命令时不需要加 `sudo`，但是由于您可能在其他提供商处启动实例，我会保留
    `sudo`，以防您不是 root 用户而遇到权限错误。
- en: 'Now that you have used `ssh` command to get into our Docker host, we can install
    and start Convoy. Convoy is written in Go and ships as a static binary. This means
    that we don''t have to compile it manually; instead, we just need to grab the
    binary and copy it into place:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经使用 `ssh` 命令登录到 Docker 主机，我们可以安装并启动 Convoy。Convoy 是用 Go 编写的，并以静态二进制文件形式发布。这意味着我们不需要手动编译它；我们只需获取二进制文件并将其复制到指定位置：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: There are later versions of Convoy available at [https://github.com/rancher/convoy/releases](https://github.com/rancher/convoy/releases);
    however, these are flagged for use with Rancher only. We will be looking at Rancher
    in detail in a later chapter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Convoy 的更新版本可以在 [https://github.com/rancher/convoy/releases](https://github.com/rancher/convoy/releases)
    上找到；不过，这些版本仅供 Rancher 使用。我们将在后面的章节中详细讨论 Rancher。
- en: 'Now that we have our binary in place, we need to set up our Docker installation
    so that it loads the plugin:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了二进制文件，接下来需要设置我们的 Docker 安装，以便加载插件：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `convoy.spec` file tells Docker where it can access Convoy; for more details
    on how plugins work refer to [Chapter 5](ch05.html "Chapter 5. Building Your Own
    Plugin"), *Building Your Own Plugin*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`convoy.spec` 文件告诉 Docker 如何访问 Convoy；有关插件工作的更多细节，请参阅 [第 5 章](ch05.html "第
    5 章：构建您自己的插件")，*构建您自己的插件*。'
- en: Convoy is installed and ready to go, now we just have to add some storage. For
    testing purposes, we are going to be creating and using a loopback device; however,
    do not do this in production!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Convoy 已安装并准备就绪，接下来我们只需添加一些存储。出于测试目的，我们将创建并使用一个回环设备；但是，请不要在生产环境中这样做！
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A Loopback Device is a mechanism used to interpret files as real devices. The
    main advantage of this method is that all tools used on real disks can be used
    with a loopback device. Refer to [http://wiki.osdev.org/Loopback_Device](http://wiki.osdev.org/Loopback_Device).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 回环设备是一种将文件作为真实设备进行解释的机制。此方法的主要优势是，所有用于真实磁盘的工具都可以与回环设备一起使用。请参考[http://wiki.osdev.org/Loopback_Device](http://wiki.osdev.org/Loopback_Device)。
- en: 'To create the loopback device and mount it, run the following commands:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建回环设备并挂载它，请运行以下命令：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now that we have our storage ready, we can start Convoy by running the following
    command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的存储已经准备好，我们可以通过运行以下命令启动 Convoy：
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see something similar to the following output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到类似于以下的输出：
- en: '![Installing Convoy](img/B05468_03_16.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Convoy](img/B05468_03_16.jpg)'
- en: Now that we have Convoy running, type `exit` to leave the Docker host and return
    to your local machine.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了 Convoy，输入`exit`以退出 Docker 主机并返回本地机器。
- en: Launching containers with a Convoy volume
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Convoy 卷启动容器
- en: 'Now that we have Convoy up and running, we can make some changes to our `docker-compose.yml`
    file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了 Convoy，可以对我们的`docker-compose.yml`文件进行一些更改：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Put the `docker-compose.yml` file in a `wordpressconvoy` folder if don't you
    will find you will need change the name of the volume in some of the later steps
    in this section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有将`docker-compose.yml`文件放入`wordpressconvoy`文件夹中，你会发现稍后在本节中的某些步骤需要更改卷的名称。
- en: As you can see, I have highlighted a few changes. The first being that we have
    moved over to using MariaDB, the reason for this is that as we now using an actual
    filesystem rather just a folder on the host machine, we have a `lost` + `found`
    folder created, presently the official MySQL container fails to work as it believes
    there are already databases on the volume. To get around this, we can use the
    `--ignore-db-dir` directive when starting MySQL, which MariaDB supports.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我突出显示了一些更改。首先，我们已经切换到了使用 MariaDB，原因是现在我们使用的是实际的文件系统，而不是仅仅在主机上使用一个文件夹。我们有一个`lost`
    + `found`文件夹，目前官方的 MySQL 容器无法正常工作，因为它认为卷中已经有数据库。为了解决这个问题，我们可以在启动 MySQL 时使用`--ignore-db-dir`指令，而
    MariaDB 支持该指令。
- en: 'Let''s launch our containers and take a look at the volume that is created
    by running:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动容器并查看通过以下命令创建的卷：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see something similar to the following terminal output:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到类似于以下的终端输出：
- en: '![Launching containers with a Convoy volume](img/B05468_03_17.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Convoy 卷启动容器](img/B05468_03_17.jpg)'
- en: 'Before we do anything further, complete the WordPress installation and upload
    some content:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行其他操作之前，完成 WordPress 安装并上传一些内容：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Remember to set the correct permissions on the volume before uploading content:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在上传内容之前为卷设置正确的权限：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Creating a snapshot using Convoy
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Convoy 创建快照
- en: So far, it's no different from the default volume driver. Let's look at creating
    a snapshot and then backing up of the volume, you will see why later in the chapter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，它与默认的卷驱动没有什么不同。让我们来看看创建快照并备份卷的过程，稍后你会明白为什么要这样做。
- en: 'First of call, let''s jump back to the Docker host:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们跳回 Docker 主机：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s create our first snapshot by running the following the commands:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过运行以下命令来创建我们的第一个快照：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Once a snapshot has been created, you will receive a unique ID. In my case,
    these were `c00caa88-087d-45ad-9498-7610844c075e` and `4e2a2a6f-887c-4692-b2a8-e1f08aa42400`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了快照，您将收到一个唯一的 ID。就我而言，这些 ID 分别是`c00caa88-087d-45ad-9498-7610844c075e`和`4e2a2a6f-887c-4692-b2a8-e1f08aa42400`。
- en: Backing up our Convoy snapshot
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备份我们的 Convoy 快照
- en: 'Now that we have our snapshots, we can use these as a basis to create our backups.
    To do this, we must first make sure that the destination directory where we are
    going to store it exists:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了快照，我们可以以此为基础创建备份。为此，我们必须首先确保存储备份的目标目录存在：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now that we have somewhere to store the backup, let''s create it:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了存储备份的地方，让我们创建备份：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Once the backup has been completed, you will receive confirmation in the form
    of a URL. For the uploads, the URL returned is as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦备份完成，您将收到一个 URL 形式的确认。对于上传，返回的 URL 如下：
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For the database, the URL was as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据库，URL 如下：
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: It is important that you make a note of the URLs, as you will need these to
    restore the backups. There is one flaw, the backups we have created are being
    stored on our Docker host machine. What if it was to go down? All our hard work
    would be then lost!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 记得记录下这些 URL，因为你需要它们来恢复备份。存在一个问题，我们创建的备份存储在我们的 Docker 主机上。如果它出现故障怎么办？那时我们所有的辛勤工作将会丢失！
- en: Convoy supports creating backups for Amazon S3, so let's do that. First, you
    will need to log in to your Amazon Web Services account and create an S3 bucket
    to store your backups.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Convoy 支持为 Amazon S3 创建备份，所以我们来做这件事。首先，你需要登录到你的 Amazon Web Services 账户，并创建一个
    S3 桶来存储你的备份。
- en: 'Once you have created a bucket, you need to add your credentials to the server:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了一个桶，你需要将凭证添加到服务器：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on how to create an Amazon S3 bucket, refer to the getting
    started guide at [https://aws.amazon.com/s3/getting-started/](https://aws.amazon.com/s3/getting-started/),
    and for details on `credentials` files, refer to [http://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs](http://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何创建 Amazon S3 桶的更多信息，请参考 [https://aws.amazon.com/s3/getting-started/](https://aws.amazon.com/s3/getting-started/)
    的入门指南，关于 `credentials` 文件的详细信息，请参见 [http://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs](http://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs)。
- en: 'Now your Amazon S3 bucket is created. I have named mine `chapter03-backup-bucket`
    and created it in the `us-west-2` region. Your Docker host has access to Amazon''s
    API. You can make your backups again, but this time, push them to Amazon S3:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的 Amazon S3 桶已经创建。我将其命名为 `chapter03-backup-bucket` 并创建在 `us-west-2` 区域。你的
    Docker 主机已能访问 Amazon 的 API。你可以重新备份数据，但这次，将它们推送到 Amazon S3：
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'As you can see, the destination URL takes the following format:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，目标 URL 的格式如下：
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Again, you will receive URLs once the backups has been completed. In my case,
    there are as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦备份完成，你将再次收到 URL。在我的例子中，备份的 URL 如下：
- en: '[PRE37]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'For the database backup, we will see the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据库备份，我们将看到以下内容：
- en: '[PRE38]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'When running the preceding commands, your terminal output should have looked
    something similar to the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行前述命令时，你的终端输出应该类似于以下内容：
- en: '![Backing up our Convoy snapshot](img/B05468_03_18.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![备份我们的 Convoy 快照](img/B05468_03_18.jpg)'
- en: 'Now that we have off instance backups of our data volumes, let''s terminate
    the Docker host and bring up a new one. If you haven''t already, `exit` from the
    Docker host and terminate it by running the following command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了数据卷的实例备份，让我们终止 Docker 主机并启动新的主机。如果你还没这样做，`exit` 离开 Docker 主机，并通过运行以下命令终止它：
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Restoring our Convoy backups
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 恢复我们的 Convoy 备份
- en: 'As you can see from the following screen, we have backups of our snapshots
    in an Amazon S3 bucket:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，我们已将快照备份存储在 Amazon S3 桶中：
- en: '![Restoring our Convoy backups](img/B05468_03_19.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![恢复我们的 Convoy 备份](img/B05468_03_19.jpg)'
- en: Before we restore the backups, we need to recreate our Docker instance. Use
    the instructions for launching a Docker host in DigitalOcean, installing and starting
    Convoy, and also setting up your AWS credentials file from the previous sections
    of this chapter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在恢复备份之前，我们需要重新创建我们的 Docker 实例。使用本章前面的部分中提供的在 DigitalOcean 启动 Docker 主机、安装和启动
    Convoy 以及设置 AWS 凭证文件的说明。
- en: Tip
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember to reassign your floating IP address to the Droplet before you continue.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，记得将你的浮动 IP 地址重新分配给 Droplet。
- en: 'Once you have everything backed up and running, you should be able to run the
    following commands to restore the volumes:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成备份并且系统运行正常，你应该能够运行以下命令来恢复卷：
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You should also be able to run the following command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该能够运行以下命令：
- en: '[PRE41]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The process of restoring the volumes will take several minutes, during which
    you will see a lot of output streamed to your terminal. The output should look
    similar to the following screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复卷的过程将需要几分钟，在此期间，你将看到大量输出流向你的终端。输出应该类似于以下截图：
- en: '![Restoring our Convoy backups](img/B05468_03_20.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![恢复我们的 Convoy 备份](img/B05468_03_20.jpg)'
- en: As you can see towards the end of the preceding terminal session, the restore
    process restores each block from the S3 bucket so that you will most see these
    messages scroll past.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在前面的终端会话结束时所见，恢复过程会从 S3 桶中恢复每个块，因此你会看到这些消息不断滚动。
- en: 'Once you have both volumes restored, go back to your Docker Compose file and
    run the following command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你恢复了这两个卷，返回到你的 Docker Compose 文件并运行以下命令：
- en: '[PRE42]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If everything goes as planned, you should be able to open a browser and see
    your content intact and how you left it using the following command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，你应该能够打开浏览器并查看你的内容保持完好，且按你所见的方式显示，使用以下命令：
- en: '[PRE43]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Tip
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't forget, if you have finished with the Docker host, you will need to stop
    and remove using `docker-machine stop chapter03 && docker-machine rm chapter03`,
    otherwise you may incur unwanted costs.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了，如果你已经完成了 Docker 主机的操作，你需要使用 `docker-machine stop chapter03 && docker-machine
    rm chapter03` 来停止并移除它，否则你可能会产生不必要的费用。
- en: Summing up Convoy
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结 Convoy
- en: Convoy is a great tool to start looking at Docker volumes, it is great to quickly
    move the content around different environments, which means that you can not only
    share your containers, but also share your volumes with fellow developers or sysadmins.
    It is also straightforward to install and configure, as it ships as a precompiled
    binary.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Convoy 是一个很好的工具，可以开始查看 Docker 卷，它非常适合快速在不同环境之间移动内容，这意味着你不仅可以共享容器，还可以与其他开发人员或系统管理员共享卷。它的安装和配置也非常简单，因为它以预编译的二进制文件形式发布。
- en: Block volumes using REX-Ray
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 REX-Ray 的块存储
- en: So far, we have looked at drivers that use local storage with backups to remote
    storage. We are now going to take this one step further by looking at remote storage
    that is directly attached to our container.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经查看了使用本地存储并备份到远程存储的驱动程序。现在我们将进一步探索，查看直接附加到我们容器的远程存储。
- en: In this example, we are you going to be launching a Docker instance in Amazon
    Web Services and launch our WordPress example and attach Amazon Elastic Block
    Store volumes to our containers using REX-Ray, a volume driver by EMC.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将启动一个 Docker 实例，在 Amazon Web Services 中启动我们的 WordPress 示例，并使用 EMC 提供的卷驱动程序
    REX-Ray 将 Amazon Elastic Block Store 卷附加到我们的容器上。
- en: 'REX-Ray supports several storage types on both public clouds and EMC''s own
    range, as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: REX-Ray 支持公共云和 EMC 自有存储类型，如下所示：
- en: AWS EC2
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS EC2
- en: OpenStack
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack
- en: Google Compute Engine
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 计算引擎
- en: EMC Isilon, ScaleIO, VMAX, and XtremIO
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMC Isilon, ScaleIO, VMAX 和 XtremIO
- en: The driver is in active development and more types of supported storage are
    promised soon.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 该驱动程序正在积极开发中，承诺很快会支持更多类型的存储。
- en: Installing REX-Ray
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 REX-Ray
- en: 'As we are going to be using Amazon EBS volumes, we will need to launch the
    Docker host in AWS, as EBS volumes can not be mounted as block devices to instances
    in other cloud providers. As per the previous chapter, this can be accomplished
    using Docker Machine and the following command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用 Amazon EBS 卷，我们需要在 AWS 中启动 Docker 主机，因为 EBS 卷不能作为块设备挂载到其他云提供商的实例上。根据前一章内容，这可以使用
    Docker Machine 和以下命令完成：
- en: '[PRE44]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Switch Docker Machine to use the newly created host:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 切换 Docker Machine 使用新创建的主机：
- en: '[PRE45]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, SSH into the host, as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 SSH 进入主机，如下所示：
- en: '[PRE46]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Once you are on the Docker host, run the following command to install REX-Ray:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你进入 Docker 主机，运行以下命令来安装 REX-Ray：
- en: '[PRE47]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This will download and perform the basic configuration of the latest stable
    release of REX-Ray:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载并执行 REX-Ray 最新稳定版本的基本配置：
- en: '![Installing REX-Ray](img/B05468_03_36.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![安装 REX-Ray](img/B05468_03_36.jpg)'
- en: 'Once REX-Ray is installed, we will need to configure it to use Amazon EBS volumes.
    This will need to be done as the root user, to the following to add a file called
    `config.yml` to `/etc/rexray/`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 REX-Ray 后，我们需要配置它以使用 Amazon EBS 卷。作为 root 用户，执行以下操作，在 `/etc/rexray/` 中添加一个名为
    `config.yml` 的文件：
- en: '[PRE48]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The file should contain the following, remember to replace the values for AWS
    credentials:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 文件应包含以下内容，记得替换 AWS 凭证的值：
- en: '[PRE49]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Once you have added the configuration file, you should be able to use REX-Ray
    straight away, running the following command should return a list of EBS volumes:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你添加了配置文件，你应该能够直接使用 REX-Ray，运行以下命令应该返回一个 EBS 卷的列表：
- en: '[PRE50]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If you see the list of volumes, then you will need to start the process. If
    you don''t see the volumes, check whether the user that you have provided `accesskey`
    and `secretkey` for has access to read and create EBS volumes. To start the process
    and check whether everything is OK, run the following commands:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到卷的列表，那么你需要启动该过程。如果没有看到卷，请检查你为 `accesskey` 和 `secretkey` 提供的用户是否具有读取和创建
    EBS 卷的权限。要启动过程并检查一切是否正常，运行以下命令：
- en: '[PRE51]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You should see something similar to the following terminal output if everything
    works as expected:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按预期工作，你应该看到类似以下的终端输出：
- en: '![Installing REX-Ray](img/B05468_03_37.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![安装 REX-Ray](img/B05468_03_37.jpg)'
- en: 'The final step of the installation is to restart Docker on the instance so
    that it picks up the new volume driver. To do this, run the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 安装的最后一步是重新启动实例上的 Docker，以便它识别新的卷驱动程序。为此，运行以下命令：
- en: '[PRE52]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now its time to launch some containers. The only change we need make to the
    Docker Compose file from the Convoy one is to change the name of the volume driver,
    everything else stays the same:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候启动一些容器了。我们需要对 Docker Compose 文件做的唯一更改是修改卷驱动程序的名称，其他内容保持不变：
- en: '[PRE53]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Once the application has launched, set the permissions on the upload folder
    by running the following command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序启动，运行以下命令设置上传文件夹的权限：
- en: '[PRE54]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In the AWS Console, you will notice that now there are some additional volumes:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中，你会注意到现在有一些额外的卷：
- en: '![Installing REX-Ray](img/B05468_03_38.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![安装 REX-Ray](img/B05468_03_38.jpg)'
- en: 'Open your new WordPress installation in a browser by running the following
    command:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令，在浏览器中打开你新的 WordPress 安装：
- en: '[PRE55]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'If you have a problem opening the WordPress site in your browser, find the
    running instance in the AWS Console and add a rule for `port 80`/`HTTP` to the
    **DOCKER-MACHINE** security group. Your rules should look similar to the following
    image:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在浏览器中打开 WordPress 站点时遇到问题，请在 AWS 控制台中找到正在运行的实例，并为 `port 80`/`HTTP` 添加规则到
    **DOCKER-MACHINE** 安全组。你的规则应类似于以下图像：
- en: '![Installing REX-Ray](img/B05468_03_41.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![安装 REX-Ray](img/B05468_03_41.jpg)'
- en: You will only have to add the rule once, as Docker Machine will reassign the
    `docker-machine` security group whenever you launch more Docker hosts.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需添加一次规则，因为每当你启动更多的 Docker 主机时，Docker Machine 会重新分配 `docker-machine` 安全组。
- en: 'Once you have the page open, complete the WordPress installation and edit or
    upload some content. You know the drill by now, once you have added your content,
    it''s time to stop the containers, remove them, and then terminate the Docker
    host:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦页面打开，完成 WordPress 安装并编辑或上传一些内容。你现在应该知道流程了，添加完内容后，是时候停止容器、删除容器，然后终止 Docker
    主机：
- en: '[PRE56]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Before removing the host, you can check the status of the volumes by running
    the following command:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在移除主机之前，你可以通过运行以下命令检查卷的状态：
- en: '[PRE57]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You will see something similar to the following image:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到类似以下的图像：
- en: '![Installing REX-Ray](img/B05468_03_39.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![安装 REX-Ray](img/B05468_03_39.jpg)'
- en: 'Finally, it''s time to remove the Docker host:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候移除 Docker 主机了：
- en: '[PRE58]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Moving the REX-Ray volume
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动 REX-Ray 卷
- en: Before we bring up a new Docker host with Docker Machine, it is worth pointing
    out that our WordPress installation will probably look a little broken.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们用 Docker Machine 启动新 Docker 主机之前，值得指出的是，我们的 WordPress 安装可能看起来有些损坏。
- en: This is because moving our containers to a new host changes the IP address that
    we will be accessing the WordPress site on, meaning that until you change the
    settings to use the second node's IP address, you will see a broken site.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为将我们的容器迁移到新的主机会改变我们访问 WordPress 站点的 IP 地址，意味着在你将设置更改为使用第二个节点的 IP 地址之前，你将看到一个损坏的站点。
- en: This is because it is trying to load content, such as CSS and JavaScript, from
    the first Docker host's IP address.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为它尝试从第一个 Docker 主机的 IP 地址加载内容，如 CSS 和 JavaScript。
- en: For more information on how to update these settings, refer to the WordPress
    Codex at [https://codex.wordpress.org/Changing_The_Site_URL](https://codex.wordpress.org/Changing_The_Site_URL).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何更新这些设置的更多信息，请参阅 WordPress Codex：[https://codex.wordpress.org/Changing_The_Site_URL](https://codex.wordpress.org/Changing_The_Site_URL)。
- en: 'Also, if you have logged into the AWS Console, you may have noticed that your
    EBS volumes are not currently attached to any instance:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你已经登录到 AWS 控制台，你可能注意到你的 EBS 卷目前没有附加到任何实例：
- en: '![Moving the REX-Ray volume](img/B05468_03_40.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![移动 REX-Ray 卷](img/B05468_03_40.jpg)'
- en: 'Now that we have this out of the way, let''s launch our new Docker host using
    Docker Machine. If you followed the instructions in the previous section to launch
    the host, connect, install REX-Ray, and launch the WordPress and Database containers.
    As we have already discussed, you could update the site''s IP address by connecting
    to the database:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 既然这些都处理好了，让我们使用 Docker Machine 启动新的 Docker 主机。如果你按照上一节的说明启动主机、连接、安装 REX-Ray
    并启动 WordPress 和数据库容器，正如我们之前讨论的，你可以通过连接到数据库来更新站点的 IP 地址：
- en: 'Should you want to update the IP address, then you can run the following. First
    of all, connect to your database container:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想更新 IP 地址，可以运行以下命令。首先，连接到你的数据库容器：
- en: '[PRE59]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Then make a connection to MariaDB using the MySQL client:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用 MySQL 客户端连接到 MariaDB：
- en: '[PRE60]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Switch to the `wordpress` database:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `wordpress` 数据库：
- en: '[PRE61]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Then finally run the following SQL. In my case, `http://54.175.31.251` is the
    old URL and `http://52.90.249.56` is the new one:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后最后运行以下 SQL。在我的例子中，`http://54.175.31.251` 是旧的 URL，而 `http://52.90.249.56` 是新的
    URL：
- en: '[PRE62]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Your terminal session should look similar to the following screenshot:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你的终端会话应该类似于以下截图：
- en: '![Moving the REX-Ray volume](img/B05468_03_42.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![移动 REX-Ray 卷](img/B05468_03_42.jpg)'
- en: However, we can see that the content is present, even though the site looks
    broken.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我们可以看到内容确实存在，尽管站点看起来像是坏了。
- en: Summing up REX-Ray
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结 REX-Ray
- en: REX-Ray is very much in early development, with more features being added all
    the time. Over the next few releases, I can foresee it getting more and more useful
    as it is slowly moving towards being a cluster-aware tool rather than the standalone
    tool it is at the moment.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: REX-Ray 仍然处于早期开发阶段，正在不断添加更多功能。在接下来的几个版本中，我预见它将变得越来越有用，因为它正逐渐朝着成为一个集群感知工具而非目前的独立工具发展。
- en: However, even in this early stage of its development, it serves as a great introduction
    to using external storage with Docker Volumes.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使在其开发的早期阶段，它仍然是使用 Docker 卷与外部存储的一个极好的入门工具。
- en: Flocker and Volume Hub
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flocker 和 Volume Hub
- en: 'The next tool that we are going to look at is Flocker by ClusterHQ. It''s certainly
    the most feature-rich of the third-party volume drivers that we are going to be
    looking at in this chapter. As you can see from the following list of supported
    storage options, it has the widest coverage of storage backends out of all of
    the volume drivers:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要看的下一个工具是 ClusterHQ 提供的 Flocker。它无疑是我们将在本章中看到的第三方卷驱动中功能最丰富的。如以下支持的存储选项所示，它涵盖了最广泛的存储后端：
- en: AWS Elastic Block Storage
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Elastic Block Storage
- en: OpenStack Cinder with any supported backend
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack Cinder 与任何支持的后端
- en: EMC ScaleIO, XtremeIO, and VMAX
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMC ScaleIO、XtremeIO 和 VMAX
- en: VMware vSphere and vSan
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware vSphere 和 vSan
- en: NetApp OnTap
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetApp OnTap
- en: Dell Storage SC Series
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 戴尔存储 SC 系列
- en: HPE 3PAR StoreServ and StoreVirtual (with OpenStack only)
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HPE 3PAR StoreServ 和 StoreVirtual（仅支持 OpenStack）
- en: Huawei OceanStor
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 华为 OceanStor
- en: Hedvig
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hedvig
- en: NexentaEdge
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NexentaEdge
- en: ConvergeIO
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ConvergeIO
- en: Saratoga Speed
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Saratoga Speed
- en: 'There is also support for the following storage options coming soon:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 还将很快支持以下存储选项：
- en: Ceph
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ceph
- en: Google Persistent Disk
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Persistent Disk
- en: As most people will have access to AWS, we are going to look at launching a
    Flocker cluster in AWS.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数人都可以访问 AWS，我们将查看如何在 AWS 上启动 Flocker 集群。
- en: Forming your Flock
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 形成你的 Flock
- en: Rather than rolling our sleeves up and installing Flocker manually, we are going
    to take a look at how to get Flocker up and running quickly.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不再亲自手动安装 Flocker，而是将快速了解如何快速启动 Flocker。
- en: For this part of the chapter, we will be launching a cluster using an AWS CloudFormation
    template provided by ClusterHQ to get a Flocker cluster up and running quickly.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的这一部分，我们将通过 ClusterHQ 提供的 AWS CloudFormation 模板启动一个集群，快速启动一个 Flocker 集群。
- en: Note
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: AWS CloudFormation is the orchestration tool provided by Amazon that allows
    you to define how you would like your AWS infrastructure to look and be configured.
    CloudFormation is free to use; however, you do pay for the resources that are
    launched by it. At the time of writing, the estimated cost for running the template
    for one month is $341.13\. For more information on CloudFormation, refer to [https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/),
    or for a breakdown of the costs, refer to [http://calculator.s3.amazonaws.com/index.html#r=IAD&s=EC2&key=calc-D96E035B-5A84-48DE-BF62-807FFE4740A8](http://calculator.s3.amazonaws.com/index.html#r=IAD&s=EC2&key=calc-D96E035B-5A84-48DE-BF62-807FFE4740A8).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFormation 是亚马逊提供的编排工具，允许你定义你希望的 AWS 基础设施的外观和配置方式。CloudFormation 是免费使用的；但是，你需要为它启动的资源付费。截至撰写时，运行模板一个月的预计费用是
    $341.13。有关 CloudFormation 的更多信息，请参考 [https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/)，或者要了解费用详情，请参考
    [http://calculator.s3.amazonaws.com/index.html#r=IAD&s=EC2&key=calc-D96E035B-5A84-48DE-BF62-807FFE4740A8](http://calculator.s3.amazonaws.com/index.html#r=IAD&s=EC2&key=calc-D96E035B-5A84-48DE-BF62-807FFE4740A8)。
- en: 'There are a few steps that we will need to perform before we launch the CloudFormation
    template. First of all, you will need to create a key pair to be used by the template.
    To do this, log in to the AWS console at [https://console.aws.amazon.com/](https://console.aws.amazon.com/),
    select your region, then click on EC2, and then on the left-hand side **Key Pairs**
    menu, the key pair you create should be called something like flocker-test:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动CloudFormation模板之前，我们需要执行一些步骤。首先，您需要创建一个密钥对供模板使用。为此，请登录到AWS控制台 [https://console.aws.amazon.com/](https://console.aws.amazon.com/)，选择您的区域，然后点击EC2，再在左侧点击**密钥对**菜单，您创建的密钥对应命名应类似于flocker-test：
- en: '![Forming your Flock](img/B05468_03_21.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![Forming your Flock](img/B05468_03_21.jpg)'
- en: After you click on the **Create** button, your key pair will be downloaded,
    **keep this safe** as you will not be able to download it again. Now that you
    have your key pair created and safely downloaded, it's time to create an account
    on the ClusterHQ Volume Hub, you can do this by going to [https://volumehub.clusterhq.com/](https://volumehub.clusterhq.com/).
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**按钮后，您的密钥对将被下载，**请妥善保管**，因为以后无法再次下载。现在您已创建并安全下载了密钥对，接下来是时候在ClusterHQ
    Volume Hub上创建一个账户了，您可以访问[https://volumehub.clusterhq.com/](https://volumehub.clusterhq.com/)进行注册。
- en: The Volume Hub (at the time of writing this book, it is in Alpha testing) is
    a web-based interface to manage your Flocker volumes. You can either signup for
    an account using your e-mail address or signin using your Google ID.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: Volume Hub（在写本书时仍处于Alpha测试阶段）是一个基于Web的接口，用于管理您的Flocker卷。您可以使用您的电子邮件地址注册账户，或使用Google
    ID进行登录。
- en: 'Once you have signed up/in, you will be presented with a notice pointing out
    that *You don''t appear to have a cluster yet*. and the option of either creating
    a new cluster or connect to an existing cluster:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 登录/注册后，您将看到一条提示，显示*您似乎还没有集群*，并提供创建新集群或连接到现有集群的选项：
- en: '![Forming your Flock](img/B05468_03_22.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![Forming your Flock](img/B05468_03_22.jpg)'
- en: 'Clicking on **Create new** button will open an overlay with instructions about
    what you need to do to create a cluster using AWS CloudFormation. As we have already
    actioned step one, scroll down to step two. Here, you should see a button that
    says **Start CloudFormation Configuration Process**, click on this to open a new
    tab that will take you directly to the AWS CloudFormation page on the AWS console:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建新建**按钮将弹出一个覆盖层，里面包含了如何使用AWS CloudFormation创建集群的说明。由于我们已经完成了第一步，向下滚动到第二步。在这里，您应该看到一个按钮，显示**开始CloudFormation配置过程**，点击它将打开一个新标签页，直接带您进入AWS控制台中的AWS
    CloudFormation页面：
- en: '![Forming your Flock](img/B05468_03_23.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![Forming your Flock](img/B05468_03_23.jpg)'
- en: The first step of launching the AWS CloudFormation stack is selecting the template,
    this has already been done for us, so you can click on the **Next** button.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 启动AWS CloudFormation堆栈的第一步是选择模板，这一步已经为我们完成，您可以点击**下一步**按钮。
- en: You will now be asked to give some details about your stack, this includes a
    name for the stack, EC2 key pair name, AWS access and secret keys, and also your
    Volume Hub token.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将需要提供一些关于堆栈的详细信息，包括堆栈名称、EC2密钥对名称、AWS访问和密钥秘钥以及您的Volume Hub令牌。
- en: 'To get your Volume Hub token, visit [https://volumehub.clusterhq.com/v1/token](https://volumehub.clusterhq.com/v1/token)
    and you will be presented with a token. This token is unique to your Volume Hub
    account, it is important you don''t share it:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取您的Volume Hub令牌，请访问[https://volumehub.clusterhq.com/v1/token](https://volumehub.clusterhq.com/v1/token)，系统会展示给您一个令牌。此令牌是唯一与您的Volume
    Hub账户相关联的，请务必不要与他人分享：
- en: '![Forming your Flock](img/B05468_03_24.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![Forming your Flock](img/B05468_03_24.jpg)'
- en: Once you have filled in the details you can click on the **Next** button. On
    the next page, you will be asked to tag your resources, this is optional. You
    should follow your normal processes for tagging resources here. Once you have
    added your tags, click on the **Next** button.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完详细信息后，您可以点击**下一步**按钮。在下一页中，系统会要求您为资源添加标签，这是可选的。您应该按照平常的流程为资源打标签。添加完标签后，点击**下一步**按钮。
- en: Tip
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that clicking on create will launch resources in your AWS account that
    will incur hourly charges. Only click on create if you are planning on working
    through the next steps.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，点击创建将会在您的AWS账户中启动资源，并产生按小时计费的费用。仅在您打算继续执行接下来的步骤时点击创建。
- en: The next page gives you an overview of the details that you have provided. If
    you are happy with these, click on the **Create** button.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 下一页将展示您提供的详细信息的概览。如果您对这些信息满意，请点击**创建**按钮。
- en: 'After you click on the **Create** button, you will be taken back to the AWS
    CloudFormation page, where should see your stack with a **CREATE_IN_PROGRESS**
    status:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**按钮后，你将被带回到 AWS CloudFormation 页面，在那里你应该看到你的堆栈状态为**CREATE_IN_PROGRESS**：
- en: '![Forming your Flock](img/B05468_03_25.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![形成你的集群](img/B05468_03_25.jpg)'
- en: If you don't see your stack, click on the refresh icon on the right-hand top
    corner. Typically, it will take around 10 minutes to create your cluster. While
    the stack is being created, you can click on one of the **Split pane** icons on
    the bottom-right of the screen and view the events that are taking place to launch
    your cluster.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有看到你的堆栈，点击右上角的刷新图标。通常情况下，创建集群大约需要 10 分钟。在堆栈创建过程中，你可以点击屏幕右下角的一个**拆分窗格**图标，查看正在进行的事件。
- en: Also, as the cluster is launching, you should start seeing Nodes registering
    themselves in your Volume Hub account. It is important, however tempting, to not
    start using the Volume Hub until your stack has a **CREATE_COMPLETE** status.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在集群启动时，你应该开始看到节点在你的 Volume Hub 账户中注册。然而，尽管很诱人，还是不要在你的堆栈状态为**CREATE_COMPLETE**之前使用
    Volume Hub。
- en: 'Once your stack has been deployed, click on the **Outputs** tab. This will
    give you the details you will need to connect to the cluster. You should see something
    similar to the following:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦堆栈部署完成，点击**输出**标签。这将给你提供连接到集群所需的详细信息。你应该看到类似以下的内容：
- en: '![Forming your Flock](img/B05468_03_26.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![形成你的集群](img/B05468_03_26.jpg)'
- en: 'The first thing we need to do is set the correct permissions on the key pair
    that we created earlier. In my case, it is in my `Downloads` folder:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是为之前创建的密钥对设置正确的权限。在我的案例中，它位于我的`Downloads`文件夹中：
- en: '[PRE63]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Once you have set the permission, you will need to log in to the client node
    using `ubuntu` as the username and your key pair. In my case, the client node
    IP address is 23.20.126.24:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置了权限，你需要使用`ubuntu`作为用户名和你的密钥对登录到客户端节点。在我的案例中，客户端节点的 IP 地址是 23.20.126.24：
- en: '[PRE64]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Once you are logged in, you need to run a few more commands to get the cluster
    ready. For this, you will need to make a note of the IP addresses of the **Control
    Node**, which in the preceding screen is `54.198.167.2`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，你需要运行一些额外的命令来准备集群。为此，你需要记下**控制节点**的 IP 地址，在前面的屏幕中是`54.198.167.2`：
- en: '[PRE65]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now that you have connected to the control service, you should be able to get
    an overview of the cluster using the `flockerctl` command:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经连接到控制服务，你应该能够使用`flockerctl`命令查看集群概况：
- en: '[PRE66]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'When running the `flockerctl ls` command, you shouldn''t see any datasets listed.
    Now we should connect to Docker. To do this, run the following commands:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行`flockerctl ls`命令时，你不应该看到任何数据集列出。现在我们应该连接到 Docker。为此，运行以下命令：
- en: '[PRE67]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: At the time of writing this book, the Flocker AWS CloudFormation template installs
    and configures Docker 1.9.1 and Docker Compose 1.5.2\. This means that you will
    not be able to use the new Docker Compose file format. There should be, however,
    Docker Compose files in both the old and new formats in the GitHub repository,
    which accompanies this book.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在写这本书时，Flocker AWS CloudFormation 模板安装并配置了 Docker 1.9.1 和 Docker Compose 1.5.2。这意味着你将无法使用新的
    Docker Compose 文件格式。然而，在 GitHub 仓库中，应该有旧版和新版格式的 Docker Compose 文件，这些文件伴随本书提供。
- en: You can find the repository at [https://github.com/russmckendrick/extending-docker/](https://github.com/russmckendrick/extending-docker/).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/russmckendrick/extending-docker/](https://github.com/russmckendrick/extending-docker/)
    找到该代码库。
- en: 'Your terminal output should look similar to the following session:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 你的终端输出应该看起来类似于以下的会话：
- en: '![Forming your Flock](img/B05468_03_27.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![形成你的集群](img/B05468_03_27.jpg)'
- en: Now that we have everything up and running, let's launch our WordPress installation
    using Flocker volumes.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都已启动运行，让我们使用 Flocker 卷启动我们的 WordPress 安装。
- en: Deploying into the Flock
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署到 Flock 中
- en: 'First thing we should do is create the volumes. We could let Flocker use its
    defaults, which is a 75 GB EBS volume, but this is a little overkill for our needs:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是创建卷。我们可以让 Flocker 使用其默认值，即 75 GB 的 EBS 卷，但这对于我们的需求来说有些过大：
- en: '[PRE68]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'As you can see, this is a more sensible size and we are choosing the same volume
    names as we have done in the previous examples. Now that we have our volumes created,
    we can launch WordPress. To do this, we have two Docker Compose files, one will
    launch the containers on AgentNode1 and the other on AgentNode2\. First of all,
    create a folder to store the files:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是一个更合适的大小，我们选择了与之前示例相同的卷名称。现在我们已经创建了卷，可以启动 WordPress。为此，我们有两个 Docker Compose
    文件，一个将在 AgentNode1 上启动容器，另一个将在 AgentNode2 上启动容器。首先，创建一个文件夹来存储文件：
- en: '[PRE69]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'As already mentioned, at the time of writing this book, only the original Docker
    Compose file format is support, due to this, our file should have the following
    content:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在编写本书时，仅支持原始的 Docker Compose 文件格式，因此我们的文件应包含以下内容：
- en: '[PRE70]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: As you can see, it isn't too different from the new format. The important thing
    to note is the lines that bind the containers to a node, this has been highlighted
    in the preceding code.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它与新格式没有太大区别。需要注意的是绑定容器到节点的行，已在前面的代码中突出显示。
- en: 'To launch the containers, we have to pass the filename to `docker-compose`.
    To do this, run the following commands:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动容器，我们必须将文件名传递给 `docker-compose`。为此，请运行以下命令：
- en: '[PRE71]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Once the container''s have launched, run the following to set the correct permissions
    on the `uploads` folder:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 启动容器后，运行以下命令以设置 `uploads` 文件夹的正确权限：
- en: '[PRE72]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Now that we have our volumes created and containers launched, let''s take a
    quick look at the Volume Hub:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了卷并启动了容器，让我们快速查看 Volume Hub：
- en: '![Deploying into the Flock](img/B05468_03_28.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![部署到 Flock 中](img/B05468_03_28.jpg)'
- en: 'As you can see, there are two volumes being shown as attached to the node with
    the internal IP of `10.168.86.184`. Looking at the Volumes page gives us a lot
    more detail:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，两个卷已显示为附加到内部 IP 为 `10.168.86.184` 的节点。查看 Volumes 页面可以提供更多详细信息：
- en: '![Deploying into the Flock](img/B05468_03_29.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![部署到 Flock 中](img/B05468_03_29.jpg)'
- en: 'As you can see, we have information on the size, name, its unique ID, and which
    node it is attached to. We can also see the information on the containers that
    are running within our cluster:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有关于卷的大小、名称、唯一 ID 以及它附加到哪个节点的信息。我们还可以看到在集群中运行的容器信息：
- en: '![Deploying into the Flock](img/B05468_03_30.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![部署到 Flock 中](img/B05468_03_30.jpg)'
- en: 'Before we stop and remove the containers, you should configure WordPress and
    then log in and upload a file. You will be able to get the IP address you can
    access WordPress on by running the following command and opening the IP address
    where port 80 is mapped to in your browser:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们停止并移除容器之前，您应该配置 WordPress，然后登录并上传一个文件。您可以通过运行以下命令并在浏览器中打开映射到端口 80 的 IP 地址来获取可以访问
    WordPress 的 IP 地址：
- en: '[PRE73]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Once you have made these changes, you can stop and remove the containers by
    running the following commands:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些更改后，您可以通过运行以下命令来停止并移除容器：
- en: '[PRE74]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Now that you have removed the containers, it''s time to launch them on the
    second node. You will need to create a second Docker Compose file, as follows:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经移除了容器，是时候在第二个节点上启动它们了。您需要创建第二个 Docker Compose 文件，如下所示：
- en: '[PRE75]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'As you can see, all that has changed is the node number. To launch the containers,
    run the following command:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，唯一变化的是节点编号。要启动容器，请运行以下命令：
- en: '[PRE77]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'It will take a little longer to launch, as Flocker has to unattach and reattach
    the volumes to the second node. Once the containers are running, you will see
    that they are now showing as being attached to the second node in the Volume Hub,
    as shown in the following screenshot:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 启动时间会稍长一些，因为 Flocker 需要取消附加并重新附加卷到第二个节点。一旦容器开始运行，您将看到它们现在显示为附加到第二个节点，在 Volume
    Hub 中，如下图所示：
- en: '![Deploying into the Flock](img/B05468_03_31.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![部署到 Flock 中](img/B05468_03_31.jpg)'
- en: 'This is also reflected in the other sections of the Volume Hub:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 Volume Hub 的其他部分也有体现：
- en: '![Deploying into the Flock](img/B05468_03_32.jpg)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![部署到 Flock 中](img/B05468_03_32.jpg)'
- en: 'Finally, you can see your new containers on the **Containers** page:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以在 **容器** 页面上看到您的新容器：
- en: '![Deploying into the Flock](img/B05468_03_33.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![部署到 Flock 中](img/B05468_03_33.jpg)'
- en: 'Run the following command and open the IP address in a browser:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令并在浏览器中打开 IP 地址：
- en: '[PRE78]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: As mentioned in the REX-Rey section of this chapter, opening WordPress should
    show you a broken-looking WordPress page, but this shouldn't matter as some content
    is being served out of the database volume; otherwise, you would be seeing the
    Install WordPress page.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章REX-Rey部分所提到的，打开WordPress时你应该看到一个破损的WordPress页面，但这不应该影响你，因为一些内容是从数据库卷中提供的；否则，你将看到安装WordPress页面。
- en: So, there you have it. You have used Flocker and Volume Hub to launch and view
    your Docker volumes, as well as move them between hosts.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是你所做的。你使用Flocker和Volume Hub启动并查看了Docker卷，并将它们在主机之间移动。
- en: 'As mentioned at the start of this section, you are paying by the hour to have
    the cluster up and running. To remove it, you should go to the AWS Console, switch
    to the CloudFormation service, select your Stack, and then delete from the actions
    drop-down menu:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 如本节开头所述，你是按小时收费来运行集群的。要删除集群，你应该进入AWS控制台，切换到CloudFormation服务，选择你的堆栈，然后从操作下拉菜单中选择删除：
- en: '![Deploying into the Flock](img/B05468_03_34.jpg)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
  zh: '![部署到Flock](img/B05468_03_34.jpg)'
- en: If you get an error about not being able to remove the S3 bucket, don't worry,
    all of the expensive stuff will have been terminated. To resolve the error, just
    go to the S3 bucket it is complaining about in the AWS Console and remove the
    content. Once you have removed the content, go back to the CloudFormation page
    and attempt to delete the stack again.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到无法删除S3存储桶的错误，别担心，所有昂贵的东西已经被终止。要解决此错误，只需在AWS控制台中找到它所抱怨的S3存储桶并删除内容。删除内容后，返回CloudFormation页面，再次尝试删除堆栈。
- en: Summing up Flocker
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结Flocker
- en: Flocker is the grandfather of Docker volumes, it was one of the original solutions
    for managing volumes even before the volume plugin architecture was released.
    This means that it is both mature and easily the most complicated of the volume
    plugins that we have looked at.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: Flocker是Docker卷的“祖父”，它在卷插件架构发布之前就是管理卷的原始解决方案之一。这意味着它既成熟，又是我们查看过的所有卷插件中最复杂的。
- en: To get an idea of its complexity, you can view the CloudFormation template at
    [https://s3.amazonaws.com/installer.downloads.clusterhq.com/flocker-cluster.cloudformation.json](https://s3.amazonaws.com/installer.downloads.clusterhq.com/flocker-cluster.cloudformation.json).
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解其复杂性，你可以查看[CloudFormation模板](https://s3.amazonaws.com/installer.downloads.clusterhq.com/flocker-cluster.cloudformation.json)。
- en: 'As you can see, there are a lot of steps. Viewing the template in the CloudFormation
    visualizer gives you more of an idea of how everything is linked:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有很多步骤。在CloudFormation可视化工具中查看模板可以让你更清楚地了解所有内容是如何关联的：
- en: '![Summing up Flocker](img/B05468_03_35.jpg)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![总结Flocker](img/B05468_03_35.jpg)'
- en: Add to the mix that Docker itself is regularly being updated and you have a
    very complex installation process. This is the reason why I have not gone into
    detail about how to manually install it in this chapter, as the process will no
    doubt have changed by the time you come to read it.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 再加上Docker本身也在定期更新，你就拥有了一个非常复杂的安装过程。这也是为什么我在本章中没有详细讲解如何手动安装它，因为到你阅读时，过程无疑会有所变化。
- en: Luckily, Cluster Labs have an extremely good documentation that is regularly
    updated. It can be found at [https://docs.clusterhq.com/en/latest/](https://docs.clusterhq.com/en/latest/).
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Cluster Labs有一个非常好的文档，且定期更新。你可以在[https://docs.clusterhq.com/en/latest/](https://docs.clusterhq.com/en/latest/)找到它。
- en: It's also worth pointing out that, at the time of writing this book, Volume
    Hub is in early alpha and more functionality is being added regularly. Eventually,
    I can see this being quite a powerful combination of tools.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 同时值得指出的是，在写这本书时，Volume Hub仍处于早期Alpha阶段，功能正在不断添加。最终，我认为这将成为一个非常强大的工具组合。
- en: Summary
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have looked at three different volume drivers that all work
    with Docker's plugin architecture.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们查看了三种不同的卷驱动程序，它们都与Docker的插件架构兼容。
- en: While the three drivers offer three very different approaches to providing persistent
    storage for your containers, you may have noticed that Docker Compose files and
    how we interact with the volumes using the Docker client was pretty much the same
    experience across all three tools, probably to the point where I am sure it was
    starting to get a little repetitive.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这三种驱动程序提供了三种完全不同的方式来为容器提供持久化存储，但你可能已经注意到，Docker Compose 文件以及我们如何通过 Docker
    客户端与卷交互的方式，在所有三种工具中几乎是一样的体验，可能到了一种我敢肯定它开始显得有点重复的地步。
- en: This repetitiveness showcases, in my opinion, one of the best features of using
    Docker plugins, the consistent experience from the client's point of view. At
    no point, after we configured the tools, did we have to really think about or
    take into consideration how we were using the storage, we just got on with it.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，这种重复性展示了使用 Docker 插件的最佳特性之一——从客户端角度来看的一致体验。在我们配置好工具后，在任何时刻，我们都无需真正思考或考虑如何使用存储，我们只需要继续进行。
- en: This allows us to reuse our resources, such as Docker Compose files and containers,
    across multiple environments such as local VMs, cloud-based Docker hosts, or even
    Docker clusters.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够在多个环境中重用我们的资源，如 Docker Compose 文件和容器，包括本地虚拟机、基于云的 Docker 主机，甚至是 Docker
    集群。
- en: However, at the moment, we are still bound to a single Docker host machine.
    In the next chapter, we will look at how to start spanning multiple Docker hosts
    by looking at Docker Networking plugins.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，目前我们仍然局限于单一的 Docker 主机。 在下一章中，我们将探讨如何通过查看 Docker 网络插件来开始跨多个 Docker 主机进行部署。
