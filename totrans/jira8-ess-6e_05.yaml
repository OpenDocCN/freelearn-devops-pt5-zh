- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Field Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Projects** are collections of issues, and **issues** are collections of fields.
    As we have seen in the earlier chapters, fields capture data, which can then be
    displayed to users. There are many different types of fields in Jira, ranging
    from simple text fields that let you input alphanumeric text, to more complicated
    fields with pickers to assist you with choosing dates and users.'
  prefs: []
  type: TYPE_NORMAL
- en: An information system is only as useful as the data that goes into it. By understanding
    how to effectively use fields, you can turn Jira into a powerful information system
    for data collection, processing, and reporting.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will expand our HR project with these customized fields
    and configurations, by exploring fields in detail and learning how they relate
    to other aspects of Jira. By the end of this chapter, you will have learned about
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding system and custom fields and searchers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing and optimizing custom fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding behaviors to fields with field configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding field configuration schemes and how to apply them to projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding system fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira comes with several built-in `assignee` and `description`, are optional.
    These system fields are often tied directly into different features of Jira so
    you cannot remove them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the main system fields in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **System field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Assignee** | This specifies the user who is currently assigned to work
    on the issue. |'
  prefs: []
  type: TYPE_TB
- en: '| **Summary** | This specifies a one-line summary of the issue. |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | This provides a detailed description of the issue. |'
  prefs: []
  type: TYPE_TB
- en: '| **Reporter** | This specifies the user who has reported this issue (most
    of the time, it is also the person who has created the issue, but not always).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Component/s** | This specifies the project components the issue belongs
    to. |'
  prefs: []
  type: TYPE_TB
- en: '| **Affects Version/s** | This specifies the versions the issue effects are
    found in. |'
  prefs: []
  type: TYPE_TB
- en: '| **Fix Version/s** | This specifies the versions the issue will be fixed in.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Due Date** | This specifies the date this issue is due. |'
  prefs: []
  type: TYPE_TB
- en: '| **Issue Type** | This specifies the type of issue (for example, **Bug** and
    **Story**). |'
  prefs: []
  type: TYPE_TB
- en: '| **Priority** | This specifies how important the issue is compared to other
    issues. |'
  prefs: []
  type: TYPE_TB
- en: '| **Resolution** | This specifies the current resolution value of the issue
    (for example, **Unresolved** or **Fixed**). |'
  prefs: []
  type: TYPE_TB
- en: '| **Time Tracking** | This lets users estimate how long the issue will take
    to be completed. |'
  prefs: []
  type: TYPE_TB
- en: Table 5.1 – System fields
  prefs: []
  type: TYPE_NORMAL
- en: While Jira’s built-in fields are enough for basic general uses, most organizations
    soon find they have special requirements that cannot be addressed simply with
    the system fields available. In the next section, we will look at how Jira addresses
    this need by letting you create your own fields, called **custom fields**.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding custom fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key features of Jira is custom fields, which let you add new fields
    to the system based on your needs. You can add a new user picker field to represent
    project stakeholders or a date picker field for different key dates.
  prefs: []
  type: TYPE_NORMAL
- en: Every custom field is of a certain type that dictates its behavior, appearance,
    and functionality. Therefore, when you add a custom field to Jira, you are adding
    a custom field of the selected custom field type.
  prefs: []
  type: TYPE_NORMAL
- en: Jira comes with over 20 custom field types that you can use straight out of
    the box. Many custom field types are identical to the built-in fields, such as
    **Date Picker**, which is like the **Due Date** field. They provide you with simplicity
    and flexibility that are not available with their built-in counterparts. The upcoming
    sections break down and list all the standard and advanced Jira custom field types
    and their characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: Standard fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These field types are the most basic field types in Jira. They are usually
    simple and straightforward to use, such as the **Text** field, which allows users
    to input any text:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Custom** **field type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Date Picker** | These are input fields that allow input with a date picker
    and enforce valid dates. |'
  prefs: []
  type: TYPE_TB
- en: '| **Date** **Time Picker** | These are input fields that allow input with a
    date and time picker and enforce valid date timestamps. |'
  prefs: []
  type: TYPE_TB
- en: '| **Labels** | These are input fields that allow tags to be added to an issue.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Number Field** | These are input fields that store and validate numeric
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| **Radio Buttons** | These are radio buttons that ensure only one value can
    be selected. |'
  prefs: []
  type: TYPE_TB
- en: '| **Select** **List (cascading)** | These are multiple select lists where the
    options for the second select list are dynamically updated based on the value
    of the first. |'
  prefs: []
  type: TYPE_TB
- en: '| **Select List (****multiple choice)** | These are multiple select lists with
    a configurable list of options. |'
  prefs: []
  type: TYPE_TB
- en: '| **Select List (****single choice)** | These are single select lists with
    a configurable list of options. |'
  prefs: []
  type: TYPE_TB
- en: '| **Text** **Field (multi-line)** | These are multiple-line text areas enabling
    the incorporation of significant text content. |'
  prefs: []
  type: TYPE_TB
- en: '| **Text** **Field (single-line)** | These are basic single-link input fields
    that allow simple text inputs of fewer than 255 characters. |'
  prefs: []
  type: TYPE_TB
- en: '| **URL Field** | These are input fields that validate a valid URL. |'
  prefs: []
  type: TYPE_TB
- en: '| **User Picker (****single user)** | These choose a user from the Jira user
    base through either a pop-up user picker window or auto completion. |'
  prefs: []
  type: TYPE_TB
- en: Table 5.2 – Standard custom field types
  prefs: []
  type: TYPE_NORMAL
- en: Advanced fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These fields provide specialized functions. For example, the **Version Picker**
    field lets you select a version from the current project. If you have any custom
    fields from third-party add-ons (such as the ones listed later in this section),
    they will also be listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Custom** **field type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Group Picker (****multiple group)** | This chooses one or more user groups
    using a pop-up picker window. |'
  prefs: []
  type: TYPE_TB
- en: '| **Group Picker (****single group)** | This chooses a user group using a pop-up
    picker window. |'
  prefs: []
  type: TYPE_TB
- en: '| **Project Picker (****single project)** | This selects lists displaying the
    projects that are viewable to the user in the system. |'
  prefs: []
  type: TYPE_TB
- en: '| **Text Field (****read only)** | This is a read-only text field that does
    not allow users to set their data. It’s only possible to set the data programmatically.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **User Picker (****multiple users)** | This chooses one or more users from
    the user base through a pop-up picker window. |'
  prefs: []
  type: TYPE_TB
- en: '| **Version Picker (****multiple versions)** | This chooses one or more versions
    from the available versions in the current project. |'
  prefs: []
  type: TYPE_TB
- en: '| **Version Picker (****single version)** | This chooses a single version from
    the available versions in the project. |'
  prefs: []
  type: TYPE_TB
- en: Table 5.3 – Advanced custom field types
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Jira provides you with a comprehensive list of custom field
    types. In addition, there are many custom field types developed by third-party
    vendors (available as apps that you can add to your Jira to enhance its functionality).
    These custom fields provide many specialized functionalities, such as automatically
    calculating values and retrieving data from databases directly or connecting to
    an external system. Once you install the plugin, the process of adding custom
    fields from other vendors is mostly the same as adding custom fields shipped with
    Jira.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list shows some examples of apps that provide additional useful
    custom fields. You can find them on the Atlassian Marketplace at [https://marketplace.atlassian.com](https://marketplace.atlassian.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enhancer Plugin for Jira**: This includes several custom fields that will
    automatically display dates when key events occur for an issue; for example, when
    the issue was last closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toolkit Plugin for Jira**: This provides several useful custom fields, such
    as showing statistics on users that participate in a given issue and the date
    when the issue was last commented on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elements Connect - external data fields**: This provides a suite of custom
    fields that let you connect to databases, remote files, and web services to retrieve
    data and display it in Jira.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Electronic Signature for Jira**: This lets users electronically sign issues
    in Jira as they work on them, for example, approving an issue to be closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ScriptRunner for Jira**: This app allows you to create your own custom fields
    and define their functionalities with scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover more on third-party apps in [*Chapter 12*](B18644_12.xhtml#_idTextAnchor346),
    *Jira and Third Party Apps*. So, now we have looked at custom fields, it is time
    to introduce searchers next.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding field searchers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any information system, capturing data is only half of the equation. Users
    will need to be able to retrieve the data at a later stage, usually through searching,
    and Jira is no different. While fields in Jira are responsible for capturing and
    displaying data, it is their corresponding searchers that provide the search functionality.
  prefs: []
  type: TYPE_NORMAL
- en: A custom field searcher determines how the data stored by the field will be
    indexed, and this will have an impact on how you can search its data. For example,
    a text custom field will index its data as raw text so you can run a fuzzy search
    such as the text starting with a particular character. A select list custom field,
    on the other hand, will index its data differently, so you can run searches against
    a particular option value or a list of option values. If a field does not have
    a searcher applied, then its data will not be indexed, and you will not be able
    to search its data.
  prefs: []
  type: TYPE_NORMAL
- en: All fields that come with Jira have searchers associated with them by default,
    so you will be able to search issues according to their summary or assignee, without
    any further configuration. Some custom fields from third-party add-ons may have
    more than one searcher available. You can change the default searcher by editing
    the custom field.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the Jira UI, a searcher is referred to as a *search template*.
  prefs: []
  type: TYPE_NORMAL
- en: Custom field context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: System fields, such as **Summary** and **Issue Type**, are global across Jira.
    What this means is that these fields are available to all issues and projects.
    Custom fields, on the other hand, can be applied to specific projects and issue
    types, also known as **context**.
  prefs: []
  type: TYPE_NORMAL
- en: A custom field context is made up of a combination of projects and issue types.
    When you are working with an issue, Jira will check the project and issue type
    of the current issue to determine whether there is a specific context that matches
    the combination. If one is found, Jira will display the custom field with any
    specific settings, such as selection options. However, if no context is found,
    the custom field will not be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: There are two main reasons to use custom field contexts, customization and performance.
    Let’s first look at how context can help customize a custom field.
  prefs: []
  type: TYPE_NORMAL
- en: Custom field types, such as select lists and radio buttons, have options for
    end users to choose from. You can customize the list of options for different
    projects and issue types, or contexts. This allows you to reuse the same custom
    field for multiple projects, thus reducing duplication.
  prefs: []
  type: TYPE_NORMAL
- en: The second benefit of using custom field context is performance. If you restrict
    your custom fields to specific project and issue types, it means when Jira is
    displaying an issue, it will only need to display custom fields that have contexts
    for the issue. The fewer custom fields Jira needs to display, the faster the response
    time will be.
  prefs: []
  type: TYPE_NORMAL
- en: In Jira, if no context can be found that matches the project and issue type
    combination, a custom field does not exist for the issue. We will look at how
    to set custom field contexts in the *Adding custom field contexts* section later.
    What you need to remember now is that when adding a custom field, you need to
    make sure that it has the correct context setting.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have briefly covered custom field context, let’s take a look at
    how you can create and manage custom fields.
  prefs: []
  type: TYPE_NORMAL
- en: Managing custom fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom fields are used globally across Jira, so you will need to have the Jira
    Administrator global permission to carry out management operations such as creation
    and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira maintains all the custom fields in a centralized location for easy management.
    Perform the following steps to access the **M****anage custom** **field** page:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in as a Jira administrator user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Issues** tab and then the **Custom** **fields** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Manage custom fields'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.1_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Manage custom fields
  prefs: []
  type: TYPE_NORMAL
- en: On the **Custom fields** page, all the existing custom fields will be listed.
    From here, you can see the names of all custom fields, their type, the context
    they belong to, and the screens they are displayed on. Note that some custom fields,
    such as **Development** and **Epic Colour**, as shown in the preceding screenshot,
    come with Jira itself, and will have the **LOCKED** label next to their names.
    These fields serve special purposes in Jira, so their configurations cannot be
    changed. User-added custom fields, such as **Approvers**, do not have this restriction
    and can be updated at any time. Let’s start by adding a new custom field.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a custom field
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a new custom field is a multistep process, and Jira provides a wizard
    to help you through it. There are two mandatory steps and an optional step when
    adding a new custom field. You need to first select the type of custom field.
    It is very important to choose the correct field type as this cannot be changed
    later. When you choose the field type, you need to consider how the field will
    be used, the type of data you want it to store, and how you would search the data.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have selected the custom field type, you need to give it a name, followed
    by options if you are adding a **Select List** custom field type. The final, optional,
    step is to decide which screens to add the field to.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will walk you through the process:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Custom** **fields** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add custom field** button. This will bring you to *step 1* of
    the process, where you can select the custom field type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search and select the custom field type you wish to add and click on **Next**.
    This will bring you to *step 2* of the process, where you can specify the custom
    field’s name and options. Note that once a field type has been selected, it cannot
    be changed after the field is created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Add custom field step 1'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.2_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Add custom field step 1
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you do not see the field type you are looking for, select the **All** option
    from the left-hand side and then search again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter values for the **Name** and **Description** fields. If you are creating
    a selection-based custom field, such as a select list, you will also need to add
    its select options (you can update this list later):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Add custom field step 2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.3_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Add custom field step 2
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Even though you can have multiple custom fields with the same name, this is
    usually not a good practice as it can lead to confusion later and make management
    difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Select the context for the new custom field. You should restrict the context
    to the specific issue types and projects the custom field will be used for. You
    can change this context after the custom field is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Add custom field step 3'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.4_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Add custom field step 3
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Create** button. This will bring you to the final step of the
    process, where you can specify which screen you would like to add the field to.
    This step is optional, as the custom field has already been added in Jira. You
    do not have to add the field onto a screen. We will discuss fields and screens
    in [*Chapter 6*](B18644_06.xhtml#_idTextAnchor154), *Screen Management*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the screens and click on **Update**. The following screenshot shows
    that the newly created field has been added to two screens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Add custom field step 4'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.5_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Add custom field step 4
  prefs: []
  type: TYPE_NORMAL
- en: Once a custom field has been created, you will see it on the selected screen
    when you are creating, editing, or viewing issues.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start adding new custom fields, you should always first see if there
    are existing custom fields that have served a similar purpose that you can reuse.
    For example, if you want to add a select list of departments, there could already
    be a **Department** custom field, and all you need to do is to add a new field
    context so it will have a different list of department options for your project.
    So, it is always a good practice to keep reusability in mind when adding a new
    custom field. Always think about how you could reuse existing fields and how a
    new field could be reused in the future. This will help reduce the number of custom
    fields and keep your Jira more manageable.
  prefs: []
  type: TYPE_NORMAL
- en: Editing/deleting a custom field
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once a custom field has been created, you can edit its details at any time.
    You may already notice that there is a **Configure** option and an **Edit** option
    for each custom field. It may be confusing in the beginning to differentiate between
    the two. **Configure** specifies options related to the custom field context,
    which we will discuss in the following sections. **Edit** specifies options that
    are global across Jira for the custom field; these include its name, description,
    and search templates:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Custom** **fields** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Edit** option by clicking on the cog icon for the custom field
    you wish to edit from the list of custom fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the custom field’s details, such as its name or search template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Update** button to apply the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When making changes to the search templates for your custom fields, it is important
    to note that, while the change will take effect immediately, you need to perform
    a system re-index for Jira to return the correct search results. This is because,
    for each search template, the underlying search data structure may be different,
    and Jira will need to update its search index for the newly applied search template.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you have a custom field that did not have a searcher and you
    have just applied a searcher to it, no results will be returned until you re-index
    Jira. When you make changes to the search template, Jira will alert you with a
    message that a re-index will be required, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Change searcher'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.6_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Change searcher
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira will notify you that you will need to perform a re-index whenever you
    have added or modified a custom field, installed a third-party app that contains
    custom field modules, or made other configuration changes that may impact existing
    custom fields, as shown here. Since re-indexing can be a costly process that can
    take a long time to complete for a large Jira instance, you are not required to
    re-index every time Jira prompts you to do so. Generally, you should perform a
    re-index in the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: You have changed a custom field’s search template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have updated a third-party app that has made changes to a custom field that
    you are using
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have made configuration changes that impact a custom field, such as its
    context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not performing a timely re-index could lead to incorrect search results being
    returned and other problems.
  prefs: []
  type: TYPE_NORMAL
- en: To perform a re-index, you can either click on the **perform a re-index** link
    from the prompt or go to **Jira administration console** | **System** | **Indexing**.
    When performing a re-index, you can choose to either run a background re-index
    or a full (foreground) re-index. A background re-index is slower, but end users
    can continue to use Jira while the re-index process is taking place. A full re-index
    is faster, but Jira will be unavailable until the process is completed. In most
    cases, a background re-index is preferred, but in cases where the search index
    becomes corrupted, you will need to perform a full re-index. In these cases, you
    should plan for an outage as users will not be able to use Jira during re-indexing.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You should select the background re-index option to avoid any downtime.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss searching and indexing in more detail in [*Chapter 10*](B18644_10.xhtml#_idTextAnchor292),
    *Searching, Reporting,* *and Analysis*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also delete existing custom fields, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Custom** **fields** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Delete** option by clicking on the tools icon for the custom field
    you wish to delete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Delete** button to delete the custom field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once deleted, you cannot get the custom field back, and you will not be able
    to retrieve and search the data held by that field. If you try to create another
    custom field of the same type and name, it will not inherit the data from the
    previous custom field, as Jira assigns unique identifiers to each of them. It
    is highly recommended to back up your Jira project before you delete the field
    unless you are absolutely certain you do not need it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a custom field
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have seen how to create and manage custom fields, we can start looking
    at more advanced configuration options. Different custom field types will have
    different configuration options available to them. For example, while all custom
    fields will have the option to specify one or more contexts, selection list-based
    custom fields will also allow you to specify a list of options. We will look at
    each of the configuration options in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure a custom field, you need to access the **Configure Custom Field**
    page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Custom** **fields** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Configure** option by clicking on the cog icon for the custom field
    you wish to configure from the list of custom fields. This will bring you to the
    **Configure Custom** **Field** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows that the **Department** custom field has two
    available contexts: the default configuration scheme, which is applied to **Demonstration
    Project**, and the **PMO** configuration scheme, which is applied only to the
    **Development** and **Product** **Management** projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Configure custom field'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.7_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Configure custom field
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom field contexts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From time to time, you may need your custom fields to have different configurations,
    depending on what project the issue is located in. For example, if we have a select
    list custom field called **Department**, we may want it to have a different set
    of options based on which project the issue is being created in or even a different
    default value.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this level of customization, Jira allows you to create multiple custom
    field contexts for a custom field. As we have seen already, a custom field context
    is a combination of issue types and projects. Therefore, in our preceding example,
    the default and **PMO** contexts have different options for the **Department**
    field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a new custom field context is simple. All you need to do is decide
    the issue type and project combination that will define the context:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Configure Custom Field** page for the custom field you wish
    to create a new context for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add new context** link. This will take you to the **Add configuration
    scheme** context page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name in the new custom field context in the **Configuration scheme**
    **label** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the issue types for the new context under the **Choose applicable issue**
    **types** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select projects for the new context under the **Choose applicable** **context**
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to create the new custom field context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each project can only belong to one custom field context per custom field (global
    context is not counted for this). Once you select a project for context, it will
    not be available the next time you create a new context. For example, if you create
    a new context for Project A, it will not be listed as an option when you create
    another context for the same custom field. This is to prevent you from accidentally
    creating two contexts for the same project.
  prefs: []
  type: TYPE_NORMAL
- en: After a new custom field context has been created, it will not inherit any configuration
    values as the default context, such as the **Default value** and **Options** from
    other contexts. You will need to repopulate and maintain the configuration options
    for each newly created context.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting custom field context can also help reduce search index size and
    help improve performance, especially with data center edition deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring select options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For custom field types, such as select lists, checkboxes, radio buttons, and
    their multi-versions, you need to configure their select options before they can
    become useful to users. Select options are configured and set on a per-custom-field-context
    basis. This provides the custom field with the flexibility of having different
    select options for different projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure select options, you need to first select the custom field and
    then the context that the options will be applied to, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Custom** **fields** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Configure** option for the custom field you wish to configure
    the select options for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit Options** link for the custom field context you wish to
    apply the options to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter option values in the **Add New Custom Field Option** section, and click
    on the **Add** button to add the value. The options will be added in the order
    in which they are entered into the system. You can manually move option values
    up and down or click on **Sort options alphabetically** to let Jira perform the
    sorting for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Done** button once you finish configuring the select options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Configure field options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.8_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Configure field options
  prefs: []
  type: TYPE_NORMAL
- en: You can delete and disable existing options. There is an important difference
    between the two operations. When you disable an option, Jira will simply not display
    that option for the field, but issues with that option will still have its value,
    so when you re-enable the option, the values will be present. However, if you
    delete the option, it is deleted from Jira completely, including issues that have
    that option as their values for the field. For this reason, it is usually better
    to first disable an option and only delete it once you are sure it is no longer
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: Setting default values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For most custom fields, you can set a default value so your users will not need
    to fill them in unless they have special needs. For text-based custom fields,
    the default values will be displayed as text by default, when the users create
    or edit an issue. For selection-based custom fields, the default values will be
    pre-selected options for users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like setting selection options, default options are also set on a per-custom-field-context
    basis:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Custom** **fields** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Configure** option for the custom field for which you wish to
    configure select options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit Default Value** link for the custom field context to which
    you want to apply the default values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the default value for the custom field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Set Default** button to set the default value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting the default value will be different for different custom field types.
    For text-based custom fields, you will be able to type any text string. For select-based
    custom fields, you will be able to select from the options you add. For picker-based
    custom fields, such as **User Picker**, you will be able to select a user directly
    from the user base.
  prefs: []
  type: TYPE_NORMAL
- en: When setting a default value for a field, there are some implications you need
    to be aware of. If a field has a default value, all issues created will have that
    value for the field unless explicitly overwritten by users. This could defeat
    the purpose if the same field is also set as mandatory, since it will always have
    a value. This can also cause problems when you want to run searches such as all
    issues that do not have a value for the field, so it is very important to consider
    whether the default value you are setting is meaningful for your use case.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing custom fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen how to create and manage custom fields, let’s revisit
    custom field context again. As we have seen, when you create a new custom field,
    Jira prompts you to set a context for it. However, this is a relatively new feature,
    and in older Jira versions, custom fields are created with a global context by
    default.
  prefs: []
  type: TYPE_NORMAL
- en: As you add more and more custom fields to Jira, it is a good practice to check
    and optimize your custom field configurations, especially if you have been running
    your Jira instance since an older version, as most of your custom fields will
    likely be using the global context.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help you with that, Jira comes with a custom field optimizer. To run the
    optimizer, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Custom** **fields** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Optimize** link at the top right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Scan** button to run a new scan of your custom fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the scan has been completed, Jira will provide a report on different ways
    you can better optimize your custom field configurations to help improve your
    overall Jira performance.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Optimize custom fields'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.9_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Optimize custom fields
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the preceding screenshot, Jira has identified 10 custom fields
    that are using the global context, which would have an impact on Jira’s performance.
    By clicking on the **Manage these custom fields** link, Jira will list the 10
    custom fields identified, and you can apply a context to each of the fields.
  prefs: []
  type: TYPE_NORMAL
- en: Field configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you have already seen, fields are used to capture and display data in Jira.
    Fields can also have behaviors, which are defined by field configuration. For
    each field in Jira, you can configure the behaviors listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Field description**: This is the description text that appears under the
    field when an issue is edited. With field configuration, you can have different
    description text for different projects and issue types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visibility**: This determines whether a field should be visible or hidden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Required**: This specifies whether a field will be optional or required to
    have a value when an issue is being created/updated. When applied to select, checkbox,
    or radio button custom fields, this will remove the **None** option from the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rendering**: This specifies how the content is to be displayed and what the
    field looks like when you are editing it. For example, a text-based field can
    have a default text editor, which will be a simple text-based editor, and a rich-text
    editor, which allows you to apply different styles to your text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A field configuration provides you with control over each individual field in
    your Jira, including both system and custom fields. Since it is usually a good
    practice to reuse the same set of fields instead of creating new ones for every
    project, Jira allows you to create multiple field configurations, by means of
    which we can specify different configurations on the same set of fields and apply
    them to different projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the field configuration management page through the Jira administration
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Issues** tab and then the **Field configurations** option. This
    will bring you to the **View Field** **Configurations** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be looking at how to manage and apply multiple field configurations
    in later sections of this chapter. But first, let’s take a close look at how to
    create new field configurations and what we can do with them.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a field configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating new field configurations is simple. All you need to do is specify
    the name and a short description for the new configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Field** **Configurations** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Field** **Configuration** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name and description for the new field configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to create a field configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is always a good practice to adopt a naming convention for your configurations.
    As we will see later, in the *Field configuration scheme* section, field configurations
    are associated with issue types, so you can name your field configurations based
    on the project and/or issue type they will be applied to, for example, `Demonstration
    Project Bugs Field Configuration 1.0`. We also added a version number, so when
    you need to make changes to the field configuration, you can increment the version
    number, leaving a history of changes you can revert to.
  prefs: []
  type: TYPE_NORMAL
- en: After a field configuration is created, it is not used until we associate it
    with a field configuration scheme. We will look at how to do this when we cover
    field configuration schemes. For now, let’s look at how to manage field behaviors
    in the field configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Managing field configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have seen how to create new field configurations, it is time for
    us to take a closer look at the different configuration options. Firstly, just
    a quick recap – each field configuration includes all the fields available in
    Jira, and its behavior is defined according to each field configuration. We will
    then associate it with a field configuration scheme, which will determine when
    a field configuration will become active for a given issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to access field configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Field** **Configurations** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Configure** link for the field configuration you wish to configure.
    This will take you to the **View Field** **Configuration** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On this page, all the fields and their current configuration options that are
    currently set for the selected field configuration are listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Manage field configurations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.10_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – Manage field configurations
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are several options you can configure for each field,
    and depending on the field type, the options may vary. While we will be looking
    at each of the options, it is important to note that some options will override
    each other. This is Jira trying to protect you from accidentally creating a configuration
    combination that will break your system. For example, if a field is set to both
    **Hidden** and **Required**, your users will not be able to create or edit issues,
    so Jira will not allow you to set a field to **REQUIRED** if you have already
    set it to **Hidden**. A common mistake is when you make a field **Required** but
    do not have it on the issue’s **Create** or **Edit** screens. When this happens,
    Jira will still require the user to enter a value for the field even though the
    field is not on a screen. So, it is important to double-check and make sure all
    your required fields are placed on the appropriate screens.
  prefs: []
  type: TYPE_NORMAL
- en: Field descriptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While having a meaningful name for your fields will help your users understand
    what the fields are for, providing a short description will provide more context
    and meaning. Field descriptions are displayed under the fields when you create
    or edit an issue. To add a description for a field, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Field Configuration** page for the field configuration
    you wish to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit** link for the field for which you wish to set a description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a description for the field and click on **Update**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For custom fields, the description you enter here will override the description
    you provided when you first created them.
  prefs: []
  type: TYPE_NORMAL
- en: Required fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can set certain fields as **Required** or **Mandatory** for certain issues.
    This is a very useful feature as it ensures that critical information can be captured
    when users create issues. For example, for our support system, it makes sense
    to have our users enter the system that is misbehaving into a field and make that
    field compulsory to help our support engineers.
  prefs: []
  type: TYPE_NORMAL
- en: You have already seen required fields in action. System fields, such as **Summary**
    and **Issue Type**, are compulsory in Jira (and you cannot change that). When
    you do not specify a value for a required field, Jira will display an error message
    underneath the field, telling you that the value is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you add a new field into Jira, such as a custom field, it is optional
    by default, meaning users do not need to specify a value. You can then change
    the setting to make those fields required:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Field Configuration** page for the field configuration
    you wish to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **REQUIRED**/**Optional** link for the field you wish to set as
    the mandatory requirement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.11 –  Required/optional field'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.11_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Required/optional field
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that once a field is set to **REQUIRED**, there will be a small
    **Required Text** label in red next to the field name. When you create or edit
    an issue, the field will have a red (*) character next to its name. This is Jira’s
    way of indicating that a field is mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: Field visibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most fields in Jira can be hidden from a user’s view. When a field is set to
    **Hidden**, users will not see the field on any screens, including issues such
    as create, update, and view. Perform the following steps in order to show or hide
    a field:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Field Configuration** page for the field configuration
    you wish to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Show**/**Hide** link for the field you wish to show or hide,
    respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once a field has been set to **Hidden**, it will not appear onscreen and you
    will not be able to search in it. However, you can still use tools such as scripts
    to set values for hidden fields. For this reason, hidden fields are used to store
    data that is used by automated processes.
  prefs: []
  type: TYPE_NORMAL
- en: Not all fields can be hidden. System fields, such as **Summary** and **Issue
    Type**, cannot be hidden. When you set a field to **Hidden**, you will notice
    that you can no longer set the field as **Required**. As stated earlier, setting
    a field to **Required** will make Jira enforce a value to be entered into the
    field when you create or edit an issue. If the field is hidden, there will be
    no way for you to set a value and you will be stuck. This is why Jira will automatically
    disable the **Required** option, especially if you have already hidden a field.
    On the other hand, if you marked a field as **Required**, when you hide the same
    field, you would notice that the field is no longer required. The rule of thumb
    is that field visibility will override required fields.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A field cannot be both hidden and required.
  prefs: []
  type: TYPE_NORMAL
- en: Field rendering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Renderers control how a field will be displayed when it is viewed or edited.
    Some system and custom fields have more than one renderer, and for these fields,
    you can choose which one to use. For example, for text-based fields, such as **Description**,
    you can choose to use the simple text renderer or the more sophisticated wiki-style
    renderer, which will allow you to use wiki markup to add more styling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira ships with four different renderers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default text renderer**: This is the default renderer for text-based fields.
    Contents are rendered as plain text. If the text resolves a Jira issue key, the
    renderer will automatically turn that into an HTML link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wiki-style renderer**: This is an enhanced renderer for text-based fields.
    It allows you to use wiki markup to decorate your text content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Select list renderer**: This is the default renderer for selection-based
    fields. It is rendered as a standard HTML select list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autocomplete renderer**: This is an enhanced renderer for selection-based
    fields, and it provides an autocomplete feature to assist users as they start
    typing into the fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table lists all the fields that can have special renderers configured
    and their available options:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Available renderers** |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | This has a wiki-style renderer and default text renderer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Comment** | This has a wiki-style renderer and default text renderer. |'
  prefs: []
  type: TYPE_TB
- en: '| **Environment** | This has a wiki-style renderer and default text renderer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Component** | This has an autocomplete renderer and a select list renderer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Affects version** | This has an autocomplete renderer and a select list
    renderer. |'
  prefs: []
  type: TYPE_TB
- en: '| **Fix versions** | This has an autocomplete renderer and a select list renderer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Custom field of type Free Text Field (****unlimited text)** | This has
    a wiki-style renderer and default text renderer. |'
  prefs: []
  type: TYPE_TB
- en: '| **Custom field of type** **Text Field** | This has a wiki-style renderer
    and default text renderer. |'
  prefs: []
  type: TYPE_TB
- en: '| **Custom field of type** **Multi Select** | This has an autocomplete renderer
    and a select list renderer. |'
  prefs: []
  type: TYPE_TB
- en: '| **Custom field of type** **Version Picker** | This has an autocomplete renderer
    and a select list renderer. |'
  prefs: []
  type: TYPE_TB
- en: Table 5.4 – Field renderers
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to set the renderer for a field:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse the **View Field Configuration** page for the field configuration you
    wish to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Renderer** link for the field you wish to set a renderer for
    (if it is available). You will be taken to the **Edit Field** **Renderer** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the renderer from the available drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Update** button to set the renderer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are other custom renderers developed by third-party vendors. Just like
    custom fields, these are packaged as add-ons that you can install in Jira. Once
    installed, these custom renderers will be available for the selection of the appropriate
    field types.
  prefs: []
  type: TYPE_NORMAL
- en: A good example is the `JEditor` add-on, which provides an advanced rich-text
    editor for all text-based fields including **Description**.
  prefs: []
  type: TYPE_NORMAL
- en: Field configuration scheme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With multiple field configurations, Jira determines when to apply each of the
    configurations through the field configuration scheme. A **field configuration
    scheme** maps field configurations to issue types. This scheme can then be associated
    with one or more projects.
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to group multiple field configurations mapped to issue types
    and apply them to a project in one go. The project will then be able to determine
    which field configuration to apply, based on the nature of the issue. For example,
    for a given project, you can have different field configurations for bugs and
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: This grouping of configurations into schemes also provides you with the option
    to reuse existing configurations without duplicating work, as each scheme can
    be reused and associated with multiple projects.
  prefs: []
  type: TYPE_NORMAL
- en: Managing field configuration schemes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can manage all your field configuration schemes from the **View Field Configuration**
    **Schemes** page:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Issues** tab and then the **Field Configuration Schemes** option.
    This will bring you to the **View Field Configuration** **Schemes** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Manage field configuration schemes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.12_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – Manage field configuration schemes
  prefs: []
  type: TYPE_NORMAL
- en: This is the main page where you can add, configure, edit, delete, and copy field
    configuration schemes. We will start by looking at how to add a new field configuration
    scheme next.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a field configuration scheme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step in grouping your field configurations is to create a new field
    configuration scheme. By default, Jira does not come with any field configuration
    schemes. All the projects will use the system default field configuration. The
    new field configuration scheme will hold all the mappings between our field configurations
    and issue types.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new field configuration scheme, all you need to do is specify the
    name and an optional description for the scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Field Configuration** **Schemes** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Field Configuration** **Scheme** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name and description for the new field configuration scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to create the scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since field configuration schemes are applied to projects, it is good practice
    to name them according to the projects. For example, the scheme for the sales
    project can be named `Sales Field Configuration Scheme`. You can add a version
    number after the name to help you maintain changes.
  prefs: []
  type: TYPE_NORMAL
- en: Once the new field configuration scheme is created, it will be displayed in
    the table that lists all the existing schemes. At this time, the scheme is not
    yet useful as it does not contain any configuration mappings and is associated
    with a project.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a field configuration scheme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have a new field configuration scheme set up, you will be able to
    add mapping between field configurations and issue types. For each field configuration
    scheme, one issue type can be mapped to only one field configuration, while each
    field configuration can be mapped to multiple issue types. The following screenshot
    shows that the issue types **Sub-task**, **Epic**, and **Task** all have specific
    field configurations applied and that **Default Field Configuration** will be
    applied to all other issue types that are not explicitly mapped, such as **Bug**
    or **Story**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Configure field configuration scheme'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.13_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – Configure field configuration scheme
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: One issue type can only be mapped to one field configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a field configuration scheme is first created, Jira creates a default
    mapping, which maps all unmapped issue types to the default field configuration.
    You cannot delete this default mapping as it acts as a catch-all condition for
    mappings that you do not specify in your scheme. What you need to do is add more
    specific mappings that will take precedence over this default mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Field Configuration** **Schemes** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Configure** link for the field configuration scheme you wish
    to configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Associate an Issue Type with a Field** **Configuration** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the issue type and field configuration from the dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to add the mapping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can repeat these steps to add more mapping for other issue types. All unmapped
    issue types will use the **Default** mapping.
  prefs: []
  type: TYPE_NORMAL
- en: Associating a field configuration scheme with a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After you create a new field configuration scheme and establish the mappings,
    the final step is to associate the scheme with a project for the configurations
    to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that, once you associate the field configuration scheme
    with a project, you cannot delete it until you remove all the associations so
    that the scheme becomes inactive again.
  prefs: []
  type: TYPE_NORMAL
- en: 'To associate a field configuration scheme with a project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the target project’s administration page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Fields** option in the left panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Use a different scheme** option from the **Actions** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a new field configuration scheme and click on the **Associate** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, the project is using **PMO Field Configuration
    Scheme**, which has four configurations. Three are mapped to specific issue types,
    and **Default Field Configuration** is applied to any issue types without an explicit
    mapping.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Associate field configuration scheme'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.14_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – Associate field configuration scheme
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can click on each of the field configurations to view their details.
  prefs: []
  type: TYPE_NORMAL
- en: Screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order for a field to be displayed when you view, create, or edit an issue,
    it needs to be placed on a screen. You have already seen this when creating new
    custom fields. One of the steps in the creation process is to select what screens
    to add the custom field to. Screens will be discussed further in [*Chapter 6*](B18644_06.xhtml#_idTextAnchor154),
    *Screen Management*, so we will not spend too much time understanding them right
    now.
  prefs: []
  type: TYPE_NORMAL
- en: What you need to know for now is that after a field has been added to a screen,
    you can add it to additional screens or remove it completely. If you are working
    with just one field, you can configure it here from the field configurations.
    If you have multiple fields to update, a better approach will be to work directly
    with screens, as we will see in [*Chapter 6*](B18644_06.xhtml#_idTextAnchor154),
    *Screen Management*.
  prefs: []
  type: TYPE_NORMAL
- en: There is a subtle difference between hiding a field in field configuration and
    not placing a field on a screen. While the end result will be similar where, in
    both cases, the field will not show up, if you hide a field, you can still set
    a value for it through the use of default value, workflow post-functions (covered
    in [*Chapter 7*](B18644_07.xhtml#_idTextAnchor187), *Workflow and Business Process*),
    or custom scripts, essentially meaning that the field is there but just hidden.
    However, if the field is not on the screen, you cannot set its value. Another
    difference is that hiding a field will hide it for all screens that have the field
    added, for projects using the field configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have seen how to manage fields in Jira, it is time to expand our
    HR project.
  prefs: []
  type: TYPE_NORMAL
- en: The HR project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we will do this time is add a few new custom fields to help capture some
    additional useful information. We will also create a customized field configuration
    specially designed for our HR team. Lastly, we will tie everything together by
    associating our fields, configurations, and projects through field configuration
    schemes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a custom field
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since you are implementing a project for HR, and we have created two issue types
    in the last chapter, **New Employee** and **Termination**, for the **New Employee**
    issue type, we will add a new custom field called **Direct Manager**, so when
    everything is completed, the manager can be notified that their new team member
    is ready to start. Since the manager is already in the organization, we will be
    using a **User Picker** field, so Jira will be able to automatically look up the
    user for us.
  prefs: []
  type: TYPE_NORMAL
- en: For our **Termination** issue type, we will also add a new custom field called
    **Last Day**, so we know when it will be the last day for the employee. For this
    field, we will use a date picker, so we can keep the date format consistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create these custom fields, execute the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Custom** **fields** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Custom** **Field** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **User Picker** custom field type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the custom field `Direct Manager` and click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all issue types and the HR project as the context for our new custom
    field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **HR: Task Management Create Issue Screen** and **HR: Task Management
    Edit/View Issue Screen** from the list of screens, and click on **Update**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 2 to 5*, but select the `Last Day`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up the field configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have our custom fields ready, the next step is to create a new
    field configuration so that we can specify the behaviors of our custom fields.
    What we will do here is set both new custom fields as **Required**, so when the
    issues are entered in Jira, users will have to enter a value for them. But the
    **Direct Manager** field should only be required when creating a **New Employee**
    issue, and not **Termination**. To do this, we need to create two field configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Field** **Configurations** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Field** **Configuration** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new field configuration `New Employee` `Field Configuration`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to create a new field configuration. Now that we
    have our new field configuration, we can start adding configurations to our new
    custom fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Required** link for the **Direct Manager** custom field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 2 to 5* to create a new field configuration called **Termination
    Field Configuration**, and make the **Last Day** field mandatory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up a field configuration scheme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have our custom fields, and have configured the relevant options, created
    a new field configuration, and set the behavior of our fields. Now it is time
    to add them to a scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **View Field Configuration** **Schemes** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Field Configuration** **Scheme** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new field configuration scheme `HR Field Configuration Scheme`, as
    we will be applying this to our HR project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to create a new field configuration scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the field configuration scheme created, we can associate the field configurations
    with their appropriate issue types, **New Employee** and **Termination**:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Associate an Issue Type with a Field** **Configuration** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the issue type as **New Employee** and the field configuration as **New
    Employee** **Field Configuration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to add the association.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 1 to 3* for the **Termination** issue type and **Termination**
    **Field Configuration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Putting it together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OK, so we have done all the hard work. We created new custom fields, a new
    field configuration, and a new field configuration scheme; the final step is to
    put everything together and see it in action:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the **Project Administration** page for our HR project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Fields** link on the left-hand side and the **Use a different
    scheme** option from the **Actions** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **HR Field Configuration Scheme** and click on the **Associate** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alright, we are all done! You can pat yourself on the back, sit back, and take
    a look at your work in action.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new issue of the **Termination** type in the HR project, and you will
    see your new custom fields at the bottom of the page. As shown in the following
    screenshot, both the **Direct Manager** and **Last Day** fields are mandatory
    and an error message is displayed if we do not provide values for them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Create a Termination issue'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.15_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – Create a Termination issue
  prefs: []
  type: TYPE_NORMAL
- en: We see the **Direct Manager** custom field here because both **New Employee**
    and **Termination** issue types use the same set of screens. We will look at how
    to use separate screens in [*Chapter 6*](B18644_06.xhtml#_idTextAnchor154). We
    can, however, also use field configuration to hide the field for the appropriate
    issue type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and create a new **Termination** issue by filling in the fields. On
    the **View Issue** page, you will see your new custom fields displayed, along
    with the values you provide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 5.16 – View termination issue'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.16_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 5.16 – View termination issue
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, by adding our own custom fields in Jira, we are able to customize
    our intake form (create issue screen) to capture additional data than the out-of-the-box
    system fields, and we can also make certain fields required to ensure users will
    always fill them in.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at fields in Jira. We also looked at how Jira is
    able to extend its ability to capture user data through custom fields, and at
    applying searchers to these fields to make the data they capture searchable. We
    explored how we can specify different behavior for fields under different contexts
    through the use of field configurations and schemes. We also briefly introduced
    screens, which we will delve deeper into in the next chapter. Lastly, we put all
    these together by adding new custom fields to our HR project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will expand on what we learned about fields by formally
    introducing you to screens, and will show you how combining fields and screens
    provides users with the most natural and logical forms to assist them with creating
    and logging issues.
  prefs: []
  type: TYPE_NORMAL
