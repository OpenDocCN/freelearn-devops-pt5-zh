- en: Exploring Operations Automation Strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we introduced the Design for Operations objective by
    covering Application and platform monitoring and alerting strategies.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers how to design an operations automation strategy using Azure
    Automation, Chef, Puppet, PowerShell, Desired State Configuration (DSC), Event
    Grid, Azure Logic Apps, and how to define an autoscaling strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing an operations automation strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing an autoscaling strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing an Operations Automation Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automating steps in Azure is a great solution to ensure consistency in your
    deployments and save time. It reduces errors when applications need to be deployed
    between different environments in a Development, Testing, Acceptance, and Production
    (DTAP) architecture. It also saves a lot of time when resources need to be deployed
    repeatedly, such as multiple development VMs for a team of developers.
  prefs: []
  type: TYPE_NORMAL
- en: Azure offers different solutions and methods in order to design a successful
    automation strategy, which are described in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Azure PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure PowerShell can be used to create Azure resources, manage and configure
    your resources, and for automation as well.
  prefs: []
  type: TYPE_NORMAL
- en: Azure PowerShell is used for several examples throughout this book to automate
    different tasks, such as creating virtual machines and creating network interfaces.
    It can be used from your local machine, as well as from Azure Cloud Shell. You
    can use PowerShell for almost everything in Azure that can be done from the Azure
    Portal and even for some Azure resources, PowerShell offers additional capabilities
    that can't even be configured from the Azure Portal.
  prefs: []
  type: TYPE_NORMAL
- en: Desired State Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DSC is the process of forcing a configuration on a system. It uses configuration
    files that consist of PowerShell scripts. These scripts are responsible for making
    the required configurations to the system and for ensuring that these systems
    stay in sync. So for example, when you have created a DSC file to configure IIS
    on a Windows Server and this is removed by an administrator, the DSC file will
    reinstall and configure IIS again.
  prefs: []
  type: TYPE_NORMAL
- en: 'DSC uses three key features to configure the machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configurations**: A set of PowerShell scripts that configure the resources.
    These scripts also ensure that the systems remain configured in the desired state.
    It uses **Nodes** to define the resources that are being configured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resources**: These are the different building blocks that need to be configured
    on the machine. For example, this can be a WindowsFeature Resource or a Environment
    Resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local Configuration Manager (LCM)**: This is the engine that deploys the
    scripts to the machines. LCM regularly polls the different machines to ensure
    that the desired state of the machines is maintained. If systems are out of sync,
    LCM runs the scripts to reinstall and configure the systems according to the resources
    in the scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See the following example of a DSC  file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Azure Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Automation is a service in Azure that offers complete control over the
    deployment and management operations in on-premises and in Azure environments.
    It offers support for Windows and Linux machines, and it offers a community gallery
    with predefined configurations and automation runbooks, which can be used as a
    starting point.
  prefs: []
  type: TYPE_NORMAL
- en: 'To manage these types of workloads, Azure Automation offers the following features
    and capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Process Automation**: You can use Process Automation in order to automate
    management tasks and repeatable configuration tasks in Azure and your on-premises
    environments. Various Azure services and resources can be integrated when automating
    processes. It uses **Automation Runbooks**, which automate the different steps.
    Azure offers a graphical editor in order to create runbooks from the Azure Portal,
    or you can create them from PowerShell. You can create different types of runbooks,
    such as Graphical, Graphical PowerShell Workflow, PowerShell, PowerShell Workflow,
    and Python Runbooks. Those workflows can then be exported from the automation
    account and imported in other automation accounts. However, automation runbooks
    in Azure cannot access the on-premises infrastructure and other cloud environments
    by default. You should install the Hybrid Runbook Worker feature of Azure Automation
    to run the runbooks on these environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration Management**: For configuration management, Azure Automation
    offers a DSC server for PowerShell DSC scripts. This server can be used to write,
    manage, and compile PowerShell DSC. It provides a  Desired State Configuration
    Pull Service to send configurations to nodes automatically. You can get insights
    about installed applications and other configuration items as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update Management**: This provides information and visibility about update
    compliance across your Azure, on-premises and other cloud environments. It offers
    capabilities for orchestrating and scheduling update deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared Capabilities**: Azure Automation offers various shared resources that
    can be used for automating and configuring  your environments, such as Role-based
    Access Control. You can store credentials and certificates for security, create
    connection strings, schedules, source-control integration, and PowerShell modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about Windows PowerShell Desired State Configuration, you
    can refer to [https://docs.microsoft.com/en-us/powershell/dsc/overview](https://docs.microsoft.com/en-us/powershell/dsc/overview).
    For more information about the Desired State Configuration Pull Service, you can
    refer to [https://docs.microsoft.com/en-us/powershell/dsc/pullserver](https://docs.microsoft.com/en-us/powershell/dsc/pullserver).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure Automation Runbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we are going to create an Azure Runbook with DSC Configurations.
    We should first create an Automation Account before the Azure Automation Runbook
    can be created.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an Azure Automation Account, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure Portal by opening [https://portal.azure.com/](https://portal.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `Automation` in the search bar and create a new account. Add the following
    properties and click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bcf7ca4e-a8e4-4dd7-b9b2-e6809f5a5a42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create Azure Automation Account
  prefs: []
  type: TYPE_NORMAL
- en: When created, navigate to the Automation Account. From there you can open the
    Graphical Editor to create an Automation Runbook. This example uses a preconfigured
    Graphical Runbook, which can be imported. This Runbook can be downloaded from
    the source code provided for this book on the GitHub page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To import the runbook file, select Runbooks from the left menu and Add a runbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a14addf8-7f40-42b6-abcd-58b7742536bf.jpg)'
  prefs: []
  type: TYPE_IMG
- en: New Runbook
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Import, select the Runbook file, and the following properties are automatically
    added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02b0737b-3062-475f-abd6-5ee87da0dd33.png)'
  prefs: []
  type: TYPE_IMG
- en: Import runbook
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create**. **You can now select the newly added runbook to make changes
    to it. Select it and click on Edit in the top menu. This will open the graphical
    editor where you can see the different steps in the workflow and make changes
    to it. You can select the different steps and configure parameters, configure
    retry behavior, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3009f4c9-93f9-404a-b250-83ca8b6bb8b5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Graphical Runbook Editor
  prefs: []
  type: TYPE_NORMAL
- en: When you are done changing the settings according to your own environment, you
    can publish and schedule the Runbook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chef
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chef is a third-party solution that offers a DevOps automation platform for
    Linux, Windows, and Mac devices. It can be used for virtual and physical server
    configurations. It requires an agent to be installed on the virtual machines or
    servers, which connects to the Chef server to check whether there are available
    updates and other configurations for the machines. You can use the Chef Automate
    Platform to package and deploy applications as well.
  prefs: []
  type: TYPE_NORMAL
- en: To connect an Azure VM with the Chef Server, a publish settings file needs to
    be downloaded from Azure and imported in the Chef Server and an agent needs to
    be installed on your connected devices to communicate with Chef. You can then
    create Chef Cookbooks on the server, which consists of scripts and instructions
    to manage the devices and automate deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Puppet is a third-party solution as well, and it has similar capabilities as
    Chef. You can enable support for Puppet when you create a virtual machine from
    the Azure Portal automatically. You can add it as an extension when you create
    a new virtual machine. It will install the Puppet Agent, which connects to the
    Puppet Master Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will have to provide the name of the Puppet Master Server, and the VM will
    be integrated when it is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f64033a5-3ae0-411a-aa9d-a966eff0d3f5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Install Puppet Agent
  prefs: []
  type: TYPE_NORMAL
- en: Azure Event Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Event Grid provides support to automate tasks as well. Azure Event Grid
    offers an Azure Automation Subscriber that can act upon different events that
    are sent to Azure Event Grid. So when an Azure resource is created, it can call
    an Automation Runbook to automatically perform a sequence of steps. For instance,
    when a virtual machine is created in Azure, it can call an Automation runbook
    via Event Grid to create a schedule for starting and stopping virtual machines
    at a certain time.
  prefs: []
  type: TYPE_NORMAL
- en: For an complete walkthrough of integrating Azure Automation with Azure Event
    Grid and Microsoft Teams, you can refer to  [https://docs.microsoft.com/en-us/azure/event-grid/ensure-tags-exists-on-new-virtual-machines](https://docs.microsoft.com/en-us/azure/event-grid/ensure-tags-exists-on-new-virtual-machines).
  prefs: []
  type: TYPE_NORMAL
- en: Azure Logic Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Logic Apps offers support to call Automation Runbooks as well. It offers
    **Actions** that can be called from your Logic Apps to create automation jobs,
    collect output or get the status of jobs inside an Logic App. This can be used
    to create automations from within all types of workflows and can be integrated
    with various Azure resources.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce9affbe-93ed-4901-b8ea-c5828dd0f73b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Azure Logic Apps Automation Actions
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Team Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio Teams Services offers a Continuous Integration and Delivery (CI/CD)
    solution for your custom applications. It consist of a collection of DevOps services
    that can be used from Azure, and it can be installed on your on-premises servers
    as well by installing Team Foundation Server (TFS).
  prefs: []
  type: TYPE_NORMAL
- en: 'VSTS offers the following features and capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Version Control**: The starting point of continuous integration, delivery,
    and testing is a version control server. VSTS offers two different forms of version
    control, Git, and Team Foundation Version Control. It offers support for various
    version control repositories such as Subversion, Bitbucket, and GitHub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous Integration**: When CI is configured in VSTS, any code changes
    that are checked in are automatically built and validated. To configure CI, you
    have to create a new build definition, which consists of tasks that build and
    test your source code. It offers support in order to build .NET, Java, Node, Android,
    Xcode, and C++ applications. You can use continuous testing to automatically validate
    the code that is checked in, in VSTS. It offers support for various testing frameworks,
    such as unit tests and Selenium. You can run PowerShell, CLI, and command-line
    scripts in your automation as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous Deployment:** The next step is to create a release definition.
    You can use to deploy your application automatically on one or more environments.
    The release definition also consists of a set of tasks. Both VSTS and TFS supports
    deploying applications to PaaS Services, such as Web Apps and Azure Functions
    for instance. You also deploy your code to virtual machines, containers, on-premises
    and other cloud platforms and publish mobile apps to the store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing an autoscaling strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Autoscaling offers a solution to match performance requirements and meet SLAs
    for Azure resources and Applications. It can add additional resources such as 
    adding VMs and CPUs to VMs and other Azure resources, and when those resources
    are no longer needed, they can be removed to minimize costs. This process is handled
    by Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Autoscaling is one of the key benefits of cloud technologies because you add
    and remove additional resources easily and even automatically without the need
    to manage those resources. Autoscaling can be done in the following two different
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vertical Scaling**: This is also called scaling up and down. You can move
    applications to a different VM size. By changing the VM size, applications become
    unavailable for a short period of time, so this type of scaling is normally not
    executed automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Horizontal Scaling**: This is also called scaling in and out. You scale horizontally, when
    you add additional resources, such as adding or removing containers to Azure Container
    Services for instance. This type of scaling is mostly done automatically because
    it doesn''t require resources to become unavailable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To design an effective autoscaling strategy, you can use the following approaches
    and services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Monitoring and alerting**: Use the monitoring and alerting capabilities that
    are available from the different monitoring solutions in Azure. These solutions
    are covered in more detail in the previous chapter. Next to the monitoring solutions,
    different Azure resources offer autoscaling as well, such as virtual machines,
    Azure Service Fabric, Azure Functions, Azure App Services, and other cloud services.
    These resources can be configured from the setting pages in the Azure Portal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decision Making Logic**: Make use of decision-making logic that helps deciding
    whether a resource needs to be scaled. This can be done dynamically inside Azure
    Logic Apps by calling Automation Runbooks or using predefined schedules at times
    where the system is heavily used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Monitoring Scale**: This is a service integrated in Azure Monitor that
    offers autoscaling for VMs, VM Scale Sets, Azure App Services, and Azure Cloud
    Services. You can use this for scheduling instances, scale-out when a certain
    CPU usage is met and when a certain number of messages are added to a queue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Architectures**: Architect custom applications accordingly, so
    that they can be scaled horizontally. This applies to Azure Service Fabric applications,
    applications that run inside containers, or batch applications. For this, the
    Throttling Pattern and the Competing Consumers Pattern can be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we covered how to design an operations automation strategy
    using the different solutions and tools that Azure provides as well as how to
    design an autoscaling strategy.
  prefs: []
  type: TYPE_NORMAL
- en: With the knowledge gained throughout the, chapters, you should be able to pass
    the 70-535 exam. Don't forget to look at the *Further reading* sections because
    there is a lot of extra information there that could be covered on the exam as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed reading this book as much I enjoyed writing it and good luck
    on your exam!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Answer the following questions to test your knowledge of the information in
    this chapter. You can find the answers in the *Assessments* section at the end
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Your company uses Windows, Linux, and Mac devices. Is Azure Automation the best
    solution for your automation strategy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are designing a standardized deployment solution for your virtual machines.
    You also have a requirement to configure and keep VMs in sync after deployment.
    Should you use Azure PowerShell Desired State Configuration (DSC) for this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you use Azure Event Grid for automation tasks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check the following links for more information about the topics that
    were covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**An introduction to Azure Automation**: [https://docs.microsoft.com/en-us/azure/automation/automation-intro](https://docs.microsoft.com/en-us/azure/automation/automation-intro)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows PowerShell Desired State Configuration Overview**: [https://docs.microsoft.com/en-us/powershell/dsc/overview](https://docs.microsoft.com/en-us/powershell/dsc/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Automation DSC Overview**: [https://docs.microsoft.com/en-us/azure/automation/automation-dsc-overview](https://docs.microsoft.com/en-us/azure/automation/automation-dsc-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chef on Azure**: [https://docs.microsoft.com/en-us/azure/chef/](https://docs.microsoft.com/en-us/azure/chef/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Event Grid Documentation**: [https://docs.microsoft.com/en-us/azure/event-grid/](https://docs.microsoft.com/en-us/azure/event-grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Logic Apps Documentation**: [https://docs.microsoft.com/en-us/azure/logic-apps/](https://docs.microsoft.com/en-us/azure/logic-apps/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Team Services: Build and release**: [https://docs.microsoft.com/en-us/vsts/build-release/?view=vsts](https://docs.microsoft.com/en-us/vsts/build-release/?view=vsts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autoscaling Guidance**: [https://docs.microsoft.com/en-us/azure/architecture/best-practices/auto-scaling](https://docs.microsoft.com/en-us/azure/architecture/best-practices/auto-scaling)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
