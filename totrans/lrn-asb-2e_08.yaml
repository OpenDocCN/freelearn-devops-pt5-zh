- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible Network Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to [*Chapter 8*](B21620_08.xhtml#_idTextAnchor386); this chapter will
    look at an often-overlooked use case for Ansible and delve into Ansible’s expansive
    community of networking modules.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, instead of a deep dive into every collection—which could be
    an entire book—we’ll provide an overview, highlighting these modules’ capabilities
    and flexibilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter covers the following topic:'
  prefs: []
  type: TYPE_NORMAL
- en: Manufacturer and device support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manufacturer and device support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been looking at modules that interact with servers. In our case,
    they have mostly been running locally. In the upcoming chapters, we will be communicating
    more with remotely cloud-hosted servers. But, before interacting with remote servers,
    we should cover the core network modules.
  prefs: []
  type: TYPE_NORMAL
- en: These modules have all been designed to interact with and manage the configuration
    of various network devices, from your traditional top-of-rack switches and fully
    virtualized network infrastructure to firewalls and load balancers. Ansible supports
    many devices, from open source virtual appliances to hardware solutions, some
    of which could have a starting price of over USD 500,000, depending on your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: So, what do all these collections and modules have in common?
  prefs: []
  type: TYPE_NORMAL
- en: Well, they all interact with what are traditionally complex to configure devices,
    which, in most deployments and environments, are both the core and critical elements;
    after all, everything connected to them needs some level of network connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: These modules give you a standard interface, i.e., Ansible, for many of these
    devices and remove the need for engineers to access these devices directly. They
    can, instead, run Ansible playbooks, which run roles created by experienced network
    engineers to configure them in a controlled and consistent way by just changing
    a few variables.
  prefs: []
  type: TYPE_NORMAL
- en: The only downside of using Ansible to manage this critical core infrastructure
    is that the host running Ansible requires a line of sight to the management interface
    or API running on the devices, which may sometimes raise some security concerns.
    Hence, Ansible’s instructions on how to manage your network devices need some
    serious thought.
  prefs: []
  type: TYPE_NORMAL
- en: The collections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following list of collections is in the order of the namespaces and then
    the collection name; this is listed at the end of each item as **[namespace.collection-name]**.
  prefs: []
  type: TYPE_NORMAL
- en: Apstra Extensible Operating System (EOS) [arista.eos]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are over 30 modules that allow you to manage your devices running EOS.
    These modules let you operate **access control lists** (**ACLs**) interfaces,
    configure **border gateway protocol** (**BGP**) settings, run arbitrary commands
    on devices, manage hostname, interface configurations, logging, and more. A module
    also allows you to gather facts from each device.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, there are plugins for command line and HTTP API interactions.
  prefs: []
  type: TYPE_NORMAL
- en: Check Point [check_point.mgmt]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Ansible collection for Check Point Management comprises many modules; at
    the time of writing, there are over 250 modules.
  prefs: []
  type: TYPE_NORMAL
- en: Each manages different aspects of your Check Point device, such as access layers,
    rules, administrators, or network feeds on your Check Point firewall using the
    Web Services API. They provide functionalities ranging from fetching facts and
    adding or managing objects to workflow features such as approving and publishing
    sessions on your Check Point firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Given the number of Cisco device types and classes, there are several collections
    in the Cisco namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco Application Centric Infrastructure (ACI) [cisco.aci]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The 150+ ACI modules are used to manage all aspects of Cisco’s ACI, which is
    to be expected of Cisco’s next-generation API-driven networking stack.
  prefs: []
  type: TYPE_NORMAL
- en: There are modules for managing various aspects of the Cisco ACI, such as AAAA
    records (these are address records that store IPv6 addresses), roles, users, certificates,
    Access SPAN configurations, **bridge domains** (**BDs**) and subnets, BGP route
    reflectors, and many more. There are modules for managing Cloud Application Profiles
    and Cloud AWS Provider configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco Adaptive Security Appliance (ASA) [cisco.asa]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the five ASA modules, you can manage access lists, run commands, and manage
    the configuration of physical and virtual Cisco ASA-powered devices.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco DNA Center (DNAC) [cisco.dnac]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Ansible collection for the Cisco DNAC comprises nearly 400 modules to manage
    different aspects of your Cisco DNAC deployment. The modules cover a range of
    functionalities, from fetching the configuration details of access points, managing
    application policies, assigning devices to sites, importing authentication certificates,
    and running compliance checks to managing configuration templates.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco IOS and IOS XR [cisco.ios and cisco.iosxr]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These two collections contain modules that allow you to manage your Cisco IOS
    and IOS XR-powered devices. You can gather facts on your devices and configure
    users, interfaces, logging, banners, and more with them.
  prefs: []
  type: TYPE_NORMAL
- en: Identity Services Engine (ISE) [cisco.ise]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This collection manages your ISE; it comprises a variety of modules for managing
    settings and configurations, such as handling ACI bindings and settings, managing
    Active Directory settings, handling allowed protocols, administering ANC endpoints
    and policies, managing backup configurations and schedules, handling certificates,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco Meraki [cisco.meraki]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here, we have just short of 500 modules that manage the different elements of
    your Meraki deployment, such as administered identities, device details, camera
    settings, cellular gateway configurations, and sensor relationships. Each module
    is designed to fetch information or modify settings, which helps you manage your
    Cisco Meraki devices by using automation.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco Network Services Orchestrator (NSO) [cisco.nso]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A handful of modules allow you to interact with your Cisco NSO-managed devices.
    You can execute NSO actions, query data from your installation, and verify your
    configuration alongside service synchronization and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco Network Operating System Software (NX-OS) [cisco.nxos]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As you can imagine, there are a lot of modules for managing devices running
    Cisco NXOS; there are over 80 that cover a range of functions such as managing
    AAA server configurations, ACLs, BGP configurations, executing arbitrary commands,
    managing interfaces, and handling various other configurations and settings on
    Cisco NX-OS devices.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco Unified Computing System (UCS) [cisco.ucs]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While not strictly a networking device, the modules to manage Cisco’s unified
    computing, storage, and network system include one that allows you to manage DNS
    servers, IP address pools, LAN connectivity policies, MAC address pools, QoS settings,
    VLANs, and vNICs. The rest of the modules allow you to programmatically manage
    computing and storage across your blades and chassis.
  prefs: []
  type: TYPE_NORMAL
- en: F5 BIG-IP Imperative [F5Networks.F5_Modules]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are 160 modules, all prefixed with BIG-IP, that allow you to manage all
    aspects of your F5 BIG-IP Application Delivery Controller.
  prefs: []
  type: TYPE_NORMAL
- en: Fortinet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are just two collections in the Fortinet namespace, but, as you can see
    from the number of modules in each, they are very feature-rich.
  prefs: []
  type: TYPE_NORMAL
- en: Fortinet FortiManager [fortinet.fortimanager]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are over 1,100 modules (yes, you read that correctly), including configuring
    antivirus profiles and options, managing AP local configuration profiles and command
    lists, configuring custom application signatures and firewall application groups,
    managing internet service applications, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Fortinet FortiOS v6 (fortinet.fortios)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While this has fewer modules than the FortiManager collection, there are still
    over 650 modules for configuring antivirus settings, application control lists,
    authentication schemes, and certificate settings.
  prefs: []
  type: TYPE_NORMAL
- en: Free Range Routing (FRR) [Frr.Frr]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are just two modules here: one that allows you to configure BGP, and
    the other lets you gather facts about devices running FRR.'
  prefs: []
  type: TYPE_NORMAL
- en: Juniper Networks Junos [junipernetworks.junos]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A total of 40 modules enable you to interact with Juniper devices running Junos
    from within your playbooks. These range from the standard command, configuration,
    and fact-gathering modules to those that allow you to install packages and copy
    files to your devices.
  prefs: []
  type: TYPE_NORMAL
- en: Open vSwitch [Openvswitch.Openvswitch]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The four modules in the namespace allow you to manage bonds, bridges, ports,
    and databases on your OVS virtual switches.
  prefs: []
  type: TYPE_NORMAL
- en: VyOS [vyos.vyos]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The VyOS collection includes modules for managing various configurations and
    resources on VyOS devices. Some of these modules include managing multiline banners,
    configuring BGP global and address family settings, running commands, managing
    firewall settings, interface configurations, logging, NTP, OSPF, SNMP, static
    routes, system commands, user management, and VLAN configurations, among others.
  prefs: []
  type: TYPE_NORMAL
- en: The Community Network Collection [Community.Network]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This collection is a catch-all for all other network modules without dedicated
    namespace or development teams; the module prefix is now in the square brackets.
  prefs: []
  type: TYPE_NORMAL
- en: A10 Networks [a10]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The A10 modules support A10 Networks AX, SoftAX, Thunder, and vThunder devices.
    These are all application delivery platforms that provide load balancing.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco AireOS [aireos]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The two AireOS modules allow you to interact with the Cisco Wireless LAN Controllers
    running AireOS. One of the modules will enable you to run commands directly on
    the devices, and the other is for managing the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: APCON [apcon]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A single module that allows you to run commands on your APCON device.
  prefs: []
  type: TYPE_NORMAL
- en: Aruba Mobility Controller [aruba]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are just two Aruba modules. These allow you to manage the configuration
    and execute commands on the Aruba Mobility Controllers from Hewlett Packard.
  prefs: []
  type: TYPE_NORMAL
- en: Avi Networks [avi]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are a total of 65 Avi modules that allow you to interact with all aspects
    of the Avi application services platform, including the load-balancing and **web
    application firewall** (**WAF**) features.
  prefs: []
  type: TYPE_NORMAL
- en: Big Cloud Fabric and Big Switch Network [bcf + bigmon]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are three Big Switch Network modules. **Big Cloud Fabric** (**BCF**) allows
    you to create and delete BCF switches. The other two modules enable you to create
    **Big Monitoring Fabric** (**Big Mon**) service chains and policies.
  prefs: []
  type: TYPE_NORMAL
- en: Huawei Cloud Engine [ce]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Over 75 Cloud Engine modules allow you to manage all aspects of these robust
    switches from Huawei, including BGP, access control lists, MTU, static routes,
    VXLANs, and SNMP configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Lenovo CNOS [cnos]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are nearly 30 modules that allow you to manage devices running the CNOS
    operating system from Lenovo; they enable you to configure everything from BGP
    and port aggregation to VLAG, VLANs, and factory reset devices, should you need
    to.
  prefs: []
  type: TYPE_NORMAL
- en: Arista Cloud Vision [cv]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A single module lets you provision an Arista Cloud Vision server port using
    a configlet.
  prefs: []
  type: TYPE_NORMAL
- en: illumos [dladm + flowadm + ipadm]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: illumos is a fork of the Open Solaris operating system. Its powerful networking
    features make it the perfect candidate for deploying as a self-built router or
    firewall. These modules allow you to manage the interfaces, NetFlow, and tunnels.
    Additionally, as illumos is a fork of Open Solaris, your playbook should work
    on Open Solaris-based operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Ubiquiti EdgeOS [edgeos + edgeswitch]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The modules for EdgeOS enable you to manage configurations, execute ad hoc commands,
    and collect facts on EdgeOS-running devices, such as the Ubiquiti Edge Router.
  prefs: []
  type: TYPE_NORMAL
- en: There are also a few modules for Edge Switches.
  prefs: []
  type: TYPE_NORMAL
- en: Lenovo Enterprise Networking Operating System [enos]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are three modules for the Lenovo ENOS. Like other devices, these allow
    you to gather facts, execute commands, and manage the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Ericsson [eccli]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This single module allows you to run commands on devices running the Ericsson
    command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: ExtremeXOS [exos + nos + slxos]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These half-a dozen modules allow you to interact with the ExtremeXOS, Extreme
    Networks SLX-OS, and Extreme Networks NOS software on Extreme Networks switches.
  prefs: []
  type: TYPE_NORMAL
- en: Cisco Firepower Threat Defense [ftd]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A few modules allow you to configure and upload/download files to a Cisco Firepower
    Threat Defense device.
  prefs: []
  type: TYPE_NORMAL
- en: Itential Automation Platform [iap]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A few modules allow you to interact with workflows hosted on the Itential Automation
    Platform, as well as low-code automation and orchestration for hybrid cloud networks.
  prefs: []
  type: TYPE_NORMAL
- en: Ruckus ICX 7000 [icx]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These modules allow you to configure your Ruckus ICX 7000 series campus switches.
  prefs: []
  type: TYPE_NORMAL
- en: Ingate Session Border Controllers [ig]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While these are mainly used for **SIP**, or to give its full name, **session
    initiation protocol** services, there are a few modules to help configure the
    network elements.
  prefs: []
  type: TYPE_NORMAL
- en: NVIDIA Network Command Line Utility [nclu]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A single module that allows you to manage network interfaces using the NVIDIA
    Network Command Line Utility on compatible devices.
  prefs: []
  type: TYPE_NORMAL
- en: Nokia NetAct [netact]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A single module that allows you to upload and apply your Nokia NetAct-powered
    core and radio networks.
  prefs: []
  type: TYPE_NORMAL
- en: Citrix Netscaler [netscaler]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These modules are designed to manage and configure various aspects of Netscaler
    devices. They cover functionalities such as content switching, **Global Server
    Load-Balancing** (**GSLB**), load-balancing, issuing Nitro API requests, and saving
    configurations, as well as managing server configurations, services, service groups,
    and SSL certificate keys.
  prefs: []
  type: TYPE_NORMAL
- en: Nokia Nuage Networks Virtualized Services Platform (VSP) [nuage]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is a single module that allows you to manage enterprises on your Nokia
    Nuage Networks VSP.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSwitch [opx]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A single module that performs the specified action on the YANG object, utilizing
    the CPS API on the networking device operating OpenSwitch.
  prefs: []
  type: TYPE_NORMAL
- en: Ordnance Virtual Routers [ordnance]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two modules: one to manage configuration and the other to collect
    facts on Ordnance Virtual Routers.'
  prefs: []
  type: TYPE_NORMAL
- en: Pluribus Networks Netvisor OS [pn]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These 40 modules allow you to manage your **Pluribus Networks** (**PN**) Netvisor
    OS-powered devices, from creating clusters and routers to running commands on
    your white-box switches.
  prefs: []
  type: TYPE_NORMAL
- en: Nokia Networks Service Router Operating System [sros]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are three modules that let you run commands against, configure, and roll
    back changes to your Nokia Networks SROS devices.
  prefs: []
  type: TYPE_NORMAL
- en: Radware [vidrect]
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A small number of modules that allow you to manage your Radware devices via
    a vDirect server.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Net Common [ansible.netcommon]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final collection is a set of modules that could be considered tools to help
    support all the devices we have covered in this chapter. There are modules that
    can ping targets and run generic commands using custom prompts and answers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I suspect most of you would not have heard of a lot of the devices we have listed
    in this chapter, and for the ones you have heard of—such as the Cisco ones—you
    will probably not have had direct access to them, leaving any configuration to
    your network administrators.
  prefs: []
  type: TYPE_NORMAL
- en: When we speak about triggering Ansible using CI/CD in [*Chapter 15*](B21620_15.xhtml#_idTextAnchor641),
    *Using Ansible with GitHub Actions and Azure DevOps*, and [*Chapter 16*](B21620_16.xhtml#_idTextAnchor716),
    *Introducing Ansible AWX and Red Hat Ansible Automation Platform*, we will learn
    about some deployment options that could help alleviate the concerns we mentioned
    at the start of the chapter, e.g., those about a host running your Ansible playbooks
    needing a line of sight of the potentially critical core infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get to those chapters, we will look at moving our workloads to the
    cloud, a journey that starts in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The Ansible Collection** **index**: [https://docs.ansible.com/ansible/latest/collections/index.html](https://docs.ansible.com/ansible/latest/collections/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
