- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helping the Database Team with Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stateful applications, by definition, must save data persistently. So, when
    we talk about stateful applications, data will come into the picture, and hence,
    database servers. Choose any supported database software, depending on the type
    of data you want to store. This includes the number of transactions, the performance
    that’s required for your application, high availability and failover support,
    and many other factors. However, there are more important concerns, such as preparing
    the datastore, installing the necessary dependencies, packages or libraries. In
    terms of maintenance, this will be a continuous process as we need to take care
    of backups, data dumps, snapshots, and restoration in case of failure.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible can help you in such situations. There are hundreds of Ansible database
    modules available that can help you implement your database automation tasks,
    including database installation, deployment, managing tables, managing users,
    and many other tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible for database operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing database servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and managing databases using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating PostgreSQL operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating a password reset using ITSM and Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn how to install the PostgreSQL database servers, create databases,
    configure database tables, user authentication, and more. You will also learn
    about the integration opportunities for zero-touch automation while using Ansible
    and **IT Service Management** (**ITSM**) tools.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the technical requirements to proceed with this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A Linux machine for the Ansible control node (with internet access)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Linux machine for installing and configuring the PostgreSQL server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic knowledge about databases (PostgreSQL) and servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible code, playbooks, commands, and snippets for this chapter can
    be found in this book’s GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-08](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-08).
  prefs: []
  type: TYPE_NORMAL
- en: Ansible for database operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Database operations not only involve deploying database servers but also counting
    the day-to-day operations, such as managing databases, tables, database users,
    permissions or access. Ansible can talk to most of the well-known database services
    using the appropriate Ansible modules, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Ansible database automation  ](img/B18383_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Ansible database automation
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most common database automation use cases are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying standalone database servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure **high availability** (**HA**) database clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating databases and tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing database and server access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backup and restore operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing data replication and mirroring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated database failovers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the help of Ansible database collections and modules, we can automate most
    of these operations. In the next section, you will learn how to install a PostgreSQL
    database server using Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the *Further reading* section at the end of this chapter for
    more resources.
  prefs: []
  type: TYPE_NORMAL
- en: Installing database servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a database administrator or if you know how database servers work,
    then you know the pain and struggle of managing and maintaining the services and
    data as per the application’s requirements. Since the introduction of virtualized
    and cloud-based platforms, provisioning virtual machines, disks, and other resources
    has become less of a headache. However, we still need automated options to provision
    database servers and database instances. There are single-click deployment solutions
    from public **cloud service providers** (**CSPs**) known as **managed database
    solutions** but in most cases, we do not have much control and transparency over
    such services if we have more strict requirements. Hence, organizations are forced
    to use self-hosted database servers and follow manual deployment and management
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 7*](B18383_07.xhtml#_idTextAnchor125), *Managing Your Virtualization
    and Cloud Platforms*, you learned how to automate infrastructure provisioning,
    including virtual machines and disks. In this chapter, we will explore how to
    automate database tasks, such as installing database servers, or provisioning
    databases or tables, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Basic database operations ](img/B18383_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Basic database operations
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Ansible has a good collection of modules and plugins for deploying
    and managing database servers such as Microsoft SQL, MySQL, PostgreSQL, InfluxDB,
    MongoDB, ProxySQL or Vertica. You will learn about the basics of Ansible-based
    database deployment in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PostgreSQL using Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing PostgreSQL is simple if you refer to the official documentation.
    However, you need to install all the dependencies and libraries that are required
    for PostgreSQL. You also need to configure the database server details. Fortunately,
    there are well-written Ansible roles available in Ansible Galaxy that we can download
    and use to install and configure PostgreSQL servers (and other database servers).
    The following screenshot shows us searching for the `postgresql` role in Ansible
    Galaxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – The postgresql role search in Ansible Galaxy ](img/B18383_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – The postgresql role search in Ansible Galaxy
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, you will install a simple standalone PostgreSQL server using
    the `geerlingguy.postgresql` Ansible role, which was contributed by community
    member *Jeff Geerling* ([https://galaxy.ansible.com/geerlingguy/postgresql](https://galaxy.ansible.com/geerlingguy/postgresql)).
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that your `ansible.cfg` file has been configured with project-specific
    roles and a collection page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4 - Configure ansible.cfg ](img/B18383_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 - Configure ansible.cfg
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the role using the `ansible-galaxy` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Installing an Ansible role using the ansible-galaxy command
    ](img/B18383_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Installing an Ansible role using the ansible-galaxy command
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a variable file called `Chapter-08/vars/postgres.yaml` so that you can
    pass some user details, the database to create, and `hba` entries to update the
    `geerlingguy.postgresql` role. The role will create the resources automatically
    based on the variables you are passing to the playbook. Skip this step if you
    do not wish to create such entries and configurations automatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Variables for PostgreSQL database ](img/B18383_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Variables for PostgreSQL database
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `Chapter-08/postgres-deploy.yaml` playbook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Playbook to deploy PostgreSQL server ](img/B18383_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Playbook to deploy PostgreSQL server
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a task that allows remote connections for PostgreSQL and restart the PostgreSQL
    service. Finally, allow database port `5432` in the firewall, as shown in the
    following code snippet. Use other firewall service modules such as `community.general.ufw`
    if you are using a different firewall:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Tasks for opening the port and database service ](img/B18383_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Tasks for opening the port and database service
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook and deploy the PostgreSQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Execute Ansible playbook for PostgreSQL deployment ](img/B18383_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Execute Ansible playbook for PostgreSQL deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the database server (`node1`) and verify the database server’s details
    by switching to the `postgres` user, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Logging in to the PostgreSQL database server ](img/B18383_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Logging in to the PostgreSQL database server
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `psql` client as the `postgres` user, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Open psql client on the database server ](img/B18383_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Open psql client on the database server
  prefs: []
  type: TYPE_NORMAL
- en: 'List the existing databases with the `\l` command and verify that `database_demo`
    was created (as per the variable configuration in the `vars/postgres.yaml` file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Listing the existing databases in the psql command line ](img/B18383_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Listing the existing databases in the psql command line
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the users list by using the `\du` command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Verifying users in the psql command line ](img/B18383_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Verifying users in the psql command line
  prefs: []
  type: TYPE_NORMAL
- en: 'Exit the `psql` console by using the *Ctrl* + *D* keyboard shortcut or the
    `\q` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Exiting the psql console ](img/B18383_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Exiting the psql console
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, verify the `pg_hba.conf` file; the `geerlingguy.postgresql` role will
    configure this file based on the content of your variable. Check out the `/var/lib/pgsql/data/pg_hba.conf`
    file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Verifying the /var/lib/pgsql/data/pg_hba.conf file ](img/B18383_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – Verifying the /var/lib/pgsql/data/pg_hba.conf file
  prefs: []
  type: TYPE_NORMAL
- en: If you want to access PostgreSQL from remote nodes, you need to make sure that
    the `pg_hba.conf` file entries have been configured appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: It is a best practice to use existing Ansible roles so that you can save a lot
    of time and effort while developing your automation content. Also, you need to
    make sure that the Ansible role and its methods are suitable for your environment
    instead of blindly using them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to update the password for the default
    `postgres` user.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a password for a default postgres user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default user, `postgres`, is configured with no password and the default
    authentication method is `postgres` user (or the passwords for other admin users).
    Set or update the password for the `postgres` user as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the `postgres` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Switch to postgres user and open psql cli ](img/B18383_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Switch to postgres user and open psql cli
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the password, exit the `psql` console and then exit the `postgres` user
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Change the password and exit from the postgres account ](img/B18383_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Change the password and exit from the postgres account
  prefs: []
  type: TYPE_NORMAL
- en: These steps can also be automated in your database installation playbook if
    required, though this depends on your organization’s requirements.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to automate other database server installations using Ansible,
    such as Microsoft SQL Server. We will look at this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Microsoft SQL Server on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 2016, Microsoft announced via their blog (refer to the following information
    box) that Microsoft SQL Server would run on Linux platforms. So, without a Windows
    server, you can install and use MSSQL databases, and the installation will support
    the most common Linux platforms, such as **Red Hat Enterprise Linux** (**RHEL**),
    **SUSE Enterprise Linux Server** (**SLES**), Ubuntu, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing MSSQL is pretty straightforward for Linux, but still, there are
    several steps involved in terms of configuration and services. When several database
    servers must be installed as part of the deployment, instead of configuring each
    manually, it is possible to use Ansible roles and playbooks to achieve this. Follow
    the steps as per documentation (refer to the following information box) or use
    any existing contributions from the community; for example, the role available
    at [galaxy.ansible.com/microsoft/sql](http://galaxy.ansible.com/microsoft/sql)
    can be used to install MSSQL on Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Installing microsoft.sql collection ](img/B18383_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – Installing microsoft.sql collection
  prefs: []
  type: TYPE_NORMAL
- en: 'The `community.general.mssql_db` community module can be used to add or remove
    MSSQL databases, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19 – Creating Microsoft SQL database ](img/B18383_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – Creating Microsoft SQL database
  prefs: []
  type: TYPE_NORMAL
- en: Explore more automation content for MSSQL in Ansible Galaxy and use it based
    on your environment’s requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Announcing SQL Server on Linux
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft’s announcement about SQL Server availability for Linux platforms can
    be found at [https://blogs.microsoft.com/blog/2016/03/07/announcing-sql-server-on-linux/](https://blogs.microsoft.com/blog/2016/03/07/announcing-sql-server-on-linux/).
  prefs: []
  type: TYPE_NORMAL
- en: Installation guidance for SQL Server on Linux can be found at [https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup](https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup).
  prefs: []
  type: TYPE_NORMAL
- en: Once the database server has been installed and configured, automate additional
    tasks, such as creating a new database, creating new tables, adding users or permissions.
    Use the Ansible collections and modules that are available, such as `community.postgresql`,
    `community.mysql`, `community.cockroachdb`, `community.cassandra`, and more. We
    will learn about PostgreSQL database automation in the next section while using
    the `community.postgresql` Ansible collection.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and managing databases using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The community collection for PostgreSQL comes with more than 20 modules and
    a few plugins. It is possible to use these modules and plugins to automate PostgreSQL
    database operations, including creating, dropping, and updating databases, tables,
    users, and other resources in the database server.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible community.postgresql prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are accessing PostgreSQL from a remote node (for example, an Ansible
    control node), then you need to install the `psycopg2` Python library on this
    machine to use these PostgreSQL modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will execute tasks from the database node itself (`node1`)
    using Ansible. This library is not required as the database server has already
    been configured with the required dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to manage database operations using
    Ansible and the `community.postgresql` collection.
  prefs: []
  type: TYPE_NORMAL
- en: Managing the database life cycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to create a database, create tables inside
    the new database, and then configure users and permissions using Ansible. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `postgres-manage-database.yaml` playbook and add the variables that
    provide details about the database to be created, tables to be configured, users
    to be added, and so on. Remember to use Ansible Vault to encrypt sensitive items
    such as the username and password as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.20 – Playbook to manage the database operations ](img/B18383_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – Playbook to manage the database operations
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a task to create a new PostgreSQL database, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.21 – Task to create database ](img/B18383_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 – Task to create database
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add another task to create the table with columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.22 – Task to create table inside the database ](img/B18383_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.22 – Task to create table inside the database
  prefs: []
  type: TYPE_NORMAL
- en: 'Add one more task for creating users and grant access to the newly created
    database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.23 – Task to create user and grant access to the database ](img/B18383_08_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.23 – Task to create user and grant access to the database
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook to create the database and other resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.24 – Execute playbook to create database, table and user ](img/B18383_08_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.24 – Execute playbook to create database, table and user
  prefs: []
  type: TYPE_NORMAL
- en: Once the playbook has been created, verify the database and resources on the
    database server (for example, `node1`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to `node1`, switch to the `postgres` user and open the `psql` console.
    List the databases and you will see the `db_sales` database and the access privilege
    for `devteam`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.25 – Log in to the database server and verify details ](img/B18383_08_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.25 – Log in to the database server and verify details
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the user details in `psql`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.26 – Listing and verifying the newly created user ](img/B18383_08_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.26 – Listing and verifying the newly created user
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the tables have been created as per the playbook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, connect to the newly created database from the `psql` console using
    the `\c` command and then list the tables inside the database using the `\dt`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.27 – Connecting to the newly created database and list tables ](img/B18383_08_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.27 – Connecting to the newly created database and list tables
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the columns that you have created using the Ansible playbook are
    in the table, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.28 – Database table details ](img/B18383_08_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.28 – Database table details
  prefs: []
  type: TYPE_NORMAL
- en: 'Also verify access for the new user by using the `psql` console with the relevant
    username and password as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.29 – Verifying new user access and the list tables ](img/B18383_08_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.29 – Verifying new user access and the list tables
  prefs: []
  type: TYPE_NORMAL
- en: Expand the playbook with more details, such as the columns that are required
    for the tables, more users, permissions, and so on. Refer to the module’s documentation
    at [https://docs.ansible.com/ansible/latest/collections/community/postgresql/](https://docs.ansible.com/ansible/latest/collections/community/postgresql/)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn more about database operations, such as
    how to manage remote access by automating `pg_hba` configurations, taking database
    dumps, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Automating PostgreSQL operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the help of the modules in the `community.postgresql` collection, it is
    possible to automate more database maintenance and operations. Let’s take a closer
    look.
  prefs: []
  type: TYPE_NORMAL
- en: Managing PostgreSQL remote access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Database servers are accessed by applications on remote nodes and this access
    needs to be configured appropriately and securely. For a test environment, allow
    wildcard entries (for example, `0.0.0.0/0`), but this is not a recommended practice
    for production servers. You need to configure the correct IP address or hostname
    to allow or restrict access to the database. This operation can be automated using
    the `community.postgresql.postgresql_pg_hba` module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.30 – Grant user access to database ](img/B18383_08_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.30 – Grant user access to database
  prefs: []
  type: TYPE_NORMAL
- en: Managing the `pg_hba` entries using Ansible will allow you to handle the entire
    life cycle of the database and its access.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn how to take automated database backups.
  prefs: []
  type: TYPE_NORMAL
- en: Database backup and restore
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Taking database backups is critical for sensitive and important data. Use Ansible
    to automate this database dump and schedule daily, weekly, or monthly database
    backups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.31 – Database backup using Ansible ](img/B18383_08_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.31 – Database backup using Ansible
  prefs: []
  type: TYPE_NORMAL
- en: The backup will be saved on the managed node. Customize the destination or automatically
    copy the backups to remote locations such as NFS volumes or cloud storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can automate the database restore operation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.32 – Restore database from backup file ](img/B18383_08_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.32 – Restore database from backup file
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice `state: restore` in the preceding example. This instructs Ansible to
    perform a restore operation using the file or archive mentioned in the `target`
    parameter. The following screenshot shows the full playbook, which can perform
    backup or restore operations based on the `db_action` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.33 – PostgreSQL database backup and restore playbook ](img/B18383_08_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.33 – PostgreSQL database backup and restore playbook
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the [https://docs.ansible.com/ansible/latest/collections/community/postgresql/postgresql_db_module.xhtml](https://docs.ansible.com/ansible/latest/collections/community/postgresql/postgresql_db_module.xhtml)
    documentation to learn more about the `community.postgresql.postgresql_db` module.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible PostgreSQL and MySQL Collection
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [https://galaxy.ansible.com/community/postgresql](https://galaxy.ansible.com/community/postgresql)
    for the PostgreSQL community collection and [https://docs.ansible.com/ansible/latest/collections/community/postgresql/](https://docs.ansible.com/ansible/latest/collections/community/postgresql/)
    for the documentation. Also, check out [https://galaxy.ansible.com/community/mysql](https://galaxy.ansible.com/community/mysql)
    for the Ansible MySQL collection and modules.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about automated database password reset
    request handling, which you can do using Ansible and your ITSM tool.
  prefs: []
  type: TYPE_NORMAL
- en: Automating a password reset using ITSM and Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the help of ITSM tools and Red Hat Ansible Automation Platform (or community
    Ansible AWX), it is possible to implement zero-touch automation use cases such
    as database user password resets, database provisioning, and so on. Users will
    interact with the ITSM tool, and the tool will interact with Ansible Automation
    Platform to implement the task implementation, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.34 – ITSM and Ansible Automation Platform integration for database
    operations ](img/B18383_08_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.34 – ITSM and Ansible Automation Platform integration for database
    operations
  prefs: []
  type: TYPE_NORMAL
- en: This **programmatic automation** is one of the best features of Ansible and
    helps organizations scale their automation landscape by integrating with existing
    tools and software.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use customized forms or ticketing systems in the ITSM tool, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.35 – Jira ticket and its details ](img/B18383_08_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.35 – Jira ticket and its details
  prefs: []
  type: TYPE_NORMAL
- en: 'The ITSM tool, such as Jira or ServiceNow, can also be configured with custom
    fields to collect information, such as the database server’s name, database name,
    username, and more, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.36 – Jira ticket with custom fields ](img/B18383_08_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.36 – Jira ticket with custom fields
  prefs: []
  type: TYPE_NORMAL
- en: Automation will not skip your ITSM processes or procedures; the review and approvals
    will be in place before the task is executed, as shown in *Figure 8.34*.
  prefs: []
  type: TYPE_NORMAL
- en: Once the approval happens, the ITSM tool will send a notification containing
    data (such as the database hostname, database name, and username) to Ansible Automation
    Platform and trigger the automation job. We will look at this in more detail in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible playbook for resetting passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Ansible playbook will be triggered from Ansible Automation Platform based
    on the Ansible job template and the input data from Jira. Collect the input data
    from Jira with the custom fields shown in the following screenshot (refer to `Chapter-08/postgres-password-reset.yaml`
    for more details):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.37 – Collecting details from Jira in the playbook ](img/B18383_08_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.37 – Collecting details from Jira in the playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'The following task will set the new password for the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.38 – A task for setting a new password ](img/B18383_08_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.38 – A task for setting a new password
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the password reset operation is successful, the following task will update
    the Jira ticket with the output of the password reset operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.39 – Updating the Jira ticket using the community.general.jira module
    ](img/B18383_08_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.39 – Updating the Jira ticket using the community.general.jira module
  prefs: []
  type: TYPE_NORMAL
- en: Expand the playbook by adding tasks that send the new password to the user via
    email using the `community.general.mail` module. Read more about Ansible Jira
    module from documentation ([https://docs.ansible.com/ansible/latest/collections/community/general/jira_module.xhtml](https://docs.ansible.com/ansible/latest/collections/community/general/jira_module.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about how Ansible can help you install database
    servers and manage database operations such as creating databases, creating tables,
    assigning user permissions, taking database backups, and configuring `pg_hba`.
    You also learned about the integration opportunities that are provided by the
    ITSM tools for implementing zero-touch automation with Ansible Automation Platform.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to integrate Ansible with your DevOps
    practices for deployment, rolling updates, IaC provisioning, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, please visit
    the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*How to send emails using Ansible and Gmail*: [https://www.techbeatly.com/ansible-gmail](https://www.techbeatly.com/ansible-gmail)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using Ansible to deploy Microsoft SQL Server 2019 on Red Hat Enterprise Linux
    8*: [https://www.redhat.com/sysadmin/mssql-linux-easy](https://www.redhat.com/sysadmin/mssql-linux-easy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Community.Postgresql collection*: [https://docs.ansible.com/ansible/latest/collections/community/postgresql/index.xhtml](https://docs.ansible.com/ansible/latest/collections/community/postgresql/index.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible Database modules:* [https://docs.ansible.com/ansible/2.9/modules/list_of_database_modules.xhtml](https://docs.ansible.com/ansible/2.9/modules/list_of_database_modules.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Automating IT Service Management with ServiceNow and Red Hat Ansible Automation
    Platform*: [https://www.ansible.com/integrations/it-service-management/servicenow](https://www.ansible.com/integrations/it-service-management/servicenow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*MongoDB Collection for Ansible*: [https://galaxy.ansible.com/community/mongodb](https://galaxy.ansible.com/community/mongodb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
