- en: Building Application Images from Dockerfile
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Dockerfile 构建应用程序镜像
- en: In the previous chapter, you learned what OpenShift templates are, along with
    the concepts of how to write your own templates and deploy applications from templates.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了 OpenShift 模板的概念，以及如何编写自己的模板并从模板部署应用程序。
- en: In this chapter, we are going to see how OpenShift simplifies Docker image life
    cycles by providing a Docker build strategy that automates application deployment
    from source code. This chapter is a hands-on lab that describes application delivery
    using the Docker **Source-to-Image** (**S2I**) strategy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍 OpenShift 如何通过提供自动化应用程序从源代码部署的 Docker 构建策略来简化 Docker 镜像生命周期。本章是一个实践实验室，描述了如何使用
    Docker **源代码到镜像**（**S2I**）策略进行应用程序交付。
- en: After completing this chapter, you will have learned how to build and deploy
    an application from Dockerfile.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您将学会如何从 Dockerfile 构建和部署应用程序。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Dockerfile development for OpenShift
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift 的 Dockerfile 开发
- en: Building applications from Dockerfile
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Dockerfile 构建应用程序
- en: Dockerfile build customization
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dockerfile 构建自定义
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter doesn''t have strict environmental restrictions; any OpenShift
    installations and development environment is supported—MiniShift, `oc cluster
    up`, standard Ansible-based production-ready deployment. It is up to you which
    version you use. However, this chapter is based on the `oc cluster up` method.
    The following Vagrantfile can be used to deploy development environment:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有严格的环境限制；支持任何 OpenShift 安装和开发环境——MiniShift、`oc cluster up`、标准的基于 Ansible
    的生产就绪部署。您可以根据自己的需要选择使用哪个版本。然而，本章基于 `oc cluster up` 方法。以下 Vagrantfile 可用于部署开发环境：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The environment can be deployed as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 环境可以按如下方式部署：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the previously listed vagrant machine is deployed, you may connect to it
    as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 部署前面列出的 vagrant 机器后，您可以按如下方式连接到它：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, log in as the developer user in order to be able to perform operations:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，登录为开发者用户，以便能够执行操作：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Dockerfile development for OpenShift
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenShift 的 Dockerfile 开发
- en: Early in this book, we explained how to containerize applications through Dockerfile
    development. This involved the `docker build` utility, which creates a ready-to-use
    container image by following Dockerfile instructions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的早期章节中，我们解释了如何通过 Dockerfile 开发将应用程序容器化。这涉及了 `docker build` 工具，它通过遵循 Dockerfile
    指令创建一个可用的容器镜像。
- en: Generally speaking, OpenShift supports existing application Dockerfiles, but
    it has special default security-related requirements that require you to modify/adjust
    application Dockerfiles to be aligned with OpenShift security standards.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，OpenShift 支持现有的应用程序 Dockerfile，但它有一些特殊的默认安全要求，需要您修改或调整应用程序的 Dockerfile
    以符合 OpenShift 安全标准。
- en: The default security policy runs any containers using a random **User ID** (**UID**)
    and ignores the `USER` Dockerfile instruction. The applications are always run
    under the root user group.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 默认安全策略会以随机的**用户 ID**（**UID**）运行任何容器，并忽略 `USER` Dockerfile 指令。应用程序总是以 root 用户组运行。
- en: 'If the application needs read-write access, you need to configure RW access
    to the root group, which can usually be archived with the following Dockerfile
    snippet:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序需要读写访问权限，您需要为 root 组配置 RW 访问权限，通常可以通过以下 Dockerfile 代码段来实现：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding example changes the directory and file owner to `1001` and sets
    the permission for the group to the same as for the owner. This allows applications
    to have read-write permissions under any UID.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例将目录和文件所有者更改为`1001`，并将组的权限设置为与所有者相同。这使得应用程序在任何 UID 下都能具有读写权限。
- en: OpenShift doesn't allow applications to bind on ports less than `1024`. So,
    it may be required to adjust the `EXPOSE` instructions in your Dockerfiles to
    be able to run applications inside OpenShift infrastructure.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 不允许应用程序绑定到小于 `1024` 的端口。因此，可能需要调整 Dockerfile 中的 `EXPOSE` 指令，以便能够在
    OpenShift 基础设施中运行应用程序。
- en: 'The following Dockerfile snippet provides an example of how to modify the port
    for the HTTPD image:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Dockerfile 代码段提供了如何修改 HTTPD 镜像端口的示例：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It most cases, it will be required to adjust application configuration to listen
    on a new port. For example, for HTTPD, it is necessary to change `Listen` directive
    options.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，您需要调整应用程序配置，以便监听新的端口。例如，对于 HTTPD，必须更改 `Listen` 指令选项。
- en: Building an application from Dockerfile
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Dockerfile 构建应用程序
- en: 'It is good practice to deploy an application in a separate namespace:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的命名空间中部署应用程序是一种良好的实践：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For this lab, we are going to use the `redis` container. First, we need a Dockerfile
    with additional files located at   [https://github.com/docker-library/redis.git](https://github.com/docker-library/redis.git).
    Let''s clone this repository locally to understand its structure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，我们将使用`redis`容器。首先，我们需要一个包含额外文件的Dockerfile，位于[https://github.com/docker-library/redis.git](https://github.com/docker-library/redis.git)。让我们克隆这个仓库到本地，以了解其结构：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The repository contains a number of directories representing a particular version
    of Redis:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该仓库包含多个目录，表示Redis的不同版本：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The repository structure contains a number of directories representing a particular
    version. To build the application, we need to specify a directory that contains
    the required Dockerfile. This can be achieved by using the `--context-dir` option
    of `oc new-ap`. This will be described later.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库结构包含多个目录，表示特定版本。要构建应用程序，我们需要指定一个包含所需Dockerfile的目录。可以通过使用`oc new-app`的`--context-dir`选项来实现。稍后会详细描述。
- en: A simple Dockerfile build
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的Dockerfile构建
- en: 'Well, we know about directory structure and want to build and deploy a Redis
    application from the available Dockerfile. Let''s focus on version 3.2\. The `oc
    new-app` may initiate a build from source code using a sub-directory. We are ready
    to initiate a simple Dockerfile build:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们了解了目录结构，并希望从现有的Dockerfile构建和部署Redis应用程序。我们专注于版本3.2。`oc new-app`可以使用子目录从源代码启动构建。我们准备好启动一个简单的Dockerfile构建：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As we can see, OpenShift created a number of objects such as the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，OpenShift创建了以下多个对象：
- en: '`imagestream` named `debian`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`debian`的`imagestream`
- en: '`buildconfig` named `redis`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`redis`的`buildconfig`
- en: '`deploymentconfig` named `redis`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`redis`的`deploymentconfig`
- en: '`service` named `redis`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为`redis`的`service`
- en: 'You can run the `oc get all` command to make sure that all objects have been
    created:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以运行`oc get all`命令，以确保所有对象都已创建：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The previous command initiated a build. OpenShift starts a `-build` pod which
    does the build. You may temporarily see that a Pod with `-build` in the name is
    in the `Running` state:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令启动了一个构建。OpenShift启动了一个`-build`的Pod来进行构建。你可能会暂时看到一个名字中带有`-build`的Pod处于`Running`状态：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Docker build is controlled by a `build` config object. Build status can be
    displayed by using the `oc logs bc/<NAME>` command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Docker构建由`build`配置对象控制。可以使用`oc logs bc/<NAME>`命令显示构建状态：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Another way to work on build process troubleshooting is to use `oc status`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 解决构建过程故障的另一种方法是使用`oc status`。
- en: 'OpenShift built the Redis image from Dockerfile and uploaded it to a local
    registry. Let''s make sure that container works:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift从Dockerfile构建了Redis镜像并上传到本地注册表。让我们确保容器正常工作：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this lab, we are using a simple `ping`  test to make sure that we have basic
    reachability. We use the `redis-cli` command delivered by the container.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们使用一个简单的`ping`测试来确保基本的可达性。我们使用容器提供的`redis-cli`命令。
- en: So, it looks like our Redis application works fine and has version 3.2.11.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，看起来我们的Redis应用程序工作正常，版本是3.2.11。
- en: Dockerfile build customization
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dockerfile构建定制
- en: As we saw before, OpenShift can build an application from Dockerfile. Sometimes,
    application source code is updated and there is a need to initiate the build process
    again using the new source code. OpenShift supports this functionality through
    the `oc start-build` command.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，OpenShift可以从Dockerfile构建应用程序。有时，应用程序的源代码会更新，需要使用新源代码重新启动构建过程。OpenShift通过`oc
    start-build`命令支持这一功能。
- en: During this section, we will initiate a build process using the new source code
    of the application using the image stream created recently by the `oc new-app`
    command.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们将使用`oc new-app`命令最近创建的镜像流，启动一个构建过程，使用应用程序的新源代码。
- en: We built a Redis application from source code using a specific directory 3.0.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用特定目录3.0的源代码构建了Redis应用程序。
- en: 'The source code contains another Dockerfile, which uses the newer version 4.0:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码包含另一个Dockerfile，使用的是更新的版本4.0：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, imagine that we need to update the application using new code available
    in another repository or another context directory in the existing repository.
    For our particular case, it sounds like we need to change the context directory
    to `4.0` instead of `3.2`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们需要使用另一个仓库中的新代码，或现有仓库中的另一个上下文目录来更新应用程序。对于我们的特定情况，看起来我们需要将上下文目录从`3.2`改为`4.0`。
- en: 'The `oc new-app` command created a number of entities that control application
    build and deployment. The build process is under `build config` object control.
    We need to display this object to understand what to change to point to another
    directory in the repository:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`oc new-app`命令创建了多个控制应用程序构建和部署的实体。构建过程由`build config`对象控制。我们需要显示此对象以了解如何更改以指向仓库中的另一个目录：'
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We highlighted a source element that specifies which directory to use during
    the build. Now, if there is a task to point to another context directory, we just
    need to update the `bc/redis` object by changing `spec.source.contextDir` in the
    object definition. This can be achieved in several ways:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们突出显示了一个源元素，指定了构建过程中使用的目录。现在，如果有任务需要指向另一个上下文目录，我们只需要通过修改对象定义中的`spec.source.contextDir`来更新`bc/redis`对象。这可以通过几种方式实现：
- en: Manually using `oc edit`
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动使用`oc edit`
- en: In a script using `oc patch`
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用`oc patch`的脚本中
- en: '`oc edit bc/redis` will run a text editor to modify the object. Here is an
    example of how to use the `oc patch` command to update the object content:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`oc edit bc/redis`将启动一个文本编辑器来修改对象。以下是如何使用`oc patch`命令更新对象内容的示例：'
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Well, we updated our build configuration but nothing happened. Our pod has not
    been changed. This indicates that the build process was not triggered. You may
    verify that by displaying pods through `oc get pod`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们更新了构建配置，但没有任何变化。我们的Pod没有改变。这表明构建过程没有被触发。你可以通过`oc get pod`来验证这一点。
- en: If there is a need to initiate the application rebuild process, `oc start-build`
    must be run. This command starts a new build from the available build configuration.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要启动应用程序重建过程，必须运行`oc start-build`。此命令将从现有的构建配置启动一个新构建。
- en: 'Let''s list all current builds:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出所有当前的构建：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'So, recently, we initiated a build, which was completed some time ago. Let''s
    try to run the build again:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，最近我们启动了一个构建，那个构建在一段时间前完成了。让我们尝试再次运行构建：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The build creates a number of new pods representing the new version (version
    2). After some time, the pod statuses will be changed:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 构建会创建多个表示新版本（版本2）的新Pod。过一段时间后，Pod状态将会改变：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can see that `redis` is now going through Build and Deploy stages before
    the new version of `redis` container is up and running. If you wait for a minute
    or so, you should see the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`redis`现在正在经过构建和部署阶段，然后新的`redis`容器将会启动并运行。如果你等待一分钟左右，你应该能看到以下内容：
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Well, it looks like that build has been completed:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，看起来这个构建已经完成：
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we can check the version of our application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以检查应用程序的版本：
- en: '[PRE25]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, let''s make sure that the application is up and running:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们确保应用程序已启动并运行：
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We were able to initiate the build from the updated source code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够从更新后的源代码启动构建。
- en: Clear out your lab environment.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 清理你的实验环境。
- en: '[PRE27]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If you are going to continue with the following Chapter, you can leave your
    OpenShift cluster up, otherwise you can shutdown or delete vagrant VM.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算继续下一章，你可以保持你的OpenShift集群运行，否则你可以关闭或删除vagrant虚拟机。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you have learned how to adjust Dockerfile to be able to run
    in OpenShift. We also explained how to build applications from Dockerfile, how
    to use `oc new-app` to initiate a Docker build, and finally how to use `oc start-build`
    to start the new build from the existing build config.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经学习了如何调整Dockerfile，以便在OpenShift中运行。我们还解释了如何从Dockerfile构建应用程序，如何使用`oc
    new-app`启动Docker构建，以及如何使用`oc start-build`从现有构建配置启动新构建。
- en: In the following chapter, we are going to talk about the most frequently used
    application images that are already available on Docker Hub. But every now and
    then it is required to build a custom image that contains custom software or is
    aligned with company security policies/standards. We are going to learn how OpenShift
    automates the build process through the S2I build strategy, which is one of the
    main advantages of OpenShift, and how it allows you to build an image from your
    application's source code and then run it as a container.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论已经在Docker Hub上可用的最常用应用程序镜像。但时不时地，需要构建一个包含自定义软件或符合公司安全政策/标准的自定义镜像。我们将学习OpenShift如何通过S2I构建策略自动化构建过程，这是OpenShift的主要优势之一，以及它如何允许你从应用程序的源代码构建镜像，然后将其作为容器运行。
- en: Questions
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Which of the following OpenShift commands can update existing API objects?
    choose two:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些OpenShift命令可以更新现有的API对象？请选择两个：
- en: '`oc edit bc/redis`'
  id: totrans-97
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc edit bc/redis`'
- en: '`oc get bc redis`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc get bc redis`'
- en: '`oc patch bc/redis --patch ...`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc patch bc/redis --patch ...`'
- en: '`oc update bc/redis`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc update bc/redis`'
- en: '`oc build bc/redis`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc build bc/redis`'
- en: 'Which of the following commands start a new build? (choose one):'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令可以启动新的构建？（选择一个）：
- en: '`oc new-app`'
  id: totrans-103
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc new-app`'
- en: '`oc new build`'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc new build`'
- en: '`oc start-build`'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc start-build`'
- en: '`oc get build`'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc get build`'
- en: Which file must exist in the repository to perform docker build (choose one)?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仓库中必须存在哪个文件才能执行 docker build（选择一个）？
- en: '`Jenkinsfile`'
  id: totrans-108
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Jenkinsfile`'
- en: '`Dockerfile`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Dockerfile`'
- en: '`README.md`'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`README.md`'
- en: '`index.php`'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.php`'
- en: '`docker.info`'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docker.info`'
- en: Further reading
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'Here is a list of topics with links related to this chapter that you might
    want to deep dive into:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与本章节相关的主题链接，您可能希望深入了解：
- en: '**Creating New Applications at** [https://docs.openshift.com/container-platform/3.9/dev_guide/application_lifecycle/new_app.html](https://docs.openshift.com/container-platform/3.9/dev_guide/application_lifecycle/new_app.html)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在** [https://docs.openshift.com/container-platform/3.9/dev_guide/application_lifecycle/new_app.html](https://docs.openshift.com/container-platform/3.9/dev_guide/application_lifecycle/new_app.html)
    中创建新应用程序'
- en: '**How Builds Work at** [https://docs.openshift.org/latest/dev_guide/builds/index.html](https://docs.openshift.org/latest/dev_guide/builds/index.html)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建在** [https://docs.openshift.org/latest/dev_guide/builds/index.html](https://docs.openshift.org/latest/dev_guide/builds/index.html)
    中的工作原理'
