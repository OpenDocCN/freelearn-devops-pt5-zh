- en: Building Application Images from Dockerfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned what OpenShift templates are, along with
    the concepts of how to write your own templates and deploy applications from templates.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to see how OpenShift simplifies Docker image life
    cycles by providing a Docker build strategy that automates application deployment
    from source code. This chapter is a hands-on lab that describes application delivery
    using the Docker **Source-to-Image** (**S2I**) strategy.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this chapter, you will have learned how to build and deploy
    an application from Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Dockerfile development for OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building applications from Dockerfile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dockerfile build customization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter doesn''t have strict environmental restrictions; any OpenShift
    installations and development environment is supported—MiniShift, `oc cluster
    up`, standard Ansible-based production-ready deployment. It is up to you which
    version you use. However, this chapter is based on the `oc cluster up` method.
    The following Vagrantfile can be used to deploy development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The environment can be deployed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the previously listed vagrant machine is deployed, you may connect to it
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, log in as the developer user in order to be able to perform operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Dockerfile development for OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Early in this book, we explained how to containerize applications through Dockerfile
    development. This involved the `docker build` utility, which creates a ready-to-use
    container image by following Dockerfile instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, OpenShift supports existing application Dockerfiles, but
    it has special default security-related requirements that require you to modify/adjust
    application Dockerfiles to be aligned with OpenShift security standards.
  prefs: []
  type: TYPE_NORMAL
- en: The default security policy runs any containers using a random **User ID** (**UID**)
    and ignores the `USER` Dockerfile instruction. The applications are always run
    under the root user group.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the application needs read-write access, you need to configure RW access
    to the root group, which can usually be archived with the following Dockerfile
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example changes the directory and file owner to `1001` and sets
    the permission for the group to the same as for the owner. This allows applications
    to have read-write permissions under any UID.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift doesn't allow applications to bind on ports less than `1024`. So,
    it may be required to adjust the `EXPOSE` instructions in your Dockerfiles to
    be able to run applications inside OpenShift infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Dockerfile snippet provides an example of how to modify the port
    for the HTTPD image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It most cases, it will be required to adjust application configuration to listen
    on a new port. For example, for HTTPD, it is necessary to change `Listen` directive
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Building an application from Dockerfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is good practice to deploy an application in a separate namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For this lab, we are going to use the `redis` container. First, we need a Dockerfile
    with additional files located at   [https://github.com/docker-library/redis.git](https://github.com/docker-library/redis.git).
    Let''s clone this repository locally to understand its structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The repository contains a number of directories representing a particular version
    of Redis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The repository structure contains a number of directories representing a particular
    version. To build the application, we need to specify a directory that contains
    the required Dockerfile. This can be achieved by using the `--context-dir` option
    of `oc new-ap`. This will be described later.
  prefs: []
  type: TYPE_NORMAL
- en: A simple Dockerfile build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Well, we know about directory structure and want to build and deploy a Redis
    application from the available Dockerfile. Let''s focus on version 3.2\. The `oc
    new-app` may initiate a build from source code using a sub-directory. We are ready
    to initiate a simple Dockerfile build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, OpenShift created a number of objects such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`imagestream` named `debian`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buildconfig` named `redis`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deploymentconfig` named `redis`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`service` named `redis`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can run the `oc get all` command to make sure that all objects have been
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command initiated a build. OpenShift starts a `-build` pod which
    does the build. You may temporarily see that a Pod with `-build` in the name is
    in the `Running` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Docker build is controlled by a `build` config object. Build status can be
    displayed by using the `oc logs bc/<NAME>` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Another way to work on build process troubleshooting is to use `oc status`.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenShift built the Redis image from Dockerfile and uploaded it to a local
    registry. Let''s make sure that container works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this lab, we are using a simple `ping`  test to make sure that we have basic
    reachability. We use the `redis-cli` command delivered by the container.
  prefs: []
  type: TYPE_NORMAL
- en: So, it looks like our Redis application works fine and has version 3.2.11.
  prefs: []
  type: TYPE_NORMAL
- en: Dockerfile build customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw before, OpenShift can build an application from Dockerfile. Sometimes,
    application source code is updated and there is a need to initiate the build process
    again using the new source code. OpenShift supports this functionality through
    the `oc start-build` command.
  prefs: []
  type: TYPE_NORMAL
- en: During this section, we will initiate a build process using the new source code
    of the application using the image stream created recently by the `oc new-app`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: We built a Redis application from source code using a specific directory 3.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code contains another Dockerfile, which uses the newer version 4.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, imagine that we need to update the application using new code available
    in another repository or another context directory in the existing repository.
    For our particular case, it sounds like we need to change the context directory
    to `4.0` instead of `3.2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `oc new-app` command created a number of entities that control application
    build and deployment. The build process is under `build config` object control.
    We need to display this object to understand what to change to point to another
    directory in the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We highlighted a source element that specifies which directory to use during
    the build. Now, if there is a task to point to another context directory, we just
    need to update the `bc/redis` object by changing `spec.source.contextDir` in the
    object definition. This can be achieved in several ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Manually using `oc edit`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a script using `oc patch`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oc edit bc/redis` will run a text editor to modify the object. Here is an
    example of how to use the `oc patch` command to update the object content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Well, we updated our build configuration but nothing happened. Our pod has not
    been changed. This indicates that the build process was not triggered. You may
    verify that by displaying pods through `oc get pod`.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a need to initiate the application rebuild process, `oc start-build`
    must be run. This command starts a new build from the available build configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s list all current builds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'So, recently, we initiated a build, which was completed some time ago. Let''s
    try to run the build again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The build creates a number of new pods representing the new version (version
    2). After some time, the pod statuses will be changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that `redis` is now going through Build and Deploy stages before
    the new version of `redis` container is up and running. If you wait for a minute
    or so, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Well, it looks like that build has been completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can check the version of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s make sure that the application is up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We were able to initiate the build from the updated source code.
  prefs: []
  type: TYPE_NORMAL
- en: Clear out your lab environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If you are going to continue with the following Chapter, you can leave your
    OpenShift cluster up, otherwise you can shutdown or delete vagrant VM.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to adjust Dockerfile to be able to run
    in OpenShift. We also explained how to build applications from Dockerfile, how
    to use `oc new-app` to initiate a Docker build, and finally how to use `oc start-build`
    to start the new build from the existing build config.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we are going to talk about the most frequently used
    application images that are already available on Docker Hub. But every now and
    then it is required to build a custom image that contains custom software or is
    aligned with company security policies/standards. We are going to learn how OpenShift
    automates the build process through the S2I build strategy, which is one of the
    main advantages of OpenShift, and how it allows you to build an image from your
    application's source code and then run it as a container.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Which of the following OpenShift commands can update existing API objects?
    choose two:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc edit bc/redis`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc get bc redis`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc patch bc/redis --patch ...`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc update bc/redis`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc build bc/redis`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following commands start a new build? (choose one):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc new-app`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc new build`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc start-build`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc get build`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which file must exist in the repository to perform docker build (choose one)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Jenkinsfile`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Dockerfile`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`README.md`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`index.php`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`docker.info`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a list of topics with links related to this chapter that you might
    want to deep dive into:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating New Applications at** [https://docs.openshift.com/container-platform/3.9/dev_guide/application_lifecycle/new_app.html](https://docs.openshift.com/container-platform/3.9/dev_guide/application_lifecycle/new_app.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**How Builds Work at** [https://docs.openshift.org/latest/dev_guide/builds/index.html](https://docs.openshift.org/latest/dev_guide/builds/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
