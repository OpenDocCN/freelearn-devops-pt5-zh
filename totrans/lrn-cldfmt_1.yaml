- en: Introducing AWS CloudFormation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud technology enables IT staff to build virtual data centers easily enabling
    them to set up a virtual machine with specific configurations. Now, **Infrastructure
    as Code** (**IaC**) enables building a virtual data center by scripting. In this
    chapter, we'll briefly look at IaC and some terms in AWS CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing IaC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CloudFormation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudFormation templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudFormation stacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudFormation StackSets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the AWS CloudFormation console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing IaC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud technology enables you to manage servers virtually. We can set memory,
    CPU, and storage in the virtual model. To build a data center based on the cloud
    platform, you set up your resources, such as the virtual machine, virtual network,
    and applications. Sometimes, you need to reconfigure your data center design or
    rebuild it in another location. You probably perform the same actions to build
    your data center. These tasks probably make you unhappy.
  prefs: []
  type: TYPE_NORMAL
- en: IaC can be described as a programmable infrastructure that enables you to manage
    resource configurations using scripts and to automate the provisioning of the
    infrastructure in addition to deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'IaC is designed to reduce the complexity that kills efficiency in manual configuration.
    You can deploy your infrastructure code to development, testing, staging, and
    production environments. The following diagram shows the processes in IaC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: Processes in IaC'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you have deployed some resources on several machines, and then some
    machines crash due to a disaster such as a power failure. Technically, you should
    deploy all resources manually. IaC is designed to help you deploy the infrastructure
    automatically. IaC can minimize your risks while deploying a modern infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: We can deploy our infrastructure on several environments with a single IaC script
    template. This approach enables us to minimize problems on deployment. We don't
    need to worry if we want to redeploy our infrastructure, since we have our infrastructure
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudFormation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon AWS is a cloud-based platform that provides cloud services. There are
    a lot of cloud services, so we can deploy any server and any program for general
    or specific purposes. AWS CloudFormation is designed to implement IaC. You can
    write scripts to build a custom infrastructure. Once you have done so, you can
    you can deploy a template which represents Infrastructure as Code for development,
    testing, staging, and production environments.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudFormation is a solution for dynamic infrastructures. You can write
    your own infrastructure without worrying about reconfiguring and redeploying. AWS
    CloudFormation allows you to model your entire infrastructure in a text file.
    This approach can standardize your infrastructure resources across your organization
    and speed up the troubleshooting process.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudFormation helps to build and rebuild your infrastructure and applications,
    without having to perform manual actions or write custom scripts.
  prefs: []
  type: TYPE_NORMAL
- en: For further information about AWS CloudFormation, you can visit its official
    website at [https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will find a lot of information, such as features, pricing, and documentation, as
    seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: The official AWS CloudFormation website'
  prefs: []
  type: TYPE_NORMAL
- en: Currently, AWS CloudFormation is free, but the resources that you use in IaC
    scripts usually aren't. You can read the details about pricing at [https://aws.amazon.com/cloudformation/pricing/](https://aws.amazon.com/cloudformation/pricing/).
  prefs: []
  type: TYPE_NORMAL
- en: How does it work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS CloudFormation provides solutions to build infrastructure from scripts.
    You can set several resources for infrastructure design. In general, see the following
    flowchart for how to build IaC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: A flow for building AWS CloudFormation'
  prefs: []
  type: TYPE_NORMAL
- en: Start by writing scripts to build infrastructure using AWS CloudFormation; you
    should write IaC scripts in JSON, YAML, or text. After completing the scripts,
    you can upload that script file to AWS CloudFormation. You can also put it on
    AWS S3 first, so AWS CloudFormation will download it directly.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudFormation provisions a stack and then creates AWS resources based on
    your scripts. You also can set the target region for your CloudFormation stack.
  prefs: []
  type: TYPE_NORMAL
- en: You can deploy and replicate AWS resources on some regions with a single CloudFormation
    template. We can build AWS StackSets if we want to work with AWS resources in
    different regions in a single CloudFormation template.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling IaC source scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we write IaC in JSON, YAML, and text formats, we can save these script
    files and they can be stored to source control servers. You can manage script
    versions for editing based on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use Git to manage IaC scripts. Once the scripts are released, you can
    push them to AWS CloudFormation to provision your AWS resources. The following
    diagram shows IaC scripting with source control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4: IaC scripting with source-control'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram describes how to combine source-control with AWS CloudFormation.
    We write IaC scripts on the local computer. Once done, check the script into the
    source control server. If you have a testing team, your team can test the script
    with AWS CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFormation templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can develop IaC in AWS CloudFormation easily. AWS already provides a list
    of templates that we can use for our IaC design. You can write AWS CloudFormation
    scripts in JSON, YAML, and text.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, we use AWS S3 on AWS CloudFormation. We can write AWS CloudFormation
    scripts in JSON as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We also can write these IaC scripts in YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can use either JSON or YAML to write IaC scripts and you should learn the
    AWS CloudFormation API's included parameter when we use those resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, we prefer to build AWS CloudFormation visually, when we don''t know
    much about JSON or YAML. Fortunately, AWS provides the AWS CloudFormation template
    designer. We can click and drag any resource to the editor. You can see this in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: Template designer in AWS CloudFormation'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to work in Terminal mode, AWS provides the AWS CLI, which enables
    you to build AWS CloudFormation templates  using the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: AWS also provides AWS CloudFormation templates, so you don't need to spend extra
    efforts in developing CloudFormation templates. You can download these template
    samples at [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-sample-templates.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-sample-templates.html).
  prefs: []
  type: TYPE_NORMAL
- en: We will learn more about the IaC scripting included in the AWS CloudFormation
    templates in [Chapter 3](part0070.html#22O7C0-ff9c6455e1444393ad97060c22881bf4),
    *Developing AWS CloudFormation Templates*. We'll use JSON and YAML scripts to
    develop IaC. We'll also learn how to use the AWS CloudFormation template designer.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFormation stacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the resources that you want to build in the AWS environment should be defined
    in a CloudFormation template. Then, we put this template into a CloudFormation
    stack. A stack is a collection of AWS resources that you can manage as a single
    unit. You can create, update, or delete a collection of resources by creating,
    updating, or deleting stacks.
  prefs: []
  type: TYPE_NORMAL
- en: When you develop an AWS CloudFormation stack, ensure all resources with CloudFormation
    templates meet with AWS regions. Not all regions have the same resources. If not,
    you will have problems when provisioning resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, we use various resources in our infrastructure design, such as database
    clustering. In this scenario, we can develop CloudFormation nested stacks. This
    means our CloudFormation stack consists of several stacks. For instance, we draw
    a design like the one in the following diagram. The CloudFormation stack consists
    of two stacks: **B1** and **B2**. Inside the **B1 Stack**, we use three CloudFormation stacks:
    **C1**, **C2**, and **C3**. Then, we build two stacks within the **C3 Stack**,
    as shown in the following example model of AWS CloudFormation nested stacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.6: An example model of AWS CloudFormation nested stacks'
  prefs: []
  type: TYPE_NORMAL
- en: To understand AWS CloudFormation stacks, we will explore this topic in [Chapter
    2](part0048.html#1DOR00-ff9c6455e1444393ad97060c22881bf4), *Building Your First
    AWS CloudFormation Project* and [Chapter 3](part0070.html#22O7C0-ff9c6455e1444393ad97060c22881bf4),
    *Developing AWS CloudFormation Templates*. We'll review some scenarios to show
    you how to work with AWS CloudFormation stacks.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFormation StackSets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you plan to deploy AWS resources in multiple regions, you can use a CloudFormation
    StackSet. Technically, a CloudFormation StackSet is designed to enable you to
    create CloudFormation stacks in AWS accounts across regions by using a single
    AWS CloudFormation template.
  prefs: []
  type: TYPE_NORMAL
- en: 'We illustrate the processing model in a CloudFormation StackSet in the following
    diagram. In this scenario, if a StackSet is to be executed, this generates a StackSet
    instance. When the StackSet is created, it will generate stacks depending on your CloudFormation
    template. Since this is a StackSet, AWS will build stacks within its predefined
    region. The following diagram shows the processing model for a StackSet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.7: Processing model for StackSet'
  prefs: []
  type: TYPE_NORMAL
- en: When we edit our StackSet, AWS CloudFormation will update all the stacks. When
    we perform a deletion operation on a StackSet, AWS CloudFormation will delete
    all the stacks related to that StackSet.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn more about AWS CloudFormation StackSets in [Chapter 4](part0085.html#2H1VQ0-ff9c6455e1444393ad97060c22881bf4),
    *AWS CloudFormation StackSets*. Some scenarios will be provided to show you how AWS CloudFormation StackSets
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the AWS CloudFormation management console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll familiarize ourselves with the AWS CloudFormation management
    console. To work with AWS CloudFormation, you should have an active AWS account.
    You can access the AWS CloudFormation management console by opening a browser
    and navigating to [https://console.aws.amazon.com/cloudformation/](https://console.aws.amazon.com/cloudformation/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you should see AWS CloudFormation Management Console, which is shown in
    the following screenshot. You can click on the Create new stack button to create
    a stack. If you want to create a StackSet, you can click on the Create new StackSet
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8: AWS CloudFormation Management Console
  prefs: []
  type: TYPE_NORMAL
- en: If you want to build a CloudFormation script template, you can click on the Design
    template button. AWS CloudFormation will provide the CloudFormation designer editor
    to enable you to build your own infrastructure. You can see this screen shown
    in *Figure 1.5*.
  prefs: []
  type: TYPE_NORMAL
- en: You should set your working region with AWS CloudFormation. In a CloudFormation
    StackSet, we can work with different regions for the various stacks.
  prefs: []
  type: TYPE_NORMAL
- en: In the AWS CloudFormation Management Console, we can manage all the stacks and
    StackSets, including editing and deleting their resources.
  prefs: []
  type: TYPE_NORMAL
- en: Managing CloudFormation using the AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you usually prefer to work in Terminal mode, AWS provides the AWS CLI to
    manage AWS CloudFormation. You can create a stack and a StackSet from the Terminal.
    You also can update and delete your CloudFormation projects.
  prefs: []
  type: TYPE_NORMAL
- en: Some commands are defined to manage CloudFormation from the AWS CLI. You should
    use those commands if you want to work with CloudFormation. For more information
    about the AWS CLI commands for CloudFormation, check out [https://docs.aws.amazon.com/cli/latest/reference/cloudformation/index.html](https://docs.aws.amazon.com/cli/latest/reference/cloudformation/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows you how to create the CloudFormation stack from
    the AWS CLI. We will learn how to do this in [Chapter 2](part0032.html#UGI00-ff9c6455e1444393ad97060c22881bf4),
    *Building Your First AWS CloudFormation Project*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9: Managing CloudFormation using the AWS CLI'
  prefs: []
  type: TYPE_NORMAL
- en: This is the end of the first chapter. We reviewed some terms in AWS CloudFormation.
    We will learn how to use this console in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned a bit about AWS CloudFormation terms, to better understand what AWS CloudFormation
    is. Next, we will look at how to implement a simple program for IaC and provision
    it using AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is IaC?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of IaC?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the main objective of AWS CloudFormation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does AWS CloudFormation work?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you build an AWS CloudFormation template?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are infrastructure-nested stacks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we implement AWS CloudFormation StackSets?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
