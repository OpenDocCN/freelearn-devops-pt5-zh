- en: '*Chapter 6*: Kubernetes Application Configuration'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第六章*: Kubernetes 应用程序配置'
- en: This chapter describes the main configuration tools that Kubernetes provides.
    We'll start by discussing some best practices for injecting configuration into
    containerized applications. Next, we will discuss ConfigMaps, a Kubernetes resource
    aimed at providing applications with configuration data. Finally, we will cover
    Secrets, a secure way to store and provide sensitive data to applications running
    on Kubernetes. Altogether, this chapter should give you a great toolset for configuring
    your production applications on Kubernetes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了 Kubernetes 提供的主要配置工具。我们将从讨论一些将配置注入容器化应用程序的最佳实践开始。接下来，我们将讨论 ConfigMaps，这是一种
    Kubernetes 资源，旨在为应用程序提供配置数据。最后，我们将介绍 Secrets，这是在 Kubernetes 上存储和提供敏感数据给应用程序的一种安全方式。总的来说，本章将为您提供一套用于配置生产环境中
    Kubernetes 应用程序的绝佳工具。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Configuring containerized applications using best practices
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最佳实践配置容器化应用程序
- en: Implementing ConfigMaps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 ConfigMaps
- en: Using Secrets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Secrets
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to run the commands detailed in this chapter, you will need a computer
    that supports the `kubectl` command-line tool, along with a working Kubernetes
    cluster. Review [*Chapter 1*](B14790_01_Final_PG_ePub.xhtml#_idTextAnchor016),
    *Communicating with Kubernetes*, to find several methods for getting up and running
    with Kubernetes quickly, and for instructions on how to install the `kubectl`
    tool.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行本章中详细说明的命令，您需要一台支持 `kubectl` 命令行工具的计算机，以及一个正常运行的 Kubernetes 集群。请查看 [*第1章*](B14790_01_Final_PG_ePub.xhtml#_idTextAnchor016)，*与
    Kubernetes 通信*，了解快速启动 Kubernetes 的几种方法，以及如何安装 `kubectl` 工具的说明。
- en: The code used in this chapter can be found in the book's GitHub repository at
    [https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter6](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter6).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的代码可以在本书的 GitHub 仓库中找到，链接地址为 [https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter6](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter6)。
- en: Configuring containerized applications using best practices
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用最佳实践配置容器化应用程序
- en: By now, we know how to effectively deploy (as covered in [*Chapter 4*](B14790_04_Final_PG_ePub.xhtml#_idTextAnchor106),
    *Scaling and Deploying Your Application*) and expose (as covered in [*Chapter
    5*](B14790_05_Final_PG_ePub.xhtml#_idTextAnchor127), *Services and Ingress* –
    *Communicating with the outside world*) containerized applications on Kubernetes.
    This is enough to run non-trivial stateless containerized applications on Kubernetes.
    However, Kubernetes also provides additional tooling for application configuration
    and Secrets management.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了如何有效地部署（见 [*第4章*](B14790_04_Final_PG_ePub.xhtml#_idTextAnchor106)，*扩展与部署您的应用程序*）和暴露（见
    [*第5章*](B14790_05_Final_PG_ePub.xhtml#_idTextAnchor127)，*服务与 Ingress* – *与外界通信*）容器化应用程序在
    Kubernetes 上。这足以在 Kubernetes 上运行非平凡的无状态容器化应用程序。然而，Kubernetes 还提供了更多的工具来进行应用程序配置和
    Secrets 管理。
- en: 'Since Kubernetes runs containers, you could always configure your application
    to use environment variables baked into your Dockerfile. But this sidesteps some
    of the real value of an orchestrator like Kubernetes. We want to be able to change
    our application container without rebuilding a Docker image. For this purpose,
    Kubernetes gives us two configuration-focused resources: ConfigMaps and Secrets.
    Let''s first look at ConfigMaps.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Kubernetes 运行容器，您可以始终配置您的应用程序使用嵌入在 Dockerfile 中的环境变量。但这绕过了像 Kubernetes 这样的编排工具的某些实际价值。我们希望能够在不重建
    Docker 镜像的情况下更改我们的应用程序容器。为此，Kubernetes 为我们提供了两个关注配置的资源：ConfigMaps 和 Secrets。我们首先来看一下
    ConfigMaps。
- en: Understanding ConfigMaps
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 ConfigMaps
- en: When running applications in production, developers want the ability to quickly
    and easily inject application configuration information. There are many patterns
    for doing this – from using a separate configuration server that is queried, to
    using environment variables or environment files. These strategies vary in the
    security and usability they offer.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中运行应用程序时，开发人员希望能够快速、轻松地注入应用程序配置。实现这一目标的方式有很多——从使用一个单独的配置服务器进行查询，到使用环境变量或环境文件。这些策略在安全性和可用性方面各有不同。
- en: For containerized applications, environment variables are often the easiest
    way to go – but injecting these variables in a secure way can require additional
    tooling or scripts. In Kubernetes, the ConfigMap resource lets us do this in a
    flexible, easy way. ConfigMaps allow Kubernetes administrators to specify and
    inject configuration information as either files or environment variables.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于容器化应用程序，环境变量通常是最简便的方式——但以安全的方式注入这些变量可能需要额外的工具或脚本。在 Kubernetes 中，ConfigMap
    资源让我们可以以灵活、简便的方式做到这一点。ConfigMap 允许 Kubernetes 管理员指定并注入配置数据，可以是文件，也可以是环境变量。
- en: For highly sensitive information such as secret keys, Kubernetes gives us another,
    similar resource – Secrets.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像密钥这样的高度敏感信息，Kubernetes 提供了另一种类似的资源——Secrets。
- en: Understanding Secrets
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Secrets
- en: Secrets refer to additional application configuration items that need to be
    stored in a slightly more secure way – for instance, master keys to restricted
    APIs, database passwords, and more. Kubernetes provides a resource called a Secret,
    which stores application configuration information in an encoded fashion. This
    does not inherently make the Secret more secure, but Kubernetes respects the concept
    of a secret by not automatically printing secret information in the `kubectl get`
    or `kubectl describe` commands. This prevents the Secret from being accidentally
    printed to a log.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Secrets 是指需要以稍微更安全的方式存储的额外应用配置项——例如，限制 API 的主密钥、数据库密码等。Kubernetes 提供了一种叫做 Secret
    的资源，它以编码方式存储应用配置数据。这本身并不使 Secret 更加安全，但 Kubernetes 通过不自动在 `kubectl get` 或 `kubectl
    describe` 命令中打印出秘密信息来尊重保密的概念。这样可以防止 Secret 被意外记录到日志中。
- en: To ensure that Secrets are actually secret, encryption at rest must be enabled
    on your cluster for secret data – we'll review how to do this later in this chapter.
    Available from Kubernetes 1.13, this functionality lets Kubernetes administrators
    prevent Secrets from being stored unencrypted in `etcd`, and limits access to
    `etcd` admins.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保 Secrets 确实保密，必须在集群上启用静态加密来保护 secret 数据——我们将在本章稍后讨论如何做到这一点。自 Kubernetes
    1.13 起，这个功能允许 Kubernetes 管理员防止 Secrets 在 `etcd` 中以未加密形式存储，并限制 `etcd` 管理员的访问权限。
- en: Before we do a deep dive into Secrets, let's start by discussing ConfigMaps,
    which are better for non-sensitive information.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论 Secrets 之前，我们先来讨论一下 ConfigMaps，它更适合存储非敏感信息。
- en: Implementing ConfigMaps
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现 ConfigMap
- en: ConfigMaps provide an easy way to store and inject application configuration
    data for containers running on Kubernetes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigMap 提供了一种简单的方式来存储和注入运行在 Kubernetes 上的容器的应用配置数据。
- en: 'Creating a ConfigMap is simple – and they enable two possibilities for actually
    injecting the application configuration data:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 ConfigMap 很简单——它们提供了两种方式来注入应用配置数据：
- en: Injecting as an environment variable
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为环境变量注入
- en: Injecting as a file
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为文件注入
- en: While the first option operates simply using container environment variables
    in memory, the latter option touches on some facets of volumes – a Kubernetes
    storage medium that will be covered in the next chapter. We will keep the review
    short for now and use it as an introduction to volumes, which will be expanded
    on in the following chapter, [*Chapter 7*](B14790_07_Final_PG_ePub.xhtml#_idTextAnchor166),
    *Storage on Kubernetes*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然第一个选项只是通过容器环境变量在内存中操作，但后一个选项涉及到某些卷的概念——卷是 Kubernetes 的一种存储介质，将在下一章中进行详细介绍。我们现在简要回顾一下，并将其作为对卷的介绍，卷的内容将在下一章
    [*第7章*](B14790_07_Final_PG_ePub.xhtml#_idTextAnchor166) *Kubernetes 存储* 中展开。
- en: When working with ConfigMaps, it can be easier to create them using an imperative
    `Kubectl` command. There are a few possible ways to create ConfigMaps, which also
    result in differences in the way data is stored and accessed from the ConfigMap
    itself. The first way is to simply create it from a text value, as we will see
    next.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 ConfigMap 时，通过命令式的 `Kubectl` 命令来创建它可能会更简单。创建 ConfigMap 有几种可能的方法，这也会导致数据存储和访问方式的不同。第一种方式是直接从文本值创建，如我们接下来将看到的。
- en: From text values
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自文本值
- en: 'Creating a ConfigMap from a text value in a command is done as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过命令从文本值创建 ConfigMap 的方法如下：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The previous command creates a `configmap` named `myapp-config` with a single
    key, called `mycategory.mykey`, that has a value of `myvalue`. You can also create
    a ConfigMap with multiple keys and values, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令创建了一个名为 `myapp-config` 的 `configmap`，它有一个键，叫做 `mycategory.mykey`，值为 `myvalue`。你也可以创建一个包含多个键值对的
    ConfigMap，如下所示：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding command results in a ConfigMap with two values in the `data` section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将导致 ConfigMap 在 `data` 部分中包含两个值。
- en: 'To see what your ConfigMap looks like, run the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看你的 ConfigMap，运行以下命令：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will see the following output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: configmap-output.yaml
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: configmap-output.yaml
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When your ConfigMap data is long, it does not make as much sense to create it
    directly from a text value. For longer configs, we can create our ConfigMap from
    a file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的 ConfigMap 数据较长时，直接从文本值创建它并不太合适。对于较长的配置，我们可以从文件中创建 ConfigMap。
- en: From files
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从文件中
- en: 'In order to make it easier to create a ConfigMap with many different values,
    or reuse existing environment files you already have, you can create a ConfigMap
    from a file by following these steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更方便地创建包含多种不同值的 ConfigMap，或重用已有的环境文件，你可以通过以下步骤从文件中创建 ConfigMap：
- en: 'Let''s start by creating our file, which we''ll name `env.properties`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从创建文件开始，我们将其命名为 `env.properties`：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we can create our ConfigMap by running the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以通过运行以下命令来创建我们的 ConfigMap：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To check whether our `kubectl create` command correctly made our ConfigMap,
    let''s describe it using `kubectl describe`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了检查我们的 `kubectl create` 命令是否正确创建了 ConfigMap，我们可以使用 `kubectl describe` 来描述它：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This should result in the following output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会输出以下内容：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, this ConfigMap contains our text file (and the number of bytes).
    Our file in this case could be any text file – but if you know that your file
    is formatted properly as an environment file, you can let Kubernetes know that,
    in order to make your ConfigMap a bit easier to read. Let's learn how to do this.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个 ConfigMap 包含了我们的文本文件（以及字节数）。我们的文件在此情况下可以是任何文本文件——但是如果你知道你的文件已经正确格式化为环境文件，你可以告诉
    Kubernetes，这样可以让你的 ConfigMap 更容易阅读。让我们来学习如何做到这一点。
- en: From environment files
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从环境文件中
- en: If we know that our file is formatted as a normal environment file with key
    pairs, we can use a slightly different method to create our ConfigMap – the environment
    file method. This method will make our data more obvious in the ConfigMap object,
    rather than being hidden inside the file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们知道我们的文件格式是普通的环境文件，包含键值对，那么我们可以使用稍微不同的方法来创建 ConfigMap——环境文件方法。此方法会使数据在 ConfigMap
    对象中更加直观，而不是隐藏在文件内部。
- en: 'Let''s use the exact same file as before with our environment-specific creation:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用之前完全相同的文件，进行环境特定的创建：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s describe our ConfigMap using the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令来描述我们的 ConfigMap：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We get the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, by using the `-from-env-file` method, the data in the `env`
    file is easily viewable when you run `kubectl describe`. This also means we can
    mount our ConfigMap directly as environment variables – more on that shortly.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用 `-from-env-file` 方法，`env` 文件中的数据在运行 `kubectl describe` 时很容易查看。这也意味着我们可以直接将
    ConfigMap 挂载为环境变量——稍后会详细说明。
- en: Mounting a ConfigMap as a volume
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 ConfigMap 挂载为卷
- en: To consume data from a ConfigMap in a Pod, you need to mount it to the Pod in
    the spec. This mirrors (for good reason, as we'll find out) the way to mount a
    volume in Kubernetes, which is a resource that provides storage. For now, however,
    don't worry about volumes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Pod 中使用 ConfigMap 中的数据，你需要将其挂载到 Pod 的配置中。这与在 Kubernetes 中挂载卷的方式非常相似（我们稍后会明白这样做的原因），卷是一种提供存储的资源。不过现在，不必担心卷的问题。
- en: 'Let''s take a look at our Pod spec, which mounts our `my-config-map` ConfigMap
    as a volume on our Pod:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下我们的 Pod 配置，它将 `my-config-map` ConfigMap 挂载为 Pod 上的卷：
- en: pod-mounting-cm.yaml
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: pod-mounting-cm.yaml
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, our `my-config-map` ConfigMap is mounted as a volume (`my-config-volume`)
    on the `/app/config` path for our container to access. We'll get to know more
    about how this works in the next chapter on storage.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们的 `my-config-map` ConfigMap 被挂载为卷（`my-config-volume`），并通过 `/app/config`
    路径供容器访问。我们将在下一个关于存储的章节中进一步了解它是如何工作的。
- en: In some cases, you may want to mount a ConfigMap as environment variables in
    your container – we will learn how to do this next.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能希望将 ConfigMap 作为环境变量挂载到容器中——我们将在接下来学习如何做到这一点。
- en: Mounting a ConfigMap as an environment variable
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 ConfigMap 挂载为环境变量
- en: You can also mount a ConfigMap as an environment variable. This process is pretty
    similar to mounting a ConfigMap as a volume.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将 ConfigMap 作为环境变量进行挂载。这个过程与将 ConfigMap 挂载为卷非常相似。
- en: 'Let''s take a look at our Pod spec:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下我们的 Pod 配置：
- en: pod-mounting-cm-as-env.yaml
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: pod-mounting-cm-as-env.yaml
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, instead of mounting our ConfigMap as a volume, we are simply
    referencing it in a container environment variable – `MY_ENV_VAR`. To do this,
    we need to use `configMapRef` in our `valueFrom` key and reference the name of
    our ConfigMap as well as the key to look at inside the ConfigMap itself.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们没有将 ConfigMap 挂载为卷，而是通过容器环境变量 `MY_ENV_VAR` 来引用它。为了做到这一点，我们需要在 `valueFrom`
    键中使用 `configMapRef`，并引用我们的 ConfigMap 的名称以及要查看的键。
- en: As we mentioned at the beginning of the chapter in the *Configuring containerized
    applications using best practices* section, ConfigMaps are not secure by default,
    and their data is stored as plaintext. For an added layer of security, we can
    use Secrets instead of ConfigMaps.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在本章开始时的 *使用最佳实践配置容器化应用程序* 部分所提到的，ConfigMaps 默认不安全，它们的数据以明文形式存储。为了增加安全性，我们可以使用
    Secrets 替代 ConfigMaps。
- en: Using Secrets
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Secrets
- en: Secrets work very similarly to ConfigMaps, except that they are stored as encoded
    text (specifically, Base64) instead of plaintext.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Secrets 的工作方式与 ConfigMaps 非常相似，不同之处在于它们以编码文本（具体来说是 Base64）而非明文形式存储。
- en: Creating a Secret is therefore very similar to creating a ConfigMap, with a
    few key differences. For starters, creating a Secret imperatively will automatically
    Base64-encode the data in the Secret. First, let's look at creating a Secret imperatively
    from a pair of files.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，创建 Secret 与创建 ConfigMap 非常相似，但有一些关键的不同之处。首先，命令式创建 Secret 会自动对 Secret 中的数据进行
    Base64 编码。首先，让我们看看如何通过一对文件命令式地创建 Secret。
- en: From files
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从文件
- en: 'First, let''s try creating a Secret from a file (this also works with multiple
    files). We can do this using the `kubectl create` command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们尝试从文件创建一个 Secret（这对于多个文件也有效）。我们可以使用 `kubectl create` 命令来实现：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This should result in the following output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会产生以下输出：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s see what our Secret looks like using `kubectl describe`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过 `kubectl describe` 查看我们的 Secret 长什么样：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This command should result in the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令应该会产生以下输出：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, the `describe` command shows the number of bytes contained in
    the Secret, and its type `Opaque`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`describe` 命令显示了 Secret 中包含的字节数，以及它的类型 `Opaque`。
- en: Another way to create a Secret is to manually create it using a declarative
    approach. Let's look at how to do that next.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Secret 的另一种方式是使用声明式方法手动创建它。接下来让我们看看如何操作。
- en: Manual declarative approach
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动声明式方法
- en: When creating a Secret declaratively from a YAML file, you'll need to pre-encode
    the data to be stored using an encoding utility, such as the `base64` pipe on
    Linux.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当从 YAML 文件声明式地创建 Secret 时，您需要使用编码工具（如 Linux 上的 `base64` 管道）预先对要存储的数据进行编码。
- en: 'Let''s encode our password here using the Linux `base64` command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里使用 Linux 的 `base64` 命令对我们的密码进行编码：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we can declaratively create our Secret using a Kubernetes YAML spec, which
    we can name `secret.yaml`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 Kubernetes YAML 规格声明性地创建我们的 Secret，并将其命名为 `secret.yaml`：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Our `secret.yaml` spec contains the Base64-encoded string that we created.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `secret.yaml` 规格包含我们创建的 Base64 编码字符串。
- en: 'To create the Secret, run the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 Secret，请运行以下命令：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now you know how to create Secrets. Next, let's learn how to mount a Secret
    for use by a Pod.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何创建 Secrets。接下来，让我们学习如何将 Secret 挂载供 Pod 使用。
- en: Mounting a Secret as a volume
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Secret 挂载为卷
- en: Mounting Secrets is very similar to mounting ConfigMaps. First, let's take a
    look at how to mount a Secret to a Pod as a volume (file).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 挂载 Secrets 与挂载 ConfigMaps 非常相似。首先，让我们看看如何将 Secret 作为卷（文件）挂载到 Pod。
- en: 'Let''s take a look at our Pod spec. In this case, we are running an example
    application in order to test our Secret. Here is the YAML:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下我们的 Pod 规格。在这个例子中，我们运行一个示例应用程序来测试我们的 Secret。这里是 YAML：
- en: pod-mounting-secret.yaml
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: pod-mounting-secret.yaml
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The one difference from ConfigMap here is that we specify `readOnly` on the
    volume to prevent any changes to the Secret while the Pod is running. Everything
    else is the same as far as how we are mounting the Secret.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与 ConfigMap 的区别在于，我们在卷上指定了 `readOnly`，以防止 Pod 运行时对 Secret 进行任何更改。其他方面与挂载 Secret
    的方式相同。
- en: Again, we will review volumes in depth in the next chapter, [*Chapter 7*](B14790_07_Final_PG_ePub.xhtml#_idTextAnchor166),
    *Storage on Kubernetes*, but for a simple explanation, volumes are a way to add
    storage to your Pods. In this example, we mounted our volume, which you can consider
    a filesystem, to our Pod. Our Secret is then created as a file in the filesystem.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在下一章节[*第 7 章*](B14790_07_Final_PG_ePub.xhtml#_idTextAnchor166)，*在 Kubernetes
    上存储*中，我们将深入研究卷。
- en: Mounting a Secret as an environment variable
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Secret 作为环境变量挂载
- en: Similar to file mounting, we can mount our Secret as an environment variable
    in much the same way that ConfigMap mounting works.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于文件挂载，我们可以像 ConfigMap 挂载一样将我们的 Secret 作为环境变量挂载。
- en: 'Let''s take a look at another Pod YAML. In this case, we will mount our Secret
    as an environment variable:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一个 Pod YAML。在这种情况下，我们将把我们的 Secret 作为环境变量挂载：
- en: pod-mounting-secret-env.yaml
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: pod-mounting-secret-env.yaml
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'After creating the preceding Pod with `kubectl apply`, let''s run a command
    to look into our Pod to see if the variable was properly initialized. This works
    exactly the same way as `docker exec`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `kubectl apply` 创建了前述 Pod 后，让我们运行一个命令来查看我们的 Pod 是否正确初始化了该变量。这与 `docker exec`
    的操作方式完全相同：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It works! You should now have a good understanding of how to create, mount,
    and use ConfigMaps and Secrets.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 它起作用了！您现在应该对如何创建、挂载和使用 ConfigMaps 和 Secrets 有了很好的理解。
- en: As the final topic concerning Secrets, we will learn how to create secure, encrypted
    Secrets using the Kubernetes `EncryptionConfig`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 作为关于 Secrets 的最后一个话题，我们将学习如何使用 Kubernetes 的 `EncryptionConfig` 创建安全的加密 Secrets。
- en: Implementing encrypted Secrets
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现加密 Secrets
- en: 'Several managed Kubernetes services (including Amazon''s `etcd` data at rest
    – so you don''t need to do anything in order to implement encrypted Secrets. Cluster
    provisioners such as Kops have a simple flag (such as `encryptionConfig: true`).
    But if you''re creating your cluster *the hard way*, you''ll need to start the
    Kubernetes API server with a flag, `--encryption-provider-config`, and an `EncryptionConfig`
    file.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '几个托管的 Kubernetes 服务（包括亚马逊的 `etcd` 数据在静止时 - 因此您不需要执行任何操作来实现加密 Secrets。集群提供者如
    Kops 有一个简单的标志（例如 `encryptionConfig: true`）。但是，如果您采用 *硬核方式* 创建集群，则需要使用标志 `--encryption-provider-config`
    和一个 `EncryptionConfig` 文件启动 Kubernetes API 服务器。'
- en: Important note
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Creating a cluster completely from scratch is outside the scope of this book
    (take a look at *Kubernetes The Hard Way* for a great guide on that, at [https://github.com/kelseyhightower/kubernetes-the-hard-way](https://github.com/kelseyhightower/kubernetes-the-hard-way)).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 完全从头开始创建一个集群超出了本书的范围（请查看 *Kubernetes The Hard Way*，其中有一个很好的指南，网址为 [https://github.com/kelseyhightower/kubernetes-the-hard-way](https://github.com/kelseyhightower/kubernetes-the-hard-way))。
- en: 'For a quick look at how encryption is handled, take a look at the following
    `EncryptionConfiguration` YAML, which is passed to `kube-apiserver` on start:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 想要快速了解加密如何处理，请查看以下 `EncryptionConfiguration` YAML，它在启动时传递给 `kube-apiserver`：
- en: encryption-config.yaml
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: encryption-config.yaml
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding `EncryptionConfiguration` YAML takes a list of the resources
    that should be encrypted in `etcd`, and one or more providers that can be used
    to encrypt data. The following providers are allowed as of Kubernetes `1.17`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 前述的 `EncryptionConfiguration` YAML 获取了应在 `etcd` 中加密的资源列表，以及可用于加密数据的一个或多个提供者。截至
    Kubernetes `1.17`，允许使用以下提供者：
- en: '**Identity**: No encryption.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Identity**：无加密。'
- en: '**Aescbc**: The recommended encryption provider.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Aescbc**：推荐的加密提供者。'
- en: '**Secretbox**: Faster than Aescbc, and newer.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Secretbox**：比 Aescbc 更快，也更新。'
- en: '**Aesgcm**: Note that you will need to implement key rotation yourself with
    Aesgcm.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Aesgcm**：请注意，您需要自行实现 Aesgcm 的密钥轮换。'
- en: '**Kms**: Used with a third-party Secrets store, such as Vault or AWS KMS.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kms**：与 Vault 或 AWS KMS 等第三方 Secrets 存储一起使用。'
- en: To see the full list, see https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/#providers.
    When multiple providers are added to the list, Kubernetes will use the first configured
    provider to encrypt objects. When decrypting, Kubernetes will go down the list
    and attempt decryption with each provider – if none work, it will return an error.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看完整列表，请参阅 https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/#providers。当列表中添加多个提供者时，Kubernetes
    将使用第一个配置的提供者来加密对象。在解密时，Kubernetes 将逐个尝试使用每个提供者解密 - 如果都不起作用，将返回错误。
- en: Once we have created a secret (look at any of our previous examples of how to
    do so), and our `EncryptionConfig` is active, we can check whether our Secrets
    are actually encrypted.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了一个 secret（可以参考我们之前的任何示例），并且我们的 `EncryptionConfig` 是激活的，我们就可以检查我们的 Secrets
    是否真正加密了。
- en: Checking whether your Secrets are encrypted
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查你的 Secrets 是否已加密
- en: 'The easiest way to check whether your secret is actually encrypted in `etcd`
    is to fetch the value directly from `etcd` and check the encryption prefix:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的 secret 是否真正加密在 `etcd` 中的最简单方法是直接从 `etcd` 获取值并检查加密前缀：
- en: 'First, let''s go ahead and make a secret key using `base64`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们使用 `base64` 创建一个 secret 密钥：
- en: '[PRE24]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a file called `secret_to_test.yaml` with the following content:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `secret_to_test.yaml` 的文件，内容如下：
- en: '[PRE25]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the Secret:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Secret：
- en: '[PRE26]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With our Secret created, let''s check if it is encrypted in `etcd` by directly
    querying it. You shouldn''t need to directly query `etcd` very often, but if you
    have access to the certificates used to bootstrap the cluster, it is an easy process:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建好 Secret 后，让我们通过直接查询它来检查它是否已在 `etcd` 中加密。你不应该经常直接查询 `etcd`，但如果你有访问用于引导集群的证书，这是一个简单的过程：
- en: '[PRE27]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, check to see if the Secret is correctly decrypted (it will still be encoded)
    via `kubectl`:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，检查一下 Secret 是否已经正确解密（它仍然是编码过的），通过 `kubectl` 来查看：
- en: '[PRE28]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output should be `myencsecret: c2VjcmV0dG90ZXN0`, which is our unencrypted,
    encoded Secret value:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '输出应该是 `myencsecret: c2VjcmV0dG90ZXN0`，这是我们未加密的、编码后的 Secret 值：'
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Success!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！
- en: We now have encryption running on our cluster. Let's find out how to remove
    it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在集群中运行加密了。让我们找出如何移除它。
- en: Disabling cluster encryption
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用集群加密
- en: We can also remove encryption from our Kubernetes resources fairly easily.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以相对容易地从我们的 Kubernetes 资源中移除加密。
- en: First, we need to restart the Kubernetes API server with a blank encryption
    configuration YAML. If you self-provisioned your cluster, this should be easy,
    but on EKS or AKS, this isn't possible manually. You'll need to follow the cloud
    provider-specific documentation on how to disable encryption.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要使用一个空白的加密配置 YAML 文件重新启动 Kubernetes API 服务器。如果你是自行搭建的集群，这应该比较容易，但在 EKS
    或 AKS 上，手动操作是不可能的。你需要按照云服务提供商的特定文档来禁用加密。
- en: 'If you''ve self-provisioned your cluster or used a tool such as Kops or Kubeadm,
    then you can restart your `kube-apiserver` process on all master nodes with the
    following `EncryptionConfiguration`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是自行搭建集群或使用了 Kops 或 Kubeadm 等工具，那么你可以在所有主节点上重新启动 `kube-apiserver` 进程，并使用以下
    `EncryptionConfiguration`：
- en: encryption-reset.yaml
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: encryption-reset.yaml
- en: '[PRE30]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Important note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that the identity provider does not need to be the only provider listed,
    but it does need to be first, since as we mentioned previously, Kubernetes uses
    the first provider to encrypt new/updated objects in `etcd`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，身份提供者不需要是唯一列出的提供者，但它需要是第一个，因为正如我们之前提到的，Kubernetes 使用第一个提供者来加密 `etcd` 中的新对象或更新对象。
- en: 'Now, we will manually recreate all our Secrets, upon which point they will
    automatically use the identity provider (unencrypted):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将手动重新创建所有的 Secrets，到时它们将自动使用身份提供者（未加密）：
- en: '[PRE31]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: At this point, all of our Secrets are unencrypted!
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们所有的 Secrets 都是未加密的！
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the methods Kubernetes provides for injecting
    application configuration. First, we looked at some best practices for configuring
    containerized applications. Then, we reviewed the first method that Kubernetes
    gives us, ConfigMaps, along with several options for creating and mounting them
    to Pods. Finally, we looked at Secrets, which when encrypted are a more secure
    way to handle sensitive configurations. By now, you should have all the tools
    you need to provide secure and insecure configuration values to your application.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了 Kubernetes 提供的注入应用配置的方法。首先，我们回顾了一些配置容器化应用的最佳实践。接着，我们复习了 Kubernetes
    提供的第一个方法——ConfigMaps，并介绍了如何创建和挂载它们到 Pods。最后，我们介绍了 Secrets，在加密后，它们是一种更安全的方式来处理敏感配置。现在，你应该已经掌握了为应用提供安全和不安全配置值所需的所有工具。
- en: In the next chapter, we'll delve into a topic we already touched on by mounting
    our Secrets and ConfigMaps – the Kubernetes volume resource and, more generally,
    storage on Kubernetes.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨一个我们已经触及过的主题——挂载 Secrets 和 ConfigMaps——Kubernetes 卷资源，以及更广泛的 Kubernetes
    存储。
- en: Questions
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the differences between Secrets and ConfigMaps?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Secrets 和 ConfigMaps 之间有哪些区别？
- en: How are Secrets encoded?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Secrets 是如何编码的？
- en: What is the major difference between creating a ConfigMap from a regular file,
    and creating one from an environment file?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从普通文件创建 ConfigMap 和从环境文件创建 ConfigMap 之间的主要区别是什么？
- en: How can you make Secrets secure on Kubernetes? Why aren't they secure by default?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 Kubernetes 上保证 Secrets 的安全？为什么它们默认情况下不安全？
- en: Further reading
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Info on data encryption configuration for Kubernetes can be found in the official
    documentation at [https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 Kubernetes 数据加密配置的信息可以在官方文档中找到，网址是 [https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)。
