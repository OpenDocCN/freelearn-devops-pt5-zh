- en: '*Chapter 16*'
  prefs: []
  type: TYPE_NORMAL
- en: Next Steps with Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve made it to the last chapter of this book, and you’ve stuck with it until
    the end! In this chapter, we will look at the Moby Project and how you can contribute
    to Docker, as well as to the community. We will then finish this chapter with
    a quick overview of the Cloud Native Computing Foundation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Moby Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributing to Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cloud Native Computing Foundation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Moby Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the announcements made at DockerCon 2017 was the Moby Project. When this
    project was announced, I had a few questions about what the project was from work
    colleagues, because on the face of it, Docker had appeared to have released another
    container system.
  prefs: []
  type: TYPE_NORMAL
- en: 'I answered with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The Moby Project is the open source framework created by Docker (the company)
    that allows it, and anyone else who wishes to contribute to the project, to assemble
    container systems “without having to reinvent the wheel”.
  prefs: []
  type: TYPE_NORMAL
- en: Think of the framework as a set of building blocks made up of dozens of components
    that allow you assemble your own custom container platform. The Moby project is
    used to create the open source community edition of Docker and the commercially
    supported Docker Enterprise edition.
  prefs: []
  type: TYPE_NORMAL
- en: 'For anyone who asks for an example of a similar project that combines a bleeding-edge
    version, a stable open source release, and an enterprise supported version, I
    explain what Red Hat does with Red Hat Enterprise Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: Think of it like the approach Red Hat have taken with Red Hat Enterprise Linux.
    You have Fedora, which is the bleeding-edge version development playground for
    Red Hat’s operating system developers to introduce new packages and features,
    and also to remove old, outdated components.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, Fedora is a year or two ahead of the features found in Red Hat Enterprise
    Linux, which is the commercially supported long-term release based on the work
    done in the Fedora project; as well as this release, you also have the community
    support version in the form of CentOS.
  prefs: []
  type: TYPE_NORMAL
- en: You may be thinking to yourself, *why has this only been mentioned right at
    the very end of this book?* The project isn’t really designed for end users. It
    is intended for use by software engineers, integrators, and enthusiasts looking
    to experiment with, invent, and build systems based on containers – which is not
    necessarily Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, due changes at Docker (the company) with the Docker
    Enterprise sale to Mirantis and Docker refocusing their attention back onto developers,
    there are talks of moving the Moby code back to Docker, so I will not go into
    any more detail about the Moby Project as it is likely to change by the time you
    read this; instead, I would recommend bookmarking the following pages to keep
    up to date with this how the project develops:'
  prefs: []
  type: TYPE_NORMAL
- en: The project’s main website, at [https://mobyproject.org/](https://mobyproject.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moby Project GitHub pages, at [https://github.com/moby/](https://github.com/moby/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Moby Project Twitter account, a good source of news and links to how-tos,
    at [https://twitter.com/moby/](https://twitter.com/moby/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Discussion around moving Moby back to Docker: [https://github.com/moby/moby/issues/40222](https://github.com/moby/moby/issues/40222)
    and [https://www.theregister.com/2019/11/22/moby_docker_naming/](https://www.theregister.com/2019/11/22/moby_docker_naming/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributing to Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, you want to help contribute to Docker? Do you have a great idea that you
    would like to see in Docker or one of its components? Let’s get you the information
    and tools that you need to do that. If you aren’t a programmer-type person, there
    are other ways you can help contribute as well. Docker has a massive audience,
    and another way you can help contribute is to help with supporting other users
    with their services.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s learn how you can do that as well.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing to the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the biggest ways you can contribute to Docker is by helping with the
    Moby code, as this is the upstream project that Docker is based on.
  prefs: []
  type: TYPE_NORMAL
- en: Since Moby is open source, you can download the code to your local machine and
    work on new features and present them as pull requests back to Moby. They will
    then get reviewed on a regular basis, and if they feel what you have contributed
    should be in the service, they will approve the pull request. This can be very
    humbling when it comes to knowing that something you have written has been accepted.
  prefs: []
  type: TYPE_NORMAL
- en: 'You first need to know how you can get set up to contribute: this is pretty
    much everything for Docker ([https://github.com/docker/](https://github.com/docker/))
    and Moby Project ([https://github.com/moby/](https://github.com/moby/)).'
  prefs: []
  type: TYPE_NORMAL
- en: But how do we go about getting set up to help contribute? The best place to
    start is by following the guide that can be found on the official Moby documentation
    at [https://github.com/moby/moby/blob/master/CONTRIBUTING.md](https://github.com/moby/moby/blob/master/CONTRIBUTING.md).
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may have already guessed, you do not need much to get a development
    environment up and running as a lot of development is done within containers.
    For example, other than having a GitHub account, Moby lists the following three
    pieces of software as the bare minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git: [https://git-scm.com/](https://git-scm.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make: [https://www.gnu.org/software/make/](https://www.gnu.org/software/make/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker: If you made it this far, you shouldn’t need a link'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more details on how to prepare your own Docker development for
    Mac and Linux at [https://github.com/moby/moby/blob/master/docs/contributing/software-required.md](https://github.com/moby/moby/blob/master/docs/contributing/software-required.md)
    and for Windows at [https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md](https://github.com/moby/moby/blob/master/docs/contributing/software-req-win.md).
  prefs: []
  type: TYPE_NORMAL
- en: To be a successful open source project, there have to be some community guidelines.
    I recommend reading through the excellent quick start guide that can be found
    at https://github.com/moby/moby/blob/master/CONTRIBUTING.md#moby-community-guidelines
    as well as the more detailed contribution workflow documentation at [https://github.com/moby/moby/blob/master/docs/contributing/who-written-for.md](https://github.com/moby/moby/blob/master/docs/contributing/who-written-for.md).
  prefs: []
  type: TYPE_NORMAL
- en: Offering Docker support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also contribute to Docker by other means beyond contributing to the
    Docker code or feature sets. You can help by using the knowledge you have obtained
    to help others in their support channels. The community is very open, and someone
    is always willing to help.
  prefs: []
  type: TYPE_NORMAL
- en: I find it of great help when I run into something and I am found scratching
    my head. It’s also nice to get help but to also contribute to others; this is
    a nice give and take. It also is a great place to harvest ideas for you to use.
    You can see what questions others are asking based on their setups and it could
    spur ideas that you may want to think about using in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: You can also follow the GitHub issues that are brought up regarding the services.
    These could be feature requests and how Docker may implement them, or they could
    be issues that have cropped up through the use of services. You can help test
    out the issues that others are experiencing to see whether you can replicate the
    issue or whether you find a possible solution to their issue.
  prefs: []
  type: TYPE_NORMAL
- en: Docker has a very active community that can be found at [https://www.docker.com/docker-community](https://www.docker.com/docker-community);
    here, you will not only be able to see the latest community news and events, but
    you will also be able to chat with Docker users and developers in their Slack
    channels. At the time of writing this book, there are over 80 channels covering
    all sorts of topics, such as Docker for Mac, Docker for Windows, Alpine Linux,
    Swarm, Storage, and Network to name but a few, with hundreds of active users at
    any one time.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there are also the Docker forums, which can be found at [https://forums.docker.com/](https://forums.docker.com/).
    These are a good source if you want to search for topics/problems or keywords.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Docker Community is governed by a code of conduct that covers both how
    their staff and community as a whole should act. It is open source and licensed
    under the Creative Commons Attribution 3.0, and states the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We are dedicated to providing a harassment­-free experience for everyone, and
    we do not tolerate harassment of participants in any form. We ask you to be considerate
    of others and behave professionally and respectfully to all other participants.
    This code and related procedures also apply to unacceptable behavior occurring
    outside the scope of community activities, in all community venues— online and
    in-person— as well as in all one-on-one communications, and anywhere such behavior
    has the potential to adversely affect the safety and well-being of community members.
    Exhibitors, speakers, sponsors, staff and all other attendees at events organized
    by Docker, Inc (DockerCon, meetups, user groups) or held at Docker, Inc facilities
    are subject to these Community Guidelines and Code of Conduct.
  prefs: []
  type: TYPE_NORMAL
- en: Diversity and inclusion make the Docker community strong. We encourage participation
    from the most varied and diverse backgrounds possible and want to be very clear
    about where we stand.
  prefs: []
  type: TYPE_NORMAL
- en: Our goal is to maintain a safe, helpful, and friendly Docker community for everyone,
    regardless of experience, gender identity and expression, sexual orientation,
    disability, personal appearance, body size, race, ethnicity, age, religion, nationality,
    or other protected categories under applicable law.
  prefs: []
  type: TYPE_NORMAL
- en: The full code of conduct can be found at [https://github.com/docker/code-of-conduct/](https://github.com/docker/code-of-conduct/).
  prefs: []
  type: TYPE_NORMAL
- en: Other contributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are other ways to contribute to Docker as well. You can do things such
    as promoting the service and gathering interest at your institution. You can start
    this communication through your own organization’s means of communications, whether
    that be email distribution lists, group discussions, IT roundtables, or regularly
    scheduled meetings.
  prefs: []
  type: TYPE_NORMAL
- en: You can also schedule meetups within your organization to get people talking.
    These meetups are designed to not only include your organization, but the city
    or town members that your organization is in, in order to get more widespread
    communication and promotion of the services.
  prefs: []
  type: TYPE_NORMAL
- en: You can search whether there are already meetups in your area by visiting [https://www.docker.com/community/meetup-groups/](https://www.docker.com/community/meetup-groups/).
  prefs: []
  type: TYPE_NORMAL
- en: The Cloud Native Computing Foundation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed The Cloud Native Computing Foundation briefly in [*Chapter 11*](B15659_11_Final_JM_ePub.xhtml#_idTextAnchor294),
    *Docker and Kubernetes*. The Cloud Native Computing Foundation, or CNCF for short,
    was founded to provide a vendor-neutral home for projects that allow you to manage
    your containers and microservices architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Its membership includes Docker, Amazon Web Services, Google Cloud, Microsoft
    Azure, Red Hat, Oracle, VMWare, and Digital Ocean, to name a few. In June 2020,
    the Linux Foundation reported that CNCF had 452 members. These members not only
    contribute projects but also engineering time, code, and resources.
  prefs: []
  type: TYPE_NORMAL
- en: Graduated projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the time of writing this book, there are ten graduated projects, some of
    which we have discussed in previous chapters. The two which have already covered
    are also the most well-known out of the ten projects that are maintained by the
    foundation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kubernetes** ([https://kubernetes.io](https://kubernetes.io)): This was the
    first project to be donated to the Foundation. As we have already mentioned, it
    was originally developed by Google and now counts more than 2,300 contributors
    across members of the foundation as well as the open source community.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prometheus** ([https://prometheus.io](https://prometheus.io)): This project
    was donated to the foundation by SoundCloud. As we saw in [*Chapter 15*](B15659_15_Final_JM_ePub.xhtml#_idTextAnchor823),
    *Docker Workflows*, it is a real-time monitoring and alerting system that’s backed
    by a powerful time-series database engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is also the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Envoy** ([https://www.envoyproxy.io/](https://www.envoyproxy.io/)): Originally
    created inside Lyft and used companies such as Apple, Netflix, and Google, Envoy
    is a highly optimized service mesh that provides load balancing, tracing, and
    observability of the database and network activity across your environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CoreDNS** ([https://coredns.io/](https://coredns.io/)): This is a small,
    flexible, extendable, and highly optimized DNS server that’s written in Go and
    designed from the ground up to run in an infrastructure that can be running thousands
    of containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containerd** ([https://containerd.io/](https://containerd.io/)): We briefly
    mentioned Containerd in [*Chapter 1*](B15659_01_Final_JM_ePub.xhtml#_idTextAnchor046),
    *Docker Overview*, as being one of the open source projects that Docker has been
    working on, and we also used it in [*Chapter 12*](B15659_12_Final_JM_ePub.xhtml#_idTextAnchor394),
    *Discovering more Kubernetes options*. It is a standard container runtime that
    allows developers to embed a runtime that can manage both Docker- and also OCI-compliant
    images in their platforms or applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fluentd** ([https://www.fluentd.org/](https://www.fluentd.org/)): This tool
    allows you to collect log data from a large number of sources and then route the
    logging data to a number of log management, database, archiving, and alerting
    systems such as Elastic Search, AWS S3, MySQL, SQL Server, Hadoop, Zabbix, and
    DataDog, to name a few.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jaeger** ([https://www.jaegertracing.io/](https://www.jaegertracing.io/)):
    This is a fully distributed tracing system that was originally developed by Uber
    to monitor its extensive microservices environment. Now in use by companies such
    as Red Hat, it features a modern UI and native support for OpenTracing and various
    backend storage engines. It has been designed to integrate with other CNCF projects
    such as Kubernetes an[d Prometheus.](https://vitess.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Vite**](https://vitess.io/)**ss** ([https://vitess.io/](https://vitess.io/)):
    This has been a core component of the MySQL database infrastructure of YouTube
    since 2011\. It is a clustering system that horizontally scales MyS[QL via sharding.](https://helm.sh/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Helm** ([https://helm.sh/](https://helm.sh/)): Built for Kubernetes, Helm
    is a package manager that allows users to package their Kubernetes applications
    in an easily distributable format, and has quickly become a standard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To graduate, a project must have done the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adopted the CNCF code of conduct, which is similar to the one published by Docker.
    The full code of conduct can be found at [https://github.com/cncf/foundation/blob/master/code-of-conduct.md](https://github.com/cncf/foundation/blob/master/code-of-conduct.md).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtained a **Linux Foundation** (**LF**) **Core Infrastructure Initiative**
    (**CII**) Best Practices badge, which demonstrates that the project is being developed
    using an established set of best practices – the full criteria of which can be
    found at [https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/criteria.md](https://github.com/coreinfrastructure/best-practices-badge/blob/master/doc/criteria.md).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acquired at least two organizations with committers to the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defined the committer process and project governance publicly via `GOVERNANCE.md`
    and `OWNERS.md` files in the project’s repo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publicly listed the projects adopters in an `ADOPTERS.md` file or by logos on
    the project’s website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Received a super majority vote from the **Technical Oversight Committee** (**TOC**).
    You can find out more about the committee at [https://github.com/cncf/toc](https://github.com/cncf/toc).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is also another project status, which is where the majority of projects
    currently are.
  prefs: []
  type: TYPE_NORMAL
- en: Incubating projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Projects at the incubating stage should eventually have a graduated status.
    The following projects have all done the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Demonstrated that the project is in use by a minimum of three independent end
    users (not the originator of the project)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gained a healthy number of contributors, both internally and externally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstrated growth and a good level of maturity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TOC is heavily involved in working with projects to ensure that the levels
    of activity are enough to meet the preceding criteria since the metrics can vary
    from project to project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current list of projects is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenTracing** ([https://opentracing.io/](https://opentracing.io/)): One of
    two tracing projects that now come under the CNCF umbrella, the other being Jaeger.
    Rather than being an application, you download and use it as a set of libraries
    and APIs that let you build behavioral tracking and monitoring into your microservices-based
    applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**gRPC** ([https://grpc.io](https://grpc.io)): Like Kubernetes, gRPC was donated
    to the CNCF by Google. It is an open source, extendable, and performance-optimized
    RPC framework, and is already in production at companies such as Netflix, Cisco,
    and Juniper Networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CNI** ([https://github.com/containernetworking](https://github.com/containernetworking)):
    **CNI**, which is short for **Container Networking Interface**, is again not something
    you download and use. Instead, it is a standard for network interfaces that’s
    designed to be embedded into container runtimes, such as Kubernetes and Mesos.
    Having a common interface and set of APIs allows more consistent support of advanced
    network functionality in these runtimes via third-party plugins and extensions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notary** ([https://github.com/theupdateframework/notary](https://github.com/theupdateframework/notary)):
    This project was originally written by Docker and is an implementation of TUF,
    which we will cover next. It has been designed to allow developers to sign their
    container images by giving them a cryptographic tool that provides a mechanism
    to verify the provenance of their container images and content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TUF** ([https://theupdateframework.github.io](https://theupdateframework.github.io)
    ): **The Update Framework** (**TUF**) is a standard that allows software products,
    via the use of cryptographic keys, to protect themselves during installation and
    updates. It was developed by the NYU School of Engineering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NATS** (https://nats.io): Here, we have a messaging system that has been
    designed for environments running microservices or architectures supporting IoT
    devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linkerd** ([https://linkerd.io](https://linkerd.io)): Built by Twitter, Linkerd
    is a service mesh that has been designed to scale and cope with tens of thousands
    of secure requests per second.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rook** ([https://rook.io](https://rook.io)): This focuses on providing an
    orchestration layer for managing Ceph, Red Hat’s distributed storage system, among
    others on Kubernetes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Harbor** ([https://goharbor.io/](https://goharbor.io/)): This is an open
    source image registry that focuses on security and access with inbuilt imaging
    scanning, RBAC controls, and image signing. It was originally developed by VMWare.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**etcd** ([https://etcd.io/](https://etcd.io/)): This is a simple distributed
    key/value store with a REST API designed to be low latency, and it uses the raft
    co[nsensus algorithm.](https://www.openpolicyagent.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Open Policy A**](https://www.openpolicyagent.org/)**gent** ([https://www.openpolicyagent.org/](https://www.openpolicyagent.org/)):
    This is a unified toolset and framework for policy across your cloud-native stack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cri-o** ([https://cri-o.io/](https://cri-o.io/)): This is a lightweight container
    runtime built for Kubernetes; it allows you to run any OCI-compliant container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloudevents** ([https://cloudevents.io/](https://cloudevents.io/)): This
    is a specification for describing event data in a common way. There are also SDKs
    for Go, JavaScript, Java, C#, Ruby, and Python so you can easily introduce the
    specification in your own projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Falco** ([https://falco.org/](https://falco.org/)): Falco provides a cloud-native
    runtime security engine that parses Linux system calls from the kernel as they
    are executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dragonfly** ([https://d7y.io/en-us/](https://d7y.io/en-us/)): This is an
    open source P2P-based image and file distribution system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have used a few of these projects in various chapters of this book, and I
    am sure that other projects will be of interest to you as you look to solve problems
    such as routing to your containers and monitoring your application within your
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: The CNCF landscape
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CNCF provides an interactive map of all of the projects managed by them and
    their members, and can be found at [https://landscape.cncf.io/](https://landscape.cncf.io/).
    One of the key takeaways is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**You are viewing 1,403 cards with a total of 2,263,137 stars, a market cap
    of $16.98T, and funding of $66.05B**.'
  prefs: []
  type: TYPE_NORMAL
- en: While I am sure you will agree that these are some very impressive figures,
    what is the point of this? Thanks to the work of the CNCF, we have projects, such
    as Kubernetes, that are providing a standardized set of tools, APIs, and approaches
    for working across multiple cloud infrastructure providers and also on-premise
    and bare metal services—providing the building blocks for you to create and deploy
    your own highly available, scalable, and performant container and microservice
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope that this chapter has given you an idea about the next steps you can
    take in your container journey. One of the things I have found is that while it
    is easy to simply use these services, you get a lot more out of it by becoming
    a part of the large, friendly, and welcoming communities of developers and other
    users, who are just like you, and have sprung up around the various software and
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: This sense of community and collaboration has been further strengthened by the
    formation of the Cloud Native Computing Foundation. This has brought together
    large enterprises who, until just a few years ago, wouldn’t have thought about
    collaborating in public with other enterprises who have been seen as their competitors
    on large-scale projects.
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B15659_01_Final_JM_ePub.xhtml#_idTextAnchor046), Docker Overview'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Hub: https:[//hub.docker.com/](http://hub.docker.com/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ docker image pull nginx`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Moby Project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mirantis Inc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ docker container help`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068), Building Container
    Images'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: False; it is used to add metadata to the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can append `CMD` to `ENTRYPOINT`, but not the other way around.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Snapshotting a failing container so that you can review it away from your Docker
    host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `EXPOSE` instruction exposes the port on the container, but it does not
    map a port on the host machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B15659_03_Final_JM_ePub.xhtml#_idTextAnchor109), Storing and
    Distributing Images'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This allows you to automatically update your Docker images whenever the upstream
    Docker image is updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, they are (as seen in the example in the chapter).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True; you are logged in to Docker for Mac and Docker for Windows if you use
    the command line to log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would remove them by name, rather than using the image ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Port `5000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B15659_04_Final_JM_ePub.xhtml#_idTextAnchor133), Managing Containers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-a` or `--all`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; it is the other way around.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you press *Ctrl + C*, you are taken back to your terminal; however, the
    process that is keeping the container active remains running, as we have detached
    from the process, rather than having terminated it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; it spawns a new process within the specified container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use the `--network-alias [alias name]` flag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running `docker volume inspect [volume name]` would give you information on
    the volume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B15659_05_Final_JM_ePub.xhtml#_idTextAnchor157), Docker Compose'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: YAML, or YAML Ain’t Markup Language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `restart` flag is the same as the `--restart` flag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; you can use Docker Compose to build images at runtime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, Docker Compose uses the name of the folder that the Docker Compose
    file is stored in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use the `-d` flag to start the container’s detached mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `docker-compose config` command will expose any syntax errors within
    your Docker Compose file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Docker App bundles your Docker Compose file into a small Docker image, which
    can be shared via Docker Hub or other registries, the Docker app command-line
    tool then can render working Docker Compose files from the data contained within
    the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B15659_06_Final_JM_ePub.xhtml#_idTextAnchor187), Docker Machine,
    Vagrant, and Multipass'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The `--driver` flag is used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; it will give you commands. Instead, you need to run `eval $(docker-machine
    env my-host)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; Docker needs to be installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Packer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Docker daemon configuration is no longer considered best practice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B15659_07_Final_JM_ePub.xhtml#_idTextAnchor216), Moving from
    Linux to Windows Containers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: You can use Hyper-V isolation to run your container within a minimal hypervisor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The command is `docker inspect -f “{{ .NetworkSettings.Networks.nat.IPAddress
    }}” [CONTAINER NAME]`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; there are no differences in the Docker commands that you need to run
    to manage your Windows containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B15659_08_Final_JM_ePub.xhtml#_idTextAnchor230), Clustering with
    Docker Swarm'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: False; the standalone Docker Swarm is no longer supported or considered a best
    practice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need the IP address of your Docker Swarm manager, and also the token that
    is used to authenticate your workers against your manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use `docker node ls`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would add the `--pretty` flag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use `docker node promote [node name]`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would run `docker service scale cluster=[x] [service name]`, where `[x]`
    is the number of containers that you want to scale by.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B15659_09_Final_JM_ePub.xhtml#_idTextAnchor261), Portainer –
    a GUI for Docker'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The path is `/var/run/docker.sock`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The port is `9000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; applications have their own definitions. You can use Docker Compose when
    running Docker Swarm and launch a stack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True; all of the stats are shown in real time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B15659_10_Final_JM_ePub.xhtml#_idTextAnchor277), Running Docker
    in Public Clouds'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure web app
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An EC2 instance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Knative
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon ECS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B15659_11_Final_JM_ePub.xhtml#_idTextAnchor294), Docker and
    Kubernetes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: False; you can always see the images used by Kubernetes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `docker` and `kube-system` namespaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use `kubectl describe --namespace [NAMESPACE] [POD NAME]`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would run `kubectl create -f [FILENAME OR URL]`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Port `8001`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It was called Borg.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B15659_12_Final_JM_ePub.xhtml#_idTextAnchor394), Discovering
    other Kubernetes options'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MiniKube, Kind, and K3d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MicroK8s and K3s
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B15659_13_Final_JM_ePub.xhtml#_idTextAnchor626), Running Kubernetes
    in Public Clouds'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kubectl create namespace sock-shop`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubectl -n sock-shop describe services front-end-lb`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`eksctl`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B15659_14_Final_JM_ePub.xhtml#_idTextAnchor787), Docker Security'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: You would add the `--read-only` flag; or, if you wanted to make a volume read-only,
    you would add `:ro`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In an ideal world, you would only be running a single process per container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By running the Docker Bench Security application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The socket file for Docker, which can be found at `/var/run/docker.sock`; and
    also, if your host system is running Systemd, `/usr/lib/systemd.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; Quay scans both public and private images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B15659_15_Final_JM_ePub.xhtml#_idTextAnchor823), Docker Workflows'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some sample answers to the questions presented in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Nginx (web) container serves the website; the WordPress (WordPress) container
    runs the code that is passed to the Nginx container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `wp` container runs a single process, which exists once it runs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: cAdvisor keeps metrics for only 5 minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use `docker-compose down --volumes --rmi all`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
