["```\n$ ssh centos@jenkins.example.com < bin/provision-jenkins.sh\n$ ssh centos@jenkins.example.com\n```", "```\n$ sudo firewall-cmd --zone=public --permanent --add-masquerade\n$ sudo firewall-cmd --permanent --add-service=http\n$ sudo firewall-cmd --permanent --add-forward-port=port=80:proto=tcp:toport=8080\n$ sudo firewall-cmd --permanent --direct \\\n   --add-rule ipv4 nat OUTPUT 0 \\\n   -p tcp -o lo --dport 80 -j REDIRECT --to-ports 8080\n$ sudo firewall-cmd --reload\n```", "```\n$ sudo grep -A 3 password /var/log/jenkins/jenkins.log\n```", "```\n$ free\n              total        used        free      shared  buff/cache   available\nMem:        1882296       89008     1533220        8676      260068     1612156\nSwap:       2097148           0     2097148\n$ sudo dd if=/dev/zero of=/swap bs=1M count=1024\n1024+0 records in\n1024+0 records out\n1073741824 bytes (1.1 GB) copied, 2.94343 s, 365 MB/s\n[vagrant@localhost ~]$ sudo chmod 0600 /swap\n[vagrant@localhost ~]$ sudo mkswap /swap\nSetting up swapspace version 1, size = 1048572 KiB\nno label, UUID=2bd70cac-3730-45bb-8b77-982425fb7af5\n[vagrant@localhost ~]$ echo /swap swap swap defaults 0 0 | sudo tee -a /etc/fstab\n/swap swap swap defaults 0 0\n[vagrant@localhost ~]$ sudo mount -a\n[vagrant@localhost ~]$ free\n              total        used        free      shared  buff/cache   available\nMem:        1882296       83120      481244        8668     1317932     1604256\nSwap:       2097148           0     2097148\n```", "```\npipeline {\n     agent { docker { image 'alpine:20191114' } }\n     stages {\n         stage('build') {\n             steps {\n                 sh 'echo \"Hello, World (Docker for Developers Chapter 7)\"'\n             }\n         }\n     }\n }\n```", "```\nssh-keygen -t rsa -b 2048 -f jenkins.shipit\ncat jenkins.shipit\n```", "```\nprod=centos@192.2.0.10\nssh $prod mkdir -p .ssh\nssh $prod tee -a .ssh/authorized_keys < jenkins.shipit.pub\nssh $prod chmod 700 .ssh ssh $prod chmod 600 .ssh/authorized_keys\n```", "```\n$ ssh -i jenkins.shipit $prod\nLast login: Mon Mar  2 04:57:35 2020 from gateway.example.net\n[centos@ip-172-26-13-202 ~]$\n```", "```\npipeline {\n   agent any\n   stages {\n      stage('SSH') {\n         steps {\n            withCredentials([sshUserPrivateKey(\n                credentialsId: 'jenkins.shipit', \n                keyFileVariable: 'keyfile')]) {\n                    sh '''\nprod=centos@192.2.0.10\ncmd=\"docker ps\"\nssh -i \"$keyfile\" -o StrictHostKeyChecking=no $prod $cmd\n                       '''\n                }\n         }\n      }\n   }\n}\n```", "```\n…\n+ ssh -i **** -o StrictHostKeyChecking=no centos@34.238.248.192 docker ps\nCONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS              PORTS                  NAMES\n6c9ef1ca65f6        chapter6_shipit-clicker-web-v2   \"npm start\"              6 weeks ago         Up 6 weeks          0.0.0.0:80->3000/tcp   chapter6_shipit-clicker-web-v2_1\n…\n3f91820e097b        redis:5-alpine3.10               \"docker-entrypoint.s…\"   7 weeks ago         Up 7 weeks          6379/tcp               chapter6_redis_1\n```", "```\ngit remote set-url origin https://github.com/example/Docker-for-Developers.git\n```", "```\ncmd='cd Docker-for-Developers/chapter6; docker-compose stop'\nssh centos@192.2.0.10 \"$cmd\"\n```", "```\npipeline {\n  agent any\n  stages {\n    stage('build') {\n      steps {\n        checkout scm\n        script {\n          docker.withRegistry(registry, 'shipit.dockerhub.id') {\n            def image = docker.build(\n              getImageName(appName),\n              \"-f ${dockerfile} --network host ./chapter7\"\n            )\n            image.push()\n            }\n          }\n      }\n    }\n```", "```\nssh -i \"$keyfile\" -o StrictHostKeyChecking=no \"$targetEnv\" <<EOF\nset -euo pipefail\ncd Docker-for-Developers/chapter7\ngit fetch\ngit reset --hard HEAD\ngit checkout -f origin/\"$GIT_BRANCH\"\ndocker pull \"$image\"\nset -a\nDOCKER_IMAGE=\"$image\"\nPORT=\"$port\"\nbin/restart.sh\nEOF\n```", "```\n$ staging=centos@192.2.0.11\n$ ssh $staging < bin/provision-docker.sh\n$ ssh $staging git clone https://github.com/PacktPublishing/Docker-for-Developers.git\n$ ssh $staging docker run --rm hello-world\n```", "```\n$ ssh $staging mkdir -p .ssh\n$ ssh $staging tee -a .ssh/authorized_keys < jenkins.shipit.pub\n$ ssh $staging chmod 700 .ssh $ ssh $staging chmod 600 .ssh/authorized_keys\n```", "```\n    stage('deploy') {\n      when {\n        anyOf {\n          branch 'master'\n          branch 'staging'\n        }\n      }\n```", "```\n      steps {\n        echo \"BRANCH_NAME is ${env.BRANCH_NAME}\"\n        echo \"Deploying to ${getTarget()}\"\n        withCredentials([sshUserPrivateKey(\n          credentialsId: 'jenkins.shipit',\n          keyFileVariable: 'keyfile')]) {\n            sh \"\"\"\n               set -a\n               target=${getTarget()}\n               image=${getImageName(appName)}\n               keyfile=${keyfile}\n               ./chapter7/bin/ssh-dep.sh\n               \"\"\"\n```", "```\ndef getTarget() {\n  env.BRANCH_NAME == 'staging' ? 'staging' : 'prod'\n}\n```", "```\nport=${port:-80}\nprod=\"${shipit_prod_user}@${shipit_prod_host}\"\nstaging=\"${shipit_staging_user}@${shipit_staging_host}\"\nimage=${image:-dockerfordevelopers/shipitclicker:latest}\nif [[ \"$target\" = \"staging\" ]]; then\n    targetEnv=\"$staging\"\n    targetHost=\"$shipit_staging_host\"\nelse\n    targetEnv=\"$prod\"\n    targetHost=\"$shipit_prod_host\"\nfi\n```", "```\nssh -i \"$keyfile\" -o StrictHostKeyChecking=no \"$targetEnv\" <<EOF\n```", "```\n$ git push origin HEAD:staging --force\n```"]