["```\nmanifests: everything_a_websrv_needs, everything_for_a_db, cache_main \nnodes: web01, db01, cache01 \nCM_execution: web01=(everything_a_websrv_needs), db01=(everything_for_a_db), cache01=(cache_main) \n\n```", "```\nmanifests: iptables, utils, nginx, postgresql, redis, php \nnodes: web01, db01, cache01 \nCM_execution: web01=(iptables,utils,nginx,php), db01=(iptables,utils,postgresql), cache01=(iptables,utils,redis) \n\n```", "```\n    $ export AWS_ACCESS_KEY_ID='AKIAHNPFB9EXAMPLEKEY'\n    $ export AWS_SECRET_ACCESS_KEY=\n         'rLdrfHJvfJUHY/B7GRFTY/VYSRwezaEXAMPLEKEY'\n    $ export AWS_DEFAULT_REGION='us-east-1'\n\n    ```", "```\n    $ aws codecommit create-repository --repository-name salt \n          --repository-description \"SaltStack repo\"\n    {\n    \"repositoryMetadata\": {\n    \"repositoryName\": \"salt\",\n    \"cloneUrlSsh\": \"ssh://git-codecommit.us-\n         east-1.amazonaws.com/v1/repos/salt\",\n    \"lastModifiedDate\": 1465728037.589,\n    \"repositoryDescription\": \"SaltStack repo\",\n    \"cloneUrlHttp\": \n        \"https://git-codecommit.us-east-1.amazonaws.com/v1/repos/salt\",\n    \"creationDate\": 1465728037.589,\n    \"repositoryId\": \"d0628373-d9a8-44ab-942a-xxxxxx\",\n    \"Arn\": \"arn:aws:codecommit:us-east-1:xxxxxx:salt\",\n    \"accountId\": \"xxxxxx\"\n    }\n    }\n\n    ```", "```\n    $ git clone ssh://SSH_KEY_ID@git-codecommit.us-\n         east-1.amazonaws.com/v1/repos/salt\n    Cloning into 'salt'...\n    warning: You appear to have cloned an empty repository.\n    Checking connectivity... done.\n\n    ```", "```\n    veselin:\n      user.present:\n        - fullname: Veselin Kantsev\n        - uid: {{ salt['pillar.get']('users:veselin:uid') }}\n        - password: {{ salt['pillar.get']('users:veselin:password') }}\n        - groups:\n          - wheel\n\n    ssh_auth.present:\n      - user: veselin\n      - source: salt://users/files/veselin.pub\n      - require:\n        - user: veselin\n\n    sudoers:\n      file.managed:\n        - name: /etc/sudoers.d/wheel\n        - contents: '%wheel ALL=(ALL) ALL'\n\n```", "```\n    nginx:\n      service.running:\n        - enable: True\n        - reload: True\n        - require:\n          - pkg: nginx\n\n```", "```\n    /etc/nginx/conf.d/default.conf:\n      file.managed:\n        - source: salt://nginx/files/default.conf\n        - require:\n          - pkg: nginx\n        - require_in:\n          - service: nginx\n        - watch_in:\n          - service: nginx\n\n```", "```\n    nginx:\n      service.running:\n        - watch:\n          - file: nginx_config\n    nginx_config:\n      file.managed:\n        - name: /etc/nginx/nginx.conf\n        - source: salt://...\n\n```", "```\n    nginx:\n      service.running: []\n      nginx_config:\n      file.managed:\n        - name: /etc/nginx/nginx.conf\n        - source: salt://...\n          - watch_in:\n            - service: nginx\n\n```", "```\n    include:\n      - nginx\n\n    php-fpm:\n      pkg.installed:\n        - name: php-fpm\n        - require:\n          - pkg: nginx\n\n    service.running:\n      - name: php-fpm\n      - enable: True\n      - reload: True\n      - require_in:\n        - service: nginx...\n\n```", "```\n{% set publqic_ipv4 = salt['cmd.shell']('ec2-metadata --public-ipv4 | awk '{ print $2 }'') %} \n{% set grains_ipv4 = salt['grains.get']('ipv4:0') %} \n{% set grains_os = salt['grains.get']('os') %} \n{% set grains_osmajorrelease = salt['grains.get']('osmajorrelease') %} \n{% set grains_num_cpus = salt['grains.get']('num_cpus') %} \n{% set grains_cpu_model = salt['grains.get']('cpu_model') %} \n{% set grains_mem_total = salt['grains.get']('mem_total') %} \n\n```", "```\nphptest: \n  file.managed: \n    - name: /var/www/html/index.php \n    - makedirs: True \n    - contents: | \n        <?php \n          echo '<p style=\"text-align:center;color:red\">  \n          Hello from {{ grains_ipv4 }}/{{ public_ipv4 }} running PHP ' . \n          phpversion() . ' on {{ grains_os }} {{ grains_osmajorrelease }}.  \n          <br> I come with {{ grains_num_cpus }} x {{ grains_cpu_model }}  \n          and {{ grains_mem_total }} MB of memory. </p>'; \n          phpinfo(INFO_LICENSE); \n        ?> \n\n```", "```\n- uid: {{ salt['pillar.get']('users:veselin:uid') }} \n- password: {{ salt['pillar.get']('users:veselin:password') }} \n\n```", "```\nusers: \n  veselin: \n    uid: 5001 \n    password: '$1$wZ0gQOOo$HEN/gDGS85dEZM7QZVlFz/' \n\n```", "```\npkg.installed: \n  {% if grains['os'] == 'CentOS' or grains['os'] == 'RedHat' %} \n    - name: httpd...  \n  {% elif grains['os'] == 'Debian' or grains['os'] == 'Ubuntu' %} \n    - name: apache2 \n  ... \n  {% endif %} \n\n```", "```\nbase: \n  '*': \n    - core_utils \n    - monitoring_client \n      - log_forwarder\n  'webserver-*':\n    - nginx\n    - php-fpm\n  'dbserver-*': \n    - pgsql_server \n    - pgbouncer \n\n```", "```\nbase: \n  '*': \n    - users \n    - nginx \n    - php-fpm \n    - phptest \n\n```", "```\nbase: \n  '*': \n    - users \n\n```", "```\n        resource \"aws_iam_role\" \"terraform-role\" {\n        name = \"terraform-role\"path = \"/\"...\n\n        ```", "```\n        resource \"aws_iam_role_policy\" \"terraform-policy\" {\n        name = \"terraform-policy\"\n        role = \"${aws_iam_role.terraform-role.id}\"...\n\n        ```", "```\n        resource \"aws_iam_instance_profile\" \"terraform-profile\" {\n        name = \"terraform-profile\"\n        roles = [\"${aws_iam_role.terraform-role.name}\"]\n        ...\n\n        ```", "```\n        resource \"aws_launch_configuration\" \"terraform-lcfg\"   \n                     {...iam_instance_profile = \n                     \"${aws_iam_instance_profile.terraform-profile.id}\"\n                      ...\n\n        ```", "```\n       user_data = <<EOF \n       #!/bin/bash \n       set -euf -o pipefail \n       exec 1> >(logger -s -t $(basename $0)) 2>&1 \n       # Install Git and set CodeComit connection settings \n       # (required for access via IAM roles) \n       yum -y install git \n       git config --system credential.helper \n       '!aws codecommit credential-helper $@' \n       git config --system credential.UseHttpPath true \n       # Clone the Salt repository \n       git clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/\n       salt/srv/salt; chmod 700 /srv/salt \n       # Install SaltStack \n       yum -y install https://repo.saltstack.com/yum/amazon/\n       salt-amzn-repo-latest-1.ami.noarch.rpm \n       yum clean expire-cache; yum -y install salt-minion; \n       chkconfig salt-minion off \n       # Put custom minion config in place (for enabling masterless mode) \n       cp -r /srv/salt/minion.d /etc/salt/ \n       # Trigger a full Salt run \n       salt-call state.apply \n       EOF \n       We have moved our EC2 node (the Auto Scaling group) \n       to a public subnet and allowed incoming SSH traffic \n       so that we can connect and play with Salt on it: \n       resource \"aws_security_group\" \"terraform-ec2\" {ingress { \n       from_port = \"22\" \n       to_port = \"22\" \n       ...resource \"aws_autoscaling_group\" \"terraform-asg\" { \n       ... \n       vpc_zone_identifier = [\"${aws_subnet.public-1.id}\",\n       ... \n\n    ```", "```\n$ export AWS_ACCESS_KEY_ID='user_access_key'\n$ export AWS_SECRET_ACCESS_KEY='user_secret_access_key'\n$ export AWS_DEFAULT_REGION='us-east-1'$ cd Terraform/$ terraform validate\n$ terraform plan...Plan: 15 to add, 0 to change, 0 to destroy.\n$ terraform apply...Outputs:\nELB URI = terraform-elb-xxxxxx.us-east-1.elb.amazonaws.com\nVPC ID = vpc-xxxxxx\n\n```", "```\n# salt-call pillar.items\n\n```", "```\n# salt-call grains.items\n\n```", "```\n# salt-call state.apply nginx\n\n```", "```\n# salt-call state.apply\n\n```", "```\nsalt 'webserver-*' nginx.status  \nsalt 'db-*' postgres.db_list \n\n```"]