["```\npackage { 'php' :\n  ensure => '5.6',\n}\n```", "```\nmkdir  ubuntu && cd ubuntu/\nvagrant init ubuntu/trusty64; vagrant up --provider VirtualBox\n\n```", "```\nvagrant ssh\nsudo su -\ncurl -fsS https://raw.githubusercontent.com/russmckendrick/puppet-install/master/ubuntu | bash\n\n```", "```\npuppet module install garethr-docker\n\n```", "```\ninclude 'docker'\n\ndocker::image { 'russmckendrick/base': }\n\ndocker::run { 'helloworld':\n  image   => 'russmckendrick/base',\n  command => '/bin/sh -c \"while true; do echo hello world; sleep 1; done\"',\n}\n```", "```\npuppet apply /vagrant/docker.pp\n\n```", "```\ndocker --version\ndocker images\ndocker ps\ndocker attach helloworld\n\n```", "```\ndocker ps -a\n\n```", "```\nvagrant destroy\n\n```", "```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVAGRANTFILE_API_VERSION = \"2\"\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n    config.vm.box = \"ubuntu/trusty64\"\n    config.vm.network \"private_network\", ip: \"192.168.33.10\"\n    HOSTNAME = 'docker'\n    DOMAIN   = 'media-glass.es'\n    Vagrant.require_version '>= 1.7.0'\n    config.ssh.insert_key = false\n\n  config.vm.host_name = HOSTNAME + '.' + DOMAIN\n\n  config.vm.provider \"VirtualBox\" do |v|\n    v.memory = 2024\n    v.cpus = 2\n  end\n\n  config.vm.provider \"vmware_fusion\" do |v|\n    v.vmx[\"memsize\"] = \"2024\"\n    v.vmx[\"numvcpus\"] = \"2\"\n  end\n\n$script = <<SCRIPT\nsudo sh -c 'curl -fsS https://raw.githubusercontent.com/russmckendrick/puppet-install/master/ubuntu | bash'\nsudo puppet module install garethr-docker\nSCRIPT\n\nconfig.vm.provision \"shell\",\n    inline: $script\nend\n```", "```\ninclude 'docker'\n\ndocker::image { 'wordpress': }\ndocker::image { 'mysql': }\n\ndocker::run { 'wordpress':\n  image           => 'wordpress',\n  ports           => ['80:80'],\n  links           => ['mysql:mysql'],\n}\n\ndocker::run { 'mysql':\n  image           => 'mysql',\n  env             => ['MYSQL_ROOT_PASSWORD=password', 'FOO2=BAR2'],\n}\n```", "```\nvagrant ssh\nsudo puppet apply /vagrant/wordpress.pp\n\n```", "```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n```", "```\nbrew install ansible\n\n```", "```\nsudo easy_install pip\n\n```", "```\nsudo pip install dopy==0.3.5\n\n```", "```\necho 'do_api_token: \"sdnjkjdfgkjb345kjdgljknqwetkjwhgoih314rjkwergoiyu34rjkherglkhrg0\"' > group_vars/do.yml\necho 'ssh_key_name: \"Your Key Name\"' >> group_vars/do.yml\n\n```", "```\nansible-playbook -i hosts site.yml\n\n```", "```\nansible-playbook -i hosts site.yml\n\n```", "```\n├── ansible.cfg\n├── group_vars\n│   ├── do.yml\n│   └── environment.yml\n├── hosts\n├── roles\n│   ├── docker-install\n│   │   └── tasks\n│   │       └── main.yml\n│   ├── docker-mysql\n│   │   └── tasks\n│   │       └── main.yml\n│   ├── docker-wordpress\n│   │   └── tasks\n│   │       └── main.yml\n│   ├── droplet\n│   │   ├── tasks\n│   │   │   └── main.yml\n│   │   └── templates\n│   │       └── dyn.yml.j2\n│   ├── weave-connect\n│   │   └── tasks\n│   │       └── main.yml\n│   └── weave-install\n│       └── tasks\n│           └── main.yml\n└── site.yml\n```", "```\n- name: \"Provision two droplets in DigitalOcean\"\n  hosts: localhost\n  connection: local\n  gather_facts: True\n  vars_files:\n    - group_vars/environment.yml\n    - group_vars/do.yml\n  roles:\n    - droplet\n```", "```\n- name: \"Install Docker & Weave on our two DigitalOcean hosts\"\n  hosts: dockerhosts\n  remote_user: root\n  gather_facts: False\n  vars_files:\n    - group_vars/environment.yml\n  roles:\n    - docker-install\n    - weave-install\n```", "```\n- name: install curl\n  apt: pkg=curl update_cache=yes\n```", "```\n- name: add docker apt keys\n  apt_key: keyserver=p80.pool.sks-keyservers.net id=58118E89F3A912897C070ADBF76221572C52609D\n```", "```\n- name: update apt\n  apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' state=present\n```", "```\n- name: install Docker\n  apt: pkg=docker-engine update_cache=yes\n```", "```\n- name: start Docker\n  service: name=docker state=started\n```", "```\n- name: install pip\n  apt:\n    pkg: \"{{ item }}\"\n    state: installed\n  with_items:\n    - python-dev\n    - python-pip\n```", "```\n- name: install docker-py\n  pip:\n    name: docker-py\n```", "```\n- name: download and install weave binary\n  get_url: url={{ weave_url }} dest={{ weave_bin }}\n```", "```\n- name: setup permissions on weave binary  \n  file: path={{ weave_bin }} mode=\"u+rx,g+rx,o+rwx\"\n```", "```\n- name: download weave containers and launch with password\n  command: weave launch --password {{ weave_password}}\n  ignore_errors: true\n```", "```\n- name: \"Connect the two Weave hosts and start MySQL container\"\n  hosts: dockerhost01\n  remote_user: root\n  gather_facts: False\n  vars_files:\n    - group_vars/environment.yml\n  roles:\n    - weave-connect\n    - docker-mysql\n```", "```\n- include_vars: group_vars/dyn.yml\n- name: download weave containers and launch with password\n  command: weave connect {{ docker_host_02 }}\n```", "```\n- name: start mysql container\n  docker:\n    name: my-wordpress-database\n    image: mysql\n    state: started\n    net: weave\n    dns: [\"172.17.0.1\"]\n    hostname: mysql.weave.local\n    env:\n      MYSQL_ROOT_PASSWORD: password\n    volumes:\n       - \"database:/var/lib/mysql/\"\n```", "```\n- name: \"Start the Wordpress container\"\n  hosts: dockerhost02\n  remote_user: root\n  gather_facts: False\n  roles:\n    - docker-wordpress\n```", "```\n- include_vars: group_vars/dyn.yml\n- name: start wordpress container\n  docker:\n    name: my-wordpress-app\n    image: wordpress\n    state: started\n    net: weave\n    dns: [\"172.17.0.1\"]\n    hostname: wordpress.weave.local\n    ports:\n      - \"80:80\"\n    env:\n      WORDPRESS_DB_HOST: mysql.weave.local:3306\n      WORDPRESS_DB_PASSWORD: password\n    volumes:\n       - \"uploads:/var/www/html/wp-content/uploads/\"\n- debug: msg=\"You should be able to see a WordPress installation screen by going to http://{{ docker_host_02 }}\"\n```", "```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVAGRANTFILE_API_VERSION = \"2\"\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n\n  config.vm.box = \"ubuntu/trusty64\"\n  config.vm.network \"private_network\", ip: \"192.168.33.10\"\n  HOSTNAME = 'docker'\n  DOMAIN   = 'media-glass.es'\n  Vagrant.require_version '>= 1.7.0'\n  config.ssh.insert_key = false\n  config.vm.host_name = HOSTNAME + '.' + DOMAIN\n\n  config.vm.provider \"VirtualBox\" do |v|\n    v.memory = 2024\n    v.cpus = 2\n  end\n\n  config.vm.provider \"vmware_fusion\" do |v|\n    v.vmx[\"memsize\"] = \"2024\"\n    v.vmx[\"numvcpus\"] = \"2\"\n  end\n\n  config.vm.provision \"docker\" do |d|\n    d.run \"mysql\",\n      image: \"mysql\",\n      args: \"-e 'MYSQL_ROOT_PASSWORD=password'\"\n    d.run \"wordpress\",\n      image: \"wordpress\",\n      args: \"-p 80:80 --link mysql:mysql -e WORDPRESS_DB_PASSWORD=password\"\n  end\n\nend\n```", "```\nvagrant up --provider VirtualBox\n\n```", "```\nopen http://docker.media-glass.es/\n\n```", "```\nVAGRANTFILE_API_VERSION = \"2\"\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.define \"boot2docker\", autostart: false do |dockerhost|\n    dockerhost.vm.box = \"russmckendrick/boot2docker\"\n    dockerhost.nfs.functional = false\n    dockerhost.vm.network :forwarded_port, guest: 80, host: 9999\n    dockerhost.ssh.shell = \"sh\"\n    dockerhost.ssh.username = \"docker\"\n    dockerhost.ssh.password = \"tcuser\"\n    dockerhost.ssh.insert_key = false\n  end\n  config.vm.define \"nginx\", primary: true do |v|\n    v.vm.provider \"docker\" do |d|\n      d.vagrant_vagrantfile = \"./Vagrantfile\"\n      d.vagrant_machine = \"boot2docker\"\n      d.image = \"russmckendrick/nginx\"\n      d.name  = \"nginx\"\n      d.ports = [\"80:80\"]\n    end\n  end\nend\n```", "```\nssh docker@localhost -p2222\n\n```", "```\nvagrant destroy\n\n```", "```\nFROM russmckendrick/nodejs\nADD . /srv/app\nWORKDIR /srv/app\nRUN npm install\nEXPOSE 80\nENTRYPOINT [\"node\", \"index.js\"]\n```", "```\ndocker-machine create --driver \"VirtualBox\" chapter06\n\n```", "```\neval $(docker-machine env chapter06)\n\n```", "```\ndocker-compose up -d\n\n```", "```\nopen http://$(docker-machine ip chapter06)/\n\n```", "```\ndocker-compose stop\ndocker-compose rm\n\n```", "```\nbrew install packer\n\n```", "```\n{\n  \"builders\":[{\n    \"type\": \"docker\",\n    \"image\": \"russmckendrick/nodejs\",\n    \"export_path\": \"mobycounter.tar\"\n  }],\n  \"provisioners\":[\n    {\n      \"type\": \"file\",\n      \"source\": \"app\",\n      \"destination\": \"/srv\"\n    }, \n    {\n      \"type\": \"file\",\n      \"source\": \"npmrc\",\n      \"destination\": \"/etc/npmrc\"\n    },\n    {\n      \"type\": \"shell\",\n      \"inline\": [\n        \"cd /srv/app\",\n        \"npm install\"\n      ]\n    }\n  ]\n}\n```", "```\npacker build docker.json\n\n```", "```\ndocker import mobycounter.tar mobycounter\n\n```", "```\ndocker images\n\n```", "```\ndocker-compose up -d\n\n```", "```\nopen http://$(docker-machine ip chapter06)/\n\n```", "```\n{\n  \"builders\":[{\n    \"type\": \"docker\",\n    \"image\": \"russmckendrick/base\",\n    \"export_path\": \"mobycounter-small.tar\"\n  }],\n  \"provisioners\":[\n    {\n      \"type\": \"file\",\n      \"source\": \"app\",\n      \"destination\": \"/srv\"\n    }, \n    {\n      \"type\": \"file\",\n      \"source\": \"npmrc\",\n      \"destination\": \"/etc/npmrc\"\n    }, \n    {\n      \"type\": \"shell\",\n      \"inline\": [\n        \"apk update\",\n        \"apk add --update nodejs\",\n        \"npm -g install npm\",\n        \"cd /srv/app\",\n        \"npm install\",\n        \"rm -rf /var/cache/apk/**/\",\n        \"npm cache clean\"\n      ]\n    }\n  ]\n}\n```", "```\npacker build docker-small.json\n\n```", "```\ndocker export docker_web_1 > docker_web.tar\n\n```", "```\nFROM russmckendrick/nodejs\nADD . /srv/app\nWORKDIR /srv/app\nRUN npm install\nEXPOSE 80\nENTRYPOINT [\"node\", \"index.js\"]\n```", "```\ndocker-machine ls\ndocker-machine rm <name-of-host>\n\n```", "```\ndocker-machine create \\\n --driver digitalocean \\\n --digitalocean-access-token sdnjkjdfgkjb345kjdgljknqwetkjwhgoih314rjkwergoiyu34rjkherglkhrg0 \\\n --digitalocean-region lon1 \\\n --digitalocean-size 1gb \\\n jenkins\n\n```", "```\ndocker-machine ssh jenkins\n\n```", "```\ncurl -fsS https://raw.githubusercontent.com/russmckendrick/docker-install/master/install-compose | bash\n\n```", "```\napt-get install gdebi-core\n\n```", "```\nwget http://pkg.jenkins-ci.org/debian-rc/binary/jenkins_2.0_all.deb\ngdebi jenkins_2.0_all.deb\n\n```", "```\nusermod -aG docker jenkins\n\n```", "```\n/etc/init.d/jenkins restart\n\n```", "```\nopen http://$(docker-machine ip jenkins):8080/\n\n```", "```\nless /var/lib/jenkins/secrets/initialAdminPassword\n\n```", "```\nnode {\n  stage 'Checkout'\n  git url: 'https://github.com/russmckendrick/jenkins-pipeline.git'\n\n  stage 'build'\n  docker.build('mobycounter')\n\n  stage 'deploy'\n  sh './deploy.sh'\n}\n```", "```\nopen http://$(docker-machine ip jenkins)/\n\n```"]