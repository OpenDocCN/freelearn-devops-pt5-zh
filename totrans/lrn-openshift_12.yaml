- en: Deploying Simple Applications in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application deployment is the most important and frequently used feature of
    OpenShift, as that's what it was built for. All OpenShift users deal with application
    deployment from Docker images. If there is a well-known application and its image
    is already available on Docker Hub or any other registries, OpenShift users can
    deploy it in a simple and reproducible way. In this chapter, we will be working
    on the deployment of several simple applications from existing Docker images.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing this chapter, you will have learned about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Manual application deployment images, including manual Pod and Service object
    creation from a YAML file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make use of the `oc new-app` utility to deploy applications from existing
    Docker images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing applications via routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter doesn''t have strict environmental restrictions; any OpenShift
    installations and development environments are supported: MinitShift, `oc cluster
    up`, or standard production-ready deployment based on Ansible. It is up to you
    which flavor you use. However, this chapter is based on the `oc cluster up` running
    within vagrant. The following `Vagrantfile` can be used to deploy the lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The environment can be deployed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the previously listed vagrant machine is deployed, you may connect to it
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, log in as a `developer` user in order to be able to run most commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can use any password
  prefs: []
  type: TYPE_NORMAL
- en: Manual application deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Among other methods, OpenShift allows for deploying applications directly from
    existing Docker images. Imagine that your development team has an in-house process
    of building Docker images from their applications—this way, you can deploy applications
    in an OpenShift environment by using these images without any modification, which
    greatly simplifies migration to OpenShift. It takes several steps to create all
    required OpenShift entities.
  prefs: []
  type: TYPE_NORMAL
- en: First, you have to create a pod, which runs a container deployed from the application's
    Docker image. Once the pod is up and running, you may need to create a service
    to have a persistent IP address and internal DNS record associated with it. The
    service allows your application to be accessible via a consistent **address:port**
    pair internally inside OpenShift. This may be enough for internal applications
    that don't require external accesses, like databases or key/value storage.
  prefs: []
  type: TYPE_NORMAL
- en: If your application has to be available from the outside, you need to `expose`
    it to make it available from an external network, like the internet. This process
    can be achieved by creating an OpenShift route.
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, the process looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a pod
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a service by exposing the pod
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a route by exposing the service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this chapter, we will be working with a simple httpd Docker container to
    demonstrate the application deployment process. We have chosen httpd because it
    is simple enough and it still allows us to focus on the main goal—the demonstration
    of OpenShift-related tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pod
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `httpd` Docker image is available on Docker Hub. You may want to confirm
    this by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the image documentation ([https://docs.docker.com/samples/library/httpd/](https://docs.docker.com/samples/library/httpd/)),
    it listens on TCP port `80`. We cannot simply use this container, because it binds
    to a privileged port. The default security policy in OpenShift doesn''t allow
    applications to bind on ports below 1024\. To avoid problems, OpenShift comes
    with an image stream named `httpd` which points to an OpenShift-ready `httpd`
    image build. For example, in our version of OpenShift, the `httpd` image stream
    points to the `docker.io/centos/httpd-24-centos7` Docker container. You may want
    to verify that by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Each time we want to deploy a pod using an `httpd` image, we need to use `centos/httpd-24-centos7`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a separate project for the lab as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The simple `httpd` pod can be deployed manually from its definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`centos/httpd-24-centos7` binds on port `8080`, which allows for running the
    container inside OpenShift without tuning its default security policy.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is created, we can create a pod by running `oc create`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'OpenShift needs some time to download the Docker image and deploy the pod.
    Once everything is finished, you should be able to have the `httpd` pod in the `Running`
    state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This pod provides the same functionality as a more complex application would
    (default `httpd` webpage). We may want to verify that, as shown as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, get the pod''s internal IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And then use curl to query the IP from the output above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: This is the beginning of the default Apache welcome page. You may want
    to replace it for the production installation. This can be achieved by mounting
    a persistent volume at `/var/www/html`. For demo purposes, this output indicates
    that the application itself works and is accessible.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The service may be created in two different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `oc expose`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the YAML/JSON definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will describe both methods. You don't have to use both.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service using oc expose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create a pod using `oc expose` in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command creates a service by exposing the pod, using `name=httpd`
    as a selector. You may define a custom service name via the `--name` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same `httpd` application will be available from the service IP address,
    which is `172.30.128.131` in our case, but your output from the previous command
    most likely will be different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s delete the service to recreate it using another method, as shown in
    the following subsection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Creating a service from a YAML definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following YAML file allows you to define a `Service` OpenShift object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the file is in place, you can create the service by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The service shows the same output as previously described:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Creating a route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The service allows an application to be accessible internally via a consistent
    address:port pair. To be able to access it from outside of the cluster, we need
    to make sure that an OpenShift `Route` is created. Once the route is created,
    OpenShift will expose the service to the outside world using the cluster's router,
    implemented via an HAProxy Docker container by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like services, routes can be created in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `oc expose`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the YAML/JSON definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section shows both methods, but it is enough to use only one.
  prefs: []
  type: TYPE_NORMAL
- en: We assume that previously, you created a service named `httpd`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a route by using oc expose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create a route using `oc expose` in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `127.0.0.1.nip.io` DNS zone is used by default by the `oc cluster up` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may want to create a route with an alternate URL, using the `--hostname`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: OpenShift allows for creating multiple routes per single application.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using an alternate name, make sure that the DNS record points to
    the IP of the OpenShift node that hosts the router pod.
  prefs: []
  type: TYPE_NORMAL
- en: Once the route is created, you may access your application using this external
    route.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a route from a YAML definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create an alternate route for our application named `httpd2`. The route
    will have the `myhttpd.example.com` URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The route may be created by `oc create`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You may see that the new route has been added successfully. Now, if there is
    a corresponding DNS record, you will be able to access your application using
    that alternate route.
  prefs: []
  type: TYPE_NORMAL
- en: Using oc new-app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `oc` utility allows you to deploy a simple application in a user-friendly
    way. Generally, you just need to pass one or more options to the `oc new-app` command,
    which will then create all required resources, including pod(s) and service(s),
    for your application. Additionally, that command creates `ReplicationController` and `DeploymentConfig` API
    objects that control how your application is being deployed.
  prefs: []
  type: TYPE_NORMAL
- en: The oc new-app command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, `oc new-app` creates the following resources during application deployment
    from an existing Docker image:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Resource** | **Abbreviation** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Pod | pod | Pod representing your container |'
  prefs: []
  type: TYPE_TB
- en: '| Service | svc | Service containing an internal application endpoint |'
  prefs: []
  type: TYPE_TB
- en: '| ReplicationController | rc | A replication controller is an OpenShift object
    that controls the number of replicas for an application |'
  prefs: []
  type: TYPE_TB
- en: '| DeploymentConfig | dc | Deployment configuration is a definition of your
    deployment |'
  prefs: []
  type: TYPE_TB
- en: '`oc new-app` is a very simple utility, yet it''s powerful enough to satisfy
    most simple deployments.'
  prefs: []
  type: TYPE_NORMAL
- en: '`oc new-app` doesn''t create a route when deploying an application from its
    Docker image!'
  prefs: []
  type: TYPE_NORMAL
- en: The functionality provided by `oc new-app` is also exposed via a web console
    which is what developers usually are inclined to use.
  prefs: []
  type: TYPE_NORMAL
- en: Using oc new-app with default options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s delete the resources created previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Another method to delete everything is to delete the project and create it again.
  prefs: []
  type: TYPE_NORMAL
- en: Recently, we showed that OpenShift comes with an image stream that contains
    the path to the OpenShift-ready `httpd` image. The `oc new-app` utility uses Docker
    images referenced by image streams by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of creating a basic `httpd` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The deployment process takes some time. Once everything is ready, you can check
    that all resources have been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make sure that the proper image has been used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'What is left is to expose the service to make the application externally available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Advanced deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `oc new-app` command takes a number of parameters, allowing you to modify
    the deployment process according to your needs. For example, you may need to modify
    names, specify environment variables, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced options can always be displayed by using the built-in help function,
    which can be displayed by `oc new-app --help`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We are going to work with `oc new-app` a lot in the following chapters. You
    don't have to learn all options right now.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying MariaDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will deploy a database container with additional configuration
    options. The container requires a number of parameters to be passed to `oc new-app`.
    Let's create a simple `mariadb` container as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'First delete objects created previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we want to create a database container where the database user named `openshift`
    is allowed to connect to the database named `openshift`. For simplicity reasons,
    we will use `openshift` as the database password. The following example, shows
    how to start a MariaDB container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify mariadb is up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now you can access the database using container name, "po/mariadb-1-54h6x" in
    our case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now login to the container using ''oc exec'':'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Connect to mariadb database and verify that database named 'openshift' is created
    and you have access to it running 'show dababases' command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The previous output shows that the database service is up and running and ready
    to be used from the application side. We are going to work more on this topic
    in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: You can exit database and get ready for the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Clear out your lab environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If you are going to continue with the following chapter, you can leave your
    OpenShift cluster up, otherwise you can shutdown or delete vagrant VM.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we showed you how to deploy a number of simple applications
    from their Docker images, how to create a pod manually, and how to create a service
    manually. We went through the process of creating a service, and how to create
    a route manually, as well as how to create a route using `oc expose`. Finally,
    we showed you how to use the `oc new-app` command to deploy an application from
    its Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be working on deployment of multi-tier application
    using OpenShift templates.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following OpenShift entities is not created automatically by `oc
    new-app`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pod
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Replication controller
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployment config
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following entities should be created in order to make an application
    available externally in a minimal configuration (choose three)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pod
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Replication controller
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployment config
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Image stream
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command creates a route with the custom URL `myservice.example.com`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: oc expose svc httpd
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc expose svc httpd --host myservice.example.com
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc expose svc httpd --hostname myservice.example.com
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc create svc httpd --hostname myservice.example.com
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which commands display all OpenShift routes (choose two)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: oc get all
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc get pod
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc get application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc get route
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: docker ps
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ip route
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We gave you a basic knowledge of application deployment in OpenShift. The following
    links are useful if you want to read more:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pods and Services**:[ https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html](https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creating applications from images**: [https://docs.openshift.org/latest/dev_guide/application_lifecycle/new_app.html#specifying-an-image](https://docs.openshift.org/latest/dev_guide/application_lifecycle/new_app.html#specifying-an-image)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
