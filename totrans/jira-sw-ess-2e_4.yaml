- en: Using Jira Software Your Way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we looked at how to use Jira for both Scrum and Kanban
    agile methodologies. Jira comes with a set of tools to support these two methodologies,
    as well as sensible defaults to get you up and running quickly. However, you will
    often need to customize what comes out of the box by default in order to better
    suit your needs. In this chapter, we will go over some of the important options
    Jira Software provides so it can better adapt to the way you need to run your
    projects. We will also expand on some of the hybrid methodologies Jira Software
    offers, where you can combine the best of both Scrum and Kanban.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of the chapter, you will have learned how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Manage your Scrum board's configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control which issues are to be included on your board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize your Scrum board's column layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use swimlanes to group your issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter issues on your Scrum board with quick filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine the power of Scrum and Kanban with Scrumban and Kanplan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing your board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you first create an agile board using Jira's built-in templates for either
    Scrum or Kanban, as outlined in the previous chapters, the board is created with
    a set of default settings, and you as the person who created the board will be
    automatically set as the board's administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the administrator, you can further customize the agile board in many ways,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: Scope of the board—what projects/issues will be included on the board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permission of the board—who will have access to the board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout of the board—the board's vertical columns and horizontal swimlanes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customized filters—additional ways to filter out contents on the board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First of all, to start customizing your agile board:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the agile board you want to customize.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Board drop-down menu and select the Configure option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select General from the left-hand navigation menu. As you can see from the
    following screenshot, the INFRA board has two administrators set. You can add
    and remove administrators by simply hovering over the field and updating the values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table provides a summary of the configuration fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Board name | Name of the agile board. |'
  prefs: []
  type: TYPE_TB
- en: '| Administrators | Users who can configure the agile board''s settings. You
    can add more administrators by either selecting the users directly or by selecting
    a group. |'
  prefs: []
  type: TYPE_TB
- en: '| Saved Filter | This controls which issues will be included on the agile board.
    If you have created your board using the agile templates, then the filter here
    is automatically created for you to include all issues in the project.You can
    select a different filter to use or click on the Edit Filter Query link to change
    the current filter. |'
  prefs: []
  type: TYPE_TB
- en: '| Shares | This controls who will have access to the filter. In practice, the
    filter should be shared with the same users who have access to the board. |'
  prefs: []
  type: TYPE_TB
- en: '| Filter Query | This shows you the actual filter query used by Saved Filter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Ranking | This shows whether ranking is currently enabled. You need to have
    ranking enabled to rank issues and create sprints. |'
  prefs: []
  type: TYPE_TB
- en: '| Projects in board | Projects that are part of the board. This is automatically
    determined based on the Saved Filter used by the board. |'
  prefs: []
  type: TYPE_TB
- en: Controlling board scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about the scope of your agile board, we are referring to the issues
    that will be included on your board. If you have created your board while creating
    a new project or have taken it from an existing project, then the scope of your
    board will be the selected project, meaning all issues from the project will be
    available for the board to display.
  prefs: []
  type: TYPE_NORMAL
- en: The way Jira controls the scope of a board is by using what is called a **saved
    filter**. A saved filter is a search query that has been saved in the system,
    and the issues returned from the result of the query are the issues that will
    be included on the board. When you create a board from a project, a new saved
    filter is automatically created for you, with its query parameter set to the selected
    project. For example, as shown in the following screenshot, the INFRA board is
    created from the Infrastructure Support project, so Jira has automatically created
    a saved filter called Filter for INFRA board with the filter query set to `project
    = INFRA ORDER BY Rand ASC`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This saved filter is effectively saying, *all issues with their project set
    to the project key INFRA will be included in this board, and they will be ordered
    by the Rank field in ascending order*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Saved Filter is a standard Jira feature used in areas other than agile boards.
    It uses the **Jira Query Language** (**JQL**). You can find out more about JQL
    at [https://confluence.atlassian.com/jiracoreserver073/advanced-searching-861257209.html](https://confluence.atlassian.com/jiracoreserver073/advanced-searching-861257209.html).
  prefs: []
  type: TYPE_NORMAL
- en: You can change the scope of your board by either changing the actual saved filter's
    query by clicking the Edit Filter Query link, or by using a different saved filter.
    Note that in order for you to change the current saved filter's query; you need
    to have the required permission. So if you do not have permission, then your best
    option is to create a new saved filter and set your board to use that instead.
    We will cover filter permissions in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Managing board permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned that Jira uses saved filters to determine
    which issues will be included on an agile board. Now let us take a look at how
    to manage the access permissions of a board.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two key permission levels when it comes to accessing an agile board,
    illustrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the board itself—based on the saved filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the issues on the board—based on project permission
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Access to an agile board is controlled by the permission set on the saved filter
    or who the filter is shared with. If a user has access to the filter, then the
    user will have access to the board. For a filter that is automatically created
    as part of the board, it is set to be shared with all members of the project.
    If you are the owner of the filter, you can click on the Edit Filter Shares link
    and then choose who to share the filter with, as shown in the following screenshot.
    For this particular filter, it is shared with all members of the `Sample Scrum
    Project`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The saved filter determines access to the agile board, and then it is up to
    each of the project's permissions to determine whether a user should be allowed
    to view its issues. This means that if a user has access to a saved filter, but
    does not have the necessary permission to access the project, then the user will
    be looking at an empty board with no issues on it.
  prefs: []
  type: TYPE_NORMAL
- en: Since a saved filter can have more than one project, the agile board will list
    all the projects that are part of it in the Project in board section, and if you
    are an administrator of a project, you can click on the View permission link to
    review and update its permissions. We will be covering permissions in [Chapter
    5](part0091.html#2MP360-afcd22ce7063477f98fa024bc0dcef11), *Customizing Jira Software*
    as it is a complicated topic. For now, suffice it to say that if a user is able
    to access an agile board, but is not able to view all its issues, then this is
    due to project permission settings.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling ranking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ranking allows you to prioritize your issues by dragging and dropping them into
    your backlog and sprints. The higher an issue is in the ranking, the more important
    it is. If ranking is disabled, you will get an error message similar to `Ranking
    is disabled, as the Filter Query for this board is not ordered by Rank`, when
    you try to drag your issues in the backlog.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have created your agile board by using the agile templates with either
    the new project or existing project option, then ranking will be enabled by default.
    However, if it is disabled for some reason, you can enable ranking by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the agile board you want to customize.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Board drop-down menu and select the Configure option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select General from the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add Rank button at the bottom to enable ranking:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After you have enabled ranking, you will notice that your Filter Query value
    is automatically updated. So, in the preceding screenshot, the query `project
    = "Sample Scrum Project"` will be changed to `project = "Sample Scrum Project"
    ORDER BY Rank ASC`. Make sure you do not remove the `ORDER BY Rank ASC` part of
    the query, as that is the snippet that enables ranking for your query and board.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing your board's layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jira''s agile board acts as the white board where all your story cards are
    placed. There are two key components that make up the board, namely the columns
    and swimlanes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Columns**: The vertical columns that are used to represent the state of a
    story card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Swimlanes**: The horizontal rows that help you to better categorize your
    story cards on the board'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will take a deeper look into these two components
    and how you, as the board administrator, can customize them to get the most out
    of your board.
  prefs: []
  type: TYPE_NORMAL
- en: Working with columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Columns represent the statuses that an issue can be in. On a simple board,
    as shown in the following screenshot, we have three columns, and they are each
    mapped to an issue status:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To Do: Issues that are waiting in the queue to be worked on are mapped to the
    To Do workflow status'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Progress: Issues that are currently being worked on are mapped to the In
    Progress workflow status'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Done: Issues that are completed are mapped to the Done workflow status:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is a very simple setup where issues only have three steps from start to
    finish. Often, you will have an existing workflow that is more complex than this.
  prefs: []
  type: TYPE_NORMAL
- en: Jira and workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get into customizing columns, we first need to take a quick look at
    workflows in relation to Jira. As you may already know, Jira uses workflows to
    move an issue from one status to the next. Jira also leverages this feature by
    mapping its columns to workflow statuses. However, if you are not familiar with
    how workflow works in Jira, do not worry—we will cover workflows in detail in
    [Chapter 5](part0091.html#2MP360-afcd22ce7063477f98fa024bc0dcef11), *Customizing
    Jira Software*.
  prefs: []
  type: TYPE_NORMAL
- en: Since workflows in Jira can often get very complicated, it is sometimes difficult
    to use the traditional Jira workflows in an agile environment. So Jira introduced
    what is known as the **agile simplified workflow**.
  prefs: []
  type: TYPE_NORMAL
- en: Agile simplified workflow refers to workflows that are managed directly from
    within Jira that are simplified and streamlined for agile usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'This allows you to:'
  prefs: []
  type: TYPE_NORMAL
- en: Maintain your workflow from your agile board, managed as board columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move issues freely from one status (column) to another without restrictions
    from workflow conditions and validators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not have intermediate screens where you move issues between statuses, making
    it much easier to move cards (issues) on your boards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically set resolution values (as per your definition) when issues are
    moved to appropriate statuses (columns)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have created your agile board by using the built-in agile templates,
    then you are most likely using an agile simplified workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are the board administrator, you can customize the board''s columns
    to better reflect your workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Scrum board that you want to customize.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Board drop-down menu and select the Configure option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Columns from the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Column management page, you can customize the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Columns: You can add, remove, and rename columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Column Layout: You can rearrange the order of columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Issue Status Mapping: You can map columns to issue statuses. For each column,
    you can have one or more issue statuses mapped to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Column Constraint: You can add constraints to columns, limiting how many issues
    can be in a status at any given time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with creating new columns. There are two ways new columns can be
    created and mapped to issue statuses, depending on whether you are using an agile
    simplified workflow or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can determine whether you are using the simplified workflow by looking
    at the Simplified Workflow field, and seeing if it says Using Agile Simplified
    Workflow, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For a new column to be usable, it needs to have at least one status mapped.
    If you are using the agile simplified workflow, this is a very straightforward
    process. The agile simplified workflow takes care of this for you, so you don''t
    have to worry about manual column status mapping. It is recommended that you use
    the agile simplified workflow where possible. To add a new column, perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Add column button. A new column will be added to the list in the
    penultimate position.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name and select a category for the new column. A new issue status with
    the same name will also be created and mapped to the new column. Generally speaking,
    if the new column is going to be the first column on the board, select To Do as
    the category. If it is going to be the last column, select the Done category.
    Otherwise, select the In Progress category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are not using the agile simplified workflow, you will need to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the new column as outlined in the preceding list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create new workflow statuses to be mapped to the new column and add the statuses
    used by the workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Manually drag and drop the statuses into the new column, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can also map additional statuses to columns by dragging the statuses you
    want to map from under the Unmapped Statuses section and dropping them into the
    target column. Once you have mapped at least one status to the new column, it
    will be displayed on the board in active sprint mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is recommended that you have one column per workflow status to keep the
    flow logical and simple. However, you can have multiple statuses mapped to one
    column, as shown in the preceding screenshot. As you can see, we have both the
    Done and Fixed statuses mapped to the Done column. You will usually find the need
    to do this if you are creating a Scrum board for an existing project with a workflow
    in place, or if you have a complex workflow that cannot be mapped to columns on
    the board one to one. When you map multiple statuses to a column, such as the
    Done column in our example, and move an issue into the column, you will be able
    to select the appropriate status, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When using the agile simplified workflow, you will see a checkbox option called
    Set resolution in the mapped workflow status. If you check this option, when an
    issue is moved into the corresponding column, it will be automatically assigned
    the resolution value of Done. Jira makes use of the resolution value to determine
    whether an issue is completed, so it is important to assign a value for the status/column
    that represents the end of the workflow.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not using the agile simplified workflow, this option is not available;
    the resolution must be set using a workflow transition screen.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up column layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have created all your new columns and mapped them to workflow statuses,
    you can rearrange the layout by dragging and dropping the columns left and right
    to their desired locations, as shown in the following screenshot. The order of
    your column should reflect your workflow, starting from the left and moving to
    the right so that it visually represents the logical flow of an issue through
    the work process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we will see in [Chapter 6](part0109.html#37UDA0-afcd22ce7063477f98fa024bc0dcef11),
    *Jira Software – Advanced*, you will be able to export your issues from your board
    onto a physical board and import them back in, as long as the column layout of
    your Jira agile board is the same as your physical board.
  prefs: []
  type: TYPE_NORMAL
- en: Working with swimlanes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Swimlanes are the horizontal counterparts to the columns on a board. Unlike
    columns, which are always mapped to issue statuses, you can base your swimlanes
    on several criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Queries**: These are Jira search queries constructed with JQL. With this
    option, each swimlane will only show results from its own query. For example,
    you can create a query for each priority value, so you can group your issues based
    on their importance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stories**: Each swimlane will be mapped to a story. All subtasks that fall
    under the story will be displayed in the swimlane.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assignees**: Each swimlane will be mapped based on the issue''s assignee.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Epics**: Each swimlane will be mapped to an epic. All issues that fall under
    the epic will be displayed in the swimlane.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Projects**: Each swimlane will be mapped to a project. If there is only one
    project, there will be only one swimlane.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using swimlanes is a great way to group and categorize your issues on your Scrum
    board. For example, with the Assignees option, you can easily get an idea of each
    team member's workload by just looking at the board.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a Scrum board with three swimlanes based on
    issue priority, using the queries option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up swimlanes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are the board administrator, you can customize the board''s swimlanes
    to better organize your story cards:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Scrum board you want to customize.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Board drop-down menu and select the Configure option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Swimlane from the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the criteria you want to base your swimlanes on from the Base Swimlanes
    on field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you choose to base your swimlanes on Queries, you will need to enter the
    name for each swimlane and its corresponding JQL query, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using quick filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you have a big project team, your board can get very busy. Sometimes you
    want to narrow them down and focus on issues that fit specific criteria, such
    as bugs, or issues that are assigned to a specific user.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using quick filters, we can remove the unnecessary *noise* by filtering
    out all the issues that do not fit the criteria, letting you focus on the issues
    that you care about, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can think of quick filters as additional views for your Scrum board. For
    example, the preceding screenshot shows four quick filters for the Scrum board:
    Stories Only, Bugs Only, Only My Issues, and Recently Updated. By using the Bugs
    Only quick filter, you can get a view of your board showing only bug issues. You
    can toggle a quick filter on and off by clicking on it. When turned on, it will
    be highlighted in blue and update the board with only issues that fit the filter''s
    criteria. Clicking on the filter again will unapply it. You can have more than
    one quick filter applied to a board at the same time, and only issues that fit
    all the filters'' criteria will be shown.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating new quick filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All agile boards come with two default quick filters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Only My Issues: This displays issues that are assigned to the currently logged-in
    user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recently Updated: This displays issues that have been updated in the last 24
    hours'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are the board administrator, you can create new quick filters for your
    board to help you and your team to better visualize your issues. To do this, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the agile board that you want to customize.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Board drop-down menu and select the Configure option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Quick Filters from the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the filter in the Name field. The name entered here will be
    displayed on the agile board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the search query for the filter in the JQL field, as shown in the following
    screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add button to create the new filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once created, the new quick filter will be available to everyone using the
    board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In our example, as shown in the preceding screenshot, the JQL query `issuetype
    = Bug` means that issues that have the value `Bug` for their issue type field
    will be included.
  prefs: []
  type: TYPE_NORMAL
- en: Scrumban
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first mixed agile methodology is called **Scrumban**. As you may have guessed
    from its name, it is a methodology based on Scrum, but with a hint of Kanban mixed
    in. As we have seen in [Chapter 2](part0033.html#VF2I0-afcd22ce7063477f98fa024bc0dcef11),
    *Jira Software for Scrum*, the Scrum methodology revolves around grooming a backlog
    of tasks and running your project in iterations, called sprints. While this is
    a great way to plan and manage your project, it sometimes fall short when it comes
    to actually visualizing the execution of your sprints, which is something Kanban
    is great at. So instead of forcing you to make a choice between the two methodologies,
    Jira lets you use Scrum as the basis, so you can still run your project with time-boxed
    sprints and bring in some of the features and benefits of Kanban, and this hybrid
    methodology is called Scrumban.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 3](part0057.html#1MBG20-afcd22ce7063477f98fa024bc0dcef11), *Jira
    Software for Kanban*, we introduced column constraints and how Jira uses that
    to visually show you bottlenecks in your workflow on a Kanban board. This same
    approach is also how Jira lets you use part of Kanban''s features in Scrum. For
    example, we have set a constraint that there should be a minimum of three and
    no more than five issues in the In Progress column for our Scrum board, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just like with Kanban, once you have placed constraints on a column, if it
    is violated, the column will be highlighted. As shown in the following screenshot,
    the In Progress column has a maximum constraint of three issues, but we have four,
    so it is highlighted in red. The In Review column has a minimum constraint of
    two issues, but we have one, so it is highlighted in yellow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Column constraints do not prevent you from violating the limits. They simply
    help to flag areas where there might be a problem. Setting the limits for your
    columns can be tricky, especially when you are just getting started. You should
    start with your gut feeling, run a few sprints, and refine the limits as you and
    your team get a better feel for the workflow. One way to get started is to base
    your limits on the number of people you have on your team. For example, if you
    have five developers, then your maximum limit for your In Progress columns (assuming
    this means development) should be no more than five, as it is not logical to have
    five people working on six issues at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: So, if we look at the example in the preceding screenshot, we are over the maximum
    limit for the In Progress column. This could mean that the team, especially the
    developers, has overcommitted on their tasks; someone might have decided to work
    on two tasks in parallel. This is causing a bottleneck, and issues are not being
    completed quickly enough to move to the In Review column, causing a minimum limit
    violation, where you have reviewers waiting around for work. This data can be
    very useful in your sprint retrospective meetings to help you review the problem
    and refine the process.
  prefs: []
  type: TYPE_NORMAL
- en: So, as you can see, setting column constraints is situational, and is based
    on your team's composition as well as their abilities. As things change, you will
    need to change your limits accordingly. Remember, the goal here is to measure,
    identify, and improve.
  prefs: []
  type: TYPE_NORMAL
- en: Kanplan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second mixed agile methodology is called **Kanplan**. As the name suggests,
    this methodology leans more toward Kanban than Scrum. In a nutshell, Kanplan allows
    you to have a more robust backlog, while still allowing you time to enjoy the
    flexibility of Kanban.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen in the previous chapter, by default, a Kanban board does not
    have a true backlog. You will usually use the first column on the board as the
    backlog. While this approach works when you are just getting started, very soon
    it will become very hard to manage as the number of items in the column grows.
    This makes it difficult to get a good grasp on all the outstanding issues, and
    also causes trouble when your team tries to prioritize things to work on, especially
    if they have also defined custom swimlanes for your board.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable backlog for a Kanban board, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Kanban board that you want to add a backlog for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Board drop-down menu and select the Configure option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Columns option from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag one or more workflow statuses into the Kanban backlog section on the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, we have a Backlog column in our Kanban
    columns setup, but since we now want to use the backlog feature, we move the Backlog
    status to the Kanban backlog column instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new Kanban backlog works just like any board columns: You can have more
    than one status mapped to it, so any issues in one of the mapped statuses will
    appear in the new backlog. Note that because of this, any issues that are not
    in a mapped status will not appear in the new backlog, so make sure you add all
    the appropriate statuses.'
  prefs: []
  type: TYPE_NORMAL
- en: Simply mapping all your existing statuses in the default Backlog column to the
    new Kanban backlog would be the easiest way to ensure you do not leave any issues
    off.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have enabled backlog for your Kanban board, you will see the new Backlog
    option at the top of the left-hand navigation panel when you go to your project.
    Clicking on that will show you a very similar interface to Scrum, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Just like a Scrum' backlog, all issues are ordered from top to bottom. You can
    drag any issue up and down the backlog queue to prioritize it. For issues that
    are at the very bottom, you can right-click on the issue and send it straight
    to the top.
  prefs: []
  type: TYPE_NORMAL
- en: 'One key difference between a Kanban backlog and a Scrum backlog is that since
    Kanban does not have sprints, you do not create them and then add issues to the
    sprints. Instead, you add issues to the next status or column in the workflow.
    In the example shown in the preceding screenshot, this is the Selected for Development
    column. If you are familiar with Scrum, that is the section where your new sprint
    is, and you will be adding issues into the sprint. Here in Kanban, you are prioritizing
    and moving issues from the backlog''s to-do list into an action list. With this
    change, your new Kanban board will look something similar to the one shown in
    the following screenshot, where the board will focus on the actual issues that
    have been prioritized without the noise of a big overwhelming Backlog column to
    distract your team with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And this is not where the new Kanplan backlog stops. By leveraging the same
    backlog feature available to Scrum, you now also get access to features such as
    managing your issues with epics in a visual way, just like in Scrum. This is especially
    helpful for Scrum teams that are just starting to move toward using Kanplan. The
    epics panel for your backlog should be enabled by default, but if for some reason
    it is not, you can always manually enable it by going to the Column management
    page of your agile board''s configuration panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at different ways to customize and manage your agile
    board in Jira. Some of the important points we have covered include managing the
    permissions and scopes of an agile board, customizing the board's columns, mapping
    board columns to Jira workflow statuses, and using swimlanes to group similar
    issues to better categorize our issues.
  prefs: []
  type: TYPE_NORMAL
- en: We also touched on some concepts in Jira, such as permissions and workflows.
    In the next chapter, we will take a deeper look into these core features of Jira,
    and how you can customize and manage them to suit your specific needs.
  prefs: []
  type: TYPE_NORMAL
