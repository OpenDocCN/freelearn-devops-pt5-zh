["```\n(0.99)^10 = 0.9043\n```", "```\nconst Hapi = require('hapi')\nconst server = new Hapi.Server()\nconst moment = require('moment')\n\nserver.connection({port: 3000})\n\nserver.route({\n  method: 'GET',\n  path: '/isodate/{timestamp}',\n  handler: (request, reply) => {\n    reply({date: moment.unix(request.params.timestamp).toISOString()})\n  }\n})\n\nserver.start((err) => {\n  if (err) {\n    throw err\n  }\n  console.log('isodate-service started on port 3000')\n})\n```", "```\n{\n  \"name\": \"isodate-service\",\n  \"version\": \"1.0.0\",\n  \"description\": \"ISO Date Service\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"author\": \"David Gonzalez\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"hapi\": \"^15.2.0\",\n    \"moment\": \"^2.15.1\"\n  }\n}\n```", "```\nFROM node:latest\n\nRUN mkdir /app/\nWORKDIR /app/\n\nCOPY . /app/\nRUN npm install\nEXPOSE 3000\n\nCMD [\"npm\", \"start\"]\n```", "```\ndocker build . -t iso-date-service\n```", "```\ndocker run -it -p 3000:3000 iso-date-service\n```", "```\ncurl http://localhost:3000/isodate/1491231233\n```", "```\nconst Hapi = require('hapi')\nconst server = new Hapi.Server()\nconst moment = require('moment')\nserver.connection({port: 3001})\n\nserver.route({\n  method: 'GET',\n  path: '/utcdate/{timestamp}',\n  handler:  (request, reply) => {\n    let date = moment.unix(request.params.timestamp).utc().toISOString().substring(0, 19)\n    reply({date: date})\n  }\n})\n\nserver.start((err) => {\n  if (err) {\n    throw err\n  }\n  console.log('isodate-service started on port 3001')\n})\n```", "```\n{\n  \"name\": \"utcdate-service\",\n  \"version\": \"1.0.0\",\n  \"description\": \"UTC Date Service\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\"\n  },\n  \"author\": \"David Gonzalez\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"hapi\": \"^15.2.0\",\n    \"moment\": \"^2.15.1\"\n  }\n}\n```", "```\ndocker build . -t utc-date-service\n```", "```\ndocker run -it -p 3001:3001 utc-date-service\n```", "```\ncurl http://localhost:3001/utcdate/853123135\n```", "```\nconst Hapi = require('hapi')\nconst server = new Hapi.Server()\nlet request = require('request')\n\nserver.connection({port: 8080})\n\nserver.route({\n  method: 'GET',\n  path: '/dates/{timestamp}',\n  handler:  (req, reply) => {\n    const utcEndpoint = `http://utcdate-service:3001/utcdate/${req.params.timestamp}`\n    const isoEndpoint = `http://isodate-service:3000/isodate/${req.params.timestamp}`\n    request(utcEndpoint, (err, response, utcBody) => {\n      if (err) {\n        console.log(err)\n        return\n      }\n      request(isoEndpoint, (err, response, isoBody) => {\n        if (err) {\n          console.log(err)\n          return\n        }\n        reply({\n          utcDate: JSON.parse(utcBody).date,\n          isoDate: JSON.parse(isoBody).date\n        })\n      })\n    })\n  }\n})\n\nserver.start((err) => {\n  if (err) {\n    throw err\n  }\n  console.log('aggregator started on port 8080')\n})\n```", "```\n{\n   \"name\": \"aggregator\",\n   \"version\": \"1.0.0\",\n   \"description\": \"Aggregator service\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n       \"start\": \"node index.js\"\n   },\n   \"author\": \"David Gonzalez\",\n   \"license\": \"ISC\",\n   \"dependencies\": {\n       \"hapi\": \"^15.2.0\",\n       \"request\": \"^2.75.0\"\n   }\n}\n```", "```\nFROM node:latest\n\nRUN mkdir /app/\nWORKDIR /app/\n\nCOPY . /app/\nRUN npm install\nEXPOSE 3000\n\nCMD [\"npm\", \"start\"]\n```", "```\ndocker build . -t aggregator\n```", "```\ndocker run -it -p 8080:8080 aggregator\n```", "```\ndocker tag iso-date-service eu.gcr.io/implementing-modern-devops/isodate-service:1.0\n```", "```\ndocker tag utc-date-service eu.gcr.io/implementing-modern-devops/utcdate-service:1.0\n```", "```\ndocker tag aggregator eu.gcr.io/implementing-modern-devops/aggregator-service:1.0\n```", "```\ngcloud docker -- push eu.gcr.io/implementing-modern-devops/aggregator-service:1.0\n```", "```\ngcloud docker -- push eu.gcr.io/implementing-modern-devops/isodate-service:1.0\n```", "```\ngcloud docker -- push eu.gcr.io/implementing-modern-devops/utcdate-service:1.0\n```", "```\ngit clone git@github.com:dgonzalez/aggregator.git\n```", "```\ngit add .\n```", "```\ngit commit -m 'Initial commit'\n```", "```\ngit push origin master\n```", "```\ngit tag -a 1.0 -m \"my first tag\"\n```", "```\ngit push origin 1.0\n```", "```\nwget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -\n```", "```\nsudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'\n```", "```\nsudo apt-get update\n```", "```\nsudo apt-get install jenkins\n```", "```\nsudo service jenkins restart\n```", "```\ncat /var/log/jenkins/jenkins.log\n```", "```\nsudo su jenkins\n```", "```\ncurl https://sdk.cloud.google.com | bash\n```", "```\ngcloud components install kubectl\n```", "```\nkubectl get nodes\n```", "```\nln -s /root/google-cloud-sdk/bin/kubectl /usr/bin/kubectl\n```", "```\nln -s /var/lib/jenkins/google-cloud-sdk/bin/kubectl /usr/bin/kubectl\n```", "```\nkubectl get nodes\n```", "```\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: aggregator\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: aggregator-service\n    spec:\n      containers:\n      - name: aggregator-service\n        image: eu.gcr.io/implementing-modern-devops/aggregator-service:1.0\n        ports:\n        - containerPort: 8080\n```", "```\nkind: Service\napiVersion: v1\nmetadata:\n   name: aggregator-service\nspec:\n   ports:\n      - port: 80\n         targetPort: 8080\n   selector:\n      app: aggregator-service\n   type: LoadBalancer\n```", "```\ngit add .\n```", "```\ngit commit -m 'Initial commit'\n```", "```\ngit push origin master\n```", "```\n{\n   utcDate: \"2005-03-18T01:58:31\",\n   isoDate: \"2005-03-18T01:58:31.000Z\"\n}\n```", "```\nconst Hapi = require('hapi')\nconst server = new Hapi.Server()\nlet request = require('request')\n```", "```\nserver.connection({port: 8080})\n```", "```\nserver.route({\n  method: 'GET',\n  path: '/dates/{timestamp}',\n  handler: (req, reply) => {\n    const utcEndpoint = `http://utcdate-service:3001/utcdate/${req.params.timestamp}`\n    const isoEndpoint = `http://isodate-service:3000/isodate/${req.params.timestamp}`\n    request(utcEndpoint, (err, response, utcBody) => {\n      if (err) {\n        console.log(err)\n        return\n      }\n      request(isoEndpoint, (err, response, isoBody) => {\n      if (err) {\n        console.log(err)\n        return\n      }\n      reply({\n        utcDate: JSON.parse(utcBody).date,\n        isoDate: JSON.parse(isoBody).date,\n        raw: req.params.timestamp\n       })\n     })\n   })\n  }\n})\n\nserver.start((err) => {\n  if (err) {\n    throw err\n  }\n  console.log('aggregator started on port 8080')\n})\n```", "```\ngit checkout -b raw-timestap\n```", "```\ngit add . && git commit -m 'added raw timestamp'\n```", "```\ngit push origin raw-timestamp\n```", "```\ngit add . && git commit -m 'version 2.0 of aggregator' && git push origin master\n```", "```\n{\n   utcDate: \"2005-03-18T01:58:31\",\n   isoDate: \"2005-03-18T01:58:31.000Z\",\n   raw: \"1111111111\"\n}\n```", "```\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: aggregator-bluegreen\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: aggregator-service-2.0\n    spec:\n      containers:\n      - name: aggregator-service\n         image: eu.gcr.io/implementing-modern-devops/aggregator-service:2.0\n         ports:\n           - containerPort: 8080\n```", "```\nkind: Service\napiVersion: v1\nmetadata:\n  name: aggregator-service-bluegreen\nspec:\n  ports:\n  - port: 80\n     targetPort: 8080\n  selector:\n     app: aggregator-service-2.0\n  type: LoadBalancer\n```", "```\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: aggregator-canary\nspec:\n replicas: 1\n  template:\n    metadata:\n      labels:\n app: aggregator-service\n    spec:\n      containers:\n      - name: aggregator-service\n         image: eu.gcr.io/implementing-modern-devops/aggregator-service:2.0\n         ports:\n         - containerPort: 8080\n```"]