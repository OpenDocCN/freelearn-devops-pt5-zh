- en: Chapter 11. Securing the Network
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 网络安全
- en: With many businesses transitioning to software-defined networks and using APIs
    to make network changes, the importance of securing the network is a prominent
    concern. Security implementations need to evolve too, as the network is virtualized
    and modern protocols are used to build Leaf-Spine architectures to scale out multi-tenant
    cloud environments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着许多企业转向软件定义网络并使用API进行网络变更，确保网络安全的重要性成为一个突出问题。安全实施也需要发展，因为网络被虚拟化，并且现代协议用于构建Leaf-Spine架构以扩展多租户云环境。
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The evolution of network security and debunking myths
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络安全的发展与破解误区
- en: Securing a software-defined network
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护软件定义网络
- en: Network security and Continuous Delivery
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络安全与持续交付
- en: The evolution of network security and debunking myths
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络安全的发展与破解误区
- en: As network engineers become accustomed to a flat layer 2 network and Spanning
    Tree protocol as discussed in [Chapter 1](ch01.html "Chapter 1. The Impact of
    Cloud on Networking"), *The Impact of Cloud on Networking*, network security and
    approaches towards securing an enterprise network have become very mature and
    well understood by security teams over the years.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网络工程师逐渐适应[第1章](ch01.html "第1章 云对网络的影响")中讨论的平面二层网络和生成树协议，*云对网络的影响*，网络安全及确保企业网络的方式在多年的发展中变得非常成熟，且已被安全团队充分理解。
- en: Most security engineers are well versed in the best practices that should be
    implemented when dealing with physical networks. A security team will normally
    look to implement a rigid set of security best practices on the network, which
    network teams must comply with, to pass necessary accreditations. But how applicable
    are these best practices when implementing software-defined networking?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数安全工程师对处理物理网络时应该实施的最佳实践都很熟悉。安全团队通常会实施一套严格的安全最佳实践，网络团队必须遵守这些实践，才能通过必要的认证。但是，这些最佳实践在实施软件定义网络时的适用性如何？
- en: It is fair to say that there is still a knowledge gap that exists regarding
    software-defined networking at the moment and there is a degree of fear and uncertainty
    of the unknown from security engineers and even some network engineers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以公平地说，目前仍然存在有关软件定义网络的知识差距，安全工程师甚至一些网络工程师对未知充满恐惧和不确定性。
- en: This chapter will hopefully help demystify some of those concerns. This is coming
    from someone that helps run a software-defined network in production, so this
    isn't talking about theories or aspirations, it is based on hard facts.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章希望能够帮助解开一些相关疑虑。作者是一个帮助运营软件定义网络的人员，这些内容并非理论或期望，而是基于坚实的事实。
- en: So first let's review some of the requests from security teams around network
    security and look at how these requests should be adapted when dealing with software-defined
    networking.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，首先让我们回顾一下安全团队对网络安全的一些要求，并看看在处理软件定义网络时这些要求应如何调整。
- en: Account management
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帐户管理
- en: 'In terms of account management, security teams will normally stipulate that
    the following best practices are adhered to when setting up user access:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在帐户管理方面，安全团队通常会要求在设置用户访问时遵循以下最佳实践：
- en: Two-factor authentication should be used when accessing production servers
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问生产服务器时应使用双因素认证
- en: User accounts should respect the least privileges necessary for users
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户帐户应遵循最小权限原则，确保用户只拥有必要的权限
- en: Unique user accounts should be used between test and production environments
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试环境与生产环境之间应使用独立的用户帐户
- en: '**DenyAll** should be default on Access Control Lists'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DenyAll** 应该是访问控制列表的默认设置'
- en: Use **Terminal Access Controller Access Control System** (**TACACS**) or equivalent
    authentication to access network devices
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**终端访问控制器访问控制系统**（**TACACS**）或同等的认证方式来访问网络设备
- en: When reviewing account management, all points outlined by security practitioners
    remain valid. Any **Software-defined Networking** (**SDN**) controller or modern
    switch vendor should meet the account management requirements when they are being
    evaluated. If they don't meet these requirements, they simply should not be implemented
    in production.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查帐户管理时，安全从业者列出的所有要点仍然有效。任何**软件定义网络**（**SDN**）控制器或现代交换机厂商在评估时应该满足帐户管理要求。如果它们未满足这些要求，便不应在生产环境中实施。
- en: When using software-defined networking always aligned with a Continuous Delivery
    model, service accounts will be used by orchestration and configuration management
    tools such as **Ansible** to setup subnets, networks, and **ACL** policies to
    carry out any network changes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用软件定义网络，并始终与持续交付模型保持一致时，服务账户将被自动化编排和配置管理工具（如**Ansible**）用来设置子网、网络和**ACL**策略，以执行任何网络更改。
- en: The user committed to the source control management system will inevitably be
    the person that invoked the network changes even though it will be invoked by
    a service account. This in itself is a cultural shift, so privileges on the source
    control management repository should be reviewed to set up **Active Directory
    Domain Services** (**ADDS**) or **Lightweight Directory Access Protocol** (**LDAP**)
    access so commits are tracked and can be traced back to the user that made the
    change. Continuous Delivery tooling such as **Jenkins**, **ThoughtWorks**, **Go**,
    or a Plethora of other continuous integration build servers can cater for this
    requirement.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 提交到源代码管理系统的用户将不可避免地成为触发网络更改的人员，尽管这些更改是通过服务账户执行的。这个过程本身就是一种文化上的转变，因此应审查源代码管理库上的权限，以设置**Active
    Directory 域服务**（**ADDS**）或**轻量级目录访问协议**（**LDAP**）的访问权限，这样就可以追踪提交记录，并追溯到进行更改的用户。持续交付工具如**Jenkins**、**ThoughtWorks**、**Go**或其他许多持续集成构建服务器，可以满足这个需求。
- en: Separate service accounts can be used to orchestrate test and production environments
    to meet security best practices. All other user accounts in a Continuous Delivery
    model should be read-only, so users can view the outcome of a Continuous Delivery
    deployment, which is driven by automation, with a break glass account being the
    exception to the rule and available for use in a state of emergency.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用单独的服务账户来编排测试和生产环境，以满足安全最佳实践。持续交付模型中的所有其他用户账户应为只读权限，用户可以查看由自动化驱动的持续交付部署的结果，除非是破玻账户，在紧急状态下可用。
- en: It is important for security teams to understand that if users are manually
    intervening in immutable software-defined networks, then the overall Continuous
    Delivery model could break, so there is no appetite to do manual configuration
    . All desired state should be controlled via source control management systems
    and pushed out to systems accordingly. This, again, is a mindset change and security
    practitioners generally find this hard to believe, as they have spent years seeing
    network engineers push manual changes to devices to make any changes, but this
    is a new approach and a huge change for some.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安全团队必须理解，如果用户在不可变的软定义网络中进行手动干预，那么整体的持续交付模型可能会被破坏，因此没有进行手动配置的空间。所有的期望状态应通过源代码管理系统进行控制，并相应地推送到系统中。这再次是一个思维方式的转变，安全从业人员通常难以相信这一点，因为他们多年来一直看到网络工程师通过手动变更设备来做出任何修改，但这是一种新的方法，对于某些人来说是一个巨大的变化。
- en: 'This was illustrated in [Chapter 9](ch09.html "Chapter 9. Using Continuous
    Delivery Pipelines to Deploy Network Changes"), *Using Continuous Delivery Pipelines
    to Deploy Network Changes*, when utilizing configuration management tools such
    as Ansible to push out network changes to test and production environments:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点在[第9章](ch09.html "第9章：使用持续交付流水线部署网络变更")《使用持续交付流水线部署网络变更》中得到了说明，文中提到，利用像Ansible这样的配置管理工具，将网络变更推送到测试和生产环境时：
- en: '![Account management](img/B05559_11_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![账户管理](img/B05559_11_01.jpg)'
- en: This concept is initially difficult for security practitioners to grasp, but
    the **DevSecOps** movement is helping security practitioners see the window of
    opportunity that an automated Continuous Delivery process brings.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这一概念最初对于安全从业人员来说难以理解，但**DevSecOps**运动正在帮助安全从业人员看到自动化持续交付过程带来的机会窗口。
- en: Automation should mean users have fewer individual privileges and approved workflow
    actions are hardened and signed off, which govern what kind of interaction is
    allowed. All of this is controlled via the Continuous Delivery pipeline.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化应意味着用户拥有更少的个人权限，并且批准的工作流操作是经过强化和签署的，控制允许进行何种交互。所有这些都通过持续交付流水线进行控制。
- en: Network device configuration
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络设备配置
- en: Security best practices with regards to the configuration of network devices
    focus on keeping an up-to-date auditable inventory of the network, with security
    patching being applied on a regular basis to each network device at an operating
    system level, and secure protocols and **Public Key Infrastructure** (**PKI**)
    certificates being applied from relevant trust stores.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'As such, a common set of requirements from a security team for configuration
    of network devices may include:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: A network hardware list should be available in an **IP Address Management**
    (**IPAM**) solution
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All network devices should be patched regularly
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure SNMP version 3 or above
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable ports not in use
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use **Transport Layer Security** (**TLS**) to encrypt network traffic
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security approaches to network device configuration should also not change
    in terms of setup, as SDN controllers and modern switch vendors should look to
    use TLS, be patched regularly, and be accessible via DNS.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: An underlay network when utilizing a Leaf-Spine architecture and overlay network
    is still comprised of physical network devices, so the configuration and best
    practices associated with securing these devices are still completely valid and
    integral.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: SDN controllers, like network switches, are deployed on the layer 2 underlay
    network, so should follow the same conventions as network switches, have secure
    protocols, and adhere to patching schedules.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Firewalling
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the major sources of confusion from security teams in industry when looking
    at software-defined networking seems to be around firewalling and some fear and
    uncertainty exists as they are used to using physical **stateful** firewalls in
    production networks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: However, as long as a virtual firewall meets security requirements, there should
    be no issue implementing SDN controllers and allowing them to control firewalling
    and segmentation of the network using virtualized micro-segmentation policies.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Security teams will traditionally mandate the following requirements from firewalls:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Use a stateful firewall
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use explicit permits and implicit denies on ACL rules
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have the ability to audit teams' ACL access
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log all denied attempts on the firewall
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewall best practices should always be adhered to when implementing software-defined
    networking; traditionally though, security teams have always pushed for stateful
    physical firewalls to separate three-tier models, which are segregated into frontend,
    business logic, and backend tiers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: With the move towards microservices and the adoption of software-defined networking,
    applications have tended not to fit into this structure and **Open vSwitch** has
    allowed OpenFlow to be used to implement **Ingress** and **Egress** policies at
    the hypervisor level or operating system host level.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: We have also seen that this same process can be applied to containers in [Chapter
    11](ch11.html "Chapter 11. Securing the Network"), *The Impact of Containers on
    Networking,* and Open VSwitch can be installed on container hosts such as Core
    OS, or even on bare metal servers to control firewall polices.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到，这一相同的过程可以应用于[第11章](ch11.html "第11章。网络安全")，*容器对网络的影响*，并且Open vSwitch可以安装在容器主机上，如Core
    OS，甚至在裸金属服务器上，以控制防火墙策略。
- en: As long as the same best practice principles of using explicit permits and implicit
    denies on ACL rules are adhered to, and a process is set up to log all denied
    attempts on the firewall, then there should be no reasons to argue against the
    merits of using virtualized firewalling.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 只要遵循使用显式允许和隐式拒绝的最佳实践原则，并为防火墙上的所有拒绝尝试设置日志记录过程，那么就没有理由反对使用虚拟化防火墙的优点。
- en: Open vSwitch now offers stateful firewalling, which is now as secure as iptables
    on a Linux operating system or a physical firewall, so there is now no reason
    why firewalling cannot be virtualized for enterprise networks. This mirrors the
    debate about the use of hypervisors initially for infrastructure services, but
    the gains it brings a business in terms of scalability, programmability, auditability,
    and manageability make it hard to argue against firewall virtualization.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Open vSwitch现在提供有状态防火墙功能，安全性与Linux操作系统上的iptables或物理防火墙相同，因此现在没有理由不将防火墙虚拟化用于企业网络。这与最初关于使用虚拟机管理程序进行基础设施服务的讨论相似，但它在可扩展性、可编程性、可审计性和可管理性方面为企业带来的好处，使得难以反对防火墙虚拟化。
- en: Vulnerability detection
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 漏洞检测
- en: Overlay networks, in terms of the detection of vulnerabilities and attacks,
    should also not change in terms of security requirements, although the method
    for acquiring the data may need to change slightly, as protocols such as **Border
    Gateway Protocol** (**BGP**) and **Virtual Extensible LAN** (**VXLAN**) need different
    tooling to track packets in the network.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就漏洞和攻击的检测而言，叠加网络的安全要求也不应发生变化，尽管获取数据的方法可能需要稍微改变，因为像**边界网关协议**（**BGP**）和**虚拟可扩展局域网**（**VXLAN**）这样的协议需要不同的工具来跟踪网络中的数据包。
- en: 'When looking at vulnerability detection and data sampling, the following activities
    should be scheduled on a regular basis:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行漏洞检测和数据采样时，以下活动应定期安排：
- en: Regular vulnerability scanning
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期漏洞扫描
- en: Deep packet inspection
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度数据包检查
- en: In terms of vulnerability scanning, scanning of the network and network devices
    should be carried out frequently. Ideally security scanners themselves should
    have separate responsibilities in a software-defined network. A security scanner
    should have access to the underlay to do a full scan and another profile of the
    scanner should be used for the overlay. If a scanner has access to the underlay
    and overlay, it becomes an attack vector, which if compromised would allow an
    attacker complete access to the network. So this is an important point often ignored;
    the overlay and underlay network devices and compute should not be routable to
    one another if possible.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在漏洞扫描方面，应当频繁地对网络及网络设备进行扫描。理想情况下，安全扫描器本身应在软件定义网络中具有独立的职责。安全扫描器应当能够访问基础网络进行全面扫描，另一个扫描器配置文件应当用于叠加网络。如果扫描器能够访问基础网络和叠加网络，它就会成为攻击向量，一旦被攻破，攻击者便能完全访问网络。因此，这是一个常常被忽视的重要问题；如果可能的话，叠加网络和基础网络设备及计算资源不应互相可路由。
- en: It is often a requirement of a security team to be able to inspect network packets
    using deep packet inspection to make sure that there is no malicious activity.
    This has been done on flat layer 2 networks by inspecting packets that are transmitted
    between VLANs.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 安全团队通常要求能够通过深度数据包检查来检查网络数据包，以确保没有恶意活动。这在平面二层网络中已通过检查在VLAN之间传输的数据包来完成。
- en: However, with overlay transporting packets using VXLAN encapsulation, networks
    can scale out network and alleviate the 4096 VLAN limit. This means that network
    and security teams will require tools that can de-encapsulate VXLAN packets so
    they can able to inspect packets, as they have with VLAN packets, otherwise security
    tools will see data is being transmitted but it won't be able to be read it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着叠加网络通过VXLAN封装传输数据包，网络能够扩展并缓解4096 VLAN限制。这意味着网络和安全团队将需要能够解封装VXLAN数据包的工具，以便像检查VLAN数据包一样检查数据包，否则安全工具将看到数据正在传输，但无法读取它。
- en: Setting up tooling that does VXLAN de-encapsulation is by no means an insurmountable
    challenge. Tooling is available to do this, it will just require that network
    and security teams alter the tools they are currently used to using.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Network segmentation
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the biggest changes when implementing a software-defined overlay network
    is a shift away from the principles of a flat layer 2 network and VLAN segregation
    between networks.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Security teams are used to dealing with physical networks, so they will normally
    stipulate that the following requirements need to be met:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Use VLANs to segregate traffic types (frontend, business logic, and backend)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to segregate **Test** and **Production**
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use firewalls between different network tiers
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, SDN controllers create VXLAN tunnels between hardware **Virtual Tunnel
    End Points** (**VTEPs**) on network switches and stretches them to each hardware
    compute node to build a virtualized overlay underlay network over the network.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: SDN controllers are used to translate the **Open vSwitch Database** (**OVSDB**)
    information from switch vendors and push the flow data down to each compute node
    (hypervisor, container, or bare metal server), which is dictated by the SDN controller's
    policy engine to create firewalls and micro-segmentation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: It is a differing approach; firewalling per microservice application is dictated
    by **OpenFlow** and used to control Ingress and Egress policies. Using overlay
    networks, applications can communicate with another application's micro-segmented
    zone as illustrated by the **Nuage Networks** **Virtual Service Platform** (**VSP**)
    in [Chapter 2](ch02.html "Chapter 2. The Emergence of Software-defined Networking"),
    *The Emergence Of Software, Defined Networking*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we can see the **Application 1** micro-subnet communicating
    with **Application 2** by communicating subnet to zone:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![Network segmentation](img/B05559_11_02.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: Using micro-segmentation of firewall rules per application moves away from having
    physical, stateful firewalls segmenting zones for all applications. Instead, individual
    firewalls are created per application to govern segmentation between the network,
    with layer 3 domains segmenting **Test** and **Production** from each other at
    a layer above.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Each application has their own policy in this micro-segmentation model, which
    means security teams have the ability to audit firewall policies and understand
    what each application is communicating with.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Overlay networks for this reason should bring security gains, as it becomes
    completely clear the connectivity requirements for an application and connectivity
    topologies are not lost in a set of monolithic ACL rules on a physical stateful
    firewall, which aren't clearly mapped to each application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Software-defined networking should mean that each application has an initial
    deny all and opens up only the minimum amount of explicit access so they can access
    other applications or services in the network.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: This is far more secure than opening up port ranges on a stateful firewall,
    so overlay networks should, in theory, improve complex network security when implemented
    correctly. If immutable networks are used as highlighted by A/B subnets in [Chapter
    6](ch06.html "Chapter 6. Orchestrating SDN Controllers Using Ansible"), *Orchestrating
    SDN Controllers Using Ansible,* then automatic cleanup of old ACL rules is also
    implemented by default, which has been a challenge for network and security teams
    as they are afraid to remove old policies in the fear of creating an outage for
    a particular application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这比在有状态防火墙上开放端口范围要安全得多，因此，理论上，叠加网络在正确实施时应能提高复杂网络的安全性。如果使用了如[第6章](ch06.html "第6章.
    使用Ansible编排SDN控制器")中所强调的不可变网络（如A/B子网），*使用Ansible编排SDN控制器*，那么旧的ACL规则也会默认自动清理，这一直是网络和安全团队面临的挑战，因为他们担心删除旧的策略会导致特定应用程序出现故障。
- en: Security teams can audit that policy with development teams and advise on any
    changes that need to be made, safe in the knowledge that as far as a development
    team is concerned, all of the ACL policies they are implementing are required
    to deploy their application with the bare minimum amount of explicit Ingress and
    Egress ACL rules being used.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安全团队可以与开发团队一起审核这些策略，并提供任何需要更改的建议，确保开发团队实施的所有ACL策略都是部署应用程序所必需的，并且使用的显式入口和出口ACL规则的数量是最小的。
- en: Securing a software-defined network
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护软件定义网络
- en: So far in this chapter, we have focused on a set of minimal network security
    requirements to make sure that a software-defined network is secure.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章重点介绍了一组最小的网络安全要求，以确保软件定义网络的安全性。
- en: But to maximize the security of a software-defined network, we should look at
    how overlay and underlay networks could potentially be exploited in new ways by
    attackers and look at different mechanisms that can be put in place to prevent
    this from happening.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了最大化软件定义网络的安全性，我们应该关注叠加层和基础层网络如何可能被攻击者以新方式利用，并探讨可以采取的不同机制，以防止这种情况的发生。
- en: Software-defined Networks are split into the overlay (which holds all the virtualized
    networks that houses virtual, physical machines, and containers) and the underlay
    (which holds all bare metal machines such as hypervisors, network devices, and
    SDN controllers).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 软件定义网络被分为叠加层（包含所有虚拟化网络，承载虚拟机、物理机和容器）和基础层（包含所有裸机设备，如虚拟化管理程序、网络设备和SDN控制器）。
- en: Attacks at Overlay
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在叠加层的攻击
- en: '**Overlay** networks are created to allow networks to be automated programmatically
    via APIs and increase the speed of change by simplifying the network in software.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**叠加层**网络的创建旨在通过API以编程方式自动化网络，并通过简化软件中的网络结构来加快变化速度。'
- en: Within the remit of Continuous Delivery, self-service ACL rules can be set up
    by developers to govern north to south and east to west ACL policies.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续交付的范围内，开发人员可以设置自服务的ACL规则来管理南北向和东西向的ACL策略。
- en: It is important to have implicit controls that make sure that common workflow
    actions only allow teams to set ACL rules from their micro-subnet to different
    locations in the network, and that they can't compromise the integrity of any
    other network in the overlay except their own. So this should be demonstrable
    by testing the self-service automation to security teams.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要有隐式控制，确保常见工作流操作只允许团队从其微子网设置ACL规则到网络中的其他位置，而且他们不能妥协叠加层中任何其他网络的完整性，除了他们自己的网络。因此，应通过测试自服务自动化来向安全团队证明这一点。
- en: 'Micro-segmentation is powerful in the following example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 微分段在以下示例中非常强大：
- en: When using implicit allows, team A with application 1 can only communicate with
    application 2, which is maintained by team B, if team B allows explicit Ingress
    rules that allow application 1 to communicate with it. So teams will have to coordinate
    between themselves, and their applications will only be able to communicate with
    one another if there is both an Egress and Ingress rule on each microservice application's
    firewall.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用隐式允许时，团队A中的应用程序1只能与团队B维护的应用程序2通信，如果团队B允许显式入口规则来允许应用程序1与之通信。因此，团队之间需要协调，他们的应用程序只有在每个微服务应用程序的防火墙上都有出口和入口规则时，才能相互通信。
- en: Aside from this, some applications may need northbound Internet access, so it
    is important that network teams put in place a mechanism to proxy out to the Internet
    and not give teams the ability to directly access it. A controlled proxy mechanism
    should be implemented by the network team so that there is a fixed mechanism to
    govern northbound Internet access.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，一些应用可能需要向北的互联网访问，因此网络团队需要建立一个代理机制来访问互联网，而不是直接给团队提供访问权限。网络团队应实施受控的代理机制，以便有一个固定的机制来管理向北的互联网访问。
- en: Attackers may try and compromise a virtual machine or physical server that is
    part of the overlay network. Once they gain access to a machine, they could attempt
    to download software and compromise the network. An attacker could potentially
    attempt a **Denial of Service** (**DoS**) on a particular micro-subnet, which
    could be used to compromise a key service by compromising all virtual machines
    in the micro-subnet.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能会试图攻破覆盖网络中的虚拟机或物理服务器。一旦他们获得对机器的访问权限，可能会尝试下载软件并破坏网络。攻击者还可能尝试进行**拒绝服务攻击**（**DoS**），以破坏特定的微子网，这可能会通过攻破微子网中的所有虚拟机来破坏关键服务。
- en: A benefit of micro-segmentation over a layer 2 network is that if one box was
    compromised in production, an attacker could have access to the whole frontend,
    business logic, or backend zone, while with micro-segmentation they would be isolated
    to the particular application.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 微分段相对于二层网络的一个好处是，如果生产环境中的一台主机被攻破，攻击者可以访问整个前端、业务逻辑或后端区域，而在微分段的情况下，他们会被限制在特定的应用程序中。
- en: With regards to outbound Internet access and setting up a proxy, it is imperative
    that upstream repositories used to download software packages to hosts go via
    a controlled proxy server, using an artifact repository with **Role Based Access
    Control** (**RBAC**) using Active Directory Domain Services or LDAP such as **Artifactory**
    or **Nexus**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 关于外向互联网访问和设置代理，至关重要的是用于下载软件包到主机的上游仓库应该通过受控的代理服务器进行，使用基于**角色的访问控制**（**RBAC**），通过
    Active Directory 域服务或 LDAP，如 **Artifactory** 或 **Nexus**。
- en: This means that servers within the overlay network can only access a set of
    approved third-party software repositories that have been given the blessing of
    the infrastructure team. Repositories not on the approved list cannot be accessed
    via the overlay network servers, as they are not proxied by the artifact repository,
    thus preventing the installation of dubious packages onto servers in the overlay
    network.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着覆盖网络中的服务器只能访问一组经过基础设施团队批准的第三方软件仓库。未经批准的仓库无法通过覆盖网络服务器访问，因为它们不通过软件仓库代理，从而防止将可疑的软件包安装到覆盖网络中的服务器上。
- en: Proxying via an artifact repository means network and security teams can take
    measures to prevent packet sniffing software being downloaded onto a server to
    discover adjacent services or open ports dictated by the Ingress and Egress flow
    data.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过软件仓库代理意味着网络和安全团队可以采取措施，防止下载数据包嗅探软件到服务器上，从而发现相邻服务或由入口和出口流量数据决定的开放端口。
- en: It may also be desirable to disable **Internet Control Message Protocol** (**ICMP**)
    in the overlay network so that an attacker cannot work out the IP addresses of
    adjacent servers in a micro-subnet or underlay network devices such as top-of-rack
    switches and SDN controllers by doing a trace route.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 还可能需要禁用**互联网控制消息协议**（**ICMP**），以防攻击者通过路由追踪找到微子网中相邻服务器的 IP 地址或底层网络设备（如机架顶端交换机和
    SDN 控制器）的地址。
- en: If a server in the overlay network is logging drops, then appropriate alerting
    should be set up to notify the network or security team that some illicit activity
    is occurring within a micro-subnet.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果覆盖网络中的服务器记录丢包，那么应该设置适当的警报，通知网络或安全团队，某些非法活动正在微子网内发生。
- en: Mechanisms can be put in place to tag compromised boxes with metadata in this
    case and use tools such as Ansible dynamic inventory to target them altogether
    by issuing a shut down or moving them to a quarantined network using live migration,
    which will stop a potential network attacker from gaining access to other servers
    in the network.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，可以通过标记被攻击的主机并使用像 Ansible 动态库存等工具来将它们整体定位，发出关闭命令或通过实时迁移将它们移至隔离网络，从而阻止潜在的网络攻击者访问网络中的其他服务器。
- en: Attacks on the underlay network?
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对底层网络的攻击？
- en: The **underlay** network could be targeted by potential attackers by gaining
    access to a hypervisor and looking to compromise Open vSwitch. This would allow
    them to directly instantiate new flows into the Open vSwitches flow-table, allowing
    access to multiple different locations in the network.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**下层**网络可能成为潜在攻击者的目标，攻击者通过访问虚拟化管理程序并寻求妥协 Open vSwitch 来实现这一目标。这将使他们能够直接在 Open
    vSwitch 的流表中实例化新流，从而访问网络中的多个不同位置。'
- en: The attacker could sniff traffic and perform a **Man in the Middle** (**MitM**)
    attack on different network components as a result, so hypervisors should ideally
    be on a separate network, which will isolate access to compute servers and not
    allow them to be directly routable from the overlay network.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能会嗅探流量，并对不同的网络组件执行 **中间人攻击**（**MitM**），因此虚拟化管理程序理想情况下应位于一个独立的网络上，以隔离计算服务器的访问，并且不允许从覆盖网络直接路由。
- en: In the underlay network, switches now utilize centralized management systems
    to push updates to switches. For example, the **Arista CloudVision** platform
    **CloudVision eXchange** (**CVX**) servers are used to push configuration to all
    Arista switches, so it is imperative that access control to its API endpoints
    is done over HTTPs and that the management of switches is done on a completely
    dedicated network.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下层网络中，交换机现在利用集中管理系统将更新推送到交换机。例如，**Arista CloudVision** 平台的 **CloudVision eXchange**（**CVX**）服务器用于将配置推送到所有
    Arista 交换机，因此必须通过 HTTPS 来控制对其 API 端点的访问，并且交换机的管理应在完全独立的网络上进行。
- en: An attacker could potentially drop the whole configuration of every switch if
    the CVX cluster was compromised to create a DoS attack on the network, which would
    also mean that all routing would be dropped by the SDN controller.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 CVX 集群被妥协，攻击者可能会丢失每台交换机的整个配置，从而在网络上发起 DoS 攻击，这也意味着 SDN 控制器将丢弃所有路由。
- en: An **Out Of Band** (**OoB**) network should ideally be implemented to govern
    access to network appliances with access provided via TACCs accounts. Using an
    OOB network for the northbound and southbound communications can help secure network
    devices and provide an extra degree of security for network devices.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 应该理想地实现 **带外**（**OoB**）网络来管理对网络设备的访问，访问应通过 TACCs 账户提供。使用带外网络进行北向和南向通信可以帮助保护网络设备，并为网络设备提供额外的安全性。
- en: The underlay and overlay network should be on completely different networks
    and not routable; this means that if a hypervisor is compromised in the underlay
    network, then an attacker will not be able to directly jump from an underlay box
    to the overlay. Underlay boxes should ideally be protected using bastion servers
    with two-factor authentication so no servers are directly accessible.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下层和覆盖网络应位于完全不同的网络上，并且不可路由；这意味着如果下层网络中的虚拟化管理程序被妥协，攻击者将无法直接从下层网络跳转到覆盖网络。下层设备理想情况下应通过堡垒服务器和双因素认证进行保护，以确保没有服务器是直接可访问的。
- en: SDN controllers are typically x86 compute, and talk via REST API calls, so it
    should be mandatory to implement TLS on the SDN controllers and if possible issue
    a PKI CA to manage trust, authenticity, and revocation of access.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: SDN 控制器通常是 x86 计算机，并通过 REST API 调用进行通信，因此必须在 SDN 控制器上实现 TLS，如果可能的话，还应颁发 PKI
    CA 来管理信任、真实性和访问撤销。
- en: 'In the following example, we can see that the **Arista CVX** platform communicates
    with the Nuage **VSC** SDN controller using **OVSDB** with **TLS** on the underlay:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们可以看到 **Arista CVX** 平台使用 **TLS** 与下层网络中的 Nuage **VSC** SDN 控制器通过 **OVSDB**
    进行通信：
- en: '![Attacks on the underlay network?](img/B05559_11_03.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![下层网络的攻击？](img/B05559_11_03.jpg)'
- en: If underlay devices communicate using HTTP sessions, it will make the network
    susceptible to attacks in the Overlay network not just the underlay network.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果下层设备通过 HTTP 会话进行通信，则会使网络不仅容易受到下层网络的攻击，还容易受到覆盖网络的攻击。
- en: Taking the **OpenStack** platform as an example, an SDN controller communicating
    with the OpenStack Neutron plug in will exchange all Ingress and Egress information
    for the entire overlay network. If this connection is using unencrypted REST API
    calls, it would mean that an attacker could intercept or track all flow information,
    and this can be used to compromise any number of tenant networks within the overlay.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以 **OpenStack** 平台为例，SDN 控制器与 OpenStack Neutron 插件通信时，将交换整个覆盖网络的所有入口和出口信息。如果此连接使用未加密的
    REST API 调用，这意味着攻击者可以拦截或跟踪所有流量信息，并可能用此信息妥协覆盖网络中的任何租户网络。
- en: Attacks on the SDN controller
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SDN 控制器的攻击
- en: The northbound API on an SDN controller is a desirable attack vector that could
    be used to compromise the whole overlay network.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: SDN控制器上的北向API是一个理想的攻击向量，攻击者可以利用它来破坏整个覆盖网络。
- en: To prevent this, RBAC should be put in place with sufficient password best practices
    adhered to. If the SDN controller's northbound API is compromised, then attackers
    could create new flow data programmatically against the overlay.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况，应实施RBAC并遵守足够的密码最佳实践。如果SDN控制器的北向API被攻破，攻击者可能会通过编程方式对覆盖网络创建新的流量数据。
- en: This would allow an attacker to traverse the network and target multiple services,
    allowing the attacker to bypass denying firewall policies and access multiple
    tenant networks.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使攻击者能够横向穿越网络并瞄准多个服务，从而绕过拒绝的防火墙策略并访问多个租户网络。
- en: Default admin accounts should have their passwords changed from day one, to
    avoid attackers guessing default accounts passwords. Complex passwords should
    be used at all times.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 默认管理员账户应从第一天起更改其密码，以避免攻击者猜测默认账户的密码。始终应使用复杂密码。
- en: Audit trails should be set up on the SDN controller and logged to a **syslog**
    server, which will allow network and security engineers to check for unauthorized
    changes by attackers. If any irregular behavior occurs, then subsequent alerts
    should be triggered and the account should be disabled immediately.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 应在SDN控制器上设置审计跟踪，并将日志记录到**syslog**服务器，这将允许网络和安全工程师检查攻击者是否进行了未经授权的更改。如果出现任何不正常的行为，应立即触发后续警报，并禁用该账户。
- en: On SDN controllers, SNMPv3 should be enabled as opposed to earlier versions
    and LDAP accounts, or SSH keys set up to allow access to Linux-based operating
    systems as opposed to using single service accounts or root access for underlay
    changes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在SDN控制器上，应启用SNMPv3而不是早期版本，并设置LDAP账户或SSH密钥，以允许访问基于Linux的操作系统，而不是使用单一服务账户或root权限进行底层变更。
- en: Network security and Continuous Delivery
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络安全与持续交付
- en: Network security should be improved when using automation to push network changes
    out to network devices, or to change the desired state of overlay networks. It
    should increase the visibility of changes, as all changes are done from a centralized
    process, with no exceptions.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用自动化将网络更改推送到网络设备，或更改覆盖网络的期望状态时，应提升网络安全性。它应增加更改的可视性，因为所有更改都是通过集中式过程完成的，没有任何例外。
- en: Continuous delivery processes, by design, should allow security teams to see
    clearly which user committed a network change. When a change is pushed to network
    devices or SDN controllers using the Continuous Delivery process, it will allow
    easy roll back to a previous version if the security team don't approve of the
    changes. However, this is still very reactive and continuous integration and delivery
    processes should include compliance and security checks as part of the continuous
    integration and delivery process.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付过程在设计上应允许安全团队清楚地看到哪个用户提交了网络变更。当通过持续交付过程将更改推送到网络设备或SDN控制器时，如果安全团队不批准这些更改，它将允许轻松回滚到先前的版本。然而，这仍然是非常被动的，持续集成和交付过程应将合规性和安全检查作为持续集成和交付过程的一部分。
- en: Having compliance checks as part of Continuous Delivery provides a lot of flexibility
    for network and security teams. This will enable security teams to utilize some
    of the continuous integration and delivery best practices to help secure a network,
    such as continual testing and validation of changes integrated as part of the
    deployment pipeline.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将合规性检查作为持续交付的一部分，为网络和安全团队提供了很大的灵活性。这将使安全团队能够利用一些持续集成和交付的最佳实践来帮助保护网络，例如在部署管道的一部分中持续测试和验证集成的更改。
- en: Application connectivity topology
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序连接拓扑
- en: In a software-defined network, each application is micro-segmented, so they
    have individual application policies that can be audited by security or network
    teams. This will help with security compliance, as it allows security practitioners
    to see all the Ingress or Egress rules for a particular application in the overlay
    network.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件定义网络中，每个应用程序都是微分段的，因此它们具有可以由安全或网络团队审计的单独应用程序策略。这有助于安全合规性，因为它允许安全人员查看覆盖网络中特定应用程序的所有Ingress或Egress规则。
- en: 'This was highlighted in [Chapter 2](ch02.html "Chapter 2. The Emergence of
    Software-defined Networking"), *The Emergence Of Software-defined Networking,*
    showing micro-segmented policies per application with egress policies for **Application1**
    defined as shown:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![Application connectivity topology](img/B05559_11_04.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: The applications Ingress and Egress ACL rules should be readable and auditable
    in source control management systems using YAML files, or any other chosen configuration
    file used to control the SDN controller's desired state.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The live state of the system will also be present on SDN controller GUIs, which
    can be observed to make sure it matches what is defined in source control management
    systems.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: It is important for security practitioners to be able to read and understand
    the configuration files that are being used to determine the current connectivity
    and state of the network.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Network and security teams have unique goals such as passing security audits
    to keep the business operational. It is important for Security teams to be able
    to see the application connectivity matrix and be able to have full visibility
    over connectivity.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: For instance, when processing credit card transactions, only specific users
    should have access to that particular tenant network. Having the ability to enforce
    this via the SDN and demonstrate this is the case with an easy to understand SDN
    policy makes the network and security team's jobs easier as they have a real-time
    connectivity matrix for each application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping security checks into continuous integration
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security checks should ideally be built into continuous integration processes,
    a concept covered in depth in [Chapter 7](ch07.html "Chapter 7. Using Continuous
    Integration Builds for Network Configuration"), *Using Continuous Integration
    Builds for Network Configuration*. Otherwise, security teams would not be able
    to keep up with the daily changes being made to dynamic overlay networks and ever-changing
    network policies.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Compliance can be integrated with continuous integration processes by disallowing
    an allow-all policy when applied by a developer on their self-service ACL file
    for an application.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: When a user commits this change to a source control management system, the **CI
    Build Server** starts a new continuous integration build. A validation on the
    continuous integration build for the SDN configuration build could be set up by
    the security team to reject this configuration and provide instant feedback to
    the user, as this breaks compliance.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'The user would instead have to alter the self-service ACL policy rules to be
    implicit, so compliance then becomes just another validation of the continuous
    integration process, as shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![Wrapping security checks into continuous integration](img/B05559_11_05.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: This is opposed to security teams auditing the ACL rules as a separate manual
    check, which would of course let ACL rules that breach security policy, slip through
    into production environments and allow attackers the potential to compromise a
    particular application, as its ACL rules are too open. This validation could even
    be done prior to a **CI Build Server** by running a simple Git hook, which would
    reject the commit after detecting an allow-all on the ACL policies by parsing
    the YAML file.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Using Cloud metadata
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The use of cloud metadata is commonplace in public and private clouds such as
    AWS, Microsoft Azure, Google Cloud, and OpenStack as well as other cloud providers.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Tagging boxes with specific metadata has a variety of different use cases, and
    a subset of those use cases could greatly benefit a network or security team when
    dealing with particular network security challenges.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Cloud metadata, as covered already in this book, is a series of key-value pairs
    that are applied to a cloud server. If we take the example of a security vulnerability
    such as shell shock, which caused a series of DoS attacks when exploited in 2014,
    it is important that security vulnerabilities such as these are fixed immediately,
    to prevent attackers exploiting Linux boxes.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Within the remits of Continuous Delivery, it is important to make sure that
    if an issue occurs, then the mean time to recover is quick.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Take the scenario of vulnerability scanning. Each week, the whole overlay and
    underlay network will be scanned on a daily, or at worst, a weekly basis, using
    a security scanner.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Every time that the weekly network security scan runs on all boxes, it generates
    a report documenting a list of vulnerabilities for each server. This is subsequently
    reviewed by the service owners, and the security team will recommend specific
    patches or remediation over a number of days, so the mean time to resolve is high
    if important vulnerabilities are highlighted.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: If instead of generating a separate report, the network security scan tagged
    the servers with a specific list of vulnerability IDs on their cloud metadata,
    then a complete inventory of vulnerabilities for the whole network would be available
    that could be acted upon to make real-time updates.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'Using OpenStack as an example, the following command line could be executed
    to set metadata against a server when vulnerabilities are detected by using the
    `qualys_vul_ids` key value pair:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following example would be executed as part of a script that would be run
    against all servers:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This key value pair is then passed to the OpenStack metadata service, which
    will tag the OpenStack instance with all the relevant vulnerabilities that have
    been discovered as part of the **Qualys** vulnerability scan.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'This will result in the OpenStack instance containing the following metadata:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Cloud metadata](img/B05559_11_06.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
- en: If a vulnerability such as shell shock was exposed by the security scan, then
    the network and security team could identify all servers with that vulnerability.
    In this case, `Qualys ID` `122` relates to shell shock, and targets the servers
    affected with an immediate patch.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安全扫描暴露了诸如shell shock之类的漏洞，那么网络和安全团队可以识别出所有存在该漏洞的服务器。在这种情况下，`Qualys ID` `122`与shell
    shock相关，并立即对受影响的服务器进行补丁修复。
- en: Ansible dynamic inventory could be used to target the vulnerable boxes using
    a bespoke `ad_hoc_patch.yml` playbook with a when condition only, which executes
    patch commands to Linux servers if `Qualys ID` `122` is tagged on the `qualys_vul_ids`
    metadata tag on the server.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Ansible动态清单通过一个定制的`ad_hoc_patch.yml`剧本，仅在满足条件时执行该剧本，来定位易受攻击的服务器。如果服务器上的`qualys_vul_ids`元数据标签上标记了`Qualys
    ID` `122`，则执行补丁命令修复Linux服务器。
- en: 'The `ad_hoc_patch.yml` playbook would have the following steps to set a fact
    from the metadata and execute the commands only when the metadata tag contains
    the correct metadata:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`ad_hoc_patch.yml`剧本将具有以下步骤：从元数据中设置事实，并仅在元数据标签包含正确的元数据时执行命令：'
- en: '![Using Cloud metadata](img/B05559_11_07.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![使用云元数据](img/B05559_11_07.jpg)'
- en: 'This playbook can be used to fix the shell shock **Bashdoor** bug immediately
    by executing following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此剧本可以通过执行以下命令立即修复shell shock **Bashdoor**漏洞：
- en: '[PRE2]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: which would execute the playbook against all customer-facing servers in the
    `Prod` availability zone that contain the vulnerability, so target only production
    servers.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 该剧本将对`Prod`可用区内所有面向客户的服务器执行补丁修复，针对存在漏洞的服务器，因此仅针对生产服务器。
- en: The playbook would only execute against servers in the production availability
    zone that match the metadata value of `122` as an active vulnerability using `Ansible
    jinja2` when filters, which would allow infrastructure engineers to remove the
    vulnerability in minutes. Imagine if security scanners did this metadata tagging
    as a feature of their scanner; it would help security massively.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 该剧本仅对生产可用区中符合`122`元数据值的服务器执行，作为活动漏洞，使用`Ansible jinja2`中的过滤器，这将使基础设施工程师能够在几分钟内修复该漏洞。试想一下，如果安全扫描器将这种元数据标记作为其扫描器的一个功能，它将对安全性产生巨大帮助。
- en: Cloud metadata has many other use cases such as using an owner metadata tag
    on servers to send targeted e-mails or alerts if security teams detect any suspicious
    activity, or flag servers for re-deployment to install new patches when using
    immutable infrastructure.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 云元数据还有许多其他用例，例如在服务器上使用所有者元数据标签，如果安全团队检测到任何可疑活动，则发送有针对性的电子邮件或警报，或者在使用不可变基础设施时标记服务器进行重新部署以安装新补丁。
- en: Compromised servers can also be tagged as **quarantined** using metadata by
    security monitoring tools. Put simply, metadata allows teams to set server profiles
    using metadata, so a variety of actions can be carried out on them.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 被攻破的服务器也可以通过安全监控工具使用元数据标记为**隔离**。简单来说，元数据允许团队通过元数据设置服务器配置文件，因此可以对其执行各种操作。
- en: If a server is tagged as quarantined, a trigger could be set up to power down
    the server and migrate it to a quarantined micro-subnet in the Overlay network
    with no external access. This would allow a security team to carry out root cause
    analysis to ascertain how the box was compromised and mitigate the attack.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器被标记为隔离状态，可以设置触发器将服务器关闭，并将其迁移到Overlay网络中没有外部访问权限的隔离微网段。这将允许安全团队进行根本原因分析，查明服务器被攻破的原因并缓解攻击。
- en: Note
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The important point to note is all these security processes can be automated
    to help maximize the features provided by public and private clouds. They should
    be looked upon as tools that can help automate and facilitate security processes
    rather than inhibit security.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的重要一点是，所有这些安全过程都可以自动化，以帮助最大化公共云和私有云提供的功能。它们应被视为可以帮助自动化和促进安全过程的工具，而不是妨碍安全的工具。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have looked at network security and ways in which security
    practices need to evolve to meet the demands of modern software-defined networks,
    as the industry has started to move away from flat layer 2 networks and instead
    utilize virtualized overlay networks.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了网络安全以及安全实践如何发展以满足现代软件定义网络的需求，因为行业已经开始逐步远离扁平的二层网络，而是利用虚拟化的Overlay网络。
- en: This chapter has also hopefully debunked some of the fear and uncertainty associated
    with securing software-defined networks, while tackling hot topics such as the
    separation of test and production environments and the use of virtual firewalling
    for micro-segmentation as opposed to physical firewalls.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还希望揭示一些与保护软件定义网络相关的恐惧和不确定性，同时解决了如测试和生产环境的分离以及使用虚拟防火墙进行微分段的热门话题，而不是物理防火墙。
- en: The focus of the chapter then shifted to strategies that can be adopted above
    and beyond minimum security requirements and looked at ways to secure SDN controllers
    and minimize the attack vectors. This can be achieved by isolating networks, creating
    out of band networks for network devices, appropriate authentication, and using
    TLS for inter-network device communication.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点转向可以在最低安全要求之上采用的战略，并探讨了如何保护 SDN 控制器并最小化攻击向量的方法。这可以通过隔离网络、为网络设备创建带外网络、适当的身份验证以及使用
    TLS 进行网络设备间通信来实现。
- en: The chapter has also looked at the gains brought by implementing software-defined
    networking, such as the transparency and auditability of application to application
    connectivity. It has also explored opportunities to automate compliance checks
    by utilizing continuous integration best practices to validate ACL policies as
    part of continuous integration builds, rather than being a completely separate
    process. It has also explored leveraging cloud metadata to carry out emergency
    patching as opposed to it being a manual overhead, and covered other use casesfor
    using cloud metadata such as quarantining servers and sending security notifications
    to teams.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还探讨了实施软件定义网络带来的收益，例如应用间连接的透明性和可审计性。它还探讨了利用持续集成最佳实践来验证 ACL 策略作为持续集成构建的一部分，而不是完全分开的过程。它还探讨了利用云元数据执行紧急修补以减少手动开销的机会，并涵盖了其他使用云元数据的用例，如隔离服务器和向团队发送安全通知。
- en: This chapter brings us to the end of the book, which has looked at applying
    DevOps and Continuous Delivery principles to networking. The book has hopefully
    showed readers that networking does not need to be a manual set of tasks that
    slow down the whole Continuous Delivery process.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束了本书的内容，探讨了如何将 DevOps 和持续交付原则应用于网络。本书希望向读者展示，网络不需要成为拖慢整个持续交付过程的一系列手动任务。
- en: This book has covered a wide variety of topics that should hopefully give some
    food for thought and ideas that can be taken and implemented to improve network
    operations. Network automation is still relatively sparse in industry, but it
    doesn't need to be; the same automation principles that were applied to development,
    infrastructure, and testing are equally applicable to network operations.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涵盖了多种主题，希望能提供一些思考的食物和可以采纳并实施以改善网络运营的想法。尽管网络自动化在行业中仍然相对稀少，但它并非必须如此；开发、基础设施和测试中应用的相同自动化原则同样适用于网络运营。
- en: Network teams shouldn't settle or accept the status quo, instead, be bold and,
    initiate real cultural change, and help improve network operations in the industry
    by embracing change and learning new skills.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 网络团队不应满足或接受现状，而是要大胆地发起真正的文化变革，并通过拥抱变革和学习新技能来帮助改进行业中的网络运营。
- en: 'More information:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '更多信息:'
- en: 'Blog: [http://devarmstrongops.blogspot.co.uk/](http://devarmstrongops.blogspot.co.uk/)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '博客: [http://devarmstrongops.blogspot.co.uk/](http://devarmstrongops.blogspot.co.uk/)'
- en: 'LinkedIn: [https://uk.linkedin.com/in/steven-armstrong-918629b1](https://uk.linkedin.com/in/steven-armstrong-918629b1)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '领英: [https://uk.linkedin.com/in/steven-armstrong-918629b1](https://uk.linkedin.com/in/steven-armstrong-918629b1)'
- en: 'What is a Software-defined Network: [https://www.youtube.com/watch?v=lPL_oQT9tmc](https://www.youtube.com/watch?v=lPL_oQT9tmc)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '什么是软件定义网络: [https://www.youtube.com/watch?v=lPL_oQT9tmc](https://www.youtube.com/watch?v=lPL_oQT9tmc)'
- en: 'SDN Fundamentals: [https://www.youtube.com/watch?v=Np4p1CDIuzc](https://www.youtube.com/watch?v=Np4p1CDIuzc)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SDN 基础知识: [https://www.youtube.com/watch?v=Np4p1CDIuzc](https://www.youtube.com/watch?v=Np4p1CDIuzc)'
- en: 'SDN and OpenFlow: [https://www.youtube.com/watch?v=l-DcbQhFAQs](https://www.youtube.com/watch?v=l-DcbQhFAQs)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SDN 和 OpenFlow: [https://www.youtube.com/watch?v=l-DcbQhFAQs](https://www.youtube.com/watch?v=l-DcbQhFAQs)'
