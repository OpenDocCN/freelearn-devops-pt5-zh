["```\nresource \"aws_vpc\" \"terraform-vpc\" { \n  cidr_block = \"${var.vpc-cidr}\" \n... \n\nresource \"aws_internet_gateway\" \"terraform-igw\" { \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n} \n\nresource \"aws_eip\" \"nat-eip\" { \n  vpc = true \n} \n\nresource \"aws_nat_gateway\" \"terraform-nat\" { \n  allocation_id = \"${aws_eip.nat-eip.id}\" \n  subnet_id = \"${aws_subnet.public-1.id}\" \n  depends_on = [\"aws_internet_gateway.terraform-igw\"] \n... \n\n```", "```\nresource \"aws_route_table\" \"public\" { \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n... \nresource \"aws_route_table\" \"private\" { \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n... \n\n```", "```\nresource \"aws_iam_role\" \"jenkins\" { \n    name = \"jenkins\" \n    path = \"/\" \n    assume_role_policy = <<EOF \n{ \n\n```", "```\nresource \"aws_iam_role\" \"demo-app\" { \n    name = \"demo-app\" \n    path = \"/\" \n    assume_role_policy = <<EOF \n{ \n\n```", "```\nresource \"aws_iam_policy\" \"common\" { \n    name = \"common\" \n    path = \"/\" \n    policy = <<EOF \n{ \n    \"Version\": \"2012-10-17\", \n    \"Statement\": [ \n       { \n            \"Effect\": \"Allow\", \n            \"Action\": [ \n                \"codecommit:Get*\", \n                \"codecommit:GitPull\", \n                \"codecommit:List*\" \n            ], \n            \"Resource\": \"*\" \n       }, \n       { \n            \"Effect\": \"Allow\", \n            \"NotAction\": [ \n                \"s3:DeleteBucket\" \n            ], \n            \"Resource\": \"*\" \n... \n\n```", "```\nresource \"aws_iam_policy\" \"jenkins\" { \n    name = \"jenkins\" \n    path = \"/\" \n    policy = <<EOF \n{ \n    \"Version\": \"2012-10-17\", \n    \"Statement\": [ \n       { \n         \"Effect\": \"Allow\", \n         \"Action\": [ \n           \"ec2:AttachVolume\", \n           \"ec2:CreateVolume\", \n           \"ec2:DeleteVolume\", \n           \"ec2:CreateKeypair\", \n           \"ec2:DeleteKeypair\", \n           \"ec2:DescribeSubnets\" \n... \n         \"Resource\": \"*\", \n       }, \n       { \n         \"Effect\": \"Allow\", \n         \"Action\": \"iam:PassRole\", \n         \"Resource\": [\"${aws_iam_role.demo-app.arn}\"] \n... \n\n```", "```\nresource \"aws_security_group\" \"demo-app-elb\" { \n  name = \"demo-app-elb\" \n  description = \"ELB security group\" \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n\n  ingress { \n    from_port = \"80\" \n    to_port = \"80\" \n    protocol = \"tcp\" \n    cidr_blocks = [\"0.0.0.0/0\"] \n... \n\n```", "```\nresource \"aws_elb\" \"demo-app-elb\" { \n  name = \"demo-app-elb\" \n  security_groups = [\"${aws_security_group.demo-app-elb.id}\"] \n  subnets = [\"${aws_subnet.public-1.id}\"] \n\n  listener { \n    instance_port = 80 \n    instance_protocol = \"http\" \n    lb_port = 80 \n    lb_protocol = \"http\" \n... \n\n```", "```\nresource \"aws_security_group\" \"jenkins\" { \n  name = \"jenkins\" \n  description = \"ec2 instance security group\" \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n\ningress { \n    from_port = \"80\" \n    to_port = \"80\" \n    protocol = \"tcp\" \n    cidr_blocks = [\"0.0.0.0/0\"] \n  } \n\n  ingress { \n    from_port = \"443\" \n    to_port = \"443\" \n    protocol = \"tcp\" \n    cidr_blocks = [\"0.0.0.0/0\"] \n... \n\n```", "```\nresource \"aws_security_group\" \"demo-app\" { \n  name = \"demo-app\" \n  description = \"ec2 instance security group\" \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n\n  ingress { \n    from_port = \"80\" \n    to_port = \"80\" \n    protocol = \"tcp\" \n    security_groups = [\"${aws_security_group.demo-app-elb.id}\"] \n  } \n\n  ingress { \n    from_port = \"22\" \n    to_port = \"22\" \n    protocol = \"tcp\" \n    security_groups = [\"${aws_security_group.jenkins.id}\"] \n... \n\n```", "```\nresource \"aws_instance\" \"jenkins\" { \n... \n    user_data = <<EOF \n... \n# Install SaltStack \nyum -y install https://repo.saltstack.com/yum/amazon/salt-amzn-repo-latest-1.ami.noarch.rpm \nyum clean expire-cache; yum -y install salt-minion; chkconfig salt-minion off \n# Put custom minion config in place (for enabling masterless mode) \ncp -r /srv/salt/minion.d /etc/salt/ \necho -e 'grains:\\n roles:\\n  - jenkins' > /etc/salt/minion.d/grains.conf \n... \n\n```", "```\noutput \"ELB URI\" { \n  value = \"${aws_elb.demo-app-elb.dns_name}\" \n} \noutput \"Private subnet ID\" { \n  value = \"${aws_subnet.private-1.id}\" \n} \noutput \"Demo-app secgroup\" { \n  value = \"${aws_security_group.demo-app.id}\"  \n} \n\n```", "```\nbase: \n  '*': \n    - users \n    - yum-s3 \n\n  'roles:jenkins': \n    - match: grain \n    - jenkins \n    - nginx.jenkins \n    - docker \n    - packer \n\n  'roles:demo-app': \n    - match: grain \n    - php-fpm \n    - nginx.demo-app \n    - demo-app \n\n```", "```\njenkins_prereq: \n  pkg.installed: \n    - pkgs: \n... \n      - jq \n      - httpd-tools \n... \n\n```", "```\nnginx: \n  pkg.installed: [] \n\n  service.running: \n    - enable: True \n    - reload: True \n    - require: \n      - pkg: nginx \n\n```", "```\ninclude: \n  - nginx \n\n/etc/nginx/conf.d/jenkins.conf: \n  file.managed: \n    - source: salt://nginx/files/jenkins.conf \n... \n\n```", "```\ninclude: \n  - nginx \n\n/etc/nginx/conf.d/demo-app.conf: \n  file.managed: \n    - source: salt://nginx/files/demo-app.conf \n\n```", "```\npacker: \n  archive.extracted: \n    - name: /opt/ \n    - source: 'https://releases.hashicorp.com/packer/0.10.1/packer_0.10.1_linux_amd64.zip' \n    - source_hash: md5=3a54499fdf753e7e7c682f5d704f684f \n    - archive_format: zip \n    - if_missing: /opt/packer \n\n  cmd.wait: \n    - name: 'chmod +x /opt/packer' \n    - watch: \n      - archive: packer \n\n```", "```\ninclude: \n  - nginx \n\nphp-fpm: \n  pkg.installed: \n    - name: php-fpm \n    - require: \n      - pkg: nginx \n\n  service.running: \n    - name: php-fpm \n    - enable: True \n    - reload: True \n    - require_in: \n      - service: nginx \n... \n\n```", "```\n{% set APP_VERSION = salt['cmd.run']('cat /tmp/APP_VERSION') %} \n\ninclude: \n  - nginx \n\ndemo-app: \n  pkg.installed: \n    - name: demo-app \n    - version: {{ APP_VERSION }} \n    - require_in: \n      - service: nginx \n\n```", "```\n  \"variables\": { \n    \"srcAmiId\": null, \n    \"amiName\": null, \n    \"sshUser\": null, \n    \"instanceProfile\": null, \n    \"subnetId\": null, \n    \"vpcId\": null, \n    \"userDataFile\": null, \n    \"appVersion\": null \n  } \n... \n\n```", "```\n  \"builders\": [{ \n    \"type\": \"amazon-ebs\", \n    \"region\": \"us-east-1\", \n    \"source_ami\": \"{{user `srcAmiId`}}\", \n    \"instance_type\": \"t2.nano\", \n    \"ssh_username\": \"{{user `sshUser`}}\", \n    \"ami_name\": \"{{user `amiName`}}-{{timestamp}}\", \n    \"iam_instance_profile\": \"{{user `instanceProfile`}}\", \n    \"subnet_id\": \"{{user `subnetId`}}\", \n    \"vpc_id\": \"{{user `vpcId`}}\", \n    \"user_data_file\": \"{{user `userDataFile`}}\", \n    \"run_tags\": { \n      \"Name\": \"Packer ({{user `amiName`}}-{{timestamp}})\", \n      \"CreatedBy\": \"Jenkins\" \n      }, \n    \"tags\": { \n      \"Name\": \"{{user `amiName`}}-{{timestamp}}\", \n      \"CreatedBy\": \"Jenkins\" \n      } \n  }] \n\n```", "```\n\"provisioners\": [ \n    { \n      \"type\": \"shell\", \n      \"inline\": [  \n        \"echo 'Waiting for the instance to fully boot up...'\", \n        \"sleep 30\" , \n        \"echo \"Setting APP_VERSION to {{user `appVersion`}}\"\", \n        \"echo \"{{user `appVersion`}}\" > /tmp/APP_VERSION\" \n        ] \n    } \n\n```", "```\n{ \n      \"type\": \"salt-masterless\", \n      \"skip_bootstrap\": true, \n      \"local_state_tree\": \"salt/states\", \n      \"local_pillar_roots\": \"salt/pillars\" \n} \n\n```", "```\n{ \n      \"type\": \"file\", \n      \"source\": \"serverspec\", \n      \"destination\": \"/tmp/\" \n}, \n{ \n      \"type\": \"shell\", \n      \"inline\": [  \n        \"echo 'Installing Serverspec tests...'\", \n        \"sudo gem install --no-document rake serverspec\", \n        \"echo 'Running Serverspec tests...'\", \n        \"cd /tmp/serverspec && sudo /usr/local/bin/rake spec\" \n  ] \n} \n\n```", "```\n{  \n  \"srcAmiId\": \"ami-6869aa05\", \n  \"amiName\": \"demo-app\", \n  \"sshUser\": \"ec2-user\", \n  \"instanceProfile\": \"demo-app\", \n  \"subnetId\": \"subnet-4d1c2467\", \n  \"vpcId\": \"vpc-bd6f0bda\", \n  \"userDataFile\": \"packer/demo-app_userdata.sh\" \n} \n\n```", "```\n#!/bin/bash \n\nset -euf -o pipefail \nexec 1> >(logger -s -t $(basename $0)) 2>&1 \n\n# Install SaltStack \nyum -y install https://repo.saltstack.com/yum/amazon/salt-amzn-repo-latest-1.ami.noarch.rpm \nyum clean expire-cache; yum -y install salt-minion; chkconfig salt-minion off \n\n# Put custom grains in place \necho -e 'grains:\\n roles:\\n  - demo-app' > /etc/salt/minion.d/grains.conf \n\n```", "```\nrequire 'spec_helper' \n\nversionFile = open('/tmp/APP_VERSION') \nappVersion = versionFile.read.chomp \n\ndescribe package(\"demo-app-#{appVersion}\") do \n  it { should be_installed } \nend \n\ndescribe service('php-fpm') do \n  it { should be_enabled } \n  it { should be_running } \nend \n\ndescribe service('nginx') do \n  it { should be_enabled } \n  it { should be_running } \nend \n\ndescribe user('veselin') do \n  it { should exist } \n  it { should have_authorized_key 'ssh-rsa ...' } \nend \n\n```", "```\ncd /tmp/serverspec && sudo /usr/local/bin/rake spec\n\n```", "```\nstage \"Trigger downstream\" \n    build job: \"demo-app-cdelivery\", \n    parameters: [[$class: \"StringParameterValue\", name: \"APP_VERSION\", value: \n    \"${gitHash}-1\"]], wait: false \n\n```", "```\n#!groovy \n\nnode { \n\n  step([$class: 'WsCleanup']) \n\n  stage \"Checkout Git repo\" \n    checkout scm \n\n  stage \"Checkout additional repos\" \n    dir(\"salt\") { \n      git \"https://git-codecommit.us-east-1.amazonaws.com/v1/repos/salt\" \n    } \n\n```", "```\nstage \"Run Packer\" \n    sh \"/opt/packer validate -var=\"appVersion=$APP_VERSION\" -var-file=packer/demo-app_vars.json packer/demo-app.json\" \n    sh \"/opt/packer build -machine-readable -var=\"appVersion=$APP_VERSION\" -var-file=packer/demo-app_vars.json packer/demo-app.json | tee packer/packer.log\" \n\n```", "```\nstage \"Deploy AMI\" \n    def amiId = sh returnStdout: true, script:\"tail -n1 packer/packer.log | awk '{printf \\$NF}'\" \n    def ec2Keypair = \"terraform\" \n    def secGroup = \"sg-2708ef5d\" \n    def instanceType = \"t2.nano\" \n    def subnetId = \"subnet-4d1c2467\" \n    def instanceProfile = \"demo-app\" \n    echo \"Launching an instance from ${amiId}\" \n    sh \"aws ec2 run-instances \\ \n        --region us-east-1 \\ \n        --image-id ${amiId} \\ \n        --key-name ${ec2Keypair} \\ \n        --security-group-ids ${secGroup} \\ \n        --instance-type ${instanceType} \\ \n        --subnet-id ${subnetId} \\ \n        --iam-instance-profile Name=${instanceProfile} \\ \n        | tee .ec2_run-instances.log \\ \n       \" \n    def instanceId = sh returnStdout: true, script: \"printf \\$(jq .Instances[0].InstanceId < .ec2_run-instances.log)\" \n\n```", "```\nsh \"aws ec2 create-tags --resources ${instanceId} \\ \n        --region us-east-1 \\ \n        --tags Key=Name,Value=\"Jenkins (demo-app-$APP_VERSION)\" \n        Key=CreatedBy,Value=Jenkins \\ \\ \n       \" \n\n    echo \"Registering with ELB\" \n    def elbId = \"demo-app-elb\" \n    sh \"aws elb register-instances-with-load-balancer \\ \n        --region us-east-1 \\ \n        --load-balancer-name ${elbId} \\ \n        --instances ${instanceId} \\ \n       \" \n\n    echo \"Waiting for the instance to come into service\" \n    sh \"while [ \"x\\$(aws elb describe-instance-health --region us-east-1 --load-\n    balancer-name ${elbId} --instances ${instanceId} | \n    jq .InstanceStates[].State | tr -d '\"')\" != \"xInService\" ]; do : ; sleep 60; \n    done\" \n\n```", "```\n  stage \"Run AB test\" \n    def elbUri = \"http://demo-app-elb-1931064195.us-east-1.elb.amazonaws.com/\"   \n    sh \"ab -c5 -n1000 -d -S ${elbUri} | tee .ab.log\" \n    def non2xx = sh returnStdout: true, script:\"set -o pipefail;(grep 'Non-2xx' .ab.log | awk '{printf \\$NF}') || (printf 0)\" \n    def writeErr = sh returnStdout: true, script:\"grep 'Write errors' .ab.log | awk '{printf \\$NF}'\" \n    def failedReqs = sh returnStdout: true, script:\"grep 'Failed requests' .ab.log | awk '{printf \\$NF}'\" \n    def rps = sh returnStdout: true, script:\"grep 'Requests per second' .ab.log | awk '{printf \\$4}' | awk -F. '{printf \\$1}'\" \n    def docLen = sh returnStdout: true, script:\"grep 'Document Length' .ab.log | awk '{printf \\$3}'\" \n\n    echo \"Non2xx=${non2xx}, WriteErrors=${writeErr}, FailedReqs=${failedReqs}, ReqsPerSec=${rps}, DocLength=${docLen}\" \n    sh \"if [ ${non2xx} -gt 10 ] || [ ${writeErr} -gt 10 ] || [ ${failedReqs} -gt 10 ] || [ ${rps} -lt 1000 ] || [ ${docLen} -lt 10 ]; then \\ \n          echo \"ERR: AB test failed\" | tee -a .error.log; \\ \n        fi \\ \n       \" \n\n```", "```\n stage \"Terminate test instance\" \n    sh \"aws ec2 terminate-instances --region us-east-1 --instance-ids ${instanceId}\" \n\n```", "```\n  stage \"Verify test results\" \n    sh \"if [ -s '.error.log' ]; then \\ \n          cat '.error.log'; \\ \n          :> '.error.log'; \\ \n          exit 100; \\ \n        else \\ \n          echo 'Tests OK'; \\ \n        fi \\ \n       \" \n\n```", "```\n{ \n    \"Version\": \"2012-10-17\", \n    \"Statement\": [ \n      { \n          \"Effect\": \"Allow\", \n          \"NotAction\": [ \n              \"codecommit:DeleteRepository\" \n          ], \n          \"Resource\": \"*\" \n      }, \n      { \n          \"Effect\": \"Allow\", \n          \"NotAction\": [ \n              \"s3:DeleteBucket\" \n          ], \n          \"Resource\": \"*\" \n      }, \n      { \n          \"Sid\": \"Stmt1461764665000\", \n          \"Effect\": \"Allow\", \n          \"Action\": [ \n              \"ec2:AllocateAddress\", \n              \"ec2:AssociateAddress\", \n... \n\n```"]