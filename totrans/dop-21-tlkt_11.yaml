- en: 'Embracing Destruction: Pets versus Cattle'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拥抱破坏：宠物与牲畜
- en: Any roles involved in a project that do not directly contribute toward the goal
    of putting valuable software in the hands of users as quickly as possible should
    be carefully considered.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在项目中没有直接促进目标、未能尽快将有价值的软件交到用户手中的角色，都应该被仔细考虑。
- en: -Stein Inge Morisbak
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: -斯坦·英格·莫里斯巴克
- en: We should discuss the high-level strategies before we start exploring tools
    and processes that will help us create and operate a "real" Swarm cluster. How
    are we going to treat our servers? Are they going to be pets or cattle?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始探索那些能够帮助我们创建和运营“真正的”Swarm集群的工具和流程之前，应该先讨论一下高层次的策略。我们应该如何对待我们的服务器？它们是宠物，还是牲畜？
- en: How do you know whether you are treating your servers as pets or cattle? Ask
    yourself the following question. What will happen if several of your servers went
    offline right now? If they are pets, such a situation will cause a significant
    disruption for your users. If they are cattle, such an outcome will go unnoticed.
    Since you are running multiple instances of a service distributed across multiple
    nodes, failure of a single server (or a couple of them), would not result in a
    failure of all replicas. The only immediate effect would be that some services
    would run fewer instances and would have a higher load. Failed replicas would
    be rescheduled so the original number would soon be restored. In parallel, failed
    nodes would be replaced with new VMs. The only adverse effect of a failure of
    a couple of servers would be increased response time due to lower capacity. After
    a couple of minutes, everything would get back to normal with failed replicas
    rescheduled, and failed nodes replaced with new VMs. And the best thing is, it
    would all happen without manual interaction. If that's how your cluster is operating
    right now, you are treating your servers as cattle. Otherwise, you have pets in
    your data center.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如何知道你是否在将服务器视为宠物或牲畜？问问自己以下问题：如果现在你的几台服务器掉线，会发生什么？如果它们是宠物，这种情况将会对用户造成严重的影响。如果它们是牲畜，这种结果将不会引起任何注意。由于你运行的是分布在多个节点上的多个服务实例，单台服务器（或几台服务器）的故障并不会导致所有副本的失败。唯一的即时效果是一些服务将运行较少的实例，负载会更高。失败的副本会被重新调度，原始的副本数量很快会恢复。同时，失败的节点会被新虚拟机替代。几台服务器的故障唯一的负面影响是由于容量减少而导致的响应时间增加。几分钟后，所有失败的副本会被重新调度，失败的节点会被新虚拟机替换，一切都会恢复正常。最棒的是，这一切都将无需人工干预。如果你的集群现在就是这样运行的，那么你把服务器当作了牲畜。否则，你的数据中心里有宠物。
- en: Traditional systems administration is based on physical servers. To add a new
    machine to a data center, we need to purchase it upfront, wait until it arrives
    from the vendor, configure it in our office, move it to the data center location,
    and plug it in. The whole process can take a considerable amount of time. It is
    not uncommon for weeks, or even months to pass until we get a new fully provisioned
    server operating inside a data center.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的系统管理是基于物理服务器的。要向数据中心添加一台新机器，我们需要先购买它，等它从供应商处到货，再在办公室进行配置，然后将它搬到数据中心，最后连接好。这整个过程可能需要相当长的时间。通常需要几周，甚至几个月，才能让一台新的、配置完全的服务器在数据中心内部运行起来。
- en: Considering such a big waiting period and the costs, it is only natural that
    we do our best to keep servers as healthy as possible. If one of them starts behaving
    badly, we will do everything in our power to fix it as quickly as possible. What
    else can we do? Wait for weeks or months until a replacement arrives? Of course
    not. SSH into the faulty machine, find out what’s wrong, and fix it. If a process
    died, bring it up again. If a hard disk broke, replace it. If a server is overloaded,
    add more memory.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到如此漫长的等待期和成本，保持服务器尽可能健康是自然而然的事。如果其中一台开始出现故障，我们会竭尽所能尽快修复它。我们还能做什么呢？等待几周或几个月直到替代品到货？当然不能。SSH登录故障机器，找出问题并修复它。如果某个进程死掉了，就重新启动它。如果硬盘坏了，就更换它。如果服务器过载，就增加内存。
- en: It is only natural that, in such circumstances, we develop an emotional attachment
    to each of our servers. It starts with a name. Each new server gets one. There
    is Garfield, Mordor, Spiderman, and Sabrina. We might even decide on a theme.
    Maybe all our servers will get a name based on comic book superheroes. Or perhaps
    you prefer mythical creatures? How about ex-boyfriends and ex-girlfriends? Once
    we give a server a name, we start treating it as a pet. How do you feel? Do you
    need something? What’s wrong? Should I take you to a veterinary? Each pet server
    is unique, hand raised, and cared for.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们对每一台服务器产生情感依赖是很自然的。它从一个名字开始。每台新服务器都会得到一个名字。有Garfield，有Mordor，有Spiderman，还有Sabrina。我们甚至可能会决定一个主题。也许我们的所有服务器都将以漫画书超级英雄命名。或者你更喜欢神话生物？怎么，叫它们前男友前女友怎么样？一旦我们为服务器命名，我们就开始将它当作宠物来对待。你怎么了？需要什么吗？怎么回事？我应该带你去看兽医吗？每一台宠物服务器都是独一无二的，精心养育和照料的。
- en: The change started with virtualization. The ability to create and destroy virtual
    machines allowed us to take a different approach to computing. Virtualization
    enabled us to stop treating our servers as pets. If virtualized servers are created
    and destroyed on a whim, it is pointless to give them names. There is no emotional
    attachment since their lifespan can be very short. Instead of *Garfield*, now
    we have *vm262.ecme.com*. Tomorrow, when we try to log into it, we might discover
    that it was replaced with *vm435.ecme.com*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 变革始于虚拟化。创建和销毁虚拟机的能力使我们能够采用不同的计算方式。虚拟化让我们不再将服务器视为宠物。如果虚拟化服务器可以随意创建和销毁，那么为它们命名就没有意义了。由于它们的生命周期可能非常短暂，所以没有情感上的依赖。现在，我们不再有*Garfield*，而是有*vm262.ecme.com*。明天，当我们尝试登录时，可能会发现它已被*vm435.ecme.com*替代。
- en: With virtualization, we started treating our servers as cattle. They do not
    have names, but numbers. We don’t deal with them individually but as a herd. If
    a specimen is sick, we kill it. Curing it is slow and runs a risk of infecting
    the rest of the herd. If a server starts manifesting problems, terminate it immediately,
    and replace it with a new one.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着虚拟化的发展，我们开始将服务器当作牲畜来对待。它们没有名字，只有编号。我们不再单独处理它们，而是将它们视作一群。如果有一只生病了，我们会将其杀掉。治疗它既缓慢又有可能感染其他的牲畜。如果一台服务器开始出现问题，立刻终止它，并用新的服务器替换。
- en: The problem with this approach lies in habits we have accumulated over the years
    working with physical hardware. The switch from pets to cattle requires a mental
    change. It requires unlearning obsolete practices before switching to new ways
    of working.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的问题在于，我们在与物理硬件打交道的多年经验中积累的习惯。从宠物到牲畜的转变需要一种心理上的变化。它要求我们在转向新的工作方式之前，先要抛弃过时的做法。
- en: Even though on-premise virtualization opened doors to quite a few new possibilities,
    many continued treating virtualized servers in the same way as they were treating
    physical nodes. Old habits die hard. Even though our servers became a herd, we
    keep treating each as pets. Part of the reason for the difficulty making a switch
    towards more elastic and dynamic computing lies in physical limitations of our
    data center. New VMs can be created only if there are available resources. Once
    we reach the limit, a VM has to be destroyed for a new one to be created. Our
    physical servers are still a valuable commodity. VMs gave us elasticity that is
    still bound by limitations imposed by the total of the computing power we possess.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本地虚拟化打开了许多新的可能性，但许多人仍然以对待物理节点的方式来对待虚拟化服务器。旧习惯难以改变。即使我们的服务器变成了一群牲畜，我们仍然将每台服务器当作宠物来对待。转向更具弹性和动态计算的困难部分原因在于我们数据中心的物理限制。只有在有可用资源的情况下，才可以创建新的虚拟机。一旦达到限制，就必须销毁一台虚拟机以创建新的虚拟机。我们的物理服务器仍然是宝贵的资源。虚拟机为我们提供了弹性，但这种弹性依然受到我们所拥有的计算能力总量的限制。
- en: We treat our valuable possessions with care since they are not cheap or easy
    to replace. We take good care of them since they should last for a long time.
    On the other hand, we have an entirely different approach to cheap things that
    are easy to replace. If a glass breaks, you probably don’t try to glue the pieces
    together. You throw them to trash. There are plenty of other glasses in a cupboard,
    and all we have to do when their number becomes too small is buy a new set the
    next time we visit a shopping mall. Today we do not even need to go to a shopping
    mall but can order a new set online, and it will be delivered to our doorstep
    the same day. We should apply the same logic to servers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会小心地对待我们的贵重物品，因为它们不便宜，也不容易替换。我们会好好保管它们，因为它们应该能使用很长时间。另一方面，我们对于那些便宜且易于替换的物品有完全不同的处理方式。如果一只玻璃杯破了，你大概不会试图把碎片粘起来。你会把它丢进垃圾桶。橱柜里有很多其他的玻璃杯，当它们数量减少到一定程度时，我们只需要下次去购物中心时买一套餐具。如今，我们甚至不需要去购物中心，可以在线订购一套餐具，通常当天就能送到家门口。我们应该把同样的逻辑应用到服务器上。
- en: Cloud computing made a big difference. Servers are no longer a valuable possession
    but a commodity. We can replace a node at any time without any additional cost.
    We can add a dozen servers to our cluster in a matter of minutes. We can remove
    them when we don't need them and reduce the cost.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算带来了巨大的变化。服务器不再是宝贵的财富，而是商品。我们可以随时替换一个节点而无需额外费用。我们可以在几分钟内向集群中添加十几台服务器。当我们不再需要它们时，可以将其移除，减少成本。
- en: Cloud computing is fundamentally different from "traditional" data centers.
    When utilized to its full potential, no server is indispensable or unique. The
    worst thing we can do is transition to the cloud without changing our processes
    and architecture. If we simply move our on-premise servers to the cloud without
    changing the processes we use to maintain them, the only thing we'll accomplish
    is higher cost.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算与“传统”数据中心根本不同。当云计算充分发挥其潜力时，服务器不再是不可或缺的或独一无二的。我们能做的最糟糕的事情，就是在没有改变我们的流程和架构的情况下迁移到云端。如果我们只是将本地服务器迁移到云端，而不改变我们用来维护它们的流程，唯一能达成的就是更高的成本。
- en: With cloud computing, the notion of a server, its value, and the time required
    to get it, changed drastically. Such a significant change needs to be followed
    with a new set of processes and tools that execute them. Fault tolerance is the
    goal, speed is the key, and automation is a must.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云计算的普及，服务器的概念、价值和获取所需的时间发生了巨大变化。如此重大的变化需要一套新的流程和工具来执行它们。容错是目标，速度是关键，自动化是必须的。
- en: What now?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在怎么办？
- en: Up until this point, we used Docker Machine to create servers locally and join
    them into a cluster. The intention was to teach you the fundamentals of creating
    and operating a Swarm cluster without spending money on hosting providers. Now
    that we reached the point where you are comfortable with how Docker Swarm Mode
    works, the time has come to move to "real" servers. We’ll continue being "cheap"
    by using small instances that are either free or very inexpensive, and create
    just enough servers to demonstrate the process. The goal of the chapters that
    follow will be to walk you through a few setups, compare them, and choose the
    one we'll apply to our production. The only things you should change are VM instance
    types and the number of servers. Everything else can be the same as in the examples
    we’ll work with.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用 Docker Machine 本地创建服务器并将其加入集群。目的是教你如何创建和操作一个 Swarm 集群，而无需为托管提供商支付费用。现在你已经掌握了
    Docker Swarm 模式的工作原理，接下来是时候转向“真正”的服务器了。我们仍然会保持“便宜”的做法，使用免费的或非常便宜的小型实例，只创建足够多的服务器来展示这个过程。接下来的章节将带领你完成几个设置，比较它们，选择一个最终应用到我们的生产环境。你应该更改的仅仅是虚拟机实例类型和服务器数量，其他所有内容可以与我们所使用的示例保持一致。
- en: We already saw how to accomplish fault tolerance by utilizing Docker Swarm as
    the service scheduler. The chapters that follow will try to achieve the required
    speed and automation on the infrastructure level. We'll use different tools and
    processes to automate the creation of a cluster in a few cloud computing providers.
    The first in line is **Amazon Web Services** (**AWS**).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何通过使用 Docker Swarm 作为服务调度器来实现容错。接下来的章节将尝试在基础设施层面实现所需的速度和自动化。我们将使用不同的工具和流程，自动化地在几个云计算提供商的环境中创建集群。排在第一位的是**亚马逊
    Web 服务** (**AWS**)。
- en: 'struction: Pets vs Cattle'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 结构：宠物与牲畜
