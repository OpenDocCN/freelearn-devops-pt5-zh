["```\ncd cloud-provisioning\n\ngit pull\n\nscripts/dm-swarm-5.sh\n\neval $(docker-machine env swarm-1)\n\ndocker node ls\n\n```", "```\nHOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS\nswarm-4   Ready   Active\nswarm-2   Ready   Active        Reachable\nswarm-1   Ready   Active        Leader\nswarm-5   Ready   Active\nswarm-3   Ready   Active        Reachable\n\n```", "```\ndocker network create --driver overlay proxy\n\ncurl -o proxy-stack.yml \\\n    https://raw.githubusercontent.com/\\\nvfarcic/docker-flow-proxy/master/docker-compose-stack.yml\n\ndocker stack deploy \\\n    -c proxy-stack.yml proxy\n\ncurl -o go-demo-stack.yml \\\n    https://raw.githubusercontent.com/\\\nvfarcic/go-demo/master/docker-compose-stack.yml\n\ndocker stack deploy \\\n    -c go-demo-stack.yml go-demo\n\ndocker service create --name util \\\n    --network proxy \\\n    --mode global \\\n    alpine sleep 1000000000\n\ndocker service ls\n\n```", "```\nNAME           REPLICAS IMAGE                             COMMAND\nswarm-listener 1/1      vfarcic/docker-flow-swarm-listener\ngo-demo        3/3      vfarcic/go-demo:1.2\nutil           global   alpine                            sleep 1000000000\ngo-demo-db     1/1      mongo:3.2.10\nproxy          3/3      vfarcic/docker-flow-proxy\n\n```", "```\n{method=\"GET\", url=\"/demo/person\", status=\"200\"}\n{method=\"PUT\", url=\"/demo/person\", status=\"200\"}\n{method=\"GET\", url=\"/demo/person\", status=\"403\"}\n\n```", "```\nproxy_http_requests_total{method=\"GET\", url=\"/demo/person\", status=\"200\"} 654\nproxy_http_requests_total{method=\"PUT\", url=\"/demo/person\", status=\"200\"} 143\nproxy_http_requests_total{method=\"GET\", url=\"/demo/person\", status=\"403\"} 13\n\n```", "```\ndocker service create \\\n    --name node-exporter \\\n    --mode global \\\n    --network proxy \\ \n    --mount \"type=bind,source=/proc,target=/host/proc\" \\\n    --mount \"type=bind,source=/sys,target=/host/sys\" \\\n    --mount \"type=bind,source=/,target=/rootfs\" \\\n    prom/node-exporter:0.12.0 \\\n    -collector.procfs /host/proc \\\n    -collector.sysfs /host/proc \\\n    -collector.filesystem.ignored-mount-points \\\n    \"^/(sys|proc|dev|host|etc)($|/)\"\n\n```", "```\ndocker service ps node-exporter\n\n```", "```\nNAME             IMAGE                     NODE    DESIRED STATE          \nnode-exporter... prom/node-exporter:0.12.0 swarm-5 Running       \nnode-exporter... prom/node-exporter:0.12.0 swarm-4 Running       \nnode-exporter... prom/node-exporter:0.12.0 swarm-3 Running       \nnode-exporter... prom/node-exporter:0.12.0 swarm-2 Running       \nnode-exporter... prom/node-exporter:0.12.0 swarm-1 Running       \n------------------------------------------------\nCURRENT STATE         ERROR PORTS\nRunning 6 seconds ago\nRunning 7 seconds ago\nRunning 7 seconds ago\nRunning 7 seconds ago\nRunning 7 seconds ago \n\n```", "```\nUTIL_ID=$(docker ps -q --filter \\\n    label=com.docker.swarm.service.name=util)\n\ndocker exec -it $UTIL_ID \\\n    apk add --update curl drill\n\ndocker exec -it $UTIL_ID \\\n    curl http://node-exporter:9100/metrics\n\n```", "```\n# HELP go_gc_duration_seconds A summary of the GC invocation durations.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 0\ngo_gc_duration_seconds{quantile=\"0.25\"} 0\ngo_gc_duration_seconds{quantile=\"0.5\"} 0\ngo_gc_duration_seconds{quantile=\"0.75\"} 0\ngo_gc_duration_seconds{quantile=\"1\"} 0\ngo_gc_duration_seconds_sum 0\ngo_gc_duration_seconds_count 0\n...\n\n```", "```\ndocker service create --name cadvisor \\\n    -p 8080:8080 \\\n    --mode global \\\n    --network proxy \\\n    --mount \"type=bind,source=/,target=/rootfs\" \\\n    --mount \"type=bind,source=/var/run,target=/var/run\" \\\n    --mount \"type=bind,source=/sys,target=/sys\" \\\n    --mount \"type=bind,source=/var/lib/docker,target=/var/lib/docker\" \\\n    google/cadvisor:v0.24.1\n\n```", "```\ndocker service ps cadvisor\n\n```", "```\nNAME        IMAGE                   NODE    DESIRED STATE         \ncadvisor... google/cadvisor:v0.24.1 swarm-3 Running       \ncadvisor... google/cadvisor:v0.24.1 swarm-2 Running       \ncadvisor... google/cadvisor:v0.24.1 swarm-1 Running      \ncadvisor... google/cadvisor:v0.24.1 swarm-5 Running       \ncadvisor... google/cadvisor:v0.24.1 swarm-4 Running       \n--------------------------------------------------------\nCURRENT STATE           ERROR PORTS\nRunning 3 seconds ago\nRunning 3 seconds ago\nRunning 3 seconds ago\nRunning 8 seconds ago\nRunning 3 seconds ago \n\n```", "```\nopen \"http://$(docker-machine ip swarm-1):8080\"\n\n```", "```\ndocker service update \\\n    --publish-rm 8080 cadvisor\n\ndocker service inspect cadvisor --pretty\n\n```", "```\ndocker exec -it $UTIL_ID \\\n    curl http://cadvisor:8080/metrics\n\n```", "```\n# TYPE container_cpu_system_seconds_total counter\ncontainer_cpu_system_seconds_total{id=\"/\"} 22.91\ncontainer_cpu_system_seconds_total{id=\"/docker\"} 0.32\n\n```", "```\ndocker exec -it $UTIL_ID \\\n    drill tasks.node-exporter\n\n```", "```\n;; ANSWER SECTION:\ntasks.node-exporter.    600 IN  A   10.0.0.21\ntasks.node-exporter.    600 IN  A   10.0.0.23\ntasks.node-exporter.    600 IN  A   10.0.0.22\ntasks.node-exporter.    600 IN  A   10.0.0.19\ntasks.node-exporter.    600 IN  A   10.0.0.20\n\n```", "```\ncat conf/prometheus.yml\n\n```", "```\nglobal:\n  scrape_interval: 5s\n\nscrape_configs:\n  - job_name: 'node'\n    dns_sd_configs:\n      - names: ['tasks.node-exporter']\n        type: A\n        port: 9100\n  - job_name: 'cadvisor'\n    dns_sd_configs:\n      - names: ['tasks.cadvisor']\n        type: A\n        port: 8080\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['prometheus:9090']\n\n```", "```\nmkdir -p docker/prometheus\n\n```", "```\ndocker service create \\\n    --name prometheus \\\n    --network proxy \\\n    -p 9090:9090 \\\n    --mount \"type=bind,source=$PWD/conf/prometheus.yml, \\\n    target=/etc/prometheus/prometheus.yml\" \n    --mount \"type=bind,source=$PWD/docker/\\\n    prometheus,target=/prometheus\" \n    prom/prometheus:v1.2.1\ndocker service ps prometheus\n\n```", "```\nNAME          IMAGE                   NODE     DESIRED STATE             \nprometheus.1  prom/prometheus:v1.2.1  swarm-3  Running        \n-----------------------------------------\nCURRENT STATE\nRunning 59 seconds ago \n\n```", "```\nopen \"http://$(docker-machine ip swarm-1):9090\"\n\n```", "```\nirate(node_cpu{mode=\"idle\"}[5m])\n\n```", "```\ncontainer_memory_usage_bytes\n\n```", "```\ncontainer_memory_usage_bytes{id!=\"/\"}\n\n```", "```\ncontainer_memory_usage_bytes{container_label_com_docker_swarm_service_\\\nname=\"cadvisor\"}\n\n```", "```\ndocker service create \\\n    --name grafana \\\n    --network proxy \\\n    -p 3000:3000 \\\n    grafana/grafana:3.1.1\n\n```", "```\ndocker service ps grafana\n\n```", "```\nNAME       IMAGE                NODE     DESIRED STATE CURRENT STATE \ngrafana.1  grafana/grafana3.1.1 swarm-1  Running       Running 24 seconds ago\n\n```", "```\nopen \"http://$(docker-machine ip swarm-1):3000\"\n\n```", "```\nopen \"http://$(docker-machine ip swarm-1):3000\"\n\n```", "```\ndocker service create \\\n    --name elasticsearch \\\n    --network proxy \\\n    --reserve-memory 300m \\\n    -p 9200:9200 \\\n    elasticsearch:2.4\n\n```", "```\ndocker service ps elasticsearch\n\n```", "```\nNAME            IMAGE             NODE    DESIRED STATE CURRENT STATE    \nelasticsearch.1 elasticsearch:2.4 swarm-2 Running       Running 1 seconds ago\n\n```", "```\ndocker service create \\\n    --name logstash \\\n    --mount \"type=bind,source=$PWD/conf,target=/conf\" \\\n    --network proxy \\\n    -e LOGSPOUT=ignore \\\n    logstash:2.4 \\\n    logstash -f /conf/logstash.conf\n\n```", "```\ndocker service ps logstash\n\n```", "```\nNAME       IMAGE        NODE    DESIRED STATE CURRENT STATE    \nlogstash.1 logstash:2.4 swarm-2 Running       Running 2 minutes ago\n\n```", "```\ndocker service create \\\n    --name logspout \\\n    --network proxy \\ \n    --mode global \\\n    --mount \"type=bind,source=/var/run/docker.sock,\\\n    target=/var/run/docker.sock\" \\\n    -e SYSLOG_FORMAT=rfc3164 \\\n    gliderlabs/logspout \\\n    syslog://logstash:51415\n\n```", "```\ndocker service ps logspout\n\n```", "```\nNAME        IMAGE                      NODE    DESIRED STATE CURRENT STATE          \nlogspout... gliderlabs/logspout:latest swarm-1 Running       Running 9 seconds ago\nlogspout... gliderlabs/logspout:latest swarm-5 Running       Running 9 seconds ago\nlogspout... gliderlabs/logspout:latest swarm-4 Running       Running 9 seconds ago\nlogspout... gliderlabs/logspout:latest swarm-3 Running       Running 9 seconds ago\nlogspout... gliderlabs/logspout:latest swarm-2 Running       Running 10 seconds ago\n\n```", "```\nopen \"http://$(docker-machine ip swarm-1):3000\"\n\n```", "```\ndocker service rm node-exporter\n\ndocker service create \\\n    --name node-exporter \\\n    --mode global \\\n    --network proxy \\ \n    --mount \"type=bind,source=/proc,target=/host/proc\" \\\n    --mount \"type=bind,source=/sys,target=/host/sys\" \\\n    --mount \"type=bind,source=/,target=/rootfs\" \\\n    --mount \"type=bind,source=/etc/hostname,target=/etc/\\\n    host_hostname\" \\\n    -e HOST_HOSTNAME=/etc/host_hostname \\\n    basi/node-exporter:v0.1.1 \\\n    -collector.procfs /host/proc \\\n    -collector.sysfs /host/proc \\\n    -collector.filesystem.ignored-mount-points \\\n    \"^/(sys|proc|dev|host|etc)($|/)\" \\\n    -collector.textfile.directory /etc/node-exporter/ \\\n    -collectors.enabled=\"conntrack,diskstats,\\\n    entropy,filefd,filesystem,loadavg,\\\n    mdadm,meminfo,netdev,netstat,stat,textfile,time,vmstat,ipvs\"\n\n```", "```\ndocker service update \\\n    --container-label-add \\\n    com.docker.stack.namespace=db \\\n    go-demo_db\n\n```", "```\ndocker service inspect go-demo_db \\\n    --format \\\n    \"{{.Spec.TaskTemplate.ContainerSpec.Labels}}\"\n\n```", "```\nmap[com.docker.stack.namespace:db]\n\n```", "```\ndocker service update \\\n    --container-label-add \\\n    com.docker.stack.namespace=backend \\\n    go-demo_main\n\n```", "```\nfor s in \\\n    proxy_proxy \\\n    logspout \\\n    logstash \\\n    util \\\n    prometheus \\\n    elasticsearch\ndo\n    docker service update \\\n        --container-label-add \\\n        com.docker.stack.namespace=infra \\\n        $s\ndone\n\n```", "```\nfor i in {1..100}\ndo\n    curl \"$(docker-machine ip swarm-1)/demo/hello\"\ndone\n\n```", "```\nfor i in {1..100}\ndo\n    curl \"$(docker-machine ip swarm-1)/demo/random-error\"\ndone\n\n```", "```\nEverything is still OK\nEverything is still OK\nERROR: Something, somewhere, went wrong!\nEverything is still OK\nEverything is still OK\n\n```", "```\ndocker service update \\\n    --reserve-memory 200m \\\n    prometheus\n\n```", "```\ndocker service ps prometheus\n\n```", "```\nNAME             IMAGE                  NODE    DESIRED STATE          \nprometheus.1     prom/prometheus:v1.2.1 swarm-3 Running       \n_ prometheus.1   prom/prometheus:v1.2.1 swarm-1 Shutdown      \n_ prometheus.1   prom/prometheus:v1.2.1 swarm-5 Shutdown      \n-------------------------------------------------\nCURRENT STATE \nRunning 5 minutes ago\nShutdown 6 minutes ago\nShutdown 5 hours ago \n\n```", "```\ndocker service inspect prometheus --pretty\n\n```", "```\nID:     6yez6se1oejvfhkvyuqg0ljfy\nName:       prometheus\nMode:       Replicated\n Replicas:  1\nUpdate status:\n State:     completed\n Started:   10 minutes ago\n Completed: 9 minutes ago\n Message:   update completed\nPlacement:\nUpdateConfig:\n Parallelism:   1\n On failure:    pause\nContainerSpec:\n Image:     prom/prometheus:v1.2.1\n Mounts:\n  Target = /etc/prometheus/prometheus.yml\n  Source = /Users/vfarcic/IdeaProjects/cloud-provisioning/conf/prometheus.yml\n  ReadOnly = false\n  Type = bind\n  Target = /prometheus\n  Source = /Users/vfarcic/IdeaProjects/cloud-provisioning/docker/prometheus\n  ReadOnly = false\n  Type = bind\nResources:\n Reservations:\n  Memory:   200 MiB\nNetworks: 51rht5mtx58tg5gxdzo2rzirw\nPorts:\n Protocol = tcp\n TargetPort = 9090\n PublishedPort = 9090\n\n```", "```\ndocker service update \\\n    --reserve-memory 250m logstash\n\ndocker service update \\\n    --reserve-memory 10m go-demo_main\n\ndocker service update \\\n    --reserve-memory 100m go-demo_db\n\ndocker service update \\\n    --reserve-memory 300m elasticsearch\n\ndocker service update \\\n    --reserve-memory 10m proxy_proxy\n\n```", "```\ndocker-machine rm -f swarm-1 \\\n    swarm-2 swarm-3 swarm-4 swarm-5\n\n```"]