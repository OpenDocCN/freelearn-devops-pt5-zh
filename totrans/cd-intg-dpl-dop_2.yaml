- en: Chapter 2. DevOps Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. DevOps 框架
- en: 'In this lesson, we will learn about different DevOps processes, frameworks,
    and best practices. We will present DevOps process maturity frameworks and progression
    models with checklist templates for each phase of DevOps. We will also become
    familiar with agile terminology and methodology and the benefits accrued by an
    organization by adopting it. In this lesson, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习不同的 DevOps 流程、框架和最佳实践。我们将介绍 DevOps 过程成熟度框架和进展模型，并为每个阶段提供检查表模板。我们还将了解敏捷术语和方法论，并了解组织采用它后所获得的好处。本节将涵盖以下主题：
- en: DevOps process
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 过程
- en: DevOps progression frameworks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 进展框架
- en: DevOps maturity models
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 成熟度模型
- en: DevOps best practices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 最佳实践
- en: Agile and DevOps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷与 DevOps
- en: DevOps Process
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 过程
- en: 'The DevOps standard processes prescribed across the industry and adopted by
    organizations are listed here; we will discuss them in detail:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 行业内规定并被组织采纳的 DevOps 标准流程列在此处；我们将详细讨论它们：
- en: Source code management
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码管理
- en: Source code review
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码审查
- en: Configuration management
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管理
- en: Build management
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建管理
- en: Repository management
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库管理
- en: Release management
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布管理
- en: Test automation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试自动化
- en: Continuous integration
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous delivery
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous deployment
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署
- en: Infrastructure as Code
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: Application performance monitoring
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用性能监控
- en: Routine automation/continuous improvement
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日常自动化/持续改进
- en: 'DevOps frameworks--under DevOps frameworks, we will study the life cycle models,
    maturity states, progression and best practices frameworks, and also Agile methodology:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 框架——在 DevOps 框架下，我们将研究生命周期模型、成熟度状态、进展和最佳实践框架，以及敏捷方法论：
- en: DevOps project life cycle
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 项目生命周期
- en: Maturity states
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成熟度状态
- en: Progression frameworks
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进展框架
- en: DevOps practices frameworks
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 实践框架
- en: Agile methodology
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷方法论
- en: DevOps Best Practices
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 最佳实践
- en: 'The adoption of DevOps best practices will help to align people and progress
    towards organizational goals. DevOps offers multiple process frameworks at every
    stage of software development. Full-scale implementation of DevOps in an organization
    requires a cultural shift integrating departments, people, and the process of
    software life cycles. It enables organizations to move higher on the maturity
    road map in terms of compliance and process adherence:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 采用 DevOps 最佳实践将有助于协调人员并朝着组织目标进展。DevOps 提供了在软件开发的每个阶段的多个流程框架。在组织中全面实施 DevOps
    需要文化转变，整合部门、人员和软件生命周期的过程。这使得组织能够在遵从性和流程遵守方面在成熟度路线图上不断提高：
- en: '![DevOps Best Practices](img/00004.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![DevOps 最佳实践](img/00004.jpeg)'
- en: DevOps Process
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 过程
- en: Now we will look at DevOps standard processes prescribed across the industry
    and adopted by organizations, discussed in detail.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将详细讨论行业中规定的 DevOps 标准流程，这些流程已被许多组织采用。
- en: Source Code Management
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 源代码管理
- en: '**Source code management** (**SCM**) systems have been in use for decades,
    offering many functions and benefits. However, integrating them with DevOps processes
    offers robust integration and automation. A source code management system enables
    multiple developers to develop code concurrently across multiple development centers
    spread across diverse geographies. SCM helps in the management of code base and
    version control at the file level, so developers don''t overwrite each other''s
    code, and they have ability to work in parallel on files in their respective branches.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**源代码管理**（**SCM**）系统已经使用了几十年，提供了许多功能和好处。然而，将它们与 DevOps 流程集成，能够提供强大的集成和自动化。源代码管理系统使多个开发人员能够同时在多个开发中心进行代码开发，这些中心分布在不同的地理区域。SCM
    帮助管理代码库和文件级的版本控制，确保开发人员不会覆盖彼此的代码，并能在各自的分支上并行工作。'
- en: Developers merge their code changes to the main or sub branch which can be tracked,
    audited, enquired for bug fixes, and rolled back if needed. Branching is an important
    functionality of SCM, multiple branches of the software are maintained for different
    major and minor releases, tracking the features and bug fixes across various release
    versions. SCM enables managing process adherence across environments of development,
    test and production, facilitating entire software life cycle management from development
    to support.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员将其代码更改合并到主分支或子分支，合并内容可以被跟踪、审计、查询错误修复，并在需要时回滚。分支是 SCM 的一个重要功能，软件的多个分支被维护用于不同的主要和次要版本，跟踪各种版本中的特性和错误修复。SCM
    能够在开发、测试和生产环境中管理过程合规性，促进从开发到支持的整个软件生命周期管理。
- en: 'The DevOps process framework emphasizes the adoption of SCM for accruing the
    following benefits for the organization:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 流程框架强调采用 SCM 来为组织带来以下好处：
- en: Coordination of services between members of a software development team
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件开发团队成员之间的服务协调
- en: Define a single source of truth for any version, minor or major
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义任何版本的单一真实来源，无论是次要版本还是主要版本
- en: Review changes before implementing
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实施之前审查更改
- en: Track co-authoring, collaboration, and individual contributions
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪共同创作、协作和个人贡献
- en: Audit code changes and rollback facility
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计代码更改和回滚功能
- en: Incremental backup and recovery
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增量备份与恢复
- en: 'SCM tools prevalent in the market are as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上流行的 SCM 工具如下：
- en: IBM ClearCase
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM ClearCase
- en: Perforce
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perforce
- en: PVCS
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PVCS
- en: Team Foundation Server
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Team Foundation Server
- en: Visual Studio Team Services
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Team Services
- en: Visual SourceSafe
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual SourceSafe
- en: 'Open source SCM tools are as follows--their popularity is also attributed to
    DevOps'' widespread adoption:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 开源 SCM 工具如下——它们的流行也归功于 DevOps 的广泛采用：
- en: '**Subversion** (**SVN**)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Subversion** (**SVN**)'
- en: '**Concurrent Version System** (**CVS**)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发版本系统** (**CVS**)'
- en: Git
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: SCCS
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCCS
- en: Revision control systems
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制系统
- en: Bitbucket
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bitbucket
- en: Code Review
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码审查
- en: Code reviews are an important process to improve the quality of software instances
    before they are integrated into the main stream. They help identify and remove
    common vulnerabilities such as memory leaks, formatting errors and buffer overflows.
    Code review or inspection can be both formal and informal. In a formal code review,
    the process is through multiple methods such as formal meetings, and interactions
    to review the code line by line. Informal code reviews can be over the shoulder,
    emails, pair programming where a few authors codevelop, or tool assisted code
    reviews--these are also called **code walkthroughs**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查是提高软件实例质量的重要过程，在将其集成到主流之前，它们有助于识别并去除常见的漏洞，例如内存泄漏、格式错误和缓冲区溢出。代码审查或检查可以是正式的也可以是非正式的。在正式的代码审查中，过程通过多种方法进行，例如正式会议和逐行检查代码的互动。非正式代码审查可以通过肩膀审查、电子邮件、对写代码的合作编程，或工具辅助的代码审查进行——这些也被称为**代码走查**。
- en: 'A code review process framework benefits the organization as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查过程框架为组织带来的好处如下：
- en: Collaboration between software development team members
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件开发团队成员之间的协作
- en: Identification and elimination of code defects before integration
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集成之前识别并消除代码缺陷
- en: Improvement of code quality
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高代码质量
- en: Quick turnaround of development cycle
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速的开发周期周转
- en: 'Proprietary tools for code review automation:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 用于代码审查自动化的专有工具：
- en: Crucible
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Crucible
- en: Collaborator
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Collaborator
- en: Codacy
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Codacy
- en: Upsource
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Upsource
- en: Understand
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解
- en: 'Open source tools for code review automation:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 用于代码审查自动化的开源工具：
- en: Review board
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Review board
- en: Phabricator
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Phabricator
- en: Gerrit
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gerrit
- en: GitLab
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab
- en: Configuration Management
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置管理
- en: '**Configuration Management** (**CM**) is the broad subject of governing configuration
    items at enterprise level, as per **Infrastructure Library** (**ITIL**); even
    the **configuration management database** (**CMDB**) is part of the CM strategy.
    Configuration management includes identification, verification, and maintenance
    of configuration items of both software and hardware, such as patches and versions.
    In simple terms, it''s about managing the configuration of a system and ensuring
    its fitness for its intended purpose. A configuration management tool will validate
    the appropriateness of the configurations on the system as per the requirements
    and its interoperability between systems. A common example is to ensure the code
    developed on a development system is effectively functional on a QA (test) system
    and production systems. Any loss of configuration parameters between the systems
    will be catastrophic for the application''s performance.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置管理**（**CM**）是一个广泛的主题，涉及在企业级别上管理配置项，根据**基础设施库**（**ITIL**）的定义；甚至**配置管理数据库**（**CMDB**）也是
    CM 策略的一部分。配置管理包括软件和硬件的配置项的识别、验证和维护，如补丁和版本。简单来说，就是管理系统的配置，并确保其适应预期的目的。配置管理工具将根据要求验证系统配置的适宜性以及系统间的互操作性。一个常见的例子是确保在开发系统上开发的代码在
    QA（测试）系统和生产系统上有效运行。系统间任何配置参数的丢失都会对应用性能产生灾难性影响。'
- en: 'As per DevOps, the benefits of incorporating configuration management processes
    and tools for an organization can be summarized as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 DevOps，组织引入配置管理流程和工具的好处可以总结如下：
- en: Facilitates organizations with impact analysis due to the configuration change
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过配置变更提供影响分析，帮助组织
- en: Allows automated provisioning on different systems such as dev, QA, and prod
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许在不同系统（如开发、QA、生产）上进行自动化配置
- en: Facilitates audit, account, and verification of the systems
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 便于系统的审计、账户管理和验证
- en: Reduces redundant work by ensuring consistency
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过确保一致性减少冗余工作
- en: Effectively manages simultaneous updates
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效管理同时进行的更新
- en: Avoids configuration related problems of a single version of the truth
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免“单一真实版本”相关的配置问题
- en: Simplifies coordination between team members of development and operations
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化开发和运维团队成员之间的协调
- en: It is helpful in tracking defects and resolving them in time
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有助于跟踪缺陷并及时解决
- en: Helps in predictive and preventive maintenance
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有助于预测性和预防性维护
- en: 'A few popular configuration management tools for infrastructure are as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一些流行的基础设施配置管理工具如下：
- en: BMC Software's Atrium
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BMC 软件的 Atrium
- en: Hewlett Packard Enterprise's Universal Configuration Management Database
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 惠普企业的通用配置管理数据库
- en: 'A few popular software configuration management tools are as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一些流行的软件配置管理工具如下：
- en: Chef
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef
- en: Puppet
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet
- en: Ansible
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible
- en: Salt
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Salt
- en: Juju
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Juju
- en: Build Management
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建管理
- en: Build management is the process of preparing a build environment to assemble
    all the components of a software application as a finished, workable product,
    fit for its intended purpose. The source code, the compilers, dependencies with
    hardware and software components, and so on, are compiled to function as a cohesive
    unit. Builds are manual, on demand and automatic. On-demand automated builds reinitiate
    with a script to launch the build and are used in few cases. Scheduled automated
    builds are the case with continuous integration servers running nightly builds.
    Triggered automated builds in a continuous integration server are launched just
    after being committed to a Git repository.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 构建管理是准备构建环境的过程，用于将软件应用程序的所有组件汇集成一个完整、可用的产品，适合其预期目的。源代码、编译器、与硬件和软件组件的依赖关系等，都会被编译成一个整体单位。构建可以是手动的、按需的或自动化的。按需自动化构建通过脚本重新启动构建，在少数情况下使用。定时自动化构建是指在持续集成服务器上运行的夜间构建。触发式自动化构建是在
    Git 仓库提交后立即启动的。
- en: 'As per DevOps, the benefits of build management processes and tools for an
    organization can be summarized as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 DevOps，构建管理流程和工具对组织的好处可以总结如下：
- en: The vital function of ensuring software is usable
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保软件可用的核心功能
- en: Ensures reusability and reliability of the software in client environments
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保软件在客户端环境中的可重用性和可靠性
- en: Increases the efficiency and quality of software
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高软件的效率和质量
- en: It's also a regulatory requirement
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这也是一项监管要求
- en: 'A few build tools that are in use are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一些使用中的构建工具如下：
- en: Ant
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ant
- en: Buildr
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Buildr
- en: Maven
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven
- en: Gradle
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle
- en: Grunt
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grunt
- en: MSbuild
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSbuild
- en: Visual Build
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Build
- en: Make (CMake/QMake)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Make (CMake/QMake)
- en: Artifacts Repository Management
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构件仓库管理
- en: A build Artifacts repository manager is a dedicated server for hosting multiple
    repositories of binary components (executables) of successful builds. By centralizing
    the management of diverse binary types, it reduces the complexity of access along
    with their dependencies.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 构建构件仓库管理器是一个专门的服务器，用于托管成功构建的多个二进制组件（可执行文件）仓库。通过集中管理多种二进制类型，它简化了访问及其依赖关系的复杂性。
- en: 'The benefits are as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 其好处如下：
- en: Manage artifact life cycles
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理构件生命周期
- en: Ensure builds are repeatable and reproducible
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保构建是可重复且可再现的
- en: Organized access to build artifacts
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有序访问构建构件
- en: Convenient to share builds across teams and vendors
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 便于跨团队和供应商共享构建
- en: Retention policies based on artifacts for audit compliance
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于构件的保留策略以满足审计合规性
- en: High availability of artifacts with access controls
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用性构件及访问控制
- en: 'A few repository tools that are in use are as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一些使用中的仓库工具如下：
- en: Sonatype Nexus
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sonatype Nexus
- en: JFrog Artifactory
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JFrog Artifactory
- en: Apache Archiva
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Archiva
- en: NuGet
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NuGet
- en: Docker hub
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker hub
- en: Pulp
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pulp
- en: Npm
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Npm
- en: Release Management
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布管理
- en: Release management is the process of a software life cycle to facilitate a release's
    movement from development, testing, and deployment to support/maintenance. It
    interfaces with several other DevOps process areas in the SDLC.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理是软件生命周期的一部分，旨在促进发布从开发、测试、部署到支持/维护的过程。它与SDLC中的其他DevOps过程领域相互关联。
- en: Release management has been an integral part of the development process for
    decades. However, its inclusion into the DevOps framework makes a complete cycle
    for automation.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理已成为开发过程的一个不可或缺的部分。然而，将其纳入DevOps框架中，使得自动化形成了完整的循环。
- en: Release management is an iterative cycle initiating by a request for the addition
    of new features or changes to existing functionality. Once the change is approved,
    the new version is designed, built, tested, reviewed, and after acceptance, deployed
    to production. During the support phase, there could be a possibility of enhancement
    or performance leading to the initiation of a new development cycle.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理是一个迭代周期，始于请求添加新特性或更改现有功能。一旦更改获批，新的版本就会设计、构建、测试、审查，经过接受后部署到生产。在支持阶段，可能会进行增强或性能改进，从而启动新的开发周期。
- en: 'The benefits of adopting release management are as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 采用发布管理的好处如下：
- en: Product life cycle holistic management, tracking and integrating every phase
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品生命周期整体管理，跟踪并整合每个阶段
- en: Orchestrate all the phase activities--development, version control, build, QA,
    systems provisioning, production deployment, and support
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协调所有阶段活动——开发、版本控制、构建、质量保证、系统配置、生产部署和支持
- en: Track the status of recent deployments in each of the environments
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪各环境中最近部署的状态
- en: Audit history of all activities of work items that are associated with each
    release
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计与每个发布相关的所有工作项的活动历史
- en: The automation of release management relies on automating all of its stages
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布管理的自动化依赖于自动化其所有阶段
- en: Teams can author release definitions and automate deployment in repeatable,
    reliable ways while simultaneously tracking in-flight releases all the way to
    production
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队可以编写发布定义，并以可重复、可靠的方式自动化部署，同时跟踪从开发到生产的进行中的发布。
- en: Fine grain access control for authorized access and approval for change
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对授权访问和更改批准进行细粒度的访问控制
- en: 'A few release management tools are:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一些发布管理工具包括：
- en: Electric Cloud
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Electric Cloud
- en: Octopus Deploy
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Octopus Deploy
- en: Continuum
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Continuum
- en: Automic
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Automic
- en: Quikbuild
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quikbuild
- en: UrbanCode Release
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UrbanCode Release
- en: CA Service Virtualization (LISA)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA服务虚拟化（LISA）
- en: BMC Release Process Management
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BMC发布流程管理
- en: Plutora Release
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Plutora发布
- en: CA Release Automation
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA发布自动化
- en: Serena Release
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Serena发布
- en: MS Visual Studio
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MS Visual Studio
- en: StackStorm
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StackStorm
- en: Rally
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rally
- en: Test Automation
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试自动化
- en: Testing manually for every possible scenario is tedious, labor intensive, time
    consuming and expensive. Test automation, or automatic testing, is for running
    test cases without manual intervention. Though not all test cases qualify to be
    automatically run, the majority can be scheduled. Automation is achieved by running
    the test cases with an automation tool or through the scheduling of automation
    scripts. Recent test data is used as input and the results are captured for analysis.
    The goal of test automation is to supplement manual testing by reducing the number
    of test cases to be run manually--not to replace manual testing all together.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 手动测试每个可能的场景既繁琐又耗费人力、时间和金钱。自动化测试，或者称为自动化测试，是指在没有人工干预的情况下执行测试用例。虽然并非所有测试用例都适合自动执行，但大多数可以安排定时执行。自动化是通过使用自动化工具或调度自动化脚本来实现的。测试数据作为输入并捕获结果进行分析。自动化测试的目标是通过减少需要手动执行的测试用例数量来补充手动测试，而不是完全取代手动测试。
- en: Automation testing is for test cases that are repetitive, monotonous, tedious,
    and time consuming, that have defined input and boundary conditions. It's not
    suitable for frequently changing, ad hoc or first time execution test cases. Software
    automation testing can be based on a few types of frameworks data; keyword, modular,
    and hybrid.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试适用于那些重复、单调、繁琐且耗时的测试用例，这些用例有明确的输入和边界条件。它不适用于经常变化的、临时的或首次执行的测试用例。软件自动化测试可以基于几种框架的数据类型；如关键字、模块化和混合型框架。
- en: Testing big data systems encompasses multiple technologies, integrations, frameworks
    and testing modules such as functional, security, usability, performance, integration
    testing, and so on.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 测试大数据系统涉及多种技术、集成、框架和测试模块，如功能测试、安全测试、可用性测试、性能测试、集成测试等。
- en: 'The benefits of adopting test automation are as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 采用自动化测试的好处如下：
- en: Improve software quality and responsiveness
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高软件质量和响应速度
- en: Quick turnaround by substituting manual effort with automation
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用自动化替代人工工作，从而加快工作流程
- en: Improve the effectiveness of the overall testing life cycle
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高整个测试生命周期的效率
- en: Incremental and integration testing for continuous integration and delivery
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增量和集成测试用于持续集成和交付
- en: 'A few test automation tools are as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一些自动化测试工具如下：
- en: Visual Studio Test Professional
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Test Professional
- en: QTP (UFT)
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QTP (UFT)
- en: SoapUI
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SoapUI
- en: TestDrive
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TestDrive
- en: FitNesse
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FitNesse
- en: Telerik Test Studio
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Telerik Test Studio
- en: Selenium
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium
- en: TestComplete
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TestComplete
- en: Watir
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Watir
- en: Robotium
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Robotium
- en: Continuous Integration
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous integration is a DevOps best practice wherein developers continuously
    integrate their code in small logical units to a common shared repository with
    regularity (for example, once a day). The advantage of such a process is the transparency
    of the code's quality and fitness for its intended purpose. Otherwise, bulk code
    integration after the lapse of a fixed time period could expose many defects or
    integration challenges which could be expensive to resolve.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是 DevOps 最佳实践之一，开发人员将其代码持续集成到一个共同的共享仓库中，按小的逻辑单元进行，并定期提交（例如，每天一次）。这种流程的优势在于代码的质量和适应目标的透明性。否则，在固定时间后进行大量代码集成可能会暴露出许多缺陷或集成挑战，解决这些问题可能会非常昂贵。
- en: 'To achieve continuous integration, there are few prerequisites to be implemented,
    as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现持续集成，必须先实施以下几个前提条件：
- en: Using a version repository for source code
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用版本仓库来管理源代码
- en: Regular code check in schedule
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期提交代码计划
- en: Automate testing for the code changes
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化代码变更的测试
- en: Automate the build
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化构建
- en: Deploy build in preproduction
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在预生产环境中部署构建
- en: 'The benefits of continuous integration are as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成的好处如下：
- en: Availability of latest code as we commit early and often
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们早期并且频繁地提交代码，从而获得最新的代码
- en: Build cycles are faster as build issues are exposed early with check-ins
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于早期检查并暴露了构建问题，构建周期更快
- en: Transparency in the build process means better ownership and lesser defects
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建过程的透明度意味着更好的责任归属和更少的缺陷
- en: Automating the deployment process leads to quicker turnaround
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化部署过程能更快速地完成工作
- en: 'Some continuous integration tools that are available are as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一些可用的持续集成工具如下：
- en: Jenkins
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins
- en: TeamCity
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TeamCity
- en: Travis
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis
- en: Go CD
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go CD
- en: Buddy
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Buddy
- en: Bitbucket
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bitbucket
- en: Chef
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef
- en: Microsoft Teamcenter
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Teamcenter
- en: CruiseControl
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CruiseControl
- en: Bamboo
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bamboo
- en: GitLab CI
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab CI
- en: CircleCI
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircleCI
- en: Codeship
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Codeship
- en: 'The following figure represents the roles of continuous integration, delivery,
    and deployment:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 下图表示持续集成、持续交付和持续部署的角色：
- en: '![Continuous Integration](img/00005.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![持续集成](img/00005.jpeg)'
- en: Continuous Delivery
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous delivery is the next step of continuous integration in the software
    development cycle; it enables rapid and reliable development of software and delivery
    of product with the least amount of manual effort or overhead. In continuous integration,
    as we have seen, code is developed incorporating reviews, followed by automated
    building and testing. In continuous delivery, the product is moved to the preproduction
    (staging) environment in small frequent units to thoroughly test for user acceptance.
    The focus is on understanding the performance of the features and functionality
    related issues of the software. This enables issues related to business logic
    to be found early in the development cycle, ensuring that these issues are addressed
    before moving ahead to other phases such as deployment to the production environment
    or the addition of new features. Continuous delivery provides greater reliability
    and predictability on the usability of the intended features of the product for
    the developers. With continuous delivery, your software is always ready to release
    and the final deployment into production is a manual step as per timings based
    on a business decision.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是软件开发周期中持续集成的下一步；它使得软件的快速、可靠开发以及最少人工干预或管理开销的产品交付成为可能。在持续集成中，正如我们所看到的，代码开发时包含审查，之后是自动化构建和测试。而在持续交付中，产品以小的频繁单位被移动到预生产（暂存）环境中，进行彻底的用户验收测试。重点是理解与软件相关的功能和性能问题。这使得与业务逻辑相关的问题可以在开发周期的早期发现，确保这些问题在继续进行到部署生产环境或增加新功能等其他阶段之前得到解决。持续交付为开发者提供了更大的可靠性和可预测性，使得软件随时可以发布，最终的生产部署是基于业务决策的手动步骤。
- en: 'The benefits of the continuous delivery process are as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付过程的好处如下：
- en: Developed code is continuously delivered
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发的代码被持续交付
- en: Code is constantly and regularly reviewed
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码不断并定期进行审查
- en: High-quality software is deployed rapidly, reliably, and repeatedly
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高质量的软件能够快速、可靠地、反复部署
- en: Maximum automation and minimal manual overhead
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化自动化并最小化人工开销
- en: The tools that perform continuous integration do the job of continuous delivery
    as well.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 执行持续集成的工具也能够执行持续交付的工作。
- en: Continuous Deployment
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续部署
- en: Continuous deployment is the fully matured and complete process cycle of code
    change, passing through every phase of the software life cycle to be deployed
    to production environments.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是代码更改的完全成熟和完整的过程周期，经过软件生命周期的每个阶段，最终部署到生产环境中。
- en: Continuous deployment requires the entire process to be automated--also termed
    as automated application release--through all stages, such as the packaging of
    the application, ensuring the dependencies are integrated, deployment testing,
    and the production of adequate documentation for compliance.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署要求整个过程自动化——也称为自动化应用发布——涵盖所有阶段，如应用打包、确保依赖项集成、部署测试以及为合规性生成充分的文档。
- en: 'The benefits of continuous deployment and automated application release are
    as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署和自动化应用发布的好处如下：
- en: Frequent product releases deliver software as fast as possible
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁的产品发布尽可能快地交付软件
- en: Automated and accelerated product releases with the code change
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与代码更改一起自动化和加速产品发布
- en: Code changes qualify for production both from a technical and quality view point
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从技术和质量角度来看，代码更改符合生产要求
- en: The most current version of the product is ready in shippable format
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品的最新版本以可交付格式准备好
- en: Deployment modeling reduces errors, resulting in better product quality
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署建模减少了错误，从而提升了产品质量
- en: Consolidated access to all tools, process and resource data leads to quicker
    troubleshooting and time to market
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合访问所有工具、流程和资源数据，有助于更快地排除故障并缩短上市时间
- en: Effective collaboration between dev, QA, and operation teams leads to higher
    output and better customer satisfaction
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发、质量保证和运维团队之间的有效协作提高了产出，并提升了客户满意度
- en: Facilitates lower audit efforts owing to a centralized view of all phase activities
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于对所有阶段活动的集中视图，有助于降低审计工作量
- en: Infrastructure as Code
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: '**Infrastructure as Code** (**IaC**) is a means to perform infrastructure services
    through the defining of configuration files. In DevOps'' scope, IaC is the automation
    of routine tasks through code, typically as configuration definition files, such
    as shell scripts, Ansible playbooks, Chef recipes, or Puppet manifests. It''s
    usually a server and client setup with push or pull-based mechanisms, or agentless
    through **secured shell** (**SSH**). Many regular tasks on systems such as create,
    start, stop, delete, terminate, and restarting virtual or bare-metal machines
    are performed through software. In traditional on-premise systems, many of the
    system administrative tasks were manual and person dependent. However, with the
    explosion of big data with cloud computing, all the regular system activities
    and tasks are managed like any software code. They are maintained in code repositories,
    and the latest build updates are tested for deployment.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础设施即代码**（**IaC**）是通过定义配置文件来执行基础设施服务的一种方式。在 DevOps 范畴内，IaC 是通过代码自动化日常任务，通常是作为配置定义文件，例如
    shell 脚本、Ansible playbook、Chef 配方或 Puppet 清单。它通常是一个服务器和客户端的设置，使用推送或拉取机制，或通过 **安全外壳**（**SSH**）无代理方式进行。许多系统上的常规任务，如创建、启动、停止、删除、终止和重启虚拟机或裸金属机器，都是通过软件执行的。在传统的本地系统中，许多系统管理任务都是手动的，且依赖于个人。然而，随着大数据和云计算的爆炸式增长，所有常规的系统活动和任务都像任何软件代码一样被管理。它们存储在代码仓库中，并且最新的构建更新会经过部署测试。'
- en: 'The advantages of IaC are as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 的优势如下：
- en: The use of definition files and code to update system configuration is quick
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用定义文件和代码来更新系统配置非常快捷。
- en: The version of all the code and changes is less error prone and has reproducible
    results
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有代码和更改的版本更加不易出错，并且具有可复现的结果。
- en: Thorough testing of the deployment with IaC and test systems
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 IaC 和测试系统对部署进行彻底测试。
- en: Smaller regular changes are easy to manage, bigger infrastructure updates are
    likely to contain errors that are difficult to detect
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较小的常规更改容易管理，而较大的基础设施更新可能包含难以检测的错误。
- en: Audit tracking and compliance are easy with definition files
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用定义文件可以轻松进行审计跟踪和合规性检查。
- en: Multiple servers update simultaneously
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多台服务器同时更新。
- en: System availability is high, with less down time
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统可用性高，停机时间少。
- en: 'Some tools for IaC are as follows:'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些用于 IaC 的工具如下：
- en: Ansible tower
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible tower
- en: CFEngine
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CFEngine
- en: Chef
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef
- en: Puppet
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet
- en: SaltStack
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaltStack
- en: Routine Automation
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日常自动化
- en: Every organization aims to automate routine, repetitive tasks; in fact the survival
    of most companies and software products is based on the degree to which they automate.
    ERP systems, data visualization, domain applications, data analytics, and so on;
    almost all segments are potential areas for automation. A few sections to automate
    are infrastructure (deployment, patching scalability), applications (development,
    integration, builds, delivery, and deployment), load balancers, feedback, and
    defects/errors management.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组织都致力于自动化日常重复性任务；事实上，大多数公司和软件产品的生存依赖于它们自动化的程度。ERP 系统、数据可视化、领域应用、数据分析等几乎所有领域都是潜在的自动化区域。一些需要自动化的部分包括基础设施（部署、补丁、可扩展性）、应用程序（开发、集成、构建、交付和部署）、负载均衡器、反馈以及缺陷/错误管理。
- en: Key Application Performance Monitoring/Indicators
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键应用性能监控/指标
- en: Performance metrics are part of every tool, product and service. Accordingly,
    organizations are ever vigilant of the performance metrics monitoring of their
    applications, products and services. To achieve high-quality output for any product,
    achieving a high degree of standard in process and metrics is prerequisite. There
    are many parameters to gauge performance metrics, such as, for example, applications
    or hardware systems availability or uptime versus downtime and responsiveness,
    tickets categorization, acknowledgement, resolution time lines, and so on.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 性能指标是每个工具、产品和服务的一部分。因此，组织始终警惕其应用程序、产品和服务的性能指标监控。要为任何产品实现高质量输出，首先必须在流程和指标上达到较高的标准。有许多参数可用来衡量性能指标，例如，应用程序或硬件系统的可用性或正常运行时间与停机时间和响应性，工单分类、确认、解决时间等。
- en: DevOps is all about measuring the metrics and feedback, with continuous improvement
    processes.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 关注的是衡量指标和反馈，并结合持续改进过程。
- en: Several tools are available for application monitoring for various needs; we
    will cover the most appropriate and applicable tools in the context of the DevOps
    framework in further sections of this lesson.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种工具可用于不同需求的应用监控；我们将在本课程的后续部分讨论在 DevOps 框架下最合适和适用的工具。
- en: DevOps Frameworks
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 框架
- en: Under DevOps frameworks we will study the life cycle models, maturity states,
    progression and best practices frameworks, as well as agile methodology.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 框架下，我们将研究生命周期模型、成熟度状态、进展和最佳实践框架，以及敏捷方法论。
- en: 'Accomplishing DevOps maturity is a gradual progression to being well structured
    and planned, as stated in the following stages:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 DevOps 成熟度是一个逐步推进的过程，朝着良好结构化和计划化的方向发展，具体阶段如下：
- en: DevOps Maturity Life Cycle
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 成熟度生命周期
- en: 'DevOps project phases are on lines of the software development life cycle as
    described here. We will dwell on each phase in detail:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 项目阶段与软件开发生命周期一致，如此处所述。我们将详细讨论每个阶段：
- en: '**Discovery and requirements phase**: The DevOps discovery phase is a highly
    interactive project phase for gathering inputs and feedback on the current state
    of process, frameworks and tools from key stakeholders. Templates and checklists
    are used to capture the inputs. The timeline for the phase depends on the availability
    of key stakeholders, the existence of requisite documents, and the complexity
    of the processes to explore. Discovery phase deliverables are as follows:'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发现与需求阶段**：DevOps 发现阶段是一个高度互动的项目阶段，旨在收集关于当前过程、框架和工具的输入和反馈，主要来自关键利益相关者。模板和检查清单用于捕捉这些输入。此阶段的时间表取决于关键利益相关者的可用性、相关文档的存在以及需要探索的过程的复杂性。发现阶段的交付物如下：'
- en: Templates detailing the current state of process, tools, frameworks
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细说明当前过程、工具、框架状态的模板
- en: Signoff from key stakeholders on the details collated
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键利益相关者对已收集细节的签署
- en: Existing best practices and DevOps methods
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的最佳实践和 DevOps 方法
- en: Existing challenges, constraints as applicable
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有挑战、约束条件（如适用）
- en: Reusable tools, process, artifacts
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重用的工具、过程、工件
- en: '**Design print phase**: The design phase is also the architecture phase; it''s
    about producing a blueprint of the target state to accomplish. It''s an iterative
    process of weighing alternatives for tools, and processes arriving at agreement
    by key stakeholders. The timeline and cost will be base lined and revisited and
    revised regularly based on new learnings from the project as we move forward towards
    the target state. The timeline for this phase depends on how acceptable the processes,
    tools, and budgets are to the key stakeholders. Design phase deliverables are
    as follows:'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计图纸阶段**：设计阶段也是架构阶段；其目的是绘制出达成目标状态的蓝图。这是一个迭代过程，涉及权衡工具和过程的替代方案，并通过关键利益相关者达成一致。时间表和成本将基准化，并根据项目进展中的新学习定期回顾和修订。此阶段的时间表取决于过程、工具和预算对关键利益相关者的可接受程度。设计阶段的交付物如下：'
- en: Target state is agreed upon
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 达成一致的目标状态
- en: Baseline of DevOps process to be adopted
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要采纳的 DevOps 过程基准化
- en: Baseline of most viable tools to be implemented
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最具可行性的工具基准化实施
- en: Baseline agreed timelines and cost
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准化的时间表和成本
- en: '**Development phase**: Artifacts base lined from the blueprint phase will be
    inputs for the development phase; the agreed upon process changes, tools to be
    implemented, frameworks to be adopted, and so on. A detailed project plan covering
    deliverables, schedules, dependencies, constraints, resource leveling, and so
    on will be quite handy. Agile scrum methodology will be the framework to implement
    the DevOps, which will be discussed in detail. The timeline for the development
    phase will be as per the project plan base lined initially, and revised regularly
    with the progress of milestones that have been accomplished. Development phase
    deliverables are as follows:'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发阶段**：从蓝图阶段基准化的工件将成为开发阶段的输入，包括商定的过程变更、要实施的工具、要采用的框架等。一份详细的项目计划，涵盖交付物、进度安排、依赖关系、约束条件、资源平衡等，将非常有用。敏捷
    Scrum 方法论将是实现 DevOps 的框架，具体内容将在后续讨论。开发阶段的时间表将依据最初基准化的项目计划，并随着完成的里程碑进展定期修订。开发阶段的交付物如下：'
- en: Initial project plan base lined and signoff
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始项目计划已基准化并签署
- en: Incorporating regular feedback till project completion
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目完成前融入定期反馈
- en: Allocation of resources for each stage
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个阶段分配资源
- en: Including new skills, methods, process, and tools
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括新技能、新方法、新过程和新工具
- en: Work arounds for project risks, constraints, and so on
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对项目风险、限制等的解决方案
- en: Deliverables as agreed in the project plan
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按项目计划约定的交付物
- en: '**Deployment phase**: The DevOps deployment phase is in accordance with the
    best practices outlined in the DevOps process framework detailed above. It depends
    on whether the deployment is a process, an application tool, or for infrastructure.
    The timeline will be evaluated as per experience gained in the development phase.
    Deployment phase deliverables are as follows:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署阶段**：DevOps 部署阶段遵循上述 DevOps 流程框架中概述的最佳实践。其取决于部署是流程、应用工具，还是基础设施。时间表将根据在开发阶段积累的经验进行评估。部署阶段的交付物如下：'
- en: Deployment guide--cutover plan to production
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署指南——生产切换计划
- en: Deployment checklist
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署检查表
- en: Signoff from key stakeholders
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自关键利益相关者的签字确认
- en: Rollback plan
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚计划
- en: Capacity planning
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容量规划
- en: '**Monitoring phase**: Monitors the key performance factors for each phase''s
    performance of development, build, integration and deployment over time duration.
    It''s followed by tracking the defects, bug fixes, user tickets and plans for
    continuous improvement. Monitoring phase timelines are as per organization need
    and performance benchmarks. Monitoring phase deliverables are as follows:'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控阶段**：监控每个阶段在开发、构建、集成和部署过程中的关键绩效因素。随后跟踪缺陷、漏洞修复、用户票务和持续改进计划。监控阶段的时间表根据组织需求和绩效基准进行设定。监控阶段的交付物如下：'
- en: Operations manual
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作手册
- en: Feedback forms and checklists
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反馈表格和检查表
- en: User guide, support manual
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户指南，支持手册
- en: Process flow manual
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程手册
- en: Performance benchmark
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绩效基准
- en: DevOps Maturity Map
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 成熟度图
- en: DevOps adoption is a value-added journey for an organization. It's not something
    achieved overnight quickly, but matured step by step over a period of time with
    manifested results. Like any Capability Maturity Model (CMMI) or Process Maturity
    Models, the critical success factors are to be defined for the program's performance
    objectives. The initial maturity state of key evaluation parameters is agreed
    upon by key stakeholders. Then the target maturity level of the parameter variables
    to be accomplished will be defined in the project charter, along with detailed
    procedure, milestones, budgets and constraints as approved by stakeholders.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 的采纳是一个为组织增值的过程。这不是一种可以一蹴而就的成就，而是通过一段时间的逐步成熟并表现出结果的过程。像任何能力成熟度模型（CMMI）或流程成熟度模型一样，关键的成功因素必须为程序的绩效目标进行定义。主要评估参数的初始成熟度状态需由关键利益相关者达成一致。然后，项目章程中将定义该参数变量的目标成熟度等级，以及经过利益相关者批准的详细程序、里程碑、预算和约束条件。
- en: '![DevOps Maturity Map](img/00006.jpeg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![DevOps 成熟度图](img/00006.jpeg)'
- en: DevOps process maturity framework.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 流程成熟度框架
- en: DevOps Progression Framework/Readiness Model
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 进展框架/准备模型
- en: As discussed in the previous model, DevOps adoption is a journey for an organization
    to higher maturity states. In the following table, different practice areas and
    maturity levels of DevOps at a broad scale are listed. DevOps maturity levels
    may vary across teams as per their standards, similarly even a common department
    or division of the same organization may have significantly more varied and advanced
    practices than others for the same process flow. Enhancing to achieve the best
    possible DevOps process workflow throughout the entire enterprise should be the
    end goal for all teams and departments.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，DevOps 的采用是一个使组织逐步达到更高成熟度状态的过程。在下表中，列出了 DevOps 在广泛范围内的不同实践领域和成熟度等级。DevOps
    的成熟度等级在不同团队之间可能有所不同，具体取决于他们的标准，类似地，即使是同一组织的一个共同部门或分部，其在相同流程中的实践也可能远比其他部门更为先进。全公司范围内提升并实现最佳
    DevOps 流程工作流应是所有团队和部门的最终目标。
- en: '![DevOps Progression Framework/Readiness Model](img/00007.jpeg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![DevOps 进展框架/准备模型](img/00007.jpeg)'
- en: DevOps Maturity Checklists
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 成熟度检查表
- en: The process maturity framework, as seen in the preceding sections, is assessed
    with checklists and discussions. For each of the key focus areas, the detailed
    findings will indicate the maturity levels.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的流程成熟度框架，采用检查表和讨论进行评估。针对每个关键关注领域，详细的调查结果将表明其成熟度水平。
- en: 'The findings provide a general estimate of the maturity level and the impact
    it is causing:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 研究结果提供了成熟度水平及其影响的一般估算：
- en: '![DevOps Maturity Checklists](img/00008.jpeg)![DevOps Maturity Checklists](img/00009.jpeg)![DevOps
    Maturity Checklists](img/00010.jpeg)![DevOps Maturity Checklists](img/00011.jpeg)![DevOps
    Maturity Checklists](img/00012.jpeg)![DevOps Maturity Checklists](img/00013.jpeg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![DevOps 成熟度检查清单](img/00008.jpeg)![DevOps 成熟度检查清单](img/00009.jpeg)![DevOps
    成熟度检查清单](img/00010.jpeg)![DevOps 成熟度检查清单](img/00011.jpeg)![DevOps 成熟度检查清单](img/00012.jpeg)![DevOps
    成熟度检查清单](img/00013.jpeg)'
- en: Agile Framework for DevOps Process Projects
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 过程项目的敏捷框架
- en: DevOps projects are typically Agile-framework based, for the effective and quick
    turnaround of the development and implementation process cycle.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 项目通常基于敏捷框架，以实现开发和实施过程的高效快速周转。
- en: Agile software development-based projects have become widely accepted and adopted
    across the industry. The traditional waterfall model is outdated and unable to
    keep up with the advantages offered by agile methodology.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 基于敏捷软件开发的项目已在行业中得到广泛接受和采用。传统的瀑布模型已经过时，无法跟上敏捷方法所带来的优势。
- en: 'Agile methodology owes its success to its core objectives such as:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷方法论的成功归功于其核心目标，如下所示：
- en: Individuals and interactions are valued over process and tools
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人和互动被重视，优于流程和工具
- en: Working software is valued over comprehensive documentation
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作软件被看重，优于详尽的文档
- en: Customer collaboration is valued over contract negotiation
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户合作被看重，优于合同谈判
- en: Change adoption agility is valued over project plan adherence
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相较于遵循项目计划，变更采纳的敏捷性更为重要
- en: Agile Ways of Development
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 敏捷开发方式
- en: 'Scrum is the agile development methodology, focused on features development,
    from a team comprising of roles such as the following:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum 是一种敏捷开发方法，专注于功能开发，团队成员包括如下角色：
- en: The scrum master is responsible for team setup, conducting sprint meetings,
    and removing development obstacles
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scrum Master 负责团队设置、主持冲刺会议并移除开发中的障碍
- en: The product owner creates and prioritizes product backlog, and is responsible
    for the delivery of the functionality at each sprint iteration cycle
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品负责人创建并优先排序产品待办事项列表，并负责每个冲刺迭代周期中功能的交付
- en: The scrum team manages and organizes the work to complete in the sprint cycle
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scrum 团队负责管理和组织工作，以完成冲刺周期中的任务。
- en: The product backlog is the list of features and requirements of functionality
    to be developed
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品待办事项列表是要开发的功能特性和需求的清单
- en: 'The Agile method of development is an incremental and iterative approach for
    developing user stories, software features or functionality. Customers can see
    the product features early and make necessary changes, if needed. The development
    cycle is broken into sprint cycles of two to four weeks, to accomplish units of
    work. The idea is that smaller cycles can be developed and managed quickly with
    a team of developers and testers together. The structure and documentation are
    not important but a working feature of the code is considered valuable. The development
    process is iteratively accomplished in successive sprint cycles. Bugs identified
    are fixed at the earliest sprint with successful testing. Regression testing is
    performed when new functions or logic are developed. User acceptance tests are
    performed after the sprint cycle to flag the product for release:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发方法是一种增量和迭代的方式，用于开发用户故事、软件功能或功能模块。客户可以早期看到产品特性，并在需要时进行必要的更改。开发周期被分为两到四周的冲刺周期，以完成工作单元。其理念是，通过开发人员和测试人员组成的团队，可以快速开发和管理较小的周期。结构和文档并不重要，但代码的可工作特性被视为最有价值的。开发过程通过连续的冲刺周期进行迭代实现。发现的漏洞会在最早的冲刺中进行修复，并通过成功的测试。回归测试会在新功能或逻辑开发时执行。用户验收测试会在冲刺周期结束后进行，以便标记产品进行发布。
- en: '![Agile Ways of Development](img/00014.jpeg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![敏捷开发方式](img/00014.jpeg)'
- en: 'The benefits of adopting the best practices of agile software development are
    as follows:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 采纳敏捷软件开发最佳实践的好处如下：
- en: Working software makes the customer satisfied, as he can view the features
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作软件能够让客户满意，因为他可以查看功能
- en: Customers can add change requests at any phase of development
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以在开发的任何阶段提出变更请求
- en: Quick and continuous delivery of software in weeks
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件的快速持续交付，通常以周为单位
- en: Projects are built around motivated individuals, who should be trusted
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目围绕着充满动力的个体构建，且这些个体应当受到信任
- en: Sprint teams are highly skilled and efficient in delivery
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冲刺团队在交付上高度熟练且高效
- en: Since developers and testers codevelop, bugs are solved within sprint
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于开发人员和测试人员共同开发，漏洞会在冲刺周期内得到解决
- en: The communication mode is effective so quality of product delivered is higher
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沟通模式有效，因此交付的产品质量更高
- en: Continuous attention to technical excellence leads to good design
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续关注技术卓越带来良好的设计
- en: Self-organizing teams focus on optimal architectures, requirements, and designs
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自组织团队专注于最佳架构、需求和设计
- en: The team is lean and effective, so productivity is maximized
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队精简且高效，因此生产力最大化
- en: Summary
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this lesson, we understood the application of DevOps processes, frameworks,
    best practices, and DevOps process maturity frameworks and progression models
    with checklist templates. We also looked into agile terminology and methodology.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们了解了 DevOps 流程、框架、最佳实践、DevOps 流程成熟度框架和进展模型及其检查清单模板的应用。我们还学习了敏捷术语和方法论。
- en: In this next lesson, we will learn about implementing DevOps core process.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个课程中，我们将学习如何实现 DevOps 核心流程。
- en: Assessments
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Which among the following DevOps processes offers robust integration and automation?
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项 DevOps 流程提供了强大的集成和自动化？
- en: Source code management
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源代码管理
- en: Code review
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码审查
- en: Configuration management
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置管理
- en: Build management
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建管理
- en: Which of the following are proprietary tools for code review automation?
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些是用于代码审查自动化的专有工具？
- en: Git
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git
- en: SCCS
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SCCS
- en: Crucible
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Crucible
- en: SVN
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SVN
- en: Which among the following are benefits of artifacts repository management?
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些是工件库管理的好处？
- en: Ensures reusability and reliability of the software in client environments
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保软件在客户环境中的可重用性和可靠性
- en: Ensure builds are repeatable and reproducible
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保构建是可重复和可再现的
- en: Track the status of recent deployments in each of the environments
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跟踪各个环境中最近部署的状态
- en: Audit history of all activities of work items that are associated with each
    release
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审计与每次发布相关联的所有工作项活动的历史记录
- en: Which of the following is a deliverable of the discovery phase in DevOps maturity
    life cycle?
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项是 DevOps 成熟生命周期中发现阶段的交付成果？
- en: Baseline of most viable tools to be implemented
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实施的最可行工具的基准
- en: Baseline agreed timelines and cost
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基准同意的时间线和成本
- en: Reusable tools, process, and artifacts
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可重用的工具、流程和工件
- en: Baseline of DevOps process to be adopted
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要采纳的 DevOps 流程基准
- en: The _________ is responsible for team setup, conducting sprint meetings, and
    removing development obstacles.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: _________ 负责团队设置、召开冲刺会议并消除开发障碍。
- en: Scrum master
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Scrum Master
- en: Product owner
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 产品负责人
- en: Customer
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户
- en: Scrum team
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Scrum 团队
