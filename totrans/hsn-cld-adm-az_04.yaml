- en: Azure App Service - Hosting Web Applications without a Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step in our cloud journey is PaaS, and we'll introduce Azure App Service.
    Azure App Service is the simplest example of Azure PaaS, and is intended to host
    web applications. We'll see how different hosting applications in IaaS and PaaS
    is.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure App Service Plans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Web Apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App service environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you'll need an Azure subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Azure App Service Plan and Azure Web Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PaaS in Azure (or in any public cloud) is more abstract than IaaS. It''s simple
    to understand the IaaS model because it''s not much different from on-premises:
    we create a virtual machine, we configure it any way we want, we install anything
    we want (of course, limited by the OS itself; we can''t install something that
    wouldn''t run on-premises either).'
  prefs: []
  type: TYPE_NORMAL
- en: After we create our Azure VM, we have complete control over everything on that
    VM. For example, the VMs created in the previous chapter were intended to be used
    as web servers. We can connect to that VM and install all the required roles,
    features, and software in order to start hosting our application.
  prefs: []
  type: TYPE_NORMAL
- en: But what if we want to do a similar thing with PaaS?
  prefs: []
  type: TYPE_NORMAL
- en: 'An Azure App Service Plan is used to host our web applications in Azure. We
    need to create an Azure App Service Plan and then add Azure Web Apps for our applications.
    A single App Service Plan can host multiple Azure Web Apps. If we install IIS
    on our web server, we can host multiple applications as well. An App Service Plan
    can be compered very much to IIS, but with one big difference: with IIS, we have
    complete control over configuration and with App Service Plan we have a limited
    set of options. This is essentially the difference between IaaS and PaaS.'
  prefs: []
  type: TYPE_NORMAL
- en: With less control comes less maintenance, as many tasks that we needed to perform
    in an on-premises environment are now automated and we don't need to worry about
    them. For example, installing updates in a local environment must be performed
    regularly in order to keep everything up to date and secure. With PaaS, we don't
    need to install any updates as this is done automatically on the host level.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an App Service Plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating a new App Service Plan. Similar to all Azure resources,
    we need to provide a name, Subscription, Resource Group, and Location. The other
    options available are Operating System and Pricing tier. The options available
    for OS are Windows and Linux. An example of all the information needed to create
    a new App Service Plan is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41a1f2b3-efad-4093-8541-0b946be61639.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The default value for App Service Plan Pricing tier is S1 Standard or Standard
    1\. If we change this value, a new blade will open with more options. The App
    Service Plan pricing blade is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4cbfe4c-6313-4d05-a342-4678f0d7d686.png)'
  prefs: []
  type: TYPE_IMG
- en: 'App Service Plan pricing is divided into three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Dev/Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dev/Test is intended for small workloads in dev/test environments. It has different
    sizes: F1, D1, and Basic (B1, B2, and B3). F1 is free on shared infrstructure,
    has limited compute time per day, and doesn''t support custom domains. D1 has
    more compute hours per day and support for custom domains. The Basic tier has
    dedicated infrastructure and has support for custom domains, SSL, and manual scaling.'
  prefs: []
  type: TYPE_NORMAL
- en: Production is intended for bigger workloads in a production environment. It
    comes with Standard and Premium tiers, which each have additional sizes (S1, S2,
    S3, P1, P2, P3, P1v2, P2v2, and P3v2). All sizes in the production section bring
    additional features, like autoscale, slots, backup, and Traffic Manager support.
    The amount of resources available to an App Service Plan depends on size, as each
    size comes with a different amount of memory and number of cores. This also applies
    to the Basic tier, even though it's not intended for production. The main difference
    between the standard and premium tiers is disk type, as standard uses standard
    storage (HDD) and premium uses premium storage (SSD). Premium can also be v1 and
    v2, where v2 has a different processor type and more memory.
  prefs: []
  type: TYPE_NORMAL
- en: After an App Service Plan is created, you can start adding Web Apps. It's important
    to say that you can add multiple Web Apps to a single App Service Plan. Billing
    is done on the App Service Plan level and you pay for the entire App Service Plan,
    not for each individual app. The number of apps that can be added to each App
    Service Plan depends on tier and size.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure Web App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a new Azure Web App, the standard values that need to be provided
    are App name, Subscription, Resource Group, and Application Insights Location.
    The other required values are OS, App Service plan/Location, and Application Insights.
    The available options for OS are Windows, Linux, and Docker. Values will depend
    on the type of application you want to run. In App Service plan/Location, you
    can create a new App Service Plan or use an existing one.
  prefs: []
  type: TYPE_NORMAL
- en: App Service plan/Location will determine the location of your Web App, as it
    needs to be in the same location as the App Service Plan it's associated with.
    Finally, I encourage enabling Application Insights, as this will allow you better
    monitoring and reporting regarding your application usage and performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of all the information needed to create a Web App is shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b74a6380-8375-46f6-862f-5e9031fcba7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After deployment completes, we can see the following resources created: App
    Service plan, App Service, and Application Insights. This can be a bit confusing
    because different names are used when creating resources and after they are actually
    created. App Service Plan is App Service Plan in both cases.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of Web App, the name is different. When you want to create a new
    Web App, the blade will show the name Web App, but after it''s created you will
    see it as App Service. To sum up, App Service Plan is referred as App Service
    Plan and Web App is referred to as both Web App and App Service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfb52210-3323-4318-a2a6-4e864ad77844.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing Azure Web App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the deployment of resources is completed, we need to configure them. As
    we don't have direct access and can't install software, roles, or features, we
    have an extended set of preconfigured settings that we can edit. There are more
    options in the App Service blade than in the Virtual Machine Blade, but overall
    we have fewer options as direct configuration isn't available.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the Azure Web App and continue with configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Web App deployment settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first set of options available for an Azure Web App is deployment. Quickstart
    offers us links to various documents and guides.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can set the Deployment credentials that will be used for deployment and
    FTP access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/801f8e06-9957-46dd-b8de-db701dd1e7eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Deployment slots is a very interesting feature which allows us to create multiple
    environments for our application. Slots are separate environments, but they can
    be used to swap application versions as well. To create a new slot, we select
    Add a slot and then provide a Name and a Configuration Source. The Configuration
    Source can be one of the existing slots (the configuration of the selected slot
    will be cloned), or we can select not to clone and leave the default values. A
    example of adding a new slot is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79fd5e65-27b0-45ca-9028-44a8e608356e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The slot''s name will be formed from the application name with the slot name
    added. For example, I created two slots: staging and test. This is shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3392330f-93a8-4a4a-abed-4283600c5873.png)'
  prefs: []
  type: TYPE_IMG
- en: A great feature is the option to swap slots. For example, we can have a production
    slot running and have all users pointed to this slot when using the application.
    We can deploy and test on different slots, and this will have no impact on the production
    version of the application that users are currently using. Once we have tested
    everything, we can deploy the new version to the staging slot. The option to swap
    slots allows us to switch between the old production version and the new version
    in a matter of seconds with minimal impact on our users. When we hit swap, everything
    in staging becomes production and the old production becomes staging. Settings
    between slots are not changed, so staging can use a different database than production,
    for example. Another great thing is that we can swap back as well. Even when we
    test and validate, users may experience problems and bugs in new versions of applications.
    In this case, we can simply switch back and return to the previous production
    version, moving it from staging to production and the new version from production
    to staging. This will allow users to continue using the last stable version of
    the application, while we can examine and troubleshoot in staging in order to
    resolve the issue. Once we resolve the issue, simply swap again and the new version
    is back in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of slot swapping is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87543d9d-66e5-4961-b575-b1fc311a847c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Deployment option and Deployment Center (Preview) give you options to connect
    to a code repository. Most common repositories are default options, such as Visual
    Studio Team Services, GitHub, or Bitbucket. File shares like OneDrive or Dropbox
    are also an option and you can link to a custom external repository as well, like
    Local Git Repository or Team Foundation Server. The difference is that besides
    connecting a repository, Deployment Center (Preview) gives you the option to establish
    a continuous integration/continuous delivery pipeline. Deployment option sources
    are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/900fc5af-d96f-49ce-acf7-81aa954bab26.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure Web App general settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Web App settings have some similar features to other Azure services, such
    as properties and locks. Also, most Azure services have a Scale up (App Service
    plan) and/or Scale out (App Service plan) option. Some unique settings are Application
    settings, Authentication/Authorization, Application Insights, Managed service
    identity, Backups, Custom domains, SSL settings, Networking, WebJobs, Push notifications,
    and MySQL In App. The Networking option allows us to connect a Web App to an Azure
    VNet, or even create a hybrid connection to our on-premises environment. WebJobs
    allow us to create background processes that can be executed on a schedule or
    triggered by an event. Push notifications are usually used for mobile applications
    in order to send various notifications to the mobile device where the application
    is running, like news, updates, and so on. MySQL In App creates a MySQL instance
    that your application can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this is for small workloads and I don''t recommend using this other
    than for development and testing. A list of all settings is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73e0f357-97a7-45ed-a1a2-a625a90a28da.png)'
  prefs: []
  type: TYPE_IMG
- en: General settings have a preconfigured set of options which allow us to change
    framework versions and other settings needed for our application. For example,
    we can switch between different versions of .NET, PHP, Python, or Java. We can
    also switch between 32-bit and 64-bit platforms, turn Websockets on or off, set
    a managed pipeline version to classic or integrated, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'One very important option is always on, and I strongly recommend you set this
    to On. If the application isn''t used for a period of time, it can take some time
    to establish the first connection. For example, if the application is used during
    working hours, it can take some time for first users to connect in the morning
    because the application wasn''t used during the night. Setting Always On will
    ping the application from time to time and keep it active. This way, whenever
    users try to connect, the application will be ready and there will be no wait
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de238724-4a41-454b-8e47-43de1f479852.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Authentication/Authorization option allows us to set up a user login for
    our application. The default option is anonymous access, but we can set up Azure
    Active Directory, a Microsoft Live account, Facebook, Google, and Twitter. Managed
    Service Identity allows the application to be registered in Azure Active Directory
    and use the registration to communicate with other applications in Azure Active
    Directory. A list of Authentication Providers in the Authentication/Authorization
    blade is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/385677a6-4fc8-44b8-8c50-8805265ffe5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Backup option allows us to create a backup for our application. We need
    to provide Storage Settings (the storage account where the backup will be stored),
    backup schedule, and retention period. The default retention period is 30 days
    and the default schedule is daily, but you can change these settings. If you set
    up a connection to a code repository, this option is not really necessary as you
    can redeploy the application at any time, but it''s a useful feature if you want
    a quick restore or if you don''t use a code repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8399ee1f-19f5-4d71-addf-e815c576bdd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Custom domains, certificates, and scaling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom domains and SSL settings allow us to customize the URL for our application
    and apply certificates to encrypt connections and increase security. These are
    directly connected as you can't apply a valid SSL certificate without a custom
    domain for your Web App.
  prefs: []
  type: TYPE_NORMAL
- en: An Azure Web App, by default, has the URL `customname.azurewebsites.net` (where
    in `customname` is the name you provided while creating the Web App). In order
    to simplify access, you can use a custom URL that you already own or you can buy
    a new domain. There is even the option to buy a new domain through the Azure portal,
    but the offer is not provided by Microsoft, but by partners. If you buy a new
    domain through the Azure portal, this will be added to your Azure bill.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to set up a custom domain, domain ownership needs to be verified.
    This is done by adding ether CNAME (`customname.azurewebsites.net`) or a record
    (Azure Web App IP address) on your DNS which will point your custom domain to
    the Azure Web App. Once verification is done, you just need to confirm that you
    want to use that domain for your Azure Web App. Also, you can set up your website
    to use HTTPS only to increase security, especially if you are using SSL. Information
    on CNAME and the IP addresses that need to be added to verify ownership, and later
    to be used to point to your website, can be found on this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50a52c1b-9712-4a56-ba78-c4e568780062.png)'
  prefs: []
  type: TYPE_IMG
- en: 'SSL Configuration allows us to set HTTPS Only again. I strongly advise you
    to use this whenever possible. Another security option is Minimum TLS Version,
    wherein you can choose between 1.0, 1.1 and 1.2\. It is recommended to use TLS
    1.2 as it may be reported insecure otherwise. The Bindings option allows you to
    pair up a custom domain and available certificates. As you can have more custom
    domains point to a single website, all available domains with SSL will be shown
    in the list, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/001af4c7-19de-48ff-b19c-16e246f43acd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Certificates section under SSL settings allows you to manage certificates
    for your website. You can either Import App Service Certificate or Upload Certificate.
    An App Service certificate is an option that allows you to buy a certificate through
    the Azure portal and use that certificate for your applications. This certificate
    will be available to all apps in the tenant. The Upload Certificate option allows
    you to upload an existing certificate that you already have or have bought from
    an external source. Certificates will show under the public or private list, depending
    on the type of certificate you uploaded or imported. You can also request Client
    Certificates if needed. All certificate options are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b1ca8dc0-f0e0-4935-930d-bccc80c5ebd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Automatic scaling for Azure Web Apps is done similarly to a **virtual machine
    scale set** (**VMSS**). Under the Scale out section, you can find a blade that
    is identical to the scale out blade in VMSS. In order to configure scale out rules,
    you need to set up scale out and scale in parameters. For example, you can set
    up a web app to add an additional instance whenever the CPU goes over 70%, and
    then decrease the number of instances if the CPU goes under 25%. You can set up
    the minimum, maximum, and default number of instances. Additional scale out and
    scale in rules can be added that will perform a scale in/out depending on different
    metrics. This will allow you to save money and run the minimum number of instances
    needed without suffering performance issues. An example of scale conditions is
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8829b542-cdcc-4897-951f-97eaa925b9b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure Web App Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure Web Apps have some unique tools that are specific to this service: DEVELOPMENT
    TOOLS, MOBILE, and API.'
  prefs: []
  type: TYPE_NORMAL
- en: DEVELOPMENT TOOLS start with the Clone app option, which allows us to create
    a new instance of the Web App that will be an identical replica of the existing
    app. However, this option is limited only to the Premium tier, and if you are
    using any other tier, this option will not be available unless you upgrade. Console
    gives you web access to the console, where you can browse files and perform actions
    on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Tools opens an additional window that contains a few different options,
    like debug console, process explorer, resource explorer, and different information
    for debugging and deployment. We can also add extensions to our Web App and choose
    hundreds of different extensions from the gallery in the site extensions section.
  prefs: []
  type: TYPE_NORMAL
- en: App Service Editor (Preview) allows you web access to the code editor, wherein
    you can make live changes to application code without any additional tools. Performance
    test allows you to perform load tests on your app and see how it would handle
    any amount of concurrent users. Resource explorer and Extensions are the options
    available in the advanced tools that we talked about.
  prefs: []
  type: TYPE_NORMAL
- en: 'A very interesting option is Testing in production. It requires the use of
    slots and allows you to redirect a percentage of users to a different slot for
    user testing. For example, we deployed a new version of the application to the staging
    slot. Using this feature, we can point 10% of users to this slot in order to verify
    that the application is working as expected. Once we verify that 10% of the users
    don''t have any issues, we can increase this to 25%, then to 50%, and then finally
    switch all users to the new version. A list of all development tools is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f9c92e9-4a41-41cd-819b-5a44bb354486.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The other sections available are MOBILE, API, and MONITORING:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MOBILE: This has three options which are intended to be used for mobile applications.
    These options are Easy tables, Easy APIs, and Data connections. Data connections
    defines a connection to the Azure SQL database and is also a requirement for Easy
    tables and Easy APIs. Both Easy tables and Easy APIs require mobile extension
    to be installed on your Web App.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API: The API section contains API Definitions and CORS. API definition lets
    you configure the location of the Swagger 2.0 metadata describing your API. This
    makes it easy for others to discover and consume your API. Note that the URL can
    be a relative or absolute path, but must be publicly accessible. **Cross-Origin
    Resource Sharing** (**CORS**) allows JavaScript code running in a browser on an
    external host to interact with your backend.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MONITORING: This is available for other resources, and we already covered most
    of these options. The options available for monitoring are Alerts (Classic), Diagnostic
    logs, Log stream, and Process explorer. In Diagnostic logs, you can set the level
    of logs you want to save. Log stream gives you the option to observe logs live.
    The list of options in the MOBILE, API, and MONITORING sections is shown in the
    following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c56eea20-5b27-4198-aca5-e955f775788c.png)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring a Web App in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default options for monitoring Azure Web Apps can be useful, but it's only
    the beginning of the Web App monitoring options. If you want a really powerful
    tool for monitoring and alerting with dashboards and analytics, Application Insights
    is the tool you want to use. Application Insights can be created and linked to
    a Web App while creating the Web App or later.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can use a single Application Insight to monitor multiple Azure Web
    Apps. It's interesting that Application Insights is not limited to Azure Web Apps,
    but can be used with an application hosted anywhere, including other cloud providers
    or an on-premises data center.
  prefs: []
  type: TYPE_NORMAL
- en: Application Insights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A first look at Application Insights gives you a few dashboards that show basic
    information on requests, response time, and availability for your application
    in the last two hours. These dashboards can be customized with different time
    frames and to show different metrics altogether. An example of App Insights dashboards
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85093542-3db9-476f-bfe8-906c132f7e4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first set of options under Application Insights is under the INVESTIGATE
    section. In this section, we have multiple metric options which allow us to track
    different performance counters and dependencies. Most of these options can be
    edited and we can extract specific information, as well as create custom dashboards
    and alerts. Some of these metrics can be collected only if the Application Insight
    SDK is installed on your application. A list of all options under the INVESTIGATE section
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4937a4de-9b14-4922-8e16-db2e025b44bb.png)'
  prefs: []
  type: TYPE_IMG
- en: An example of one of these alerts is availability. We can create a test that
    will continuously test our application from different locations in order to confirm
    that the application is available.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can edit test frequency, test locations, success criteria, and alerts. If
    the default settings are used, the application will be pinged every 5 minutes
    from five different locations. In case three or more locations fail to contact
    the application, an alert will be triggered and a notification will be sent. An
    example of an availability test is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2041e16-ae29-427b-afca-35482d21d23e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The USAGE section contains various information on Users, Sessions, Events,
    and User Flows. To get metrics in this section, you need to use the Application
    Insight JavaScript SDK and add JavaScript code snippets to your application. A
    list of all options under users is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aed7b452-8862-4c8e-a850-b09d9cf38698.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is an example of a code snippet that needs to be added to an application
    in order to collect usage information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The CONFIGURE section has a lot of settings that are already included in other
    Application Insights settings (such as Smart Detection settings) and Azure Web
    Apps settings (such as Performance Testing). The most interesting features are
    API Access (which allows you to manage API keys that allow other applications
    to access APIs on your Azure Web App) and Work Items (which allow you to connect
    to Visual Studio Team Services and link work items directly to your application).
    A list of settings under the configuration section in Application Insights is
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38897b08-b3bb-4f14-97f5-7b780efb246a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'APPLICATION INSIGHTS logs a lot of different metrics. You can create custom
    queries to get different kinds of information in Application Insights Analytics.
    The results of these queries can be displayed as a table or as a chart. A screenshot
    of Application Insight Analytics is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bb24688-a954-4e16-af3c-9a42123b58d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is an example of an Application Insights query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Azure App Service Plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the process of creating an Azure Web App, we needed to create an Azure App
    Service Plan. Let's take a step back and go over the settings available in the Azure
    App Service Plan.
  prefs: []
  type: TYPE_NORMAL
- en: Under SETTINGS, we have some options that are available in Azure Web Apps, such
    as Networking, Scale up (App Service plan), and Scale out (App Service plan).
    Properties, Locks, and an Automation script are available as well, as in all other
    Azure resources. Note that an App Service Plan can host multiple Azure Web Apps.
    Billing is done for an Azure App Service Plan; you don't pay per Web App. So,
    tier changes on an Azure Web App are directly connected to tier changes in the Azure
    App Service Plan. Scale up/down and scale in/out operations done in the Web App
    blade will be shown here as the tier will not change for the Azure Web App, but
    for the Azure App Service Plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of all options under settings in the Azure App Service Plan is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a157b3c1-9ee3-4105-b237-31da7938d013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On of the things that is different and unique for an Azure App Service Plan
    is Apps. As already mentioned, more Azure Web Apps can be hosted on a single Azure
    App Service Plan. The Apps option under settings has all these Web Apps listed,
    along with any slots that are created under these Web Apps. An example of an app
    list is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8faf6435-5c52-4a30-8d21-4731e2a099bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another different option is file system storage. Every Azure App Service Plan
    has resource limitations. Under File system storage, we have information on how
    much total and free space is available. A screenshot of File system storage is
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f87d8224-7b71-40c0-8275-57e773b4305e.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure Web App high availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already seen how to set up automatic scaling for Azure Web Apps and
    how to create scale in and out rules. But scaling can improve performance and
    keep the application up if there is an increase in requests and doesn't really
    secure the high availability of the application. If there is an issue in the Azure
    Data Center where the application is located, or maintenance on the host is in
    progress, the application will be unavailable if hosted in a single location.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to achieve high availability, we need to introduce another Azure service:
    Traffic Manager. Azure Traffic Manager operates on the DNS level to direct incoming
    requests to endpoints based on custom routing rules.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with creating a new Azure Traffic Manager and go through the configuration
    to show how to set up high availability for Azure Web Apps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Traffic Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a new Azure Traffic Manager, we need to provide the name, routing
    method, subscription resource group, and location. The location will be automatically
    chosen if an existing resource group is used. One option that is specific to Traffic
    Manager is the routing method, and the available options are performance, weighted,
    priority, and geographical.
  prefs: []
  type: TYPE_NORMAL
- en: The Performance option is used when you want to point a user to a location that
    will provide the best performance based on response time, network latency, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Weighted will distribute requests evenly or according to weight rules. For example,
    the default rule will distribute it evenly, and if we have two endpoints defined
    then half the requests will go to one endpoint and the other half to the second
    endpoint. But weight rules can be defined to have one endpoint receive 70% (or
    any other number) of requests, and the rest will be sent to the second endpoint.
    Of course, you can have more than two endpoints defined (two is the minimum) and
    create rules to weight any ratio you want.
  prefs: []
  type: TYPE_NORMAL
- en: The Geographical option will point users to the closest geographical location.
    For example, we can have two endpoints which are located in West Europe and East
    US. If the geographical routing method is used, users coming from Europe will
    be pointed to the endpoint in West Europe and users coming from the USA will be
    pointed to East US.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the priority routing method is usually used when high availability
    is the goal. One endpoint will be used as the primary endpoint, so all traffic
    will be pointed only to the primary endpoint. In case the primary endpoint becomes
    unavailable, all traffic will be pointed to the secondary instance. Of course,
    you can have more than only two endpoints. More endpoints ensures a bigger chance
    that at least one endpoint will be available and this increases the high availability
    percentage.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the performance method can be used to achieve a similar goal
    to endpoint tracking, and users are pointed to the one that will perform best
    in a given situation. If the endpoint is unavailable, this will be reflected as
    a drop in performance and users will be directed to another endpoint that is giving
    better results. An issue with this approach is that the performance drop can take
    time to be detected, and users may experience issues until the performance of
    the endpoint is recognized to be down and they are redirected to a different endpoint.
    With the priority method, the availability of the endpoint is monitored, an issue
    is detected much faster, and users are pointed to a healthy instance faster and
    with lesser chance of experiencing issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a filled template used to create a new Azure Traffic Manager
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f321087-2952-4747-8b0f-b12681bc09d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Traffic Manager configuration and settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once an Azure Traffic Manager is created, we can proceed with configuration.
    The SETTINGS specific to Traffic Manager are Configuration, Real user measurements,
    Traffic view, and Endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Real user measurements and Traffic view allow you to monitor behavior and see
    where users are pointed and how traffic is flowing. Traffic view will give you
    insights into where requests are coming from, using a map and pointing to request
    origins geographically. Real user measurements can give you more insight into
    requests and traffic, but requires a measurement key and JavaScript snippet to
    be embedded in the application code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c571eb3f-2b4a-4ff5-a3e5-b245e6a73e45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Endpoint option allows you to register endpoints toward which traffic will
    be directed. These can be either Azure endpoints or external endpoints. In the
    case of external endpoints, only **fully qualified domain name** (**FQDN**) is
    allowed. For Azure endpoints, it can be Cloud Service, App Service, App Service
    slot, or Public IP address. This is another example of naming that creates confusion.
    App Service and the App Service slot are actually Web App and the Web App slot
    in this case. An example of adding an Azure Web App (App Service) is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0bfe55b-0643-45db-9534-fde60f7fe4c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Having only one endpoint doesn''t really help us to achieve high availability,
    and we need at least one more endpoint. I recommend that the second endpoint is
    located in a different region to resolve possible issues with maintenance or service
    in a single data center. A list of all available endpoints is located under Endpoints,
    with NAME, STATUS, TYPE, and LOCATION. An example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c976a41-0009-4bb2-b2fa-cbf6aa76364d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last step is to create rules under configuration. Note that we can change
    the routing method here, and this option can be changed after creating a Traffic
    Manager. This isn''t the case with all Azure resources, and some settings can''t
    be changed once you create them. For example, no resource in Azure can be renamed:
    the only option is to delete it and create a new one if a name change is required.
    Under the Endpoint monitoring settings, you can choose the Protocol, Port, and
    Path that you want to monitor.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the Fast endpoint failover settings need to be configured. The Probing
    interval can be set to 10 or 30 seconds, and this determines how often endpoint
    status will be checked. Tolerated number of failures can be set to `0`-`9`, and
    this determines how many times a check can fail before the endpoint is declared
    failed. Probe timeout determines the time needed before the probe times out. This
    value needs to be at least `5`, and less than the probing interval time. Lower
    numbers for these settings mean that issues will be detected faster and failover
    will occur before an issue is detected by users. However, you need to be careful,
    as pinging the application more often than needed and declaring too few tolerated
    failures can cause the application to switch between instances too often and create
    additional issues. An example configuration is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec389e58-9611-46d4-bbaf-b488891d5494.png)'
  prefs: []
  type: TYPE_IMG
- en: Running Azure Web Apps in a dedicated environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure Web Apps use public endpoints and are usually accessed over the internet
    without any restrictions. In a case where more isolated access is needed, there
    is another option: **Azure App Service Environment** (**ASE**). Azure ASE offers
    a fully isolated and dedicated environment for secure applications at high scale.
    Azure ASE is usually used with workloads that require very high scale, isolated
    and secure network access, and high memory utilization. As ASE comes as a dedicated
    environment, this eliminates the problem of noisy neighbors (performance issues
    that may result from another application sharing the same host) and allow you
    to fully utilize all resources.'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure App Service Plan can be connected to an Azure VNet, but this requires
    additional work. On other hand, ASE comes automatically connected to a VNet and
    can be accessed only over private connections and private IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Azure App Service Plan is the best example of the PaaS model in Microsoft
    Azure. It allows us to host applications without servers and virtual machines.
    Even though management options are simplified and cut down to the minimum, we
    still have a lot of configuration options. Legacy support is next to nothing,
    but the PaaS model is intended for modern applications that require the latest
    features and frameworks. If you need to run legacy software, IaaS is the best
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: We introduced IaaS and PaaS in Azure from the application perspective. But the application
    is nothing without data. In the next chapter, we'll move to Data Platform in Azure
    and show how to create and manage databases in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure App Service is...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How much control do we have with an App Service Plan compared to virtual machines?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Less
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The same
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How much administration do we have with an Azure App Service Plan compared to
    virtual machines?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Less
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The same
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An App Service Plan is used to host...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web applications
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Databases
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Slots are used to...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Host different version of the application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Host the application in different regions
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Handle increased workload
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An Azure App Service Plan's increased workload is handled by...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scaling up
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Scaling out
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: WebJobs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The best monitoring tool for Azure Web Apps is...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Splunk
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Log analytics
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Application Insights
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: High availability for Azure Web Apps is achieved by...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scaling up
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Scaling out
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Traffic Manager
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Traffic Manager supports...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure endpoints
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: External endpoits
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An isolated and dedicated environment for Azure Web Apps is an...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure App Service Plan
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure ASE
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure Virtual Machine
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
