- en: Chapter 1. Plugin Development Process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Skeleton plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a JIRA plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing and debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Atlassian JIRA, as we all know, is primarily an **Issue Tracking** and **Project
    Tracking System**. What many people do not know, though, is the power of its numerous
    customization capabilities, using which we can turn it into a different system
    altogether! Maybe a helpdesk system, a user story management system, an online
    approval process, and a lot more. This is in addition to the issue tracking and
    project tracking capabilities for which JIRA, arguably, is the best player in
    the market.
  prefs: []
  type: TYPE_NORMAL
- en: So what are these customizations? How can we convert the JIRA we know into a
    product we want? Or maybe just add extra functionalities that are specific to
    our organization?
  prefs: []
  type: TYPE_NORMAL
- en: The answer to these questions probably can be summarized in a single word—**plugins**.
    JIRA has given the power to its users to write plugins and customize the functionality
    in a way they find suitable.
  prefs: []
  type: TYPE_NORMAL
- en: But is that the only way? Definitely not! JIRA itself provides a lot of customization
    options through its user interface, and in more demanding cases, using property
    files like **jira-application.properties**. In some cases, you will also find
    yourself modifying some of the JIRA core files to tweak functionality or to work
    around a problem. We will see more of that in the chapters to come but the best
    entry point to JIRA customizations are plugins. And that is where we start our
    cookbook, before we move on to the in-depth details.
  prefs: []
  type: TYPE_NORMAL
- en: What is a JIRA plugin?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, what is a JIRA plugin? JIRA itself is a web application written in Java.
    But that doesn't mean you need to know JAVA to write a plugin, though in most
    cases you will need to. You might end up writing a simple descriptor file to add
    few links here and there. If that makes the non-Java developer in you happy, watch
    out for the different plugin modules JIRA supports.
  prefs: []
  type: TYPE_NORMAL
- en: A JIRA plugin is a JAR file that has a mandatory plugin **descriptor** and some
    optional Java classes and velocity templates. The velocity templates are used
    to render the HTML pages associated with your plugin, but in some cases, you might
    also want to introduce JSPs to make use of some pre-existing templates in JIRA.
    JSPs, as opposed to velocity templates, cannot be embedded in the plugin, but
    instead they should be dropped into the appropriate folders in the JIRA web application.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin descriptor, the only mandatory part of a plugin, is an XML file which
    must be named `atlassian-plugin.xml`. This file is located at the root of the
    plugin. The `atlassian-plugin.xml` file defines the various modules in a plugin.
    The different types of available plugin modules include reports, custom field
    types, and so on, and these are discussed in detail in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin development process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process of developing a JIRA plugin can be of varying complexity depending
    on the functionality we are trying to achieve. The plugin development process
    essentially is a four step process:'
  prefs: []
  type: TYPE_NORMAL
- en: Develop the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy it into our local JIRA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the plugin functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make changes and re-deploy the plugin, if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each of these is explained in detail through the various recipes in this book!
  prefs: []
  type: TYPE_NORMAL
- en: JIRA, on start-up, identifies all the plugins that are deployed in the current
    installation. You can deploy multiple plugins, but there are some things you need
    to keep an eye on!
  prefs: []
  type: TYPE_NORMAL
- en: The `atlassian-plugin.xml` file has a plugin **key** which should be unique
    across all the plugins. It is much similar to a Java package. Each module in the
    plugin also has a key that is unique within the plugin. The plugin key combined
    with the module key, separated by a colon, forms the complete key of a plugin
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is a sample `atlassian-plugin.xml` file without any plugin modules
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The plugin, as you can see, has details such as description, version, vendor-details,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: When a plugin is loaded, all the unique modules in it are also loaded. The plugin
    classes override the system classes and so if there is an action that has the
    same **alias** name as that of a JIRA action, it is the plugin action class that
    will be loaded. We will see more about extending actions in the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you have a report module in your plugin, it will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The plugin key, in this case, will be `com.jtricks.demo` and the module key
    will be `com.jtricks.demo:demo-report`.
  prefs: []
  type: TYPE_NORMAL
- en: Hang on, before you start writing your little plugin for a much wanted feature,
    have a look at the Atlassian plugin exchange to see if someone else has already
    done the dirty work for you!
  prefs: []
  type: TYPE_NORMAL
- en: Atlassian plugin exchange
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Atlassian plugin exchange is a one stop shop where you can find the entire list
    of commercial and open source plugins people around the world have written. See
    [https://plugins.atlassian.com/search/by/jira](https://plugins.atlassian.com/search/by/jira)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A common scenario that people encounter while deploying their plugin is when
    the plugin fails to load even though everything looks fine. Make sure your plugin's
    key is unique and is not duplicated in one of yours or another third-party's plugin!
  prefs: []
  type: TYPE_NORMAL
- en: The same applies to individual plugin modules.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know what a plugin is, let 's aim at writing one! The first step
    in writing a JIRA plugin is to set up your environment, if you haven't done that
    already. In this recipe, we will see how to set up a local environment.
  prefs: []
  type: TYPE_NORMAL
- en: To make plugin development easier, Atlassian provides the **Atlassian Plugin
    Software Development Kit** (**SDK**). It comes along with Maven and a pre-configured
    `settings.xml` to make things easier.
  prefs: []
  type: TYPE_NORMAL
- en: Atlassian Plugin SDK can be used to develop plugins for other Atlassian products,
    including Confluence, Crowd, and so on, but we are concentrating only on JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the pre-requisites for running the Atlassian plugin SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default port for the SDK: 2990 should be available. This is important because
    different ports are reserved for different Atlassian products.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK Java version 1.5 - 6 must be installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure `JAVA_HOME` is set properly and the command `java –version` outputs
    the correct Java version details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And of course, JIRA 4.x+ should be installed in your development environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you use a context path for your JIRA because there are known issues
    with the SDK not working when the context path is empty. See [https://studio.atlassian.com/browse/AMPS-122](https://studio.atlassian.com/browse/AMPS-122)
    for more details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have Java installed and the port ready, we can download the latest version
    of Atlassian Plugin SDK from [https://maven.atlassian.com/content/repositories/atlassian-public/com/atlassian/amps/atlassian-plugin-sdk/](https://maven.atlassian.com/content/repositories/atlassian-public/com/atlassian/amps/atlassian-plugin-sdk/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the version into a directory of your choice. Let's call this directory
    `SDK_HOME` going forward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the SDK's bin directory into the environment `PATH` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new environment variable `M2_HOME` pointing to the Apache-Maven directory
    in your SDK Home.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A lot of commonly used dependencies are already available in the repository
    folder embedded in the SDK. To use this, edit the `settings.xml` under `M2_HOME/conf/`
    and modify the `localRepository` attribute to point to the embedded repository
    folder. By default, it will use the `USER_HOME/.m2/repository`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the IDE of your choice. Atlassian recommends Eclipse, IntelliJ IDEA,
    or NetBeans, as they all support Maven.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ready, Set, Go…
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With these steps executed properly, we have a development environment for JIRA
    plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to create a Skeleton plugin, import it into your IDE, and start
    writing some code! Creating the Skeleton plugin, deploying it, and so on, is explained
    in detail in the following recipes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though the aforementioned steps will work in most cases, we will come across
    scenarios where the setting up of the development environment is not that straightforward.
    For example, there are extra settings needed for Maven if the machine is behind
    a firewall. You might even have a local Maven version already installed. In this
    section, we will see some useful tips on similar cases.
  prefs: []
  type: TYPE_NORMAL
- en: Proxy settings for Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are behind a firewall, make sure you configure the proxy in the Maven
    `settings.xml` file. The proxy can be configured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Find out more about that and other aspects of Maven at [http://maven.apache.org/index.html](http://maven.apache.org/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using local Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are a developer, in many cases you will have Maven already installed
    in your local machine. In that case, point `M2_HOME` to your local Maven and update
    the respective `settings.xml` with the repository details in the default `settings.xml`
    that ships with Atlassian plugin SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring IDEs to use SDK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using IntelliJ IDEA, it is an easy job because IDEA integrated Maven
    out-of-the-box. Just load the project by selecting the `pom.xml`!
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Eclipse, make sure you have M2Eclipse installed. This is because
    Eclipse integrates Maven through the Sonatype M2Eclipse plugin. You can find more
    details on configuring this at [http://confluence.atlassian.com/display/DEVNET/Configuring+Eclipse+to+use+the+SDK](http://confluence.atlassian.com/display/DEVNET/Configuring+Eclipse+to+use+the+SDK).
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you see Maven download errors like *Could not resolve artifact*, make sure
    you verify the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Entry in Maven `settings.xml` is correct. That is, it points to the correct
    repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxy configuration is done if required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Antivirus in the local machine is disabled if none of the above works! Seriously,
    it makes a difference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a skeleton plugin*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a skeleton plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at creating a skeleton plugin. We will use the
    Atlassian Plugin SDK to create the skeleton!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have the Atlassian Plugin SDK installed and a version of JIRA
    4.x running on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a command window and go to the folder where you want to create the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you use a directory without any spaces because there are known issues
    with the SDK not working in directories with spaces in it. See [https://studio.atlassian.com/browse/AMPS-126](https://studio.atlassian.com/browse/AMPS-126)
    for details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type `atlas-create-jira-plugin` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the `groupID` when prompted. GroupID would normally be coming from your
    organization name and mostly resembles the Java package. Of course, you can enter
    a different package name as we move forward if you want to keep it separate. GroupID
    will be used to identify your plugin along with `artifactId`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example: `com.jtricks.demo`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the `artifactId`—the identifier for this artifact. Do not use spaces here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example: `demoplugin`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Version`—the default version is `1.0-SNAPSHOT`. Enter a new version if you
    want to change it or press *Enter* to keep the default.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example: `1.0`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Package`—press *Enter* if the package value is same as the `groupID`. If not,
    enter the new value here and press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, `com.jtricks.mypackage`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Confirm the selection when prompted. If you want to change any of the entered
    values, type `N` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the `BUILD SUCCESSFUL` message. You might see a few warnings which
    can be ignored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A skeleton plugin is nothing but a set of directories and sub directories along
    with a `pom.xml` (Maven Project Object Model) file and some sample Java and XML
    files in the appropriate folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a snapshot of how the project will look like in Eclipse. It also shows
    the design view of the default `atlassian-plugin.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-01-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there is a `pom.xml` at the root level and a `src` folder. A
    sample `LICENSE` file and a `README` file are also created for you at the root
    level.
  prefs: []
  type: TYPE_NORMAL
- en: Under the `src` folder, you will find out two folders, `main` and `test`, with
    identical folder structure. All your main Java code goes under the `main` folder.
    Any JUnit tests you write will go into the same location under the `test` folder.
    There is an additional folder, `it`, under the test folder where all the integration
    tests will go!
  prefs: []
  type: TYPE_NORMAL
- en: You will find the plugin descriptor under `src/main/resources` with sample values
    already populated in it. The values in the preceding screenshot are populated
    from the `pom.xml`. In our case, the plugin key will be populated as `com.jtricks.demo:demoplugin`
    when the plugin is built.
  prefs: []
  type: TYPE_NORMAL
- en: There are two more folders under the `src/test. src/test/resources`, which will
    hold any resources required for unit tests or integration tests, and the `src/test/xml`
    folder can hold the XML data from any other JIRA instance. If the XML is supplied,
    the SDK will use it to configure the JIRA instance before running the integration
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: So, that is our plugin Skeleton. All that is pending is some useful Java code
    and proper module types in the `atlassian-plugin.xml` file!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, the first Maven run is going to take some time as it downloads all
    the dependencies into your local repository. A coffee break might not be enough!!
    If you have a choice, plan your meals. ;)
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, for the geeks, it is much easier to run a single command to create
    a project without bothering about the step-by-step creation. In this section,
    we will quickly see how to do it. We will also have a look at how to create an
    Eclipse project if you opt out of installing m2eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: One step to your skeleton plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can ignore the interactive mode by passing the parameters like `groupID`,
    `artifactId`, and so on, as arguments to the `atlas-create-jira-plugin` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, for the values we saw previously, the single line command
    will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can pick and choose the parameters and provide the rest in an interactive
    mode as well!
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Eclipse project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are not using m2eclipse, just run the following command from the folder
    where you have the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will generate the plugin project for Eclipse and you can then import this
    project into the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Type `atlas-mvn eclipse:clean eclipse:eclipse` if you want to clean the old
    project and create again!
  prefs: []
  type: TYPE_NORMAL
- en: With IDEA or m2eclipse, just opening a file will do. That is, you can just import
    the project using the option **File** | **Import** | **Existing** **Maven** **Projects**,
    and select the relevant project.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Deploying a plugin*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Making changes and re-deploying a plugin*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to deploy a plugin into JIRA. We will see both
    the automated deployment using Atlassian Plugin SDK and the manual deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have the development environment set up, as we discussed earlier.
    Also the skeleton plugin should now have the plugin logic implemented in it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing a JIRA plugin using Atlassian Plugin SDK is a cake walk. Here is
    how it is done:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a command window and go to your plugin's root folder, that is, the folder
    where your `pom.xml` resides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `atlas-run` and press *Enter*. It is possible to pass more options as
    argument to this command for which the details can be found at: [http://confluence.atlassian.com/display/DEVNET/atlas-run](http://confluence.atlassian.com/display/DEVNET/atlas-run).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a lot of things happening as Maven downloads all the dependent
    libraries into your local repository. As usual, it is going to take lot of time
    when you run it for the first time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are on Windows, and if you see a security alert popping up, click on
    **Unblock** to allow incoming network connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the installation is completed, you will see the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `http://localhost:2990/jira` in your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Login using the username as **admin** and password as **admin**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test your plugin! You can always go to the **Administration** | **Plugin** menu
    to confirm that the plugin is deployed properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you already have a local JIRA installed or if you want to manually install
    your plugin for some reason, all you need to do is to package the plugin JAR and
    copy it across to the `JIRA_Home/plugins/installed-plugins` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can package the plugin using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Use `atlas-mvn clean install` if you also want to install the package plugin
    into your local repository.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is only one single command that does the whole thing: `atlas-run`. When
    you execute this command, it does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Builds your plugin JAR file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Downloads the latest/specified version of JIRA to your local machine if it is
    the first time you're running the command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creates a virtual JIRA installation under your plugin/target folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copies the JAR file into the /`target/jira/home/plugins/installed-plugins` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starts JIRA in the Tomcat container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you look at your target folder, you will see a lot of new folders which
    were created for the virtual JIRA installation! The two main folders are the `container`
    folder, which has the Tomcat container setup, and the `jira` folder, which has
    the JIRA WAR along with the JIRA home setup!
  prefs: []
  type: TYPE_NORMAL
- en: You will find the database (`HSQLDB`), indexes, backups, and attachments under
    /`target/jira/home`. And you will see your `jira-webapp` at `/target/container/tomcat6x/cargo-jira-home/webapps/jira`.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any JSPs that need to be put under the webapp, you will have to
    copy it to the appropriate folder under the aforementioned path!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's more to this.
  prefs: []
  type: TYPE_NORMAL
- en: Using a specific version of JIRA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned earlier, `atlas-run` deploys the latest version of JIRA. But what
    if you want to deploy the plugin into an earlier version of JIRA and test it?
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mention the JIRA version as an argument to `atlas-run`; make sure you run `atlas-clean`,
    if you already have the latest version deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `atlas-clean` (if required).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run `atlas-run –v 4.1.2` or `atlas-run –version 4.1.2` if you are developing
    for JIRA version 4.1.2\. Replace the version number with a version of your choice.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Permanently change the JIRA version in your plugin `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to your `pom.xml`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the `jira.version` property value to the desired version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the `jira.data.version` to a matching version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how it will look for JIRA 4.1.2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Reusing the configurations in each run
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose you added some data on to virtual JIRA, how do you retain it when you
    clean start-up JIRA next time?
  prefs: []
  type: TYPE_NORMAL
- en: This is where a new SDK command comes to our rescue.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `atlas-run` is finished, that is, after you pressed *Ctrl* + *C*,
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate a file named `generated-test-resources.zip` under the target
    folder. Copy this file to the `/src/test/resources` folder or any other known
    locations. Now modify the `pom.xml` to add the following entry under configurations
    in the `maven-jira-plugin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Modify the path accordingly. This will reuse the configurations the next time
    you run `atlas-run`.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Missing JAR file exception? Make sure the local-repository attribute in the
    `settings.xml` file points to the embedded Maven repository that comes with the
    SDK. If the problem still persists, manually download the missing JAR files and
    `use atlas-mvn install` to install them in to the local repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch out for the proxy settings or antivirus settings that can potentially
    block the download in some cases!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'BeanCreationException? Make sure your plugin is of version 2\. Check your `atlassian-plugin.xml`
    to see if the following entry is there or not. If not, add the entry:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `atlas-clean` followed by `atlas-run` after you do that.
  prefs: []
  type: TYPE_NORMAL
- en: Making changes and re-deploying a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have deployed the test plugin, it is time to add some proper logic,
    re-deploy the plugin, and test it. Making the changes and re-deploying a plugin
    is pretty easy. In this recipe, we will quickly look at how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can make changes to the plugin and re-deploy it while the JIRA application
    is still running. Here is how we do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep the JIRA application running in the window where we ran `atlas-run`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new command window and go to the root plugin folder where your `pom.xml`
    resides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `atlas-cli`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the command—`Waiting for messages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `pi`. Pi stands for "plugin install" and this will compile your changes,
    package the plugin JAR, and install it into the `installed-plugins` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, there is one thing you need to keep an eye on! Not all the plugin modules
    can be redeployed like this prior to JIRA 4.4\. The following is a list of the
    plugin modules that can be reloaded with `pi` in JIRA 4.0.x:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ComponentImport`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Gadget`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ModuleType`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resource`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`REST`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServletContextListener`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServletContextParameter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServletFilter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Servlet`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WebItem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WebResource`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WebSection`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your plugin module is not there in the preceding list or if the changes doesn't
    seem to be reflected, press *Ctrl* + *C* in the command window running `atlas-run`
    and re-run the `atlas-run` command. That will re-deploy the plugin and restart
    JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: Post JIRA 4.1, SDK supports reloading of more modules, but whether it works
    or not depends on what the module does internally.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA 4.4+ supports reloading of all the plugin modules.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging in Eclipse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is also possible to run the plugin in debug mode and point your IDE's remote
    debugger to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the steps to do this in Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `atlas-debug` instead of `atlas-run`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the virtual JIRA is up and running with tour plugin deployed in it, go
    to **Run** | **Debug Configurations** in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `Remote Java Application`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give a name, keep the defaults, and give the port number as `5005`. This is
    the default debug port on which the virtual JIRA runs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Happy Debugging!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Setting up the development environment*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a skeleton plugin*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing and debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of **Test Driven Development** (**TDD**), writing tests is a part
    and parcel of the development process. I don't want to bore you with why testing
    is important! Let us just say, all these holds true for JIRA plugin development
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see the various commands for running unit tests and
    integration tests in JIRA plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have the plugin development environment set up and the skeleton
    plugin created!
  prefs: []
  type: TYPE_NORMAL
- en: You might have noticed that there are two sample test files, one each for unit
    tests and integration tests, created under the `src/test/java/your_package/` and
    `src/test/java/it` folders.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have it ready, it is time to write some tests and run those tests to
    make sure things work as expected!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is to write some tests! We recommend you to use some powerful
    testing frameworks like JUnit in collaboration with mocking frameworks like **PowerMock**
    or **Mockito**. Make sure you have the valid dependencies added on to your `pom.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now make a huge assumption that you have written a few tests!
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is the command to run your unit tests from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The normal Maven command `atlas-mvn clean test` also does the same thing. If
    you are running the integration tests, the command to use is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or the Maven command: `atlas-mvn clean integration-test`.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we are on to the stage of running tests, we will see it failing at times.
    There comes the need for debugging. Checkout the `*.txt` and `*.xml` files created
    under `target/ surefire-reports/` which has all the required information on the
    various tests that are executed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you want to skip the tests at the various stages, use `–skip-tests`.
    For example, `atlas-unit-test --skip-tests` will skip the unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the Maven options directly to skip the unit/integrations tests
    or both together.
  prefs: []
  type: TYPE_NORMAL
- en: '`-Dmaven.test.skip=true`: skips both unit and integration tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Dmaven.test.unit.skip=true`: skips unit tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Dmaven.test.it.skip=true`: skips integration tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `atlas-unit-test` command merely runs the related Maven command: `atlas-mvn
    clean test` in the backend to execute the various unit tests. It also generates
    the outputs into the `surefire-reports` directory for reference or debugging.'
  prefs: []
  type: TYPE_NORMAL
- en: The `atlas-integration-test` does a bit more. It runs the integration tests
    in a virtual JIRA environment. It will start up a new JIRA instance running inside
    a Tomcat container, set up the instance with some default data including a temporary
    license that lasts for three hours, and execute your tests!
  prefs: []
  type: TYPE_NORMAL
- en: How does JIRA differentiate between the unit tests and integration tests? This
    is where the folder structure plays an important role. Anything under the `src/test/java/it/`
    folder will be treated as integration tests and everything else will be treated
    as unit tests!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is more to it.
  prefs: []
  type: TYPE_NORMAL
- en: Using custom data for Integration/Functional Tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While `atlas-integration-test` makes our life easier by setting up a JIRA instance
    with some default data in it, we might need some custom data as well to successfully
    run a few functional tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do this in a couple of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Export the data from a pre-configured JIRA instance into XML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put it under the `src/test/xml/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide this path as the value for the `jira.xml.data.location` property in
    the `localtest.properties` under `src/main/resources`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The XML resource will then be imported to JIRA before the tests are executed.
  prefs: []
  type: TYPE_NORMAL
- en: Testing against different version of JIRA/Tomcat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like the `atlas-run` command, you can use the `-v` option to test your
    plugin against a different version of JIRA. As before, make sure you do an `atlas-clean`
    before running the tests if you had tested it against another version before.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `-c` option to test it against a different version of the
    Tomcat container.
  prefs: []
  type: TYPE_NORMAL
- en: For example, `atlas-clean && atlas-integration-test -v 3.0.1 -c tomcat5x` will
    test your plugin against JIRA version 3.0.1 using Tomcat container 5.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Setting up the development environment*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Deploying a plugin*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
