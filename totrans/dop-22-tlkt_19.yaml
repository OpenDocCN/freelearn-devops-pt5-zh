- en: Self-Adaptation Applied To Infrastructure
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用到基础设施的自适应
- en: Our goal is within reach. We adopted schedulers (Docker Swarm in this case)
    that provide self-healing applied to services. We saw how *Docker For AWS* accomplishes
    a similar goal but on the infrastructure level. We used Prometheus, Alertmanager,
    and Jenkins to build a system that automatically adapts services to ever-changing
    conditions. The metrics we’re storing in Prometheus are a combination of those
    gathered through exporters and those we added to our services through instrumentation.
    The only thing we’re missing is self-adaptation applied to infrastructure. If
    we manage to build it, we’ll close the circle and witness a self-sufficient system
    capable of running without (almost) any human intervention.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标触手可及。我们采用了调度器（在此案例中为 Docker Swarm），它为服务提供自我修复功能。我们观察到*Docker For AWS*在基础设施层面实现了类似的目标。我们使用了
    Prometheus、Alertmanager 和 Jenkins 来构建一个能够自动适应不断变化条件的系统。我们存储在 Prometheus 中的指标，既有通过
    exporters 收集的，也有通过仪表化（instrumentation）添加到我们服务中的。唯一缺少的就是应用于基础设施的自适应能力。如果我们能够实现这一点，我们将闭合这个循环，见证一个几乎无需人工干预即可自给自足的系统。
- en: The logic behind self-adaptation applied to infrastructure is not much different
    from the one we used with services. We need metrics, alerts, and scripts that
    will adapt cluster capacity whenever conditions change.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用到基础设施的自适应逻辑与我们在服务中使用的逻辑大致相同。我们需要指标、警报和脚本，这些脚本会在条件变化时自动调整集群的容量。
- en: We already have all the tools we need. Prometheus will continue gathering metrics
    and firing alerts. Alertmanager is still an excellent choice to receive those
    alerts and resend them to different system components. We’ll keep using Jenkins
    as a tool that allows us to quickly write scripts that can interact with the system.
    Since we’re using AWS to host our cluster, Jenkins will have to interact with
    its API.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经拥有所有必需的工具。Prometheus 将继续收集指标并触发警报。Alertmanager 仍然是一个出色的选择，用来接收这些警报并将它们转发到不同的系统组件。我们将继续使用
    Jenkins 作为一个工具，使我们能够快速编写与系统交互的脚本。由于我们使用 AWS 来托管集群，Jenkins 需要与 AWS 的 API 进行交互。
- en: We are so close to the final objective that I feel we should skip the theory
    and jump straight into practical hands-on parts of the chapter. So, without further
    ado, we’ll create our cluster one more time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们距离最终目标非常接近，我觉得我们应该跳过理论部分，直接进入本章的实际操作。因此，不再赘述，我们将再次创建我们的集群。
- en: Creating A Cluster
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建集群
- en: In the previous chapter, we already explored how to create a cluster without
    UI. The commands that follow should be familiar and, hopefully, should not require
    much explanation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们已经探索了如何在没有 UI 的情况下创建集群。接下来的命令应该很熟悉，希望不需要太多解释。
- en: Please replace `[...]` with your keys before executing the commands that follow.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请在执行后续命令之前，将`[...]`替换为你的密钥。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
