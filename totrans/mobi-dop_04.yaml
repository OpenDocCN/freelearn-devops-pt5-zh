- en: Writing Your First Android Application with Xamarin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that Visual Studio is installed on your Windows machine to start development,
    and the **Android Virtual Device** (**AVD**) is ready, we can get started with
    our first Android application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to build our first Android application using Xamarin
    in Visual Studio, while learning some fundamentals of Android application development.
  prefs: []
  type: TYPE_NORMAL
- en: Create your first Android project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new Android project in Visual Studio, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on File | New | Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3540c2c-8a09-4416-a758-4e13256dfd54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the left pane, click on Android and then select Blank App (Android):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa3f306f-bacf-4960-9230-53d1ee62706b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Name section, give a name to the project, select a preferred location
    for your project, and click on the OK button. You''ll get the screen shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22796db1-aabe-46ca-87d3-8443eb399fef.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you've created your first Android project in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin solution structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the project is created, you''ll see the solution structure shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90bb4fbe-52fe-47ae-8f68-32437fd509b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The main parts of the solution that we need to understand for now are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**References**: This section lists all the required libraries for the project.
    As we can see in the preceding screenshot, it references `Mono.Android`, which
    is the library for `Xamarin.Android`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resources**: It contains all the resources, for example, images, layouts,
    and much more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `MainActivity.cs` file has our C# code for handling events and other things
    in our main screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the UI for the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s expand the `Resources` folder we saw in the previous screenshot, and
    then the `layout` folder in Solution Explorer. Double-click on `Main.axml` to
    open it. This is the layout file for the app''s screen. By default, it gets opened
    in Android Designer; you can also click on the Source tab at the bottom to see
    the XML code for it. This layout file is the main UI file that we''ll add our
    UI controls to, and what we''ll see when we run our app once it is finished:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5211f296-5d3d-4f29-8993-819ca85cea24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add an input field to enter a phone number. Drag the Phone field from
    the Toolbox (left pane) into the Designer view of the `Main.axml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/396daaba-43c0-49b8-9b2a-aacc9621437b.png)'
  prefs: []
  type: TYPE_IMG
- en: Having the phone text field gives us the advantage of restricting the user to
    entering a phone number. Also, when the user taps on the input box, they'll only
    get a number pad instead of a full text keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have added an input for the user to add a phone number in order to make
    a call.
  prefs: []
  type: TYPE_NORMAL
- en: In order to recognize this field from the C# code and get a value inserted,
    we need to give it a unique ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the phone text field selected on the design surface, use the Properties
    pane on the right side to change the id property of the Phone input field to @+id/PhoneNumber,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ce4d81c-d39d-41ca-b55a-09f3b5084af9.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have added the input field so the user can enter their phone number,
    we need a button to take the action to make a call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag a Button from Form Widgets in the left pane of the Toolbox to the Designer
    view of `Main.axml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/636422bb-e839-4703-a813-c61972e670d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Similar to the input field, we need to give a unique ID to the button so that
    our C# code can recognize when the button is clicked and we can take the appropriate
    action; that is, make a call to the number inserted by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the text on the button should say `Do you want to call`, right? So, let's
    make that change as well in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Button in the Designer, go to the Properties window on the right, scroll
    down, and change the ID to @+id/CallButton and the text to CALL, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/230814f4-911a-44c3-936b-2672d8973b46.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, a basic UI is ready for our app with a proper ID assigned to the respective
    fields and button.
  prefs: []
  type: TYPE_NORMAL
- en: It is now time to move to our C# code and connect our UI with some backend code
    to perform some actions.
  prefs: []
  type: TYPE_NORMAL
- en: When a user opens the application, `MainActivity` is opened and the `Main.axml`
    file is associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn more about Activities later; for now, let's write code to handle
    interactions in `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: Handling user interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: User interaction is the most important aspect of developing a mobile application.
    A mobile app should be interactive and easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this basic application, we will be writing our user interaction code in
    C# and it will be part of the `MainActivity.cs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s click on the `MainActivity.cs` file from the Solution Explorer on the
    left and open it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8257be22-e764-4664-8408-13eead70d835.png)'
  prefs: []
  type: TYPE_IMG
- en: It has some autogenerated code that we are going to modify in order to make
    our application work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to write our code inside the `OnCreate()` method of the `MainActivity.cs`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e972491-63ba-4274-a873-d5bc82e2f989.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we start writing user interaction code, let''s understand the autogenerated
    code first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This piece of code calls the `OnCreate()` method of the parent/base class of
    `MainActivity.cs`, which is `Activity.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As the comments already say, it sets the view from our layout resource file,
    `Main.axml`.
  prefs: []
  type: TYPE_NORMAL
- en: We need to write our `SetContentView(Resource.Layout.Mai)` code.
  prefs: []
  type: TYPE_NORMAL
- en: First, get a reference to the controls that were created in the `layout` file
    via Android Designer, that is, the input box for the phone number and the button
    to make a call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `OnCreate()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a reference to the controls, we can write events to perform
    an action on the CALL button click. Let''s write an event for the CALL button
    click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `callButton.Click +=` (IntelliSense will give you a suggestion to hit *Tab*).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hit the *Tab* key to autocomplete.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This will create a method named `CallButton_Click`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll be using this newly created method to write our code for the button
    click as follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45df2f40-2c27-46d7-a5fd-0f5cbd86c921.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Because we are writing our `Click` event in a separate method, let''s declare
    the button and input the field variables that we used earlier in a global scope,
    where all the methods of the class can have access to their reference. Declare
    the following variables on the class level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`EditText phoneNumberInput;`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Button callButton;`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `OnCreate()` method should now look as shown in following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/155645d4-85f3-4ef3-955d-d08704f69f9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `CallButton_Click`, we get the value inserted in the input field by
    the user:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we create an alert dialog box to ask for the user''s confirmation before
    making the actual call. To make that dialog box, write the following code:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to set two things in this dialog box:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Message to show the user:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Events for the OK and Cancel buttons of the dialog box:'
  prefs:
  - PREF_OL
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Make some more changes to make the code look like the following screenshot:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1edddd6f-4bc7-449d-9a3f-0362c7c7a605.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code to handle user interaction is now complete; let''s select the emulator
    from the top and run the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7df4aa5a-98ce-4d2a-a4f5-5a70dc3b6d88.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the project and deploying it on the emulator for the first time might
    take some time; be patient and let it complete the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the application is deployed, you should be able to see the application
    running on the emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/49c7989b-2e32-4fed-99a8-dc28f069e367.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, the UI is what we created in the
    `Main.axml` layout file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's test the code we wrote to handle user interactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the CALL button without giving any number as input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac0c0da2-f3f9-4127-8185-4eeb692152f9.png)'
  prefs: []
  type: TYPE_IMG
- en: We'll get a `toast`, as shown in the preceding screenshot, because we wrote
    a condition to check for empty or whitespace input in the input number field.
  prefs: []
  type: TYPE_NORMAL
- en: 'And for no input is provided, we wrote the following code to show a `toast`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s enter a phone number in the text input field and then press CALL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07f316b9-fa09-43b8-b277-0bc11f8c64a0.png)'
  prefs: []
  type: TYPE_IMG
- en: As per our code, we should get a dialog box with a message saying Do you want
    to call 9980020860?.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on Cancel should just close the dialog box. Let''s click on CALL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/977ed25d-1343-4ebb-a2f7-7d59ee282689.png)'
  prefs: []
  type: TYPE_IMG
- en: If everything goes fine, a call should be made to the preceding number. But
    that's not what'll happen once we click on the CALL button.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `java.Lang.SecurityException` will be thrown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/09e08dba-01bf-4d17-b51d-85a7a2ce125b.png)'
  prefs: []
  type: TYPE_IMG
- en: The reason why we got this exception is that the Android application requires
    permissions to do certain operations and tasks.
  prefs: []
  type: TYPE_NORMAL
- en: These permissions should be listed in the Android application code so that the
    system knows all the permissions the application requires before installing it.
  prefs: []
  type: TYPE_NORMAL
- en: These permissions are listed for the user while installing; if the user allows
    such permissions for the application, then only the app can perform these operations.
    So, the next thing we need to do is add permissions to our Android application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding permissions to Android Manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application needs only one permission as of now, and that is to place a
    call. To modify or add permissions for the application, we need to edit Android
    Manifest.
  prefs: []
  type: TYPE_NORMAL
- en: 'To edit Android Manifest and give the permission, follow these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Solution Explorer.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on Properties under the project.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This should open a UI to edit project properties.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, from the left-hand menu, click on Android Manifest to open it:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f5b6f98-ada8-4e93-bb17-d58760f1ef20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Required permissions section, scroll down, find the CALL_PHONE permissions,
    and select this option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6a9b1f3-4ded-4cdb-9176-b92852e71e4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Press *Ctrl* + *Shift* + *S* to save all the changes to the project.
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the Properties window.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are done adding permissions to the application.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to build the solution now, so the resulting installation file has all
    the changes we made.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rebuild the project; right-click on Solution | Rebuild Solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cdce0481-7150-4e28-aad5-a062ea62d158.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If everything is fine, we should be able to see in the output window that the
    rebuild succeeded; if you get errors, go back to the previous steps, compare the
    code, and rebuild:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12dcf056-ffd6-43ec-a3da-5a298074871b.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding an icon for the Android app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'App permissions are set and it''s ready to run, so let''s add an icon for our
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: Download an icon file that you like and that best suits your phone call app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Solution Explorer and add the downloaded file to the `drawable` folder
    under `Resources`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on `drawable` | Add | Existing Item, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f59dfea4-f3e8-44f4-ad7f-14c1ef34d3ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A File Explorer window will open. Navigate to the icon file location, select
    the icon file, and click Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d4770d0-ed59-4784-a98d-4267ac7b284a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The icon should now be added to the `drawable` folder of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bba4682a-e2d7-4401-bc52-b402ee87921c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Rename the icon file to `icon.png` by right-clicking on the file and then clicking
    Rename:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2bec0c66-ee1d-477c-a10d-3777160bf423.png)![](img/982611e4-4bc7-4c06-82c7-f048e4714a4e.png)'
  prefs: []
  type: TYPE_IMG
- en: After renaming the file, rebuild the project like we did in the previous steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the rebuild is done successfully, let's add the icon to the application's
    Manifest file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on Properties from Solution Explorer and open Android Manifest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose @drawable/icon from the Application Icon drop-down menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0030ef87-6499-4756-8fda-e0aaf065f6ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Do *Ctrl* + *Shift* + *S* to save all and rebuild the solution to make sure
    everything works fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's run the application in the emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we go to the app drawer and scroll down to the app name, we can see the
    app icon we just added now showing there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac4ddc9f-e22a-449c-8025-07d3ea0450eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you've successfully added an icon for the new Android application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have added the permissions and icon to the Manifest, it is time
    to test the main functionality of our app, *making a call*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing user interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Click on the app on Android Emulator and run it. Repeat the previous steps
    of testing the application and at the end press the CALL button to make a call:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ceb7dd82-575a-48af-9a0f-c06073eb7b20.png)'
  prefs: []
  type: TYPE_IMG
- en: This time, the application has the required permission, we have written the
    code to handle CALL button interaction, and we are creating a `callIntent` in
    `MainActivity.cs` to make a call.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the call should be placed by clicking the CALL button, and we should get
    a screen as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db810003-faa4-4bbe-bb43-b0e84a9c6ba5.png)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! You just created your first working Android application using Xamarin
    and C# in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have done the difficult part, let's understand some fundamentals
    of the Android application we just developed and see how it all comes together.
  prefs: []
  type: TYPE_NORMAL
- en: Application fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many topics that can be covered while explaining Android application
    fundamentals. But for the scope of this book we''ll try to understand the most
    important ones that we used in the development of our **PhoneCallApp**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android APIs**: Android has different API levels for different versions of
    Android. These API levels basically state which version of Android libraries our
    code uses and which versions of the Android OS our app is compatible with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are different configurations to be specified while developing an Android
    application. These configurations include:'
  prefs: []
  type: TYPE_NORMAL
- en: Target framework
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimum Android version
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Target Android version
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll read about these configurations in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: '**Resources**: Resources encapsulate many features used in Android to make
    a better Android application. An Android application uses many resources, such
    as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The icon we used
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The layout file that makes the UI for the user
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: String files to store strings for application localization/internationalization,
    and much more
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activities**: Activities are the main building block of applications in Android.
    Every UI element and its interactions are connected to an activity. Whenever we
    click on a button and open a new page, a new activity is called and control gets
    transferred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An activity in Android can have different states, based on the current operation
    being performed. We'll learn more about Activities in detail in future topics.
  prefs: []
  type: TYPE_NORMAL
- en: Android APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android APIs are known by an API level, for example, API level 23.
  prefs: []
  type: TYPE_NORMAL
- en: 'An API level represents a specific Android release. If you open Android SDK
    Manager in Visual Studio, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b0bf0bb-4b86-4ebc-a2d9-db10694acd52.png)![](img/07517709-8871-44ef-b86c-83959cf6a136.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each API level is specific to an Android release. An Android release is known
    by multiple names:'
  prefs: []
  type: TYPE_NORMAL
- en: The API level, such as API level 23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Android version, such as Android 6.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A code name, such as Marshmallow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, we can say that APIs have an integer value, a number to identify the release,
    because with each release this API level changes, and users upgrade their Android
    versions as they get released.
  prefs: []
  type: TYPE_NORMAL
- en: An Android app should be able to run on different APIs and should be compatible
    with previous versions of releases, so that old devices can run applications as
    well, and when a user updates their OS version to a new one, existing apps don't
    break on their phones.
  prefs: []
  type: TYPE_NORMAL
- en: 'To support multiple API levels, the Android project property has configurations
    to define:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Target Framework**: This setting can be found in the Application menu inside
    Properties. This tells `Xamarin.Android` to compile the project using specific
    API-level libraries. While compiling/building the application, `Xamarin.Android`
    uses the API level specified in this setting to load the libraries and build the
    application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/64ff8484-d613-488a-9400-4dbc0b47d409.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Minimum Android version/API level**: This is the minimum Android version
    that the application can run on; this tells the Android system if the app is supported
    on the specific OS version. Specifying a lower minimum version means your application
    can be installed on all the versions between the minimum and target specified.
    But be careful, because even if the application compiles and gets installed on
    a lower version of Android, it does not necessarily mean it will run successfully
    as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There might be some higher-level APIs that your application is using which
    cannot be run on an older version. This setting can be found under Android Manifest
    inside Properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da5187c8-d4ba-4758-a87c-56b506e887b4.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Target Android version/API level**: This is the OS version the app is developed
    to run on. Android uses this configuration to check whether it needs to enable
    any compatibility behaviors while running the application. This configuration
    can also be found in Android Manifest inside the project''s properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b091e4fe-dbcc-4d86-8fe6-4d56d87fba78.png)'
  prefs: []
  type: TYPE_IMG
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we created a new `Xamarin.Android` application project, a folder named
    `Resources` was created in Solution Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d97039f9-371a-453a-8357-75ee70f21314.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's analyze the structure of our `Resources` folder in detail.
  prefs: []
  type: TYPE_NORMAL
- en: For an Android application structure, almost everything other than the actual
    code is a resource.
  prefs: []
  type: TYPE_NORMAL
- en: '**A resource can be any of the following, but are not limited to the following:**'
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any image or icon used in the application
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: They go in the `drawable` folder
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Application View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View files for the application, that is, the `Main.axml` file that we created
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Goes in the `layout` folder
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are text strings that are used across the application
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For instance, the CALL text on the text button
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps keep consistency throughout the application
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Goes in the `values` folder
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resources we used in the application**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main files that we used in our application in the `Resources` folder are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Icon.png`: The icon for the application we downloaded and added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Main.axml`: The default user interface layout file for our application. We
    only edited this file in the Designer, but you can also go ahead and open the
    file in XML view and try to understand the XML tags used for UI elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resource.designer.cs`: This file is automatically generated and maintained
    by `Xamarin.Android` and holds the unique IDs assigned to each resource. It is
    automatically created by `Xamarin.Android` tools and will be regenerated from
    time to time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is why, to access certain resources in our C# code, we used the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice `Resource.Id.PhoneNumber`; this information is basically stored in the
    `Resource.designer.cs` file, and all unique IDs assigned to resources are stored
    here.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Activities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Activities are something very specific to Android application development. Usually,
    in other applications, we have an entry point or a main method as an entry point
    to start the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'But in Android, the same purpose is fulfilled by Activities. Android applications
    can be started from any activity that is specified as a starting activity for
    the application using `MainLauncher`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48cf445d-15ac-4cf0-a21d-89de444c476f.png)'
  prefs: []
  type: TYPE_IMG
- en: Activity class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Activity` class contains the code that controls the user interface. The
    `Activity` class is basically responsible for creating the UI and handling user
    interactions such as button clicks or touches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take an example of our **PhoneCallApp** application. We have only
    one `Activity` in our project, and that is the `MainActivity.cs` class. It is
    the main entry point for the OS into this application, since we have set it as
    `MainLauncher`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cfd1fc2-da31-4081-a239-b57ec5975c05.png)'
  prefs: []
  type: TYPE_IMG
- en: If we look closely, the `MainActivity` class inherits the `Activity` class,
    that is, it is a child of the `Activity` class. That means now `MainActivity`
    is also an `Activity`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, it is important to note that we have an `Activity` attribute defined above
    the `MainActivity` class, which specifies the `Label` and the `MainLaucher` property
    as well. This attribute tells Android that the `MainActivity` class is part of
    the application and is managed by its Manifest.
  prefs: []
  type: TYPE_NORMAL
- en: 'By inheriting the `Activity` class, `MainActivity` gets access to the methods
    of the `Activity` class that provide developers with the ability to perform certain
    actions on different states of `MainActivity`, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: When an activity is created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When an activity is paused
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When an activity is resumed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When developing an application and writing code for an `Activity` as discussed
    earlier, some methods are provided by the `Activity` class and we can use these
    to perform operations based on the different states of an `Activity`.
  prefs: []
  type: TYPE_NORMAL
- en: Methods in the Activity class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`OnCreate()`: When a user clicks on the app icon to start the application,
    this method is called. This method is used to perform some initial setup that
    might be required for the activity, for example, creating views, initializing
    variables, and much more:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c4592b03-fd00-48ac-b6f9-e04e31a4583b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look at our application code where we used the `OnCreate()` method
    to do some initialization and setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fce7c919-9156-4483-81f4-c5064f9bdcbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The things we are doing in our `OnCreate()` method are:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a layout for the view
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing variables to get references to `TextInput` and `CallButton`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding the `Click` event to `CallButton`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnStart()`: This method is always called by the system right after the `OnCreate()`
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnResume()`: This method is called by the system when the application is up
    again and ready to interact with the user. `OnResume()` is important because any
    operation that is done in `OnPause()` should be undone in `OnResume()`, since
    it''s the only life cycle method that is guaranteed to execute after `OnPause()`
    when bringing the activity back.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnPause()`: This method is called when the system is about to put the activity
    into the background. It is also an important method, because an activity should
    perform certain tasks, such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving unsaved changes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Freeing up resources, such as the camera or other resources
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a16931fd-9017-4409-b1bf-5fdeb47408dc.png)'
  prefs: []
  type: TYPE_IMG
- en: '`OnStop()`: This method is called when the activity is no longer visible to
    the user. This happens when one of the following happens:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Back button is pressed
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An existing activity is being opened and brought to the foreground
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A new activity is being started and covers up the current activity
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/efc4621a-8092-4b97-bced-3844fa26385d.png)'
  prefs: []
  type: TYPE_IMG
- en: '`OnRestart()`: If an activity was stopped and then it is started again, this
    method gets called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnDestroy()`: This is the final method that is called on an `Activity` before
    it''s destroyed and completely removed from memory. It is used to clean up resources
    that might cause memory misuse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand more about the different Activity states, let's delve into the
    Activity life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Activity life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Activity life cycle is usually defined by a list of methods inside the `Activity`
    class that provide us with ways to control the state of an activity. This allows
    developers to handle activities within an Android application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the different states of an Activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a3be964-31e8-49b6-b9a7-360cd65cd1a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'These states can be broken into four main groups as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Running**: Activities are called active or running if they are in the foreground,
    also known as the top of the activity stack. This is known to be the highest priority
    activity in Android and will only be killed by the OS in extreme situations, such
    as if the activity tries to use more memory than is available on the device, since
    this could cause the application UI to become unresponsive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paused**: When a partial activity is called on top of a currently running
    activity, it is considered paused. Paused activities are still alive, that is,
    they maintain all state and member information, and remain in the activity stack.
    This is considered to be the second highest priority activity in Android and will
    only be killed by the OS if killing this activity will satisfy the resource requirements
    needed to keep the active/running activity stable and responsive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stopped/backgrounded**: If an activity is completely stopped or taken over
    by another activity, then it is considered as stopped or in the background. Stopped
    activities still try to retain their state and member information for as long
    as possible, but stopped activities have the lowest priority of the three states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restarted/Resumed**: If the user navigates back to the activity from another
    activity, or by tapping the App Switcher icon, it must be resumed if paused or
    restarted, or restored to its previously saved state, if stopped, and then displayed
    to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These categories are basic explanations of the different states of an activity
    in the activity life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an application on a mobile device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have tested our application on Android Virtual Device (Android Emulator).
    But it's always a good practice to test the application on a physical device.
    So, let's learn how to set up an actual Android device for testing an application.
  prefs: []
  type: TYPE_NORMAL
- en: Screenshots shown in this topic were taken using an Android device running Lollipop;
    your device settings may differ depending on your device version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to set up a device for debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enable debugging on the device**: We will need to enable debugging on the
    device. By default, it will not be possible to debug applications on an Android
    device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Install USB drivers**: On our Windows computers, we will need to install
    USB drivers for our device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connect the device to the computer**: The final step involves connecting
    the device to the computer with a USB cable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable debugging on the device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To enable debugging on the device, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Settings icon from the notification bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc31ed31-2d9f-4cbe-8f93-e6223639aff8.png)'
  prefs: []
  type: TYPE_IMG
- en: Open Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down to the end and click on About phone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eaa3e3e7-3905-41af-8f23-85b3da3ecf9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Scroll down to Build number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tap on Build number seven times until it says You are now a developer!:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fcc6f6a3-48ed-45c8-9f69-e59950039ef7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back to the Settings menu and scroll down till the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should be able to see a new menu entry now for Developer options just before
    About phone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Developer options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/62abc930-848b-4527-91f5-8b2c35956ed9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Find the option to enable USB debugging and enable it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a75f8b3e-6e09-4ce3-89aa-8a0910a413b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Install USB drivers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For different devices, different drivers might need to be installed for the
    computer to recognize the device. Please make sure all the device drivers are
    properly installed and the computer can recognize your device properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are downloading the device driver and want to install it manually on
    the computer, perform the following steps for Windows 7:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect your device to the computer with a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the Computer from your desktop or Windows Explorer and select
    Manage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Devices in the left pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate and expand other devices in the right pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the device name and select Update Driver Software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will launch the Hardware Update Wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Browse my computer for driver software and click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Browse and locate the USB driver folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Next to install the driver.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the device to a computer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you connect the device with a USB cable to a computer, **android debug bridge**
    (**adb**) should be able to communicate with the device and you should see a notification
    on the device saying USB debugging connected, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56a202ab-6444-4141-a073-a0caf71d36a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you can go to Visual Studio, select your device listed in the running device
    list, and run the application. This will install the application on your device
    and run it.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing code to a Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The application development is done. Let''s save our code to our Git repository
    so we can access the code from anywhere:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio, in the bottom-right corner, click on Add to Source Control
    and then select Git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f3f9025-da16-4ead-a6be-14908d9818d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Connect | Settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5d5c3f9-0329-4b17-928b-a9b5c9e73fe4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Global Settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07ff20ec-8e77-4cc4-84c0-695682c4da15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter your GitHub account username and email and click Update:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the up arrow icon (push icon) at the bottom of the Team Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on Publish Git Repo under Push to Remote Repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that it says there is no remote repository configured for this local
    repository. That is because we haven''t connected our remote GitHub repository
    to our local project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61da07d6-2ebc-43c1-b5f2-5ea6a5450880.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Log in to your GitHub account and create an empty Git repository for your project,
    as we learned in [Chapter 2](1cdfeed6-6ce1-4f1c-b1f5-d307c611987a.xhtml), *Working
    with Code Repository Systems*, and copy that URL to the textbox shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e19a6297-f0b5-4279-aea6-dedd33238d48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on Publish, a new window will open asking for your GitHub credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa4725be-a616-4815-aa95-08c3a1197760.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter your GitHub credentials to authenticate and click Login:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After successfully logging in, the code will be pushed to the remote Git repository
    and you should see a success message as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ad42c95-5d59-4a53-8e6c-2329d1cc9f94.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, the code has now been pushed to the remote repository, and
    can be checked by logging in to GitHub and going to the repository URL.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned to develop an Android application using Xamarin
    and Visual Studio. We also learned some detailed fundamentals of an Android application,
    Activities, and their life cycle. We ran the application on Emulator as well as
    set up an actual physical device to run the application; finally we pushed our
    code to a Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn about implementing continuous testing using
    Xamarin Test Cloud.
  prefs: []
  type: TYPE_NORMAL
