- en: Monitor Your GitHub Repos with Docker and Prometheus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 和 Prometheus 监控您的 GitHub 仓库
- en: By **Brian Christner**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：**Brian Christner**
- en: GitHub is full of great code, information, and interesting statistics. GitHub
    repositories are full of statistics that make perfect candidates to graph with
    Grafana. The best way to graph this data is, of course, with Docker and Prometheus.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 拥有丰富的代码、信息和有趣的统计数据。GitHub 仓库中充满了统计数据，非常适合用 Grafana 绘制图表。绘制这些数据的最佳方式，当然是使用
    Docker 和 Prometheus。
- en: Prometheus contains an impressive list of *Exporters *([https://prometheus.io/docs/instrumenting/exporters/](https://prometheus.io/docs/instrumenting/exporters/)).
    These Exporters range from APIs to IoT. They can also integrate with Prometheus
    and Grafana which produce some beautiful graphs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 包含一个令人印象深刻的*导出器*列表（[https://prometheus.io/docs/instrumenting/exporters/](https://prometheus.io/docs/instrumenting/exporters/)）。这些导出器覆盖从
    API 到物联网的各个领域。它们还可以与 Prometheus 和 Grafana 集成，从而生成一些漂亮的图表。
- en: Docker, Prometheus, and Grafana
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker、Prometheus 和 Grafana
- en: My base setup for anything monitoring related is the Docker, Prometheus, and
    Grafana stack. That is the baseline I work from and add components like Exporters.
    I have created the *GitHub-Monitoring Repo *([https://github.com/vegasbrianc/github-monitoring](https://github.com/vegasbrianc/github-monitoring)).
    It contains a Docker compose file which makes this stack simplified and easy to
    start.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我的基础监控设置是 Docker、Prometheus 和 Grafana 堆栈。这是我工作的基准，并且会添加像导出器这样的组件。我已创建了 *GitHub-Monitoring
    仓库*（[https://github.com/vegasbrianc/github-monitoring](https://github.com/vegasbrianc/github-monitoring)）。该仓库包含一个
    Docker Compose 文件，使得这个堆栈变得简化且易于启动。
- en: Getting started
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: Prerequisite Ensure you have a Docker host running the latest versions of Docker
    engine and compose. Next, clone the *GitHub-Monitoring *([https://github.com/vegasbrianc/github-monitoring](https://github.com/vegasbrianc/github-monitoring))
    project to your Docker machine.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 前提条件：确保您的 Docker 主机正在运行最新版本的 Docker 引擎和 Compose。接下来，将 *GitHub-Monitoring*（[https://github.com/vegasbrianc/github-monitoring](https://github.com/vegasbrianc/github-monitoring)）项目克隆到您的
    Docker 机器上。
- en: 'We can start configuring the project based on your requirements. Please edit
    the *Prometheus Targets *([https://github.com/vegasbrianc/github-monitoring/blob/master/prometheus/prometheus.yml](https://github.com/vegasbrianc/github-monitoring/blob/master/prometheus/prometheus.yml))
    if you need to track additional Exporters or targets. They are located in the
    static configs section at the end of the file. The Exporter uses the name metrics
    with port `9171`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据您的需求开始配置项目。如果需要跟踪额外的导出器或目标，请编辑 *Prometheus 目标*（[https://github.com/vegasbrianc/github-monitoring/blob/master/prometheus/prometheus.yml](https://github.com/vegasbrianc/github-monitoring/blob/master/prometheus/prometheus.yml)）。它们位于文件末尾的静态配置部分。导出器使用名为
    metrics 的名称，端口为 `9171`：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Configuration
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: Create a GitHub token to use for this project. That prevents us from hitting
    API limits imposed by GitHub for non-authenticated traffic.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 GitHub 令牌，用于此项目。这可以防止我们触及 GitHub 对未经身份验证的流量施加的 API 限制。
- en: Navigate to *Create GitHub Token *([https://github.com/settings/tokens](https://github.com/settings/tokens))
    where we will create a token for this project.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 *创建 GitHub 令牌*（[https://github.com/settings/tokens](https://github.com/settings/tokens)），我们将在这里为该项目创建一个令牌。
- en: 'Please do the steps that follow:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤操作：
- en: Provide a description of the token.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供令牌的描述。
- en: Select scopes (our project only requires the `repo` permissions).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择作用域（我们的项目仅需要 `repo` 权限）。
- en: Click the generate token button.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击生成令牌按钮。
- en: Copy the token ID and store it in a safe place. That is the equivalent of a
    password so don't keep it in a public place.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制令牌 ID 并将其存储在安全的地方。这相当于一个密码，因此请勿将其保存在公共场所。
- en: Edit the `docker-compose.yml` ([https://github.com/vegasbrianc/github-monitoring/blob/master/docker-compose.yml](https://github.com/vegasbrianc/github-monitoring/blob/master/docker-compose.yml))
    file with your favorite editor. Scroll to the end of the file where you will find
    the metrics service section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的编辑器编辑 `docker-compose.yml` 文件（[https://github.com/vegasbrianc/github-monitoring/blob/master/docker-compose.yml](https://github.com/vegasbrianc/github-monitoring/blob/master/docker-compose.yml)）。滚动到文件末尾，您会找到度量服务部分。
- en: First, replace the `GITHUB_TOKEN=<GitHub API Token see README>` with the token
    you generated earlier. Next, replace the `REPOS` with your desired repositories
    you want to track. In my example, I have selected the Docker and `freeCodeCamp`
    repositories as they offer lots of movement and stats.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将 `GITHUB_TOKEN=<GitHub API Token see README>` 替换为您之前生成的令牌。接着，将 `REPOS` 替换为您希望跟踪的目标仓库。在我的示例中，我选择了
    Docker 和 `freeCodeCamp` 仓库，因为它们提供了很多动态和统计数据。
- en: 'The configuration is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 配置如下：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once configurations are complete, we can start it up. Run the command that
    follows from the `github-monitoring project` directory:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，我们可以启动它。从 `github-monitoring 项目` 目录运行以下命令：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That's it. Docker Compose builds the entire Grafana and Prometheus stacks auto-magically.
    The compose file also connects the new GitHub Exporter to our baseline stack.
    I choose to run docker-compose without the `-d` flag initially. That makes it
    easier for troubleshooting since log entries are printed directly to the terminal.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。Docker Compose 会自动构建整个 Grafana 和 Prometheus 堆栈。Compose 文件还会将新的 GitHub Exporter
    连接到我们的基础堆栈。我选择最初不使用 `-d` 标志运行 docker-compose。这样做有助于故障排除，因为日志条目会直接打印到终端。
- en: 'The Grafana Dashboard is now accessible via: `http://<Host IP Address>:3000`
    (example: `http://localhost:3000`).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana Dashboard 现在可以通过以下地址访问：`http://<Host IP Address>:3000`（例如：`http://localhost:3000`）。
- en: Please use `admin` as username and `foobar` as password (it is defined in the
    `config.monitoring` file that sets out a few environment variables).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用 `admin` 作为用户名，`foobar` 作为密码（它在 `config.monitoring` 文件中定义，该文件设置了一些环境变量）。
- en: Post configuration
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置后续步骤
- en: 'Now we need to create the Prometheus Datasource to connect Grafana to Prometheus:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建 Prometheus 数据源，以将 Grafana 连接到 Prometheus：
- en: Click the Grafana menu from the top-left corner (looks like a fireball)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击左上角的 Grafana 菜单（看起来像一个火球）
- en: Click Data Sources
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击数据源
- en: Click the green button Add Data Source
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击绿色按钮 添加数据源
- en: 'Refer to the following image to add a Grafana Data source:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下图像以添加 Grafana 数据源：
- en: '![](img/grafana-add-datasource.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/grafana-add-datasource.png)'
- en: 'Figure A-1: Add Grafana Data Source'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A-1：添加 Grafana 数据源
- en: Install dashboard
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装仪表盘
- en: I created a Dashboard template which is available on *GitHub Stats Dashboard*([https://grafana.net/dashboards/1559](https://grafana.net/dashboards/1559)).
    Download the dashboard and select from the Grafana menu -> Dashboards -> Import
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个仪表盘模板，可以在*GitHub Stats Dashboard*([https://grafana.net/dashboards/1559](https://grafana.net/dashboards/1559))找到。下载该仪表盘，并从
    Grafana 菜单中选择 -> 仪表盘 -> 导入
- en: This dashboard is a starting point to help you get started with graphing your
    GitHub Repos. Please let me know if you have any changes you would like to see
    in the dashboard, so I can update Grafana site as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个仪表盘是帮助你开始绘制 GitHub 仓库图表的起点。如果你有任何希望在仪表盘中看到的更改，请告诉我，我也会更新 Grafana 网站。
- en: '![](img/grafana-dashboard.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/grafana-dashboard.png)'
- en: 'Figure A-2: GitHub Grafana Dashboard'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A-2：GitHub Grafana 仪表盘
- en: Conclusion
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Prometheus in combination with Docker is a powerful yet simple way to monitor
    different data sources. The GitHub Exporter is one of the many amazing Exporters
    available to Prometheus.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 与 Docker 结合，是一种强大而简单的监控不同数据源的方法。GitHub Exporter 是 Prometheus 提供的众多优秀
    Exporter 之一。
- en: About the author
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于作者
- en: '**Brian Christner** hails from Arizona but now resides in the Alps of Switzerland.
    Brian spent a large portion of his career in the casino industry where he made
    sure the house always won. Brian is a nominated member of the Docker Captain''s
    program and a seasoned cloud architect. He is also a cloud subject matter expert
    in the topics of Docker, Cloud Foundry, IaaS, PaaS, DevOps, CI/CD and, of course,
    container monitoring. Brian is passionate about advocating for cloud and containers.
    When Brian is not busy trying to containerize everything he can be found riding
    his mountain bike or skiing in the Swiss Alps.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Brian Christner** 来自亚利桑那州，现在居住在瑞士的阿尔卑斯山脉。Brian 曾在赌场行业工作了很长时间，他确保赌场总是赢钱。Brian
    是 Docker Captain 计划的提名成员，也是一位经验丰富的云架构师。他还是 Docker、Cloud Foundry、IaaS、PaaS、DevOps、CI/CD
    以及当然的容器监控等领域的云主题专家。Brian 热衷于为云和容器技术代言。当 Brian 不忙于将一切容器化时，你会发现他骑着山地自行车或在瑞士阿尔卑斯山滑雪。'
- en: Twitter - `@idomyowntricks`
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter - `@idomyowntricks`
- en: Website - [www.brianchristner.io](http://www.brianchristner.io)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 网站 - [www.brianchristner.io](http://www.brianchristner.io)
