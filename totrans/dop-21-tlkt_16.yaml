- en: Monitor Your GitHub Repos with Docker and Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By **Brian Christner**
  prefs: []
  type: TYPE_NORMAL
- en: GitHub is full of great code, information, and interesting statistics. GitHub
    repositories are full of statistics that make perfect candidates to graph with
    Grafana. The best way to graph this data is, of course, with Docker and Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus contains an impressive list of *Exporters *([https://prometheus.io/docs/instrumenting/exporters/](https://prometheus.io/docs/instrumenting/exporters/)).
    These Exporters range from APIs to IoT. They can also integrate with Prometheus
    and Grafana which produce some beautiful graphs.
  prefs: []
  type: TYPE_NORMAL
- en: Docker, Prometheus, and Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My base setup for anything monitoring related is the Docker, Prometheus, and
    Grafana stack. That is the baseline I work from and add components like Exporters.
    I have created the *GitHub-Monitoring Repo *([https://github.com/vegasbrianc/github-monitoring](https://github.com/vegasbrianc/github-monitoring)).
    It contains a Docker compose file which makes this stack simplified and easy to
    start.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prerequisite Ensure you have a Docker host running the latest versions of Docker
    engine and compose. Next, clone the *GitHub-Monitoring *([https://github.com/vegasbrianc/github-monitoring](https://github.com/vegasbrianc/github-monitoring))
    project to your Docker machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start configuring the project based on your requirements. Please edit
    the *Prometheus Targets *([https://github.com/vegasbrianc/github-monitoring/blob/master/prometheus/prometheus.yml](https://github.com/vegasbrianc/github-monitoring/blob/master/prometheus/prometheus.yml))
    if you need to track additional Exporters or targets. They are located in the
    static configs section at the end of the file. The Exporter uses the name metrics
    with port `9171`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a GitHub token to use for this project. That prevents us from hitting
    API limits imposed by GitHub for non-authenticated traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to *Create GitHub Token *([https://github.com/settings/tokens](https://github.com/settings/tokens))
    where we will create a token for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please do the steps that follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide a description of the token.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select scopes (our project only requires the `repo` permissions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the generate token button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the token ID and store it in a safe place. That is the equivalent of a
    password so don't keep it in a public place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `docker-compose.yml` ([https://github.com/vegasbrianc/github-monitoring/blob/master/docker-compose.yml](https://github.com/vegasbrianc/github-monitoring/blob/master/docker-compose.yml))
    file with your favorite editor. Scroll to the end of the file where you will find
    the metrics service section.
  prefs: []
  type: TYPE_NORMAL
- en: First, replace the `GITHUB_TOKEN=<GitHub API Token see README>` with the token
    you generated earlier. Next, replace the `REPOS` with your desired repositories
    you want to track. In my example, I have selected the Docker and `freeCodeCamp`
    repositories as they offer lots of movement and stats.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once configurations are complete, we can start it up. Run the command that
    follows from the `github-monitoring project` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: That's it. Docker Compose builds the entire Grafana and Prometheus stacks auto-magically.
    The compose file also connects the new GitHub Exporter to our baseline stack.
    I choose to run docker-compose without the `-d` flag initially. That makes it
    easier for troubleshooting since log entries are printed directly to the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Grafana Dashboard is now accessible via: `http://<Host IP Address>:3000`
    (example: `http://localhost:3000`).'
  prefs: []
  type: TYPE_NORMAL
- en: Please use `admin` as username and `foobar` as password (it is defined in the
    `config.monitoring` file that sets out a few environment variables).
  prefs: []
  type: TYPE_NORMAL
- en: Post configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we need to create the Prometheus Datasource to connect Grafana to Prometheus:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Grafana menu from the top-left corner (looks like a fireball)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Data Sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the green button Add Data Source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the following image to add a Grafana Data source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/grafana-add-datasource.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-1: Add Grafana Data Source'
  prefs: []
  type: TYPE_NORMAL
- en: Install dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I created a Dashboard template which is available on *GitHub Stats Dashboard*([https://grafana.net/dashboards/1559](https://grafana.net/dashboards/1559)).
    Download the dashboard and select from the Grafana menu -> Dashboards -> Import
  prefs: []
  type: TYPE_NORMAL
- en: This dashboard is a starting point to help you get started with graphing your
    GitHub Repos. Please let me know if you have any changes you would like to see
    in the dashboard, so I can update Grafana site as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/grafana-dashboard.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-2: GitHub Grafana Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prometheus in combination with Docker is a powerful yet simple way to monitor
    different data sources. The GitHub Exporter is one of the many amazing Exporters
    available to Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: About the author
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Brian Christner** hails from Arizona but now resides in the Alps of Switzerland.
    Brian spent a large portion of his career in the casino industry where he made
    sure the house always won. Brian is a nominated member of the Docker Captain''s
    program and a seasoned cloud architect. He is also a cloud subject matter expert
    in the topics of Docker, Cloud Foundry, IaaS, PaaS, DevOps, CI/CD and, of course,
    container monitoring. Brian is passionate about advocating for cloud and containers.
    When Brian is not busy trying to containerize everything he can be found riding
    his mountain bike or skiing in the Swiss Alps.'
  prefs: []
  type: TYPE_NORMAL
- en: Twitter - `@idomyowntricks`
  prefs: []
  type: TYPE_NORMAL
- en: Website - [www.brianchristner.io](http://www.brianchristner.io)
  prefs: []
  type: TYPE_NORMAL
