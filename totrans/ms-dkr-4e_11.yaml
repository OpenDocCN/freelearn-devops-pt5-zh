- en: '*Chapter 11*'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '*第11章*'
- en: Docker and Kubernetes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker与Kubernetes
- en: In this chapter, we will be taking a look at Kubernetes. Like Docker Swarm,
    you can use Kubernetes to create and manage clusters that run your container-based
    applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入了解Kubernetes。与Docker Swarm类似，你可以使用Kubernetes创建和管理运行容器化应用程序的集群。
- en: 'We will be discussing the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下内容：
- en: An introduction to Kubernetes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes简介
- en: Enabling Kubernetes in Docker Desktop
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Docker Desktop中启用Kubernetes
- en: Using Kubernetes and Docker Desktop
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kubernetes和Docker Desktop
- en: Kubernetes and other Docker tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes与其他Docker工具
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Kubernetes within Docker only supports by Docker for Mac and Docker for Windows
    desktop clients. If you are running Linux then in the next chapter, [*Chapter
    12*](B15659_12_Final_JM_ePub.xhtml#_idTextAnchor394)*, Discovering more Kubernetes
    options*, we are going to be looking at some options that will be |relevant to
    you.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Docker中的Kubernetes仅支持Docker for Mac和Docker for Windows桌面客户端。如果你使用的是Linux系统，那么在下一章[*第12章*](B15659_12_Final_JM_ePub.xhtml#_idTextAnchor394)*，发现更多Kubernetes选项*中，我们将探讨一些对你有帮助的选项。
- en: Like previous chapters, I will be using my preferred operating system, which
    is macOS. As before, some of the supporting commands, which will be few and far
    between, may only apply to macOS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的章节一样，我将使用我偏好的操作系统——macOS。和以前一样，一些支持命令虽然较少且不常用，但可能仅适用于macOS。
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3m1WRiw](https://bit.ly/3m1WRiw)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际操作：[https://bit.ly/3m1WRiw](https://bit.ly/3m1WRiw)
- en: An introduction to Kubernetes
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes简介
- en: If you have been thinking about looking at containers, then you would have come
    across Kubernetes at some point on your travels, so before we enable it within
    our Docker desktop installation, let's take a moment to look at how Kubernetes
    started life.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经考虑过研究容器，你可能在某个时刻遇到过Kubernetes，因此在我们在Docker桌面安装中启用它之前，让我们先回顾一下Kubernetes的起源。
- en: '**Kubernetes**, pronounced **koo-ber-net-eez**, originates from the Greek name
    given to a helmsman or captain of a ship.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes**，发音为**koo-ber-net-eez**，源自希腊语，意为船舶的舵手或船长。'
- en: Info
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: The method of shortening the name adopted by the Kubernetes team is called a
    numeronym and was devised in the 80s, and is still used today. See [https://en.wikipedia.org/wiki/Numeronym](https://en.wikipedia.org/wiki/Numeronym)
    for more information.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes团队采用的缩写方式叫做数字缩写（numeronym），这种方式在80年代被提出，至今仍在使用。更多信息请参见[https://en.wikipedia.org/wiki/Numeronym](https://en.wikipedia.org/wiki/Numeronym)。
- en: Kubernetes, which is also known as **K8s** – the number 8 in the K8s shorthand
    represents the number of letters between the K and S, the 'ubernete' part – is
    an open source project that originated at Google and allows you to automate the
    deployment, management, and scaling of your containerized applications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes，也叫**K8s**——K8s中的8代表字母K和S之间的字母数量，即‘ubernete’部分——是一个开源项目，源自Google，允许你自动化容器化应用程序的部署、管理和扩展。
- en: A brief history of containers at Google
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google容器简史
- en: Google has been working on Linux container-based solutions for quite a long
    time. It took its first steps in 2006 by working on the Linux kernel feature called
    **Control Groups**(**cgroups**). This feature was merged into the Linux kernel
    in 2008 within release 2.6.24\.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Google已经在Linux容器解决方案方面工作了相当长一段时间。它于2006年开始了这项工作，首先研究了名为**Control Groups**（**cgroups**）的Linux内核功能。该功能在2008年随2.6.24版本合并进Linux内核。
- en: The feature allows you to isolate resources, such as CPU, RAM, networking, and
    disk I/O, or one or more processes. Control Groups remains a core requirement
    for Linux containers and is not only used by Docker but also other container tools.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能允许你隔离资源，例如CPU、RAM、网络和磁盘I/O，或者一个或多个进程。Control Groups仍然是Linux容器的核心要求，不仅Docker使用它，其他容器工具也使用它。
- en: Google next dipped their toes into the container waters with a container stack
    called **lmctfy**, which stands for **Let Me Contain That For You** and was an
    alternative to the **LXC** collection of tools and libraries. It was an open sourced
    version of Google's internal toolset, which they used to manage containers in
    their applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Google尝试了一个名为**lmctfy**的容器堆栈，**lmctfy**是**Let Me Contain That For You**的缩写，它是**LXC**工具和库集合的替代方案。它是Google内部工具集的开源版本，Google用它来管理应用程序中的容器。
- en: The next time Google hit the news about their container usage was following
    a talk given by *Joe Beda* at *Gluecon* in May 2014\. During the presentation,
    Beda revealed that pretty much everything within Google was container-based and
    that they were launching around 2 billion containers a week. It was stated that
    this number did not include any long-running containers, meaning that the containers
    were only active for a short amount of time. However, after some quick math, on
    average Google was launching around 3,000 containers per second!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下次 Google 因容器使用而登上新闻的时刻是在 2014 年 5 月 *Joe Beda* 在 *Gluecon* 上的演讲中。在演讲中，Beda
    揭示了 Google 几乎所有的工作都基于容器，并且每周会启动大约 20 亿个容器。并且指出，这个数字并不包括任何长期运行的容器，也就是说这些容器只会在短时间内激活。然而，通过快速计算，Google
    平均每秒启动大约 3,000 个容器！
- en: Later in the talk, Beda mentioned that Google was using a scheduler, so they
    didn't have to manually manage 2 billion containers a week or even worry about
    where they were launched and, to a lesser extent, each container's availability.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在演讲的后半部分，Beda 提到 Google 正在使用一个调度器，这样他们就不需要手动管理每周 20 亿个容器，甚至不必担心容器的启动位置，以及在一定程度上，每个容器的可用性。
- en: Google also published a paper called *Large-scale cluster management at Google
    with Borg*. This paper not only let people outside of Google know the name of
    the scheduler they were using, **Borg**, but it also went into great detail about
    the design decisions they made when designing the scheduler.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Google 还发布了一篇名为 *在 Google 使用 Borg 进行大规模集群管理* 的论文。这篇论文不仅让 Google 外部的人知道了他们使用的调度器的名字——**Borg**，还详细介绍了他们在设计调度器时所做的设计决策。
- en: The paper mentioned that as well as their internal tools, Google was running
    its customer-facing applications, such as Google Docs, Google Mail, and Google
    Search, in containers running clusters, which are managed by Borg.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 论文提到，除了他们的内部工具外，Google 还将面向客户的应用程序，如 Google Docs、Google Mail 和 Google Search，运行在由
    Borg 管理的容器集群中。
- en: '**Borg** was named after the alien race, the Borg, from the Star Trek: The
    Next Generation TV show. In the TV show, the Borg are a race of cybernetic beings
    whose civilization is founded on a hive mind known as the collective. This gives
    them not only the ability to share the same thoughts but also, through a sub-space
    network, ensure that each member of the collective is given guidance and supervision
    from the collective consciousness. I am sure you will agree, the characteristics
    of the Borg race matches that closely how you would want your cluster of containers
    to run.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Borg** 这个名字来源于《星际迷航：下一代》中的外星种族 Borg。在该剧中，Borg 是一种赛博生命体，他们的文明建立在名为集体意识的蜂巢思维基础上。这使得他们不仅能够共享相同的思想，而且通过亚空间网络，确保每个集体成员都能从集体意识中获得指导和监督。我相信你会同意，Borg
    种族的特征与我们希望容器集群运行的方式非常契合。'
- en: Borg was running within Google for several years and it was eventually replaced
    by a more modern scheduler called Omega. It was around this time that Google announced
    it that it would be taking some of the core functionality of Borg and reproducing
    it as a new open source project. This project, known internally as **Seven**,
    was worked on by several of the core contributors to Borg. It aimed to create
    a friendlier version of Borg that wasn't closely tied into Google's own internal
    procedures and ways of working.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Borg 在 Google 内部运行了几年，最终被一个更现代的调度器 Omega 所取代。就在这时，Google 宣布将会把 Borg 的一些核心功能提取出来，并以新的开源项目形式进行再现。这个项目在内部被称为**Seven**，由几位
    Borg 的核心贡献者共同开发。它的目标是创建一个更加友好的 Borg 版本，避免与 Google 内部的程序和工作方式过于紧密地绑定。
- en: '**Seven**, named after the *Star Trek: Voyager character* Seven of Nine, who
    was a Borg that broke away from the collective, would eventually be named **Kubernetes**
    by the time of its first public commit.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Seven** 这个名字来源于 *星际迷航：航海家号* 中的角色 Seven of Nine，她是一个从集体中脱离出来的 Borg，最终在首次公开提交时，它被命名为
    **Kubernetes**。'
- en: So, now that we know how Kubernetes came to be, we can dig a little deeper into
    what Kubernetes is.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们了解了 Kubernetes 的由来，现在可以更深入地探讨 Kubernetes 是什么。
- en: An overview of Kubernetes
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 概述
- en: The bulk of the project, 90.7% at the time of writing this, is written in Go,
    which should come as no surprise as Go is a programming language that was developed
    internally at Google before it was open sourced in 2011\. The rest of the project
    files are made up of Python and Shell helper scripts and HTML documentation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的大部分内容，写作时占比 90.7%，是用 Go 编写的，这并不奇怪，因为 Go 是 Google 内部开发的编程语言，在 2011 年开源。项目的其余部分由
    Python、Shell 辅助脚本和 HTML 文档组成。
- en: A typical Kubernetes cluster is made up of servers that take on either a master
    or node role. You can also run a standalone installation that takes on both roles.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的 Kubernetes 集群由承担主控或节点角色的服务器组成。你也可以运行一个独立的安装，既承担主控角色也承担节点角色。
- en: The master role is where the magic happens, and it is the brains of the cluster.
    It is responsible for making decisions on where pods are launched and for monitoring
    the health of both the cluster itself and also of the pods running within the
    cluster. We will discuss pods once we have finished looking at the two roles.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 主控角色是魔法发生的地方，它是集群的大脑。它负责决定在哪些位置启动 pods，并监控集群本身以及集群内运行的 pods 的健康状态。我们将在讨论完这两个角色后再讨论
    pods。
- en: 'Typically, the core components that are deployed to a host that has been given
    the role of a master are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，部署到被赋予主控角色的主机上的核心组件如下：
- en: '`kube-apiserver`: This component exposes the main Kubernetes API. It is designed
    to horizontally scale, which means that you can keep adding more instances of
    it to make your cluster highly available.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`：该组件暴露了主要的 Kubernetes API。它被设计为水平扩展，这意味着你可以不断添加更多实例来使你的集群高度可用。'
- en: '`etcd`: This is a highly available consistent key-value store. It is used to
    store the state of the cluster.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd`：这是一个高可用的一致性键值存储。它用于存储集群的状态。'
- en: '`kube-scheduler`: This component is responsible for making the decisions on
    where pods are launched.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-scheduler`：该组件负责决定 pods 启动的位置。'
- en: '`kube-controller-manager`: This component runs controllers. These controllers
    have several functions within Kubernetes, such as monitoring the nodes, keeping
    an eye on the replication, managing the endpoints, and generating service accounts
    and tokens.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-controller-manager`：该组件运行控制器。这些控制器在 Kubernetes 中有多个功能，如监控节点、关注复制、管理端点以及生成服务账户和令牌。'
- en: '`cloud-controller-manager`: This component takes on the management of the various
    controllers, which interact with third-party clouds to launch and configure supporting
    services.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud-controller-manager`：该组件负责管理与第三方云交互的各类控制器，以启动和配置支持服务。'
- en: 'Now that we have our management components covered, we need to discuss what
    they are managing. A node is made up of the following elements:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了管理组件，我们需要讨论它们所管理的内容。一个节点由以下元素组成：
- en: '`kubelet`: This agent runs on each node within the cluster, and it is the means
    by which the managers interact with the nodes. It is also responsible for managing
    the pods.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubelet`：该代理运行在集群中的每个节点上，它是管理者与节点交互的手段。它还负责管理 pods。'
- en: '`kube-proxy`: This component manages all of the routing of requests and traffic
    for both the node and also the pods.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-proxy`：该组件管理节点和 pods 的请求和流量的路由。'
- en: '`container runtime`: This could be Docker, CRI-O, or any other OCI-compliant
    runtime.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container runtime`：这可以是 Docker、CRI-O 或任何其他符合 OCI 标准的运行时。'
- en: You may have noticed that I have not mentioned containers much so far. This
    is because Kubernetes doesn't actually directly interact with your containers;
    instead, it communicates with a pod. Think of a pod as a complete application,
    a little like when we looked at launching an application made up of multiple containers
    using Docker Compose.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我到目前为止并没有提到容器。这是因为 Kubernetes 实际上并不直接与容器交互；它与 pod 进行通信。可以把 pod 看作是一个完整的应用程序，有点像我们之前使用
    Docker Compose 启动由多个容器组成的应用程序。
- en: How does Docker fit in with Kubernetes?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 是如何与 Kubernetes 配合的？
- en: Docker's relationship with Kubernetes is varied. To start with, Docker, the
    container engine, powers a lot of Kubernetes installations in one form or another,
    for example, as Docker or ContainerD.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 与 Kubernetes 的关系是多种多样的。首先，Docker 这个容器引擎以某种方式驱动了许多 Kubernetes 的安装，例如作为
    Docker 或 ContainerD。
- en: However, Kubernetes was originally seen as a competitive technology to Docker
    Swarm, which was Docker's own clustering technology. However, over the last few
    years, Kubernetes has emerged as pretty much the de facto standard for container
    clustering/orchestration.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Kubernetes 最初被视为 Docker Swarm 的竞争技术，后者是 Docker 自己的集群技术。然而，在过去几年中，Kubernetes
    已经基本成为容器集群/编排的事实标准。
- en: 'All of the major cloud providers provide Kubernetes-as-a-service. We have the
    following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主要的云服务提供商都提供 Kubernetes 服务。我们有以下几个选择：
- en: '**Google Cloud**: **Google Kubernetes Engine** (**GKE**)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Cloud**: **Google Kubernetes 引擎** (**GKE**)'
- en: '**Microsoft Azure**: **Azure Kubernetes Service** (**AKS**)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Azure**: **Azure Kubernetes 服务** (**AKS**)'
- en: '**Amazon Web Services**: **Amazon Elastic Container Service for Kubernetes**
    (**EKS**)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Web Services**: **Amazon 弹性容器服务 for Kubernetes** (**EKS**)'
- en: '**IBM**: **IBM Cloud Kubernetes Service**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IBM**: **IBM 云 Kubernetes 服务**'
- en: '**Oracle Cloud**: **Oracle Container Engine for Kubernetes**'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oracle Cloud**: **Oracle 容器引擎 for Kubernetes**'
- en: '**DigitalOcean**: **Kubernetes on DigitalOcean**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DigitalOcean**: **DigitalOcean 上的 Kubernetes**'
- en: On the face of it, all of the major players supporting Kubernetes may not seem
    like that big a deal. However, consider that we now know a consistent way of deploying
    our containerized applications across multiple platforms. Traditionally, these
    platforms have been walled gardens and have very different ways of interacting
    with them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，所有主要支持 Kubernetes 的主要参与者似乎并不像看上去那么重要。但是，请考虑到我们现在知道了在多个平台上部署我们容器化应用程序的一致方式。传统上，这些平台一直是封闭的生态系统，并且与它们交互的方式非常不同。
- en: While Docker's announcement of Kubernetes support in its desktop versions in
    October 2017 at DockerCon Europe initially came as a surprise, once the dust settled
    the announcement made perfect sense. Providing developers with an environment
    where they could work on their applications locally using Docker for Mac and Docker
    for Windows, and then using Docker Enterprise Edition to deploy and manage their
    own Kubernetes clusters, or even use one of the cloud services mentioned previously,
    fits in with trying to solve the 'works on my machine' problem we discussed in
    [*Chapter 1*](B15659_01_Final_JM_ePub.xhtml#_idTextAnchor046), *Docker Overview*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Docker 在 DockerCon Europe 的 2017 年 10 月发布桌面版本支持 Kubernetes 的消息初听起来让人吃惊，但当风波平息后，这一消息就变得合情合理了。为开发者提供一个环境，他们可以在本地使用
    Docker for Mac 和 Docker for Windows 开发应用程序，然后使用 Docker Enterprise Edition 部署和管理他们自己的
    Kubernetes 集群，或者使用之前提到的云服务，这与我们在 [*第 1 章*](B15659_01_Final_JM_ePub.xhtml#_idTextAnchor046)
    中讨论的解决 '在我的机器上可运行' 问题非常契合，*Docker 概述*。
- en: Let's now take a look at how you can enable support in the Docker software and
    get stuck in using it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何在 Docker 软件中启用支持并开始使用它。
- en: Enabling Kubernetes in Docker Desktop
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker Desktop 中启用 Kubernetes
- en: 'Docker has made the installation process extremely simple. All you need to
    do to enable Kubernetes support is open **Preferences** and click on the **Kubernetes**
    tab:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 已经使安装过程变得极其简单。要启用 Kubernetes 支持，您只需打开 **Preferences** 并点击 **Kubernetes**
    选项卡：
- en: '![Figure 11.1 – The Kubernetes preferences in Docker for Mac'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.1 – Docker for Mac 中的 Kubernetes 首选项'
- en: '](img/image_00_0012.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0012.jpg)'
- en: Figure 11.1 – The Kubernetes preferences in Docker for Mac
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – Docker for Mac 中的 Kubernetes 首选项
- en: As you can see, there are three options. Tick the **Enable Kubernetes** box
    and then select **Deploy Docker Stacks to Kubernetes by default**. Leave **Show
    systems containers (advanced)** unticked for now; we look at this in a little
    more detail once we have enabled the service.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有三个选项。勾选 **Enable Kubernetes** 框，并选择 **Deploy Docker Stacks to Kubernetes
    by default**。暂时不要勾选 **Show systems containers (advanced)**；我们稍后会更详细地讨论这一点。
- en: 'Clicking **Apply & Restart** will do just that, restart Docker and enable Kubernetes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 单击 **Apply & Restart** 将会做如其字，重启 Docker 并启用 Kubernetes：
- en: '![Figure 11.2 – Enabling Kubernetes on Docker for Mac'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.2 – 在 Docker for Mac 上启用 Kubernetes'
- en: '](img/image_00_0022.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0022.jpg)'
- en: Figure 11.2 – Enabling Kubernetes on Docker for Mac
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 在 Docker for Mac 上启用 Kubernetes
- en: 'It will take a short while for Docker to download, configure, and launch the
    cluster. Once complete, you should see Docker and Kubernetes listed in the bottom
    left of the settings window. Both should have a green dot next to them to indicate
    that the services are running:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 将花一点时间下载、配置和启动集群。完成后，您应该在设置窗口的左下角看到 Docker 和 Kubernetes 列表。两者旁边应该有一个绿点，表示服务正在运行：
- en: '![Figure 11.3 – Kubernetes successfully enabled on Docker for Mac'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.3 – Kubernetes 在 Docker for Mac 上成功启用'
- en: '](img/image_00_0032.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0032.jpg)'
- en: Figure 11.3 – Kubernetes successfully enabled on Docker for Mac
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – Kubernetes 在 Docker for Mac 上成功启用
- en: 'Open Terminal and run the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并运行以下命令：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should show you that there is nothing out of the ordinary running. Run
    the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该表明没有运行任何异常的内容。执行以下命令：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Again, this shows nothing of interest; however, as you might have guessed,
    ticking the **Show system containers (advanced)** option in the **Settings** window
    will change this. Tick it now and then re-run the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这没有显示任何有用的信息；然而，正如你可能猜到的那样，在 **设置** 窗口中勾选 **显示系统容器（高级）** 选项将会改变这一点。现在勾选它并重新执行以下命令：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As there is a lot of output when running the preceding command, the following
    screenshot shows just the names of the containers. To do this, I ran the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于执行前面的命令时输出内容较多，以下截图仅显示容器的名称。为此，我执行了以下命令：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running the command gave me the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，我得到如下结果：
- en: '![Figure 11.4 – Listing the containers that make up our Kubernetes installation'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.4 – 列出构成我们 Kubernetes 安装的容器'
- en: '](img/image_00_0042.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0042.jpg)'
- en: Figure 11.4 – Listing the containers that make up our Kubernetes installation
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 列出构成我们 Kubernetes 安装的容器
- en: There are 20 running containers, which is why you have the option of hiding
    them. As you can see, nearly all of the components we discussed in the previous
    section are covered as well as a few additional components, which provide the
    integration with Docker.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有 20 个运行中的容器，这就是你可以选择隐藏它们的原因。如你所见，几乎所有我们在上一节中讨论的组件都已覆盖，此外还有一些额外的组件，它们提供了与 Docker
    的集成。
- en: 'Run the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It still doesn''t list any images, although we get a list of images that are
    being used by running the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然不列出任何镜像，尽管我们通过运行以下命令可以获取正在使用的镜像列表：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see from the following output, the images are sourced from both
    Docker and also the official Kubernetes images that are available from the Google
    Container Registry (k8s.gcr.io), and there are also some images that have been
    built locally:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下输出中可以看到，镜像来自 Docker 和 Google 容器注册中心（k8s.gcr.io）提供的官方 Kubernetes 镜像，也有一些是本地构建的镜像：
- en: '![Figure 11.5 – Viewing the images being used to power the Kubernetes installation'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.5 – 查看用于支持 Kubernetes 安装的镜像'
- en: '](img/image_00_0052.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0052.jpg)'
- en: Figure 11.5 – Viewing the images being used to power the Kubernetes installation
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 查看用于支持 Kubernetes 安装的镜像
- en: For now, I would recommend unticking the **Show system containers (advanced)**
    option, as we do not need to see a list of 20 containers running each time that
    we look at the running containers.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时建议取消勾选 **显示系统容器（高级）** 选项，因为我们不需要每次查看运行中的容器时都看到 20 个容器的列表。
- en: 'The other thing to note at this point is that the **Kubernetes** menu item
    in the Docker app now has content in it. This menu can be used for switching between
    Kubernetes clusters. As we only have one cluster active at the moment, there is
    only one listed:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的事项是，Docker 应用中的 **Kubernetes** 菜单项现在已有内容。此菜单可用于在 Kubernetes 集群之间切换。由于当前只有一个集群处于活动状态，因此仅列出一个集群：
- en: '![Figure 11.6 – Checking the Kubernetes menu item'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.6 – 检查 Kubernetes 菜单项'
- en: '](img/image_00_0062.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0062.jpg)'
- en: Figure 11.6 – Checking the Kubernetes menu item
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 检查 Kubernetes 菜单项
- en: Now that we have our local Kubernetes cluster up and running, we can start to
    use it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动并运行了本地 Kubernetes 集群，可以开始使用它。
- en: Using Kubernetes and Docker Desktop
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Kubernetes 和 Docker Desktop
- en: Now that we have our Kubernetes cluster up and running on our Docker desktop
    installation, we can start to interact with it. To start with, we are going to
    look at the command line that was installed alongside the Docker desktop component,
    `kubectl`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在 Docker 桌面安装上启动了 Kubernetes 集群，可以开始与其交互。首先，我们将查看与 Docker 桌面组件一起安装的命令行工具
    `kubectl`。
- en: 'As mentioned, `kubectl` was installed alongside Docker. The following command
    will show some information about the client and also the cluster it is connected
    to:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`kubectl` 是与 Docker 一起安装的。以下命令将显示有关客户端以及它连接的集群的一些信息：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Like when running `docker version`, this should give you information on both
    the client and server:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 和运行 `docker version` 时一样，这应该为你提供关于客户端和服务器的信息：
- en: '![Figure 11.7 – Checking the versions of the client and server'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.7 – 检查客户端和服务器的版本'
- en: '](img/image_00_0072.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0072.jpg)'
- en: Figure 11.7 – Checking the versions of the client and server
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – 检查客户端和服务器的版本
- en: 'Next, we can run the following to see if `kubectl` can see our node:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以运行以下命令查看 `kubectl` 是否能看到我们的节点：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we only have a single node, we should only see one listed:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只有一个节点，所以我们应该只看到一个被列出：
- en: '![Figure 11.8 – Listing our nodes'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.8 – 列出我们的节点'
- en: '](img/image_00_0082.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0082.jpg)'
- en: Figure 11.8 – Listing our nodes
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – 列出我们的节点
- en: 'Now that we have our client interacting with our node, we can view the namespaces
    that are configured by default within Kubernetes by running the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的客户端与节点进行交互，我们可以通过运行以下命令查看 Kubernetes 默认配置的命名空间：
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then we can view the pods within a namespace with the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用以下命令查看某个命名空间内的 Pod：
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'What follows is the Terminal output I received when I ran the preceding commands:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我运行前面命令时收到的终端输出：
- en: '![Figure 11.9 – Checking the namespaces'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.9 – 检查命名空间'
- en: '](img/image_00_0092.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0092.jpg)'
- en: Figure 11.9 – Checking the namespaces
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 检查命名空间
- en: 'Namespaces within Kubernetes are a great way of isolating resources within
    your cluster. As you can see from the Terminal output, there are four namespaces
    within our cluster. There is the `default` namespace, which is typically empty.
    There are two namespaces for the main Kubernetes services: `docker` and `kube-system`.
    These contain the pods that make up our cluster and the final namespace, `kube-public`,
    like the default namespace, is empty.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的命名空间是隔离集群内资源的好方法。如从终端输出中看到的，我们的集群内有四个命名空间。`default` 命名空间通常是空的。还有两个命名空间用于主要的
    Kubernetes 服务：`docker` 和 `kube-system`。这些包含了组成我们集群的 Pod，最后一个命名空间 `kube-public`，和默认命名空间一样，也是空的。
- en: 'Before we launch our own pod, let''s take a quick look at how we can interact
    with the pods we have running, starting with how we can find more information
    about our pod:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们启动自己的 Pod 之前，先快速看看我们如何与正在运行的 Pod 进行交互，从如何获取关于 Pod 更多信息开始：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding command will print out the details of the `kube-scheduler-docker-desktop`
    pod. You might notice that we had to pass the namespace using the `--namespace`
    flag. If we didn't, then `kubectl` would default to the default namespace where
    there isn't a pod called `kube-scheduler-docker-desktop` running.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将打印出 `kube-scheduler-docker-desktop` Pod 的详细信息。你可能会注意到，我们必须通过 `--namespace`
    标志传递命名空间。如果不这样做，`kubectl` 会默认为默认命名空间，而那里并没有名为 `kube-scheduler-docker-desktop`
    的 Pod 在运行。
- en: 'The full output of the command is shown here, starting with some basic information
    on the pod:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的完整输出显示在这里，从一些关于 Pod 的基本信息开始：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Like Docker, you can apply labels to pods. This is shown in the following screenshot,
    along with some more details around the pod:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 和 Docker 一样，你可以为 Pod 应用标签。以下截图展示了这一点，并附带了一些关于 Pod 的详细信息：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'What follows next is information on the container running within the pod. The
    information here starts with basic information such as the container ID, images,
    and ports:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是有关运行在 Pod 中的容器的信息。这里的信息从基本信息开始，如容器 ID、镜像和端口：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We then move on to the command that is being run within the container:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们进入容器内运行的命令：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we see its current state:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们看它的当前状态：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then we have some information on its utilization:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以看到一些关于其使用情况的信息：
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we are back to information on the pod. Here, we can see the current status:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们回到关于 Pod 的信息。在这里，我们可以看到当前状态：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, we see details on the volumes mounted by the pod and some other options
    such as **Quality of Service** (**QoS**):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以看到关于 Pod 挂载的卷以及一些其他选项，如**服务质量**（**QoS**）的详细信息：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, you can see events listed:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以看到列出的事件：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, there is a lot of information about the pod, including a list
    of containers; we only have one called `kube-scheduler`. We can see the container
    ID, the image used, the flags the container was launched with, and also the data
    used by the Kubernetes scheduler to launch and maintain the pod.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这里有大量关于 Pod 的信息，包括容器列表；我们只有一个名为 `kube-scheduler` 的容器。我们可以看到容器 ID、使用的镜像、容器启动时的标志，以及
    Kubernetes 调度器用于启动和维护 Pod 的数据。
- en: 'Now that we know a container name, we can start to interact with it. For example,
    running the following command will print the logs for our one container:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了容器名称，可以开始与之交互。例如，运行以下命令将打印出我们唯一容器的日志：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'I got the following output:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我得到了以下输出：
- en: '![Figure 11.10 – Checking the logs on a container in a pod'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.10 – 检查 Pod 中容器的日志'
- en: '](img/image_00_0102.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0102.jpg)'
- en: Figure 11.10 – Checking the logs on a container in a pod
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 检查 pod 中容器的日志
- en: 'Running the following command would fetch the logs for each container in the
    pod:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令将获取 pod 中每个容器的日志：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Like Docker, you can also execute commands on your pods and containers.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Docker 类似，你也可以在你的 pod 和容器上执行命令。
- en: Tip
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Please ensure you add the space after the `--` in the following two commands.
    Failing to do so will result in errors.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在以下两个命令中的`--`后加上空格。如果不加空格，将会导致错误。
- en: 'For example, the following commands will run the `uname -a` command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下命令将运行`uname -a`命令：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Again, we have the option of running the command on a named container or across
    all containers within the pod:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以选择在指定容器上运行命令，或者在 pod 内的所有容器上运行命令：
- en: '![Figure 11.11 – Running a command across all the containers in a pod'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.11 – 在 pod 中运行一个命令跨所有容器'
- en: '](img/image_00_0112.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0112.jpg)'
- en: Figure 11.11 – Running a command across all the containers in a pod
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – 在 pod 中运行一个命令跨所有容器
- en: Let's find out a little more about our Kubernetes cluster by installing and
    logging into the web-based dashboard.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过安装并登录基于 Web 的仪表板，进一步了解我们的 Kubernetes 集群。
- en: 'While this does not ship with Docker by default, installing it using the definition
    file provided by the Kubernetes project is simple. We just need to run the following
    command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这在 Docker 中默认没有安装，但通过 Kubernetes 项目提供的定义文件安装非常简单。我们只需要运行以下命令：
- en: '[PRE23]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As soon as you run the command, you should see something like the following
    output:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行命令，你应该看到类似以下的输出：
- en: '![Figure 11.12 – Deploying the web-based dashboard'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.12 – 部署基于 Web 的仪表板'
- en: '](img/image_00_0122.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0122.jpg)'
- en: Figure 11.12 – Deploying the web-based dashboard
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – 部署基于 Web 的仪表板
- en: 'Once the services and deployments have been created, it will take a few minutes
    to launch. You can check on the status by running the following commands:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务和部署创建完成，启动过程将需要几分钟。你可以通过运行以下命令来检查状态：
- en: '[PRE24]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once your output looks like the following, your dashboard should be installed
    and ready:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的输出类似于以下内容，仪表板应该已安装并准备就绪：
- en: '![Figure 11.13 – Checking the status of the deployment'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.13 – 检查部署状态'
- en: '](img/image_00_0131.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0131.jpg)'
- en: Figure 11.13 – Checking the status of the deployment
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – 检查部署状态
- en: 'You may have noticed that the dashboard has its own namespace called `kubernetes-dashboard`.
    Now that we have our dashboard running, we will find a way to access it. We can
    do this using the inbuilt proxy service in `kubectl`. Just run the following command
    to start it up:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，仪表板有自己的命名空间，叫做`kubernetes-dashboard`。现在我们已经让仪表板运行起来，我们将找到访问它的方法。我们可以使用`kubectl`中的内建代理服务来实现。只需运行以下命令来启动它：
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This will open a long-running foreground process:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个长时间运行的前台进程：
- en: '![Figure 11.14 – Starting the proxy service'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.14 – 启动代理服务'
- en: '](img/image_00_0141.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0141.jpg)'
- en: Figure 11.14 – Starting the proxy service
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – 启动代理服务
- en: 'Now that the proxy service is running, opening your browser and going to [http://127.0.0.1:8001/version/](http://127.0.0.1:8001/version/)
    will show you some information on your cluster:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代理服务已在运行，打开浏览器并访问 [http://127.0.0.1:8001/version/](http://127.0.0.1:8001/version/)
    将显示集群的一些信息：
- en: '![Figure 11.15 – Information on the cluster'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.15 – 集群信息'
- en: '](img/image_00_0151.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0151.jpg)'
- en: Figure 11.15 – Information on the cluster
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15 – 集群信息
- en: 'However, it''s the dashboard we want to see. This can be accessed at the following
    URL:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们想要看到的是仪表板。可以通过以下 URL 访问它：
- en: '[http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/](http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/](http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/)'
- en: 'You should see something like the following screen:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似于以下的屏幕：
- en: '![Figure 11.16 – The dashboard login screen'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.16 – 仪表板登录界面'
- en: '](img/image_00_0161.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0161.jpg)'
- en: Figure 11.16 – The Dashboard login screen
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.16 – 仪表板登录界面
- en: As you can see, it is asking for us to log in; however, we haven't yet created
    any credentials, so let's do that now.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它要求我们登录；然而，我们还没有创建任何凭证，所以现在让我们创建凭证。
- en: Info
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: A service account is a system account, which in most cases uses a token to authenticate
    against the Kubernetes API to perform an action. Service accounts can be used
    for both services running within your Kubernetes cluster, as well as in our case,
    where we as a user want to access to the Dashboard using an API token.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 服务账户是一个系统账户，通常使用令牌来验证 Kubernetes API 并执行操作。服务账户可以用于在 Kubernetes 集群内运行的服务，也可以用于我们这种场景，即用户希望使用
    API 令牌访问仪表板。
- en: 'Open a new Terminal window and enter the following command to create a service
    account:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口并输入以下命令来创建服务账户：
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The service account will be created in the default namespace; however, that
    is not going to be a problem as we are now going to assign the service account
    the `cluster-admin` role by running the following command:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 服务账户将在默认命名空间中创建；然而，这不会是一个问题，因为我们现在将通过运行以下命令为服务账户分配 `cluster-admin` 角色：
- en: '[PRE27]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This should have created a secret, and we can find the name of the secret by
    running the following command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该已经创建了一个密钥，我们可以通过运行以下命令找到密钥的名称：
- en: '[PRE28]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following Terminal output shows the steps taken so far:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下终端输出展示了至今为止所采取的步骤：
- en: '![Figure 11.17 – Creating the service account, assigning permission, and viewing
    the secrets'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.17 – 创建服务账户、分配权限并查看密钥'
- en: '](img/image_00_0171.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0171.jpg)'
- en: Figure 11.17 – Creating the service account, assigning permission, and viewing
    the secrets
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.17 – 创建服务账户、分配权限并查看密钥
- en: Now that our service account has been created, the correct permissions have
    been set, and we know the name of the secret (yours will differ as the secret
    name is affixed with a five-character random string), we can get a copy of the
    token we need to log in.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的服务账户已经创建，权限已经正确设置，并且我们知道了密钥的名称（你的密钥名称会有所不同，因为密钥名称会附加一个五个字符的随机字符串），我们可以获取需要的令牌副本以便登录。
- en: 'We simply need to run the following command, making sure that you update the
    secret name to match your own:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需运行以下命令，确保将密钥名称更新为你自己的：
- en: '[PRE29]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This should give you something similar to the following Terminal output:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给你类似于以下的终端输出：
- en: '![Figure 11.18 – Viewing the secret'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.18 – 查看密钥'
- en: '](img/image_00_018.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_018.jpg)'
- en: Figure 11.18 – Viewing the secret
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.18 – 查看密钥
- en: 'Make a note of the token and enter it on the dashboard login page in the space
    provided for the token and then click on the **Sign in** button. Once logged in,
    you will be presented with something that looks like the following page:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 记下令牌并将其输入仪表板登录页面中提供的令牌框中，然后点击**登录**按钮。登录后，你将看到类似以下页面的内容：
- en: '![Figure 11.19 – Dashboard first login'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.19 – 仪表板首次登录'
- en: '](img/image_00_019.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_019.jpg)'
- en: Figure 11.19 – Dashboard first login
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.19 – 仪表板首次登录
- en: As you can see, the dashboard uses the `default` namespace. Well, by default,
    clicking the namespace name will open a drop-down list containing all of the available
    namespaces. For now, select **All namespaces** from the top of the list, and you
    will notice that the view changes and a lot more information is now displayed
    on the overview page.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，仪表板使用的是`default`命名空间。默认情况下，点击命名空间名称将打开一个下拉列表，显示所有可用的命名空间。现在，从列表顶部选择**所有命名空间**，你会注意到视图发生了变化，概览页面上显示了更多的信息。
- en: Now that we have our cluster up and running, we can now look at launching a
    few sample applications.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的集群已经启动并运行，我们可以开始启动一些示例应用程序了。
- en: Kubernetes and other Docker tools
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 和其他 Docker 工具
- en: When we enabled Kubernetes, we selected the `docker stack` command to launch
    our Docker Compose files in Docker Swarm and, as you might have guessed, running
    those same commands will now launch our stack in our Kubernetes cluster.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启用 Kubernetes 时，我们选择了 `docker stack` 命令以在 Docker Swarm 中启动我们的 Docker Compose
    文件，正如你可能已经猜到的那样，运行这些相同的命令现在将会在我们的 Kubernetes 集群中启动我们的堆栈。
- en: 'The Docker Compose file we used looked like the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的 Docker Compose 文件如下所示：
- en: '[PRE30]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Before we launch the application on Kubernetes, we need to make a slight adjustment
    and remove the `placement`, which leaves our file looking like the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们启动 Kubernetes 上的应用程序之前，我们需要做一个小调整，移除 `placement`，这使得我们的文件看起来像以下内容：
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Once the file has been edited, running the following command will launch the
    stack:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件编辑完成，运行以下命令将启动堆栈：
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'As you can see, Docker waits until the stack is available before returning
    you to your prompt:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Docker 会等待堆栈可用后才返回到命令提示符：
- en: '![Figure 11.20 – Launching the stack'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.20 – 启动堆栈'
- en: '](img/image_00_020.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_020.jpg)'
- en: Figure 11.20 – Launching the stack
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.20 – 启动堆栈
- en: 'We can also run the same commands we used to view some information about our
    stack as we did when we launched our stack on Docker Swarm:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以运行与启动 Docker Swarm 集群时查看堆栈信息相同的命令：
- en: '[PRE33]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The Terminal output gives us similar output to when we launched the stack using
    a Docker Swarm cluster:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 终端输出给出了与我们使用 Docker Swarm 集群启动堆栈时类似的输出：
- en: '![Figure 11.21 – Running the Docker stack commands'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.21 – 运行 Docker 堆栈命令'
- en: '](img/image_00_021.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_021.jpg)'
- en: Figure 11.21 – Running the Docker stack commands
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.21 – 运行 Docker 堆栈命令
- en: However, please note, at the time of writing there appears to be an issue with
    the `docker stack services` returning an error, this issue was introduced with
    an update to the version of Kubernetes that ships with Docker.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，在写作时，似乎`docker stack services`返回了错误，这个问题是由于 Docker 随附的 Kubernetes 版本更新后引入的。
- en: 'We can also see details using `kubectl`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`kubectl`查看详细信息：
- en: '[PRE34]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You may have noticed that this time we did not need to provide a namespace.
    This is because our stack was launched in the default namespace:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，这次我们不需要提供命名空间。这是因为我们的堆栈是在默认命名空间中启动的：
- en: '![Figure 11.22 – Viewing details about the deployment and services'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.22 – 查看部署和服务的详细信息'
- en: '](img/image_00_022.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_022.jpg)'
- en: Figure 11.22 – Viewing details about the deployment and services
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.22 – 查看部署和服务的详细信息
- en: Also, when the services were listed, a `localhost` and that the port is `80`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，当列出服务时，显示了`localhost`和端口为`80`。
- en: 'Opening `http://localhost/` in our browser shows the application:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost/`，显示应用程序：
- en: '![Figure 11.23 – Viewing the cluster application running in Kubernetes'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.23 – 查看在 Kubernetes 中运行的集群应用程序'
- en: '](img/image_00_023.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_023.jpg)'
- en: Figure 11.23 – Viewing the cluster application running in Kubernetes
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.23 – 查看在 Kubernetes 中运行的集群应用程序
- en: 'If you still have the Dashboard open, you can explore your stack and even open
    a Terminal to one of the containers:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然打开着仪表盘，可以探索您的堆栈，甚至打开终端连接到某个容器：
- en: '![Figure 11.24 – Opening a Terminal to a container'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.24 – 打开终端连接到容器'
- en: '](img/image_00_024.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_024.jpg)'
- en: Figure 11.24 – Opening a Terminal to a container
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.24 – 打开终端连接到容器
- en: 'This was done by selecting one of the six pods for the cluster deployment and
    then clicking on the **Exec into pod** button highlighted in the following screenshot:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过选择集群部署的六个 Pod 中的一个，然后点击下图中突出显示的**进入 Pod**按钮完成的：
- en: '![Figure 11.25 – Exec into pod'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.25 – 进入 Pod'
- en: '](img/image_00_025.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_025.jpg)'
- en: Figure 11.25 – Exec into pod
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.25 – 进入 Pod
- en: 'You can remove the stack by running the following command:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来删除堆栈：
- en: '[PRE35]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: One last thing…you may be thinking to yourself, 'Great, I can run my Docker
    Compose files anywhere on a Kubernetes cluster.' Well, that is not strictly true.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事…您可能会想，“太好了，我可以在任何 Kubernetes 集群中运行我的 Docker Compose 文件。”但这并不完全准确。
- en: As mentioned, when we first enabled Kubernetes, there are some Docker-only components
    launched. These are there to make sure that Docker is integrated as tightly as
    possible. However, as these components won't exist in non-Docker managed clusters,
    you won't be able to use the `docker stack` commands.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当我们第一次启用 Kubernetes 时，会启动一些仅限 Docker 的组件。这些组件确保 Docker 尽可能紧密地集成。然而，由于这些组件在非
    Docker 管理的集群中不存在，因此您将无法使用`docker stack`命令。
- en: All is not lost though. There is a tool called **Kompose** provided as part
    of the Kubernetes project, which can take Docker Compose files and convert them
    on the fly to Kubernetes definition files.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 但幸运的是，并不是一切都失去了。有一个名为**Kompose**的工具，它是 Kubernetes 项目的一部分，可以将 Docker Compose
    文件实时转换为 Kubernetes 定义文件。
- en: 'To install Kompose on macOS using Homebrew, run the following command:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 macOS 上使用 Homebrew 安装 Kompose，请运行以下命令：
- en: '[PRE36]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Windows 10 users can use Chocolatey.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 10 用户可以使用 Chocolatey。
- en: Info
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: '`yum` or `apt-get` on Linux machines or `brew` on macOS.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 机器上使用`yum`或`apt-get`，在 macOS 上使用`brew`。
- en: 'To install Kompose using Chocolatey, you can run the following command:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Chocolatey 安装 Kompose，您可以运行以下命令：
- en: '[PRE37]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once it''s installed, you can launch your Docker Compose file by running the
    following command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以通过运行以下命令启动您的 Docker Compose 文件：
- en: '[PRE38]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You will get something like the following output:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到类似以下输出的结果：
- en: '![Figure 11.26 – Running kompose up'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.26 – 运行 kompose up'
- en: '](img/image_00_026.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_026.jpg)'
- en: Figure 11.26 – Running kompose up
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.26 – 运行 kompose up
- en: 'As suggested by the output, running the following command will give you details
    on the service and pod we just launched:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出所示，运行以下命令将显示我们刚刚启动的服务和 Pod 的详细信息：
- en: '[PRE39]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As you can see, our Docker Compose application is up and running:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们的 Docker Compose 应用程序已经启动并运行：
- en: '![Figure 11.27 – Checking the status of the application'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.27 – 检查应用程序的状态'
- en: '](img/image_00_027.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_027.jpg)'
- en: Figure 11.27 – Checking the status of the application
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.27 – 检查应用程序的状态
- en: 'You can remove the services and pods by running the following command:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来删除服务和 Pod：
- en: '[PRE40]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This should give you something like the following:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这样你应该能得到类似以下内容：
- en: '![Figure 11.28 – Running kompose down'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.28 – 运行 kompose down'
- en: '](img/image_00_028.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_028.jpg)'
- en: Figure 11.28 – Running kompose down
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.28 – 运行 kompose down
- en: 'While you can use `kompose up` and `kompose down`, I would recommend generating
    the Kubernetes definition files and tweaking them as needed. To do this, simply
    run the following command:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以使用 `kompose up` 和 `kompose down`，但我建议你生成 Kubernetes 定义文件并根据需要进行调整。为此，只需运行以下命令：
- en: '[PRE41]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You will notice that this command generates two files:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，执行此命令会生成两个文件：
- en: '![Figure 11.29 – Running kompose convert'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.29 – 运行 kompose convert'
- en: '](img/image_00_029.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_029.jpg)'
- en: Figure 11.29 – Running kompose convert
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.29 – 运行 kompose convert
- en: 'You will be able to see quite a difference between the Docker Compose file
    and the two files generated. The `cluster-pod.yaml` file looks like the following:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 你将能够看到 Docker Compose 文件和生成的两个文件之间的明显差异。`cluster-pod.yaml` 文件看起来如下：
- en: '[PRE42]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You can then launch these files by running the following command:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来启动这些文件：
- en: '[PRE43]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If you are not following along, the following screenshot shows the Terminal
    output:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有跟着一起操作，以下截图显示了终端的输出：
- en: '![Figure 11.30 – Launching the application using cluster-pod.yaml and cluster-service.yaml'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.30 – 使用 cluster-pod.yaml 和 cluster-service.yaml 启动应用程序'
- en: '](img/image_00_030.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_030.jpg)'
- en: Figure 11.30 – Launching the application using cluster-pod.yaml and cluster-service.yaml
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.30 – 使用 cluster-pod.yaml 和 cluster-service.yaml 启动应用程序
- en: 'To remove the cluster pod and service, we just need to run the following command:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除集群 Pod 和服务，我们只需运行以下命令：
- en: '[PRE44]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: While we will continue to use this in the next two chapters, you may want to
    disable the Kubernetes integration within your Docker desktop installation as
    it does add a slight overhead to host machine when it is idle. To do this, just
    untick **Enable Kubernetes**. When you click **Apply**, Docker will stop all the
    containers it needed to run Kubernetes; it won't, however, remove the images so
    that when you re-enable it, it doesn't take as long.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将在接下来的两章中继续使用这个方法，但你可能想要在 Docker 桌面版中禁用 Kubernetes 集成，因为它在主机空闲时会对机器带来轻微的负担。要做到这一点，只需取消勾选**启用
    Kubernetes**。当你点击**应用**时，Docker 将停止所有需要运行 Kubernetes 的容器；但它不会删除镜像，这样当你重新启用时，启动的时间不会太长。
- en: Summary
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at Kubernetes from the point of view of Docker desktop
    software. There is a lot more to Kubernetes than we have covered in this chapter,
    so please don't think this is all there is. After discussing the origins of Kubernetes,
    we looked at how you can enable it on your local machine using Docker for Mac
    or Docker for Windows.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从 Docker 桌面版软件的角度看待 Kubernetes。Kubernetes 远不止我们在本章中所涉及的内容，请不要认为这就是全部。在讨论了
    Kubernetes 的起源后，我们介绍了如何使用 Docker for Mac 或 Docker for Windows 在本地计算机上启用 Kubernetes。
- en: We then discussed some basic usage of kubectl before looking at running how
    we can use `docker stack` commands to launch our applications as we did for Docker
    Swarm.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们讨论了 kubectl 的一些基本用法，接着介绍了如何使用 `docker stack` 命令来启动我们的应用程序，方法与 Docker Swarm
    中相同。
- en: At the end of the chapter, we discussed Kompose, which is a tool from the Kubernetes
    project. It helps you convert your Docker Compose files for use with Kubernetes,
    allowing you to get a head start on moving your applications to pure Kubernetes.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 本章最后，我们讨论了 Kompose，这是 Kubernetes 项目中的一个工具。它帮助你将 Docker Compose 文件转换为 Kubernetes
    兼容格式，让你能够提前开始将应用程序迁移到纯 Kubernetes 环境中。
- en: While we have referred to a Kubernetes cluster throughout this chapter, we have
    in actual fact been running a single node cluster, which really isn't a cluster
    at all.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在本章中一直提到 Kubernetes 集群，但实际上我们一直在运行一个单节点集群，这实际上根本算不上集群。
- en: In the next chapter, we are going to take a look at a few more options on how
    to launch Kubernetes locally. Here, we will welcome back Linux users and also
    look at options for launching more than one node.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨如何在本地启动Kubernetes的更多选项。这里，我们将欢迎Linux用户的回归，并且还将查看启动多个节点的选项。
- en: Questions
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True or false: When `docker image ls` command.'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断题：当执行`docker image ls`命令时，结果是什么？
- en: Which of the four namespaces hosts the containers used to run Kubernetes and
    enable support within Docker?
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命名空间托管着用于运行Kubernetes并启用Docker支持的容器？
- en: Which command would you run to find out details about a container running in
    a pod?
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会运行哪个命令来查看运行在Pod中的容器的详细信息？
- en: Which command would you use to launch a Kubernetes definition YAML file? Typically,
    which port does the `kubectl proxy` command open on your local machine?
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用哪个命令来启动Kubernetes定义的YAML文件？通常，`kubectl proxy`命令会在你的本地机器上打开哪个端口？
- en: What was the original name of Google container orchestration platform?
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Google容器编排平台的原始名称是什么？
- en: Further reading
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Some of the Google tools, presentations, and white papers mentioned at the
    start of the chapter can be found here:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开始时提到的一些Google工具、演示文稿和白皮书可以在这里找到：
- en: 'cgroups: [http://man7.org/linux/man-pages/man7/cgroups.7.html](http://man7.org/linux/man-pages/man7/cgroups.7.html)'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cgroups：[http://man7.org/linux/man-pages/man7/cgroups.7.html](http://man7.org/linux/man-pages/man7/cgroups.7.html)
- en: 'lmctfy: [https://github.com/google/lmctfy/](https://github.com/google/lmctfy/)'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: lmctfy：[https://github.com/google/lmctfy/](https://github.com/google/lmctfy/)
- en: 'Containers at Scale, Joe Beda''s slides from GluCon: [http://slides.eightypercent.net/GlueCon%202014%20-%20Containers%20At%20Scale.pdf](http://slides.eightypercent.net/GlueCon%202014%20-%20Containers%20At%20Scale.pdf)'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joe Beda在GluCon上的《大规模容器管理》幻灯片：[http://slides.eightypercent.net/GlueCon%202014%20-%20Containers%20At%20Scale.pdf](http://slides.eightypercent.net/GlueCon%202014%20-%20Containers%20At%20Scale.pdf)
- en: 'Large-scale cluster management at Google with Borg: [https://ai.google/research/pubs/pub43438](https://ai.google/research/pubs/pub43438)'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google的大规模集群管理与Borg：[https://ai.google/research/pubs/pub43438](https://ai.google/research/pubs/pub43438)
- en: 'LXC: [https://linuxcontainers.org/](https://linuxcontainers.org/)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LXC：[https://linuxcontainers.org/](https://linuxcontainers.org/)
- en: 'You can find details on the cloud services mentioned in the chapter here:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到本章提到的云服务的详细信息：
- en: '**Google Kubernetes Engine** (**GKE**): [https://cloud.google.com/kubernetes-engine](https://cloud.google.com/kubernetes-engine)'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Kubernetes Engine**（**GKE**）：[https://cloud.google.com/kubernetes-engine](https://cloud.google.com/kubernetes-engine)'
- en: '**Azure Kubernetes Service** (**AKS**): [https://azure.microsoft.com/en-gb/services/kubernetes-service/](https://azure.microsoft.com/en-gb/services/kubernetes-service/)'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Kubernetes Service**（**AKS**）：[https://azure.microsoft.com/en-gb/services/kubernetes-service/](https://azure.microsoft.com/en-gb/services/kubernetes-service/)'
- en: 'Amazon **Elastic Container Service for Kubernetes** (**Amazon EKS**): [https://aws.amazon.com/eks/](https://aws.amazon.com/eks/)'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊**弹性容器服务（Kubernetes）**（**Amazon EKS**）：[https://aws.amazon.com/eks/](https://aws.amazon.com/eks/)
- en: 'IBM Cloud Kubernetes Service: [https://www.ibm.com/cloud/container-service](https://www.ibm.com/cloud/container-service)'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM Cloud Kubernetes服务：[https://www.ibm.com/cloud/container-service](https://www.ibm.com/cloud/container-service)
- en: 'Oracle Container Engine for Kubernetes: [https://cloud.oracle.com/containers/kubernetes-engine](https://cloud.oracle.com/containers/kubernetes-engine)'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle容器引擎（Kubernetes）：[https://cloud.oracle.com/containers/kubernetes-engine](https://cloud.oracle.com/containers/kubernetes-engine)
- en: 'Kubernetes on DigitalOcean: [https://www.digitalocean.com/products/kubernetes/](https://www.digitalocean.com/products/kubernetes/)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DigitalOcean上的Kubernetes：[https://www.digitalocean.com/products/kubernetes/](https://www.digitalocean.com/products/kubernetes/)
- en: 'You can find Docker''s announcements about Kubernetes support here:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到Docker关于Kubernetes支持的公告：
- en: 'Docker Platform and Moby Project add Kubernetes: [https://www.docker.com/blog/top-5-blogs-2017-docker-platform-moby-project-add-kubernetes/](https://www.docker.com/blog/top-5-blogs-2017-docker-platform-moby-project-add-kubernetes/)'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker平台和Moby项目添加了Kubernetes：[https://www.docker.com/blog/top-5-blogs-2017-docker-platform-moby-project-add-kubernetes/](https://www.docker.com/blog/top-5-blogs-2017-docker-platform-moby-project-add-kubernetes/)
- en: 'Finally, the home page for Kompose can be found here:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Kompose的主页可以在这里找到：
- en: 'Kompose: [http://kompose.io/](http://kompose.io/)'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kompose：[http://kompose.io/](http://kompose.io/)
