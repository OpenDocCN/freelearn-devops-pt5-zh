- en: Customizing Jira for Your Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An information system such as Atlassian Jira is only as useful as the data that
    goes into it, so it is no surprise that Jira is very flexible when it comes to
    letting you customize the fields and screens. Jira comes with a suite of default
    fields to help you get it up and running quickly, and it also allows you to add
    your own fields, called custom fields, to address your unique needs.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn not only how to manage these custom fields in
    Jira, but also how you can create your very own custom field types with your own
    business logic, through scripting.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up different issue types for projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a field required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making the assignee field required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding a field from view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new field configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up customized screens for your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a select list's None option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding help tips to custom fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JavaScript with custom fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting default values for fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding permission to fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own custom field types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up different issue types for projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira comes with a number of issue types out of the box that are designed for
    software project management. However, over time, you might find that these issue
    types do not apply to all of your projects, and you have added your own. In this
    recipe, we will look at how to manage the issue types, so that each project can
    have its own set of issue types.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to set up a project-specific issue type list:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Administration > Issues > Issue type schemes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add issue type schemebutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name for the new issue type scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add issue types to the scheme by dragging them from right to left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the default issue type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Savebutton to create the new scheme, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36ad1962-5529-44a6-992d-61d868b625ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Having created your new issue type scheme, you now need to apply it to projects
    in which you want to restrict issue type selections:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Associatelink for the new issue type scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the project(s) you want to apply the scheme to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Associateto change the selected projects' issue type scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the project has issues with issue types that do not exist in the new issue
    type scheme, Jira will walk you through a migration process where you can update
    the issue type for all the impacted issues.
  prefs: []
  type: TYPE_NORMAL
- en: Making a field required
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Required fields such as Summary and Issue Type have a little red asterisk next
    to them, which means they must have a value when you are creating or updating
    an issue. This is a great way to ensure that users do not skip filling in important
    information.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at how to make any fields of your choice required in this recipe,
    with field configurations. A field configuration controls the behavior of a field;
    this includes the field's mandatory requirements, visibility, renderer, and description.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to make a field required in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrators permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Administration > Issues > Field Configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Configurelink for the field configuration used by the project and
    issue type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Requiredlink for the field you want to make required, such as Due
    Date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have marked a field as required, such as **Due Date** in our case,
    whenever you create or edit an issue, Jira will make sure a value is entered for
    it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3728f272-f1c6-4371-a9b2-2d98d7e9ff85.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now have a look at how these steps work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a field is marked as required, Jira will check to make sure that the field
    has a value when you are making updates to the issue, such as an edit, or during
    a workflow transition. This validation is applied even if the field is not present
    on the screen, so make sure you do not make a field that is not required on screen;
    otherwise, users will not be able to complete the action.
  prefs: []
  type: TYPE_NORMAL
- en: Certain fields, such as Assignee and Due Date, require the user to have certain
    permissions to make updates. If the user does not have the necessary permissions,
    the validation will fail, and prevent the user from completing the action.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Clicking on the Optional link will make the field not required. Certain fields,
    such as **Summary** and **Issue Type**, must be required.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Making the Assignee field required* recipe to see how to disable
    the unassigned option.
  prefs: []
  type: TYPE_NORMAL
- en: Making the Assignee field required
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the Assignee field has an unassigned option, which is equivalent
    to making the field optional. If you look at the field configuration, you will
    realize that you cannot make the Assignee field required, as there is no such
    option available.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to disable the unassigned option, effectively
    making Assignee a required field.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Note the following conditions are required for your projects in order to disable
    the unassigned option for each individual project:'
  prefs: []
  type: TYPE_NORMAL
- en: Issues that are currently using that option for the Assignee field—you will
    need to change all issues with an Unassigned value for Assignee to something else.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Projects that have Unassigned set as the default Assignee—you will need to change
    your project's Default Assignee setting in the Users and roles section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to disable the unassigned option:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Administration > System.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Edit Settingsbutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down and select the OFFoption for **Allow unassigned issues.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Update to apply the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62bc8718-a783-4585-882d-962acbcac7c5.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, once the option is disabled, issues can no longer be unassigned.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding a field from view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be times when a field is no longer needed. When this happens, instead
    of deleting the field, which would also remove all its data, you can choose to
    hide it. If you need the field again further down the track, you can simply unhide
    it and retain all the data.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will be hiding both the Priority and Due Date fields.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to hide a field in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Administration > Issues > Field Configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Configurelink for the field configuration used by the project and
    issue type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Hidelink for **Priority** and **Due Date.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on the Show link will expose the field. You should not hide a mandatory
    field.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using field configuration is one way to hide fields from the user. There are
    two more ways to make a field hidden from view:'
  prefs: []
  type: TYPE_NORMAL
- en: Take the field off screen. Note that for the View screen, default fields such
    as Summary and Description are shown regardless of whether or not they are placed
    on the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restrict the field's configuration scheme so that it is not applicable to the
    project/issue type context. You can do this by clicking on the Configure for the
    customfield and deselecting the **project/issue** type you do not want the field
    to be available for.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding the field with field configuration will make it hidden from all screens
    for the project and issue type it is applicable to, so, if you want to hide the
    field from specific screens, you should not use field configuration, but simply
    take the field off the appropriate screens. For example, if you want to make a
    field read-only after an issue is created, you can simply take it off the screen
    assigned to the edit issue operation. Pay close attention when you take fields
    off a screen; unlike field configurations, there are no safeguards in place to
    prevent you from taking a required field off a screen. So, if the screen is used
    for creating issues, then your users will be stuck, as they will not be able to
    provide a value for the required field that's missing from the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new field configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can configure a field's behavior with field configuration. Jira not only
    comes with a default field configuration that is applied to all project and issue
    types by default, but it also lets you create your own so that you can choose
    the projects and/or issue types to apply your field configuration to.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will make the **Description** and **Assignee** fields required
    only for the Bug issue type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up a new field configuration is a three-step process. The first step
    is to create the new field configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Administration > Issues > Field Configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add Field Configurationbutton, and name it `HUM: Bug Field Configuration`,
    and click on Add.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Requiredlink for the **Description** and **Assignee** fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The second step is to associate the new field configuration with a new field
    configuration scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > Issues > Field configuration schemes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add field configuration schemebutton and name it `HUM: Bug Field
    Configuration Scheme`. Click on Add.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Associate an issue type with a field configurationbutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Bugfor **Issue Type**, **HUM: Bug Field Configuration** for **Field
    Configuration**, and click on Add, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/62c2a489-b6c0-4fb5-a772-71a72685f95f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last step is to apply the new field configuration scheme to our project:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** > **Projects**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a project from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Fields from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Actions** > Use a different scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the new `HUM: Bug Field Configuration Scheme`option and click on **Associate**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up customized screens for your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira comes with three screens by default—the **Default** screen, the **Resolve ****Issue**
    screen, and the **Workflow** screen.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to create a new screen from scratch, and
    then make it appear when we are creating a new Task issue.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The screen is one of the most complicated configurations in Jira. To create
    a new screen and apply it often requires you to configure multiple schemes. So,
    we will break these steps into three logical groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we need to create our new screen:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Administration > **Issues** > **Screens**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add Screenbutton and name the new screen `HUM: Scrum Task Create
    Screen`. Click on **Add**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select and add the **Summary**, **Issue Type**, **Description**, **Assignee**,
    **Description**, and **Priority **fields, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/434b81cf-159d-44f4-83b0-ca98688b863a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Secondly, we need to assign the new Task Create Screen to the Create Issue
    operation:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** > **Issues** > **Screen schemes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add Screen Scheme **button, name the new screen `HUM: Scrum
    Task Screen Scheme`, select **Default Screen** as the **Default Screen** option,
    and click on Add.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Associate an Issue Operation with a Screenbutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Create Issue for **Issue Operation**, HUM: Scrum Task Create Screen for **Screen**,
    and click on **Add**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a80064da-b919-4ae9-8cb4-b62f42994c4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Third, we need to assign the new `Task Screen Scheme` to the Task issue type:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** > **Issues** > **Issue type screen schemes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add Issue Type Screen Schemebutton and name the new screen `HUM:
    Scrum Task Issue Type Screen Scheme`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Default Screen Schemeas the **Screen Scheme** option and click on Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Associate an issue Type with a Screen Schemebutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Task for **Issue Type**, HUM: Scrum Task Screen Scheme for **Screen
    Scheme**, and click on **Add**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f6bc5e3-836d-4b4f-83ef-1d69dc995e1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, we need to apply the new screen `Task Issue Type Screen Scheme` to
    the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** > **Projects**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a project from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Screens from the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Actions** > **Use a different scheme**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the new **Task Issue Type Screen Scheme** and click on Associate**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The screen is one of the most intricate aspects of Jira configuration. When
    we create a new screen, we need to associate it with one of the three issue operations
    (create, edit, and view) with a screen scheme. In our recipe, we associated our
    new Task Create Screen with the Create Issue operation.
  prefs: []
  type: TYPE_NORMAL
- en: Screen schemes then need to be associated with issue types, so that Jira can
    determine which screen scheme to use, based on the selected issue type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we apply the Issue Type Screen Scheme to a project, so only the selected
    projects will have the associated screens. Now take a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7aecbc28-3fe0-49c3-b297-095406fe4e32.png)'
  prefs: []
  type: TYPE_IMG
- en: It provides a comprehensive illustration of the relationships between screens,
    fields, and their various schemes.
  prefs: []
  type: TYPE_NORMAL
- en: Removing a select list's None option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom field types such as select list (single and multi) come with the **None** option,
    and the only way to remove it is to make the field required. While this makes
    sense, it can be cumbersome to chase down every field and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will remove the None option from all single select list custom
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we will be modifying physical files in Jira, you will want to take backups
    of the files we change.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jira uses Velocity templates to render custom fields. These templates are mostly
    HTML, with some special symbols. You can find all these files in the `JIRA_INSTALL/atlassian-jira/WEB-INF/classes/templates/plugins/fields` directory,
    and the edit view templates are in the `edit` subdirectory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `edit-select.vm` file (located in the previously mentioned directory)
    in a text editor, and remove the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and restart Jira. Make sure you do not change any other lines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can remove the None option from other custom field types, such as multi-select,
    by editing the appropriate file (for example, `edit-multiselect.vm`).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Velocity `.vm` template files are what Jira uses to render the HTML for
    the custom fields. The code snippet we removed is what displays the None option.
    Note that, by changing the template, we are removing the None option for all single select custom
    fields in Jira. If you just want to remove the **None** option for a single custom
    field or only for certain projects, refer to the *Using JavaScript with custom
    fields* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Adding help tips to custom fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users who are new to Jira often find it confusing when it comes to filling in
    fields, especially custom fields. Therefore, it is for you as the administrator
    to provide useful tips and descriptions to explain what some of the fields are
    for.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will be adding a help icon to a customer field that we have
    called **Team**. You can apply this recipe to any custom fields you have in your
    Jira.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to add help tips to a custom field:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Administration** > **Issues** > **Custom Fields**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit **link for the custom field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following HTML snippet into the **Description **text box, and click
    on **Update**. You might want to substitute the `href` value to a real page containing
    help text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows our new help icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0cca5010-8c79-4ba8-ae0f-27c0b9968711.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now go through how these steps work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira allows us to use any valid HTML for custom field description, so we added
    some simple text and an `anchor` tag that links to an HTML page containing our help information.
    We also added a `span` tag with the proper style class in order to have the nice
    question mark icon used by the Issue Type and Priority fields.
  prefs: []
  type: TYPE_NORMAL
- en: The `data-helplink="local"` attribute for the `anchor` tag ensures that, when
    the user clicks on the help icon, the help page is opened in a separate page rather
    than redirecting the current page.
  prefs: []
  type: TYPE_NORMAL
- en: Since the custom field description is rendered as it is, make sure you validate
    your HTML; for example, close all your HTML tags.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Normally, we put descriptions directly into the custom field''s description
    textbox, as demonstrated. You can also put your descriptions into the field configuration
    settings, such as hiding a field. Doing so offers the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: You can have different help text for different project/issue type contexts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set help text for fields that are not custom fields, such as **Summary**
    and **Description**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to set field descriptions in the field configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** > **Issues** > **Field Configurations**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Configure **link for the field configuration used by the project
    and issue type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit** link for the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the HTML snippets into the **Description **field, and click on Update.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Using JavaScript with custom fields* recipe for other tricks you
    can do with custom field descriptions.
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript with custom fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript can be used to manipulate the HTML of custom fields. By adding JavaScript
    code in the custom field description and wrapping the code in `<script>` tags,
    Jira will execute the code when the custom field is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at another way of removing the None option from
    select list custom fields.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses the jQuery JavaScript library, which is bundled with Jira.
    If you are not familiar with jQuery, you can find the documentation at [http://jquery.com](http://jquery.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need to use the custom field''s ID in our script, so you will
    need to have that handy. You can find the ID by going to the **Custom fields** page,
    clicking on the **Edit** link of the target field, and clicking the number at
    the end of the URL, which is the field''s ID. For example, the following URL shows
    a custom field with the ID `10103`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://jira.localhost.com:8080/secure/admin/EditCustomField!default.jspa?id=10103`'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to add JavaScript to custom field description:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Administration > Issues > Custom Fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit **link for the custom field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following JavaScript snippet into the **Description **text box, and
    click on **Update**. You will need to substitute it in your custom field''s ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows that the Team custom field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3872f04e-1b0e-4620-a1a2-781a6b4a899a.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the None option is no longer available.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our script, we use jQuery to select the Team custom field, based on its element
    ID, and remove the option with the value `-1` (which is the None option) with
    the `#customfield_10103 option[value="-1"]` selector.
  prefs: []
  type: TYPE_NORMAL
- en: We use the **Atlassian JavaScript** (**AJS**) namespace (`AJS.$`), which is
    the recommended way to use jQuery in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Setting default values for fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you add more and more fields onto your screens, sometimes it can be overwhelming
    and confusing for your end users, especially for free text fields such as Description.
    Users will often enter data however they like. To help with that, one way is to
    have instructions set as default values for some of these fields to help guide
    your users with their inputs. For those of you who have used other systems, such
    as GitHub, this is a common practice.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to set up a default value for the Description
    field, in the form of instructions for users to follow when creating a bug report.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we need to have the ScriptRunner for Jira add-on installed.
    You can download it from the following link, or install it directly from the Universal
    Plugin Manager at [https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner](https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner).
  prefs: []
  type: TYPE_NORMAL
- en: You may also want to get familiar with Groovy scripting at [http://groovy-lang.org](http://groovy-lang.org)[.](http://groovy.codehaus.org/)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have installed the ScriptRunner for Jira add-on, we will first need
    to create what is known as a behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Administration >** **Manage apps** > **Behaviors**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new behavior by entering a name for it and clicking the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the new behavior created, we need to first create a mapping, so Jira will
    know what to apply the behavior to:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Add Mapping link of the new behavior we have created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select All projects and Bug issue type for our mapping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add Mapping** button to save the setting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the mapping created, we can now start setting default values:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Fields** link of the new behavior we have created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Create initialiser** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b034e76f-a7bd-4246-9127-3798c390b016.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the following code into the text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Click on **Save** to save our changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, if you try to create a new Bug issue, you should see the Description field
    pre-populated with our default value, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba0b3cc7-8600-48e2-9a58-05f9f6508e8a.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now go have a look at how the steps work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our code is written in Groovy, which is very similar to Java, the technology
    used by Jira. We first try to get hold of the `Description` field in line #1,
    and, from line #3 to #20, we use wiki markup, the markup language used by Jira''s
    out-of-the-box editor, to create your default value in the form of instructions.
    On line #18, we check whether the issue already has a description value set, such
    as user-entered content, and, if not, we will apply our default value on line
    #19.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding permission to fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Out of the box, Jira comes with several levels of permissions, starting at the
    system level and going down to the issue level, allowing you to control who should
    have access to issues. While this is usually sufficient, you will find yourself
    needing to apply permissions to individual fields. For example, you may want a
    field such as Description to be read-only for everyone, but only editable by a
    select group of users.
  prefs: []
  type: TYPE_NORMAL
- en: One option is to create your own custom field types, as described in the later
    recipe, and code the permission requirement as part of the field, but this approach
    requires programming and cannot be applied to fields that are not created by you.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at an option to apply field-level permissions to
    both system fields and custom fields.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we need to have the ScriptRunner for Jira add-on installed.
    You can download it from the following link, or install it directly from the Universal
    Plugin Manager at [https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner](https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have installed the ScriptRunner for Jira add-on, we will first need
    to create what is known as a behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Administration** > Manage apps > **Behaviors**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new behavior by entering a name for it and clicking the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the new behavior created, we need to first create a mapping, so Jira will
    know what to apply the behavior to:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add Mapping** link of the new behavior we have created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the projects and issue types you want to apply the behavior to. If you
    want this to be global, you can select the All projects and All issue types options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add Mapping** button to save the setting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the mapping created, we can now start setting our field-level permission
    behaviors:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Fields** link of the new behavior we have created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the fields you want to apply field-level permissions to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Toggle the available behavior options on and off, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1628ba20-d8ab-4566-a355-151a969b99b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Add new condition** link and select which users the permission
    should be applied to. In the following screenshot, the permission will be applied
    to everyone except users in the `jira-administrators` group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6f032829-414c-4154-a71d-0a688490b838.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Add** button to add the condition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you are done with adding fields and conditions, click on the **Save**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we have created and configured our field-level permissions, the changes
    will be applied immediately to the target issues according to the mappings we
    have configured. Have a look at the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fc080fb-1583-4188-9ecb-d55d34d550c6.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the Description field (a system field) and the Team field (a
    custom field) are in read-only mode when a user is editing the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own custom field types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All custom fields that come out-of-the-box with Jira have predefined purposes,
    such as the text field, which allows users to type in some simple text. It will
    often be useful to have a specialized custom field that does exactly what you
    need. Unfortunately, this often requires custom development efforts.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is an add-on that provides a custom field type that lets you
    use Groovy scripts to power its logic.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to create a custom field that uses a Groovy
    script to display the total number of comments on any given issue.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we need to have the ScriptRunner for Jira add-on installed.
    You can download it from the following link, or install it directly from the Universal
    Plugin Manager at [https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner](https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner).
  prefs: []
  type: TYPE_NORMAL
- en: You may also want to get familiar with Groovy scripting at [http://groovy-lang.org](http://groovy-lang.org).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating a scripted field is a two-step process. We first need to create an
    instance of the custom field in Jira, and then add the script to it:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with a user that has a Jira administrator's permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Administration** > **Issues** > **Custom fields**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add Custom Field button and select **Advanced** from the dialog
    box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down and select **Scripted Field **from the list; click on **Next**,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/34d3f120-5dcd-4eb4-915b-a515c12831c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Name our new custom field `Total Comments` and add it to the appropriate screens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Administration > **Manage apps** > Script Fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Edit **option for the `Total Comments` field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following Groovy script in the script text box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Select **Number Field **for **Template** and click on **Update**, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c7a2b20-1c15-49f0-9e11-3517a9e219bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the custom field is added to an issue, it will automatically calculate
    the number of comments the issue has in real time, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d9ce89e-d684-4a64-aa7f-d5b1a6dc8269.png)'
  prefs: []
  type: TYPE_IMG
- en: Now it's time to look to understand the steps.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The scripted field type is an example of what is called the calculated custom
    field type. The calculated custom field type is a special custom field that derives
    (calculates) its value based on some predefined logic, in this case, our Groovy
    script. Every time the field is displayed, Jira will recalculate the field's value
    so it is always kept up to date.
  prefs: []
  type: TYPE_NORMAL
