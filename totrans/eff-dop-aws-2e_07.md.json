["```\n$ docker –version\nDocker version 18.06.1-ce, build e68fc7a \n```", "```\n$ docker pull alpine \n```", "```\nUsing default tag: latest\nlatest: Pulling from library/alpine\n8e3ba11ec2a2: Pull complete\nDigest: sha256:7043076348bf5040220df6ad703798fd8593a0918d06d3ce30c6c93be117e430\nStatus: Downloaded newer image for alpine:latest \n```", "```\n$ docker images\nREPOSITORY  TAG     IMAGE ID      CREATED       SIZE\nalpine      latest  11cd0b38bc3c  2 months ago  4.41 MB \n```", "```\n$ docker run alpine echo \"Hello World\" Hello World \n```", "```\n$ docker run -it alpine /bin/sh\n```", "```\n$ docker run -d alpine sleep 1000 c274537aec04d08c3033f45ab723ba90bcb40240d265851b28f39122199b0600 \n```", "```\n$ docker ps \n```", "```\n$ docker stop c274537aec04 c274537aec04 \n```", "```\n$ docker stop friendly_dijkstra friendly_dijkstra \n```", "```\n$ docker start friendly_dijkstra friendly_dijkstra \n```", "```\n$ docker stop <ID/NAME>\n$ docker rm <ID/NAME> \n```", "```\n$ cd helloworld\n$ touch Dockerfile \n```", "```\n$ docker search --filter=is-official=true node\nNAME    DESCRIPTION                                   STARS  OFFICIAL     \n           AUTOMATED\nnode    Node.js is a JavaScript-based platform for s… 6123    [OK] \n```", "```\nFROM node:carbon\n```", "```\nRUN mkdir -p /usr/local/helloworld/\n```", "```\nCOPY helloworld.js package.json /usr/local/helloworld/\n```", "```\n WORKDIR /usr/local/helloworld/\n```", "```\nRUN npm install --production\n```", "```\nEXPOSE 3000\n```", "```\nENTRYPOINT [ \"node\", \"helloworld.js\" ]\n```", "```\n$ docker build -t helloworld .\nSending build context to Docker daemon 4.608kB\nStep 1/7 : FROM node:carbon\ncarbon: Pulling from library/node\nf189db1b88b3: Pull complete\n3d06cf2f1b5e: Pull complete\n687ebdda822c: Pull complete\n99119ca3f34e: Pull complete\ne771d6006054: Pull complete\nb0cc28d0be2c: Pull complete\n9bbe77ca0944: Pull complete\n75f7d70e2d07: Pull complete\nDigest: sha256:3422df4f7532b26b55275ad7b6dc17ec35f77192b04ce22e62e43541f3d28eb3\nStatus: Downloaded newer image for node:carbon\n ---> 8198006b2b57\nStep 2/7 : RUN mkdir -p /usr/local/helloworld/\n ---> Running in 2c727397cb3e\nRemoving intermediate container 2c727397cb3e\n ---> dfce290bb326\nStep 3/7 : COPY helloworld.js package.json /usr/local/helloworld/\n ---> ad79109b5462\nStep 4/7 : WORKDIR /usr/local/helloworld/\n ---> Running in e712a394acd7\nRemoving intermediate container e712a394acd7\n ---> b80e558dff23\nStep 5/7 : RUN npm install --production\n ---> Running in 53c81e3c707a\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN helloworld@1.0.0 No description\n\nup to date in 0.089s\nRemoving intermediate container 53c81e3c707a\n ---> 66c0acc080f2\nStep 6/7 : EXPOSE 3000\n ---> Running in 8ceba9409a63\nRemoving intermediate container 8ceba9409a63\n ---> 1902103f865c\nStep 7/7 : ENTRYPOINT [ \"node\", \"helloworld.js\" ]\n ---> Running in f73783248c5f \nRemoving intermediate container f73783248c5f\n ---> 4a6cb81d088d\nSuccessfully built 4a6cb81d088d\nSuccessfully tagged helloworld:latest \n```", "```\n$ docker run -p 3000:3000 -d helloworld e47e4130e545e1b2d5eb2b8abb3a228dada2b194230f96f462a5612af521ddc5 \n```", "```\n$ docker logs e47e4130e545e1b2d5eb2b8abb3a228dada2b194230f96f462a5612af521ddc5 \nServer running \n```", "```\n$ docker ps \n```", "```\n$ curl localhost:3000\nHello World \n```", "```\n$ docker kill e47e4130e545\ne47e4130e545\n```", "```\n$ git add Dockerfile\n$ git commit -m \"Adding Dockerfile\"\n$ git push \n```", "```\ndocker pull yogeshraheja/helloworld \n```", "```\n$ for p in {3001..3005}; do docker run -d -p ${p}:3000 4a6cb81d088d; done  \n```", "```\n$ docker ps $ curl localhost:3005 \n```", "```\n\"\"\"Generating CloudFormation template.\"\"\"\n\nfrom troposphere import ( \nExport,\nJoin, \nOutput,\nParameter, \nRef, \nTemplate\n)\nfrom troposphere.ecr import Repository \nt = Template()\n```", "```\nt.add_description(\"Effective DevOps in AWS: ECR Repository\") \n```", "```\nt.add_parameter(Parameter( \n       \"RepoName\", \n        Type=\"String\",\n        Description=\"Name of the ECR repository to create\"\n))\n```", "```\nt.add_resource(Repository( \n        \"Repository\", \n         RepositoryName=Ref(\"RepoName\")\n))\n```", "```\nt.add_output(Output(\n    \"Repository\",\n    Description=\"ECR repository\",\n    Value=Ref(\"RepoName\"),\n    Export=Export(Join(\"-\", [Ref(\"RepoName\"), \"repo\"])),\n))\nprint(t.to_json())\n```", "```\n$ python ecr-repository-cf-template.py > ecr-repository-cf.template\n$ aws cloudformation create-stack \\\n --stack-name helloworld-ecr \\\n --capabilities CAPABILITY_IAM \\\n --template-body file://ecr-repository-cf.template \\\n --parameters \\ ParameterKey=RepoName,ParameterValue=helloworld \n```", "```\n$ aws ecr describe-repositories\n{\n \"repositories\": [\n {\n \"registryId\": \"094507990803\",\n \"repositoryName\": \"helloworld\",\n \"repositoryArn\": \"arn:aws:ecr:us-east- \n             1:094507990803:repository/helloworld\",\n \"createdAt\": 1536345671.0,\n \"repositoryUri\": \"094507990803.dkr.ecr.us-east-\n             1.amazonaws.com/helloworld\"\n }\n ]\n} \n```", "```\n$ aws cloudformation list-exports\n{\n \"Exports\": [\n {\n \"ExportingStackId\": \"arn:aws:cloudformation:us-east-\n             1:094507990803:stack/helloworld-ecr/94d9ed70-b2cd-11e8-\n             b767-50d501eed2b3\",\n \"Value\": \"helloworld\",\n \"Name\": \"helloworld-repo\"\n }\n ]\n} \n```", "```\n$ eval \"$(aws ecr get-login --region us-east-1 --no-include-email )\" \n```", "```\n$ cd helloworld \n```", "```\n$ docker tag helloworld:latest 094507990803.dkr.ecr.us-east-1.amazonaws.com/helloworld:latest \n```", "```\n$ docker push 094507990803.dkr.ecr.us-east-1.amazonaws.com/helloworld:latest\nThe push refers to repository [094507990803.dkr.ecr.us-east-1.amazonaws.com/helloworld]\nc7f21f8d59de: Pushed\n3c36cf19a914: Pushed\n8faa1d9821d6: Pushed\nbe0fb77bfb1f: Pushed\n63c810287aa2: Pushed\n2793dc0607dd: Pushed\n74800c25aa8c: Pushed\nba504a540674: Pushed\n81101ce649d5: Pushed\ndaf45b2cad9a: Pushed\n8c466bf4ca6f: Pushed\nlatest: digest: sha256:95906ec13adf9894e4611cd37c8a06569964af0adbb035fcafa6020994675161 size: 2628 \n```", "```\n$ aws ecr describe-images --repository-name helloworld\n{\n \"imageDetails\": [\n {\n \"imageSizeInBytes\": 265821145,\n \"imageDigest\": \n\"sha256:95906ec13adf9894e4611cd37c8a06569964af0adbb035fcafa6020994675161\",\n \"imageTags\": [\n \"latest\"\n ],\n \"registryId\": \"094507990803\",\n \"repositoryName\": \"helloworld\",\n \"imagePushedAt\": 1536346218.0\n }\n ]\n} \n```", "```\n\"\"\"Generating CloudFormation template.\"\"\"\n\nfrom ipaddress import ip_network from ipify import get_ip\nfrom troposphere import (\n    Base64,\n    Export, \n    Join, \n    Output, \n    Parameter, \n    Ref,\n    Sub, \n    Template, \n    ec2\n)\n\nfrom troposphere.autoscaling import ( \n    AutoScalingGroup, \n    LaunchConfiguration, \n    ScalingPolicy\n)\n\nfrom troposphere.cloudwatch import ( \n    Alarm,\n    MetricDimension\n)\nfrom troposphere.ecs import Cluster\nfrom troposphere.iam import (\n    InstanceProfile, \n    Role\n)\n```", "```\nPublicCidrIp = str(ip_network(get_ip()))\nt = Template()\nt.add_description(\"Effective DevOps in AWS: ECS Cluster\")\n```", "```\nt.add_parameter(Parameter(\n    \"KeyPair\",\n    Description=\"Name of an existing EC2 KeyPair to SSH\",\n    Type=\"AWS::EC2::KeyPair::KeyName\",\n    ConstraintDescription=\"must be the name of an existing EC2   \n    KeyPair.\",\n))\n\nt.add_parameter(Parameter(\n    \"VpcId\",\n    Type=\"AWS::EC2::VPC::Id\",\n    Description=\"VPC\"\n))\n\nt.add_parameter(Parameter(\n    \"PublicSubnet\",\n    Description=\"PublicSubnet\",\n    Type=\"List<AWS::EC2::Subnet::Id>\",\n    ConstraintDescription=\"PublicSubnet\"\n))\n```", "```\nt.add_resource(ec2.SecurityGroup(\n    \"SecurityGroup\",\n    GroupDescription=\"Allow SSH and private network access\",\n    SecurityGroupIngress=[\n        ec2.SecurityGroupRule(\n            IpProtocol=\"tcp\",\n            FromPort=0,\n            ToPort=65535,\n            CidrIp=\"172.16.0.0/12\",\n        ),\n        ec2.SecurityGroupRule(\n            IpProtocol=\"tcp\",\n            FromPort=\"22\",\n            ToPort=\"22\",\n            CidrIp=PublicCidrIp,\n        ),\n    ],\n    VpcId=Ref(\"VpcId\")\n))\n```", "```\nt.add_resource(Cluster(\n    'ECSCluster',\n))\n```", "```\nt.add_resource(Role(\n    'EcsClusterRole',\n    ManagedPolicyArns=[\n        'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM',\n        'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly',\n        'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role',\n        'arn:aws:iam::aws:policy/CloudWatchFullAccess'\n    ],\n    AssumeRolePolicyDocument={\n        'Version': '2012-10-17',\n        'Statement': [{\n            'Action': 'sts:AssumeRole',\n            'Principal': {'Service': 'ec2.amazonaws.com'},\n            'Effect': 'Allow',\n        }]\n    }\n))\n```", "```\nt.add_resource(InstanceProfile(\n    'EC2InstanceProfile',\n    Roles=[Ref('EcsClusterRole')],\n))\n```", "```\nt.add_resource(LaunchConfiguration(\n    'ContainerInstances',\n     UserData=Base64(Join('', [\n        \"#!/bin/bash -xe\\n\",\n        \"echo ECS_CLUSTER=\",\n        Ref('ECSCluster'),\n        \" >> /etc/ecs/ecs.config\\n\",\n        \"yum install -y aws-cfn-bootstrap\\n\",\n        \"/opt/aws/bin/cfn-signal -e $? \",\n        \" --stack \",\n        Ref('AWS::StackName'),\n        \" --resource ECSAutoScalingGroup \",\n        \" --region \",\n        Ref('AWS::Region'),\n        \"\\n\"])),\n    ImageId='ami-04351e12',\n    KeyName=Ref(\"KeyPair\"),\n    SecurityGroups=[Ref(\"SecurityGroup\")],\n    IamInstanceProfile=Ref('EC2InstanceProfile'),\n    InstanceType='t2.micro',\n    AssociatePublicIpAddress='true',\n))\n```", "```\nt.add_resource(AutoScalingGroup(\n    'ECSAutoScalingGroup',\n    DesiredCapacity='1',\n    MinSize='1',\n    MaxSize='5',\n    VPCZoneIdentifier=Ref(\"PublicSubnet\"),\n    LaunchConfigurationName=Ref('ContainerInstances'),\n))\n```", "```\nstates = {\n    \"High\": {\n        \"threshold\": \"75\",\n        \"alarmPrefix\": \"ScaleUpPolicyFor\",\n        \"operator\": \"GreaterThanThreshold\",\n        \"adjustment\": \"1\"\n    },\n    \"Low\": {\n        \"threshold\": \"30\",\n        \"alarmPrefix\": \"ScaleDownPolicyFor\",\n        \"operator\": \"LessThanThreshold\",\n        \"adjustment\": \"-1\"\n    }\n}\n\nfor reservation in {\"CPU\", \"Memory\"}:\n    for state, value in states.iteritems():\n        t.add_resource(Alarm(\n            \"{}ReservationToo{}\".format(reservation, state),\n            AlarmDescription=\"Alarm if {} reservation too {}\".format(\n                reservation,\n                state),\n            Namespace=\"AWS/ECS\",\n            MetricName=\"{}Reservation\".format(reservation),\n            Dimensions=[\n                MetricDimension(\n                    Name=\"ClusterName\",\n                    Value=Ref(\"ECSCluster\")\n                ),\n            ],\n            Statistic=\"Average\",\n            Period=\"60\",\n            EvaluationPeriods=\"1\",\n            Threshold=value['threshold'],\n            ComparisonOperator=value['operator'],\n            AlarmActions=[\n                Ref(\"{}{}\".format(value['alarmPrefix'], reservation))]\n        ))\n        t.add_resource(ScalingPolicy(\n            \"{}{}\".format(value['alarmPrefix'], reservation),\n            ScalingAdjustment=value['adjustment'],\n            AutoScalingGroupName=Ref(\"ECSAutoScalingGroup\"),\n            AdjustmentType=\"ChangeInCapacity\",\n        ))\n```", "```\nt.add_output(Output(\n    \"Cluster\",\n    Description=\"ECS Cluster Name\",\n    Value=Ref(\"ECSCluster\"),\n    Export=Export(Sub(\"${AWS::StackName}-id\")),\n))\n\nt.add_output(Output(\n    \"VpcId\",\n    Description=\"VpcId\",\n    Value=Ref(\"VpcId\"),\n    Export=Export(Sub(\"${AWS::StackName}-vpc-id\")),\n))\n\nt.add_output(Output(\n    \"PublicSubnet\",\n    Description=\"PublicSubnet\",\n    Value=Join(',', Ref(\"PublicSubnet\")),\n    Export=Export(Sub(\"${AWS::StackName}-public-subnets\")),\n))\n\nprint(t.to_json())\n```", "```\n$ git add ecs-cluster-cf-template.py\n$ git commit -m \"Adding Troposphere script to generate an ECS cluster\"\n$ git push\n$ python ecs-cluster-cf-template.py > ecs-cluster-cf.template \n```", "```\n$ aws ec2 describe-vpcs --query 'Vpcs[].VpcId' \n[\n \"vpc-4cddce2a\"\n]\n$ aws ec2 describe-subnets --query 'Subnets[].SubnetId' \n[\n \"subnet-e67190bc\",\n \"subnet-658b6149\",\n \"subnet-d890d3e4\",\n \"subnet-6fdd7927\",\n \"subnet-4c99c229\",\n \"subnet-b03baebc\"\n] \n```", "```\n$ aws cloudformation create-stack \\\n    --stack-name staging-cluster \\\n    --capabilities CAPABILITY_IAM \\\n    --template-body file://ecs-cluster-cf.template \\\n    --parameters \\             \n    ParameterKey=KeyPair,ParameterValue=EffectiveDevOpsAWS \\     \n    ParameterKey=VpcId,ParameterValue=vpc-4cddce2a \\\n    ParameterKey=PublicSubnet,ParameterValue=subnet-e67190bc\\\\,subnet-\n    658b6149\\\\,subnet-d890d3e4\\\\,subnet-6fdd7927\\\\,subnet-\n    4c99c229\\\\,subnet-b03baebc\n{\n    \"StackId\": \"arn:aws:cloudformation:us-east-   \n    1:094507990803:stack/staging-cluster/581e30d0-b2d2-11e8-b48f-\n    503acac41e99\"\n} \n```", "```\n\"\"\"Generating CloudFormation template.\"\"\"\n\nfrom troposphere import elasticloadbalancingv2 as elb\n\nfrom troposphere import (\n    Export,\n    GetAtt,\n    ImportValue,\n    Join,\n    Output,\n    Ref,\n    Select,\n    Split,\n    Sub,\n    Template,\n    ec2\n)\n\nt = Template()\n\nt.add_description(\"Effective DevOps in AWS: ALB for the ECS Cluster\")\n```", "```\nt.add_resource(ec2.SecurityGroup(\n    \"LoadBalancerSecurityGroup\",\n    GroupDescription=\"Web load balancer security group.\",\n    VpcId=ImportValue(\n        Join(\n            \"-\",\n            [Select(0, Split(\"-\", Ref(\"AWS::StackName\"))),\n                \"cluster-vpc-id\"]\n        )\n    ),\n    SecurityGroupIngress=[\n        ec2.SecurityGroupRule(\n            IpProtocol=\"tcp\",\n            FromPort=\"3000\",\n            ToPort=\"3000\",\n            CidrIp=\"0.0.0.0/0\",\n        ),\n    ],\n))\n```", "```\nt.add_resource(elb.LoadBalancer(\n    \"LoadBalancer\",\n    Scheme=\"internet-facing\",\n    Subnets=Split(\n        ',',\n        ImportValue(\n            Join(\"-\",\n                 [Select(0, Split(\"-\", Ref(\"AWS::StackName\"))),\n                  \"cluster-public-subnets\"]\n                 )\n        )\n    ),\n    SecurityGroups=[Ref(\"LoadBalancerSecurityGroup\")],\n))\n```", "```\nt.add_resource(elb.TargetGroup(\n    \"TargetGroup\",\n    DependsOn='LoadBalancer',\n    HealthCheckIntervalSeconds=\"20\",\n    HealthCheckProtocol=\"HTTP\",\n    HealthCheckTimeoutSeconds=\"15\",\n    HealthyThresholdCount=\"5\",\n    Matcher=elb.Matcher(\n        HttpCode=\"200\"),\n    Port=3000,\n    Protocol=\"HTTP\",\n    UnhealthyThresholdCount=\"3\",\n    VpcId=ImportValue(\n        Join(\n            \"-\",\n            [Select(0, Split(\"-\", Ref(\"AWS::StackName\"))),\n                \"cluster-vpc-id\"]\n        )\n    ),\n))\n```", "```\nt.add_resource(elb.Listener(\n    \"Listener\",\n    Port=\"3000\",\n    Protocol=\"HTTP\",\n    LoadBalancerArn=Ref(\"LoadBalancer\"),\n    DefaultActions=[elb.Action(\n        Type=\"forward\",\n        TargetGroupArn=Ref(\"TargetGroup\")\n    )]\n))\n```", "```\nt.add_output(Output(\n    \"TargetGroup\",\n    Description=\"TargetGroup\",\n    Value=Ref(\"TargetGroup\"),\n    Export=Export(Sub(\"${AWS::StackName}-target-group\")),\n))\n\nt.add_output(Output(\n    \"URL\",\n    Description=\"Helloworld URL\",\n    Value=Join(\"\", [\"http://\", GetAtt(\"LoadBalancer\", \"DNSName\"), \":3000\"])\n))\n\nprint(t.to_json())\n```", "```\n$ git add helloworld-ecs-alb-cf-template.py\n$ git commit -m \"Adding a Load balancer template for our helloworld application on ECS\"\n$ git push\n$ python helloworld-ecs-alb-cf-template.py > helloworld-ecs-alb-cf.template\n$ aws cloudformation create-stack \\\n --stack-name staging-alb \\\n --capabilities CAPABILITY_IAM \\\n --template-body file://helloworld-ecs-alb-cf.template\n {\n \"StackId\": \"arn:aws:cloudformation:us-east-        \n     1:094507990803:stack/staging-alb/4929fee0-b2d4-11e8-825f-\n     50fa5f2588d2\"\n} \n```", "```\n\"\"\"Generating CloudFormation template.\"\"\"\n\nfrom troposphere.ecs import (\n    TaskDefinition,\n    ContainerDefinition\n)\nfrom troposphere import ecs\nfrom awacs.aws import (\n    Allow,\n    Statement,\n    Principal,\n    Policy\n)\nfrom troposphere.iam import Role\n\nfrom troposphere import (\n    Parameter,\n    Ref,\n    Template,\n    Join,\n    ImportValue,\n    Select,\n    Split,\n)\n\nfrom awacs.sts import AssumeRole\n\nt = Template()\n\nt.add_description(\"Effective DevOps in AWS: ECS service - Helloworld\")\n```", "```\nt.add_parameter(Parameter(\n    \"Tag\",\n    Type=\"String\",\n    Default=\"latest\",\n    Description=\"Tag to deploy\"\n))\n```", "```\nt.add_resource(TaskDefinition(\n    \"task\",\n    ContainerDefinitions=[\n        ContainerDefinition(\n            Image=Join(\"\", [\n                Ref(\"AWS::AccountId\"),\n                \".dkr.ecr.\",\n                Ref(\"AWS::Region\"),\n                \".amazonaws.com\",\n                \"/\",\n                ImportValue(\"helloworld-repo\"),\n                \":\",\n                Ref(\"Tag\")]),\n            Memory=32,\n            Cpu=256,\n            Name=\"helloworld\",\n            PortMappings=[ecs.PortMapping(\n                ContainerPort=3000)]\n        )\n    ],\n))\n```", "```\nt.add_resource(Role(\n    \"ServiceRole\",\n    AssumeRolePolicyDocument=Policy(\n        Statement=[\n            Statement(\n                Effect=Allow,\n                Action=[AssumeRole],\n                Principal=Principal(\"Service\", [\"ecs.amazonaws.com\"])\n            )\n        ]\n    ),\n    Path=\"/\",\n    ManagedPolicyArns=[\n        'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole']\n))\n```", "```\nt.add_resource(ecs.Service(\n    \"service\",\n    Cluster=ImportValue(\n        Join(\n            \"-\",\n            [Select(0, Split(\"-\", Ref(\"AWS::StackName\"))),\n                \"cluster-id\"]\n        )\n    ),\n    DesiredCount=1,\n    TaskDefinition=Ref(\"task\"),\n    LoadBalancers=[ecs.LoadBalancer(\n        ContainerName=\"helloworld\",\n        ContainerPort=3000,\n        TargetGroupArn=ImportValue(\n            Join(\n                \"-\",\n                [Select(0, Split(\"-\", Ref(\"AWS::StackName\"))),\n                    \"alb-target-group\"]\n            ),\n        ),\n    )],\n    Role=Ref(\"ServiceRole\")\n))\n```", "```\nprint(t.to_json())\n```", "```\n$ git add helloworld-ecs-service-cf-template.py\n$ git commit -m \"Adding helloworld ECS service script\"\n$ git push\n$ python helloworld-ecs-service-cf-template.py > helloworld-ecs-service- cf.template\n$ aws cloudformation create-stack \\\n --stack-name staging-helloworld-service \\\n --capabilities CAPABILITY_IAM \\\n --template-body file://helloworld-ecs-service-cf.template \\\n --parameters \\ ParameterKey=Tag,ParameterValue=latest \n```", "```\n$ aws cloudformation describe-stacks \\\n --stack-name staging-alb \\\n --query 'Stacks[0].Outputs'\n\n[\n {\n \"Description\": \"TargetGroup\",\n \"ExportName\": \"staging-alb-target-group\",\n \"OutputKey\": \"TargetGroup\",\n \"OutputValue\": \"arn:aws:elasticloadbalancing:us-east-\n         1:094507990803:targetgroup/stagi-Targe-\n         ZBW30U7GT7DX/329afe507c4abd4d\"\n },\n {\n \"Description\": \"Helloworld URL\",\n \"OutputKey\": \"URL\",\n \"OutputValue\": \"http://stagi-LoadB-122Z9ZDMCD68X-1452710042.us-\n         east-1.elb.amazonaws.com:3000\"\n }\n]\n\n$ curl http://stagi-LoadB-122Z9ZDMCD68X-1452710042.us-east-1.elb.amazonaws.com:3000\nHello World\nAlso the same can be confirmed from the browser. \n```", "```\n$ eval \"$(aws ecr get-login --region us-east-1 --no-include- email)\" \n```", "```\n$ docker build -t helloworld \n```", "```\n$ docker tag helloworld 094507990803.dkr.ecr.us-east-1.amazonaws.com/helloworld:foobar \n```", "```\n$ docker push 094507990803.dkr.ecr.us-east-1.amazonaws.com/helloworld:foobar\n```", "```\n$ aws cloudformation update-stack \\\n --stack-name staging-helloworld-service \\\n --capabilities CAPABILITY_IAM \\\n --template-body file://helloworld-ecs-service-cf.template \\\n --parameters \\ \n      ParameterKey=Tag,ParameterValue=foobar \n```", "```\n$ curl http://stagi-LoadB-122Z9ZDMCD68X-1452710042.us-east-1.elb.amazonaws.com:3000 \n\nHello From Yogesh Raheja \n```", "```\n$ aws cloudformation create-stack \\\n --stack-name production-cluster \\\n --capabilities CAPABILITY_IAM \\\n --template-body file://ecs-cluster-cf.template \\\n --parameters \\     \n      ParameterKey=KeyPair,ParameterValue=EffectiveDevOpsAWS \\ \n      ParameterKey=VpcId,ParameterValue=vpc-4cddce2a \\ \n      ParameterKey=PublicSubnet,ParameterValue=subnet-\n      e67190bc\\\\,subnet-658b6149\\\\,subnet-d890d3e4\\\\,subnet-\n      6fdd7927\\\\,subnet-4c99c229\\\\,subnet-b03baebc\n{\n \"StackId\": \"arn:aws:cloudformation:us-east-\n     1:094507990803:stack/production-cluster/1e1a87f0-b2da-11e8-8fd2-\n     503aca4a58d1\"\n} \n```", "```\n$ aws cloudformation wait stack-create-complete \\\n --stack-name production-cluster \n```", "```\n$ aws cloudformation create-stack \\\n --stack-name production-alb \\\n --capabilities CAPABILITY_IAM \\\n --template-body file://helloworld-ecs-alb-cf.template\n{\n \"StackId\": \"arn:aws:cloudformation:us-east-\n    1:094507990803:stack/production-alb/bea35530-b2da-11e8-a55e-\n    500c28903236\"\n}\n\n$ aws cloudformation wait stack-create-complete --stack-name production-alb \n```", "```\n$ aws cloudformation create-stack \\\n --stack-name production-helloworld-service \\\n --capabilities CAPABILITY_IAM \\\n --template-body file://helloworld-ecs-service-cf.template \\\n --parameters \\ ParameterKey=Tag,ParameterValue=latest\n{\n \"StackId\": \"arn:aws:cloudformation:us-east-\n     1:094507990803:stack/production-helloworld-service/370a3d40-b2db-\n     11e8-80a8-503f23fb5536\"\n}\n\n$ aws cloudformation wait stack-create-complete \\\n --stack-name production-helloworld-service \n```", "```\n$ aws cloudformation describe-stacks \\\n --stack-name production-alb \\\n --query 'Stacks[0].Outputs'\n[\n {\n \"Description\": \"TargetGroup\",\n \"ExportName\": \"production-alb-target-group\",\n \"OutputKey\": \"TargetGroup\",\n \"OutputValue\": \"arn:aws:elasticloadbalancing:us-east-\n         1:094507990803:targetgroup/produ-Targe-\n         LVSNKY9T8S6E/83540dcf2b5a5b54\"\n },\n {\n \"Description\": \"Helloworld URL\",\n \"OutputKey\": \"URL\",\n \"OutputValue\": \"http://produ-LoadB-40X7DRUNEBE3-676991098.us-\n         east-1.elb.amazonaws.com:3000\"\n }\n]\n\n$ curl http://produ-LoadB-40X7DRUNEBE3-676991098.us-east-1.elb.amazonaws.com:3000\nHello World \n```", "```\n\"\"\"Generating CloudFormation template.\"\"\"\n\nfrom awacs.aws import (\n    Allow,\n    Policy,\n    Principal,\n    Statement\n)\n\nfrom awacs.sts import AssumeRole\n\nfrom troposphere import (\n    Join,\n    Ref,\n    Template\n)\n\nfrom troposphere.codebuild import (\n    Artifacts,\n    Environment,\n    Project,\n    Source\n)\nfrom troposphere.iam import Role\n\nt = Template()\n\nt.add_description(\"Effective DevOps in AWS: CodeBuild - Helloworld container\")\n```", "```\nt.add_resource(Role(\n    \"ServiceRole\",\n    AssumeRolePolicyDocument=Policy(\n        Statement=[\n            Statement(\n                Effect=Allow,\n                Action=[AssumeRole],\n                Principal=Principal(\"Service\", [\"codebuild.amazonaws.com\"])\n            )\n        ]\n    ),\n    Path=\"/\",\n    ManagedPolicyArns=[\n        'arn:aws:iam::aws:policy/AWSCodePipelineReadOnlyAccess',\n        'arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess',\n        'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser',\n        'arn:aws:iam::aws:policy/AmazonS3FullAccess',\n        'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'\n    ]\n))\n```", "```\nenvironment = Environment(\n    ComputeType='BUILD_GENERAL1_SMALL',\n    Image='aws/codebuild/docker:1.12.1',\n    Type='LINUX_CONTAINER',\n    EnvironmentVariables=[\n        {'Name': 'REPOSITORY_NAME', 'Value': 'helloworld'},\n        {'Name': 'REPOSITORY_URI',\n            'Value': Join(\"\", [\n                Ref(\"AWS::AccountId\"),\n                \".dkr.ecr.\",\n                Ref(\"AWS::Region\"),\n                \".amazonaws.com\",\n                \"/\",\n                \"helloworld\"])},\n    ],\n)\n```", "```\nbuildspec = \"\"\"version: 0.1\n```", "```\nphases:\n  pre_build:\n    commands:\n      - aws codepipeline get-pipeline-state --name \"${CODEBUILD_INITIATOR##*/}\" --query stageStates[?actionStates[0].latestExecution.externalExecutionId==\\`$CODEBUILD_BUILD_ID\\`].latestExecution.pipelineExecutionId --output=text > /tmp/execution_id.txt\n      - aws codepipeline get-pipeline-execution --pipeline-name \"${CODEBUILD_INITIATOR##*/}\" --pipeline-execution-id $(cat /tmp/execution_id.txt) --query 'pipelineExecution.artifactRevisions[0].revisionId' --output=text > /tmp/tag.txt\n```", "```\nprintf \"%s:%s\" \"$REPOSITORY_URI\" \"$(cat /tmp/tag.txt)\" > /tmp/build_tag.txt\n      - printf '{\"tag\":\"%s\"}' \"$(cat /tmp/tag.txt)\" > /tmp/build.json\n```", "```\n- $(aws ecr get-login --no-include-email)\n```", "```\n build:\n    commands:\n      - docker build -t \"$(cat /tmp/build_tag.txt)\" .\n```", "```\npost_build:\n    commands:\n      - docker push \"$(cat /tmp/build_tag.txt)\"\n      - aws ecr batch-get-image --repository-name $REPOSITORY_NAME --image-ids imageTag=\"$(cat /tmp/tag.txt)\" --query 'images[].imageManifest' --output text | tee /tmp/latest_manifest.json\n      - aws ecr put-image --repository-name $REPOSITORY_NAME --image-tag latest --image-manifest \"$(cat /tmp/latest_manifest.json)\"\n```", "```\nartifacts:\n  files: /tmp/build.json\n  discard-paths: yes\n\"\"\"\n```", "```\nt.add_resource(Project(\n    \"CodeBuild\",\n    Name='HelloWorldContainer',\n    Environment=environment,\n    ServiceRole=Ref(\"ServiceRole\"),\n    Source=Source(\n        Type=\"CODEPIPELINE\",\n        BuildSpec=buildspec\n    ),\n    Artifacts=Artifacts(\n        Type=\"CODEPIPELINE\",\n        Name=\"output\"\n    ),\n))\n```", "```\nprint(t.to_json()) \n```", "```\n$ git add helloworld-codebuild-cf-template.py\n$ git commit -m \"Adding CodeBuild Template for our helloworld application\"\n$ git push\n$ python helloworld-codebuild-cf-template.py > helloworld-codebuild- cf.template\n$ aws cloudformation create-stack \\\n --stack-name helloworld-codebuild \\\n --capabilities CAPABILITY_IAM \\\n --template-body file://helloworld-codebuild-cf.template \n```", "```\n$ cd helloworld\n$ mkdir templates\n$ curl -L https://raw.githubusercontent.com/yogeshraheja/EffectiveDevOpsTemplates/master/helloworld-ecs-service-cf-template.py | python > templates/helloworld-ecs-service-cf.template\n$ git add templates\n$ git commit -m \"Adding CloudFormation template for the helloworld task\"\n$ git push \n```", "```\n\"\"\"Generating CloudFormation template.\"\"\"\n\nfrom awacs.aws import (\n    Allow,\n    Policy,\n    Principal,\n    Statement,\n)\nfrom awacs.sts import AssumeRole\nfrom troposphere import (\n    Ref,\n    GetAtt,\n    Template,\n)\nfrom troposphere.codepipeline import (\n    Actions,\n    ActionTypeId,\n    ArtifactStore,\n    InputArtifacts,\n    OutputArtifacts,\n    Pipeline,\n    Stages\n)\nfrom troposphere.iam import Role\nfrom troposphere.iam import Policy as IAMPolicy\n\nfrom troposphere.s3 import Bucket, VersioningConfiguration\n\nt = Template()\n\nt.add_description(\"Effective DevOps in AWS: Helloworld Pipeline\")\n```", "```\nt.add_resource(Bucket(\n    \"S3Bucket\",\n    VersioningConfiguration=VersioningConfiguration(\n        Status=\"Enabled\",\n    )\n))\n```", "```\nt.add_resource(Role(\n    \"PipelineRole\",\n    AssumeRolePolicyDocument=Policy(\n        Statement=[\n            Statement(\n                Effect=Allow,\n                Action=[AssumeRole],\n                Principal=Principal(\"Service\", [\"codepipeline.amazonaws.com\"])\n            )\n        ]\n    ),\n    Path=\"/\",\n    Policies=[\n        IAMPolicy(\n            PolicyName=\"HelloworldCodePipeline\",\n            PolicyDocument={\n                \"Statement\": [\n                    {\"Effect\": \"Allow\", \"Action\": \"cloudformation:*\", \"Resource\": \"*\"},\n                    {\"Effect\": \"Allow\", \"Action\": \"codebuild:*\", \"Resource\": \"*\"},\n                    {\"Effect\": \"Allow\", \"Action\": \"codepipeline:*\", \"Resource\": \"*\"},\n                    {\"Effect\": \"Allow\", \"Action\": \"ecr:*\", \"Resource\": \"*\"},\n                    {\"Effect\": \"Allow\", \"Action\": \"ecs:*\", \"Resource\": \"*\"},\n                    {\"Effect\": \"Allow\", \"Action\": \"iam:*\", \"Resource\": \"*\"},\n                    {\"Effect\": \"Allow\", \"Action\": \"s3:*\", \"Resource\": \"*\"},\n                ],\n            }\n        ),\n    ]\n))\n```", "```\nt.add_resource(Role(\n    \"CloudFormationHelloworldRole\",\n    RoleName=\"CloudFormationHelloworldRole\",\n    Path=\"/\",\n    AssumeRolePolicyDocument=Policy(\n        Statement=[\n            Statement(\n                Effect=Allow,\n                Action=[AssumeRole],\n                Principal=Principal(\n                    \"Service\", [\"cloudformation.amazonaws.com\"])\n            ),\n        ]\n    ),\n    Policies=[\n        IAMPolicy(\n            PolicyName=\"HelloworldCloudFormation\",\n            PolicyDocument={\n                \"Statement\": [\n                    {\"Effect\": \"Allow\", \"Action\": \"cloudformation:*\", \"Resource\": \"*\"},\n                    {\"Effect\": \"Allow\", \"Action\": \"ecr:*\", \"Resource\": \"*\"},\n                    {\"Effect\": \"Allow\", \"Action\": \"ecs:*\", \"Resource\": \"*\"},\n                    {\"Effect\": \"Allow\", \"Action\": \"iam:*\", \"Resource\": \"*\"},\n                ],\n            }\n        ),\n    ]\n))\n```", "```\nt.add_resource(Pipeline(\n    \"HelloWorldPipeline\",\n    RoleArn=GetAtt(\"PipelineRole\", \"Arn\"),\n```", "```\n ArtifactStore=ArtifactStore(\n        Type=\"S3\",\n        Location=Ref(\"S3Bucket\")\n```", "```\nStages=[\n        Stages(\n            Name=\"Source\",\n            Actions=[\n                Actions(\n                    Name=\"Source\",\n                    ActionTypeId=ActionTypeId(\n                        Category=\"Source\",\n                        Owner=\"ThirdParty\",\n                        Version=\"1\",\n                        Provider=\"GitHub\"\n                    ),\n                    Configuration={\n                        \"Owner\": \"ToBeConfiguredLater\",\n                        \"Repo\": \"ToBeConfiguredLater\",\n                        \"Branch\": \"ToBeConfiguredLater\",\n                        \"OAuthToken\": \"ToBeConfiguredLater\"\n                    },\n                    OutputArtifacts=[\n                        OutputArtifacts(\n                            Name=\"App\"\n                        )\n                    ],\n                )\n            ]\n        ),\n```", "```\nStages(\n            Name=\"Build\",\n            Actions=[\n                Actions(\n                    Name=\"Container\",\n                    ActionTypeId=ActionTypeId(\n                        Category=\"Build\",\n                        Owner=\"AWS\",\n                        Version=\"1\",\n                        Provider=\"CodeBuild\"\n                    ),\n                    Configuration={\n                        \"ProjectName\": \"HelloWorldContainer\",\n                    },\n                    InputArtifacts=[\n                        InputArtifacts(\n                            Name=\"App\"\n                        )\n                    ],\n                    OutputArtifacts=[\n                        OutputArtifacts(\n                            Name=\"BuildOutput\"\n                        )\n                    ],\n                )\n            ]\n        ),\n```", "```\nStages(\n            Name=\"Staging\",\n            Actions=[\n                Actions(\n                    Name=\"Deploy\",\n                    ActionTypeId=ActionTypeId(\n                        Category=\"Deploy\",\n                        Owner=\"AWS\",\n                        Version=\"1\",\n                        Provider=\"CloudFormation\"\n                    ),\n                    Configuration={\n                        \"ChangeSetName\": \"Deploy\",\n                        \"ActionMode\": \"CREATE_UPDATE\",\n                        \"StackName\": \"staging-helloworld-ecs-service\",\n                        \"Capabilities\": \"CAPABILITY_NAMED_IAM\",\n                        \"TemplatePath\": \"App::templates/helloworld-ecs-service-cf.template\",\n                        \"RoleArn\": GetAtt(\"CloudFormationHelloworldRole\", \"Arn\"),\n                        \"ParameterOverrides\": \"\"\"{\"Tag\" : { \"Fn::GetParam\" : [ \"BuildOutput\", \"build.json\", \"tag\" ] } }\"\"\"\n                    },\n                    InputArtifacts=[\n                        InputArtifacts(\n                            Name=\"App\",\n                        ),\n                        InputArtifacts(\n                            Name=\"BuildOutput\"\n                        )\n                    ],\n                )\n            ]\n        ),\n```", "```\n Stages(\n            Name=\"Approval\",\n            Actions=[\n                Actions(\n                    Name=\"Approval\",\n                    ActionTypeId=ActionTypeId(\n                        Category=\"Approval\",\n                        Owner=\"AWS\",\n                        Version=\"1\",\n                        Provider=\"Manual\"\n                    ),\n                    Configuration={},\n                    InputArtifacts=[],\n                )\n            ]\n        ),\n```", "```\nStages(\n            Name=\"Production\",\n            Actions=[\n                Actions(\n                    Name=\"Deploy\",\n                    ActionTypeId=ActionTypeId(\n                        Category=\"Deploy\",\n                        Owner=\"AWS\",\n                        Version=\"1\",\n                        Provider=\"CloudFormation\"\n                    ),\n                    Configuration={\n                        \"ChangeSetName\": \"Deploy\",\n                        \"ActionMode\": \"CREATE_UPDATE\",\n                        \"StackName\": \"production-helloworld-ecs-service\",\n                        \"Capabilities\": \"CAPABILITY_NAMED_IAM\",\n                        \"TemplatePath\": \"App::templates/helloworld-ecs-service-cf.template\",\n                        \"RoleArn\": GetAtt(\"CloudFormationHelloworldRole\", \"Arn\"),\n                        \"ParameterOverrides\": \"\"\"{\"Tag\" : { \"Fn::GetParam\" : [ \"BuildOutput\", \"build.json\", \"tag\" ] } }\"\"\"\n                    },\n                    InputArtifacts=[\n                        InputArtifacts(\n                            Name=\"App\",\n                        ),\n                        InputArtifacts(\n                            Name=\"BuildOutput\"\n                        )\n                    ],\n                )\n            ]\n        )\n    ],\n))\n```", "```\nprint(t.to_json()) \n```", "```\n$ git add helloworld-codepipeline-cf-template.py\n$ git commit -m \"Adding Pipeline to deploy our helloworld application using ECS\"\n$ git push\n$ python helloworld-codepipeline-cf-template.py > helloworld-codepipeline- cf.template\n$ aws cloudformation create-stack \\\n --stack-name helloworld-codepipeline \\\n --capabilities CAPABILITY_NAMED_IAM \\\n --template-body file://helloworld-codepipeline-cf.template \n```"]