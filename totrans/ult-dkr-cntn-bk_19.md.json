["```\n    $ cd ~/The-Ultimate-Docker-Container-Book\n    ```", "```\n    $ mkdir ch19 && cd ch19\n    ```", "```\n    $ cd ~/The-Ultimate-Docker-Container-Book/ch19\n    ```", "```\n    $ mkdir node && cd node\n    ```", "```\n    $ npm install --save express\n    ```", "```\n    $ npm install --save prom-client\n    ```", "```\n    const app = require(\"express\")();app.get('/hello', (req, res) => {    const { name = 'World' } = req.query;    res.json({ message: `Hello, ${name}!` });});app.listen(port=3000, () => {    console.log('Example api is listening on http://localhost:3000');});\n    ```", "```\n    const client = require(\"prom-client\");const register = client.register;const collectDefaultMetrics =    client.collectDefaultMetrics;collectDefaultMetrics({ register });\n    ```", "```\n    app.get('/metrics', (req, res) => {    res.set('Content-Type', register.contentType);    res.end(register.metrics());});\n    ```", "```\n    $ npm start\n    ```", "```\n> node@1.0.0 start> node server.js\nExample api is listening on http://localhost:3000\n```", "```\n    $ curl localhost:3000/metrics\n    ```", "```\n# HELP process_cpu_user_seconds_total Total user CPU time spent in seconds.# TYPE process_cpu_user_seconds_total counter\nprocess_cpu_user_seconds_total 0.081801\n# HELP process_cpu_system_seconds_total Total system CPU time spent in seconds.\n# TYPE process_cpu_system_seconds_total counter\nprocess_cpu_system_seconds_total 0.02082\n# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.\n# TYPE process_cpu_seconds_total counter\nprocess_cpu_seconds_total 0.102621\n…\n```", "```\n    const helloCounter = new client.Counter({    name: 'my_hello_counter',    help: 'Counts the number of hello requests',});\n    ```", "```\n    app.get('/hello', (req, res) => {    helloCounter.inc();    const name = req.query.name || 'World';    res.json({ message: `Hello, ${name}!` });});\n    ```", "```\n    $ curl localhost:3000/hello?name=Sue$ curl localhost:3000/hello?name=Marc\n    ```", "```\n    $ curl localhost:3000/metrics\n    ```", "```\n…# HELP my_hello_counter Counts the number of hello requests\n# TYPE my_hello_counter counter\nmy_hello_counter 2\n...\n```", "```\n    $ cd ~/The-Ultimate-Docker-Container-Book/ch19\n    ```", "```\n    $ mkdir dotnet && cd dotnet\n    ```", "```\n    $ dotnet new webapi --output sample-api\n    ```", "```\n    $ dotnet add sample-api package prometheus-net.AspNetCore\n    ```", "```\n    $ code .\n    ```", "```\n    using Prometheus;\n    ```", "```\n    …app.UseAuthorization();app.MapControllers();app.MapMetrics();app.Run();\n    ```", "```\n    $ dotnet run --project sample-api\n    ```", "```\nBuilding...info: Microsoft.Hosting.Lifetime[14]\n      Now listening on:\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: /Users/.../ch19/dotnet/sample-api\n...\n```", "```\n    $ curl http://localhost:5204/metrics\n    ```", "```\n# HELP process_private_memory_bytes Process private memory size# TYPE process_private_memory_bytes gauge\nprocess_private_memory_bytes 55619584\n# HELP process_virtual_memory_bytes Virtual memory size in bytes.\n# TYPE process_virtual_memory_bytes gauge\nprocess_virtual_memory_bytes 2221930053632\n# HELP process_working_set_bytes Process working set\n# TYPE process_working_set_bytes gauge\nprocess_working_set_bytes 105537536\n…\nprometheus_net_metric_families{metric_type=\"histogram\"} 0\nprometheus_net_metric_families{metric_type=\"summary\"} 0\nprometheus_net_metric_families{metric_type=\"counter\"} 3\nprometheus_net_metric_families{metric_type=\"gauge\"} 12\n```", "```\n    private static readonly Gauge callsInProgress = Metrics    .CreateGauge(\"myapp_calls_in_progress\",    \"Number of weather forecast operations ongoing.\");\n    ```", "```\n    [HttpGet]public IEnumerable<WeatherForecast> Get(){    using(callsInProgress.TrackInProgress())    {        // code of the Get method    }}\n    ```", "```\n    $ curl http://localhost:5204/weatherforecast\n    ```", "```\n    $ curl http://localhost:5204/metrics\n    ```", "```\n...# HELP myapp_calls_in_progress Number of weather forecast operations ongoing.\n# TYPE myapp_calls_in_progress gauge\nmyapp_weather_forecasts_in_progress 0\n...\n```", "```\n    $ cd ~/The-Ultimate-Docker-Container-Book/ch19\n    ```", "```\n    $ mkdir -p ch19/kube && cd ch19/kube\n    ```", "```\n    $ mkdir config\n    ```", "```\n    $ kubectl create configmap prometheus-cm \\--from-file config/prometheus.yml\n    ```", "```\n    $ kubectl apply -f prometheus.yaml\n    ```", "```\ndeployment.apps/prometheus-deployment createdservice/prometheus-svc created\n```", "```\n    $ kubectl get all\n    ```", "```\n    FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build-envWORKDIR /appCOPY *.csproj ./RUN dotnet restoreCOPY . ./RUN dotnet publish -c Release -o outFROM mcr.microsoft.com/dotnet/aspnet:7.0WORKDIR /appCOPY --from=build-env /app/out .ENTRYPOINT [\"dotnet\", \"sample-api.dll\"]\n    ```", "```\n    $ docker image build -t fundamentalsofdocker/ch19-dotnet-api:2.0 .\n    ```", "```\n    $ docker login\n    ```", "```\n    $ docker image push fundamentalsofdocker/ch19-dotnet-api:2.0\n    ```", "```\n    FROM node:ltsWORKDIR /appCOPY package.json ./RUN npm ci --only=productionCOPY . .EXPOSE 3000CMD [\"node\", \"server.js\"]\n    ```", "```\n    $ docker image build -t fundamentalsofdocker/ch19-node-api:2.0 .\n    ```", "```\n    $ docker image push fundamentalsofdocker/ch19-node-api:2.0\n    ```", "```\n    $ kubectl apply -f app-services.yaml\n    ```", "```\ndeployment.apps/dotnet-api-deployment createdservice/dotnet-api-svc created\ndeployment.apps/node-api-deployment created\nservice/node-api-svc created\n```", "```\n    $ kubectl get services\n    ```", "```\n    $ curl localhost:30211/metrics\n    ```", "```\n# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.# TYPE process_cpu_seconds_total counter\nprocess_cpu_seconds_total 0.4\n# HELP prometheus_net_meteradapter_instruments_connected Number of instruments that are currently connected to the adapter.\n# TYPE prometheus_net_meteradapter_instruments_connected gauge\nprometheus_net_meteradapter_instruments_connected 0\n# HELP prometheus_net_exemplars_recorded_total Number of exemplars that were accepted into in-memory storage in the prometheus-net SDK.\n# TYPE prometheus_net_exemplars_recorded_total counter\nprometheus_net_exemplars_recorded_total 0\n...\n```", "```\n    $ curl localhost:30663/metrics\n    ```", "```\n# HELP process_cpu_user_seconds_total Total user CPU time spent in seconds.# TYPE process_cpu_user_seconds_total counter\nprocess_cpu_user_seconds_total 1.0394399999999997 1578294999302\n# HELP process_cpu_system_seconds_total Total system CPU time spent in seconds.\n# TYPE process_cpu_system_seconds_total counter\nprocess_cpu_system_seconds_total 0.3370890000000001 1578294999302\n...\n```", "```\n    # access the /weatherforecast endpoint in the .NET service$ curl localhost:30211/weatherforecast# and access the /hello endpoint in the Node service$ curl localhost:30663/hello\n    ```", "```\n    $ kubectl apply -f grafana.yaml\n    ```", "```\ndeployment.apps/grafana-deployment createdservice/grafana-svc created\n```", "```\n    $ kubectl get services/grafana-svc\n    ```", "```\n    $ kubectl run tmp-shell --rm -i --tty \\    --image nicolaka/netshoot\n    ```", "```\nbash-5.0#\n```", "```\n    bash-5.0# ip a\n    ```", "```\n    $ kubectl run tmp-shell --rm -i --tty \\    --overrides='{\"spec\": {\"hostNetwork\": true}}' \\    --image nicolaka/netshoot\n    ```"]