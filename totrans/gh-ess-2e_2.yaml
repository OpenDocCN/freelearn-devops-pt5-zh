- en: Using the Wiki and Managing Code Versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we explored the main page of a repository and we covered
    the basics of its issue tracker.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub also provides a wiki-style place to add your project's documentation.
    You can create as many pages as you like and also grant public access to it so
    that everyone can edit it.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, when you are the creator of a product and have users that rely
    on it, you will want it to be as stable as possible. Versioning helps to maintain
    an achievable goal. GitHub provides the right tools to release versions of your
    code, which in reality are just snapshots in time. Whenever you believe your project
    is ready to go out into the wild, whether bugs are fixed or new features are added,
    you can use the releases feature and deliver versioned tarballs to the world.
  prefs: []
  type: TYPE_NORMAL
- en: After finishing this chapter, you will have learned how to create, edit, and
    maintain a wiki by providing a home for your documentation that will complement
    your project.
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn how to create a new release out of an existing branch or
    tag accompanied with optional release notes. This way, the end user can understand
    the changes from any previous versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the wiki:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why wikis are a nice place to document your project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new wiki page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Markdown
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add a sidebar and a footer to your wiki
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Watching a wiki page's commit history and reverting to a previous state if needed
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Managing code versioning:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a release
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing a release
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing a tag from the command line
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Marking as prerelease
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a draft of a release
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading your own files
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tips and tricks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscribing to new releases via atom feed
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the wiki locally
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the wiki
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you first create a new repository, a wiki attached to this project is also
    created. It is enabled by default and everyone can add new content or modify existing
    pages. If you want to change this behavior, you can refer to [Chapter 6](part0149.html#4E33Q0-184576c1044a4350bd24f18b869c0732),
    *Exploring the User and Repository Settings*, which shows you how to accomplish
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Why wikis are a nice place to document your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation is not to be taken lightly. To paraphrase a famous quote, with
    great projects comes great documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Although there are many tools that convert markup files, such as Markdown to
    HTML, you may not want to use an external page to host your documentation. Enter
    GitHub wiki.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new wiki page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Select the Wiki tab (the one with the book icon) in order to head over to the
    wiki. Since our wiki has no content yet, the page doesn't exist. In this case,
    GitHub prompts you to create the first page. Go ahead and hit the green button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every time you add a new page to the wiki, the process is the same. At the
    top, there is the title. This is the only field that is mandatory in order to
    create a wiki page, as this is also used to form the URL from which you will have
    access to the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When the very first wiki page is created, GitHub uses the title `Home` by default.
    Even if you pick another name, the Home page is created automatically and is used
    as the front page of your wiki. The name `Home` behaves in the same way that `README`
    does for repositories, and it cannot be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Below the title area, there are two tabs. When the Write tab is active, you
    can begin to write in the blank area below. If you choose to write in a markup
    language, the Preview tab renders the text and shows you how it will be presented
    when you save the page.
  prefs: []
  type: TYPE_NORMAL
- en: Below the title, there is a nice toolbar that has the most common actions such
    as headers, bold text, italics, and lists. At the time of writing this book, GitHub
    supports nine markup languages to choose from. Pick one from the Edit mode drop-down
    list and the text will be rendered accordingly. For every language you pick from
    the menu, there is a little help page with the most common actions. Hit the question
    mark icon to see the help area.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when you are ready to save the page, you can provide a short message
    describing what the changes were about. Consider it like a Git commit message.
    Later, when we explore the page's history, the edit message will come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever you are ready, press the Save Page button and the page will be created
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Deleting a page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every page except Home can be deleted. In order to do this, go to the page you
    want to delete and hit the Edit button at the right corner. As you will see later,
    deleting a page does not necessarily mean that it is purged forever. Read ahead
    and learn how to undo things.
  prefs: []
  type: TYPE_NORMAL
- en: A Markdown-powered wiki – an introduction to Markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While GitHub supports multiple markup languages, we will explore Markdown as
    it is the most well-known one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create another page, named `Installation`, with some content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I have used several Markdown elements and hitting Preview will show you how
    the page will be rendered when it is saved. After you hit the Save Page button,
    the new Installation page will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some elements worth mentioning are the links. There are two kinds of links:
    external and internal. External ones are written by giving the full URL including
    the FQDN, whereas internal links only get called with the page name.'
  prefs: []
  type: TYPE_NORMAL
- en: You can have external links that display the actual URL by surrounding them
    with `<>`, such as `<https://duckduckgo.com>`, and you can also include some random
    text such as `[git clone](https://git-scm.com/docs/git-clone)`. Inside the brackets,
    you can add any text you want, followed by the actual link inside parentheses.
    Be careful to not leave any spaces between the second bracket and the first parenthesis.
  prefs: []
  type: TYPE_NORMAL
- en: Internal links are useful when you want to link to another page of your wiki.
    Imagine you have 42 pages and you have to type the whole URL whenever you want
    to refer to another page. GitHub implements MediaWiki's markup in that case. Use
    double brackets (`[[]]`), and inside them, put the name of the wiki page you want
    to link to. In our example, I used `[[Contributing]]` and this will create a link
    to another page. Notice that if the link does not exist, it is rendered in red.
    If you click on it, you will be redirected to create the page.
  prefs: []
  type: TYPE_NORMAL
- en: When creating headers, you use `#` before the text. The number of `#` defines
    the header style that will be used. Each header gets a separate anchor link, which
    you can see if you place your mouse over it on a saved page. This anchor link
    can then be used to reference internal links.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, you can see that I created three headers, namely  `Getting started`,
    `Contribute`, and `Alternative methods`. In `Getting started`, I placed an interlink
    with a reference to `Alternative methods`. The piece of Markdown that did this
    is `[[here|Installation#alternative-methods]]`. This style introduces two new
    areas to explore.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, you can see that an alternate text can be used much like with external
    links. The only difference is that both the alternate text and the link are placed
    inside the double brackets separated by a pipe (`|`). Secondly, you can see how
    the call to the internal reference link is made. The page title goes first followed
    by the octothorp sign (`#`) and last is the header. It is important to understand
    that the header, as part of the interlink, gets transformed, whereas empty spaces
    are replaced with hyphens (`-`) and all special characters (`?,'!`, and so on)
    are lost.
  prefs: []
  type: TYPE_NORMAL
- en: You can always use the preview to test whether an anchor link will be rendered
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Internal links are only supported inside the same wiki. You cannot link to another
    wiki with an internal link. In this case, you will have to use external links.
  prefs: []
  type: TYPE_NORMAL
- en: We have only scratched the surface regarding Markdown. You can read more about
    it in the nice cheat sheet at [https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet).
  prefs: []
  type: TYPE_NORMAL
- en: How to add a sidebar and a footer to your wiki
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have write access to a wiki, you should be able to see the Add a custom
    sidebar and Add a custom footer buttons.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub has a default sidebar where it places all the pages of the wiki. This
    might not be useful since they are shown in name order and sometimes you want
    users to be able to access important information without searching too much.
  prefs: []
  type: TYPE_NORMAL
- en: 'Much like any other wiki page, the sidebar can be written in a markup language
    that GitHub supports. In the following example, I used `Markdown`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, I used a bulleted list and placed links on each item. Indenting
    an item (one or more spaces) will provide the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Like the sidebar, you can also create your own custom footer. For example,
    I used two external links with custom text, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After all modifications, we get a nice wiki page with our custom sidebar and
    footer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Watching a wiki page's commit history and reverting to a previous state if needed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Would you be surprised if you were told that a wiki is essentially a separate
    Git repository? In the *Tips and tricks* section, we will see how to clone a wiki
    locally, make changes, and push back to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with all Git repositories, there are commits and a history log. Each page
    gets a filtered log of the commits and changes it has undergone. One quick way
    to access the history log is to click on the revisions link on each page. This
    can be found under each page title. Take, for example, the Home page which has
    three revisions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Another way to view a page's history is by using the Page History button which
    can be found when you edit a page.
  prefs: []
  type: TYPE_NORMAL
- en: One other way to see the history log is to append `/_history` to your page.
    So, for example, [https://github.com/axilleas/github-essentials-v2/wiki/Home](https://github.com/axilleas/github-essentials-v2/wiki/Home)
    becomes [https://github.com/axilleas/github-essentials-v2/wiki/Home/_history](https://github.com/axilleas/github-essentials-v2/wiki/Home/_history).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what my Home page log looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, you can get a lot of useful information. You
    can see that the username of the person who made the change comes up first in
    the history table. In this example, there is only mine, but in a wiki with many
    collaborators, you can easily tell who made what change. Then, you get the commit
    message which is super useful because you can tell from a glimpse what the change
    was about. The third column is about the time the change was made and, finally,
    there is the commit SHA of the change.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's use the power of reverting when things go south. Firstly, create
    a new page, save it, and then delete it. We cannot go to that specific page's
    history log since it is no longer there, so we need to head over to the main History
    page, the mother of all pages. Since this page is hidden, you need to manually
    append `/_history` to your main wiki page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to revert things, you need to use the Compare Revisions button. You
    can choose between one or two revisions to revert from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can tell the default GitHub commit messages from the custom ones since they
    follow the pattern `Created/Updated/Destroyed Title of page (language)`, where
    `language` is the markup language that was used to create the page.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we chose two, but since they are one after another in the commit history,
    choosing only the last one would be the same. It's like comparing the changes
    between `git show HEAD` and `git diff sha2 sha1`, where `sha2` is the last commit
    `SHA` and `sha1` is the one before it. The `diff` is the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'After hitting the `Compare Revisions` button, we will see the change that was
    introduced with this commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s bring back the deleted page by hitting the Revert Changes button. At
    the time of writing this book, every time I tried to revert the deletion of a
    page, I was presented with a 500 internal server error. Despite the error, go
    back to the History page, and you will see that the revert was indeed performed
    and the deleted page was brought back from the grave:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the commit message of the revert references the two commits
    that created and destroyed the page respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you will not be able to compare any two revisions and revert due
    to conflict. In this case, GitHub will warn you with a message: This patch was
    not able to be reversed.
  prefs: []
  type: TYPE_NORMAL
- en: That's all there is to know about GitHub wikis. Next we will focus on managing
    code releases with the tools GitHub provides.
  prefs: []
  type: TYPE_NORMAL
- en: Managing code versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of software management, almost every piece of software is shipped
    with a version. It is a way to declare its evolution over time, usually with the
    addition of enhancements or bug fixes. GitHub leverages the power of Git and provides
    a simple interface to ship your versioned software.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In GitHub, the notion of a release is tightly tied to Git tags. You can see
    the existing tags, if any, from the same menu where you change a branch, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you visit the Releases page and there is no tag created yet, you will be
    prompted to create one. Creating a release will automatically create a tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s click on the Create a new release button. The following page will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You only need to fill in the name of the Tag version box; everything else is
    optional. If the tag name you provide already exists, you will be presented with
    a duplicate tag name notification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your tag name can be any arbitrary value, but it is highly recommended to follow
    the semantic versioning scheme. To briefly describe what semantic versioning is:
    a release number consists of three numbers separated by dots in the form of `MAJOR.MINOR.PATCH`.
    You should then increment the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `MAJOR` version when you make incompatible API changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `MINOR` version when you add functionality in a backwards-compatible manner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `PATCH` version when you make backwards-compatible bug fixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read more at [http://semver.org/](http://semver.org/).
  prefs: []
  type: TYPE_NORMAL
- en: One great way to name your tags is to match the existing milestones. From the
    previous chapter, we already had a `v0.5` milestone so let's also name the new
    tag `v0.5`. Start typing it and if the tag does not exist, you will see the Excellent!
    This tag will be created from the target when you publish this release message.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can choose the target branch or commit from the drop-down menu as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you choose a branch, a tag pointing to the latest commit in that branch will
    be created. If you instead go to the Recent Commits tab, you can choose from a
    number of recent commits to create a tag from.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of our example, let's choose the master branch and enter a release
    title. Optionally, but recommended, you can add a description of what this release
    is about. I like to consider the description like writing a blog post of what
    changed in this release.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can, of course, use Markdown like almost everywhere in GitHub and use the
    Preview button to see how it will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you think everything is in order, hit the Publish release button. You can
    always edit any release anytime, so do not worry if you miss something. The following
    screenshot explains all the information about a release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If a release title is not provided, the tag name will be shown instead. Likewise,
    if a description is not provided, the latest commit message of the tag will be
    shown instead.
  prefs: []
  type: TYPE_NORMAL
- en: Editing a release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to edit a release, you can either click on the Edit release button
    next to the release under the Releases page or visit the particular release and
    click Edit there.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing a tag from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s see how GitHub behaves when a tag already exists. I made a few
    changes to a file and created a new tag from the command line. Finally, I pushed
    this tag to GitHub as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now visit the tags page, you will see the new tag above the one we made
    before. In the releases page, click on Draft a new release. We will choose an
    existing tag, so in the Tag version field, type `v0.5.1`. GitHub found out that
    the tag already exists so it informed us that this is an existing tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Give it a title, a brief description, and then publish it. Since the `v0.5.1`
    tag refers to the latest commit rather than the previous release, it now gets
    marked as Latest release.
  prefs: []
  type: TYPE_NORMAL
- en: Marking as pre-release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A nice little decorative feature is that you can mark a release as a prerelease,
    meaning you can inform the users that it''s not ready for production but that
    they can still download and test it. Let''s make a prerelease of the `develop`
    branch, which contains new commits that do not exist in `master` yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new release out of the `develop` branch and name it `v0.6rc1` . This
    time, mark it as a pre-release by ticking the relevant option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After publishing it, here is what the releases page will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Making a draft of a release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you tend to provide a detailed description with each release, you may find
    the draft feature quite useful. You can repeatedly edit a release while adding
    the required information and then save it as a draft. This way, you can spend
    less time on it when you need to publish it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make a draft of a release, do not click Publish release, but rather
    click the Save draft button. Back on the Releases page, you can see the draft
    release you just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can edit it as many times as you want, and when the time comes to publish
    it, just click Public release. To delete a draft, click on the Discard draft button.
  prefs: []
  type: TYPE_NORMAL
- en: Since you are working on a draft, you don't have to worry about changing the
    tag of the release or any other information for that matter. Drafts can only be
    viewed by those who have write access to the repository, so it is not shown to
    the public until they are published.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading your own files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are cases where you might want to provide precompiled binaries for a variety
    of operating systems. For your Android application, it would be the `apk` files;
    for Windows, `msi` or `exe`; for Debian, `deb`; for RedHat, `rpm`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you create a release, there is a window at the very bottom that tells
    you to attach any binaries. Here, I uploaded a test `github-essentials.zip` file
    as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can upload multiple files, but bear in mind that GitHub limits the upload
    size to 2 GB for each file. After you successfully upload the new binary and publish
    the release, you can see the files you manually attached along with the source
    code GitHub released for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tips and tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is a tip to get notified about new releases in an atom feed. Also, while
    you familiarize yourself with Git, you'll be happy to know that you can edit a
    project's wiki locally.
  prefs: []
  type: TYPE_NORMAL
- en: Subscribing to new releases via atom feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are used to subscribing to feeds to learn the news regarding your favorite
    blogs, you will be happy to know that you can subscribe to get notified about
    new releases on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Simply go to the releases page and append `.atom` to the end of the URL. For
    example, [https://github.com/diaspora/diaspora/releases](https://github.com/diaspora/diaspora/releases)
    becomes [https://github.com/diaspora/diaspora/releases.atom](https://github.com/diaspora/diaspora/releases.atom).
    Cool, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Editing the wiki locally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the wiki commit history section, every wiki is a separate git
    repository. As such, you can clone it, make changes locally, and push back to
    GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: It is powered by the `gollum` Ruby library that we will install and use to preview
    the wiki locally.
  prefs: []
  type: TYPE_NORMAL
- en: Installing gollum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `gollum` library is packaged as a Ruby gem, and the easiest and quickest
    way to install it is to follow the official wiki entry at [https://github.com/gollum/gollum/wiki/Installation](https://github.com/gollum/gollum/wiki/Installation).
    You can probably avoid installing it system-wide, but this is not within the scope
    of this guide.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the wiki and viewing the preview in your browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Back on our wiki page, you should have noticed the download link. Every wiki
    repository has a remote URL encapsulated in green as shown in the following screenshot;
    essentially, it is the URL of the main Git repository with `.wiki` appended to
    the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Use this URL and clone the wiki; then, run the `gollum` command inside that
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Although not stated, you can also clone the wiki using the Git protocol and
    not HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you see an output similar to the following, then `gollum` will successfully
    run and you can preview the wiki in your browser at `0.0.0.0:4567`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The interface should be familiar with the GitHub wiki. Let's make a few changes.
  prefs: []
  type: TYPE_NORMAL
- en: Making changes locally and pushing to GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have a running instance of the wiki, you can make changes in the
    browser much like in GitHub or use an editor such as `vim` or `emacs` and edit
    the files directly.
  prefs: []
  type: TYPE_NORMAL
- en: Since you already know how to edit the wiki in the browser, let's use an editor
    and change the `Installation.md` file. After the edit, save the file and commit
    it to Git. Take a second to see the log with `git log` and compare it with the
    history of the commits in GitHub (at `https://github.com/<username>/<repository>/wiki/_history`).
  prefs: []
  type: TYPE_NORMAL
- en: Now push the changes back to GitHub and visit the history page again. The new
    commit should be there along with the new change.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to write in a different markup language, other than Markdown, see
    the readme at [https://github.com/gollum/gollum#installation](https://github.com/gollum/gollum#installation)
    for ways to install the necessary gems.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the importance of documentation and how GitHub
    allows you to host a Markdown-powered wiki along with every project. Creating,
    deleting, editing, and reverting pages should by now be familiar terms.
  prefs: []
  type: TYPE_NORMAL
- en: What is the connection between releases and tags, you ask? Well, if you read
    the second part of this chapter, you should already know what connects them and
    how to create releases and distribute them to the public.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will see the management of organizations and teams.
    Read on and learn how to harness the power of collaboration.
  prefs: []
  type: TYPE_NORMAL
