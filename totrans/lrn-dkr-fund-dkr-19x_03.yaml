- en: Setting Up a Working Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we learned what Docker containers are and why they're important.
    We learned what kinds of problems containers solve in a modern software supply
    chain.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to prepare our personal or working environment
    to work efficiently and effectively with Docker. We will discuss in detail how
    to set up an ideal environment for developers, DevOps, and operators that can
    be used when working with Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Linux command shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and using a package manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Git and cloning the code repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing and installing a code editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker for Desktop on macOS or Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker Toolbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Minikube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need a laptop or a workstation with either macOS
    or Windows, preferably Windows 10 Professional, installed. You should also have
    free internet access to download applications and permission to install those
    applications on your laptop.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to follow along with this book if you have a Linux distribution
    as your operating system, such as Ubuntu 18.04 or newer. I will try to indicate
    where commands and samples differ significantly from the ones on macOS or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The Linux command shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker containers were first developed on Linux for Linux. It is hence natural
    that the primary command-line tool used to work with Docker, also called a shell,
    is a Unix shell; remember, Linux derives from Unix. Most developers use the Bash
    shell. On some lightweight Linux distributions, such as Alpine, Bash is not installed
    and consequently one has to use the simpler Bourne shell, just called *sh*. Whenever we are
    working in a Linux environment, such as inside a container or on a Linux VM, we
    will use either `/bin/bash` or `/bin/sh`, depending on their availability.
  prefs: []
  type: TYPE_NORMAL
- en: Although Apple's macOS X is not a Linux OS, Linux and macOS X are both flavors
    of Unix and hence support the same set of tools. Among those tools are the shells.
    So, when working on macOS, you will probably be using the Bash shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we expect from you a familiarity with the most basic scripting
    commands in Bash and PowerShell, if you are working on Windows. If you are an
    absolute beginner, then we strongly recommend that you familiarize yourself with
    the following cheat sheets:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Linux Command Line Cheat Sheet* by Dave Child at [http://bit.ly/2mTQr8l](http://bit.ly/2mTQr8l)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*PowerShell Basic Cheat Sheet* at [http://bit.ly/2EPHxze](http://bit.ly/2EPHxze)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On a Windows computer, laptop, or server, we have multiple command-line tools
    available. The most familiar is the command shell. It has been available on any
    Windows computer for decades. It is a very simple shell. For more advanced scripting,
    Microsoft has developed PowerShell. PowerShell is very powerful and very popular
    among engineers working on Windows. On Windows 10, finally, we have the so-called* Windows
    Subsystem for Linux*, which allows us to use any Linux tool, such as the Bash
    or Bourne shells. Apart from this, there are also other tools that install a Bash
    shell on Windows, for example, the Git Bash shell. In this book, all commands
    will use Bash syntax. Most of the commands also run in PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: Our recommendation for you is hence to either use PowerShell or any other Bash
    tool to work with Docker on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Using a package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to install software on a macOS or Windows laptop is to use a good package
    manager. On macOS, most people use Homebrew, and on Windows, Chocolatey is a good
    choice. If you're using a Debian-based Linux distribution such as Ubuntu, then
    the package manager of choice for most is `apt`, which is installed by default.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homebrew on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Homebrew is the most popular package manager on macOS, and it is easy to use
    and very versatile. Installing Homebrew on macOS is simple; just follow the instructions
    at [https://brew.sh/](https://brew.sh/):'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, open a new Terminal window and execute the following command
    to install Homebrew:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation is finished, test whether Homebrew is working by entering `brew
    --version` in the Terminal. You should see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are ready to use Homebrew to install tools and utilities. If we, for
    example, want to install the Vi text editor, we can do so like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will then download and install the editor for you.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Chocolatey on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chocolatey is a popular package manager for Windows, built on PowerShell. To
    install the Chocolatey package manager, please follow the instructions at [https://chocolatey.org/](https://chocolatey.org/) or
    open a new PowerShell window in admin mode and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It is important to run the preceding command as an administrator, otherwise,
    the installation will not succeed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Chocolatey is installed, test it with the `choco --version` command. You
    should see output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To install an application such as the Vi editor, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `-y` parameter makes sure that the installation happens without asking for
    reconfirmation.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that once Chocolatey has installed an application, you need to open
    a new PowerShell window to use that application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are using Git to clone the sample code accompanying this book from its GitHub
    repository. If you already have Git installed on your computer, you can skip this
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Git on your macOS, use the following command in a Terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Git on Windows, open a PowerShell window and use Chocolatey to install
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, on your Debian or Ubuntu machine, open a Bash console and execute
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Git is installed, verify that it is working. On all platforms, use the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This should output something along the lines of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that Git is working, we can clone the source code accompanying this book
    from GitHub. Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will clone the content of the master branch into your local folder, `~/fod-solution`.
    This folder will now contain all of the sample solutions for the labs we are going
    to do together in this book. Refer to these sample solutions if you get stuck.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have installed the basics, let's continue with the code editor.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a code editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a good code editor is essential to working productively with Docker. Of
    course, which editor is the best is highly controversial and depends on your personal
    preference. A lot of people use Vim, or others such as Emacs, Atom, Sublime, or **Visual
    Studio Code** (**VS Code**), to just name a few. VS Code is a completely free
    and lightweight editor, yet it is very powerful and is available for macOS, Windows,
    and Linux. According to Stack Overflow, it is currently by far the most popular
    code editor. If you are not yet sold on another editor, I highly recommend that
    you give VS Code a try.
  prefs: []
  type: TYPE_NORMAL
- en: But if you already have a favorite code editor, then please continue using it.
    As long as you can edit text files, you're good to go. If your editor supports
    syntax highlighting for Dockerfiles and JSON and YAML files, then even better.
    The only exception will be [Chapter 6](b6647803-2c5c-4b9d-9a4a-a836ac356329.xhtml),
    *Debugging Code Running in a Container*. The examples presented in that chapter
    will be heavily tailored toward VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new Terminal window and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once VS Code has been installed successfully, navigate to your home directory
    (`~`) and create a folder, `fundamentals-of-docker`; then navigate into this new
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open VS Code from within this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget the period (.) in the preceding command. VS will start and open
    the current folder (`~/fundamentals-of-docker`) as the working folder.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new PowerShell window in admin mode and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Close your PowerShell window and open a new one, to make sure VS Code is in
    your path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now navigate to your home directory and create a folder, `fundamentals-of-docker`;
    then navigate into this new folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally open Visual Studio Code from within this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget the period (.) in the preceding command. VS will start and open
    the current folder (`~\fundamentals-of-docker`) as the working folder.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On your Debian or Ubuntu-based Linux machine, open a Bash Terminal and execute
    the following statement to install VS Code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you're using a Linux distribution that's not based on Debian or Ubuntu, then
    please follow the following link for more details: [https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once VS Code has been installed successfully, navigate to your home directory
    (`~`) and create a folder, `fundamentals-of-docker`; then navigate into this new
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open Visual Studio Code from within this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget the period (.) in the preceding command. VS will start and open
    the current folder (`~/fundamentals-of-docker`) as the working folder.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Extensions are what make VS Code such a versatile editor. On all three platforms,
    macOS, Windows, and Linux, you can install VS Code extensions the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Bash console (or PowerShell in Windows) and execute the following group
    of commands to install the most essential extensions we are going to use in the
    upcoming examples in this book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We are installing extensions that enable us to work with Java, C#, .NET, and
    Python much more productively. We're also installing an extension built to enhance
    our experience with Docker.
  prefs: []
  type: TYPE_NORMAL
- en: After the preceding extensions have been installed successfully, restart VS
    Code to activate the extensions. You can now click the extensions icon in the
    activity pane on the left-hand side of VS Code to see all of the installed extensions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let's install Docker for Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker for Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using macOS or have Windows 10 Professional installed on your laptop,
    then we strongly recommend that you install Docker for Desktop. This platform
    gives you the best experience when working with containers.
  prefs: []
  type: TYPE_NORMAL
- en: Docker for Desktop is not supported on Linux at this time. Please refer to the
    *Installing Docker CE on Linux* section for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Note that older versions of Windows or Windows 10 Home edition cannot run Docker
    for Windows. Docker for Windows uses Hyper-V to run containers transparently in
    a VM but Hyper-V is not available on older versions of Windows; nor is it available
    in the Home edition of Windows 10\. In this case, we recommend that you use Docker
    Toolbox instead, which we will describe in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: No matter what OS you're using, navigate to the Docker start page at [https://www.docker.com/get-started](https://www.docker.com/get-started).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the right-hand side of the loaded page, you'll find a big blue button saying
    Download Desktop and Take a Tutorial. Click this button and follow the instructions.
    You will be redirected to Docker Hub. If you don't have an account on Docker Hub
    yet, then create one. It is absolutely free, but you need an account to download
    the software. Otherwise, just log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you''re logged in, look out for this on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e00d0017-d436-41eb-b4f0-f7b35a4e5c8a.png)'
  prefs: []
  type: TYPE_IMG
- en: Download Docker Desktop on Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the blue Download Docker Desktop button. You should then see a screen
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c9a4cfdc-fdbb-44dd-bbaf-7999541220a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Download screen for Docker for Desktop for macOS
  prefs: []
  type: TYPE_NORMAL
- en: Note that if you're on a Windows PC, the blue button will say Download Docker
    Desktop for Windows instead.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker for Desktop on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have successfully installed Docker for Desktop for macOS, please open
    a Terminal window and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c44f8efb-03f9-4991-8911-1baf60e21c35.png)'
  prefs: []
  type: TYPE_IMG
- en: Docker version on Docker for Desktop
  prefs: []
  type: TYPE_NORMAL
- en: 'To see whether you can run containers, enter the following command into the
    terminal window and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If all goes well, your output should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1601a10a-3104-4c94-bdf7-9f5fbd3df2aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Running Hello-World on Docker for Desktop for macOS
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will install Docker on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker for Desktop on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have successfully installed Docker for Desktop for Windows, please
    open a PowerShell window and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To see whether you can run containers, enter the following command into the
    PowerShell window and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: If all goes well, your output should look similar to the preceding figure.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker CE on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, Docker for Desktop is only available for macOS and Windows
    10 Pro. If you're using a Linux machine, then you can use the Docker **Community**
    **Edition** (**CE**), which consists of Docker Engine, plus a few additional tools,
    such as the Docker **Command Line Interface** (**CLI**) and `docker-compose`.
  prefs: []
  type: TYPE_NORMAL
- en: Please follow the instructions at the following link to install Docker CE for
    your particular Linux distribution—in this case, Ubuntu: [https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Toolbox has been available for developers for a few years. It precedes
    newer tools such as Docker for Desktop. The Toolbox allows a user to work very
    elegantly with containers on any macOS or Windows computer. Containers must run
    on a Linux host. Neither Windows nor macOS can run containers natively. Hence,
    we need to run a Linux VM on our laptop, where we can then run our containers.
    Docker Toolbox installs VirtualBox on our laptop, which is used to run the Linux
    VMs we need.
  prefs: []
  type: TYPE_NORMAL
- en: As a Windows user, you might already be aware that there are so-called Windows
    containers that run natively on Windows, and you are right. Microsoft has ported
    Docker Engine to Windows and it is possible to run Windows containers directly
    on Windows Server 2016 or newer, without the need for a VM. So, now we have two
    flavors of containers, Linux containers and Windows containers. The former only
    runs on a Linux host and the latter only runs on a Windows server. In this book,
    we are exclusively discussing Linux containers, but most of the things we'll learn
    also apply to Windows containers.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in Windows containers, we strongly recommend the book *Docker
    on Windows, Second Edition*: [https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition).
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by installing the Docker Toolbox on a macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Toolbox on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new Terminal window and use Homebrew to install the toolbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f323a67a-9f10-4c81-935d-45dcc77c5e19.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Docker Toolbox on macOS
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that Docker Toolbox has been installed successfully, try to access
    `docker-machine` and `docker-compose`, two tools that are part of the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will install Docker Toolbox on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Toolbox on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open a new Powershell window in admin mode and use Chocolatey to install Docker
    Toolbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3d8eb48-3017-4bd2-a27b-c89e7aad66f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Docker Toolbox on Windows 10
  prefs: []
  type: TYPE_NORMAL
- en: We will now be setting up Docker Toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Docker Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps for setup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use `docker-machine` to set up our environment. First, we list all Docker-ready
    VMs we have currently defined on our system. If you have just installed Docker
    Toolbox, you should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca24a687-1929-473d-9ba7-7e68294fea9f.png)'
  prefs: []
  type: TYPE_IMG
- en: List of all Docker-ready VMs
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, we can see that there is a single VM called `default` installed, but it
    is currently in the `STATE` of `stopped`. Let''s use `docker-machine` to start
    this VM so we can work with it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4eb6cf4e-c51b-4946-8e4f-d140f2fafd9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Starting the default VM in Docker Toolbox
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now list the VMs again, we should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0adc5a3b-7c37-4ccc-a004-5b2cc76aabdb.png)'
  prefs: []
  type: TYPE_IMG
- en: Listing the running VMs in Docker Toolbox
  prefs: []
  type: TYPE_NORMAL
- en: The IP address used might be different in your case, but it will definitely be in
    the `192.168.0.0/24` range. We can also see that the VM has Docker version `18.06.1-ce` installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, for some reason, you don''t have a default VM or you have accidentally
    deleted it, you can create it using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ab00ba7-5fd8-432f-a234-8ccd5ef4de10.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new default VM in Docker Toolbox
  prefs: []
  type: TYPE_NORMAL
- en: If you carefully analyze the preceding output, you will see that `docker-machine`
    automatically downloaded the newest ISO file for the VM from Docker. It realized
    that my current version was outdated and replaced it with version `v18.09.6`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how to connect your Docker client to the Docker Engine running on this
    virtual machine, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute the command listed on the last line in the preceding code snippet
    to configure our Docker CLI to use Docker running on the `default` VM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we can execute the first Docker command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This should result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8072de88-4665-4b5a-b5a5-f3994515624b.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of docker version
  prefs: []
  type: TYPE_NORMAL
- en: We have two parts here, the client and the server part. The client is the CLI
    running directly on your macOS or Windows laptop, while the server part is running
    on the `default` VM in VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to run a container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba44f8ff-7ebe-4840-9466-a7a136e67152.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding output confirms that Docker Toolbox is working as expected and
    can run containers.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Toolbox is a great addition even when you normally use Docker for Desktop
    for your development with Docker. Docker Toolbox allows you to create multiple
    Docker hosts (or VMs) in VirtualBox and connect them to a cluster, on top of which
    you can run Docker Swarm or Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Minikube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you cannot use Docker for Desktop or, for some reason, you only have access
    to an older version of the tool that does not yet support Kubernetes, then it
    is a good idea to install Minikube. Minikube provisions a single-node Kubernetes
    cluster on your workstation and is accessible through `kubectl`, which is the
    command-line tool used to work with Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Minikube on macOS and Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install Minikube for macOS or Windows, navigate to the following link: [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/).
  prefs: []
  type: TYPE_NORMAL
- en: Follow the instructions carefully. If you have Docker Toolbox installed, then
    you already have a hypervisor on your system since the Docker Toolbox installer
    also installed VirtualBox. Otherwise, I recommend that you install VirtualBox
    first.
  prefs: []
  type: TYPE_NORMAL
- en: If you have Docker for macOS or Windows installed, then you already have `kubectl` installed
    with it, so you can skip that step too. Otherwise, follow the instructions on
    the site.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Minikube and kubectl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once Minikube is successfully installed on your workstation, open a Terminal
    and test the installation. First, we need to start Minikube. Enter `minikube start` at
    the command line. This command may take a few minutes or so to complete. The output
    should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/918657bb-5dc5-4eca-8220-4139caa69112.png)'
  prefs: []
  type: TYPE_IMG
- en: Starting Minikube
  prefs: []
  type: TYPE_NORMAL
- en: Note, your output may look slightly different. In my case, I am running Minikube
    on a Windows 10 Pro computer. On a Mac notifications are quite different, but
    this doesn't matter here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter `kubectl version` and hit *En**ter* to see something like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b695efb9-10b2-4ee8-9877-020e89021230.png)'
  prefs: []
  type: TYPE_IMG
- en: Determining the version of the Kubernetes client and server
  prefs: []
  type: TYPE_NORMAL
- en: 'If the preceding command fails, for example, by timing out, then it could be
    that your `kubectl` is not configured for the right context. `kubectl` can be
    used to work with many different Kubernetes clusters. Each cluster is called a
    context. To find out which context `kubectl` is currently configured for, use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The answer should be `minikube`, as shown in the preceding output. If this
    is not the case, use `kubectl config get-contexts` to list all contexts that are
    defined on your system and then set the current context to `minikube`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The configuration for `kubectl`, where it stores the contexts, is normally found
    in `~/.kube/config`, but this can be overridden by defining an environment variable
    called `KUBECONFIG`. You might need to unset this variable if it is set on your
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: For more in-depth information about how to configure and use Kubernetes contexts,
    consult the link at [https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming Minikube and `kubectl` work as expected, we can now use `kubectl` to
    get information about the Kubernetes cluster. Enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Evidently, we have a cluster of one node, which in my case has Kubernetes` v1.17.3`
    installed on it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we set up and configured our personal or working environment
    so that we can productively work with Docker containers. This equally applies
    for developers, DevOps, and operations engineers. In that context, we make sure
    that we use a good editor, have Docker for macOS or Docker for Windows installed,
    and can use `docker-machine` to create VMs in VirtualBox or Hyper-V, which we
    can then use to run and test containers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to learn all of the important facts about containers.
    For example, we will explore how we can run, stop, list, and delete containers,
    but more than that, we will also dive deep into the anatomy of containers.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Based on your reading of this chapter, please answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is `docker-machine` used for? Name three to four scenarios.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With Docker for Windows, you can develop and run Linux containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. True
  prefs: []
  type: TYPE_NORMAL
- en: B. False
  prefs: []
  type: TYPE_NORMAL
- en: Why are good scripting skills (such as Bash or PowerShell) essential for the
    productive use of containers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name three to four Linux distributions on which Docker is certified to run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name all of the Windows versions on which you can run Windows containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following links for further reading:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chocolatey - The Package Manager for Windows* at[https://chocolatey.org/](https://chocolatey.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Install Docker Toolbox on Windows:* [https://dockr.ly/2nuZUkU](https://dockr.ly/2nuZUkU)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Run Docker on Hyper-V with Docker Machine* at [http://bit.ly/2HGMPiI](http://bit.ly/2HGMPiI)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Developing inside a Container* at [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
