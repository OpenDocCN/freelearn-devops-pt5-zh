["```\nvagrant up cd prod\n\nvagrant ssh cd\n\nansible-playbook /vagrant/ansible/prod2.yml \\\n-i /vagrant/ansible/hosts/prod\n\n```", "```\nmkdir books-ms\n\ncd books-ms\n\nwget https://raw.githubusercontent.com/vfarcic\\\n/books-ms/master/docker-compose.yml\n\nwget https://raw.githubusercontent.com/vfarcic\\\n/books-ms/master/nginx-includes.conf\n\nwget https://raw.githubusercontent.com/vfarcic\\\n/books-ms/master/nginx-upstreams-blue.ctmpl\n\nwget https://raw.githubusercontent.com/vfarcic\\\n/books-ms/master/nginx-upstreams-green.ctmpl\n\n```", "```\n...\nbase:\n image: 10.100.198.200:5000/books-ms\n ports:\n - 8080\n environment:\n - SERVICE_NAME=books-ms\n\napp-blue:\n extends:\n service: base\n environment:\n - SERVICE_NAME=books-ms-blue\n links:\n - db:db\n\napp-green:\n extends:\n service: base\n environment:\n - SERVICE_NAME=books-ms-green\n links:\n - db:db\n...\n\n```", "```\nexport DOCKER_HOST=tcp://prod:2375\n\ndocker-compose pull app-blue\n\ndocker-compose up -d app-blue\n\n```", "```\ndocker-compose ps\n\ncurl prod:8500/v1/catalog/service/books-ms-blue \\\n | jq '.'\n\n```", "```\n Name              Command     State                     Ports\n----------------------------------------------------------------\nbooksms_app-blue_1   /run.sh      Up      0.0.0.0:32768->8080/tcp\nbooksms_db_1         /entrypoint.sh mongod   Up         27017/tcp\n...\n[\n {\n \"ModifyIndex\": 38,\n \"CreateIndex\": 38,\n \"Node\": \"prod\",\n \"Address\": \"10.100.198.201\",\n \"ServiceID\": \"prod:booksms_app-blue_1:8080\",\n \"ServiceName\": \"books-ms-blue\",\n \"ServiceTags\": [],\n \"ServiceAddress\": \"10.100.198.201\",\n \"ServicePort\": 32768,\n \"ServiceEnableTagOverride\": false\n }\n]\n\n```", "```\ncurl -I prod/api/v1/books\n\n```", "```\nHTTP/1.1 404 Not Found\nServer: nginx/1.9.9\nDate: Sun, 03 Jan 2016 20:47:59 GMT\nContent-Type: text/html\nContent-Length: 168\nConnection: keep-alive\n\n```", "```\nupstream books-ms {\n {{range service \"books-ms-blue\" \"any\"}}\n server {{.Address}}:{{.Port}};\n {{end}}\n}\n\n```", "```\nconsul-template \\\n -consul prod:8500 \\\n -template \"nginx-upstreams-blue.ctmpl:nginx-upstreams.conf\" \\\n -once\n\n```", "```\ncat nginx-upstreams.conf\n\n```", "```\nupstream books-ms {\n server 10.100.198.201:32769;\n}\n\n```", "```\nscp nginx-includes.conf \\\n prod:/data/nginx/includes/books-ms.conf\n\nscp nginx-upstreams.conf \\\n prod:/data/nginx/upstreams/books-ms.conf\n\ndocker kill -s HUP nginx\n\n```", "```\ncurl -I prod/api/v1/books\n\n```", "```\nHTTP/1.1 200 OK\nServer: nginx/1.9.9\nDate: Sun, 03 Jan 2016 20:51:12 GMT\nContent-Type: application/json; charset=UTF-8\nContent-Length: 2\nConnection: keep-alive\nAccess-Control-Allow-Origin: *\n\n```", "```\ndocker-compose pull app-green\n\ndocker-compose up -d app-green\n\n```", "```\ndocker-compose ps\n\n```", "```\n Name           Command     State                     Ports\n-----------------------------------------------------------------\nbooksms_app-blue_1     /run.sh    Up      0.0.0.0:32769->8080/tcp\nbooksms_app-green_1    /run.sh    Up      0.0.0.0:32770->8080/tcp\nbooksms_db_1           /entrypoint.sh mongod   Up      27017/tcp\n\n```", "```\ncurl prod:8500/v1/catalog/services \\\n | jq '.'\n\n```", "```\n{\n \"dockerui\": [],\n \"consul\": [],\n \"books-ms-green\": [],\n \"books-ms-blue\": []\n}\n\n```", "```\ncurl prod:8500/v1/catalog/service/books-ms-green \\\n | jq '.'\n\n```", "```\ncurl -I prod/api/v1/books\n\ndocker logs nginx\n\n```", "```\n\"GET /api/v1/books HTTP/1.1\" 200 201 \"-\" \"curl/7.35.0\" \"-\" 10.100.198.201:32769\n\"GET /api/v1/books HTTP/1.1\" 200 201 \"-\" \"curl/7.35.0\" \"-\" 10.100.198.201:32769\n\n```", "```\nconsul-template \\\n -consul prod:8500 \\\n -template \"nginx-upstreams-green.ctmpl:nginx-upstreams.conf\" \\\n -once\n\nscp nginx-upstreams.conf \\\n prod:/data/nginx/upstreams/books-ms.conf\n\ndocker kill -s HUP nginx\n\n```", "```\ncurl -I prod/api/v1/books\n\ndocker logs nginx\n\n```", "```\n\"GET /api/v1/books HTTP/1.1\" 200 201 \"-\" \"curl/7.35.0\" \"-\" 10.100.198.201:32769\n\"GET /api/v1/books HTTP/1.1\" 200 201 \"-\" \"curl/7.35.0\" \"-\" 10.100.198.201:32769\n\"GET /api/v1/books HTTP/1.1\" 200 201 \"-\" \"curl/7.35.0\" \"-\" 10.100.198.201:32770\n\n```", "```\ndocker-compose stop app-blue\n\ndocker-compose ps\n\n```", "```\nName               Command      State                       Ports\n-----------------------------------------------------------------\nbooksms_app-blue_1    /run.sh                            Exit 137\nbooksms_app-green_1   /run.sh    Up       0.0.0.0:32770->8080/tcp\nbooksms_db_1   /entrypoint.sh mongod     Up             27017/tcp\n\n```", "```\ncurl prod:8500/v1/catalog/services | jq '.'\n\n```", "```\n{\n \"dockerui\": [],\n \"consul\": [],\n \"books-ms-green\": []\n}\n\n```", "```\ncurl -I prod/api/v1/books\n\n```", "```\ndocker-compose stop\n\ndocker-com\npose rm -f\n\n```", "```\n#!/usr/bin/env bash\n\nSERVICE_NAME=$1\nPROD_SERVER=$2\n\nCURR_COLOR=`curl \\\n http://$PROD_SERVER:8500/v1/kv/$SERVICE_NAME/color?raw`\n\nif [ \"$CURR_COLOR\" == \"blue\" ]; then\n echo \"green\"\nelse\n echo \"blue\"\nfi\n\n```", "```\necho '#!/usr/bin/env bash\n\nSERVICE_NAME=$1\nPROD_SERVER=$2\n\nCURR_COLOR=`curl \\\n http://$PROD_SERVER:8500/v1/kv/$SERVICE_NAME/color?raw`\n\nif [ \"$CURR_COLOR\" == \"blue\" ]; then\n echo \"green\"\nelse\n echo \"blue\"\nfi\n' | tee get-color.sh\n\nchmod +x get-color.sh\n\n```", "```\nNEXT_COLOR=`./get-color.sh books-ms prod`\n\nexport DOCKER_HOST=tcp://prod:2375\n\ndocker-compose pull app-$NEXT_COLOR\n\ndocker-compose up -d app-$NEXT_COLOR\n\n```", "```\necho '#!/usr/bin/env bash\n\nSERVICE_NAME=$1\nPROD_SERVER=$2\nCOLOR=$3\n\necho `curl \\\n $PROD_SERVER:8500/v1/catalog/service/$SERVICE_NAME-$COLOR \\\n | jq \".[0].ServicePort\"`\n' | tee get-port.sh\n\nchmod +x get-port.sh\n\n```", "```\nNEXT_PORT=`./get-port.sh books-ms prod $NEXT_COLOR`\n\necho $NEXT_PORT\n\n```", "```\ncurl -I prod:$NEXT_PORT/api/v1/books\n\n```", "```\nconsul-template \\\n -consul prod:8500 \\\n -template \"nginx-upstreams-$NEXT_COLOR.ctmpl:nginx-upstreams.conf\" \\\n -once\n\nscp nginx-upstreams.conf \\\n prod:/data/nginx/upstreams/books-ms.conf\n\ndocker kill -s HUP nginx\n\n```", "```\ncurl -I prod/api/v1/books\n\n```", "```\ncurl -X PUT -d $NEXT_COLOR \\\n prod:8500/v1/kv/books-ms/color\n\nCURR_COLOR=`./get-color.sh books-ms prod`\n\ndocker-compose stop app-$CURR_COLOR\n\n```", "```\nNEXT_COLOR=`./get-color.sh books-ms prod`\n\ndocker-compose pull app-$NEXT_COLOR\n\ndocker-compose up -d app-$NEXT_COLOR\n\nNEXT_PORT=`./get-port.sh books-ms prod $NEXT_COLOR`\n\nconsul-template \\\n -consul prod:8500 \\\n -template \"nginx-upstreams-$NEXT_COLOR.ctmpl:nginx-upstreams.conf\" \\\n -once\n\nscp nginx-upstreams.conf \\\n prod:/data/nginx/upstreams/books-ms.conf\n\ndocker kill -s HUP nginx\n\ncurl -I prod/api/v1/books\n\ncurl -X PUT -d $NEXT_COLOR \\\n prod:8500/v1/kv/books-ms/color\n\nCURR_COLOR=`./get-color.sh books-ms prod`\n\ndocker-compose stop app-$CURR_COLOR\n\ncurl -I prod/api/v1/books\n\ndocker-compose ps\n\n```", "```\ndocker logs nginx\n\n```", "```\nexit\n\nvagr\nant destroy -f\n\n```", "```\nvagrant up cd prod\n\nvagrant ssh cd\n\nansible-playbook /vagrant/ansible/prod2.yml \\\n -i /vagrant/ansible/hosts/prod\n\nansible-playbook /vagrant/ansible/jenkins-node.yml \\\n -i /vagrant/ansible/hosts/prod\n\nansible-playbook /vagrant/ansible/jenkins.yml \\\n -c local\n\n```", "```\nnode(\"cd\") {\n def serviceName = \"books-ms\"\n def prodIp = \"10.100.198.201\"\n def proxyIp = \"10.100.198.201\"\n def proxyNode = \"prod\"\n def registryIpPort = \"10.100.198.200:5000\"\n\n def flow = load \"/data/scripts/workflow-util.groovy\"\n\n git url: \"https://github.com/vfarcic/${serviceName}.git\"\n flow.provision(\"prod2.yml\")\n flow.buildTests(serviceName, registryIpPort)\n flow.runTests(serviceName, \"tests\", \"\")\n flow.buildService(serviceName, registryIpPort)\n\n def currentColor = flow.getCurrentColor(serviceName, prodIp)\n def nextColor = flow.getNextColor(currentColor)\n\n flow.deployBG(serviceName, prodIp, nextColor)\n flow.runBGPreIntegrationTests(serviceName, prodIp, nextColor)\n flow.updateBGProxy(serviceName, proxyNode, nextColor)\n flow.runBGPostIntegrationTests(serviceName, prodIp, proxyIp, proxyNode, currentColor, nextColor)\n}\n\n```", "```\ndef getCurrentColor(serviceName, prodIp) {\n try {\n return sendHttpRequest(\"http://${prodIp}:8500/v1/kv/${serviceName}/color?raw\")\n } catch(e) {\n return \"\"\n }\n}\n\ndef getNextColor(currentColor) {\n if (currentColor == \"blue\") {\n return \"green\"\n } else {\n return \"blue\"\n }\n}\n\n```", "```\ndef deployBG(serviceName, prodIp, color) {\n stage \"Deploy\"\n withEnv([\"DOCKER_HOST=tcp://${prodIp}:2375\"]) {\n sh \"docker-compose pull app-${color}\"\n sh \"docker-compose -p ${serviceName} up -d app-${color}\"\n }\n}\n\n```", "```\ndef runBGPreIntegrationTests(serviceName, prodIp, color) {\n stage \"Run pre-integration tests\"\n def address = getAddress(serviceName, prodIp, color)\n try {\n runTests(serviceName, \"integ\", \"-e DOMAIN=http://${address}\")\n } catch(e) {\n stopBG(serviceName, prodIp, color);\n error(\"Pre-integration tests failed\")\n }\n}\n\n```", "```\ndef updateBGProxy(serviceName, proxyNode, color) {\n stage \"Update proxy\"\n stash includes: 'nginx-*', name: 'nginx'\n node(proxyNode) {\n unstash 'nginx'\n sh \"sudo cp nginx-includes.conf /data/nginx/includes/${serviceName}.conf\"\n sh \"sudo consul-template \\\n -consul localhost:8500 \\\n -template \\\"nginx-upstreams-${color}.ctmpl:/data/nginx/upstreams/${serviceName}.conf:docker kill -s HUP nginx\\\" \\\n -once\"\n sh \"curl -X PUT -d ${color} http://localhost:8500/v1/kv/${serviceName}/color\"\n }\n}\n\n```", "```\ndef runBGPostIntegrationTests(serviceName, prodIp, proxyIp, proxyNode, currentColor, nextColor) {\n stage \"Run post-integration tests\"\n try {\n runTests(serviceName, \"integ\", \"-e DOMAIN=http://${proxyIp}\")\n } catch(e) {\n if (currentColor != \"\") {\n updateBGProxy(serviceName, proxyNode, currentColor)\n }\n stopBG(serviceName, prodIp, nextColor);\n error(\"Post-integration tests failed\")\n }\n stopBG(serviceName, prodIp, currentColor);\n}\n\n```", "```\nexport DOCKER_HOST=tcp://prod:2375\n\ndocker ps -a --filter name=books --format \"table {{.Names}}\"\n\n```", "```\nNAMES\nbooksms_app-blue_1\nbooksms_db_1\n\n```", "```\ncurl prod:8500/v1/catalog/services | jq '.'\n\ncurl prod:8500/v1/catalog/service/books-ms-blue | jq '.'\n\n```", "```\n{\n \"dockerui\": [],\n \"consul\": [],\n \"books-ms-blue\": []\n}\n...\n[\n {\n \"ModifyIndex\": 461,\n \"CreateIndex\": 461,\n \"Node\": \"prod\",\n \"Address\": \"10.100.198.201\",\n \"ServiceID\": \"prod:booksms_app-blue_1:8080\",\n \"ServiceName\": \"books-ms-blue\",\n \"ServiceTags\": [],\n \"ServiceAddress\": \"10.100.198.201\",\n \"ServicePort\": 32780,\n \"ServiceEnableTagOverride\": false\n }\n]\n\n```", "```\ncurl prod:8500/v1/kv/books-ms/color?raw\n\ncurl -I prod/api/v1/books\n\n```", "```\nexit\n\nvagrant destroy -f\n\n```"]