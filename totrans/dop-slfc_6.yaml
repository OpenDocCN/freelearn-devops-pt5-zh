- en: Continuous Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about the importance of version control
    systems in projects and how we can achieve version control in our Salesforce project.
    We looked at instructions for how to set up our own GitLab server and push metadata
    from the Salesforce organization to the Git repository. After following the steps
    to install Git on a developer machine and sync it with the Salesforce sandbox,
    developers will be able to make and save their changes in the Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn about how we can use Git integration with Jenkins
    to automate backups and the deployment of Salesforce metadata. We will discuss
    Jenkins and look at how continuous integration is achieved in Salesforce using
    Jenkins and the Ant Migration Tool. We will look at how to configure the Ant Migration
    Tool with Jenkins and and how to configure a Jenkins job to retrieve metadata
    from the sandbox. We will cover step-by-step instructions for deploying changes
    to UAT or a testing environment using Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Jenkins?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Ant Migration Tool with Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing sandbox credentials to Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Jenkins job to retrieve metadata from a sandbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Jenkins job to deploy metadata on a sandbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Jenkins?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is a continuous integration server written in Java. Jenkins is an open
    source automation server. You can install it on your machine easily. Jenkins can
    be installed on Windows, macOS, and Linux machines. Jenkins is easily configurable
    and has many plugins to support continuous integration and deployment. If you
    have experience of using containers, you can use Docker to install Jenkins using
    Docker images from the registry.
  prefs: []
  type: TYPE_NORMAL
- en: CI using Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous integration entails developers pushing their code to a shared repository
    and testing it using regular builds so that they can detect problems in the code
    gradually.
  prefs: []
  type: TYPE_NORMAL
- en: There are several tools that can be used to achieve continuous integration.
  prefs: []
  type: TYPE_NORMAL
- en: Using continuous integration, you can easily back-track where things have gone
    wrong in the code. If you don't follow continuous integration, it will be more
    difficult and expensive to detect errors in the code at the production stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of CI tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TeamCity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Travis CI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go CD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bamboo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we are going to use Jenkins to achieve continuous integration.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins is an open source, cross-platform CI tool. Jenkins has ability to add
    plugins, which makes it very flexible and easy to integrate. You can configure
    CI using the UI as well as commands.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Jenkins server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the Jenkins server installation on a Windows server. Installation
    on the Linux server has already been covered in [Chapter 2](92e8e2f1-2836-46d5-bfc4-7876cf9b8a9f.xhtml),
    *Applying DevOps to Salesforce Applications.* We will cover Jenkins server installation
    on a Windows machine here so that Windows users can get an idea about the setup.
  prefs: []
  type: TYPE_NORMAL
- en: The following are the hardware and software requirements for installation of
    the Jenkins server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The hardware requirements are:'
  prefs: []
  type: TYPE_NORMAL
- en: 256 MB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 GB of drive space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The software requirements are:'
  prefs: []
  type: TYPE_NORMAL
- en: Java 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A web browser: Jenkins is supported by most of popular web browsers, such as
    Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and the latest version
    of Apple Safari'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the latest Jenkins server package for Windows at the following website
    [http://mirrors.jenkins.io/windows/latest](http://mirrors.jenkins.io/windows/latest).
    You will get the latest ZIP file on your machine of the version of the Jenkins
    package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the download is completed, extract the ZIP file and start the installation
    by double-clicking on the `jenkins.msi` file. Follow the Jenkins setup wizard
    to complete the Jenkins server installation. Choose the path for the Jenkins server
    installation and click on Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f59f533-24f7-4693-9bfc-c21eb0013f22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, click on Install to proceed with the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9104091-7d45-4cb9-9016-4901b3593ed0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the Jenkins installation is done, you need to configure the Jenkins server.
    Visit `http://<Server-IP-address>:8080` if the setup has been done on a local
    machine for testing. You can access the Jenkins server at [`http://localhost:8080`](http://localhost:8080).
    You will need to wait for some time if you see a message such as Please wait while
    Jenkins is getting ready to work...:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be45e823-f63f-4440-87fc-2dc9a576275b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To unlock the Jenkins server, you need to provide the default Jenkins password
    stored at the following location: `C:\Program Files (x86)\Jenkins\secrets\initialAdminPassword`.
    For a Linux machine, the path will be different.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, we will be able to choose plugins to install in the Jenkins
    server. Click on Select plugins to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e971faf-0096-45aa-9c16-f48852960606.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will only choose Ant Plugin and Git Plugin, as we can install other plugins
    after the basic setup is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25693d51-ae4d-494d-bb8b-df5b1b0eacc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the next page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2975f11-a07f-4567-aa1f-7a63b64c8f05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the plugin installation has been completed, in Create First Admin User provide
    a Username, Password, Full name, and E-mail address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2308a870-5995-493b-8ca0-7f89d755d0f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save and Finish to complete the Jenkins setup.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Ant Migration Tool with Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To communicate with Salesforce, we need to install the Ant Migration Tool on
    the Jenkins server. We have already covered the installation steps for the Ant
    Migration Tool in [Chapter 4](6f12a8fb-da46-4121-ab9f-415af1276871.xhtml), *Introduction
    to the Force.com Migration Tool*. Install the Ant Migration Tool on the Jenkins
    server and configure the path in Jenkins. Once you install the Ant plugin in Jenkins,
    you will get the option to Invoke Ant in the Add build step  dropdown menu for
    your Jenkins Job, which will run `build.xml` and perform the tasks mentioned in
    the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48410d95-a933-48f4-b3ad-8b2c784b2382.png)'
  prefs: []
  type: TYPE_IMG
- en: When the developer triggers the Jenkins Job, we will select Invoke Ant to retrieve
    the Salesforce metadata. Once the build is successful, we will have the metadata
    in the directory and trigger the Jenkins job to push the metadata from Jenkins
    to the GitLab repository. Verify the metadata in the GitLab repository.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will set the global credentials in Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Manage Jenkins and select Global Tool Configuration. On your machine,
    the executable file can be different. Go to the Git section and provide Path to
    Git executable as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83a91bed-0dce-4300-abb8-ccb1c5beb369.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring a Jenkins job to retrieve metadata from a sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have created the Git repository with the metadata from the Salesforce Production
    organization in [Chapter 5](45e26817-986f-4fa4-a9c3-3044e7aad5da.xhtml), *Version
    Control*. We will use the same sample project and GitLab repository, `Salesforce_demo`,
    with the current production code from the Salesforce Sandbox. The instructions
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the branch to retrieve code from the sandbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in to the Jenkins server and click on New Item to create a Jenkins job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/08692ed5-6b53-41bb-8a4b-d831e181d3c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Give the name `Retrive_sandbox_to_git` to the Jenkins job. As we are working
    on an Ant build project, select Build a Free-style Project. Click OK. The Freestyle
    project type is used to create a Jenkins project with any SCM using any build
    system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/684e37f5-2d15-4297-8858-f2dff196501f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Configure the job. After the job has been created, we will go to the job configuration
    page. In the General tab, provide the project name and description, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project Name: `Retrive_sandbox_to_git`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Description: Job to retrieve metadata from sandbox and push to Git.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Source Code Management: Keep it as None, as we don''t need SCM for this job.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Build Triggers: Do not choose any trigger.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Build Environment: Select Add timestamp to console output if available:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/33bb1266-d791-4f90-b8dc-e0f53930ad43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Invoke Ant from the Add build step dropdown menu and provide the path
    for `build.xml` to retrieve the metadata from the sandbox to the Jenkins workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ebc36f3a-52e3-4387-97f6-7f720d4ab966.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Configure the build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Targets: Leave the target empty. Here, you can specify a list of targets you
    want to run. If we leave it empty, the target specified in the build script will
    be executed.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build File: The location of `build.xml` is at `<JENKINS_WORKSPACE>/<ITEM-NAME>`.
    You can specify your build file here; by default Ant will use `build.xml` in the
    root directory. The workspace root directory is at: `<JENKINS_WORKSPACE>/$ITEM_NAME`.
    Example: Building in workspace `<JENKoNS_WORKSPACE>/Retrive_SandBox_to_Git`.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Java Options: `<-Xmn1024m>` provide the Java memory limit, because the job
    will throw error if its less.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The sample `build.xml` is as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will retrieve an unpackaged set of metadata from your organization. In
    `retrieveTarget`, mention the path where the metadata will be stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ffa82e6-d041-4187-a1d5-fc33963abfc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Post-build Actions, we will execute a shell script to perform a Git push
    to the `sandbox_to_git` branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Trigger job `Retrive_SandBox_to_Git2`. It will push all the code retrieved by
    the `Build.xml` script in `DevOps/src`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some sample commands to push code in the Git repository:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the job: Make sure the project is *enabled* in Jenkins. Select it from
    the list of projects, and click Build Now.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the Console Output. After the build, click Build Details and you can
    also refer to the Console Output and check if there are any errors on the build
    script:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e72e0ebb-d675-4e7e-8c33-555daece8f19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the Console Output in the Jenkins Console. If the build is successful,
    then it will show the following message: BUILD SUCCESSFUL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0df7d616-50c6-447d-a4fe-b40b87c377fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Verify the updated code in the Git Branch `sandbox_to_git`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Triggering the same job again
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To execute the same Jenkins job again, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the job that you want to run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Build Now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the status/console output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring a Jenkins job to deploy metadata on a sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have Eclipse with the Force.com IDE and Git installed in it. The developer
    sandbox is in sync with Eclipse. Developers work with Eclipse and the Force.com
    IDE. Sandbox will be in sync with the Eclipse workspace. After changes are done,
    the developer will push changes to the Git branch and mention the deployment component
    in `package.xml`. This Git push will trigger a Jenkins job that will execute the
    Ant deploy script and deploy changes from the developer sandbox to test the sandbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab0ba0cd-55d5-4b7f-a7c8-945b0bc9c700.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The tools used are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Git**: To track Salesforce changes in Git'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Force.com Migration Tool**: For Salesforce deployments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins**: To automate deployments to a pre-UAT environment with Jenkins
    and Ant scripts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The configuration steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Jenkins job to deploy code to the sandbox. Log in to the Jenkins server
    and click on New Item to create a Jenkins job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6f0bc8c6-6525-4d6a-82b4-89ffe722e6ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Configure Source Code Management. Copy the project URL from your Git project
    and paste it the to Repository URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10ed69f1-eeed-4a9d-9f00-1d523058a067.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the credentials for Git access in Jenkins Credentials. Add your username
    and password and select the following credential:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fb5c3725-a5d0-4880-9c78-1703b9c71cfb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Configure the Git credentials and branches you want to build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/72de775b-ded1-48b9-b5f9-890c96024d35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the build and select Invoke Ant. Configure the build file and the `build.properties`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d96095f6-46cd-4864-8ffd-58e159ecfd6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The components developers want to deploy will be mentioned in `package.xml`
    and deployed in the ant job. The sample `Build.xml` for the deploy job is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once developers push the code to the respective Git branch, the Jenkins job
    will be triggered and the new code is deployed to the destination sandbox. This
    sandbox can be a UAT sandbox or production. You can use the same job for different
    scenarios.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to automate backups for Salesforce metadata
    and push code to the Git repository using Jenkins. Tracking changes in Salesforce
    is possible with GitLab and Jenkins jobs. We have explained how to configure the
    Ant Migration Tool with Jenkins and what the flow is for this retrieved code from
    the sandbox to the Jenkins server so as to push it to the Git branch using the
    script for backup.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned how to set up our own Jenkins server and configure it to retrieve
    metadata from our Salesforce sandbox. Also we have configured a Jenkins job for
    deploying metadata from one sandbox to another sandbox. Regarding the deployment
    job, we discussed the tools that can be used and explained the flow for deployment
    to UAT or testing with a diagram.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about continuous testing and code coverage
    in Salesforce. We will discuss the steps to perform tests on Salesforce using
    Selenium and Qualitia. We will learn about automating the process of continuous
    testing using Jenkins.
  prefs: []
  type: TYPE_NORMAL
