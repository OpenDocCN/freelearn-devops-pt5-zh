- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1 – Communicating with Kubernetes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Container orchestration is a software pattern where multiple containers are
    controlled and scheduled in order to serve an application.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Kubernetes API server (`kube-apiserver`) handles requests to update Kubernetes
    resources. The scheduler (`kube-scheduler`) decides where to place (schedule)
    containers. The controller manager (`kube-controller-manager`) ensures that the
    desired configuration of Kubernetes resources is reflected in the cluster. `etcd`
    provides a data store for the cluster configuration.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `kube-apiserver` must be started with the `--authorization-mode=ABAC` and
    `--authorization-policy-file=filename` parameters.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For high availability of the control plane, in case of a failure of one of the
    master nodes.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the event that a resource has already been created, `kubectl create` will
    fail because the resource already exists, while `kubectl apply` will attempt to
    apply any YAML changes to the resource.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `kubectl use-context` command can be used to switch between multiple contexts
    within a `kubeconfig` file. To change between `kubeconfig` files, the `KUBECONFIG`
    environment variable can be set to the path of the new file.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imperative commands do not provide a history of changes to a resource.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2 – Setting Up Your Kubernetes Cluster
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Minikube makes it easy to set up a local Kubernetes cluster for development.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In some cases, there may be a fixed minimum cost for the cluster that is larger
    than a self-provisioned cluster. Some managed options also have license costs
    in addition to the cost of compute.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kubeadm is agnostic to infrastructure providers, while Kops supports only several
    major providers with deeper integration and compute provisioning.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As of the writing of this book, AWS, Google Cloud Platform, Digital Ocean, VMware,
    and OpenStack, in various levels of production readiness.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Typically, the cluster components are defined in the `systemd` service definitions,
    which allows the automatic restart of services if a node shuts down and restarts
    at the OS level.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3 – Running Application Containers on Kubernetes
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you had development, staging, and production environments, you could make
    one namespace for each.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Node that the Pod is running in could be in a *broken* state where the control
    plane cannot reach it. Typically, when a Node gracefully exits the cluster, the
    Pod will simply be rescheduled instead of showing an *Unknown* status.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To prevent memory-hungry Pods from taking over the entire Node and causing indeterminate
    behavior in other Pods on the Node.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should add more delay to the *Startup* probe if you have one. If not, you
    will need to add one, or add a delay to the *Readiness* probe.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4 – Scaling and Deploying Your Application
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReplicationControllers have less flexibility in how the selector is configured
    – only key-value selectors are allowed.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployments allow you to specify how updates are rolled out.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jobs work well for batch tasks, or tasks that can be scaled horizontally with
    a clear completion target.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: StatefulSets provide an ordinal Pod identity that stays the same when those
    Pods restart.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition to an existing version, a new Deployment can be created with the
    canary version. Then, both versions can be accessed in parallel.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5 – Services and Ingress – Communicating with the Outside World
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You would use a ClusterIP service.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the `kubectl describe` command to see what port on the Nodes a NodePort
    service is active on.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a cloud environment where you often have to pay per load balancer, Ingress
    allows you to specify multiple routing rules while only having to pay for one
    load balancer.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ExternalName services can be used to easily route to other pieces of infrastructure
    in your cloud environment – such as managed databases and object storage.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6 – Kubernetes Application Configuration
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Secrets are stored encoded and optionally encrypted in `etcd`. ConfigMaps are
    stored in plain text.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They are Base64-encoded.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The data will be more visible when describing the ConfigMap. The key-value pattern
    is also easier to use when mounting the ConfigMap as an environment variable.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on how you set up your cluster, your secrets may not be encrypted
    at all. If a cluster's EncryptionConfiguration is not set, secrets will only be
    Base64-encoded – and they can easily be decoded. By creating your cluster with
    an EncryptionConfiguration, your secrets will be stored encrypted in `etcd`. This
    is not a security panacea, but encryption at rest is certainly necessary to improve
    security for secrets.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7 – Storage on Kubernetes
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Volumes are tied to the life cycle of a Pod and are deleted when the Pod is
    deleted. Persistent Volumes will remain until a cluster is deleted, or they are
    specifically deleted themselves.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: StorageClasses define the *type* of a Persistent Volume. They can be used to
    distinguish between different types of storage, such as between faster SSD storage
    and slower hard drives – or different types of cloud storage. StorageClasses determine
    where a PersistentVolumeClaim and Persistent Volume will go to get provisioned
    storage.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a managed Kubernetes service with integrated storage provisioning or add
    a **cloud-controller-manager** configuration to your cluster.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any application that needs to store state for longer than the life of an individual
    Pod would not work with Volumes. Any application that needs to have state that
    is tolerant to Pod failure needs a Persistent Volume.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8 – Pod Placement Controls
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node Selectors can be used to match against Node labels and multiple Nodes can
    fulfill the requirements. Using a Node name means that you specify the single
    Node where the Pod must be placed.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kubernetes implements some default taints to ensure that Pods do not get scheduled
    on Nodes that are malfunctioning or lack resources. In addition, Kubernetes taints
    the master Nodes to prevent scheduling of user applications on the masters.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes 实现了一些默认的污点，以确保 Pods 不会调度到出现故障或资源不足的节点上。此外，Kubernetes 还会对主节点进行污点处理，以防止在主节点上调度用户应用程序。
- en: Too many affinities and anti-affinities can slow down the scheduler or cause
    it to become unresponsive. Determining Pod placement in cases with a lot of affinities
    or anti-affinities is very compute-heavy.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过多的亲和性和反亲和性可能会拖慢调度器的速度，甚至导致其无响应。在有很多亲和性或反亲和性的情况下，确定 Pod 的调度位置是一个计算量非常大的过程。
- en: Using anti-affinities, you could prevent Pods from co-existing with like Pods
    in the same failure domain. Nodes in the same failure domain would be labeled
    with a failure domain or zone identifier. Anti-affinity would look for Pods matching
    the specific tier of the application level in the same failure domain, and prevent
    scheduling on Nodes matching that domain. The end result would be each tier of
    the three-tier application being spread out among multiple failure domains.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用反亲和性，你可以阻止 Pods 在相同的故障域中与相似的 Pods 共存。位于同一故障域中的节点会被标记上故障域或区域标识符。反亲和性会查找与特定应用层级匹配的
    Pods，并阻止其在与该故障域匹配的节点上调度。最终结果是，三层应用程序的每个层级都会分布在多个故障域之间。
- en: Chapter 9 – Observability on Kubernetes
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章 – Kubernetes 上的可观察性
- en: Metrics correspond to numerical values that present application/compute performance
    and/or usage across many categories, including disk, CPU, memory, latency, and
    so on. Logs correspond to the application, Node, or control plane text logs.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指标是对应于数值的内容，展示了多个类别下应用程序/计算性能和/或使用情况，包括磁盘、CPU、内存、延迟等。日志则对应于应用程序、节点或控制平面的文本日志。
- en: The Grafana UI is highly customizable and can be used to present complex Prometheus
    (or another data source's) queries in an elegant, flexible way.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Grafana UI 高度可定制，可以用来以优雅且灵活的方式展示复杂的 Prometheus（或其他数据源）的查询结果。
- en: FluentD would need to run on the production cluster in order to collect logs.
    Elasticsearch and Kibana could run on a separate cluster or other infrastructure.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: FluentD 需要在生产集群上运行以收集日志。Elasticsearch 和 Kibana 可以运行在一个单独的集群或其他基础设施上。
- en: Chapter 10 – Troubleshooting Kubernetes
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章 – Kubernetes 故障排除
- en: One of the strengths of Kubernetes is the ability to scale the cluster easily
    by adding nodes or changing Pod placement by using controls such as taints and
    tolerations. In addition, Pod restarts can result in completely different IPs
    for the same application. This means that both the compute and network topologies
    can be ever-changing.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes 的一大优势是可以通过添加节点或使用诸如污点和容忍度等控制手段轻松地扩展集群，或者改变 Pod 的调度位置。此外，Pod 的重启可能会导致相同应用程序使用完全不同的
    IP，这意味着计算和网络拓扑可以是不断变化的。
- en: The `kubelet` is typically run as a Linux service with `systemd`, with control
    available using `systemctl` and logs in `journalctl`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubelet` 通常作为 Linux 服务运行，并使用 `systemd` 管理，可以通过 `systemctl` 控制，日志则保存在 `journalctl`
    中。'
- en: There are a few different methodologies to use, but generally, you would want
    to check whether all Nodes are ready and schedulable; whether there are any Pod
    Placement Controls precluding scheduling of the Pod; and whether there is any
    dependent storage, ConfigMaps, or secrets that do not exist.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有几种不同的方法可以使用，但通常，你需要检查所有节点是否准备好并可调度；是否有任何 Pod 调度控制阻止了 Pod 的调度；以及是否存在缺失的存储、ConfigMaps
    或密钥等依赖项。
- en: Chapter 11 – Template Code Generation and CI/CD on Kubernetes
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章 – Kubernetes 上的模板代码生成与 CI/CD
- en: Helm Charts use templates and variables, while Kustomize uses a patch-based
    strategy. Kustomize is built into recent versions of kubectl, while Helm uses
    a separate CLI tool.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm Charts 使用模板和变量，而 Kustomize 则采用基于补丁的策略。Kustomize 被集成在 kubectl 的最新版本中，而 Helm
    使用的是一个单独的 CLI 工具。
- en: The configuration should emphasize security, since deploy credentials could
    be used to deploy attacker workloads to your cluster. Using either secure environment
    variables or access management controls on your cloud provider are two good strategies.
    The credentials should absolutely not be placed in any Git repository.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置应侧重于安全性，因为部署凭证可能会被用来将攻击者的工作负载部署到集群中。使用安全的环境变量或云服务提供商的访问管理控制是两种有效的策略。凭证绝对不应放在任何
    Git 仓库中。
- en: In-cluster setups can be preferable since Kubernetes credentials are not required
    to be provided by an external system. Out-of-cluster setups are usually simpler,
    and more synchronous than in-cluster setups, where a control loop determines when
    changes are made to the resource configuration.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群内设置通常更为优选，因为不需要外部系统提供Kubernetes凭证。集群外设置通常较为简单，并且比集群内设置更为同步，后者由控制循环决定何时对资源配置进行更改。
- en: Chapter 12 – Kubernetes Security and Compliance
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 – Kubernetes安全性和合规性
- en: MutatingAdmissionWebhook and ValidatingAdmissionWebhook.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MutatingAdmissionWebhook和ValidatingAdmissionWebhook。
- en: A NetworkPolicy with a blank Pod Selector has the effect of selecting all Pods.
    A NetworkPolicy with all Pods selected, and Ingress and Egress types added without
    any rules, will have the effect of automatically denying all ingress and egress
    to all Pods in the namespace of the NetworkPolicy.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个没有Pod选择器的NetworkPolicy会选中所有Pod。如果选择所有Pod，并且未添加任何规则的情况下添加了Ingress和Egress类型，则该NetworkPolicy会自动拒绝该命名空间中所有Pod的所有入站和出站流量。
- en: We would want to track any API requests where resources are patched or updated,
    because attackers could update a Deployment, Pod, or another resource with malicious
    containers.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望追踪所有API请求，这些请求涉及资源的修补或更新，因为攻击者可能会使用恶意容器更新Deployment、Pod或其他资源。
- en: Chapter 13 – Extending Kubernetes with CRDs
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章 – 使用CRD扩展Kubernetes
- en: The stored version is the version that is actually stored in the data store.
    Served versions are any versions that are accepted by the API for read or write
    operations. The served versions are converted into the stored version when stored
    in `etcd`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存储版本是实际存储在数据存储中的版本。服务版本是API接受的任何版本，用于读写操作。服务版本在存储到`etcd`时会被转换为存储版本。
- en: Measure, Analyze, and Update (typically).
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测量、分析和更新（通常）。
- en: Depending on the cloud provider, the **cluster-autoscaler** addon will directly
    update autoscaling groups in order to add or remove Nodes.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据云服务提供商的不同，**cluster-autoscaler** 插件会直接更新自动伸缩组，以便添加或移除节点。
- en: Chapter 14 – Service Meshes and Serverless
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章 – 服务网格和无服务器架构
- en: A static Envoy configuration refers to an Envoy configuration that is manually
    created or written by a user. A dynamic Envoy configuration (like those provided
    by Istio) will constantly adapt to new containers, as well as new routing and
    filter rules, from an external controller or data plane.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 静态Envoy配置是指由用户手动创建或编写的Envoy配置。动态Envoy配置（如Istio提供的配置）会不断适应来自外部控制器或数据平面的新容器，以及新的路由和过滤规则。
- en: Listeners, Routes, Clusters, and Endpoints.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听器、路由、集群和端点。
- en: Knative requires many components in order to run. This allows for plenty of
    customization but makes it more difficult to set up and operate than OpenFaaS.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Knative运行需要多个组件。这提供了丰富的定制化选项，但也使得其配置和操作比OpenFaaS更加复杂。
- en: Chapter 15 – Stateful Workloads on Kubernetes
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章 – 在Kubernetes上运行有状态工作负载
- en: Minio is an AWS S3-compatible storage tool.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Minio是一个兼容AWS S3的存储工具。
- en: StatefulSets assist self-clustering applications such as distributed databases
    by providing stable, ordinal Pod identities, in addition to Persistent Volume
    stability.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: StatefulSets通过为分布式数据库等自聚类应用提供稳定的、顺序的Pod标识符，以及持久化存储稳定性，来协助这些应用。
- en: In Kubernetes, Pods can be short-lived, and stateful applications can be distributed.
    This means that the process of maintaining state between Pods (for instance, the
    database consensus) can become difficult if Pods change identity and storage needs
    to be replicated from scratch.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kubernetes中，Pod的生命周期可能较短，而有状态应用可以是分布式的。这意味着，在Pod的身份发生变化，且存储需要从零开始复制的情况下，维护Pod之间状态的过程（例如数据库一致性）可能变得十分复杂。
