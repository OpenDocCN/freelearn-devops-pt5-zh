- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A very brief history of version control and Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting and setting up Visual Studio 2019, GitHub Desktop, and your terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting and installing Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Git for Visual Studio, GitHub Desktop, and GitHub at the command
    line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: About this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Begin at the beginning," the King said gravely, "and go on till you come to
    the end, then stop." – Alice in Wonderland'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this book, we will cover Git from the very beginning all the way through
    to advanced topics. No experience with Git is expected. Though if you have been
    using Git, you''ll probably want to skim the initial chapters. Git is arguably
    the most popular version control system in the world, but this raises the question:
    "What is version control?"'
  prefs: []
  type: TYPE_NORMAL
- en: Version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before version control, I would code a bit and then when I became afraid of
    losing that code, I would make a backup of my directory. This is slow, inefficient,
    takes up a lot of disk space, and is very hard to share with others.
  prefs: []
  type: TYPE_NORMAL
- en: A **Version Control System** (**VCS**) does all this work for you (and more)
    and does so in a way that is fast, efficient, and takes up a minimum of disk space.
    One of the fastest and most efficient is Git, although there are others. This
    book will not spend a lot of time convincing you that Git is better than the others.
    First, the market has spoken, and Git prevails. Second, if you've purchased this
    book, you've already decided. And if you haven't already purchased this book,
    go do so. I'll wait here.
  prefs: []
  type: TYPE_NORMAL
- en: About the code examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to demonstrate the use of Git, we need to have a small program that
    we can evolve. The code examples are given in C#, but they are so simple that
    you'll be able to follow them regardless of your experience with the language.
    For example, if you can figure out what this does, you're all set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code declares a class (don't worry about what that is) named `Program`.
    Inside that class is a method (function) called `PrintHello` that prints `Hello
    World` to the console (your screen).
  prefs: []
  type: TYPE_NORMAL
- en: This is about as complex as it gets, and I'll explain each code snippet as we
    go.
  prefs: []
  type: TYPE_NORMAL
- en: Just a brief history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In July of 2005, after just a few month's work, Linus Torvalds, the genius behind
    Linux, released Git to meet his own needs, the needs of the Linux community, and
    eventually, the rest of us. The goal of Git was to be fast and efficient. It succeeded.
  prefs: []
  type: TYPE_NORMAL
- en: While most VCSes at the time were centralized (all the files were kept on a
    big server), Git uses a distributed system, in which everyone has their own repository.
    Technically, no central server is required for Git, although if you are working
    in a team, a central place for sharing code is convenient. But the huge difference
    is that with Git, the vast majority of your interactions with the VCS are local
    – right there on your disk.
  prefs: []
  type: TYPE_NORMAL
- en: Tools for working with Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of easily confused terms (such as Git versus GitHub) and
    there are many tools for working with Git – from the command line to **Graphical
    User Interface** (**GUI**) tools. This section will review some of these options.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub, et al.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many services that allow you to create shared "repositories" (the
    location of all the versions of your program). The most famous and popular are
    GitHub and Microsoft's Azure, as well as BitBucket and GitLab. Azure is a very
    powerful system for DevOps, while GitHub is a very straightforward way to host
    your program. We'll be using GitHub in this book. (Recently, Microsoft acquired
    GitHub for $7.5 billion in stock – and made a huge commitment to GitHub, open
    source and, of course, to Git.)
  prefs: []
  type: TYPE_NORMAL
- en: '**Key point**: Git is the system we''re covering in this book. GitHub is a
    central repository system for sharing code (we''ll make this more specific later
    in the book) and GitHub Desktop is a GUI for working with Git.'
  prefs: []
  type: TYPE_NORMAL
- en: GUIs and the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways in which to interact with Git. The principal ones are to
    work at the command line or to use a GUI. There are a wide number of GUIs. This
    book will focus on GitHub for Desktop and Visual Studio 2019, as well as the command
    line. In fact, one of the things that makes this book different is that all of
    Git will be explained using these three tools. This will give you a deep understanding
    of Git along with how the GUIs can help (and can hinder) your work.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other excellent GUI tools, and the ecosystem of tools keeps evolving.
    That said, the ones we will use are both powerful and representative of what you
    get with nearly all the other GUI tools. In addition, these tools are well established
    and likely to stick around. Furthermore, if you learn one GUI and see how it relates
    to command-line instructions, you'll find it easy to use other GUIs.
  prefs: []
  type: TYPE_NORMAL
- en: We will look first at the command-line interface to Git. While there are some
    limitations in GUI tools, if it can be done with Git, it can be done at the command
    line, that is, all of Git's functionality is exposed at the command line. Furthermore,
    as has often been pointed out, understanding Git at the command line will make
    your use of a GUI much easier as you will know what is actually happening.
  prefs: []
  type: TYPE_NORMAL
- en: Does it help to understand how your car works? Not at all, until something goes
    wrong. Then you turn to the expert mechanic who can fix the problem. In Git, the
    expert is the programmer who knows the command line.
  prefs: []
  type: TYPE_NORMAL
- en: The command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Out of the box, on Windows 10, the command line is available straight from
    your terminal. It gives you everything you need, but it is a bit ugly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_01_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: Git at the command line'
  prefs: []
  type: TYPE_NORMAL
- en: It is hard to read, but we can make it pretty, so that it's easier on the eye.
  prefs: []
  type: TYPE_NORMAL
- en: Making the command line pretty
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using Git on Windows 10, you can make the command line prettier
    and more useful, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_01_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: Example of Pretty Print'
  prefs: []
  type: TYPE_NORMAL
- en: To do this, download and install Power Shell. Then, follow Scott Hanselman's
    excellent directions at [http://jliberty.me/PrettyGit](http://jliberty.me/PrettyGit).
  prefs: []
  type: TYPE_NORMAL
- en: A similar effect can be had on mac and Linux by following the directions at
    [https://github.com/diogocavilha/fancy-git](https://github.com/diogocavilha/fancy-git).
    There are other options available on the GitHub site that do pretty much the same
    thing.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2019
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Visual Studio 2019 has extensive support for Git built in. There is a separate
    menu specifically designed for Git, and Git information is integrated into the
    general UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_01_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: Git menu in Visual Studio 2019'
  prefs: []
  type: TYPE_NORMAL
- en: The first order of business is to get and set up Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Visual Studio for free
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All three of the products used for illustration purposes in this book (the
    command line, Visual Studio 2019, and GitHub Desktop) have free versions available.
    To obtain your copy of Visual Studio 2019, go to [http://visualstudio.com](http://visualstudio.com)
    and hover over the **Visual Studio** button. Select **Community 2019**. It will
    download and all you have to do is double-click on it and follow the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_01_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.4: Obtaining Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a Mac, there are some significant differences between how Visual
    Studio 2019 for Windows handles Git and how Visual Studio for Mac does. You will
    probably have no trouble following along, but you can always use the Terminal
    or GitHub Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A very popular GUI, especially for use with GitHub, is GitHub Desktop. This
    cross-platform application makes working with Git extremely easy: anticipating
    what you might want to do and making that simple. The downside is that there are
    limitations, as there are for virtually every GUI.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_01_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.5: GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using all three of these throughout the book: command line, Visual
    Studio 2019, and GitHub Desktop. As we proceed, the selections and Git commands
    shown above will make much more sense; for now, just get a feel for their appearance.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The very first thing you need to do is to install Git on your computer. The
    official Git site states that "even if Git is already installed on your computer,
    it is probably a good idea to reinstall to update to the latest version."
  prefs: []
  type: TYPE_NORMAL
- en: Getting Git on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are also a few ways in which to install Git on Windows. I recommend using
    the official build. The most recent one is available from the Git website: [https://git-scm.com/download/win](https://git-scm.com/download/win).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to get Git, and to kill two birds with one stone, is to download
    and install GitHub Desktop. The installer will also install a command-line version
    of Git. You can get it at [https://desktop.github.com/](https://desktop.github.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_01_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.6: Obtaining GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: This book will show its demonstrations on Windows 10, using Git version 2.30.0.windows.2,
    but the examples should work with just about any version of Git.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Git on a Mac
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several ways to install Git on a Mac. The easiest is probably to
    install the Xcode command-line tools. You can do this by trying to run Git from
    the Terminal the very first time, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you don't have it installed already, it will prompt you to install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want a more up-to-date version, you can also install it via a binary
    installer. A macOS Git installer is maintained and available for download at the
    Git website at [https://git-scm.com/download/mac](https://git-scm.com/download/mac):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Git macOS installer](img/B17441_01_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.7: Getting Git on a Mac'
  prefs: []
  type: TYPE_NORMAL
- en: You can also install it as part of the GitHub Desktop for macOS install. Their
    GUI Git tool also has an option to install command-line tools. You can download
    that tool from the GitHub Desktop for macOS website at [https://desktop.github.com](https://desktop.github.com).
  prefs: []
  type: TYPE_NORMAL
- en: Getting Git on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book does not formally support Linux, but almost all of Git is the same
    on all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to install the basic Git tools on Linux, you can generally do so
    through the package management tool that comes with your distribution. If you''re
    on Fedora (or any closely related RPM-based distribution, such as RHEL or CentOS),
    you can use `dnf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re on a Debian-based distribution, such as Ubuntu, try `apt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Checking your version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have Git installed, your first command should be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That is, the keyword `git`, and then `version`, preceded by two dashes. This
    is sometimes called "git dash dash version."
  prefs: []
  type: TYPE_NORMAL
- en: 'The output on my computer is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: (Your mileage may vary.)
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Git – the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll look at configuring Git to personalize throughout this book, but for
    now, let''s add your name and email address so that every entry into Git is stamped
    appropriately. Enter the command-line command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will bring up your editor. Find or create the `[user]` section and add
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You will probably want to use your own name and email address.
  prefs: []
  type: TYPE_NORMAL
- en: There are other entries in the config file. Ignore them for now and save and
    close the file.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Git – Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Visual Studio for Windows, click on the Git menu and a dialog box will open.
    On the first tab, enter your username and email address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image73605.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.8: Setting Git options in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Git – GitHub Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure GitHub Desktop, you''ll need an account on GitHub. We''ll cover
    that in the next chapter. Once you do have an account, go to **File | Options**,
    select the **Accounts** tab, and then click on **Sign in**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image73613.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9: Setting up GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter you saw an introduction to the book, listing what is in each
    chapter. You also saw a quick history of version control and of Git itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we took a look at downloading the environments you''ll need to follow
    along: Visual Studio 2019, GitHub Desktop, and PowerShell as your command line.
    All of these can be obtained for free.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the software was downloaded, we looked at how to set up Git, and how to
    set up the tools we'll be using.
  prefs: []
  type: TYPE_NORMAL
