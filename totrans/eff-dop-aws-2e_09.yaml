- en: Assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1: The Cloud and DevOps Revolution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps is a framework and a methodology concerned with adopting the right culture
    for developers and the operations team to work together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DevOps – IaC stands for **DevOps – Infrastructure as Code**, where we should
    treat and manage our vertical infrastructure in the form of code, helping us with
    repeatable, scalable, and manageable infrastructure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The key characteristics of a DevOps culture
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Source controlling everything
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated testing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated provisioning
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration management
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated deployment
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adaptation to virtualization (public/private cloud)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The three major service models in the cloud:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Infrastructure as a Service** (**IaaS**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform as a Service** (**PaaS**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software as a Service** (**SaaS**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS is the largest public cloud service platform available today. AWS offers
    multiple services, from computing and storage to machine learning and analytics,
    all of which are highly scalable and reliable. The most important part of using
    AWS is the *pay-per-use model*. You need not invest in any hardware. Instead,
    deploy the services, and pay for them until you are using the services. The day
    you shut down and remove the services, no charges will be applicable - which is
    great.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2: Deploying Your First Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have an AWS cloud account,  go to [www.aws.amazon.com](https://aws.amazon.com/) and
    create a free-tier account. Follow the step-by-step instructions at [https://aws.amazon.com/](https://aws.amazon.com/).
    You need to provide your credit or debit card details in order to create an AWS
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [console.aws.amazon.com](https://us-east-1.signin.aws.amazon.com/oauth?SignatureVersion=4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJMOATPLHVSJ563XQ&X-Amz-Date=2018-08-27T09%3A42%3A05.017Z&X-Amz-Signature=9a2851741438a5ac794ebce02b2f9dac6adf96b92ec4e336cc5a35322ede9064&X-Amz-SignedHeaders=host&client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fhomepage&redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fstate%3DhashArgs%2523%26isauthcode%3Dtrue&response_type=code&state=hashArgs%23) and
    choose AWS compute services to create your first EC2 instance. Click on the Launch
    Instance button on the console and follow the steps to select an AMI, instance
    type (select free-tier in this case), followed by instance details, storage details,
    tags, and security group. For this exercise, you can select default options as
    our AIM is just to get familiar with the console portal so that we can automate
    this process using DevOps practices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the step-by-step instructions provided under the *Creating our first
    web server* section in the chapter to create your first AWS instance using AWS
    CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow the steps mentioned in the *Creating a simple Hello World web application* section
    in the chapter. You can download the sample code of the application from the following
    links:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Find the instance ID of your AWS instance using `ec2-metadata --instance-id` and
    then execute the mentioned command by amending your instance ID: `aws ec2 terminate-instances
    --instance-ids <YOUR AWS INSTANCE ID>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3: Treating Your Infrastructure as Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IaC stands for Infrastructure as Code. This is a process of treating your infrastructure
    objects, such as  EC2 instances, VPC network, subnets, load balancers, storage,
    application deployment and orchestration, and in the form of infrastructure codes.
    IaC allows the infrastructure vertical to change, replicate, and roll back changes
    in the entire environment in a very short space of time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the CloudFormation template at [https://console.aws.amazon.com/cloudformation](https://console.aws.amazon.com/cloudformation) and
    click on Create Stack button. Now create a `helloworld-cf.template` template file,
    using the Python file located at [https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter03/EffectiveDevOpsTemplates/helloworld-cf-template-part-1.py](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter03/EffectiveDevOpsTemplates/helloworld-cf-template-part-1.py).
    After doing this, upload a template to Amazon S3\. Provide a name to your stack,
    followed by an SSH key-pair, and other additional information that can be taken
    as default here. Now review the information and click on Create. When the creation
    of the template is complete, click on the Outputs tab and click on Weburl, which
    will take you to the application home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hint: Generate the CloudFormation template by saving the output of the script
    in the `python helloworld-cf-template.py > helloworld-cf.template` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple SCM offerings available on the market, including GitLab,
    BitBucket, GitHub, and even SCM offerings by public clouds. Here, we will use
    one of the most popular SCM offerings: GitHub. Create your free account on Github
    at [https://github.com](https://github.com). Once you have done this, log into
    your GitHub account and create your first public repository with the name `helloworld`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install a Git package for your supported platform and clone the previously created
    GitHub repository here using `git clone <github repository URL>`, which you can
    find from the GitHub console for your repository. Now copy your `helloworld-cf.template` in
    the repository followed by the `git add` and `git commit` operations. Now you
    are in a position to push your local repository file to your GitHub account. To
    do this, execute `git push` to push your committed file and confirm this by checking
    your GitHub repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ansible is a simple, powerful, and easy-to-learn configuration management tool
    used by the system/cloud engineers and DevOps engineers to automate their regular
    repetitive tasks. The installation of Ansible is very simple and works as an agentless
    model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Ansible, modules are the fundamental building blocks for creating Ansible
    code files written in YAML. These files, written in YAML, are called Ansible Playbooks.
    Multiple Ansible playbooks are arranged in well defined directory structures,
    called `roles` in Ansible, where roles are the structure directories for Ansible
    codes that contain Ansible playbooks, variables, static/dynamic files, and so
    on. There are also a number of other objects in Ansible, including Ansible Vault,
    Ansible Galaxy, and a GUI for Ansible called **Ansible Tower**. You can further
    explore these objects at [https://docs.ansible.com](https://docs.ansible.com/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Chapter 4:  Infrastructure as Code with Terraform'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Terraform is a high level infrastructure tool that is primarily used for building,
    changing, and versioning infrastructure safely and efficiently. Terraform is not
    a configuration management tool as it focuses on the infrastructure layer and
    allows tools such as Puppet, Chef, Ansible, and Salt to perform application deployment
    and orchestration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HashiCorp does not provide native packages for operating systems. Terraform
    is distributed as a single binary, packaged inside a ZIP archive, which can be
    downloaded from [https://www.terraform.io/downloads.html](https://www.terraform.io/downloads.html).
    Once downloaded, extract the `.zip` file and place it under the `/usr/bin Linux` binary
    path. Once this is done, run `terraform -v` to confirm the installed Terraform
    version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to provision AWS instances using Terraform, you need to initialize
    the AWS provider by creating a  `provider` block inside the `.tf` file. You then
    have to run `terraform init`. Upon successful initialization, you need to proceed
    by developing a Terraform template with `resources`. In this case, you need to
    use the `aws_instance` resource type with the appropriate attribute. Once this
    is done, validated, and planned, apply your Terraform template to create your
    first AWS instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to configure Terraform with Ansible, you need to use a **provider**, to
    initialize the platform; **resources**, to create the platform-related services;
    and finally **provisioner**, to establish a connection with the created service
    to install Ansible and to run `ansible-pull` to run Ansible code on the system.
    You may refer to the following link for a sample Terraform template: [https://raw.githubusercontent.com/yogeshraheja/EffectiveDevOpsTerraform/master/fourthproject/helloworldansiblepull.tf](https://raw.githubusercontent.com/yogeshraheja/EffectiveDevOpsTerraform/master/fourthproject/helloworldansiblepull.tf).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5: Adding Continuous Integration and Continuous Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The terms CI, CD and continuous delivery can be defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Continuous Integration**: A CI pipeline will allow us to test proposed code
    changes automatically and continuously. This will free up the time of developers
    and QAs who no longer have to carry out as much manual testing. It also makes
    the integration of code changes much easier.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous Deployment**: In CD, you drastically accelerate the feedback loop
    process that DevOps provides. Releasing new code to production at high speed lets
    you collect real customer metrics, which often leads to exposing new and unexpected
    issues.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous Delivery**: In order to build our continuous delivery pipeline,
    we are first going to create a CloudFormation stack for a production environment.
    We will then add a new deployment group in CodeDeploy, which will provide us with
    the ability to deploy code to the new CloudFormation stack. Finally, we will upgrade
    the pipeline to include an approval process to deploy our code to production and
    the production deployment stage itself.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins is one of the most widely used integration tools to run our CI pipeline.
    With over 10 years of development, Jenkins has been the leading open-source solution
    to practice continuous integration for a long time. Famous for its rich plugin
    ecosystem, Jenkins has gone through a major new release (Jenkins 2.x), which has
    put the spotlight on a number of very DevOps centric features, including the ability
    to create native delivery pipelines that can be checked in and version-controlled.
    It also provides better integration with source control systems such as GitHub
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to implement our continuous deployment pipeline, we are going to look
    at two new AWS services—CodePipeline and CodeDeploy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**CodePipeline** lets create our deployment pipeline. We will tell it to take
    our code from GitHub, like we did before, and send it to Jenkins to run CI testing
    on it. Instead of simply returning the result to GitHub, however, we will then
    take the code and deploy it to our EC2 instance with the help of AWS CodeDeploy.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CodeDeploy** is a service that lets us properly deploy code to our EC2 instances.
    By adding a certain number of configuration files and scripts, we can use CodeDeploy
    to deploy and test our code reliably. Thanks to CodeDeploy, we don''t have to
    worry about any kind of complicated logic when it comes to sequencing our deployment.
    It is tightly integrated with EC2 and knows how to perform rolling updates across
    multiple instances and, if needed, perform a rollback.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details, please refer to *Building a continuous deployment pipeline*
    section of this chapter
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 6: Scaling Your Infrastructure'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No, it is not always the best choice because a multi-level application means
    more components to manage. If your application works well as a monolith, you can accept a
    short period of downtime and the traffic will not increase over time. You can
    also consider letting it run as it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the multi-level approach used in this book, all software is in one ZIP file, instead
    in a microservices and more in the serverless approach it is broken in multiple
    parts. For example, in an e-commerce software (the software used to show the content
    to the users in one service), the part to manage the backend to place a new product
    is in one service, while the part to manage the payment is in another service,
    and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are not familiar with the service, it can be difficult. However, AWS
    is full of documentation and video. Furthermore, in this book we demonstrated
    how to use a set of basic services to break the classic monolith approach in multi-level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is true for an NLB but you need to pre-warm it if you use an ALB or a CLB.
    You must also do this if your traffic goes up to more than 50 percent every five
    minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Certificate Manager is free unless you want to Request a private certificate,
    a classic SSL * certificate can also cost 500 dollars a year.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each AWS Region is organized in AZs and each zone is a separate datacenter.
    Consequently, it is rare that there are issues in one zone but it is not likely
    multiple issues in the same moment. Each subnet can belong to only one zone so
    it is convenient to place each component in at least two, or preferably three, zones.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7: Running Containers in AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker is a container platform to build, ship and run containerized applications.
    The four important components of Docker Engine are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Containers**: A read write template'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Images**: A read only template'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network**: A virtual network for containers'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Volumes**: A persistent storage for containers'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker CE can be installed on many platforms including Linux, Windows, and MacOS.
    Refer to [https://docs.docker.com/install/](https://docs.docker.com/install/),
    the official Docker link, click on your choice of platform, and follow the instructions
    to install and configure the latest version of Docker CE on your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the installed Docker CE version by running `docker --version` command.
  prefs: []
  type: TYPE_NORMAL
- en: Use a Dockerfile [https://github.com/yogeshraheja/helloworld/blob/master/Dockerfile](https://github.com/yogeshraheja/helloworld/blob/master/Dockerfile) and
    create an image using `docker build` command. This newly created image is an image
    for Hello World application. Create a container by exposing the port outside using `docker
    run -d -p 3000:3000 <image-name>`. Once done, check and confirm the webserver
    outputs either using `curl` or using your public IP with port `3000` from the
    web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Login to your AWS account using your credentials and select ECS service from
    the services tab. There you will find options to Create Amazon ECS Cluster and
    Amazon ECR repository. At this point, click on Repository and create your first
    ECR repository. The screen will also display some of the commands that you can
    use to perform an operation on ECR. Similarly, click on the Cluster tab followed
    by create cluster on the ECS screen. From here, select your choice of cluster
    for Windows or Linux or Network only, click 'next step', and fill in the details
    of your choice. These details include cluster name, provisioning model, EC2 instance
    type, number of instance, and so on. To complete the process, click Create. Once
    a few minutes have passed, your ECS cluster will be ready to use. In this chapter,
    we have demonstrated this using CloudFormation. If you are interested in setting
    up an ECS cluster using the same process, feel free to follow the steps provided
    in the chapter in *Creating an ECS cluster* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8: Hardening the Security of Your AWS Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to build your infrastructure, it is strongly recommended that
    you *lock in* your root account (that is, the account bound to your registration
    email). Then, create IAM users and groups with the necessary privileges, and use
    MFA (instead of just usernames and passwords) for root and IAM users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should enable CloudTrail for registering IAM users and role actions, and
    VPC Flow Logs for monitoring and logging network traffic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No; there is also WAF, an application firewall that works at level 7 of the
    TPC/IP protocol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have to follow some best practices to configure your application, expose
    the least possible surface of the app to the internet and scale up and down. There
    are also WAF rate rules that help to limit malicious DDoS attacks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In theory, you can, but it is convenient to split them between private and public
    subnets, to expose only the necessary resources to the internet. Anything else
    should stay private. Also, it is a best practice to spread parts of your application
    over multiple availability zones. This means, in practice, using multiple data
    centers. For these reasons, and also because one subnet can be in a single AZ,
    you have to use multiple subnets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
