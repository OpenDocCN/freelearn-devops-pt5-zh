- en: Assessment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1: The Cloud and DevOps Revolution
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章： 云计算与 DevOps 革命
- en: DevOps is a framework and a methodology concerned with adopting the right culture
    for developers and the operations team to work together.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps 是一个框架和方法论，旨在为开发人员和运维团队之间的协作采纳合适的文化。
- en: DevOps – IaC stands for **DevOps – Infrastructure as Code**, where we should
    treat and manage our vertical infrastructure in the form of code, helping us with
    repeatable, scalable, and manageable infrastructure.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps – IaC 代表 **DevOps – 基础设施即代码**，我们应该将我们的垂直基础设施视为代码来管理和处理，这有助于实现可重复、可扩展和可管理的基础设施。
- en: The key characteristics of a DevOps culture
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps 文化的关键特征
- en: Source controlling everything
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制所有内容
- en: Automated testing
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试
- en: Automated provisioning
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化配置
- en: Configuration management
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管理
- en: Automated deployment
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化部署
- en: Measuring
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量
- en: Adaptation to virtualization (public/private cloud)
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适应虚拟化（公有/私有云）
- en: 'The three major service models in the cloud:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云中的三种主要服务模型：
- en: '**Infrastructure as a Service** (**IaaS**)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即服务** (**IaaS**)'
- en: '**Platform as a Service** (**PaaS**)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台即服务** (**PaaS**)'
- en: '**Software as a Service** (**SaaS**)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件即服务** (**SaaS**)'
- en: AWS is the largest public cloud service platform available today. AWS offers
    multiple services, from computing and storage to machine learning and analytics,
    all of which are highly scalable and reliable. The most important part of using
    AWS is the *pay-per-use model*. You need not invest in any hardware. Instead,
    deploy the services, and pay for them until you are using the services. The day
    you shut down and remove the services, no charges will be applicable - which is
    great.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS 是当前最大的公有云服务平台。AWS 提供多种服务，从计算、存储到机器学习和分析，所有这些服务都具有高度的可扩展性和可靠性。使用 AWS 最重要的部分是 *按需付费模式*。你无需投资硬件，直接部署服务并按使用时长付费。当你关闭并移除服务时，不会产生费用——这点非常棒。
- en: Chapter 2: Deploying Your First Web Application
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章： 部署你的第一个 Web 应用程序
- en: If you don't have an AWS cloud account,  go to [www.aws.amazon.com](https://aws.amazon.com/) and
    create a free-tier account. Follow the step-by-step instructions at [https://aws.amazon.com/](https://aws.amazon.com/).
    You need to provide your credit or debit card details in order to create an AWS
    account.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你没有 AWS 云账户，访问 [www.aws.amazon.com](https://aws.amazon.com/) 并创建一个免费套餐账户。按照[https://aws.amazon.com/](https://aws.amazon.com/)上的逐步指南操作。你需要提供信用卡或借记卡信息才能创建
    AWS 账户。
- en: Go to [console.aws.amazon.com](https://us-east-1.signin.aws.amazon.com/oauth?SignatureVersion=4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJMOATPLHVSJ563XQ&X-Amz-Date=2018-08-27T09%3A42%3A05.017Z&X-Amz-Signature=9a2851741438a5ac794ebce02b2f9dac6adf96b92ec4e336cc5a35322ede9064&X-Amz-SignedHeaders=host&client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fhomepage&redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fstate%3DhashArgs%2523%26isauthcode%3Dtrue&response_type=code&state=hashArgs%23) and
    choose AWS compute services to create your first EC2 instance. Click on the Launch
    Instance button on the console and follow the steps to select an AMI, instance
    type (select free-tier in this case), followed by instance details, storage details,
    tags, and security group. For this exercise, you can select default options as
    our AIM is just to get familiar with the console portal so that we can automate
    this process using DevOps practices.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [console.aws.amazon.com](https://us-east-1.signin.aws.amazon.com/oauth?SignatureVersion=4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJMOATPLHVSJ563XQ&X-Amz-Date=2018-08-27T09%3A42%3A05.017Z&X-Amz-Signature=9a2851741438a5ac794ebce02b2f9dac6adf96b92ec4e336cc5a35322ede9064&X-Amz-SignedHeaders=host&client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fhomepage&redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fstate%3DhashArgs%2523%26isauthcode%3Dtrue&response_type=code&state=hashArgs%23) 并选择
    AWS 计算服务来创建你的第一个 EC2 实例。在控制台上点击 启动实例 按钮，并按照步骤选择 AMI、实例类型（在此选择免费套餐），接着选择实例详情、存储详情、标签和安全组。在此练习中，你可以选择默认选项，因为我们的目标仅仅是熟悉控制台门户，以便通过
    DevOps 实践实现自动化。
- en: Follow the step-by-step instructions provided under the *Creating our first
    web server* section in the chapter to create your first AWS instance using AWS
    CLI.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照本章中 *创建我们的第一个 Web 服务器* 部分提供的逐步指南，使用 AWS CLI 创建你的第一个 AWS 实例。
- en: 'Follow the steps mentioned in the *Creating a simple Hello World web application* section
    in the chapter. You can download the sample code of the application from the following
    links:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跟随本章中 *创建一个简单的 Hello World Web 应用程序* 部分的步骤。你可以从以下链接下载应用程序的示例代码：
- en: '[https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js).'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js)'
- en: '[https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf).'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf)'
- en: Find the instance ID of your AWS instance using `ec2-metadata --instance-id` and
    then execute the mentioned command by amending your instance ID: `aws ec2 terminate-instances
    --instance-ids <YOUR AWS INSTANCE ID>`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ec2-metadata --instance-id`查找你的AWS实例ID，然后通过修改你的实例ID执行以下命令：`aws ec2 terminate-instances
    --instance-ids <YOUR AWS INSTANCE ID>`。
- en: Chapter 3: Treating Your Infrastructure as Code
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章：将基础设施视为代码
- en: IaC stands for Infrastructure as Code. This is a process of treating your infrastructure
    objects, such as  EC2 instances, VPC network, subnets, load balancers, storage,
    application deployment and orchestration, and in the form of infrastructure codes.
    IaC allows the infrastructure vertical to change, replicate, and roll back changes
    in the entire environment in a very short space of time.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IaC代表基础设施即代码（Infrastructure as Code）。这是一个将你的基础设施对象（例如EC2实例、VPC网络、子网、负载均衡器、存储、应用部署和编排）作为基础设施代码进行处理的过程。IaC允许在非常短的时间内对整个环境中的基础设施垂直进行更改、复制和回滚。
- en: Open the CloudFormation template at [https://console.aws.amazon.com/cloudformation](https://console.aws.amazon.com/cloudformation) and
    click on Create Stack button. Now create a `helloworld-cf.template` template file,
    using the Python file located at [https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter03/EffectiveDevOpsTemplates/helloworld-cf-template-part-1.py](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter03/EffectiveDevOpsTemplates/helloworld-cf-template-part-1.py).
    After doing this, upload a template to Amazon S3\. Provide a name to your stack,
    followed by an SSH key-pair, and other additional information that can be taken
    as default here. Now review the information and click on Create. When the creation
    of the template is complete, click on the Outputs tab and click on Weburl, which
    will take you to the application home page.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开CloudFormation模板，访问[https://console.aws.amazon.com/cloudformation](https://console.aws.amazon.com/cloudformation)，然后点击“创建堆栈”按钮。接下来，使用位于[https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter03/EffectiveDevOpsTemplates/helloworld-cf-template-part-1.py](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter03/EffectiveDevOpsTemplates/helloworld-cf-template-part-1.py)的Python文件，创建一个`helloworld-cf.template`模板文件。完成后，将模板上传至Amazon
    S3。为你的堆栈提供一个名称，然后添加一个SSH密钥对及其他可以默认的附加信息。现在审查信息并点击“创建”。当模板创建完成后，点击“输出”标签，点击Weburl链接，它将带你到应用程序主页。
- en: 'Hint: Generate the CloudFormation template by saving the output of the script
    in the `python helloworld-cf-template.py > helloworld-cf.template` file.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：通过将脚本的输出保存到`python helloworld-cf-template.py > helloworld-cf.template`文件中生成CloudFormation模板。
- en: 'There are multiple SCM offerings available on the market, including GitLab,
    BitBucket, GitHub, and even SCM offerings by public clouds. Here, we will use
    one of the most popular SCM offerings: GitHub. Create your free account on Github
    at [https://github.com](https://github.com). Once you have done this, log into
    your GitHub account and create your first public repository with the name `helloworld`.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 市场上有多个SCM（源代码管理）产品，包括GitLab、BitBucket、GitHub，甚至公共云提供的SCM服务。在这里，我们将使用最流行的SCM服务之一：GitHub。请在[https://github.com](https://github.com)上创建一个免费的GitHub账户。完成后，登录到你的GitHub账户，创建第一个名为`helloworld`的公共仓库。
- en: Install a Git package for your supported platform and clone the previously created
    GitHub repository here using `git clone <github repository URL>`, which you can
    find from the GitHub console for your repository. Now copy your `helloworld-cf.template` in
    the repository followed by the `git add` and `git commit` operations. Now you
    are in a position to push your local repository file to your GitHub account. To
    do this, execute `git push` to push your committed file and confirm this by checking
    your GitHub repository.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的支持平台安装 Git 包，并使用 `git clone <github repository URL>` 克隆之前创建的 GitHub 仓库，您可以在
    GitHub 控制台中找到该仓库的 URL。现在，将您的 `helloworld-cf.template` 文件复制到仓库中，并进行 `git add` 和
    `git commit` 操作。现在，您可以将本地仓库文件推送到您的 GitHub 账户。为此，执行 `git push` 推送已提交的文件，并通过检查 GitHub
    仓库确认。
- en: Ansible is a simple, powerful, and easy-to-learn configuration management tool
    used by the system/cloud engineers and DevOps engineers to automate their regular
    repetitive tasks. The installation of Ansible is very simple and works as an agentless
    model.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ansible 是一款简单、强大且易于学习的配置管理工具，广泛应用于系统/云工程师和 DevOps 工程师，用于自动化处理他们日常的重复性任务。Ansible
    的安装非常简单，采用无代理模式运行。
- en: In Ansible, modules are the fundamental building blocks for creating Ansible
    code files written in YAML. These files, written in YAML, are called Ansible Playbooks.
    Multiple Ansible playbooks are arranged in well defined directory structures,
    called `roles` in Ansible, where roles are the structure directories for Ansible
    codes that contain Ansible playbooks, variables, static/dynamic files, and so
    on. There are also a number of other objects in Ansible, including Ansible Vault,
    Ansible Galaxy, and a GUI for Ansible called **Ansible Tower**. You can further
    explore these objects at [https://docs.ansible.com](https://docs.ansible.com/).
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Ansible 中，模块是创建 Ansible 代码文件（YAML 格式）的基本构件。这些文件被称为 Ansible Playbooks（Ansible
    剧本）。多个 Ansible 剧本按定义良好的目录结构组织，在 Ansible 中称为 `roles`，其中 roles 是存放 Ansible 代码的目录结构，包括
    Ansible 剧本、变量、静态/动态文件等。Ansible 中还包含许多其他对象，包括 Ansible Vault、Ansible Galaxy，以及一个名为
    **Ansible Tower** 的 Ansible 图形界面。您可以通过访问 [https://docs.ansible.com](https://docs.ansible.com/)
    进一步探索这些对象。
- en: 'Chapter 4:  Infrastructure as Code with Terraform'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：使用 Terraform 实现基础设施即代码
- en: Terraform is a high level infrastructure tool that is primarily used for building,
    changing, and versioning infrastructure safely and efficiently. Terraform is not
    a configuration management tool as it focuses on the infrastructure layer and
    allows tools such as Puppet, Chef, Ansible, and Salt to perform application deployment
    and orchestration.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Terraform 是一款高级基础设施工具，主要用于安全、高效地构建、修改和版本控制基础设施。Terraform 不是配置管理工具，因为它专注于基础设施层，并允许诸如
    Puppet、Chef、Ansible 和 Salt 等工具执行应用程序部署和编排。
- en: HashiCorp does not provide native packages for operating systems. Terraform
    is distributed as a single binary, packaged inside a ZIP archive, which can be
    downloaded from [https://www.terraform.io/downloads.html](https://www.terraform.io/downloads.html).
    Once downloaded, extract the `.zip` file and place it under the `/usr/bin Linux` binary
    path. Once this is done, run `terraform -v` to confirm the installed Terraform
    version.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HashiCorp 并未为操作系统提供原生包。Terraform 以单个二进制文件的形式分发，打包在一个 ZIP 压缩包中，可以从[https://www.terraform.io/downloads.html](https://www.terraform.io/downloads.html)下载。下载后，解压
    `.zip` 文件并将其放置到 `/usr/bin Linux` 二进制路径下。完成此操作后，运行 `terraform -v` 来确认安装的 Terraform
    版本。
- en: In order to provision AWS instances using Terraform, you need to initialize
    the AWS provider by creating a  `provider` block inside the `.tf` file. You then
    have to run `terraform init`. Upon successful initialization, you need to proceed
    by developing a Terraform template with `resources`. In this case, you need to
    use the `aws_instance` resource type with the appropriate attribute. Once this
    is done, validated, and planned, apply your Terraform template to create your
    first AWS instance.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用 Terraform 配置 AWS 实例，您需要通过在 `.tf` 文件中创建 `provider` 块来初始化 AWS 提供程序。然后运行 `terraform
    init`。初始化成功后，您需要继续开发一个 Terraform 模板，并使用 `resources`。在这种情况下，您需要使用 `aws_instance`
    资源类型及其适当的属性。完成此操作后，进行验证并规划，最后应用您的 Terraform 模板来创建您的第一个 AWS 实例。
- en: In order to configure Terraform with Ansible, you need to use a **provider**, to
    initialize the platform; **resources**, to create the platform-related services;
    and finally **provisioner**, to establish a connection with the created service
    to install Ansible and to run `ansible-pull` to run Ansible code on the system.
    You may refer to the following link for a sample Terraform template: [https://raw.githubusercontent.com/yogeshraheja/EffectiveDevOpsTerraform/master/fourthproject/helloworldansiblepull.tf](https://raw.githubusercontent.com/yogeshraheja/EffectiveDevOpsTerraform/master/fourthproject/helloworldansiblepull.tf).
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用 Ansible 配置 Terraform，你需要使用一个 **provider** 来初始化平台；使用 **resources** 来创建与平台相关的服务；最后使用
    **provisioner** 来与创建的服务建立连接，安装 Ansible，并运行 `ansible-pull` 在系统上执行 Ansible 代码。你可以参考以下链接获取一个示例
    Terraform 模板：[https://raw.githubusercontent.com/yogeshraheja/EffectiveDevOpsTerraform/master/fourthproject/helloworldansiblepull.tf](https://raw.githubusercontent.com/yogeshraheja/EffectiveDevOpsTerraform/master/fourthproject/helloworldansiblepull.tf)。
- en: Chapter 5: Adding Continuous Integration and Continuous Deployment
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：添加持续集成和持续部署
- en: 'The terms CI, CD and continuous delivery can be defined as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI、CD 和持续交付这些术语可以定义如下：
- en: '**Continuous Integration**: A CI pipeline will allow us to test proposed code
    changes automatically and continuously. This will free up the time of developers
    and QAs who no longer have to carry out as much manual testing. It also makes
    the integration of code changes much easier.'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**：CI 流水线将使我们能够自动和持续地测试提议的代码更改。这将节省开发人员和 QA 的时间，他们不再需要进行那么多手动测试。它还使得代码更改的集成变得更加容易。'
- en: '**Continuous Deployment**: In CD, you drastically accelerate the feedback loop
    process that DevOps provides. Releasing new code to production at high speed lets
    you collect real customer metrics, which often leads to exposing new and unexpected
    issues.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续部署**：在 CD 中，你大大加速了 DevOps 提供的反馈回路过程。以高速将新代码发布到生产环境可以让你收集真实的客户指标，这往往会暴露出新的和意想不到的问题。'
- en: '**Continuous Delivery**: In order to build our continuous delivery pipeline,
    we are first going to create a CloudFormation stack for a production environment.
    We will then add a new deployment group in CodeDeploy, which will provide us with
    the ability to deploy code to the new CloudFormation stack. Finally, we will upgrade
    the pipeline to include an approval process to deploy our code to production and
    the production deployment stage itself.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付**：为了构建我们的持续交付流水线，我们首先将为生产环境创建一个 CloudFormation 堆栈。然后，我们将在 CodeDeploy
    中添加一个新的部署组，这将使我们能够将代码部署到新的 CloudFormation 堆栈中。最后，我们将升级流水线，加入审批流程，以便将代码部署到生产环境，并包括生产部署阶段本身。'
- en: Jenkins is one of the most widely used integration tools to run our CI pipeline.
    With over 10 years of development, Jenkins has been the leading open-source solution
    to practice continuous integration for a long time. Famous for its rich plugin
    ecosystem, Jenkins has gone through a major new release (Jenkins 2.x), which has
    put the spotlight on a number of very DevOps centric features, including the ability
    to create native delivery pipelines that can be checked in and version-controlled.
    It also provides better integration with source control systems such as GitHub
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 是最广泛使用的集成工具之一，用于运行我们的 CI 流水线。经过超过 10 年的开发，Jenkins 长期以来一直是实践持续集成的领先开源解决方案。Jenkins
    以其丰富的插件生态系统而闻名，并经历了一个重大的新版本发布（Jenkins 2.x），该版本将焦点放在了一些非常 DevOps 相关的功能上，包括能够创建本地交付流水线，并进行检查和版本控制。它还提供了与源代码控制系统（如
    GitHub）更好的集成。
- en: 'In order to implement our continuous deployment pipeline, we are going to look
    at two new AWS services—CodePipeline and CodeDeploy:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了实现我们的持续部署流水线，我们将关注两个新的 AWS 服务——CodePipeline 和 CodeDeploy：
- en: '**CodePipeline** lets create our deployment pipeline. We will tell it to take
    our code from GitHub, like we did before, and send it to Jenkins to run CI testing
    on it. Instead of simply returning the result to GitHub, however, we will then
    take the code and deploy it to our EC2 instance with the help of AWS CodeDeploy.'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CodePipeline** 让我们创建我们的部署流水线。我们将告诉它像之前一样从 GitHub 获取我们的代码，并将其发送到 Jenkins 进行
    CI 测试。然而，Jenkins 不再仅仅返回结果到 GitHub，我们将会在 AWS CodeDeploy 的帮助下将代码部署到我们的 EC2 实例。'
- en: '**CodeDeploy** is a service that lets us properly deploy code to our EC2 instances.
    By adding a certain number of configuration files and scripts, we can use CodeDeploy
    to deploy and test our code reliably. Thanks to CodeDeploy, we don''t have to
    worry about any kind of complicated logic when it comes to sequencing our deployment.
    It is tightly integrated with EC2 and knows how to perform rolling updates across
    multiple instances and, if needed, perform a rollback.'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CodeDeploy**是一项服务，让我们可以将代码正确地部署到EC2实例上。通过添加一定数量的配置文件和脚本，我们可以使用CodeDeploy可靠地部署和测试代码。得益于CodeDeploy，我们无需担心部署顺序中的任何复杂逻辑。它与EC2紧密集成，知道如何在多个实例之间执行滚动更新，并且如果需要，还能进行回滚操作。'
- en: For more details, please refer to *Building a continuous deployment pipeline*
    section of this chapter
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息，请参考本章的*构建持续部署流水线*部分。
- en: 'Chapter 6: Scaling Your Infrastructure'
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：扩展你的基础设施
- en: No, it is not always the best choice because a multi-level application means
    more components to manage. If your application works well as a monolith, you can accept a
    short period of downtime and the traffic will not increase over time. You can
    also consider letting it run as it is.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，这并不总是最佳选择，因为多层应用意味着需要管理更多的组件。如果你的应用在单体架构下运行良好，且你能接受短暂的停机时间，并且流量不会随着时间增加，那么你可以考虑让它继续按现状运行。
- en: In the multi-level approach used in this book, all software is in one ZIP file, instead
    in a microservices and more in the serverless approach it is broken in multiple
    parts. For example, in an e-commerce software (the software used to show the content
    to the users in one service), the part to manage the backend to place a new product
    is in one service, while the part to manage the payment is in another service,
    and so on.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本书使用的多层架构方法中，所有软件都在一个ZIP文件中，而在微服务和无服务器架构中，软件被拆分为多个部分。例如，在一个电子商务软件（用于向用户展示内容的服务）中，管理后端以添加新产品的部分是一个服务，而管理支付的部分是另一个服务，等等。
- en: If you are not familiar with the service, it can be difficult. However, AWS
    is full of documentation and video. Furthermore, in this book we demonstrated
    how to use a set of basic services to break the classic monolith approach in multi-level.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你不熟悉该服务，可能会觉得有些困难。然而，AWS提供了大量文档和视频资源。此外，在本书中，我们展示了如何使用一组基本服务在**多层架构**中打破经典的单体架构方法。
- en: This is true for an NLB but you need to pre-warm it if you use an ALB or a CLB.
    You must also do this if your traffic goes up to more than 50 percent every five
    minutes.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于NLB，这个说法是正确的，但如果你使用ALB或CLB，必须先预热。如果流量每五分钟增长超过50%，你也需要这样做。
- en: Using the Certificate Manager is free unless you want to Request a private certificate,
    a classic SSL * certificate can also cost 500 dollars a year.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用证书管理器是免费的，除非你需要**请求一个私有证书**，经典的SSL证书每年也可能需要500美元。
- en: Each AWS Region is organized in AZs and each zone is a separate datacenter.
    Consequently, it is rare that there are issues in one zone but it is not likely
    multiple issues in the same moment. Each subnet can belong to only one zone so
    it is convenient to place each component in at least two, or preferably three, zones.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个AWS区域都由可用区（AZ）组织，每个可用区都是一个独立的数据中心。因此，某一个可用区发生问题的情况很少发生，但同一时刻在多个可用区发生问题的概率较低。每个子网只能属于一个可用区，因此将每个组件至少放置在两个，或者最好放置在三个可用区中，会更加方便。
- en: Chapter 7: Running Containers in AWS
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章：在AWS中运行容器
- en: 'Docker is a container platform to build, ship and run containerized applications.
    The four important components of Docker Engine are as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker是一个容器平台，用于构建、分发和运行容器化应用程序。Docker引擎的四个重要组件如下：
- en: '**Containers**: A read write template'
  id: totrans-57
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：读写模板'
- en: '**Images**: A read only template'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像**：只读模板'
- en: '**Network**: A virtual network for containers'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：容器的虚拟网络'
- en: '**Volumes**: A persistent storage for containers'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卷**：容器的持久存储'
- en: Docker CE can be installed on many platforms including Linux, Windows, and MacOS.
    Refer to [https://docs.docker.com/install/](https://docs.docker.com/install/),
    the official Docker link, click on your choice of platform, and follow the instructions
    to install and configure the latest version of Docker CE on your system.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker CE可以在多种平台上安装，包括Linux、Windows和MacOS。请参考[https://docs.docker.com/install/](https://docs.docker.com/install/)，这是官方的Docker链接，点击选择你的平台，然后按照说明安装并配置Docker
    CE的最新版本。
- en: Confirm the installed Docker CE version by running `docker --version` command.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`docker --version`命令，确认已安装的Docker CE版本。
- en: Use a Dockerfile [https://github.com/yogeshraheja/helloworld/blob/master/Dockerfile](https://github.com/yogeshraheja/helloworld/blob/master/Dockerfile) and
    create an image using `docker build` command. This newly created image is an image
    for Hello World application. Create a container by exposing the port outside using `docker
    run -d -p 3000:3000 <image-name>`. Once done, check and confirm the webserver
    outputs either using `curl` or using your public IP with port `3000` from the
    web browser.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Dockerfile [https://github.com/yogeshraheja/helloworld/blob/master/Dockerfile](https://github.com/yogeshraheja/helloworld/blob/master/Dockerfile) 并使用`docker
    build`命令创建镜像。这个新创建的镜像是用于Hello World应用程序的镜像。通过使用`docker run -d -p 3000:3000 <image-name>`暴露外部端口来创建容器。完成后，使用`curl`或通过浏览器访问公共IP和端口`3000`来检查并确认Web服务器的输出。
- en: Login to your AWS account using your credentials and select ECS service from
    the services tab. There you will find options to Create Amazon ECS Cluster and
    Amazon ECR repository. At this point, click on Repository and create your first
    ECR repository. The screen will also display some of the commands that you can
    use to perform an operation on ECR. Similarly, click on the Cluster tab followed
    by create cluster on the ECS screen. From here, select your choice of cluster
    for Windows or Linux or Network only, click 'next step', and fill in the details
    of your choice. These details include cluster name, provisioning model, EC2 instance
    type, number of instance, and so on. To complete the process, click Create. Once
    a few minutes have passed, your ECS cluster will be ready to use. In this chapter,
    we have demonstrated this using CloudFormation. If you are interested in setting
    up an ECS cluster using the same process, feel free to follow the steps provided
    in the chapter in *Creating an ECS cluster* section.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的凭证登录到AWS账户，并从服务选项卡中选择ECS服务。在这里，您会看到创建Amazon ECS集群和Amazon ECR仓库的选项。此时，点击“仓库”并创建您的第一个ECR仓库。屏幕上还会显示一些您可以用于对ECR执行操作的命令。类似地，点击“集群”选项卡，然后在ECS屏幕上点击“创建集群”。在这里，选择Windows、Linux或仅网络的集群选项，点击“下一步”，并填写您的选择的详细信息。这些信息包括集群名称、配置模型、EC2实例类型、实例数量等。完成该过程后，点击“创建”。几分钟后，您的ECS集群将准备就绪。在本章中，我们通过CloudFormation展示了这一过程。如果您有兴趣使用相同的流程设置ECS集群，可以按照本章*创建ECS集群*部分提供的步骤操作。
- en: Chapter 8: Hardening the Security of Your AWS Environment
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：加强您的AWS环境的安全性
- en: Before starting to build your infrastructure, it is strongly recommended that
    you *lock in* your root account (that is, the account bound to your registration
    email). Then, create IAM users and groups with the necessary privileges, and use
    MFA (instead of just usernames and passwords) for root and IAM users.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始构建基础设施之前，强烈建议您*锁定*根账户（即与注册邮箱绑定的账户）。然后，创建具有必要权限的IAM用户和组，并为根账户和IAM用户启用多因素认证（MFA），而不仅仅是用户名和密码。
- en: You should enable CloudTrail for registering IAM users and role actions, and
    VPC Flow Logs for monitoring and logging network traffic.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该启用CloudTrail以注册IAM用户和角色的操作，并启用VPC流日志以监控和记录网络流量。
- en: No; there is also WAF, an application firewall that works at level 7 of the
    TPC/IP protocol.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不是的；另外还有WAF，一个在TCP/IP协议第7层工作的应用程序防火墙。
- en: You have to follow some best practices to configure your application, expose
    the least possible surface of the app to the internet and scale up and down. There
    are also WAF rate rules that help to limit malicious DDoS attacks.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须遵循一些最佳实践来配置应用程序，将应用程序暴露给互联网的表面降到最低，并实现水平扩展。同时，也有WAF速率规则帮助限制恶意的DDoS攻击。
- en: In theory, you can, but it is convenient to split them between private and public
    subnets, to expose only the necessary resources to the internet. Anything else
    should stay private. Also, it is a best practice to spread parts of your application
    over multiple availability zones. This means, in practice, using multiple data
    centers. For these reasons, and also because one subnet can be in a single AZ,
    you have to use multiple subnets.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理论上，您可以这么做，但将它们分布在私有和公共子网之间更为方便，以仅将必要的资源暴露到互联网。其他任何资源都应该保持私密。此外，最佳做法是将您的应用程序的各部分分布在多个可用区中。这意味着实际上是使用多个数据中心。基于这些原因，并且由于一个子网只能位于一个可用区中，您必须使用多个子网。
