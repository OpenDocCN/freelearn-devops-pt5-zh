- en: Chapter 13. Database Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JIRA offers a lot of project reports to keep track of a project's progress,
    analyze trends over the past few months, and make decisions based on various statistics
    regarding time estimates, status, and workload. In most cases, these reports are
    enough to reach conclusions, but there are times when desirable information cannot
    be fetched from the existing JIRA reports. However, it's possible to generate
    complex reports directly from the database. In this chapter, we will discuss common
    databases that JIRA can use and the schemas these databases use. We will take
    a look at some reports that can only be generated by querying the database directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: JIRA's database schema
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing **MySQL**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing **PostgreSQL**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jiraissue` table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `customfield` table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `customfieldvalue` table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some useful SQL queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JIRA's database schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JIRA stores its configuration and data in a database; if you are evaluating
    JIRA, it's possible to use the embedded **Hyper SQL Database** (**HSQLDB**) written
    in Java. This is suitable for small applications, and JIRA uses it only in its
    evaluation version. HSQLDB is not recommended for production usage. For that,
    JIRA recommends MySQL or PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: No matter what type of database is used, the database schema that is, the tables
    and the relationship between them, is the same. If you want to take a look at
    the schema, you can refer to `JIRA_INSTALL/atlassian-jira/WEB-INF/classes/entitydefs/entitymodel.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the file are as displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![JIRA''s database schema](img/image_13_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is an XML file that contains the definition of all the tables in JIRA and
    their relationship with other tables.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can also check the database schema on the Atlassian website,
    at [https://developer.atlassian.com/display/JIRADEV/Database+Schema](https://developer.atlassian.com/display/JIRADEV/Database+Schema).
  prefs: []
  type: TYPE_NORMAL
- en: Accessing HSQLDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As previously mentioned, HSQLDB is used only for evaluation purposes and should
    not be used for production instances. You may, however, want to run queries to
    generate reports from the database. Luckily, HSQLDB comes with a built-in console
    that can be invoked by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Shut down your JIRA service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following command to start the HSQLDB console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding command, replace `JIRA_INSTALL` and `JIRA_HOME` with the directory
    locations, as per your installation. If you have installed JIRA using the Windows
    installer, the following procedure should work.
  prefs: []
  type: TYPE_NORMAL
- en: First, navigate to the `C:\Program Files\Atlassian\Application Data\JIRA\database`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The **HSQL Database Manager** will be displayed on your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing HSQLDB](img/image_13_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now run SQL queries in the **HSQL Database Manager** and check the output
    in the same window.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **HSQL Database Manager** should never be used in the production instance
    because it's prone to data loss. The recommended database is either MySQL or PostgreSQL.
    Earlier in this book, we discussed how to create a database in MySQL to store
    JIRA's data and configure it during the setup phase. To access your database in
    order to run SQL queries, you can either use the MySQL console, which comes with
    the MySQL server, or you can use **phpMyAdmin**.
  prefs: []
  type: TYPE_NORMAL
- en: phpMyAdmin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The phpMyAdmin application can be downloaded from [http://www.phpmyadmin.net/](http://www.phpmyadmin.net/).
  prefs: []
  type: TYPE_NORMAL
- en: This is a great web-based tool to manage your MySQL database and it's usually
    accessed using `http://localhost/phpmyadmin/`. The exact URL can be different,
    depending on your installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform these following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the previous URL in your browser to launch **phpMyAdmin**:![phpMyAdmin](img/image_13_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that the list of databases appears on the left-hand side. Our
    `jiradb` database also appears in this list. We created this database for our
    JIRA instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the plus (**+**) sign before the database name to expand the table
    for this database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can click on any table to browse its content:![phpMyAdmin](img/image_13_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, we clicked on the `cwd_user` table and on the right-hand side,
    we have the list of users in our JIRA instance.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you can browse any table you want in your JIRA instance. You should
    have some knowledge of JIRA's database schema to make sense out of this data.
    Also, if you want to generate complex reports that involve more than one table,
    you can write SQL queries as well.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **SQL** tab in the top navigation bar:![phpMyAdmin](img/image_13_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To execute your query, perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, you can enter your SQL queries under **Run SQL
    query/queries on database jiradb:**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Go** button to run the SQL query.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The MySQL console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you install the MySQL server on your machine, it comes with the MySQL console.
    This console can also be used to manage your database. It's not very user-friendly
    compared to phpMyAdmin, but once you remember the basic commands, you will likely
    prefer the MySQL console for quick access to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to enter the MySQL console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding command, replace `USERNAME` with your username. In our case,
    it''s `root`. The command will ask you to enter your password, after which you
    will enter the MySQL console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The MySQL console](img/image_13_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the MySQL console, you can enter your commands and run queries.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the structure of a few common JIRA tables and generate
    reports combining these multiple tables. For the following example queries, you
    may use either phpMyAdmin or the MySQL console, depending on your comfort level.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing PostgreSQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you install PostgreSQL using the Windows installer, it comes with **pgAdmin
    III**, which is another tool for PostgreSQL''s administration and management:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing PostgreSQL](img/image_13_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at some JIRA database tables that store useful information.
  prefs: []
  type: TYPE_NORMAL
- en: User table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `cwd_user` table is used to store a user in the system. Let's check the
    structure of this table.
  prefs: []
  type: TYPE_NORMAL
- en: The table structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the query is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The table structure](img/image_13_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finding the list of inactive JIRA users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main responsibilities of JIRA administrators is user management.
    Let's say you want to find the list of inactive users, along with their directory
    information. In big JIRA instances, it may be possible that there are users in
    JIRA's internal directory, as well as users from corporate LDAP.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following query will return the list of inactive users in JIRA:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding query relies on another table, called `cwd_directory`. This directory
    stores the user directory information, whereas whether the user is active or not
    is stored in the `cwd_user` table under the `active` table field.
  prefs: []
  type: TYPE_NORMAL
- en: The jiraissue table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `jiraissue` table is used to store JIRA issues. Let's check the structure
    of this table.
  prefs: []
  type: TYPE_NORMAL
- en: The table structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this query is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The table structure](img/image_13_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finding issues of a specific project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s quite easy to find the list of issues of a specific project using the
    JIRA **Issue Navigator**, but as we are exploring the database schema and its
    various tables, let''s fetch the issues of a specific project directly from the
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding query will display the list of issues of the project with the
    `SSP` key. You can replace the project key with your own and try the previous
    query. The project name and a few other fields are fetched from the `project`
    table.
  prefs: []
  type: TYPE_NORMAL
- en: The customfield table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `customfield` table is used to store all the custom fields. Let's check
    the structure of this table.
  prefs: []
  type: TYPE_NORMAL
- en: The table structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the query is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The table structure](img/image_13_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The customfieldvalue table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `customfieldvalue` table is used to store custom field values. Let's check
    the structure of this table.
  prefs: []
  type: TYPE_NORMAL
- en: The table structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the query is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The table structure](img/image_13_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Some useful SQL queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will list a few useful SQL queries that can help JIRA administrators quickly
    find the information they are looking for. It's important to mention that new
    versions of JIRA are released quite regularly, with new features and bug fixes.
    The database schema may change slightly in new versions. Therefore, verify your
    SQL queries on the new version of JIRA before using them.
  prefs: []
  type: TYPE_NORMAL
- en: List of shared filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following SQL query will list the filters created in the JIRA instance
    that are shared with others:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Fetching users of a specific group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s quite easy to find users of a specific group from the JIRA interface,
    but you should know how to fetch this information using SQL. The following query
    will list the users of the `jira-software-users` group. You can change it to any
    group in your instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: List of users with count of comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the main responsibilities of JIRA administrators is to find users that
    are either inactive or not using JIRA a lot in a given month. The next query will
    fetch the list of users, along with the number of comments they posted in a particular
    month. This will be useful in cases where it''s necessary to find users who are
    active in system, but not performing much activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Fetching the count of issues per component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s say you want to find the list of not only all the components in the
    system, but also the number of issues they are connected to. The following query
    will give you that information quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Listing projects of a specific project category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to retrieve the list of projects in a specific category, use the
    following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: List of assignees or reporters in a particular project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you have to find the list of users who are involved in a particular
    project as either an assignee or as a reporter. This is particularly useful when
    you want to migrate a few projects from one instance to another and you also need
    to migrate the associated users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to retrieve information directly from the database.
    This is quite useful when information cannot easily be fetched from the JIRA interface.
    We discussed some common JIRA tables and looked at some example queries on how
    to find useful information. The ability to access the database directly empowers
    JIRA administrators to generate complex reports and seek information faster.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to customize the look and feel of JIRA
    by inserting custom CSS code. You will also learn to modify the behavior of the
    HTML elements of the JIRA interface using JavaScript. We will take a look at some
    examples to show/hide JIRA fields based on the user selection of a specific value
    of a select list, and to modify the values of text fields to insert text-based
    templates.
  prefs: []
  type: TYPE_NORMAL
