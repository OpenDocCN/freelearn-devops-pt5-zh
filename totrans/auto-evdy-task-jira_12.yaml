- en: '*Chapter 9*: Best Practices'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ability to automate tasks and processes in Jira opens up a whole new world
    of possibilities for streamlining your projects and improving productivity.
  prefs: []
  type: TYPE_NORMAL
- en: This, in turn, brings about its own complexities, and if approached in a haphazard
    manner, you could very well end up with a bunch of rules that instead of increasing
    productivity end up causing more pain than before you started.
  prefs: []
  type: TYPE_NORMAL
- en: Having a set of guidelines to help you get the most out of your automation journey
    is what this chapter is all about.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn where to begin by planning your rules, before diving into implementing
    them and how to approach writing your rules to ensure you maximize performance.
    Finally, we will be looking at some best practices to organize your rules to make
    it easier to manage and maintain them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Planning your rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thinking about performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing your rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira cloud environment**: If you don''t already have access to Jira, you
    can create a free Jira cloud account at [https://www.atlassian.com/software/jira/free](https://www.atlassian.com/software/jira/free)
    and ensure that you have both **Jira Software** and **Jira Service Management**
    selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jira server environment**: If you are using Jira Server (available from [https://www.atlassian.com/software/jira/download](https://www.atlassian.com/software/jira/download)),
    ensure you have licenses for both Jira Software and Jira Service Management. In
    addition, you will also need to ensure that you install the *Automation for Jira*
    app, available from the Atlassian Marketplace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need to be a global Jira administrator in order to follow the examples
    in this chapter. In addition, we have used the *Scrum software project template*
    to create the two software projects that these examples run against.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the latest code samples for this chapter from this book''s
    official GitHub repository at [https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira](https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira).
    Please visit the following link to check the CiA videos: [https://bit.ly/3oVOYw1](https://bit.ly/3oVOYw1)'
  prefs: []
  type: TYPE_NORMAL
- en: Planning your rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you jump in and start creating automation rules, you should have a clear
    purpose about what you want to automate and how to approach your desired outcome,
    and these are things that you should think about in the planning stages.
  prefs: []
  type: TYPE_NORMAL
- en: Having an automation strategy in place first will ensure that your automation
    rules are fit for purpose, are efficient, and meet the objectives of the organization.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at some of the best practices for planning your
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: Planning your automation strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is worth keeping in mind that the primary purpose of automation is to streamline
    your business and to ensure that your processes work more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: When planning what to automate, one of the first things you should do is engage
    with your users. This will uncover valuable insight into which tasks they spend
    the most time doing and how you could leverage automation rules to increase their
    productivity.
  prefs: []
  type: TYPE_NORMAL
- en: You should also take into account the usage patterns of existing requests in
    your system to identify whether there are any automation opportunities you could
    apply to improve overall efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: By planning your rules ahead of time and ensuring they align with your overall
    business and process objectives, you will have a clear idea of what you should
    automate to ensure the overall success of your automation efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll look at why using the appropriate scope for your rules should be
    taken into account during rule planning.
  prefs: []
  type: TYPE_NORMAL
- en: Scoping your rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we saw in [*Chapter 1*](B16551_01_Final_ASB_ePub.xhtml#_idTextAnchor017),
    *Key Concepts of Automation*, rules in Jira can be applied in one of four scopes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single or project-specific rules**: This scope is applied automatically to
    a rule when it is created within a project. An example rule in this scope would
    be the scheduled creation of a project-specific task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-project rules**: This scope is enabled by naming specific projects
    to which a rule applies and can only be applied by a Jira administrator. An example
    of a rule in this scope would be keeping software versions in sync between two
    projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global rules**: This scope is applied automatically when a rule is created
    from the global administration view by Jira administrators. Rules in this scope
    apply to every project in the instance. An example rule in this scope would be
    to close an issue when it is marked as a duplicate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project type-specific rules in the Jira cloud**: This scope is applicable
    to the Jira cloud only and allows a rule to be applied to all projects of a specific
    type. For example, a rule to close a customer request that has not been updated
    for 5 business days could be applied to all *service projects*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is an important aspect to consider as part of the planning for your automation
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main purposes of using automation is to improve the efficiency of
    processes and this is true when deciding how to scope the automation rules themselves.
  prefs: []
  type: TYPE_NORMAL
- en: It is common for multiple projects in a Jira instance to share workflows and
    other common configurations. In the case where a rule is also common across projects,
    it is more efficient to maintain a single rule than to have duplicate rules that
    need to be maintained individually.
  prefs: []
  type: TYPE_NORMAL
- en: This obviously needs to be balanced with the fact that global and multi-project
    rules can only be maintained by users with global Jira administrator permissions
    and not by project administrators.
  prefs: []
  type: TYPE_NORMAL
- en: Thinking about rule design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have determined how your rules fit in with the overall business and
    process strategy for your organization, the next thing to focus on is designing
    the actual automation rules themselves.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key principles of automation is to simplify processes and reduce
    repeatable work, so you want to try and avoid creating rules that are overly complex
    and difficult to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Your rules should be atomic and it should be as simple as possible to get the
    stated task done. Always keep in mind that automation rules usually persist long
    after the original author has moved on to other endeavors and they should be straightforward
    enough that others can understand how the rules work and how they work together.
  prefs: []
  type: TYPE_NORMAL
- en: 'This leads us on to the next point: documenting your rules. It is always good
    practice to document every rule. You should include in the documentation the business
    case for the rule, which should align with your existing stated business goals.'
  prefs: []
  type: TYPE_NORMAL
- en: The documentation for the rule should also include any dependencies the rule
    has on other rules or external systems. For example, if the rule can be triggered
    by the completion of another rule, this should be included in the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensuring your rules are well documented achieves a couple of things:'
  prefs: []
  type: TYPE_NORMAL
- en: It ensures business continuity. When the original rule author moves on, their
    replacements can quickly understand the purpose behind the rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It promotes visibility. Other project administrators can quickly see whether
    there are any existing rules that could be utilized in their projects instead
    of reinventing the wheel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, you should keep a copy of your rules in a version control system such
    as Bitbucket or GitHub. Not only will this ensure you have backups of each rule,
    but it will also allow you to keep track of the change history of each rule.
  prefs: []
  type: TYPE_NORMAL
- en: You will undoubtedly come across a situation where someone performs a change
    to a rule that, in the best case, causes some minor errors, or at worst, causes
    a major incident.
  prefs: []
  type: TYPE_NORMAL
- en: Having the ability to quickly roll back the offending rule to a known working
    version will enable you to resolve these types of incidents efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Automation for Jira allows you to export a copy of each rule that can be downloaded
    in JSON format and that you can then save in your version control system of choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see how clicking on the ellipsis (**…**)
    button to the right of an individual rule gives you the option to export the rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Exporting an individual rule to JSON'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_09.1_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Exporting an individual rule to JSON
  prefs: []
  type: TYPE_NORMAL
- en: Jira administrators also have the option of exporting all the automation rules
    in the system in a single, downloadable, JSON-formatted file.
  prefs: []
  type: TYPE_NORMAL
- en: Doing this on a scheduled basis and storing the resultant file in version control
    will allow an administrator to quickly restore all the automation rules across
    every project in the case of a more widespread incident.
  prefs: []
  type: TYPE_NORMAL
- en: Jira administrators can perform this operation from the global administrative
    interface by navigating to the **System** menu using the cog icon and then selecting
    the **Automation rules** tab from the left-hand menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the ellipsis (**…**) button to the right of the **Create rule**
    button to access the menu option to export all the rules, as can be seen in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Exporting all rules to JSON'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_09.2_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Exporting all rules to JSON
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've understood some of the best practices around planning your rules,
    let's take a look at an example to illustrate this.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to synchronize high-priority bugs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, we are going to use the following scenario.
  prefs: []
  type: TYPE_NORMAL
- en: We have two software projects in Jira, *My Application* with the project key
    *MAPP*, which the development team uses to track their development work, and *My
    Application Support* with the project key *MAPS*, which allows customers to report
    bugs and raise other requests without inundating the development project with
    spurious issues.
  prefs: []
  type: TYPE_NORMAL
- en: After speaking with the application support team, we have discovered that manually
    triaging the highest priority bugs and creating linked development bugs is time-consuming
    and error-prone. We have also ascertained that there are strict checks in place
    to limit the creation of the highest priority bugs. The support team can also
    raise the priority of a bug if required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use this information to create an automation rule to deal with these
    particular bugs:'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to create a global rule as more than one project is involved, so
    only a Jira administrator can create this rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the settings (cog) menu in the top menu bar and select **System**. Then,
    select the **Automation rules** tab in the left-hand menu and finally, click **Create
    rule**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The rule needs to work both when the issue is created and when the priority
    is manually raised, so select the **Multiple issue events** trigger and in the
    **Issue events** field, select **Issue Created** and **Issue Updated**. Click
    **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The rule should only apply to bugs in the MAPS project where the priority is
    highest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **New condition**, followed by **JQL condition**. Type the following
    query into the **JQL** field and click **Save**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To ensure we don't create multiple bugs in the development project when priorities
    are changed multiple times, we need to add a further condition to the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Linked issues`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`relates to`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Are not present`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we want to create a linked bug in the MAPP project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Affects versions`, `Priority`, and `Linked Issues` fields.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Complete the fields as follows and then click `My Application (MAPP)`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Same issue type`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`relates to`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Trigger issue`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The rule should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.3 – A rule to create linked bugs between projects'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_9.3_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.3 – A rule to create linked bugs between projects
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name the rule `Sync highest priority support bugs` and click **Turn
    it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have learned in this section how planning your rules in advance and ensuring
    they fit within your overall business and process strategies and are properly
    documented and controlled will ensure the ultimate success of your automation
    efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Atlassian provides a library of templates that you can use as a starting point
    for your rules. In addition, an Automation Playground is also provided, which
    you can use to explore the various rule components and create dummy rules. You
    can access both of these at [https://www.atlassian.com/software/jira/automation-template-library](https://www.atlassian.com/software/jira/automation-template-library).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a look at some best practices to follow that
    will ensure that the rules you write perform efficiently and keep your Jira instance
    responsive and running smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: Thinking about performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When planning automation rules for any system, you should ensure that they perform
    efficiently and do not consume more resources than absolutely necessary. This
    is essential to maintaining a well-behaved and responsive system.
  prefs: []
  type: TYPE_NORMAL
- en: You are introducing automation to enhance productivity and optimize time-consuming
    processes. The last thing you want is for the automation themselves to have a
    negative impact on the system performance.
  prefs: []
  type: TYPE_NORMAL
- en: The automation engine in Jira is designed to maximize performance wherever possible;
    however, there are some considerations you can take into account when authoring
    your rules to ensure they perform at their best. We'll take a look at some of
    these considerations in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Using project-specific rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scope of a rule plays an important part when it comes to performance. It
    determines how many executions are initially queued for a given rule.
  prefs: []
  type: TYPE_NORMAL
- en: If you have 50 projects, for example, and a single global rule that uses the
    *Create issue* trigger, the rule engine will queue 50 executions when the Create
    issue event is fired, 1 execution per matching project.
  prefs: []
  type: TYPE_NORMAL
- en: If you add another global rule using the Create issue trigger, 100 executions
    will be queued, that is, 1 execution per matching trigger per matching project.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, applying too wide a scope can quickly lead to potential performance
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: In general, though, the majority of the rules you create will usually be specific
    to a particular project and the scope should be limited to that project.
  prefs: []
  type: TYPE_NORMAL
- en: Scoping the rule to only the project or projects where it is actually required
    will ensure that only the minimum number of rule executions will be queued for
    a given event.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at how choosing the appropriate triggers can
    lead to the optimized performance of your rules.
  prefs: []
  type: TYPE_NORMAL
- en: Using the appropriate triggers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another way of ensuring maximum performance is to use an appropriate trigger
    for your rule. This consideration is particularly useful when your rules are reliant
    on changes to specific fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you have a rule that should sum all the story points of sub-tasks
    into the parent task, you could use the **Issue updated** trigger, as can be seen
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Using an Issue updated trigger for the rule'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_09.4_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – Using an Issue updated trigger for the rule
  prefs: []
  type: TYPE_NORMAL
- en: 'While this approach is not incorrect and will work perfectly well, a more efficient
    approach is to use the **Field value changed** trigger and further limit this
    to the **Edit issue** operation, as can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Using the more efficient Field value changed trigger'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_09.5_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – Using the more efficient Field value changed trigger
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this again lies in the fact that when an event is triggered in
    Jira, the automation engine will queue rule executions that match the trigger.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, using the **Issue updated** trigger will match all
    the rules that are configured with an **Issue updated** trigger. If, for example,
    you have 10 rules that use the **Issue updated** trigger, changing the **Story
    Points** field in a sub-task will result in 10 rule executions to be queued for
    processing. This is because the rule engine won't know exactly which **Issue updated**
    rule is relevant.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the rule to use the **Field value changed** trigger and monitoring
    only the **Story Points** field for the **Edit issue** operation will cause only
    a single rule execution to be queued, assuming there are no other rules that use
    this exact same trigger configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conditions are used to narrow the scope of the rule by restricting which issues
    will be affected by further actions in the rule.
  prefs: []
  type: TYPE_NORMAL
- en: The most efficient rules are those that have the least number of issues against
    which to perform additional actions, so excluding issues that do not need to be
    processed as early in the rule execution chain as possible will ensure that your
    rules run as efficiently as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, not all conditions are created equal. When deciding on which condition
    to use, the best approach is to consider using the most efficient and performant
    condition as early as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The conditions listed in order of efficiency, with the highest performance
    first, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Issue fields condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced compare condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JQL condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Issue fields** condition works on data already present in the rule at
    the point where the condition is evaluated and uses simple comparisons to compare
    the field against a constant value or set of values. As no further processing
    is required to evaluate, this is the most efficient condition available to your
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: Where you have multiple fields to compare, you can chain multiple Issue fields
    conditions together to perform more advanced comparisons and still maintain the
    overall performance.
  prefs: []
  type: TYPE_NORMAL
- en: The next condition in order of performance is the **Advanced compare** condition.
    This condition allows the use of smart values and regular expressions and therefore
    these first need to be resolved before the condition can be evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the *Issue fields* condition, you can chain multiple *Advanced compare*
    conditions together to perform more complex comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, the **JQL** condition is the most expensive of these three conditions.
    It also lets you use the full power of Jira's search facility in your comparisons.
    The JQL condition can also contain smart values and if used, these first need
    to be evaluated before the query can be sent to Jira for execution.
  prefs: []
  type: TYPE_NORMAL
- en: Let's re-examine the rule to synchronize the highest priority bugs, which we
    introduced in the *Planning your rules* section, to see how we can optimize its
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing a rule for performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first iteration of this rule, we created a global rule using the *Multiple
    issue events* trigger. As we learned, this could potentially have a performance
    impact on our Jira instance.
  prefs: []
  type: TYPE_NORMAL
- en: This is due to the fact that we used a global scope for the rule as it applies
    to more than one project. We also used a Multiple issue events trigger to listen
    for issue creation and update events. Finally, we used a *JQL condition* to narrow
    the scope of the rule, which we have learned is the least efficient condition
    available to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update the rule to take these performance issues into consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: As a Jira administrator, click the settings (cog) menu in the top menu bar and
    select **System**. Then, select the **Automation rules** tab in the left-hand
    menu and finally, click on the **Sync highest priority support bugs** rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firstly, we'll update the trigger to the *Field value changed* trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **When: Rule is triggered on** component in the rule-chain view
    on the left.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, click the pencil icon to the right of **Multiple issue events** to change
    the trigger.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the `Priority`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Create issue` and `Edit issue`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we are going to switch out the *JQL condition* for the more efficient
    *Issue fields condition*. We will do this using an *if/else block* to make the
    rule easier to read.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **New condition** followed by **If/else block**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the `Project`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`My Application Support (MAPS)`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the `Issue Type`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Bug`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the `Priority`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Highest`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the `Linked issues`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`relates to`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Are not present`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Delete the **If: Issue matches JQL** condition. You can do this by clicking
    the **X** in the top-right corner of the component in the rule-chain view, or
    by selecting the component and clicking the trashcan icon to the right of the
    name, **JQL condition**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delete the **If: Linked issues not present** condition by either clicking the
    **X** in the top-right corner of the component in the rule-chain view or by selecting
    the component and clicking the trashcan icon to the right of the component name.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We then need to move the **Create issue** action into the **If…else block**.
    This is achieved by clicking and dragging the action in the rule-chain view and
    dropping it between the **If: all match component** and **Add component** link.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final step is to change the scope of the rule. Click on `Multiple projects`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`My Application Support (MAPS)` and `My Application (MAPP)`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The rule should now look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Optimizing the rule for performance'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_09.6_B16551_new.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.6 – Optimizing the rule for performance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, click on **Publish changes** to save the changes we made to the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have learned that using the correct scope for your rules
    can have an impact on performance. We also learned how choosing the appropriate
    triggers and conditions can keep our rules performing optimally by choosing the
    most efficient components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll take a look at how to organize rules to make them
    easier to keep track of and manage.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing your rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over time, as you automate more and more tasks in more and more of your projects,
    it is going to become more complex to manage and keep track of all your automation
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to deal with an ever-increasing number of automation rules, and
    configurations in general, is to logically organize each rule.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll look at some best practices to keep your rules optimally
    organized, which will make them easier to find and manage.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by looking at what should be a familiar concept to anyone who
    has had to deal with maintaining large numbers of system configurations: naming
    conventions.'
  prefs: []
  type: TYPE_NORMAL
- en: Using naming conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using a well-defined naming convention allows users to consistently identify
    rules and allows you to organize your rules in a meaningful way.
  prefs: []
  type: TYPE_NORMAL
- en: A good naming convention needs to be planned in advance, documented, and made
    visible to everyone who is going to be managing automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: The list of automation rules in Jira is arranged alphabetically and you should
    make use of this fact when designing your naming convention as it will allow you
    to group related items together.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can sort your automation rules by any of the columns available when working
    in the list. However, the sort order will always default to alphabetically ascending
    by name.
  prefs: []
  type: TYPE_NORMAL
- en: For example, your naming convention could state that each rule should be prefixed
    by the issue type to which it applies. In a software project, this could be something
    similar to `Bug`, `Epic`, `Story`, `Task`, and the like. This way, it is immediately
    apparent what the rule operates on and these rules will always be grouped together
    when sorted by name.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from establishing naming conventions, it is also good practice to describe
    in detail what each rule does, using the **Description** field. This will make
    it immediately clear to anyone looking at the list of rules what in fact is actually
    happening in the rule without needing to inspect each rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see an example of how using a naming convention
    will group the rules together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – The rule list with naming conventions applied'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_09.7_B16551_new.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – The rule list with naming conventions applied
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can see that by using the rule description to clearly document
    what the rule is actually doing, it makes it easier to quickly navigate and manage
    the list of automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: Labeling your rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to using a naming convention, you can, and should, also define labels
    to categorize and identify your automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: A **label** in the context of automation rules is a color-coded keyword that
    you can assign to your automation rules to more easily identify them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, you should use short, functional terms for your labels; some examples
    of functional labels could be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer notifications**: For rules that send notifications to customers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal notifications**: For rules that send notifications to team members'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support**: For rules that deal with support issues'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Synchronization**: For rules that deal with keeping issues or other items
    in sync'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software releases**: For rules dealing with versioning in software projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding list is only a small sample of possible functional label names
    that you could use in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, automation rules can be assigned to multiple labels. For example,
    a rule that creates a linked bug from a support project into the development project
    could be labeled with both the **Support** label and the **Synchronization** label.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new label, or to use an existing label that has been previously
    defined, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Add label** button in the rule list view on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for your label in the **Enter label name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, select a color by clicking on the colored block to the right of
    the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the label has been previously defined, it will show up in a list below the
    label name field as you begin typing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To use a previously defined label, simply click on its name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have defined the label name and color, click **Done**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see how a label is created in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Adding a new label'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_09.8_B16551_new.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – Adding a new label
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have labels defined, you need to assign your rules to the appropriate
    labels. You do this by clicking and dragging the rule onto the appropriate label.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created your labels and assigned your rules accordingly, it becomes
    much easier to manage large numbers of automation rules by selecting the appropriate
    label to narrow down the list of rules, as can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Using labels to quickly find the appropriate rules'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_09.9_B16551_new.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – Using labels to quickly find the appropriate rules
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've gained some insight into how we can organize our rules, let's
    apply this to the rule we optimized in the *Optimizing a rule for performance*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Naming and labeling a rule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s complete our rule to synchronize the highest priority issues by using
    a naming convention. We will also use the **Description** field to describe what
    the rule is doing and then we''ll label it appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: As a Jira administrator, click the settings (cog) menu in the top menu bar and
    select **System**. Then, select the **Automation rules** tab in the left-hand
    menu and finally, click on the **Sync highest priority support bugs** rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Bug – Sync highest priority support bugs`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`When a Bug in the MAPS project is created with a priority of Highest or the
    priority is updated to Highest, create a linked Bug in the MAPP project.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Publish changes** to save the rule, and then click **Return to list**
    to return to the list of rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create two labels, called **Synchronization** and **Support**, and then click
    and drag the **Bug – Sync highest priority support bugs** rule onto each label
    in turn.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The rule should now look similar to the following screenshot when listed along
    with other rules:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Rule organized using naming conventions and labels'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.10_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – Rule organized using naming conventions and labels
  prefs: []
  type: TYPE_NORMAL
- en: We have learned that using a naming convention to organize your rules makes
    it easier to find and manage them. In addition, using the **Description** field
    to create a narrative for the rule helps you to quickly identify what the rule
    is doing. Finally, combining this by applying functional labels will save you
    both time and frustration when it comes to maintaining your rules in the long
    term.
  prefs: []
  type: TYPE_NORMAL
- en: Using a checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are creating your rules, you are not always going to remember all the
    various points we have discussed in this chapter to ensure that your rules follow
    best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Having a checklist that you can quickly reference can help in ensuring that
    you have followed both the best practices we have presented in this chapter and
    any organizational guidance you have prepared.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have, therefore, put together a basic checklist that you can use as a starting
    point to create a checklist in the format that suits you best:'
  prefs: []
  type: TYPE_NORMAL
- en: The rule is correctly scoped to only the project or projects that are affected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rule is documented and includes a business case and implementation approach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rule has been exported and stored in a version control system such as GitHub
    or Bitbucket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An appropriate trigger was used, such as Field value changed rather than Issue
    updated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rule is using the most efficient conditions, such as the Issue fields condition,
    and only relies on more expensive conditions later in the rule as necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rule is named according to the documented naming conventions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rule description sufficiently describes what the rule is doing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rule is assigned to the appropriate functional labels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you have a checklist in place, you will be able to use it to quickly
    identify that your rules follow all the guidelines that you have put in place.
    In turn, this will ensure that your rules are both manageable and less likely
    to contribute to performance issues in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about some of the best practices to follow when
    planning, implementing, and organizing your automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: We learned that you should plan your automation strategy upfront to align with
    your business and process objectives to ensure the ultimate success of your automation
    efforts in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned that to ensure business continuity and to avoid unnecessary
    duplication of effort, your rules should be properly documented in an external
    system such as Confluence and made visible to the appropriate team members.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you should also understand the importance of maintaining external
    copies of your rules in a version control system such as Bitbucket or GitHub to
    ensure that any inadvertent breaking changes to rules can be quickly resolved
    by importing the last known working version of the rule.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learned how to approach rule writing with performance in mind by using
    the appropriate project scopes when defining automation rules, and we learned
    why it is important to use the right triggers and conditions to ensure the optimal
    performance of automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how you could define and use naming conventions to group
    your rules based on the fact that rules are organized alphabetically by default.
    We also learned how to use the labeling feature to create labels to organize our
    rules by functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at some tips and techniques to debug your automation
    rules and how to understand and use service limits and performance insights to
    monitor the automation rules in your Jira instance.
  prefs: []
  type: TYPE_NORMAL
