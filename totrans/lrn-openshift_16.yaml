- en: Building a Multi-Tier Application from Source Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned what build entities are—created by OpenShift—and how
    to deploy a simple PHP application from source code. We showed you how to start
    a new build and how to customize a build process.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you are going to build and deploy a WordPress application from
    a custom template. You are also going to work with OpenShift templates, learn
    how to create and deploy OpenShift templates, and deploy applications from OpenShift
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to cover the topic that is building a multi-tier application.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter relies on a working installation of OpenShift. We assume that OpenShift
    master's address is `openshift.example.com` and the default subdomain is `example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the lab items require a custom DNS record, which can be simulated by
    setting a record in `/etc/hosts`. Both methods are acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: You will be required to run minishift in this Chapter, to avoid certain errors
    and reconfiguration you might be required to do with other openshift deployment
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Building a multi-tier application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We explained to you previously how to use templates to deploy simple and multi-tier
    applications. This allows for deploying complex applications by creating deployment
    configs and deploying a number of pods, services, and routes. This approach is
    limited since most of the multi-tier applications need to be built from source
    code. OpenShift templates allow building applications from source code. The combination
    of building an application from source code and using templates to deploy and
    build a multi-tier application is described in this chapter. This is a hands-on
    chapter that gives you real examples of leveraging OpenShift templates to deploy
    applications in a production environment. Now it is time to see how to build a
    WordPress application from source code using MariaDB as a database.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WordPress is a free and open-source **C****ontent Management System** (**CMS**)
    based on PHP and MySQL. We want to demonstrate the **Source-to-Image** (**S2I**)
    build process for WordPress using templates prepared at [https://github.com/openshift-evangelists/wordpress-quickstart](https://github.com/openshift-evangelists/wordpress-quickstart).
    This repository contains ready-to-use templates for deploying WordPress on an
    OpenShift cluster. There are two example templates available in the repository.
    Let''s clone the repository first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We are going to apply the `wordpress-quickstart/templates/classic-standalone.json` WordPress
    template. For simplicity, we converted the template from JSON to YAML and removed
    persistent storage-related entities. We also removed a default value for the `APPLICATION_NAME`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Building a WordPress application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we want to place the application into a separate namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'First, since it is a new template for us, we want to gather some information
    regarding available parameters. As was previously described, `oc process --parameters`
    can be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that only `APPLICATION_NAME` doesn't have a default value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build the application from source code by instantiating that template
    with its `APPLICATION_NAME=wordpress`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You may want to check the build logs for wordpress application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After some time, all WordPress pods will be up and running, as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This indicates that our application should work now. Let''s see what URL it
    was exposed through and try to access it via a web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once you open your browser and go to `http://wordpress-wp.127.0.0.1.nip.io/`,
    the WordPress application should display a configuration page. Choose you favorite
    language and press `continue` On the next page, just fill in the fields, as shown
    here, and click on `Install WordPress`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next window displays the installation status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the *Log In* button, the following page is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You just need to type in the username and password provided during the setup
    phase. At this point, you should see the WordPress workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This indicates that everything was configured properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following code to clean everything up for the next lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You may also delete your minishift VM running `minishift destroy` command, if
    you are done for today. Or just keep minishift up and proceed with the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to build and deploy a WordPress application
    from a custom template. You learned how to work with OpenShift templates, how
    to create and deploy OpenShift templates, and how to deploy applications from
    OpenShift templates.
  prefs: []
  type: TYPE_NORMAL
- en: The following chapter introduces readers to CI/CD, Jenkins, OpenShift pipelines,
    and Jenkins integration with OpenShift. We are going to show you how to create
    sample CI/CD pipelines in OpenShift, edit pipelines, and manage pipeline execution.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Which of the following OpenShift entities controls the build process (choose
    one):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: buildconfig
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: deploymentconfig
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: replicationctonroller
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: pod
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: route
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following OpenShift entities can be created using templates (choose
    one):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: pod
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: route
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: deployment config
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: buildconfig
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
