- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up a Working Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned what Docker containers are and why they’re
    important. We learned what kinds of problems containers solve in a modern software
    supply chain. In this chapter, we are going to prepare our personal or working
    environment to work efficiently and effectively with Docker. We will discuss in
    detail how to set up an ideal environment for developers, DevOps, and operators
    that can be used when working with Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Linux command shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and using a package manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Git and cloning the code repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing and installing a code editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker Desktop on macOS or Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker Toolbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Kubernetes on Docker Desktop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing minikube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Kind
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need a laptop or a workstation with either macOS
    or Windows, preferably Windows 11, installed. You should also have free internet
    access to download applications and permission to install those applications on
    your laptop. It is also possible to follow along with this book if you have a
    Linux distribution as your operating system, such as Ubuntu 18.04 or newer. I
    will try to indicate where commands and samples differ significantly from the
    ones on macOS or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The Linux command shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker containers were first developed on Linux for Linux. Hence, it is natural
    that the primary command-line tool used to work with Docker, also called a shell,
    is a Unix shell; remember, Linux derives from Unix. Most developers use the Bash
    shell. On some lightweight Linux distributions, such as Alpine, Bash is not installed
    and consequently, you must use the simpler Bourne shell, just called `sh`. Whenever
    we are working in a Linux environment, such as inside a container or on a Linux
    VM, we will use either `/bin/bash` or `/bin/sh`, depending on their availability.
  prefs: []
  type: TYPE_NORMAL
- en: Although Apple’s macOS is not a Linux OS, Linux and macOS are both flavors of
    Unix and hence support the same set of tools. Among those tools are the shells.
    So, when working on macOS, you will probably be using the Bash or zsh shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we expect you to be familiar with the most basic scripting commands
    in Bash and PowerShell, if you are working on Windows. If you are an absolute
    beginner, then we strongly recommend that you familiarize yourself with the following
    cheat sheets:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Linux Command Line Cheat Sheet* by Dave Child at [http://bit.ly/2mTQr8l](http://bit.ly/2mTQr8l)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*PowerShell Basic Cheat Sheet* at [http://bit.ly/2EPHxze](http://bit.ly/2EPHxze)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On a Windows computer, laptop, or server, we have multiple command-line tools
    available. The most familiar is the command shell. It has been available on any
    Windows computer for decades. It is a very simple shell. For more advanced scripting,
    Microsoft has developed PowerShell. PowerShell is very powerful and very popular
    among engineers working on Windows. Finally, on Windows 10 or later, we have the
    so-called Windows Subsystem for Linux, which allows us to use any Linux tool,
    such as the Bash or Bourne shells. Apart from this, other tools install a Bash
    shell on Windows, such as the Git Bash shell. In this book, all commands will
    use Bash syntax. Most of the commands also run in PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we recommend that you either use PowerShell or any other Bash tool
    to work with Docker on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using a package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to install software on a Linux, macOS, or Windows laptop is
    to use a good package manager. On macOS, most people use Homebrew, while on Windows,
    Chocolatey is a good choice. If you’re using a Debian-based Linux distribution
    such as Ubuntu, then the package manager of choice for most is `apt`, which is
    installed by default.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homebrew on macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Homebrew is the most popular package manager on macOS, and it is easy to use
    and very versatile. Installing Homebrew on macOS is simple; just follow the instructions
    at [https://brew.sh/](https://brew.sh/):'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, open a new Terminal window and execute the following command
    to install Homebrew:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the installation has finished, test whether Homebrew is working by entering
    `brew --version` in the Terminal. You should see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we are ready to use Homebrew to install tools and utilities. If we, for
    example, want to install the iconic Vi text editor (note that this is not a tool
    we will use in this book; it serves just as an example), we can do so like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will download and install the editor for you.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Chocolatey on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Chocolatey is a popular package manager for Windows, built on PowerShell. To
    install the Chocolatey package manager, please follow the instructions at [https://chocolatey.org/](https://chocolatey.org/)
    or open a new PowerShell window in admin mode and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is important to run the preceding command as an administrator; otherwise,
    the installation will not succeed. It is also important to note that the preceding
    command is one single line and has only been broken into several lines here due
    to the limited line width.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Chocolatey has been installed, test it with the `choco --version` command.
    You should see output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To install an application such as the Vi editor, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `-y` parameter makes sure that the installation happens without Chocolatey
    asking for a reconfirmation. As mentioned previously, we will not use Vim in our
    exercises; it has only been used as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Once Chocolatey has installed an application, you may need to open a new PowerShell
    window to use that application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git and cloning the code repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using Git to clone the sample code accompanying this book from its
    GitHub repository. If you already have Git installed on your computer, you can
    skip this section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Git on macOS, use the following command in a Terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install Git on Windows, open a PowerShell window and use Chocolatey to install
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, on a Debian or Ubuntu machine, open a Bash console and execute the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once Git has been installed, verify that it is working. On all platforms, use
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should output the version of Git that’s been installed. On the author’s
    MacBook Air, the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you see an older version, then you are probably using the version that came
    installed with macOS by default. Use Homebrew to install the latest version by
    running `$ brew` `install git`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that Git is working, we can clone the source code accompanying this book
    from GitHub. Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will clone the content of the main branch into your local folder, `~/The-Ultimate-Docker-Container-Book`.
    This folder will now contain all of the sample solutions for the labs we are going
    to do together in this book. Refer to these sample solutions if you get stuck.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have installed the basics, let’s continue with the code editor.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing and installing a code editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a good code editor is essential to working productively with Docker. Of
    course, which editor is the best is highly controversial and depends on your personal
    preference. A lot of people use Vim, or others such as Emacs, Atom, Sublime, or
    **Visual Studio Code** (**VS Code**), to just name a few. VS Code is a completely
    free and lightweight editor, yet it is very powerful and is available for macOS,
    Windows, and Linux. According to Stack Overflow, it is currently by far the most
    popular code editor. If you are not yet sold on another editor, I highly recommend
    that you give VS Code a try.
  prefs: []
  type: TYPE_NORMAL
- en: But if you already have a favorite code editor, then please continue using it.
    So long as you can edit text files, you’re good to go. If your editor supports
    syntax highlighting for Dockerfiles and JSON and YAML files, then even better.
    The only exception will be [*Chapter 6*](B19199_06.xhtml#_idTextAnchor130), *Debugging
    Code Running in Containers*. The examples presented in that chapter will be heavily
    tailored toward VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code on macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new Terminal window and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once VS Code has been installed successfully, navigate to your home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open VS Code from within this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: VS will start and open the `The-Ultimate-Docker-Container-Book` folder, where
    you just downloaded the repository that contains the source code for this book,
    as the working folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you already have VS Code installed without using brew, then the guide at
    [https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line](https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line)
    will add code to your path.
  prefs: []
  type: TYPE_NORMAL
- en: Use VS Code to explore the code that you can see in the folder you just opened.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing VS Code on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new PowerShell window in *admin mode* and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close your PowerShell window and open a new one, to make sure VS Code is in
    your path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, navigate to your home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open VS Code from within this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: VS will start and open the `The-Ultimate-Docker-Container-Book` folder, where
    you just downloaded the repository that contains the source code for this book,
    as the working folder.
  prefs: []
  type: TYPE_NORMAL
- en: Use VS Code to explore the code that you can see in the folder you just opened.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing VS Code on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On your Debian or Ubuntu-based Linux machine, you can use Snap to install VS
    Code. Open a Bash Terminal and execute the following statement to install VS Code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you’re using a Linux distribution that’s not based on Debian or Ubuntu,
    then please follow the following link for more details: [https://code.visualstudio.com/docs/setup/linux](https://code.visualstudio.com/docs/setup/linux).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once VS Code has been installed successfully, navigate to your home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open VS Code from within this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: VS will start and open the `The-Ultimate-Docker-Container-Book` folder, where
    you just downloaded the repository that contains the source code for this book,
    as the working folder.
  prefs: []
  type: TYPE_NORMAL
- en: Use VS Code to explore the code that you can see in the folder you just opened.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing VS Code extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Extensions are what make VS Code such a versatile editor. On all three platforms
    (macOS, Windows, and Linux), you can install VS Code extensions the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Bash console (or PowerShell in Windows) and execute the following group
    of commands to install the most essential extensions we are going to use in the
    upcoming examples in this book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are installing extensions that enable us to work with Java, C#, .NET, and
    Python much more productively. We’re also installing an extension built to enhance
    our experience with Docker.
  prefs: []
  type: TYPE_NORMAL
- en: After the preceding extensions have been installed successfully, restart VS
    Code to activate the extensions. You can now click the **Extensions** icon in
    the **activity** pane on the left-hand side of VS Code to see all of the installed
    extensions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To get a list of all installed extensions in your VS Code, use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, let’s install Docker Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Desktop on macOS or Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are using macOS or have Windows 10 or later installed on your laptop,
    then we strongly recommend that you install Docker Desktop. Since early 2022,
    Docker has also released a version of Docker Desktop for Linux. Docker Desktop
    gives you the best experience when working with containers. Follow these steps
    to install Docker Desktop for your system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'No matter what OS you’re us[ing, navigate to the Docker start](https://www.docker.com/get-started)
    page at [https://www.docker.com/get-started](https://www.docker.com/get-started):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Get Started with Docker](img/B19199_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Get Started with Docker
  prefs: []
  type: TYPE_NORMAL
- en: On the right-hand side of the view, you will find a blue **Sign up** button
    for Docker Hub. Click this button if you don’t have an account on Docker Hub yet,
    then create one. It is free, but you need an account to download the software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left-hand side of the view, you will find a blue button called **Download
    for <your OS>**, where **<your OS>** can be Linux, Mac, or Windows, depending
    on which OS you are working with. In the authors’ case, it shows Mac as the target
    OS, but it got the CPU type wrong since the author is using a Mac with Apple’s
    M1 chip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the small drop-down triangle on the right-hand side of the button to
    get the full list of available downloads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – List of Docker Desktop targets](img/B19199_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – List of Docker Desktop targets
  prefs: []
  type: TYPE_NORMAL
- en: Select the one that is appropriate for you and observe the installation package
    being downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: Once the package has been completely downloaded, proceed with the installation,
    usually by double-clicking on the download package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing Docker Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have successfully installed Docker Desktop, let’s test it. We
    will start by running a simple Docker container directly from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal window and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Docker version of Docker Desktop](img/B19199_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Docker version of Docker Desktop
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding output, we can see that it consists of two parts – a client
    and a server. Here, the server corresponds to Docker Engine, which is responsible
    for hosting and running containers. At the time of writing, the version of Docker
    Engine is `20.10.21`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see whether you can run containers, enter the following command into the
    Terminal window and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If all goes well, your output should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Running Hello-World on Docker Desktop for macOS](img/B19199_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Running Hello-World on Docker Desktop for macOS
  prefs: []
  type: TYPE_NORMAL
- en: If you read the preceding output carefully, you will have noticed that Docker
    didn’t find an image called `hello-world:latest` and thus decided to download
    it from a Docker image registry. Once downloaded, Docker Engine created a container
    from the image and ran it. The application runs inside the container and then
    outputs all the text, starting with `Hello` `from Docker!`.
  prefs: []
  type: TYPE_NORMAL
- en: This is proof that Docker is installed and working correctly on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try another funny test image that’s usually used to check the Docker
    installation. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see this or a similar output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Running the cowsay image from Rancher](img/B19199_02_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Running the cowsay image from Rancher
  prefs: []
  type: TYPE_NORMAL
- en: Great – we have confirmed that Docker Engine works on our local computer. Now,
    let’s make sure the same is true for Docker Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Docker Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Depending on the operating system you are working with, be it Linux, Mac, or
    Windows, you can access the context menu for Docker Desktop in different areas.
    In any case, the symbol you are looking for is the little whale carrying containers.
    Here is the symbol as found on a Mac – :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19199_02_Icon.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Mac**: You’ll find the icon on the right-hand side of your menu bar at the
    top of the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**: You’ll find the icon in the Windows system tray.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Docker Desktop` via the **Applications** menu and open it. This will launch
    the Docker menu icon and open the Docker dashboard, reporting the status of Docker
    Desktop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have located the context menu for Docker Desktop on your computer,
    proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the *whale* icon to display the context menu of Docker Desktop. On the
    authors’ Mac, it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Context menu for Docker Desktop](img/B19199_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Context menu for Docker Desktop
  prefs: []
  type: TYPE_NORMAL
- en: 'From the menu, select **Dashboard**. The dashboard of Docker Desktop will open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Dashboard of Docker Desktop](img/B19199_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Dashboard of Docker Desktop
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the dashboard has multiple tabs, indicated on the left-hand
    side of the view. Currently, the `hello-world` and `rancher/cowsay` Docker images.
    They both have a status of **Exited**.
  prefs: []
  type: TYPE_NORMAL
- en: Please take some time and explore this dashboard a bit. Don’t worry if you get
    lost. It will all become much clearer as we proceed through the various chapters
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re done exploring, close the dashboard window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Closing the dashboard will not stop Docker Desktop. The application, as well
    as Docker Engine, will continue to run in the background. If for some reason you
    want to stop Docker on your system completely, you can select **Quit Docker Desktop**
    from the context menu shown in *Step 1*.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you have successfully installed and tested Docker Desktop on
    your working computer! Now, let’s continue with a few other useful tools.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Toolbox has been available for developers for a few years. It precedes
    newer tools such as Docker Desktop. Toolbox allows a user to work very elegantly
    with containers on any macOS or Windows computer. Containers must run on a Linux
    host. Neither Windows nor macOS can run containers natively. Hence, we need to
    run a Linux VM on our laptop, where we can then run our containers. Docker Toolbox
    installs VirtualBox on our laptop, which is used to run the Linux VMs we need.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Docker Toolbox has been deprecated recently and thus we won’t be discussing
    it further. For certain scenarios, it may still be of interest though, which is
    why we are mentioning it here.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Kubernetes on Docker Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Desktop comes with integrated support for Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: What is Kubernetes?
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes is a powerful platform for automating the deployment, scaling, and
    management of containerized applications. Whether you’re a developer, DevOps engineer,
    or system administrator, Kubernetes provides the tools and abstractions you need
    to manage your containers and applications in a scalable and efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'This support is turned off by default. But worry not – it is very easy to turn
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the dashboard of Docker Desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top-left corner, select the cog wheel icon. This will open the **settings**
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the left-hand side, select the **Kubernetes** tab and then check the **Enable**
    **Kubernetes** checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Enabling Kubernetes on Docker Desktop](img/B19199_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Enabling Kubernetes on Docker Desktop
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Apply &** **restart** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you will have to be patient since Docker is downloading all the supporting
    infrastructure and then starting Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Once Docker has restarted, you are ready to use Kubernetes. Please refer to
    the *Installing minikube* section on how to test Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing minikube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using Docker Desktop, you may not need minikube at all since the
    former already provides out-of-the-box support for Kubernetes. If you cannot use
    Docker Desktop or, for some reason, you only have access to an older version of
    the tool that does not yet support Kubernetes, then it is a good idea to install
    minikube. minikube provisions a single-node Kubernetes cluster on your workstation
    and is accessible through kubectl, which is the command-line tool used to work
    with Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing minikube on Linux, macOS, and Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install mi[nikube on Linux, macOS, or Windows, navigate to the](https://kubernetes.io/docs/tasks/tools/install-minikube/)
    following link: [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the instructions carefully. Specifically, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you have a hypervisor installed, as described here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Prerequisites for minikube](img/B19199_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Prerequisites for minikube
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **1 Installation**, select the combination that is valid for you. As
    an example, you can see the authors’ selection for a *MacBook Air M1 laptop* as
    the target machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Selecting the configuration](img/B19199_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Selecting the configuration
  prefs: []
  type: TYPE_NORMAL
- en: Installing minikube for a MacBook Air M1 using Homebrew
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a Terminal window, execute the steps shown previously. In the authors’ case,
    this is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the installation with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’re ready to start a cluster. Let’s start with the default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: minikube allows you to define single and multi-node clusters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first time you do this, it will take a while since minikube needs to download
    all the Kubernetes binaries. When it’s done, the last line of the output on your
    screen should be something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great, we have successfully installed minikube on our system! Let’s try to play
    with minikube a bit by creating a cluster and running our first application in
    a container on it. Don’t worry if the following commands do not make a lot of
    sense to you at this time. We will discuss everything in this book in the coming
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Testing minikube and kubectl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start. Please follow these steps carefully:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try to access our cluster using kubectl. First, we need to make sure
    we have the correct context selected for kubectl. If you have previously installed
    Docker Desktop and now minikube, you can use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – List of contexts for kubectl after installing minikube](img/chainner_txt_B19199_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – List of contexts for kubectl after installing minikube
  prefs: []
  type: TYPE_NORMAL
- en: The asterisk next to the context called minikube tells us that this is the current
    context. Thus, when using kubectl, we will work with the new cluster created by
    minikube.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s see how many nodes our cluster has with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get something similar to this. Note that the version shown could
    differ in your case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Showing the list of cluster nodes for the minikube cluster](img/B19199_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Showing the list of cluster nodes for the minikube cluster
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have a single-node cluster. The node’s role is that of the control
    plane, which means it is a master node. A typical Kubernetes cluster consists
    of a few master nodes and many worker nodes. The version of Kubernetes we’re working
    with here is `v1.25.3`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s try to run something on this cluster. We will use Nginx, a popular
    web server for this. If you have previously cloned the GitHub repository accompanying
    this book to the `The-Ultimate-Docker-Container-Book` folder in your home directory
    (`~`), then you should find a folder setup inside this folder that contains a
    `.yaml` file, which we’re going to use for this test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new Terminal window.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the `The-Ultimate-Docker-Container-Book` folder:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a pod running Nginx with the following command:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We can double-check whether the pod is running with kubectl:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: "This indicates that we have 1 pod with Nginx running and that it has been restarted\L\
    \ 0 times."
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the Nginx server, we need to expose the application running in the
    pod with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the only way can we access Nginx from our laptop – for example, via
    a browser. With the preceding command, we’re creating a Kubernetes service, as
    indicated in the output generated for the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use kubectl to list all the services defined in our cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – List of services on the minikube cluster](img/B19199_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – List of services on the minikube cluster
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding output, we can see the second service called Nginx, which we
    just created. The service is of the `NodePort` type; port `80` of the pod had
    been mapped to port `30373` of the cluster node of our Kubernetes cluster in minikube.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can use minikube to make a tunnel to our cluster and open a browser
    with the correct URL to access the Nginx web server. Use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output in your Terminal window will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Opening access to the Kubernetes cluster on minikube](img/B19199_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Opening access to the Kubernetes cluster on minikube
  prefs: []
  type: TYPE_NORMAL
- en: The preceding output shows that minikube created a tunnel for the nginx service
    listening on node port `30373` to port `64171` on the host, which is on our lapto[p.](http://127.0.0.1:64171)
  prefs: []
  type: TYPE_NORMAL
- en: '[A new browser tab s](http://127.0.0.1:64171)hould have been opened automatically
    and should have navigated you to `http://127.0.0.1:64171`. You should see the
    welcome screen for Nginx:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Welcome screen of Nginx running on a Kubernetes cluster on
    minikube](img/B19199_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Welcome screen of Nginx running on a Kubernetes cluster on minikube
  prefs: []
  type: TYPE_NORMAL
- en: 'Wonderful, we have successfully run and accessed an Nginx web server on our
    little single-node Kubernetes cluster on minikube! Once you are done playing around,
    it is time to clean up:'
  prefs: []
  type: TYPE_NORMAL
- en: Stop the tunnel to the cluster by pressing *Ctrl* + *C* inside your Terminal
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delete the nginx service and pod on the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Stop the cluster with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Stopping minikube](img/B19199_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Stopping minikube
  prefs: []
  type: TYPE_NORMAL
- en: Working with a multi-node minikube cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At times, testing with a single-node cluster is not enough. Worry not – minikube
    has got you covered. Follow these instructions to create a true multi-node Kubernetes
    cluster in minikube:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to work with a cluster consisting of multiple nodes in minikube,
    we can use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command creates a cluster with three nodes and calls it `demo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use kubectl to list all your cluster nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have a 3-node cluster where the `demo` node is a master node, and the two
    remaining nodes are work nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are not going to go any further with this example here, so use the following
    command to stop the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete all the clusters on your system with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will delete the default cluster (called minikube) and the demo cluster
    in our case.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we will move on to the next interesting tool useful when working
    with containers and Kubernetes. You should have this installed and readily available
    on your work computer.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Kind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kind is another popular tool that can be used to run a multi-node Kubernetes
    cluster locally on your machine. It is super easy to install and use. Let’s go:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the appropriate package manager for your platf[orm to install Kind. You
    can find more detailed](https://kind.sigs.k8s.io/docs/user/quick-start/) information
    about the installation process here: [https://kind.sigs.k8s.io/docs/user/quick-start/](https://kind.sigs.k8s.io/docs/user/quick-start/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On MacOS, use Homebrew to install Kind with the following command:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On a Windows machine, use Chocolatey to do the same with this command:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, on a Linu[x machine, you can use the following script to insta](https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64)ll
    Kind from its binaries:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once Kind has been installed, test it with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you’re on a Mac, it should output something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, try to create a simple Kubernetes cluster consisting of one master node
    and two worker nodes. Use this command to accomplish this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After some time, you should see this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Creating a cluster with Kind](img/B19199_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Creating a cluster with Kind
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that a cluster has been created, use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding output shows that there is exactly one cluster called **kind**,
    which is the default name.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create an additional cluster with a different name using the `--name`
    parameter, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Listing the clusters will then show this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And this works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Kind
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have used kind to create two sample clusters, let’s use kubectl
    to play with one of the clusters and run the first application on it. We will
    be using Nginx for this, similar to what we did with minikube:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now use **kubectl** to access and work with the clusters we just created.
    While creating a cluster, Kind also updated the configuration file for our kubectl.
    We can double-check this with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It should produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – List of contexts defined for kubectl](img/B19199_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – List of contexts defined for kubectl
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the kind and demo clusters are part of the list of known clusters
    and that the demo cluster is the current context for kubectl.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to make the demo cluster your current cluster if
    the asterisk is indicating that another cluster is current:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s list all the nodes of the `sample-cluster` cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Showing the list of nodes on the kind cluster](img/B19199_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Showing the list of nodes on the kind cluster
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s try to run the first container on this cluster. We will use our
    trusted Nginx web server, as we did earlier. Use the following command to run
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'To access the Nginx server, we need to do port forwarding using kubectl. Use
    this command to do so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a new browser tab and navigate to `http://localhost:8080`; you should
    see the welcome screen of Nginx:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Welcome screen of Nginx running on a Kind cluster](img/B19199_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Welcome screen of Nginx running on a Kind cluster
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve finished playing with Nginx, use this command to delete the pod
    from the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before we continue, let’s clean up and delete the two clusters we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this, we have installed all the tools that we will need to successfully
    work with containers on our local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we set up and configured our personal or working environment
    so that we can productively work with Docker containers. This equally applies
    to developers, DevOps, and operations engineers.
  prefs: []
  type: TYPE_NORMAL
- en: We started with a package manager that should be at the fingertip of every serious
    engineer. It makes installing and managing applications and tools so much easier.
    Next, we made sure that we used a good shell for scripting – a powerful editor.
    We then made sure to have Docker Desktop installed, which we can use to run and
    test containers natively. Finally, we installed and quickly tested minikube and
    Kind on our machine. The latter are tools that can be used to run and test our
    containers on a local Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’re going to learn important facts about containers.
    For example, we will explore how we can run, stop, list, and delete containers,
    but more than that, we will also dive deep into the anatomy of containers.
  prefs: []
  type: TYPE_NORMAL
- en: Furthe[r reading](https://chocolatey.org/)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Consider the](https://chocolatey.org/) following links for further reading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chocolatey – The Packag*](https://dockr.ly/2nuZUkU)*e Manager for* *Windows*:
    [https://chocolatey.org/](https://chocolatey.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Run Docker on Hyper-V with Docker* *Machine*: [http://bit.ly/2HGMPiI](http://bit.ly/2HGMPiI)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Developing inside a* *Container*: [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Based on what was covered in this chapter, please answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Why would we care about installing and using a package manager on our local
    computer?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With Docker Desktop, you can develop and run Linux containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are good scripting skills (such as Bash or PowerShell) essential for the
    productive use of containers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name three to four Linux distributions on which Docker is certified to run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You installed minikube on your system. What kind of tasks will you use this
    tool for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the answers to this chapter’s questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Package managers such as `apk`, `apt`, or `yum` on Linux systems, Homebrew on
    macOS, and Chocolatey on Windows make it easy to automate the installation of
    applications, tools, and libraries. It is a much more repeatable process when
    an installation happens interactively, and the user has to click through a series
    of views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The answer is *True*. Yes, with Docker Desktop, you can develop and run Linux
    containers. It is also possible, but not discussed in this book, to develop and
    run native Windows containers with this edition of Docker Desktop. With the macOS
    and Linux editions, you can only develop and run Linux containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scripts are used to automate processes and hence avoid human errors. Building,
    testing, sharing, and running Docker containers are tasks that should always be
    automated to increase their reliability and repeatability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following Linux distros are certified to run Docker: **Red Hat Linux**
    (**RHEL**), CentOS, Oracle Linux, Ubuntu, and more.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: minikube makes it possible to define and run a single or multi-node cluster
    on a local computer such as a developer’s laptop. This way, using minikube, you
    can run and test containerized applications locally on your machine and do not
    have to rely on a remote Kubernetes cluster such as one running in the cloud on,
    say, AWS, Microsoft Azure, or Google cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Part 2:Containerization Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part teaches you how to start, stop, and remove containers, and how to
    inspect containers to retrieve additional metadata from them. Furthermore, it
    explains how to run additional processes and how to attach to the main process
    in an already running container. It also covers how to retrieve logging information
    from a container, which is produced by the processes running inside it. Finally,
    this part introduces the inner workings of a container, including such things
    as Linux namespaces and groups.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19199_03.xhtml#_idTextAnchor057), *Mastering Containers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19199_04.xhtml#_idTextAnchor083), *Creating and Managing Container
    Images*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19199_05.xhtml#_idTextAnchor109), *Data Volumes and Configuration*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19199_06.xhtml#_idTextAnchor130), *Debugging Code Running in
    Containers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19199_07.xhtml#_idTextAnchor150), *Testing* *Applications* *Running
    in Containers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19199_08.xhtml#_idTextAnchor174), *Increasing Productivity with
    Docker Tips and Tricks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
