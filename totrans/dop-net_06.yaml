- en: Chapter 6. Orchestrating SDN Controllers Using Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：使用Ansible编排SDN控制器
- en: This chapter will focus on SDN controllers and the ways they can enable network
    teams to simplify their daily tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点讨论SDN控制器及其如何帮助网络团队简化日常任务。
- en: We will look at why SDN Controllers have been adopted and highlight some of
    the immediate business benefits they will bring if utilized correctly. It will
    focus on ways in which network operations need to be divided so network operations
    can scale, by utilizing automation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨为什么SDN控制器被采纳，并重点介绍它们在正确使用时所带来的即时业务好处。重点讨论的是如何拆分网络操作，以便通过利用自动化扩展网络操作。
- en: This chapter will discuss the benefits of utilizing software-defined networking
    and look at practical configuration management processes that can be used to orchestrate
    SDN Controller APIs and object models. Finally, we will look at how Ansible can
    be used to execute and wrap some of these configuration management processes,
    using Nuage VSP as a practical example.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论利用软件定义网络的好处，并介绍可用于编排SDN控制器API和对象模型的实际配置管理流程。最后，我们将探讨如何使用Ansible执行并包装一些这些配置管理流程，以Nuage
    VSP作为实际示例。
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Arguments against software defined networking
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于软件定义网络的争议
- en: Why would a company utilize SDN?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么公司要使用SDN？
- en: Splitting up network operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络操作的拆分
- en: Immutable networking
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可变的网络
- en: Using Ansible to orchestrate SDN controllers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible编排SDN控制器
- en: Arguments against software-defined networking
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于软件定义网络的争议
- en: With the emergence of public clouds such as AWS, Microsoft Azure, and Google
    Cloud, networking is now being treated more like a commodity and has moved from
    silicon to software. This has allowed developers the ability to mutate the network
    to best serve the applications, rather than retrofit applications into an aging
    network, that is probably not optimized for modern microservice applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着AWS、Microsoft Azure和Google Cloud等公共云的出现，网络现在被视为一种商品，并从硬件转向了软件。这使得开发人员能够根据应用程序的需求调整网络，而不是将应用程序强行适配到一个可能未针对现代微服务应用程序进行优化的老旧网络中。
- en: It would therefore seem nonsensical if any business would want to treat their
    internal data center networking any differently. However, like all new ideas,
    before acceptance and adoption comes fear and uncertainty, inherently co-related
    with the new or different ways of working.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果任何企业想要以不同的方式对待其内部数据中心网络，那么这似乎是没有意义的。然而，像所有新思想一样，接受和采用之前总是伴随着恐惧和不确定性，这与新的或不同的工作方式密切相关。
- en: 'Common arguments against using a clos Leaf-Spine architecture and SDN controllers
    center around one common theme, that it requires change and change is hard. We
    then harp back to the mythical 8th layer of the OSI model, and that is the **User**
    layer:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 反对使用Clos Leaf-Spine架构和SDN控制器的常见争论围绕一个共同的主题，那就是它需要变革，而变革是困难的。我们回到OSI模型的传说中的第8层，那就是**用户**层：
- en: '![Arguments against software-defined networking](img/B05559_06_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![关于软件定义网络的争议](img/B05559_06_01.jpg)'
- en: The network operators have to feel comfortable with any solution that is implemented.
    This is very important, but by the same token, the **User** layer is equally important
    as it is the networking service provided by the network team to end users. So
    ease of use is important on two levels, both network operations and the self-service
    operations provided to the consumers of the network.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 网络操作员必须对实施的任何解决方案感到舒适。这一点非常重要，但同样重要的是**用户**层，因为它是由网络团队提供给最终用户的网络服务。因此，易用性在两个层面上都很重要：网络操作和提供给网络消费者的自服务操作。
- en: Before a company considers putting in software-defined networking, they need
    to be doing it for the correct reasons and make it requirements-based. Simply
    implementing a new tool, in this case an SDN Controller, will not solve operational
    issues alone.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在公司考虑实施软件定义网络之前，他们需要出于正确的理由，并根据需求来实施。单纯实施一个新工具，在这种情况下是SDN控制器，无法单独解决操作性问题。
- en: Organizations need to work out what the new operational model should be and
    utilize software-defined networking as a facilitator for those new business processes,
    focusing on speed of operations with the aim of removing networking as the bottleneck
    for application delivery. In short, network operations need to be DevOps friendly
    or they will inhibit software delivery and slow down the whole application lifecycle.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 组织需要弄清楚新的运营模式应是什么，并利用软件定义网络作为这些新业务流程的促进者，专注于运营速度，旨在消除网络作为应用交付瓶颈的存在。简而言之，网络运营需要适应DevOps，否则它们会妨碍软件交付，拖慢整个应用生命周期。
- en: Added network complexity
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增加的网络复杂性
- en: Some of the arguments used against using overlay networks are that they are
    more complex than traditional layer 2 networks, with many more moving parts that
    could cause a bigger variety of failures.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 反对使用覆盖网络的部分论点是，它们比传统的二层网络更复杂，拥有更多的动态组件，这些组件可能导致更广泛的故障。
- en: Although the constructs of an overlay and underlay network may be different,
    it is fair to say software-defined networking is still a relatively new concept
    and a lot of people fear change. As long as the base requirements in terms of
    network availability, redundancy, performance, and speed of change are met, then
    there should be no reason not to implement software-defined networking.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管覆盖网络和基础网络的构建方式可能不同，但可以公平地说，软件定义网络仍然是一个相对较新的概念，许多人对改变感到恐惧。只要在网络可用性、冗余性、性能和变更速度等基本要求得到满足，就没有理由不实施软件定义网络。
- en: The fear of software-defined overlay networks can be likened to operations staff's
    initial skepticism towards server virtualization when they initially argued against
    the introduction of hypervisors. These new concepts were initially viewed as an
    added layer of complexity and added abstraction layer that would probably not
    be as performant.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对软件定义覆盖网络的恐惧可以类比为运营人员最初对服务器虚拟化的怀疑，他们最初反对引入虚拟机监控程序。这些新概念最初被视为额外的复杂层和抽象层，可能不会像预期那样具有良好的性能。
- en: However, the portability and opportunities introduced by running a hypervisor
    greatly outweighed any performance implications for the vast majority of application
    use cases. The benefits included increased portability, flexibility, and speed
    of operations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过运行虚拟机监控程序所带来的可移植性和机遇，远远超过了对绝大多数应用场景的性能影响。这些好处包括提高的可移植性、灵活性和操作速度。
- en: There are of course edge cases and some applications that don't fit into the
    virtualized model, but the benefits that virtualization brings for 99 percent
    of the data center mean that as a business solution it can't really be ignored.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，仍然存在一些边缘案例和不适用于虚拟化模型的应用，但虚拟化为99%的数据中心带来的好处意味着，作为一种商业解决方案，它实在不能被忽视。
- en: Overlay networks give the same benefits to networking as hypervisors did to
    servers. Of course, when implementing a software-defined overlay network, the
    underlay should be built for redundancy, so that if a failure occurs, it occurs
    on the underlay and does not impact the overlay.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖网络为网络带来的好处与虚拟机监控程序为服务器带来的好处相似。当然，在实施软件定义覆盖网络时，基础网络应该为冗余性构建，这样一旦发生故障，它会发生在基础网络上，而不会影响覆盖网络。
- en: The underlay network should be horizontally scaleable and simple, in the case
    of a Leaf-Spine architecture, which has a series of Spine switches connected to
    Leaf switches that sit on top of each rack. The introduction of more racks paired
    with Leaf switches, or even a new Spine to prevent over-subscription of links,
    allow horizontal scalability.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 基础网络应具备横向扩展性且简单，以叶脊架构为例，架构中一系列脊交换机连接到位于每个机架顶部的叶交换机。引入更多配有叶交换机的机架，或者增加新的脊交换机来防止链路过载，可以实现横向扩展性。
- en: On the topic of overlay networks adding complexity, Any systems reliability
    engineer or network engineer that has spent hours debugging an ill-performing
    link in a layer 2 Spanning Tree network will testify that Spanning Tree networks
    are themselves very complex by nature. The systems reliability engineer or network
    engineer will also probably be able to show you the network diagram they had to
    draw in an attempt to solve the issue as evidence of the complexity.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关于覆盖网络增加复杂性的问题，任何一位花费数小时调试二层生成树网络中表现不佳的链路的系统可靠性工程师或网络工程师都会证明，生成树网络本身就非常复杂。系统可靠性工程师或网络工程师可能还会展示他们为了解决问题而绘制的网络图，作为复杂性的证据。
- en: So networks are complex beasts at the best of times; however, when utilizing
    underlay and overlay networks, the main focus on the underlay network should be
    horizontal scalability and performance. It should ensure that network operators
    can easily scale out the network based on demand.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，网络在最好的时候也很复杂；然而，在使用承载网和叠加网时，承载网的主要关注点应是横向可扩展性和性能。它应确保网络运营商能够根据需求轻松扩展网络。
- en: Alternatively, the focus of the overlay network is simplicity, so it should
    have easy-to-understand software constructs while at the same time ensure that
    the API endpoints can cope with the desired number of concurrent requests from
    consumers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，叠加网络的重点是简洁性，因此它应该具有易于理解的软件结构，同时确保API端点能够处理来自消费者的所需数量的并发请求。
- en: If implemented correctly, networks should be componentized into two distinct
    sections. The overlay user friendly software, much like AWS, Microsoft Azure,
    Google Cloud, or OpenStack, and the underlay is the gritty, hardcore, networking
    that needs to be well designed by a network architect and built for scale.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实施得当，网络应该分为两个不同的部分。叠加网络是用户友好的软件，类似于AWS、Microsoft Azure、Google Cloud或OpenStack，而承载网则是需要网络架构师精心设计并为可扩展性构建的硬核网络。
- en: Lack of software-defined networking skills
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺乏软件定义网络技能
- en: Another argument against not implementing a software-defined network is lack
    of skills in the industry currently; with any new technology there is initially
    a lack of skilled people to support it. One viewpoint is that companies will have
    to hire completely new staff to implement software defined networking.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个反对不实施软件定义网络的论点是当前行业内缺乏技能；对于任何新技术来说，最初都会缺乏足够的熟练人员来支持它。一个观点是，公司将不得不雇佣全新的员工来实施软件定义网络。
- en: However, this can be offset by partnering with an SDN vendor or utilizing provided
    training programs for staff. It is a business transformation and as such, network
    staff will need to build new skills over a period of time.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这可以通过与SDN供应商合作或利用提供的员工培训计划来弥补。这是一种业务转型，因此，网络人员需要在一段时间内不断培养新技能。
- en: But networking staff will need to evolve with the changes software-defined networking
    bring and build new skills like other teams in IT. Implementing software defined
    networking is a big change at first, but good networking staff should be excited
    and embrace these changes. The efficiency and benefits that can be had from implementing
    software-defined networking are undeniable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，网络人员需要随着软件定义网络带来的变化而发展，并像IT的其他团队一样培养新技能。实施软件定义网络一开始是一个巨大的变化，但优秀的网络人员应该感到兴奋并迎接这些变化。实施软件定义网络所能带来的效率和收益是不可否认的。
- en: Change can be daunting at first and can seem like a monumental cultural shift
    or effort at times. To initiate successful change in large or even small companies
    it usually has to come with top-down sponsorship or backing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 改变一开始可能令人畏惧，有时可能看起来像是一次巨大的文化变革或努力。要在大公司甚至小公司中成功发起变革，通常必须有自上而下的支持或支持。
- en: Adopting software-defined networking will mean changing the business's operational
    model and automation will need to be embraced at every level; network tasks in
    the overlay simply can't be manual when using an SDN controller. An organization
    implementing software-defined networking also needs to look at ways of automating
    the underlay. In this book we have already looked at ways in which APIs can be
    utilized to configure network devices, so really, both the underlay and overlay
    need to be automated.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 采用软件定义网络将意味着改变业务的运营模式，并且自动化将在每个层面上得到采用；在使用SDN控制器时，叠加网络中的网络任务不能再是手动的。实施软件定义网络的组织还需要寻找自动化承载网的方法。在本书中，我们已经研究了如何利用API配置网络设备，因此，承载网和叠加网都需要实现自动化。
- en: The term software-defined data center is somewhat overused by vendors, but the
    principles behind it can't be ignored if a network team wants to provide a great
    user experience to the rest of the business. If a company puts in a software-defined
    networking solution as a standalone initiative, then it will add no true value
    if automation isn't written to speed up network operations utilizing the rich
    set of APIs that are provided. If companies are going to put in a software-defined
    network and have network engineers manually enter commands on network devices
    or use a GUI, the company may as well not bother, as they can do that with any
    out-of-the-box switch or router; they are wasting the opportunity a software-defined
    overlay network offers.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: “软件定义数据中心”这一术语被厂商过度使用，但如果网络团队希望为公司其他部门提供卓越的用户体验，这背后的原则不能被忽视。如果公司将软件定义网络解决方案作为独立的举措来实施，但如果没有编写自动化以利用提供的丰富
    API 来加速网络操作，那么它将没有真正的价值。如果公司要部署软件定义网络，并让网络工程师手动输入网络设备上的命令或使用 GUI，那么公司不如不做，因为他们可以使用任何现成的交换机或路由器来做到这一点；他们浪费了软件定义覆盖网络所提供的机会。
- en: Just putting in the software-defined networking solution and still having developers
    raise network tickets will give zero business value; it will not increase efficiency,
    time to market, or the reliability of changes. To ensure organizations extract
    the significant business benefits out of software-defined networking, you need
    an all-or-nothing approach; network operations are either completely automated
    or over time become fragmented and broken.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅部署软件定义网络解决方案，而仍然让开发人员提出网络工单，将不会带来任何商业价值；它不会提高效率、市场上线时间或变更的可靠性。为了确保组织从软件定义网络中提取出显著的商业利益，你需要一种全有或全无的方法；网络操作要么完全自动化，要么随着时间推移变得碎片化并崩溃。
- en: If network engineers persist with doing manual updates outside the automated
    workflows, then it has the opportunity to break the whole operational mode. It
    changes the desired state of the network, and it could break the automation completely.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网络工程师坚持在自动化工作流外进行手动更新，那么它可能会打破整个操作模式。它会改变网络的期望状态，并可能完全破坏自动化。
- en: When putting in software-defined networking, automate all the common operations
    first and allow developers to serve themselves and make it immutable if possible.
    Being able to rebuild the network from source control management systems should
    be the aim as it acts as a record of change.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署软件定义网络时，首先自动化所有常见操作，并允许开发人员自助服务，如果可能的话，确保它是不可变的。能够从源代码控制管理系统重建网络应该是目标，因为它充当了变更记录。
- en: In [Chapter 3](ch03.html "Chapter 3. Bringing DevOps to Network Operations"),
    *Bringing DevOps to Network Operations,* we looked at ways of initiating cultural
    change. Humans are creatures of habit, they tend to stick with what they know;
    network engineers have spent years gathering networking certifications on ways
    to configure Spanning Tree algorithms and layer 2 networks, so this is a huge
    cultural shift.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章：将 DevOps 引入网络操作")，*将 DevOps 引入网络操作*，我们讨论了如何启动文化变革。人类是习惯性动物，他们倾向于坚持自己知道的东西；网络工程师花了多年时间获得网络认证，学习如何配置生成树算法和二层网络，因此这是一次巨大的文化转变。
- en: Stateful firewalling to support regularity requirements
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持常规要求的有状态防火墙
- en: One of the main issues highlighted with software-defined networking has been
    the lack of stateful firewalling, due to Open vSwitch being based on flow data
    and being traditionally stateless. Until recently, reflexive rules were utilized
    to emulate stateful firewalling at the kernel user space level.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 软件定义网络的主要问题之一是缺乏有状态防火墙，因为 Open vSwitch 基于流量数据，并且传统上是无状态的。直到最近，反射规则被用来在内核用户空间级别模拟有状态防火墙。
- en: However, recent feature developments with Open vSwitch has allowed stateful
    firewalling to be implemented. So the lack of stateful firewalling is no longer
    an issue with Open vSwitch. **Connection tracking** (**conntrack**), previously
    only available as part of iptables, has now been decoupled from iptables, meaning
    that it is now possible to match on connections as well as flow data.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最近 Open vSwitch 的特性发展使得有状态防火墙得以实现。因此，Open vSwitch 的有状态防火墙问题不再存在。**连接跟踪**（**conntrack**），以前仅作为
    iptables 的一部分，现在已从 iptables 中解耦，这意味着现在可以同时根据连接和流量数据进行匹配。
- en: 'The Nuage VSP platform has introduced stateful firewalling as part of its 4.x
    release. The Nuage VSP platform has replaced reflexive rules for stateful rules,
    to govern all ICMP and TCP ACL rules on the Nuage VRS (Nuage''s customized version
    of Open vSwitch):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![Stateful firewalling to support regularity requirements](img/B05559_06_02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: Why would organizations need software-defined networking?
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any good enterprise networks should be built with the following goals in mind:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalability
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redundancy
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The network, first and foremost, needs to be *performant* to meet customer needs.
    Customers can be end users in the data center or end users of the application
    in the public domain. With Continuous Delivery and deployment, if networking blocks
    a developer in a test environment, it is hampering a potential feature or bug
    fix reaching production, so it is not acceptable to have sub-standard pre-production
    networks and they should be designed as scaled-down functional replicas of production.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '*Scalability* focuses on the ability to scale out the network to support company
    growth and demand. As more applications are added, how does the network horizontally
    scale? Is it cost effective? Can it easily be adapted to cater for new services
    such as third-party VPN access or point-to-point network integration? All these
    points need to be given proper consideration when creating a flexible and robust
    network design.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '*Redundancy* is built on the concept that any enterprise network should have
    no single points of failure. This is so that the network can recover from a switch
    failure or an issue with a core router and not cause outages to customers. Every
    part of the network should be set up to maximize uptime.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: These three points seem to have been the staple on which good networks were
    designed and built in the past. However, as applications have moved from monoliths
    to microservices, additional requirements are necessary for successful network
    operations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, monolithic applications have tended to have one setup operation
    and then remained fairly static, while microservice applications on the other
    hand have required more dynamic networks that are subject to greater variance
    of change.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: The needs of the modern network have evolved and networks need to be updated
    rapidly to deal with the requirements of microservice architectures, without having
    to wait on a network engineer to process a ticket. With Continuous Delivery forming
    feedback loops, it is imperative that the process is quick and lean, and issues
    can be fixed quickly otherwise the whole process will break down and grind to
    a stand-still.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Software-defined networking adds agility and precision
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Software-defined networking or in particular overlay networking, still focuses
    on *performance*, *scalability,* and *redundancy*; they should never be compromised,
    but also introduces the following benefits:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Agility
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mean time to recover
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Precision and repeatability
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software-defined networking puts the network into a software overlay network
    with associated object model, which allows the network to be programmable by exposing
    a rich set of APIs. This means that workflows can be used to set up network functions,
    the same way infrastructure can be controlled in a cloud or virtualization environment.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 软件定义网络将网络放入具有关联对象模型的软件覆盖网络中，这使得网络可以通过暴露丰富的 API 集合来进行编程。这意味着，工作流可以用于设置网络功能，就像在云或虚拟化环境中控制基础设施一样。
- en: As the network is programmable, requesting a new subnet or making an ACL change
    can be done as quickly as spinning up a virtual machine on a hypervisor. Software-defined
    networking removes the traditional blockers or operational inhibitors. These have
    often included being required to raise a ticket to a network operation team to
    mutate the network, which was subject to a lengthy change control process. Instead,
    when utilizing software-defined networking, a developer can control a subnet of
    network operations via an API call so changes can be carried out at pace.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于网络是可编程的，请求新的子网或进行 ACL 更改可以像在虚拟机监控程序上启动虚拟机一样迅速完成。软件定义网络消除了传统的阻碍因素或操作限制。过去，这些往往包括需要向网络运维团队提出工单来更改网络，而这个过程通常受到冗长的变更控制流程的制约。相反，利用软件定义网络时，开发人员可以通过
    API 调用控制网络操作的子网，从而能够快速进行更改。
- en: '*Mean time to recover* has also improved when utilizing software-defined networking
    because network changes are programmable, so network inventory can be stored in
    source control management systems. This versions the network so any change is
    delivered via source control management and allows network changes to be modular,
    auditable, and easy to track.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用软件定义网络时，*平均恢复时间*也得到了改善，因为网络更改是可编程的，因此网络清单可以存储在源代码管理系统中。这使得网络可以版本化，任何更改都会通过源代码管理进行交付，并使网络更改具备模块化、可审计和易于跟踪的特性。
- en: If a breaking change has occurred to the overlay network, a version tree in
    the source control management system can be used to see what has changed since
    the network's last working release. The same programmable script can then be used
    to quickly roll back the network change back to the previous version and remove
    the issue. This is, of course, the beauty of implementing an immutable network
    rather than static networks, where the state is always as clean as the day one
    network and can be rolled forward or back on demand.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果覆盖网络发生了重大更改，可以通过源代码管理系统中的版本树查看自上次网络正常发布以来发生了什么变化。然后可以使用相同的可编程脚本快速回滚网络更改至之前的版本，解决问题。当然，这就是实现不可变网络的美妙之处，而不是静态网络，在这种网络中，状态始终保持与初始网络一样干净，可以根据需要向前或向后滚动。
- en: '*Repeatability* in software-defined networking is catered for using programmatic
    operational workflows, so that all network changes are carried out in an identical
    way by all users. These operations can be executed using the API workflows approved
    by the network team against the overlay network.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 软件定义网络中的*可重复性*是通过程序化操作工作流来实现的，以便所有网络更改都能以相同的方式由所有用户执行。这些操作可以通过网络团队批准的 API 工作流对覆盖网络进行执行。
- en: The use of programmatic workflows means that network changes can be integrated
    into application deployment processes such as Continuous Delivery. This means
    network changes, like code, will be checked into source control management systems,
    pushed to a test environment using programmatic workflow actions (to manage the
    desired state of the network), tested and verified, and only then promoted onto
    the next test environment or production.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 程序化工作流的使用意味着网络更改可以融入到应用程序部署过程中，例如持续交付。这意味着，像代码一样，网络更改将被检查到源代码管理系统中，通过程序化工作流操作（以管理网络的期望状态）推送到测试环境，进行测试和验证，然后再推广到下一个测试环境或生产环境。
- en: This repeatability of using an overlay network ensures all the constructs of
    a quality assurance test environment can be the same as a production environment,
    as all networking constructs are described in software and are easy to reproduce.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用覆盖网络的可重复性确保了质量保证测试环境中的所有构造可以与生产环境相同，因为所有的网络构造都在软件中描述，并且容易复现。
- en: A good understanding of Continuous Delivery is key
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对持续交付有良好的理解是关键。
- en: Organizations looking to utilize software-defined networking should ideally
    already have a well-established Continuous Delivery model for code and infrastructure
    before tackling network operations. Companies committed to investing in a DevOps
    transformation would also benefit greatly from designing their new operational
    model around a software-defined network.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 寻求利用软件定义网络的组织，理想情况下应该已经为代码和基础设施建立了一个成熟的持续交付模型，然后再处理网络操作。那些致力于进行DevOps转型的公司，也会从围绕软件定义网络设计新运营模型中大大受益。
- en: Companies which have mandated their business functions to automate all IT operations,
    inclusive of networking functions, would receive immeasurable quantifiable benefits
    from using an SDN controller to help their teams automate the network. Companies
    with an inherit understanding of DevOps, **continuous integration**, and **Continuous
    Delivery** are more likely to utilize SDN controllers to their full capabilities
    and drive innovation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 那些要求将其所有IT操作，包括网络功能，自动化的公司，将从使用SDN控制器帮助团队自动化网络中获得不可估量的量化收益。那些本身理解DevOps、**持续集成**和**持续交付**的公司，更有可能充分利用SDN控制器的全部能力，并推动创新。
- en: To emphasize the point, if overlay networks are modified by network engineers
    by hand rather than programmatically, it will bring no business value and the
    company will have missed the point.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 强调一点，如果覆盖网络是由网络工程师手动修改而不是程序化修改的，那么它将不会带来任何商业价值，公司也会错失关键。
- en: Operational models need to change when implementing software-defined networking
    and if an issue occurs it needs to be built back into the automation to fix the
    issue so it doesn't re-occur. Any complex process, when initially automated, will
    probably hit some unexpected edge cases and fail under unexpected conditions.
    As a result, it is important that automated processes are continually iterated
    and improved on. Having teams adopt a continuous improvement methodology will
    ensure that automated processes are iterated and improved so they become more
    and more robust over time.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 实施软件定义网络时，操作模型需要改变，如果发生问题，需要将其纳入自动化流程中进行修复，以避免问题再次发生。任何复杂的流程在最初自动化时，可能会遇到一些意想不到的边缘情况，并在未预料到的条件下失败。因此，持续迭代和改进自动化流程非常重要。让团队采用持续改进的方法论，将确保自动化流程不断迭代和改进，从而随着时间的推移变得越来越稳健。
- en: It is important to appreciate that edge cases will occur and to not panic when
    they do; fixing a problem with the automation fixes it for all users, but by the
    same token a problem with the automation can cause multiple users to be impacted,
    so it is a double-edged sword. Creating sufficient testing when creating automated
    processes to try and catch these edge cases in test environments becomes vitally
    important.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要认识到边缘情况会发生，并且在发生时不要惊慌；通过自动化修复问题会使所有用户受益，但同样，自动化中的问题可能会影响多个用户，因此它是一把双刃剑。在创建自动化流程时，进行充分的测试，以尽量在测试环境中捕捉这些边缘情况，变得至关重要。
- en: One of the benefits automation brings is that that all changes can be carried
    out with the precision of a highly skilled network engineer who can supply all
    their knowledge to automation. This means that every automated network change
    is done with the same care and precision as the best network engineer in the company.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化带来的好处之一是，所有变更都可以像一位高技能的网络工程师一样精确地执行，这位工程师可以将所有的知识传递给自动化系统。这意味着每一次自动化的网络变更都像公司中最优秀的网络工程师一样，经过同样的细心和精确操作。
- en: The pre-approved and well-defined changes to automated workflows can be carried
    out by anyone in the company, not just the best engineer, if they are automated,
    so the bottleneck is removed from the network team freeing them up to work on
    more interesting tasks than the mundane repeatable **Business as Usual** (**BAU**)
    tasks that are more accurately done using automation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化工作流的预先批准和明确定义的变更可以由公司中的任何人执行，而不仅仅是最优秀的工程师，如果这些变更是自动化的，这样就消除了瓶颈，网络团队可以腾出时间去处理比日常重复的**日常业务**
    (**BAU**)任务更有趣的任务，这些任务使用自动化会更准确地完成。
- en: Simplifying complex networks
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简化复杂网络
- en: Organizations that have very complex legacy networks would also be a prime candidate
    for benefiting from software-defined networking instead of fixing the existing
    network, which may not be possible due to having to adhere to 99 percent uptime
    targets. Instead, a new green-field network could be created in parallel with
    the existing network.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于拥有非常复杂遗留网络的组织，软件定义网络将是一个理想的选择，因为修复现有网络可能不可行，原因是必须遵守99%的正常运行时间目标。相反，可以在现有网络的基础上并行创建一个新的绿地网络。
- en: This will allow application workloads to be migrated to the new network over
    time and simplify the complexity of the existing network in the process. During
    the period of migration where both the new green-field network and old legacy
    network co-exist, the SDN overlay network can be used to route back to the legacy
    network for application dependencies that have yet to be migrated.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许应用负载随着时间的推移迁移到新的网络，并在此过程中简化现有网络的复杂性。在迁移期间，新建的绿地网络和旧的遗留网络共存时，可以使用SDN覆盖网络将应用程序依赖关系路由回遗留网络，直到这些依赖项迁移完成。
- en: Another benefit of software-defined networking is that it allows private cloud
    solutions to run at increased scale. If private clouds are running more than 100
    hypervisors, this is a scale at which an SDN solution would be of benefit, such
    as extending OpenStack Neutron capabilities to allow companies to run OpenStack
    at scale, as opposed to deploying multiple smaller OpenStack clouds to cope with
    bottlenecks.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 软件定义网络的另一个好处是，它可以让私有云解决方案在更大的规模上运行。如果私有云运行超过100个虚拟化管理程序，那么SDN解决方案将对其有益，例如扩展OpenStack
    Neutron功能，允许公司在大规模上运行OpenStack，而不是部署多个较小的OpenStack云以应对瓶颈。
- en: Splitting up network operations
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分割网络操作
- en: With the introduction of software-defined networking in a company or business
    there has to be a shift in operational responsibilities. If an organization runs
    multiple microservice applications, a fairly typical situation is that a company
    has 100 developers that develop those 200 microservices.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件定义网络（SDN）在公司或企业中的引入，运营责任必须发生转变。如果一个组织运行多个微服务应用程序，一个相当典型的情况是公司有100个开发人员开发这200个微服务。
- en: Each of those 200 microservices are combined together to deploy the company's
    customer facing website.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这200个微服务共同部署公司面向客户的网站。
- en: The company may use agile software development so each of the 100 developers
    are split into a set of delivery teams that contain 10 or so developers, each
    forming scrum teams, and each delivery team looks after a set amount of microservices
    relative to their complexity.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 公司可能采用敏捷软件开发，将100个开发人员分成若干个交付团队，每个团队包含约10个开发人员，组成scrum团队，每个交付团队负责一组相对复杂的微服务。
- en: The company has 10 network engineers that are required to serve the networking
    needs of the 100 developers, as well as maintaining uptime of the network.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 公司有10个网络工程师，负责满足100个开发人员的网络需求，同时维护网络的正常运行。
- en: However, in this model, if all network operations are done manually, then the
    network engineers will not be able to keep up with the necessary change requests,
    so they will either have to work late nights and subsequently become burned out,
    so their productivity will drop. In this model, they are in reactive firefighting
    mode.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这种模式下，如果所有网络操作都是手动进行的，那么网络工程师将无法跟上所需的变更请求，因此他们要么不得不加班工作，最终导致精疲力尽，生产力下降。在这种模式下，他们处于应急处理模式。
- en: In this model, the productivity of the developers will probably be impacted
    too as the network engineers will become the bottleneck for throughput. The model
    described will simply not scale, so operational change is required.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模式下，开发人员的生产力也可能会受到影响，因为网络工程师将成为吞吐量的瓶颈。所描述的模式显然无法扩展，因此需要进行运营变革。
- en: In the scenario described, one network engineer will be required for every ten
    developers, and in future as the company expands it will want to invest in development
    staff to create more products. It is undoubtedly a harder sell for organizations
    to scale up their network teams to support those network operations, so network
    automation becomes a must in this scenario and the network team needs to work
    smarter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述的场景中，每十个开发人员需要一个网络工程师，随着公司未来的扩展，公司将希望投资开发人员来创造更多的产品。对于组织来说，扩大网络团队以支持这些网络操作无疑是更具挑战性的，因此在这种情况下，网络自动化成为必需，网络团队需要更加智能地工作。
- en: 'Introducing new products and developers without changing the way a networking
    team operates can lead to burnout, so a network engineer will be able to support
    ten developers but not 20 when doing all network operations manually. Therefore,
    considering the developer to network engineer ratio is important when making the
    case for automation, as shown:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![Splitting up network operations](img/B05559_06_03.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: The business may then look at software-defined networking as the solution to
    solve their scaling problems, with the mindset of simplifying the network. This
    means that network engineers can carry out network changes more quickly to support
    developer demand.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: But simply putting in a software defined networking solution such as CISCO ACI,
    Juniper Contrail, VMware NSX, or Nuage Networks will not help the situation unless
    processes are automated and the inefficient business processes are addressed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: New responsibilities in API-driven networking
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The role of a network engineer in a software-defined network therefore has to
    evolve; they have to devolve some power to the developers like operations staff
    were required to for the creation of the infrastructure. But software-defined
    networking shouldn't mean giving complete, open access of the API to developer.
    This is also a recipe for disaster. Efficient controls need to be put in place
    that act as a quality gate, not as an inhibitor of productivity.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Some operational workflows in an overlay network should still be controlled
    by a qualified network engineer and governed by security, but not to the detriment
    of developer's productivity and requirements.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: It wouldn't be fair to expect a developer to be well versed enough in networking
    to log onto a router and set up their routing requirements for their application
    unaided, so there has to be some middleground.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Allowing a developer access to network devices in an uncontrolled manner poses
    the risk of a network outage, which goes against one of the three main networking
    principles and compromises redundancy, and network engineers have a responsibility
    for uptime of the system.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Overlay architecture setup
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When setting up an overlay network, it will normally be built in a green-field
    environment as part of an application migration program and target environment
    for a legacy network. The application migration could either be done in a piecemeal
    format or done in one step, where everything is migrated, then switched on as
    part of a migration big bang, go live activity.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of the application migration approach, it is very important that
    the overlay network is set up to achieve the following goals:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Agility
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimize mean time to recover
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeatability
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalability
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The performance of the network will be determined by the underlay components
    and silicon used, but the definition of the overlay network in terms of constructs
    and workflow of the SDN object model need to be correct to make sure that any
    operation can easily be carried out quickly, is repeatable, and that the design
    scales and can support roll-back. The SDN before implementation should be performance
    tested to make sure the virtualization overhead does not impact performance.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s quickly recap on the Nuage VSP object model that was covered in
    [Chapter 2](ch02.html "Chapter 2. The Emergence of Software-defined Networking"),
    *The Emergence of Software-defined Networking*:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '**Organization**: Governs all layer 3 domains![Overlay architecture setup](img/B05559_06_04.jpg)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 3 domain template**: A **Company L3 Domain Template** is required before
    child layer 3 domains are created. The **Company L3 Domain Template** is used
    to govern overarching default policies that will be propagated to all child layer
    3 domains. If a **Company L3 Domain Template** is updated at template level, then
    the update will be implemented on all layer 3 domains that have been created underneath
    it, immediately.![Overlay architecture setup](img/B05559_06_05.jpg)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 3 domain**: Can be used to segment different environments so users
    cannot hop from subnets deployed in a layer 3 **Test** domain to a layer 3 **Production**
    domain.![Overlay architecture setup](img/B05559_06_06.jpg)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zones**: A zone segment''s firewall policies are at application level, so
    each micro-service application can have its own zone and associated Ingress and
    Egress policy per layer 3 domain.![Overlay architecture setup](img/B05559_06_07.jpg)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 3 Subnet**: This is where VMs or bare-metal servers are deployed. In
    this example, we see **Subnet Application1** and **Subnet Application2:**![Overlay
    architecture setup](img/B05559_06_08.jpg)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Specific Egress Policy**: Unique application policies for Egress
    rules that can be used to view each individual application''s connectivity rules:![Overlay
    architecture setup](img/B05559_06_09.jpg)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Specific Ingress Policy**: Unique application policies for ingress
    rules that can be used to view each individual application''s connectivity rules:![Overlay
    architecture setup](img/B05559_06_10.jpg)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leaking Domain**: This is used to leak routes into the overlay network via
    a layer 3 subnet to bridge connectivity between the green-field network and a
    legacy network:![Overlay architecture setup](img/B05559_06_11.jpg)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, utilizing Nuage VSP as an example, we had an organization with two layer
    3 domains dictating Test and Production, with a zone for each micro-service application
    encapsulating its unique micro-subnets and virtual machines:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Overlay architecture setup](img/B05559_06_12.jpg)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'In terms of network setup, automation could be used by the network team and
    they would be in control of the following constructs in the overlay network:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Organization**: Governs all layer 3 domains:![Overlay architecture setup](img/B05559_06_13.jpg)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 3 domain template**: Used to govern default policies:![Overlay architecture
    setup](img/B05559_06_14.jpg)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 3 domain**: Used to separate responsibilities between environments
    such as development and production:![Overlay architecture setup](img/B05559_06_15.jpg)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leaking Domain**: Used to make the legacy network accessible from the overlay
    network:![Overlay architecture setup](img/B05559_06_16.jpg)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The organization is most likely a *day-one* setup activity, while the domain
    template policies can be defined and dictated by the network and security team.
    Any security policies applied across all networks, regardless of the domain they
    are deployed in, are governed by the domain template. So test environments will
    have identical template policies to production and meet all security, governance,
    and regularity requirements.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Development teams then have the ability to create unique test environments under
    the **Test** layer 3 domain with the same subsequent policies, without the need
    for the network team to audit each and every one. The application security rules
    that developers use can then be agreed between security and development teams
    without network teams having to become involved directly unless they are asked
    to advise on particular best practice ways of setting up ACL rules.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: The other *day-one* setup activity will probably be setting up access to a legacy
    network that teams will be migrating applications from for a time, so they will
    still have dependent applications residing in that network.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Nuage VSG, which is a hardware gateway device that connects external networks
    to the Nuage VSP platform and its associated leaking domain, can be used to do
    this. The Nuage VSG leaks routes from external networks into the overlay network
    and into specific layer 3 domains.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'The Nuage VSP Platform allows network teams to define the **GRThubDomain**
    leaking domain in software that utilizes VSG. In this example, a leaking domain
    is set as IP host interfaces are connected into the **Front End**, **Business
    Logic** and **Back End** routers in the legacy network:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![Overlay architecture setup](img/B05559_06_17.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: The Nuage VSP platform then allows the newly-created **GRThubDomain** to be
    associated with the **Production** or **Test** layer 3 domains by associating
    a leaking domain against them.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the **GRThubDomain** leaking domain is associated
    with the **Production** layer 3 domain to allow legacy network routes to be accessible
    from zones and subnets residing under the **Production** layer 3 domain:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![Overlay architecture setup](img/B05559_06_18.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: The network team will also be responsible for monitoring the network underlay
    and making sure that it is scaled out appropriately as more compute is introduced,
    so Leaf switches will be introduced and ordered as and when new racks are scaled
    out, while new Spine switches are introduced to avoid the saturation of links.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 网络团队还将负责监控网络底层，并确保在引入更多计算资源时网络能够适当扩展，因此将根据新机架的扩展引入Leaf交换机，同时引入新的Spine交换机以避免链路饱和。
- en: Self-service networking
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自助网络
- en: It is important to focus on the network operations that developers typically
    require network tickets for as a start point. These are the common pain points
    for developers that prove to be blockers to productivity. Network operations can
    be effectively separated by looking at the common themes on network ticketing
    systems that have been raised by development teams.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要关注开发人员通常需要网络票证的网络操作作为起点。这些是开发人员常见的痛点，通常会成为生产力的障碍。通过查看开发团队在网络票务系统中提出的常见问题，可以有效地将网络操作分离。
- en: 'These are the more mundane BAU operations that network operators should make
    self-service:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是网络操作员应该使其成为自助服务的常见业务操作：
- en: Opening firewall ports
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开放防火墙端口
- en: Creation of new development environments
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的开发环境
- en: Connectivity to other applications
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他应用的连接
- en: These operations should be set up as self-service operations in a software-defined
    network.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作应该作为软件定义网络中的自助服务操作进行设置。
- en: 'In terms of the Nuage VSP object model, network operators should allow developers
    the ability to control the following object model entities:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuage VSP对象模型中，网络操作员应允许开发人员控制以下对象模型实体：
- en: '**Zones**: They encapsulate a microservice application:![Self-service networking](img/B05559_06_19.jpg)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域**：它们封装了一个微服务应用：![自助网络](img/B05559_06_19.jpg)'
- en: '**Layer 3 Subnet**: These define the IP range available to a microservice application![Self-service
    networking](img/B05559_06_20.jpg)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第3层子网**：这些定义了微服务应用可用的IP范围：![自助网络](img/B05559_06_20.jpg)'
- en: '**Application Specific Egress Policy**: This defines the Egress ACL policies
    for the microservice application:![Self-service networking](img/B05559_06_21.jpg)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用特定Egress策略**：定义微服务应用的Egress ACL策略：![自助网络](img/B05559_06_21.jpg)'
- en: '**Application Specific Ingress Policy**: This defines the Ingress ACL policies
    for the microservice application:![Self-service networking](img/B05559_06_22.jpg)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用特定Ingress策略**：定义微服务应用的Ingress ACL策略：![自助网络](img/B05559_06_22.jpg)'
- en: This will allow the network operations team to provide development teams with
    the organization, layer 3 domains, and the layer 3 domain template.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许网络操作团队为开发团队提供组织、层3域和层3域模板。
- en: Underneath either the **Test** or **Production** layer 3 domains, development
    teams have the flexibility to create new zones unique to each microservice application,
    then any associated subnets and virtual machines that they need to provision.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在**测试**或**生产**层的第3层域下，开发团队可以灵活地为每个微服务应用创建独特的新区域，然后创建任何它们需要配置的相关子网和虚拟机。
- en: The subnets will be micro subnets, so something akin to a `/26`, `/27`, or `/28`
    may be acceptable. The network team will provide the subnet schema and a booking
    system where teams can reserve the address space in an IPAM solution if they are
    on-boarding an application or creating a new application, to prevent clashes with
    other teams.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 子网将是微型子网，因此类似于`/26`、`/27`或`/28`的子网可能是可以接受的。网络团队将提供子网架构，并提供一个预定系统，团队可以在IPAM解决方案中预定地址空间，如果他们正在引入一个应用或创建一个新应用，以避免与其他团队的冲突。
- en: As long as each delivery team follows those constructs, the networking team
    does not need to be involved in the provisioning of new applications or onboarding,
    it will become self-service, like AWS, Microsoft Azure, or Google Cloud.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 只要每个交付团队遵循这些结构，网络团队就无需参与新应用的配置或引入，这将变成自助服务，像AWS、Microsoft Azure或Google Cloud一样。
- en: 'However, in order to properly facilitate development teams, the network team
    should ideally create the self-service automation that the development teams can
    use to carry out the following in Nuage VSP along with the operations team:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了更好地支持开发团队，网络团队应理想地创建自助服务自动化，使开发团队能够在Nuage VSP中与运维团队一起执行以下操作：
- en: Creation of zones
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建区域
- en: Deletion of zones
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除区域
- en: Creation of subnets
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建子网
- en: Deletion of subnets
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除子网
- en: Creation of Ingress rules
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Ingress规则
- en: Deletion of Ingress rules
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of Egress rules
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deletion of Egress rules
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of network macros (external subnets)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deletion of network macros (external subnets)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No matter the SDN solution implemented, the self-service constructs required
    will be similar, in order to scale network operations, a lot of the operations
    have to be automated and made self-service.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, these self-service workflow actions could be added to Ansible playbooks
    or roles and included in the deployment pipelines to provision the networking
    along with the infrastructure.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Immutable networking
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To fully take advantage of the benefits of software-defined networking, utilizing
    immutable networking brings multiple benefits over static networking. Like infrastructure
    as code before it, networking as code and the utilization of immutable networking
    means that every time an application is deployed, its networking is freshly deployed
    from a source control management system that describes the desired state of the
    network. This means that network configurations don't drift over time.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Using a networking as code model to drive immutable networking allows application
    connectivity to be tested prior to production. Test environments mirroring production
    should be used to check application connectivity prior to releasing any network
    changes to production.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Implementing network changes as part of a Continuous Delivery model means that
    if application connectivity is proven to be wrong when it is tested in a test
    environment, then the application connectivity will be wrong in production environments.
    As a result, wrong connectivity changes should never reach production and should
    be caught prior to production by creating feedback loops that alert teams that
    the network change is not fit for purpose. Catching such issues will prevent outages
    and application downtime.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: A/B immutable networking
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Networking, as a result, should ideally be integrated and become part of the
    application release cycle, with networks being built from scratch every single
    release and loaded from the source control management system. Networks can be
    deployed using immutable A/B networking.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Nuage VSP integrated with OpenStack as an example:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: A network will reside under a layer 3 domain
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each zone will be unique to a particular microservice application
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Underneath the zone, a subnet will be created in both Nuage and OpenStack
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual machines for each release will be created in OpenStack and associated
    with the Nuage subnet
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first release of **Application1** version 1.1 is deployed to the **Test**
    layer 3 domain, deploying two virtual machines on **Subnet A Application1**, sitting
    under the **Application1** zone:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![A/B immutable networking](img/B05559_06_23.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: 'The second release of application version 1.2 is deployed to the **Test** layer
    3 domain, scaling down the release and deploying one virtual machine on **Subnet
    B Application1**, sitting under the **Application1** zone:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![A/B immutable networking](img/B05559_06_24.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: 'Once release 1.2 has been put into service on the load balancer, doing a rolling
    deployment, the new virtual machine on **Subnet B Application1** will be in service,
    **Subnet A Application1** can then be destroyed along with its virtual machines
    as part of the deployment clean-up phase:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![A/B immutable networking](img/B05559_06_25.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: 'The next release of **Application1**, release 1.3, will then be deployed into
    **Subnet A Application1**, and scaled up again to two virtual machines:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![A/B immutable networking](img/B05559_06_26.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: 'Once release 1.2 has been put into service on the load balancer, doing a rolling
    deployment, the new virtual machines on **Subnet A Application1** will be in service,
    **Subnet B Application1** can then be destroyed along with its associated virtual
    machine as part of the deployment clean-up phase:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![A/B immutable networking](img/B05559_06_27.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Releases will alternate between **Subnet A Application1** and **Subnet B Application1**
    for every release, building the network from source control each time and cleaning
    up the previous release each time.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: The clean-up of redundant firewall rules
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the major tech debt issues with firewalls is that over time they accumulate
    lots of out of date ACL rules as applications are retired or network connectivity
    changes. It is often a risk to do clean-up as network engineers are scared that
    they will potentially cause an outage. As a result, manual clean-up of firewall
    rules is required by the network team.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: When utilizing A/B immutable network deployments, egress and ingress policies
    are associated with subnets, meaning that in Nuage VSP when a subnet is deleted,
    all ACL policies associated with that subnet will be automatically cleaned up
    too as part of the release process.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, **Subnet A Application1** has the following connectivity,
    so when the subnet is deleted as part of the release process, all these subnet-specific
    ACL rules will be cleaned up:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '![The clean-up of redundant firewall rules](img/B05559_06_28.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
- en: It is important to note that as ACL rules exist subnet to zone for application
    dependencies, if the A subnet deployment is in service, then the B subnet deployment
    will be brought up in parallel with its associated ACL Ingress and Egress rules
    to replace the A deployment.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: All applications dependent on **Application1** will be required to have an ACL
    rule pointing at the zone rather than the subnet, this means they will not lose
    connectivity to the application as their rules will be zone-dependent rather than
    subnet-dependent. Having subnet to subnet rules would not work in an immutable
    subnet model.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this, in the following example, currently deployed subnet **Application1**
    has a subnet to zone ACL rule to connect to **Application2**. So, despite **Application2**
    Egress and Ingress policies alternating between A and B deployments each time
    it is released as shown in the following diagram:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '![The clean-up of redundant firewall rules](img/B05559_06_29.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
- en: 'The required ACL rules are always available for **Application1** as a dependency
    as it subscribes to connectivity at the zone level as opposed to the subnet level:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '![The clean-up of redundant firewall rules](img/B05559_06_30.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: Application decommissioning
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The use of immutable subnets makes the decommissioning of applications easy
    when they are no longer required. The clean-up logic already exists for subnets
    and associated ACL rules so that already-created automation can be re-used to
    do a full clean-up of the microservice application when it needs to be retired.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: A clean-up pipeline can easily be provided by the operations and networking
    team for development teams to clean up applications that are no longer required.
    Their allocated subnet ranges can then be released by the IPAM solution so they
    are available to new microservice applications that need to be on-boarded onto
    the platform.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Using Ansible to orchestrate SDN controllers
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ansible, as discussed in [Chapter 5](ch05.html "Chapter 5. Orchestrating Load
    Balancers Using Ansible"), *Orchestrating Load Balancers Using Ansible*, can be
    used to issue and configure servers as well as issue commands directly to an **SDK**
    or **REST** **API**:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Ansible to orchestrate SDN controllers](img/B05559_06_38.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
- en: This is very useful when orchestrating SDN controllers that provide Restful
    API endpoints and an array of SDKs to control software-defined object models that
    allow network operators to automate all network operations.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: In terms of the Nuage VSP platform, the VSD component, which builds the overlay
    network, is all REST API calls behind the scenes, so all operations can be orchestrated
    using the Nuage Java or Python SDK, which wrap REST API calls.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: The Nuage VSPK SDK would simply need to be installed on the Ansible control
    host, and then it can be used to orchestrate Nuage. As Ansible is written in Python,
    modules can be easily created to orchestrate each object model in the Nuage entity
    tree.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Using the Nuage VSPK modules could alternately be written in any programming
    language that is available, such as Java, but Ansible's boilerplate for Python
    is probably the simplest way of creating modules.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: The Nuage VSPK object model has parent and child relationships between entities,
    so lookups need to be done on parent objects to return the child entities using
    the unique identifier associated with the entity.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example highlights the list of operations required to build the
    Nuage VSPK object tree:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: A new Nuage `session` is started.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `user` is used to create a child `enterprises`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `domain_templates` is created as a child of the enterprise.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `domains` is an instantiated as child of the domain template.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A child `zone` is created against the domain.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A child `subnet` is created against the zone.![Using Ansible to orchestrate
    SDN controllers](img/B05559_06_32.jpg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using SDN for disaster recovery
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the main benefits of using Ansible for orchestration is that it can be
    used to create a set of day one playbooks to build out the initial network prior
    to it being used for self-service by developers. So the initial setup of the Nuage
    **organization**, **Company L3 Domain Template**, and layer 3 domains can be created
    among any other necessary operations as a day one playbook or role.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'The Nuage Python VSPK can be utilized to easily create the organization called
    **Company**, layer 3 domain template called **L3 Domain Template**, and two layer
    3 domains called **Test** and **Prod** as per the Nuage VSPK object model, as
    shown in the following screenshot:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '![Using SDN for disaster recovery](img/B05559_06_33.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
- en: Each of these Python commands can easily be wrapped in Ansible to create a set
    of modules to create a day one playbook utilizing `delegate_to` localhost. which
    will execute each module on the Ansible control host and then connect to the Nuage
    APIs.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Each module, by default, should be written so that it is idempotent and detects
    if the entity exists, before issuing a `Create` command. If the entity already
    exists, then it shouldn't issue a `Create` command if the overlay network is already
    in the desired state.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: The day one playbook can be used to build the whole network from scratch in
    the event of a disaster if the whole network needs to be restored. The day one
    playbook should be stored in source control. While each deployment pipeline will
    build the application zones, subnets, and virtual machines under the initially
    defined structure.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: A leaking domain governing legacy network connectivity and leaking domain association
    can also be added to the day one playbook if required.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Storing A/B subnets and ACL rules in YAML files
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ansible can also be utilized to store self-service subnet and ACL rule information
    in `var` files that will be called from a set of self-service playbooks as part
    of each development team's deployment pipelines. Each application environment
    can be stored in a set of `var` files defining each of the A/B subnets.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: A playbook to create A or B subnets would be used to run `delegate_to` localhost
    to carry out the creation actions against the Nuage VSD API.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'The playbook would be set up to do the following things:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Create the zone, if one has not already been created.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the subnet in Nuage mapped to OpenStack using a subnet YAML file.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply ACL policies for Ingress and Egress rules to the policies applying them
    directly to the subnet.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As with the day one playbook, unique modules can be written for each of the
    VSPK commands; in this example, the Python VSPK creates a zone called **Application1**
    and a subnet called **Subnet A Application1**:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '![Storing A/B subnets and ACL rules in YAML files](img/B05559_06_34.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: So these commands can also be wrapped in Ansible modules, should be completely
    idempotent, and the desired state of the network is determined by the `var` files
    that are stored in source control.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: The logic in the playbook would load the `var` files by pulling them from source
    control at deployment time. The playbook would then use the Jinja2 filter conditions
    to detect if either the A or B subnet or neither was present using the when conditions.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: If neither subnet was present, subnet A would be created, or if subnet A was
    present, then subnet B would be created.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'The playbook could read this information from the environment specific `var`
    file that is specified in the following screenshot. As it is idempotent, it will
    run over the zone, creating it if it doesn''t already exist, and use the jinja2
    playbook when conditions to either create subnet A or B:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '![Storing A/B subnets and ACL rules in YAML files](img/B05559_06_35.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: A unique set of A and B subnets would be checked into source control as a prerequisite
    for every required environment, with one or more environments per layer 3 domain.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: ACL rules should ideally be consistent across all environments encapsulated
    in a layer 3 domain, so an explicit set of ACL rules would be created and assigned
    to the application's unique policy for Ingress and Egress rules that would span
    all environments.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Each environment could have its own unique policy for Egress and Ingress per
    layer 3 subnet. The Ansible playbook could then append a unique identifier for
    the environment to the policy name if multiple environments existed under the
    **Test** layer 3 domain to server integration, UAT, or other test environments.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: The unique ACL rules for an application can be filled in by development teams
    as part of the on-boarding to the new platform based on the minimum connectivity
    required to make the application function, with a deny all applied to the layer
    3 domain template.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: The ACL rules should always be subnet to zone for inter-dependencies and each
    ACL rule will be created with the subnet as the source, so that when subnets are
    destroyed, the ACL rules will automatically be cleaned up.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of how the self-service ACL rules file would look is displayed as
    follows It would create two ingress rules and one Egress rule against the **Application1**
    policy:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '![Storing A/B subnets and ACL rules in YAML files](img/B05559_06_36.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: The self-service playbook could be provided to development teams so that they
    always have a standard way to create zones and subnets. The YAML structure of
    the `var` files will also provide templates of what the desired state of the network
    should be. This means that pointing the automated pipelines at another Nuage endpoint
    would mean the whole network could be built out programmatically from source control.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at different networking operations that SDN
    controllers can help automate, and sought to debunk some of the common misconceptions
    associated with software-defined networking.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: We then looked at ways in which companies can benefit from using software-defined
    networking and looked at ways in which SDN solutions can help solve some of the
    challenges associated with network operations.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: The chapter then focused on ways that network operations need to adapt and embrace
    automation so development teams can self-serve a subset of different networking
    tasks, and ways in which networking can be divided and responsibilities shared.
    We then focused on the benefits of immutable A/B networking and how it can help
    simplify the network and build consistent programmatically controlled networks
    while keeping firewall rules clean.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you should have learned why software-defined networking is
    important to organizations looking to scale network operations. We have also covered
    ways in which overlay network object models can be utilized by microservice applications
    and the benefits of immutable networking and A/B subnets.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Key takeaways from this chapter also include different ways that SDN controllers
    can help network operators to build out day one networks, which pieces of network
    operations can be made self-service, and the ways in which Ansible can be used
    to programmatically control network operations using Rest API calls or an SDK.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at continuous integration and how network
    operations can take some of the best practices from development teams and apply
    them to networking operations, so that networking is versioned properly and can
    be used to roll forward and roll back changes.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Once we have established a basis for continuous integration, we will move onto
    chapters that cover network testing and Continuous Delivery, which will outline
    a set of best practices that should allow network teams to integrate network automation
    into deployment pipelines.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
