["```\nvagrant up cd prod\n\n```", "```\nvagrant ssh cd\nansible-playbook /vagrant/ansible/prod2.yml \\\n -i /vagrant/ansible/hosts/prod\n\n```", "```\nsudo mkdir -p /data/jenkins\nsudo chmod 0777 /data/jenkins\ndocker run -d --name jenkins \\\n -p 8080:8080 \\\n -v /data/jenkins:/var/jenkins_home \\\n -v /vagrant/.vagrant/machines:/machines \\\n jenkins\n\n```", "```\ndocker rm -f jenkins\nsudo rm -rf /data/jenkins\n\n```", "```\nansible-playbook /vagrant/ansible/jenkins-node.yml \\\n -i /vagrant/ansible/hosts/prod\nansible-playbook /vagrant/ansible/jenkins.yml \\\n -c local\n\n```", "```\n- hosts: localhost\n remote_user: vagrant\n serial: 1\n sudo: yes\n roles:\n - consul-template\n - jenkins\n\n```", "```\n- name: Directories are created\n file:\n path: \"{{ item.dir }}\"\n mode: 0777\n recurse: yes\n state: directory\n with_items: configs\n tags: [jenkins]\n\n```", "```\n- name: Container is running\n docker:\n name: jenkins\n image: jenkins\n ports: 8080:8080\n volumes:\n - /data/jenkins:/var/jenkins_home\n - /vagrant/.vagrant/machines:/machines\n register: container_result\n tags: [jenkins]\n- pause: seconds=30\n when: container_result|changed\n tags: [jenkins]\n\n```", "```\n- name: Configurations are present\n copy:\n src: \"{{ item.src }}\"\n dest: \"{{ item.dir }}/{{ item.file }}\"\n mode: 0777\n with_items: configs\n register: configs_result\n tags: [jenkins]\n\n```", "```\n- name: Plugins are installed\n shell: \"curl -X POST \\\n -d '<jenkins><install plugin=\\\"{{ item }}@latest\\\" /></jenkins>' \\\n --header 'Content-Type: text/xml' \\\n http://{{ ip }}:8080/pluginManager/installNecessaryPlugins\"\n args:\n creates: /data/jenkins/plugins/{{ item }}\n with_items: plugins\n register: plugins_result\n tags: [jenkins]\n\n- wait_for:\n path: /data/jenkins/plugins/{{ item }}\n with_items: plugins\n tags: [jenkins]\n\n- name: Container is restarted\n docker:\n name: jenkins\n image: jenkins\n state: restarted\n when: configs_result|changed or plugins_result|changed\n tags: [jenkins]\n\n- pause: seconds=30\n when: configs_result|changed or plugins_result|changed\n tags: [jenkins]\n\n```", "```\n- name: Job directories are present\n file:\n path: \"{{ home }}/jobs/{{ item.name }}\"\n state: directory\n mode: 0777\n with_items: jobs\n tags: [jenkins]\n\n- name: Jobs are present\n template:\n src: \"{{ item.src }}\"\n dest: \"{{ home }}/jobs/{{ item.name }}/config.xml\"\n mode: 0777\n with_items: jobs\n register: jobs_result\n tags: [jenkins]\n\n- name: Jenkins is reloaded\n uri:\n url: http://{{ ip }}:8080/reload\n method: POST\n status_code: 200,302\n when: jobs_result|changed\n ignore_errors: yes\n tags: [jenkins]\n\n```", "```\njobs: [\n {\n name: \"books-ms-ansible\",\n service_name: \"books-ms\",\n src: \"service-ansible-config.xml\"\n },\n...\n]\n\n```", "```\n<?xml version='1.0' encoding='UTF-8'?>\n<project>\n <actions/>\n <description></description>\n <logRotator class=\"hudson.tasks.LogRotator\">\n <daysToKeep>-1</daysToKeep>\n <numToKeep>25</numToKeep>\n <artifactDaysToKeep>-1</artifactDaysToKeep>\n <artifactNumToKeep>-1</artifactNumToKeep>\n </logRotator>\n <keepDependencies>false</keepDependencies>\n <properties>\n </properties>\n <scm class=\"hudson.plugins.git.GitSCM\" plugin=\"git@2.4.1\">\n <configVersion>2</configVersion>\n <userRemoteConfigs>\n <hudson.plugins.git.UserRemoteConfig>\n <url>https://github.com/vfarcic/{{ item.service_name }}.git</url>\n </hudson.plugins.git.UserRemoteConfig>\n </userRemoteConfigs>\n <branches>\n <hudson.plugins.git.BranchSpec>\n <name>*/master</name>\n </hudson.plugins.git.BranchSpec>\n </branches>\n <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>\n <submoduleCfg class=\"list\"/>\n <extensions/>\n </scm>\n <canRoam>true</canRoam>\n <disabled>false</disabled>\n <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>\n <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>\n <triggers/>\n <concurrentBuild>false</concurrentBuild>\n <builders>\n <hudson.tasks.Shell>\n <command>export PYTHONUNBUFFERED=1\n\nansible-playbook /vagrant/ansible/service.yml \\\n -i /vagrant/ansible/hosts/prod \\\n --extra-vars &quot;repo_dir=${PWD} service_name={{ item.service_name }}&quot;</command>\n </hudson.tasks.Shell>\n </builders>\n <publishers/>\n <buildWrappers/>\n</project>\n\n```", "```\n<url>https://github.com/vfarcic/{{ item.service_name }}.git</url>\n\n```", "```\n <command>export PYTHONUNBUFFERED=1\nansible-playbook /vagrant/ansible/service.yml \\\n -i /vagrant/ansible/hosts/prod \\\n --extra-vars &quot;repo_dir=${PWD} service_name={{ item.service_name }}&quot;</command>\n\n```", "```\n- name: Scripts are present\n copy:\n src: scripts\n dest: /data\n mode: 0766\n tags: [jenkins]\n\n```", "```\nnode(\"cd\") {\n git url: \"https://github.com/vfarcic/${serviceName}.git\"\n def flow = load \"/data/scripts/workflow-util.groovy\"\n flow.provision(\"prod2.yml\")\n flow.buildTests(serviceName, registryIpPort)\n flow.runTests(serviceName, \"tests\", \"\")\n flow.buildService(serviceName, registryIpPort)\n flow.deploy(serviceName, prodIp)\n flow.updateProxy(serviceName, \"prod\")\n flow.runTests(serviceName, \"integ\", \"-e DOMAIN=http://${proxyIp}\")\n}\n\n```", "```\ndef provision(playbook) {\n stage \"Provision\"\n env.PYTHONUNBUFFERED = 1\n sh \"ansible-playbook /vagrant/ansible/${playbook} \\\n -i /vagrant/ansible/hosts/prod\"\n}\n\n```", "```\ndef buildTests(serviceName, registryIpPort) {\n stage \"Build tests\"\n def tests = docker.image(\"${registryIpPort}/${serviceName}-tests\")\n try {\n tests.pull()\n } catch(e) {}\n sh \"docker build -t \\\"${registryIpPort}/${serviceName}-tests\\\" \\\n -f Dockerfile.test .\"\n tests.push()\n}\n\n```", "```\ndef runTests(serviceName, target, extraArgs) {\n stage \"Run ${target} tests\"\n sh \"docker-compose -f docker-compose-dev.yml \\\n -p ${serviceName} run --rm ${extraArgs} ${target}\"\n}\n\ndef buildService(serviceName, registryIpPort) {\n stage \"Build service\"\n def service = docker.image(\"${registryIpPort}/${serviceName}\")\n try {\n service.pull()\n } catch(e) {}\n docker.build \"${registryIpPort}/${serviceName}\"\n service.push()\n}\n\n```", "```\ndef deploy(serviceName, prodIp) {\n stage \"Deploy\"\n withEnv([\"DOCKER_HOST=tcp://${prodIp}:2375\"]) {\n try {\n sh \"docker-compose pull app\"\n } catch(e) {}\n sh \"docker-compose -p ${serviceName} up -d app\"\n }\n}\n\n```", "```\ndef updateProxy(serviceName, proxyNode) {\n stage \"Update proxy\"\n stash includes: 'nginx-*', name: 'nginx'\n node(proxyNode) {\n unstash 'nginx'\n sh \"sudo cp nginx-includes.conf /data/nginx/includes/${serviceName}.conf\"\n sh \"sudo consul-template \\\n -consul localhost:8500 \\\n -template \\\"nginx-upstreams.ctmpl:/data/nginx/upstreams/${serviceName}.conf:docker kill -s HUP nginx\\\" \\\n -once\"\n }\n}\n\n```", "```\n node(\"cd\") {\n def serviceName = \"books-ms\"\n def prodIp = \"10.100.198.201\"\n def proxyIp = \"10.100.198.201\"\n def registryIpPort = \"10.100.198.200:5000\"\n\n git url: \"https://github.com/vfarcic/${serviceName}.git\"\n def flow = load \"/data/scripts/workflow-util.groovy\"\n flow.provision(\"prod2.yml\")\n flow.buildTests(serviceName, registryIpPort)\n flow.runTests(serviceName, \"tests\", \"\")\n flow.buildService(serviceName, registryIpPort)\n flow.deploy(serviceName, prodIp)\n flow.updateProxy(serviceName, \"prod\")\n flow.runTests(serviceName, \"integ\", \"-e DOMAIN=http://${proxyIp}\")\n }\n\n```", "```\nnode(\"cd\") {\n def serviceName = \"books-ms\"\n def registryIpPort = \"10.100.198.200:5000\"\n\n git url: \"https://github.com/vfarcic/${serviceName}.git\"\n def flow = load \"/data/scripts/workflow-util.groovy\"\n flow.buildTests(serviceName, registryIpPort)\n flow.runTests(serviceName, \"tests\", \"\")\n}\n\n```", "```\nexit\n\nvagrant destroy -f\n\n```"]