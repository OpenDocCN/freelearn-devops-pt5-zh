- en: '*Assessments*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following pages, we will review all of the practice questions from each
    of the
  prefs: []
  type: TYPE_NORMAL
- en: chapters in this book and provide the correct answers.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18223_01_ePub.xhtml#_idTextAnchor015): Introducing Continuous
    Delivery'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Development, quality assurance, operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous integration, automated acceptance testing, configuration management.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fast delivery, fast feedback cycle, low-risk releases, flexible release options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unit tests, integration tests, acceptance tests, non-functional tests (performance,
    security, scalability, and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unit tests, because they are cheap to create/maintain and quick to execute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DevOps is the idea of combining the areas of development, quality assurance,
    and operations into one team (or person). Thanks to automation, it's possible
    to provide the product from A to Z.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker, Jenkins, Ansible, Terraform, Git, Java, Spring Boot, Gradle, Cucumber,
    Kubernetes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18223_02_ePub.xhtml#_idTextAnchor034): Introducing Docker'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Containerization does not emulate the whole operating system; it uses the host
    operating system instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The benefits of providing an application as a Docker image are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**No issues with dependencies**: The application is provided together with
    its dependencies.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Isolation**: The application is isolated from the other applications running
    on the same machine.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Portability**: The application runs everywhere, no matter which environment
    dependencies are present.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: No, the Docker daemon can run natively only on Linux machines. However, there
    are well-integrated virtual environments for both Windows and Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Docker image is a stateless, serialized collection of files and the recipe
    of how to use them; a Docker container is a running instance of the Docker image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Docker image is built on top of another Docker image, which makes the layered
    structure. This mechanism is user-friendly and saves bandwidth and storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker Commit and Dockerfile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`docker build`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`docker run`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishing a port means that the host's port is forwarded to the container's
    port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Docker volume is the Docker host's directory mounted inside the container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18223_03_ePub.xhtml#_idTextAnchor073): Configuring Jenkins'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes, and the image name is `jenkins/jenkins`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Jenkins master is the main instance that schedules tasks and provides the
    web interface, while a Jenkins agent (slave) is the additional instance that's
    only dedicated to executing jobs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vertical scaling means adding more resources to the machine while the load increases.
    Horizontal scaling means adding more machines while the load increases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH and Java Web Start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A permanent agent is the simplest solution, and it means creating a static server
    with all the environments prepared to execute a Jenkins job. On the other hand,
    a permanent Docker agent is more flexible; it provides the Docker daemon, and
    all the jobs are executed inside Docker containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In case you use dynamically provisioned Docker agents and the standard ones
    (available on the internet) do not provide the execution environment you need.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When your organization needs some templated Jenkins to be used by different
    teams.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blue Ocean is a Jenkins plugin that provides a more modern Jenkins web interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18223_04_ePub.xhtml#_idTextAnchor106): Continuous Integration
    Pipeline'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A pipeline is a sequence of automated operations that usually represents a part
    of the software delivery and quality assurance process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A step is a single automated operation, while a stage is a logical grouping
    of steps used to visualize the Jenkins pipeline process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `post` section defines a series of one or more step instructions that are
    run at the end of the pipeline build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checkout, compile, and unit test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkinsfile is a file with the Jenkins pipeline definition (usually stored together
    with the source code in the repository).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code coverage stage is responsible for checking whether the source code
    is well covered with (unit) tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An external trigger is a call from an external repository (such as GitHub) to
    the Jenkins master, while Polling SCM is a periodic call from the Jenkins master
    to the external repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Email, group chat, build radiators, sms, rss feed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Trunk-based workflow, branching workflow, and forking workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A feature toggle is a technique that is used to disable the feature for users
    but enable it for developers while testing. Feature toggles are essentially variables
    used in conditional statements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18223_05_ePub.xhtml#_idTextAnchor133): Automated Acceptance
    Testing'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Registry is a stateless application server that stores Docker images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker Hub is the best-known public Docker registry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The convention is `<registry_address>/<image_name>:<tag>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The staging environment is the preproduction environment dedicated to integration
    and acceptance testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following commands: `docker build`, `docker login`, and `docker push`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They allow us to specify tests in a human-readable format, which helps with
    collaboration between businesses and developers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Acceptance criteria (feature scenario specification), step definitions, test
    runner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Acceptance test-driven development is a development methodology (seen as an
    extension of TDD) that says to always start the development process from the (failing)
    acceptance tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18223_06_ePub.xhtml#_idTextAnchor152): Clustering with Kubernetes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A server cluster is a set of connected computers that work together in such
    a way that they can be used similarly within a single system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kubernetes Node is just a worker, that is, a host that runs containers. Kubernetes
    Control Plane Master is responsible for everything else (providing the Kubernetes
    API, Pod orchestration, and more).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microsoft Azure, Google Cloud Platform, and Amazon Web Services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployment is a Kubernetes resource that's responsible for Pod orchestration
    (creating, terminating, and more). Service is an (internal) load balancer that
    provides a way to expose Pods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`kubectl scale`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker Swarm and Mesos.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18223_07_ePub.xhtml#_idTextAnchor185): Configuration Management
    with Ansible'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuration management is the process of controlling the configuration changes
    in a way such that the system maintains integrity over time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Agentless means that you don't need to install any special tool (an agent or
    daemon) in the server that is being managed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ansible, Chef, and Puppet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An inventory is a file that contains a list of servers that are managed by Ansible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An ad hoc command is a single command that is executed on servers, and playbooks
    are the entire configurations (sets of scripts) that are executed on servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An Ansible role is a well-structured playbook prepared to be included in the
    playbooks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ansible Galaxy is a store (repository) for Ansible roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Infrastructure as code is the process of managing and provisioning computing
    resources instead of physical hardware configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Terraform, AWS CloudFormation, Azure Resource Manager, Google Cloud Deployment
    Manager, Ansible, Chef, Puppet, Pulumi, Vagrant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18223_08_ePub.xhtml#_idTextAnchor218): Continuous Delivery Pipeline'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Production, staging, QA, development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Staging is the preproduction environment used to test software before the release;
    QA is a separate environment used by the QA team and the dependent applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performance, load, stress, scalability, endurance, security, maintainability,
    recovery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, but it should be explicit which are part of the pipeline, and which are
    not (and for those that are not, there should still be some automation and monitoring
    around).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Semantic versioning, timestamp-based, hash-based.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A smoke test is a very small subset of acceptance tests whose only purpose is
    to check that the release process is completed successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18223_09_ePub.xhtml#_idTextAnchor242): Advanced Continuous Delivery'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Database schema migration is a process of incremental changes to the relational
    database structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Flyway, Liquibase, Rail migrations (from Ruby on Rails), Redgate, Optima database
    administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backward-compatible and non-backward-compatible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If one database is shared between multiple services, then each database change
    must be compatible with all services, which makes changes very difficult to initiate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unit tests do not require the preparation of any special data; data is in memory
    and prepared by developers; integration/acceptance tests require the preparation
    of special data that is similar to production data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Parallel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build parameters and shared libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rolling updates, blue-green deployment, and canary release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
