- en: Security in OpenShift
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenShift 中的安全性
- en: Previously, we worked with advanced OpenShift resources, such as ImageStreams,
    ConfigMaps, and templates. Those resources allow you to simplify OpenShift resource
    management and the application delivery process.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们使用了高级 OpenShift 资源，如 ImageStreams、ConfigMaps 和模板。这些资源可以简化 OpenShift 资源管理和应用交付过程。
- en: In this chapter, we will introduce you to the realm of security in OpenShift.
    Any business' success depends on many factors, one of which is the company's ability
    to implement different security strategies for different users, departments, and
    applications. OpenShift is an enterprise-ready application platform that supports
    multiple security features, making it possible to integrate it into any corporate
    security landscape.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 OpenShift 中的安全领域。任何企业的成功取决于许多因素，其中之一就是公司能够为不同的用户、部门和应用程序实施不同的安全策略。OpenShift
    是一个企业级的应用平台，支持多种安全特性，使其能够融入任何企业的安全架构。
- en: 'This chapter will provide you with an understanding of the following concepts:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助你理解以下概念：
- en: Authentication—users and identities, service accounts, and identity providers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证——用户和身份、服务账户以及身份提供者
- en: Authorization and role-based access control
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权和基于角色的访问控制
- en: Admission controllers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问控制器
- en: Security context constraints
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全上下文约束
- en: Storing sensitive data in OpenShift
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 OpenShift 中存储敏感数据
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this section, we will have to make use of Vagrant to demonstrate the difference
    between these methods, as we will require two VMs: one for single-node OpenShift
    cluster, and the other for the FreeIPA server. Use the following Vagrantfile to
    spin up an environment:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Vagrant 来演示这些方法之间的区别，因为我们需要两个虚拟机：一个用于单节点 OpenShift 集群，另一个用于 FreeIPA
    服务器。使用以下 Vagrantfile 来启动环境：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding file may seem complicated compared to the one from the [Chapter
    6](part0129.html#3R0OI0-78aafb146b304cdeb9b3261a70edabde), *OpenShift Installation*,
    but all it does is automates the steps, performed in that chapter manually, because
    the purpose of this chapter is to discuss security while building on the knowledge
    you gained up to this point. Also, it sets up FreeIPA server on another VM and
    creates a user that will be used later in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [第 6 章](part0129.html#3R0OI0-78aafb146b304cdeb9b3261a70edabde) *OpenShift
    安装* 中的文件相比，上面的文件可能看起来很复杂，但它所做的只是自动化了该章节中手动执行的步骤，因为本章节的目的是在建立到此为止获得的知识的基础上，讨论安全性。此外，它在另一个虚拟机上设置
    FreeIPA 服务器，并创建一个将在本章稍后使用的用户。
- en: The command `systemctl restart dbus` is necessary to prevent installation of
    FreeIPA from failing during restart of certification manager.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `systemctl restart dbus` 是必要的，以防止在重新启动认证管理器时 FreeIPA 安装失败。
- en: We used the same simple password for both the directory manager and IPA admin
    for simplicity, but in a production setup, make sure that you use complex and
    unique passwords!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我们为目录管理器和 IPA 管理员使用了相同的简单密码，但在生产环境中，请确保使用复杂且独特的密码！
- en: 'Run `vagrant up` and wait until it finishes all the work. It may take up to
    30 mins depending on your internet connectivity and compute resources:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `vagrant up`，并等待直到它完成所有工作。根据你的网络连接和计算资源，可能需要最多 30 分钟：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once it''s done, open SSH session into the `openshift` VM and become root:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，打开 `openshift` 虚拟机的 SSH 会话并成为 root 用户：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Do not be alarmed by some of the output in red produced by the command above.
    Many CentOS commands, like yum, send warning, errors, and even other information
    alike to the standard error, which all gets interpreted as errors by Vagrant.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不要被上述命令输出中的一些红色内容吓到。许多 CentOS 命令（如 yum）会将警告、错误甚至其他信息发送到标准错误，这些信息会被 Vagrant 解释为错误。
- en: 'Then use the following Ansible inventory file to install OpenShift on the `openshift`
    VM. If you went through the [Chapter 6](part0129.html#3R0OI0-78aafb146b304cdeb9b3261a70edabde), *OpenShift
    Installation*, you will notice that this is the same file with added `openshift_master_identity_providers`
    variable:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下 Ansible 清单文件在 `openshift` 虚拟机上安装 OpenShift。如果你已经完成了 [第 6 章](part0129.html#3R0OI0-78aafb146b304cdeb9b3261a70edabde)
    *OpenShift 安装*，你会注意到这是相同的文件，只是新增了 `openshift_master_identity_providers` 变量：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Even though `openshift_schedulable` variable appears to be on a separate line,
    it's actually on the previous line. If you just copy this file as it is from the
    one provided with other materials on this book, it will work.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 `openshift_schedulable` 变量看起来位于单独的一行，它实际上是在上一行。如果你直接复制本书提供的文件，它会照常工作。
- en: 'Run the following playbooks to perform prerequisites check and actual installation,
    respectively:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下剧本来分别执行前提检查和实际安装：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In our exercise, we will be using two identity providers: **LDAP** and **HTPasswd**.
    We will discuss in more detail in subsequent subsections. Notice that we specified
    the `claim` mapping method for both of them to demonstrate how it works with multiple
    providers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的练习中，我们将使用两个身份提供者：**LDAP** 和 **HTPasswd**。我们将在后续的子章节中更详细地讨论它们。注意，我们为它们都指定了
    `claim` 映射方法，以展示如何在多个提供者中使用此方法。
- en: 'After OpenShift is installed, use the following command provided by the `httpd-tools` package
    to create an `htpasswd` file with the user `alice` and the hashed password `supersecret`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenShift 安装完成后，使用 `httpd-tools` 包提供的以下命令创建一个包含用户 `alice` 和哈希密码 `supersecret`
    的 `htpasswd` 文件：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we are ready to proceed further.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好进一步进行操作。
- en: Authentication
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证
- en: The term authentication refers to the process of validating one's identity.
    Usually, users aren't created in OpenShift itself, but provided by an external
    entity, such as the LDAP server or GitHub. The only part where OpenShift steps
    in is authorization—determining roles and, therefore, permissions for a user.
    OpenShift supports integration with various identity management solutions used
    in corporate environments, such as FreeIPA/Identity Management, Active Directory, GitHub,
    Gitlab, OpenStack Keystone, and OpenID. For the purpose of brevity, we will only
    discuss the most commonly used ones, but you can refer to [https://docs.openshift.org/latest/install_config/configuring_authentication.html](https://docs.openshift.org/latest/install_config/configuring_authentication.html)
    for the complete documentation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证一词指的是验证一个人身份的过程。通常，用户不会在 OpenShift 中创建，而是由外部实体提供，如 LDAP 服务器或 GitHub。OpenShift
    唯一涉及的部分是授权—确定用户的角色及其权限。OpenShift 支持与多种在企业环境中使用的身份管理解决方案集成，如 FreeIPA/Identity Management、Active
    Directory、GitHub、Gitlab、OpenStack Keystone 和 OpenID。为了简洁起见，我们将仅讨论最常用的几种，但你可以参考
    [https://docs.openshift.org/latest/install_config/configuring_authentication.html](https://docs.openshift.org/latest/install_config/configuring_authentication.html)
    获取完整文档。
- en: Users and identities
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户和身份
- en: A user is any human actor that can make requests to the OpenShift API to access
    resources and perform actions. Users are typically created in an external identity
    provider, usually a corporate identity management solution such as **Lightweight
    Directory Access Protocol** (**LDAP**) or Active Directory.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 用户是任何能够向 OpenShift API 发出请求、访问资源并执行操作的人。用户通常是在外部身份提供者中创建的，通常是企业身份管理解决方案，如 **轻量级目录访问协议**
    (**LDAP**) 或 Active Directory。
- en: 'To support multiple identity providers, OpenShift relies on the concept of
    identities serving as a bridge between users and identity providers. By default,
    a new user and identity are created upon the first login. There are four ways
    to map users to identities:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持多个身份提供者，OpenShift 依赖于身份的概念，作为用户和身份提供者之间的桥梁。默认情况下，在第一次登录时会创建新的用户和身份。将用户映射到身份有四种方式：
- en: '| **Method** | **Description** |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| claim | If a user with the same name already exists and is mapped to another
    identity, creation of another identity and login will fail. This is useful when
    you want to maintain a clear separation between identities provided by several
    providers in the case of identical usernames. A potential use case for this method
    would be transitioning from one authentication scheme to another. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 声明 | 如果已存在具有相同名称的用户并且该用户映射到另一个身份，则无法创建另一个身份并进行登录。这在你希望在用户名相同的情况下，保持由多个提供者提供的身份之间的清晰区分时非常有用。此方法的一个潜在使用场景是从一种认证方案迁移到另一种认证方案。
    |'
- en: '| add | If a user with the same name already exists and is mapped to another
    identity, another identity mapped to the same user is created. This is useful
    if you need to provide users from separate organizational entities that have their
    own identity management solutions with the ability to authenticate using mechanisms
    that are convenient for them. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 添加 | 如果已存在具有相同名称的用户并且该用户映射到另一个身份，则会为同一用户创建另一个映射的身份。如果你需要为来自不同组织实体的用户提供身份管理解决方案，并允许他们使用方便的认证机制进行认证，这种方式会很有用。
    |'
- en: '| lookup | OpenShift looks up an existing user, identity, and mapping, but
    doesn''t create any of them, so these entities must exist prior to the user being
    able to log in. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| lookup | OpenShift查找现有的用户、身份和映射，但不创建其中任何一个，因此这些实体必须在用户能够登录之前存在。 |'
- en: '| generate | If a user with the same name already exists and is mapped to another
    identity, a separate user mapped to this identity is generated. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| generate | 如果已存在具有相同名称的用户并映射到另一个身份，则为该身份生成一个单独的用户。 |'
- en: 'Go to `https://172.24.0.11:8443` in your web browser and you will see the login
    page where you can choose from available identity providers:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中访问`https://172.24.0.11:8443`，你将看到登录页面，您可以从可用的身份提供者中进行选择：
- en: '![](img/00059.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00059.jpeg)'
- en: 'Log in via browser with the `LDAP` identity provider using the username `alice`
    and the password `supersecret`, and observe that the user was created using CLI:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`LDAP`身份提供者通过浏览器登录，用户名为`alice`，密码为`supersecret`，并观察到用户是通过CLI创建的：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice that identity's name is composed of its type and user locator, delimited
    by colon. Locator is provider-specific and specifies how to request a particular
    user from a specific provider.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，身份的名称由其类型和用户定位符组成，用冒号分隔。定位符是特定于提供者的，并指定如何从特定的提供者请求特定的用户。
- en: 'You can also see that an identity was created as well and mapped to the user:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到创建了一个身份，并将其映射到该用户：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s try to log in with the `PASSWORD_FILE` provider using the same credentials:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用相同的凭据通过`PASSWORD_FILE`提供者登录：
- en: '![](img/00060.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00060.jpeg)'
- en: The credentials are correct, but OpenShift was unable to create a new identity
    and identity mapping to an existing user, as the user was already `claim`ed by
    the LDAP provider. This is exactly what the message Could not create user indicates.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 凭据是正确的，但OpenShift无法创建新的身份并将其映射到现有用户，因为该用户已被`LDAP`提供者**认领**。这正是消息“无法创建用户”所表示的含义。
- en: 'Let''s delete the user and its identity to provide a clean slate for the upcoming
    demonstrations:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除用户及其身份，以为即将进行的演示提供干净的环境：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Change the mapping method for the `PASSWORD_FILE` provider to `add`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将`PASSWORD_FILE`提供者的映射方法更改为`add`：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And restart the master API service:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并重启主API服务：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Log in with `LDAP` using `alice:supersecret` again, just as you did the first time,
    and then with `PASSWORD_FILE`using `alice:redhat123` . Notice that the second
    identity was added to the existing one and mapped to the same user:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用`alice:supersecret`通过`LDAP`登录，像第一次一样，然后使用`alice:redhat123`通过`PASSWORD_FILE`登录。请注意，第二个身份已被添加到现有身份中，并映射到同一个用户：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The order in which you use identity providers to log in is important! As you
    specified the `add` method for the `PASSWORD_FILE` provider only, if you try to
    log in with it first, you won't be able to log in using **LDAP**, because it is
    still set up to **claim** non-existing users and return an error if they already
    exist.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用身份提供者登录的顺序很重要！由于你只为`PASSWORD_FILE`提供者指定了`add`方法，如果你首先尝试使用它进行登录，你将无法通过**LDAP**登录，因为它仍然设置为**认领**不存在的用户，并在用户已存在时返回错误。
- en: 'In order to see that we now have two identities mapped to the same user more
    clearly, run the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地看到我们现在有两个身份映射到同一个用户，请运行以下命令：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Had the username been different, the second identity would have been mapped
    to that separate user.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户名不同，第二个身份将映射到该单独的用户。
- en: 'Delete the user and identities before continuing with the next demonstration:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一次演示之前，删除用户和身份：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, change the mapping method for the same provider to `lookup`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将同一提供者的映射方法更改为`lookup`：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Restart the master API to apply changes:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重启主API以应用更改：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now login with `LDAP` using `alice:supersecret` first. It should allow you
    to login. Then try to login with `PASSWORD_FILE`using `alice:redhat123`. You should
    see a new error provided below:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，首先使用`alice:supersecret`通过`LDAP`登录。它应该允许你登录。然后尝试使用`alice:redhat123`通过`PASSWORD_FILE`登录。你应该看到如下提供的新错误：
- en: '![](img/00061.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00061.jpeg)'
- en: 'Could not find user means that we didn''t create an identity in OpenShift for
    this provider and didn''t map it to any user, as `lookup` mapping method requires.
    Let''s rectify this by creating the identity first:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 无法找到用户意味着我们没有为此提供者在OpenShift中创建身份，也没有将其映射到任何用户，因为`lookup`映射方法要求如此。让我们通过首先创建身份来纠正这一点：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, map it to the pre-existing user:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将其映射到预先存在的用户：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: After that, the login attempt will be successful.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，登录尝试将会成功。
- en: Once you verified that you can login with `alice:redhat123` , you can delete
    the user and both identities to proceed further.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你验证了可以使用`alice:redhat123`登录后，你可以删除该用户和两个身份以继续操作。
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We didn't have to run `oc get identity` command again to get the list of all
    identities, because you can delete an identity using its name, which depends on
    the provider's name and the user's locator; since they hadn't changed, we could
    just use the same command as before.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要再次运行`oc get identity`命令来获取所有身份的列表，因为你可以使用其名称删除一个身份，这个名称取决于提供者的名称和用户的定位符；由于它们没有变化，我们可以使用之前的命令。
- en: 'Lastly, change the mapping method to `generate`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将映射方法更改为`generate`：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Restart the master API:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 重启主API：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Just as before, log in with `LDAP` using `alice:supersecret` and then with
    `PASSWORD_FILE`using `alice:redhat123`. Let''s see what users were created:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前一样，使用`LDAP`登录，凭证为`alice:supersecret`，然后使用`PASSWORD_FILE`登录，凭证为`alice:redhat123`。让我们来看一下创建了哪些用户：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, this method creates a separate user with a `generate`d name
    using a separate identity mapping if the user with the same name already exists.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，如果已有相同名称的用户存在，这种方法会创建一个使用单独身份映射的`generate`名称的独立用户。
- en: 'You can see that two identities are now mapped to different users:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到现在两个身份已映射到不同的用户：
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, let''s delete the user and identities:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们删除该用户和身份：
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now that this exercise is over, we can stop our VMs from releasing system resources
    for MiniShift for the rest of the chapter:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个练习已经结束，我们可以停止我们的虚拟机释放MiniShift的系统资源，接下来的章节不再使用它们：
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We suggest you to just  `halt` this lab, as it will be used in the section *Admission
    controllers*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议你只需`halt`此实验室，因为它将在*Admission controllers*部分中使用。
- en: Service accounts
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务账户
- en: 'Service accounts give us flexibility to control access to API without sharing
    user’s credentials. In order to show you how it works we need to start the MiniShift
    VM:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 服务账户使我们能够灵活控制API访问，而无需共享用户的凭证。为了向你展示它是如何工作的，我们需要启动MiniShift虚拟机：
- en: '[PRE27]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, `export PATH` to `oc` client:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`export PATH`到`oc`客户端：
- en: '[PRE28]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, switch your Docker client to point to the docker daemon inside the MiniShift
    VM:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将你的Docker客户端指向MiniShift虚拟机中的docker守护进程：
- en: '[PRE29]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, log in as the privileged user `system:admin` in order to be able to
    perform privileged operations, such as adding SCCs and roles:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以特权用户`system:admin`身份登录，以便能够执行特权操作，例如添加SCC和角色：
- en: '[PRE30]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now, we are ready to get started.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备开始了。
- en: 'Another type of user that we will be using is service accounts. They are used
    by pods and other non-human actors to perform various actions and are a central
    vehicle by which their access to resources is managed. By default, three service
    accounts are created in each project:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种我们将使用的用户类型是服务账户。它们由Pods和其他非人类实体使用来执行各种操作，是其访问资源的主要管理方式。默认情况下，每个项目中都会创建三个服务账户：
- en: '| **Name** | **Description** |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **描述** |'
- en: '| builder | Used by build pods and assigned the system:image-builder role,
    which grants push capability into the internal registry to any image stream in
    the project. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| builder | 由构建Pods使用，并分配了system:image-builder角色，该角色授予将镜像推送到项目中任何镜像流的权限。 |'
- en: '| deployer | Used by deploy pods and assigned the system:deployer role, which
    allows modifying replication controllers in the project. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| deployer | 由部署Pods使用，并分配了system:deployer角色，该角色允许修改项目中的复制控制器。 |'
- en: '| default | Used by all other pods by default. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| default | 默认由所有其他Pods使用。 |'
- en: 'You can see them by running the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令看到它们：
- en: '[PRE31]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Each service account is represented by the `ServiceAccount` resource and is
    associated with two additional secrets—for access to the OpenShift API and the
    internal registry:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务账户由`ServiceAccount`资源表示，并与两个额外的密钥相关联——用于访问OpenShift API和内部注册表：
- en: '[PRE32]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The service account can be created with a simple command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 服务账户可以通过简单的命令创建：
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s delete it for now, as we will be creating it again later on in this
    chapter:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们先删除它，因为我们将在本章后面重新创建它：
- en: '[PRE34]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Every service account is also a member of two groups:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务账户也是两个组的成员：
- en: '`system:serviceaccounts`, which includes all service accounts in the cluster'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system:serviceaccounts`，包含集群中的所有服务账户。'
- en: '`system:serviceaccounts:<project>`, which includes all service accounts in
    the `project`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system:serviceaccounts:<project>`，它包括`project`中所有的服务账户。'
- en: 'You can grant privileges to groups of service accounts, which will effectively
    grant those privileges to all accounts in the group. For example, to grant view
    privileges to all service accounts in the cluster in the project `myproject`,
    type the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向服务账户组授予权限，这将有效地将这些权限授予组中的所有账户。例如，要授予集群中`myproject`项目下所有服务账户查看权限，请输入以下命令：
- en: '[PRE35]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We specified `-n` only as a demonstration; as your current project is `myproject`,
    you could have omitted it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仅以演示为目的指定了`-n`；由于您的当前项目是`myproject`，您本可以省略它。
- en: 'Let''s revert our changes and learn how to remove a particular role from a
    user in the process:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们恢复之前的更改，并了解如何从用户中移除特定角色：
- en: '[PRE36]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Identity providers
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份提供者
- en: 'Usually, users aren''t created in OpenShift directly, but rather are supplied
    by an external identity management solution, which can be as complex as LDAP and
    Active Directory with a trust relationship set up between them, or as simple as
    a text password file with hashed passwords. Choosing a particular identity provider
    is influenced by factors such as:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，用户不会直接在OpenShift中创建，而是通过外部身份管理解决方案提供，身份管理解决方案可以像LDAP和Active Directory那样复杂，并且它们之间建立了信任关系，或者可以像一个带有哈希密码的文本密码文件那样简单。选择特定的身份提供者受到以下因素的影响：
- en: Your company's existing identity management solution
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您公司现有的身份管理解决方案
- en: How often users are added and deleted
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户添加和删除的频率
- en: Whether you need a centralized management
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否需要集中管理
- en: 'OpenShift implements the following identity providers:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 实现了以下身份提供者：
- en: AllowAll
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AllowAll
- en: DenyAll
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DenyAll
- en: HTPasswd
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTPasswd
- en: LDAP
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LDAP
- en: Keystone
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keystone
- en: BasicAuth
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BasicAuth
- en: RequestHeader
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RequestHeader
- en: GitLab
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab
- en: GitHub
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: OpenID
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenID
- en: Google
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google
- en: For the sake of brevity, we will limit demonstrations to the first four providers
    in the preceding list, while you can fill in the gaps by referring to [https://docs.openshift.org/latest/install_config/configuring_authentication.html](https://docs.openshift.org/latest/install_config/configuring_authentication.html)
    . These configurations are to be applied to the master configuration file located
    at `/etc/origin/master/master-config.yml`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，我们将仅限于演示前面列表中的前四个提供者，您可以通过参考[https://docs.openshift.org/latest/install_config/configuring_authentication.html](https://docs.openshift.org/latest/install_config/configuring_authentication.html)来填补其他部分。这些配置需要应用于位于`/etc/origin/master/master-config.yml`的主配置文件。
- en: You will need to bring your vagrant environment up if you want to test out the
    configuratins below because it won't work with minishift.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想测试下面的配置，您需要启动您的vagrant环境，因为它不能与minishift一起使用。
- en: AllowAll
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AllowAll
- en: This is the default identity provider for MiniShift and OpenShift Origin, including
    when the master is started without its configuration file. It allows all users
    with all passwords, so no authentication is performed. It is only useful for debugging
    purposes when you integrate your cluster with a corporate identity solution.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这是MiniShift和OpenShift Origin的默认身份提供者，包括在没有配置文件的情况下启动master时。它允许所有用户使用所有密码，因此不会执行身份验证。仅在将集群与企业身份解决方案集成时，用于调试目的。
- en: 'A configuration snippet from the master configuration file for this provider
    is as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 该提供者的主配置文件的配置片段如下：
- en: '[PRE37]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: DenyAll
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DenyAll
- en: This identity provider is the opposite of AllowAll, that is, it denies access
    to everyone. It is useful when you want to temporarily lock your cluster from
    everyone for maintenance or other purposes. This is the default provider for the
    Red Hat OpenShift Container Platform.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个身份提供者与AllowAll相反，即它拒绝所有人的访问。当您想临时锁定集群以进行维护或其他目的时，它非常有用。这是Red Hat OpenShift容器平台的默认提供者。
- en: 'A configuration snippet of the master configuration file for this provider
    is as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 该提供者的主配置文件的配置片段如下：
- en: '[PRE38]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: As you can see, all it takes to enable it is changing `Allow` to `Deny`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，启用它所需的唯一操作是将`Allow`改为`Deny`。
- en: HTPasswd
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTPasswd
- en: 'This provider allows you to create a file with the a of users with hashed passwords,
    giving you granular access control. While certainly better than having your installation
    just either accept or deny everyone, this approach still has two disadvantages:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 该提供者允许您创建一个包含带有哈希密码的用户文件，从而实现更细粒度的访问控制。虽然这比让您的安装只是接受或拒绝所有人要好，但这种方法仍然有两个缺点：
- en: In the case of HA installation with multiple masters, you will need to synchronize
    changes to the password file between all masters, which is prone to errors and
    inefficient. Sure, it can be automated using configuration management and the
    **version control system** (**VCS**), but there are very few use cases where you
    wouldn't want to integrate your cluster with the corporate identity management
    server.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于具有多个主节点的高可用安装，你需要在所有主节点之间同步密码文件的更改，这容易出错且效率低下。当然，使用配置管理和 **版本控制系统** (**VCS**)
    可以自动化这一过程，但几乎没有使用场景是不希望将集群与企业身份管理服务器集成的。
- en: It doesn't integrate with the corporate identity management solution, which
    requires you to either create all users in the password file directly, or to set
    up some sort of synchronization mechanism between your identity management server
    and OpenShift masters/configuration management server.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不与企业身份管理解决方案集成，这要求你要么直接在密码文件中创建所有用户，要么在身份管理服务器和 OpenShift 主节点/配置管理服务器之间设置某种同步机制。
- en: 'To enable this identity provider, we need to create the password file first,
    which, in turn, requires the `httpd-tools` package to be installed:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用此身份提供者，我们首先需要创建密码文件，这反过来需要安装 `httpd-tools` 包：
- en: '[PRE39]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, create the file and add users to it. Specify the `-c` flag when creating
    the first user to create the file:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建文件并将用户添加到其中。创建第一个用户时，请指定 `-c` 标志来创建文件：
- en: '[PRE40]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, we can enable this provider by changing AllowAll from the default configuration
    to `htpasswd` and specifying the location of the password file:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过将默认配置中的 AllowAll 更改为 `htpasswd` 并指定密码文件的位置来启用此身份提供者：
- en: '[PRE41]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Lastly, restart master API service to have it pick up the changes:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，重启主节点 API 服务以使其更新变更：
- en: '[PRE42]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: LDAP
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LDAP
- en: This is the identity provider you will most likely use in your organization
    because of the popularity of LDAP (Lightweight Directory Access Protocol). If
    you are building your OpenShift lab from scratch, you can use either FreeIPA or
    IdM—they are very easy to set up. Like other centralized identity management solutions,
    LDAP spares you the need to synchronize changes to password files between masters
    in the case of multiple masters setup.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在组织中最可能使用的身份提供者，因为 LDAP（轻量目录访问协议）非常流行。如果你从头开始构建 OpenShift 实验环境，可以使用 FreeIPA
    或 IdM——它们非常容易设置。像其他集中式身份管理解决方案一样，LDAP 使你不需要在多个主节点设置中同步密码文件的更改。
- en: 'A configuration snippet from the master configuration file for this provider
    could look like the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 该身份提供者的主节点配置文件中的配置片段可能如下所示：
- en: '[PRE43]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You can set the `insecure` parameter to `false` if your LDAP server supports
    the LDAPS secure protocol.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 LDAP 服务器支持 LDAPS 安全协议，你可以将 `insecure` 参数设置为 `false`。
- en: Authorization and role-based access control
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权和基于角色的访问控制
- en: 'Authorization in OpenShift is built around the following concepts:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 中的授权围绕以下概念构建：
- en: '**Rules:** Sets of actions allowed to be performed on specific resources.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则：** 允许对特定资源执行的操作集。'
- en: '**Roles:** Collections of rules that allow them to be applied to a user according
    to a specific usage profile. Roles can be applied either at the cluster or project
    level.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角色：** 一组规则，允许根据特定的使用配置文件将其应用于用户。角色可以在集群级别或项目级别应用。'
- en: '**Role bindings:** Associations between users/groups and roles. A given user
    or group can be associated with multiple roles.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角色绑定：** 用户/组与角色之间的关联。一个给定的用户或组可以与多个角色关联。'
- en: 'Let''s return to our MiniShift environment. To see a list of all available
    cluster roles, run the following command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的 MiniShift 环境。要查看所有可用集群角色的列表，请运行以下命令：
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Use the `describe` command to understand what rules are in a particular role:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `describe` 命令了解某个角色中的规则：
- en: '[PRE46]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You can see from the preceding output that, for example, users with this role
    can create and delete such resources as pods, configmaps, deploymentconfigs, imagestreams,
    routes, and services, but cannot do anything with projects, other than view them.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的输出中你可以看到，例如，具有此角色的用户可以创建和删除如 pods、configmaps、deploymentconfigs、imagestreams、routes
    和 services 等资源，但不能对项目执行任何操作，除了查看它们。
- en: 'On the other hand, if you describe the view role, you will notice that the
    only actions allowed on resources are get, list, and watch, which makes it a perfect
    choice if, for example, you want to grant a development team the ability to view
    application resources in production, but not to modify any of them or create new
    resources:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你描述视图角色，你会注意到对资源的唯一允许操作是获取、列出和观察，这使得它成为一个完美的选择。例如，如果你想授予开发团队查看生产环境中应用程序资源的权限，但不允许修改任何资源或创建新资源：
- en: '[PRE47]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Using built-in roles
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内置角色
- en: 'Let''s see how we can use the `edit` pre-defined role to grant a user access
    to another user''s project. First, login at MiniShift as `alice`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用`edit`预定义角色将用户授予另一个用户的项目访问权限。首先，作为`alice`在MiniShift中登录：
- en: '[PRE48]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Just as with an OpenShift cluster deployed via Ansible, the default identity
    provider is AllowAll, which allows you to use any credentials.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 就像通过Ansible部署的OpenShift集群一样，默认的身份提供者是AllowAll，允许你使用任何凭证。
- en: 'Next, create a new project called `alice-project`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`alice-project`的新项目：
- en: '[PRE49]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Login as `bob` and observe that they weren''t added as a member to any project
    by default:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以`bob`身份登录并观察，默认情况下他没有被添加为任何项目的成员：
- en: '[PRE50]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Let''s correct this by granting `bob` the privilege to `edit` most of the resources
    in the `alice-project` project:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过授予`bob`在`alice-project`项目中`edit`大多数资源的权限来纠正这个问题：
- en: '[PRE51]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can use the following command to see the existing `rolebinding` in the
    current `alice-project` project:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令查看当前`alice-project`项目中现有的`rolebinding`：
- en: '[PRE52]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Notice that there are always two local bindings for the `deployer` and `builder`
    service accounts, as well as one binding granting all service accounts in the
    `alice-project` project the ability to pull images from the internal registry.
    Another two bindings make `alice` the admin of her project and grant `bob` the
    privilege of editing most of the resources in the project.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`deployer`和`builder`服务帐户始终有两个本地绑定，以及一个绑定授予`alice-project`项目中的所有服务帐户从内部注册表中拉取镜像的权限。另有两个绑定使`alice`成为她项目的管理员，并授予`bob`在该项目中编辑大多数资源的权限。
- en: 'Let''s see the details of the `edit` role binding:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看`edit`角色绑定的详细信息：
- en: '[PRE53]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The preceding output tells us that the user `bob` is bound to the `edit` role
    in the project `alice-project`. The omitted output is the same as in the details
    of the `edit` role.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出告诉我们用户`bob`被绑定到`alice-project`项目中的`edit`角色。省略的输出与`edit`角色的详细信息相同。
- en: 'Log back in as `bob` and see that now you have access to Alice''s project:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 以`bob`身份重新登录，并查看你现在是否可以访问Alice的项目：
- en: '[PRE54]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Creating custom roles
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义角色
- en: 'If pre-defined roles aren''t sufficient for you, you can always create custom
    roles with just the specific rules you need. Let''s create a custom role that
    can be used instead of the `edit` role to create and get pods:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果预定义的角色不足以满足你的需求，你始终可以创建自定义角色，只需包含你需要的特定规则。让我们创建一个自定义角色，可以代替`edit`角色来创建和获取pod：
- en: '[PRE55]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Notice that we had to log in as cluster administrator to create a cluster role.
    A cluster role is required to make its users members of a particular project.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们必须以集群管理员身份登录才能创建集群角色。集群角色是将其用户加入特定项目所必需的。
- en: 'OpenShift''s `create clusterrole` command is limited to creating only one set
    of resources and verbs, so we couldn''t add different verbs for pods. We can work
    around this limitation by editing the role directly:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift的`create clusterrole`命令仅限于创建一组资源和动词，因此我们无法为pods添加不同的动词。我们可以通过直接编辑角色来解决这个限制：
- en: '[PRE57]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Next, delete the `edit` role from bob:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从`bob`中删除`edit`角色：
- en: '[PRE58]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Assign the new role to `bob`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 将新角色分配给`bob`：
- en: '[PRE59]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Login as `bob`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以`bob`身份登录：
- en: '[PRE60]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'And start a new pod, just as we did before:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 并启动一个新的pod，就像我们之前做的一样：
- en: '[PRE61]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'What happened? Let''s take a look into the pod''s logs:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？让我们看看 pod 的日志：
- en: '[PRE62]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This is expected, because we didn''t grant our custom role `alice-project-edit`
    access to pods'' logs. If you look closely, this error message actually contains
    a suggestion on what we need to do - grant access to `pods/log` resource. Let''s
    fix that by logging as `system:admin` user, adding required section to the role''s
    definition, and log back in as `bob`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期的结果，因为我们没有授予自定义角色`alice-project-edit`访问pod日志的权限。如果你仔细看，错误信息实际上包含了我们需要做的操作——授予对`pods/log`资源的访问权限。让我们通过以`system:admin`用户身份登录，向角色定义中添加所需的部分，然后再以`bob`身份重新登录来修复它：
- en: '[PRE63]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Try listing the pod''s logs again:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试列出 pod 的日志：
- en: '[PRE65]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'This time it works and you are able to see that the container is having problems with
    permissions. For now, run the following command to correct this, but we will address
    this problem in more detail in the *Security context constraints* section:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这次成功了，你能够看到容器在权限上出现问题。目前，运行以下命令来修正这个问题，但我们将在 *安全上下文约束* 部分更详细地讨论这个问题：
- en: '[PRE66]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'And now it works:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它有效了：
- en: '[PRE67]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We just created a custom role that we can use to grant its users the ability
    to only create pods. It''s not very useful as it is, as it won''t let you create
    a service, for example:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个自定义角色，可以用来授予其用户只创建 pod 的权限。它本身并不是很有用，因为它不会让你创建一个服务，例如：
- en: '[PRE68]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now that this exercise is over, let''s clean everything up:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这项操作结束了，让我们清理一下所有内容：
- en: '[PRE69]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: We had to login as `system:admin` to delete our pod as we didn't grant the `alice-project-edit`
    role ability to delete pods, only to create them. This is yet another example
    of how granular RBAC can be in OpenShift.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不得不以 `system:admin` 身份登录来删除我们的 pod，因为我们没有授予 `alice-project-edit` 角色删除 pod
    的权限，只授予了创建 pod 的权限。这是 OpenShift 中 RBAC 可细化的又一例证。
- en: Admission controllers
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入站控制器
- en: 'Due to the specific nature of this section, we won''t be using MiniShift, so
    let''s stop it for now:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本节内容的特殊性，我们将不使用 MiniShift，因此现在就停止它：
- en: '[PRE70]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Then, start the Vagrant VMs instead:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，改为启动 Vagrant 虚拟机：
- en: '[PRE71]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Finally, open a session in the `openshift` VM:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 `openshift` 虚拟机中打开一个会话：
- en: '[PRE72]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: An Admission Controller is a subroutine that's invoked after a request to the
    API is authenticated and authorized, but before it's persisted to etcd. Admission
    Controller serve the purpose of mutating and validating resources to be persisted,
    such as adding various annotations and defaults and making sure that they conform
    to specific restrictions. All admission controllers are chained, so that mutating
    controllers are applied first and then validating ones.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 入站控制器是在 API 请求经过身份验证和授权后调用的一个子程序，但在将其持久化到 etcd 之前。入站控制器的作用是变更和验证将要持久化的资源，例如添加各种注释和默认值，并确保它们符合特定的限制。所有入站控制器是链式的，因此首先应用变更控制器，然后应用验证控制器。
- en: 'The following diagram illustrates the overall resource admission process:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了整体资源入站过程：
- en: '![](img/00062.jpeg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00062.jpeg)'
- en: OpenShift resource admission chain
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 资源入站链
- en: 'As you can see from the diagram above, the admission chain generally consists
    of the following types of admission controller:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，入站链通常由以下类型的入站控制器组成：
- en: Default admission plugins that can be enabled in the `admissionConfig` section
    of the master configuration file
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在主配置文件的 `admissionConfig` 部分启用的默认入站插件
- en: Mutating admission webhooks
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更入站 webhook
- en: Validating admission webhooks
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证入站 webhook
- en: 'The following are default admission controllers that are present in the master
    configuration file, unless configured otherwise during installation via the openshift_master_admission_plugin_config
    variable:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是主配置文件中默认存在的入站控制器，除非在安装过程中通过 openshift_master_admission_plugin_config 变量另行配置：
- en: '[PRE73]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: You won't find those admission plugins in the MiniShift master API configuration,
    even if you ssh into the MiniShift VM and look at the master configuration file.
    This is why we use our own installation of OpenShift.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你通过 SSH 登录到 MiniShift 虚拟机并查看主配置文件，也无法在 MiniShift 主 API 配置中找到这些入站插件。这就是为什么我们使用自己安装的
    OpenShift 的原因。
- en: 'OpenShift supports the following admission control plugins out-of-the-box:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 默认支持以下入站控制插件：
- en: '| **Admission Control Plugin** | **Description** |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| **Admission Control Plugin** | **描述** |'
- en: '| ProjectRequestLimit | Limits the number of self-provisioned projects per
    user. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| ProjectRequestLimit | 限制每个用户自我提供的项目数量。 |'
- en: '| BuildDefaults | Defines default configuration parameters, such as a git proxy
    server or node to run builder pods on, for BuildConfigs. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| BuildDefaults | 为 BuildConfigs 定义默认的配置参数，例如 git 代理服务器或运行构建器 pod 的节点。 |'
- en: '| BuildOverrides | Can be used to override settings defined in a BuildConfig.
    |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| BuildOverrides | 可用于覆盖 BuildConfig 中定义的设置。 |'
- en: '| RunOnceDuration | Limits the amount of time that builder and deployer pods
    may run. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| RunOnceDuration | 限制构建器和部署器 pod 可以运行的时间。 |'
- en: '| PodPreset | Enables use of PodPresets to supply pods with such resources
    as Secrets, ConfigMaps, and volumes. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| PodPreset | 启用使用 PodPreset 向 pod 提供资源，如 Secrets、ConfigMaps 和卷。 |'
- en: '| PodNodeConstraints | Confines pods to nodes with particular labels. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| PodNodeConstraints | 将 pod 限制在具有特定标签的节点上。 |'
- en: '| PodNodeSelector | Confines pods to projects with particular labels. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
- en: '| openshift.io/ImagePolicy | Controls which images can be used in the cluster
    based on their registry and annotations. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
- en: '| openshift.io/IngressAdmission | Disables host name collision prevention for
    routes and ingress objects, allowing users without the `cluster-admin` cluster
    role to change host names in these objects after they have been created. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
- en: Let's use the `ProjectRequestLimit` admission plugin to demonstrate how admission
    controllers are configured.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `ProjectRequestLimit` section to the end of the admission chain in
    the master configuration file:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In this particular example we are creating 2 different limits. One is for 'ops'
    department limiting the maximum number of projects to 2 , and another limitation
    for everyone esle that limits number of projects to 3.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart the master API to apply the changes:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Log in as `alice` using password `supersecret`, so that the user itself and
    its identity are created:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Log in as the cluster administrator to be able to create labels:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Now, we need to `label` `alice` with a key/value pair that matches the selector
    specified in the admission plugin''s configuration:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Log back in as `alice`:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'And try to create several projects:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: As you can see, the request to create a third project was intercepted by the
    admission plugin and rejected due to failed validation.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how a global limit for all users works by creating a new user with
    no labels associated with it.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new user called bob. You can use the same password `supersecret`
    for simplicity:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Next, log in as the newly created user. This time, we will not associated it
    with any labels:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Let''s try to create projects until we hit the limit:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: As you can see, `bob` wasn't able to create more than three projects, just as
    was specified for unlabeled users in the admission plugin's configuration.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that this exercise is over, let''s do a clean-up:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Also, delete the admission plugin''s section from the master configuration
    file and restart the master API:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The first command in the preceding snippet deletes eight lines after the matching
    string and the string itself.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'As we won''t need Vagrant for the remainder of this chapter, let''s stop its
    VMs to prepare for the following exercises:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: If you are finished experimenting with your Vagrant environment, you can run
    `vagrant destroy` to wipe it clean.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Security context constraints
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start, let''s bring up MiniShift environment again:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Another mechanism for controlling the behavior of pods is **security context
    constraints** (**SCCs**). These cluster-level resources define what resources
    can be accessed by pods and provide an additional level of control. By default,
    OpenShift supports seven SCCs:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: You may notice `anyuid` SCC we used in the subsection "Creating custom roles"
    to solve the problem with container's permissions.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: By default, all pods, except those for builds and deployments, use a `default`
    service account assigned by the `restricted` SCC, which doesn't allow privileged
    containers – that is, those running under the root user and listening on privileged
    ports (<1024).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `docker inspect` to see what user is specified in the `nginx` image metadata:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Coincidentally, the metadata doesn't specify the user, which makes the image
    run as root. This is exactly what restricted SCC is designed to prevent.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: 'Previously, we just assigned the `anyuid` SCC to a default service account,
    which means that ALL containers get to run as privileged, and that is a big security
    risk. A good practice is to create a dedicated service account for our pod/container,
    so let''s do this the right way:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Next, we have to assign the `anyuid` SCC to this account, but to do so we must
    login as the cluster administrator first:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Now, add our service account to the pod''s definition:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Let''s try to create the pod again:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: As you can see, now that we have added the appropriate SCC to the service account
    used by the pod, it started successfully.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Instead of allowing your image to run as the root, an even better practice would
    be to optimize it to run as an arbitrary user by specifying an unprivileged USER,
    setting the appropriate permissions on files and directories, and configuring
    your application to listen on unprivileged ports.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: 'Clean up after our exercise, but leave `myserviceaccount` with the `anyuid`
    SCC assigned in place – we will need it later on to run privileged pods:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Storing sensitive data in OpenShift
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the modern world, applications are so complex that they are made up of multitudes
    of services interacting with each other via REST/SOAP APIs, binary protocols,
    message brokers, integration buses, and so on. An example of this is a backend
    application in an e-store; managing client orders means that you need to have
    access to the database with the products' details. Another example includes a
    payment processing application that must have access to international payment
    networks, such as SWIFT, in order to verify the card's details and process the
    payment. These examples are very different in terms of the scope and the technologies
    that are used, but they have a common trait—all services need some kind of authenticating
    piece of data to introduce themselves to each other and this data has to be stored
    somewhere.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: An obvious, but the most insecure, strategy would be to pass this data to pods
    as plain text via config maps, like any other data. With this approach, sensitive
    data can be viewed by anyone who has view access to project resources, so you
    cannot implement granular access control.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Being an enterprise-grade PaaS solution, OpenShift incorporates a dedicated
    security mechanism to secure such data against unwarranted disclosure—`Secret`.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: While providing an adequate level of protection for sensitive information, OpenShift
    is not a replacement for a specialized security solution. For example, if you
    need to store encryption/decryption keys in a secure location, you might want
    to consider using a **Hardware Security Module** (**HSM**).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: What data is considered sensitive?
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally speaking, any data that must be protected against unauthorized access
    is treated as sensitive. This includes login credentials, tokens, encryption keys,
    smart cards, classified documents, and so on. Protection for various types of
    sensitive data is regulated by many government-approved security information standards
    and corporate policies, thus being the subject of an entire separate field of
    Information Security. In the context of applications and microservices, we are
    mostly interested in a subset of sensitive data, such as:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Login credentials (username/password)
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API tokens
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption keys
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X.509 certificate/key pairs
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secrets
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Secrets are similar to config maps, which we discussed in the previous chapter,
    in that they are also used to pass data to pods, but that''s where their similarities
    end. A secret''s only use case is to store sensitive data consumed by applications—API
    tokens, credentials, X.509 certificates/keys, and so on. They are backed by tmpfs
    (an in-memory temporary filesystem) which prevents them from being stored on persistent
    storage. Secrets are different from config maps in the following ways:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Many secrets are created automatically on OpenShift startup (so that pods are
    able to access the OpenShift API and internal registry, for example)
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secret values are base64-encoded by default, which makes them impossible to
    see until they are injected into a container
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenShift supports three types of secret:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '| **Type** | **Description** |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
- en: '| generic | Arbitrary data, like the contents of a file, directory, or string.
    |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
- en: '| docker-registry | Docker registry credentials stored in the `.dockercfg`
    file. |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
- en: '| tls | X.509 certificate and its corresponding key. We will use this type
    of secret as an example later in this section. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
- en: 'First, login as `system:admin` user if you haven''t already done so:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Use the familiar `get` command to see all secrets in the current project:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Notice that there are three secrets for every service account in the project,
    as was stated in the subsection on service accounts. Let''s see what data the
    `dockercfg` token for the default service account actually has:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'You will see that the `data` attribute contains a long base64-encoded string,
    representing docker client credentials for accessing the internal registry. Use
    the following Python one-liner to decode the contents of `.dockercfg`:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Notice that the `auth` and `password` values are the same for the two sections
    of the document, as they specify credentials for the same registry. Let''s drill
    further down and decode the value of the `auth` field:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: You may have noticed that the string after the colon is actually the password
    from the JSON document we decoded earlier. You may use the same one-liner to decode
    it as well, but we haven't provided the output here, as it contains non-unicode
    characters.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: Now, we get to practice and create our own secret and use it in a pod. One of
    the most typical use cases for secrets is a web server that's configured with
    SSL/TLS support, where a secret is used to store a certificate/key pair.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create an X.509 certificate and its key:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: It doesn't matter what you specify in the certificate's fields, as it will only
    be used to demonstrate a working Nginx server with SSL configured.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a custom Nginx virtual host that''s listening on TCP port `443`
    and configured with the locations of the certificate and key:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: TLS secrets are mounted at subdirectory `..data` inside the mountPath of the
    container – that's why the path to both the certificate and the key contains `..data`.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the preceding configuration file to create a config map that will be used
    later by the pod:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The next step is to create the secret using the certificate and key:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Let''s take a look at the newly created secret''s definition:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Notice that the secret's keys `tls.crt` and `tls.key` store the certificate
    and key, respectively. When a TLS secret is mounted on the pod, the certificate
    and key are decrypted and placed in the files with the names of these keys – that's
    why in the virtual host's configuration we had to specify key names and not the
    file names as we created them with the `openssl` command.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: 'The last building block we have to create is the pod itself. Use the appropriate
    directives to mount the config map and secret as volumes in it:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Now, it''s time to create the pod:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Observe it being created:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Out of curiosity, let''s take a look inside the container to see how the certificate
    and key are accessible:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Use the following command to see that the secret isn''t stored on the file
    system (even though it''s ephemeral, in our case), but mounted in memory using
    `tmpfs`:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Create a service for the pod:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Then, `expose` the service to create an externally available route:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'The route was created:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'As a final touch, we have to add TLS termination to the route and set its type
    to `passthrough` so that the OpenShift router accepts encrypted traffic to the
    service and doesn''t alter it in any way. One cannot create a secure route via
    the `expose` CLI command, so we have to `patch` the route''s definition directly:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'To verify that our Nginx server was configured with TLS support correctly,
    open your favorite web browser, go to the URL representing the route, and confirm
    the security exception, as we used a self-signed certificate:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
- en: Notice the little lock icon at the left end of the URL, indicating that a secure
    connection has been established. The warning about invalid certificate, indicated
    by the yellow triangle (as in Mozilla Firefox), is totally fine in our lab environment.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: In Google Chrome and Chromium web browsers you will see the Not secure warning
    to the left of the URL field, which is the same.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that this exercise is over, let''s clean up the current project:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: You can specify unencoded data in plain text using the `stringData` section
    instead of `data`. This can be useful for templates so that you can parameterize
    various generated secrets, such as webhook keys.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about various identity providers that implement
    authentication in OpenShift, service accounts, and gained an understanding of
    the connection between users and identities. We also discussed the process of
    authorization and granting privileges to users, admission controllers, and security
    context constraints. Lastly, we talked about secrets and learned how they can
    be used by applications.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will deal with networking on the upper level—OpenShift
    SDN.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What mapping methods can be used to prevent the mapping of multiple identities
    to the same user? choose two:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: lookup
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: generate
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: add
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: claim
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What service account is used to run application pods?
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: all
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: builder
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: deployer
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: default
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What roles can be assigned to a user to grant the ability to create and delete
    resources in a particular project? choose two:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: create
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: admin
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: view
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: edit
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What admission control plugin can be used to limit the number of self-provisioned
    projects per user?
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PodPreset
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ProjectRequestNumber
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ProjectRequestLimit
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SelfProvisionedProjects
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What SCCs can be used to run containers as root? choose 2:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: anyuid
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: restricted
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: hostmount-anyuid
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: privileged
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What secret's attribute stores base64-encoded data?
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: stringData
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: data
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: base64
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: spec
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Users**: [https://docs.openshift.org/latest/admin_guide/manage_users.html](https://docs.openshift.org/latest/admin_guide/manage_users.html)'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service accounts**: [https://docs.openshift.org/latest/admin_guide/service_accounts.html](https://docs.openshift.org/latest/admin_guide/service_accounts.html)'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RBAC**: [https://docs.openshift.org/latest/admin_guide/manage_rbac.html](https://docs.openshift.org/latest/admin_guide/manage_rbac.html)'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identity providers**: [https://docs.openshift.org/latest/install_config/configuring_authentication.html](https://docs.openshift.org/latest/install_config/configuring_authentication.html)'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Admission Controllers**: [https://docs.openshift.org/latest/architecture/additional_concepts/admission_controllers.html](https://docs.openshift.org/latest/architecture/additional_concepts/admission_controllers.html)'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security context constraints**: [https://docs.openshift.org/latest/admin_guide/manage_scc.html](https://docs.openshift.org/latest/admin_guide/manage_scc.html)'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secrets**: [https://docs.openshift.org/latest/dev_guide/secrets.html](https://docs.openshift.org/latest/dev_guide/secrets.html)'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
