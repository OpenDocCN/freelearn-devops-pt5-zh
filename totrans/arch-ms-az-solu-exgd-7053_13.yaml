- en: Implementing Messaging Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered how to design solutions using the various
    artificial intelligence services that Azure offers. We covered Azure Machine Learning,
    IoT features, and Azure Media Services.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to design effective messaging architectures
    using the Azure Service Bus, Azure Queues, Notification Hubs, Azure Event Grid,
    and services that were covered throughout the previous chapters, such as Logic
    Apps and Event Hubs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Storage Queues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Service Bus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Event Grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notification Hubs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing an effective messaging architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter uses the following tools for the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure PowerShell: [https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps?view=azurermps-5.1.1](https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps?view=azurermps-5.1.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The source code for this chapter can be downloaded from the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%2013](https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%2013)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Queue Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've briefly discussed Azure Queue Storage in [Chapter 7](a9ce7cfc-00db-4859-9109-c78dda2ab0c5.xhtml),
    *Using Storage Solutions*, in the *Storage* section. Queue Storage offers asynchronous
    processing of messages. It provides a reliable and persistent messaging mechanism.
    It offers a REST API, which supports GET/PUT/PEEK operations. The message queue
    can be used to decouple applications, which enables independent scaling between
    the different application components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Queue Storage offers the following capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Single queue messages can be up to 64 KB in size. The maximum time that a message
    can remain in the queue is 7 days.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Message can become invisible for other readers when it is requested from the
    queue. The message is locked for other applications and can't be processed by
    other applications during the time that it is invisible. By default, this will
    last for 30 seconds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messages should be deleted from the queue when they are processed. If the message
    is not deleted from the application that requested the message, it will be visible
    again after the 30 seconds of invisibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Service Bus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Service Bus is a highly reliable, brokered messaging system for integration
    scenarios and IoT solutions. It is aimed at enterprise applications, and it offers
    middleware technologies such as message queueing and publish/subscribe messaging.
    It decouples the communication between applications and services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Service Bus offers the following key capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Queues**: This offers asynchronous, decoupled message communication between
    applications and services. It offersFirst In, First Out (FIFO) message delivery,
    and each message is received by one consumer. Messages are stored in the queue,
    so senders and consumers don''t have to be connected to the queue at the same
    time. Service Bus Queues also offers **Sessions**, where messages can be grouped
    using a session ID. This way, the messages can be isolated and processed by dedicated
    clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Topics and Subscriptions**: This offers the same functionalities as Queues,
    except there can be multiple consumers. This uses the publish/subscribe pattern,
    where the message is sent to a **Topic**. Applications don''t connect to that
    topic directly, but they connect to the **Subscription**. The Subscription then
    connects to the Topic. These subscriptions can have filters that only subscribe
    to a subset of messages, named **Filter Expressions**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WCF Relays**: WCF Relays offers a gateway to connect your on-premises WCF
    Services to Azure, without having to open a firewall connection on your network.
    Azure Relay Services has already been covered in detail in [Chapter 6](1563876d-91c8-4cbb-a73d-3cc436ac4acc.xhtml),
    *Connecting Hybrid Applications*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For an overview of examples of the capabilities of Azure Service Bus, you can
    refer to the following GitHub page: [https://github.com/Azure/azure-service-bus/tree/master/samples](https://github.com/Azure/azure-service-bus/tree/master/samples).
  prefs: []
  type: TYPE_NORMAL
- en: Across the different key capabilities, Azure Service Bus offers transaction
    capabilities. This offers the ability for all operations against messages to either
    succeed or fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Service Bus offers the following tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic**: This offers Queues and scheduled messages. The message size can
    be up to 256 KB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard**: On top of the Basic offering, the Standard tier offers Topics
    and Subscriptions; Transactions, Sessions, and De-duplication are included.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium**: On top of the Standard tier, the Premium tier offers a maximum
    message size of 1 MB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Event Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Event Grid is a service in Azure that enables event management across
    different Azure resources. Instead of creating a polling mechanism in your application
    that polls for changes, the apps get notified when an event happens automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Event Grid offers throughput of millions of events per second and a 24-hour
    retrying mechanism. You can filter events based on publishing paths, so you can
    receive only the events that are relevant for your application or resource. Events
    can be created without using code and are named built-in events by configuring
    them in the Azure Portal. You can create custom events as well, which can be created
    in your custom applications, PowerShell, or CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Event Grid offers the following built-in publishers: Azure Subscriptions,
    Event Hubs, Custom Topics, IoT Hub, Azure Resources Groups, Blob Storage, Service
    Bus, and V2 Storage accounts. For Event Handlers, Event Grid currently offers
    Webhooks, Azure Automation, Azure Functions, Logic Apps, Event Hubs, and Microsoft
    Flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca4f1fbd-23f7-4c4c-a91e-136c6bc14f03.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure Event Grid
  prefs: []
  type: TYPE_NORMAL
- en: New publishers and event handlers are added rapidly to Azure Event Grid, so
    keep an eye on [https://docs.microsoft.com/en-us/azure/event-grid/overview](https://docs.microsoft.com/en-us/azure/event-grid/overview).
  prefs: []
  type: TYPE_NORMAL
- en: Routing Events with Azure Event Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we are going to route events from Event Grid to an Azure Function.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create a new Event Grid Topic in Azure. To create this, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure Portal by opening [https://portal.azure.com/](https://portal.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on New and type `Event Grid Topic` in the search bar. Create a new Event
    Grid Topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following settings and click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1188aeed-f9e1-4b80-93ec-562d56110eb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the Event Grid Topic
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a new Azure Function with the following configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a937afc-6fde-423f-a0b5-a460e3c94aff.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating Azure Function
  prefs: []
  type: TYPE_NORMAL
- en: 'When the Azure Function is created, navigate to the settings and click on the
    Function file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b57a125d-334a-4217-9448-284680818f9b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Selecting Azure Function file
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the + button and select Custom function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/efdb1347-ebb5-4748-a1d0-2c69b995de2c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating Custom Function
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next blade, scroll down and select Event Grid trigger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea20cb92-13c2-4163-afd6-f1860e64c547.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the Event Grid trigger template
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following settings and click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c98c7464-051a-4b94-bfe2-31d567980b07.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating trigger
  prefs: []
  type: TYPE_NORMAL
- en: 'When the trigger is created, the `run.csx` file is opened by default. Click
    on the Add Event Grid subscription link in the top menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab828ebb-ee7f-42db-9646-268b28e6d5b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting Event Grid subscription
  prefs: []
  type: TYPE_NORMAL
- en: 'Name the Event Subscription and select the Event Grid, which we created earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fadd670f-d483-4f2e-a58e-0cf09be0f1bc.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating Event Subscription
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create; this will create a new event subscription that subscribes to
    the Event Grid Topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open PowerShell and run the following script from your desktop. This will create
    a custom event. You can check the Azure Function logs for the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notification Hubs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Notification Hubs in Azure offers a push notification service to send notifications
    from backends to mobile devices. Push notifications on mobile devices are usually
    displayed to a user in a popup or a dialog box. Users can then decide if they
    want to view or dismiss the message. You can use push notifications for various
    scenarios, such as sending codes for MFA, sending notifications from social media,
    and sending news.
  prefs: []
  type: TYPE_NORMAL
- en: Notification Hubs offers cross-platform notifications by offering a set of SDKs
    and APIs for IoS, Android, and Windows devices. Normally, applications will use
    Platform Notification Systems (PNSes), which are dedicated infrastructure platforms.
    Apple has the Apple Push Notification Service and Windows has the Windows Notification
    Service, for instance. Notification Hubs removes all the complexity that comes
    with calling the different PNSes manually in your applications because it offers
    platform independency by offering a single API, massive scaling, various delivery
    patterns, rich telemetry, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notification Hubs offers the following tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Free**: This offers a maximum of 1 million push messages per month and 100
    namespaces with 500 active devices per namespace and total 100 hubs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basic**: In addition to the Free tier, the Basic tier offers a maximum of
    10 million push messages per month and 100 namespaces with 200,000 active devices
    per namespace. SLA is covered for this plan, and it also offers limited telemetry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard**: In addition to the Basic tier, the Standard tier offers a maximum
    of 10 million push messages per month, unlimited namespaces with 10,000,000 active
    devices per namespace. It also offers rich telemetry, scheduled push capabilities,
    bulk import, and multitenancy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing an effective messaging architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure offers various features and capabilities in order to design and implement
    messaging solutions. In order to create successful application and solution architectures
    on the Azure platform, an effective messaging architecture is key. This will result
    in robust solutions and applications, that can fully benefit from the scaling
    capabilities that the Azure platform has to offer. It will also result in high
    performance for your applications and decoupled applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this book, multiple Azure resources are described and you should
    know by now what each resource is capable of. In the following section, some of
    them will be covered again from a messaging and integration perspective. This
    will give an overview and help you make the right decision when designing your
    messaging and IoT solutions on the Azure platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Functions versus Logic Apps**: You can think of Logic Apps as workflows
    that are triggered by an event and Azure Functions as code that is triggered by
    an event. So, when your solution requires custom code or custom transformations,
    choose Azure Functions. Use Logic Apps when your solution needs to connect to
    other SaaS solutions, such as Office 365, Azure Storage, and SalesForce. It offers
    a huge amount of connectors to connect using HTTPS out-of-the-box. Also, when
    a graphical editor is required, choose Logic Apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure IoT Hub versus Azure Event Hubs**: Azure IoT Hub offers two-way communication
    from devices to Azure and Azure to devices. It can process millions of events
    per second and supports multiple device protocols, such as MQTT, MQTT over WebSockets,
    AMQP, AMQP over WebSockets, and HTTPS, MQTT, MQTT over WebSockets, AMQP, AMQP
    over WebSockets and file upload. So, if your solution requires massive event processing
    and bi-directional communication, choose Azure IoT Hub. Event Hubs only allow
    one-way communication from devices to Azure. So, when your solution requires only
    data ingest, Event Hubs can be a more appropriate and cost-effective solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Service Bus versus Azure Storage Queues**: Azure Service Bus is a brokering
    message solution at enterprise scale. It offers more enterprise messaging capabilities,
    such as transactions and sessions. It also provides support for bigger messages.
    Azure Service Bus supports messages up to 1 MB for the premium tier. Azure Queue
    Storage supports messages up to 64 KB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the different messaging solutions that Azure provides
    for various types of applications and solutions. You have also learned, when to
    use the right messaging solutions in your applications. This concludes the last
    chapter of the design solutions for platform services objective.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at the Design for Operations Objective, which will be the
    last objective of this book. It will start with the different application monitoring
    and alerting strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Answer the following questions to test your knowledge of the information in
    this chapter. You can find the answers in the *Assessments* section at the end
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: You are designing a global mobile application for your organization that needs
    to process approximately 10 million push messages per month. Your administrators
    have a monitoring requirement. Is the Basic tier the appropriate tier for your
    application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are designing a serverless solution for your organization and need to call
    an external SDK in your solution for image processing. Is Azure Logic Apps the
    appropriate solution for this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are designing a messaging solution for your organization and have a requirement
    for messages that are approximately 1 MB big. Should you use Azure Storage Queue
    for this solution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check the following links for more information about the topics that
    were covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Notification Hubs Documentation**: [https://docs.microsoft.com/en-us/azure/notification-hubs/](https://docs.microsoft.com/en-us/azure/notification-hubs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Event Grid Documentation**: [https://docs.microsoft.com/en-us/azure/event-grid/](https://docs.microsoft.com/en-us/azure/event-grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Logic Apps Documentation**: [https://docs.microsoft.com/en-us/azure/logic-apps/](https://docs.microsoft.com/en-us/azure/logic-apps/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get started with Azure Queue storage using .NET**: [https://docs.microsoft.com/en-us/azure/storage/queues/storage-dotnet-how-to-use-queues](https://docs.microsoft.com/en-us/azure/storage/queues/storage-dotnet-how-to-use-queues)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add push notifications to your Android app**: [https://docs.microsoft.com/en-us/azure/app-service-mobile/app-service-mobile-android-get-started-push](https://docs.microsoft.com/en-us/azure/app-service-mobile/app-service-mobile-android-get-started-push)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add Push Notifications to your iOS App**: [https://docs.microsoft.com/en-us/azure/app-service-mobile/app-service-mobile-ios-get-started-push](https://docs.microsoft.com/en-us/azure/app-service-mobile/app-service-mobile-ios-get-started-push)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Logic Apps Documentation**: [https://docs.microsoft.com/en-us/azure/logic-apps/](https://docs.microsoft.com/en-us/azure/logic-apps/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Functions Documentation**: [https://docs.microsoft.com/en-us/azure/azure-functions](https://docs.microsoft.com/en-us/azure/azure-functions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
