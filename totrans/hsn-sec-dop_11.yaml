- en: Whitebox Testing Tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The testing plan gave an overview of the testing approach, risk assessment,
    and suggested testing tools. In this chapter, we will focus on whitebox testing
    tips.
  prefs: []
  type: TYPE_NORMAL
- en: Whitebox code review can be most effective to identify certain specific security
    issues, such as XXE, deserialization, and SQL injection. However, a whitebox review
    can be time-consuming if there are no proper tools or strategies. To have an effective
    whitebox test, we need to focus on specific coding patterns and high-risk modules.
    This chapter will give tips, tools, and key coding patterns to identify high-risk
    security issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Whitebox review preparation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bird's-eye view of the whole project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High-risk modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whitebox review checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Top common issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure coding patterns and keywords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case study—Java Struts security review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whitebox review preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whitebox testing or source code review can be most effective to identify hidden
    security issues in the source code. Before we begin our whitebox source code review,
    there are some preparation and input will help us to judge how (approaches, tools)
    and what (which modules) to do the security source code review.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list we may check before performing the source code review;
    take a look at this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Whitebox testing input** | **Considerations** |'
  prefs: []
  type: TYPE_TB
- en: '| Source code |'
  prefs: []
  type: TYPE_TB
- en: Do we need a full buildable source code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the source code include related import modules or headers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These dependency source codes will help when we would like to trace the definition
    of certain APIs. However, if the whole source code is not available, it may require
    reverse engineering.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Threat-modeling documents | The threat-modeling provides a good reference
    to identify the high-risk modules and interfaces that we should focus on. |'
  prefs: []
  type: TYPE_TB
- en: '| Architecture and design documents | The architecture and the design documents
    give us a good view of the design flow and the relationships of modules. |'
  prefs: []
  type: TYPE_TB
- en: '| Automated static code analysis results | Before we do a whitebox review,
    it''s a good idea to perform an automated security code scan first. The scanning
    result will not only make things easier, but it also gives us a hint regarding
    which parts we should focus on. |'
  prefs: []
  type: TYPE_TB
- en: '| Application-related configuration | Some security frameworks may define the
    security policies in configurations that should also be reviewed. For example,
    the `web.xml` file in Spring MVC or the Spring Security framework is very critical
    to the access control. |'
  prefs: []
  type: TYPE_TB
- en: '| Communication interface or ports | The purpose of listing external API interfaces
    and communication ports is to understand how they interact with external input
    from an untrusted source, insecure communication protocols, or mistakenly exposed
    APIs. |'
  prefs: []
  type: TYPE_TB
- en: 'For some external dependencies or third-party components, there will be cases
    that we would like to do the certain analysis of the components to identify if
    there is no backdoor, weak encryption, hard or coded passwords without the availability
    of source code. This will require reverse engineering and dynamic run-time analysis.
    This table provides some of the tools for further reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Description** | **Tools** |'
  prefs: []
  type: TYPE_TB
- en: '| Cuckoo | Cuckoo Sandbox is an open source virtualized environment to do the
    static and dynamic analysis of any binary files. For more information refer to [https://cuckoosandbox.org](https://cuckoosandbox.org).
    |'
  prefs: []
  type: TYPE_TB
- en: '| REMnux | REMnux includes lots of Linux toolkits for reverse engineering.
    For more information refer to [https://remnux.org/](https://remnux.org/). |'
  prefs: []
  type: TYPE_TB
- en: Viewing the whole project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The top-down approach means we use the source code analysis tool to view programming
    flow diagrams, such as a class diagram, a call graph, or the dependency graph.
    The following table lists some recommended tools that will help you to analyze
    the source code more easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tools** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Doxygen | It can generate documentation from the source code and also automatically
    visualize the relationships between modules, dependency graphs, and inheritance
    diagrams, by using the dot tool from Graphviz. Refer to the website at [www.doxygen.org](http://www.doxygen.org).To
    be able to generate documents from the source code, it requires proper comments
    and tags in the source code. Here are some tips that may be worth reading. Bear
    in mind that the generation of documents by doxygen can take a long time. Don''t
    tie the doxygen to parts of the compiler jobs. Check out the following links for
    more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.rosettacommons.org/docs/latest/development_documentation/tutorials/doxygen-tips](https://www.rosettacommons.org/docs/latest/development_documentation/tutorials/doxygen-tips).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.stack.nl/~dimitri/doxygen/manual/commands.html](http://www.stack.nl/~dimitri/doxygen/manual/commands.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Graphviz | It''s not a code analysis tool, but it helps doxygen to generate
    diagrams. For more information, refer to [www.graphviz.org/Download.php](http://www.graphviz.org/Download.php).
    |'
  prefs: []
  type: TYPE_TB
- en: '| HTML Help Workshop | It''s used to transform HTML files that are generated
    by doxygen to CHM documents. Check out [https://msdn.microsoft.com/en-us/library/windows/desktop/ms669985(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/windows/desktop/ms669985(v=vs.85).aspx).
    |'
  prefs: []
  type: TYPE_TB
- en: '| phpDocumentor  | If the programming language of the project is PHP, the phpDocumentor
    will do a good job to generate the API documents and also the class inheritance
    diagram directly from the PHP source code. Check out [https://www.phpdoc.org/](https://www.phpdoc.org/).
    |'
  prefs: []
  type: TYPE_TB
- en: '| Natural docs | It supports over 20 programming languages and allows developers
    to document the source code in a very straightforward way. Just bear in mind that
    the source document still requires the development team to comment the source
    code properly. Check out [http://www.naturaldocs.org/](http://www.naturaldocs.org/). Here
    is an example of the comments in the source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Pandoc | It''s a universal document format converter. Check out the following
    link for for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://pandoc.org/try/](http://pandoc.org/try/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Sphinx  | It''s mainly for Python documentation. Check out [http://www.sphinx-doc.org/](http://www.sphinx-doc.org/).
    |'
  prefs: []
  type: TYPE_TB
- en: In summary, to generate the documents from the source code directly, we will
    use the following—natural docs and doxygen for general programming languages,
    phpDocumentor for PHP, and Sphinx for Python. These document generators are not
    magic. If the development team doesn't follow certain coding comment practices,
    the generated information will also be limited. For the whitebox review, we use
    the source code document generator to identify the security issues more efficiently.
    However, if the generated documents don't help a lot in that way, move on to the
    following review approaches. Consider the following sections carefully.
  prefs: []
  type: TYPE_NORMAL
- en: High-risk module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have a good view of the whole project, we will need to identify those
    modules or functions that need further manual code review. We don't just do a
    manual code review with high-risk modules; we do automated code scanning for all
    the modules, and we do a further manual code review for those high-risk modules
    with potentially hidden security issues that may not be easily identified by automation
    scanning tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we are identifying high-risk modules to prioritize the whitebox source
    code review modules, try to think like a hacker. *Which modules will interest
    a hacker?* *What information can be most valuable to a hacker?* *What is the weakest
    link out of all the applications?* The following table lists typical high-risk
    modules that should be considered for further whitebox review:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **High-risk modules** | **Business functions** |'
  prefs: []
  type: TYPE_TB
- en: '| Authentication |'
  prefs: []
  type: TYPE_TB
- en: Accounts registration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Login and CAPTCHA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password recovery or reset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity and password storage and access control.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account lockout control after multiple failures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Authorization |'
  prefs: []
  type: TYPE_TB
- en: Sensitive resource access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administration management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Administrativeconfiguration | There are two kinds of review in configuration.
    One is the configuration values, and the other is how the application installs
    or updates the configuration. Generally, there are web, database, and service
    configuration needs to pay attention to. |'
  prefs: []
  type: TYPE_TB
- en: '| Finance |'
  prefs: []
  type: TYPE_TB
- en: Payment functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order and shopping carts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| File handling |'
  prefs: []
  type: TYPE_TB
- en: File upload.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File download.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File handling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Database |'
  prefs: []
  type: TYPE_TB
- en: Database query operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database create, add, update, and delete options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| API interface |'
  prefs: []
  type: TYPE_TB
- en: Restful API interfaces or other communication interfaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party integration interfaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Legacy |'
  prefs: []
  type: TYPE_TB
- en: Modules that don't support secure communication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules that may still use a weak encryption algorithm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses of banned or dangerous APIs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Encryption |'
  prefs: []
  type: TYPE_TB
- en: Uses of banned encryption algorithms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard-coded sensitive information or comments in the source code during development,
    such as IP, email, password, or hidden hotkey.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Whitebox review checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's suggested to have a checklist to do the whitebox review. A security checklist
    during a whitebox source code review can help the team decide what it should focus
    on. A typical security checklist for a code review may include critical security
    controls, such as authentication, data validation, authorization, session management,
    error handling, cryptography, logging, security configuration, administration
    functions, payment, money-related functions, and the handling of private data.
  prefs: []
  type: TYPE_NORMAL
- en: The reference sources of the security checklist can be from industry best practices
    or historical projects experiences. The contents of the checklist can be different
    based on the objective of the review.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Category of security checklist** | **Objectives and references** |'
  prefs: []
  type: TYPE_TB
- en: '| General security code review checklist | The objective is to provide the
    project team with a security code review checklist template. The project team
    may further add or customize the list based on the project profile.The following
    are the industry references links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*OWASP Secure Coding Practices* at [https://www.owasp.org/index.php/OWASP_Secure_Coding_Practices_-_Quick_Reference_Guide](https://www.owasp.org/index.php/OWASP_Secure_Coding_Practices_-_Quick_Reference_Guide).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OWASP Code Review Guide* at [https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project](https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Top common issues | An ideal top-common-issues checklist is summarized based
    on historical project records, programming languages, or types of projects. If
    there is not enough project data to make the list, refer to the CWE or OWASP.The
    following are the industry references links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*CWE Top 25 Most Dangerous Software Errors* at [http://cwe.mitre.org/top25/](http://cwe.mitre.org/top25/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*OWASP Top Ten Project* at](http://cwe.mitre.org/top25/) [https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)[.](http://cwe.mitre.org/top25/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Specific security issues (struts, deserialization) | The objective is to
    focus on the security review of a specific security issue. There are some circumstances
    that we may find these kinds of security reviews helpful. The attacks again Java
    Struts framework are happening, and the team may want to check whether the struts-related
    implementation is vulnerable. One major security issue has been identified in
    project A, and the organization would like to know whether other projects also
    have a similar security issue. The driver to check for the specific security issue
    may be caused by the recently released CVE or the major security events news or
    one security issue reported by customers, and we would like to check whether all
    other projects have the same issue. Here is a list of examples in this category:'
  prefs: []
  type: TYPE_NORMAL
- en: Struts security issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java deserialization security issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST API security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Top common issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A top-common-issues checklist can be very effective for a project team to decide
    what to focus on during secure code review. To build a top-common-security checklist,
    it's suggested to refer to the CWE Top 25\. The security team and the project
    team may take the CWE Top 25 basis and in-house top security issues, based on
    historical project data, to reach a consensus of the top five security issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize in-house top security issues is critical; it''s because the CWE
    Top 25 may not be exactly the same for in-house projects, due to the business
    background, technology stacks, and the implementation. Once an in-house top-security-issue
    list is identified, it should also be listed with suggested mitigation approaches.
    Refer to the following table for what it may look like. The purpose of the table
    is to give a sample that you may also define the one fits your organization not
    just copy the whole list from CWE Top 25. Be aware that the following is just
    an example, not a comprehensive list. Let''s take a look at the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Example of top issues** | **Mitigation approaches for the top security
    issues** |'
  prefs: []
  type: TYPE_TB
- en: '| CWE-89 SQL injection | A SQL injection can be detected effectively by tools
    for specific source code patterns. Focus on those SQL statements without using
    the prepared statement or the uses of `$` as SQL parameters in iBATIS framework.
    |'
  prefs: []
  type: TYPE_TB
- en: '| CWE-78 OS command injection | Due to the fact that the code-scanning tool
    can detect the OS command injection issue, the team decides to list those high-risk
    APIs that may result in command injection, and also develop a tool to do the source
    code search. |'
  prefs: []
  type: TYPE_TB
- en: '| CWE-120 buffer overflow | Based on historical records, buffer overflow problems
    were one of the common issues. The team further identifies the common APIs that
    may cause the buffer overflow. Take C/C++ as an example listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`strcpy`, `strncpy_s`, `strncpy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strncat`, `strcat`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sprint`, `snprintf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`memcpy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`memmove_s`, `memset`, `memset_s`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scanf_s`, `gets`, `vscanf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| CWE-79 XSS | The team also identified that XSS was one of the top issues.
    To review the XSS issue, the team decided to list all potential APIs that may
    lead to XSS. Here are some of the examples—in JS/JSP/HTML, look for the following
    related functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`document.location`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`document.URL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`document.write`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`document.open`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eval`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Java, review the parameters for the following API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Request.getParameter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`innerHTML.innerText`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getAttribute`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getHeader`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getServerName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| CWE-306 missing authentication for critical function | A missing authentication
    for a specific URL or resource can be a common security issue that is difficult
    to detect with any tool. Which URLs can be visited by visitors without authentication,
    and which URLs need authentication are highly related to business logic. This
    kind of security issue is also difficult to be identified by a whitebox source
    code review. Based on historical project records, here are some tips for Java
    source patterns of the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: The uses of partial URL match API to determine the need for authentication,
    such as `StartsWith` and `EndsWith`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No path canonicalization before validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No data normalization before validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Secure coding patterns and keywords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The objective of a source code keyword or a specific patterns-based search technique
    is not to replace any other automated code-scanning tools. It's to support both
    the whitebox review and automated code-scanning tools by searching potentially
    high-risk strings. The security team may prepare or define a set of keywords or
    regular expression strings that can lead to security issues. Once the project
    team has a set of search strings, it may use any search tool, such as **GREP**,
    to do the search, and analyze the search results. This kind of search can be done
    with partial source code, and is programming-language independent. It's simple
    to search for a specific issue, as long as we have well-defined search strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a general process of this kind of whitebox review
    technique:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here is an example of how to search code for potential security risks, based
    on specific patterns or keywords. You may also refer to the *OWASP Code Review
    Guide 2.0, Appendix—Crawling* *Code *for further information and other programming
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a lok at the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Category of security issues** | **Java code patterns/keyword examples**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Command injection | `Runtime.exec`, `ProcessBuilder` |'
  prefs: []
  type: TYPE_TB
- en: '| Buffer overflow risks | `strcpy`, `strcat`, `sprint`, `sscanf`, `vscanf`,
    `gets` |'
  prefs: []
  type: TYPE_TB
- en: '| XML injection | `SAXParser`, `DocumentBuilderFactory`, `BeanReader` , `XmlReader`,
    `DOMParser`, `SAXReader`, `XMLInputFactory` |'
  prefs: []
  type: TYPE_TB
- en: '| Sensitive information |'
  prefs: []
  type: TYPE_TB
- en: Backdoor, password, admin, root
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cipher, `getInstance`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MessageDigest.getInstance`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encode, ciphers, shareKey, token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL, Email, IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| HTTPS **man-in-the -middle** (**MITM**) |'
  prefs: []
  type: TYPE_TB
- en: '`ALLOW_ALL_HOSTNAME_VERIFIER`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X509Certificate`, `X509TrustManager`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getAcceptedIssuers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Insecure cryptography |'
  prefs: []
  type: TYPE_TB
- en: RC4, SSL, AES, DEC, ECB, MD5, SHA1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Java.util.Random`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Cipher.newInstance("DES`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Cipher.getInstance("ECB`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| XSS |'
  prefs: []
  type: TYPE_TB
- en: '`document.location`, `document.URL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`document.referrer`, `document.write`, `document.print`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`document.body.innerHTML`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`window.location`, `window.execScript`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`window.setTimeout`, `window.open`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`request.getParameter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| De-serialization issue |'
  prefs: []
  type: TYPE_TB
- en: '`XMLDecoder`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`XStream`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readObject`, `readResolve`, `readExternal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| User data input |'
  prefs: []
  type: TYPE_TB
- en: '`getParameter`, `getQueryString`, `getRequest`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getCookies`, `getInputStream`, `getReader`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getInputSteam`, `getMethod`, `getReader`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getRemoteUser`, `getServerName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the security code-scanning tools in this category that can do source
    code, based on regular expression patterns. Normally, these tools will also have
    pre-defined vulnerable source code patterns and security signatures. It''s suggested
    to review those security signatures and customize those regular expressions or
    strings to fit your project environment. Take a look at this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tools** | **References** |'
  prefs: []
  type: TYPE_TB
- en: '| drek |'
  prefs: []
  type: TYPE_TB
- en: '**Tool**: [https://github.com/chrisallenlane/drek](https://github.com/chrisallenlane/drek)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signature**: [https://github.com/chrisallenlane/drek-signatures/tree/master/signatures](https://github.com/chrisallenlane/drek-signatures/tree/master/signatures) 
    (refer to the `*.yml`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Graudit     |'
  prefs: []
  type: TYPE_TB
- en: '**Tool**: [https://github.com/wireghoul/graudit](https://github.com/wireghoul/graudit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signature**: [https://github.com/wireghoul/graudit/tree/master/signatures](https://github.com/wireghoul/graudit/tree/master/signatures) (refer
    to the `*.db`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **VisualCodeGrepper** (**VCG**) |'
  prefs: []
  type: TYPE_TB
- en: '**Tool**: [https://github.com/nccgroup/VCG](https://github.com/nccgroup/VCG)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signature**: [https://github.com/nccgroup/VCG/tree/master/VisualCodeGrepper/bin/Release](https://github.com/nccgroup/VCG/tree/master/VisualCodeGrepper/bin/Release) (refer
    to the `*.conf`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| CRASS Grep IT  | This tool is recommended because it requires no dependencies.
    It just needs one shell script to execute.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tool**: [https://github.com/floyd-fuh/crass/blob/master/grep-it.sh](https://github.com/floyd-fuh/crass/blob/master/grep-it.sh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signature**: [https://github.com/floyd-fuh/crass/blob/master/grep-it.sh](https://github.com/floyd-fuh/crass/blob/master/grep-it.sh) (refer
    to the `search "......"`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: These are all static code analysis tools that use a GREP-like search to identify
    vulnerable source code. This kind of source code review approach best works for
    banned APIs, dangerous APIs, weak encryption algorithm, or hard-coded secrets.
    It's flexible, so you can scan parts of source code without the need for the while
    buildable project, and it can be used to scan multiple programming languages,
    as long as the security code patterns signatures are properly defined.
  prefs: []
  type: TYPE_NORMAL
- en: Case study – Java struts security review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Susan, who is the CTO of a software company, seeks security team advice on struts.
    Susan understands that the security review of struts requires not only the domain
    knowledge of struts but also threats knowledge specific to struts. To identify
    the struts security requires automated code scanning, whitebox review, secure
    configuration review, and also blackbox with the malicious payload, the security
    team proposed the following security review approaches with industry practices
    resources. The purpose of the case study is not to give a comprehensive struts
    security review guide but to demonstrate how to proceed security whitebox review
    which is framework specific to Struts security.
  prefs: []
  type: TYPE_NORMAL
- en: Susan and the security team discuss possible review approaches and also deliver
    a struts security checklist for the project team as a code review baseline.
  prefs: []
  type: TYPE_NORMAL
- en: Struts security review approaches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table gives an example of the key review approaches for the Java
    struts frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Struts security review approaches** | **Objective and references** |'
  prefs: []
  type: TYPE_TB
- en: '| Struts security check | The security checklist is used for developers to
    do struts secure implementation and review. The struts official site provides
    a good reference. Check out for the link at [https://struts.apache.org/security/](https://struts.apache.org/security/).
    |'
  prefs: []
  type: TYPE_TB
- en: '| Struts potential risks strings | In addition to code scanning, we may also
    search for specific strings that can lead to struts security. For struts security,
    we focus more on the secure configuration, `struts.xml`, instead of source code.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Struts exploit scripts | To test each vulnerability of struts, it''s suggested
    to refer to the published exploit scripts. Refer to [https://www.exploit-db.com/search/?action=search&q=struts](https://www.exploit-db.com/search/?action=search&q=struts).
    |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP dependency | Most of the known struts vulnerabilities were fixed in
    the latest releases. The OWASP dependency scanning tool can help to detect the
    uses of old versions of struts. Take a look at [https://www.owasp.org/index.php/OWASP_Dependency_Check](https://www.owasp.org/index.php/OWASP_Dependency_Check).
    |'
  prefs: []
  type: TYPE_TB
- en: Struts security checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The security checklist will remind the team what it should focus on during
    the code review. Specifically, for the struts framework security, the struts security
    implementation checklist is summarized in the following points. The struts security
    reference source is at link [https://struts.apache.org/security/](https://struts.apache.org/security/):'
  prefs: []
  type: TYPE_NORMAL
- en: The **Config Browser Plugin** should be used only in the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group actions in one namespace by security level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put all the JSP files under `WEB-INF` to avoid direct access of JSP files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable the development mode `` `devMode` ``
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the logging level in the production environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UTF-8 encoding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate the data input parameters for `getText()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't use a raw `${} EL` expression directly for the input parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable the static method access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable the dynamic method invocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Struts security strings search in struts.xml and API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This list of keywords directly related to the struts security issues will help
    us to use a search tool (such as drek or Graudit) to locate and to identify the
    issue; take a look at the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Struts security** | **Keyword search in bold** |'
  prefs: []
  type: TYPE_TB
- en: '| Development mode | `struts.devMode`.**Review tips**: The suggested value
    should be false in `struts.xml`. |'
  prefs: []
  type: TYPE_TB
- en: '| Dynamic method invocation | `struts.enable.DynamicMethodInvocation`.**Review
    tips**: The suggested value should be false in `struts.xml`. |'
  prefs: []
  type: TYPE_TB
- en: '| OGNL static method access | `struts.ognl.allowStaticMethodAccess`.**Review
    tips**: The suggested value should be false in `struts.xml`. |'
  prefs: []
  type: TYPE_TB
- en: '| File upload | `Allowedtypes`.`maximumSize`.`allowedExtensions`.**Review tips**:
    These parameters should be defined to limit the file upload types, size, and extensions
    in `struts.xml`. Check out the link at [https://struts.apache.org/core-developers/file-upload.html](https://struts.apache.org/core-developers/file-upload.html).
    |'
  prefs: []
  type: TYPE_TB
- en: '| Data input injection | `findValue`, `getValue`, `setValue`.**Review tips**:
    Review the external input parameters of these APIs to avoid OGNL injection attacks
    in `struts.xml`. |'
  prefs: []
  type: TYPE_TB
- en: '| Validation | `validate`.**Review tips**: The secure value of validating should
    be true in `struts.xml`. |'
  prefs: []
  type: TYPE_TB
- en: '| Data input injection | `request.getParameter`.**Review tips**: Review the
    external input parameters of these APIs to avoid potential injection attacks.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Class loader manipulation | `getClass`.**Review tips**: Review the external
    input parameters of these APIs to avoid potential injection attacks. |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed the practices of the whitebox review. To have an effective whitebox
    review, there is some preparation and input needed, such as the source code, threat-modeling
    analysis, architecture and design documents, automated static code analysis report,
    configurations, and the list of communication interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: There are several approaches to proceed the whitebox source code review. We
    can use doxygen and naturaldocs to generate documents and flow diagrams from the
    source code. It will help us to gain an overall understanding of the source code.
    Then, we identify the high-risk modules to do a manual code inspection. The high-risk
    modules are those that handle sensitive information, security controls, or administrative
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: During the whitebox review, it's necessary to build a checklist. This comprises
    some of the recommended industry practices, such as OWASP Secure Coding Practices,
    OWASP Code Review Guide, CWE Top 25, and OWASP Top 10\. Based on these practices,
    it's suggested an organization may build its own top common security issues with
    mitigation approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Then, last but not least, we discussed the secure coding patterns and keywords.
    We listed some common Java code patterns for the security issues and introduced
    some tools, such as drek, Graudit, VCG, and CRASS Grep IT.
  prefs: []
  type: TYPE_NORMAL
- en: The case study gave a security code review example specific to the struts framework.
    In this case, the team applied some of the review approaches and also defined
    a struts-related security checklist.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore more security-testing toolkits in each
    security-testing domain.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following is not the input of whitebox review?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Source code
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Threat-modeling documents
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Automated static code analysis results
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Antivirus scanning results
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the tools doxygen and naturaldocs used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating documents directly from source code
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Static code scanning
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamic code scanning
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reverse engineering
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following are high-risk modules?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: API interfaces
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following APIs is not related to buffer overflow?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: strcpy
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: strncat
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: memcpy
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: fwrite
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What can cause missing authentication?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The uses of partial URL match API to determine the need for authentication such
    as StartsWith and EndsWith
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: No path canonicalization before validation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: No data normalization before validation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider reading the following links for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**US CERT WhiteBox Testing**: [https://www.us-cert.gov/bsi/articles/best-practices/white-box-testing/white-box-testing](https://www.us-cert.gov/bsi/articles/best-practices/white-box-testing/white-box-testing).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security Code Scan – static code analyzer for .NET**: [https://security-code-scan.github.io/](https://security-code-scan.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SEI CERT Coding Standards**: [https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards](https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Security Bugs**: [http://find-sec-bugs.github.io/](http://find-sec-bugs.github.io/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DevBug is an on-line PHP secure code analysis (SCA)**: [http://www.devbug.co.uk/](http://www.devbug.co.uk/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MITRE Secure Code Review**: [https://www.mitre.org/publications/systems-engineering-guide/enterprise-engineering/systems-engineering-for-mission-assurance/secure-code-review](https://www.mitre.org/publications/systems-engineering-guide/enterprise-engineering/systems-engineering-for-mission-assurance/secure-code-review).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MITRE Cyber Threat Susceptibility Assessment**: [https://www.mitre.org/publications/systems-engineering-guide/enterprise-engineering/systems-engineering-for-mission-assurance/cyber-threat-susceptibility-assessment](https://www.mitre.org/publications/systems-engineering-guide/enterprise-engineering/systems-engineering-for-mission-assurance/cyber-threat-susceptibility-assessment).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PCI Prioritized Approach Tool**: [https://www.pcisecuritystandards.org/documents/Prioritized-Approach-v3_2.xlsx](https://www.pcisecuritystandards.org/documents/Prioritized-Approach-v3_2.xlsx).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MSND How to Perform a Security Code Review for Managed Code**: [https://cwiki.apache.org/confluence/display/WW/Security+Bulletins](https://cwiki.apache.org/confluence/display/WW/Security+Bulletins).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Struts CVE lists**: [https://www.cvedetails.com/vulnerability-list/vendor_id-45/product_id-6117/Apache-Struts.html](https://www.cvedetails.com/vulnerability-list/vendor_id-45/product_id-6117/Apache-Struts.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Struts File Upload**: [https://struts.apache.org/core-developers/file-upload.html](https://struts.apache.org/core-developers/file-upload.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
