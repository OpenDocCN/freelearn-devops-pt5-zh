["```\nkubectl config view \\\n    -o jsonpath='{.clusters[?(@.name==\"minikube\")].cluster.server}'  \n```", "```\nhttps://192.168.99.105:8443\n```", "```\nkubectl config view \\\n -o jsonpath='{.clusters[?(@.name==\"minikube\")].cluster.certif\nicate-authority}'  \n```", "```\n/Users/vfarcic/.minikube/ca.crt  \n```", "```\ncd k8s-specs\n\ngit pull\n\nminikube start --vm-driver virtualbox \nkubectl config current-context  \n```", "```\nkubectl create \\\n -f auth/go-demo-2.yml \\\n --record --save-config  \n```", "```\nopenssl version  \n```", "```\nmkdir keys\n\nopenssl genrsa \\\n -out keys/jdoe.key 2048\n```", "```\nopenssl req -new \\\n    -key keys/jdoe.key \\\n    -out keys/jdoe.csr \\\n    -subj \"/CN=jdoe/O=devs\"\n```", "```\nls -1 ~/.minikube/ca.*  \n```", "```\n/Users/vfarcic/.minikube/ca.crt\n/Users/vfarcic/.minikube/ca.key\n/Users/vfarcic/.minikube/ca.pem  \n```", "```\nopenssl x509 -req \\\n    -in keys/jdoe.csr \\\n    -CA ~/.minikube/ca.crt \\\n    -CAkey ~/.minikube/ca.key \\\n    -CAcreateserial \\\n    -out keys/jdoe.crt \\\n    -days 365\n```", "```\ncp ~/.minikube/ca.crt keys/ca.crt  \n```", "```\nls -1 keys  \n```", "```\nca.crt\njdoe.crt\njdoe.csr\njdoe.key  \n```", "```\nSERVER=$(kubectl config view \\\n -o jsonpath='{.clusters[?(@.name==\"minikube\")].cluster.server\n}')\n\necho $SERVER  \n```", "```\nhttps://192.168.99.106:8443  \n```", "```\nkubectl config set-cluster jdoe \\\n    --certificate-authority \\\n    keys/ca.crt \\\n    --server $SERVER\n```", "```\nkubectl config set-credentials jdoe \\\n --client-certificate keys/jdoe.crt \\\n --client-key keys/jdoe.key  \n```", "```\nkubectl config set-context jdoe \\\n --cluster jdoe \\\n --user jdoe\n\nkubectl config use-context jdoe  \n```", "```\nkubectl config view  \n```", "```\n...\nclusters:\n- cluster:\n certificate-authority: /Users/vfarcic/IdeaProjects/k8s-specs/\nkeys/ca.crt\n server: https://192.168.99.106:8443\n name: jdoe\n...\ncontexts:\n- context:\n cluster: jdoe\n user: jdoe\n name: jdoe\n...\ncurrent-context: jdoe\n...\nusers:\n- name: jdoe\n user:\n client-certificate: /Users/vfarcic/IdeaProjects/k8s-specs/key\ns/jdoe.crt\n client-key: /Users/vfarcic/IdeaProjects/k8s-specs/keys/jdoe.k\ney\n...  \n```", "```\nkubectl get pods  \n```", "```\nError from server (Forbidden): pods is forbidden: User \"jdoe\" can\nnot list pods in the namespace \"default\"\n```", "```\nkubectl get all  \n```", "```\nkubectl config use-context minikube\n\nkubectl get all  \n```", "```\nkubectl auth can-i get pods --as jdoe  \n```", "```\nkubectl get roles  \n```", "```\nkubectl get clusterroles  \n```", "```\nNAME          AGE\nadmin         1h\ncluster-admin 1h\nedit          1h\nview          1h  \n```", "```\nkubectl describe clusterrole view  \n```", "```\nName:        view\nLabels:      kubernetes.io/bootstrapping=rbac-defaults\nAnnotations: rbac.authorization.kubernetes.io/autoupdate=true\nPolicyRule:\n Resources              Non-Resource URLs Resource Names Verbs\n ---------              ----------------- -------------- -----\n bindings               []                []             [get li\nst watch]\n configmaps             []                []             [get li\nst watch]\n cronjobs.batch         []                []             [get li\nst watch]\n daemonsets.extensions  []                []             [get li\nst watch]\n deployments.apps       []                []             [get li\nst watch]\n ...  \n```", "```\nkubectl describe clusterrole edit  \n```", "```\n...\npods             [] [] [create delete deletecollection get list p\natch update watch]\npods/attach      [] [] [create delete deletecollection get list p\natch update watch]\npods/exec        [] [] [create delete deletecollection get list p\natch update watch]\npods/log         [] [] [get list watch]\npods/portforward [] [] [create delete deletecollection get list p\natch update watch]\npods/proxy       [] [] [create delete deletecollection get list p\natch update watch]\npods/status      [] [] [get list watch]\n...  \n```", "```\nkubectl describe clusterrole admin  \n```", "```\n...\nlocalsubjectaccessreviews.authorization.k8s.io [] [] [create]\nrolebindings.rbac.authorization.k8s.io         [] [] [create dele\nte deletecollection get list patch update watch]\nroles.rbac.authorization.k8s.io                [] [] [create dele\nte deletecollection get list patch update watch]\n...  \n```", "```\nkubectl describe clusterrole \\\n cluster-admin  \n```", "```\nName:        cluster-admin\nLabels:      kubernetes.io/bootstrapping=rbac-defaults\nAnnotations: rbac.authorization.kubernetes.io/autoupdate=true\nPolicyRule:\n Resources Non-Resource URLs Resource Names Verbs\n --------- ----------------- -------------- -----\n [*]               []             [*]\n *.*       []                []             [*] \n```", "```\nkubectl auth can-i \"*\" \"*\"  \n```", "```\nkubectl create rolebinding jdoe \\\n --clusterrole view \\\n --user jdoe \\\n --namespace default \\\n --save-config\n\nkubectl get rolebindings  \n```", "```\nkubectl describe rolebinding jdoe\nName:        jdoe\nLabels:      <none>\nAnnotations: <none>\nRole:\n Kind: ClusterRole\n Name: view\nSubjects:\n Kind Name Namespace\n ---- ---- ---------\n User jdoe  \n```", "```\nkubectl --namespace kube-system \\\n describe rolebinding jdoe  \n```", "```\nError from server (NotFound): rolebindings.rbac.authorization.k8s\n.io \"jdoe\" not found  \n```", "```\nkubectl auth can-i get pods \\\n --as jdoe\n\nkubectl auth can-i get pods \\\n --as jdoe --all-namespaces  \n```", "```\nkubectl delete rolebinding jdoe  \n```", "```\ncat auth/crb-view.yml  \n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n name: view\nsubjects:\n- kind: User\n name: jdoe\n apiGroup: rbac.authorization.k8s.io\nroleRef:\n kind: ClusterRole\n name: view\n apiGroup: rbac.authorization.k8s.io  \n```", "```\nkubectl create -f auth/crb-view.yml \\\n --record --save-config\n```", "```\nkubectl describe clusterrolebinding \\\n    view\n```", "```\nName:         view\nLabels:       <none>\nAnnotations:  <none>\nRole:\n Kind:  ClusterRole\n Name:  view\nSubjects:\n Kind  Name  Namespace\n ----  ----  ---------\n User  jdoe  \n```", "```\nkubectl auth can-i get pods \\\n --as jdoe --all-namespaces\n```", "```\ncat auth/rb-dev.yml  \n```", "```\napiVersion: v1\nkind: Namespace\nmetadata:\n name: dev\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n name: dev\n namespace: dev\nsubjects:\n- kind: User\n name: jdoe\n apiGroup: rbac.authorization.k8s.io\nroleRef:\n kind: ClusterRole\n name: admin\n apiGroup: rbac.authorization.k8s.io  \n```", "```\nubectl create -f auth/rb-dev.yml \\\n    --record --save-config  \n```", "```\nnamespace \"dev\" created\nrolebinding \"dev\" created  \n```", "```\nkubectl --namespace dev auth can-i \\\n create deployments --as jdoe\n\nkubectl --namespace dev auth can-i \\\n delete deployments --as jdoe\n```", "```\nkubectl --namespace dev auth can-i \\\n \"*\" \"*\" --as jdoe\n```", "```\ncat auth/rb-jdoe.yml\n```", "```\napiVersion: v1\nkind: Namespace\nmetadata:\n    name: jdoe\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n name: jdoe\n namespace: jdoe\nsubjects:\n- kind: User\n name: jdoe\n apiGroup: rbac.authorization.k8s.io\nroleRef:\n kind: ClusterRole\n name: cluster-admin\n apiGroup: rbac.authorization.k8s.io  \n```", "```\nkubectl create -f auth/rb-jdoe.yml \\\n --record --save-config\n```", "```\nkubectl --namespace jdoe auth can-i \\\n    \"*\" \"*\" --as jdoe\n```", "```\nkubectl describe clusterrole admin  \n```", "```\n...\npods             [] [] [create delete deletecollection get list p\natch update watch]\npods/attach      [] [] [create delete deletecollection get list p\natch update watch]\npods/exec        [] [] [create delete deletecollection get list p\natch update watch]\npods/log         [] [] [get list watch]\npods/portforward [] [] [create delete deletecollection get list p\natch update watch]\npods/proxy       [] [] [create delete deletecollection get list p\natch update watch]\npods/status      [] [] [get list watch]\n...  \n```", "```\ncat auth/crb-release-manager.yml  \n```", "```\n...\nrules:\n- resources: [\"pods\", \"pods/attach\", \"pods/exec\", \"pods/log\", \"po\nds/status\"]\n verbs: [\"*\"]\n apiGroups: [\"\"]\n- resources: [\"deployments\", \"replicasets\"]\n verbs: [\"create\", \"get\", \"list\", \"watch\"]\n apiGroups: [\"\", \"apps\", \"extensions\"]\n...  \n```", "```\nkubectl create \\\n -f auth/crb-release-manager.yml \\\n    --record --save-config\n```", "```\nkubectl describe \\\n clusterrole release-manager\n```", "```\nName:         release-manager\nLabels:       <none>\nAnnotations:  kubectl.kubernetes.io/last-applied-configuration={\"\napiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"\nmetadata\":{\"annotations\":{},\"name\":\"release-manager\",\"namespace\":\n\"\"},\"rules\":[{\"apiG...\n kubernetes.io/change-cause=kubectl create --filenam\ne=auth/crb-release-manager.yml --record=true --save-config=true\nPolicyRule:\n Resources              Non-Resource URLs Resource Names Verbs\n ---------              ----------------- -------------- -----\n deployments            []                []             [create \nget list update watch]\n deployments.apps       []                []             [create \nget list update watch]\n deployments.extensions []                []             [create \nget list update watch]\n pods                   []                []             [*]\n pods/attach            []                []             [*]\n pods/exec              []                []             [*]\n pods/log               []                []             [*]\n pods/status            []                []             [*]\n replicasets            []                []             [create \nget list update watch]\n replicasets.apps       []                []             [create \nget list update watch]\n replicasets.extensions []                []             [create \nget list update watch]  \n```", "```\nkubectl --namespace default auth \\\n can-i \"*\" pods --as jdoe\n```", "```\nkubectl --namespace default auth \\\n    can-i create deployments --as jdoe\n```", "```\nkubectl --namespace default auth can-i \\\n delete deployments --as jdoe\n```", "```\nkubectl config use-context jdoe  \n```", "```\nkubectl --namespace default \\\n run db --image mongo:3.3\n```", "```\nkubectl --namespace default \\\n    delete deployment db\n```", "```\nError from server (Forbidden): replicasets.extensions \"db-649df9d\n899\" is forbidden: User \"jdoe\" cannot delete replicasets.extensio\nns in the namespace \"default\"  \n```", "```\nkubectl config set-context jdoe \\\n    --cluster jdoe \\\n    --user jdoe \\\n    --namespace jdoe\n\nkubectl config use-context jdoe\n\nkubectl run db --image mongo:3.3  \n```", "```\nkubectl delete deployment db  \n```", "```\nkubectl create rolebinding mgandhi \\\n    --clusterrole=view \\\n    --user=mgandhi \\\n    --namespace=jdoe\n```", "```\nrolebinding \"mgandhi\" created  \n```", "```\nopenssl req -in keys/jdoe.csr \\\n    -noout -subject\n```", "```\nsubject=/CN=jdoe/O=devs  \n```", "```\ncat auth/groups.yml  \n```", "```\napiVersion: v1\nkind: Namespace\nmetadata:\n name: dev\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n name: dev\n namespace: dev\nsubjects:\n- kind: Group\n name: devs\n apiGroup: rbac.authorization.k8s.io\nroleRef:\n kind: ClusterRole\n name: admin\n apiGroup: rbac.authorization.k8s.io\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n name: view\nsubjects:\n- kind: Group\n name: devs\n apiGroup: rbac.authorization.k8s.io\nroleRef:\n kind: ClusterRole\n name: view\n apiGroup: rbac.authorization.k8s.io  \n```", "```\nkubectl config use-context minikube\n\nkubectl apply -f auth/groups.yml \\\n    --record\n```", "```\nnamespace \"dev\" configured\nrolebinding \"dev\" configured\nclusterrolebinding \"view\" configured  \n```", "```\nkubectl --namespace dev auth \\\n can-i create deployments --as jdoe\n```", "```\nkubectl config use-context jdoe\n\nkubectl --namespace dev \\\n    run new-db --image mongo:3.3\n```", "```\nminikube delete  \n```"]