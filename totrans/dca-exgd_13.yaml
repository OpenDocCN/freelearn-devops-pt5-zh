- en: Introduction to the Docker Enterprise Platform
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Enterprise 平台简介
- en: In the previous chapters, we talked about Docker's features and Docker environments.
    We introduced the concepts of containers and looked at how we can deploy applications
    to orchestrated environments. All the features we saw were based on Docker Community
    Edition. In this chapter, we will learn about all the various Docker editions
    and their differences before introducing the Docker Enterprise platform.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们讨论了 Docker 的功能和 Docker 环境。我们介绍了容器的概念，并探讨了如何将应用程序部署到协调的环境中。我们看到的所有功能都基于
    Docker Community Edition。在本章中，我们将学习所有不同的 Docker 版本及其差异，然后介绍 Docker Enterprise
    平台。
- en: In this chapter, we will introduce the different Docker editions and tools.
    We will also review the concept of **Container as a Service** (**CaaS**) and learn
    about what we need in these kinds of environments. Docker provides an enterprise-ready
    CaaS platform and we will review all of its components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍不同的 Docker 版本和工具。我们还将回顾**容器即服务**（**CaaS**）的概念，并了解在这种环境中我们需要什么。Docker
    提供了一个面向企业的 CaaS 平台，我们将回顾其所有组件。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Reviewing the Docker editions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾 Docker 版本
- en: Understanding CaaS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 CaaS
- en: The Docker Enterprise platform
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Enterprise 平台
- en: Planning your Docker Enterprise deployment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划您的 Docker Enterprise 部署
- en: Let's start this chapter by learning about all the different Docker editions
    and their specific features.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习所有不同的 Docker 版本及其具体功能开始本章内容。
- en: Reviewing the Docker editions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾 Docker 版本
- en: In this section, we will have a quick review of the different Docker editions.
    We have been using Docker Community in previous chapters, but now, it is time
    to learn about Docker Enterprise. This is because it is very important for the
    Docker Certified Associate exam. In fact, it could relate to more than 50% of
    the knowledge required for the exam because all of the concepts you'll be learning
    about will relate to this platform.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将快速回顾不同的 Docker 版本。我们在前几章中一直使用的是 Docker Community，但现在是时候了解 Docker Enterprise
    了。因为它对于 Docker Certified Associate 考试非常重要。实际上，它可能涉及超过 50% 的考试所需知识，因为你将学习的所有概念都将与这个平台相关。
- en: Docker Community is the Docker platform we use while developing container-based
    applications. It is free to use and is supported on GitHub ([https://github.com/docker/docker-ce](https://github.com/docker/docker-ce))
    and Docker Forums ([https://forums.docker.com/](https://forums.docker.com/)).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Community 是我们在开发基于容器的应用程序时使用的 Docker 平台。它是免费的，并在 GitHub 上提供支持 ([https://github.com/docker/docker-ce](https://github.com/docker/docker-ce))
    和 Docker 论坛 ([https://forums.docker.com/](https://forums.docker.com/))。
- en: Docker Enterprise is an enterprise-ready solution. Docker/Mirantis provides
    *24/7* support and is licensed by subscription.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Enterprise 是一个面向企业的解决方案。Docker/Mirantis 提供*24/7*的支持，并通过订阅授权。
- en: Docker Community
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Community
- en: 'When we talk about Docker Community Edition, also known as **docker-ce**, we
    are just referring to Docker Engine (daemon), although there are other community
    software products made by Docker''s team:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论 Docker Community Edition，通常称为**docker-ce**时，我们仅指 Docker 引擎（守护进程），尽管 Docker
    团队还开发了其他社区软件产品：
- en: '**Docker Toolbox**: This was the first approach available for Microsoft Windows
    and Apple Mac users. Before Windows containers, this was the only way of using
    Docker on Windows nodes. It provides a desktop environment with many tools and
    shortcuts for most components and actions.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Toolbox**：这是微软 Windows 和苹果 Mac 用户可用的第一个工具。在 Windows 容器出现之前，这是在 Windows
    节点上使用 Docker 的唯一方式。它提供了一个桌面环境，包含许多工具和快捷方式，用于大多数组件和操作。'
- en: '**Docker Machine**: Docker Machine allows us to provision Docker hosts. It
    comes with some predefined provisioners and we can extend this list with external
    binaries to deploy nodes with the most popular cloud providers and on-premises
    infrastructures.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Machine**：Docker Machine 允许我们配置 Docker 主机。它自带一些预定义的配置器，我们还可以通过外部二进制文件扩展这个列表，以便在最流行的云提供商和本地基础设施上部署节点。'
- en: '**Docker Desktop**: This was an evolution of the Docker Toolbox environment
    on Windows Professional environments. Developers were very happy with the experience
    they had with Docker Toolbox. In response, Docker created a desktop environment
    capable of launching a small Kubernetes environment, while also including application
    templates to help developers create simple applications with just a few mouse
    clicks.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Desktop**：这是在 Windows 专业版环境中 Docker Toolbox 环境的演进。开发者对使用 Docker Toolbox
    的体验非常满意。为了响应这一需求，Docker 创建了一个能够启动小型 Kubernetes 环境的桌面环境，同时还包含了应用模板，帮助开发者仅通过几次点击鼠标就能轻松创建简单的应用程序。'
- en: Docker Community Edition provides a complete Docker Engine platform. Hence,
    we can create a cluster with either Docker Swarm or Kubernetes. All Community
    Edition features have been covered in previous chapters – we have never talked
    about any Enterprise-specific integrations. Docker Swarm does not provide **role-based
    access control** (**RBAC**) for user management. We also have to provide a solution
    for publishing applications securely. Remember that Docker just provides a router
    mesh and host publishing features and that they are not secure. For many users,
    Docker Swarm, with a couple of tweaks, is more than enough. It is easy to learn
    and manage and also provides resilience and high availability for core components.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 社区版提供了一个完整的 Docker 引擎平台。因此，我们可以使用 Docker Swarm 或 Kubernetes 创建集群。所有社区版的功能在前几章中已经覆盖——我们从未讨论过任何企业版特有的集成。Docker
    Swarm 不提供**基于角色的访问控制**（**RBAC**）来管理用户。我们还必须提供一个安全发布应用程序的解决方案。请记住，Docker 仅提供路由网格和主机发布功能，它们并不安全。对于许多用户来说，Docker
    Swarm 经过一些调整后已经足够使用。它易于学习和管理，还为核心组件提供了弹性和高可用性。
- en: Kubernetes can be deployed on top of Docker Community Edition. We will just
    use Docker Engine as the runtime for the Kubernetes cluster. This is quite common
    as it's the most-used solution nowadays. Kubernetes provides a rich ecosystem
    and comes with some out-of-the-box features required for production. But, on the
    other hand, some details, such as networking, require third-party solutions. Kubernetes
    has a different approach to the world of containers. Docker follows the "*batteries
    included but interchangeable"* approach, providing everything required to work
    out of the box, although we can change most of its components. On the other hand,
    Kubernetes was made with the "*everything should be pluggable"* mindset. Kubernetes
    has a richer ecosystem because there are many solutions around its core pieces.
    These help it grow faster and bigger than Docker.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 可以部署在 Docker 社区版之上。我们将仅使用 Docker 引擎作为 Kubernetes 集群的运行时。这是目前最常见的解决方案，因为它是最常用的。Kubernetes
    提供了一个丰富的生态系统，并且带有一些开箱即用的生产所需功能。然而，另一方面，某些细节（如网络）则需要第三方解决方案。Kubernetes 对容器世界的处理方式与
    Docker 不同。Docker 遵循“*电池包含，但可互换*”的方式，提供了开箱即用的所有功能，尽管我们可以更改其中大部分组件。而 Kubernetes
    则采用了“*一切都应该是可插拔的*”的思维方式。Kubernetes 拥有更丰富的生态系统，因为在其核心组件周围有许多解决方案。这些帮助它比 Docker
    更快速、更多地发展。
- en: Docker Enterprise
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 企业版
- en: 'Docker Enterprise has everything that''s missing from Docker Swarm. It provides
    a full CaaS platform that''s based on two components: Docker **Universal Control
    Plane** (**UCP**) and **Docker Trusted Registry** (**DTR**). During the last European
    DockerCon, in December 2018, Docker Desktop Enterprise was announced and it was
    stated that it would include desktop functionality for developers. Docker Desktop
    Enterprise allows developers to create applications easily using Docker. They
    can also test their developed containers on Kubernetes locally or even choose
    which production environment they want to test in to ensure that their applications
    will run smoothly in production. Docker Desktop was created with developers in
    mind and Enterprise helps them avoid friction between development and production.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 企业版具备 Docker Swarm 所缺少的所有功能。它提供了一个完整的 CaaS 平台，基于两个组件：Docker **Universal
    Control Plane**（**UCP**）和 **Docker Trusted Registry**（**DTR**）。在 2018 年 12 月的欧洲
    DockerCon 上，Docker Desktop 企业版正式宣布，并表示它将为开发者提供桌面功能。Docker Desktop 企业版允许开发者轻松使用
    Docker 创建应用程序。他们还可以在本地测试已开发的容器，甚至可以选择在某个生产环境中进行测试，以确保他们的应用程序能够在生产环境中顺利运行。Docker
    Desktop 的创建专门为开发者考虑，而企业版则帮助他们减少开发与生产之间的摩擦。
- en: At the time of writing this book, Docker can be found under two different product
    brands. Mirantis bought the Docker Enterprise product, while Docker maintains
    Docker Community software and their desktop product. The complete Enterprise platform
    will be part of the Mirantis catalog.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Docker 可以在两个不同的产品品牌下找到。Mirantis 收购了 Docker 企业版产品，而 Docker 继续维护 Docker
    Community 软件及其桌面产品。完整的企业平台将成为 Mirantis 目录的一部分。
- en: 'Therefore, Docker Enterprise Edition covers the following products:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Docker 企业版涵盖以下产品：
- en: '**Docker Enterprise Engine**: Docker Engine is required for the Docker Enterprise
    platform; it provides all the required runtime features. There are slight differences
    between the Community and Enterprise editions. In fact, the most important one
    is to do with support. Docker Enterprise provides an enterprise *24/7* support
    subscription option and a working hours support subscription option. The Docker
    Community edition does not provide such support. This slight difference will probably
    persuade enterprise users to use Docker Enterprise Edition.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 企业引擎**：Docker 引擎是 Docker 企业平台所需的，它提供所有必需的运行时功能。社区版和企业版之间有一些细微的区别。事实上，最重要的一点与支持服务相关。Docker
    企业版提供了企业 *24/7* 支持订阅选项以及工作时间支持订阅选项。而 Docker Community 版不提供此类支持。这一小差异可能会促使企业用户选择
    Docker 企业版。'
- en: '**Docker UCP**: The control plane for the cluster is also included in Docker
    Enterprise Edition. This product is called Docker UCP. It also provides a Kubernetes
    production-ready platform out of the box, on top of a production-ready Docker
    Swarm cluster. It is probably the best option for getting a Kubernetes cluster
    with minimal effort. This cluster distribution is also supported by Docker, which
    means that all Kubernetes integrations have been fully tested on the Docker Enterprise
    platform. The bad thing about this is that Kubernetes releases have to be frozen
    during a product''s lifetime. At the time of writing this book, the currently
    supported and distributed Kubernetes release is 1.14, while it is generally available
    as 1.17 in the Community edition. This is normal for enterprise products. Everything
    must be tested and verified before moving to a newer release, and this takes time.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker UCP**：集群的控制平面也包含在 Docker 企业版中。这个产品叫做 Docker UCP。它还提供了一个开箱即用的 Kubernetes
    生产就绪平台，建立在一个生产就绪的 Docker Swarm 集群之上。这可能是获得一个 Kubernetes 集群的最简单方式。这个集群发行版也得到了 Docker
    的支持，这意味着所有 Kubernetes 集成都已在 Docker 企业平台上经过充分测试。缺点是 Kubernetes 版本必须在产品生命周期内冻结。在撰写本书时，目前支持并分发的
    Kubernetes 版本是 1.14，而社区版中一般提供的是 1.17。这对于企业产品来说是正常的。所有东西都必须在更新到更高版本之前进行测试和验证，这需要时间。'
- en: '**Docker Trusted Registry**: A registry is always required to work with containers.
    Although Docker developed **Docker Registry**and it is open source, it is not
    enough for production. It provides neither authentication nor authorization, which
    are fundamental to ensure secure access to images. We can integrate **Docker Trusted
    Content***,*but this is not easy. We will need to include Notaryservices and integrate
    them into the rest of the deployed platform. Believe me, this is not easy. I have
    done it in the past and it was hard to implement and even harder to maintain.
    DTR includes authentication and authorization based on the RBAC model. We can
    have organizations, teams, and different access for different users, and we can
    make some of our images publicly available. We get fully featured access and image
    publishing control. It also includes a Docker Trusted Content implementation,
    with all the required components and integrations. It includes CI/CD workflow
    integrations for different stages and security image scanning. These features
    will allow us to ensure that only approved images that are free from vulnerabilities
    run in our production CaaS platform.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 受信注册表**：工作时始终需要一个注册表与容器配合使用。尽管 Docker 开发了 **Docker Registry** 并且它是开源的，但它不足以用于生产环境。它既没有身份验证也没有授权，而这对于确保安全访问镜像至关重要。我们可以集成
    **Docker Trusted Content**，*但这并不简单*。我们需要包括 Notary 服务并将其集成到其他已部署的平台中。相信我，这并不容易。我以前做过，实施起来很困难，维护起来更难。DTR
    包括基于 RBAC 模型的身份验证和授权。我们可以创建组织、团队，并为不同用户设置不同的访问权限，还可以将部分镜像公开。我们可以完全控制访问和镜像发布。它还包括
    Docker 受信内容的实现，包含所有必需的组件和集成。它还包括不同阶段的 CI/CD 工作流集成和安全镜像扫描。这些功能将确保只有经过批准且无漏洞的镜像在我们的生产
    CaaS 平台上运行。'
- en: '**Docker Desktop Enterprise**: This is the most recently added feature at the
    time of writing this book. The Docker Certified Associate exam does not include
    any questions about it right now. Due to this, we will just provide a basic Docker
    Desktop introduction. This is a desktop application that provides developers with
    full Docker Swarm and Kubernetes environments so that they can develop and test
    their applications on their laptops before moving their artifacts to other stages.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Desktop Enterprise**：这是撰写本书时最新添加的功能。目前 Docker Certified Associate
    考试不包括任何关于它的问题。因此，在这里我们只提供 Docker Desktop 的基本介绍。这是一个桌面应用程序，为开发人员提供完整的 Docker Swarm
    和 Kubernetes 环境，以便他们可以在笔记本电脑上开发和测试其应用程序，然后将其工件移到其他阶段。'
- en: 'As we can see, there''s a number of different components that are packaged
    in a Docker Enterprise release. If we go to [https://success.docker.com/article/compatibility-matrix](https://success.docker.com/article/compatibility-matrix),
    we can review which component releases are verified and are supported to work
    together. At the time of writing this book, these are the latest supported releases
    of each component for Docker Enterprise Edition 3.0:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，有许多不同的组件打包在 Docker Enterprise 版本中。如果我们访问 [https://success.docker.com/article/compatibility-matrix](https://success.docker.com/article/compatibility-matrix)，我们可以查看哪些组件版本是经过验证并支持一起工作的。在撰写本书时，这些是
    Docker Enterprise Edition 3.0 的每个组件的最新支持版本：
- en: Docker Engine 19.03.x
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Engine 19.03.x
- en: Universal Control Plane 3.2.x
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Universal Control Plane 3.2.x
- en: Docker Trusted Registry 2.7.x
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Trusted Registry 2.7.x
- en: Docker Engine is supported on many Linux distributions (such as Red Hat/CentOS,
    SUSE SLES, Oracle Linux, and Ubuntu) and Windows (2016 and 2019 releases).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Engine 受支持的许多 Linux 发行版（如 Red Hat/CentOS、SUSE SLES、Oracle Linux 和 Ubuntu）和
    Windows（2016 和 2019 发行版）。
- en: Windows nodes are only supported as worker nodes and they will only be part
    of a Docker Swarm orchestration. Kubernetes is not available on the Windows platform
    on Docker Enterprise 3.0.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 节点仅支持作为工作节点，并且它们仅将作为 Docker Swarm 编排的一部分。在 Docker Enterprise 3.0 上不支持
    Windows 平台上的 Kubernetes。
- en: In the next section, we will discuss what a CaaS platform is and how Docker
    provides all the expected features.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将讨论 CaaS 平台是什么以及 Docker 如何提供所有期望的功能。
- en: Understanding CaaS
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 CaaS
- en: 'A CaaS platform is a platform that can be used to provide container services
    to users. The term *as a Service* is usually associated with cloud providers and
    their solutions. We will extend this terminology to on-premises environments here.
    We will talk about CaaS as a framework or compound of applications designed to
    provide a complete container-based solution to users. A CaaS solution must provide
    the full container workflow (build, ship, and run). There is also another new
    term these days: **KaaS** solutions. This terminology refers to **Kubernetes as
    a Service** platforms, where Kubernetes is the core of the environment. These
    solutions add some facilities that are not included with Kubernetes out of the
    box, such as monitoring, logging, and CI/CD.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: CaaS 平台是一个可用于向用户提供容器服务的平台。 *作为服务* 这个术语通常与云提供商及其解决方案相关联。在此，我们将这个术语扩展到本地环境。我们将讨论
    CaaS 作为一个设计用于向用户提供完整基于容器的解决方案的应用程序框架或复合物。CaaS 解决方案必须提供完整的容器工作流程（构建、部署和运行）。现在也有另一个新术语：**KaaS**
    解决方案。这个术语指的是 **Kubernetes 作为服务** 平台，其中 Kubernetes 是环境的核心。这些解决方案增加了一些在 Kubernetes
    默认安装中不包含的功能，例如监控、日志记录和 CI/CD。
- en: CaaS and KaaS environments are aimed at users that require a complete solution.
    There will be administrators of the solution and clients that will consume the
    services provided in the environment.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CaaS 和 KaaS 环境旨在为需要完整解决方案的用户提供服务。将有解决方案的管理员和将在环境中使用提供的服务的客户端。
- en: 'These platforms must provide the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些平台必须提供以下内容：
- en: '**Authentication**: Users accessing the platform should be authenticated so
    as to only allow approved users.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证**：访问平台的用户应该经过身份验证，以便只允许已批准的用户。'
- en: '**Authorization**: Roles will provide different access to different users.
    There should be administrators and users. Each should have different levels of
    access and views within the platform. Actions that can be performed on containers
    should be inaccessible to non-authorized users.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权**：角色将为不同的用户提供不同的访问权限。应该有管理员和用户。每个用户在平台内部应具有不同级别的访问权限和视图。非授权用户不应该可以对容器执行操作。'
- en: '**Runtime**: All containers will run on container engines. This is a requirement.
    There are different engines, but Docker Engine is still the most common nowadays.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时**：所有容器将在容器引擎上运行。这是一个要求。虽然有不同的引擎，但 Docker 引擎现在仍然是最常见的。'
- en: '**Publishing**: We use these platforms to create and run applications based
    on containers, but people have to be able to consume our deployed services. CaaS/KaaS
    platforms must provide a component that allows us to publish applications that
    are deployed inside our environment.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布**：我们使用这些平台来创建和运行基于容器的应用程序，但人们必须能够消费我们已部署的服务。CaaS/KaaS 平台必须提供一个组件，允许我们发布部署在环境内的应用程序。'
- en: '**Registry**: All images must be stored somewhere. Remember, images are always
    required. There are no containers without images, and versioning them alongside
    code changes will help you track issues and new functionalities. Having a registry
    included in your CaaS/KaaS platform is vital.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册表**：所有镜像必须存储在某个地方。记住，镜像是必需的。没有镜像就没有容器，将镜像和代码更改一起版本化将有助于你跟踪问题和新功能。拥有一个包含在
    CaaS/KaaS 平台中的注册表是至关重要的。'
- en: '**Status**: We need to have a complete view of the statuses of all our platform
    components. If there''s a failure, we need to know which components will be affected,
    whether we''ll be able to push new images, and whether our services work, for
    instance.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：我们需要对所有平台组件的状态有一个完整的视图。如果出现故障，我们需要知道哪些组件会受到影响，我们是否能够推送新镜像，以及我们的服务是否正常运行，举个例子。'
- en: '**Integrations**: Although, in my opinion, logging and monitoring are not strictly
    required, it is good to at least provide integrations to external platforms for
    these features. Some CaaS platforms include these services in their deployment
    (such as Red Hat''s OpenShift, among others), but it should be easy to integrate
    our logging and monitoring environments. Sometimes, operations teams will have
    their own monitoring platforms; a CaaS platform should just forward all required
    events to them. CI/CD workflows are another interesting integration. If a CaaS
    platform can integrate development and test stages within the platform, users
    will be able to just code. Everything else can be automated with CI/CD tools.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成**：尽管在我看来，日志记录和监控并不是严格要求的，但至少为这些功能提供对外平台的集成是一个不错的选择。一些 CaaS 平台将这些服务包括在其部署中（例如
    Red Hat 的 OpenShift 等），但我们应该能够轻松地将日志记录和监控环境集成。有时，运维团队会有自己的监控平台；CaaS 平台应该将所有必要的事件转发给它们。CI/CD
    工作流是另一种有趣的集成方式。如果 CaaS 平台能够在平台内集成开发和测试阶段，用户将只需要编码。其他一切都可以通过 CI/CD 工具自动化。'
- en: As we mentioned previously, these platforms will require some administrators
    to do all the maintenance tasks and configurations, while users will just consume
    the provided services to create and run their applications. There are some cloud
    providers that have taken a different approach. **Azure Kubernetes Service** (**AKS**),
    Amazon's **Elastic Kubernetes Service** (**EKS**), and **Google Kubernetes Service**
    (**GKS**) are the most well-known examples of these environments.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，这些平台需要一些管理员来完成所有的维护任务和配置，而用户只需消费提供的服务以创建和运行他们的应用程序。有些云服务提供商采取了不同的方法。**Azure
    Kubernetes 服务**（**AKS**）、亚马逊的**弹性 Kubernetes 服务**（**EKS**）和**Google Kubernetes
    服务**（**GKS**）是这些环境中最知名的例子。
- en: On these platforms, we just select the number of workers to deploy in our cluster.
    All maintenance tasks are managed by the cloud provider; we just configure user
    access and prepare some of the cloud provider's load balancers to route the traffic.
    Everything else is configured and deployed in Kubernetes. This is great because
    we get to just focus on deploying applications. We don't have to care about high
    availability in the environment, backups, or platform upgrades. The cloud provider
    will manage all these tasks for us. Such platforms also include monitoring and
    logging facilities that are integrated into their **Platform as a Service** (**PaaS**)
    environments.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些平台上，我们只需要选择要在集群中部署的工作节点数量。所有维护任务由云服务提供商管理；我们只需要配置用户访问权限，并准备一些云服务提供商的负载均衡器来路由流量。其余的配置和部署都在
    Kubernetes 中进行。这非常好，因为我们可以专注于部署应用程序。我们不需要关心环境的高可用性、备份或平台升级。云服务提供商将为我们管理所有这些任务。这些平台还包括集成到其**平台即服务**（**PaaS**）环境中的监控和日志记录设施。
- en: In this section, we reviewed what we need to provide in a CaaS or KaaS platform.
    In the next section, we will learn about how Docker Enterprise implements these
    concepts.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们回顾了在 CaaS 或 KaaS 平台中需要提供的内容。在下一节中，我们将学习 Docker 企业版如何实现这些概念。
- en: The Docker Enterprise platform
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 企业版平台
- en: Docker Enterprise provides a CaaS platform. In this section, we will try to
    apply everything we know about CaaS platforms to what we understand about Docker
    Enterprise. We will cover many concepts in order to help you to understand how
    we implement end-to-end container-based solutions with Docker Enterprise. We will
    not cover Docker Desktop Enterprise because it is not part of the Docker Certified
    Associate exam.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 企业版提供了一个 CaaS 平台。在本节中，我们将尝试将我们对 CaaS 平台的了解应用到 Docker 企业版中。我们将涵盖许多概念，以帮助您理解如何使用
    Docker 企业版实现端到端的基于容器的解决方案。我们不会涉及 Docker Desktop 企业版，因为它不包含在 Docker 认证助理考试中。
- en: Docker Engine
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 引擎
- en: Docker Engine is a core piece of the platform. It provides the runtime for executing
    the platform. Unlike Kubernetes, Docker Swarm requires Docker Engine to work.
    Kubernetes provides the option to use `containerd` directly or a **Container Runtime
    Interface Optimized** (**CRI-O** for OCI-compatible containers). Docker Engine
    includes Swarm mode, and we do not need any other software to implement a fully
    functional distributed orchestration environment. Docker Engine provides the underlying
    layer of execution of all platform components.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 引擎是平台的核心部分。它提供了执行平台的运行时。与 Kubernetes 不同，Docker Swarm 需要 Docker 引擎才能运行。Kubernetes
    提供了直接使用 `containerd` 或 **容器运行时接口优化版** (**CRI-O**，用于兼容 OCI 的容器)的选项。Docker 引擎包括
    Swarm 模式，我们无需任何其他软件即可实现一个功能齐全的分布式调度环境。Docker 引擎为所有平台组件提供了底层执行层。
- en: On top of Docker Engine, we will create a Docker Swarm cluster, and other Docker
    Enterprise components will run either as Docker Swarm services or multi-container
    applications. This is key because there are a few components that will run as
    agents in the platform, and we will automatically deploy them as **global services**(remember
    these concepts). But there are also some components that must be unique within
    the cluster. They will run as **multi-container**applications on top of some defined
    hosts. These components will use different schemas for their execution.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker 引擎之上，我们将创建一个 Docker Swarm 集群，其他 Docker 企业版组件将作为 Docker Swarm 服务或多容器应用程序运行。这一点至关重要，因为有些组件将作为代理在平台中运行，我们将自动将它们部署为
    **全球服务**（记住这些概念）。但也有一些组件必须在集群中唯一。它们将在一些指定的主机上作为 **多容器**应用程序运行。这些组件将使用不同的执行架构。
- en: For Docker Enterprise, we will deploy Docker Enterprise Engine, along with support
    for specific releases. Enterprise releases have to be supported for a long time,
    so this affects release times. As we saw in the *Docker Enterprise Engine* section,
    the currently supported release is 19.03.x (at the time of writing this book),
    while for the Community Edition, the supported release can be different (it's
    currently also 19.03.6, but it was only until recently that there could be big
    differences between releases). This is normal because Docker engineers and support
    teams must verify all components' integrations and solve any issues for current
    Docker Enterprise releases, while at the same time evolving the product by adding
    new features. These features always appear on Docker Community Edition before
    they are fully tested and implemented for Docker Enterprise Edition.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Docker 企业版，我们将部署 Docker 企业版引擎，并支持特定的发布版本。企业版发布必须长期得到支持，因此这会影响发布的时间。如我们在*Docker
    企业版引擎*一节中所看到的，目前支持的版本是 19.03.x（截至写作本书时），而对于社区版，支持的版本可能不同（目前也是 19.03.6，但直到最近，版本之间可能会有较大差异）。这是正常现象，因为
    Docker 工程师和支持团队必须验证所有组件的集成并解决当前 Docker 企业版发布中的任何问题，同时在此过程中通过增加新特性来推动产品的演进。这些新特性通常会先出现在
    Docker 社区版中，然后在充分测试并实现后才会应用于 Docker 企业版。
- en: Because we will be working in a cluster environment, we will be able to execute
    maintenance tasks and move workloads between nodes without service interruption.
    Docker Engine updates will be smooth and easy.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在集群环境中工作，我们将能够执行维护任务并在节点之间移动工作负载，而不会中断服务。Docker 引擎的更新将顺畅且简单。
- en: Universal Control Plane
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用控制平面
- en: UCP provides the control plane for the Docker Enterprise platform. It provides
    all the processes and tools you need in order to manage all your cluster components
    and their statuses. UCP will deploy components on master and worker nodes, as
    we will learn in [Chapter 11](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml), *Universal
    Control Plane*. It is based on Docker Swarm orchestration, but, as we mentioned
    previously, the core components will run as multi-container applications. The
    master nodes will run the control plane processes. These processes will not run
    on any other node if they fail. It is important to understand that these core
    processes can only run on defined nodes. No other nodes can take these workloads.
    If we have a problem occurring on a master node and we cannot recover the master
    node, we need to create a new master. We will promote a worker node or install
    a new master after removing the old one.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: UCP为Docker Enterprise平台提供控制平面。它提供了管理所有集群组件及其状态所需的所有进程和工具。UCP将部署组件在主节点和工作节点上，正如我们将在[第11章](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml)中学习的那样，*通用控制平面*。它基于Docker
    Swarm编排，但正如我们之前提到的，核心组件将作为多容器应用程序运行。主节点将运行控制平面进程。如果这些进程失败，它们不会在其他节点上运行。理解这些核心进程只能在指定节点上运行非常重要。其他节点无法承载这些工作负载。如果主节点发生问题，且我们无法恢复该主节点，我们需要创建一个新的主节点。我们将提升一个工作节点，或者在移除旧节点后安装一个新的主节点。
- en: UCP will deploy some distributed databases, and it is important to maintain
    their quorum. We will review a couple of common issues in [Chapter 11](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml),
    *Universal Control Plane*. Remember, UCP manager nodes are very important and
    processes need to run on defined nodes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: UCP将部署一些分布式数据库，保持其法定人数（quorum）非常重要。我们将在[第11章](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml)中回顾一些常见问题，*通用控制平面*。请记住，UCP管理节点非常重要，进程必须在指定节点上运行。
- en: All internal cluster communications will be encrypted using TLS. UCP manages
    all nodes, all components, and all their certificates. It will also provide certificates
    for authenticated and authorized users. We can ensure secure client-to-server
    communications by default.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有内部集群通信将使用TLS进行加密。UCP管理所有节点、所有组件及其证书。它还将为经过认证和授权的用户提供证书。默认情况下，我们可以确保客户端与服务器之间的安全通信。
- en: The Kubernetes cluster will also be deployed with the required **Container Network
    Interface** (**CNI**), Calico, by default, and secured configurations. UCP provides
    a production-ready Docker Swarm and Kubernetes platform.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群也将默认部署所需的**容器网络接口**（**CNI**）Calico，并配置安全设置。UCP提供一个生产就绪的Docker Swarm和Kubernetes平台。
- en: Cluster authentication and authorization will be managed by UCP. We will be
    able to integrate third-party authentication systems, such as **Lightweight Directory
    Access Protocol** (**LDAP**), and Active Directory. All authorization mechanisms
    and implementations are also included in UCP. We can provide a unified login,
    delegating all DTR authentication requests to UCP. This is the usual and preferred
    configuration. UCP provides a complete RBAC system based on resources, roles,
    and grants. We will have high levels of granularity to specify customized access
    to any resource within the cluster.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 集群的认证和授权将由UCP管理。我们将能够集成第三方认证系统，如**轻量目录访问协议**（**LDAP**）和Active Directory。所有授权机制和实现也都包含在UCP中。我们可以提供统一登录，将所有DTR认证请求委托给UCP。这是通常的且首选的配置。UCP提供一个完整的基于资源、角色和权限的RBAC系统。我们可以在集群内的任何资源上指定高度定制的访问权限。
- en: UCP provides a management web UI and also an API interface to access a cluster's
    resources. We will be able to configure all Docker Swarm and Kubernetes resources.
    For Kubernetes, a simple interface is provided to deploy resources' YAML files.
    We will use the cluster remotely. We will never allow a user access to either
    manager or worker nodes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: UCP提供一个管理Web UI和一个API接口，用于访问集群的资源。我们将能够配置所有Docker Swarm和Kubernetes资源。对于Kubernetes，提供一个简单的界面来部署资源的YAML文件。我们将远程使用集群。我们永远不会允许用户访问管理节点或工作节点。
- en: It is very important to disallow any non-authorized access to cluster nodes.
    Access via SSH to Docker hosts or directly to Docker Engine's daemon will bypass
    all security implementations applied by UCP.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 禁止任何未经授权访问集群节点非常重要。通过SSH访问Docker主机或直接访问Docker Engine的守护进程将绕过UCP应用的所有安全实现。
- en: The web UI will also provide some simple monitoring capabilities to verify the
    entire cluster's state. We can review the status of all containers, pods, services,
    and, in general, all resources managed by the cluster. We can also export the
    cluster's metrics using Prometheus' standard integrations. The web UI also provides
    access to container logs, and we can even use them to review the application's
    behavior. All this access will be managed by UCP's RBAC system.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Web UI 还将提供一些简单的监控功能，用于验证整个集群的状态。我们可以查看所有容器、Pod、服务的状态，以及一般来说，所有由集群管理的资源。我们还可以使用
    Prometheus 的标准集成导出集群的指标。Web UI 还提供对容器日志的访问，我们甚至可以使用它们来查看应用程序的行为。所有这些访问将通过 UCP
    的 RBAC 系统进行管理。
- en: Docker Swarm and Kubernetes will be available through their APIs. Kubernetes
    provides its own RBAC, as we learned in [Chapter 9](abcbf266-c469-4d84-ad4f-abd321a64b53.xhtml),
    *Orchestration Using Kubernetes*. Docker Swarm requires external tools. UCP provides
    these external tools, proxying all API requests to UCP's internal RBAC integration
    and providing appropriate authentication and authorization mechanisms.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm 和 Kubernetes 将通过其 API 提供服务。如我们在[第9章](abcbf266-c469-4d84-ad4f-abd321a64b53.xhtml)《*使用
    Kubernetes 进行编排*》中所学，Kubernetes 提供了其自有的 RBAC。Docker Swarm 则需要外部工具。UCP 提供了这些外部工具，将所有
    API 请求代理到 UCP 的内部 RBAC 集成，并提供适当的身份验证和授权机制。
- en: UCP also provides an integrated component for publishing applications deployed
    within the cluster. This component is Interlock and, at the time of writing this
    book, is based on NGINX. Interlock only works with Docker Swarm deployments, monitoring
    the cluster's API for changes on defined services. We will define which services
    will be published and which headers, names, and routes should be available. All
    changes that are applied to the services will be automatically populated to Interlock's
    reverse proxy component, which will forward requests to the associated backends.
    We will learn about this in more depth in [Chapter 12](ab131f1f-ca6e-4815-9a3a-8c92c93c9dbc.xhtml),
    *Publishing Applications in Docker Enterprise*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: UCP 还提供了一个集成组件，用于发布集群内部署的应用程序。这个组件是 Interlock，并且在编写本书时，它基于 NGINX。Interlock 仅适用于
    Docker Swarm 部署，监控集群的 API 以获取已定义服务的变化。我们将定义哪些服务需要发布，以及哪些头部、名称和路由应该可用。对服务应用的所有更改将自动填充到
    Interlock 的反向代理组件中，该组件会将请求转发到相关的后台服务。我们将在[第12章](ab131f1f-ca6e-4815-9a3a-8c92c93c9dbc.xhtml)《*在
    Docker Enterprise 中发布应用程序*》中更深入地学习这一内容。
- en: Docker Trusted Registry
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 信任的注册中心
- en: As we mentioned when we were talking about CaaS requirements, we need a registry
    to store images. This registry must provide secure access and roles because we
    need some granularity when publishing images. Some users will be owners of their
    images, while others will only use them. We need to ensure image immutability.
    DTR provides this. It is built on top of the open source Docker Registry, but
    many improvements were added to provide an enterprise-ready solution.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在讨论 CaaS 要求时提到的，我们需要一个注册中心来存储镜像。这个注册中心必须提供安全访问和角色，因为在发布镜像时，我们需要一些粒度控制。一些用户将是自己镜像的所有者，而其他用户只能使用这些镜像。我们需要确保镜像的不可变性。DTR
    提供了这一点。它是建立在开源的 Docker Registry 基础之上，但添加了许多改进，以提供企业级解决方案。
- en: DTR provides a secured store for all CaaS/KaaS images. We will be able to ensure
    provenance and immutability. We will also provide different access levels to images.
    Some users will be maintainers of base images, while others will be able to use
    them for their own projects. We also have teams and organizations. We can publish
    images within organizations in a multi-tenant environment, ensuring that all users
    within an organization are able to use their public images. Teams will share image
    maintenance responsibilities, but only some members will be able to modify image
    content.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: DTR 提供了一个安全的存储库来存储所有 CaaS/KaaS 镜像。我们可以确保源追溯性和不可变性。我们还将为镜像提供不同的访问级别。一些用户将是基础镜像的维护者，而其他用户将能够将其用于自己的项目。我们还拥有团队和组织。我们可以在多租户环境中的组织内发布镜像，确保组织内的所有用户都能使用其公共镜像。团队将共享镜像维护责任，但只有部分成员能够修改镜像内容。
- en: Because security is key in CaaS environments, DTR will provide image scanning
    and signing. Image scanning will review all images, searching for binary vulnerabilities.
    It will use a **Common Vulnerabilities and Exposures**(**CVE**) database to find
    any vulnerable files. All vulnerable content will be reported and administrators
    will manage these issues within the platform. We can decide to only execute clean
    images; that is, images that are without any reported vulnerabilities. Image signing
    will allow us to forbid any unsigned images into our infrastructure. This ensures
    that we will only execute images that have been created and signed within our
    organization. If an image has been externally modified, it will not be allowed
    to run a container.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全性在 CaaS 环境中至关重要，DTR 将提供镜像扫描和签名功能。镜像扫描将检查所有镜像，寻找二进制漏洞。它将使用 **常见漏洞和暴露**（**CVE**）数据库来查找任何存在漏洞的文件。所有漏洞内容将被报告，管理员将在平台内处理这些问题。我们可以决定只执行干净的镜像，即没有报告任何漏洞的镜像。镜像签名将确保我们禁止任何未签名的镜像进入我们的基础设施。这确保我们只执行在我们组织内创建并签名的镜像。如果镜像被外部修改，将无法运行容器。
- en: DTR can also be integrated into a CI/CD pipeline, along with its image promotion
    features. Image tags can be modified with triggers. This process can also tell
    external applications to track and help us implement special stages in our deployment
    workflow. Images are the new code artifacts for applications and we can integrate
    DTR in our CI/CD pipelines.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: DTR 还可以集成到 CI/CD 流水线中，结合其镜像推广功能。镜像标签可以通过触发器进行修改。这个过程还可以告诉外部应用程序进行跟踪，帮助我们在部署工作流中实现特殊的阶段。镜像是应用程序的新代码构件，我们可以将
    DTR 集成到我们的 CI/CD 流水线中。
- en: In the next section, we will describe a minimal environment for production using
    Docker Enterprise Edition.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将描述使用 Docker 企业版进行生产的最小环境。
- en: Planning your Docker Enterprise deployment
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划你的 Docker 企业版部署
- en: Docker Enterprise provides a production-ready CaaS platform, as we have been
    discussing throughout this chapter. In this section, we will review the minimum
    logical requirements for deploying Docker Enterprise in production.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章中讨论的那样，Docker 企业版提供了一个生产就绪的 CaaS 平台。在本节中，我们将回顾部署 Docker 企业版到生产环境中的最小逻辑要求。
- en: We learned that Docker Swarm and Kubernetes require an odd number of master
    nodes to work properly. Docker Swarm does not require an external key-value store,
    while Kubernetes does. Docker Enterprise will deploy this key-value store with
    UCP, so a minimum of three manager nodes will be required to provide high availability.
    All managers will run the same services. In Docker Swarm and Kubernetes, we have
    a leader node that writes cluster changes in the database. Other managers will
    sync their data, but we can also run administration commands on any of them. We
    need to integrate an external load balancer to distribute API requests on all
    manager nodes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，Docker Swarm 和 Kubernetes 需要奇数个主节点才能正常工作。Docker Swarm 不需要外部键值存储，而 Kubernetes
    需要。Docker 企业版将通过 UCP 部署这个键值存储，因此至少需要三个管理节点以提供高可用性。所有管理节点将运行相同的服务。在 Docker Swarm
    和 Kubernetes 中，我们有一个领导节点，用于在数据库中记录集群的变更。其他管理节点将同步其数据，但我们也可以在任何一个管理节点上运行管理命令。我们需要集成外部负载均衡器，以便将
    API 请求分发到所有管理节点。
- en: Remember, three nodes only protect the cluster if one of them fails. The cluster
    will work fine with two manager nodes, but if another one fails, the cluster will
    become inconsistent.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，三个节点只有在其中一个节点失败时才能保护集群。集群在两个管理节点下也能正常工作，但如果另一个节点失败，集群将变得不一致。
- en: 'UCP requires at least three manager nodes. But what about DTR? This component
    has its own distributed database: it uses **R****ethinkDB**. This database also
    requires an odd number of replicas; therefore, three nodes will be required. DTR
    will be deployed on worker nodes using a multi-container architecture. We can
    then say that we will need at least three worker nodes for DTR. Image scanning
    can consume a lot of CPU resources, and it is recommended to isolate DTR nodes
    from other worker nodes to avoid application impact. A DTR cluster requires shared
    storage between nodes because only the node receiving the application''s requests
    will write changes to the database. But all nodes must write to the same storage
    location, so shared storage is required. We will use an external load balancer
    in front of DTR''s API to distribute requests between service nodes.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: UCP要求至少有三个管理节点。那么DTR呢？该组件有自己的分布式数据库：它使用**RethinkDB**。这个数据库也要求副本数量为奇数；因此，至少需要三个节点。DTR将使用多容器架构在工作节点上部署。因此，我们可以说，DTR至少需要三个工作节点。镜像扫描可能消耗大量的CPU资源，建议将DTR节点与其他工作节点隔离，以避免对应用程序产生影响。DTR集群需要节点之间的共享存储，因为只有接收应用请求的节点才能向数据库写入更改。但所有节点必须写入相同的存储位置，因此需要共享存储。我们将在DTR的API前面使用外部负载均衡器，以便在服务节点之间分配请求。
- en: 'We will add workers to this platform as needed. In fact, we will start with
    a minimum of two worker nodes for high availability. All application workloads
    must have resilience; hence, a minimum of two nodes for Windows and Linux workloads
    will be required if we deploy on both architectures. The following diagram represents
    the described scenario:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将根据需要向该平台添加工作节点。事实上，我们将从最少两个工作节点开始，以确保高可用性。所有应用负载都必须具备弹性；因此，如果我们在两个架构上都进行部署，Windows和Linux工作负载的最小节点数将要求至少为两个。下图展示了描述的场景：
- en: '![](img/8cc0a9be-946f-468e-b835-0f84e645bb24.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cc0a9be-946f-468e-b835-0f84e645bb24.jpg)'
- en: We will use fixed IP addresses for the manager and worker nodes. This is preferred,
    although worker nodes can be deployed using DHCP. We will isolate the control
    plane from the data plane, as we discussed in [Chapter 8](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml),
    *Orchestration Using Docker Swarm*. The data plane will be used for applications,
    while the control plane will be used for internal cluster communications.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为管理节点和工作节点使用固定IP地址。这是首选方案，尽管工作节点可以使用DHCP进行部署。我们将如在[第8章](78af3b70-773d-4f5d-9835-71d1c15a104a.xhtml)中讨论的那样，*使用Docker
    Swarm进行编排*，将控制平面与数据平面隔离。数据平面将用于应用程序，而控制平面将用于内部集群通信。
- en: 'Calico will be used by default as the Kubernetes CNI, and it is important to
    check for any possible IP range conflicts. The following table shows the default
    IP addresses used for Docker Engine, Docker Swarm, and Kubernetes:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Calico将默认作为Kubernetes CNI使用，检查是否存在IP范围冲突非常重要。下表显示了Docker Engine、Docker Swarm和Kubernetes使用的默认IP地址：
- en: '| **Component** | **Subnet** | **Range** | **Default IP address** |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **子网** | **范围** | **默认IP地址** |'
- en: '| Engine | `fixed-cidr` | CIDR range for the `docker0` interface and local
    containers | `172.17.0.0/16` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 引擎 | `fixed-cidr` | `docker0`接口和本地容器的CIDR范围 | `172.17.0.0/16` |'
- en: '| Engine | `default-address-pools` | CIDR range for the `docker_gwbridge` interface
    and bridge networks | `172.18.0.0/16` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 引擎 | `default-address-pools` | `docker_gwbridge`接口和桥接网络的CIDR范围 | `172.18.0.0/16`
    |'
- en: '| Swarm | `default-addr-pool` | CIDR range for Docker Swarm overlay networks
    | `10.0.0.0/8` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| Swarm | `default-addr-pool` | Docker Swarm覆盖网络的CIDR范围 | `10.0.0.0/8` |'
- en: '| Kubernetes | `pod-cidr` | CIDR range for Kubernetes pods | `192.168.0.0/16`
    |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| Kubernetes | `pod-cidr` | Kubernetes Pods的CIDR范围 | `192.168.0.0/16` |'
- en: '| Kubernetes | `service-cluster-ip-range` | CIDR range for Kubernetes services
    | `10.96.0.0/16` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| Kubernetes | `service-cluster-ip-range` | Kubernetes服务的CIDR范围 | `10.96.0.0/16`
    |'
- en: 'To avoid any firewall issues, take a look at the following link, which describes
    some of the configurations required on some Linux platforms: [https://docs.docker.com/ee/ucp/admin/install/plan-installation](https://docs.docker.com/ee/ucp/admin/install/plan-installation).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免任何防火墙问题，请查看以下链接，该链接描述了某些Linux平台上所需的配置：[https://docs.docker.com/ee/ucp/admin/install/plan-installation](https://docs.docker.com/ee/ucp/admin/install/plan-installation)。
- en: We will use **Fully Qualified Domain Names** (**FQDNs**) for the virtual IP
    addresses associated with UCP/Kubernetes and DTR APIs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**完全合格的域名**（**FQDNs**）为与UCP/Kubernetes和DTR API相关的虚拟IP地址提供服务。
- en: We will review all required ports in [Chapter 11](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml),
    *Universal Control Plane*, and [Chapter 13](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml),
    *Implementing an Enterprise-Grade Registry with DTR*. But clients consume cluster
    services using specific exposed ports. By default, UCP and DTR will expose their
    APIs and web UI on port `443`, while Kubernetes will be exposed on port `6443`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 11 章](1879ea92-ae47-4230-ac84-784d4bc73185.xhtml)，*通用控制平面*，和[第 13 章](108b5948-15a9-40fb-b8dd-5a44c54efd7d.xhtml)，*使用
    DTR 实现企业级注册表*中回顾所有必需的端口。但客户端通过特定的暴露端口来访问集群服务。默认情况下，UCP 和 DTR 将在端口 `443` 上暴露它们的
    API 和 Web UI，而 Kubernetes 则暴露在端口 `6443` 上。
- en: We will usually require internet access during product installation, although
    we can execute an offline installation. Internet access is needed for DTR if we
    need to provide automatic image-scanning database synchronization. We can download
    a compressed database file from Docker's site once a week, for example, to avoid
    this required connectivity.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常在产品安装过程中需要互联网连接，尽管我们可以执行离线安装。如果需要提供自动的镜像扫描数据库同步，DTR 需要互联网连接。例如，我们可以每周从 Docker
    网站下载一个压缩的数据库文件，以避免这种所需的连接性。
- en: Licensing processes can also be automated, and subscription renewal can synchronize
    product licenses before they expire.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 许可证处理流程也可以自动化，订阅续期可以在产品许可证到期前同步。
- en: This was a brief description of the deployment of Docker Enterprise components
    to production. We will cover these components in more depth in the following chapters.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对将 Docker 企业组件部署到生产环境的简要描述。我们将在后续章节中更深入地探讨这些组件。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we provided an introduction to the Docker Enterprise platform.
    We reviewed the main differences between Docker Community tools and Docker Enterprise
    products.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Docker 企业平台。我们回顾了 Docker Community 工具和 Docker 企业产品之间的主要差异。
- en: We also covered the concepts of the CaaS and KaaS platforms. We looked at what
    we should expect from these platforms and how different manufacturers and cloud
    providers deploy their implementations.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了 CaaS 和 KaaS 平台的概念。我们了解了这些平台应该提供什么，以及不同的制造商和云服务提供商如何部署它们的实现。
- en: We also described the most important features of Docker Enterprise, namely Docker
    Enterprise Engine, UCP, and DTR. These components provide Docker's CaaS solution.
    With that, we've covered the most important things to consider when planning a
    Docker Enterprise production environment.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还描述了 Docker 企业平台的最重要功能，即 Docker 企业引擎（Docker Enterprise Engine）、UCP 和 DTR。这些组件提供了
    Docker 的 CaaS 解决方案。通过这些内容，我们已经涵盖了规划 Docker 企业生产环境时需要考虑的最重要事项。
- en: In the next chapter, we will explore UCP in more depth.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地探索 UCP。
- en: Questions
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of these components is not part of the Docker Enterprise platform?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪一项组件不属于 Docker 企业平台？
- en: a) DTR.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: a) DTR。
- en: b) Docker Enterprise Engine.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: b) Docker 企业引擎。
- en: c) Docker Machine.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: c) Docker Machine。
- en: d) All of these are part of the Docker Enterprise platform.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: d) 这些都是 Docker 企业平台的一部分。
- en: Which of these statements are true about Docker Community and Docker Enterprise?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些陈述关于 Docker Community 和 Docker Enterprise 是正确的？
- en: a) Docker Enterprise provides an enterprise-ready platform.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: a) Docker 企业版提供了一个企业级的平台。
- en: b) We cannot deploy Docker Swarm to production.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们不能将 Docker Swarm 部署到生产环境中。
- en: c) Kubernetes is not supported in Docker Enterprise; only Docker Swarm is supported.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: c) Docker 企业版不支持 Kubernetes；只支持 Docker Swarm。
- en: d) Docker Registry is an enterprise-ready registry.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: d) Docker 注册表是一个企业级的注册表。
- en: Which Docker components are required to deploy a KaaS solution?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署 KaaS 解决方案需要哪些 Docker 组件？
- en: a) Docker Enterprise Engine.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: a) Docker 企业引擎。
- en: b) UCP.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: b) UCP。
- en: c) Kubernetes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: c) Kubernetes。
- en: d) DTR.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: d) DTR。
- en: Which of the following statements are true for deploying a Docker Enterprise
    environment?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下关于部署 Docker 企业环境的哪些陈述是正确的？
- en: a) We use fixed IP addresses for manager nodes only.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: a) 我们仅为管理节点使用固定的 IP 地址。
- en: b) We just route traffic to one of the manager nodes.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们只需将流量路由到其中一个管理节点。
- en: c) We need to deploy a CNI after UCP completes the Kubernetes installation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: c) 在 UCP 完成 Kubernetes 安装后，我们需要部署一个 CNI。
- en: d) None of the above.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上都不是。
- en: What is the minimum number of nodes required to execute Linux workloads on a
    Docker Enterprise platform with high availability?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Docker 企业平台上执行 Linux 工作负载并确保高可用性所需的最少节点数是多少？
- en: a) We need to deploy three managers, three workers with DTR, and one Linux worker
    with enough resources to run all workloads.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: a) 我们需要部署三个管理节点、三个带有 DTR 的工作节点，以及一个足够资源的 Linux 工作节点来运行所有工作负载。
- en: b) We need to deploy three managers with DTR running on them and two Linux workers.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: b) 我们需要部署三个运行 DTR 的管理节点，以及两个 Linux 工作节点。
- en: c) We need to deploy three managers, three workers with DTR, and two Linux workers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: c) 我们需要部署三个带有 DTR 的管理节点，三个 DTR 工作节点，以及两个 Linux 工作节点。
- en: d) All these options are valid.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: d) 所有这些选项都是有效的。
- en: Further reading
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to the following references for more information about the topics
    that were covered in this chapter:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下资料，了解本章涉及的更多内容：
- en: 'Introduction to Docker Enterprise: [https://docs.docker.com/ee/](https://docs.docker.com/ee/)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 企业版简介： [https://docs.docker.com/ee/](https://docs.docker.com/ee/)
- en: 'Docker Enterprise components: [https://docs.docker.com/ee/docker-ee-architecture/](https://docs.docker.com/ee/docker-ee-architecture/)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 企业版组件： [https://docs.docker.com/ee/docker-ee-architecture/](https://docs.docker.com/ee/docker-ee-architecture/)
- en: 'Mirantis Docker Enterprise website: [https://www.mirantis.com/software/docker/docker-enterprise/](https://www.mirantis.com/software/docker/docker-enterprise/)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mirantis Docker 企业版网站： [https://www.mirantis.com/software/docker/docker-enterprise/](https://www.mirantis.com/software/docker/docker-enterprise/)
- en: 'Mirantis Docker acquisition: [https://www.mirantis.com/company/press-center/company-news/mirantis-acquires-docker-enterprise/](https://www.mirantis.com/company/press-center/company-news/mirantis-acquires-docker-enterprise/)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mirantis 收购 Docker： [https://www.mirantis.com/company/press-center/company-news/mirantis-acquires-docker-enterprise/](https://www.mirantis.com/company/press-center/company-news/mirantis-acquires-docker-enterprise/)
