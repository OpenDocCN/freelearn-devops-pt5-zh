["```\n$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose\n```", "```\n$ docker-compose --version\ndocker-compose version 1.17.1, build 6d101fb\n```", "```\n$ git clone --depth=1 https://github.com/apache/incubator-openwhisk-devtools\n```", "```\n$ make quick-start\n```", "```\nResponse body size is 9 bytes\nResponse body received:\n[\"guest\"]\nok: whisk auth set. Run 'wsk property get --auth' to see the new value.\nok: whisk API host set to 192.168.1.40:443\nok: whisk namespace set to guest\nwaiting for the Whisk invoker to come up ... \ncreating the hello.js function ...\ninvoking the hello-world function ... \nadding the function to whisk ...\nok: created action hello\ninvoking the function ...\ninvocation result: { \"payload\": \"Hello, World!\" }\n{ \"payload\": \"Hello, World!\" }\ndeleting the function ...\nok: deleted action hello\nTo invoke the function again use: make hello-world\nTo stop openwhisk use: make destroy\n```", "```\nResponse body received:\n[\"guest\"]\nok: whisk auth set. Run 'wsk property get --auth' to see the new value.\nok: whisk API host set to localhost:443\nok: whisk namespace set to guest\n```", "```\n$ docker ps --format \"table {{.ID}}\\t{{.Image}}\"\nCONTAINER ID    IMAGE\n5e44dca4c542    openwhisk/nodejs6action:latest\nd784018ef3de    adobeapiplatform/apigateway:1.1.0\n74b6b1d71510    openwhisk/controller\n0c0cb4779412    openwhisk/invoker\nb0111898e1a8    nginx:latest\n874dac58a7c1    landoop/kafka-topics-ui:0.9.3\n611e9b97ad74    confluentinc/cp-kafka-rest:3.3.1\n4e1a82df737e    wurstmeister/kafka:0.11.0.1\n9c490336abff    redis:2.8\nabc4c0845fac    couchdb:1.6\n451ab4c7bf45    zookeeper:3.4\n```", "```\n$ sudo cp openwhisk-master/bin/wsk /usr/local/bin\n\n$ wsk sdk install bashauto\nThe bash auto-completion script (wsk_cli_bash_completion.sh) is installed in the current directory.\nTo enable command line completion of wsk commands, source the auto completion script into your bash environment\n\n$ source wsk_cli_bash_completion.sh\n$ wsk\n\n ____      ___                   _    _ _     _     _\n /\\   \\    / _ \\ _ __   ___ _ __ | |  | | |__ (_)___| | __\n /\\  /__\\   \\  | | | | '_ \\ / _ \\ '_ \\| |  | | '_ \\| / __| |/ /\n /  \\____ \\  /  | |_| | |_) |  __/ | | | |/\\| | | | | \\__ \\   <\n \\   \\  /  \\/    \\___/| .__/ \\___|_| |_|__/\\__|_| |_|_|___/_|\\_\\\n \\___\\/ tm           |_|\n\nUsage:\n wsk [command]\n\n...\n```", "```\n$ wsk -i property get\nclient cert \nClient key \nwhisk auth              23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP\nwhisk API host          localhost:443\nwhisk API version       v1\nwhisk namespace         guest\nwhisk CLI version       2017-12-05T00:51:32+00:00\nwhisk API build         \"09/01/2016\"\nwhisk API build number  \"latest\"\n```", "```\n$ wsk -i sdk install docker\n```", "```\n$ curl -sSL -O https://github.com/apache/incubator-openwhisk-runtime-docker/releases/download/sdk%400.1.0/blackbox-0.1.0.tar.gz $ tar xf blackbox-0.1.0.tar.gz\n$ mv dockerSkeleton docker_c\n$ cd docker_c\n$ ls\nbuildAndPush.sh Dockerfile example.c README.md\n```", "```\n#include <stdio.h>\n\nint main(int argc, char *argv[]) {\n    printf(\"This is a log message from an arbitrary C program!\\n\");\n    printf(\"{ \\\"msg\\\": \\\"Hello from C program!\\\", \\\"args\\\": %s }\",\n      (argc == 1) ? \"undefined\" : argv[1]);\n}\n```", "```\n# Dockerfile for example whisk docker action\nFROM openwhisk/dockerskeleton\n\nENV FLASK_PROXY_PORT 8080\n\n### Add source file(s)\nADD example.c /action/example.c\n\nRUN apk add --no-cache --virtual .build-deps \\\n        bzip2-dev \\\n        gcc \\\n        libc-dev \\\n### Compile source file(s)\n && cd /action; gcc -o exec example.c \\\n && apk del .build-deps\n\nCMD [\"/bin/bash\", \"-c\", \"cd actionProxy && python -u actionproxy.py\"]\n```", "```\n$ docker build -t chanwit/whisk_c .\n\nSending build context to Docker daemon 6.656kB\nStep 1/5 : FROM openwhisk/dockerskeleton\nlatest: Pulling from openwhisk/dockerskeleton\n...\n ---> 25d1878c2f31\nStep 2/5 : ENV FLASK_PROXY_PORT 8080\n ---> Running in 932e3e3d6c0b\n ---> 647789067bf0\nRemoving intermediate container 932e3e3d6c0b\nStep 3/5 : ADD example.c /action/example.c\n ---> 91eb99956da2\nStep 4/5 : RUN apk add --no-cache --virtual .build-deps bzip2-dev gcc \n       libc-dev && cd /action; gcc -o exec example.c && apk del .build-deps\n ---> Running in 943930981ac6\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.4/community/x86_64/APKINDEX.tar.gz\n(1/19) Upgrading musl (1.1.14-r15 -> 1.1.14-r16)\n...\n(17/17) Purging libgcc (5.3.0-r0)\nExecuting busybox-1.24.2-r13.trigger\nOK: 32 MiB in 35 packages\n ---> d1cc0ed0f307\nRemoving intermediate container 943930981ac6\nStep 5/5 : CMD /bin/bash -c cd actionProxy && python -u actionproxy.py\n ---> Running in fc68fc0ba06f\n ---> 924277b2a3a0\nRemoving intermediate container fc68fc0ba06f\nSuccessfully built 924277b2a3a0\nSuccessfully tagged chanwit/whisk_c:latest\n```", "```\n$ tar xf blackbox-0.1.0.tar.gz\n$ mv dockerSkeleton docker_go\n$ cd docker_go\n```", "```\npackage main\n\nimport (\n  \"encoding/json\"\n  \"fmt\"\n  \"os\"\n)\n\nfunc main() {\n  rawParams := []byte(os.Args[1])\n  params := map[string]string{}\n\n  // decode JSON to a Go map\n  err := json.Unmarshal(rawParams, &params)\n  if err != nil {\n    fmt.Printf(`{\"error\":%q}`, err.Error())\n    os.Exit(0)\n  }\n\n  // re-arrange\n  keys := []string{}\n  values := []string{}\n  for k, v := range params {\n    keys = append(keys, k)\n    values = append(values, v)\n  }\n\n  result := map[string]interface{}{\n    \"message\": \"Hello from Go\",\n    \"keys\": keys,\n    \"values\": values,\n  }\n\n  // encode\n  rawResult, err := json.Marshal(result)\n  if err != nil {\n    fmt.Printf(`{\"error\":%q}`, err.Error())\n    os.Exit(0)\n  }\n\n  // write JSON back to the caller\n  fmt.Print(string(rawResult))\n}\n```", "```\n# Compile the Go program\nFROM golang:1.9.2-alpine3.6\n\nWORKDIR /go/src/app\nCOPY main.go .\n\nRUN CGO_ENABLED=0 go build -a -ldflags '-extldflags \"-static\"' main.go\n\n# Build using the base image for whisk docker action\nFROM openwhisk/dockerskeleton\n\nENV FLASK_PROXY_PORT 8080\n\nCOPY --from=0 /go/src/app/main /action/exec\n\nCMD [\"/bin/bash\", \"-c\", \"cd actionProxy && python -u actionproxy.py\"]\n```", "```\n$ docker build -t chanwit/whisk_go .\nSending build context to Docker daemon 2.242MB\nStep 1/8 : FROM golang:1.9.2-alpine3.6\n ---> bbab7aea1231\nStep 2/8 : WORKDIR /go/src/app\n ---> a219190c401f\nRemoving intermediate container 2a665bded884\nStep 3/8 : COPY main.go .\n ---> f0df3a87489d\nStep 4/8 : RUN CGO_ENABLED=0 go build -a -ldflags '-extldflags \"-static\"' main.go\n ---> Running in ec72e6f59a57\n ---> e0f943bac9a5\nRemoving intermediate container ec72e6f59a57\nStep 5/8 : FROM openwhisk/dockerskeleton\n ---> 25d1878c2f31\nStep 6/8 : ENV FLASK_PROXY_PORT 8080\n ---> Running in 846db07a0f5b\n ---> 543e673a9c79\nRemoving intermediate container 846db07a0f5b\nStep 7/8 : COPY --from=0 /go/src/app/main /action/exec\n ---> 8ec5987098d8\nStep 8/8 : CMD /bin/bash -c cd actionProxy && python -u actionproxy.py\n ---> Running in ea25c9a65bcc\n ---> a4193ccd5f48\nRemoving intermediate container ea25c9a65bcc\nSuccessfully built a4193ccd5f48\nSuccessfully tagged chanwit/whisk_go:latest\n```", "```\n$ wsk -i action create --docker chanwit/whisk_c whisk_c\nok: created action whisk_c\n```", "```\n$ wsk -i action invoke --param key value --result whisk_c\n{\n \"args\": {\n \"key\": \"value\"\n },\n \"msg\": \"Hello from C program!\"\n}\n```", "```\n$ wsk -i action create --docker chanwit/whisk_go whisk_go\nok: created action whisk_go\n```", "```\n$ wsk -i action invoke --param hello world --result whisk_go\n{\n \"keys\": [\n \"hello\"\n ],\n \"message\": \"Hello from Go\",\n \"values\": [\n \"world\"\n ]\n}\n```", "```\n$ wsk -i action invoke --param hello world whisk_go\nok: invoked /guest/whisk_go with id 6ba2c0fd6f4348b8a2c0fd6f4388b864\n```", "```\n$ wsk -i activation get 6ba2c0fd6f4348b8a2c0fd6f4388b864 response\nok: got activation 6ba2c0fd6f4348b8a2c0fd6f4388b864, displaying field response\n{\n \"status\": \"success\",\n \"statusCode\": 0,\n \"success\": true,\n \"result\": {\n \"keys\": [\n \"hello\"\n ],\n \"message\": \"Hello from Go\",\n \"values\": [\n \"world\"\n ]\n }\n}\n```", "```\n$ docker volume create surawhisk_vol\n```", "```\n$ docker run -d -p 8080:8080 -v surawhisk_vol:/root/data surawhisk/ui\n```", "```\n$ wsk property get --auth\nwhisk auth     23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP\n```"]