- en: Chapter 9. Managing Environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most organizations start with a single environment while building their infrastructures.
    However, as the complexity grows, it is imperative that we have a workflow that
    involves writing code and testing it in development environments, followed by
    an intensive QA cycle to make sure that the code is tested for stability in the
    staging, or preproduction, environment before we finally release it to production.
    In order to simulate a real-world behavior, these environments have to run identical
    stacks of applications, but most likely at different scales. For example, staging
    will be a small-scale replica of production with fewer servers, and most commonly,
    development environments would run on individual workstations in virtualized environments.
    Even though all these environments run an identical application stack, they have
    to be isolated from each other and must have environment-specific configurations,
    explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The applications in the `dev` group should not be pointing at databases in staging
    and vice versa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A production environment may have its own package repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A staging environment may run a web server on port `8080`, whereas all other
    environments run it on port `80`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With roles, we could create a modular code to configure these environments
    identically for all environments. Another important property of Ansible is its
    ability to separate code from data. Using these two in combination, we could model
    the infrastructure in a way that we would be able to create environment-specific
    configurations without having to modify the roles. We would be able to create
    them just by providing the variables from different places. Let''s take a look
    at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing Environments](img/B03800_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding diagram portrays three different environments, which are dev,
    stage, and production, within the same organization. All three run the same application
    stack, which involves a load balancer, web servers, and database servers. However,
    the two things to note here are that:'
  prefs: []
  type: TYPE_NORMAL
- en: Each environment has a different scale based on which host can be configured
    to run one or more roles (for example, `db` plus `www`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each environment is isolated from the other. A web server in a production environment
    will not connect to a database in staging, and vice versa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing multiple environments with Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separating inventory files per environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `group_vars` and `host_vars` groups to specify environment-specific
    configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Approaches for managing environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have already learned about the need to create different environments with
    identical roles, but with different data. At the time of writing this, more than
    one approach exists for managing such multiple environment scenarios with Ansible.
    We are going to discuss two approaches here, and you can use your best judgment
    to pick either of the two or create your own approach. There is no explicit way
    to create an environment, but the following are the built-in features of Ansible,
    which could come in handy:'
  prefs: []
  type: TYPE_NORMAL
- en: The use of an inventory to group together hosts that belong to one environment
    and isolate them from the hosts in other environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of inventory variables, such as the `group_vars` and `host_vars` groups,
    to provide environment-specific variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we proceed, it would be useful to review the inventory groups, variables,
    and precedence rules that are applicable to them.
  prefs: []
  type: TYPE_NORMAL
- en: The inventory groups and variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have already learned learned that the Ansible inventory follows an INI
    style configuration, where hosts are grouped together with group tags enclosed
    in square brackets, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The inventory groups and variables](img/B03800_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The inventory variables can then be specified so that they match these group
    names using `group_vars` or match specific hosts in the `host_vars` files. Apart
    from these group names, there is a provision to specify default variables for
    the `group_vars` and `host_vars` files using a file named "`all`", which gives
    rise to the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The inventory groups and variables](img/B03800_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In such a case, if you specify the same variable in the `all` and `webserver`
    files, the one variable that is more specific will take precedence. What this
    means is, if you define a variable in '`all`' and define it again in the '`webserver`'
    group under `group_vars`, the value of the parameters will be set to the one defined
    in '`webserver`', which is more specific. This is the behavior that we exploit
    in the approaches, which are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Approach 1 – using nested groups in an inventory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to being able to create groups using the INI style, Ansible supports
    nested groups, where a complete group can be part of another parent group. The
    first approach is based on this feature and is discussed step by step, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an environment directory to store environment-specific inventory files.
    It's a good idea to name them after the environments. Add hosts that are specific
    to that environment and group them. A group can be of any criteria, such as a
    role, location, server racks, and so on. For example, create a '`webservers`'
    group to add all the Apache web servers, or a group called '`in`' to add all the
    hosts belonging to that location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a parent group named after the environment name, such as, production, development,
    staging, and so on, and include all other groups that belong to that environment
    as a child. Each of these in turn include a group of hosts, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, create the common/default group variables in the `group_vars/all` file.
    These variables then can be overridden from the environment-specific files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To specify the environment-specific variables, create the `group_vars/{{env}}`
    file, which is shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is also going to override the variables in the `all` group. The following
    diagram shows the file structure created with this approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Approach 1 – using nested groups in an inventory](img/B03800_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once this has been created, it's just a matter of calling the environment-specific
    inventory with the `ansible-playbook` command run.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s take a look at the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Approach 2 – using environment-specific inventory variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The second approach does not require nested groups and relies on the following
    two features of Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: The `-i` option of Ansible-playbook also accepts a directory that can contain
    one or more inventory files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `host` and `group` variables can be relative to the inventory files in addition
    to the `group_vars` and `host_vars` groups in the root of the Ansible repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This approach will create completely isolated variable files for each environment.
    The file structure we created is portrayed in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Approach 2 – using environment-specific inventory variables](img/B03800_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the step-by-step method used for this approach:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an environment directory in the root of the Ansible repository. Under
    this, create one directory per environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Each of the environment directories contain two things:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A host's inventory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Inventory variables, for example, `group_vars` and `host_vars`. To make environment-specific
    changes, `group_vars` is relevant to us.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each environment contains its own `group_vars` directory, which in turn can
    have one or more files, including the `all` file as default. No two environments
    share these variables with others.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Caution**: In addition to the environment-specific `group_vars` group, it''s
    possible to use the `group_vars` file residing on top of the Ansible-playbook
    repository. However, it''s recommended that you don''t use it with this approach,
    as environment-specific changes are overridden by the values in the playbook `group_vars`
    if they are same.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this approach, the playbook can be launched specific to an environment
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, `environments/dev` is a directory.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After learning about how to manage environments, let''s try it out by refactoring
    our existing code and create a dev environment. To test it, let''s create a variable
    called "`env_name`" and change the default page of Nginx to dynamically use this
    variable and print the environment name. We will then try to override this variable
    from the environment. Let''s take a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by setting the default variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, change the Nginx task to use a template instead of a static file, so
    make the following modification in the `roles/nginx/tasks/configure.yml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify it into the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s now try running the playbook without creating the environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the run is complete, let's check the default web page:![Creating a development
    environment](img/B03800_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It prints the value of the variable that we set from the `group_vars/all` file,
    the default value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s now create a file that would allow us to manage a `dev` environment.
    Since we are going to use the same set of hosts, we could just convert our existing
    inventory to dev and add a parent group after the name of the environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add all the groups to the `dev` environment as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The inventory file is shown as follows and we''ve to make the following changes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s create a `group_vars` file for the `dev` environment and override
    the environment name:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This time, we are going to run the playbook as:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll see the following screenshot as the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a development environment](img/B03800_09_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Review questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Do you think you''ve understood this chapter well enough? Try answering the
    following questions to test your understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: How do you specify multiple host inventories for the same environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you define a variable in the `environments/dev/group_vars/all` file and the
    same in the `group_vars/all` file, which one will take precedence?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you create a group of groups in a host inventory file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create multiple environments that map to
    the software development workflow or the phases. We started with a brief overview
    of inventory groups and inventory variables, specifically, the `group_vars` file.
    This was followed by the two approaches used to manage environments. Finally,
    we refactored our code, went on to create the `dev` environment, and tested it
    by overriding one variable from the environment. In the next chapter, you are
    going to learn about infrastructure orchestration and how Ansible shines when
    it comes to orchestrating complex infrastructure workflows, zero downtime deployments,
    and so on.
  prefs: []
  type: TYPE_NORMAL
