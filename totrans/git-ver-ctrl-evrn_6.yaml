- en: Chapter 6. Unleash the Beast – Git on Text-based Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*We have seen two different modes of working with our content managed by Git
    in earlier chapters, with a gaming analogy calling it the single/solo player mode
    and multiplayer mode.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Hold on to your seats. This chapter is an answer to your long awaited question:
    What about the real multiplayer mode with several people playing in parallel?
    In other words, having multiple people work on the same stuff at the same time.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The concepts that we are going to learn about in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Merging and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving conflicts, making your way through the content in the way you or your
    team want to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git for text-based files – an introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Git arms itself with several functionalities when it comes to handling text
    files. On a higher level let''s understand the different file types and what they
    really mean using the following stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Git for text-based files – an introduction](img/7522_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Going from the top to the bottom, it is a layered approach starting with how
    a user sees a file, how a computer sees it, until its storage at the bottommost
    layer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Binary data**: Any file whose contents can be read only through specific
    programs, such as Microsoft Word for documents and picture viewer for images,
    is called binary data/values.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text data**: Any file, irrespective of its extension or nature, whose content
    is pure text and can be opened with a normal text editor like notepad or WordPad
    is considered to contain text data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To quote an example for giving more clarity, open up your `.git` directory
    inside your project, and you will see a file structure as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Git for text-based files – an introduction](img/7522_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here the file called **index** is considered to contain binary data whereas
    the files **COMMIT_EDITMSG**, **config**, **description**, and **HEAD** are considered
    to have textual data. Open them with your text editor and you'll understand why.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you don't alter anything in those files or else you might end up with
    a screwed up version of your repository, which might need a few maneuvers to fix,
    which we are not interested in at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: As another example, you can also try opening an image file with a text editor
    to view its raw content.
  prefs: []
  type: TYPE_NORMAL
- en: This is the basic difference that we were talking about. Let's talk more about
    it once we have understood the concept of **branching** and **merging**.
  prefs: []
  type: TYPE_NORMAL
- en: Multiplayer mode – multiple players at a time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's continue our gaming analogy from earlier chapters to relate to the multiplayer
    mode concept we have learned so far.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple players – one at a time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of your favorite adventure game that has multiple levels. Consider a scenario
    where you are stuck in a level without knowing how to proceed forward. After desperate
    attempts, which ended in vain, you suddenly realize that your friend is an expert
    on that level, and you want to use your friend's help. So you quickly share the
    last saved state of the game file with him with which he can finish that level
    for you, save the state, and push the file back to you, which will enable you
    to continue the game.
  prefs: []
  type: TYPE_NORMAL
- en: The same situation can apply to you when you are working with data files, especially
    when you are working as a team where different people take care of different parts
    of a bigger task to produce a single result. Another possibility might be that
    you want the domain experts to handle specific portions of the work, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: This also means that having multiple people working on the same document one
    topic at a time, where one passes the file to another to get the work done in
    a sequence, might go smoothly, but having multiple people working on the same
    file on the same topic might end up in chaos when it comes to files containing
    binary data.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple players – all hands on deck (many at a time)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I'm a big fan of **first person shooter** (**FPS**) games. *Counter-Strike*
    stays at the top of my list even today. Let's take *Counter-Strike* or any other
    team game for comparison here. Each team member will be a specialist in not only
    one but two or three weapons to adapt to situations. And when required, they pitch
    in to take out the opponent together and complete the objective.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, when you deal with textual data in files, you can have multiple people
    collaboratively working on the same file, topic, and line, and manage to produce
    a unified output with Git. Let's learn how to put this feature to better use.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing your repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two commonly used modes to share your repository with others.
  prefs: []
  type: TYPE_NORMAL
- en: Intranet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having got used to the way of sharing over the Internet using Bitbucket, this
    time let's emulate sharing over the intranet using the bare repository concepts
    we learned in [Chapter 4](ch04.html "Chapter 4. Split the Load – Distributed Working
    with Git"), *Split the Load – Distributed Working with Git*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not able to recall, I suggest you go through the *Staying local –
    share over intranet* topic in [Chapter 4](ch04.html "Chapter 4. Split the Load
    – Distributed Working with Git"), *Split the Load – Distributed Working with Git*
    to understand what the bare repository is, why we need one, and how it operates.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – getting ready to share
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To keep things clear and simple we shall start with a fresh instance with minimal
    data, so that the changes are evident.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new directory and call it `collab_source`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the directory create a new text file called `mycontent.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up the text file that you just created, and enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now make the `collab_source` directory a Git repository; then add the file `mycontent.txt`
    and make a commit with a commit message saying "Base commit from source".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now this copy will reside in your machine for your own manipulation. Let's create
    a bare repository from your copy to put it in a common place from where your team
    members can clone it to have their own copy of the files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For creating a bare clone of your existing repository, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this example, to convey the concept I have cloned the `bare_collab` repository
    in my local system itself instead of a common network share directory. But the
    procedures are one and the same.
  prefs: []
  type: TYPE_NORMAL
- en: The main aim of this topic is to convey the multiuser concept so I have chosen
    only one mode (CLI) of execution. Mostly the GUI equivalent of these commands
    is already known to you. In case of an exception a quick note on the GUI options
    is provided.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have created a source repository with our content and then cloned a bare
    repository out of our source repository, which in turn has opened up the clone
    option for our team members. If you have followed the preceding steps, you should
    see a structure like the one shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/7522_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – distributed work force
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now to get their own copy of the files, Bob and Lisa, our fictitious team members,
    can execute the usual `git clone` command with the source as the `bare_collab`
    repository and the destination as their preferred location.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unless Git reported an error, Bob and Lisa have cloned the files from our bare
    repository named `bare_collab`. Now, the structure of how these repositories evolved
    is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/7522OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And how the commit tree looks like is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/7522OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – Bob's changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now Bob feels that he needs to change the content of the file. So he opens
    and changes the first line''s text to "First line from source - Changed by Bob"
    so that the content of the file looks like the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then he adds the change and commits the same as shown in the following screenshot:![Time
    for action – Bob's changes](img/7522_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the interest of sharing the change with team members, he wants to push his
    changes to the common bare repository but as a rule of thumb, when working with
    multiple people on Git, pull before pushing so as to incorporate the changes first
    in case somebody has already pushed before you. Bob does a `git pull` *first*
    and *then* a `git push` as shown in the following screenshot:![Time for action
    – Bob's changes](img/7522_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because of this push operation, the bare repository has progressed its level
    along with Bob''s changes whereas the repository at our machine (`collab_source`)
    and Lisa''s are still behind. Now the commit tree looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/7522OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – Lisa's changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While Bob was doing all these operations, Lisa made her own changes. She also
    happened to change the first line of the file and appended one more line to it,
    which made the content of the file look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then she adds the change and commits the same as shown in the following screenshot:![Time
    for action – Lisa's changes](img/7522_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the interest of sharing the change with team members, Lisa wants to push
    her changes to the common bare repository, but as the rule of the thumb, when
    working with multiple people, do a pull before pushing so as to incorporate the
    changes first in case somebody has already pushed before you. She does a `git
    pull` *first*, which gives her the following error message:![Time for action –
    Lisa's changes](img/7522_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lisa made changes, added, committed, and when she tried to pull from the central
    `bare_collab` repository, got bumped into a merge conflict.
  prefs: []
  type: TYPE_NORMAL
- en: If you focus on the last three lines, it would be evident why the pull got stopped.
    Git automatically tried to merge the changes Lisa made with the changes already
    pushed by Bob in the file `mycontent.txt`. Because both have changed the first
    line, Git smartly stops the merging and asks us to fix the conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – Lisa examines the merge conflict
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lisa opens up the file to see the conflict that is stopping her and finds a
    pattern as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first line, which has continuous left arrows with the word `HEAD` is nothing
    but Lisa's current position in the repository. The next line shows the changes
    made by her to the file.
  prefs: []
  type: TYPE_NORMAL
- en: This is followed by continuous `=` signs, which marks the end of Lisa's content
    and beginning of Bob's content. It's a separator, which is immediately followed
    by Bob's content in the next line, which is then followed by the commit ID generated
    when Bob made that change.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – Lisa resolves the merge conflict
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Resolving the conflict is a very simple procedure. You are given four choices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify an order and have both the changes (which in our case are Lisa's and
    Bob's changes)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete the existing change and impose yours
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete your change and apply the change fetched
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete both
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: However, the fourth option is very unlikely to happen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To perform any of these operations on the content, one can use a common text
    editor or an interactive merge tool, which will give you three views (local, base,
    and remote) using which you need to solve your commits.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Local view** is the current modified version, **base** is our earlier version
    before modification, which gets decided by Git automatically, and **remote** is
    the modified remote version, which we are trying to fetch and merge. You need
    to move and order your changes along with the remote version using the arrows
    and indicators available. A screenshot of how an interactive merge tool (I have
    showcased **meld**, which is a python based utility) looks as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Lisa resolves the merge conflict](img/7522_06_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We will use a normal text editor to solve this situation now, so as to understand
    the underlying concept.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Lisa is going to go with the first option of ordering and incorporating both
    the changes; let's see how she does it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Lisa feels that having Bob''s changes up the order is better followed by hers.
    After deciding the order, she opens the file using an ordinary text editor and
    changes the content as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After making the previously mentioned changes, she *adds* the change and *commits*
    it with the message "Merge - Posted Bob''s change to the top followed by mine"
    as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Lisa resolves the merge conflict](img/7522_06_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Following this, Lisa pushes her commits to our central bare repository (`bare_collab`)
    with the usual `push` command, as shown in the following screenshot:![Time for
    action – Lisa resolves the merge conflict](img/7522_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lisa has successfully resolved the conflicts and made her changes available
    to other members of the team by pushing the changes to the central bare repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should give a commit tree structure as shown in the following flow diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/7522OS_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the diagram, C3 (the local commit made by Lisa) and C2 (the
    commit made and shared by Bob) are being merged to form a new commit called merge
    commit C4.
  prefs: []
  type: TYPE_NORMAL
- en: At any given point of time you can get such graphical representations both from
    the GUI as well as CLI mode.
  prefs: []
  type: TYPE_NORMAL
- en: GUI mode – get the repository's history graph
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Select **Visualize all branch history** form the **Repository** menu of Git
    Gui. Once Gitk opens, at the top left you have your repository''s history visualization.
    Lisa''s visualization is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![GUI mode – get the repository''s history graph](img/7522_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CLI mode – get the repository's history graph
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In your terminal/console, switch to the Git repository''s location and then
    use the following command to get a tree representation of its history:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see a representation as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CLI mode – get the repository''s history graph](img/7522_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – team members get sync with the central bare repo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bob feels it's been a while since he received updates from the bare repos so
    he pulls to get the latest changes, with the results being as follows:![Time for
    action – team members get sync with the central bare repo](img/7522_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Well, finally let''s not forget the source repository, mother of all these
    repositories, for the update. Before doing a `git pull` from there we should point
    to the origin as the bare repository, and then perform a pull operation. The commands
    are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives us an output as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – team members get sync with the central bare repo](img/7522_06_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: As we have learned in *Time for action – adding a remote origin* in [Chapter
    4](ch04.html "Chapter 4. Split the Load – Distributed Working with Git"), *Split
    the Load – Distributed Working with GIT*, adding a remote would be a one time
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: We can manually open the file or do a `git log` to see the changes taking effect
    across repositories.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully synced the changes across different repositories made by
    different people on the same file, and the same line at the same time thereby
    achieving the promised collaborative work environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have learned:'
  prefs: []
  type: TYPE_NORMAL
- en: The difference between files' content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How powerful Git can be on textual files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, we have also learned how to merge and manage conflicts occurring
    while merging.
  prefs: []
  type: TYPE_NORMAL
- en: Not only that, we did a role play and practically learned how to set up a collaborative
    work environment with multiple people working on the same file, topic, and even
    the same line. We also learned how to integrate work from different people together
    to form one output.
  prefs: []
  type: TYPE_NORMAL
