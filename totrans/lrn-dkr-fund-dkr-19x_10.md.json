["```\n$ docker image prune -f\n```", "```\n$ docker container rm <container-id>\n```", "```\n$ docker container prune --force\n```", "```\n$ docker volume prune\nWARNING! This will remove all local volumes not used by at least one container.\nAre you sure you want to continue? [y/N]\n```", "```\n$ docker volume rm <volume-name>\n```", "```\n#! /bin/bash\n# *** Sample script to build, test and push containerized Node.js applications ***\n# build the Docker image\ndocker image build -t $HUB_USER/$REPOSITORY:$TAG .\n# Run all unit tests\ndocker container run $HUB_USER/$REPOSITORY:$TAG npm test\n# Login to Docker Hub\ndocker login -u $HUB_USER -p $HUB_PWD\n# Push the image to Docker Hub\ndocker image push $HUB_USER/$REPOSITORY:$TAG\n```", "```\n$ mkdir builder && cd builder\n```", "```\nFROM alpine:latest\nRUN apk update && apk add docker\nWORKDIR /usr/src/app\nCOPY . .\nCMD ./pipeline.sh\n```", "```\n$ chmod +x ./pipeline.sh\n```", "```\n$ docker image build -t builder .\n```", "```\n$ cd ~/fod/ch08/sample-app\n$ docker container run --rm \\\n --name builder \\\n -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v \"$PWD\":/usr/src/app \\\n -e HUB_USER=<user> \\\n -e HUB_PWD=<password>@j \\\n -e REPOSITORY=ch08-sample-app \\\n -e TAG=1.0 \\\n builder\n```", "```\n$ docker container ps -a \\\n--format \"table {{.Names}}\\t{{.Image}}\\t{{.Status}}\"\n```", "```\nNAMES              IMAGE            STATUS\nelated_haslett     alpine           Up 2 seconds\nbrave_chebyshev    hello-world      Exited (0) 3 minutes ago\n```", "```\n$ docker image ls --filter dangling=false --filter \"reference=*/*/*:latest\"\n```", "```\nREPOSITORY                                  TAG     IMAGE ID      CREATED   SIZE\ndocker.bintray.io/jfrog/artifactory-cpp-ce  latest  092f11699785  9 months  ago 900MB\ndocker.bintray.io/jfrog/artifactory-oss     latest  a8a8901c0230  9 months  ago 897MB\n```", "```\nFROM node:12.10-alpine\nWORKDIR /usr/src/app\nCOPY . .\nRUN npm install\nCMD npm start\n```", "```\nFROM node:12.10-alpine\nWORKDIR /usr/src/app\nCOPY package.json ./\nRUN npm install\nCOPY . .\nCMD npm start\n```", "```\n$ docker container run --rm -it \\\n    --name stress-test \\\n --memory 512M \\\n ubuntu:19.04 /bin/bash\n```", "```\n/# apt-get update && apt-get install -y stress\n```", "```\n/# stress -m 4\n```", "```\n$ docker container run -d --rm \\\n --name billing \\\n --read-only \\\n acme/billing:2.0\n```", "```\n$ docker container run --tty -d \\\n    --name billing \\\n    --read-only \\\n    alpine /bin/sh \n$ docker container exec -it billing \\\n sh -c 'echo \"You are doomed!\" > ./sample.txt' sh: can't create ./sample.txt: Read-only file system\n```", "```\ngabriel@dev $ sudo su\nPassword: <root password>\nroot@dev $\n```", "```\nroot@dev $ echo \"You should not see this.\" > top-secret.txt\nroot@dev $ chmod 600 ./top-secret.txt\nroot@dev $ exit\ngabriel@dev $\n```", "```\ngabriel@dev $ cat ./top-secret.txt\ncat: ./top-secret.txt: Permission denied\n```", "```\nFROM ubuntu:latest\nCOPY ./top-secret.txt /secrets/\n# simulate use of restricted file\nCMD cat /secrets/top-secret.txt\n```", "```\ngabriel@dev $ sudo su\nPassword: <root password>\nroot@dev $ docker image build -t demo-image .\nroot@dev $ exit\ngabriel@dev $\n```", "```\ngabriel@dev $ docker container run demo-image You should not see this.\n```", "```\nFROM ubuntu:latest\nRUN groupadd -g 3000 demo-group |\n && useradd -r -u 4000 -g demo-group demo-user\nUSER demo-user\nCOPY ./top-secret.txt /secrets/\n# simulate use of restricted file\nCMD cat /secrets/top-secret.txt\n```", "```\ngabriel@dev $ sudo su\nPassword: <root password>\nroot@dev $ docker image build -t demo-image .\nroot@dev $ exit\ngabriel@dev $ docker container run demo-image cat: /secrets/top-secret.txt: Permission denied\n```", "```\n$ ssh gnschenker@40.115.4.249\n```", "```\n$ sudo usermod -aG docker <user-name>\n```", "```\n$ docker container run --rm \\\n    --name shellinabox \\\n -p 4200:4200 \\\n    -e SIAB_USER=gnschenker \\\n -e SIAB_PASSWORD=top-secret \\\n -e SIAB_SUDO=true \\\n -v `pwd`/dev:/usr/src/dev \\\n sspreitzer/shellinabox:latest\n```", "```\n$ sudo apt-get update && sudo apt-get install -y vim\n```", "```\n$ VERSION=<version>\n$ wget https://github.com/cdr/code-server/releases/download/${VERSION}/code-server${VERSION}-linux-x64.tar.gz\n$ tar -xvzf code-server${VERSION}-linux-x64.tar.gz\n```", "```\n$ cd code-server${VERSION}-linux-x64\n$ chmod +x ./code-server\n$ sudo ./code-server -p 4200\n```", "```\n$ docker container run -it \\\n -p 4200:8080 \\\n -v \"${HOME}/.local/share/code-server:/home/coder/.local/share/code-server\" \\\n -v \"$PWD:/home/coder/project\" \\\n codercom/code-server:v2\n```", "```\ninfo Server listening on http://0.0.0.0:8080\ninfo - No authentication\ninfo - Not serving HTTPS\n```"]