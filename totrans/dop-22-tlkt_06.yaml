- en: Choosing A Solution For Metrics Storage And Query
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择度量存储和查询解决方案
- en: Every cluster needs to collect metrics. They are the basis of any alerting system
    we might want to employ. Without the information about the current and the past
    state of a cluster, we would not be able to react to problems when they occur
    nor would we be able to prevent them from happening in the first place. Actually,
    that is not entirely accurate. We could do all those things, but not in a way
    that is efficient and scalable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 每个集群都需要收集度量指标。这些指标是我们可能想要使用的任何告警系统的基础。如果没有集群当前和过去状态的信息，我们将无法在问题发生时做出反应，也无法从一开始就防止问题的发生。事实上，这并不完全准确。我们本可以做所有这些事，但无法以高效且可扩展的方式进行。
- en: A good analogy is blindness. Being blind does not mean that we cannot feel our
    way through an environment. Similarly, we are not helpless without a way to collect
    and query metrics. We can SSH into each of the nodes and check the system manually.
    We can start by fiddling with `top`, `mem`, `df`, and other commands. We can check
    the status of the containers with the `docker stats` command. We can go from one
    container to another and check their logs. We can do all those things, but such
    an approach does not scale. We cannot increase the number of operators with the
    same rhythm as the number of servers. We cannot convert ourselves into human machines.
    Even if we could, we would be terrible at it. That’s why we have tools to help
    us. And, if they do not fulfill our needs, we can build our own solutions on top
    of them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的类比是失明。失明并不意味着我们不能通过触觉在环境中移动。同样，如果没有收集和查询度量指标的方法，我们也并非无能为力。我们可以通过 SSH 进入每个节点，手动检查系统。我们可以从使用
    `top`、`mem`、`df` 等命令开始。我们可以通过 `docker stats` 命令检查容器的状态。我们可以在一个容器与另一个容器之间切换，查看它们的日志。我们可以做所有这些事，但这种方式无法扩展。我们无法让操作员的数量与服务器的数量同步增长。我们无法将自己转变为人类机器。即使我们能够做到，也会非常糟糕。这就是为什么我们需要工具来帮助我们。如果这些工具不能满足我们的需求，我们可以在它们之上构建自己的解决方案。
- en: There are many tools we can choose. It would be impossible to compare them all,
    so we’ll limit the scope to only a handful.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择的工具有很多。要将它们一一比较几乎是不可能的，所以我们将限制范围，只讨论少数几个。
- en: We’ll focus on open source projects only. Some of the tools we’ll discuss have
    a paid enterprise offering in the form of additional features. We’ll exclude them
    from the comparison. The reason behind the exclusion lies in my belief that we
    should always start with open source software, get comfortable with it, and only
    once it proves its worth, evaluate whether it is worthwhile switching to the enterprise
    version.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将只关注开源项目。我们将讨论的一些工具有付费的企业版，提供附加功能。我们将从比较中排除这些工具。排除的原因是我认为我们应该始终从开源软件开始，先对其进行熟悉，只有当它证明其价值后，才评估是否值得切换到企业版。
- en: Moreover, we’ll introduce one more limitation. We will explore only the solutions
    that we can host ourselves. That excludes hosted services like, for example, [Scout](https://scoutapp.com/)
    or [DataDog](https://www.datadoghq.com/). The reason behind such a decision is
    two-fold. Many organizations are not willing to “give” their data to a third-party
    hosted service. Even if there is no such restriction, a hosted service would need
    to be able to send alerts back to our system and that would be a huge security
    breach. If neither of those matters to you, they are not flexible enough. None
    of the services I know will give us enough flexibility to build a *self-adapting*
    and *self-healing* system. Besides, the purpose of this book is to give you free
    solutions, hence the insistence on open source solutions that you can host yourself.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将引入一个额外的限制条件。我们将仅探讨那些可以自行托管的解决方案。这排除了像 [Scout](https://scoutapp.com/)
    或 [DataDog](https://www.datadoghq.com/) 这样的托管服务。做出这一决定的原因有两个方面。一方面，许多组织不愿意将数据“交给”第三方托管服务。即使没有这样的限制，托管服务也需要能够将警报发送回我们的系统，而这将是一个巨大的安全漏洞。如果这些问题对你来说不重要，那么它们的灵活性也不足以满足需求。我所知道的没有任何服务能提供足够的灵活性来构建一个*自适应*和*自愈*的系统。而且，本书的目的是为你提供免费的解决方案，因此坚持使用可以自己托管的开源解决方案。
- en: That does not mean that paid software is not worth the price nor that we should
    not use, and pay for, hosted service. Quite the contrary. However, I felt it would
    be better to start with things we can build ourselves and explore the limits.
    From there on, you will have a better understanding what you need and whether
    paying money for that is worthwhile.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着付费软件不值这个价格，或者我们不应该使用并支付托管服务。恰恰相反。然而，我觉得从我们可以自己构建的工具开始，并探索其极限会更好。从那里开始，你将更好地理解自己需要什么，以及支付费用是否值得。
- en: Non-Dimensional vs. Dimensional Metrics
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无量纲与有量纲的度量
- en: Before we explore the tools we’ll choose from, we should discuss different approaches
    to storing and collecting metrics.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探讨选择的工具之前，我们应该讨论不同的度量存储和收集方法。
- en: We can divide the tools by dimensions. Some can store data with dimensions while
    others cannot. Representatives of those that are dimensionless would be Graphite
    and Nagios. Truth be told, there is a semblance of dimensions in Graphite, but
    they are so limited in their nature that we’ll treat it as dimensionless. Some
    of the solutions that do support dimensions are, for example, InfluxDB and Prometheus.
    The former supports them in the form of key/value pairs while the latter uses
    labels.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据维度来划分工具。一些工具可以存储带有维度的数据，而其他工具则不能。无量纲度量工具的代表是Graphite和Nagios。说实话，Graphite中确实有某种维度的形式，但由于它们本质上非常有限，我们会将其视为无量纲工具。支持维度的解决方案有，例如InfluxDB和Prometheus。前者以键/值对的形式支持维度，后者则使用标签。
- en: Non-dimensional (or dimensionless) metric storage belongs to the *old world*
    when servers were relatively static, and the number of targets that were monitored
    was relatively small. That can be seen from the time those tools were created.
    Both Nagios and Graphite are older tools than InfluxDB and Prometheus.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 无量纲（或无维度）度量存储属于*旧世界*，那时服务器相对静态，被监控的目标数量较少。这可以从这些工具创建的时间看出来。Nagios和Graphite都比InfluxDB和Prometheus更早。
- en: Why are dimensions relevant? Query language needs them to be effective. Without
    dimensions, the language is bound to be limited in its capabilities. That does
    not mean that we always need dimensions. For a simple monitoring, they might be
    an overhead. However, running a scalable cluster where services are continuously
    deployed, scaled, updated, and moved around is far from simple. We need metrics
    that can represent all the dimensions of our cluster and the services running
    on top of it. A dynamic system requires dynamic analytics, and that is accomplished
    with metrics that include dimensions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么维度相关？查询语言需要维度才能有效。如果没有维度，语言的能力必然受到限制。这并不意味着我们总是需要维度。对于简单的监控，维度可能是多余的。然而，运行一个可扩展的集群，其中服务不断部署、扩展、更新和移动，可远非简单。我们需要能够表示集群所有维度和其上运行服务的度量。一个动态系统需要动态分析，这需要包含维度的度量来实现。
- en: An example of a dimensionless metric would be `container_memory_usage`. Compare
    that with `container_memory_usage{service_name="my-service", task_name="my-service.2.###",
    memory_limit="20000000", ...}"`. The latter example provides much more freedom.
    We can calculate average memory usage as we’d do with dimensionless but we can
    also deduce what the memory limit is, what is the name of the service, which replica
    (task) it is, and so on, and so forth.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个无量纲度量的例子是`container_memory_usage`。与此相比，`container_memory_usage{service_name="my-service",
    task_name="my-service.2.###", memory_limit="20000000", ...}`则提供了更多的自由度。我们可以像无量纲度量那样计算平均内存使用量，但我们还可以推断出内存限制、服务名称、该任务是哪个副本（任务），等等。
- en: Are dimensions (or lack of them) the only thing that distinguishes tools for
    storing and analyzing metrics? Among others, the way those metrics end up in a
    database makes a difference that might be significant. Some of the tools expect
    data to be pushed while others will pull (or scrape) them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 维度（或缺乏维度）是区分存储和分析度量工具的唯一因素吗？除此之外，这些度量最终如何进入数据库也是一个可能产生显著差异的因素。一些工具期望数据被推送，而其他工具则会拉取（或抓取）数据。
- en: If we stick with the tools we mentioned previously, representatives of a push
    method would be Graphite and InfluxDB, while Nagios and Prometheus would belong
    to the pull group.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们坚持之前提到的工具，推送方法的代表是Graphite和InfluxDB，而Nagios和Prometheus则属于拉取组。
- en: Those that fall into the push category are expecting data to come to them. They
    are passive (at least when metrics gathering is concerned). Each of the services
    that collect data is supposed to push them into one central location. Popular
    examples would be *collectD* and *statsD*. Pull system, on the other hand, is
    active. It will scrape data from all specified targets. Data collectors do not
    know about the existence of the database. Their only purpose is to gather data
    and expose them through a protocol acceptable to the system that will pull them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那些属于推送类别的系统期望数据主动送到它们那里。它们是被动的（至少在指标收集方面是这样的）。每个收集数据的服务应该将数据推送到一个中心位置。*collectD*
    和 *statsD* 就是流行的例子。而拉取系统则是主动的。它会从所有指定的目标中抓取数据。数据收集器并不知道数据库的存在。它们的唯一目的是收集数据并通过一种系统可以接受的协议将数据暴露出来。
- en: A discussion about pros and cons of each system is raging for quite some time.
    There are many arguments in favor of one over the other system, and we could spend
    a lot of time going through all of them. Instead, we’ll discuss discovery, the
    argument that is, in my opinion, the most relevant.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关于每个系统的优缺点的讨论已经激烈进行了一段时间。关于为何一个系统优于另一个系统的论据有很多，我们可以花费大量时间来讨论它们。相反，我们将讨论发现机制，这个论点在我看来是最相关的。
- en: With the push system, discovery is easy. All that data collectors need to know
    is the address of the metrics storage and push data. As long as that address keeps
    being operational, the configuration is very straight forward. With the pull system,
    the system needs to know the location of all the data collectors (or exporters).
    When there are only a few, that is easy to configure. If that number jumps to
    tens, hundreds, or even thousands of targets, the configuration can become very
    tedious. That situation clearly favors the push model. But, technology changed.
    We have reliable systems that provide service discovery. Docker Swarm, for example,
    has it baked in as part of Docker Engine. Finding targets is easy and, assuming
    that we trust service discovery, we always have up to date information about all
    the data collectors.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在推送系统中，发现是容易的。数据收集器只需要知道指标存储的地址并推送数据。只要该地址保持可用，配置就非常简单。对于拉取系统，系统需要知道所有数据收集器（或导出器）的地址。当只有少数几个时，这很容易配置。如果数量增加到数十、数百甚至数千个目标时，配置可能会变得非常繁琐。这种情况显然更有利于推送模式。但技术发生了变化。我们现在有了可靠的系统来提供服务发现。例如，Docker
    Swarm 就将其作为 Docker 引擎的一部分内置。找到目标非常容易，并且假设我们信任服务发现，我们总是能获取到所有数据收集器的最新信息。
- en: With a proper service discovery in place, pull vs. push debate becomes, more
    or less, irrelevant. That brings us to an argument that makes pull more appealing.
    It is much easier to discover a failed instance or a missing service when pulling
    data. When a system expects data collectors to push data, it is oblivious whether
    something is missing. We can summarize the problem with “I don’t know what I don’t
    know.” Pull systems, on the other hand, know what to expect. They know what their
    targets are and it is very easy to deduce that when a scraping target does not
    respond, the likely cause is that it stopped working.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个适当的服务发现机制，拉取与推送的争论就变得或多或少无关紧要。这引出了一个让拉取更加有吸引力的论点。拉取数据时，发现一个失败的实例或缺失的服务要容易得多。当一个系统期望数据收集器推送数据时，它并不会意识到有什么东西缺失。我们可以用“我不知道我不知道什么”来总结这个问题。另一方面，拉取系统知道应该期待什么。它们知道它们的目标是什么，当一个抓取目标没有响应时，很容易推测其原因是它停止了工作。
- en: '![Figure 2-1: Monitoring tools placement based on dimensions and data collection
    methods](img/00007.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 2-1：根据维度和数据收集方法放置的监控工具](img/00007.jpeg)'
- en: 'Figure 2-1: Monitoring tools placement based on dimensions and data collection
    methods'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1：根据维度和数据收集方法放置的监控工具
- en: Neither of the arguments for push or pull are definitive, and we should not
    make a choice only based on that criteria. Instead, we’ll explore the tools we
    discussed a bit more.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是推送还是拉取的论点都不是绝对的，我们不应该仅仅基于这些标准做出选择。相反，我们将稍微深入探讨我们之前讨论过的工具。
- en: The first one on the list is Graphite.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 排行榜上的第一个是 Graphite。
- en: Graphite
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Graphite
- en: Graphite is a passive metrics storage tool. The reason we call it passive lies
    in its inability to collect metrics. They need to be collected and pushed in a
    separate process.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Graphite 是一个被动的指标存储工具。我们之所以称其为被动，是因为它不能收集指标。指标需要通过单独的进程进行收集并推送。
- en: It is a time series database with its own query language and capabilities to
    produce graphs. Querying API is powerful. Or, to be more precise, was considered
    powerful when it appeared. Today, when compared with some other tools, its query
    language is limiting, mainly due to its dimensionless format for storing metrics.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个时序数据库，拥有自己的查询语言和生成图表的能力。查询API非常强大。或者，更准确地说，在它出现时被认为非常强大。今天，与其他一些工具相比，它的查询语言显得有些局限，主要是由于它用于存储度量标准的无维度格式。
- en: Graphite stores numeric data in time series format. Its metric names consist
    of dot-separated elements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Graphite将数值数据存储为时序格式。它的度量名称由点分隔的元素组成。
- en: Data is stored on a local disk.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储在本地磁盘上。
- en: InfluxDB
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: InfluxDB
- en: Just like Graphite, InfluxDB is a time series database. Unlike Graphite, Influx
    DB data model is based on key/value pairs in the form of labels.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Graphite一样，InfluxDB也是一个时序数据库。与Graphite不同，InfluxDB的数据模型是基于标签形式的键值对。
- en: InfluxDB (open source version, to be more precise) relies on local storage for
    storing data, and its scraping, rule processing, and alerting.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: InfluxDB（更准确地说是开源版本）依赖本地存储来存储数据，并进行抓取、规则处理和告警。
- en: Nagios and Sensu
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nagios和Sensu
- en: Nagios is a monitoring system that originated in the 90s as NetSaint. It is
    primarily about alerting based on the exit codes of scripts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios是一个起源于90年代的监控系统，最初名为NetSaint。它主要通过脚本的退出码进行告警。
- en: Unlike other solutions, the amount and types of data it stores is limited to
    check state making it suitable only for a very basic monitoring.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他解决方案不同，它存储的数据量和数据类型受到限制，仅用于检查状态，因此只适合非常基础的监控。
- en: Sensu can be considered a more modern version of Nagios. The primary difference
    is that Sensu clients register themselves, and can determine the checks to run
    either from a central or local configuration. There is also a client socket permitting
    arbitrary check results to be pushed into Sensu.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Sensu可以视为Nagios的更现代版本。主要的区别在于，Sensu客户端会自行注册，并可以从中央或本地配置中决定要运行的检查项。它还有一个客户端套接字，允许将任意的检查结果推送到Sensu中。
- en: Sensu uses (almost) the same data model as Nagios and shares its limitation
    of the format it uses to store metrics.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Sensu使用与Nagios几乎相同的数据模型，并且共享其在存储度量标准时使用的格式的限制。
- en: Prometheus
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Prometheus
- en: Prometheus is a full monitoring and trending system that includes built-in and
    active scraping, storing, querying, graphing, and alerting based on time series
    data. It has knowledge about what the world should look like (which endpoints
    should exist, what time series patterns mean trouble, etc.), and actively tries
    to find faults.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus是一个完整的监控和趋势分析系统，包含内置的主动抓取、存储、查询、绘图和基于时序数据的告警功能。它了解世界应该是什么样子（哪些端点应该存在，什么时序模式表示问题，等等），并主动寻找故障。
- en: Prometheus has a rich data model and probably the most powerful query language
    among time series databases. It encodes dimensions explicitly as key-value pairs
    (labels) attached to a metric name. That allows easy filtering, grouping, and
    matching by these labels via in the query language.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus拥有丰富的数据模型，并且可能是时序数据库中最强大的查询语言。它将维度显式地编码为附加在度量名称上的键值对（标签）。这使得通过查询语言可以轻松地按这些标签进行过滤、分组和匹配。
- en: Which Tool Should We Choose?
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们应该选择哪种工具？
- en: All the tools we listed are (or were) good in their merit. They are different
    in many aspects while similar in others.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们列出的所有工具都各有优点。它们在许多方面有所不同，但在某些方面又是相似的。
- en: Nagios and Sensu served us well in the past. They were designed in a different
    era and based on principles that are today considered obsolete. They work well
    with static clusters and monolithic applications and services running on predefined
    locations. The metrics they store (or lack of them) are not suitable for more
    complex decision making. We would have a hard time using them as means to accomplish
    our goals of operating a scheduler like Docker Swarm running in an auto-scalable
    cluster. Among the solutions we explored, they are the first ones we should discard.
    One is out; three are left to choose from.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios和Sensu过去为我们提供了很好的服务。它们设计于不同的时代，基于今天被认为已经过时的原则。它们在静态集群和运行在预定义位置的单体应用程序与服务中表现良好。它们存储的度量标准（或缺乏度量标准）并不适合进行更复杂的决策。在我们想要运营像Docker
    Swarm这样的调度器，运行在一个自动扩展的集群中时，它们会让我们遇到很大的困难。在我们探索的解决方案中，它们是最先应该被舍弃的。一个被淘汰，剩下三个可以选择。
- en: Dot-separated metrics format used by Graphite is limiting. Excluding elements
    of a metric with asterisks (`*`) is often inadequate for proper filtering, grouping,
    and other operations. Its query language, when compared with InfluxDB and Prometheus,
    is the main reason we’ll discard it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Graphite 使用的点分隔度量格式存在局限性。使用星号（`*`）排除度量的元素往往不足以进行适当的过滤、分组和其他操作。与 InfluxDB 和 Prometheus
    相比，它的查询语言是我们放弃它的主要原因。
- en: We’re left with InfluxDB and Prometheus as finalists and are facing only minor
    differences.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们剩下的选择是 InfluxDB 和 Prometheus，二者的差异仅在于一些细微之处。
- en: InfluxDB and Prometheus are similar in many ways, so the choice is not going
    to be an easy one. Truth be told, we cannot make a wrong decision. Whichever we
    choose of the two, the choice will be based on slight differences.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: InfluxDB 和 Prometheus 在许多方面相似，因此选择并不容易。说实话，我们不可能做出错误的决策。不论我们选择哪个，最终的决定都会基于一些细小的差异。
- en: If we would not limit ourselves to open source solutions as the only candidates,
    InfluxDB enterprise version could be the winner due to its scalability. However,
    we will discard it in favor of Prometheus. It provides a more complete solution.
    More importantly, Prometheus is slowly becoming the de-facto standard, at least
    when working with schedulers. It is a preferred solution in Kubernetes. Docker
    (and therefore Swarm) is soon going to expose its metrics in Prometheus format.
    That, in itself, is the tipping point that should make us lean slightly more towards
    Prometheus.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不局限于开源解决方案作为唯一候选项，那么 InfluxDB 企业版可能会因为其可扩展性而成为赢家。然而，我们将放弃它，选择 Prometheus。它提供了更为完整的解决方案。更重要的是，Prometheus
    正在慢慢成为事实上的标准，至少在与调度器一起使用时是如此。它在 Kubernetes 中是首选解决方案。Docker（因此 Swarm）很快会以 Prometheus
    格式公开其度量数据。这一点本身就是一个转折点，应该让我们更倾向于选择 Prometheus。
- en: The decision is made. We’ll use Prometheus to store metrics, to query them,
    and to trigger alerts.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 决定已定。我们将使用 Prometheus 来存储度量数据，查询它们，并触发警报。
- en: What Now?
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接下来怎么办？
- en: Now that we decided which tool will be the basis for storing metrics, we should
    proceed with the setup. Since we will be using Docker Swarm services, deploying
    Prometheus in its most basic form will be a breeze.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经决定了用于存储度量数据的工具基础，接下来应当进行设置。由于我们将使用 Docker Swarm 服务，以最基本的形式部署 Prometheus
    将会非常轻松。
