- en: Building an OpenShift Lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we briefly discussed the differences between IaaS and
    PaaS solutions. We also discussed OpenShift as a part of the PaaS solution. We
    provided a basic explanation of OpenShift's business value and the main OpenShift
    components.
  prefs: []
  type: TYPE_NORMAL
- en: Some OpenShift users don't want to spend time deploying and configuring the
    OpenShift development or evaluation environment. However, they may need the environment
    to perform day to day operations. In this chapter, we are going to show you how
    to quickly set up a ready-to-use development environment on most popular desktop
    operating systems, using the most popular approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Why use a development environment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment variants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with oc cluster up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Minishift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Vagrant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To successfully perform the labs in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the following desktop operating systems:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux (CentOS 7)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bash for Linux or macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brew package manager for macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VirtualBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualization support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker for macOS/Linux/Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OpenShift client utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also be asked to download and install some dependencies and binaries.
  prefs: []
  type: TYPE_NORMAL
- en: Why use a development environment?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned in the previous chapter, OpenShift is an application delivery
    platform that can simplify day to day duties for infrastructure engineers and
    development teams. If a company's software delivery strategy is aligned with containers,
    OpenShift can significantly help to reduce production time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every platform has a community. It is an ecosystem around the platform that
    helps to improve the platform''s functionality, aligns the platform with end user
    needs, and so on. OpenShift has a community that includes some important members
    that use the platform: software developers, QA specialists, system administrators,
    IT architects, and so on. It is very important for OpenShift to extend its community
    and involve new team members and customers. To achieve this, all team members
    should have access to the OpenShift environment; depending on their roles, specialists
    will perform software development, testing, and software delivery. Not every software
    developer or QA team member will be able to set OpenShift up from scratch, and
    that is the main reason they seek an easy way to start working with OpenShift.'
  prefs: []
  type: TYPE_NORMAL
- en: The OpenShift development environment can be created easily and doesn't require
    significant effort. Usually, this environment is located on a local PC and doesn't
    have a large capacity.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of benefits in having an easy-to-use development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenShift evaluation**: Sometimes, users want to understand how OpenShift
    is aligned with their needs. They may have no experience with OpenShift, and may
    want to touch it on a real system. For most technical people, marketing presentations/demonstrations
    don''t mean anything. A fast and easy deployment process for the development environment
    can help.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A quick environment for developers/QAs**: Developers usually don''t want
    to get too involved with deploying an environment. A fast method for deploying
    OpenShift can save some effort, allowing them to focus on primary activities (such
    as software development and testing).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment variants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several ways to set up and start a development environment. Usually,
    the development environment is run on a workstation, and it is important to cover
    the most popular workstation operating systems. In the next section, we will describe
    several ways to quickly deploy OpenShift on workstations on different platforms.
    The most popular desktops are Windows, macOS, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Please be aware that a development environment is not equal to a production
    environment, due to capacity, scalability, and security limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Working with oc cluster up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenShift client utility named `oc` can start a local OpenShift cluster,
    which includes all of the required services, such as an internal registry, a router,
    templates, and so on. This is one of the easiest ways to start a development environment.
    `oc cluster up` creates a default user and project, and once it is complete, it
    will allow you to use any commands to work with the OpenShift environment, such
    as `oc new-app`.
  prefs: []
  type: TYPE_NORMAL
- en: This method provides a containerized OpenShift environment that can easily be
    run on a number of platforms.
  prefs: []
  type: TYPE_NORMAL
- en: System requirements and prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `oc cluster up` method supports Linux, macOS, and Windows-based workstations.
    By default, the method requires an environment with a Docker machine installed.
    However, the command can create a Docker machine by itself. The following table
    shows the available deployment scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operating system** | **Docker implementation** |'
  prefs: []
  type: TYPE_TB
- en: '| Linux | Default docker daemon for OS |'
  prefs: []
  type: TYPE_TB
- en: '| macOS | Docker for macOS |'
  prefs: []
  type: TYPE_TB
- en: '| macOS | Docker Toolbox |'
  prefs: []
  type: TYPE_TB
- en: '| Windows | Docker for Windows |'
  prefs: []
  type: TYPE_TB
- en: '| Windows | Docker Toolbox |'
  prefs: []
  type: TYPE_TB
- en: CentOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method can also be used on Fedora or RHEL based hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The deployment process involves several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Docker
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure an insecure registry
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow ports on the firewall
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the OpenShift client utility
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start a cluster
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s study these steps in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker installation**:This doesn''t involve anything special, and was described
    in previous chapters. The following commands must be run under the root account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Configuring an insecure registry**:This is required to be able to use an
    internal Docker registry, which comes with OpenShift installation. If this is
    not configured, `oc cluster up` will fail.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To allow for an insecure OpenShift registry, run the following commands under
    the root user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This requires restarting the Docker daemon so as to apply the new configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuring the firewall**: The default firewall configuration doesn''t enable all
    of the ports required for an OpenShift cluster. You need to adjust the settings
    using `firewall-cmd`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Port** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `8443`/`tcp` | `API port` |'
  prefs: []
  type: TYPE_TB
- en: '| `53`/`udp` | `DND` |'
  prefs: []
  type: TYPE_TB
- en: '| `8053`/`udp` | `Internal DNS` |'
  prefs: []
  type: TYPE_TB
- en: 'This can be achieved through the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In most cases, the firewall is not an issue in the development environment,
    and can be stopped with `systemctl stop firewalld` and `systemctl disable firewalld`.
  prefs: []
  type: TYPE_NORMAL
- en: You can determine the network address of Docker by running
  prefs: []
  type: TYPE_NORMAL
- en: '`docker network inspect -f "{{range .IPAM.Config }}{{ .Subnet }}{{end}}" bridge`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Downloading the** **oc** **utility**:The OpenShift client utility named `oc`
    is available in standard repositories; however, it is possible to download the
    utility from [https://github.com/openshift/origin/releases](https://github.com/openshift/origin/releases).
    We would recommend using the standard CentOS repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We omitted the output of the commands. It is expected that these commands will
    install a number of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Starting an OpenShift cluster**:Once all of the prerequisites are met, you
    will be able to start the cluster by running `oc cluster up`. The command will
    download all of the required Docker images from public repositories, and then
    run all of the required containers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we statically bound the version of the OpenShift cluster
    to `v3.9.0`. In most cases, you don't have to specify a version. So, you just
    need `oc cluster up` without any arguments.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, `oc cluster up` deployed a ready-to-use, one-node OpenShift
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, this OpenShift environment was configured to listen on the loopback
    interface (`127.0.0.1`). This means that you may connect to the cluster using
    `https://127.0.0.1:8443`. This behavior can be changed by adding special parameters,
    such as `--public-hostname=`. A full list of available options can be shown by
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Verification**:Once the cluster has deployed, you can verify that it is ready
    to use. The default OpenShift configuration points you to an unprivileged user,
    named `developer`. You may raise your permissions by using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have admin access rights, you can verify the node configuration with
    `oc get node`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Shutting down**:Once an `oc cluster up` environment has deployed, it can
    be shut down with `oc cluster down`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The installation and configuration process for macOS is very similar to that
    for Linux. It assumes that Docker for macOS is being used. The deployment process
    involves the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker for macOS installation and configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of `openshift-cli` and required packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting a cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `oc cluster up` command requires Docker to be installed on your system,
    because essentially, it creates a Docker container and runs OpenShift inside that
    Docker container. It is a very elegant and clean solution.
  prefs: []
  type: TYPE_NORMAL
- en: The Docker for macOS installation process is described at the official portal: [https://docs.docker.com/docker-for-mac](https://docs.docker.com/docker-for-mac).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Docker service is running, you need to configure the insecure registry
    (`172.30.0.0/16`). From the Docker menu in the toolbar, you need to select the
    Preferences menu and click on the Daemon icon. In the Basic tab of the configuration
    dialog, click on the + icon under Insecure registries and add the following new
    entry: `172.30.0.0/16`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When finished, click on Apply & Restart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Docker service is configured, we need to install all the required
    software and start the cluster using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenShift client installation**: Install the `socat` and `openshift-cli`
    packages on your system as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you do not have `brew` installed, find the installation process at [https://brew.sh/](https://brew.sh/).
  prefs: []
  type: TYPE_NORMAL
- en: '**Starting and stopping the OpenShift cluster**:The cluster can be started
    just like it was in Linux:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: At the time of writing this book, `oc cluster up` on macOS didn't work for version
    3.9\. I would recommend you to temporarily use 3.7 version of the client utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'An installation verification can be performed by the OpenShift admin user,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The Openshift cluster is up and ready for work. We may check the status of
    the cluster using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The cluster can be stopped as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenShift environment can be deployed on Windows on a machine that supports
    Docker for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker for Windows installation and configuration**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker for Windows installation process is described at [https://docs.docker.com/docker-for-windows](https://docs.docker.com/docker-for-windows).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Docker is running, you will need to configure the insecure registry settings,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the Docker icon in the notification area, and select Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Docker Daemon in the Settings dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the Docker daemon configuration by adding `172.30.0.0/16` to the `"insecure-registries":`
    setting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Click on Apply, and Docker will restart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once Docker service is configured, the OpenShift client `oc` can be installed
    as shown below. The example also shows how to start the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenShift client installation**:Download the Windows `oc.exe` binary from [https://github.com/openshift/origin/releases/download/v3.7.1/openshift-origin-client-tools-v3.7.1-ab0f056-mac.zip](https://github.com/openshift/origin/releases/download/v3.7.1/openshift-origin-client-tools-v3.7.1-ab0f056-mac.zip),[ ](https://github.com/openshift/origin/releases/download/v3.7.1/openshift-origin-client-tools-v3.7.1-ab0f056-mac.zip)and
    place it in `C:\Windows\system32` or another path folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also download the latest code from [https://github.com/openshift/origin/releases](https://github.com/openshift/origin/releases)
    under `Assets`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Starting/stopping a cluster**: The Windows version of the OpenShift client
    is also able to start and stop the cluster, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The Openshift cluster is up. You may want to check the status of the cluster
    using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Accessing OpenShift through a web browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whether you use `oc cluster up` or any other solution, when OpenShift is up
    and running, you can access it via a web browser. OpenShift is available on port
    `8443`, by default. In the case of `oc cluster up`, you can reach the OpenShift
    login page at `https://localhost:8443/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Use the developer login, with any password, to log in to OpenShift. We are going
    to work with the OpenShift web interface later in this book, while developing
    and running microservice applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you log in, you will be presented with the service catalog, which lets
    you to choose from available language runtimes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '*Project* in OpenShift extend the concept of namespaces from Kubernetes and
    serve as means of separating teams and individual users working with the same
    OpenShift cluster. Another term often used for projects is *tenant *(for example,
    in OpenStack). You can create projects from the web console by clicking on the
    Create Project button and specifying its name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the project is created, you can click on its name on the right side of
    the screen and you will be redirected to the project''s overview page, from where
    you can create applications and other resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just to give you the basic understanding of how to navigate through OpenShift
    web console, see the short guide below:'
  prefs: []
  type: TYPE_NORMAL
- en: Applications menu is used to access resources, directly responsible for your
    application, like Deployments, Pods, Services, Stateful Sets, and Routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Builds menu lets you manage configuration of Builds and build strategies, such
    as Pipelines, as well as Images used to build your application from source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources menu gives you access to other secondary resources that can be used
    by your application in advanced use cases, such as Quotas, Config Maps, Secrets,
    and Other Resources. You can also use this menu to view and manage Membership
    for your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage menu is used to request persistent storage by creating persistent storage
    claims
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring menu provides you with access to various metrics collected by OpenShift
    on CPU, RAM, and network bandwidth utilization (if you have metrics enabled),
    as well as Events going on in real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, Catalog menu is a shortcut you can take to access service catalog directly
    from the project you are currently in without having to go back to the first page.
    This was introduced in OpenShift Origin 3.9.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Minishift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Minishift is another way to deploy OpenShift locally, by running a single-node
    OpenShift cluster inside a virtual machine. Recently, we showed you how to use
    Minikube to deploy a development environment for Kubernetes. Minishift uses the
    same approach, because it was developed by Kubernetes community as a continuation
    of Minikube, mentioned in the [Chapter 2](part0071.html#23MNU0-78aafb146b304cdeb9b3261a70edabde), *Kubernetes
    Overview*, so it uses the same command line syntax. Minishift deployment is supported
    on the Windows, macOS, and Linux operating systems. Minishift uses libmachine to
    provision a virtual machine, boot2docker as OS, and OpenShift Origin to run the
    cluster. Minishift requires a hypervisor to run the virtual machine containing
    OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on your host operating system, you have a choice between the following
    hypervisors:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operating system** | **Hypervisor** | **Platform** |'
  prefs: []
  type: TYPE_TB
- en: '| macOS | xhyve | VirtualBox |'
  prefs: []
  type: TYPE_TB
- en: '| Linux | KVM | VirtualBox |'
  prefs: []
  type: TYPE_TB
- en: '| Windows | Hyper-V | VirtualBox |'
  prefs: []
  type: TYPE_TB
- en: '`boot2docker` is a lightweight Linux distribution based on Tiny Core Linux,
    built specifically to run containers. The project is now deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: Before you begin, you need to configure virtualization support ([https://docs.openshift.org/latest/minishift/getting-started/installing.html#install-prerequisites](https://docs.openshift.org/latest/minishift/getting-started/installing.html#install-prerequisites))
    and install VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you need to download the archive for your operating system from the Minishift
    releases page ([https://github.com/minishift/minishift/releases](https://github.com/minishift/minishift/releases))
    and unpack it. The `minishift` binary file from the archive needs to be copied
    to the OS's preferred location, and the location should be added to your `PATH`
    environment variable. Minishift will use the SSH binary found in the system `PATH` environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'On macOS, you can also use Homebrew Cask to install a stable version of Minishift:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ brew cask install minishift`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the binary, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ brew cask install --force minishif`'
  prefs: []
  type: TYPE_NORMAL
- en: If all of the prerequisites are met, you can start a cluster using `minishift
    start`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the deployment process is complete, you will be able to connect using
    the OpenShift client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You will need to install `oc client`, as well. You can refer to the previous
    sections in this chapter for the `oc client` installation procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OpenShift cluster is up. You may want to check its status using `oc get
    nodes` as it is shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You can connect to the Minishift VM using `minishift ssh`. The Minishift cluster
    can be stopped with `minishift stop`.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the `oc client` and OpenShift versions, your output may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'To stop a Minishift environment and delete it, you can use `minishift stop`
    and `minishift delete`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Working with Vagrant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method allows for using an available Vagrant box, that has all the OpenShift
    software installed on a single VM.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant software allows for simplifying the deployment and the initial configuration
    of virtual machines, by using different underlying virtualization technologies.
    In most cases, a plain text file called `Vagrantfile` describes the parameters
    of the VM (such as the name, hostname, RAM, vCPUs, storage, and so on). Once `Vagrantfile`
    is ready, the Vagrant software can use it to create, stop, and destroy a VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The beauty of using Vagrant is that we can redeploy VMs as many times as we
    need to, and each time, we will have the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.gif)'
  prefs: []
  type: TYPE_IMG
- en: Vagrant architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'Vagrant includes the following main components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vagrant software**: Automates virtual machine building and configuration.
    Has the vagrant CLI utility, available for different operating systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Box**: A TAR file that contains a virtual machine image, with metadata. Box
    files and their contained images are specific to each provider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provider**: The interface that allows Vagrant to communicate with different
    virtualization platforms. By default, it uses VirtualBox. Libvirt, KVM, OpenStack,
    and other providers are also available .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vagrantfile**: A plain text file that contains the instructions for how to
    create virtual machines. The instructions are written using Ruby-based **Domain
    Specific Language** (**DSL**). Plain Ruby can also be used, for advanced use cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Vagrant instructions and the software to download are available at [https://www.vagrantup.com/docs/installation/](https://www.vagrantup.com/docs/installation/).
  prefs: []
  type: TYPE_NORMAL
- en: Just download the package for your OS, and then install it. Vagrant also requires
    a virtualization platform, like Vmware, KVM, VirtualBox, AWS, Hyper-V, or Docker.
    You will be required to install the appropriate virtualization platform, depending
    on your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: '**For macOS, install the following**:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest Vagrant software from the preceding link, and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install VirtualBox from [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**For CentOS, install the following**:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest Vagrant software from the preceding link, and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install `libvirt` drivers and `kvm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**For Windows install the following**:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest Vagrant software from the preceding link, and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install VirtualBox from [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you are done, verify that Vagrant is installed by checking the Vagrant
    software version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Installing OpenShift with an all-in-one Vagrant box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before introduction of Minishift in May 2017, users mostly relied on `openshift/origin-all-in-one` Vagrant
    all-in-one box. This method is not so popular, because the box hasn't been updated
    for almost 2 years and represents OpenShift Origin 1.3, which lacks in features,
    as well as in stability, so it's mostly of historical interest today. Even though
    it can still be used for testing purposes, we suggest you rely on `oc cluster
    up` and Minishift.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Vagrant-based environment can be deployed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will create the following `Vagrantfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the box has deployed, you can log in using `admin` and a password, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The OpenShift cluster is up. You may want to check the cluster status as shown
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Please keep in mind that the Vagrant box for this method is 2 years behind latest
    version of OpenShift, so if you want to see most recent features, we recommend
    using another option.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how to create an OpenShift lab environment quickly
    and easily, using the most popular and simple methods: `oc cluster up`, Minishift,
    and Vagrant, on the CentOS 7, macOS, and Windows operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the hardware and software requirements
    of OpenShift Origin. You will get a basic understanding of OpenShift deployment
    scenarios and installation methods. Also, you will perform an advanced installation
    of OpenShift using Ansible, and you will learn about the various options to customize
    your setup with Ansible inventory.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What is the main prerequisite for the `oc cluster up` solution? (Choose one):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Minishift
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Virtualbox
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hyper-V
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What port is used, by default, to reach the OpenShift management web page?
    choose one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '8443'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '443'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '8080'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '80'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `oc cluster up` command uses a VM to bring up the Openshift cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What command is used to log in to Openshift via the CLI? choose one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: oc login system:admin
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc login -u system:admin
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc login -u admin
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc login admin
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What are the commands to start and stop the OpenShift demo cluster with the
    `oc` command? choose one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: oc cluster up
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc cluster start
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc cluster down
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: oc cluster stop
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `minishift start` command uses a VM to bring up the Openshift Cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a look at the following links, if you are interested in learning more
    or are facing some issues in your lab environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**oc cluster up installation**: [https://github.com/openshift/origin/blob/master/docs/cluster_up_down.md](https://github.com/openshift/origin/blob/master/docs/cluster_up_down.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minishift installation**: [https://docs.openshift.org/latest/minishift/getting-started/installing.html](https://docs.openshift.org/latest/minishift/getting-started/installing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vagrant installation**: [https://www.vagrantup.com/intro/getting-started/install.html](https://www.vagrantup.com/intro/getting-started/install.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**An alternative method to install the OpenShift cluster in a VM**: [https://blog.openshift.com/openshift-developers-set-full-cluster-30-minutes/](https://blog.openshift.com/openshift-developers-set-full-cluster-30-minutes/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**4 ways to set up a development environment on OpenShift**: [https://developers.redhat.com/blog/2016/10/11/four-creative-ways-to-create-an-openshiftkubernetes-dev-environment/](https://developers.redhat.com/blog/2016/10/11/four-creative-ways-to-create-an-openshiftkubernetes-dev-environment/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
