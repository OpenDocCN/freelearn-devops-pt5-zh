- en: '*Chapter 7*'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '*第七章*'
- en: Moving from Linux to Windows Containers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Linux 转向 Windows 容器
- en: In this chapter, we will discuss and take a look at Windows containers. Microsoft
    has embraced containers as a way of deploying older applications on new hardware.
    Unlike Linux containers, Windows containers are only available on Windows-based
    Docker hosts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论并深入了解 Windows 容器。微软已经将容器作为在新硬件上部署旧应用程序的一种方式。与 Linux 容器不同，Windows 容器仅在基于
    Windows 的 Docker 主机上可用。
- en: 'We will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: An introduction to Windows containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 容器简介
- en: Setting up your Docker host for Windows containers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Windows 容器设置 Docker 主机
- en: Running Windows containers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 Windows 容器
- en: A Windows container Dockerfile
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Windows 容器 Dockerfile
- en: Windows containers and Docker Compose
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 容器与 Docker Compose
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, the containers we will be launching will only work on a Windows
    Docker host. We will be using VirtualBox and Vagrant on macOS- and Linux-based
    machines to assist in getting a Windows Docker host up and running.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将启动的容器只适用于 Windows Docker 主机。我们将使用 macOS 和 Linux 基础的机器上的 VirtualBox 和
    Vagrant 来帮助启动和运行 Windows Docker 主机。
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/2DEwopT](https://bit.ly/2DEwopT)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下视频，了解代码如何运行：[https://bit.ly/2DEwopT](https://bit.ly/2DEwopT)
- en: An introduction to Windows containers
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 容器简介
- en: As someone who has been using mostly macOS and Linux computers and laptops alongside
    Linux servers pretty much daily for the past 20 years, coupled with the fact that
    my only experience of running Microsoft Windows was the Windows XP and Windows
    10 gaming PCs I have had (along with the odd Windows server I was unable to avoid
    at work), the advent of Windows containers was an interesting development.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个过去 20 年几乎每天都在使用 macOS 和 Linux 电脑及笔记本电脑，并且常常与 Linux 服务器打交道的人，再加上我唯一的 Windows
    操作系统经验仅限于我拥有的 Windows XP 和 Windows 10 游戏电脑（以及工作中不得不面对的偶尔 Windows 服务器），Windows
    容器的出现是一个有趣的发展。
- en: Now, I would never have classed myself as a Linux/Unix fanboy; however, Microsoft’s
    actions over the last few years have surprised even me. Back in 2014, at one of
    its Azure events, Microsoft declared “Microsoft Linux”, and it hasn’t looked back
    since.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我从来不会把自己归类为 Linux/Unix 的死忠粉；然而，微软近年来的举动甚至让我感到惊讶。早在 2014 年，在其中一次 Azure 活动上，微软宣布了“Microsoft
    Linux”，从那以后就再也没有回头过。
- en: 'Some notable headlines since Microsoft’s declaration of love for Linux include
    the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自微软宣布对 Linux 表示喜爱以来，出现了一些显著的新闻：
- en: Linux is a first-class citizen in Microsoft Azure.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 是 Microsoft Azure 中的第一等公民。
- en: .NET Core is cross-platform, meaning that you can run your .NET applications
    on Linux, macOS, and Windows.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core 是跨平台的，这意味着你可以在 Linux、macOS 和 Windows 上运行 .NET 应用程序。
- en: SQL Server has been available on Linux for a few years.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL Server 已经在 Linux 上提供服务几年了。
- en: You can run Linux shells, such as Ubuntu, on Windows 10 Professional machines.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在 Windows 10 专业版机器上运行 Linux shell，如 Ubuntu。
- en: PowerShell has been ported to Linux and macOS.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell 已经被移植到 Linux 和 macOS。
- en: It has developed cross-platform tools, such as Visual Studio Code, and open
    sourced them.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它开发了跨平台工具，比如 Visual Studio Code，并将其开源。
- en: It acquired GitHub for $7.5 billion!!
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它以 75 亿美元收购了 GitHub！！
- en: It is clear that the Microsoft of old, where former **chief executive officer**
    (**CEO**) Steve Ballmer famously roasted both the open source and Linux communities
    by calling them something that would not be appropriate to repeat here, has gone.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，曾经的微软（前 **首席执行官** (**CEO**) Steve Ballmer 曾因公开抨击开源和 Linux 社区而著名）已经不复存在。
- en: Hence, the announcement made in October 2014, months after Microsoft publicly
    declared its love for Linux, that Docker and Microsoft were forming a partnership
    to drive the adoption of containers on Windows-based operating systems such as
    Windows 10 Professional and Windows Server 2016 came as no surprise to anyone.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，2014 年 10 月，微软宣布与 Docker 合作推动容器在 Windows 操作系统（如 Windows 10 专业版和 Windows Server
    2016）上的采用，这一消息并不令人惊讶，特别是在微软公开表示对 Linux 表示喜爱几个月之后。
- en: So, what are Windows containers?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Windows 容器到底是什么呢？
- en: Well, on the face of it, they are no different from Linux containers. The work
    by Microsoft on the Windows kernel has introduced the same process isolation as
    found on Linux. Also, like Linux containers, this isolation extends to a sandboxed
    filesystem and even a Windows registry.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，它们与Linux容器没有什么不同。微软在Windows内核上的工作引入了与Linux相同的进程隔离。而且，像Linux容器一样，这种隔离也扩展到沙箱文件系统，甚至是Windows注册表。
- en: As each container is effectively a fresh Windows Core or Windows Nano installation,
    which, in turn, are cut-down Windows Server images (think Alpine Linux but for
    Windows), installation administrators can run multiple dockerized applications
    on the same host without having to worry about any custom registry changes or
    requirements clashing and causing problems.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个容器实际上是一个全新的Windows Core或Windows Nano安装，它们本身是精简版的Windows Server镜像（可以理解为Windows版的Alpine
    Linux），安装管理员可以在同一主机上运行多个docker化的应用程序，而不必担心自定义注册表更改或要求冲突导致的问题。
- en: Couple this with the same ease of use supplied by the Docker command-line client,
    and administrators have a way to migrate their legacy applications to more modern
    hardware, and also to host operating systems without the worries and overhead
    of having to manage multiple **virtual machines** (**VMs**) running older unsupported
    versions of Windows.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 加上Docker命令行客户端所提供的相同易用性，管理员就有了一种将遗留应用程序迁移到更现代硬件并托管操作系统的方式，而且不需要担心和管理多个运行较旧、不再受支持的Windows版本的**虚拟机**（**VM**）的额外负担。
- en: There is also another layer of isolation provided by Windows containers. **Hyper-V
    isolation** runs the container processes within a minimal hypervisor when the
    container is started. This further isolates the container processes from the host
    machine. However, there is a small cost of additional resources that are needed
    for each container running with Hyper-V isolation, while these containers will
    also have an increased start time as the hypervisor needs to be launched before
    the container can be started.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Windows容器还提供了另一层隔离。**Hyper-V隔离**在容器启动时，将容器进程运行在一个最小化的虚拟机监控程序（hypervisor）中，这进一步将容器进程与主机机器隔离。然而，每个使用Hyper-V隔离运行的容器都需要额外的资源，并且这些容器的启动时间也会增加，因为在容器启动之前需要先启动虚拟机监控程序。
- en: While Hyper-V isolation does use Microsoft’s hypervisor, which can be found
    in both Windows Server and Desktop editions, as well as the Xbox One system software,
    you can’t manage Hyper-V isolated containers using the standard Hyper-V management
    tools. You have to use Docker.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Hyper-V隔离确实使用了微软的虚拟机监控程序（它可以在Windows Server、桌面版和Xbox One系统软件中找到），但你无法使用标准的Hyper-V管理工具来管理Hyper-V隔离的容器。你必须使用Docker。
- en: After all the work and effort Microsoft had to put into enabling containers
    in the Windows kernel, why did they choose Docker over just creating their own
    container management tool?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 毕竟，微软在启用Windows内核中的容器功能方面付出了大量的工作和努力，为什么他们会选择Docker，而不是仅仅创建自己的容器管理工具呢？
- en: Docker had already established itself as the go-to tool for managing containers
    with a set of proven **application programming interfaces** (**APIs**) and a large
    community. Also, it was an open source application, which meant that Microsoft
    could not only adapt it for use on Windows but also contribute to its development.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Docker已经凭借一组经过验证的**应用程序编程接口**（**API**）和庞大的社区，确立了其作为管理容器的首选工具的地位。同时，Docker还是一个开源应用程序，这意味着微软不仅可以将其适配到Windows上，还可以为其开发做出贡献。
- en: 'The following diagram gives an overview of how Docker on Windows works:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下图概述了Docker在Windows上的工作原理：
- en: '![Figure 7.1 – Docker on Windows overview'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1 – Docker在Windows上的概述'
- en: '](img/image_00_0011.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0011.jpg)'
- en: Figure 7.1 – Docker on Windows overview
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – Docker在Windows上的概述
- en: Notice that I said Docker *on* Windows, not Docker *for* Windows; they are very
    different products. Docker on Windows is the native version of the Docker engine
    and client that interacts with the Windows kernel to provide Windows containers.
    Docker for Windows is a native-as-possible experience for developers to run both
    Linux and Windows containers on their desktops.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我说的是Docker *在* Windows上，而不是Docker *为* Windows；它们是完全不同的产品。Docker在Windows上是与Windows内核交互以提供Windows容器的Docker引擎和客户端的本地版本。而Docker为Windows提供的是一种尽可能原生的体验，允许开发者在桌面上同时运行Linux和Windows容器。
- en: Now, let’s look at preparing your host so that we can run Windows containers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看如何准备主机，以便我们可以运行Windows容器。
- en: Setting up your Docker host for Windows containers
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Windows容器设置Docker主机
- en: As you may have guessed, you are going to need access to a Windows host running
    Docker. Don’t worry too much if you are not running a Windows 10 Professional
    machine; there are ways in which you can achieve this on macOS and Linux. Before
    we talk about those, let’s look at how you can run Windows containers on Windows
    10 Professional with your Docker for Windows installation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所料，您将需要访问运行 Docker 的 Windows 主机。如果您没有运行 Windows 10 专业版机器，别担心；您也可以在 macOS 和
    Linux 上实现这一目标。在我们讨论这些方法之前，先看看如何在 Windows 10 专业版上使用 Docker for Windows 启动 Windows
    容器。
- en: Enabling Windows Container Support on Windows 10 Professional
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 Windows 容器支持（Windows 10 专业版）
- en: 'Windows 10 Professional supports Windows containers out of the box. By default,
    however, it is configured to run Linux containers. To switch from running Linux
    containers to Windows containers, right-click on the **Docker** icon in your system
    tray and select **Switch to Windows containers…** from the menu, as illustrated
    in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 10 专业版开箱即用支持 Windows 容器。然而，默认情况下，它配置为运行 Linux 容器。要从运行 Linux 容器切换到 Windows
    容器，请右键点击系统托盘中的**Docker**图标，并从菜单中选择**切换到 Windows 容器…**，如下图所示：
- en: '![Figure 7.2 – Switching to Windows containers'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – 切换到 Windows 容器'
- en: '](img/image_00_0021.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0021.jpg)'
- en: Figure 7.2 – Switching to Windows containers
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 切换到 Windows 容器
- en: 'This will bring up the following prompt:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出以下提示：
- en: '![Figure 7.3 – An important note on what happens to your Linux containers'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.3 – 关于 Linux 容器的一个重要说明'
- en: '](img/image_00_0031.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0031.jpg)'
- en: Figure 7.3 – An important note on what happens to your Linux containers
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 关于 Linux 容器的一个重要说明
- en: 'Hit the **Switch** button and, after a few seconds, you will now be managing
    Windows containers. You can see this by opening up Command Prompt on your host
    and running the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**切换**按钮，几秒钟后，您将开始管理 Windows 容器。您可以通过在主机上打开命令提示符并运行以下命令来查看：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This can be seen from the following output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下输出可以看到这一点：
- en: '![Figure 7.4 – Checking the output of running docker version'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.4 – 检查运行 `docker version` 输出'
- en: '](img/image_00_0041.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0041.jpg)'
- en: Figure 7.4 – Checking the output of running docker version
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 检查运行 `docker version` 输出
- en: The Docker Engine has an `OS/Arch of windows/amd64` version, rather than the
    `linux/amd64` version we have been used to seeing up until now. So, that covers
    Windows 10 Professional. But what about people like me who prefer macOS or Linux?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 引擎的版本为 `OS/Arch of windows/amd64`，而不是我们之前习惯看到的 `linux/amd64` 版本。所以，这涵盖了
    Windows 10 专业版。那么像我这样喜欢 macOS 或 Linux 的人怎么办呢？
- en: Up and running on MacOS and Linux
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 MacOS 和 Linux 上开始运行
- en: To get access to Windows containers on macOS and Linux machines, we will be
    using the excellent resources put together by Stefan Scherer. In the `chapter07`
    folder of the repository that accompanies this book, there is a forked version
    of Stefan’s `docker-windows-box` repo as a Git submodule, which contains all of
    the files you need to get up and running with Windows containers on macOS.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 macOS 和 Linux 机器上访问 Windows 容器，我们将使用 Stefan Scherer 汇总的优秀资源。在本书附带的仓库的 `chapter07`
    文件夹中，有一个 Stefan 的 `docker-windows-box` 仓库的分支版本作为 Git 子模块，其中包含所有您需要的文件，可以帮助您在 macOS
    上启动并运行 Windows 容器。
- en: 'To check out the forked version, you will need to run the following command
    within the repository folder:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这个分支版本，您需要在仓库文件夹内运行以下命令：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, before we start to launch the VM, you will need the following tools:
    Vagrant by HashiCorp, and VirtualBox by Oracle, which we covered in the last chapter.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们开始启动虚拟机之前，您将需要以下工具：HashiCorp 的 Vagrant 和 Oracle 的 VirtualBox，我们在上一章中已经讲解过。
- en: 'We do, however, need to install a `vagrant` plugin. To do this, run the following
    command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们确实需要安装一个`vagrant`插件。为此，请运行以下命令：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the plugin is installed, we can start using Docker on Windows by opening
    a Terminal, going to the `chapter07/docker-machine` repository folder, and running
    the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 插件安装完成后，我们可以通过打开终端，进入`chapter07/docker-machine`仓库文件夹，并运行以下命令来开始在 Windows 上使用
    Docker：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will download a VirtualBox Windows Server 2019 `Core Eval` image that contains
    everything needed to get you up and running with Windows containers. The download
    is just over 6 **gigabytes** (**GB**), so please make sure that you have the bandwidth
    and disk space needed to run the image.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载一个 VirtualBox Windows Server 2019 `Core Eval` 镜像，其中包含启动并运行 Windows 容器所需的一切。下载文件大约有
    6 **GB**，所以请确保你有足够的带宽和磁盘空间来运行该镜像。
- en: 'Vagrant will launch the image and configure Docker on the VM, along with a
    few other sensible defaults such as the Atom **integrated development environment**
    (**IDE**), Docker Compose, Docker Machine, and Git. Once the VM has launched,
    open your preferred Microsoft **Remote Desktop Protocol** (**RDP**) client, and
    then run the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 将启动镜像并配置虚拟机上的 Docker，同时还会设置一些其他合理的默认值，例如 Atom **集成开发环境**（**IDE**）、Docker
    Compose、Docker Machine 和 Git。一旦虚拟机启动，打开你首选的 Microsoft **远程桌面协议**（**RDP**）客户端，然后运行以下命令：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you are prompted for the password, enter `vagrant`, and you will be logged
    in to your newly launched Windows 2019 Server environment, with all of the tools
    you need to run Docker in Windows installed and ready to go.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提示输入密码，请输入 `vagrant`，你将登录到新启动的 Windows 2019 Server 环境，并且已安装并准备好运行 Docker for
    Windows 所需的所有工具。
- en: Also, if you don’t want to run something locally, a Windows 10 Professional
    instance in Azure has all of the necessary components enabled to be able to run
    Docker for Windows, which—as discussed in the previous section—allows you to run
    Windows containers, which we will be looking at next.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你不想在本地运行某些东西，可以在 Azure 中运行一个 Windows 10 专业版实例，它已启用所有必要的组件来支持 Docker for
    Windows，这正如上一节所讨论的那样，它允许你运行 Windows 容器，接下来我们将讨论这个问题。
- en: Running Windows containers
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Windows 容器
- en: 'As already hinted at in the first part of this chapter, launching and interacting
    with Windows containers using the Docker command-line client is no different from
    what we have been running so far. Let’s test this by running the `hello-world`
    container, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章第一部分已经暗示的那样，使用 Docker 命令行客户端启动和与 Windows 容器交互，与我们之前所做的操作没有区别。让我们通过运行 `hello-world`
    容器来测试一下，如下所示：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Just as before, this will download the `hello-world` container and return a
    message, as illustrated in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前一样，这将下载 `hello-world` 容器并返回一条消息，如下所示的屏幕截图所示：
- en: '![Figure 7.5 – Running the Windows-based hello-world container'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.5 – 运行基于 Windows 的 hello-world 容器'
- en: '](img/image_00_0051.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0051.jpg)'
- en: Figure 7.5 – Running the Windows-based hello-world container
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 运行基于 Windows 的 hello-world 容器
- en: The only difference on this occasion is that rather than the Linux image, Docker
    pulled the `windows-amd64` version of the image that is based on the `nanoserver-sac2016`
    image.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这次唯一的区别是，Docker 拉取的不是 Linux 镜像，而是基于 `nanoserver-sac2016` 镜像的 `windows-amd64`
    版本。
- en: 'Now, let’s look at running a container in the foreground, this time running
    PowerShell, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下如何在前台运行一个容器，这次运行 PowerShell，如下所示：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once your shell is active, running the following command will give you the
    computer name, which is the container ID:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的 shell 启动，运行以下命令将显示计算机名称，即容器 ID：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can see the full Terminal output of the preceding commands in the following
    screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下屏幕截图中看到前面命令的完整终端输出：
- en: '![Figure 7.6 – Running PowerShell within a container'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – 在容器中运行 PowerShell'
- en: '](img/image_00_0061.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0061.jpg)'
- en: Figure 7.6 – Running PowerShell within a container
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 在容器中运行 PowerShell
- en: 'Once you have exited PowerShell by running `exit`, you can see the container
    ID by running the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你通过运行 `exit` 退出 PowerShell，你可以通过运行以下命令来查看容器 ID：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can see the expected output in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下屏幕截图中看到预期的输出：
- en: '![Figure 7.7 – Checking the containers'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.7 – 检查容器'
- en: '](img/image_00_0071.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0071.jpg)'
- en: Figure 7.7 – Checking the containers
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 检查容器
- en: Now, let’s take a look at building an image that does something a little more
    adventurous than run PowerShell—instead, let’s install a web server.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下构建一个比运行 PowerShell 更具冒险性的镜像——我们来安装一个 web 服务器。
- en: A Windows container Dockerfile
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个 Windows 容器 Dockerfile
- en: 'Windows container images use Dockerfile commands in the same format as for
    Linux containers. The following Dockerfile will download, install, and enable
    the **Internet Information Services** (**IIS**) web server on the container:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 容器镜像使用与 Linux 容器相同格式的 Dockerfile 命令。以下 Dockerfile 将在容器中下载、安装并启用 **Internet
    Information Services** (**IIS**) Web 服务器：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can build the image using the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令来构建镜像：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once built, running `docker image ls` should show you the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，运行 `docker image ls` 应该会显示以下内容：
- en: '![Figure 7.8 – Building and listing our image'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.8 – 构建并列出我们的镜像](img/image_00_0081.jpg)'
- en: '](img/image_00_0081.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0081.jpg)'
- en: Figure 7.8 – Building and listing our image
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 构建并列出我们的镜像
- en: 'The one immediate thing you will notice about Windows container images is that
    they are big. Running the container with the following command will start the
    IIS image:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Windows 容器镜像，你首先会注意到的是它们非常大。使用以下命令运行容器将启动 IIS 镜像：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see your newly launched container in action by opening your browser.
    However, going to `http://localhost:8080/` won’t work as we have not provided
    any ports. If you remember, we are running Docker on Windows, so the containers
    are running directly on the host machine. Thus, there is no need to use localhost
    or mapped ports as we can access the container’s **network address translation**
    (**NAT**) **Internet Protocol** (**IP**) directly on the host machine of the container.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过打开浏览器来查看新启动的容器。不过，直接访问 `http://localhost:8080/` 是无法工作的，因为我们没有提供任何端口。回想一下，我们是在
    Windows 上运行 Docker，因此容器是直接在宿主机上运行的。因此，不需要使用 localhost 或映射端口，因为我们可以直接在容器宿主机上访问容器的
    **网络地址转换** (**NAT**) **互联网协议** (**IP**)。
- en: 'To find the NAT IP address, you can use the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找 NAT IP 地址，你可以使用以下命令：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This should output something like the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出类似以下内容：
- en: '![Figure 7.9 – Running our Windows container image'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.9 – 运行我们的 Windows 容器镜像](img/image_00_0091.jpg)'
- en: '](img/image_00_0091.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0091.jpg)'
- en: Figure 7.9 – Running our Windows container image
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 运行我们的 Windows 容器镜像
- en: 'This will give you an IP address. To access IIS, we simply need to put the
    IP address into a browser running on the Windows host. In this case, the `http://172.26.30.80/`.
    You should see the following default holding page:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你一个 IP 地址。要访问 IIS，我们只需将 IP 地址放入运行在 Windows 主机上的浏览器中。在这种情况下，使用 `http://172.26.30.80/`。你应该看到以下默认的保持页面：
- en: '![Figure 7.10 – The IIS web server running in a container'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.10 – IIS Web 服务器在容器中运行](img/image_00_0081.jpg)'
- en: '](img/image_00_0101.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0101.jpg)'
- en: Figure 7.10 – The IIS web server running in a container
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – IIS Web 服务器在容器中运行
- en: 'To stop and remove the containers we have launched so far, run the following
    commands:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止并移除我们迄今为止启动的容器，请运行以下命令：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So far, I am sure you will agree that the experience is no different from using
    Docker with Linux-based containers.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我相信你会同意，使用 Docker 与 Linux 容器的体验没有什么不同。
- en: Windows containers and Docker Compose
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 容器与 Docker Compose
- en: In the final section of this chapter, we are going to look at using Docker Compose
    with our Windows Docker host. As you will have already guessed, there isn’t much
    change from the commands we ran in [*Chapter 5*](B15659_05_Final_JM_ePub.xhtml#_idTextAnchor157),
    *Docker Compose*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后部分，我们将探讨如何在 Windows Docker 主机上使用 Docker Compose。正如你可能已经猜到的，使用的命令与我们在 [*第
    5 章*](B15659_05_Final_JM_ePub.xhtml#_idTextAnchor157) 中运行的命令没有太大区别，*Docker Compose*。
- en: 'In the `chapter07` folder in the repository, you will find a `docker-compose.yml`
    file that looks like the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在仓库的 `chapter07` 文件夹中，你将找到一个 `docker-compose.yml` 文件，内容如下：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There is also a supporting `.env` file—this is used by Docker Compose to populate
    variables in the Docker Compose file and should be placed in the same folder as
    the `docker-compose.yml` file, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个支持的 `.env` 文件——这个文件被 Docker Compose 用来填充 Docker Compose 文件中的变量，应该与 `docker-compose.yml`
    文件放在同一文件夹中，如下所示：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see, it is using the same structure, flags, and commands as the
    previous Docker Compose files we have looked at, the only difference being that
    we are using images from the Docker Hub that are designed for Windows containers.
    The Docker Compose file will download Microsoft `database` and Octopus Deploy
    (`octopus`). To pull the required images, simply run the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它使用了与我们之前看过的 Docker Compose 文件相同的结构、标志和命令，唯一的区别是我们使用的是为 Windows 容器设计的 Docker
    Hub 镜像。该 Docker Compose 文件将下载 Microsoft `database` 和 Octopus Deploy (`octopus`)。要拉取所需的镜像，只需运行以下命令：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, once pulled, we need to create the folders required to launch Octopus
    Deploy, using the following commands in the same folder as the `docker-compose.yml`
    file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，一旦拉取完成，我们需要创建启动 Octopus Deploy 所需的文件夹，使用以下命令，在与 `docker-compose.yml` 文件相同的文件夹中执行：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, we can launch Octopus Deploy by running the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过运行以下命令启动 Octopus Deploy：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Octopus can take around 10 minutes to start up. I would recommend running the
    following command to watch the container logs, to be certain that Octopus Deploy
    is up and running:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Octopus 启动大约需要 10 分钟。我建议运行以下命令来查看容器日志，以确保 Octopus Deploy 已经启动并运行：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You should see the message `Completed System Integrity Check. Overall Result:
    Passed` in the log output, which should look something similar to the following
    output:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '你应该在日志输出中看到消息 `Completed System Integrity Check. Overall Result: Passed`，其输出应类似以下内容：'
- en: '![Figure 7.11 – Watching the output of our containers'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.11 – 观察我们容器的输出'
- en: '](img/image_00_0111.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0111.jpg)'
- en: Figure 7.11 – Watching the output of our containers
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – 观察我们容器的输出
- en: 'As before, you can then use this command to find out the IP address on Windows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前一样，你可以使用以下命令来查找 Windows 上的 IP 地址：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once you have the IP address, which for me was `172.26.30.12`, open a browser
    and access the admin interface on port `81`. For me, that was `http://172.26.30.12:81/`.
    This should show you a login prompt—here, enter the username `admin`, with a password
    of `Passw0rd123`. Once logged in, you should see something like the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获取到 IP 地址，对于我来说是 `172.26.30.12`，打开浏览器并访问端口 `81` 的管理员界面。对于我来说，地址是 `http://172.26.30.12:81/`。这应该会显示一个登录提示——在这里，输入用户名
    `admin`，密码是 `Passw0rd123`。登录后，你应该会看到类似以下内容：
- en: '![Figure 7.12 – Octopus Deploy up and running'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.12 – Octopus Deploy 启动并运行'
- en: '](img/image_00_0121.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_0121.jpg)'
- en: Figure 7.12 – Octopus Deploy up and running
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – Octopus Deploy 启动并运行
- en: 'When you are ready, you can remove the containers by running the following
    command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好时，可以通过运行以下命令来删除容器：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Before we finish, there are a few things to note—the first is the use of a `.env`
    file. As already mentioned, this saves us having to use hard variables into our
    Docker Compose files; so, if you ever use them, don’t check them into a Git repo
    like I have done. Secondly, you may have noticed that when we ran the `docker-compose`
    command, we passed the `--project-name Octopus` parameter. This means that when
    we launch our project, rather than the application inheriting the name of the
    folder where the Docker Compose file is, it will be prefixed with `octopus`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束之前，需要注意几点——首先是 `.env` 文件的使用。如前所述，这可以避免我们在 Docker Compose 文件中使用硬编码的变量；所以，如果你使用过它们，千万不要像我一样将其提交到
    Git 仓库。其次，你可能已经注意到，在我们运行 `docker-compose` 命令时，传递了 `--project-name Octopus` 参数。这意味着，当我们启动项目时，应用程序不会继承
    Docker Compose 文件所在文件夹的名称，而是会以 `octopus` 为前缀。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have briefly looked at Windows containers. As you have seen,
    thanks to Microsoft’s adoption of Docker as a management tool for Windows containers,
    the experience is familiar to anyone who has used Docker to manage Linux containers.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了 Windows 容器。如你所见，得益于微软将 Docker 作为 Windows 容器的管理工具，使用过 Docker 管理
    Linux 容器的人会对这种体验感到非常熟悉。
- en: In the next chapter, we are going to take a look at Docker Swarm. This will
    be the first time we have moved from single Docker hosts to a cluster of hosts.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍 Docker Swarm。这将是我们第一次从单个 Docker 主机转向一组主机集群。
- en: Questions
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Docker on Windows introduces which additional layer of isolation?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker 在 Windows 上引入了哪个额外的隔离层？
- en: Which command would you use to find out the NAT IP address of your Windows container?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用哪个命令来查找 Windows 容器的 NAT IP 地址？
- en: 'True or false: Docker on Windows introduces an additional set of commands you
    need to use in order to manage your Windows containers.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断对错：Docker 在 Windows 上引入了一组额外的命令，你需要使用这些命令来管理你的 Windows 容器。
- en: Further reading
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find more information on the topics mentioned in this chapter, as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本章提到的主题中找到更多信息，如下所示：
- en: 'Docker and Microsoft Partnership Announcement: [https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/](https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 和微软合作公告：[https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/](https://blog.docker.com/2014/10/docker-microsoft-partner-distributed-applications/)
- en: 'Windows Server and Docker – The Internals Behind Bringing Docker & Containers
    to Windows: [https://www.youtube.com/watch?v=85nCF5S8Qok](https://www.youtube.com/watch?v=85nCF5S8Qok)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Server 和 Docker——将 Docker 和容器引入 Windows 背后的内部机制：[https://www.youtube.com/watch?v=85nCF5S8Qok](https://www.youtube.com/watch?v=85nCF5S8Qok)
- en: 'Stefan Scherer on GitHub: [https://github.com/stefanScherer/](https://github.com/stefanScherer/)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Stefan Scherer 在 GitHub 上: [https://github.com/stefanScherer/](https://github.com/stefanScherer/)'
- en: 'Octopus Deploy: [https://octopus.com](https://octopus.com)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Octopus Deploy: [https://octopus.com](https://octopus.com)'
