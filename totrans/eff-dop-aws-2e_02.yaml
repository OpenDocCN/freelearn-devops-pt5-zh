- en: Deploying Your First Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered a general introduction to the cloud, its
    benefits, and what having a DevOps philosophy means. AWS offers a number of services
    that are all easily accessible through the web interface, command-line interface,
    various SDKs, and APIs. In this chapter, we will take advantage of the web interface
    and command-line interface to create and configure our account and create a web
    server to host a simple Hello World application, all in a matter of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring your account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spinning up your first web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technologies and services used in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS Management Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS compute services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS IAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CLI setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript for the web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub for ready made code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The GitHub links for the code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf](https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and configuring your account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you haven't signed up for AWS yet, it is time to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This step is, of course, fairly simple and self-explanatory. In order to sign
    up (if you haven't done so yet), open [https://portal.aws.amazon.com](https://portal.aws.amazon.com)
    in your browser, click on the Create a new AWS account button, and follow the
    steps. You will need an email address and your credit card information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two exceptions to this process are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If you plan to deploy servers in China, then you need to create your account
    in the AWS China region at [https://www.amazonaws.cn/](https://www.amazonaws.cn/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS has a special facility called **GovCloud** for specific regulatory needs
    of United States federal, state, and local agencies. To sign up for this, go to
    the following link at [https://aws.amazon.com/govcloud-us/contact/](https://aws.amazon.com/govcloud-us/contact/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, we will use servers located in Northern Virginia so you will need
    to sign up using the standard registration process.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon runs a free-tier program for new users. This is designed to help you
    to discover AWS services free of cost. Amazon gives free credit on most services.
    It is likely that over time the offer will change, so this book isn't going to
    cover the specifics of this offer, but the details are available at [https://aws.amazon.com/free/](https://aws.amazon.com/free/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''re done with the sign-up process, you will be on the AWS Management
    Console landing page. This screen can be a bit overwhelming as Amazon now has
    a lot of services, but you will quickly get used to it. If you are a fan of bookmarks,
    this page is definitely a prime candidate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55489223-a325-4c9b-be97-233e2f7d9d08.png)'
  prefs: []
  type: TYPE_IMG
- en: The account you just created is called a **root** account. This account will
    always have full access to all resources. Because of this, make sure that you
    keep your password in a safe place. The best practice is to use the root account
    only to create the initial user through the IAM service that we will discover
    shortly. In addition, it is strongly recommended to switch to **multi-factor authentication**
    (**MFA**) and use the identity service **IAM**—to manage user accounts, so pick
    a relatively complex password.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling MFA on the root account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to avoid any kind of issues, the first thing we need to do once we
    sign up is enable MFA. In case you haven''t seen or heard of this before, MFA
    is a security system that requires more than one method of authentication from
    independent categories of credentials. These are used to verify the user''s identity
    in order to log in. In practice, once enabled, you will need the password previously
    set when you signed up in order to login. However, you will also need another
    code provided from a different source. That second source can be provided through
    a physical device such as the SafeNet IDProve, which is available at [http://amzn.to/2u4K1rR](http://amzn.to/2u4K1rR),
    through an SMS on your phone, or through an application installed on your smartphone.
    We will use the third option—an application installed on your smartphone, which
    is completely free:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to your App Store, Google Play Store, or App Marketplace and install an application
    called **Google Authenticator** (or any other equivalent, such as **Authy**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the AWS Management Console, open the My Security Credentials page in the
    top-right corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c115402-abc2-4abe-b9cb-a918dee220b0.png)'
  prefs: []
  type: TYPE_IMG
- en: If prompted to create and use AWS **Identity and Access Management** (**IAM**),
    users with limited permissions, click on the Continue to Security Credentials
    button. We will explore the IAM system in [Chapter 3](8a74da7b-0748-4b90-a3bc-58e853e820ec.xhtml), *Treating
    Your Infrastructure as Code.* Expand the Multi-factor authentication (MFA) section
    on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pick virtual MFA and follow the instructions to sync Google authentication with
    your root account (note that the scan QR code option is the easiest one to pair
    the device).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From this point on, you will need your password and the token displayed on the
    MFA application in order to log in as root in the AWS console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two general tips for managing your passwords and MFA are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of good applications to manage passwords, such as **1Password**
    at [https://agilebits.com/onepassword](https://agilebits.com/onepassword) or **Dashlane**
    at [https://www.dashlane.com](https://www.dashlane.com/)[.](https://agilebits.com/onepassword)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For MFA, you can also try using **Authy** at [https://www.authy.com](https://www.authy.com/).
    This works like Google Authenticator but also has a centralized server allowing
    it to work across multiple devices (including desktop applications), so if you
    lose your phone, you won't lose access to AWS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we have seen earlier, the root account usage should be limited to a bare
    minimum. So, in order to create virtual servers, configure services, and so on,
    we will rely on the IAM service which will let us have granular control over permissions
    for each user.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new user in IAM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create and configure accounts for different individuals
    who need access to AWS. For now, we will keep things simple and only create an
    account for ourselves, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the IAM menu in the AWS console ([https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/))
    or go to the Services drop-down list on the top left corner of the AWS console
    page and search for `IAM`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cee7de26-a00f-483e-bc71-f348dd82a5bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose the Users option from the navigation pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new user by clicking on the Add user button, and make sure that you
    tick the Programmatic access option to generate an access key ID and a secret
    access key for the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the default options for now and create a user. Don't forget to download
    credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the Users menu, click on your username to access the details page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Permissions tab, click on the Add permissions button and select the Attach
    existing policies directly option. Click on AdministratorAccess to provide full
    access to AWS services and resources to our newly created user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the checkbox next to the AdministratorAccess option to provide full
    access to AWS services and resource to our newly created user. You will be left
    with a screen that looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38edc83d-43d9-4eab-91d6-e97173d81dd8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last thing we need to do is add a password and turn on MFA for this account.
    This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Security credentials tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the Console password option and enable the password for the newly
    created user. Set the password of your choice and click on the Apply button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're done with adding a password, click on the Assigned MFA device option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select A virtual MFA device option and follow the remaining instructions in
    order to turn on MFA in your newly created account. You will get a message stating
    that The MFA device was successfully associated with your account**,** as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2711ccdd-92c9-4bd2-ba8f-bbdfdd202ee6.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, you are ready to start using the newly created user account.
    The important thing to note here is that signing in with an IAM user account is
    different from the root account. The main difference is that you sign in using
    a different URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to [https://console.aws.amazon.com/iam/home#home](https://console.aws.amazon.com/iam/home#home)
    or click on the Dashboard in the IAM menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see your unique sign-in URL under IAM users sign-in link. Feel free
    to also customize the link. Save this new URL in your bookmarks, and, from now
    on, use this link to sign into the AWS console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign out from the root account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign back in, but this time use your IAM user account at `https://AWS-account-ID`
    or [alias.signin.aws.amazon.com/console](https://us-east-1.signin.aws.amazon.com/oauth?SignatureVersion=4&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJMOATPLHVSJ563XQ&X-Amz-Date=2018-08-27T10%3A03%3A52.789Z&X-Amz-Signature=bd1d9ecc1e645513ee09a2133776098ba8a82903c49d994f62fe4cb04a5d92d9&X-Amz-SignedHeaders=host&client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fhomepage&redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fstate%3DhashArgs%2523%26isauthcode%3Dtrue&response_type=code&state=hashArgs%23).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do not share your access key and secret key. By going through those steps, we
    enforced the use of MFA to access the AWS Console with our IAM user. We now need
    two factors (the password and the MFA token) to access the console. That said,
    we also created an access key which is far less secure. Anyone in possession of
    the secret key and access key (both present in the `credentials.csv`) will have
    full administrative access to the AWS account. Make sure to never share these
    credentials online. In [Chapter 8](0eb2bba9-5a84-4031-93d2-72dc4d6d4dd3.xhtml), *Hardening
    the Security of Your AWS Environment*, we will make a few changes to better protect
    this key and require the use of MFA to gain administrator privileges.
  prefs: []
  type: TYPE_NORMAL
- en: The next step in configuring our account is to configure our computers to interact
    with AWS using the command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the command-line interface (CLI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Amazon's web interface is usually a great way to explore new services.
    The problem is that when you want to go fast, create more repeatable steps, or
    create good documentation, having simple commands to execute becomes more efficient.
    Amazon provides a great and easy-to-use CLI. The tool is written in Python and
    therefore is cross-platform (Windows, Mac, and Linux).
  prefs: []
  type: TYPE_NORMAL
- en: We will install the tool on our laptop/desktop so that we can interact with
    AWS using bash commands. Linux and macOS X come natively with bash. If you use
    one of these operating systems, you can skip the next section. On Windows, we
    first need to install a feature called **Windows Subsystem for Linux** (**WSL**),
    which will give us the ability to run Bash commands that are very similar to what
    you get on Ubuntu Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Installing WSL (Windows only)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nowadays, Linux and macOS X are among the most predominant OS used by developers.
    Windows recently released a partnership with Canonical, the company behind one
    of the most popular Linux distributions, support for Bash, and most of the common
    Linux packages. By installing this tool on Windows, we will be able to  interact
    with our servers more efficiently, which will also run Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Start button and search for `settings`, and then open the Settings
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/693e26db-782b-4fac-b619-8505f41b5e68.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will lead you to the following window, where you have to search for `Windows
    Update settings`. Open the Windows Update settings menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4451a3e-1a0d-4cfa-9bcc-cf68caa4adb4.png)'
  prefs: []
  type: TYPE_IMG
- en: In the left-hand side menu of Windows Update settings, click on the For developers sub-menu
    and turn on the Developer mode option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once your developer mode is turned on, search in the search bar on the left-hand-side
    menu for the `Control Panel` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8b255a1-221b-4987-9dae-b44b30839af8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Control Panel dashboard, select the Category option from the View by
    drop-down, and click on the Programs option. Then, under Programs and Features,
    click on the Turn Windows features on or off option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e3f5df9-c6ce-405e-9cca-5faf1d2f95c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this menu, find the feature called Windows Subsystem for Linux (Beta), and
    click on the OK button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0d5ef3e7-cf36-4a98-a6a1-d054b26781e4.png)'
  prefs: []
  type: TYPE_IMG
- en: This will install the feature and ask you to restart your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are back in Windows, click on the Start button again, search for `bash`,
    and start the Bash on Ubuntu on the Windows application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9feb5a78-ec22-4f50-9db9-c8ee5e2deb6b.png)'
  prefs: []
  type: TYPE_IMG
- en: After a few initialization steps, you will be able to use Bash on Windows in
    the same way you would on Linux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From that point on, use the Bash application to run the commands present in
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the AWS CLI package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AWS CLI utility is written in Python. While there are several ways to install
    it, we will use **PyPA**, the Python package manager, to install this tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install PyPA, depending on your OS, you will need to run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS X:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On Debian-based Linux distributions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On Red Hat/CentOS-based Linux distributions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once PyPA is installed, you will get access to the `pip` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, to install the AWS CLI using the `pip` command, you simply need to
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you get an output to upgrade your `pip` version to the latest available level,
    execute `pip install --upgrade pip`.
  prefs: []
  type: TYPE_NORMAL
- en: We have demonstrated all of the outputs from CentOS-based Linux distribution
    but the process is equally applicable on all of the mentioned supported platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To do this, you will need to extract the AWS access key ID and secret access
    key from the file downloaded in step 4 of the *Creating a new user in IAM* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will run the following command to configure our AWS account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we are ready to start using the CLI. We can quickly verify that
    everything is working by listing the user accounts, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: AWS aws-shell
  prefs: []
  type: TYPE_NORMAL
- en: Amazon has a second CLI tool called `aws-shell`. This tool is more interactive
    than the classic `awscli` command, as it offers out-of-the-box auto-completion
    and a split-screen view that lets you access the documentation as you type your
    commands. If you are a new AWS user, give it a shot (`pip install aws-shell`).
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our environment set up, we are finally ready to launch our
    first EC2 instance. There are a couple of ways to do that. Since we just installed
    and configured `awscli` and we want to see effective ways of managing infrastructures,
    we will demonstrate how to do this using the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launching a virtual server requires having a certain amount of information
    ahead of time. We will use the `aws ec2 run-instances` command, but we need to
    supply it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An AMI ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An instance type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A security group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An SSH key-pair
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Machine Images (AMIs)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An AMI is a package that contains, among other things, the root file system
    with the operating system (for example, Linux, UNIX, or Windows) as well as additional
    software required to start up the system. To find the proper AMI, we will use
    the `aws ec2 describe-images` command. By default, the `describe-images` command
    will list all available public AMIs, which is way over 3 million by now. To get
    the best out of that command, it is important to combine it with the filter option
    to only include the AMI we would like to use. In our case, we want to use the
    following to filter our AMIs:'
  prefs: []
  type: TYPE_NORMAL
- en: We want the name to be Amazon Linux AMI, which designates the Linux distribution
    officially supported by AWS. Amazon Linux is based off Red Hat/CentOS but includes
    a few extra packages to make the integration with other AWS services easy to do.
    You can read more about AWS Linux at [http://amzn.to/2uFT13F](http://amzn.to/2uFT13F).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to use the `x84_64` bits version of Linux to match the architecture
    we will use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The virtualization type should be HVM, which stands for hardware virtual machine.
    This is the newest and best-performing type of virtualization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want GP2 support, which will let us use the newest generation of instances
    that don't come with *instance store,* meaning that the servers that power our
    instances will be different from the servers that store our data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, we will sort the output by age and only look at the most recently
    released AMI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of running the preceding command can be shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5850390-3f22-4650-ba95-ec90894f10a7.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, at this time, the most recent AMI ID is `ami-cfe4b2b0`. This
    might differ by the time you execute the same command, as the Amazon vendors included
    regularly update their OS.
  prefs: []
  type: TYPE_NORMAL
- en: When using the `aws cli --query` option, the output can be very consequential
    for certain commands. Taking the preceding example, if we only care about a subset
    of information, we can supplement the commands with the `--query` option to filter
    the information we want only. This option uses the **JMESPath** query language.
  prefs: []
  type: TYPE_NORMAL
- en: Instance types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will select the virtual hardware to use for our virtual
    server. AWS provides a number of options best described in their documentation
    at [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/).
    We will talk about instance types in more detail in [Chapter 6](c54f64c9-e8a3-4eed-b68d-087ff40f8b1d.xhtml), *Scaling
    Your Infrastructure*.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will select the `t2.micro` instance type as it is eligible for the
    AWS free usage tier.
  prefs: []
  type: TYPE_NORMAL
- en: Security groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security groups work a bit like firewalls. All EC2 instances have a set of security
    groups assigned to them, and each security group contains rules to allow traffic
    to flow inbound (**ingress**) and/or outbound (**egress**).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this exercise, we will create a small web application running on port `tcp/3000`.
    In addition, we want to be able to SSH into the instance, so we also need to allow
    inbound traffic to port `tcp/22`. We will create a simple security group to allow
    this, by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to find out our default **virtual private cloud** (**VPC**)
    ID. Despite being in a cloud environment, where the physical resources are shared
    by all AWS customers, there is still a strong emphasis on security. AWS segmented
    their virtual infrastructure using the concept of VPC. You can imagine this as
    being a virtual datacenter with its own network. The security groups that protect
    our EC2 instances are tied with subnets that in turn are tied to the network that
    the VPC provides:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e89e10dd-525c-4dd0-8d7c-28cf71e18dd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To identify our VPC ID, we can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we know the VPC ID (yours will be different), we can create our new
    security group, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, security groups allow all outbound traffic from the instance. We
    just need to open up SSH (`tcp/22`) and `tcp/3000` for inbound traffic. We then
    need to input the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now verify the change made using the following code, as the previous
    commands aren''t verbose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As expected, we opened up the traffic to the proper ports. If you know how to
    find your public IP, you can improve the SSH rule by replacing `0.0.0.0/0` with
    your IP/32 so that only you can try to SSH into that EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Using the aws cli --output option
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, most of the commands will return a JSON output. AWS has a a certain
    number of options globally available. You can see them used a bit in this chapter.
    The first option is `--output [json | text | table]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8f066db-fef2-47a2-a091-1c8768870275.png)'
  prefs: []
  type: TYPE_IMG
- en: Generating your SSH keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Amazon EC2 uses SSH key pairs to give you SSH access to your EC2
    instances. You can either generate a key pair in EC2 and download the private
    key or generate a key yourself using a third-party tool such as OpenSSL, importing
    the public key in EC2\. We will use the first method to create EC2 SSH keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, ensure that you set read only permissions on your newly generated private
    (`.pem`) key file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Launching an EC2 instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now have all the information required to launch our instance. Let''s finally
    launch it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can track the progress of the instance creation. To do that, get the instance
    ID provided in the output of the `aws ec2 run-instances` command and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The instance will be ready once the status under `SystemStatus` changes from
    `initializing` to `ok`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Connecting to the EC2 instance using SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main goal of this chapter is to create a simple `Hello World` web application.
    Since we are starting with a Vanilla OS, we need to connect to the host to make
    the necessary changes to turn our standard server into a web server. In order
    to SSH our instance, we need to find the DNS name of our running instance, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have the public DNS name of our instance and the private key to SSH
    into it. The last thing to know is that, for the OS that we selected while choosing
    our AMI in Amazon Linux, the default user account is called `ec2-user`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you experience any issues, add the `-vvv` option in your SSH command to troubleshoot
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple Hello World web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are connected to our EC2 instance, we are ready to start playing
    around with it. In this book, we will focus on the most common use case for AWS
    in tech companies: hosting an application. In terms of languages, we will use
    JavaScript, which is one of the most popular languages on GitHub. That said, this
    application is  aimed more at giving support in order to demonstrate how to best
    use AWS using the DevOps principles. Having any kind of knowledge about JavaScript
    isn''t required in order to understand this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74869af1-18ea-46ef-ba9c-fe358d404429.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of the main advantages that JavaScript offers with regards to this book
    include the fact that:'
  prefs: []
  type: TYPE_NORMAL
- en: It is fairly easy to write and read, even for beginners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn't need to be compiled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be run server side thanks to Node.js ([https://nodejs.org](https://nodejs.org))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is officially supported by AWS and therefore the AWS SDK for JavaScript is
    a *first-class citizen*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the rest of the chapter, all the commands and code are to be run on our
    instance through SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we need to do is install Node.js. Amazon Linux is based on
    **Red Hat Enterprise Linux** (**RHEL**) and uses the `yum` utility to manage and
    install packages. The OS comes with **Extra Packages for Enterprise Linux** (**EPEL**)
    preconfigured in it. As we would expect, Node.js is present in EPEL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This is definitely an old version of the node but it's going to be good enough
    for what we need.
  prefs: []
  type: TYPE_NORMAL
- en: Running a Node.js Hello World application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the node is installed, we can create a simple Hello World application.
    Here is the code for creating this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Feel free to copy this into a file. Alternatively, if you want to save time,
    download this from GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to run the Hello World application, we are now simply going to run
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything goes well, you will now be able to open this in your browser
    at the following link: `http://your-public-dns-name:3000`. Or in my case, this
    will be found here: `http://ec2-34-201-101-26.compute-1.amazonaws.com:3000`. You
    will then be able to see the result, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf05de32-d99b-47e8-ac17-ffaf0d1003e9.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now stop the execution of the Hello World web application with *Ctrl*
    + *C* in your Terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: Turning our simple code into a service using upstart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we started the node application manually in the Terminal, closing the
    SSH connection or hitting *Ctrl* + *C* on the keyboard will stop the node process,
    and therefore our Hello World application will not work anymore. Amazon Linux,
    unlike a standard Red Hat-based distribution, comes with a system called **upstart**.
  prefs: []
  type: TYPE_NORMAL
- en: This is fairly easy to use and provides a couple of extra features that traditional
    **System-V bootup** scripts don't have, such as the ability to respawn a process
    that died unexpectedly. To add an upstart configuration, you need to create a
    file inside `/etc/init` on the EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to insert it in `/etc/init/helloworld.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '*Why start on elastic network interfaces? *If you are familiar with upstart
    outside of AWS, you might have used start on run level [345]. In AWS, the problem
    with that is that your network comes from **Elastic Network Interface** (**ENI**),
    and if your application starts before this service, it might not be able to connect
    to the network correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now simply start our application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As expected, `http://your-public-dns-name:3000` still works, and this time we
    can safely close our SSH connection.
  prefs: []
  type: TYPE_NORMAL
- en: Terminating our EC2 instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with most Hello World exercises, once the `helloworld` message is displayed,
    the goal is reached. It is now time to think about shutting down our server. Since
    we only pay for what we consume in AWS, freeing up unnecessary resources such
    as this server is a good strategy for making AWS very cost effective.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do a clean shutdown of the Hello World service using the `stop` command.
    We can then exit the virtual server and terminate our instance, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a quick and simple introduction to AWS and its most notorious
    service, EC2\. After signing up for AWS, we configured our environment in such
    a way that we could create a virtual server using the command-line interface.
    Leading to this, we selected our first AMI, created our first security group,
    and generated our SSH keys, which we will reuse throughout the book. After launching
    an EC2 instance, we manually deployed a simple Node.js application to display
    Hello World.
  prefs: []
  type: TYPE_NORMAL
- en: While the process wasn't very fastidious thanks to the AWS CLI, it still required
    going through numerous steps, which aren't very repeatable. We also deployed the
    application without any automation or validation. Furthermore, the only way we
    can check if the application is running is by manually checking the endpoint.
    In the remainder of the book, we will revisit the process of creating and managing
    web applications and infrastructure, but, this time, we will follow the DevOps
    principles and incorporate their best practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Chapter 3*, Treating Your Infrastructure as Code*, we will address one of
    the first issues we encountered: managing our infrastructure with automation.
    To do that, we will write code to manage our infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How do you create a free-tier AWS account?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you create your first AWS cloud instance using the AWS Console portal?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you create your first AWS cloud instance using the AWS CLI utility?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you deploy a simple Hello World web application on your newly created
    AWS instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you destroy your created AWS instance to complete this exercise?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following links for for more information on AWS and AWS CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Free Tier**: [https://aws.amazon.com/free/](https://aws.amazon.com/free/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Command Line Interface**: [https://aws.amazon.com/cli/](https://aws.amazon.com/cli/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
