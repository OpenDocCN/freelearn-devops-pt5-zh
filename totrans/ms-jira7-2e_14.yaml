- en: Chapter 14. Customizing Look, Feel, and Behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JIRA offers a simple functionality in its UI to change the colors of various
    sections and elements, such as the header, footer, and links; you can also upload
    your custom logo. However, if you want to change the width of a certain section
    or the whole body element, you can't do it from the UI. It's possible to include
    your own custom CSS to make changes to the look and feel. It's also possible to
    load custom JavaScript in a JIRA instance; this enables changes in the behavior
    of various HTML elements. For example, you can selectively show or hide a field
    on another field's values and insert text-based templates in JIRA fields. In this
    chapter, we will take a look at such customizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding your own CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding JavaScript to show/hide field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Velocity** templates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding your own CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The JIRA administration interface allows you to change the look and feel of
    various elements in JIRA and to change the default logo. Perform these steps to
    customize your JIRA interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **System** | **Look and feel** (under **USER
    INTERFACE**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first option on this page is to change **Logo**. Click on the **Browse…** button
    and then click on the **Upload Logo** button to upload your own custom logo:![Adding
    your own CSS](img/image_14_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second option is to display **Site Title**, located next to logo. Check
    the **Show Site Title** checkbox and click on the **Update** button:![Adding your
    own CSS](img/image_14_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice that the name of your instance, which you entered while installing
    JIRA, will now appear right next to the JIRA logo. In our example, it''s **Sparxsys
    JIRA Demo**, which now appears next to the JIRA logo:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Adding your own CSS](img/image_14_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The third option is to update **Favicon**, which appears in the browser tab
    when JIRA is opened. Click on the **Browse…** button to select the new **Favicon**
    image and then click on the **Upload Favicon** button:![Adding your own CSS](img/image_14_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fourth option is to change the color of various sections of JIRA's web interface.
    For instance, click on any color in the box for **Header Background Color**. In
    the popup window, select the new color, or enter the color's hexadecimal value
    directly. Let's change this color to red, with a hexadecimal value of `#ff0000`.
    Click on the **Update** button to continue:![Adding your own CSS](img/image_14_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The color of the main navigation bar is now red.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the color of various sections available from this interface and
    match it with your company's color scheme, but JIRA's interface is limited to
    changing colors. If you want to change the width of the `<body>` element or give
    extra padding and margins to certain sections, it's not possible to do it through
    this interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, it''s possible to insert your own custom CSS in JIRA, which can override
    the default look and feel. Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **System** | **Announcement banner** (under **USER
    INTERFACE**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Announcement** text area, copy `<LINK href="http://localhost:8080/includes/custom_css/custom_style.css"
    rel="stylesheet" type="text/css">` and click on the **Set Banner** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Adding your own CSS](img/image_14_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Announcement banner** is used to display text common to all the users
    in JIRA on all the pages in JIRA; the good thing is that it supports HTML tags
    as well. In our case, we want to load a custom CSS code to all the pages. The
    `LINK` tag mentioned previously specifies the path where our custom CSS will be
    found. Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `custom_css` folder in the following directory in your JIRA installation
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to the `custom_css` folder and create a `custom_style.css` file; the
    location of the file should be `JIRA_INSTALL/atlassian-jira/includes/custom_css/custom_style.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This file contains the CSS to make changes to the UI of JIRA which are otherwise
    not possible through configurations. When you save the **Announcement banner**,
    nothing will be displayed to the user, but this CSS file will be loaded on all
    the pages. You can also verify this by viewing the source code of any page in
    JIRA and searching for the filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding your own CSS](img/image_14_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you can see that our custom CSS file is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to add some CSS code to this file and change the look and feel
    of our JIRA instance. Open the `custom_style.css` code in your favorite editor
    and enter the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, refresh your JIRA instance in your browser. You should now see that the
    preceding CSS code is applied and the changes have appeared, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding your own CSS](img/image_14_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can further customize the look and feel of the web page by adding your own
    CSS code. This will be loaded to every page; just make sure that the code in the
    **Announcement banner** is not removed.
  prefs: []
  type: TYPE_NORMAL
- en: We have added an additional file to the JIRA filesystem. It's very important
    to keep a note of this file and save it separately too. When you upgrade your
    JIRA instance to a new version or migrate to a new server, the JIRA administrator
    should make sure that this file is not removed; otherwise, the customizations
    to the look and feel of the web page will not appear.
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript to show/hide field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JIRA comes with tons of functionalities and customizations; however, there are
    times when you want more control over the behavior of HTML fields. For instance,
    if you want to show or hide a particular custom field on the basis of a value
    of another custom field, you can use custom JavaScript to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a scenario where users who create a ticket in JIRA need to enter
    their analysis in one of the text areas based on the custom field, but they only
    need to fill it in when the priority of the issue is highest. Now, in order to
    achieve this, we want to completely hide the **Analysis** field first, and display
    it only when users set **Priority** as **Highest**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike the preceding example for inserting custom CSS, the custom JavaScript
    can be added directly from the JIRA interface. Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to JIRA **Administration** | **Issues** | **Custom fields** (under **FIELDS**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add custom field** button in the top-right corner and select
    **Field Type** as **Text Field (multi-line)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, enter `Analysis` as **Name** and enter the JavaScript code
    (`analysis_js.css`) in the **Description** field of the custom field, as shown
    in the following screenshot:![Adding JavaScript to show/hide field](img/image_14_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add this field in the screen associated with the **Create Issue** operation
    just after the **Priority** system field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the field description of custom fields can also be controlled by **Field
    Configurations** option. In [Chapter 4](ch04.html "Chapter 4. Customizing JIRA
    for Test Management"), *Customizing JIRA for Test Management*, we discussed the
    purpose of field configurations. In the previous example, we added the JavaScript
    code in the field description while creating the custom field; it will be overwritten
    if field configurations are used in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand the important section of this JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Analysis** custom field ID is equal to `10100` and we assigned a target
    variable to this field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, for the **Priority** field, we check whether its value is **Highest**,
    which is selectable from a list with different numerical values for **Highest**,
    **High**, **Medium**, **Low**, and **Lowest** (**Highest** having the numerical
    value `1`). For every other value, the **Analysis** field is hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When users select the **Priority** as **Highest**, the **Analysis** field is
    displayed again.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the issue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After creating the **Analysis** field, just add one more issue in JIRA to test
    it. By default, the **Analysis** field is not displayed to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the issue](img/image_14_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The moment you select **Priority** as **Highest**, the **Analysis** text area
    will be visible to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the issue](img/image_14_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This example is just to give you an idea of how to use JavaScript to control
    the behavior of HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: Velocity templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Velocity is a Java-based, server-side template engine used to render page content
    that allows Java objects to be used alongside HTML elements. As JIRA has been
    written in Java, it utilizes Velocity templates to display the content. These
    template files can be modified by the user. However, Atlassian will not provide
    any support for such changes to the template files; therefore, I recommend taking
    a backup of the original files before making any changes to them.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, let's discuss a few examples where we will make changes to
    these templates.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the description system field with predefined text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JIRA allows you to add a description for every custom field, where some instructions
    on how to enter the data can be given to the end user. However, it''s sometimes
    useful to present the user with a predefined text, which is like a text-based
    template. In this example, we will add some default text in the JIRA **Description**
    system field. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the following file in your JIRA installation directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following code just before the `$rendererDescriptor.getEditVM()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code is shown in the following screenshot:![Modifying the description system
    field with predefined text](img/image_14_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart your JIRA instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the JIRA instance is restarted, click on the **Create** button to create
    an issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that the default text now appears in the **Description** field:![Modifying
    the description system field with predefined text](img/image_14_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the same method to add custom predefined text to other fields as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'After modifying the **Description** field template using the previous code,
    this predefined text will be added to the **Description** field for all the projects
    and issue types in your JIRA instance, but it''s possible to restrict it to a
    specific project and issue type. Instead, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To define the default value of a custom field, the context can also be used,
    which is discussed in [Chapter 17](ch17.html "Chapter 17. JIRA Best Practices"),
    *JIRA Best Practices*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code, we just added two lines at the top to restrict **Project
    Key** to `SSP` and **Issue Type** to `Story`. Make sure that you restart your
    JIRA instance before making any changes in the template file. If you don''t want
    to restart your instance, it''s also possible to disable the caching of Velocity
    templates by following these steps in your JIRA installation directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Uncomment (remove the `#` sign from `#velocimacro.library.autoreload=true)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change `class.resource.loader.cache` from `true` to `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `JIRA_INSTALL/atlassian-jira/WEB-INF/classes/velocity.properties`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, any change in Velocity templates will be reflected in your instance without
    restarting JIRA. Do this only in your development environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As mentioned previously, for custom CSS, keep track of any changes you make
    in the template file and always keep a backup of the original template file. It's
    important to note that Atlassian will not provide any support for customizations
    made on the template files.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the footer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are various template files you can customize in JIRA, and for various
    sections of the web page. Let''s take a look at another example, where we will
    add some custom text to the footer section. Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the following file in your JIRA installation directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This file has a lot of content; just navigate to the bottom of the file and
    add the following lines before `#end`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The file looks as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Modifying the footer](img/image_14_014.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Restart your JIRA instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the JIRA instance is restarted, you will notice some additional text before
    the Atlassian logo:![Modifying the footer](img/image_14_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying a custom field in e-mails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s also possible to customize e-mails sent to the users. The e-mail content
    is also generated using Velocity templates. Let''s now customize the template
    for e-mails that are sent when an issue is created. The custom fields that are
    created in the system are not included in the e-mail content, but we will modify
    the Velocity template of the issue creation e-mail and include the **Analysis**
    field (which we added earlier). Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the following file in your JIRA installation directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code before the final `#parse` at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and restart JIRA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the JIRA instance is restarted, create one issue in JIRA and fill the **Analysis**
    field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the e-mail you receive; it should have the **Analysis** field value now.
    The e-mail content should look similar to the following screenshot:![Displaying
    a custom field in e-mails](img/image_14_016.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are templates for similar events and system fields. You can explore them
    and make changes to them once you get comfortable with Velocity templates.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to customize the look and feel of JIRA by inserting
    custom CSS codes. We also modified the behavior of HTML elements of the JIRA interface
    using JavaScript to show/hide JIRA fields based on the selection made by the user,
    of a specific value from a selectable list. Finally, we explored Velocity templates
    and how to modify the displayed content. We also discussed how to insert custom
    field values in e-mails.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss JIRA Service Desk, which has become the
    most popular way to cater to your customer support requests. Service Desk is now
    a separate application, which can either be installed as a standalone application
    or as an application along with JIRA Core. Service Desk comes with inbuilt configurations
    that are standard to any support project.
  prefs: []
  type: TYPE_NORMAL
