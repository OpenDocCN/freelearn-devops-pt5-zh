["```\n$ docker run -d -p 5000:5000 --restart=always --name registry registry:2\n```", "```\n$ docker run -d -p 443:443 --restart=always --name registry -v `pwd`/certs:/certs -e REGISTRY_HTTP_ADDR=0.0.0.0:443 -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key registry:2\n```", "```\n$ mkdir auth\n$ docker run --entrypoint htpasswd httpd:2 -Bbn <username> <password> > auth/htpasswd\n```", "```\n$ docker run -d -p 443:443 --restart=always --name registry -v `pwd`/auth:/auth -e \"REGISTRY_AUTH=htpasswd\" -e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd -v `pwd`/certs:/certs -e REGISTRY_HTTP_ADDR=0.0.0.0:443 -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key registry:2\n```", "```\nFROM ubuntu:20.04\nRUN apt-get update && \\\n    apt-get install -y python\n```", "```\n$ docker build -t ubuntu_with_python .\n```", "```\n<registry_address>/<image_name>:<tag>\n```", "```\n$ docker tag ubuntu_with_python leszko/ubuntu_with_python:1\n```", "```\n$ docker login --username <username> --password <password>\n```", "```\n$ docker push leszko/ubuntu_with_python:1\n```", "```\n$ docker rmi ubuntu_with_python leszko/ubuntu_with_python:1\n```", "```\n$ docker pull leszko/ubuntu_with_python:1\n```", "```\nFROM openjdk:11-jre\nCOPY build/libs/calculator-0.0.1-SNAPSHOT.jar app.jar\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n```", "```\n$ ./gradlew build\n$ docker build -t calculator .\n$ docker run -p 8080:8080 --name calculator calculator\n```", "```\n$ git add Dockerfile\n$ git commit -m \"Add Dockerfile\"\n$ git push\n```", "```\nstage(\"Package\") {\n     steps {\n          sh \"./gradlew build\"\n     }\n}\nstage(\"Docker build\") {\n     steps {\n          sh \"docker build -t leszko/calculator .\"\n     }\n}\n```", "```\nstage(\"Docker push\") {\n     steps {\n          sh \"docker push leszko/calculator\"\n     }\n}\n```", "```\nstage(\"Deploy to staging\") {\n     steps {\n          sh \"docker run -d --rm -p 8765:8080 --name calculator leszko/calculator\"\n     }\n}\n```", "```\n#!/bin/bash\ntest $(curl localhost:8765/sum?a=1\\&b=2) -eq 3\n```", "```\nstage(\"Acceptance test\") {\n     steps {\n          sleep 60\n          sh \"chmod +x acceptance_test.sh && ./acceptance_test.sh\"\n     }\n}\n```", "```\npost {\n     always {\n          sh \"docker stop calculator\"\n     }\n}\n```", "```\nGiven I have two numbers: 1 and 2\nWhen the calculator sums them\nThen I receive 3 as a result\n```", "```\nFeature: Calculator\n  Scenario: Sum two numbers\n    Given I have two numbers: 1 and 2\n    When the calculator sums them\n    Then I receive 3 as a result\n```", "```\npackage acceptance;\nimport io.cucumber.java.en.Given;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\nimport org.springframework.web.client.RestTemplate;\nimport static org.junit.Assert.assertEquals;\n/** Steps definitions for calculator.feature */\npublic class StepDefinitions {\n    private String server = System.getProperty(\"calculator.url\");\n    private RestTemplate restTemplate = new RestTemplate();\n    private String a;\n    private String b;\n    private String result;\n    @Given(\"^I have two numbers: (.*) and (.*)$\")\n    public void i_have_two_numbers(String a, String b) throws Throwable {\n        this.a = a;\n        this.b = b;\n    }\n    @When(\"^the calculator sums them$\")\n    public void the_calculator_sums_them() throws Throwable {\n        String url = String.format(\"%s/sum?a=%s&b=%s\", server, a, b);\n        result = restTemplate.getForObject(url, String.class);\n    }\n    @Then(\"^I receive (.*) as a result$\")\n    public void i_receive_as_a_result(String expectedResult) throws Throwable {\n        assertEquals(expectedResult, result);\n    }\n}\n```", "```\n            testImplementation(\"io.cucumber:cucumber-java:7.2.0\")\n            testImplementation(\"io.cucumber:cucumber-junit:7.2.0\")\n    ```", "```\n           tasks.register('acceptanceTest', Test) {\n           include '**/acceptance/**'\n           systemProperties System.getProperties()\n         }\n\n         test {\n           useJUnitPlatform()\n           exclude '**/acceptance/**'\n         }       \n    ```", "```\n            package acceptance;\n            import io.cucumber.junit.CucumberOptions;\n            import io.cucumber.junit.Cucumber;\n            import org.junit.runner.RunWith;\n            /** Acceptance Test */\n            @RunWith(Cucumber.class)\n            @CucumberOptions(features = \"classpath:feature\")\n            public class AcceptanceTest { }\n    ```", "```\n$ ./gradlew acceptanceTest \\\n-Dcalculator.url=http://localhost:8765\n```", "```\nScenario: Store book in the library\n  Given Book \"The Lord of the Rings\" by \"J.R.R. Tolkien\" with ISBN number \"0395974682\"\n  When I store the book in library\n  Then I am able to retrieve the book by the ISBN number\n```"]