- en: Threat Modeling Practices and Secure Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After discussing security architecture and design principles, we will now introduce
    threat modeling security practices and tools. The adoption of threat modeling
    practices can help to reduce major security risks in the design phase. In addition,
    once the risks are identified, we will introduce how to apply OWASP secure design best
    practices to mitigate security risks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics to be covered in this chapter are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling with STRIDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagram designer tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Card game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat library references
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Case study: formal documents or not?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Threat modeling is a security practice for the team to identify threats, attacks,
    and risks based on the existing architecture design, and also to mitigate these
    potential security risks. There are a few key points to clarify in threat modeling
    before we discuss them further:'
  prefs: []
  type: TYPE_NORMAL
- en: It's a team activity. It's not just the developer's job. It will be more effective
    with QA, operation, architect, and security team involvement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling may be the only security practice that is not recommended to
    be done by automation. It's a team exercise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The purpose of threat modeling is not to offer a comprehensive threat list,
    but to identify high-risk threats with key modules such as authentication, authorization,
    purchases, or customer info handling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's suggested to do threat modeling when the architecture design is done or
    before the detailed design and coding stages, although it's also common to apply
    threat modeling to existing applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A typical threat modeling process includes a DFD diagram or architecture review,
    threat analysis, risk impact assessment, mitigations, and product implementation
    action review. A Threat modeling normally begins with an analysis of the architecture.
    DFD diagrams may commonly be used in threat modeling activity. However, as long
    as the team can understand the whole architecture design and information flow,
    UML or other existing architecture designs may also do the job. The objective
    of threat modeling is to discuss the most relevant and high-priority security
    risks with mitigations. Don't let the process or tools limit the team's learning
    and innovation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the complexity of the applications, we may do threat modeling
    with architecture or high-level design. If it''s a very large project, and most
    of the modules serve similar functions, it''s suggested you perform the threat
    modeling with high-risk parts or the one which can mostly represent the business
    functions. Here are the recommended modules for threat modeling. These also apply
    to coding review:'
  prefs: []
  type: TYPE_NORMAL
- en: Modules with security controls such as authentication, authorization, session
    management, encryption, data validation, error handling, or logging, administration,
    and database handlers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legacy modules with vulnerable CVE.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules that may externally interact with unknown users or third-party APIs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules that handle sensitive information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat modeling with STRIDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The STRIDE threat model defines threats in six categories, which are spoofing,
    tampering, repudiation, information disclosure, denial of service, and elevation
    of privilege. It's normally used to assess the architecture design.
  prefs: []
  type: TYPE_NORMAL
- en: 'The threat STRIDE model and general security mitigation are summarized in the
    following table. In addition to STRIDE, it''s also suggested to include privacy
    in the analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **STRIDE threats** | **Mitigation** |'
  prefs: []
  type: TYPE_TB
- en: '| Spoofing | Authentication such as credentials, certificates, and SSH |'
  prefs: []
  type: TYPE_TB
- en: '| Tampering | Integrity (HASH256, digital signature) |'
  prefs: []
  type: TYPE_TB
- en: '| Repudiation | Authentication, logging |'
  prefs: []
  type: TYPE_TB
- en: '| Information Disclosure | Confidentiality (encryption, ACL) |'
  prefs: []
  type: TYPE_TB
- en: '| Denial of Service | Availability (load balance, buffer, message queue) |'
  prefs: []
  type: TYPE_TB
- en: '| Elevation of Privilege | Authorization (ACL) |'
  prefs: []
  type: TYPE_TB
- en: '| Privacy (additionally included) | Data masking, access control, user consent,
    removal |'
  prefs: []
  type: TYPE_TB
- en: 'The analysis of STRIDE analysis normally involves the entity (user, admin,
    external application), the process (web server, FTP, service), the data store
    (database or file), the dataflow (parameters or information between modules, processes,
    systems, or users), and the trust boundary. Here are some examples of STRIDE analysis
    mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **STRIDE and privacy threats** | **Examples** |'
  prefs: []
  type: TYPE_TB
- en: '| Spoofing | The entity (user or client side) may spoof its identity.The process
    may spoof its source. |'
  prefs: []
  type: TYPE_TB
- en: '| Tampering | The process may be tampered with, such as in a DLL injection
    attack.The data store can be tampered with.The information flow may be tampered
    with, such as MITM. |'
  prefs: []
  type: TYPE_TB
- en: '| Repudiation | The entity (client side) may deny what has been done.The process
    may tamper with logs to deny what has been done.The data store of audit logs can
    be tampered with. |'
  prefs: []
  type: TYPE_TB
- en: '| Information disclosure | The process itself may include an encryption key
    and can be reversed.The data store keeps clear-text copies of passwords.The data
    flow transmits the password without an encryption channel. |'
  prefs: []
  type: TYPE_TB
- en: '| Denial of service | The process may be connected to too many clients, and
    be overloaded.The data store is damaged or full.The data flow is disconnected
    and can''t reach the destination. |'
  prefs: []
  type: TYPE_TB
- en: '| Elevation of Privilege | The process should be in user-mode but can execute
    a kernel-mode command.The process is running with additional permissions. |'
  prefs: []
  type: TYPE_TB
- en: '| Privacy | The external entity (client app) may collect PII but doesn’t inform
    the user.The data store keeps PII in logs without anonymization. |'
  prefs: []
  type: TYPE_TB
- en: Refer to OWASP *Application Threat Modeling* for more examples based on the
    DFD diagram: [https://www.owasp.org/index.php/Application_Threat_Modeling](https://www.owasp.org/index.php/Application_Threat_Modeling).
  prefs: []
  type: TYPE_NORMAL
- en: In practice, STRIDE may still be too general for the team to proceed with the
    threat discussion. It's highly suggested to use a checklist or threat library
    lists, such as a CWE list ([https://cwe.mitre.org/data/index.html](https://cwe.mitre.org/data/index.html)),
    **Common Attack Pattern Enumeration and Classification** (**CAPEC**), or **Adversarial
    Tactics, Techniques and Common Knowledge** (**ATT&CK**), which we will discuss
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Tools and templates are there to help the team to do threat modeling more efficiently.
    On the other hand, the use of tools may introduce a learning curve or overhead
    to the team. We will introduce some tools to apply to threat modeling practices.
  prefs: []
  type: TYPE_NORMAL
- en: Diagram designer tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These kinds of tool help you to draw the application diagrams (DFD), to mark
    the trust boundaries, and to label the threat attributes. The tools also include
    a threat library for users to select a threat from the library. It's an ideal
    tool to document the threat modeling analysis report. Normally, the application
    architecture and system diagram DFD were presented followed by the threat identification.
  prefs: []
  type: TYPE_NORMAL
- en: If your team is geographically distributed across several regions, or the threat
    modeling requires offline feedback with several roles across different time zones,
    using of the tool to produce the threat modeling analysis report is highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Microsoft Threat Modeling tool, OWASP Threat Dragon, and Mozilla SeaSponge
    are the tools in this category that allow you to draw DFD diagrams with threat analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Threat Modeling Tool: [https://www.microsoft.com/en-us/download/details.aspx?id=49168](https://www.microsoft.com/en-us/download/details.aspx?id=49168)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Threat Dragon: [https://www.owasp.org/index.php/OWASP_Threat_Dragon](https://www.owasp.org/index.php/OWASP_Threat_Dragon)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mozilla SeaSponge: [http://mozilla.github.io/seasponge/](http://mozilla.github.io/seasponge/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Card games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Card games makes threat modeling a team-building game. All team members are
    gathered together with a deck of cards and the data flow diagram of the application.
    Each card represents one common threat. Take OWASP Cornucopia as an example. The
    threats are also mapped to industry practices such as OWASP SCP, OWASP ASVS, CAPEC,
    and SAFECode.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OWASP Cornucopia defines six suits for the key security areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data validation and encoding** (**VE**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication** (**AT**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session management** (**SM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorization** (**AZ**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cryptography** (**CR**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cornucopia** (**C**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to this link for a DOC or PDF version of the cards: [https://www.owasp.org/index.php/OWASP_Cornucopia#tab=Get_the_Cards](https://www.owasp.org/images/6/6b/Owasplondon-colinwatson-cornucopia.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the **Data Validation & Encoding** suit card 2, which follows,
    shows the attack scenario, and the mapping security best practices with OWASP
    SCP, ASVS, AppSensor, CAPEC, and SAFECode:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **2** |'
  prefs: []
  type: TYPE_TB
- en: '| Brian can gather information about the underlying configurations, schemas,
    logic, code, software, services, and infrastructure due to the content of error
    messages, poor configuration, or the presence of default installation files or
    old, test, backup, or copies of resources, or exposure of source code |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; OWASP SCP69, 107-109, 136, 137, 153, 156, 158, 162 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; OWASP ASVS1.10, 4.5, 8.1, 11.5, 19.1, 19.5 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; OWASP AppSensorHT1-3 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; CAPEC54, 541 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; SAFECode4, 23 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; OWASP Cornucopia Ecommerce Website Edition v1.20-EN &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: This card game can also be an effective tool even with just one developer. A
    developer or tester can draw a card randomly to reflect the security issue of
    the existing application.  Use the cards to think about whether the existing design
    will be vulnerable to threats or any missing security considerations. This card
    game can make threat modeling a lot of fun. There is no doubt that F2F discussion
    is always the most effective method of communication.
  prefs: []
  type: TYPE_NORMAL
- en: There are two issues we need to be aware of. First, for a team to be able to
    play the card game together, the F2F team must be sitting together. Secondly,
    a project team that is distributed across several regions may not be able to play
    the card game together. To address these two issues, an official documentation
    of discussion results is still needed. The documentation, which includes identified
    risks and mitigation actions, is not only for the team that can't join the card
    game for review but also for the purposes of tracking.
  prefs: []
  type: TYPE_NORMAL
- en: 'References of the card games are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsft EOP card game: [https://www.microsoft.com/en-us/sdl/adopt/eop.aspx](https://www.microsoft.com/en-us/sdl/adopt/eop.aspx)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Cornucopia card game: [https://www.owasp.org/index.php/OWASP_Cornucopia](https://www.owasp.org/index.php/OWASP_Cornucopia)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat library references
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, it''s just difficult to brainstorm threats during threat modeling
    analysis. It will be easier to pick up and select threats from the threat list
    library that fit the existing application design. Card games do help, but they
    may only present the most common threats. If you find the threats do not fit your
    projects or you need additional threat libraries to refer to, here are some suggested
    industry threat libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Threat library** | **Characteristics** |'
  prefs: []
  type: TYPE_TB
- en: '| CAPEC | It lists 508 attack patterns in a tree view. The attack patterns
    are also available in CSV and XML format. Each attack pattern is labeled with
    a CAPEC-ID number.  |'
  prefs: []
  type: TYPE_TB
- en: '| ATT&CK | The threats are categorized by platform (Linux, Windows, Mac, mobile)
    with specific attack techniques. Each threat is also discussed with technical
    mitigation and detection approaches. It includes lots of practical hacker and
    malware attack techniques.  |'
  prefs: []
  type: TYPE_TB
- en: '| CWE | CWE is a list of software weaknesses. Each CWE is categorized into
    a threat tree view and presented with both insecure and secure source code implementations.
    It''s also a very good reference for secure coding.  |'
  prefs: []
  type: TYPE_TB
- en: Case study – formal documents or not?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at a case study to discuss the different approaches of threat modeling
    practices. Peter and Linda, who are security leads, plan to do threat modeling
    with a project team. Peter is in a very large organization. The project team is
    distributed across the Globe. The security process requires a formal threat modeling
    analysis report as parts of the criteria to move on to the next step. On the other
    hand, Linda is working with a small software company. Team members are all in
    the same location. Linda thinks using a whiteboard and card game discussion will
    be more interactive and efficient instead of detailed documents. As a result,
    Peter and Linda decided on different approaches to run the threat modeling as
    summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Formal process (Peter)** | **Group discussion (Linda)** |'
  prefs: []
  type: TYPE_TB
- en: '| **Characteristics** | Required formal document deliveryFollow templates and
    tools to generate the required outputDocuments may accumulate knowledge | No formal
    document deliveryApply card games that focus on the process of team interaction
    and discussion. |'
  prefs: []
  type: TYPE_TB
- en: '| **Tools** | Checklist and templatesThreat modeling and diagram designer |
    Card gamesWhite board |'
  prefs: []
  type: TYPE_TB
- en: '| **Disadvantages** | Documents may be an overhead for the team | Lack of documents
    during the discussionIt may only fit a team whose members are geographically located
    together |'
  prefs: []
  type: TYPE_TB
- en: There is no perfect process. It's just a case of which approach works best for
    the team. There is no constraint that Peter should not use card games or Linda
    should not apply the formal process. The most important part of any process's
    adoption is to understand the objective and the rationale of the process. For
    example, Linda may consider documenting the final card game discussion results
    for stakeholders' reference. Peter may consider using card games for a small module/team
    to reduce the documentation overhead. Considering a mixed approach may be a good
    idea. Just don’t let the process limit the team's creativity and innovation.
  prefs: []
  type: TYPE_NORMAL
- en: Secure design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Secure design can be a very broad topic to discuss. In this section, we are
    going to focus on the discussion with seven key security controls: authentication,
    authorization, session management, data validation, error handling, logging, and
    encryption. Refer to the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A secure design may be related to several factors including security requirements,
    the adoption of the security framework, the logic flow, and the right implementation.
    Take authentication as an example—market security requirements may add two-factor
    authentication or **one-time password** (**OTP**). A security framework, such
    as Spring Security or Shiro itself, provides authentication, authorization, and
    session management security controls. However, the wrong logic flow and incorrect
    implementation may result in its authentication bypassing security issues. Although
    an organization can define secure design policies and guidelines, it's still the
    most effective by showing the security framework, CWE case studies, and implementation
    samples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secure design training or newsletters can include the industry-common CWE and
    also in-house projects'' common issues followed by secure design suggestions.
    It''s also suggested to introduce a security framework with the common incorrect
    implementations that result in security risks. Here, we only list a sample for
    Java implementation. In addition, the following links are suggested for further
    reading:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Cheat Sheet: [https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series](https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Secure Coding Practices: [https://www.owasp.org/index.php/OWASP_Secure_Coding_Practices_-_Quick_Reference_Guide](https://www.owasp.org/index.php/OWASP_Secure_Coding_Practices_-_Quick_Reference_Guide)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SAFECode Security in Agile: [http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf](http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Top 10 Proactive Control: [https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf](https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Just remember that the adoption of a security framework doesn''t mean the application
    will be secured. It still requires the right implementation of the framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Common CWE** | **Open-source framework** |'
  prefs: []
  type: TYPE_TB
- en: '| Authentication | CWE-294: Authentication Bypass by Capture-replay CWE-306:
    Missing Authentication for Critical Function'
  prefs: []
  type: TYPE_NORMAL
- en: 'CWE-307: Improper Restriction of Excessive Authentication Attempts'
  prefs: []
  type: TYPE_NORMAL
- en: CWE-640 Weak Password Recovery Mechanism for Forgotten Password | Spring SecurityShiroKeyCloakVisualCaptchaprivacyIDEA
    |
  prefs: []
  type: TYPE_NORMAL
- en: '| Authorization | CWE-639: Authorization Bypass Through User-Controlled KeyCWE-647:
    Use of Non-Canonical URL Paths for Authorization DecisionsCWE-425: Direct Request
    (''Forced Browsing'') | Spring SecurityShiro |'
  prefs: []
  type: TYPE_TB
- en: '| Session Management | CWE-384: Session FixationCWE-613: Insufficient Session
    ExpirationCWE-6: J2EE Misconfiguration: Insufficient Session-ID LengthCWE-488:
    Exposure of Data Element to the Wrong Session | Spring SecurityShiroJetty |'
  prefs: []
  type: TYPE_TB
- en: '| Data validation | CWE-89 Improper Neutralization of Special Elements used
    in an SQL CommandCWE-77: Improper Neutralization of Special Elements used in a
    CommandCWE-120: Buffer Copy without Checking Size of Input (''Classic Buffer Overflow'')
    | Java Commons Validator |'
  prefs: []
  type: TYPE_TB
- en: '| Error handling | CWE-200: Information ExposureCWE-460: Improper Cleanup on
    Thrown Exception | N/A. It normally requires secure coding practices and proper
    configurations. |'
  prefs: []
  type: TYPE_TB
- en: '| Logging | CWE-532: Information Exposure Through Log FilesCWE-117: Improper
    Output Neutralization for LogsCWE-779: Logging of Excessive Data | SLF4F (Simple
    Logging Façade for Java)OWASP Security Logging |'
  prefs: []
  type: TYPE_TB
- en: '| Encryption | CWE-759: Use of a One-Way Hash without a Salt CWE-523: Unprotected
    Transport of CredentialsCWE-330: Use of Insufficiently Random Values | OpenSSLBouncyCastle
    |'
  prefs: []
  type: TYPE_TB
- en: 'Here are other practical secure software implementation frameworks suggested
    by OWASP Proactive Controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **OWASP top 10 proactive controls** | **Open source tools and frameworks**
    |'
  prefs: []
  type: TYPE_TB
- en: '| C1: Define Security Requirements |'
  prefs: []
  type: TYPE_TB
- en: OWASP **Application Security Verification Standard** (**ASVS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP **Mobile Application Security Verification Standard** (**MASVS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| C2: Leverage Security Frameworks and Libraries |'
  prefs: []
  type: TYPE_TB
- en: OWASP Dependency Check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Dependency Track
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retire.JS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| C3: Secure Database Access |'
  prefs: []
  type: TYPE_TB
- en: CIS Database Hardening Standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| C4: Encode and Escape Data |'
  prefs: []
  type: TYPE_TB
- en: OWASP Java Encoder Project Examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Java Encoder Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AntiXSSEncoder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zend/Escaper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| C5: Validate All Inputs |'
  prefs: []
  type: TYPE_TB
- en: OWASP Java HTML Sanitizer Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java JSR-303/JSR-349 Bean Validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Hibernate Validator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JEP-290 Filter Incoming Serialization Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Commons Validator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP’s filter functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| C6: Implement Digital Identity |'
  prefs: []
  type: TYPE_TB
- en: LinOTP OTP Authentication: [https://www.linotp.org/](https://www.linotp.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gluu Server: [https://www.gluu.org/gluu-server/overview/](https://www.gluu.org/gluu-server/overview/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| C7: Enforce Access Controls |'
  prefs: []
  type: TYPE_TB
- en: OWASP ZAP with the optional access control testing add-on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| C8: Protect Data Everywhere |'
  prefs: []
  type: TYPE_TB
- en: '**SSLyze**: SSL configuration scanning library and CLI tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSLLabs**: free service for scanning and checking TLS/SSL configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP O-Saft TLS Tool**: TLS connection testing tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TLS Observatory**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSL Config generator**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitRob**: Command-line tool to find sensitive information in publicly available
    files on GitHub'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TruffleHog**: Searches for secrets accidentally committed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KeyWhiz**: Secrets manager'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hashicorp Vault**: Secrets manager'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| C9: Implement Security Logging and Monitoring |'
  prefs: []
  type: TYPE_TB
- en: OWASP Security Logging Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Logging Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| C10: Handle All Errors and Exceptions |'
  prefs: []
  type: TYPE_TB
- en: Error Prone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaos Monkey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to the root/cause analysis of a security issue, sometimes it's
    very difficult to identify if the issue was caused by insecure design or insecure
    coding. Whenever it's possible, it's suggested to document the secure design as
    a detailed specific implementation. For example, the security design document
    may define the uses of a secure random number to do encryption. However, without
    the specific definition of a secure random number, the development team is still
    unable to achieve a secure implementation. Please also refer to the OWASP Cryptographic
    Storage Cheat Sheet for advice on strong random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'An organization may consider building an internal secure design knowledge portal,
    which includes the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure design case studies**: Every case study includes the scenario, the
    security issue, and the design to mitigate risks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Suggested implementation framework**: Adoption of a mature security framework
    to solve common security issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security Assistant as part of the IDE plugin**: All secure coding rules can
    still be an overhead for developers. It''s suggested to provide developers with
    an IDE plugin to do a secure coding check and to complement other secure coding
    scanning tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation review toolkit such as code review and dependency review tools.
    We will discuss this in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you still find difficulties in building a secure design knowledge portal,
    the following are good reference sources. The objective of the knowledge portal
    is to provide a developer with all the knowledge, tools, tutorials, and best practices
    to achieve a secure design:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Security Knowledge Framework: [https://www.securityknowledgeframework.org/demo.php](https://www.securityknowledgeframework.org/demo.php)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open Reference Architecture for Security and Privacy:  [http://security-and-privacy-reference-architecture.readthedocs.io/en/latest/index.html](http://security-and-privacy-reference-architecture.readthedocs.io/en/latest/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile Threat Catalogue: [https://pages.nist.gov/mobile-threat-catalogue/](https://pages.nist.gov/mobile-threat-catalogue/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Cheat Sheet Series: [https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series](https://www.owasp.org/index.php/OWASP_Cheat_Sheet_Series)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In practice, the adoption of a secure framework can help you to achieve secure
    architecture, design, and implementation since those security frameworks are built
    with security by default. In addition, the adoption of a secure framework still
    requires the secure coding and implementation. In the next chapter, we will explore
    more secure coding and implementation in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed the importance of the whole team's involvement with threat modeling
    practices and the STRIDE examples (spoofing, tampering, repudiation, information
    disclosure, denial of service, and elevation of privilege).
  prefs: []
  type: TYPE_NORMAL
- en: There are several tools and methodologies to do threat modeling. If you would
    like to have a DFD/threat diagram designer, you can use the Microsoft threat modeling
    tool, OWASP Threat Dragon, or Mozilla SeaSponge. If you have a small team and
    would like to do threat modeling via a card game team activity, the Microsoft
    EOP card game and OWASP Cornucopia are recommended.
  prefs: []
  type: TYPE_NORMAL
- en: We also introduced some threat libraries such as CAPEC, ATT&CK, and CWE, which
    can also support threat identification during threat modeling. We also discussed
    a threat modeling case study, and we understood the pros and cons of using threat
    modeling designers and card games.
  prefs: []
  type: TYPE_NORMAL
- en: On the topic of secure design, we discussed the major key security controls,
    authentication, authorization, session management, data validation, error handling,
    logging, and encryption. We suggested some references on CWE and open source security
    frameworks in each security control category. Furthermore, building a secure design
    knowledge portal is recommended. OWASP SKF and Open Reference Architecture for
    security and privacy are good reference sources.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming chapters, we will discuss secure implementation and coding in
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Threat modeling is only related to developers. QAs, architects, or operation
    teams don't need to get involved. True or false?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following modules should apply threat modeling?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Legacy modules
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Modules with external interaction with third-party vendors
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Modules that handle personal information
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is a security mitigation for Repudiation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hash
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Authentication logging
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Load balance
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following is not mainly used for threat library references?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CAPE
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ATTCK
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SeaSponge
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CWE
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following is not related to the authentication security framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shiro
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Spring Security
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: VisualCaptcha
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Java Commons Validator
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ETSI TS 102 165-1 V4.2.1 (2006-12): Method and proforma for Threat, Risk,
    Vulnerability Analysis**: [http://www.etsi.org/deliver/etsi_ts/102100_102199/10216501/04.02.03_60/ts_10216501v040203p.pdf](http://www.etsi.org/deliver/etsi_ts/102100_102199/10216501/04.02.03_60/ts_10216501v040203p.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-18 Guide for Developing Security Plans for Federal Information Systems: **[https://csrc.nist.gov/publications/detail/sp/800-18/rev-1/final](https://csrc.nist.gov/publications/detail/sp/800-18/rev-1/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ITU-T X.805 (10/2003) Security architecture for systems providing end-to-end
    communications:** [https://www.itu.int/rec/T-REC-X.805-200310-I/en](https://www.itu.int/rec/T-REC-X.805-200310-I/en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oauth2.0 Threat Model and Security Considerations:** [https://tools.ietf.org/html/rfc6819](https://tools.ietf.org/html/rfc6819)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SafeCode Tactical Threat Modeling:** [https://safecode.org/safecodepublications/tactical-threat-modeling/](https://safecode.org/safecodepublications/tactical-threat-modeling/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Threat Risk Modeling:** [https://www.owasp.org/index.php/Threat_Risk_Modeling](https://www.owasp.org/index.php/Threat_Risk_Modeling)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OCTAVE Allegro: Improving the Information Security Risk Assessment Process:** [https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=8419](https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=8419)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-30 Guide for Conducting Risk Assessments:** [https://csrc.nist.gov/publications/detail/sp/800-30/rev-1/final](https://csrc.nist.gov/publications/detail/sp/800-30/rev-1/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAFECode Fundamental Practices for Secure Software Development:** [https://www.safecode.org/publication/SAFECode_Dev_Practices0211.pdf](https://www.safecode.org/publication/SAFECode_Dev_Practices0211.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MSDN Threat Modeling**: [Https://msdn.microsoft.com/en-us/library/ff648644.aspx](https://msdn.microsoft.com/en-us/library/ff648644.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threat Assessment & Remediation Analysis (TARA):** [https://www.mitre.org/sites/default/files/pdf/11_4982.pdf](https://www.mitre.org/sites/default/files/pdf/11_4982.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAFECode Practical Security Stories and Security Tasks for Agile Development
    Environments:** [http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf](http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAFECode Fundamental Practices for Secure Software Development:** [https://safecode.org/wp-content/uploads/2018/03/SAFECode_Fundamental_Practices_for_Secure_Software_Development_March_2018.pdf](https://safecode.org/wp-content/uploads/2018/03/SAFECode_Fundamental_Practices_for_Secure_Software_Development_March_2018.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAFECode Managing Security Risks Inherent in the Use of Third-party**: [https://www.safecode.org/wp-content/uploads/2017/05/SAFECode_TPC_Whitepaper.pdf](https://www.safecode.org/wp-content/uploads/2017/05/SAFECode_TPC_Whitepaper.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SEI Secure Design Patterns:** [https://resources.sei.cmu.edu/asset_files/TechnicalReport/2009_005_001_15110.pdf](https://resources.sei.cmu.edu/asset_files/TechnicalReport/2009_005_001_15110.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure Design Patterns, Carnegie Mellon University:** [https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=9115](https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=9115)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MITRE Attack Matrix**: [https://attack.mitre.org/wiki/ATT%26CK_Matrix](https://attack.mitre.org/wiki/ATT%26CK_Matrix)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAFECode practical security stories and tasks in Agile**: [http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf](http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-63 Digital Identity Guidelines**: [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63-3.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63-3.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Java Exception Handling Tutorials:** [https://docs.oracle.com/javase/tutorial/essential/exceptions/index.html](https://docs.oracle.com/javase/tutorial/essential/exceptions/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
