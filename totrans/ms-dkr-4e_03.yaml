- en: '*Chapter 3*'
  prefs: []
  type: TYPE_NORMAL
- en: Storing and Distributing Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover several services, such as Docker Hub, which allows
    you to store your images, and Docker Registry, which you can use to run your local
    storage for Docker containers. We will review the differences between these services,
    as well as when and how to use each of them. This chapter will also cover how
    to set up automated builds using web hooks, as well as all the pieces that are
    required to set them up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at the topics we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying your own Docker registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing third-party registries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at Microbadger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using our Docker installation to build images. As
    mentioned in the previous chapter, although the screenshots in this chapter will
    be from my preferred operating system, which is macOS, the commands we will be
    running will work on all three operating systems covered in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3iaKo9I](https://bit.ly/3iaKo9I)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we were introduced to Docker Hub in the previous two chapters, we haven't
    interacted with it much other than when using the `docker image pull` command
    to download remote images.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will focus on Docker Hub, which has both a freely available
    option, where you can only host publicly accessible images, and also a subscription
    option, which allows you to host your own private images. We will focus on the
    web aspect of Docker Hub and the management you can do there.
  prefs: []
  type: TYPE_NORMAL
- en: The home page, which can be found at [https://hub.docker.com](https://hub.docker.com),
    contains a **Sign-Up** form and, at the top-right, an option to **Sign in**. The
    odds are that if you have been dabbling with Docker, then you already have a Docker
    ID. If you don't, use the **Sign-Up** form on the home page to create one. If
    you already have a Docker ID, then simply click **Sign in**.
  prefs: []
  type: TYPE_NORMAL
- en: Once logged in, you will be presented with the main Dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: The Docker Hub Dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After logging in to Docker Hub, you will be taken to the following landing
    page. This page is known as the Dashboard of Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The initial Docker Hub Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.01_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – The initial Docker Hub Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: From here, you can get to all the other subpages of Docker Hub. However, before
    we look at those sections, we should talk a little about the Dashboard. From here,
    you can view all your images, both public and private. They are ordered first
    by the number of stars and then by the number of pulls; this order cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming sections, we will go through everything you can see on the Dashboard,
    starting with the light blue menu at the top of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Explore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Explore option takes you to a list of official Docker images; like your
    Dashboard, they are ordered by stars and then pulls. As shown in the following
    screenshot, I have selected the base images. Each of the most popular official
    images has had over 10 million downloads and have thousands of stars:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Exploring Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.02_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Exploring Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: Docker Hub now integrates the Docker Store, giving you a one-stop shop for everything
    Docker-related from a single location rather than several different sources.
  prefs: []
  type: TYPE_NORMAL
- en: Repositories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will go into more detail about creating a repository when in the *Creating
    an automated build* section of this chapter, so I will not go into any details
    here. This section is where you can manage your own repositories. As shown in
    the following screenshot, you get a quick overview of how many people have started
    you repository, as well as how many pulls your image has had, along with details
    of whether the repository is public or private:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – A list of my repositories in Docker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.03_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – A list of my repositories in Docker
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there is a **Create Repository** button here. Since we are going
    to be looking at this process in more detail when it comes to the *Creating an
    automated build* section, we will move on to the next option.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Organizations** are those that you have either created or been added to.
    **Organizations** allow you to layer on control for, say, a project that multiple
    people are collaborating on. The organization gets its own settings, such as whether
    to store repositories as public or private by default or changing plans that will
    allow different numbers of private repositories and separate repositories altogether
    from the ones you or others have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Viewing my list of organizations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.04_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – Viewing my list of organizations
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also access or switch between accounts or organizations from the Dashboard
    just below the Docker logo, where you will typically see your username when you
    log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Switching organizations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.05_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – Switching organizations
  prefs: []
  type: TYPE_NORMAL
- en: Organizations are useful when it comes to managing how you distribute your container
    images for different projects/applications.
  prefs: []
  type: TYPE_NORMAL
- en: Get Help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This dropdown menu is a jumping off point to various help and support sites
    managed by Docker. Let''s take a quick look where each of these links will lead
    you to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Documentation**: This takes you to the official documentation for Docker
    Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Hub**: This takes you straight to the Docker Hub category on the Docker
    community forums.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What''s New**: This takes you to a list of Docker Blog posts tagged with
    Docker Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support**: This is an FAQ about Docker Hub with the option to contact support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profile and settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The final option in the top menu is about managing your **Profile**, **Content**,
    and **Settings**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Viewing your profile'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.06_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – Viewing your profile
  prefs: []
  type: TYPE_NORMAL
- en: 'The settings page allows you to set up your public profile, which includes
    the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General**: You can add email addresses to your account, change your password,
    and configure what information is visible in your profile, such as your name,
    company location, and a link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linked Accounts**: Here, you can link your GitHub and Bitbucket accounts
    (more details on this will be discussed in the *Creating an automated build* section
    of this chapter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: This is where you can manage personal access tokens and the recently
    introduced Two-Factor authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default Privacy**: Do you want your newly created repositories to be public
    or private by default? This is where you can choose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notifications**: This is where you can sign up to notifications about your
    builds and account activity. Here, you can provide an email address or connect
    to a Slack installation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convert Account**: Here, you can convert your account into an organization.
    You probably don''t want to do this; read the warnings on the page before going
    any further with this option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deactivate Account**: This does exactly what you would think it does. Again,
    take a look at the warnings on the page before doing anything as this action cannot
    be undone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**My Profile**: This menu item takes you to your public profile page; mine
    can be found at [https://hub.docker.com/u/russmckendrick/](https://hub.docker.com/u/russmckendrick/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**My Content**: This link takes you to a list of containers that you may have
    subscribed to on Docker Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an automated build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will look at automated builds. Automated builds are those
    that you can link to your GitHub or Bitbucket account(s), and as you update the
    code in your code repository, you can have the image automatically built on Docker
    Hub. We will look at all the pieces required to do so. By the end of this section,
    you'll be able to automate your own builds.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step to creating an automated build is to set up your GitHub or Bitbucket
    repository. These are the two options you have while selecting where to store
    your code. For example, I will be using GitHub, but the setup will be the same
    for you if you were using GitHub or Bitbucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, I will be using the repository that accompanies this book. Since the
    repository is publicly available, you can fork it and follow along using your
    own GitHub account, as I have done in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Forking the accompanying GitHub repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.07_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – Forking the accompanying GitHub repository
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068), *Building
    Container Images*, we worked through a few different Dockerfiles. We will be using
    these for our automated builds. As you may recall, we installed NGINX and added
    a simple page with the message **Hello world! This is being served from Docker**.
    We also had a multi-stage build.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know which Dockerfile we will be using, let's set up a repository
    in Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Docker Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In **Docker Hub**, we are going to use the **Create Repository** button, which
    can be found under **Repositories**. After clicking it, we will be taken to a
    screen where we need to provide a little information about our build. We will
    also need to select a source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Creating a repository in Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.08_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – Creating a repository in Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding screenshot, I already have my GitHub account
    linked to my Docker Hub account. The process of linking the two tools was simple
    – all I had to do was allow Docker Hub permission to access my GitHub account
    by following the on-screen instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'When connecting Docker Hub to GitHub, there are two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public:** This limits Docker Hub''s access to publicly available repositories
    and organizations. If you link your accounts using this option, Docker Hub won''t
    be able to configure the web hooks needed for automated builds. You then need
    to search and select the repository from either of the locations you want to create
    the automated build from. This will essentially create a web hook that is triggered
    each time a commit is made on the selected GitHub repository. With this, a new
    build will be created on Docker Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private**: This is the recommended option out of the two as Docker Hub will
    have access to all your public and private repositories, as well as organizations.
    Docker Hub will also be able to configure the web hooks needed when setting up
    automated builds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the preceding screenshot, I selected `masteringdockerfourthedition` and visited
    the settings page for the automated build. From here, we can choose which Docker
    Hub profile the image is attached to, name the image, change it from a public
    to a privately available image, describe the build, and customize it by clicking
    on **Click here to customise**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can let Docker Hub know the location of our Dockerfile as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – This is what the completed form looks like'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.09_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – This is what the completed form looks like
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are following along, I entered the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dockerfile-example`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Testing an automated build`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Public`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, under **Build Settings**, select **GitHub**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Organization**: Select the GitHub organization where your code is hosted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Master-Docker-Fourth-Edition`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on the + icon next to Build Rules and then enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Branch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`master`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`latest`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dockerfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build Caching**: Leave this selected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upon clicking on **Create**, you will be taken to a screen similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – The created repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.10_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.10 – The created repository
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our build defined, we can add some additional configurations
    by clicking on **Builds**. Since we are using the official Alpine Linux image
    in our Dockerfile, we can link that to our own build. When doing this, we also
    need to configure an additional path. To do this follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Configure Automated Builds** button. Then, click on the **Enable
    for Base Image** radio icon in the **Repository Links** section of the configuration
    and then the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will kick off an unattended build each time a new version of the official
    Alpine Linux image is published.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, scroll down to `./chapter02/dockerfile-example/`. This will make sure
    that Docker''s build servers can find any files that we add to our Dockerfile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Linking our repository to our Dockerfile'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.11_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – Linking our repository to our Dockerfile
  prefs: []
  type: TYPE_NORMAL
- en: So, now, our image will be automatically rebuilt and published whenever we update
    the GitHub repository, or when a new official image is published.
  prefs: []
  type: TYPE_NORMAL
- en: 'As neither of these is likely to happen immediately, click on the **Trigger**
    button on the **Builds** page to manually kick off a build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Triggering a build'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.12_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – Triggering a build
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that the **Trigger** button turns into a spinning icon and
    that **Latest Build Status** changes to **PENDING**, as shown in the following
    screenshot. This confirms that a build has been scheduled in the background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – The build is progressing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.13_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.13 – The build is progressing
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have triggered your build, scroll down to **Recent Builds**. This
    will list all of the builds for the image – successful, failed, and ones that
    are in progress. You should see a build underway; clicking on the build will bring
    up the logs for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Viewing the progress of the build'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.14_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.14 – Viewing the progress of the build
  prefs: []
  type: TYPE_NORMAL
- en: 'Once built, you should then able to move to your local Docker installation
    by running the following commands, making sure to pull your own image if you have
    been following along:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Pulling our newly built image'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.15_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.15 – Pulling our newly built image
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also run the image created by Docker Hub using the following command,
    again making sure to use your own image if you have one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'I also add the multi-stage build in exactly the same way. Docker Hub had no
    problem with the build, as shown by the following logs, which start off with a
    little bit of information about Docker''s build environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The build then starts by compiling our code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that our code has been compiled, it moves on to copying the application
    binary to what will be the final image using `scratch`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following screenshot, the image acts in the exact same
    way as it did when we created it locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Pulling our multi-stage environment and launching the build'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.16_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.16 – Pulling our multi-stage environment and launching the build
  prefs: []
  type: TYPE_NORMAL
- en: 'You can remove the containers if you launched them by using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have looked at automated builds, we will discuss how else we can
    push images to Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing your own image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068)*, Building
    Container Images*, we discussed creating an image without using a Dockerfile.
    While this is still not a good idea and should only be done when you really need
    to, you can push your own images to Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When pushing images to Docker Hub in this way, ensure that you do not include
    any code, files, or environment variables you would not want to be publicly accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we first need to link our local Docker client to Docker Hub by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You will then be prompted for your Docker ID and password. However, if you
    have enabled multi-factor authentication, then you will need to use a personal
    access token rather than your password. To create a personal access token, go
    to **Settings** in Docker Hub, click on **Security** from the left-hand menu,
    and then click the **New Access Token** button. As per the on-screen instructions,
    the access token will only be displayed once, so make sure you make a note of
    it. Treat personal access tokens as alternatives to your password and store them
    appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Logging into Docker Hub using the Docker client'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.17_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.17 – Logging into Docker Hub using the Docker client
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if you are using Docker for Mac or Docker for Windows, you will now be
    logged in via the app and should be able to access Docker Hub from the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Viewing your Docker Hub details in Docker Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.18_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.18 – Viewing your Docker Hub details in Docker Desktop
  prefs: []
  type: TYPE_NORMAL
- en: Now that our client is authorized to interact with Docker Hub, we need an image
    to build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at pushing the scratch image we built in [*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068),
    *Building Container Images*. First, we need to build the image. To do this, I
    am using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are following along, then you should replace `masteringdockerfouthedition`
    with your own username or organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Building an image locally'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.19_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.19 – Building an image locally
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the image has been built, we can push it to Docker Hub by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Pushing an image to Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.20_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.20 – Pushing an image to Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, because we defined `masteringdockerfouthedition/scratchexample:latest`
    when we built the image, Docker automatically uploaded the image to that location,
    which, in turn, added a new image to the `masteringdockerfouthedition` organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Viewing our locally built image in Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.21_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.21 – Viewing our locally built image in Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that there is not much you can do with the build in Docker Hub.
    This is because the image was not built by Docker Hub, and therefore, it does
    not really have any idea what has gone into building the image, which is exactly
    why this method of distributing images is discouraged.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed how to distribute images, let's look at the complete
    opposite and discuss certified images and publishers.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Certified Images and Verified Publishers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may remember that in [*Chapter 1*](B15659_01_Final_JM_ePub.xhtml#_idTextAnchor046),
    *Docker Overview*, we downloaded Docker for macOS and Docker for Windows, as well
    as Docker Hub. As well as acting as a single location for downloading both Docker
    CE and Docker EE for various platforms, it is now also the preferred location
    for finding Docker Plugins, Docker Certified Images, and Images from Verified
    Publishers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Exploring Docker Certified Images on Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.22_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.22 – Exploring Docker Certified Images on Docker Hub
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking a closer look at the **Splunk Enterprise** image in Docker Hub gives
    you information about who is responsible for the image. It also shows that it
    is a certified image, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – Viewing the Splunk Enterprise Docker Hub image'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.23_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.23 – Viewing the Splunk Enterprise Docker Hub image
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, the image has a price attached to it (the Free version
    is $0.00, but is limited), meaning that you can buy commercial software through
    Docker Hub since it has payments and licensing built in. If you are a software
    publisher, you can sign and distribute your own software through Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your own Docker Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at Docker Registry. Docker Registry is an open
    source application that you can run anywhere you please and store your Docker
    image in. We will provide at a comparison between Docker Registry and Docker Hub,
    as well as how to choose between the two.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this section, you will have learned how to run your own Docker
    Registry and check whether it's a proper fit for you.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of Docker Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker Registry, as stated earlier, is an open source application that you can
    utilize to store your Docker images on a platform of your choice. This allows
    you to keep them 100% private if you wish or share them as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Registry makes a lot of sense if you want to deploy your own registry
    without having to pay for all the private features of Docker Hub. Let's take a
    look at some comparisons between Docker Hub and Docker Registry to help you make
    an educated decision as to which option is best for you when it comes to choosing
    to store your own images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Registry has the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: You can host and manage your own registry, from which you can serve all the
    repositories as private, public, or a mix between the two.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can scale the registry as needed, based on how many images you host or how
    many pull requests you are serving out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything is command-line-based.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With Docker Hub, you will be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Get a GUI-based interface that you can use to manage your images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a location already set up in the cloud that is ready to handle public and/or
    private images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have the peace of mind of not having to manage a server that is hosting all
    your images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we know the differences between deploying our own registry and Docker
    Hub, let's look at the steps for deploying our own registry.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your own registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you may have already guessed, Docker Registry is distributed as an image
    from Docker Hub, which makes deploying it as easy as running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Running these commands should give you something like the following Terminal
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24 – Deploying your Docker Registry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.24_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.24 – Deploying your Docker Registry
  prefs: []
  type: TYPE_NORMAL
- en: 'These commands will give you the most basic installation of Docker Registry.
    Let''s take a quick look at how we can push and pull an image to it. To start
    off with, we need an image, so let''s grab the Alpine image (again):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a copy of the Alpine Linux image, we need to push it to our
    local Docker Registry, which is available at `localhost:5000`. To do this, we
    need to tag the Alpine Linux image with the URL of our local Docker Registry,
    along with a different image name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have tagged our image, we can push it to our locally hosted Docker
    Registry by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.25 – Pushing an image to your own Docker Registry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.25_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.25 – Pushing an image to your own Docker Registry
  prefs: []
  type: TYPE_NORMAL
- en: 'Try running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should show you that you have two images with the same `IMAGE ID`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26 – Listing the images'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.26_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.26 – Listing the images
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we pull the image back down from our local Docker Registry, we should
    remove the two local copies of the image. We need to use the `REPOSITORY` name
    to do this, rather than `IMAGE ID`, since we have two images from two locations
    with the same ID, and Docker will throw an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the original and tagged images have been removed, we can pull the
    image from our local Docker Registry by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we now have a copy of our image that has been pulled from the
    Docker Registry running at `localhost:5000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27 – Pulling from your own Docker Registry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.27_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.27 – Pulling from your own Docker Registry
  prefs: []
  type: TYPE_NORMAL
- en: 'You can stop and remove the Docker Registry by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, there are a lot of options and considerations when it comes to launching
    a Docker Registry. As you can imagine, the most important is in regards to storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that a registry''s sole purpose is storing and distributing images, it
    is important that you use some level of persistent OS storage. Docker Registry
    currently supports the following storage options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/var/lib/registry`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure**: This uses Microsoft Azure Blob Storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GCS**: This uses Google Cloud storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**S3**: This uses **Amazon Simple Storage Service** (**Amazon S3**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Swift**: This uses OpenStack Swift.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, other than the filesystem, all the storage engines that are
    supported are all highly available, distributed, object-level forms of storage.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Trusted Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the components that ships with the commercial **Docker Enterprise Edition**
    (**Docker EE**) is **Docker Trusted Registry** (**DTR**), both of which are now
    being developed and supported by Mirantis. Think of it as a version of Docker
    Hub that you can host in your own infrastructure. DTR adds the following features
    on top of the ones provided by the free Docker Hub and Docker Registry:'
  prefs: []
  type: TYPE_NORMAL
- en: Integration into your authentication services, such as Active Directory or LDAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment on your own infrastructure (or cloud) behind your firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image signing to ensure your images are trusted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in security scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to prioritized support directly from Mirantis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing third-party registries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not only Docker that offers image registry services; companies such as
    Red Hat offer their own registry, where you can find the Red Hat Container Catalog,
    which hosts containerized versions of all of Red Hat's product offerings, along
    with containers to support its OpenShift offering. Services such as Artifactory
    by JFrog offer a private Docker registry as part of their build services.
  prefs: []
  type: TYPE_NORMAL
- en: There are also other Registry-as-a-Service offerings, such as Quay, which is
    also by Red Hat, as well as services from GitHub, Amazon Web Services, Microsoft
    Azure, and Google Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a quick look at some of these services.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Packages and Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first service we are going to look at is GitHub Packages. Here, we will
    take a look at uploading a container to my fork of this book's GitHub repository.
    First of all, we are going to need a personal access token. To get this, log into
    your GitHub account and go to **Settings**, then **Developer settings**, and then
    **Personal access tokens**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate an access token, call it `cli-package-access`, and give it the following
    permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`repo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`write:packages`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read:packages`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete:packages`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`workflow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make a note of the token when it is displayed as you will never be able to
    view it again. After doing this, I put my token in a file called `.githubpackage`
    in my users root folder. Putting it in there will mean that I don''t need to enter
    the password each time I log in. I can do this by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once logged in, we can build an image. For this example, I used `dockerfile-example`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Notice that I am using the repository name `mastering-docker-fourth-edition`
    and that it is all in lowercase. If you were to try and use any uppercase characters,
    Docker will complain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once built and tagged, you can push your image using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Once pushed, you should be able to see that there is now a package in your
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – Viewing the package that was pushed to GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.28_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.28 – Viewing the package that was pushed to GitHub
  prefs: []
  type: TYPE_NORMAL
- en: 'Drilling down to the package shows the following basic stats and download information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29 – Viewing more information about the package'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.29_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.29 – Viewing more information about the package
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also download the image by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Since our GitHub repository is public, our package will be too, meaning that
    anyone can download it.
  prefs: []
  type: TYPE_NORMAL
- en: So, that covers pushing an existing image. However, as we have mentioned a few
    times already throughout this chapter, this is not really recommended. Luckily,
    GitHub introduced GitHub Actions, which allows you to set up automated workflows
    that action **things** whenever an event, such as a push to the repository, occurs.
  prefs: []
  type: TYPE_NORMAL
- en: To create a GitHub Action, go to your repository and click on the `.github/workflows/main.yml`
    in your repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following content in the space provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this closely follows the steps we took to build and tag our
    image, authenticate against GitHub Packages, and push the image. There are some
    things that are relevant to GitHub Actions, such as the `$GITHUB_REPOSITORY` and
    `$GITHUB_RUN_NUMBER` variables, as well as `${{secrets.GITHUB_TOKEN}}`, all of
    which make sure that there is nothing from my Action that's hardcoded. This means
    you can run safely it in your own repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once entered, click on the **Start commit** button, enter some details, and
    click on **Commit new file**. Once committed, the workflow will start automatically.
    You can view the output by going back to **Actions** and then selecting the newly
    created workflow and then job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30 – Viewing our GitHub Actions build results'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.30_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.30 – Viewing our GitHub Actions build results
  prefs: []
  type: TYPE_NORMAL
- en: 'Once complete, going to **Packages** in your repository should show you a package
    that looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.31 – Checking the package created by our GitHub Action'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.31_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.31 – Checking the package created by our GitHub Action
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, while this does pretty much the same as an automated Docker
    Hub build, you have a lot more control over what happens and the build process
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Container Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next up on our third-party container registry walkthrough, we have Microsoft's
    Azure Container Registry. To create one, log into your Microsoft Azure account.
    We will talk about Microsoft Azure in more detail in [*Chapter 10*](B15659_10_Final_JM_ePub.xhtml#_idTextAnchor277),
    *Running Docker in Public Clouds*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once logged in, type `Container registries` into the search bar at the top
    of the screen and select the option from the results. Once the **Container registries**
    page loads, click on the **+ Add** button. You will be presented with a page that
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.32 – Creating our Azure Container Registry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.32_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.32 – Creating our Azure Container Registry
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are following along, enter the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subscription**: Select the subscription you would like to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`masteringdocker-acr-rg`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`masteringdocker`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UK South`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Enable`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Basic`. This should be enough for testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to ignore the encryption options for now as they are only available
    when using the premium SKU as well as the tags, so click on **Review + Create**.
    Once your deployment has been validated, click on the **Create** button. After
    a few minutes, your deployment will be complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with GitHub Packages, we are going to build and push a container. To do
    this, we need some credentials. To find these, click on **Access Keys** and make
    a note of the details for **Login server**, **Username**, and one of the two **passwords**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.33 – Getting the access key for our Azure Container Registry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.33_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.33 – Getting the access key for our Azure Container Registry
  prefs: []
  type: TYPE_NORMAL
- en: 'Like with GitHub Packages, put the password in a text file. I used `~/.azureacrpassword`.
    Then, log in with the Docker command-line client by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we are authenticated, change to the `dockerfile-example` folder, which
    can be found in the `chapter02` folder in this book''s GitHub repository, and
    build, tag, and push our image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Once pushed, you should be able to see it listed on the Azure Container Registry
    page by clicking on **Registries** in the **Services** section of the main menu.
    Select the image and version. After doing this, you will see something like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.34 – Viewing our container in the Azure Container Registry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.34_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.34 – Viewing our container in the Azure Container Registry
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to pulling images, you will need to make sure that you are authenticated
    against your Container Registry as it is a private service. Trying to pull and
    not being logged in will result in an error.
  prefs: []
  type: TYPE_NORMAL
- en: You can also automate these builds based on committing your Dockerfile to a
    GitHub repository. This is, however, a little more involved as it can currently
    only be configured using Azure's command-line tools. See the *Further reading*
    section for more information about how to configure Azure Container Registry Tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at MicroBadger
  prefs: []
  type: TYPE_NORMAL
- en: Microbadger is a great tool when you are looking at shipping your containers
    or moving your images around. It will take into account everything that is going
    on in every single layer of a particular Docker image and give you an output regarding
    how much weight it has in terms of its actual size or the amount of disk space
    it will take up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following page is what you will be presented with when navigating to the
    MicroBadger website, [https://microbadger.com/](https://microbadger.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.35 – The Microbadger home page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.35_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.35 – The Microbadger home page
  prefs: []
  type: TYPE_NORMAL
- en: You can search for images that are on Docker Hub to have MicroBadger provide
    information about that image. Alternatively, you can load up a sample image set
    if you are looking to provide some sample sets, or to view some more complex setups.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are going to search for one of my images, `russmckendrick/ab`,
    and select the latest tag. By default, it will always load the latest tag, but
    you also have the option of changing the tag you are viewing by selecting your
    desired tag from the **Versions** drop-down menu. This could be useful if you
    have, for example, a staging tag and are thinking of pushing this new image to
    your latest tag, but want to see what impact it will have on the size of the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, MicroBadger presents information about
    how many layers your image contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.36 – Viewing the details of our container in MicroBadger'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.36_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.36 – Viewing the details of our container in MicroBadger
  prefs: []
  type: TYPE_NORMAL
- en: By showing the size of each layer and the Dockerfile command that was executed
    during the image build, you can see at which stage of the image build the bloat
    was added, which is extremely useful when it comes to reducing the size of your
    images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another great feature of MicroBadger is that it gives you the option to embed
    basic statistics about your images in your GitHub repository or Docker Hub. For
    example, the following screenshot shows the Docker Hub page for `russmckendrick/ab`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.37 – Adding MicroBadger stats to an image''s README file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.37_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.37 – Adding MicroBadger stats to an image's README file
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, MicroBadger is displaying the overall size of the image, which
    in this example is `5.1MB`, as well as the total number of layers the image is
    made up of, which is `7`. The MicroBadger service is still in its beta stage and
    new functions are being added all the time. I recommend that you keep an eye on
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at several ways in which we can both manually and
    automatically build container images using Docker Hub. We discussed the various
    registries we can use besides Docker Hub, such as GitHub Packages and Microsoft's
    Azure Container Registry.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at deploying our own local Docker Registry and touched upon the
    considerations we need to make around storage when deploying one. Finally, we
    looked at MicroBadger, a service that allows us to display information about our
    remotely hosted container images.
  prefs: []
  type: TYPE_NORMAL
- en: All of this means you now have a way of distributing your own container images,
    both securely and in a way that allows you to easily keep your container images
    up to date.
  prefs: []
  type: TYPE_NORMAL
- en: This is important as it means that, if you wish, it is possible to trigger an
    update of all your images with a single build, rather than having to manually
    build and push each individual image.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at how to manage our containers from
    the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'True or false: Docker Hub is the only source from which you can download official
    Docker images.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe why you would want to link an automated build to an official Docker
    Hub image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are multi-stage builds supported on Docker Hub?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Logging into Docker on the command line also logs you into the
    desktop application.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you delete two images that share the same `IMAGE ID`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which port does Docker Registry run on by default?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'More information on Docker Store, Trusted Registry, and Registry can be found
    at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Hub Publisher Signup: [https://store.docker.com/publisher/signup/](https://store.docker.com/publisher/signup/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Registry Documentation: [https://docs.docker.com/registry/](https://docs.docker.com/registry/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Trusted Registry** (**DTR**): [https://www.mirantis.com/software/docker/image-registry/](https://www.mirantis.com/software/docker/image-registry/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find more details about the different types of cloud-based storage
    you can use for Docker Registry at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Blob Storage: [https://azure.microsoft.com/en-gb/services/storage/blobs/](https://azure.microsoft.com/en-gb/services/storage/blobs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Cloud storage: [https://cloud.google.com/storage/](https://cloud.google.com/storage/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Simple Storage Service** (**Amazon S3**): [https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Swift: [https://wiki.openstack.org/wiki/Swift](https://wiki.openstack.org/wiki/Swift)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the third-party registry services can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub Actions: [https://github.com/features/actions](https://github.com/features/actions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Container Registry: [https://azure.microsoft.com/en-gb/services/container-registry/](https://azure.microsoft.com/en-gb/services/container-registry/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Container Registry Tasks: [https://docs.microsoft.com/en-gb/azure/container-registry/container-registry-tutorial-quick-task](https://docs.microsoft.com/en-gb/azure/container-registry/container-registry-tutorial-quick-task)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Elastic Container Registry: [https://aws.amazon.com/ecr/](https://aws.amazon.com/ecr/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Cloud Container Registry: [https://cloud.google.com/container-registry](https://cloud.google.com/container-registry)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Red Hat Container Catalog: [https://catalog.redhat.com/software/containers/explore](https://catalog.redhat.com/software/containers/explore)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenShift: [https://www.openshift.com/](https://www.openshift.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Quay by Red Hat: [https://quay.io/](https://quay.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Artifactory by JFrog: [https://www.jfrog.com/artifactory/](https://www.jfrog.com/artifactory/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, you can find links to Docker Hub and Microbadger for my Apache Bench
    image here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache Bench Image (Docker Hub): [https://hub.docker.com/r/russmckendrick/ab/](https://hub.docker.com/r/russmckendrick/ab/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apache Bench Image (Microbadger): [https://microbadger.com/images/russmckendrick/ab](https://microbadger.com/images/russmckendrick/ab)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
