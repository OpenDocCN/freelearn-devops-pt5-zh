- en: '*Chapter 3*'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '*第3章*'
- en: Storing and Distributing Images
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储与分发镜像
- en: In this chapter, we will cover several services, such as Docker Hub, which allows
    you to store your images, and Docker Registry, which you can use to run your local
    storage for Docker containers. We will review the differences between these services,
    as well as when and how to use each of them. This chapter will also cover how
    to set up automated builds using web hooks, as well as all the pieces that are
    required to set them up.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍多个服务，如Docker Hub，它允许你存储镜像，以及Docker Registry，你可以用来运行本地的Docker容器存储。我们将回顾这些服务之间的区别，以及何时和如何使用它们。本章还将介绍如何使用Web钩子设置自动构建，以及设置这些自动构建所需的所有组件。
- en: 'Let''s take a quick look at the topics we will cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下本章将涵盖的主题：
- en: Understanding Docker Hub
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Docker Hub
- en: Deploying your own Docker registry
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署你自己的 Docker 注册中心
- en: Reviewing third-party registries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查第三方注册中心
- en: Looking at Microbadger
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看Microbadger
- en: Let's get started!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using our Docker installation to build images. As
    mentioned in the previous chapter, although the screenshots in this chapter will
    be from my preferred operating system, which is macOS, the commands we will be
    running will work on all three operating systems covered in the previous chapters.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用我们的Docker安装来构建镜像。如前一章所提，尽管本章中的截图来自我偏好的操作系统——macOS，但我们将运行的命令适用于前几章中涵盖的所有三种操作系统。
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3iaKo9I](https://bit.ly/3iaKo9I)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际应用：[https://bit.ly/3iaKo9I](https://bit.ly/3iaKo9I)
- en: Understanding Docker Hub
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Docker Hub
- en: Although we were introduced to Docker Hub in the previous two chapters, we haven't
    interacted with it much other than when using the `docker image pull` command
    to download remote images.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在前两章中介绍了Docker Hub，但除了使用`docker image pull`命令下载远程镜像外，我们并没有与它有过太多交互。
- en: In this section, we will focus on Docker Hub, which has both a freely available
    option, where you can only host publicly accessible images, and also a subscription
    option, which allows you to host your own private images. We will focus on the
    web aspect of Docker Hub and the management you can do there.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将重点介绍Docker Hub，它提供了一个免费选项，允许你只托管公开访问的镜像，还有一个订阅选项，允许你托管自己的私有镜像。我们将重点讲解Docker
    Hub的网页部分以及你可以在那里进行的管理操作。
- en: The home page, which can be found at [https://hub.docker.com](https://hub.docker.com),
    contains a **Sign-Up** form and, at the top-right, an option to **Sign in**. The
    odds are that if you have been dabbling with Docker, then you already have a Docker
    ID. If you don't, use the **Sign-Up** form on the home page to create one. If
    you already have a Docker ID, then simply click **Sign in**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 主页可以在[https://hub.docker.com](https://hub.docker.com)找到，其中包含一个**注册**表单，并且在右上角有一个**登录**选项。如果你曾经接触过Docker，那么你很可能已经拥有一个Docker
    ID。如果没有，使用主页上的**注册**表单来创建一个。如果你已经有Docker ID，只需点击**登录**即可。
- en: Once logged in, you will be presented with the main Dashboard.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，你将看到主仪表板。
- en: The Docker Hub Dashboard
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Hub 仪表板
- en: 'After logging in to Docker Hub, you will be taken to the following landing
    page. This page is known as the Dashboard of Docker Hub:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 登录Docker Hub后，你将被带到以下着陆页。这个页面被称为Docker Hub的仪表板：
- en: '![Figure 3.1 – The initial Docker Hub Dashboard'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – 初始的 Docker Hub 仪表板'
- en: '](img/Figure_3.01_B15659.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.01_B15659.jpg)'
- en: Figure 3.1 – The initial Docker Hub Dashboard
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 初始的 Docker Hub 仪表板
- en: From here, you can get to all the other subpages of Docker Hub. However, before
    we look at those sections, we should talk a little about the Dashboard. From here,
    you can view all your images, both public and private. They are ordered first
    by the number of stars and then by the number of pulls; this order cannot be changed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以访问Docker Hub的所有其他子页面。然而，在查看这些部分之前，我们应该先谈谈仪表板。从这里，你可以查看所有的镜像，包括公共和私有镜像。它们首先按星标数排序，然后按拉取次数排序；这个顺序无法更改。
- en: In the upcoming sections, we will go through everything you can see on the Dashboard,
    starting with the light blue menu at the top of the page.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将逐一介绍你在仪表板上可以看到的所有内容，从页面顶部的浅蓝色菜单开始。
- en: Explore
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索
- en: 'The Explore option takes you to a list of official Docker images; like your
    Dashboard, they are ordered by stars and then pulls. As shown in the following
    screenshot, I have selected the base images. Each of the most popular official
    images has had over 10 million downloads and have thousands of stars:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 探索选项将带你查看官方 Docker 镜像列表；就像你的仪表盘一样，它们按星级和下载量排序。如下图所示，我选择了基础镜像。每个最受欢迎的官方镜像的下载量都超过了
    1000 万，并且拥有成千上万的星级评分：
- en: '![Figure 3.2 – Exploring Docker Hub'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2 – 探索 Docker Hub'
- en: '](img/Figure_3.02_B15659.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.02_B15659.jpg)'
- en: Figure 3.2 – Exploring Docker Hub
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 探索 Docker Hub
- en: Docker Hub now integrates the Docker Store, giving you a one-stop shop for everything
    Docker-related from a single location rather than several different sources.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 现在已整合 Docker Store，让你可以在一个地方购买与 Docker 相关的所有内容，而不是从多个不同的来源访问。
- en: Repositories
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仓库
- en: 'We will go into more detail about creating a repository when in the *Creating
    an automated build* section of this chapter, so I will not go into any details
    here. This section is where you can manage your own repositories. As shown in
    the following screenshot, you get a quick overview of how many people have started
    you repository, as well as how many pulls your image has had, along with details
    of whether the repository is public or private:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的 *创建自动化构建* 部分详细讨论创建仓库的过程，因此此处不再展开细节。在这一部分，你可以管理自己的仓库。如以下截图所示，你可以快速查看有多少人已经开始使用你的仓库，以及你的镜像的下载量，同时也能查看仓库是公开还是私有：
- en: '![Figure 3.3 – A list of my repositories in Docker'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.3 – 我的 Docker 仓库列表'
- en: '](img/Figure_3.03_B15659.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.03_B15659.jpg)'
- en: Figure 3.3 – A list of my repositories in Docker
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 我的 Docker 仓库列表
- en: As you can see, there is a **Create Repository** button here. Since we are going
    to be looking at this process in more detail when it comes to the *Creating an
    automated build* section, we will move on to the next option.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这里有一个 **创建仓库** 按钮。由于我们将在 *创建自动化构建* 部分更详细地讨论这一过程，接下来我们将进入下一个选项。
- en: Organizations
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组织
- en: '**Organizations** are those that you have either created or been added to.
    **Organizations** allow you to layer on control for, say, a project that multiple
    people are collaborating on. The organization gets its own settings, such as whether
    to store repositories as public or private by default or changing plans that will
    allow different numbers of private repositories and separate repositories altogether
    from the ones you or others have:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**组织**是你创建或被添加到的组织。**组织**允许你为多个协作的项目分配权限控制。每个组织都有自己的设置，例如是否默认将仓库存储为公开或私密，或者更改计划以允许不同数量的私有仓库，甚至将仓库与自己或他人拥有的仓库分开：'
- en: '![Figure 3.4 – Viewing my list of organizations'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.4 – 查看我的组织列表'
- en: '](img/Figure_3.04_B15659.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.04_B15659.jpg)'
- en: Figure 3.4 – Viewing my list of organizations
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 查看我的组织列表
- en: 'You can also access or switch between accounts or organizations from the Dashboard
    just below the Docker logo, where you will typically see your username when you
    log in:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过仪表盘中的 Docker 标志下方切换或访问帐户或组织，登录时通常会看到你的用户名：
- en: '![Figure 3.5 – Switching organizations'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – 切换组织'
- en: '](img/Figure_3.05_B15659.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.05_B15659.jpg)'
- en: Figure 3.5 – Switching organizations
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 切换组织
- en: Organizations are useful when it comes to managing how you distribute your container
    images for different projects/applications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理多个项目/应用的容器镜像分发时，**组织**非常有用。
- en: Get Help
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取帮助
- en: 'This dropdown menu is a jumping off point to various help and support sites
    managed by Docker. Let''s take a quick look where each of these links will lead
    you to:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个下拉菜单是通向 Docker 管理的各种帮助和支持站点的跳板。我们快速看看这些链接将带你到哪里：
- en: '**Documentation**: This takes you to the official documentation for Docker
    Hub.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：此项将带你到 Docker Hub 的官方文档页面。'
- en: '**Docker Hub**: This takes you straight to the Docker Hub category on the Docker
    community forums.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Hub**：此项将直接带你进入 Docker 社区论坛中的 Docker Hub 分类。'
- en: '**What''s New**: This takes you to a list of Docker Blog posts tagged with
    Docker Hub.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新功能**：此项将带你查看一系列以“Docker Hub”标签标记的 Docker 博客文章。'
- en: '**Support**: This is an FAQ about Docker Hub with the option to contact support.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持**：这是一个关于 Docker Hub 的常见问题解答，并提供联系支持的选项。'
- en: Profile and settings
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 个人资料和设置
- en: 'The final option in the top menu is about managing your **Profile**, **Content**,
    and **Settings**:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部菜单中的最后一个选项是关于管理您的 **个人资料**、**内容** 和 **设置**：
- en: '![Figure 3.6 – Viewing your profile'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – 查看您的个人资料'
- en: '](img/Figure_3.06_B15659.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.06_B15659.jpg)'
- en: Figure 3.6 – Viewing your profile
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 查看您的个人资料
- en: 'The settings page allows you to set up your public profile, which includes
    the following options:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 设置页面允许您设置公共个人资料，包括以下选项：
- en: '**General**: You can add email addresses to your account, change your password,
    and configure what information is visible in your profile, such as your name,
    company location, and a link.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常规**：您可以将电子邮件地址添加到您的账户、修改密码，并配置在个人资料中显示的信息，如姓名、公司位置和链接。'
- en: '**Linked Accounts**: Here, you can link your GitHub and Bitbucket accounts
    (more details on this will be discussed in the *Creating an automated build* section
    of this chapter).'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关联账户**：在这里，您可以关联您的 GitHub 和 Bitbucket 账户（有关此内容的更多信息将在本章的 *创建自动化构建* 部分讨论）。'
- en: '**Security**: This is where you can manage personal access tokens and the recently
    introduced Two-Factor authentication.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：在这里，您可以管理个人访问令牌和最近引入的双重身份验证。'
- en: '**Default Privacy**: Do you want your newly created repositories to be public
    or private by default? This is where you can choose.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认隐私**：您希望新创建的仓库默认是公开还是私密的？您可以在这里选择。'
- en: '**Notifications**: This is where you can sign up to notifications about your
    builds and account activity. Here, you can provide an email address or connect
    to a Slack installation.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知**：在这里，您可以注册有关您的构建和账户活动的通知。您可以提供电子邮件地址或连接到 Slack 安装。'
- en: '**Convert Account**: Here, you can convert your account into an organization.
    You probably don''t want to do this; read the warnings on the page before going
    any further with this option.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转换账户**：在这里，您可以将账户转换为组织。您可能不希望这样做；在继续执行此选项之前，请阅读页面上的警告。'
- en: '**Deactivate Account**: This does exactly what you would think it does. Again,
    take a look at the warnings on the page before doing anything as this action cannot
    be undone.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停用账户**：这正如您所想的那样，它的作用就是停用账户。再次提醒，在进行任何操作之前，请查看页面上的警告，因为此操作是不可撤销的。'
- en: '**My Profile**: This menu item takes you to your public profile page; mine
    can be found at [https://hub.docker.com/u/russmckendrick/](https://hub.docker.com/u/russmckendrick/).'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我的个人资料**：此菜单项将您带到您的公开个人资料页面；我的个人资料可以在 [https://hub.docker.com/u/russmckendrick/](https://hub.docker.com/u/russmckendrick/)
    找到。'
- en: '**My Content**: This link takes you to a list of containers that you may have
    subscribed to on Docker Hub.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我的内容**：此链接将带您查看您可能已在 Docker Hub 上订阅的容器列表。'
- en: Creating an automated build
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自动化构建
- en: In this section, we will look at automated builds. Automated builds are those
    that you can link to your GitHub or Bitbucket account(s), and as you update the
    code in your code repository, you can have the image automatically built on Docker
    Hub. We will look at all the pieces required to do so. By the end of this section,
    you'll be able to automate your own builds.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论自动化构建。自动化构建是指您可以将其链接到您的 GitHub 或 Bitbucket 帐户，随着您在代码仓库中更新代码，Docker
    Hub 会自动构建镜像。我们将查看执行此操作所需的所有组件。到本节结束时，您将能够自动化您的构建。
- en: Setting up your code
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置您的代码
- en: The first step to creating an automated build is to set up your GitHub or Bitbucket
    repository. These are the two options you have while selecting where to store
    your code. For example, I will be using GitHub, but the setup will be the same
    for you if you were using GitHub or Bitbucket.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自动化构建的第一步是设置您的 GitHub 或 Bitbucket 仓库。这是您选择存储代码时的两种选项之一。例如，我将使用 GitHub，但如果您使用的是
    GitHub 或 Bitbucket，设置过程是相同的。
- en: 'In fact, I will be using the repository that accompanies this book. Since the
    repository is publicly available, you can fork it and follow along using your
    own GitHub account, as I have done in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我将使用本书随附的仓库。由于该仓库是公开的，您可以分叉它并使用自己的 GitHub 帐户跟随我所做的操作，正如以下截图所示：
- en: '![Figure 3.7 – Forking the accompanying GitHub repository'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.7 – 分叉随附的 GitHub 仓库'
- en: '](img/Figure_3.07_B15659.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.07_B15659.jpg)'
- en: Figure 3.7 – Forking the accompanying GitHub repository
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 分叉随附的 GitHub 仓库
- en: In [*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068), *Building
    Container Images*, we worked through a few different Dockerfiles. We will be using
    these for our automated builds. As you may recall, we installed NGINX and added
    a simple page with the message **Hello world! This is being served from Docker**.
    We also had a multi-stage build.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 2 章*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068)，*构建容器镜像* 中，我们处理了几个不同的
    Dockerfile。我们将使用这些文件进行自动构建。你可能还记得，我们安装了 NGINX 并添加了一个简单的页面，页面显示 **Hello world!
    This is being served from Docker**。我们也有一个多阶段构建。
- en: Now that we know which Dockerfile we will be using, let's set up a repository
    in Docker Hub.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道要使用哪个 Dockerfile，让我们在 Docker Hub 中设置一个仓库。
- en: Setting up Docker Hub
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Docker Hub
- en: 'In **Docker Hub**, we are going to use the **Create Repository** button, which
    can be found under **Repositories**. After clicking it, we will be taken to a
    screen where we need to provide a little information about our build. We will
    also need to select a source:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Docker Hub** 中，我们将使用 **创建仓库** 按钮，该按钮可以在 **Repositories**（仓库）下找到。点击后，我们将进入一个页面，需要提供一些关于构建的信息。我们还需要选择一个来源：
- en: '![Figure 3.8 – Creating a repository in Docker Hub'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.8 – 在 Docker Hub 中创建仓库'
- en: '](img/Figure_3.08_B15659.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.08_B15659.jpg)'
- en: Figure 3.8 – Creating a repository in Docker Hub
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 在 Docker Hub 中创建仓库
- en: As you can see from the preceding screenshot, I already have my GitHub account
    linked to my Docker Hub account. The process of linking the two tools was simple
    – all I had to do was allow Docker Hub permission to access my GitHub account
    by following the on-screen instructions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示截图所示，我已经将我的 GitHub 帐户与 Docker Hub 帐户关联起来。将这两个工具连接的过程很简单——我只需按照屏幕上的说明，允许
    Docker Hub 访问我的 GitHub 帐户。
- en: 'When connecting Docker Hub to GitHub, there are two options:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接 Docker Hub 和 GitHub 时，有两个选项：
- en: '**Public:** This limits Docker Hub''s access to publicly available repositories
    and organizations. If you link your accounts using this option, Docker Hub won''t
    be able to configure the web hooks needed for automated builds. You then need
    to search and select the repository from either of the locations you want to create
    the automated build from. This will essentially create a web hook that is triggered
    each time a commit is made on the selected GitHub repository. With this, a new
    build will be created on Docker Hub.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公开**：这限制了 Docker Hub 对公开可用的仓库和组织的访问。如果你使用此选项链接帐户，Docker Hub 将无法配置自动构建所需的
    Web 钩子。然后，你需要从你想要创建自动构建的任何位置搜索并选择仓库。这实际上会创建一个 Web 钩子，每次对选定的 GitHub 仓库进行提交时触发。这样，就会在
    Docker Hub 上创建一个新的构建。'
- en: '**Private**: This is the recommended option out of the two as Docker Hub will
    have access to all your public and private repositories, as well as organizations.
    Docker Hub will also be able to configure the web hooks needed when setting up
    automated builds.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有**：这是两个选项中推荐的一个，因为 Docker Hub 将可以访问所有你的公共和私有仓库以及组织。Docker Hub 还能够配置在设置自动构建时所需的
    Web 钩子。'
- en: In the preceding screenshot, I selected `masteringdockerfourthedition` and visited
    the settings page for the automated build. From here, we can choose which Docker
    Hub profile the image is attached to, name the image, change it from a public
    to a privately available image, describe the build, and customize it by clicking
    on **Click here to customise**.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我选择了 `masteringdockerfourthedition`，并访问了自动构建的设置页面。在这里，我们可以选择将镜像附加到哪个
    Docker Hub 配置文件，命名镜像，将其从公共镜像转换为私有镜像，描述构建，并通过点击 **点击这里自定义** 来进行自定义。
- en: 'We can let Docker Hub know the location of our Dockerfile as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式告知 Docker Hub 我们 Dockerfile 的位置：
- en: '![Figure 3.9 – This is what the completed form looks like'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.9 – 这是填写完成后的表单样式'
- en: '](img/Figure_3.09_B15659.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.09_B15659.jpg)'
- en: Figure 3.9 – This is what the completed form looks like
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 这是填写完成后的表单样式
- en: 'If you are following along, I entered the following information:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在跟随操作，我输入了以下信息：
- en: '`dockerfile-example`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dockerfile-example`'
- en: '`Testing an automated build`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`测试自动构建`'
- en: '`Public`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Public`'
- en: 'Then, under **Build Settings**, select **GitHub**:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 **构建设置** 下，选择 **GitHub**：
- en: '**Organization**: Select the GitHub organization where your code is hosted.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织**：选择托管你代码的 GitHub 组织。'
- en: '`Master-Docker-Fourth-Edition`.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Master-Docker-Fourth-Edition`。'
- en: 'Click on the + icon next to Build Rules and then enter the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 点击构建规则旁的 + 图标，然后输入以下内容：
- en: '`Branch`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Branch`'
- en: '`master`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master`'
- en: '`latest`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`latest`'
- en: '`Dockerfile`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dockerfile`'
- en: '**Build Caching**: Leave this selected'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建缓存**：保持此选项被选中'
- en: 'Upon clicking on **Create**, you will be taken to a screen similar to the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **创建** 后，你将进入一个类似于以下的页面：
- en: '![Figure 3.10 – The created repository'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.10 – 创建的仓库'
- en: '](img/Figure_3.10_B15659.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.10_B15659.jpg)'
- en: Figure 3.10 – The created repository
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 创建的仓库
- en: 'Now that we have our build defined, we can add some additional configurations
    by clicking on **Builds**. Since we are using the official Alpine Linux image
    in our Dockerfile, we can link that to our own build. When doing this, we also
    need to configure an additional path. To do this follow these steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们定义了构建，我们可以通过点击 **构建** 来添加一些额外的配置。由于我们在 Dockerfile 中使用了官方的 Alpine Linux 镜像，我们可以将其链接到我们自己的构建中。在进行此操作时，我们还需要配置一个额外的路径。请按照以下步骤操作：
- en: Click on the **Configure Automated Builds** button. Then, click on the **Enable
    for Base Image** radio icon in the **Repository Links** section of the configuration
    and then the **Save** button.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **配置自动构建** 按钮。然后，在配置的 **仓库链接** 部分，点击 **为基础镜像启用** 单选框，再点击 **保存** 按钮。
- en: This will kick off an unattended build each time a new version of the official
    Alpine Linux image is published.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当发布新的官方 Alpine Linux 镜像时，这将启动一个无人值守的构建。
- en: 'Next, scroll down to `./chapter02/dockerfile-example/`. This will make sure
    that Docker''s build servers can find any files that we add to our Dockerfile:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，滚动到 `./chapter02/dockerfile-example/`。这将确保 Docker 的构建服务器能够找到我们添加到 Dockerfile
    中的任何文件：
- en: '![Figure 3.11 – Linking our repository to our Dockerfile'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.11 – 将我们的仓库与 Dockerfile 连接'
- en: '](img/Figure_3.11_B15659.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.11_B15659.jpg)'
- en: Figure 3.11 – Linking our repository to our Dockerfile
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 将我们的仓库与 Dockerfile 连接
- en: So, now, our image will be automatically rebuilt and published whenever we update
    the GitHub repository, or when a new official image is published.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在，只要我们更新 GitHub 仓库，或者发布新的官方镜像，我们的镜像就会自动重建并发布。
- en: 'As neither of these is likely to happen immediately, click on the **Trigger**
    button on the **Builds** page to manually kick off a build:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这两者都不太可能立即发生，点击 **触发** 按钮，在 **构建** 页面上手动启动构建：
- en: '![Figure 3.12 – Triggering a build'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12 – 触发构建'
- en: '](img/Figure_3.12_B15659.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.12_B15659.jpg)'
- en: Figure 3.12 – Triggering a build
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 触发构建
- en: 'You will notice that the **Trigger** button turns into a spinning icon and
    that **Latest Build Status** changes to **PENDING**, as shown in the following
    screenshot. This confirms that a build has been scheduled in the background:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到 **触发** 按钮变成了旋转图标，并且 **最新构建状态** 变为 **待处理**，如下图所示。这确认了一个构建已在后台排队：
- en: '![Figure 3.13 – The build is progressing'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – 构建正在进行'
- en: '](img/Figure_3.13_B15659.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.13_B15659.jpg)'
- en: Figure 3.13 – The build is progressing
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 构建正在进行
- en: 'Once you have triggered your build, scroll down to **Recent Builds**. This
    will list all of the builds for the image – successful, failed, and ones that
    are in progress. You should see a build underway; clicking on the build will bring
    up the logs for it:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你触发了构建，滚动到 **最近的构建**。这将列出该镜像的所有构建——成功的、失败的以及正在进行的。你应该看到一个构建正在进行；点击该构建将显示其日志：
- en: '![Figure 3.14 – Viewing the progress of the build'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.14 – 查看构建进度'
- en: '](img/Figure_3.14_B15659.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.14_B15659.jpg)'
- en: Figure 3.14 – Viewing the progress of the build
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 查看构建进度
- en: 'Once built, you should then able to move to your local Docker installation
    by running the following commands, making sure to pull your own image if you have
    been following along:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成，你应该能够通过运行以下命令切换到本地的 Docker 安装，确保如果你一直在跟随教程，请拉取你自己的镜像：
- en: '[PRE0]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These commands are shown in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令显示在下图中：
- en: '![Figure 3.15 – Pulling our newly built image'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.15 – 拉取我们新构建的镜像'
- en: '](img/Figure_3.15_B15659.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.15_B15659.jpg)'
- en: Figure 3.15 – Pulling our newly built image
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 拉取我们新构建的镜像
- en: 'You can also run the image created by Docker Hub using the following command,
    again making sure to use your own image if you have one:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用以下命令运行 Docker Hub 创建的镜像，再次确保如果你有自己的镜像，请使用你自己的镜像：
- en: '[PRE1]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I also add the multi-stage build in exactly the same way. Docker Hub had no
    problem with the build, as shown by the following logs, which start off with a
    little bit of information about Docker''s build environment:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我还以完全相同的方式添加了多阶段构建。Docker Hub 对构建没有问题，如以下日志所示，日志开始提供有关 Docker 构建环境的一些信息：
- en: '[PRE2]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The build then starts by compiling our code, as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，构建开始编译我们的代码，如下所示：
- en: '[PRE3]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that our code has been compiled, it moves on to copying the application
    binary to what will be the final image using `scratch`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的代码已经编译完成，它将继续将应用程序二进制文件复制到最终镜像中，使用的是 `scratch`：
- en: '[PRE4]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see from the following screenshot, the image acts in the exact same
    way as it did when we created it locally:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，镜像的行为与我们在本地创建时完全相同：
- en: '![Figure 3.16 – Pulling our multi-stage environment and launching the build'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.16 – 拉取我们的多阶段环境并启动构建'
- en: '](img/Figure_3.16_B15659.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.16_B15659.jpg)'
- en: Figure 3.16 – Pulling our multi-stage environment and launching the build
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 拉取我们的多阶段环境并启动构建
- en: 'You can remove the containers if you launched them by using the following commands:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你启动了容器，可以使用以下命令将其删除：
- en: '[PRE5]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that we have looked at automated builds, we will discuss how else we can
    push images to Docker Hub.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了自动构建，接下来我们将讨论其他将镜像推送到 Docker Hub 的方法。
- en: Pushing your own image
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推送你自己的镜像
- en: In [*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068)*, Building
    Container Images*, we discussed creating an image without using a Dockerfile.
    While this is still not a good idea and should only be done when you really need
    to, you can push your own images to Docker Hub.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第二章*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068) *构建容器镜像* 中，我们讨论了如何在不使用
    Dockerfile 的情况下创建镜像。虽然这仍然不是一个好主意，应该仅在真正需要时进行，但你可以将自己的镜像推送到 Docker Hub。
- en: Tip
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: When pushing images to Docker Hub in this way, ensure that you do not include
    any code, files, or environment variables you would not want to be publicly accessible.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在以这种方式将镜像推送到 Docker Hub 时，请确保不要包含任何不希望公开访问的代码、文件或环境变量。
- en: 'To do this, we first need to link our local Docker client to Docker Hub by
    running the following command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们首先需要通过运行以下命令将本地 Docker 客户端与 Docker Hub 链接起来：
- en: '[PRE6]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You will then be prompted for your Docker ID and password. However, if you
    have enabled multi-factor authentication, then you will need to use a personal
    access token rather than your password. To create a personal access token, go
    to **Settings** in Docker Hub, click on **Security** from the left-hand menu,
    and then click the **New Access Token** button. As per the on-screen instructions,
    the access token will only be displayed once, so make sure you make a note of
    it. Treat personal access tokens as alternatives to your password and store them
    appropriately:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将被提示输入你的 Docker ID 和密码。然而，如果你启用了多因素身份验证，那么你需要使用个人访问令牌而不是密码。要创建个人访问令牌，请转到
    Docker Hub 中的 **设置**，点击左侧菜单中的 **安全性**，然后点击 **新建访问令牌** 按钮。根据屏幕上的说明，访问令牌只会显示一次，所以请确保记下它。将个人访问令牌视为密码的替代品，并妥善存储：
- en: '![Figure 3.17 – Logging into Docker Hub using the Docker client'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.17 – 使用 Docker 客户端登录 Docker Hub'
- en: '](img/Figure_3.17_B15659.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.17_B15659.jpg)'
- en: Figure 3.17 – Logging into Docker Hub using the Docker client
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – 使用 Docker 客户端登录 Docker Hub
- en: 'Also, if you are using Docker for Mac or Docker for Windows, you will now be
    logged in via the app and should be able to access Docker Hub from the menu:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你正在使用 Docker for Mac 或 Docker for Windows，现在会通过应用程序登录，并且应该可以从菜单中访问 Docker
    Hub：
- en: '![Figure 3.18 – Viewing your Docker Hub details in Docker Desktop'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.18 – 在 Docker Desktop 中查看你的 Docker Hub 详情'
- en: '](img/Figure_3.18_B15659.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.18_B15659.jpg)'
- en: Figure 3.18 – Viewing your Docker Hub details in Docker Desktop
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – 在 Docker Desktop 中查看你的 Docker Hub 详情
- en: Now that our client is authorized to interact with Docker Hub, we need an image
    to build.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的客户已被授权与 Docker Hub 进行交互，我们需要一个镜像来进行构建。
- en: 'Let''s look at pushing the scratch image we built in [*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068),
    *Building Container Images*. First, we need to build the image. To do this, I
    am using the following command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下推送我们在 [*第二章*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068) 中构建的 scratch
    镜像，*构建容器镜像*。首先，我们需要构建镜像。为此，我使用以下命令：
- en: '[PRE7]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you are following along, then you should replace `masteringdockerfouthedition`
    with your own username or organization:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跟随此步骤进行操作，请将 `masteringdockerfouthedition` 替换为你自己的用户名或组织：
- en: '![Figure 3.19 – Building an image locally'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.19 – 本地构建镜像'
- en: '](img/Figure_3.19_B15659.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.19_B15659.jpg)'
- en: Figure 3.19 – Building an image locally
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – 本地构建镜像
- en: 'Once the image has been built, we can push it to Docker Hub by running the
    following command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像构建完成，我们可以通过运行以下命令将其推送到 Docker Hub：
- en: '[PRE8]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows the output:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出结果：
- en: '![Figure 3.20 – Pushing an image to Docker Hub'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.20 – 将镜像推送到 Docker Hub'
- en: '](img/Figure_3.20_B15659.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.20_B15659.jpg)'
- en: Figure 3.20 – Pushing an image to Docker Hub
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – 推送镜像到 Docker Hub
- en: 'As you can see, because we defined `masteringdockerfouthedition/scratchexample:latest`
    when we built the image, Docker automatically uploaded the image to that location,
    which, in turn, added a new image to the `masteringdockerfouthedition` organization:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，由于我们在构建镜像时定义了 `masteringdockerfouthedition/scratchexample:latest`，Docker
    会自动将镜像上传到该位置，从而将一个新镜像添加到 `masteringdockerfouthedition` 组织中：
- en: '![Figure 3.21 – Viewing our locally built image in Docker Hub'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.21 – 在 Docker Hub 中查看我们本地构建的镜像'
- en: '](img/Figure_3.21_B15659.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.21_B15659.jpg)'
- en: Figure 3.21 – Viewing our locally built image in Docker Hub
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – 在 Docker Hub 中查看我们本地构建的镜像
- en: You will notice that there is not much you can do with the build in Docker Hub.
    This is because the image was not built by Docker Hub, and therefore, it does
    not really have any idea what has gone into building the image, which is exactly
    why this method of distributing images is discouraged.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，在 Docker Hub 中的构建功能有限。这是因为镜像并不是由 Docker Hub 构建的，因此，它并不真正知道构建镜像时包含了哪些内容，这正是为什么这种分发镜像的方法不被推荐的原因。
- en: Now that we have discussed how to distribute images, let's look at the complete
    opposite and discuss certified images and publishers.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了如何分发镜像，接下来我们来看完全相反的情况，讨论认证镜像和发布者。
- en: Docker Certified Images and Verified Publishers
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 认证镜像和验证发布者
- en: 'You may remember that in [*Chapter 1*](B15659_01_Final_JM_ePub.xhtml#_idTextAnchor046),
    *Docker Overview*, we downloaded Docker for macOS and Docker for Windows, as well
    as Docker Hub. As well as acting as a single location for downloading both Docker
    CE and Docker EE for various platforms, it is now also the preferred location
    for finding Docker Plugins, Docker Certified Images, and Images from Verified
    Publishers:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得，在[*第 1 章*](B15659_01_Final_JM_ePub.xhtml#_idTextAnchor046)中，*Docker 概览*，我们下载了
    Docker for macOS 和 Docker for Windows，以及 Docker Hub。除了作为一个单一位置来下载各种平台的 Docker
    CE 和 Docker EE 版本外，它现在也是查找 Docker 插件、Docker 认证镜像和来自验证发布者的镜像的首选位置：
- en: '![Figure 3.22 – Exploring Docker Certified Images on Docker Hub'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.22 – 在 Docker Hub 中探索 Docker 认证镜像'
- en: '](img/Figure_3.22_B15659.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.22_B15659.jpg)'
- en: Figure 3.22 – Exploring Docker Certified Images on Docker Hub
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – 在 Docker Hub 中探索 Docker 认证镜像
- en: 'Taking a closer look at the **Splunk Enterprise** image in Docker Hub gives
    you information about who is responsible for the image. It also shows that it
    is a certified image, as shown in the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看 Docker Hub 中的**Splunk Enterprise**镜像，你可以获取关于镜像的责任人信息。它还显示这是一个认证镜像，如下图所示：
- en: '![Figure 3.23 – Viewing the Splunk Enterprise Docker Hub image'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.23 – 查看 Splunk Enterprise Docker Hub 镜像'
- en: '](img/Figure_3.23_B15659.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.23_B15659.jpg)'
- en: Figure 3.23 – Viewing the Splunk Enterprise Docker Hub image
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23 – 查看 Splunk Enterprise Docker Hub 镜像
- en: As you may have noticed, the image has a price attached to it (the Free version
    is $0.00, but is limited), meaning that you can buy commercial software through
    Docker Hub since it has payments and licensing built in. If you are a software
    publisher, you can sign and distribute your own software through Docker Hub.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能注意到的，镜像上有一个价格（免费版为 $0.00，但有一些限制），这意味着你可以通过 Docker Hub 购买商业软件，因为它内置了支付和许可功能。如果你是软件发布者，你可以通过
    Docker Hub 签署并分发你自己的软件。
- en: Deploying your own Docker Registry
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署你自己的 Docker 注册表
- en: In this section, we will look at Docker Registry. Docker Registry is an open
    source application that you can run anywhere you please and store your Docker
    image in. We will provide at a comparison between Docker Registry and Docker Hub,
    as well as how to choose between the two.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍 Docker 注册表。Docker 注册表是一个开源应用程序，你可以在任何地方运行它并存储你的 Docker 镜像。我们将提供 Docker
    注册表与 Docker Hub 的比较，以及如何在两者之间进行选择。
- en: By the end of this section, you will have learned how to run your own Docker
    Registry and check whether it's a proper fit for you.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 到本节结束时，你将学习如何运行自己的 Docker 注册表，并检查它是否适合你。
- en: An overview of Docker Registry
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 注册表概述
- en: Docker Registry, as stated earlier, is an open source application that you can
    utilize to store your Docker images on a platform of your choice. This allows
    you to keep them 100% private if you wish or share them as needed.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker 注册表是一个开源应用程序，你可以用它在你选择的平台上存储你的 Docker 镜像。这让你可以选择将它们保持 100% 私密，或者根据需要共享它们。
- en: Docker Registry makes a lot of sense if you want to deploy your own registry
    without having to pay for all the private features of Docker Hub. Let's take a
    look at some comparisons between Docker Hub and Docker Registry to help you make
    an educated decision as to which option is best for you when it comes to choosing
    to store your own images.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想部署自己的Registry，而不需要支付Docker Hub的所有私人功能，那么Docker Registry是非常有意义的。让我们来看一些Docker
    Hub和Docker Registry之间的对比，帮助您做出明智的决策，选择适合您的镜像存储方式。
- en: 'Docker Registry has the following features:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Registry具有以下功能：
- en: You can host and manage your own registry, from which you can serve all the
    repositories as private, public, or a mix between the two.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以托管并管理自己的Registry，从中可以提供所有仓库作为私有、公共或两者的混合。
- en: You can scale the registry as needed, based on how many images you host or how
    many pull requests you are serving out.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据您托管的镜像数量或服务的拉取请求数量，您可以按需扩展Registry。
- en: Everything is command-line-based.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一切都基于命令行。
- en: 'With Docker Hub, you will be able to do the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker Hub，您将能够执行以下操作：
- en: Get a GUI-based interface that you can use to manage your images
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个基于GUI的界面，您可以用来管理您的镜像
- en: Have a location already set up in the cloud that is ready to handle public and/or
    private images
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云中已经设置好一个位置，准备处理公共和/或私有镜像
- en: Have the peace of mind of not having to manage a server that is hosting all
    your images
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不用担心管理托管所有镜像的服务器
- en: Now that we know the differences between deploying our own registry and Docker
    Hub, let's look at the steps for deploying our own registry.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了部署自己Registry和Docker Hub之间的区别，让我们来看一下部署自己Registry的步骤。
- en: Deploying your own registry
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署您自己的Registry
- en: 'As you may have already guessed, Docker Registry is distributed as an image
    from Docker Hub, which makes deploying it as easy as running the following commands:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经猜到的，Docker Registry是作为Docker Hub上的镜像分发的，这使得部署它变得像运行以下命令一样简单：
- en: '[PRE9]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Running these commands should give you something like the following Terminal
    output:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些命令应该会给您类似以下的终端输出：
- en: '![Figure 3.24 – Deploying your Docker Registry'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.24 – 部署您的Docker Registry'
- en: '](img/Figure_3.24_B15659.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.24_B15659.jpg)'
- en: Figure 3.24 – Deploying your Docker Registry
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24 – 部署您的Docker Registry
- en: 'These commands will give you the most basic installation of Docker Registry.
    Let''s take a quick look at how we can push and pull an image to it. To start
    off with, we need an image, so let''s grab the Alpine image (again):'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将为您提供Docker Registry的最基本安装。让我们快速看看如何将镜像推送到它。首先，我们需要一个镜像，所以让我们重新获取Alpine镜像：
- en: '[PRE10]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that we have a copy of the Alpine Linux image, we need to push it to our
    local Docker Registry, which is available at `localhost:5000`. To do this, we
    need to tag the Alpine Linux image with the URL of our local Docker Registry,
    along with a different image name:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了Alpine Linux镜像的副本，我们需要将其推送到本地Docker Registry，地址为`localhost:5000`。为此，我们需要为Alpine
    Linux镜像打上本地Docker Registry的URL，并且使用不同的镜像名称：
- en: '[PRE11]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have tagged our image, we can push it to our locally hosted Docker
    Registry by running the following command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经标记了镜像，可以通过运行以下命令将其推送到本地托管的Docker Registry：
- en: '[PRE12]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows the output of the preceding commands:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了之前命令的输出：
- en: '![Figure 3.25 – Pushing an image to your own Docker Registry'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.25 – 将镜像推送到您自己的Docker Registry'
- en: '](img/Figure_3.25_B15659.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.25_B15659.jpg)'
- en: Figure 3.25 – Pushing an image to your own Docker Registry
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25 – 将镜像推送到您自己的Docker Registry
- en: 'Try running the following command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行以下命令：
- en: '[PRE13]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output should show you that you have two images with the same `IMAGE ID`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该显示您有两个具有相同`IMAGE ID`的镜像：
- en: '![Figure 3.26 – Listing the images'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.26 – 列出镜像'
- en: '](img/Figure_3.26_B15659.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.26_B15659.jpg)'
- en: Figure 3.26 – Listing the images
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26 – 列出镜像
- en: 'Before we pull the image back down from our local Docker Registry, we should
    remove the two local copies of the image. We need to use the `REPOSITORY` name
    to do this, rather than `IMAGE ID`, since we have two images from two locations
    with the same ID, and Docker will throw an error:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们从本地Docker Registry拉取镜像之前，我们应该删除这两个本地镜像副本。我们需要使用`REPOSITORY`名称来执行此操作，而不是`IMAGE
    ID`，因为我们有两个来自两个位置的镜像，具有相同的ID，而Docker会抛出错误：
- en: '[PRE14]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that the original and tagged images have been removed, we can pull the
    image from our local Docker Registry by running the following command:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在原始镜像和已标记镜像已被删除，我们可以通过运行以下命令从本地Docker Registry拉取镜像：
- en: '[PRE15]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see, we now have a copy of our image that has been pulled from the
    Docker Registry running at `localhost:5000`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们现在有一个从运行在 `localhost:5000` 的 Docker Registry 中拉取的镜像副本：
- en: '![Figure 3.27 – Pulling from your own Docker Registry'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.27 – 从你自己的 Docker Registry 拉取'
- en: '](img/Figure_3.27_B15659.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.27_B15659.jpg)'
- en: Figure 3.27 – Pulling from your own Docker Registry
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.27 – 从你自己的 Docker Registry 拉取
- en: 'You can stop and remove the Docker Registry by running the following commands:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令停止并移除 Docker Registry：
- en: '[PRE16]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, there are a lot of options and considerations when it comes to launching
    a Docker Registry. As you can imagine, the most important is in regards to storage.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在启动 Docker Registry 时有很多选项和考虑因素。正如你所想，最重要的考虑因素是存储。
- en: 'Given that a registry''s sole purpose is storing and distributing images, it
    is important that you use some level of persistent OS storage. Docker Registry
    currently supports the following storage options:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 由于注册中心的唯一目的是存储和分发镜像，因此使用某种级别的持久性操作系统存储非常重要。Docker Registry 当前支持以下存储选项：
- en: '`/var/lib/registry`.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/lib/registry`。'
- en: '**Azure**: This uses Microsoft Azure Blob Storage.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure**：这使用 Microsoft Azure Blob 存储。'
- en: '**GCS**: This uses Google Cloud storage.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GCS**：这使用 Google Cloud 存储。'
- en: '**S3**: This uses **Amazon Simple Storage Service** (**Amazon S3**).'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S3**：这使用**亚马逊简单存储服务** (**Amazon S3**)。'
- en: '**Swift**: This uses OpenStack Swift.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swift**：这是使用 OpenStack Swift。'
- en: As you can see, other than the filesystem, all the storage engines that are
    supported are all highly available, distributed, object-level forms of storage.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，除了文件系统，所有支持的存储引擎都是高度可用、分布式的对象级存储形式。
- en: Docker Trusted Registry
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 受信任注册中心
- en: 'One of the components that ships with the commercial **Docker Enterprise Edition**
    (**Docker EE**) is **Docker Trusted Registry** (**DTR**), both of which are now
    being developed and supported by Mirantis. Think of it as a version of Docker
    Hub that you can host in your own infrastructure. DTR adds the following features
    on top of the ones provided by the free Docker Hub and Docker Registry:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 商业版**Docker 企业版** (**Docker EE**)随附的一个组件是**Docker 受信任注册中心** (**DTR**)，这两个组件现在由
    Mirantis 开发和支持。可以将它看作是一个你可以在自己基础设施上托管的 Docker Hub 版本。DTR 在免费 Docker Hub 和 Docker
    Registry 提供的功能基础上，添加了以下特性：
- en: Integration into your authentication services, such as Active Directory or LDAP
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成到你的身份验证服务中，如 Active Directory 或 LDAP
- en: Deployment on your own infrastructure (or cloud) behind your firewall
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你自己的基础设施（或云）中部署，并置于防火墙之后
- en: Image signing to ensure your images are trusted
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像签名，以确保你的镜像是受信任的
- en: Built-in security scanning
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置的安全扫描
- en: Access to prioritized support directly from Mirantis
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接从 Mirantis 获取优先支持
- en: Reviewing third-party registries
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查第三方注册中心
- en: It is not only Docker that offers image registry services; companies such as
    Red Hat offer their own registry, where you can find the Red Hat Container Catalog,
    which hosts containerized versions of all of Red Hat's product offerings, along
    with containers to support its OpenShift offering. Services such as Artifactory
    by JFrog offer a private Docker registry as part of their build services.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅 Docker 提供镜像注册服务；像 Red Hat 这样的公司也提供自己的注册中心，在那里你可以找到 Red Hat 容器目录，其中包含所有 Red
    Hat 产品的容器化版本，以及支持其 OpenShift 服务的容器。像 JFrog 的 Artifactory 这样的服务，也将私人 Docker 注册中心作为其构建服务的一部分提供。
- en: There are also other Registry-as-a-Service offerings, such as Quay, which is
    also by Red Hat, as well as services from GitHub, Amazon Web Services, Microsoft
    Azure, and Google Cloud.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他 Registry-as-a-Service 提供商，例如 Quay（也是 Red Hat 提供的），以及来自 GitHub、亚马逊 Web 服务、微软
    Azure 和 Google Cloud 的服务。
- en: Let's take a quick look at some of these services.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下这些服务。
- en: GitHub Packages and Actions
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub Packages 和 Actions
- en: The first service we are going to look at is GitHub Packages. Here, we will
    take a look at uploading a container to my fork of this book's GitHub repository.
    First of all, we are going to need a personal access token. To get this, log into
    your GitHub account and go to **Settings**, then **Developer settings**, and then
    **Personal access tokens**.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要查看的第一个服务是 GitHub Packages。在这里，我们将看一下如何将容器上传到我为本书的 GitHub 仓库所做的 fork 中。首先，我们需要一个个人访问令牌。获取这个令牌，请登录到你的
    GitHub 账户，进入**设置**，然后选择**开发者设置**，接着点击**个人访问令牌**。
- en: 'Generate an access token, call it `cli-package-access`, and give it the following
    permissions:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个访问令牌，命名为 `cli-package-access`，并赋予以下权限：
- en: '`repo`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repo`'
- en: '`write:packages`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`write:packages`'
- en: '`read:packages`'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read:packages`'
- en: '`delete:packages`'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete:packages`'
- en: '`workflow`'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workflow`'
- en: 'Make a note of the token when it is displayed as you will never be able to
    view it again. After doing this, I put my token in a file called `.githubpackage`
    in my users root folder. Putting it in there will mean that I don''t need to enter
    the password each time I log in. I can do this by using the following command:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示时记下 token，因为你将无法再次查看它。完成此操作后，我将我的 token 存放在用户根目录下的一个名为 `.githubpackage` 的文件中。将其放在那里意味着我每次登录时都不需要输入密码。我可以通过使用以下命令来实现：
- en: '[PRE17]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once logged in, we can build an image. For this example, I used `dockerfile-example`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，我们可以构建镜像。对于这个例子，我使用了 `dockerfile-example`：
- en: '[PRE18]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Notice that I am using the repository name `mastering-docker-fourth-edition`
    and that it is all in lowercase. If you were to try and use any uppercase characters,
    Docker will complain.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我使用的是 `mastering-docker-fourth-edition` 仓库名称，并且全部采用小写字母。如果你尝试使用任何大写字母，Docker
    会报错。
- en: 'Once built and tagged, you can push your image using the following command:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建并标记，你可以使用以下命令推送你的镜像：
- en: '[PRE19]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once pushed, you should be able to see that there is now a package in your
    repository:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 推送后，你应该能看到现在仓库中有一个包：
- en: '![Figure 3.28 – Viewing the package that was pushed to GitHub'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.28 – 查看推送到 GitHub 的包'
- en: '](img/Figure_3.28_B15659.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.28_B15659.jpg)'
- en: Figure 3.28 – Viewing the package that was pushed to GitHub
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.28 – 查看推送到 GitHub 的包
- en: 'Drilling down to the package shows the following basic stats and download information:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 深入查看该包将显示以下基本统计信息和下载信息：
- en: '![Figure 3.29 – Viewing more information about the package'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.29 – 查看更多关于该包的信息'
- en: '](img/Figure_3.29_B15659.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.29_B15659.jpg)'
- en: Figure 3.29 – Viewing more information about the package
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.29 – 查看更多关于该包的信息
- en: 'You can also download the image by running the following command:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过运行以下命令下载镜像：
- en: '[PRE20]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Since our GitHub repository is public, our package will be too, meaning that
    anyone can download it.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的 GitHub 仓库是公开的，我们的包也将是公开的，意味着任何人都可以下载它。
- en: So, that covers pushing an existing image. However, as we have mentioned a few
    times already throughout this chapter, this is not really recommended. Luckily,
    GitHub introduced GitHub Actions, which allows you to set up automated workflows
    that action **things** whenever an event, such as a push to the repository, occurs.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就涵盖了推送一个现有镜像的过程。然而，正如我们在本章中已经提到过几次的，这其实并不推荐。幸运的是，GitHub 引入了 GitHub Actions，允许你设置自动化工作流，每当发生某个事件（比如推送到仓库）时，就会执行相应的
    **操作**。
- en: To create a GitHub Action, go to your repository and click on the `.github/workflows/main.yml`
    in your repository.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 GitHub Action，请进入你的仓库并点击仓库中的 `.github/workflows/main.yml`。
- en: 'Enter the following content in the space provided:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供的空间中输入以下内容：
- en: '[PRE21]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, this closely follows the steps we took to build and tag our
    image, authenticate against GitHub Packages, and push the image. There are some
    things that are relevant to GitHub Actions, such as the `$GITHUB_REPOSITORY` and
    `$GITHUB_RUN_NUMBER` variables, as well as `${{secrets.GITHUB_TOKEN}}`, all of
    which make sure that there is nothing from my Action that's hardcoded. This means
    you can run safely it in your own repository.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这与我们构建和标记镜像、在 GitHub Packages 进行身份验证以及推送镜像的步骤非常相似。有一些与 GitHub Actions 相关的内容，例如
    `$GITHUB_REPOSITORY` 和 `$GITHUB_RUN_NUMBER` 变量，以及 `${{secrets.GITHUB_TOKEN}}`，所有这些都确保我的
    Action 中没有硬编码的内容。这意味着你可以在你自己的仓库中安全地运行它。
- en: 'Once entered, click on the **Start commit** button, enter some details, and
    click on **Commit new file**. Once committed, the workflow will start automatically.
    You can view the output by going back to **Actions** and then selecting the newly
    created workflow and then job:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 输入后，点击 **Start commit** 按钮，输入一些细节，然后点击 **Commit new file**。一旦提交，工作流将自动开始。你可以通过返回
    **Actions**，然后选择新创建的工作流和任务来查看输出：
- en: '![Figure 3.30 – Viewing our GitHub Actions build results'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.30 – 查看我们的 GitHub Actions 构建结果'
- en: '](img/Figure_3.30_B15659.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.30_B15659.jpg)'
- en: Figure 3.30 – Viewing our GitHub Actions build results
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.30 – 查看我们的 GitHub Actions 构建结果
- en: 'Once complete, going to **Packages** in your repository should show you a package
    that looks as follows:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，进入仓库中的 **Packages**，应该能看到一个如下所示的包：
- en: '![Figure 3.31 – Checking the package created by our GitHub Action'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.31 – 检查我们的 GitHub Action 创建的包'
- en: '](img/Figure_3.31_B15659.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.31_B15659.jpg)'
- en: Figure 3.31 – Checking the package created by our GitHub Action
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.31 – 检查我们的 GitHub Action 创建的包
- en: As you can see, while this does pretty much the same as an automated Docker
    Hub build, you have a lot more control over what happens and the build process
    itself.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，虽然这与自动化的 Docker Hub 构建几乎相同，但你对发生的事情以及构建过程本身有更多的控制权。
- en: Azure Container Registry
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 容器注册表
- en: Next up on our third-party container registry walkthrough, we have Microsoft's
    Azure Container Registry. To create one, log into your Microsoft Azure account.
    We will talk about Microsoft Azure in more detail in [*Chapter 10*](B15659_10_Final_JM_ePub.xhtml#_idTextAnchor277),
    *Running Docker in Public Clouds*.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们第三方容器注册表教程的下一个环节中，我们将介绍微软的 Azure 容器注册表。要创建一个，登录到你的 Microsoft Azure 账户。我们将在[*第
    10 章*](B15659_10_Final_JM_ePub.xhtml#_idTextAnchor277)中更详细地讨论 Microsoft Azure，*在公有云中运行
    Docker*。
- en: 'Once logged in, type `Container registries` into the search bar at the top
    of the screen and select the option from the results. Once the **Container registries**
    page loads, click on the **+ Add** button. You will be presented with a page that
    looks as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，在屏幕顶部的搜索栏中输入 `容器注册表`，并从结果中选择该选项。加载 **容器注册表** 页面后，点击 **+ 添加** 按钮。你将看到如下页面：
- en: '![Figure 3.32 – Creating our Azure Container Registry'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.32 – 创建我们的 Azure 容器注册表'
- en: '](img/Figure_3.32_B15659.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.32_B15659.jpg)'
- en: Figure 3.32 – Creating our Azure Container Registry
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.32 – 创建我们的 Azure 容器注册表
- en: 'If you are following along, enter the following information:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在跟着做，请输入以下信息：
- en: '**Subscription**: Select the subscription you would like to use.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅**：选择你希望使用的订阅。'
- en: '`masteringdocker-acr-rg`.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`masteringdocker-acr-rg`。'
- en: '`masteringdocker`.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`masteringdocker`。'
- en: '`UK South`.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`英国南部`。'
- en: '`Enable`.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`启用`。'
- en: '`Basic`. This should be enough for testing.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`基础`。这对于测试应该足够了。'
- en: We are going to ignore the encryption options for now as they are only available
    when using the premium SKU as well as the tags, so click on **Review + Create**.
    Once your deployment has been validated, click on the **Create** button. After
    a few minutes, your deployment will be complete.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将忽略加密选项，因为它们仅在使用高级 SKU 和标签时可用，所以点击 **审核 + 创建**。验证部署后，点击 **创建** 按钮。几分钟后，部署将完成。
- en: 'As with GitHub Packages, we are going to build and push a container. To do
    this, we need some credentials. To find these, click on **Access Keys** and make
    a note of the details for **Login server**, **Username**, and one of the two **passwords**:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 与 GitHub Packages 一样，我们将构建并推送一个容器。为此，我们需要一些凭据。要找到这些凭据，点击 **访问密钥**，并记录下 **登录服务器**、**用户名**
    和其中一个 **密码** 的详细信息：
- en: '![Figure 3.33 – Getting the access key for our Azure Container Registry'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.33 – 获取我们的 Azure 容器注册表的访问密钥'
- en: '](img/Figure_3.33_B15659.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.33_B15659.jpg)'
- en: Figure 3.33 – Getting the access key for our Azure Container Registry
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.33 – 获取我们的 Azure 容器注册表的访问密钥
- en: 'Like with GitHub Packages, put the password in a text file. I used `~/.azureacrpassword`.
    Then, log in with the Docker command-line client by running the following:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 与 GitHub Packages 类似，将密码保存在文本文件中。我使用的是`~/.azureacrpassword`。然后，通过运行以下命令使用 Docker
    命令行客户端进行登录：
- en: '[PRE22]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now that we are authenticated, change to the `dockerfile-example` folder, which
    can be found in the `chapter02` folder in this book''s GitHub repository, and
    build, tag, and push our image:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经通过身份验证，切换到 `dockerfile-example` 文件夹，该文件夹可以在本书 GitHub 仓库的 `chapter02` 文件夹中找到，然后构建、标记并推送我们的镜像：
- en: '[PRE23]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once pushed, you should be able to see it listed on the Azure Container Registry
    page by clicking on **Registries** in the **Services** section of the main menu.
    Select the image and version. After doing this, you will see something like the
    following:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 推送完成后，你应该能够在主菜单的 **服务** 部分点击 **注册表** 来查看它在 Azure 容器注册表页面上的列表。选择镜像和版本。完成此操作后，你将看到类似以下内容：
- en: '![Figure 3.34 – Viewing our container in the Azure Container Registry'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.34 – 在 Azure 容器注册表中查看我们的容器'
- en: '](img/Figure_3.34_B15659.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.34_B15659.jpg)'
- en: Figure 3.34 – Viewing our container in the Azure Container Registry
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.34 – 在 Azure 容器注册表中查看我们的容器
- en: When it comes to pulling images, you will need to make sure that you are authenticated
    against your Container Registry as it is a private service. Trying to pull and
    not being logged in will result in an error.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 当拉取镜像时，你需要确保已经对你的容器注册表进行了身份验证，因为它是一个私有服务。如果没有登录尝试拉取镜像，将会导致错误。
- en: You can also automate these builds based on committing your Dockerfile to a
    GitHub repository. This is, however, a little more involved as it can currently
    only be configured using Azure's command-line tools. See the *Further reading*
    section for more information about how to configure Azure Container Registry Tasks.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以基于将 Dockerfile 提交到 GitHub 仓库来自动化这些构建。然而，这需要更多的操作，因为目前只能通过 Azure 的命令行工具进行配置。有关如何配置
    Azure 容器注册任务的更多信息，请参阅*进一步阅读*部分。
- en: Looking at MicroBadger
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 MicroBadger
- en: Microbadger is a great tool when you are looking at shipping your containers
    or moving your images around. It will take into account everything that is going
    on in every single layer of a particular Docker image and give you an output regarding
    how much weight it has in terms of its actual size or the amount of disk space
    it will take up.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: MicroBadger 是一个很棒的工具，当你准备发布容器或移动图像时，它会非常有帮助。它会考虑到特定 Docker 图像中每一层的所有情况，并给出关于它的实际大小或它所占磁盘空间的输出结果。
- en: 'The following page is what you will be presented with when navigating to the
    MicroBadger website, [https://microbadger.com/](https://microbadger.com/):'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 当你访问 MicroBadger 网站 [https://microbadger.com/](https://microbadger.com/) 时，将会看到以下页面：
- en: '![Figure 3.35 – The Microbadger home page'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.35 – MicroBadger 首页'
- en: '](img/Figure_3.35_B15659.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.35_B15659.jpg)'
- en: Figure 3.35 – The Microbadger home page
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.35 – MicroBadger 首页
- en: You can search for images that are on Docker Hub to have MicroBadger provide
    information about that image. Alternatively, you can load up a sample image set
    if you are looking to provide some sample sets, or to view some more complex setups.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Docker Hub 上搜索图像，让 MicroBadger 提供该图像的信息。或者，如果你想提供一些示例集，或者查看更复杂的设置，你也可以加载一个示例图像集。
- en: In this example, we are going to search for one of my images, `russmckendrick/ab`,
    and select the latest tag. By default, it will always load the latest tag, but
    you also have the option of changing the tag you are viewing by selecting your
    desired tag from the **Versions** drop-down menu. This could be useful if you
    have, for example, a staging tag and are thinking of pushing this new image to
    your latest tag, but want to see what impact it will have on the size of the image.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将搜索我的一张图像，`russmckendrick/ab`，并选择最新的标签。默认情况下，它会始终加载最新的标签，但你也可以通过从**版本**下拉菜单中选择你想查看的标签来更改标签。如果你有例如一个预发布标签，并考虑将这个新图像推送到你的最新标签，但又想查看它对图像大小的影响，这个功能会非常有用。
- en: 'As shown in the following screenshot, MicroBadger presents information about
    how many layers your image contains:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，MicroBadger 展示了你的图像包含多少层的信息：
- en: '![Figure 3.36 – Viewing the details of our container in MicroBadger'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.36 – 在 MicroBadger 中查看我们的容器详情'
- en: '](img/Figure_3.36_B15659.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.36_B15659.jpg)'
- en: Figure 3.36 – Viewing the details of our container in MicroBadger
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.36 – 在 MicroBadger 中查看我们的容器详情
- en: By showing the size of each layer and the Dockerfile command that was executed
    during the image build, you can see at which stage of the image build the bloat
    was added, which is extremely useful when it comes to reducing the size of your
    images.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 通过显示每一层的大小和在图像构建过程中执行的 Dockerfile 命令，你可以看到在图像构建的哪个阶段添加了臃肿，这在减少图像大小时非常有用。
- en: 'Another great feature of MicroBadger is that it gives you the option to embed
    basic statistics about your images in your GitHub repository or Docker Hub. For
    example, the following screenshot shows the Docker Hub page for `russmckendrick/ab`:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: MicroBadger 的另一个伟大功能是，它让你可以将图像的基本统计数据嵌入到你的 GitHub 仓库或 Docker Hub 中。例如，以下截图展示了
    `russmckendrick/ab` 的 Docker Hub 页面：
- en: '![Figure 3.37 – Adding MicroBadger stats to an image''s README file'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.37 – 将 MicroBadger 统计数据添加到图像的 README 文件中'
- en: '](img/Figure_3.37_B15659.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.37_B15659.jpg)'
- en: Figure 3.37 – Adding MicroBadger stats to an image's README file
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.37 – 将 MicroBadger 的统计数据添加到图像的 README 文件中
- en: As you can see, MicroBadger is displaying the overall size of the image, which
    in this example is `5.1MB`, as well as the total number of layers the image is
    made up of, which is `7`. The MicroBadger service is still in its beta stage and
    new functions are being added all the time. I recommend that you keep an eye on
    it.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，MicroBadger 显示了图像的整体大小，在这个例子中是`5.1MB`，以及图像包含的总层数，这里是`7`。MicroBadger 服务仍处于测试阶段，新的功能正在不断添加。我建议你关注它的更新。
- en: Summary
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at several ways in which we can both manually and
    automatically build container images using Docker Hub. We discussed the various
    registries we can use besides Docker Hub, such as GitHub Packages and Microsoft's
    Azure Container Registry.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了使用 Docker Hub 构建容器镜像的几种手动和自动方法。我们讨论了除了 Docker Hub 之外的各种注册中心，例如 GitHub
    Packages 和微软的 Azure Container Registry。
- en: We also looked at deploying our own local Docker Registry and touched upon the
    considerations we need to make around storage when deploying one. Finally, we
    looked at MicroBadger, a service that allows us to display information about our
    remotely hosted container images.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还研究了如何部署我们自己的本地 Docker 注册表，并讨论了部署时需要考虑的存储问题。最后，我们了解了 MicroBadger，这是一项允许我们展示远程托管容器镜像信息的服务。
- en: All of this means you now have a way of distributing your own container images,
    both securely and in a way that allows you to easily keep your container images
    up to date.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些意味着你现在有了一个安全分发自己容器镜像的方式，并且这种方式让你可以轻松地保持容器镜像的最新。
- en: This is important as it means that, if you wish, it is possible to trigger an
    update of all your images with a single build, rather than having to manually
    build and push each individual image.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为它意味着，如果你愿意，可以通过一次构建触发所有镜像的更新，而不必手动构建和推送每个单独的镜像。
- en: In the next chapter, we are going to look at how to manage our containers from
    the command line.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将研究如何通过命令行管理我们的容器。
- en: Questions
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True or false: Docker Hub is the only source from which you can download official
    Docker images.'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对错题：Docker Hub 是你唯一可以下载官方 Docker 镜像的来源。
- en: Describe why you would want to link an automated build to an official Docker
    Hub image.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 说明为什么你想将自动构建与官方 Docker Hub 镜像链接。
- en: Are multi-stage builds supported on Docker Hub?
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker Hub 支持多阶段构建吗？
- en: 'True or false: Logging into Docker on the command line also logs you into the
    desktop application.'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对错题：在命令行登录 Docker 也会登录到桌面应用程序。
- en: How would you delete two images that share the same `IMAGE ID`?
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何删除共享相同`IMAGE ID`的两个镜像？
- en: Which port does Docker Registry run on by default?
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker 注册表默认运行在哪个端口？
- en: Further reading
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'More information on Docker Store, Trusted Registry, and Registry can be found
    at the following links:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Docker Store、受信注册表和注册表的更多信息可以通过以下链接找到：
- en: 'Docker Hub Publisher Signup: [https://store.docker.com/publisher/signup/](https://store.docker.com/publisher/signup/)'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub 发布者注册：[https://store.docker.com/publisher/signup/](https://store.docker.com/publisher/signup/)
- en: 'Docker Registry Documentation: [https://docs.docker.com/registry/](https://docs.docker.com/registry/)'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 注册表文档：[https://docs.docker.com/registry/](https://docs.docker.com/registry/)
- en: '**Docker Trusted Registry** (**DTR**): [https://www.mirantis.com/software/docker/image-registry/](https://www.mirantis.com/software/docker/image-registry/)'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 受信注册表**（**DTR**）：[https://www.mirantis.com/software/docker/image-registry/](https://www.mirantis.com/software/docker/image-registry/)'
- en: 'You can find more details about the different types of cloud-based storage
    you can use for Docker Registry at the following links:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下链接找到更多关于用于 Docker 注册表的不同类型云存储的详细信息：
- en: 'Azure Blob Storage: [https://azure.microsoft.com/en-gb/services/storage/blobs/](https://azure.microsoft.com/en-gb/services/storage/blobs/)'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Blob 存储：[https://azure.microsoft.com/en-gb/services/storage/blobs/](https://azure.microsoft.com/en-gb/services/storage/blobs/)
- en: 'Google Cloud storage: [https://cloud.google.com/storage/](https://cloud.google.com/storage/)'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud 存储：[https://cloud.google.com/storage/](https://cloud.google.com/storage/)
- en: '**Amazon Simple Storage Service** (**Amazon S3**): [https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊简单存储服务**（**Amazon S3**）：[https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)'
- en: 'Swift: [https://wiki.openstack.org/wiki/Swift](https://wiki.openstack.org/wiki/Swift)'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swift：[https://wiki.openstack.org/wiki/Swift](https://wiki.openstack.org/wiki/Swift)
- en: 'Some of the third-party registry services can be found here:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 一些第三方注册服务可以在这里找到：
- en: 'GitHub Actions: [https://github.com/features/actions](https://github.com/features/actions)'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Actions：[https://github.com/features/actions](https://github.com/features/actions)
- en: 'Azure Container Registry: [https://azure.microsoft.com/en-gb/services/container-registry/](https://azure.microsoft.com/en-gb/services/container-registry/)'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 容器注册表：[https://azure.microsoft.com/en-gb/services/container-registry/](https://azure.microsoft.com/en-gb/services/container-registry/)
- en: 'Azure Container Registry Tasks: [https://docs.microsoft.com/en-gb/azure/container-registry/container-registry-tutorial-quick-task](https://docs.microsoft.com/en-gb/azure/container-registry/container-registry-tutorial-quick-task)'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure 容器注册任务: [https://docs.microsoft.com/zh-cn/azure/container-registry/container-registry-tutorial-quick-task](https://docs.microsoft.com/en-gb/azure/container-registry/container-registry-tutorial-quick-task)'
- en: 'Amazon Elastic Container Registry: [https://aws.amazon.com/ecr/](https://aws.amazon.com/ecr/)'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Amazon 弹性容器注册: [https://aws.amazon.com/ecr/](https://aws.amazon.com/ecr/)'
- en: 'Google Cloud Container Registry: [https://cloud.google.com/container-registry](https://cloud.google.com/container-registry)'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google Cloud 容器注册: [https://cloud.google.com/container-registry](https://cloud.google.com/container-registry)'
- en: 'Red Hat Container Catalog: [https://catalog.redhat.com/software/containers/explore](https://catalog.redhat.com/software/containers/explore)'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Red Hat 容器目录: [https://catalog.redhat.com/software/containers/explore](https://catalog.redhat.com/software/containers/explore)'
- en: 'OpenShift: [https://www.openshift.com/](https://www.openshift.com/)'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'OpenShift: [https://www.openshift.com/](https://www.openshift.com/)'
- en: 'Quay by Red Hat: [https://quay.io/](https://quay.io/)'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Red Hat 的 Quay: [https://quay.io/](https://quay.io/)'
- en: 'Artifactory by JFrog: [https://www.jfrog.com/artifactory/](https://www.jfrog.com/artifactory/)'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'JFrog 的 Artifactory: [https://www.jfrog.com/artifactory/](https://www.jfrog.com/artifactory/)'
- en: 'Finally, you can find links to Docker Hub and Microbadger for my Apache Bench
    image here:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以在这里找到我的 Apache Bench 镜像的 Docker Hub 和 Microbadger 链接：
- en: 'Apache Bench Image (Docker Hub): [https://hub.docker.com/r/russmckendrick/ab/](https://hub.docker.com/r/russmckendrick/ab/)'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Apache Bench 镜像 (Docker Hub): [https://hub.docker.com/r/russmckendrick/ab/](https://hub.docker.com/r/russmckendrick/ab/)'
- en: 'Apache Bench Image (Microbadger): [https://microbadger.com/images/russmckendrick/ab](https://microbadger.com/images/russmckendrick/ab)'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Apache Bench 镜像 (Microbadger): [https://microbadger.com/images/russmckendrick/ab](https://microbadger.com/images/russmckendrick/ab)'
