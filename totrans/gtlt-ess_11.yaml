- en: Chapter 11. Mirroring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While most installations are happy to install Gitolite on a single server accessible
    to all their developers, some of them have developers in several cities around
    the world, and it is often useful to provide local mirrors in each city for fast
    access. Gitolite's mirroring feature caters to these needs in a very flexible
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: Mirroring can be as simple or as complex as you want it. You can have one server
    be the master server for all repositories, with one or more slave servers carrying
    copies of them. You can have different servers be the master servers for different
    repositories, and select only some of the remaining servers as slaves instead
    of all of them. You can even keep some repositories out of the mirroring process
    if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: Terminology and basic concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A mirrored repository has a writable copy on one server, often called the **master
    server** for that repository, and read-only copies on one or more servers, similarly
    called **slave servers** . The slave repositories are updated near instantaneously,
    subject to network speed, when the master repository is updated.
  prefs: []
  type: TYPE_NORMAL
- en: Repository level mirroring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The primary purpose of most mirroring is to make read access (over the network)
    faster, by providing a copy on a nearby server for fetches and clones. One might,
    therefore, expect a single server to be designated as the master and several others
    as slave servers.
  prefs: []
  type: TYPE_NORMAL
- en: However, Gitolite mirroring is defined at the *repository* level, not for the
    entire server as a whole. For *each* repository, the administrator decides which
    server holds the master (writable) copy, and which of the other servers, if any,
    should make slave copies available to their local users. (This is why we speak
    of master repository and slave repository, not master server and slave server.)
  prefs: []
  type: TYPE_NORMAL
- en: This is a very important idea that brings several advantages over mirroring
    the entire server as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, repositories need not be made available on servers where there are
    no local users of that repository. If there are very few (say one or two) users,
    depending on how actively developed the repository is, it might still make sense,
    from a network utilization point of view, to let those few users directly pull
    from the master or one of the other slaves. This allows branch offices with less
    resources to still be part of the Gitolite mirroring network if they have enough
    projects their local users will be working on.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, since you do not have to put *all* the master repositories on the
    same server, you can choose where to place the master copy of any specific repository.
    Usually, you'll want to place it on whichever server is closest (from a network
    speed point of view) to the majority of the developers who will be working on
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, repositories can be purely local to a particular server, that is, they
    need not be mirrored at all.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There can only be one master repository—you cannot have different users pushing
    to different servers because that would lead to a merge issue, which cannot be
    reliably automated. (However, Gitolite does have a workaround for convenience,
    as we will see later.)
  prefs: []
  type: TYPE_NORMAL
- en: The gitolite-admin repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the point of view of Gitolite's mirroring feature, the gitolite-admin repository
    is just another repository. There is nothing special about it as far as mirroring
    is concerned – like all other repositories, one of the servers will hold the master
    (writable) copy. The only difference is that *all* the other servers must be mentioned
    in the slave list; if a server is not mentioned, it cannot receive updates to
    this repository.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up mirroring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up mirroring has quite a few manual steps, although each step in itself
    is quite simple. The first step is to give each host a name, and make sure that
    the hosts can all talk to one another by these names. The second step is to enable
    mirroring on each server.
  prefs: []
  type: TYPE_NORMAL
- en: We start by installing Gitolite as normal on all the servers. Then, we edit
    each server's `$HOME/.gitolite.rc` file and uncomment the line defining the `HOSTNAME`,
    choosing a simple hostname as the value.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The hostname should be a simple word; it is of interest only to Gitolite and
    does not have any relation to the server's hostname as known by the operating
    system and DNS records.
  prefs: []
  type: TYPE_NORMAL
- en: Gitolite mirroring works by allowing the servers to communicate with each other
    using ssh keypairs named after these hostnames. This is the same mechanism that
    users use, except that the public key file for a server is named `server-`, followed
    by the hostname of that server. All the keys will need to be provided to all the
    servers, added to their gitolite-admin repositories, and pushed. Finally, each
    server's $HOME/.ssh/config will need a host alias to refer to all the other machines.
  prefs: []
  type: TYPE_NORMAL
- en: Example setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An example will make this clearer. Say you have three servers jupiter, ganymede,
    and callisto. These servers are on IP addresses `10.1.1.1, 10.2.1.1` and `10.3.1.1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install Gitolite on all three servers. On Jupiter, edit `$HOME/.gitolite.rc`,
    and uncomment the `HOSTNAME` line, changing it as follows (don''t miss the trailing
    comma!):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do the same on the other two servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `ssh-keygen` on each server to create a key pair for the server. Collect
    all three `$HOME/.ssh/id_rsa.pub` files (one from each server), naming them `server-jupiter.pub`,
    `server-callisto.pub`, and `server-ganymede.pub` respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add these public keys to *all* the servers, just as you would add normal users
    (that is, *for each server*, clone the gitolite-admin repo from that server, add
    all these keys to the `keydir`, then add, commit, and push).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the following lines to all three servers'' `$HOME/.ssh/config` files
    (assuming the hosting user on all three servers is `git`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you''re done with all this, you should be able to test your setup by running
    ssh ganymede info from jupiter. You should get an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Similar commands from any server to any other should generate similar responses.
    It is best to test all the possible combinations to avoid confusing errors later.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping the mirroring process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous step establishes communication and authentication between all servers.
    Once that is done and checked, the next step is to bootstrap the mirroring process
    by setting up mirror options for the gitolite-admin repository and pushing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'On each server, add the following lines to the `conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once you add, commit, and push this change to all the repositories, Gitolite
    mirroring is set up and ready to go. From here on, you administer everything by
    pushing to the gitolite-admin repository on its master server (in our case, `jupiter`).
  prefs: []
  type: TYPE_NORMAL
- en: Mirroring other repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By now you can guess what you need to do for each of the other repositories.
    Just add option lines as in the previous section for each of them. For example,
    a simple mirroring setup, where all the repositories are mirrored the same way,
    can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If that's all you want, you're pretty much done with mirroring. Otherwise, add
    the options as required, giving each repository the correct master server name
    and the correct set of slave servers. Note that any repositories that don't have
    these settings are considered local.
  prefs: []
  type: TYPE_NORMAL
- en: If you're allowing your users to create their own repositories (see [Chapter
    8](ch08.html "Chapter 8. Allowing Users to Create Repos"), *Allowing Users to
    Create Repos*), just add mirroring option lines to those repository definitions
    too. The following restrictions apply to mirroring user-created repositories.
  prefs: []
  type: TYPE_NORMAL
- en: The creation of such a repository is propagated only when the first push happens
    to the repository on the master server. A repository created as the result of
    a clone or fetch will not immediately propagate to the slaves.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in permissions (using the `perms` command; see [Chapter 8](ch08.html
    "Chapter 8. Allowing Users to Create Repos"), *Allowing Users to Create Repos*,
    specifically the *Giving access to other users* section) also propagate only on
    the next push.
  prefs: []
  type: TYPE_NORMAL
- en: Local repositories and hostname substitution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We mentioned earlier that some servers can have local repositories, say if the
    `conf` file does not specify Gitolite mirror options for those repositories. However,
    local repositories are really of interest only if each server can have its own
    set of them. For example, say the folks on Ganymede wish to have a local repository
    called ganymede-news that they intend to use internally. Adding that to the `conf`
    file would create such a repository on Jupiter and Callisto as well; even if no
    one used it, it's ugly, unnecessary, and cause for future confusion. We would
    like to prevent this, but since the same gitolite-admin repository, with the same
    `conf/gitolite.conf` file and other files, is pushed to all the slave servers,
    it seems difficult to do so.
  prefs: []
  type: TYPE_NORMAL
- en: The feature that makes this possible is `HOSTNAME` substitution. Specifically,
    whenever Gitolite encounters the string `%HOSTNAME` (followed by a non-word character;
    that is, a character other than alphabets, digits, and underscore) in the `conf`
    file, it will replace it with the `HOSTNAME` of the server, as given in `$HOME/.gitolite.rc`,
    before processing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `include` statement capability we saw in [Chapter 6](ch06.html "Chapter 6. Getting
    Started with Access Control"), *Getting Started with Access Control*, you can
    now provide server-specific Gitolite configuration, while still keeping everything
    in one repository. Just add the following line to the main conf file (`conf/gitolite.conf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Then, create `conf/jupiter.conf`, `conf/callisto.conf` and so on for each of
    your servers. Within those files, specify repo statements and rules that are unique
    to the respective server.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to understand that when you use such an `include` statement
    in your main `conf` file and push, each server will see that line differently.
    For example, Jupiter will see it as the following line (and similarly for other
    servers):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This means that the other two files (`ganymede.conf` and `callisto.conf`), while
    they are certainly physically present in the `conf` directory, are not actually
    processed at all.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting pushes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We mentioned earlier that there can only be one master repository. However,
    this makes things a little inconvenient from the developers' point of view. Say
    you would like some of your developers to take advantage of a geographically close
    slave server to pull updates from. This means they would have to use push to a
    different server than the one they presumably cloned from and regularly pull/fetch
    from. While Git does allow this (see man git-config and look for pushurl, for
    one possible way), it is still something that requires each user to do something
    on their machines. In addition, remember Gitolite allows different repositories
    to have different master servers; this is more scope for confusion on the part
    of the developer.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, Gitolite has a feature that makes this restriction much less onerous.
    If the administrator chooses, a developer can push to a slave server, and *the
    push will transparently be forwarded to the master server for that repository*.
    In fact, the user may not even know that this is happening unless the network
    speed makes it obvious.
  prefs: []
  type: TYPE_NORMAL
- en: This makes things very convenient for administrators; there is no longer any
    need to confuse developers with detailed information about where to clone and
    where to push for each repository they need. In fact, you can set it up so that
    all developers in a particular site use their local Gitolite server for all their
    clones, without even having to even know that Gitolite mirroring is being used!
  prefs: []
  type: TYPE_NORMAL
- en: 'This feature is called **redirected push** , since that is exactly what happens
    behind the scenes. Here''s how to use it. Let us say you want to allow redirected
    pushes (to a `repository foo`) from `ganymede` (but not `callisto`), you add the
    following lines to the `conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That's it. Just list all the slaves that you trust and add them, space-separated,
    as a value to this option. If you trust all of them, just use the single word
    all instead.
  prefs: []
  type: TYPE_NORMAL
- en: Manual synchronization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you will find that a slave server has not been updated, perhaps due
    to some transient network problem. One way to get it back in sync, after the network
    problem has been resolved, of course, is to make some change to the repository
    and make a push. However, this feels clumsy and inelegant.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At present, Gitolite does not have any way of reporting on push failures, although
    it does log whatever messages Git itself sends back in the log files. This means
    admins have to actively monitor the log files for failure, or wait for users to
    report issues with slaves getting out of sync.
  prefs: []
  type: TYPE_NORMAL
- en: For the aesthetically sensitive, Gitolite has the mirror command. Just log on
    to the server that contains the master repository, and run `gitolite mirror push
    slavename reponame`. This will immediately bring the slave up to date.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like remote users to invoke such updates, simply enable the command
    for remote use by uncommenting the corresponding line in `$HOME/.gitolite.rc`.
  prefs: []
  type: TYPE_NORMAL
- en: Switching to a different master
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The biggest day-to-day benefit of mirroring is clearly that it can make read
    access more network-efficient for projects where the development team is widely
    distributed, albeit at the cost of an extra server at each slave location.
  prefs: []
  type: TYPE_NORMAL
- en: However, there's obviously one more advantage. If the main server for a repository
    should fail, one of the mirrors can easily be removed from the list of slaves
    and be made the master. As long as there are no network problems, the slave should
    be in the same state as the master, so no commits are lost.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mirroring is not the same as backup. It is outside the scope of this book to
    discuss the differences, but you should always have a reliable backup system in
    place for all your servers and possible workstations as well.
  prefs: []
  type: TYPE_NORMAL
- en: This simple strategy breaks down when the server that died contains the gitolite-admin
    repository itself. This is a bit of a catch-22 situation; you cannot push the
    change (in mirror options for the gitolite-admin repository) to the current master
    server since it is down. Yet, you cannot push to the slave server that you decided
    to promote to "master" status, because it does not yet know that it is the new
    master! (Needless to say, as a security feature, slave servers do not accept pushes
    from just anywhere – they will only do so from the server that they have been
    told is the master for the repository concerned.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The correct way to resolve this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On each slave, edit `$HOME/.gitolite/gitolite.conf`. Change the master and slave
    options for the gitolite-admin repository. If you used repo `@all` for these options,
    they will change for everyone. However, it's best to change it only for the gitolite-admin
    repository if at all possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After saving the change to this file, run `gitolite setup`. This will override
    the restriction and force the change on the local server. (This cannot be done
    remotely, again for security reasons.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, on the administrator's workstation, clone the gitolite-admin repository
    from the new master, change the mirroring options for the rest of the repositories
    (if required), then push the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This concludes our exploration of Gitolite's mirroring feature. While it is
    not something that everyone will need, for the larger sites this has some very
    visible benefits.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you have enjoyed this exploration of Gitolite and its features. As you
    use Gitolite more and more, you might also have the need to look at the official
    documentation on [http://gitolite.com](http://gitolite.com). We hope that this
    book has helped you understand the concepts and rationale behind Gitolite so that
    you can understand the official documentation better and get your job done faster.
  prefs: []
  type: TYPE_NORMAL
