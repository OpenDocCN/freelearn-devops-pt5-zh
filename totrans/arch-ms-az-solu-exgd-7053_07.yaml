- en: Using Storage Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered the designing connectivity for hybrid applications objective.
    We covered how to design hybrid applications. We also covered external connectivity
    for Azure VNets and how to design security strategies for networking solutions.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces the designing data implementations objective by starting
    with storage solutions. This chapter covers the different storage solutions that
    are available in Azure, such as Azure Blob Storage and Azure Files. It will also
    help you determine when to use one of these storage solutions. It will also cover
    designing for NoSQL storage and when to use the different NoSQL services inside
    Azure, such as Azure Table Storage and Cosmos DB. And finally, it covers searching
    your data with Azure Search.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of reading this chapter, you should know when to use which storage
    option for your solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Storage types and replication types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Blob Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Table Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Queue Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure File Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Disk Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StorSimple
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cosmos DB Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter uses the following tools for the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure PowerShell: [https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps?view=azurermps-5.1.1](https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps?view=azurermps-5.1.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2017: [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The source code for this chapter can be downloaded from the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%207](https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%207)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Storage and replication types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every application needs some sort of storage solution. Azure offers several
    different types of storage, from storing files and documents to storing datasets.
    The first step to take is creating a storage account. When you create a storage
    account, you have to determine whether you want your data to be accessible locally
    or globally. Another thing to take into consideration is which account type to
    choose.
  prefs: []
  type: TYPE_NORMAL
- en: Storage account types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Blob Storage offers three different account types which can be used for
    Blob, Table, File, and Queue storage. Azure offers the following storage types.
  prefs: []
  type: TYPE_NORMAL
- en: General-purpose v1 (GPv1)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The General-purpose Storage (V1) account is the oldest type of storage account.
    It offers storage for page blobs, block blobs, files, queues, and tables, but
    it is not the most cost-effective storage account type. It is the only storage
    account type that can be used for the classic deployment model. It doesn't support
    the latest features such as access tiers.
  prefs: []
  type: TYPE_NORMAL
- en: Blob storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Blob storage account offers all the features of StorageV2 accounts except
    that it supports only block blobs (and append blobs). Page blobs are not supported.
    It offers access tiers, which consists of hot, cool, and archive storage and which
    is covered later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: General-purpose v2 (GPv2)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: StorageV2 is the newest type of storage account and it combines the V1 storage
    with Blob storage. It offers all the latest features such as access tiers for
    Blob storage with a reduction in costs. Microsoft recommends using this account
    type over the V1 and Blob storage account type.
  prefs: []
  type: TYPE_NORMAL
- en: V1 storage accounts can be upgraded to V2.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on pricing and billing for these different account types,
    you can refer to the following pricing page: [https://azure.microsoft.com/en-us/pricing/details/storage/](https://azure.microsoft.com/en-us/pricing/details/storage/).
  prefs: []
  type: TYPE_NORMAL
- en: Storage replication types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data that is stored in Azure is always replicated to ensure durability and high
    availability. This way, it is protected from unplanned and planned events, such
    as network or power outages, natural disasters, and terrorism. It also ensures
    that during these types of events, your storage account still meets SLA.
  prefs: []
  type: TYPE_NORMAL
- en: Data can be replicated within the same data center, across zonal data centers
    within the same region and across different regions. These replication types are
    named **Locally Redundant Storage** (**LRS**), **Zone Redundant Storage** (**ZRS**),
    and **Geo-redundant Storage** (**GRS**), and they are covered in more detail in
    the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: You choose a replication type when you create a new storage account. Storage
    accounts can be created inside the Azure Portal as well as from PowerShell or
    CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Locally Redundant Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LRS is the cheapest option, which replicates the data three times within the
    same data center. When you make a write request to your storage account, it will
    synchronously be written during this request to all three replicas. The request
    is committed when the data is completely replicated. With LRS, the data will be
    replicated across multiple update domains and fault domains within one storage
    scale unit.
  prefs: []
  type: TYPE_NORMAL
- en: Zone Redundant Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ZRS is currently in preview and only available in US East 2 and US Central. It
    replicates three copies, across two or three data centers. The data is written
    synchronously to all three replicas in one or two regions. It also replicates
    the data three times inside the same data center where the data resided, just
    like LRS.
  prefs: []
  type: TYPE_NORMAL
- en: Geo-redundant Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GRS replicates the data three times within the same region such as ZRS, as well
    as three copies to other regions asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Blob Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Blob Storage offers unstructured data storage in the cloud. It can store
    all kinds of data, such as documents, VHDs, images, and audio files.
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of blobs that you can create. There are **page blobs**,
    which are used for the storage of disks. So, when you have VHD which need to be
    stored and attached to your VM, you will create a page blob. The maximum size
    of a page blob is 1 TB. The other one is **block blobs**, which are basically
    all the other types of data that you can store in Azure, such as files and documents.
    The maximum size of a block blob is 200 GB. However, there is a third blob type
    named append blob, but this one is used internally by Azure and can't be used
    in order to store actual files.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of ways that you can copy blobs to your blob storage account.
    You can use the Azure Portal (only one at a time) or Azure Storage Explorer, or
    you can copy your files programmatically using .NET, PowerShell, or CLI or by
    calling the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Access tiers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blob storage accounts use access tiers to determine how frequently the data
    is accessed. Based on this access tier, you will get billed. Azure offers three
    storage access tiers, hot, cool, and archive.
  prefs: []
  type: TYPE_NORMAL
- en: Hot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Hot access tier is most suitable for storing data accessed frequently and
    data that is in active use. For instance, you would store images and style sheets
    for a website inside the Hot access tier. The storage costs for this tier are
    higher than compared to the other access tiers, but you pay less for accessing
    the files.
  prefs: []
  type: TYPE_NORMAL
- en: The Hot access tier is optimized for storing data that is accessed frequently.
    It has higher storage costs than Cool and Archive storage, but you pay less for
    accessing the files. This access tier is most suitable for data that is in active
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Cool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Cool access tier is most suitable for storing data that is not accessed
    frequently (less then once in 30 days). Compared with the Hot access tier, the
    Cool tier has lower storage costs, but you pay more for accessing the files. This
    tier is most suitable for storing backups and older content that is not viewed
    often.
  prefs: []
  type: TYPE_NORMAL
- en: Archive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Archive storage tier is set on the blob level and not on the storage level.
    It has the lowest costs for storing data and the highest cost for accessing data
    compared with the Hot and Cool access tiers. This tier is for data that will remain
    in the archive for at least 180 days, and it will take a couple of hours of latency
    before it can be accessed. This tier is most suitable for long-term backups or
    compliance and archive data.
  prefs: []
  type: TYPE_NORMAL
- en: A blob in the Archive tier is offline and cannot be read (except for the metadata),
    copied, overwritten, or modified.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Table Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Table Storage is a NoSQL data store, which can be used for a big amount
    of semi-structured, non-relational data. It is more cost-effective than relational
    databases because it stores the data on cheaper servers that provide horizontal
    scale and high performance. NoSQL uses schemaless design, and data is stored based
    on key/attribute values. You can store flexible datasets in it, and it can store
    any number of entities in a table, up to the maximum capacity of the storage account
    (which is 500 TB).
  prefs: []
  type: TYPE_NORMAL
- en: Azure Table Storage is most suitable for datasets that don't require complex
    joins, stored procedures, and foreign keys. You can access the data using the
    OData protocol and LINQ Queries.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a storage account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you can upload any data or files to Azure Storage, a storage account
    needs to be created. This can be done using the Azure Portal, PowerShell, CLI,
    or Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this demo, we are going to create a storage account with PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If necessary, select the right subscription:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a resource group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the storage account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Uploading data to Azure Table Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this demo, we are going to use Visual Studio 2017 to upload data to a Azure
    Table inside the storage account, which was created in the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on File | New | Project, and in the New Project window, select Windows
    Classic Desktop | Console App. Name the project and click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/195598ac-4a3a-4183-b8c3-bed0f2afab4f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create a new project
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is to import the NuGet packages. There are two packages that need to be
    installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Windows Azure Storage**: This library provides access to the Azure Storage
    account and the data. It can be used for blobs, files, tables, and queues.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Windows Azure Configuration Manager**: This library provides a
    unified API to load configuration settings regardless of where the application
    is hosted.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following piece of XML to the `App.config`. The actual `ConnectionString`
    value can be obtained from the Access Keysettings in the Azure Portal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new class to the project and name it `Contact.cs`. Replace it with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the `Main()` method of the `Program.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the project. You can then open up the Azure Storage Explorer and navigate
    to the storage account and the container. You can see the data row that has been
    added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6a9995d-50b4-4c9e-b5d2-0ba069470926.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Added data row
  prefs: []
  type: TYPE_NORMAL
- en: For more information on working with Azure Table Storage from .NET, you can
    refer to the following tutorial: [https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-how-to-use-dotnet](https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-how-to-use-dotnet).
  prefs: []
  type: TYPE_NORMAL
- en: Azure Queue Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Queue Storage offers a message queue that can be used by applications.
    Message queues offer an asynchronous communication mechanism where a sender adds
    an message to the queue, which can be received by the receiver at a later time.
    Applications can benefit of this because they can decouple components, which can
    scale independently from each other.
  prefs: []
  type: TYPE_NORMAL
- en: You can send and receive messages from Queue Storage using the Azure Storage
    Client Libraries and the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Azure queue storage is covered in more detail in [Chapter 13](70842148-3674-4673-8d9e-90e26ff4b45e.xhtml),
    *Implementing Messaging Solutions*.
  prefs: []
  type: TYPE_NORMAL
- en: Azure File Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Azure File Storage, you can create file shares in the cloud. You can access
    your files using the Server Message Block (SMB) protocol, which is an industry
    standard and can be used on Linux, Windows, and macOS devices. Azure Files can
    also be mounted as if it is a local drive on these same devices as well, and they
    can be cached for fast access on Windows Server using Azure File Sync (preview).
  prefs: []
  type: TYPE_NORMAL
- en: File shares can be used across multiple machines, which makes them suitable
    for storing files or data that are accessed from multiple machines, such as tools
    for development machines, or configuration files or log data. Azure File share
    is part of the Azure Storage Client Libraries and offers an Azure Storage REST
    API which can be leveraged by developers in their solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Disk Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The disks that are used for virtual machines are stored in Azure Blob Storage
    as page blobs. Azure stores two disks for each virtual machine, the actual operating
    system (VHD) of the VM and a temporary disk that is used for short-term storage.
    This data is erased when the VM is turned of or rebooted.
  prefs: []
  type: TYPE_NORMAL
- en: There are two different performance tiers that Azure offers, Standard Disk Storage
    and Premium Disk Storage.
  prefs: []
  type: TYPE_NORMAL
- en: Standard Disk Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Standard Disk Storage offers HDD drives to store the data on and is the most
    cost-effective storage tier from which you can choose. It can only use LRS or
    GRS for supporting high availability for your data and applications.
  prefs: []
  type: TYPE_NORMAL
- en: Standard Disk Storage offers HDDs and is more cost-effective. Standard Disk
    Storage can only use LRS or GRS.
  prefs: []
  type: TYPE_NORMAL
- en: Premium Disk Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Premium Disk Storage, your data is stored on SSDs. Not all Azure Virtual
    Machine series can use this type of storage. It can only be used with DS, DSv2,
    GS, LS, or FS series Azure Virtual Machines. It offers high-performance and low-latency
    disk support.
  prefs: []
  type: TYPE_NORMAL
- en: Unmanaged versus Managed Disks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managed Disks were covered in [Chapter 1](401f72d0-a2a1-4c62-880e-43739e3daa5d.xhtml),
    *Working with Azure Virtual Machines*, and they handle the storage account creation
    for you. With Unmanaged Disks, which are the traditional disks used for VMs, you
    needed to create a storage account manually and then select that storage account
    when you created the VM. With Managed Disks, this burden is handled for you by
    Azure. You select the disk type and the performance tier (Standard or Premium),
    and the managed disk is created. It also handles scaling automatically for you.
  prefs: []
  type: TYPE_NORMAL
- en: Managed Disks are recommended by Microsoft over Unmanaged Disks.
  prefs: []
  type: TYPE_NORMAL
- en: StorSimple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**StorSimple** is an integrated storage solution that spans across on-premises
    environments and cloud storage. It answers a lot of storage problems, such as
    data growth, capacity management, backup, archiving, and disaster recovery, by
    offering a hybrid solution, which consists of a cloud integrated storage system
    and Azure Cloud Storage.'
  prefs: []
  type: TYPE_NORMAL
- en: With StorSimple, you can store your active data on the on-premises storage system,
    which offers lower latency and high throughput. Database files are a part of active
    data for instance. Data that is less active such as documents, SharePoint files,
    archive data, and VM storage are more suitable for cloud storage. Using StorSimple,
    you can put that data in Azure Cloud Storage.
  prefs: []
  type: TYPE_NORMAL
- en: StorSimple supports iSCSI and SMB to connect to your data, and compared to more
    affordable Cloud Storage, it eliminates redundant data and compresses it to reduce
    costs. You can use Azure Premium storage in conjunction with StorSimple for higher
    performance and reduced latency.
  prefs: []
  type: TYPE_NORMAL
- en: To accomplish this, StorSimple offers the following storage area network (SAN)
    solutions, StorSimple Virtual Array and StorSimple 8000 Series.
  prefs: []
  type: TYPE_NORMAL
- en: StorSimple Virtual Array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The StorSimple Virtual Array runs on your existing hypervisor infrastructure
    on your on-premises environment. It manages the storage across the on-premises
    environment and Azure Cloud Storage. It also provides cloud backup, fast restore,
    disaster recovery features, and item-level recovery. It supports Hyper-V 2008
    R2 and higher and VMWare 5.5 and higher.
  prefs: []
  type: TYPE_NORMAL
- en: 'The StorSimple Virtual Array is the most cost-effective StorSimple solution
    because it offers a download that can be installed on a virtual machine on Hyper-V
    or VMWare inside your data center or office. It can then be configured as an iSCSI
    server (SAN) or a file server (NAS). It can be managed from the StorSimple Manager
    service inside the Azure Portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8ac6547-66c2-499b-b504-2716e4718848.png)'
  prefs: []
  type: TYPE_IMG
- en: StorSimple Virtual Array
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the StorSimple Virtual Array, you can refer to [https://docs.microsoft.com/en-us/azure/storsimple/storsimple-ova-overview](https://docs.microsoft.com/en-us/azure/storsimple/storsimple-ova-overview).
  prefs: []
  type: TYPE_NORMAL
- en: StorSimple 8000 Series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the StorSimple 8000 Series, Microsoft offers a physical device that can
    be leased and installed inside your on-premises environment. It uses SSD drives
    for the most active data, HDD drives for data that is used less frequently, and
    it stores archival data inside Azure Cloud Storage. It also offers redundant controllers
    to manage the storage tiering and automatic failover.
  prefs: []
  type: TYPE_NORMAL
- en: 'The StorSimple storage array is installed inside the on-premises environment
    and offers iSCSI access. It can connect with other SAN storage devices inside
    the network (up to six network ports). It uses the Virtual Appliance Manager to
    replicate data to Azure Cloud Storage. The Virtual Appliance Manager is installed
    inside an Azure VM. It can provide an iSCSI interface to virtual machines in Azure
    as well. The StorSimple Manager helps you manage the data from the Azure Portal.
    It can also manage your snapshots, which are stored on-premises. The Snapshot
    Manager is a **Microsoft Management Console** (**MMC**) snap-in which runs on
    a Windows-Server based host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/afc63ef7-71bf-469b-abe1-036adbe88771.png)'
  prefs: []
  type: TYPE_IMG
- en: StorSimple 8000 Series
  prefs: []
  type: TYPE_NORMAL
- en: The StorSimple 8000 Series offers Windows PowerShell for StorSimple and a StorSimple
    adapter for SharePoint.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the StorSimple 8000 Series, you can refer to [https://docs.microsoft.com/en-us/azure/storsimple/storsimple-overview](https://docs.microsoft.com/en-us/azure/storsimple/storsimple-overview).
  prefs: []
  type: TYPE_NORMAL
- en: Cosmos DB Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cosmos DB (former DocumentDB) storage is the premium offering for Azure Table
    Storage. It's a multimodel and globally distributed database service which is
    designed to horizontally scale and replicate your data to any number of Azure
    regions. By replicating and scaling the data, Cosmos DB can guarantee low latency,
    high availability, and high performance anywhere in the world. You can replicate
    or scale data easily inside the Azure Portal by selecting the available regions
    on the map.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2b60a7e-dc00-4d04-a677-0decfd3767e1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scaling and replicating data inside the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: This high availability and low latency makes Cosmos DB most suitable for mobile
    applications, games, and applications that need to be globally distributed. The
    Azure Portal also uses Cosmos DB for data storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cosmos DB is completely schema-less, and you can use a number of existing APIs
    with available SDKs to communicate with it. So, if you are using a specific API
    for your data and you want to move your data to Cosmos DB, all you need to do
    is change the connection string inside your application and the data is stored
    in Cosmos DB automatically. Cosmos DB supports the following APIs for storing
    and interacting with your data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL API**: With the SQL API, you can use SQL queries as a JSON query language against
    the dataset inside Cosmos DB. Because Cosmos DB is schema-less, it provides autoindexing
    of the JSON documents. Data is stored on SSD drives for low latency, and it is
    lock-free, so you can create real-time queries for your data. Cosmos DB also supports
    writing stored procedures, triggers, and user-defined functions (UDFs) in JavaScript
    and it supports ACID transactions inside a collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MongoDB API**: MongoDB is an open source document database that provides
    high performance, high availability, and automatic scaling by default. Using it
    inside Cosmos DB provides automatic sharding, indexing, replication, and encryption
    of your data on top of this. MongoDB also provides an aggregation pipeline which
    can be used to filter and transform the data in multiple stages. It also supports
    creating a full-text index, and you can integrate it easily with Azure Search
    and other Azure services as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gremlin (Graph) API**: The Gremlin API is part of the Apache TinkerPop project,
    which is an open source Graph computing framework. A Graph is a way of storing
    objects (nodes) based on relationships. Each object can have multiple relations
    with other objects. You can interact with the data using JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Table API**: The Azure Table API can be used for applications that are written
    for using Azure Table Storage, but need the premium features, such as global distribution,
    automatic indexing, low latency, and high throughput.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cassandra API**: The Cassandra API can be used for applications that are
    written for Apache Cassandra. Apache Cassandra is an open source distributed NoSQL
    database that offers scalability and high availability. Cosmos DB offers no operations
    management, SLA, and automatic indexing on top of this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the future, new APIs will be added to Cosmos DB as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53f98866-e9c6-4186-be5e-3d1c42e63855.png)'
  prefs: []
  type: TYPE_IMG
- en: Multi-model APIs available for Cosmos DB
  prefs: []
  type: TYPE_NORMAL
- en: If you want to get started with developing applications using one of these multimodel
    APIs, you can refer to [https://docs.microsoft.com/en-us/azure/cosmos-db/](https://docs.microsoft.com/en-us/azure/cosmos-db/).
    There are a lot of examples for multiple programming languages available there.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Search is an Azure service that provides a rich search experience over
    content stored in Azure SQL Database, Azure Cosmos DB, and Azure Blob Storage.
    For Azure Blob Storage, it supports indexing for multiple file formats, such as
    CSV, JSON, plain text files, RTF, EML, ZIP, XML, HTML, various Microsoft Office
    formats, and PDF.
  prefs: []
  type: TYPE_NORMAL
- en: It offers full text search and text analysis, linguistic analysis with analyzers
    in 56 languages, geo-search, user experience features, such as search suggestions,
    paging, sorting, and hit highlighting, and monitoring and reporting features.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Search uses partitions for storing search indexes and for providing I/O
    for read/write operations. Azure Search offers different service tiers which can
    be combined inside a tenant. The different tiers offer different amounts of storage
    capacity and scalability. For the more expensive service tiers, multiple instances
    of the search service can be created, which are named replicas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Search offers the following service tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Free**: This offers a shared service with other tenants in Azure. It offers
    50 MB of storage, a maximum of 3 indexes per service up to 10,000 documents each,
    and it cannot scale out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basic**: This offers a dedicated service with 2 GB of storage and a maximum
    of 5 indexes per service. You can scale up to 3 search units per service (1 partition
    and 3 replicas).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard S1**: This offers a dedicated service with 25 GB of storage and a
    maximum of 50 indexes per service. You can scale up to 36 search units per service
    (12 partitions and 12 replicas).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard S2**: This offers the Standard S1 features but with 100 GB of storage
    and a maximum of 200 indexes per service on top of it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard S3**: This offers 200 GB of storage and all the Standard S2 features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard HD**: This is an option that can be enabled for Standard S3 pricing
    tiers. On top of all the features that Standard S3 provides, you can have a maximum
    of 1,000 indexes per service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended that you always provision a free search service tier per subscription,
    so it can be used for testing or for lightweight searches. You can then create
    other Search Services next to it for production workloads.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the available SKUs for Azure Search, you can refer
    to [https://docs.microsoft.com/en-us/azure/search/search-sku-tier](https://docs.microsoft.com/en-us/azure/search/search-sku-tier).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the designing data implementations objective. We
    covered the different storage solutions that are available in Azure and when to
    use them. We also covered designing for NoSQL Storage and when to use the different
    Azure services such as Azure Table Storage and Cosmos DB. Finally, we briefly
    covered Azure Search.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover scalable data implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Answer the following questions to test your knowledge of the information in
    this chapter. You can find the answers in the *Assessments* section at the end
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Is Cosmos DB more suitable for gaming applications than Azure Table Storage?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you use Azure Search with Azure Data Factory to search for data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You want to create a Graph database in Cosmos DB. Is the MongoDB API the appropriate
    API for this to leverage in your custom applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check the following links for more information about the topics that
    are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Storage Account Options**: [https://docs.microsoft.com/en-us/azure/storage/common/storage-account-options](https://docs.microsoft.com/en-us/azure/storage/common/storage-account-options)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Storage replication**: [https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy](https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Table Storage overview**: [https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-overview](https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Introduction to Azure Files**: [https://docs.microsoft.com/en-us/azure/storage/files/storage-files-introduction](https://docs.microsoft.com/en-us/azure/storage/files/storage-files-introduction)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**About disks storage for Azure Windows VMs**: [https://docs.microsoft.com/en-us/azure/virtual-machines/windows/about-disks-and-vhds](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/about-disks-and-vhds)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**StorSimple Documentation**: [https://docs.microsoft.com/en-us/azure/storsimple/](https://docs.microsoft.com/en-us/azure/storsimple/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Welcome to Azure Cosmos DB**: [https://docs.microsoft.com/en-us/azure/cosmos-db/introduction](https://docs.microsoft.com/en-us/azure/cosmos-db/introduction)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Search Documentation**: [https://docs.microsoft.com/en-us/azure/search/](https://docs.microsoft.com/en-us/azure/search/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
