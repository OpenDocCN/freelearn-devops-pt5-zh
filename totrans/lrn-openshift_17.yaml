- en: CI/CD Pipelines in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to build and deploy a WordPress application
    from a custom template. You also learned how to create and deploy OpenShift templates,
    and how to deploy applications from OpenShift templates.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will introduce the reader to **Continuous Integration/Continuous
    Delivery** (**CI/CD**), Jenkins, OpenShift pipelines, and Jenkins integration
    with OpenShift. We will discuss CI/CD, pipelines, and Jenkins as CI/CD, following
    by how Jenkins works in OpenShift. We will also show you how to create a sample
    CI/CD pipeline in OpenShift, how to edit pipelines, and how to manage pipeline
    execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'After reading this chapter, you will understand the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD and CI/CD pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins as CI/CD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins in OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will use the following technologies and software:'
  prefs: []
  type: TYPE_NORMAL
- en: The command-line interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minishift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Vagrant installation, and all of the code that we will use in this chapter,
    are located on GitHub, at [https://github.com/PacktPublishing/Learn-OpenShift](https://github.com/PacktPublishing/Learn-OpenShift).
  prefs: []
  type: TYPE_NORMAL
- en: You can use Firefox or any other browser to navigate through Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: As a prerequisite, you will need a stable internet connection from your laptop.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use Minishift as our lab environment in this chapter. Before you start,
    please delete your existing Minishift VM (if there is one), because we will need
    to create a new VM, with non-standard parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that the `Memory` shows 4 GB at least; otherwise, you might not have
    enough memory for your lab. You can also adjust the amount of memory by stopping
    the Minishift VM and changing it via the VirtualBox console. But, the safest method
    is to delete the Minishift VM and create a new one.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD and CI/CD pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may have already heard the term **CI/CD**. It comprises the two main acronyms
    people use when talking about modern application deployment. While CI stands for
    **Continuous Integration**, CD has two meanings; one of them is **Continuous Deployment,**
    and another one is **C****ontinuous Delivery**. All three terms are easy to understand,
    and are described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous Integration**: Emphasizes creating and building automation tests
    against application builds, as well as merging updates into a single branch as
    often as possible. It helps to catch bugs early on and to avoid the integration
    difficulties that developers usually encounter when developing new code and merging
    changes into different branches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous Delivery**: Helps to extend Continuous Integration processes,
    to push new code from the development to the production stage in a reproducible
    fashion. If, with Continuous Integration, you automate builds and tests, then
    Continuous Delivery automates application release processes, usually using approval
    procedures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous Deployment**: Extends Continuous Delivery even further, by providing
    a seamless and uninterrupted application delivery process, without any human intervention.
    This application deployment method requires quite a lot of effort to make sure
    that, when you run the code, it won''t break anything and will work as expected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The CI and CD processes are put into a series of steps and procedures to form
    a **pipeline**, often referred to as the CI/CD pipeline. Continuous Integration
    is shown with both Continuous Delivery and Continuous Deployment in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.gif)'
  prefs: []
  type: TYPE_IMG
- en: CI/CD pipeline example
  prefs: []
  type: TYPE_NORMAL
- en: The pipeline stages are not strict, but following best practices will help you
    to make your CI/CD pipeline stable and repeatable.
  prefs: []
  type: TYPE_NORMAL
- en: There are many CI/CD tools that can help you to automate the application delivery
    process, but one of the most popular ones in the industry is called Jenkins. It
    just so happens that OpenShift has built in integration with Jenkins, which we
    will discuss in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins as CI/CD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkinsis an open source automation tool that can be used to accelerate the
    application development process using CI/CD pipelines. Jenkins controls and manages
    application development life cycle processes, including the build, test, publish,
    stage, deploy, and smoke test processes, among others.
  prefs: []
  type: TYPE_NORMAL
- en: 'The standard Jenkins architecture is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Jenkins architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main components in the Jenkins architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jenkins Master**: Your CI/CD controller, handling various tasks, such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job scheduling
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributing the workload among Jenkins Slaves
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins Slave monitoring
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging and representing job results
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins Slaves**: A set of Java-based programs that run on the remote host.
    Jenkins Slaves mainly execute instructions from Jenkins Masters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins Masters and Jenkins Slaves are functionalities, which basically means
    that both can coexist on the same host. In small or lab environments, there are
    usually no issues with running both a Jenkins Master and Jenkins Slaves on the
    same host, but if you have hundreds (or thousands) of jobs running in your environment,
    it makes sense to run the Jenkins Master and Jenkins Slaves on different nodes,
    and to have several Jenkins Slaves, to distribute the load among them.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenShift leverages the Jenkins CI/CD model, and extends it by using a combination
    of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenShift Domain Specific Language (DSL)**: DSL is provided by the OpenShift
    Jenkins client plugin that runs on the Jenkins Master pod and interacts with the
    OpenShift API server. The OpenShift DSL provides a method for controlling your
    application life cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins Pipeline Build Strategy**: Similar to other OpenShift build strategies,
    it defines the build''s workflow. Jenkins Pipeline Build Strategy allows a developer
    to create a Jenkins pipeline that is monitored and controlled by OpenShift.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkinsfile**: Defines CI/CD pipelines through a series of steps during application
    deployment in OpenShift, using the Apache Groovy programming language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Jenkins pipelines in OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the Minishift cluster is up, open your favorite web browser and open OpenShift,
    using the URL given from the output of the `minishift start` command. It is accessible
    via `https://192.168.99.110:8443`, in our case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: OpenShift login page
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the developer user, with any password, to log in on the welcome page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: OpenShift welcome page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on My Project to access the OpenShift Project Overview page. From there,
    click on the Builds | Pipelines sub-menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, you should be able to click on Create Sample Pipeline. Then, scroll
    all the way down and click on the Create button. It should tell you that the `Pipeline
    Build Example` has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'OpenShift creates a set of pods including Jenkins, mongodb and nodejs, with
    further integration with OpenShift. And all of that with just one click. This
    is just a demo, but isn''t that cool? Now go back to the Overview menu to check
    the overall progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: OpenShift project menu
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to see a few applications, with pods. The first one is a
    Jenkins application, and the second one is MongoDB, as a part of our test application.
    There should be No deployments for `nodejs-mongodb-example`, because it will be
    controlled by Jenkins pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your internet connection, it will take time to pull all of the
    images and start all of the pods, especially for Jenkins, as it is roughly 2.5
    GB. You can go to the Monitoring tab and click on View details to check the current
    status of the overall process. If the last message from Jenkins is pulling image
    openshift/jenkins-2-centos7, then just wait patiently, or go and make some coffee.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a Jenkins pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once both the Jenkins and MongoDB pods are running, go back to the Builds |
    Pipelines sub-menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the Start Pipeline button. This will trigger a CI/CD pipeline, to start
    building. Depending on your internet connection, this step will take some time
    to complete; by the end of it, you should be able to see that two stages were
    completed successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on View Log should open a new tab with the Jenkins console output
    from the Jenkins login page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Jenkins login page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Log in with OpenShift and use the same credentials that you used to
    authenticate in OpenShift (use the developer user, with any password):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Jenkins user authorization
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to authorize the developer user to access Jenkins, by clicking
    on Allow selected permissions. This will get you to the Jenkins Console Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Jenkins Console Output
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down to see the complete log, close the lab, and go back to the OpenShift
    tab.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in how Jenkins works in detail and want to learn more,
    just follow the links in the *Further reading* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We mentioned previously that there is a difference between the Continuous Delivery
    and Continuous Deployment models; one of them includes human intervention, and
    the other one does not.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we are going to do next is modify our test pipeline and add an approval
    step. Go back to the pipeline sub-menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on Edit Pipeline should redirect us to editing our first pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Editing Jenkinsfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You should see the Jenkins pipeline configuration file, Jenkinsfile, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Editing pipelines
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins uses the Apache Groovy Programming Language. It is pretty easy to learn,
    and we are not going to delve too deeply into the details; rather, we will give
    you some basic skills. You can find more information regarding Groovy in the *Further
    reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We simply need to add a new stage with an arbitrary name; let''s call it the
    `approval` stage, in between the `build` and `deploy` stages. This new `approval`
    stage will put the deployment stage on hold, until you manually approve it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Click on Save and start the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Managing pipeline execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding one more stage called *approval* triggers the second build to start,
    and eventually you should be able to see the new approval stage, with Input Required:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on Input Required will open a new tab and redirect you to the Jenkins
    approval stage, asking: Approve moving to deploy stage? Shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The result will be different depending on what you answer. In our case, we
    are going to press the Proceed button. This will redirect us to the Jenkins Console
    Output, but we can just close it and go back to the OpenShift pipeline tab. From
    the following screenshot, we can see that the CI/CD pipeline has completed the
    deploy stage and now we have three stages instead of two as in `Build #1`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As a result, you should see a `nodejs-mongodb-example, #2` pod running in the
    Overview menu. The `#2` means that it is build number two:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Jenkins is a lot more complicated than that, but this should have provided you
    with a good overview of CI/CD in OpenShift, and how easy it is to get started
    with Jenkins in OpenShift
  prefs: []
  type: TYPE_NORMAL
- en: You are save know to stop and delete your minishift VM running `minishift delete`
    command, unless you are going to do more practice.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced you to CI/CD, Jenkins, OpenShift pipelines, and
    Jenkins integration with OpenShift. We showed you how to create a sample CI/CD
    pipeline in OpenShift, how to edit pipelines, and how to manage pipeline execution.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will briefly touch on HA in general, and will then focus
    on OpenShift HA. We will discuss how OpenShift provides redundancy in the event
    of a failure, and how you can prevent this from happening by properly designing
    your OpenShift cluster. At the end of the chapter, we will discuss how to back
    up and restore OpenShift cluster data, in case something goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What CI/CD method allows you to automate the application delivery process without
    any human intervention? choose one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous delivery
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous deployment
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous automation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which three CI/CD pipeline components does OpenShift use? choose three:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenShift Domain Specific Language
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkins Pipeline Build Strategy
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkins Java Connector
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkinsfile
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkins Build Strategy
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You have to manually configure OpenShift authentication for OpenShift pipelines
    with Jenkins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What command in Jenkinsfile allows you to implement a manual approval procedure?
    choose one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hold
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Approve
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which menu in the OpenShift GUI brings you to the OpenShift pipelines page?
    choose one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build | Pipelines
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkins | Pipelines
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Build | Jenkins
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The CI/CD pipeline stages in Jenkinsfile are predefined, and cannot be changed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We briefly covered a lot of different topics regarding CI/CD in this chapter.
    The following links can help you delve into a topic you might be interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CI/CD overview**: [https://www.atlassian.com/continuous-delivery/ci-vs-ci-vs-cd](https://www.atlassian.com/continuous-delivery/ci-vs-ci-vs-cd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Groovy documentation**: [http://groovy-lang.org/syntax.html](http://groovy-lang.org/syntax.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenShift pipelines**: [https://docs.openshift.com/container-platform/latest/dev_guide/openshift_pipeline.html](https://docs.openshift.com/container-platform/latest/dev_guide/openshift_pipeline.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenShift Jenkins DSL plugin documentation**: [https://github.com/openshift/jenkins-client-plugin ](https://github.com/openshift/jenkins-client-plugin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkinsfile documentation**: [https://jenkins.io/doc/book/pipeline/jenkinsfile/](https://jenkins.io/doc/book/pipeline/jenkinsfile/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
