- en: CI/CD Pipelines in OpenShift
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenShift中的CI/CD流水线
- en: In the previous chapter, you learned how to build and deploy a WordPress application
    from a custom template. You also learned how to create and deploy OpenShift templates,
    and how to deploy applications from OpenShift templates.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何从自定义模板构建和部署WordPress应用程序。你还学习了如何创建和部署OpenShift模板，以及如何从OpenShift模板部署应用程序。
- en: This chapter will introduce the reader to **Continuous Integration/Continuous
    Delivery** (**CI/CD**), Jenkins, OpenShift pipelines, and Jenkins integration
    with OpenShift. We will discuss CI/CD, pipelines, and Jenkins as CI/CD, following
    by how Jenkins works in OpenShift. We will also show you how to create a sample
    CI/CD pipeline in OpenShift, how to edit pipelines, and how to manage pipeline
    execution.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向读者介绍**持续集成/持续交付**（**CI/CD**）、Jenkins、OpenShift流水线以及Jenkins与OpenShift的集成。我们将讨论CI/CD、流水线以及作为CI/CD的Jenkins，随后介绍Jenkins在OpenShift中的工作方式。我们还将向你展示如何在OpenShift中创建一个示例CI/CD流水线，如何编辑流水线，以及如何管理流水线执行。
- en: 'After reading this chapter, you will understand the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你将了解以下内容：
- en: CI/CD and CI/CD pipelines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD和CI/CD流水线
- en: Jenkins as CI/CD
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins作为CI/CD
- en: Jenkins in OpenShift
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift中的Jenkins
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will use the following technologies and software:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用以下技术和软件：
- en: The command-line interface
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行界面
- en: Minishift
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Minishift
- en: GitHub
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: Web browsers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web浏览器
- en: The Vagrant installation, and all of the code that we will use in this chapter,
    are located on GitHub, at [https://github.com/PacktPublishing/Learn-OpenShift](https://github.com/PacktPublishing/Learn-OpenShift).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant安装以及我们将在本章中使用的所有代码都可以在GitHub上找到，地址为[https://github.com/PacktPublishing/Learn-OpenShift](https://github.com/PacktPublishing/Learn-OpenShift)。
- en: You can use Firefox or any other browser to navigate through Docker Hub.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Firefox或其他任何浏览器浏览Docker Hub。
- en: As a prerequisite, you will need a stable internet connection from your laptop.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作为前提，你需要确保你的笔记本电脑有稳定的互联网连接。
- en: 'We will use Minishift as our lab environment in this chapter. Before you start,
    please delete your existing Minishift VM (if there is one), because we will need
    to create a new VM, with non-standard parameters:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Minishift作为实验环境。在开始之前，请删除现有的Minishift虚拟机（如果有的话），因为我们需要创建一个新的虚拟机，具有非标准参数：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Make sure that the `Memory` shows 4 GB at least; otherwise, you might not have
    enough memory for your lab. You can also adjust the amount of memory by stopping
    the Minishift VM and changing it via the VirtualBox console. But, the safest method
    is to delete the Minishift VM and create a new one.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`Memory`至少显示为4 GB，否则可能没有足够的内存来进行实验。你也可以通过停止Minishift虚拟机并通过VirtualBox控制台调整内存大小。但最安全的方法是删除现有的Minishift虚拟机并创建一个新的。
- en: CI/CD and CI/CD pipelines
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD和CI/CD流水线
- en: 'You may have already heard the term **CI/CD**. It comprises the two main acronyms
    people use when talking about modern application deployment. While CI stands for
    **Continuous Integration**, CD has two meanings; one of them is **Continuous Deployment,**
    and another one is **C****ontinuous Delivery**. All three terms are easy to understand,
    and are described as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经听说过**CI/CD**这个术语。它包含了人们在谈论现代应用程序部署时使用的两个主要缩写。CI代表**持续集成**，而CD有两种含义：一种是**持续部署**，另一种是**持续交付**。这三个术语都很容易理解，具体说明如下：
- en: '**Continuous Integration**: Emphasizes creating and building automation tests
    against application builds, as well as merging updates into a single branch as
    often as possible. It helps to catch bugs early on and to avoid the integration
    difficulties that developers usually encounter when developing new code and merging
    changes into different branches.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**：强调为应用程序构建创建和构建自动化测试，并尽可能频繁地将更新合并到单一分支中。它有助于尽早捕捉错误，避免开发人员在开发新代码并将更改合并到不同分支时遇到的集成困难。'
- en: '**Continuous Delivery**: Helps to extend Continuous Integration processes,
    to push new code from the development to the production stage in a reproducible
    fashion. If, with Continuous Integration, you automate builds and tests, then
    Continuous Delivery automates application release processes, usually using approval
    procedures.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付**：帮助扩展持续集成流程，将新代码从开发阶段推送到生产阶段，并以可复制的方式进行。这意味着，如果在持续集成中自动化了构建和测试，那么持续交付会自动化应用程序发布过程，通常会使用审批程序。'
- en: '**Continuous Deployment**: Extends Continuous Delivery even further, by providing
    a seamless and uninterrupted application delivery process, without any human intervention.
    This application deployment method requires quite a lot of effort to make sure
    that, when you run the code, it won''t break anything and will work as expected.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续部署**：进一步扩展持续交付，通过提供一个无缝且不中断的应用程序交付过程，且无需人工干预。这种应用部署方式需要大量努力来确保运行代码时不会破坏任何东西，并且能按预期工作。'
- en: 'The CI and CD processes are put into a series of steps and procedures to form
    a **pipeline**, often referred to as the CI/CD pipeline. Continuous Integration
    is shown with both Continuous Delivery and Continuous Deployment in the following
    diagram:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CI和CD过程被分成一系列步骤和程序，形成一个**流水线**，通常称为CI/CD流水线。下图展示了持续集成与持续交付和持续部署的关系：
- en: '![](img/00072.gif)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00072.gif)'
- en: CI/CD pipeline example
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD流水线示例
- en: The pipeline stages are not strict, but following best practices will help you
    to make your CI/CD pipeline stable and repeatable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线的各个阶段并不严格，但遵循最佳实践有助于使您的CI/CD流水线更加稳定和可重复。
- en: There are many CI/CD tools that can help you to automate the application delivery
    process, but one of the most popular ones in the industry is called Jenkins. It
    just so happens that OpenShift has built in integration with Jenkins, which we
    will discuss in the following sections.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多CI/CD工具可以帮助您自动化应用交付过程，但其中一个在业界最受欢迎的工具叫做Jenkins。恰好OpenShift内建了与Jenkins的集成，我们将在接下来的章节中讨论这一点。
- en: Jenkins as CI/CD
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins作为CI/CD
- en: Jenkinsis an open source automation tool that can be used to accelerate the
    application development process using CI/CD pipelines. Jenkins controls and manages
    application development life cycle processes, including the build, test, publish,
    stage, deploy, and smoke test processes, among others.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是一个开源自动化工具，可用于通过CI/CD流水线加速应用程序开发过程。Jenkins控制和管理应用程序开发生命周期过程，包括构建、测试、发布、阶段部署和冒烟测试等过程。
- en: 'The standard Jenkins architecture is shown in the following diagram:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Jenkins架构如下图所示：
- en: '![](img/00073.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00073.jpeg)'
- en: Jenkins architecture
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins架构
- en: 'There are two main components in the Jenkins architecture:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins架构中有两个主要组件：
- en: '**Jenkins Master**: Your CI/CD controller, handling various tasks, such as:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins主节点**：您的CI/CD控制器，负责处理各种任务，例如：'
- en: Job scheduling
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务调度
- en: Distributing the workload among Jenkins Slaves
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Jenkins从属节点之间分配工作负载
- en: Jenkins Slave monitoring
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins从属节点监控
- en: Logging and representing job results
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录和展示任务结果
- en: '**Jenkins Slaves**: A set of Java-based programs that run on the remote host.
    Jenkins Slaves mainly execute instructions from Jenkins Masters.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins从属节点**：一组基于Java的程序，运行在远程主机上。Jenkins从属节点主要执行来自Jenkins主节点的指令。'
- en: Jenkins Masters and Jenkins Slaves are functionalities, which basically means
    that both can coexist on the same host. In small or lab environments, there are
    usually no issues with running both a Jenkins Master and Jenkins Slaves on the
    same host, but if you have hundreds (or thousands) of jobs running in your environment,
    it makes sense to run the Jenkins Master and Jenkins Slaves on different nodes,
    and to have several Jenkins Slaves, to distribute the load among them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins主节点和Jenkins从属节点是功能上的区分，这意味着它们可以共存在同一主机上。在小型或实验室环境中，通常没有问题将Jenkins主节点和Jenkins从属节点都运行在同一主机上，但如果您的环境中有数百（或数千）个任务运行，那么将Jenkins主节点和Jenkins从属节点分布在不同节点上，并拥有多个Jenkins从属节点来分配负载是更合理的。
- en: Jenkins in OpenShift
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenShift中的Jenkins
- en: 'OpenShift leverages the Jenkins CI/CD model, and extends it by using a combination
    of the following components:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift利用Jenkins CI/CD模型，并通过以下组件的组合对其进行扩展：
- en: '**OpenShift Domain Specific Language (DSL)**: DSL is provided by the OpenShift
    Jenkins client plugin that runs on the Jenkins Master pod and interacts with the
    OpenShift API server. The OpenShift DSL provides a method for controlling your
    application life cycle.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenShift领域特定语言（DSL）**：DSL由运行在Jenkins主节点Pod上的OpenShift Jenkins客户端插件提供，并与OpenShift
    API服务器交互。OpenShift DSL提供了一种控制应用程序生命周期的方法。'
- en: '**Jenkins Pipeline Build Strategy**: Similar to other OpenShift build strategies,
    it defines the build''s workflow. Jenkins Pipeline Build Strategy allows a developer
    to create a Jenkins pipeline that is monitored and controlled by OpenShift.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins流水线构建策略**：类似于其他OpenShift构建策略，它定义了构建的工作流。Jenkins流水线构建策略允许开发人员创建一个由OpenShift监控和控制的Jenkins流水线。'
- en: '**Jenkinsfile**: Defines CI/CD pipelines through a series of steps during application
    deployment in OpenShift, using the Apache Groovy programming language.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkinsfile**：通过一系列步骤定义 CI/CD 流水线，应用于在 OpenShift 中部署应用程序，使用 Apache Groovy
    编程语言。'
- en: Creating Jenkins pipelines in OpenShift
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 OpenShift 中创建 Jenkins 流水线
- en: 'Once the Minishift cluster is up, open your favorite web browser and open OpenShift,
    using the URL given from the output of the `minishift start` command. It is accessible
    via `https://192.168.99.110:8443`, in our case:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Minishift 集群启动，打开你喜欢的网页浏览器，使用 `minishift start` 命令输出的 URL 访问 OpenShift。我们这边可以通过
    `https://192.168.99.110:8443` 访问：
- en: '![](img/00074.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00074.jpeg)'
- en: OpenShift login page
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 登录页面
- en: 'Use the developer user, with any password, to log in on the welcome page:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用开发者用户，输入任意密码，登录欢迎页面：
- en: '![](img/00075.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00075.jpeg)'
- en: OpenShift welcome page
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 欢迎页面
- en: 'Click on My Project to access the OpenShift Project Overview page. From there,
    click on the Builds | Pipelines sub-menu:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“My Project”以访问 OpenShift 项目概览页面。从那里，点击“Builds | Pipelines”子菜单：
- en: '![](img/00076.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00076.jpeg)'
- en: 'From here, you should be able to click on Create Sample Pipeline. Then, scroll
    all the way down and click on the Create button. It should tell you that the `Pipeline
    Build Example` has been created:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你应该能够点击“创建示例流水线”。然后，向下滚动到底部，点击“创建”按钮。它应该会告诉你`Pipeline Build Example`已创建：
- en: '![](img/00077.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00077.jpeg)'
- en: 'OpenShift creates a set of pods including Jenkins, mongodb and nodejs, with
    further integration with OpenShift. And all of that with just one click. This
    is just a demo, but isn''t that cool? Now go back to the Overview menu to check
    the overall progress:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 创建了一组包括 Jenkins、mongodb 和 nodejs 的 Pod，并进一步与 OpenShift 集成。所有这些都只需要点击一下。这只是一个演示，但这不是很酷吗？现在返回到概览菜单检查整体进度：
- en: '![](img/00078.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00078.jpeg)'
- en: OpenShift project menu
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 项目菜单
- en: You should be able to see a few applications, with pods. The first one is a
    Jenkins application, and the second one is MongoDB, as a part of our test application.
    There should be No deployments for `nodejs-mongodb-example`, because it will be
    controlled by Jenkins pipelines.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够看到一些应用程序以及相关的 Pod。第一个是 Jenkins 应用程序，第二个是 MongoDB，作为我们测试应用的一部分。`nodejs-mongodb-example`
    应该没有部署，因为它将由 Jenkins 流水线控制。
- en: Depending on your internet connection, it will take time to pull all of the
    images and start all of the pods, especially for Jenkins, as it is roughly 2.5
    GB. You can go to the Monitoring tab and click on View details to check the current
    status of the overall process. If the last message from Jenkins is pulling image
    openshift/jenkins-2-centos7, then just wait patiently, or go and make some coffee.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的网络连接情况，拉取所有镜像并启动所有 Pod 可能需要一些时间，尤其是 Jenkins，因为它大约有 2.5 GB。你可以转到“监控”标签并点击“查看详情”来检查整体进度的当前状态。如果
    Jenkins 最后的消息是拉取镜像 openshift/jenkins-2-centos7，那么请耐心等待，或者去泡杯咖啡。
- en: Starting a Jenkins pipeline
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 Jenkins 流水线
- en: 'Once both the Jenkins and MongoDB pods are running, go back to the Builds |
    Pipelines sub-menu:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Jenkins 和 MongoDB Pod 启动完毕，返回到“Builds | Pipelines”子菜单：
- en: '![](img/00079.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00079.jpeg)'
- en: 'Click the Start Pipeline button. This will trigger a CI/CD pipeline, to start
    building. Depending on your internet connection, this step will take some time
    to complete; by the end of it, you should be able to see that two stages were
    completed successfully:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“启动流水线”按钮。这将触发一个 CI/CD 流水线，开始构建。根据你的网络连接情况，这一步可能需要一些时间才能完成；完成后，你应该能够看到两个阶段成功完成：
- en: '![](img/00080.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00080.jpeg)'
- en: 'Clicking on View Log should open a new tab with the Jenkins console output
    from the Jenkins login page:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“查看日志”应该会打开一个新标签，显示 Jenkins 登录页面的 Jenkins 控制台输出：
- en: '![](img/00081.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00081.jpeg)'
- en: Jenkins login page
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 登录页面
- en: 'Click on Log in with OpenShift and use the same credentials that you used to
    authenticate in OpenShift (use the developer user, with any password):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“使用 OpenShift 登录”，并使用你在 OpenShift 中认证时使用的相同凭证（使用开发者用户，输入任意密码）：
- en: '![](img/00082.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00082.jpeg)'
- en: Jenkins user authorization
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 用户授权
- en: 'You will need to authorize the developer user to access Jenkins, by clicking
    on Allow selected permissions. This will get you to the Jenkins Console Output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要授权开发者用户访问 Jenkins，点击“允许所选权限”。这将带你进入 Jenkins 控制台输出：
- en: '![](img/00083.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00083.jpeg)'
- en: Jenkins Console Output
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 控制台输出
- en: Scroll down to see the complete log, close the lab, and go back to the OpenShift
    tab.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动查看完整日志，关闭实验并返回 OpenShift 标签。
- en: If you are interested in how Jenkins works in detail and want to learn more,
    just follow the links in the *Further reading* section of this chapter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对 Jenkins 的工作原理感兴趣并想深入了解，可以查看本章 *Further reading* 部分中的链接。
- en: We mentioned previously that there is a difference between the Continuous Delivery
    and Continuous Deployment models; one of them includes human intervention, and
    the other one does not.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到过，持续交付（Continuous Delivery）和持续部署（Continuous Deployment）模型之间是有区别的；其中一个模型包含人工干预，另一个则不包含。
- en: 'What we are going to do next is modify our test pipeline and add an approval
    step. Go back to the pipeline sub-menu:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将修改我们的测试管道并添加一个审批步骤。请返回管道子菜单：
- en: '![](img/00084.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00084.jpeg)'
- en: Clicking on Edit Pipeline should redirect us to editing our first pipeline.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 Edit Pipeline 应该会将我们重定向到编辑我们的第一个管道。
- en: Editing Jenkinsfile
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑 Jenkinsfile
- en: 'You should see the Jenkins pipeline configuration file, Jenkinsfile, as shown
    in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能看到 Jenkins 管道配置文件 Jenkinsfile，如下图所示：
- en: '![](img/00085.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00085.jpeg)'
- en: Editing pipelines
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑管道
- en: Jenkins uses the Apache Groovy Programming Language. It is pretty easy to learn,
    and we are not going to delve too deeply into the details; rather, we will give
    you some basic skills. You can find more information regarding Groovy in the *Further
    reading* section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 使用 Apache Groovy 编程语言。它非常容易学习，我们不会深入讨论细节；相反，我们会提供一些基本技能。您可以在 *Further
    reading* 部分找到有关 Groovy 的更多信息。
- en: 'We simply need to add a new stage with an arbitrary name; let''s call it the
    `approval` stage, in between the `build` and `deploy` stages. This new `approval`
    stage will put the deployment stage on hold, until you manually approve it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需添加一个新的阶段，名称可以自定义；我们称其为 `approval` 阶段，位于 `build` 阶段和 `deploy` 阶段之间。这个新的 `approval`
    阶段将暂停部署阶段，直到您手动批准：
- en: '[PRE1]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Click on Save and start the pipeline.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 Save 并启动管道。
- en: Managing pipeline execution
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理管道执行
- en: 'Adding one more stage called *approval* triggers the second build to start,
    and eventually you should be able to see the new approval stage, with Input Required:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个名为 *approval* 的新阶段会触发第二次构建的开始，最终您应该能够看到新的审批阶段，并显示“Input Required”：
- en: '![](img/00086.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00086.jpeg)'
- en: 'Clicking on Input Required will open a new tab and redirect you to the Jenkins
    approval stage, asking: Approve moving to deploy stage? Shown as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“Input Required”将打开一个新标签页并将您重定向到 Jenkins 审批阶段，询问：是否批准迁移到部署阶段？如下所示：
- en: '![](img/00087.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00087.jpeg)'
- en: 'The result will be different depending on what you answer. In our case, we
    are going to press the Proceed button. This will redirect us to the Jenkins Console
    Output, but we can just close it and go back to the OpenShift pipeline tab. From
    the following screenshot, we can see that the CI/CD pipeline has completed the
    deploy stage and now we have three stages instead of two as in `Build #1`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '结果将根据您的回答而有所不同。在我们的案例中，我们将按下 Proceed 按钮。这将把我们重定向到 Jenkins 控制台输出，但我们可以直接关闭它并返回到
    OpenShift 管道标签页。从以下截图中，我们可以看到 CI/CD 管道已经完成了部署阶段，现在我们有了三个阶段，而不是 `Build #1` 中的两个阶段。'
- en: '![](img/00088.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00088.jpeg)'
- en: 'As a result, you should see a `nodejs-mongodb-example, #2` pod running in the
    Overview menu. The `#2` means that it is build number two:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '结果，您应该能在 Overview 菜单中看到一个 `nodejs-mongodb-example, #2` 的 pod 正在运行。`#2` 表示这是第二次构建：'
- en: '![](img/00089.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00089.jpeg)'
- en: Jenkins is a lot more complicated than that, but this should have provided you
    with a good overview of CI/CD in OpenShift, and how easy it is to get started
    with Jenkins in OpenShift
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 远比这复杂，但这应该为您提供了 OpenShift 中 CI/CD 的概述，以及在 OpenShift 中启动 Jenkins 的简易性。
- en: You are save know to stop and delete your minishift VM running `minishift delete`
    command, unless you are going to do more practice.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以停止并删除运行 `minishift delete` 命令的 minishift 虚拟机，除非您打算做更多练习。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced you to CI/CD, Jenkins, OpenShift pipelines, and
    Jenkins integration with OpenShift. We showed you how to create a sample CI/CD
    pipeline in OpenShift, how to edit pipelines, and how to manage pipeline execution.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向您介绍了 CI/CD、Jenkins、OpenShift 管道以及 Jenkins 与 OpenShift 的集成。我们展示了如何在 OpenShift
    中创建一个示例 CI/CD 管道，如何编辑管道，以及如何管理管道执行。
- en: In the next chapter, we will briefly touch on HA in general, and will then focus
    on OpenShift HA. We will discuss how OpenShift provides redundancy in the event
    of a failure, and how you can prevent this from happening by properly designing
    your OpenShift cluster. At the end of the chapter, we will discuss how to back
    up and restore OpenShift cluster data, in case something goes wrong.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将简要讨论HA的基本知识，然后重点讲解OpenShift HA。我们将讨论OpenShift如何在发生故障时提供冗余，以及如何通过正确设计OpenShift集群来防止这种情况发生。章节结束时，我们将讨论如何备份和恢复OpenShift集群数据，以防万一出现问题。
- en: Questions
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'What CI/CD method allows you to automate the application delivery process without
    any human intervention? choose one:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种CI/CD方法允许你在没有人工干预的情况下自动化应用交付过程？请选择一个：
- en: Continuous delivery
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous deployment
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续部署
- en: Continuous integration
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous automation
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续自动化
- en: 'Which three CI/CD pipeline components does OpenShift use? choose three:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenShift使用的三个CI/CD流水线组件是哪三个？请选择三个：
- en: OpenShift Domain Specific Language
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenShift领域特定语言
- en: Jenkins Pipeline Build Strategy
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins流水线构建策略
- en: Jenkins Java Connector
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins Java连接器
- en: Jenkinsfile
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkinsfile
- en: Jenkins Build Strategy
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins构建策略
- en: 'You have to manually configure OpenShift authentication for OpenShift pipelines
    with Jenkins:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须手动配置OpenShift认证，才能使用Jenkins中的OpenShift流水线：
- en: 'True'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: 'What command in Jenkinsfile allows you to implement a manual approval procedure?
    choose one:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkinsfile中，哪个命令允许你实现手动审批过程？请选择一个：
- en: Input
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入
- en: Hold
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留
- en: Approve
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 批准
- en: Accept
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受
- en: 'Which menu in the OpenShift GUI brings you to the OpenShift pipelines page?
    choose one:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenShift GUI中的哪个菜单项可以带你进入OpenShift流水线页面？请选择一个：
- en: Build | Pipelines
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 | 流水线
- en: Jenkins | Pipelines
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins | 流水线
- en: Build | Jenkins
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 | Jenkins
- en: Overview
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 概述
- en: 'The CI/CD pipeline stages in Jenkinsfile are predefined, and cannot be changed:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkinsfile中的CI/CD流水线阶段是预定义的，无法更改：
- en: 'True'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Further reading
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'We briefly covered a lot of different topics regarding CI/CD in this chapter.
    The following links can help you delve into a topic you might be interested in:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了有关CI/CD的多个不同话题。以下链接可以帮助你深入了解你可能感兴趣的主题：
- en: '**CI/CD overview**: [https://www.atlassian.com/continuous-delivery/ci-vs-ci-vs-cd](https://www.atlassian.com/continuous-delivery/ci-vs-ci-vs-cd)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD概述**: [https://www.atlassian.com/continuous-delivery/ci-vs-ci-vs-cd](https://www.atlassian.com/continuous-delivery/ci-vs-ci-vs-cd)'
- en: '**Apache Groovy documentation**: [http://groovy-lang.org/syntax.html](http://groovy-lang.org/syntax.html)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Groovy文档**: [http://groovy-lang.org/syntax.html](http://groovy-lang.org/syntax.html)'
- en: '**OpenShift pipelines**: [https://docs.openshift.com/container-platform/latest/dev_guide/openshift_pipeline.html](https://docs.openshift.com/container-platform/latest/dev_guide/openshift_pipeline.html)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenShift流水线**: [https://docs.openshift.com/container-platform/latest/dev_guide/openshift_pipeline.html](https://docs.openshift.com/container-platform/latest/dev_guide/openshift_pipeline.html)'
- en: '**OpenShift Jenkins DSL plugin documentation**: [https://github.com/openshift/jenkins-client-plugin ](https://github.com/openshift/jenkins-client-plugin)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenShift Jenkins DSL插件文档**: [https://github.com/openshift/jenkins-client-plugin](https://github.com/openshift/jenkins-client-plugin)'
- en: '**Jenkinsfile documentation**: [https://jenkins.io/doc/book/pipeline/jenkinsfile/](https://jenkins.io/doc/book/pipeline/jenkinsfile/)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkinsfile文档**: [https://jenkins.io/doc/book/pipeline/jenkinsfile/](https://jenkins.io/doc/book/pipeline/jenkinsfile/)'
