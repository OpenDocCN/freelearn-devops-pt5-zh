- en: Getting Started with Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you are a professional or an amateur developer, you've likely heard
    about the concept of version control. You may know that adding a new feature,
    fixing a broken one, or stepping back to a previous condition is a daily routine.
  prefs: []
  type: TYPE_NORMAL
- en: This requires the use of a powerful tool that can help you take care of your
    work, allowing you to move around your project quickly and without friction.
  prefs: []
  type: TYPE_NORMAL
- en: There are many tools for this job on the market, both proprietary and open source.
    Usually, you will find **Version Control Systems** (**VCS**) and **Distributed
    Version Control Systems** (**DVCS**). Some examples of centralized tools are **Concurrent
    Version System** (**CVS**), **Subversion** (**SVN**), **Team Foundation Server**
    (**TFS**), and **Perforce Helix**. While in DVCS, you can find **Bazaar**, **Mercurial**,
    and **Git**. The main difference between the two families is the constraint—in
    the centralized system—to have a remote server from which to get and in which
    to put your files; needless to say, if the network is down, you are in trouble.
    In DVCS, on the other hand, you can either have or not have a remote server (even
    more than one), but you can work offline, too. All your modifications are locally
    recorded so that you can sync them at some other time. Today, Git is the DVCS
    that has gained more public favor than others, growing quickly from a niche tool
    to mainstream.
  prefs: []
  type: TYPE_NORMAL
- en: Git has rapidly grown as the de facto source code versioning tool. It is the
    second famous child of **Linus Torvalds**, who, after creating the **Linux** kernel,
    forged this versioning software to keep track of his million lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: In this first chapter, we will start at the very beginning, assuming that you
    do not have Git on your machine. This book is intended for developers who have
    never used Git or only used it a little bit, but who are scared to throw themselves
    headlong into it.
  prefs: []
  type: TYPE_NORMAL
- en: If you have never installed Git, this is your chapter. If you already have a
    working Git box, you can quickly read through it to check whether everything is
    alright.
  prefs: []
  type: TYPE_NORMAL
- en: Foreword to the second edition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the second edition of Git Essentials!
  prefs: []
  type: TYPE_NORMAL
- en: This paragraph is dedicated to those who have already read the first edition;
    here you will find an overview of the changes and new things inside this brand-new
    edition.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we listened to your feedback: in [Chapters 2](99b661ad-e978-4ef2-bd8c-cce55c6a318e.xhtml), *Git
    Fundamentals - Working Locally* and [Chapter 3](20e98db3-d248-436e-88d5-069be7808998.xhtml), *Git
    Fundamentals - Working Remotely* we will look at some technical details in more
    depth, describing more accurately the internals of Git; this entails extra effort
    on the part of the reader, but in return, he or she will obtain a more mindful
    understanding of Git architecture that will later help to grasp the commands of
    this powerful tool.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Git ecosystem made some really giant steps forward since April 2015, but
    at its heart, Git is always the same. Here is an incomplete list of new features
    and improvements:'
  prefs: []
  type: TYPE_NORMAL
- en: Big improvements for Windows (for example, a fully working credential subsystem,
    performance enhancements, and so on—see [https://github.com/git-for-windows/git](https://github.com/git-for-windows/git)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git Large File Storage (LFS)-an additional tool from GitHub friends (see [https://git-lfs.github.com](https://git-lfs.github.com)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git Virtual File System from Microsoft fellows (see [https://github.com/Microsoft/GVFS](https://github.com/Microsoft/GVFS)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git worktree` command and functionalities. Worktrees are a feature that was
    first included in Git 2.5; they let you check out and work on multiple repository
    branches in different directories simultaneously-see [https://git-scm.com/docs/git-worktree](https://git-scm.com/docs/git-worktree).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lot of improvements and new options for common commands, too many to cite
    them all.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So the aim of this book is to get started with versioning and learn how to do
    it proficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is open source software. You can download it for free from [http://git-scm.com](http://git-scm.com/),
    where you will find a package for all the most common environments (GNU-Linux,
    macOS and Windows). At the time of writing this book, the latest version of Git
    is 2.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on GNU-Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a Linux user, you may have Git out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'If not, you can use the distribution package manager to download and install
    it; an `apt-get install git` command or equivalent will provide you Git and all
    the necessary dependencies in seconds, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e26bfa5-7d66-458e-99a4-d997ea3ef19e.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Git on Kubuntu
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several ways to install Git on macOS. The easiest way is to install
    the *Xcode command line tools*. Since *Mavericks* (*10.9*), you can do this simply
    by trying to run `git` from the terminal for the very first time. If you don''t
    have it installed already, it will prompt you to install it, as shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25726502-9687-4b3b-b168-5c48f8107d24.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the Install button will fire the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want a more up-to-date version, you can also install it via the `*.dmg`
    binary installer, downloaded from [git-scm.com](http://git-scm.com) (it says *mavericks*
    in the file name, but just ignore that). Beware the macOS policies while installing
    packages downloaded from the Internet; to allow execution, you need to hold down
    *CTRL* and click on the package icon to open it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9702380-471d-498a-9a4b-470a82ab7a3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Hold down CTRL and click to let macOS prompt you to open the package
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, the installation will be very easy-it''s just a matter of clicking
    on the Continue button and following the steps represented in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c96e5c29-a3e5-45d1-a829-4bdd76c775ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's start the installation process
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Continue button and then go on; a window like the one shown in
    the following image will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/315203ae-cf5e-436a-92b3-6940f7f67022.png)'
  prefs: []
  type: TYPE_IMG
- en: Here you can change the installation location, if you need; if in doubt, simply
    click Install
  prefs: []
  type: TYPE_NORMAL
- en: 'Click now on the Install button to start the installation. After a few seconds,
    the installation will be completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eeed1047-81e6-43f0-be53-c2f6e526a9d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Installation complete
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While clicking on the `Download` button on [http://git-scm.com](http://git-scm.com),
    you will automatically download Git in either the **x86** or the **x64** variant.
    I won''t go into too much detail about the installation process itself, as it
    is trivial; I will only provide a few recommendations in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18642337-14d5-4c31-8a15-175000638d5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Enabling Windows Explorer integration is generally useful; you will benefit
    from a convenient way to open a Git prompt in any folder by right-clicking on
    the contextual menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also enable Git to be used in the classic DOS command prompt, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7345804-495b-44c0-91b4-e399732b62ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Git is provided with an embedded, Windows-compatible version of the famous **Bash
    shell** (see [https://en.wikipedia.org/wiki/Bash_(Unix_shell)](https://en.wikipedia.org/wiki/Bash_(Unix_shell))),
    which we will use extensively. By doing this, we will also make Git available
    to third-party applications, such as GUIs and so on. It will come in handy when
    we give some GUI tools a try.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use defaults for line endings. This will protect you from future annoyances
    while working on multiplatform repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5387b9cb-4bc5-4910-9d6f-a3710cec7e53.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now it''s time to choose a terminal emulator for Git; I recommend using **MinTTY**
    (see [https://mintty.github.io](https://mintty.github.io/)), as it is a very good
    shell, fully customizable and user friendly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/233d38e9-b625-482b-bf06-0c8fba4132fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s look at some new stuff from the latest Git releases-that is file
    system caching, the Git Credential Manager, and symbolic links:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25a403c0-6ebc-4b48-a6c9-ebf0f62c8f7a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**File system caching** has been considered experimental until Git for Windows
    v2.7.4 (March 18, 2016), but now it is stable, and since Git 2.8 this feature
    is enabled by default. This is a Windows-only configuration option, and allows
    Git to be quicker when dealing with the underlying read/write operations. I recommend
    that you enable it for optimal performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Git Credential Manager** (see [https://github.com/Microsoft/Git-Credential-Manager-for-Windows](https://github.com/Microsoft/Git-Credential-Manager-for-Windows))
    is included in the Git for Windows installer since v2.7.2 (February 23, 2016).
    Thanks to Microsoft, today, you can deal with Git users and passwords as easily
    as you can on other platforms. It requires .NET framework v4.5 or later, and perfectly
    integrates even with Visual Studio (see [https://www.visualstudio.com/](https://www.visualstudio.com/))
    and the GitHub for Windows (see [https://desktop.github.com](https://desktop.github.com))
    GUI. I recommend that you enable it, as it saves some time while working.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Symbolic links** is a feature that Windows has lacked from the beginning,
    and even when they were introduced in Windows Vista, they have highlighted many
    incompatibilities with with Unix-like symlinks.'
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, Git and its Windows subsystem can handle them (with some limitations),
    so, if needed, you can try to install this feature and enable it in configuration
    options (they are disabled by default). For now, however, the best thing is to
    not use them at all in your repository if you need to work on the Windows platform.
    You can find more info at [https://github.com/git-for-windows/git/wiki/Symbolic-Links](https://github.com/git-for-windows/git/wiki/Symbolic-Links).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce062565-356f-418e-87cd-e52108e301a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Git for Windows v2.10.2 (November 2 2016) introduced **a new, built-in difftool**
    that promises quicker diffs. I use it on a daily basis, and I find it quite stable
    and fast. Enable it if you want give it a try, but this is not mandatory for the
    purposes of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98d1e96b-1e2d-4be8-9ff8-a7076d9ef616.png)'
  prefs: []
  type: TYPE_IMG
- en: Git for Windows will install it in the default `Program Files` folder, as all
    the Windows programs usually do.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c155f8b3-67c3-445a-907a-bd518de47193.png)'
  prefs: []
  type: TYPE_IMG
- en: At the end of the process, we will have Git installed, and all its `*nix` friends
    will be ready to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Please keep an eye on the Release Notes to see what's new in the latest release.
  prefs: []
  type: TYPE_NORMAL
- en: Running our first Git command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From now on, as a matter of convenience, we will use Windows as our platform
    of reference. Our screenshots will always refer to that platform. In any case,
    all the Git main commands we will use will work on the platforms we have previously
    mentioned anyway.
  prefs: []
  type: TYPE_NORMAL
- en: It's time to test our installation. Is Git ready to rock? Let's find out!
  prefs: []
  type: TYPE_NORMAL
- en: 'Using shell integration, right-click on an empty place on the desktop and choose
    the new menu item Git Bash Here. It will appear as a new MinTTY shell, providing
    you a Git-ready bash for Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34ec3b0b-ab20-4185-9a40-55f9c3ce0f86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a typical Bash prompt: we can see the user, `nando`, and the host,
    `computer`. Then there''s a `MINGW64` string, which refers to the actual platform
    we are using, called Minimalist GNU for Windows (see [http://www.mingw.org](http://www.mingw.org)),
    and at the end we find the actual path, in a more `*nix` fashion, `/c/Users/nando`.
    Later, we will look at this argument in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a new, shiny Bash prompt, simply type `git` (or the equivalent,
    `git --help`), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fad571e-24e2-4fc6-b962-3416cb5faba8.png)'
  prefs: []
  type: TYPE_IMG
- en: If Git has been installed correctly, typing `git` without specifying anything
    else will result in a short help page, with a list of common commands (if not,
    try reinstalling Git).
  prefs: []
  type: TYPE_NORMAL
- en: So, we have Git up and running! Are you excited? Let's begin to type!
  prefs: []
  type: TYPE_NORMAL
- en: Making presentations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git needs to know who you are. This is because in Git, every modification you
    make in a repository has to be signed with the name and email of the author. So,
    before doing anything else, we have to tell Git this information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type these two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e26e187c-61dd-4aa2-afcc-f79eb19e0247.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the `git config` command, we set up two configuration variables-`user.name`
    and `user.email`. Starting from now, Git will use them to sign your commits in
    all your repositories. Do not worry about it for now; in the next few chapters,
    we will explore the Git configuration system in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a new repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to set up a new repository. A **repository** is a container
    for your entire project; every file or subfolder within it belongs to that repository,
    in a consistent manner. Physically, a repository is nothing other than a folder
    that contains a special `.git` folder, the folder where the magic happens.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to make our first repository. Choose a folder you like (for example,
    `C:\Repos\MyFirstRepo`), and type the `git init` command, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9f679f0-ede6-4d88-8e9f-074cb44d370d.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, I slightly modified the default Git Bash prompt to better fit
    the need of the demoing commands; I removed the user and host, and added an incremental
    number to every command we type so that it will be simpler for me to refer to
    it while explaining, and for you to refer to it while reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get back on topic. What just happened inside the `MyFirstRepo` folder?
    Git created a `.git` subfolder. The subfolder (normally hidden in Windows) contains
    some other files and folders, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48a804dd-4d90-4e03-ba5f-d86c3487d6b2.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point in time, it is not important for us to understand what is inside
    this folder. The only thing you have to know is that you do not have to touch
    it, ever! If you delete it or if you modify the files inside by hand, you could
    get into trouble. Have I frightened you enough?
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a repository, we can start to put files inside it. Git can
    trace the history of any type of file, text-based or binary, small or large, with
    the same efficiency (more or less; large files are always a problem).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a text file, just to give it a try:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2211b114-5c50-4628-b1ce-fd9ccc9d5a14.png)'
  prefs: []
  type: TYPE_IMG
- en: And now what? Is that all? No! We have to tell Git to put this file in your
    repository, *explicitly*. **Git doesn't do anything that you don't want it to
    do**. If you have some spare or temp files in your repository, Git will not take
    care of them, but will only remind you that there are some files in your repository
    that are not under version control (in the next chapter, we will see how to instruct
    Git to ignore them when necessary).
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, back to the topic. I want `file.txt` under the control of Git, so let''s
    add it, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db3557ef-76cc-4b4a-ad92-92822218f3c2.png)'
  prefs: []
  type: TYPE_IMG
- en: The `git add` command tells Git that we want it to take care of that file and
    check it for future modifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In response to this command, it could happen that you will see this response
    message from Git:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The file will have its original line endings in your working directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because of the option that we selected when installing Git: *Checkout
    Windows-style, commit Unix-style line endings*. Don''t worry about it for the
    moment; we will deal with it later.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us see if Git obeyed us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `git status` command, we can check the status of the repository,
    as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85f50602-ca1c-4156-b88c-02cf0f190895.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, Git has accomplished its work as expected. In this image, we
    can read words such as `branch`, `master`, `commit`, and `unstage`. We will look
    at them briefly, but for the moment, let''s ignore them: The purpose of this first
    experiment is overcome our fear and start playing with Git commands; after all,
    we have an entire book in which to learn the significant details.'
  prefs: []
  type: TYPE_NORMAL
- en: Committing the added file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, Git knows about `file.txt`, but we have to perform another step
    to fix the snapshot of its content. We have to commit it using the appropriate
    `git commit` command. This time, we will add some flavor to our command, using
    the `--message` (or `-m`) subcommand, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95d9904e-1bab-42fd-ba87-414c8347c224.png)'
  prefs: []
  type: TYPE_IMG
- en: With the commit of `file.txt`, we have finally fired up our repository. Having
    done the first commit (also known as the root-commit, as you can see in the screenshot),
    the repository now has a `master` branch with a commit inside it. We will play
    with branches in the forthcoming chapters. Right now, think of it as a path of
    our repository, and keep in mind that a repository can have multiple paths that
    often cross each other.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying a committed file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we can try to make some modifications to the file and see how to deal
    with it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59fe50b6-f898-49d7-bb5f-79c86f95a81a.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the Bash shell warns us that there are some modifications painting
    the name of the modified files in red. Here, the `git status` command informs
    us that there is a file with some modifications, and that we need to commit it
    if we want to save this modification step in the repository history.
  prefs: []
  type: TYPE_NORMAL
- en: However, what does `**no changes added to commit**` mean? It is simple. Git
    makes you take a second look at what you want to include in the next commit. If
    you have touched two files but you want to commit only one, you can add only that
    one.
  prefs: []
  type: TYPE_NORMAL
- en: If you try to commit by skipping the `add` step, nothing will happen (see the
    following screenshot). We will analyze this behavior in depth in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s add the file again for the purpose of getting things ready for the
    next commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8be5acd5-0bad-4540-95f3-36c0cf99714c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Okay, let''s make another commit, this time, avoiding the `--message` subcommand.
    Type `git commit` and hit the *Enter* key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca8fea03-9530-4cda-8324-b2832e0bc46b.png)'
  prefs: []
  type: TYPE_IMG
- en: Fasten your seatbelts! You are now entering in a piece of code history!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b2ccf35-7b58-437a-951d-ef49ea0447c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What is that? It''s **Vim** (**Vi IMproved**), an ancient and powerful text
    editor, used even today by millions of people. You can configure Git to use your
    own preferred editor, but if you don''t do it, this is what you have to deal with.
    Vim is powerful, but for newcomers, it can be a pain to use. It has a strange
    way of dealing with text. To start typing, you have to press *I* for inserting
    text, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0775cfb-39d3-4c11-8c1c-b5c7716f7b93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have typed your commit message, you can press *Esc* to get out of
    editing mode. Then, you can type the `:w` command to write changes and the `:q`
    command to quit. You can also type the command in pairs as `:wq`, as we do in
    this screenshot, or use the equivalent `:x` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1cfd1140-1211-46fd-8bdf-9746f3424e61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, press *Enter* and another commit is done, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/196a26eb-6327-4de8-afa4-99c06ee29d19.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that when you exit from Vim, Git automatically dispatches the commit, as
    you can see in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Well done! Now, it's time to recap.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned that Git is not so difficult to install, even on
    a non-Unix platform, such as Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have chosen a directory to include in a Git repository, you can see
    that initializing a new Git repository is as easy as executing a `git init` command.
    For now, don't worry about saving it on a remote server and so on. It's not mandatory
    to save it; you can do this when you need, preserving the entire history of your
    repository. This is a killer feature of Git and DVCS in general. You can comfortably
    work offline and push your work to a remote location when the network is available,
    without any hassle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we discovered one of the most important character traits of Git: it
    will do nothing if you don''t mention it explicitly. You also learned a little
    bit about the `add` command. We were obliged to perform a `git add` command for
    a file when we committed it to Git for the very first time. Then, we used another
    command when we modified it. This is because if you modify a file, Git does not
    expect that you want it to be automatically added to the next commit (and it''s
    right to assume this, I''d say).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at some fundamentals of Git.
  prefs: []
  type: TYPE_NORMAL
