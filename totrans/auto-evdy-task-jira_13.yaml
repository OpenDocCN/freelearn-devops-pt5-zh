- en: '*Chapter 10*: Troubleshooting Tips and Techniques'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is an inevitable fact that at some point, your automation rules will fail
    with errors or slow down for no apparent reason. Even meticulously planned and
    implemented rules will eventually be subject to an unforeseen error. In these
    cases, understanding how to proactively monitor, troubleshoot, and debug your
    rules will help you solve these issues quicker.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will introduce you to some tips and techniques to better
    understand what is happening to your rules and how to debug them. We'll take a
    look at the audit log and how you can use this to better understand what is going
    on during your rule executions and how to leverage it for debugging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: We will also learn about the service limits in place to prevent rogue rules
    from negatively impacting the performance of your instance and how you can proactively
    monitor your rules to avoid breaching these limits.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you will learn how to use the performance insight metrics to gain an
    overview of the performance of the automation rules in your system. This will
    enable you to identify rules that could potentially cause performance issues,
    thereby allowing you to maintain and improve the performance of your Jira instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging automation rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding service limits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaining insights on performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira cloud environment**: If you don''t already have access to Jira, you
    can create a free Jira Cloud account at [https://www.atlassian.com/software/jira/free](https://www.atlassian.com/software/jira/free)
    and ensure that you have both Jira Software and Jira Service Management selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jira Server environment**: If you are using Jira Server (available from [https://www.atlassian.com/software/jira/download](https://www.atlassian.com/software/jira/download)),
    ensure that you have licenses for both Jira Software and Jira Service Desk. In
    addition, you will also need to ensure that you install the *Automation for Jira*
    app available from the Atlassian Marketplace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In both instances, you will need to have at least **Project Administrator**
    access to Service Management in order to be able to follow the examples in this
    chapter. For the examples in this chapter, we have used the *IT Service Management
    project template* to create the Service Desk project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the latest code samples for this chapter from this book''s
    official GitHub repository at [https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira](https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira).
    Please visit the following link to check the CiA videos: [https://bit.ly/2XSttjY](https://bit.ly/2XSttjY)'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging automation rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many reasons why automation rules can, and will, fail. These could
    be due to underlying configuration changes within Jira, or the rule author may
    not have anticipated an edge case scenario when planning and implementing the
    rule.
  prefs: []
  type: TYPE_NORMAL
- en: When rules start failing, it is necessary to understand what caused the rule
    to fail and to either fix the underlying cause or to adjust the automation rule
    to take into consideration the changes that caused it to fail.
  prefs: []
  type: TYPE_NORMAL
- en: However, debugging is not only about finding and fixing deficiencies in your
    automation rules or underlying Jira configurations. We can use the same techniques
    during planning and developing to ensure that we deliver robust rules that are
    likely to have a higher success rate.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at how using the audit log for automation rules
    can help to identify issues and how we can make use of it when debugging our automation
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, let's take a look at the audit log and how it helps us to understand
    what is happening with our rules.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the audit log
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every automation rule has an associated audit log containing a list of chronologically
    ordered items that affect that rule from the time it was created.
  prefs: []
  type: TYPE_NORMAL
- en: These items track not only the creation, modification, and deletion events for
    the rule, but also every execution of the rule, including the issues affected
    and the outcomes of every action within the rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways to view the audit log:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Global audit log**: The global audit log allows a Jira administrator to see
    all the audit logs for every project and rule in the system. You can find the
    global audit log as a Jira administrator by clicking the **settings (cog)** icon
    in the top menu bar and then selecting **System**. Select the **Automation rules**
    tab in the left menu and then, in Jira Cloud, select the **Audit log** tab. In
    *Jira Server* or *Jira Data Center*, click the ellipsis (**…**) button and select
    **Show audit log**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project audit log**: The project audit log allows project administrators
    to see all the audit logs for every rule in that project. To find the project
    audit log, as a project administrator, navigate to **Project settings**. In *Jira
    Cloud*, select the **Automation** tab in the left menu and then select the **Audit
    log** tab. In *Jira Server* or *Jira Data Center*, select the **Project automation**
    tab in the left menu and then click the ellipsis (**…**) button and select **Show
    audit log**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rule audit log**: The rule audit log allows you to see all the log items
    for that particular rule only. To view the rule audit log, select a rule and then
    click the **Audit log** item above the **rule-chain** view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of the global audit log can be seen in the following screenshot,
    showing the audit logs for rules across all projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – The global audit log view in Jira Cloud'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.1_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – The global audit log view in Jira Cloud
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the name of a rule in the global audit log and project audit log
    views will take you to the rule audit log view. In each of the rule views, clicking
    on the **Show more** link in the **Operations** column will expand the audit log
    details for that particular event.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the project audit log view with some of the
    individual audit items expanded to show the detailed audit log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – The audit log in detail'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.2_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – The audit log in detail
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at each of the items in the audit log:'
  prefs: []
  type: TYPE_NORMAL
- en: Each audit log has a date and timestamp associated with it that shows precisely
    when this event occurred, accurate to the second. Audit logs are listed in descending
    date and time order, with the latest event at the top of the list. The number
    in brackets next to the date and timestamp is the rule's identification number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is the name of the rule with which this audit log is associated. In the
    global audit log and project audit log views, clicking the rule name will take
    you to the rule audit log for the particular rule. You can also view the audit
    log history for deleted rules in either the global or project audit log views.
    Deleted rules are easily identifiable by not having a hyperlink to the rule definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this column, you can see whether the rule executed successfully. In addition,
    it also shows configuration changes to the rule, which help when debugging rule
    failures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Every time a rule is executed, the time it took to run is recorded and shown
    in this column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the case of rule executions, **Associated items** shows which issues were
    added to the rule execution and by which rule component. Clicking on the component
    will take you directly to the component configuration responsible for this action.
    For configuration events, this will show the user who performed the action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the actions performed by rule execution are listed here, grouped by action.
    For each action configured in the rule, you will see a list of issues that were
    successful. If an action was unsuccessful, an error message will be displayed
    instead. Clicking on any of the actions will take you directly to the action configuration
    screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expanding the **What do the different statuses mean** option will list all the
    possible status codes and their meanings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we've learned how to read the audit log, let's take a look at how we
    can use it to debug our rules.
  prefs: []
  type: TYPE_NORMAL
- en: Using the audit log for debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ability to see what is stored in a smart value or to examine the outcome
    of a smart value function will give you some insight into what is happening in
    your rule. This is particularly useful when you are designing a rule or when debugging
    a rule that is not behaving as expected.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, an automation action component, *Log action*, is available
    to use in your rules. The sole purpose of this component is to inject messages
    into the audit log, which you can then inspect when debugging a rule.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at an example that utilizes the Log action component.
  prefs: []
  type: TYPE_NORMAL
- en: Logging messages using Log action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Log action component allows you to inject messages into the audit log so
    you can add debugging statements to help you understand what is happening when
    a rule executes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will use the Log action component to add a timestamp to
    the audit log before and after calling a **Create sub-tasks** action:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Service Desk project, navigate to **Project settings**, click on the
    **Automation** tab, and then click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Issue created** trigger and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then select `Request Type`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Onboard new employees`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now select `{{now}} Start create sub-tasks`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select `Provision new laptop by {{issue.duedate.longDate}}`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Setup new desk phone by {{issue.duedate.longDate}}`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Again, select `{{now}} End create sub-tasks`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, name your rule `Create onboarding sub-tasks with debug logging` and then
    click **Turn it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The rule should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Creating a rule with debug logging'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.3_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – Creating a rule with debug logging
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our rule in place, use the **Raise a request** link from your
    Service Desk project to create a new issue using the *Onboard new employees* request
    type and then navigate back to the *Create onboarding sub-tasks with debug logging*
    rule and click on the **Audit log** item.
  prefs: []
  type: TYPE_NORMAL
- en: 'After expanding the audit log item, you should see something similar to the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Audit log with debug log messages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.4_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – Audit log with debug log messages
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see in the audit log the messages we inserted around the **Create sub-tasks**
    action:'
  prefs: []
  type: TYPE_NORMAL
- en: The first log action message just before the **Create sub-tasks** action is
    called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second log action message just after the **Create sub-tasks** action is
    called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From this, you can now determine how long the `Sub-task` issue type.
  prefs: []
  type: TYPE_NORMAL
- en: Logging messages using the debug smart value function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the Log action to insert messages into the audit log makes debugging your
    rules a lot easier. However, having too many Log action components to log things
    such as the output of smart value functions means you have to duplicate your smart
    values in order to create debug logs.
  prefs: []
  type: TYPE_NORMAL
- en: To get around this, you can use the debug smart value function. This involves
    surrounding your smart value with the `{{#debug}}` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at an example rule that uses the debug smart value function
    to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: In your **Service Desk** project, navigate to **Project settings**, click on
    the **Automation** tab, and then click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Waiting for customer`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, select **New action** followed by **Comment on issue**. Add the following
    message to the **Comment** field and then click **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your rule should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Using the debug smart value function'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_10.5_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.5 – Using the debug smart value function
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name the rule `Comment on waiting for customer with debug logging`
    and then click **Turn it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an issue of the *Service Request* type, transition it to *Waiting for
    customer*, and then navigate back to the *Comment on waiting for customer with
    debug logging* rule and click on the **Audit log** item.
  prefs: []
  type: TYPE_NORMAL
- en: 'After expanding the top audit log item, your audit log should look similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Audit log using the debug smart value function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.6_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.6 – Audit log using the debug smart value function
  prefs: []
  type: TYPE_NORMAL
- en: Using the `{{#debug}}` smart value function has caused a **d****ebug message**
    to be printed in the audit log, along with the information output by the **Comment
    on issue** action without needing to add a separate **Log action** component to
    the rule. You can see this in the item labeled **(1)** in *Figure 10.6*.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned in this section how to understand and use the audit log from
    a global, project, and rule perspective, and what the various items in the log
    can tell us.
  prefs: []
  type: TYPE_NORMAL
- en: We have also learned how to send messages to the audit log from our rules to
    aid in debugging our rules.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will be looking at the service limits that are in place
    to prevent rules from negatively impacting the performance of your Jira instance.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding service limits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service limits for automation rules are key to ensuring that automation rules
    do not have a negative impact on the performance of your Jira instance.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll look at what service limits are in place and how they
    affect your rules. We'll also look at how to work within these service limits
    and how we can use automation rules to monitor some of these.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by looking at what service limits are available.
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know service limits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Service limits are applicable to both the Jira Cloud and Jira Server/Data Center
    versions of the automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The service limits that apply to all rules are listed along with a description
    of how each limit could be breached:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Components per rule: 65'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any rule that contains more than 65 conditions, branches, and actions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New sub-tasks per action: 100'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rule that attempts to create more than 100 sub-tasks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Issues searched: 1,000'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A JQL search that returns more than 1,000 items will cause this to be breached.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Concurrent scheduled rule executions: 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rule scheduled to run every 5 minutes, but takes longer than 5 minutes to
    complete, will cause this limit to be breached as the subsequent execution cannot
    start while the first execution is still processing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Items queued by rule: 5,000 for Jira Cloud, and 25,000 for Jira Server/Data
    Center'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any single rule that causes more than the specified number of issues to be queued
    will breach this limit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Items queued globally: 50,000 for Jira Cloud, and 100,000 for Jira Server/Data
    Center'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The total number of issues queued at any one time cannot exceed the specified
    limits.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Daily processing time: 60 minutes per 12 hours'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any single rule that executes every 5 minutes with a processing time of more
    than 5 seconds per execution will breach this limit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Hourly processing time: 100 minutes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This limit will only trigger if there are more than 2,000 rule executions per
    hour on Jira Cloud or 5,000 rule executions per hour on Jira Server/Data Center.
    This could happen if you perform a bulk operation that causes several rules to
    fire at the same time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Loop detection: 10'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rule that triggers itself or other rules more than the specified number of
    times in quick succession.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dealing with service limit breaches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When rules breach their service limits, the automation engine will throttle
    the affected rule. The audit log will contain more information and use the *throttled*
    status to make it easier to identify.
  prefs: []
  type: TYPE_NORMAL
- en: Rules that have been throttled for breaching their service limits will also
    be disabled so as to prevent any further performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When setting up your rule, you can choose to send the rule owner an email notification
    when a rule first fails or every time a rule fails. You should be aware that when
    a notification is sent, the rule will already have been throttled and disabled.
  prefs: []
  type: TYPE_NORMAL
- en: In the case where regularly executing rules are in danger of exceeding their
    processing time limits, there is a special trigger, the *Service limit breached*
    trigger, which you can use to monitor your rules. Rather than waiting for the
    rule to get throttled and disabled, you can set up an automation rule using this
    trigger to notify you before the breach occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at how you can set up an automation rule to watch
    for and notify you when rules reach 80% of their processing time limit:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira project, navigate to **Project settings**, click on the **Automation**
    link in the **Project settings** menu, and then click **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Used more than 80% of the service limit`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Once per hour`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, select `administrators`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Rules are about to breach their service limits`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`There are rules about to breach their 80% processing time limit: {{breachedSummary}}.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`The following rules are about to breach:`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{{breachedRules}}`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The rule should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Rule to monitor processing time service limits'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_10.7_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.7 – Rule to monitor processing time service limits
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name your rule `Service limit 80% notification` and click **Turn it
    on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, any time a rule reaches 80% of its processing time limit, an email notification
    will be sent to the administrators allowing them to take action before the rule
    gets throttled and disabled.
  prefs: []
  type: TYPE_NORMAL
- en: Working with queued item limits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Automation rules in Jira work by using a rule processing queue. As an example,
    if you have 50 projects in your Jira instance and a single global automation rule
    that uses the *Issue updated* trigger, each time a single issue in any project
    gets updated, 50 rule executions are created and queued.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a second global automation rule that uses the *Issue updated* trigger
    will cause 100 rule executions to be created and queued; that is, one execution
    per rule per project.
  prefs: []
  type: TYPE_NORMAL
- en: If, instead, each rule was only specific to a single project, only two rule
    executions would be created and queued.
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, it is quite easy to quickly create a performance bottleneck
    if you have too many incorrectly scoped rules using non-specific triggers, and
    this is only one example.
  prefs: []
  type: TYPE_NORMAL
- en: Using JQL searches in a scheduled trigger or in a related issues branch using
    the *Branch rule / related issues* component can also lead to more issues than
    the service limits allow being queued per rule.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Rules that breach the queued items limit are disabled automatically by the rule
    engine to prevent any further executions, and the details of the breach are recorded
    in the audit log.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prevent your rules from queueing too many items, you should consider the
    following guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the narrowest scope possible for your rules. If the rule only needs to operate
    on a single project or a small group of projects, restrict the scope accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a trigger such as the *Field value changed* trigger, rather than the *Issue
    created* or *Issue updated* trigger, when your rule is only interested in changes
    to a specific field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit the number of issues returned by JQL queries by making the query as specific
    as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the *Branch rule / related issues* component sparingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we have learned what the various service limits imposed by
    the automation rule engine are and how we can use this knowledge to write more
    efficient rules. In the following section, we'll learn how you can use performance
    insights to gain an overview of the overall performance of your automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: Gaining insights on performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ensure the overall success of your automation rules and that performance
    is maintained at a satisfactory level requires that you keep an eye out for any
    issues that could cause problems in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: We have already seen how the audit log can give you insights into whether your
    rules are running successfully or with errors, or are causing performance issues
    and being throttled. In addition to this, having the ability to monitor and proactively
    notify the administrators when rules threaten to breach their service limits helps
    you to keep an eye on things.
  prefs: []
  type: TYPE_NORMAL
- en: While this does help, it can be time consuming to go through and examine the
    audit logs, especially when you have a large number of rules executing frequently.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll look at the performance insights feature of automation
    rules, which will give you a bird's-eye view of the overall performance of your
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: Performance insights are available to both project administrators and global
    administrators. Project administrators are able to view the performance of all
    the rules within their project, while for global administrators, the performance
    insights give an overview of every automation rule in the system.
  prefs: []
  type: TYPE_NORMAL
- en: To access the performance insights as a project administrator, navigate to **Project
    settings**, and then select the **Automation** link from the left menu (use the
    **Project automation** link if you use *Jira Server* or *Jira Data Center*). Then,
    click the ellipsis (**…**) button and select the **View performance insights**
    menu item.
  prefs: []
  type: TYPE_NORMAL
- en: To access the global performance insights, click the settings (**cog**) icon
    in the top menu bar and then select **System**. Click on **Automation rules**
    in the left menu area and finally, click the ellipsis (**…**) button and select
    the **View performance insights** menu item.
  prefs: []
  type: TYPE_NORMAL
- en: 'The performance insights screen is shown in the following screenshot and is
    similar for both project and global performance insights:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Viewing performance insights'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.8_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.8 – Viewing performance insights
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at the various aspects of the performance insights:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the time resolution options to select whether the graph shows the last hour,
    day, week, or month's worth of rule executions. Click the circular arrow icon
    to refresh the data on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each data point, the graph shows the total number of rule executions, the
    number of successful rule executions, the number of executions with errors, and
    the number of executions that were throttled. Hovering over the graph with your
    mouse will show you the actual number for each of the data points.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The drop-down menu directly above the table allows you to select what data is
    displayed in the rule status columns on the right-hand side of the table. The
    available options are **Execution count**, **Average duration (s)**, and **Total
    duration (s)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The table below the graph shows the top 20 rules that are displayed on the graph.
    These are sorted by descending execution count by default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can sort the table by **Execution count**, **Total duration**, or **Average
    duration** in ascending or descending order by clicking on each of the appropriate
    column headings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicking on a rule name will take you to the audit log for that particular rule,
    which will allow you to examine the log in more detail.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, the performance insights let you quickly see how your rules
    are performing and allow you to drill down into the problem rules.
  prefs: []
  type: TYPE_NORMAL
- en: Using the performance insights sorted by average duration will allow you to
    see which rules are taking longer to run per execution. These rules could be prime
    candidates for further examination to see whether they could benefit from performance
    enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: Rules with large numbers of executions and slow durations could be candidates
    for eventually breaching the processing time limits and should be examined for
    possible improvements. There is no definitive measure about what is considered
    slow due to how the individual configuration of each Jira instance can vary. You
    should therefore examine the durations in the context of your other rules, taking
    into account the specific configurations of your Jira instance.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to approach troubleshooting our automation
    rules when things go wrong or when our rules start performing sub-optimally.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned how the audit log works and the wealth of information it provides
    in order to gain insights into what is happening when a rule is executed. In addition,
    we also learned how to make use of the audit log to output messages, which will
    help you to debug your rules.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned about the various service limits and how to monitor these using
    automation rules, giving us the ability to receive an early warning before rules
    breach their processing limits.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at the performance insights available to project and global
    administrators and learned how this gives an overview of the performance of the
    rules in the system and how we can use this to stay on top of possible performance
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: By understanding how to use the audit log for debugging, you will be able to
    write more robust rules and also be able to quickly determine when smart values
    or functions are causing rules to fail and be able to identify the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how the service limits work and how you can monitor them using both
    automation rules and by inspecting the performance insights will enable you to
    maintain the performance of your Jira instance.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be looking at another well-known automation app in
    the Atlassian ecosystem that allows us to perform more advanced automations using
    Groovy scripting.
  prefs: []
  type: TYPE_NORMAL
