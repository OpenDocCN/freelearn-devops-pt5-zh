["```\n$ docker network create \\\n --driver=weaveworks/net-plugin:2.1.3 \\\n --subnet=10.32.2.0/24 \\\n --attachable \\\n parse_net\n\n$ docker volume create mongo_data\n\n$ docker stack deploy -c mongodb.yml         parse_01\n$ docker stack deploy -c parse.yml           parse_02\n$ docker stack deploy -c parse_dashboard.yml parse_03\n$ docker stack deploy -c ingress.yml         parse_04\n```", "```\nversion: '3.3'\n\nservices:\n  mongo:\n    image: mongo:3.6.1-jessie\n    volumes:\n      - mongo_data:/data/db\n\nvolumes:\n  mongo_data:\n    external: true\n\nnetworks:\n  default:\n    external:\n      name: parse_net\n```", "```\nversion: '3.3'\n\nservices:\n\n  parse_server:\n    image: parseplatform/parse-server:2.6.5\n    command: --appId APP1 --masterKey MASTER_KEY --databaseURI mongodb://mongo/prod\n    deploy:\n      labels:\n        - \"traefik.docker.network=parse_net\"\n        - \"traefik.port=1337\"\n        - \"traefik.frontend.rule=Method: GET,POST,PUT,DELETE,OPTIONS,HEAD,CONNECT\"\n        - \"traefik.frontend.entryPoints=parse_server\"\n        - \"traefik.frontend.headers.customresponseheaders.Access-Control-Allow-Origin=*\"\n\nnetworks:\n  default:\n    external:\n      name: parse_net\n```", "```\nversion: '3.3'\n\nservices:\n\n  parse_dashboard:\n    image: parseplatform/parse-dashboard:1.1.2\n    environment:\n      - PARSE_DASHBOARD_ALLOW_INSECURE_HTTP=true\n    deploy:\n      labels:\n        - \"traefik.docker.network=parse_net\"\n        - \"traefik.port=4040\"\n        - \"traefik.frontend.rule=Method: GET,POST,PUT,DELETE,OPTIONS,HEAD,CONNECT\"\n        - \"traefik.frontend.entryPoints=parse_dashboard\"\n        - \"traefik.frontend.headers.customresponseheaders.Access-Control-Allow-Origin=*\"\n    configs:\n      - source: config.json\n        target: /src/Parse-Dashboard/parse-dashboard-config.json\n\nconfigs:\n  config.json:\n    file: ./config.json\n\nnetworks:\n  default:\n    external:\n      name: parse_net\n```", "```\n{\n  \"apps\": [\n    {\n      \"serverURL\": \"http://localhost:1337/parse\",\n      \"appId\": \"APP1\",\n      \"masterKey\": \"MASTER_KEY\",\n      \"appName\": \"APP1\",\n      \"iconName\": \"MyAppIcon.png\",\n      \"supportedPushLocales\": [\"en\", \"ru\", \"fr\"]\n    }\n  ],\n  \"users\": [\n    {\n      \"user\":\"admin\",\n      \"pass\":\"password\"\n    }\n  ],\n  \"iconsFolder\": \"icons\",\n  \"allowInsecureHTTP\": true\n}\n```", "```\nversion: '3.3'\n\nservices:\n\n  l7:\n    image: traefik:1.5.2\n    command: --docker\n      --docker.swarmmode\n      --docker.watch\n      --docker.endpoint=tcp://docker-api:2375\n      --entryPoints=\"Name:parse_server Address::1337\"\n      --entryPoints=\"Name:parse_dashboard Address::4040\"\n      --web --logLevel=DEBUG\n    ports:\n      - published: 1337\n        target: 1337\n        protocol: tcp\n        mode: host\n      - published: 4040\n        target: 4040\n        protocol: tcp\n        mode: host\n\nnetworks:\n  default:\n    external:\n      name: parse_net\n```", "```\n{\"error\": \"Could not lookup number: +661234567\"}\n```", "```\npublic Object handleRequest(String body) {\n    if (body == null || body.isEmpty()) {\n        body = \"{}\";\n    }\n     Input input;\n    try {\n        val mapper = new ObjectMapper();\n        input = mapper.readValue(body, Input.class);\n    } catch (IOException e) {\n        return new Error(e.getMessage());\n    }\n     if (input == null) {\n        return new Error(body);\n     }\n     /* process the rest of business logic */\n}\n```", "```\n@Data\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic static class Input {\n    private Transfer object;\n}\n\n@Data\n@NoArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic static class Transfer {\n    private String objectId;\n    private String from;\n    private String to;\n    private Double amount;\n    private Boolean sent;\n    private Boolean processed;\n}\n\n@Data\n@AllArgsConstructor\npublic static class Success {\n    private Transfer success;\n}\n\n@Data\n@AllArgsConstructor\npublic static class Error {\n    private String error;\n}\n```", "```\nplugins {\n    id 'io.franzbecker.gradle-lombok' version '1.11'\n    id 'java'\n    id 'groovy'\n    id 'application'\n}\n\nmainClassName = 'App'\n\ndependencies {\n    // FN Project\n    compile 'com.fnproject.fn:api:1.0.56'\n\n    // JSON encoding\n    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.4'\n    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'\n\n    // REST client\n    compile 'com.squareup.okhttp3:okhttp:3.9.1'\n\n    // Simplify Java syntax\n    compile group: 'org.projectlombok', name: 'lombok-maven',\n            version: '1.16.20.0', ext: 'pom'\n\n    // Ethereum Client\n    compile 'org.web3j:core:3.2.0'\n\n    // Testing\n    testCompile 'com.fnproject.fn:testing:1.0.56'\n    testCompile 'junit:junit:4.12'\n    testCompile 'org.codehaus.groovy:groovy-all:2.4.12'\n    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'\n}\n\nrepositories {\n    mavenCentral()\n    jcenter()\n    maven {\n        url \"https://dl.bintray.com/fnproject/fnproject\"\n    }\n}\n```", "```\nFROM fnproject/fn-java-fdk:jdk9-1.0.56\n\nWORKDIR /function\n\nCOPY ./build/install/routing_fn/lib/*.jar /function/app/\n\nCMD [\"com.example.fn.TransferFunction::handleRequest\"]\n```", "```\ndocker run \\\n --name fnserver \\\n --detach \\\n -v /var/run/docker.sock:/var/run/docker.sock \\\n -v fn_vol:/app/data \\\n -p 28080:8080 \\\n --network=parse_net \\\n --network-alias=fn_gateway \\\n -e FN_LOG_LEVEL=debug \\\n -e FN_NETWORK=parse_net \\\n fnproject/fnserver\n```", "```\n./gradlew installDist\n\nVERSION=$1\n\ndocker build -t chanwit/routing_fn:$VERSION .\ndocker push chanwit/routing_fn:$VERSION\n\nfn routes delete demo /routing_fn\nfn routes create /routing_fn -i chanwit/routing_fn:$VERSION demo\n```", "```\n./buildAndPush v1\n```", "```\ncontract TransferState {\n\n  enum State { NONE, STARTED, PENDING, COMPLETED }\n\n  string txId;\n  State state;\n\n  function TransferState(string _txId) {\n    state = State.NONE;\n    txId = _txId;\n  }\n\n  function start() public {\n    require(state == State.NONE);\n    state = State.STARTED;\n  }\n\n  function pending() public {\n    require(state == State.STARTED);\n    state = State.PENDING;\n  }\n\n  function complete() public {\n    require(state == State.PENDING);\n    state = State.COMPLETED;\n  }\n\n  function currentState() public constant returns (uint8) {\n    return uint8(state);\n  }\n}\n```", "```\ncontract TransferStateRepository {\n\n    event TransferStarted(string txId);\n    event TransferPending(string txId);\n    event TransferCompleted(string txId);\n\n    mapping(bytes32 => address) states;\n\n    function start(string txId) public {\n        /* register the state, set to STARTED */\n        TransferStarted(txId);\n    }\n\n    function pending(string txId) public {\n        /* check the state, set to PENDING */\n        TransferPending(txId);\n    }\n\n    function complete(string txId) public {\n        /* check the state, set to COMPLETED */\n        TransferCompleted(txId);\n    }\n\n    function getStateOf(string txId) public constant returns (string) {\n        /**/\n        if (state == 0) return \"NONE\";\n        else if (state == 1) return \"STARTED\";\n        else if (state == 2) return \"PENDING\";\n        else if (state == 3) return \"COMPLETED\";\n    }\n}\n```", "```\ncontract RegistrationRepository {\n\n    mapping(bytes32 => address) registrations;\n\n    event Registered(string telNo, address registration);\n    event AlreadyExisted(string telNo);\n    event RegistrationFound(string telNo, string bank, string accNo);\n    event RegistrationNotFound(string telNo);\n\n    function register(string telNo, string bank, string accNo) public {\n        /**/\n        Registered(telNo, address(r));\n    }\n\n    function findByTelNo(string telNo) public returns (address) {\n        /**/\n        Registration r = Registration(registrations[key]);\n        RegistrationFound(telNo, to_s(r.bank()), to_s(r.accNo()));\n\n        return address(r);\n    }\n\n}\n```", "```\nvar RegistrationRepository = artifacts.require(\n  \"./v2/repository/RegistrationRepository.sol\");\nvar TransferStateRepository = artifacts.require(\n  \"./v2/repository/TransferStateRepository.sol\");\n\nmodule.exports = function(deployer) {\n\n  deployer.deploy(TransferStateRepository);\n\n  deployer.deploy(RegistrationRepository).then(function() {\n    RegistrationRepository.deployed().then(function(repo){\n      repo.register(\"+661234567\", \"faas\", \"55700\").then();\n      repo.register(\"+661111111\", \"whisk\", \"A1234\").then();\n    });\n  });\n\n};\n```", "```\ndocker run --rm --name=parity_dev -d -p 8545:8545 -p 8180:8180 \\\n --network=parse_net \\\n --network-alias=blockchain \\\n parity/parity:stable-release \\\n --geth --chain dev --force-ui \\\n --reseal-min-period 0 \\\n --jsonrpc-cors http://localhost \\\n --jsonrpc-apis all \\\n --jsonrpc-interface 0.0.0.0 \\\n --jsonrpc-hosts all\n```", "```\n$ cd eventmachine\n$ truffle exec scripts/unlock.js\n$ truffle migrate\n```", "```\n@Data\n@AllArgsConstructor\nstatic class RegistrationResult {\n    private String bankName;\n    private String accountId;\n}\n\npublic RegistrationResult lookup(String telNo) throws Exception {\n    val repo = ContractRegistry.registrationRepository();\n    val receipt = repo.findByTelNo(telNo).send();\n    val foundEvents = repo.getRegistrationFoundEvents(receipt);\n    if (foundEvents.isEmpty() == false) {\n        val reg = foundEvents.get(0);\n        return new RegistrationResult(reg.bank, reg.accNo);\n    } else {\n        val notFoundEvents = repo.getRegistrationNotFoundEvents(receipt);\n        if(notFoundEvents.isEmpty() == false) {\n            val reg = notFoundEvents.get(0);\n            return null;\n        }\n    }\n\n    throw new Exception(\"Lookup does not find any event in receipt.\");\n}\n```", "```\nprivate boolean transferStart(String txId) {\n    try {\n        val repo = ContractRegistry.transferStateRepository();\n        val receipt = repo.start(txId).send();\n        val events = repo.getTransferStartedEvents(receipt);\n        if (events.isEmpty()) {\n            return false;\n        }\n        return true;\n    } catch (Exception e) {\n        return false;\n    }\n}\n```", "```\n$ faas new hivectl --lang node\n2018/03/04 22:28:49 No templates found in current directory.\n2018/03/04 22:28:50 Attempting to expand templates from https://github.com/openfaas/templates.git\n2018/03/04 22:28:55 Fetched 11 template(s) : [csharp dockerfile go go-armhf node node-arm64 node-armhf python python-armhf python3 ruby] from https://github.com/openfaas/templates.git\nFolder: hivectl created.\n\n$ cd hivectl\n```", "```\nprovider:\n  name: faas\n  gateway: http://localhost:8080\n\nfunctions:\n  hivectl:\n    lang: node\n    handler: ./hivectl\n    image: chanwit/hivectl:0.4\n```", "```\nconst chromeless = new Chromeless({\n  launchChrome: false,\n  cdp: { host: 'chrome', port: 9222, secure: false, closeTab: true }\n})\n```", "```\nconst { Chromeless } = require('chromeless')\nconst url = 'http://hivemind/vapps/hmadmin/Accounting/FinancialAccount/FinancialAccountTrans?finAccountId='\n\nmodule.exports = (content, callback) => {\n\n  async function run(accountId, amount) {\n\n    const chromeless = new Chromeless({\n      launchChrome: false,\n      cdp: { host: 'chrome', port: 9222, secure: false, closeTab: true }\n    })\n\n    const screenshot = await chromeless\n      .goto('http://hivemind/Login/logout')\n      .click('#TestLoginLink_button')\n      .wait('.btn-danger')\n      .goto(url + accountId)\n      .wait('#AdjustDialog-button')\n      .click('#AdjustDialog-button')\n      .type(amount, '#AdjustFinancialAccount_amount')\n      .mousedown('#select2-AdjustFinancialAccount_reasonEnumId-container')\n      .mouseup('#select2-AdjustFinancialAccount_reasonEnumId-container')\n      .press(40, 5)\n      .press(13)\n      .click('#AdjustFinancialAccount_submitButton')\n      .screenshot()\n      .catch(e => {\n        console.log('{\"error\":\"' + e.message + '\"}')\n        process.exit(1);\n      })\n\n    console.log('{\"success\": \"ok\", \"screenshot\":\"' + screenshot + '\"}')\n\n    await chromeless.end()\n  }\n\n  const opt = JSON.parse(content)\n  run(opt.accountId, opt.amount).catch(console.error.bind(console))\n\n};\n```", "```\n$ faas build -f ./hivectl.yml\n...\nSuccessfully built 1f7cc398fc61\nSuccessfully tagged chanwit/hivectl:0.4\nImage: chanwit/hivectl:0.4 built.\n[0] < Building hivectl done.\n[0] worker done.\n```", "```\ndocker run -d --network=parse_net \\\n --network-alias=chrome \\\n --cap-add=SYS_ADMIN \\\n justinribeiro/chrome-headless\n```", "```\n$ docker run -p 10000:80 \\\n -d --network=parse_net \\\n --network-alias=hivemind \\\n moqui/hivemind\n```", "```\npublic boolean faasAdjust(String txId, \n                          String accountId, \n                          Double amount) throws Exception {\n    val env = System.getenv(\"FAAS_GATEWAY_SERVICE\");\n    val faasGatewayService = (env == null? \"http://gateway:8080\" : env);\n\n    val JSON = MediaType.parse(\"application/json; charset=utf-8\");\n    val client = new OkHttpClient();\n    val json = new ObjectMapper().writeValueAsString(new HashMap<String,String>(){{\n        put(\"accountId\", accountId);\n        put(\"amount\", String.valueOf(amount));\n    }});\n    val body = RequestBody.create(JSON, json);\n    val request = new Request.Builder()\n            .url(faasGatewayService + \"/function/hivectl\")\n            .post(body)\n            .build();\n    val response = client.newCall(request).execute();\n    System.out.println(response);\n\n    if(response.code() == 200) {\n        val str = response.body().string();\n        return true;\n    }\n\n     throw new Exception(response.toString());\n}\n```", "```\nfunc main() {\n  input := os.Args[1]\n\n  // OpenWhisk params are key/value paris\n  params := map[string]interface{}{}\n  err := json.Unmarshal([]byte(input), params)\n  if err != nil {\n    fmt.Printf(`{\"error\":\"%s\", \"input\": \"%s\"}`, err.Error(), string(input))\n    os.Exit(-1)\n  }\n\n  entry := Entry{\n    Account: Account{\n      Id: params[\"accountId\"].(string),\n    },\n    Amount: params[\"amount\"].(float64),\n  }\n\n  jsonValue, err := json.Marshal(entry)\n  if err != nil {\n    fmt.Printf(`{\"error\":\"%s\"}`, err.Error())\n    os.Exit(-1)\n  }\n\n  accountService := os.Getenv(\"ACCOUNT_SERVICE\")\n  if accountService == \"\" {\n    accountService = \"http://accounting:8080/entries\"\n  }\n\n  resp, err := http.Post(accountService,\n    \"application/json\",\n    bytes.NewBuffer(jsonValue))\n\n  if err != nil {\n    fmt.Printf(`{\"error\":\"%s\"}`, err.Error())\n    os.Exit(-1)\n  }\n\n  if resp.StatusCode >= 200 resp.StatusCode <= 299 {\n    fmt.Println(`{\"success\": \"ok\"}`)\n    os.Exit(0)\n  }\n\n  fmt.Printf(`{\"error\": \"%s\"}`, resp.Status)\n}\n```", "```\n# Stage 0\nFROM golang:1.8.5-alpine3.6\n\nWORKDIR /go/src/app\nCOPY account_ctl.go .\n\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo -ldflags '-extldflags \"-static\"' -o exec account_ctl.go\n\n# Stage 1\nFROM openwhisk/dockerskeleton\n\nENV FLASK_PROXY_PORT 8080\n\nCOPY --from=0 /go/src/app/exec /action/\nRUN chmod +x /action/exec\n\nCMD [\"/bin/bash\", \"-c\", \"cd actionProxy python -u actionproxy.py\"]\n```", "```\n$ docker build -t chanwit/account_ctl:v1 .\n$ docker push chanwit/account_ctl:v1\n\n$ wsk -i action delete account_ctl\n$ wsk -i action create --docker=chanwit/account_ctl:v1 account_ctl\n```", "```\ninvoker:\n    image: openwhisk/invoker@sha256:3a7dcee078905b47306f3f06c78eee53372a4a9bf47cdd8eafe0194745a9b8d6\n    command: /bin/sh -c \"exec /init.sh 0 >> /logs/invoker-local_logs.log 2> 1\"\n    privileged: true\n    pid: \"host\"\n    userns_mode: \"host\"\n    links:\n      - db:db.docker\n      - kafka:kafka.docker\n      - zookeeper:zookeeper.docker\n    depends_on:\n      - db\n      - kafka\n    env_file:\n      - ./docker-whisk-controller.env # env vars shared\n      - ~/tmp/openwhisk/local.env # generated during make setup\n    environment:\n      COMPONENT_NAME: invoker\n      SERVICE_NAME: invoker0\n      PORT: 8085\n\n      KAFKA_HOSTS: kafka.docker:9092\n      ZOOKEEPER_HOSTS: zookeeper.docker:2181\n\n      DB_PROVIDER: CouchDB\n      DB_PROTOCOL: http\n      DB_PORT: 5984\n      DB_HOST: db.docker\n      DB_USERNAME: whisk_admin\n      DB_PASSWORD: some_passw0rd\n\n      EDGE_HOST: ${DOCKER_COMPOSE_HOST}\n      EDGE_HOST_APIPORT: 443\n\n      CONFIG_whisk_containerFactory_containerArgs_network: parse_net\n\n      WHISK_API_HOST_NAME: ${DOCKER_COMPOSE_HOST}\n    volumes:\n      - ~/tmp/openwhisk/invoker/logs:/logs\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /var/lib/docker/containers:/containers\n      - /sys/fs/cgroup:/sys/fs/cgroup\n    ports:\n      - \"8085:8085\"\n```", "```\ndocker run -p 18080:8080 -d \\\n --network=parse_net \\\n --network-alias=accounting \\\n --name accounting \\\n chanwit/accounting:0.1\n```", "```\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n\n        val tsrContract = ContractRegistry.unlock((web3j, tm) -> {\n            return TransferStateRepository.load(\n                        \"0x62d69f6867a0a084c6d313943dc22023bc263691\",\n                        web3j, tm, ManagedTransaction.GAS_PRICE, Contract.GAS_LIMIT);\n        });\n\n        tsrContract.transferCompletedEventObservable(\n            DefaultBlockParameterName.LATEST,\n            DefaultBlockParameterName.LATEST).subscribe(event -> {\n\n            System.out.printf(\"Transfer completed: %s\\n\", event.txId );\n\n        });\n    }\n\n}\n```", "```\nplugins {\n    id 'io.franzbecker.gradle-lombok' version '1.11'\n    id 'java'\n    id 'application'\n}\n\nmainClassName = \"event.listener.Main\"\n\nrepositories {\n    mavenCentral()\n    jcenter()\n}\n\ndependencies {\n    compile 'org.slf4j:slf4j-api:1.7.21'\n    compile 'org.web3j:core:3.2.0'\n\n    testCompile 'junit:junit:4.12'\n}\n```", "```\nFROM openjdk:8u151-jdk-alpine\n\nRUN mkdir /app\nCOPY ./build/install/listener/lib/*.jar /app/\n\nENV BLOCKCHAIN_SERVICE http://blockchain:8545/\n\nWORKDIR /app\nCMD [\"java\", \"-cp\", \"*\", \"event.listener.Main\"]\n```", "```\n$ gradle installDist\n\n$ docker build -t chanwit/listener:v1 .\n$ docker push chanwit/listener:v1\n```", "```\nvar networkingConfig *docker.NetworkingConfig\nfnNetwork := os.Getenv(\"FN_NETWORK\")\nif fnNetwork != \"\" {\n    log.Debugf(\"Env FN_NETWORK found: %s. Create container %s with network.\", \n               fnNetwork, task.Id())\n    networkingConfig = docker.NetworkingConfig{\n        EndpointsConfig: map[string]*docker.EndpointConfig{\n            fnNetwork: {\n                Aliases: []string{task.Id()},\n            },\n        },\n    }\n}\ncontainer := docker.CreateContainerOptions{\n    Name: task.Id(),\n    Config: docker.Config{\n        Env: envvars,\n        Cmd: cmd,\n        Memory: int64(task.Memory()),\n        MemorySwap: int64(task.Memory()),\n        KernelMemory: int64(task.Memory()),\n        CPUShares: drv.conf.CPUShares,\n        Hostname: drv.hostname,\n        Image: task.Image(),\n        Volumes: map[string]struct{}{},\n        OpenStdin: true,\n        AttachStdin: true,\n        StdinOnce: true,\n    },\n    HostConfig: docker.HostConfig{\n        LogConfig: docker.LogConfig{\n            Type: \"none\",\n        },\n    },\n    NetworkingConfig: networkingConfig,\n    Context: ctx,\n}\n```"]