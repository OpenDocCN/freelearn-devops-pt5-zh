- en: Scaling Your Infrastructure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展你的基础设施
- en: In this chapter, we are going to analyze all the technologies used to deploy
    a complete web application in **Amazon Web Services** (**AWS**). In particular,
    we will look at how to create a monolithic application in one single machine and
    decompose the application into multiple pieces in order to achieve scalability
    and reliability.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将分析用于在**Amazon Web Services**（**AWS**）中部署完整Web应用程序的所有技术。特别是，我们将研究如何在单台机器上创建单体应用程序，并将应用程序拆分为多个部分，以实现可扩展性和可靠性。
- en: Every section of this chapter first has a theoretical part that focuses on the
    overarching idea as well as the AWS technologies necessary to implement it. It
    also has a practical example, which makes it possible to put what is explained *into
    action*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的每个部分首先都有一个理论部分，重点介绍概念的整体思想以及实现所需的AWS技术。它还包括一个实际示例，使读者能够将所讲解的内容*付诸实践*。
- en: Starting with the monolith approach to all the software on a single machine,
    we are going to see when and why it is convenient to break it into multiple pieces
    to achieve better scalability and reliability. To do this, moving the data (also
    called the state of the application) outside of the EC2 machine is the first step
    that can be performed using RDS, the database service in the Amazon cloud universe.
    Adding a load balancer can add many advantages, from using the **AWS Certification
    Manager** (**ACM**), to preparing the infrastructure and scaling in and out. Configuring
    Auto Scaling group / launch configuration is the last step to enabling scalability
    in and out for our application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从单体方法开始，将所有软件集中在一台机器上，我们将看到在何时何种情况下，将其拆分为多个部分以实现更好的可扩展性和可靠性是方便的。为了做到这一点，将数据（也称为应用程序的状态）移出EC2机器是可以使用RDS（Amazon云中的数据库服务）完成的第一步。添加负载均衡器可以带来许多优势，从使用**AWS证书管理器**（**ACM**）到准备基础设施和实现横向扩展。配置自动扩展组/启动配置是为我们的应用程序启用横向扩展的最后一步。
- en: Technical requirements
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, basic knowledge of the AWS console is assumed. This was covered
    in the previous chapters as well as in the Terraform configuration already completed
    in [Chapter 4](1528f579-c596-4cda-8f8c-09f2c7772c5e.xhtml), *Infrastructure as
    Code with Terraform*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假定具有AWS控制台的基础知识。这些内容在前几章中已经覆盖，以及在[第4章](1528f579-c596-4cda-8f8c-09f2c7772c5e.xhtml)中完成的Terraform配置中提到，*使用Terraform进行基础设施即代码*。
- en: A public domain is available in the AWS account. This can be useful for testing
    all aspects of a web application, but this is only an optional step.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS账户中提供一个公共域。这对于测试Web应用程序的各个方面非常有用，但这只是一个可选步骤。
- en: Basic knowledge of Linux command-line tool is also required because the example
    is built with an Amazon Linux 2 operating system. The code files included within
    the chapter can be found on GitHub at link: [https://github.com/giuseppeborgese/effective_devops_with_aws__second_edition](https://github.com/giuseppeborgese/effective_devops_with_aws__second_edition).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要具备Linux命令行工具的基础知识，因为该示例是在Amazon Linux 2操作系统上构建的。本章中包含的代码文件可以在GitHub上找到，链接：[https://github.com/giuseppeborgese/effective_devops_with_aws__second_edition](https://github.com/giuseppeborgese/effective_devops_with_aws__second_edition)。
- en: A monolithic application
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个单体应用程序
- en: The purpose of this chapter is to introduce and lead the reader to transform
    what is commonly called *monolithic* *application* into a dynamic and scalable
    application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是引导读者将通常称为*单体* *应用程序*的内容，转变为一个动态且可扩展的应用程序。
- en: What is a monolithic application?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是单体应用程序？
- en: 'When people talk about scaling, they often use the term **monolithic application**.
    But what is this, exactly? Usually, this refers to a software or an infrastructure
    where everything (including the presentation part, backend, and data part) is
    combined in a single block, called a monolith. In our case, we are focusing on
    the infrastructure. To explain the concept of a monolithic application, we are
    going to build an example application with the following components as shown in
    the figure below:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们谈论扩展时，他们通常会使用**单体应用程序**这个术语。那么，这到底是什么呢？通常，这指的是一个软件或基础设施，其中所有内容（包括展示部分、后端和数据部分）都被合并为一个单一模块，称为单体。在我们的例子中，我们关注的是基础设施。为了说明单体应用程序的概念，我们将构建一个包含以下组件的示例应用程序，如下图所示：
- en: A MySQL database where there is only one table with a single numeric field
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个MySQL数据库，只有一个表，里面有一个数字字段
- en: A backend frontend Java/Tomcat listening on the default `8080` port component
    that reads the database, shows the value, and increments the numeric value
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个后端前端 Java/Tomcat 服务，监听默认的 `8080` 端口，读取数据库，显示数值并增加数值
- en: An Apache 2.2 web server listening on default port `80` that communicates with
    the Tomcat and shows the web page
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个监听默认端口 `80` 的 Apache 2.2 Web 服务器，与 Tomcat 通信并显示网页
- en: Everything contained in a single EC2 virtual machine with a public IP assigned
    to it to communicate on the internet
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有内容都包含在一个分配了公网 IP 地址的单个 EC2 虚拟机中，以便在互联网上进行通信
- en: '![](img/d9be6f94-10f5-4274-9aa7-bce565976e0e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9be6f94-10f5-4274-9aa7-bce565976e0e.png)'
- en: 'Let''s create an example application that allows us to break and scale it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例应用程序，允许我们进行拆分和扩展：
- en: 'We learned how to use Terraform in the previous chapters. To build the EC2
    machine and the security group showed in the following screenshot, we can use
    this module called **monolith application**. To use it in your account you need
    to change the initialization parameters and provide your personal: `* vpc-id *
    subnet * pem` key. For the AMI instead you can find the right one following the
    indication in the following screenshot. This example was tested with North Virginia
    Amazon region and operative system Amazon Linux 2. Find the AMI ID for your region
    as it is shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的章节中学习了如何使用 Terraform。为了构建 EC2 实例和安全组，可以使用名为 **monolith application** 的模块。如要在你的账户中使用它，需要更改初始化参数并提供你的个人信息：`*
    vpc-id * subnet * pem` 密钥。至于 AMI，你可以根据以下截图中的提示找到合适的 AMI。这个示例是在北弗吉尼亚 Amazon 区域和
    Amazon Linux 2 操作系统上测试的。找到你所在区域的 AMI ID，如以下截图所示：
- en: '![](img/7c9d8f88-a3f3-4bd8-a84c-a39842a9b079.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c9d8f88-a3f3-4bd8-a84c-a39842a9b079.png)'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The commands that create the modules are always as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模块的命令总是如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should have in the output the following result:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在输出中得到以下结果：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you wait a few minutes to let the application run and install all the software
    and configurations, you can put the URL in your browser and see the one shown
    in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你等几分钟，让应用程序运行并安装所有软件和配置，你可以在浏览器中输入 URL，看到如下截图所示的内容：
- en: '![](img/9afd02a3-939c-4360-b423-74c255e885e0.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9afd02a3-939c-4360-b423-74c255e885e0.png)'
- en: 'If you receive this result, you should wait a few minutes. If this doesn''t
    resolve the error, something probably went wrong in the installation. The error
    message is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到这个结果，你需要等待几分钟。如果这不能解决错误，可能在安装过程中出了问题。错误信息如下：
- en: '![](img/14985c87-fc7f-4bb5-b341-5a41f2370a67.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14985c87-fc7f-4bb5-b341-5a41f2370a67.png)'
- en: Of course, your public IP will be different from this one. Every time you refresh
    the page or the URL is opened from any source, the Java application reads the
    value from the MySQL database, increments the value of 1 unit, and writes in the
    same database field.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你的公网 IP 地址会与此不同。每次刷新页面或从任何来源打开 URL 时，Java 应用程序都会从 MySQL 数据库读取数值，增加 1 单位的值，并写入相同的数据库字段。
- en: 'It is worth spending some lines of code to see how everything was installed.
    This code is found inside the `monolith_application` module shown above:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 值得写几行代码来查看一切是如何安装的。这个代码位于上面显示的 `monolith_application` 模块中：
- en: 'These lines are the installation script for the `monolith_application`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `monolith_application` 的安装脚本：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now install  MySQL (MariaDB)—this is the MySQL type that is available in the
    Amazon Linux 2 **Long Term Support** (**LTS**) default repository as well as Apache
    2 and Java software.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在安装 MySQL（MariaDB）——这是 Amazon Linux 2 **长期支持**（**LTS**）默认仓库中提供的 MySQL 类型，同时也包含
    Apache 2 和 Java 软件。
- en: 'The following is the installation script we started to explain before::'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们之前开始解释的安装脚本：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Apache is configured to pass the traffic to the Tomcat on port `8080`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 已配置为将流量转发到 `8080` 端口上的 Tomcat。
- en: 'To set up the MySQL in a non-interactive way, I used these lines to create
    a database, table, and user for the Java application as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以非交互方式设置 MySQL，我使用了以下几行代码来为 Java 应用程序创建数据库、表和用户：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `user_data` script is inside the `module_application` and it is provided
    as a parameter to the `user_data` field. It downloads an example Java application
    that saves the result in the database. To simplify the installation, the `.jar`
    file also contains the Tomcat. This is acceptable for a playground but not for
    a real usage:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_data` 脚本位于 `module_application` 中，并作为参数提供给 `user_data` 字段。它下载一个示例 Java
    应用程序，将结果保存到数据库中。为了简化安装，`.jar` 文件中还包含了 Tomcat。这对于实验环境是可以接受的，但不适合实际使用：'
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To run this Tomcat at startup as a service, the `.jar` and the configuration
    file are downloaded and the configuration is made automatically.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Tomcat 在启动时作为服务运行，`.jar` 文件和配置文件会被下载，并且配置会自动完成。
- en: Anyway, the purpose of the `playground` application is to have something that
    saves the result of its computation (called the **state**) inside a database.
    Every time the url is referred to, the state is read from the database, incremented,
    and saved again.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，`playground` 应用程序的目的是保存其计算结果（称为**状态**）到数据库中。每次访问该 URL 时，状态会从数据库中读取、递增并重新保存。
- en: Associating a DNS name
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关联一个 DNS 名称
- en: It is not indispensable for the exercise, but if you have a public domain register,
    you can create an **A DNS record**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这对练习来说不是必须的，但如果你有公共域名注册，你可以创建一个 **A 记录**。
- en: 'You need to have a Route 53 public domain registered like mine: `devopstools.link`.
    If you don''t know how to register, go to [https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register-update.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register-update.html)
    and follow the instructions there. Based on my experience, you will need to wait
    from 30 minutes to two hours and the new domain will then be available. To create
    a record follow these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要像我一样注册一个 Route 53 公共域名：`devopstools.link`。如果你不知道如何注册，可以访问[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register-update.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-register-update.html)并按照那里的说明进行操作。根据我的经验，你需要等待大约
    30 分钟到两个小时，新域名就可以使用了。要创建记录，请按照以下步骤操作：
- en: Go to Route53 | Hosted zones and select your zone
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Route53 | 托管区，选择你的区域
- en: Click on the Create Record Set button
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建记录集”按钮
- en: Insert a name and choose the `bookapp` name
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个名称并选择 `bookapp` 名称
- en: Insert the public IP of your EC2 machine
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的 EC2 机器的公网 IP 地址
- en: 'Click on the Create button as shown in the following screenshot:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建”按钮，如下图所示：
- en: '![](img/c553d97d-f219-40b6-97e3-2f5b0690e8b0.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c553d97d-f219-40b6-97e3-2f5b0690e8b0.png)'
- en: 'Now you can use this record to query the application:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以使用此记录来查询应用程序：
- en: '![](img/07b726ab-1c21-4620-85fc-26cc0e4abe9f.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07b726ab-1c21-4620-85fc-26cc0e4abe9f.png)'
- en: Scaling a monolithic application
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展单体应用程序
- en: We have now created the infrastructure and deployed our application, which is
    working well. If the application is useful for a large number of people, there
    is a chance that the number of users, requests, and data will grow  quickly. This
    is exactly what every application owner wants.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经创建了基础设施并部署了应用程序，它运行良好。如果这个应用程序对大量用户有用，用户数量、请求量和数据量有可能会迅速增长。这正是每个应用程序所有者所希望的。
- en: 'It is possible that the EC2 that we chose is not adequate to manage a large
    amount of data anymore. The following are also possible:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可能我们选择的 EC2 已经无法有效管理大量数据。也有可能出现以下情况：
- en: 'CPU or RAM are not enough for our three programs: Apache, Tomcat, and MySQL'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 或内存不足以支持我们的三大程序：Apache、Tomcat 和 MySQL
- en: The bandwidth of the EC2 virtual machine is not enough for the number of simultaneous
    requests
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2 虚拟机的带宽不足以处理大量的并发请求
- en: Tomcat or MySQL need to store data for each user and the disk space is not enough
    anymore
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat 或 MySQL 需要为每个用户存储数据，而磁盘空间已不足以支持更多数据。
- en: MySQL and Tomcat need to read a lot of data from a single disk at the same time.
    Furthermore, there is a context switch for the single disk.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 和 Tomcat 需要同时从单个磁盘读取大量数据。此外，单个磁盘还需要进行上下文切换。
- en: 'There are two ways to scale an application. These are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展应用程序有两种方式，分别是：
- en: Scaling it vertically, which means using bigger EC2 instances so that you get
    an instance with more CPU, more memory, and better network performance
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直扩展，这意味着使用更强大的 EC2 实例，从而获得更多的 CPU、更大的内存和更好的网络性能
- en: Scaling it horizontally, which means adding more and more EC2 instances while
    running the same code and load balancing the traffic across them
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平扩展，这意味着添加更多的 EC2 实例，同时运行相同的代码，并将流量负载均衡地分配到这些实例上
- en: Right now we have monolith so we can only scale vertically. In the next section,
    we are going to break the monolith into different pieces, removing the *state* from
    the EC2 virtual disk. In this way we can add more machines and also split the
    load between the balancer and the database using the CDN.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有的是单体架构，所以我们只能进行垂直扩展。在接下来的部分，我们将把单体架构拆分成不同的部分，将*状态*从EC2虚拟磁盘中移除。这样，我们可以添加更多的机器，并且使用CDN在负载均衡器和数据库之间分配负载。
- en: 'To vertically scale our monolith, you need to follow these steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要对单体架构进行垂直扩展，您需要按照以下步骤进行：
- en: Choose a new instance type from the list at [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/)列表中选择一个新的实例类型。
- en: Switch off the instance
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭实例。
- en: 'Change the instance type:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改实例类型：
- en: '![](img/d51690c0-e8c6-4697-ae3a-7fd27d18390f.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d51690c0-e8c6-4697-ae3a-7fd27d18390f.png)'
- en: Switch on the instance
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开启实例。
- en: 'For the disk space instead, this is a little bit more complex. Here, you must
    expand the size. This procedure is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于磁盘空间而言，这有点复杂。这里，你必须扩展大小。具体步骤如下：
- en: Switch off the machine to avoid date incoherency.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭机器以避免日期不一致。
- en: Detach each volume attached to the instance. However, before doing this, make
    a note of the device used: `/dev/sda1` or `/dev/xdc` ecc.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分离每个附加到实例的卷。然而，在此之前，请记录所使用的设备：`/dev/sda1` 或 `/dev/xdc` 等等。
- en: Make a snapshot for each volume attached to the instance.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个附加到实例的卷创建快照。
- en: For each snapshot created in the previous step, create a new volume. You need
    to specify the desired size of the volume.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于前一步创建的每个快照，创建一个新卷。你需要指定卷的所需大小。
- en: Attach each new volume to the instance using the same device name as in step
    2.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用与第2步相同的设备名称，将每个新卷附加到实例。
- en: Switch the machine on.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开启机器。
- en: Log in to the machine and resize the filesystem using the guide for Linux and
    for Windows. For more details please refer to the *Further reading* section toward
    the end of the chapter.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到机器并使用Linux和Windows的指南调整文件系统大小。有关更多细节，请参阅章节末尾的*进一步阅读*部分。
- en: Advantages of a monolith
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单体架构的优点
- en: 'Before breaking and scaling our monolith, it is important to know whether or
    not it is worth making the effort for our application. Let''s examine all the
    advantages of a single block architecture:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在拆分并扩展我们的单体架构之前，重要的是要了解是否值得为我们的应用程序付出努力。让我们来看看单一块架构的所有优点：
- en: The first advantage for sure is the infrastructure cost. Here, we are going
    to break into multiple and scalable pieces but this means that we need to pay
    for each piece of this architecture. The final cost of the infrastructure will
    be higher than the single monolith.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个优点肯定是基础设施成本。在这里，我们将其拆分成多个可扩展的部分，但这意味着我们需要为架构的每个部分付费。最终的基础设施成本将高于单一的单体架构。
- en: The cost to build a multi-tier scalable architecture will definitely be much
    more complex than a monolithic one. This means more time to build and more competencies
    required to do that. The purpose of this book is also to reduce this competency
    gap.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个多层可扩展架构的成本肯定比单体架构要复杂得多。这意味着需要更多的时间来构建，并且需要更多的技能来完成。此书的目的之一就是缩小这些技能差距。
- en: An articulated architecture requires many settings. For example, correctly configuring
    the security group, choosing the right balancer, choosing the right RDS,  and
    configuring S3 or EFS to move out the state from the virtual disk. An exception
    to this is the SSL configuration. Configuring SSL using the AWS Certificate Manager
    is much easier than buying and configuring an SSL certificate for Apache.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个分布式架构需要许多设置。例如，正确配置安全组，选择合适的负载均衡器，选择合适的RDS，以及配置S3或EFS以将状态从虚拟磁盘中移出。唯一的例外是SSL配置。使用AWS证书管理器配置SSL比购买并为Apache配置SSL证书要容易得多。
- en: So, if you do not expect much traffic, your budget is limited. You can consider
    building a *monolith* infrastructure to host your web application. Of course,
    keep in mind the scalable limitation and the downtime that you need to accept
    when you want to scale up or down vertically.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你预期流量不大，预算有限，你可以考虑构建一个*单体*架构来托管你的Web应用程序。当然，请记住，当你想垂直扩展时，需要接受可扩展性限制和停机时间。
- en: The database
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库
- en: Now that we are aware of the benefits and disadvantages of a monolith application
    and we have decided to break our app into multiple pieces, it is time to move
    the first resource outside of the monolith.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了单体应用的优缺点，并决定将应用拆分成多个部分，是时候将第一个资源移出单体应用了。
- en: As we anticipated in the first section of this chapter, it is necessary to move
    the data (also called *state*) outside  of the EC2 machine. In some web applications,
    the database is the only data source. However, in others, there are also files
    uploaded from the users saved directly on the disk or index files if you use an
    index engine such as **Apache Solr**. For more information on this, refer to [http://lucene.apache.org/solr/](http://lucene.apache.org/solr/)
    .
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章第一节中预期的那样，必须将数据（也称为*状态*）移出 EC2 机器。在某些 web 应用中，数据库是唯一的数据源。然而，在其他一些应用中，还可能有从用户上传的文件直接保存到磁盘上的数据，或者如果使用如**Apache
    Solr**这样的索引引擎，也可能会有索引文件。有关更多信息，请参阅[http://lucene.apache.org/solr/](http://lucene.apache.org/solr/)。
- en: When possible, it is always convenient to use a cloud service instead to install
    a program in a virtual machine. For a database, the RDS  service ([https://aws.amazon.com/rds/](https://aws.amazon.com/rds/))
    provides a large set of open or closed source (Amazon Aurora, PostgreSQL, MySQL,
    MariaDB, Oracle, and Microsoft SQL Server), so if you need an **IBM Db2** [https://www.ibm.com/products/db2-database](https://www.ibm.com/products/db2-database)
    you can use the RDS service for your database.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能的话，使用云服务总是比在虚拟机中安装程序更方便。对于数据库，RDS 服务([https://aws.amazon.com/rds/](https://aws.amazon.com/rds/))提供了一个大型的开源或闭源数据库集合（Amazon
    Aurora、PostgreSQL、MySQL、MariaDB、Oracle 和 Microsoft SQL Server），因此，如果你需要**IBM Db2**，[https://www.ibm.com/products/db2-database](https://www.ibm.com/products/db2-database)，你可以使用
    RDS 服务来托管你的数据库。
- en: To create our MySQL RDS instance, refer to the module is available in the official
    registry at [https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/1.21.0:](https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/1.21.0)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的 MySQL RDS 实例，请参考官方注册表中的模块：[https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/1.21.0:](https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/1.21.0)
- en: '![](img/6ccf67d1-bc18-4460-a2f0-c990e4755d8c.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ccf67d1-bc18-4460-a2f0-c990e4755d8c.png)'
- en: It is important to consider that, when splitting the pieces, it is necessary
    to correctly configure security groups in order to allow access from the EC2 instance
    to the RDS instance on port `3306`. This also avoids unnecessary access to the
    database.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在拆分应用时，必须正确配置安全组，以允许从 EC2 实例通过端口`3306`访问 RDS 实例。这也有助于避免不必要的数据库访问。
- en: For the subnet, it is mandatory to keep a public subnet for the EC2 instance.
    Instead, it is convenient to choose a private one for the RDS instance. We will
    explore this topic further in [Chapter 8, ](0eb2bba9-5a84-4031-93d2-72dc4d6d4dd3.xhtml)*Hardening*
    *the Security of Your AWS Environment.*
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于子网，必须为 EC2 实例保留一个公共子网。而对于 RDS 实例，选择私有子网更加方便。我们将在[第 8 章](0eb2bba9-5a84-4031-93d2-72dc4d6d4dd3.xhtml)《*硬化*你的
    AWS 环境的安全性》中深入探讨这一话题。
- en: Moving the database to the RDS
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据库迁移到 RDS
- en: To create the MySQL database, we can use a public module that is available in
    the official repository found here: [https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/1.21.0](https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/1.21.0).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 MySQL 数据库，我们可以使用一个公共模块，该模块可在官方仓库中找到，链接如下：[https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/1.21.0](https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/1.21.0)。
- en: 'In the following code, I will simplify the original example slightly and add
    a security group as follows. Refer to the `main.tf` file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我将稍微简化原始示例，并添加一个安全组，如下所示。请参阅`main.tf`文件：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Because an RDS needs to work on an option group, a parameter group and a subnet
    group.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 RDS 需要在选项组、参数组和子网组中运行。
- en: 'You can see the new instance in the RDS console and click on it to open the
    properties as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 RDS 控制台中看到新实例，并点击它以查看其属性，如下所示：
- en: '![](img/e974351a-6087-427f-be20-efd163125314.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e974351a-6087-427f-be20-efd163125314.png)'
- en: 'Once the property of the selected instance is opened, note the value of the
    Endpoint field as shown in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开所选实例的属性，注意记录Endpoint字段的值，如以下截图所示：
- en: '![](img/84e18afa-72ba-4c17-beb8-8090951c880c.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84e18afa-72ba-4c17-beb8-8090951c880c.png)'
- en: In my case, this is `demodb.cz4zwh6mj6on.us-east-1.rds.amazonaws.com`**.**
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的例子中，这个资源是`demodb.cz4zwh6mj6on.us-east-1.rds.amazonaws.com`**。**
- en: 'Connect in SSH to the EC2 machine and try the connection to the RDS:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过SSH连接到EC2机器，并尝试连接到RDS：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the `show databases` command to see if there is the `demodb` schema:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`show databases`命令查看是否有`demodb`模式：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To transfer the database, follow these steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要转移数据库，请按照以下步骤操作：
- en: Close the Java process with the `pkill` java command
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pkill` java命令关闭Java进程
- en: 'Dump the local database with the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令转储本地数据库：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We don''t need the local database anymore, so stop it with the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不再需要本地数据库，因此使用以下命令停止它：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now restore the dump in the RDS with the following command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用以下命令在RDS中恢复转储：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Check if the content was correctly copied as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查内容是否已正确复制，如下所示：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now that the dump is correct, you need to replace the connection inside `/home/ec2-user/tomcat.sh`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转储已正确，你需要在`/home/ec2-user/tomcat.sh`中替换连接：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now find the string in the file:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在文件中找到字符串：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Replace this with the following line of code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码行替换：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Leave everything else untouched:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 保持其他设置不变：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You should now see that the output and the application are working again.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该可以看到输出并且应用程序再次正常工作。
- en: 'It is now convenient to remove the local database with the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以方便地使用以下命令删除本地数据库：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Choose the RDS type
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择RDS类型
- en: 'If you have a MySQL engine like we saw in the previous example, you can choose
    between the following instance types:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个像我们在之前示例中看到的MySQL引擎，你可以从以下实例类型中选择：
- en: MySQL Classic
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 经典版
- en: Aurora MySQL
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Aurora MySQL
- en: A new type of Serverless Aurora MySQL, found here: [https://aws.amazon.com/rds/aurora/serverless/](https://aws.amazon.com/rds/aurora/serverless/)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种新的无服务器Aurora MySQL，详见：[https://aws.amazon.com/rds/aurora/serverless/](https://aws.amazon.com/rds/aurora/serverless/)
- en: In most cases, MySQL Classic would be ideal. However, if you know that you will
    have a big amount of data to manage, Aurora MySQL is ideal. This serverless option
    is for **infrequently-used**, **variable**, and **unpredictable** workloads instead.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，MySQL 经典版是理想选择。然而，如果你知道将会有大量数据需要管理，那么Aurora MySQL是理想的选择。这个无服务器选项适用于**不常用**、**可变**和**不可预测**的工作负载。
- en: Backup
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份
- en: It is important to enable the backup for your RDS instance and choose the backup as Windows.
    This is important when you expect a low write load on your database because it
    is true that the backup will be done without downtime but it can also influence
    the performance. For more information on best practices for Amazon RDS, refer
    to [https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_BestPractices.html](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_BestPractices.html).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 启用RDS实例的备份并选择Windows作为备份类型非常重要。当你预期数据库的写入负载较低时，这一点尤为重要，因为备份将会在没有停机的情况下完成，但它也可能影响性能。有关Amazon
    RDS最佳实践的更多信息，请参考[https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_BestPractices.html](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_BestPractices.html)。
- en: You can set up a daily backup and keep a maximum of 35 snapshots. Upon restore
    you can choose one of these 35 snapshots or any moment inside these 35 days using
    the new point-in-time recovery feature. For more information on this, refer to
    [https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置每日备份，并保留最多35个快照。在恢复时，你可以选择这35个快照中的任意一个，或者选择这35天内的任何时刻，使用新的时间点恢复功能。有关更多信息，请参考[https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html)。
- en: Multi-AZ
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多可用区
- en: The multi-AZ feature available at [https://aws.amazon.com/rds/details/multi-az/](https://aws.amazon.com/rds/details/multi-az/)
    maintains a second copy of your RDS instance, using the **master-slave** technique
    in another **availability zone** (**AZ**). If there is an issue with the master
    instance (or in the whole AZ where the master instance is located), the DNS name
    is automatically switched to the slave instance. Using this feature, two RDS instances
    will always be up. In addition, the cost will be doubled. For this reason, it
    is convenient to only use it in production.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的多可用区（Multi-AZ）功能，详见[https://aws.amazon.com/rds/details/multi-az/](https://aws.amazon.com/rds/details/multi-az/)，在另一个**可用区**（**AZ**）中使用**主从**技术维护RDS实例的第二个副本。如果主实例出现问题（或所在AZ的整个区域出现问题），DNS名称将自动切换到从实例。使用此功能，两个RDS实例将始终保持在线。此外，成本将翻倍。因此，建议仅在生产环境中使用此功能。
- en: 'In the following diagram, shown is an multi-AZ architecture:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，展示了一个多可用区架构：
- en: '![](img/91c3514d-b688-4f9f-bf46-939bcaa96781.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91c3514d-b688-4f9f-bf46-939bcaa96781.png)'
- en: ElastiCache
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ElastiCache
- en: 'You can consider inserting a cache for your database in order to reduce the
    load on your RDS instance. This introduces another piece to your infrastructure
    and is also necessary for changing the software code in order to make it possible
    to use the cache instead of the RDS only. Depending on the type of data that you
    need to save in it, the AWS ElastiCache service available at [https://aws.amazon.com/elasticache/](https://aws.amazon.com/elasticache/)
    provides two types: **Redis** and **Memcached**.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以考虑为你的数据库插入缓存，以减少RDS实例的负载。这将引入另一个基础设施组件，并且需要更改软件代码，以便使其能够使用缓存，而不仅仅是使用RDS。根据你需要保存的数据类型，AWS的ElastiCache服务可提供两种类型：[https://aws.amazon.com/elasticache/](https://aws.amazon.com/elasticache/)：**Redis**
    和 **Memcached**。
- en: Elastic Load Balancer (ELB)
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹性负载均衡器（ELB）
- en: 'In this section, we are going to replace the Apache with the ELB and also add
    an SSL certificate as shown in the following diagram:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将用ELB替换Apache，并且还将添加一个SSL证书，如下图所示：
- en: '![](img/011c6db9-4325-46f4-b631-902ea94d7002.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/011c6db9-4325-46f4-b631-902ea94d7002.png)'
- en: As we did in the previous section for the RDS, it is convenient here to replace
    a software installed in an EC2 machine with a managed service.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中为RDS所做的那样，在这里用一个托管服务替换安装在EC2机器上的软件是很方便的。
- en: 'We will benefit from the following features:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从以下特性中受益：
- en: Deploy and reliability on multiple AZs
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个可用区部署并提高可靠性
- en: A web interface to manage the proxy instead of the Apache configuration files
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Web界面来管理代理，而不是Apache配置文件
- en: A fully manageable service that doesn't need to perform software upgrades
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个完全可管理的服务，不需要执行软件升级
- en: Scalability to handle requests (pre-warming is requested in some scenarios)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性以处理请求（在某些情况下需要预热）
- en: Ease of storing logs on an S3 bucket
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方便将日志存储在S3桶中
- en: Alternatively, when you use an ELB you need to follow the AWS method and you
    are not free to customize this as you want. Apache is the Swiss knife of the web
    server; it has modules that make it possible to do so many different kinds of
    operations and actions. Using an ELB, it is possible to lose something that may
    be useful, such as a redirect from HTTP to HTTPS.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，当你使用ELB时，需要遵循AWS方法，不能自由定制。Apache是Web服务器的瑞士军刀；它有许多模块，使得可以执行各种不同的操作和任务。使用ELB时，可能会丧失一些有用的功能，比如从HTTP重定向到HTTPS。
- en: Choosing the right ELB
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的ELB
- en: 'As is well documented on AWS at [https://aws.amazon.com/elasticloadbalancing](https://aws.amazon.com/elasticloadbalancing), there
    are 2 versions and 3 types of ELB available:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如AWS文档中所述，[https://aws.amazon.com/elasticloadbalancing](https://aws.amazon.com/elasticloadbalancing)，ELB有两个版本和三种类型可供选择：
- en: Version 1 with **Classic Lo****ad Balancer** (**CLB**)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本1：**经典负载均衡器**（**CLB**）
- en: Version 2 with **Application** **Load Balancer** (**ALB**) and **Network** **Load
    Balancer** (**NLB**)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本2：**应用程序负载均衡器**（**ALB**）和**网络负载均衡器**（**NLB**）
- en: 'Each product can be described as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 每个产品可以按以下方式进行描述：
- en: CLB is the first version of the Elastic Load Balancer and was made available
    in Spring 2009\. For more information on this, refer to [https://aws.amazon.com/blogs/aws/new-aws-load-balancing-automatic-scaling-and-cloud-monitoring-services/](https://aws.amazon.com/blogs/aws/new-aws-load-balancing-automatic-scaling-and-cloud-monitoring-services/). This
    is one of the most popular Load Balancer, but it is also the one with the fewest
    features.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CLB是弹性负载均衡器的第一个版本，于2009年春季发布。有关此版本的更多信息，请参阅 [https://aws.amazon.com/blogs/aws/new-aws-load-balancing-automatic-scaling-and-cloud-monitoring-services/](https://aws.amazon.com/blogs/aws/new-aws-load-balancing-automatic-scaling-and-cloud-monitoring-services/)。它是最受欢迎的负载均衡器之一，但也是功能最少的。
- en: ALB was made available during summer 2016\. For more information, refer to [https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/](https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/). This
    extends the CLB version 1 with a lot of features.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ALB在2016年夏季发布。如需更多信息，请参阅 [https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/](https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/)。这扩展了CLB版本1，增加了许多新特性。
- en: NLB was released in September, 2017\. For more information on this, refer to
    [https://aws.amazon.com/blogs/aws/new-network-load-balancer-effortless-scaling-to-millions-of-requests-per-second/](https://aws.amazon.com/blogs/aws/new-network-load-balancer-effortless-scaling-to-millions-of-requests-per-second/).
    This is complementary to the ALB and is more focused on the network level.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLB 于 2017 年 9 月发布。有关更多信息，请参见 [https://aws.amazon.com/blogs/aws/new-network-load-balancer-effortless-scaling-to-millions-of-requests-per-second/](https://aws.amazon.com/blogs/aws/new-network-load-balancer-effortless-scaling-to-millions-of-requests-per-second/)。它是
    ALB 的补充，更侧重于网络层面。
- en: 'If you want a comparison of all the features of each of these three products,
    you can take a look at the comparison table available at [https://aws.amazon.com/elasticloadbalancing/details/#compare](https://aws.amazon.com/elasticloadbalancing/details/#compare).
    However, let''s try to summarize these differences as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想比较这三种产品的所有功能，可以查看 [https://aws.amazon.com/elasticloadbalancing/details/#compare](https://aws.amazon.com/elasticloadbalancing/details/#compare)
    上的对比表。不过，让我们尝试将这些差异总结如下：
- en: You shouldn't create CLB anymore unless you have an EC2 classic network. In
    this case, you should really consider migrating to the VPC network type as soon
    as possible. You also need to be familiar with the CLB because it is the most
    popular product in the AWS Cloud environment.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非你有 EC2 经典网络，否则不应该再创建 CLB。在这种情况下，你应该尽快考虑迁移到 VPC 网络类型。你还需要了解 CLB，因为它是 AWS 云环境中最流行的产品。
- en: If you need to manage HTTP/HTTPS connections - and this applies to most of the
    web applications - you should use the ALB.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要管理 HTTP/HTTPS 连接——这适用于大多数 Web 应用程序——你应该使用 ALB。
- en: If you need to manage TCP connections or you need to control the public IP of
    your balancer instead, the NLB is the right choice. Keep in mind that you cannot
    use the SSL feature with this type of balancer.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要管理 TCP 连接，或者需要控制负载均衡器的公网 IP，那么 NLB 是正确的选择。请记住，使用这种类型的负载均衡器时，无法使用 SSL 功能。
- en: In our example, the right balancer to deploy is the ALB one. This is because
    we want to use a web application with the HTTP/S protocol and have an SSL certificate
    in it.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，部署的正确负载均衡器是 ALB。这是因为我们希望使用 HTTP/S 协议的 Web 应用程序，并且希望在其中安装 SSL 证书。
- en: Deploying the balancer
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署负载均衡器
- en: 'Now that we know what to do, it is time to adapt our application to the balancer
    according to these steps:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道该做什么了，接下来是根据这些步骤调整我们的应用程序以适配负载均衡器：
- en: Configure the security groups to allow access from the balancer to port `8080`
    in the EC2 machine. ALB ==> `8080` EC2 (we are referring to the connection from
    the Application Load Balancer to the EC2 machine). To simplify, we will give access
    to the whole VPC **Classless Inter-Domain Routing** (**CIDR**).
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置安全组，允许从负载均衡器访问 EC2 机器的 `8080` 端口。ALB ==> `8080` EC2（我们指的是从应用程序负载均衡器到 EC2 机器的连接）。为了简化，我们将允许整个
    VPC **无类域间路由** (**CIDR**) 访问。
- en: Create the ALB, connect to the EC2 machine, and verify that the machine is in
    Service.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 ALB，连接到 EC2 机器，并验证机器是否处于服务状态。
- en: Now you can change the DNS record from the public IP of the EC2 machine to the
    alias of the DNS balancer.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以将 DNS 记录从 EC2 机器的公网 IP 更改为负载均衡器的别名。
- en: Remove the Apache software from the machine; you don't need it anymore.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从机器中移除 Apache 软件；你不再需要它了。
- en: In every environment, it is convenient to deploy the balancer in more subnets
    that belong to different AZs. Keep in mind that each zone is like a datacenter
    and issues can always arise with datacenters. Deployment in multiple zones doesn't
    increase the cost  as it is for RDS instead where the cost is double if you use
    Multi AZ.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个环境中，将负载均衡器部署到多个属于不同 AZ 的子网中是很方便的。记住，每个可用区就像一个数据中心，数据中心总是可能出现问题。多个可用区部署不会增加成本，和
    RDS 不同，后者如果使用多 AZ 会双倍增加成本。
- en: In [Chapter 5](93bb1465-ceda-4cb9-823e-5a4355720a79.xhtml)*,  Adding Continuous
    Integration and Continuous Deployment* we will use Terraform to create ALB. Here,
    we will perform these changes from the web console in order to understand the
    details of each step.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 5 章](93bb1465-ceda-4cb9-823e-5a4355720a79.xhtml)*，添加持续集成和持续部署* 中，我们将使用
    Terraform 来创建 ALB。在这里，我们将通过 Web 控制台执行这些更改，以便了解每个步骤的细节。
- en: Step 1 – open the access for the port 8080 from the whole VPC CIDR
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一步 - 打开来自整个 VPC CIDR 的 8080 端口访问
- en: 'Open the access for the port 8080 from the whole VPC CIDR as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，打开来自整个 VPC CIDR 的 8080 端口访问：
- en: '![](img/0451ade3-e082-45c1-aae8-9fc130502f82.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0451ade3-e082-45c1-aae8-9fc130502f82.png)'
- en: Step 2 – Creating the ALB and associate to the EC2 machine
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤 2 – 创建 ALB 并关联到 EC2 实例
- en: 'Create the ALB and associate to the EC2 machine as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 ALB 并将其关联到 EC2 实例，如下所示：
- en: 'Go to Load Balancers | Create Load Balancer and choose the ALB by clicking
    the Create button on the Application Load Balancer section, as shown in the following
    screenshot:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 进入负载均衡器 | 创建负载均衡器，并在应用程序负载均衡器部分点击创建按钮，选择 ALB，如下图所示：
- en: '![](img/38be90d0-01d9-4c95-8b35-aa86ab76b2ec.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38be90d0-01d9-4c95-8b35-aa86ab76b2ec.png)'
- en: 'Select the internet-facing option from the Scheme section. This is important
    because we want it to be reachable from the world and we also want at least two
    subnets in two different AZs:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 从方案部分选择面向互联网选项。这一点很重要，因为我们希望它可以从全球访问，同时我们还需要至少两个不同可用区（AZ）的子网：
- en: '![](img/e456cdb1-d696-41a6-baf9-37a0273a335b.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e456cdb1-d696-41a6-baf9-37a0273a335b.png)'
- en: 'Ignore the following message:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略以下消息：
- en: '[PRE19]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, we will add a secure listener.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个安全监听器。
- en: 'To do this, click on the Create a new security group radio button for this
    load balancer and open the port `80` for HTTP:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，点击创建新安全组单选按钮，为此负载均衡器打开 HTTP 的端口 `80`：
- en: '![](img/48a501d6-b4c4-4b92-a1f0-5f17bc97c7db.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48a501d6-b4c4-4b92-a1f0-5f17bc97c7db.png)'
- en: Now create a new target group. In this group, the requests will be rotated and
    reach the EC2 instance.  The port `8080` is the port of the Tomcat software in
    the EC2 machines.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个新的目标组。在该组中，请求会轮换并到达 EC2 实例。端口 `8080` 是 EC2 实例中 Tomcat 软件的端口。
- en: 'Our `playground` application has only one URL called `/visits` so we need to
    insert that one, and this will cause an increment of the counter in the DB every
    time the health check is performed. In a real environment, you need a health check
    that performs the control with a read of the DB as opposed to a write as seen
    in the following example. In this example, it is acceptable to use this method:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `playground` 应用只有一个 URL，叫做 `/visits`，因此我们需要插入该 URL，每次健康检查执行时，数据库中的计数器会递增。在真实环境中，你需要一个通过读取数据库而非写入数据库来进行控制的健康检查，如下面的示例所示。在这个示例中，使用这种方法是可以接受的：
- en: '![](img/ccdd96f2-8afd-4696-9bdf-8e06cce7227a.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccdd96f2-8afd-4696-9bdf-8e06cce7227a.png)'
- en: 'Select the EC2 instance and click on the Add to registered button, as shown
    in the following screenshot:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 EC2 实例并点击“添加到注册”按钮，如下图所示：
- en: '![](img/767b084f-af61-494c-ad05-bc40aca1f251.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/767b084f-af61-494c-ad05-bc40aca1f251.png)'
- en: 'This instance will be added to the Registered targets list:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 该实例将被添加到注册的目标列表中：
- en: '![](img/5e29eef0-640b-4e33-975d-8b58ff992fd4.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e29eef0-640b-4e33-975d-8b58ff992fd4.png)'
- en: 'If you check now the target group just created in the Targets tab, you can
    see your instance and the Status column. If the status doesn''t become healthy in
    half a minute, there is probably an error in the configuration:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在检查刚创建的目标组中的目标选项卡，你会看到你的实例和状态栏。如果状态在半分钟内没有变为健康，可能是配置出现了错误：
- en: '![](img/bd58869c-1f39-4a95-979e-f92f8cfd7d2e.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd58869c-1f39-4a95-979e-f92f8cfd7d2e.png)'
- en: You can now check the load balancer URL as follows: `http://break-the-monolith-939654549.us-east-1.elb.amazonaws.com/visits`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以检查负载均衡器的 URL，如下所示：`http://break-the-monolith-939654549.us-east-1.elb.amazonaws.com/visits`。
- en: Again, your URL will be different from this one, but at this point, you should
    understand how it works.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，你的 URL 会与此不同，但此时你应该能理解它是如何工作的。
- en: Step 3 – creating an alias for the ELB
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤 3 – 为 ELB 创建别名
- en: 'Go to the new Route 53 zone and modify the A record created before with a CNAME
    alias, as shown in the following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 进入新的 Route 53 区域，并用 CNAME 别名修改之前创建的 A 记录，如下图所示：
- en: '![](img/329ccd2d-c410-4ca3-998b-bed03ce72984.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/329ccd2d-c410-4ca3-998b-bed03ce72984.png)'
- en: In less than 300 seconds, you should see the change and have the DNS pointing
    to the new domain.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在不到 300 秒的时间内，你应该能看到更改，且 DNS 会指向新的域名。
- en: Step 4 – removing the Apache software from the machine
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤 4 – 从机器上移除 Apache 软件
- en: 'At this point, we don''t need the Apache software in the EC2 machine anymore.
    To remove it run the following command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们不再需要 EC2 实例中的 Apache 软件。要移除它，请运行以下命令：
- en: '[PRE20]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It is also convenient to clean the security group of the EC2 machine by removing
    the access to port `80`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，清理 EC2 实例的安全组也很方便，可以移除对端口 `80` 的访问：
- en: '![](img/948c19f0-974e-4f81-93d9-4d43620f35a6.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/948c19f0-974e-4f81-93d9-4d43620f35a6.png)'
- en: Leave the SSH open to your own IP with the My IP source option.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 保持 SSH 对你的 IP 开放，选择我的 IP 来源选项。
- en: Configuring the SSL certificate
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 SSL 证书
- en: You can configure a single certificate that is valid for one DNS record such
    as `example.devopstools.link` or a generic one such as `*.devopstools.link` which
    is valid for each subdomain. My advice is to use the `*` so that you don't need
    to repeat this certificate procedure every time you have a new resource.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以配置一个仅适用于某一 DNS 记录的证书，例如 `example.devopstools.link`，或者配置一个通用的证书，如 `*.devopstools.link`，它适用于每个子域。我的建议是使用
    `*`，这样每次添加新资源时就不需要重复执行证书配置过程了。
- en: 'Certificate Manager makes it possible to acquire an SSL certificate for free
    unless you don''t use the private authority. Follow these steps  to generate an
    SSL certificate:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 证书管理器使得你可以免费获取 SSL 证书，除非你使用的是私有证书颁发机构。按照这些步骤生成 SSL 证书：
- en: 'Go to the AWS Certificate Manager service and click on the Provision certificates
    section as shown in the following screenshot:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 进入 AWS 证书管理器服务，并点击如下截图中所示的“Provision certificates”部分：
- en: '![](img/9d338173-824f-44bd-8990-7b9dd869f6da.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d338173-824f-44bd-8990-7b9dd869f6da.png)'
- en: 'Select the Request a public certificate option as shown in the following screenshot:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“Request a public certificate”选项，如下所示：
- en: '![](img/af7dce6b-f37a-48b9-8675-0acecd67ec96.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af7dce6b-f37a-48b9-8675-0acecd67ec96.png)'
- en: 'Now insert the domain name. In my case, this includes the domain name and the
    domain name with a `*`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入域名。在我的案例中，这包括域名和带有 `*` 的域名：
- en: '![](img/22237e1b-9bfa-4e0b-8acc-8aa19e768e91.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22237e1b-9bfa-4e0b-8acc-8aa19e768e91.png)'
- en: 'I decided to use the DNS validation option, but the Email validation option
    is also good. In this case, you need to have access to the email address that
    was used to register the domain:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定使用 DNS 验证选项，但电子邮件验证选项也是可以的。在这种情况下，你需要访问用于注册域名的电子邮件地址：
- en: '![](img/244e401e-2136-4c2a-81f0-a6f92719ccdd.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/244e401e-2136-4c2a-81f0-a6f92719ccdd.png)'
- en: 'The wizard prompts you to create one DNS record for each domain we inserted
    at the beginning. In our case, this refers to two domains ( `*.devopstools.link` 
    and `devopstools.link` ). You can follow the wizard and create it by clicking
    on the Create record in Route 53 button, as shown in the following screenshot:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 向导提示你为我们在开始时插入的每个域名创建一个 DNS 记录。在我们的案例中，这指的是两个域名（`*.devopstools.link` 和 `devopstools.link`）。你可以按照向导的提示点击“Create
    record in Route 53”按钮来创建记录，如下截图所示：
- en: '![](img/36d3fc90-7491-421f-8eb3-dd8075edd699.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36d3fc90-7491-421f-8eb3-dd8075edd699.png)'
- en: 'Click on the Create button for both DNS records. At this point, the record
    created will be shown:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“Create”按钮为两个 DNS 记录创建证书。此时，创建的记录将显示出来：
- en: '![](img/ebf24f55-fd4a-4380-aab3-66a28bc5a8ef.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebf24f55-fd4a-4380-aab3-66a28bc5a8ef.png)'
- en: 'In less than a minute, the status of the new SSL certificate will be Issued
    and will become available for use:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 不到一分钟，新的 SSL 证书状态将显示为“已颁发”（Issued），并且可以开始使用：
- en: '![](img/2956b4a8-63b8-4515-b878-93f37c1d207e.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2956b4a8-63b8-4515-b878-93f37c1d207e.png)'
- en: If you have ever created an SSL certificate before, you will know how simple
    and straightforward this procedure is compared to the classic one. You can now
    add the new certificate to your balancer and use an SSL listener.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前创建过 SSL 证书，你会知道与传统方法相比，这个过程是多么简单和直接。你现在可以将新证书添加到负载均衡器中，并使用 SSL 监听器。
- en: 'First of all, you need to open the security group of your ALB for the new port
    `443` as shown in the following screenshot:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要为新端口 `443` 打开 ALB 的安全组，如下截图所示：
- en: '![](img/78c9a547-9dc7-42d0-9b5d-ea07bfe2a406.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78c9a547-9dc7-42d0-9b5d-ea07bfe2a406.png)'
- en: 'Go to your load balancer, followed by the Listeners Tab, and then click on
    the Add listener button as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 进入你的负载均衡器，然后点击“Listeners”选项卡，再点击“Add listener”按钮，如下所示：
- en: '![](img/4acbe4a1-32be-4c3e-9420-b0627635ab59.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4acbe4a1-32be-4c3e-9420-b0627635ab59.png)'
- en: Select the HTTPS protocol and its default port `443`
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 HTTPS 协议和其默认端口 `443`
- en: The rule is to forward to the target already defined at creation time
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则是将流量转发到创建时已定义的目标
- en: 'Finally, select the certificate created before from the From ACM (recommended)
    drop-down as shown in the following screenshot:'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，从“From ACM (recommended)”下拉菜单中选择之前创建的证书，如下所示：
- en: '![](img/b482e966-7073-4246-bd1a-5d00367d73fa.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b482e966-7073-4246-bd1a-5d00367d73fa.png)'
- en: 'Now you have a secure certificate for your application as shown in the following
    screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经为应用程序创建了一个安全证书，如下所示：
- en: '![](img/0e83f2ad-d793-41f2-bc54-1e9392498812.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e83f2ad-d793-41f2-bc54-1e9392498812.png)'
- en: ALB and integration with Auth0
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ALB 和与 Auth0 的集成
- en: If you want your users are authenticated before gaining access to the content
    served by your load balancer, then you can integrate the ALB with the Auth0 service
    available at [https://auth0.com/](https://auth0.com/). This is a cloud service
    that is designed to manage users through a different kind of authentication in
    order to use the words on their home page and provide a universal authentication
    and authorization platform for web, mobile, and legacy applications.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在用户访问由负载均衡器提供的内容之前进行身份验证，那么您可以将 ALB 与 [https://auth0.com/](https://auth0.com/)
    提供的 Auth0 服务集成。这是一个云服务，旨在通过不同的身份验证方式管理用户，并提供一个通用的身份验证和授权平台，适用于 Web、移动和遗留应用程序。
- en: If you want to try this interesting configuration feature, follow the guidelines
    at [https://medium.com/@sandrinodm/securing-your-applications-with-aws-alb-built-in-authentication-and-auth0-310ad84c8595](https://medium.com/@sandrinodm/securing-your-applications-with-aws-alb-built-in-authentication-and-auth0-310ad84c8595).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试这个有趣的配置功能，请按照 [https://medium.com/@sandrinodm/securing-your-applications-with-aws-alb-built-in-authentication-and-auth0-310ad84c8595](https://medium.com/@sandrinodm/securing-your-applications-with-aws-alb-built-in-authentication-and-auth0-310ad84c8595)
    中的指南操作。
- en: Pre-warming a load balancer
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预热负载均衡器
- en: A well-known problem in the CLB is that it is necessary to pre-warm in order
    to manage traffic peak because the system is made to scale up, as you can read
    in the documentation. We recommend that you increase the load at a rate of no
    more than 50 percent every five minutes.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: CLB 的一个著名问题是，为了管理流量峰值，需要进行预热，因为该系统是设计为扩展的，正如您在文档中可以看到的那样。我们建议您每五分钟以不超过 50% 的速率增加负载。
- en: 'The official declaration about this topic is available at [https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/#pre-warming](https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/#pre-warming).
    This states the following:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个主题的官方声明可以在 [https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/#pre-warming](https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/#pre-warming)
    找到。声明中提到以下内容：
- en: '"Amazon ELB is able to handle the vast majority of use cases for our customers
    without requiring "pre-warming" (configuring the load balancer to have the appropriate
    level of capacity based on expected traffic). In certain scenarios, such as when
    flash traffic is expected, or in the case where a load test cannot be configured
    to gradually increase traffic, we recommend that you contact us  [https://aws.amazon.com/contact-us/](https://aws.amazon.com/contact-us/)
    to have your load balancer "pre-warmed". We will then configure the load balancer
    to have the appropriate level of capacity based on the traffic that you expect.
    We will need to know the start and end dates of your tests or expected flash traffic,
    the expected request rate per second and the total size of the typical request/response
    that you will be testing."'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '"Amazon ELB 能够处理我们客户绝大多数的使用案例，而无需进行“预热”（即根据预期流量配置负载均衡器，以确保其具有适当的容量）。在某些情况下，例如预期会有突发流量，或无法配置负载测试以逐步增加流量时，我们建议您联系我们
    [https://aws.amazon.com/contact-us/](https://aws.amazon.com/contact-us/)，以便对您的负载均衡器进行“预热”。我们将根据您预期的流量配置负载均衡器的适当容量。我们需要了解您的测试或预期的突发流量的开始和结束日期、每秒的预期请求速率以及您将测试的典型请求/响应的总大小。"'
- en: 'Differences between the ALB and NLB:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: ALB 和 NLB 之间的区别：
- en: NLB is designed to handle tens of millions of requests per second while maintaining
    high throughput at ultra-low latency, with no effort on the customer's part. As
    a result, no pre-warm is needed.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLB 旨在处理每秒数千万的请求，同时保持超低延迟的高吞吐量，且无需客户进行额外操作。因此，不需要预热。
- en: ALB instead follows the same rules as CLB.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ALB 则遵循与 CLB 相同的规则。
- en: In short, NLB doesn't require pre-warming. However, CLB and ALB still need it.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简而言之，NLB 不需要预热。然而，CLB 和 ALB 仍然需要预热。
- en: Access/error logs
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问/错误日志
- en: 'It is a good practice to configure the ELB to store the access/error logs to
    an S3 bucket:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 ELB 将访问/错误日志存储到 S3 存储桶中是一个良好的实践：
- en: '**For CLB**: [https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于 CLB**: [https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html)'
- en: '**For ALB**: [https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html)'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于ALB**：[https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html)'
- en: '**For NLB**: ELBs do not have these kind of logs because it works at network
    level TPC/IP'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于NLB**：ELB没有这种日志，因为它在网络层级TCP/IP工作'
- en: The next step
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: Now that we have the balancer in multi-AZ with an SSL configured as well as
    a scalable system, the RDS is deployed in multi-AZ. However, the EC2 machine is
    still in a single AZ so this is consequently a single point of failure which doesn't
    scale automatically. We need to configure the Auto Scaling feature for the EC2
    part, but first of all we need to move the state outside of the machine if it is
    still there.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经在多可用区（multi-AZ）配置了负载均衡器并启用了SSL，同时系统是可扩展的，RDS也部署在多可用区。然而，EC2实例仍然位于单一可用区，因此这依然是一个单点故障，且不能自动扩展。我们需要为EC2部分配置自动扩展功能，但首先，如果状态仍然在机器上，我们需要将其移出。
- en: Moving the state outside the EC2 machine
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将状态移出EC2实例
- en: 'If your application has something regarding its state saved on a disk, you
    need to remove it before applying Auto Scaling. What was previously saved as files
    in the EC2 machine must be removed and managed by a service. There are two options
    which are as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序有与其状态相关的文件保存在磁盘上，你需要在应用自动扩展之前将其移除。之前保存在EC2实例上的文件必须移除，并由某个服务进行管理。这里有两种选择，如下所示：
- en: '**AWS Elastic File System** ([https://aws.amazon.com/efs/](https://aws.amazon.com/efs/)): In
    a few words, this is a network file system that is mounted in your EC2 machine
    with virtually infinite space where you only pay for the space used by your file.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS弹性文件系统** ([https://aws.amazon.com/efs/](https://aws.amazon.com/efs/))：简单来说，这是一个网络文件系统，安装在你的EC2机器上，具有几乎无限的空间，你只需为文件所占用的空间付费。'
- en: '**AWS S3** ([https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)): This
    was the first AWS service on the market and is an object storage designed to deliver
    99.999999999% durability.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS S3** ([https://aws.amazon.com/s3/](https://aws.amazon.com/s3/))：这是AWS市场上的第一个服务，是一个对象存储，旨在提供99.999999999%的耐久性。'
- en: In general, the S3 should be your favorite solution, but it is not always applicable
    because it requires application software change to use it. Consequently, in some
    cases, you may need an alternative that you can leverage on EFS.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，S3应该是你的首选解决方案，但它并非总是适用，因为使用它需要修改应用软件。因此，在某些情况下，你可能需要一个可以在EFS上利用的替代方案。
- en: The world is full of software and plugins designed around S3\. For example,
    WordPress saves the files loaded by the users into the disk by default, but with
    an additional plugin you can save it in AWS S3 and remove  the state from the
    EC2 machine in this way.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上充满了围绕S3设计的软件和插件。例如，WordPress默认将用户上传的文件保存到磁盘，但通过一个额外的插件，你可以将其保存到AWS S3，并通过这种方式从EC2实例中移除状态。
- en: Pushing the logs out
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推送日志
- en: Your instance is disposable and can be replaced or destroyed at any time. If
    you need application-specific logs, you need to use a program to push the logs
    out to S3 or CloudWatch.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你的实例是一次性的，可以随时被替换或销毁。如果你需要应用特定的日志，你需要使用程序将日志推送到S3或CloudWatch。
- en: Configure Auto Scaling
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置自动扩展
- en: 'The purpose of the couple, Launch Configurations and Auto Scaling Groups shown
    below is to ensure scalability and reliability:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示的“启动配置”和“自动扩展组”的目的是确保可扩展性和可靠性：
- en: '![](img/ed028653-0555-4017-a3eb-02367e88065c.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed028653-0555-4017-a3eb-02367e88065c.png)'
- en: 'Scalability and reliability are described as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性和可靠性描述如下：
- en: '**Scalability**: if there is an increase of requests/CPU, the system needs
    to scale up and add instances. In the same way, if the traffic goes down, it is
    necessary to remove unnecessary resources.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：如果请求量/CPU增加，系统需要进行扩展并添加实例。同样，如果流量下降，则需要移除不必要的资源。'
- en: '**Reliability**: if one instance  goes down for any reason, the Auto Scaling
    system automatically replaces it with a new one.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：如果某个实例由于任何原因宕机，自动扩展系统会自动用一个新的实例替代它。'
- en: You need to start the instance quickly in order to create an image, so by using
    the `user_data` option you can also install a software program as we did during
    the monolith configuration at the beginning of this chapter. However, this results
    in an additional amount of time in which it is necessary to start a new instance.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要快速启动实例以创建镜像，因此可以使用`user_data`选项，也可以像本章开头的单体配置中一样安装软件程序。然而，这会增加启动新实例所需的时间。
- en: When you need to scale up, this is because you need to satisfy an increase in
    demand and therefore need to do this as soon as possible. For this reason, it
    is a good idea to create an image with all software and configuration files installed
    and then insert the parameter or the configuration files that need to be passed
    at runtime to the `user_data`, if there are any.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要扩展时，这是因为你需要满足需求的增加，因此需要尽快执行此操作。因此，创建一个包含所有已安装软件和配置文件的镜像，然后将需要在运行时传递的参数或配置文件插入到`user_data`中是个好主意，如果有的话。
- en: Moving our example inside Auto Scaling
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的示例移入自动伸缩中
- en: 'Our application is now ready for Auto Scaling. Here, the state is removed from
    the EC2 and it is only in the RDS database. We tested how reachable it is from
    the balancer and checked that it can communicate with the database. This is what
    we are going to create:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用现在已经准备好进行自动伸缩。在这里，状态从 EC2 中移除，仅保存在 RDS 数据库中。我们测试了负载均衡器能否访问它，并检查了它是否能够与数据库进行通信。这就是我们要创建的内容：
- en: '![](img/af1ffd58-d430-4a9d-8ac0-5495251ec52b.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af1ffd58-d430-4a9d-8ac0-5495251ec52b.png)'
- en: Preparing the image
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备镜像
- en: 'We need to have an AMI in order to pass as a parameter in the launch configuration.
    To ensure that you have a good AMI, it is convenient to stop the machine first.
    When it is stopped, make the AMI. To do this, right-click the Image section and
    then click on the Create Image option, as shown in the following screenshot:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要有一个 AMI，以便作为参数传递到启动配置中。为了确保你拥有一个良好的 AMI，建议首先停止机器。当机器停止时，再创建镜像。为此，右键单击镜像部分，然后点击“创建镜像”选项，如下图所示：
- en: '![](img/2baf9f72-9534-4e12-9772-1e2304d77d68.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2baf9f72-9534-4e12-9772-1e2304d77d68.png)'
- en: 'Choose a meaningful name and description before clicking on the Create Image
    button:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个有意义的名称和描述，然后点击“创建镜像”按钮：
- en: '![](img/2b3c3f85-cb2b-4d3f-a77c-74a2201a5d93.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b3c3f85-cb2b-4d3f-a77c-74a2201a5d93.png)'
- en: Depending on disk size, the image will be available in a few minutes. In our
    example with 8 GB of disk, the waiting time will be short.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 根据磁盘大小，镜像将在几分钟内可用。在我们以 8 GB 磁盘为例时，等待时间将较短。
- en: Using the wizard launch configuration part
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用向导启动配置部分
- en: 'To have the Auto Scaling process in place, the following two objects are necessary:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用自动伸缩过程，需要以下两个对象：
- en: Launch configuration
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动配置
- en: Auto Scaling group
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动伸缩组
- en: 'Click on the Auto Scaling Groups option and an automatic wizard will then start
    to create the necessary resources:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“自动伸缩组”选项，自动向导将开始创建所需的资源：
- en: '![](img/0cc70e03-c741-402c-8311-5966cc821cb0.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cc70e03-c741-402c-8311-5966cc821cb0.png)'
- en: 'Launch configuration is the first step to be followed. Here, select the My
    AMIs option and find the image created in the previous step, as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 启动配置是第一步。在这里，选择“我的 AMI”选项并找到在前一步中创建的镜像，如下所示：
- en: '![](img/5d89d593-04c6-45d8-9d55-31e43c887923.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d89d593-04c6-45d8-9d55-31e43c887923.png)'
- en: 'Now choose the name. Don''t modify anything else at this step:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在选择名称。在此步骤中不要修改其他任何内容：
- en: '![](img/e3dc245f-cc8f-4d7d-9eaa-1a5e30365910.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3dc245f-cc8f-4d7d-9eaa-1a5e30365910.png)'
- en: Auto Scaling group part
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动伸缩组部分
- en: At this point, the wizard asks us to provide some details for the Auto Scaling
    part at the beginning of the configuration process. It is okay to start with 1
    instance to first check whether or not everything is working well.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，向导会要求我们提供一些关于自动伸缩部分的详细信息，以便开始配置过程。可以从 1 个实例开始，首先检查一切是否正常工作。
- en: VPC and subnets that you specify in the Auto Scaling group can be the same used
    in the previous example. But keep in mind, for the ALB it is mandatory to choose
    a public subnet while for the EC2 you can use a private or a public subnet. In
    [Chapter 5](93bb1465-ceda-4cb9-823e-5a4355720a79.xhtml), *Adding Continuous Integration
    and Continuous Deployment* we focus on security, we will explain why it is beneficial
    to insert the EC2 in private ones.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 您在自动扩展组中指定的 VPC 和子网可以与之前示例中使用的相同。但是请记住，对于 ALB，必须选择公共子网，而对于 EC2，您可以使用私有或公共子网。在[第
    5 章](93bb1465-ceda-4cb9-823e-5a4355720a79.xhtml)，*添加持续集成与持续部署*，我们关注安全性，我们将解释为何将
    EC2 放置在私有子网中是有益的。
- en: 'However, for now, it is okay to use any subnet. The important thing to do is
    to choose more than one subnets in different AZs:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在使用任何子网都是可以的。重要的是选择多个位于不同可用区（AZ）的子网：
- en: '![](img/bbb95c86-fa5c-4340-b714-d40d28820d1a.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbb95c86-fa5c-4340-b714-d40d28820d1a.png)'
- en: 'For the security group, choose the one assigned to the EC2 machine in precedence;
    don''t create a new one:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 对于安全组，优先选择分配给 EC2 机器的安全组；不要创建新的安全组：
- en: '![](img/f73e01c8-56ca-43ca-aaf6-fb7e6728c260.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f73e01c8-56ca-43ca-aaf6-fb7e6728c260.png)'
- en: 'Use a key-pair that you own for a normal EC2\. In theory, you don''t need to
    log in to a machine managed by Auto Scaling. You only need a key to log in if
    there are errors and it is necessary to debug something:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您拥有的密钥对来为正常的 EC2 实例进行配置。在理论上，您不需要登录到由自动扩展管理的机器。只有在出现错误且需要调试某些内容时，才需要登录并使用密钥：
- en: '![](img/851a3039-ad72-4a93-9f28-9e8d4d9fed34.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/851a3039-ad72-4a93-9f28-9e8d4d9fed34.png)'
- en: Scaling policies
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展策略
- en: 'This is the important part of the wizard, but this is a slightly more difficult
    stage. Scaling policies decide the condition whether to scale up (adding instances
    to the Auto Scaling group) and scale down (remove instances from the group). There
    are many ways to do this; here I have chosen the easiest way, which is through
    the CPU % usage:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这是向导的关键部分，但这是一个稍微有些困难的阶段。扩展策略决定了是否进行扩展（向自动扩展组中添加实例）和缩减（从组中移除实例）的条件。有很多方法可以做到这一点；在这里，我选择了最简单的方法，即通过
    CPU 使用率（%）：
- en: If the CPU usage is below 70% for more than 5 minutes, add 1 instance
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 CPU 使用率低于 70% 且持续超过 5 分钟，添加 1 个实例
- en: If the CPU usage is lower than 40% for more than 5 minutes, remove 1 instance
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 CPU 使用率低于 40% 且持续超过 5 分钟，移除 1 个实例
- en: 'Of course, the chosen metric and values depend on your application, but with
    this example, you can have an idea:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，所选择的度量标准和数值取决于您的应用程序，但通过这个示例，您可以大致了解：
- en: '![](img/e7387212-821c-4a1f-a5d4-b3f99ae5eae7.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7387212-821c-4a1f-a5d4-b3f99ae5eae7.png)'
- en: 'It is necessary to create two alarms (one for each rule) to associate to the
    Auto Scaling group:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 必须创建两个警报（每个规则一个），并将其关联到自动扩展组：
- en: '![](img/1b64fe75-6d24-4730-a7c9-ddac7a75b7d3.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b64fe75-6d24-4730-a7c9-ddac7a75b7d3.png)'
- en: '![](img/deaffdb8-9476-47aa-8160-2ab0ce240052.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](img/deaffdb8-9476-47aa-8160-2ab0ce240052.png)'
- en: 'This is the final result:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终结果：
- en: '![](img/c8bf381a-1f27-44cc-b8e8-3cbbac0f2d1d.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8bf381a-1f27-44cc-b8e8-3cbbac0f2d1d.png)'
- en: 'In the next step, add at least the tag name so it is easier to identify the
    instances created by the Auto Scaling group:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，至少添加标签名称，以便更容易识别由自动扩展组创建的实例：
- en: '![](img/332e26a4-0b22-4c94-860f-d74a9edf0ced.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/332e26a4-0b22-4c94-860f-d74a9edf0ced.png)'
- en: Modifying the Auto Scaling group
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改自动扩展组
- en: If you need to modify the launch configuration, it is mandatory to create a
    copy and perform the changes at the time of creation because modifications are
    not allowed. In the Auto Scaling group it is possible to make changes without
    recreating it.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要修改启动配置，必须创建一个副本并在创建时进行修改，因为不允许直接修改。在自动扩展组中，可以在不重新创建的情况下进行更改。
- en: 'We need to modify the Auto Scaling group because we want each instance to be
    registered to the target group associated with our ALB:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改自动扩展组，因为我们希望每个实例都能注册到与我们的 ALB 关联的目标组：
- en: '![](img/40500247-d3ec-4509-8edd-0c88a939283d.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40500247-d3ec-4509-8edd-0c88a939283d.png)'
- en: 'If you want to manually increase the number of instances, it is enough to modify
    the Min size. Keep in mind that the Desired Capacity value needs to have a value
    between Min and Max sizes:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想手动增加实例数量，只需修改最小大小（Min size）。请记住，所需容量（Desired Capacity）值需要介于最小值和最大值之间：
- en: '![](img/aeb7bb67-9445-483b-aba2-54875a77bfa9.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aeb7bb67-9445-483b-aba2-54875a77bfa9.png)'
- en: 'In the instances, it is possible to see the new one created by the Auto Scaling
    group:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例中，可以看到由自动扩展组创建的新实例：
- en: '![](img/2f122c39-e3e4-4f97-baf9-4aa560cd9a56.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f122c39-e3e4-4f97-baf9-4aa560cd9a56.png)'
- en: Removing the manually created instance from the balancer
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从负载均衡器中移除手动创建的实例
- en: 'Now that the Auto Scale is working, we can remove the EC2 instance used for
    configuration from the load balancer and leave the instances that are automatically
    generated. As you may notice, when you remove the instance it is not immediately
    removed but goes into a draining state for a short period of time. This occurs
    in order to avoid poor user experience and manage the possibility that there is
    still somebody to connect through it:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 现在自动扩展功能已经生效，我们可以从负载均衡器中移除用于配置的EC2实例，只保留自动生成的实例。如你所见，移除实例时，它不会立即被移除，而是会进入一个短暂的“排空”状态。这样做是为了避免用户体验不佳，并处理仍可能通过该实例连接的情况：
- en: '![](img/d7f8b575-2e0c-41fd-86ce-41a829353ef8.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7f8b575-2e0c-41fd-86ce-41a829353ef8.png)'
- en: At this point, the configuration of the Auto Scale is complete and you now have
    an application that satisfies the requirements of scalability and reliability.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，自动扩展的配置已经完成，你现在拥有一个满足可扩展性和可靠性要求的应用。
- en: Using microservices and serverless
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用微服务和无服务器架构
- en: As we tested throughout this whole chapter, breaking the monolith into several
    pieces produces many advantages but also complicates the whole system.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章测试的那样，将单体应用拆分成多个部分带来了许多优点，但也使整个系统变得更加复杂。
- en: This concept is amplified when we use a microservices and serverless approach.
    This is because, if you use these two approaches in the correct way, it is possible
    to increase scalability, increase reliability, and reduce infrastructure costs.
    However, you always need to consider that the system will be more complex to build
    and manage. This leads to increasing the build and operative cost, especially
    if it is the first time that your team builds and manages a system with this kind
    of approach.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用微服务和无服务器架构时，这一概念变得更加明显。这是因为，如果正确使用这两种方法，确实可以提高可扩展性、增强可靠性并降低基础设施成本。然而，你总是需要考虑系统会变得更加复杂，构建和管理的难度增加。这导致构建和操作成本上升，尤其是当你的团队第一次构建和管理这种方法的系统时。
- en: 'The following image represents the concept of load and cost with micro services
    and serverless:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像展示了微服务和无服务器架构中负载和成本的概念：
- en: '![](img/692d90fe-07d0-4d4e-a96e-5f9b7dc7f817.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/692d90fe-07d0-4d4e-a96e-5f9b7dc7f817.png)'
- en: 'Image source: [https://medium.freecodecamp.org/serverless-is-cheaper-not-simpler-a10c4fc30e49](https://medium.freecodecamp.org/serverless-is-cheaper-not-simpler-a10c4fc30e49)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[https://medium.freecodecamp.org/serverless-is-cheaper-not-simpler-a10c4fc30e49](https://medium.freecodecamp.org/serverless-is-cheaper-not-simpler-a10c4fc30e49)
- en: Summary
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Scaling is a long process that has the potential to be improved. In this chapter,
    we completed the first step and learned how to break a monolith application into
    multiple pieces leveraging the AWS services. This approach brings many advantages
    but also complicates our initial infrastructure, meaning that more time is spent
    on configuration, bug fixing, and the necessity to study new services. We have
    explored how powerful and useful all the AWS tools can be for scalability, but
    it can also sometimes be difficult to use this, especially the first time. Using
    automation with Terraform modules makes it possible to immediately achieve the
    result with our knowledge on module creator. In addition, hiding the complexity
    of a solution cannot help us in understanding what is really happening behind
    the scenes. This can be necessary during a bug fix. For this reason, some parts
    of the book, such as the Autos Scale, ALB, and the SSL certification, were completed
    using the web console and its wizard.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展是一个长期的过程，有可能不断改进。在本章中，我们完成了第一步，学习了如何利用AWS服务将一个单体应用拆分成多个部分。这种方法带来了许多优点，但也使我们的初始基础设施变得更加复杂，这意味着我们需要花费更多时间在配置、修复错误以及学习新服务上。我们已经探索了所有AWS工具在可扩展性方面的强大功能和实用性，但有时使用这些工具可能会比较困难，特别是第一次使用时。通过使用Terraform模块自动化，我们可以利用模块创建者的知识，立即实现预期的结果。此外，隐藏解决方案的复杂性并不能帮助我们理解背后发生的事情，在修复错误时，这一点尤为重要。因此，本书的某些部分，如自动扩展、ALB和SSL认证，是通过使用Web控制台及其向导完成的。
- en: Questions
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Is it always convenient to break a monolith into a multi-level application?
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将单体应用拆分成多层应用总是方便的吗？
- en: What are the differences between the multi-level approach and the microservices/serverless
    approach?
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多层架构与微服务/无服务器架构之间有哪些区别？
- en: Can it be difficult moving from software installed in a virtual machine to as
    a service components?
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从安装在虚拟机中的软件迁移到服务组件时，是否可能会遇到困难？
- en: Can a load balancer manage any spike of traffic without any intervention?
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 负载均衡器能在没有任何干预的情况下管理任何流量高峰吗？
- en: Can I save money using Certificate Manager instead of a classic SSL certification
    authority?
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用证书管理器而不是经典的 SSL 认证机构能节省费用吗？
- en: Why is it important to span the resources in multiple AZs?
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么将资源分布在多个可用区（AZ）中很重要？
- en: Further reading
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'For more information, read the following articles:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请阅读以下文章：
- en: '**Changing the Instance Type**: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-resize.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-resize.html)'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改实例类型**：[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-resize.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-resize.html)'
- en: '**Extending a Linux File System after Resizing the Volume**:  [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html)'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调整卷大小后扩展 Linux 文件系统**：[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recognize-expanded-volume-linux.html)'
- en: '**Extending a Windows File System after Resizing the Volume**: [https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/recognize-expanded-volume-windows.html](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/recognize-expanded-volume-windows.html)'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调整卷大小后扩展 Windows 文件系统**：[https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/recognize-expanded-volume-windows.html](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/recognize-expanded-volume-windows.html)'
- en: '**Elastic Load Balancing Documentation**: [https://aws.amazon.com/documentation/elastic-load-balancing/](https://aws.amazon.com/documentation/elastic-load-balancing/)'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性负载均衡文档**：[https://aws.amazon.com/documentation/elastic-load-balancing/](https://aws.amazon.com/documentation/elastic-load-balancing/)'
- en: '**Comparison of Elastic Load Balancing Products**: [https://aws.amazon.com/elasticloadbalancing/details/#compare](https://aws.amazon.com/elasticloadbalancing/details/#compare)'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性负载均衡产品的比较**：[https://aws.amazon.com/elasticloadbalancing/details/#compare](https://aws.amazon.com/elasticloadbalancing/details/#compare)'
- en: '**Best Practices in Evaluating Elastic Load Balancing**: [https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/#pre-warming](https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/#pre-warming)
    and [https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/](https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/)'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估弹性负载均衡的最佳实践**：[https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/#pre-warming](https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/#pre-warming)
    和 [https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/](https://aws.amazon.com/articles/best-practices-in-evaluating-elastic-load-balancing/)'
- en: '**Spring Boot, MySQL, JPA, Hibernate Restful CRUD API Tutorial**: [https://www.callicoder.com/spring-boot-rest-api-tutorial-with-mysql-jpa-hibernate/](https://www.callicoder.com/spring-boot-rest-api-tutorial-with-mysql-jpa-hibernate/) the
    tutorial used to create our playground.'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring Boot, MySQL, JPA, Hibernate Restful CRUD API 教程**：[https://www.callicoder.com/spring-boot-rest-api-tutorial-with-mysql-jpa-hibernate/](https://www.callicoder.com/spring-boot-rest-api-tutorial-with-mysql-jpa-hibernate/)
    该教程用于创建我们的操作平台。'
- en: '**Serverless is cheaper, not simpler**: [https://medium.freecodecamp.org/serverless-is-cheaper-not-simpler-a10c4fc30e49](https://medium.freecodecamp.org/serverless-is-cheaper-not-simpler-a10c4fc30e49)'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无服务器更便宜，但不更简单**： [https://medium.freecodecamp.org/serverless-is-cheaper-not-simpler-a10c4fc30e49](https://medium.freecodecamp.org/serverless-is-cheaper-not-simpler-a10c4fc30e49)'
