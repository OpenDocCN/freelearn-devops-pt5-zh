["```\nnamespace PacktPubToDoAPI.Models\n{\n    public class TodoItem\n    {\n        public long Id { get; set; }\n        public string Name { get; set; }\n        public bool IsComplete { get; set; }\n    }\n}\n```", "```\nusing Microsoft.EntityFrameworkCore;\nusing PacktPubToDoAPI.Models;\n\nnamespace PacktPubToDoAPI.Models\n{\n    public class TodoContext : DbContext\n    {\n        public TodoContext(DbContextOptions<TodoContext> options)\n            : base(options)\n        {\n        }\n\n        public DbSet<TodoItem> TodoItems { get; set; }\n\n    }\n}\n```", "```\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\nusing PacktPubToDoAPI.Models;\n\nnamespace PacktPubToDoAPI\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddDbContext<TodoContext>(opt => opt.UseInMemoryDatabase(\"TodoList\"));\n            services.AddMvc();\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            app.UseMvc();\n        }\n    }\n}\n```", "```\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Mvc;\nusing PacktPubToDoAPI.Models;\nusing System.Linq;\n\nnamespace PacktPubToDoAPI.Controllers\n{\n    [Route(\"api/[controller]\")]\n    public class TodoController : Controller\n    {\n        private readonly TodoContext _context;\n\n        public TodoController(TodoContext context)\n        {\n            _context = context;\n\n            if (_context.TodoItems.Count() == 0)\n            {\n                _context.TodoItems.Add(new TodoItem { Name = \"Item1\" });\n                _context.SaveChanges();\n            }\n        }\n    }\n}\n```", "```\n[HttpGet]\npublic IEnumerable<TodoItem> GetAll()\n{\n    return _context.TodoItems.ToList();\n}\n\n[HttpGet(\"{id}\", Name = \"GetTodo\")]\npublic IActionResult GetById(long id)\n{\n    var item = _context.TodoItems.FirstOrDefault(t => t.Id == id);\n    if (item == null)\n    {\n       return NotFound();\n     }\n       return new ObjectResult(item);\n }\n```", "```\n[HttpPost]\npublic IActionResult Create([FromBody] TodoItem item)\n{\n   if (item == null)\n   {\n        return BadRequest();\n   }\n\n    _context.TodoItems.Add(item);\n    _context.SaveChanges();\n\n    return CreatedAtRoute(\"GetTodo\", new { id = item.Id }, item);\n   }\n  [HttpPut(\"{id}\")]\n  public IActionResult Update(long id, [FromBody] TodoItem item)\n  {\n      if (item == null || item.Id != id)\n      {\n          return BadRequest();\n      }\n\n      var todo = _context.TodoItems.FirstOrDefault(t => t.Id == id);\n      if (todo == null)\n      {\n          return NotFound();\n      }\n\n      todo.IsComplete = item.IsComplete;\n      todo.Name = item.Name;\n\n       _context.TodoItems.Update(todo);\n       _context.SaveChanges();\n       return new NoContentResult();\n  }       \n```", "```\n[HttpDelete(\"{id}\")]\n     public IActionResult Delete(long id)\n     {\n        var todo = _context.TodoItems.FirstOrDefault(t => t.Id == id);\n         if (todo == null)\n         {\n              return NotFound();\n          }\n\n          _context.TodoItems.Remove(todo);\n          _context.SaveChanges();\n          return new NoContentResult();\n      }\n```"]