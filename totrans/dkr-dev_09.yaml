- en: '*Chapter 7*: Continuous Deployment with Jenkins'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第七章*：使用 Jenkins 进行持续部署'
- en: In order to reliably use Docker containers in production, you need a process
    that will consistently build, test, and deploy your software. A team building
    very small applications might be satisfied with running tests and deployment scripts
    manually. However, discipline often breaks down, and people step on each other's
    toes. This often results in broken builds and tests that are not run before or
    after a production deployment. The aftermath is often downtime and unhappy customers.
    In order to make sure that we can build, test, and deploy software reliably, we
    can use continuous integration software. This type of software can reliably build,
    test, and deploy revisions in a disciplined and traceable way. A well-run modern
    project can even use this software to achieve continuous deployment, where even
    the smallest changes to the software can be quickly promoted to either a test
    or production environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在生产中可靠地使用 Docker 容器，你需要一个持续构建、测试和部署软件的过程。一个构建非常小型应用的团队，可能会满足于手动运行测试和部署脚本。然而，纪律往往会被打破，导致团队成员之间的协作混乱。这通常会导致构建失败，并且在生产部署前后没有进行测试。结果往往是停机和不满的客户。为了确保我们能够可靠地构建、测试和部署软件，我们可以使用持续集成软件。这类软件能够以一种有纪律且可追溯的方式可靠地构建、测试和部署修订。运行良好的现代项目甚至可以使用这种软件实现持续部署，让即使是最小的变更也能快速推送到测试或生产环境中。
- en: In this chapter, we show how to configure Jenkins, one of the most popular continuous
    integration software systems, to facilitate deployment to the minimal environment
    shown in the previous chapter. We will use Jenkins to manage both the production
    installation and a new staging environment installation of the application used
    to test changes before they reach production.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将展示如何配置 Jenkins，这是一款最受欢迎的持续集成软件系统，以促进部署到前一章展示的最小环境。我们将使用 Jenkins 来管理生产安装和新的暂存环境安装，以测试变更在达到生产环境前的效果。
- en: By the end of this chapter, you will know when it might be a good idea to deploy
    Jenkins for CI and CD with Docker. You will learn how to set up a basic `Jenkinsfile`
    that can help Jenkins `docker-compose` commands to update the application. You
    will discover how to set up Jenkins parameterized builds that allow both changing
    and auditing configuration parameters. You will extend the simple production setup
    by adding an isolated staging environment to allow developers to make changes
    more confidently. Finally, you will know when this type of solution has exhausted
    its limits and when it is time to reach for more sophisticated tools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将知道在什么情况下部署 Jenkins 来实现 CI 和 CD 与 Docker 结合是一个好主意。你将学习如何设置一个基本的`Jenkinsfile`，帮助
    Jenkins 使用 `docker-compose` 命令更新应用程序。你将发现如何设置 Jenkins 的参数化构建，允许改变和审计配置参数。你将通过增加一个隔离的暂存环境，扩展简单的生产环境设置，使开发人员能够更有信心地进行变更。最后，你将明白何时这种解决方案已达到极限，何时需要采用更复杂的工具。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将覆盖以下主要内容：
- en: Using Jenkins to facilitate continuous deployment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Jenkins 促进持续部署
- en: The Jenkinsfile and host connectivity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkinsfile 和主机连接
- en: Driving configuration changes through Jenkins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Jenkins 推动配置变更
- en: Deploying to multiple environments through multiple branches
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过多个分支部署到多个环境
- en: Complexity and limits to scaling deployments through Jenkins
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Jenkins 扩展部署的复杂性和限制
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete the exercises in this chapter, you'll need Git and Docker on your
    local workstation, and you will need to have already set up a production application
    as described in the previous chapter. To complete the exercises about deploying
    to multiple environments, you will need another host to run a test environment,
    with similar specifications as the production host.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，你需要在本地工作站上安装 Git 和 Docker，并且需要根据前一章的描述已经设置好生产环境应用程序。为了完成关于部署到多个环境的练习，你还需要一个主机来运行测试环境，测试环境的规格应与生产主机相似。
- en: You will also need a Jenkins server. This chapter will go over some options
    for the simple setup and maintenance of a Jenkins server if you don't already
    have one available to you. If your company already runs a Jenkins server, you
    can use that—ask the system administrators for permission. This server will need
    to be able to reach your production server via SSH.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要一个 Jenkins 服务器。本章将介绍一些选项来简化 Jenkins 服务器的设置和维护，如果您尚未拥有可用的服务器。如果您的公司已经运行 Jenkins
    服务器，您可以使用它—请向系统管理员请求权限。此服务器需要能够通过 SSH 访问您的生产服务器。
- en: You will need to be able to create DNS entries in a zone you control, for both
    the staging server and the Jenkins server. You can use the same DNS zone as you
    used in the previous chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要能够在您控制的区域内创建 DNS 记录，用于暂存服务器和 Jenkins 服务器。您可以使用与上一章相同的 DNS 区域。
- en: The GitHub repository for this chapter is [https://github.com/Packt-Publishing/Docker-for-Developers](https://github.com/Packt-Publishing/Docker-for-Developers)—please
    see the `chapter7` folder inside.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 GitHub 存储库是 [https://github.com/Packt-Publishing/Docker-for-Developers](https://github.com/Packt-Publishing/Docker-for-Developers)—请查看其中的
    `chapter7` 文件夹。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[https://bit.ly/3kL1EUU](https://bit.ly/3kL1EUU)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3kL1EUU](https://bit.ly/3kL1EUU)'
- en: Example application – ShipIt Clicker v3
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例应用程序 – ShipIt Clicker v3
- en: The version of *ShipIt Clicker* in this chapter is very similar to the one in
    the previous chapter. We will use it to test deployment through Jenkins to both
    a production and a staging environment.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 *ShipIt Clicker* 版本与上一章非常相似。我们将使用它来测试通过 Jenkins 到生产环境和暂存环境的部署。
- en: Using Jenkins to facilitate continuous deployment
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 进行持续部署
- en: The world of continuous integration servers has come a long way in the last
    20 years. One of the most popular systems is Jenkins (see [https://jenkins.io/](https://jenkins.io/))—because
    it is free, flexible, and offers a huge variety of integrations and plugins. CloudBees
    [(https://www.cloudbees.com](https://www.cloudbees.com/)/), the company behind
    it, also offers commercial support via a paid version. Your company might already
    be running Jenkins, in which case you may not need to do much setup to get your
    project to build and run.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 过去 20 年来，持续集成服务器的世界发展了很长一段路。其中最流行的系统之一是 Jenkins（参见 [https://jenkins.io/](https://jenkins.io/)）—因为它是免费的、灵活的，并且提供了大量的集成和插件。背后的公司
    CloudBees（[https://www.cloudbees.com](https://www.cloudbees.com/)）也通过付费版本提供商业支持。您的公司可能已经在运行
    Jenkins，如果是这样，您可能不需要做太多设置来构建和运行您的项目。
- en: We are going to use the Jenkins 2.x Pipeline project type, where a `Jenkinsfile`
    is committed to source control in GitHub and controls the steps Jenkins uses to
    build and deploy the project.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Jenkins 2.x 流水线项目类型，在 GitHub 中提交 `Jenkinsfile` 到源代码控制，并控制 Jenkins 用于构建和部署项目的步骤。
- en: Avoid these traps
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免这些陷阱
- en: Before we set up Jenkins, we should make sure we avoid certain common traps
    people fall into when setting it up for the first time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置 Jenkins 之前，我们应该确保避免初次设置时人们常遇到的一些常见陷阱。
- en: Avoid running Jenkins in Docker
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免在 Docker 上运行 Jenkins
- en: Although you can use Docker to run a Jenkins server, doing so introduces some
    complications that are best avoided, especially when just trying to get a continuous
    integration server running for the first time. You would either need to use a
    feature called **Docker-in-Docker** (**dind**) or a customized Docker installation
    of Jenkins that has the correct ports and files mapped from the host in a very
    specific way. If you don't get it just right, you might run into trouble with
    not being able to build Docker containers since you can't double-mount a union
    filesystem, for example.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以使用 Docker 运行 Jenkins 服务器，但这样做会引入一些最好避免的复杂性，尤其是当您首次尝试运行持续集成服务器时。您可能需要使用名为**Docker-in-Docker**（**dind**）的功能或者一个定制的
    Jenkins Docker 安装，该安装必须以非常特定的方式从主机映射端口和文件。如果不搞对，可能会遇到问题，例如不能构建 Docker 容器，因为您不能双重挂载联合文件系统。
- en: Setting up Jenkins itself running as a Docker container and working through
    the quirks would probably consume a ton of effort and time, and is beyond the
    scope of the advice we can give in this book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Jenkins 本身作为 Docker 容器运行并解决其中的怪异问题可能需要大量的时间和精力，超出了本书能提供的建议范围。
- en: Avoid running Jenkins on the production server
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免在生产服务器上运行 Jenkins
- en: In a previous chapter, we set up a production server in the cloud to host an
    application. You might be tempted to have that same server you already have running
    do double-duty by having it run the Jenkins CI server as well. This would be economical,
    but it is risky as any problem with either the production configuration or the
    Jenkins server could both bring down production and knock your CI server offline.
    This would also complicate the network and web hosting virtual host configuration—it
    would be too easy to have these distinct services conflict, without a more sophisticated
    orchestration system.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章节中，我们在云中设置了一个生产服务器来托管应用程序。你可能会被诱使让已经运行的服务器再做双重任务，既运行生产服务器，又运行 Jenkins CI
    服务器。这虽然经济，但存在风险，因为生产配置或 Jenkins 服务器中的任何问题都可能同时导致生产服务中断并让 CI 服务器下线。这还会使网络和 Web
    托管虚拟主机的配置更加复杂——没有更复杂的编排系统，容易导致这些不同的服务发生冲突。
- en: Part of running robust systems is to have adequate isolation between processes
    and systems that have distinct purposes, so avoid doubling-up Jenkins and your
    production server; run it on a system separate from your production server.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 运行可靠系统的一部分是确保进程和系统之间有足够的隔离，尤其是对于具有不同目的的系统，因此避免将 Jenkins 和生产服务器混用；应该在与生产服务器分开的系统上运行
    Jenkins。
- en: Avoid running Jenkins on your local workstation
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免在本地工作站上运行 Jenkins
- en: 'You might also be tempted to just install Jenkins on your local workstation
    to give it a test drive. However, you will find several major drawbacks to this
    approach:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也会被诱使直接在本地工作站上安装 Jenkins 进行测试。然而，你会发现这种做法有几个主要的缺点：
- en: Your workstation probably does not have a stable IP address, necessitating dynamic
    DNS solutions, and possibly punching holes in firewalls and setting up NAT port
    redirections.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的工作站可能没有稳定的 IP 地址，因此需要动态 DNS 解决方案，可能还需要打洞防火墙并设置 NAT 端口重定向。
- en: You would have to run Jenkins on your system constantly to have it process and
    build changes to the software as commits get pushed.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要不断地在系统上运行 Jenkins，以便随着提交的推送，它能够处理并构建软件的更改。
- en: Jenkins can be pretty heavyweight to run alongside a full development environment—and
    it may slow your workstation down significantly.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 可能会非常占用资源，无法与完整的开发环境一起运行——而且它可能会显著减慢你的工作站速度。
- en: If we should not run Jenkins as a Docker container, and we should not run it
    on our local workstation, where should we run Jenkins? Let's explore the options.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不应该将 Jenkins 作为 Docker 容器运行，也不应该在本地工作站上运行它，那么我们应该在哪里运行 Jenkins？让我们来探索一下这些选项。
- en: Using an existing Jenkins server
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用现有的 Jenkins 服务器
- en: You don't have to set up Jenkins from scratch if you have access to a Jenkins
    server running a recent version of Jenkins in the 2.x series. Recent versions
    of Jenkins have excellent support for Docker, assuming that the hosts running
    the Jenkins builds have Docker running on them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有访问正在运行最新版本 Jenkins 2.x 系列的 Jenkins 服务器的权限，就不需要从零开始设置 Jenkins。Jenkins 的新版本对
    Docker 提供了极好的支持，前提是运行 Jenkins 构建的主机上已经运行了 Docker。
- en: 'You will need to make sure that the following Jenkins plugins are present:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要确保以下 Jenkins 插件已经安装：
- en: SSH credentials
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH 凭证
- en: Pipeline
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pipeline
- en: GitHub
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: GitHub Organization
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 组织
- en: Ideally, the Jenkins server would already be set up with the GitHub Organization
    plugin and it should be configured so that it can automatically manage GitHub
    webhooks. If this is the case, you can either fork the sample repository or clone
    it and push it into your GitHub organization as a new repository and start deploying
    from there.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，Jenkins 服务器应该已经安装了 GitHub 组织插件，并且已配置为能够自动管理 GitHub 的 webhooks。如果是这种情况，你可以分叉示例仓库或将其克隆并推送到你的
    GitHub 组织中作为新仓库，从那里开始部署。
- en: You will need enough permissions on the Jenkins server to create credentials,
    which we will use to hold secrets required for building and deploying the software.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在 Jenkins 服务器上拥有足够的权限来创建凭证，这些凭证将用于存储构建和部署软件所需的密钥。
- en: Setting up a new Jenkins server
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置新的 Jenkins 服务器
- en: A convenient way to simplify the set of technologies you have to maintain is
    to use the same base operating system and Docker setup that the production host
    runs. The instructions and scripts here are tailored to a CentOS 7 installation,
    but you can follow the same basic steps for other operating system distributions
    with some modification of the specific commands used to set up and maintain the
    packages, for example using `apt-get` instead of `yum` to install operating system
    packages.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 简化您需要维护的技术栈的一个方便方法是使用与生产主机相同的基础操作系统和 Docker 设置。这里的说明和脚本是针对 CentOS 7 安装定制的，但您可以遵循相同的基本步骤来安装和维护其他操作系统版本，只需对安装操作系统包的特定命令进行一些修改，例如使用
    `apt-get` 代替 `yum` 来安装操作系统包。
- en: 'Begin by installing Docker and `docker-compose` just as you did in the previous
    chapter. Once that is done, test that Docker works with the `docker run --rm hello-world`
    command and then install Jenkins. If you are using CentOS 7, you can use the script
    at https://github.com/PacktPublishing/Docker-for-Developers/blob/master/chapter7/bin/provision-jenkins.sh
    to install both Docker and Jenkins together (replace `centos@jenkins.example.com`
    with the user name and IP address or hostname of your new Jenkins server):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先按照上一章中的步骤安装 Docker 和 `docker-compose`。完成后，使用 `docker run --rm hello-world`
    命令测试 Docker 是否正常工作，然后安装 Jenkins。如果您使用的是 CentOS 7，可以使用以下脚本 https://github.com/PacktPublishing/Docker-for-Developers/blob/master/chapter7/bin/provision-jenkins.sh
    同时安装 Docker 和 Jenkins（将 `centos@jenkins.example.com` 替换为您新 Jenkins 服务器的用户名和 IP
    地址或主机名）：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you are using another operating system, consult the Jenkins documentation
    online for installation instructions: [https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins](https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是其他操作系统，请查阅 Jenkins 官方文档获取安装说明：[https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins](https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins)
- en: In order to configure CentOS 7 to allow network traffic to flow to Jenkins,
    you may have to configure its host firewall to allow inbound traffic.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置 CentOS 7 允许网络流量到达 Jenkins，您可能需要配置主机防火墙以允许入站流量。
- en: 'Also, it is desirable to have Jenkins listen on a standard port such as port
    `80` or `443`. This can be accomplished in several ways, including having a web
    server act as a proxy for Jenkins, or using a load balancer to terminate SSL.
    A shortcut for allowing network traffic to flow to Jenkins on port `80` for CentOS
    7 is as follows (if you used the `provision-docker.sh` script to provision Jenkins
    this is already done):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，建议让 Jenkins 监听标准端口，如 `80` 或 `443` 端口。这可以通过多种方式实现，包括让 Web 服务器充当 Jenkins 的代理，或使用负载均衡器终止
    SSL。在 CentOS 7 上允许网络流量到达 Jenkins 的快捷方式如下（如果您使用了 `provision-docker.sh` 脚本来配置 Jenkins，则此步骤已完成）：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `firewall-cmd` invocation will allow you to reach Jenkins on port `80` instead
    of specifying port `8080`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`firewall-cmd` 调用将允许您通过端口 `80` 访问 Jenkins，而不是指定端口 `8080`。'
- en: 'Once Jenkins is installed, you must retrieve a password from its logs to connect
    to the server:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Jenkins 后，您必须从其日志中获取密码以连接到服务器：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note the password given in the output of this command. If this does not work
    immediately, wait a  few minutes and try again, as Jenkins may still be starting
    up.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请记下此命令输出中的密码。如果此方法未立即生效，请等待几分钟再试，因为 Jenkins 可能仍在启动中。
- en: Then, open a web browser and put in the IP address with the appropriate port,
    either `8080` or `80` depending on whether you have redirected connections. For
    example, enter [http://192.2.0.10:8080](http://192.2.0.10:8080) and navigate to
    the site.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开 Web 浏览器并输入带有适当端口的 IP 地址，取决于您是否已重定向连接，端口可以是 `8080` 或 `80`。例如，输入 [http://192.2.0.10:8080](http://192.2.0.10:8080)
    访问该站点。
- en: 'You should see a screen that says **Unlock Jenkins**:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个显示 **解锁 Jenkins** 的屏幕：
- en: '![Figure 7.1 – Unlock Jenkins](img/B11641_07_001.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 解锁 Jenkins](img/B11641_07_001.jpg)'
- en: Figure 7.1 – Unlock Jenkins
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 解锁 Jenkins
- en: Use the administrator password from the `/var/log/jenkins/jenkins.log` file
    to sign in for the first time.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `/var/log/jenkins/jenkins.log` 文件中的管理员密码首次登录。
- en: 'The next screen will prompt you to install plugins. Please install the suggested
    plugins:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下一屏幕会提示您安装插件。请安装推荐的插件：
- en: '![Figure 7.2 – Customize Jenkins'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – 自定义 Jenkins](img/B11641_07_001.jpg)'
- en: '](img/B11641_07_002.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B11641_07_002.jpg)'
- en: Figure 7.2 – Customize Jenkins
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 自定义 Jenkins
- en: 'If your system has less than 4 GB of memory, you will want to run with a swap
    file. Run the `free` command to see if the server has any swap memory available.
    If not, issue these commands to create a 1 GB swap file and activate it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的系统内存少于 4 GB，您需要使用交换文件。运行 `free` 命令查看服务器是否有可用的交换内存。如果没有，请执行以下命令创建一个 1 GB
    的交换文件并激活它：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should see that the system has non-zero swap memory in the output of `free`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能在 `free` 命令的输出中看到系统有非零的交换内存。
- en: Jenkins security and HTTPS
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 安全性与 HTTPS
- en: For production use, you should configure Jenkins to run behind either an SSL-terminating
    load balancer or a web server configured with an SSL certificate that will listen
    on HTTPS. Please consult the Jenkins documentation or the many tutorials available
    on the internet regarding securing Jenkins with HTTPS on how to accomplish this.
    You should also consider restricting the set of IP addresses that can directly
    reach the Jenkins server as these servers are frequent targets for malicious actors.
    See the *Further reading* section at the end of this chapter for more about securing
    Jenkins.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产环境，您应配置 Jenkins 通过 SSL 终端负载均衡器或已配置 SSL 证书的 Web 服务器后端运行，并监听 HTTPS。有关如何使用
    HTTPS 安全化 Jenkins，请参考 Jenkins 文档或互联网上的许多教程。您还应该考虑限制可以直接访问 Jenkins 服务器的 IP 地址范围，因为这些服务器是恶意攻击者的常见目标。有关更多关于如何确保
    Jenkins 安全的信息，请参阅本章末尾的*进一步阅读*部分。
- en: In order to use Jenkins with Docker, you will need to install the Docker Pipeline
    plugin. From the Jenkins main screen, go to the **Manage Jenkins** | **Manage
    Plugins** menu, click on the **Available** tab, select the **Docker Pipeline**
    plugin, and then press the **Download now and install after restart** button.
    When Jenkins restarts, log in again.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Jenkins 与 Docker 一起使用，您需要安装 Docker Pipeline 插件。从 Jenkins 主屏幕，进入 **管理 Jenkins**
    | **管理插件** 菜单，点击 **可用** 标签，选择 **Docker Pipeline** 插件，然后按 **立即下载并在重启后安装** 按钮。Jenkins
    重启后，请重新登录。
- en: Now that you have a Jenkins server available to you, you can proceed to configure
    it to talk to the production server.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经可以使用 Jenkins 服务器了，可以开始配置它与生产服务器进行通信。
- en: How Jenkins can support continuous deployment
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jenkins 如何支持持续部署
- en: Jenkins can check out the sources for a project from version control, build
    the software, run tests, and run deployment scripts. Because it has Docker support,
    it can build a Docker container, push the container to Docker Hub or another container
    repository, and then run deployment scripts that connect to a server to tell it
    to update its running Docker containers. In order to support all these objectives,
    we must configure Jenkins to integrate with the production server, with a version
    control repository, and with Docker Hub. First, we will ensure that we can use
    Jenkins to connect to the production server.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 可以从版本控制中检出项目源代码、构建软件、运行测试并执行部署脚本。由于它支持 Docker，它可以构建 Docker 容器，将容器推送到
    Docker Hub 或其他容器仓库，然后运行连接到服务器的部署脚本，指示其更新运行中的 Docker 容器。为了支持这些目标，我们必须配置 Jenkins
    与生产服务器、版本控制仓库以及 Docker Hub 集成。首先，我们将确保可以使用 Jenkins 连接到生产服务器。
- en: The Jenkinsfile and host connectivity
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkinsfile 和主机连接
- en: To ensure repeatable builds, we are going to use Jenkins scripts to run build
    and deployment automation. Jenkins supports a type of script called a `Jenkinsfile`.
    Because these scripts are written using the G[roovy language (see http](https://groovy-lang.org/)s://groovy-lang.org/),
    you can declare variables, write functions, and use many features of this very
    powerful language to help you build and deploy your software. Jenkins supports
    both a free-form scripting style and a more structured declarative style of script
    that uses a special Groovy DSL to provide more scaffolding for concise scripts.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保可重复的构建，我们将使用 Jenkins 脚本来运行构建和部署自动化。Jenkins 支持一种名为 `Jenkinsfile` 的脚本类型。由于这些脚本使用
    G[roovy 语言编写（请参见 http](https://groovy-lang.org/)s://groovy-lang.org/），您可以声明变量、编写函数，并利用该强大语言的许多功能来帮助构建和部署软件。Jenkins
    支持自由形式的脚本风格以及使用 Groovy 特殊领域特定语言（DSL）提供更多框架、简洁脚本的结构化声明式脚本风格。
- en: 'See here for more information on how to write a `Jenkinsfile`: [https://www.jenkins.io/doc/book/pipeline/jenkinsfile/](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何编写 `Jenkinsfile` 的更多信息，请参见：[https://www.jenkins.io/doc/book/pipeline/jenkinsfile/](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/)
- en: You can either directly enter these scripts into a Jenkins job definition or
    store them in version control. If you put a file called `Jenkinsfile` in the root
    of a version control repository, Jenkins can discover those files if it gets configured
    to talk to a version control system such as GitHub.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接将这些脚本输入到Jenkins作业定义中，或者将它们存储在版本控制中。如果您将名为`Jenkinsfile`的文件放在版本控制仓库的根目录中，Jenkins可以在配置与版本控制系统（如GitHub）连接后自动发现这些文件。
- en: Testing Jenkins and Docker with a pipeline script
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用管道脚本测试Jenkins和Docker
- en: 'To test that Jenkins and Docker are working together, we will first enter a
    script through the console. At the top-level Jenkins screen, click on the `Hello
    Docker`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试Jenkins和Docker是否正常协同工作，我们将首先通过控制台输入脚本。在Jenkins的顶层屏幕上，点击`Hello Docker`：
- en: '![Figure 7.3 – New Item – Hello Docker pipeline ](img/B11641_07_003.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 新建项 – Hello Docker管道](img/B11641_07_003.jpg)'
- en: Figure 7.3 – New Item – Hello Docker pipeline
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 新建项 – Hello Docker管道
- en: 'Then, in the `chapter7/``Jenkinsfile-hello-world` in the companion GitHub project):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`chapter7/`的`Jenkinsfile-hello-world`文件中（在配套的GitHub项目中）：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Save the job and click on the **Build Now** link, and Jenkins will create build
    **#1**. Follow the link for **#1** that appears on the left and then click on
    the **Console Output** button. You should see something like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 保存作业并点击**立即构建**链接，Jenkins将创建构建**#1**。点击左侧出现的**#1**链接，然后点击**控制台输出**按钮。您应该会看到类似以下内容：
- en: '![Figure 7.4 – New Item – Hello Docker Console Output'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.4 – 新建项 – Hello Docker 控制台输出](img/B11641_07_004.jpg)'
- en: '](img/B11641_07_004.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B11641_07_004.jpg)'
- en: Figure 7.4 – New Item – Hello Docker Console Output
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 新建项 – Hello Docker 控制台输出
- en: You should see `Hello, World (Docker for Developers Chapter 7)` in the **Console
    Output** on the Jenkins web page. If you see out of memory errors here, ensure
    that you have a swap file on your Jenkins server. If you see an error about Docker
    not being a known agent type, go to the **Manage Jenkins** | **Manage Plugins**
    menu, and install the **Docker Pipeline** plugin.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会在Jenkins网页的**控制台输出**中看到`Hello, World（Docker for Developers 第7章）`。如果这里出现内存不足错误，请确保您的Jenkins服务器上有交换文件。如果看到关于Docker不是已知代理类型的错误，请转到**管理Jenkins**
    | **管理插件**菜单，安装**Docker Pipeline**插件。
- en: Connecting to the production server via SSH
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过SSH连接到生产服务器
- en: Next, we will configure Jenkins to connect to the production server via SSH.
    We need to do this in order to control the Docker subsystem on the remote server.
    We will generate an SSH key for Jenkins to use and add it to the production server's
    list of authorized keys.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将配置Jenkins通过SSH连接到生产服务器。我们需要这样做，以便控制远程服务器上的Docker子系统。我们将为Jenkins生成一个SSH密钥，并将其添加到生产服务器的授权密钥列表中。
- en: Generating an SSH key and adding it to Jenkins credentials
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成SSH密钥并将其添加到Jenkins凭证
- en: 'On your local workstation, issue the following command to generate a 2,048-bit
    RSA SSH key pair and view it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地工作站上，执行以下命令以生成一个2,048位的RSA SSH密钥对并查看它：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Copy the contents of the `jenkins.shipit` file to your clipboard, then go to
    your Jenkins home page, and in the left-hand menu, navigate to the `jenkins.shipit`
    and enter the username of the non-root user from the production server (typically,
    `centos` for CentOS 7 cloud servers). Click on **Enter directly** and add the
    key and click on the **OK** button to save the credentials:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将`jenkins.shipit`文件的内容复制到剪贴板，然后转到Jenkins主页，在左侧菜单中找到`jenkins.shipit`，并输入生产服务器的非root用户的用户名（对于CentOS
    7云服务器，通常为`centos`）。点击**直接输入**，添加密钥并点击**确定**按钮以保存凭证：
- en: '![Figure 7.5 – Add Credentials – SSH key'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.5 – 添加凭证 – SSH密钥](img/B11641_07_004.jpg)'
- en: '](img/B11641_07_005.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B11641_07_005.jpg)'
- en: Figure 7.5 – Add Credentials – SSH key
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 添加凭证 – SSH密钥
- en: 'Copy the SSH public key, `jenkins.shipit.pub`, from your local system to the
    production server and append it to the `~/.ssh/authorized_keys` file. By entering
    the following commands on your local workstation, replace `centos@192.2.0.10`
    with the username and IP address of your production server:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 将SSH公钥`jenkins.shipit.pub`从本地系统复制到生产服务器，并将其追加到`~/.ssh/authorized_keys`文件中。通过在本地工作站上输入以下命令，将`centos@192.2.0.10`替换为您的生产服务器的用户名和IP地址：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Test that the SSH key authentication is working by using the key to log in
    from your local workstation:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用密钥从本地工作站登录，测试SSH密钥认证是否正常工作：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once you have done this, you can create a test job that uses these credentials
    to SSH to the server.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您可以创建一个测试作业，使用这些凭证通过SSH连接到服务器。
- en: Use a Jenkins Pipeline job to SSH to the production server
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Jenkins管道作业通过SSH连接到生产服务器
- en: 'In the Jenkins web console, create a new Jenkins job with the `SSH to Production`,
    and pick the **Pipeline** job type:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jenkins Web 控制台中，创建一个新的 Jenkins 任务，选择 `SSH to Production`，并选择 **Pipeline**
    任务类型：
- en: '![Figure 7.6 – Create Item – SSH to Production'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – 创建项目 – SSH 到生产环境](img/B11641_07_006.jpg)'
- en: '](img/B11641_07_006.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B11641_07_006.jpg)'
- en: Figure 7.6 – Create Item – SSH to Production
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 创建项目 – SSH 到生产环境
- en: 'In the job definition form, in the `centos@192.2.0.10` to the user and host
    for your production se[rver, and save the job script (see `chapte`](https://github.com/PacktPublishing/Docker-for-Developers/blob/master/chapter7/Jenkinsfile-ssh-proof-of-concept)`r7/Jenkinsfile-ssh-proof-of-concept`)
    in the companion GitHub project):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务定义表单中，在 `centos@192.2.0.10` 中填写生产服务器的用户和主机，并保存任务脚本（请参见 `chapter7/Jenkinsfile-ssh-proof-of-concept`）并将其存储在配套的
    GitHub 项目中：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you run this by clicking on the **Build Now** link, and view the console
    output, you should see output similar to the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击 **Build Now** 链接并查看控制台输出时，你应该会看到类似以下的输出：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you do not see the output of `docker ps`, double-check the username, IP address,
    and SSH key. Check for any error messages that Jenkins emits about the `Jenkinsfile`
    or related to the `ssh` shell command to troubleshoot. You will need to get this
    to work in order to get the next stage to work reliably.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有看到 `docker ps` 的输出，请仔细检查用户名、IP 地址和 SSH 密钥。检查 Jenkins 关于 `Jenkinsfile` 或与
    `ssh` shell 命令相关的错误信息以进行故障排除。你需要让这个部分正常工作，才能确保下一阶段的顺利进行。
- en: You can use Jenkins to connect to other hosts to run scripts that use `docker`
    and `docker-compose`. But you can also run `docker` and `docker-compose` directly
    on the Jenkins server if you need to. We will explore that later in the chapter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Jenkins 连接到其他主机来运行使用 `docker` 和 `docker-compose` 的脚本。但如果需要，您也可以直接在 Jenkins
    服务器上运行 `docker` 和 `docker-compose`。我们将在本章后面探讨这一点。
- en: Now that we can use Jenkins to connect to the production server via SSH, using
    a pipeline script, we can use that connection to make changes to the production
    server, including deploying new changes to the server.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过 SSH 使用 Jenkins 连接到生产服务器，并通过管道脚本使用该连接对生产服务器进行更改，包括将新的更改部署到服务器上。
- en: Driving configuration changes through Jenkins
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 Jenkins 驱动配置更改
- en: Next, we will learn how to make changes to the production system by running
    scripts from the Git repository hosted in Jenkins. We can use Jenkins both to
    build the Docker containers for the application and to deploy those containers
    on the production server. That way, any changes to either the program or to its
    `Dockerfile` or the `docker-compose.yml` file can be propagated through automation
    to the production system.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何通过运行托管在 Jenkins 中的 Git 仓库中的脚本来对生产系统进行更改。我们可以使用 Jenkins 来构建应用程序的 Docker
    容器，并将这些容器部署到生产服务器上。这样，程序、`Dockerfile` 或 `docker-compose.yml` 文件的任何更改都可以通过自动化传播到生产系统。
- en: Here are some tips for integrating Jenkins with other systems, including GitHub,
    that can make your life easier. The first tip relates to the best way to configure
    Jenkins with a `Jenkinsfile`—by storing it in a version control system.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于如何将 Jenkins 与其他系统（包括 GitHub）集成的提示，它们可以让你的工作更加轻松。第一个提示是如何通过将 `Jenkinsfile`
    存储在版本控制系统中，来配置 Jenkins。
- en: Using Git and GitHub to store your Jenkinsfile
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Git 和 GitHub 存储你的 Jenkinsfile
- en: In the previous section, we used `Jenkinsfile` entered directly into a Jenkins
    job to do some quick testing. That works well for doing exploratory work, but
    to build and manage a more complex set of scripts, you should use Git version
    control to store the `Jenkinsfile` and use GitHub to store and share the Git repository,
    since GitHub integrates nicely with Jenkins. This will let you make changes not
    only to your program but also to the deployment scripts in a controlled fashion.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们直接在 Jenkins 任务中使用 `Jenkinsfile` 进行了一些快速测试。这对于进行探索性工作非常有效，但为了构建和管理更复杂的脚本集，您应该使用
    Git 版本控制来存储 `Jenkinsfile`，并使用 GitHub 来存储和共享 Git 仓库，因为 GitHub 与 Jenkins 的集成非常顺畅。这将使您能够以受控的方式对程序和部署脚本进行更改。
- en: 'For more information about why you should use the Git version control system
    in conjunction with GitHub, see this introductory guide: [https://guides.github.com/introduction/git-handbook/](https://guides.github.com/introduction/git-handbook/).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于为什么你应该将 Git 版本控制系统与 GitHub 一起使用的信息，请参阅这个入门指南：[https://guides.github.com/introduction/git-handbook/](https://guides.github.com/introduction/git-handbook/)。
- en: We can combine the power of a script stored in GitHub with the Jenkins `Jenkinsfile`
    as the one in the repository for this book to deploy the demonstration project.
    This support for environment variable substitution will allow you to use the `Jenkinsfile`
    unchanged, even though your production server may be set up with a distinct user
    and host, while also using your SSH, Docker Hub, and GitHub credentials, which
    are similarly distinct.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将存储在 GitHub 中的脚本与 Jenkins 中的 `Jenkinsfile`（例如本书仓库中的那个）结合，部署示范项目。通过这种对环境变量替换的支持，即使你的生产服务器可能配置了不同的用户和主机，也能使用未改变的
    `Jenkinsfile`，同时使用你独特的 SSH、Docker Hub 和 GitHub 凭证。
- en: In order to make further progress, you must make sure that Jenkins has a GitHub
    username and security token as a credential so that you can use Jenkins to check
    out GitHub repositories.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步推进，你必须确保 Jenkins 拥有 GitHub 用户名和安全令牌凭证，以便你可以使用 Jenkins 检出 GitHub 仓库。
- en: Ensuring Jenkins has a GitHub username and security token credential
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确保 Jenkins 拥有 GitHub 用户名和安全令牌凭证
- en: In order to use Jenkins with GitHub, you will need to save a Jenkins credential
    that has a GitHub personal access token. I[n a web browser, sign in to GitHub](https://github.com/settings/tokens),
    and go to [https://github.com/settings/tokens](https://github.com/settings/tokens)
    and generate a token that has both the `repo` and `admin:repo_hook` scopes. Copy
    the generated token to the clipboard. Then, in another browser window, go to your
    Jenkins server and navigate through credentials to the Jenkins global credentials
    and create a `github.repo.username` and a description of `username` with your
    actual GitHub username. Press the **OK** button to save the credential.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 Jenkins 与 GitHub 一起使用，你需要保存一个包含 GitHub 个人访问令牌的 Jenkins 凭证。在浏览器中登录 GitHub，访问
    [https://github.com/settings/tokens](https://github.com/settings/tokens)，并生成一个同时具备
    `repo` 和 `admin:repo_hook` 权限的令牌。将生成的令牌复制到剪贴板。然后，在另一个浏览器窗口中，访问你的 Jenkins 服务器，导航到凭证部分，进入
    Jenkins 全局凭证，并创建一个 `github.repo.username` 和描述为 `username` 的凭证，凭证内容为你的实际 GitHub
    用户名。点击 **OK** 按钮保存凭证。
- en: Option 1 – Configuring Jenkins with a GitHub organization item
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 1 – 使用 GitHub 组织项配置 Jenkins
- en: Jenkins has support for defining *items* that might be individual Jenkins jobs
    or collections of related jobs. Several of the types of items allow you to connect
    a version control system to Jenkins so that it will automatically define multiple
    Jenkins jobs. One of the most powerful of these is a `GitHub Organization` item.
    Using a `GitHub Organization` item will allow Jenkins to scan GitHub for every
    project that has a `Jenkinsfile`, and Jenkins will automatically set up a forest
    of child items for all the repositories in the GitHub organization where it finds
    a `Jenkinsfile`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 支持定义 *项*，这些项可能是单独的 Jenkins 作业或相关作业的集合。几种项类型允许你将版本控制系统与 Jenkins 连接，从而自动定义多个
    Jenkins 作业。最强大的其中之一就是 `GitHub Organization` 项目。使用 `GitHub Organization` 项目，Jenkins
    将扫描 GitHub 上每个拥有 `Jenkinsfile` 的项目，并为在 GitHub 组织中找到 `Jenkinsfile` 的所有仓库自动设置子项集合。
- en: This is the easiest way to have Jenkins manage a set of related projects If
    you are using a new Jenkins server to explore Docker development, in a GitHub
    organization you control, try setting this up. If you are using a corporate Jenkins
    server, this may already be set up.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是让 Jenkins 管理一组相关项目的最简单方法。如果你正在使用新的 Jenkins 服务器来探索 Docker 开发，并且控制着一个 GitHub
    组织，尝试进行这个设置。如果你使用的是公司 Jenkins 服务器，这个设置可能已经完成。
- en: From your Jenkins installation's home page, click the `GitHub Organization`.
    Use the credentials labeled as **GitHub repo credentials (username)** and make
    sure the name in the organization field matches your GitHub organization name.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的 Jenkins 安装主页，点击 `GitHub Organization`。使用标记为 **GitHub 仓库凭证（用户名）** 的凭证，并确保组织字段中的名称与您的
    GitHub 组织名称匹配。
- en: You can set up a filter so that this scans only the projects you want for a
    `Jenkinsfile`. This might be a good idea if you have a huge number of repositories
    and branches in your organization, or if you only want your installation of Jenkins
    to build specific repositories—the repositories that might work with Jenkins—or
    there is some other Jenkins server that also builds a subset of the projects in
    your GitHub organization. If you want to do this, add a `Behavior` of type `Filter
    by name (with regular expression)` and construct a regular expression to match
    the names of only the repositories you want to include.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置一个过滤器，这样它只扫描你想要的包含 `Jenkinsfile` 的项目。如果你在组织中有大量的仓库和分支，或者你只希望 Jenkins 构建特定的仓库（这些仓库可能与
    Jenkins 配合使用），或者如果还有其他 Jenkins 服务器也构建 GitHub 组织中的一部分项目，这可能是个不错的主意。如果你想这么做，可以添加一个类型为
    `Filter by name (with regular expression)` 的 `Behavior`，并构建一个正则表达式来匹配你想要包含的仓库名称。
- en: Using GitHub, fork the Docker-for-Developers repository ([https://github.com/PacktPublishing/Docker-for-Developers/](https://github.com/PacktPublishing/Docker-for-Developers/))
    to your organization. Alternatively, if you don't want to fork the repository,
    create an empty repository in your organization. Then, push your local copy of
    the repository to the freshly created repository, go into the GitHub organization
    item you created, and you should see a **Docker-for-Developers** item show up.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GitHub，将 Docker-for-Developers 仓库（[https://github.com/PacktPublishing/Docker-for-Developers/](https://github.com/PacktPublishing/Docker-for-Developers/)）分叉到你的组织中。或者，如果你不想分叉仓库，可以在你的组织中创建一个空的仓库。然后，将你本地的仓库副本推送到新创建的仓库中，进入你创建的
    GitHub 组织项，你应该能看到 **Docker-for-Developers** 项目。
- en: If you are using an individual GitHub account, and lack access to a GitHub organization,
    this may not be a good option, however. You could instead configure Jenkins with
    a multibranch pipeline item that retrieves the `Jenkinsfile` from a single GitHub
    repository.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你使用的是个人 GitHub 账户，且无法访问 GitHub 组织，这可能不是一个好的选择。你可以改为使用多分支流水线项配置 Jenkins，从一个单一的
    GitHub 仓库中提取 `Jenkinsfile`。
- en: Option 2 – Configuring Jenkins with a multibranch pipeline item
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 2 – 使用多分支流水线项配置 Jenkins
- en: Using a multibranch pipeline item will allow Jenkins to scan GitHub for a single
    repository for every project that has a `Jenkinsfile`, and Jenkins will automatically
    set up a forest of child items for branches and pull requests for a single configured
    GitHub repository, for branches where it finds a `Jenkinsfile`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多分支流水线项将允许 Jenkins 扫描 GitHub 中每个包含 `Jenkinsfile` 的项目的单一仓库，Jenkins 会自动为每个 Git
    分支创建子项，如果该分支中存在 `Jenkinsfile`，并且为合并请求设置 Jenkins 作业。
- en: Fork the Docker-for-Developers repository to your organization or create an
    empty repository in your account and push your local copy of the repository to
    GitHub. You need to do this before configuring the multibranch pipeline.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Docker-for-Developers 仓库分叉到你的组织中，或在你的账户中创建一个空的仓库，并将你本地的仓库副本推送到 GitHub。在配置多分支流水线之前，你需要完成这一步。
- en: From your Jenkins installation's home page, click the `Multibranch Pipeline`.
    In **Branch Sources**, choose **GitHub**, and then fill out the GitHub form with
    the credentials labeled as **GitHub repo credentials (username)**, and put the
    URL of your GitHub repository in the **Repository HTTPS URL** field. Then, save
    the item. It will scan the repository and set up the individual Jenkins jobs for
    each Git branch.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的 Jenkins 安装主页，点击 `Multibranch Pipeline`。在 **Branch Sources** 中，选择 **GitHub**，然后填写
    GitHub 表单中的凭据，凭据标签为 **GitHub repo credentials (username)**，并在 **Repository HTTPS
    URL** 字段中填写你的 GitHub 仓库 URL。然后，保存该项。Jenkins 会扫描该仓库，并为每个 Git 分支设置独立的 Jenkins 作业。
- en: At this point, whether you have used the multibranch pipeline or the GitHub
    organization item type, you should have a set of branches in your Jenkins.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，无论你是使用多分支流水线还是 GitHub 组织项类型，你的 Jenkins 中应该已经有了一组分支。
- en: Changing the origin of all checked out repositories
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改所有已检出仓库的来源
- en: 'At this point, you should also change the URL for your Git repositories, both
    on your local workstation, and on the production server you set up in the previous
    chapter, to the new repository URL. Replace `example` with the name of your GitHub
    organization or user where you forked the repository:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你还应该将你的 Git 仓库的 URL 更改为新的仓库 URL，无论是在本地工作站，还是在前一章节中设置的生产服务器上。将 `example` 替换为你分叉仓库时使用的
    GitHub 组织或用户的名称：
- en: '[PRE10]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Checking that your GitHub repository is talking to Jenkins via a webhook
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查你的 GitHub 仓库是否通过 webhook 与 Jenkins 进行通信
- en: GitHub can communicate with other systems via webhooks, which are HTTP requests
    that the system triggers, targeting another system, when people do certain actions.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub可以通过Webhooks与其他系统通信，这些Webhooks是当人们执行某些操作时系统触发的HTTP请求，针对另一个系统。
- en: 'See here for more information about GitHub''s support for webhooks and system
    integration: [https://developer.github.com/webhooks/](https://developer.github.com/webhooks/)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于GitHub对Webhooks和系统集成的支持信息，请参见：[https://developer.github.com/webhooks/](https://developer.github.com/webhooks/)
- en: When we set up the `GitHub Organization` item or the `MultiBranch Pipeline`
    item, Jenkins should have set up one of these webhooks in GitHub so that it can
    talk to Jenkins. If it did not, you can go to the `https://jenkins.example.com/github-webhook/`
    (replacing `jenkins.example.com` with your Jenkins server).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们设置`GitHub组织`项目或`多分支流水线`项目时，Jenkins应该在GitHub中设置其中一个Webhook，以便它可以与Jenkins通信。如果没有设置，您可以访问`https://jenkins.example.com/github-webhook/`（将`jenkins.example.com`替换为您的Jenkins服务器）。
- en: Now that we have configured Jenkins to be able to communicate with GitHub, we
    want to make sure that pushing a branch to GitHub triggers builds in Jenkins.
    Depending on your account's GitHub permissions and the Jenkins configuration,
    it might not have created the webhook automatically.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了Jenkins可以与GitHub通信，我们希望确保将分支推送到GitHub会触发Jenkins中的构建。根据您的帐户的GitHub权限和Jenkins配置，它可能没有自动创建Webhook。
- en: In a web browser, navigate to your GitHub repository and go to **Settings**,
    then to **Webhooks**, and verify that there is a webhook with your Jenkins server
    URL there.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web浏览器中，导航至您的GitHub存储库，进入**设置**，然后进入**Webhooks**，验证是否存在与您的Jenkins服务器URL相关的Webhook。
- en: What to expect now that Jenkins is connected to GitHub
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在Jenkins已连接到GitHub，可以预期发生什么
- en: Now that we have configured Jenkins to be able to check for the presence of
    a `Jenkinsfile` in the repository we are using, we can proceed. Jenkins will try
    to build the project you have just defined. The build will fail unless you provide
    Jenkins with additional variables and credentials, however.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了Jenkins以能够检查存储库中是否存在`Jenkinsfile`，我们可以继续。Jenkins将尝试构建您刚刚定义的项目。但是，除非您向Jenkins提供额外的变量和凭据，否则构建将失败。
- en: In order to tie the specific configurations for the build to your environment,
    we will need to use Jenkins to set up some environment variables to store the
    less sensitive items, in addition to storing cryptographic keys and passwords
    using the **Credentials** feature.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将构建的特定配置与您的环境绑定，我们需要使用Jenkins设置一些环境变量来存储不太敏感的项，除了使用**凭证**功能存储加密密钥和密码。
- en: Creating Jenkins environment variables for production support
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为生产支持创建Jenkins环境变量
- en: 'Jenkins has support for setting environment variables that items (build and
    deployment jobs, for example) can reference. For secret variables, such as SSH
    private keys, or Docker Hub API credentials, you can use the **Credentials** system
    that we used in the previous section to store these securely. For values that
    are less sensitive, we can use the **Environment variables** settings available
    on the Jenkins **configuration** screen:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins支持设置环境变量，可以供项目（例如构建和部署作业）引用。对于诸如SSH私钥或Docker Hub API凭证之类的机密变量，您可以使用我们在上一节中使用的**凭证**系统来安全存储这些变量。对于不太敏感的值，我们可以使用Jenkins**配置**屏幕上可用的**环境变量**设置：
- en: '![Figure 7.7 – Jenkins configuration – Environment variables for production
    host'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.7 – Jenkins配置 – 生产主机的环境变量'
- en: '](img/B11641_07_007.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B11641_07_007.jpg)'
- en: Figure 7.7 – Jenkins configuration – Environment variables for production host
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – Jenkins配置 – 生产主机的环境变量
- en: 'In order to proceed, please double-check with the DNS provider that you use
    that your production host has a DNS name associated with its IP address. In [*Chapter
    6*](B11641_06_Final_NM_ePub.xhtml#_idTextAnchor102), *Deploying Applications with
    Docker Compose*, we set up DNS names for the production server. Having a DNS name
    will make the configurations more readable and will make it easier for people
    to reach the server in a web browser. Set up variables for these keys and values:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续，请与您使用的DNS提供商确认，您的生产主机是否具有与其IP地址关联的DNS名称。在[*第6章*](B11641_06_Final_NM_ePub.xhtml#_idTextAnchor102)，*使用Docker
    Compose部署应用程序*中，我们为生产服务器设置了DNS名称。拥有DNS名称将使配置更易读，并使人们在Web浏览器中更容易访问服务器。设置这些密钥和值的变量：
- en: '`shipit_prod_host`: Production server DNS domain name, for example, [shipitclicker.example.com](http://shipitclicker.example.com))'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shipit_prod_host`：生产服务器 DNS 域名，例如 [shipitclicker.example.com](http://shipitclicker.example.com)'
- en: '`shipit_prod_user`: Production server username, for example, `centos`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shipit_prod_user`：生产服务器用户名，例如 `centos`'
- en: Once you have set up these variables, hit the **Save** button. We will use these
    variables when we run the Jenkins job that updates the running containers. Before
    we do that though, we need a place to put the containers. In a previous chapter,
    you learned how to push a container image to Docker Hub. Next, we will automate
    that process.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完这些变量后，点击 **保存** 按钮。当我们运行 Jenkins 作业以更新正在运行的容器时，将使用这些变量。不过，在此之前，我们需要一个容器存放的地方。在之前的章节中，你已经学会了如何将容器镜像推送到
    Docker Hub。接下来，我们将自动化这个过程。
- en: Building Docker containers and pushing them to Docker Hub
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Docker 容器并将其推送到 Docker Hub
- en: In order to avoid building the containers on the production server, we will
    need to build them on Jenkins and then push the containers into a Docker container
    registry, such as Docker Hub. This allows a clean separation of building the Docker
    containers from deploying them. If you try to both build and deploy the container
    on a single small server, it is highly likely that at some point you will run
    into out of memory issues or other system stability problems. And on a production
    server, you want to maximize the stability of that environment.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在生产服务器上构建容器，我们需要在 Jenkins 上构建容器，然后将它们推送到 Docker 容器注册中心，如 Docker Hub。这可以将构建
    Docker 容器与部署分开。如果你尝试在单个小型服务器上同时进行构建和部署，很可能会遇到内存不足或其他系统稳定性问题。而在生产服务器上，你希望最大限度地提高环境的稳定性。
- en: While you could push the container to Docker Hub from your local workstation,
    part of the benefit of using Jenkins is that you can use it to automatically build
    and push containers to a central repository. To do that, you will need to give
    Jenkins credentials to Docker Hub.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以从本地工作站将容器推送到 Docker Hub，使用 Jenkins 的好处之一是可以通过 Jenkins 自动构建并将容器推送到中央仓库。为此，你需要为
    Jenkins 提供 Docker Hub 的凭证。
- en: Adding Docker Hu[b credentials to Jenkin](https://hub.docker.com/)s credential
    manager
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Docker Hub [凭证添加到 Jenkins](https://hub.docker.com/)的凭证管理器中
- en: Log in to [https://hub.docker.com/](https://hub.docker.com/) with your Docker
    accoun[t and create an API token for Jenkins t](https://hub.docker.com/settings/security)o
    use from the [https://hub.docker.com/settings/security](https://hub.docker.com/settings/security)
    security settings page. Copy that API token to the clipboard and in another web
    browser tab, visit the Jenkins credential manager and create another global unrestricted
    credential of type `Username with Password`. Give it an ID called [shipit.dockerhub.id](http://shipit.dockerhub.id)
    and put your Docker account username in the `username` field, and the access token
    in the `password` field and save it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的 Docker 账户登录到 [https://hub.docker.com/](https://hub.docker.com/)，并为 Jenkins
    创建一个 API token，供其使用。API token 可以在 [https://hub.docker.com/settings/security](https://hub.docker.com/settings/security)
    的安全设置页面找到。复制该 API token 到剪贴板，然后在另一个浏览器标签页中访问 Jenkins 凭证管理器，创建一个新的全局无限制凭证，类型为 `用户名和密码`。将其
    ID 命名为 [shipit.dockerhub.id](http://shipit.dockerhub.id)，并在 `用户名` 字段中输入你的 Docker
    账户用户名，在 `密码` 字段中输入访问 token，然后保存。
- en: This will allow you to use your Docker Hub credentials to push a build to Docker
    Hub, and since we already have SSH credentials set up in Jenkins, we can use those
    to push a Docker image to Docker Hub after we build it, and then to connect to
    the production server in order to deploy the new software.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许你使用 Docker Hub 凭证将构建推送到 Docker Hub，并且由于我们已经在 Jenkins 中设置了 SSH 凭证，我们可以使用这些凭证在构建完
    Docker 镜像后将其推送到 Docker Hub，然后连接到生产服务器以部署新软件。
- en: Ensuring the previous production environment is stopped
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确保停止先前的生产环境
- en: If the production environment from the previous chapter is running, you will
    need to stop it in order to deploy the new environment. This will ensure that
    the new production environment can bind to the correct TCP ports.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上一章节中的生产环境正在运行，你需要停止它才能部署新环境。这将确保新生产环境能够绑定到正确的 TCP 端口。
- en: Note
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In a situation where you have a real production application with valuable customer
    data, you would want to back up and restore any databases and other persistent
    storage to the new environment. The ShipIt Clicker application only uses Redis
    in order to save details about the production environment. For Redis, this can
    be done via the CLI using the `SAVE` command. You can then copy the resulting
    `dump.rdb` file into the Docker volume that this chapter's Redis container uses.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在你拥有真实的生产应用程序并且有宝贵的客户数据的情况下，你会希望将任何数据库和其他持久化存储备份并恢复到新环境中。ShipIt Clicker应用程序仅使用Redis来保存有关生产环境的详细信息。对于Redis，可以通过CLI使用`SAVE`命令来完成。然后，你可以将生成的`dump.rdb`文件复制到本章Redis容器使用的Docker卷中。
- en: 'From your local workstation, SSH to the server and stop it (replace `192.0.2.10`
    with the IP address of your server):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的本地工作站，SSH到服务器并停止它（将`192.0.2.10`替换为你服务器的IP地址）：
- en: '[PRE11]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that the previous Docker containers are stopped, you may proceed with using
    Jenkins to build the software, push to Docker Hub, and deploy the containers on
    the production server. You only have to do this once, when you are first transitioning
    from the setup from the previous chapter to the environment managed by Jenkins
    in this chapter.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，之前的Docker容器已经停止，你可以继续使用Jenkins构建软件、推送到Docker Hub并在生产服务器上部署容器。你只需在从上一章的设置转到本章Jenkins管理的环境时执行一次此操作。
- en: Next, let's trigger a production environment deployment through Jenkins.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过Jenkins触发生产环境的部署。
- en: Pushing to Docker Hub and triggering a production deployment
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推送到Docker Hub并触发生产部署
- en: 'Now that we have all the environment variables and credentials in place, we
    can trigger a Jenkins build. Jenkins normally triggers a build when it detects
    a commit, but we can also force Jenkins to start a build. Go to the Jenkins job
    that is hooked up to the GitHub repository where the application code resides
    for the `master` branch and click on **Build Now**. Jenkins will start building
    the job and show the build number in the user interface:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了所有的环境变量和凭证，可以触发Jenkins构建了。Jenkins通常在检测到提交时触发构建，但我们也可以强制Jenkins启动构建。进入与存放应用代码的GitHub仓库挂钩的Jenkins作业页面，选择`master`分支，然后点击**立即构建**。Jenkins将开始构建作业，并在用户界面中显示构建编号：
- en: '![Figure 7.8 – Jenkins jobs in GitHub Organization – master branch'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.8 – GitHub组织中的Jenkins作业 – 主分支'
- en: '](img/B11641_07_008.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B11641_07_008.jpg)'
- en: Figure 7.8 – Jenkins jobs in GitHub Organization – master branch
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – GitHub组织中的Jenkins作业 – 主分支
- en: Before we check on the progress of the job, let's examine how it works.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查作业进度之前，让我们先了解它是如何工作的。
- en: 'Jenkins runs a combination of the `Jenkinsfile` and the script `chapter7/bin/`[dep-ssh.sh](http://dep-ssh.sh)
    in order to build and deploy the software. The `Jenkinsfile` checks out the repository,
    builds the Docker container, and pushes it to Docker Hub. The following excerpt
    from the `Jenkinsfile` shows the code that manages the checkout, build, and push
    process:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins运行`Jenkinsfile`和脚本`chapter7/bin/`[dep-ssh.sh](http://dep-ssh.sh)的组合，以构建和部署软件。`Jenkinsfile`检查仓库、构建Docker容器并将其推送到Docker
    Hub。以下是`Jenkinsfile`的一个片段，展示了管理检出、构建和推送过程的代码：
- en: '[PRE12]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next stage, the `deploy` stage, runs when the branch is `master` or staging
    and invokes the shell script `chapter7/bin/dep-ssh.sh`, which connects to the
    server via SSH and updates the copy of the repository, pulls the built Docker
    containers, and restarts the containers. See the following excerpt from `dep-ssh.sh`
    for the most important part:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 下一阶段，`deploy`阶段，当分支为`master`或staging时运行，并调用shell脚本`chapter7/bin/dep-ssh.sh`，通过SSH连接到服务器，更新仓库副本，拉取构建的Docker容器并重启容器。请参见以下`dep-ssh.sh`的片段，了解最重要的部分：
- en: '[PRE13]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that you understand how the build and deploys are chained together, you
    should see whether the deployment to the production environment worked.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了构建和部署是如何串联在一起的，接下来你应该查看部署到生产环境是否成功。
- en: Verifying that the deployment worked
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证部署是否成功
- en: 'Click on the most recent build and then click on `Finished: Success` at the
    end of the console output.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '点击最新的构建，然后点击控制台输出末尾的`Finished: Success`。'
- en: 'The console output will show these basic steps:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出将显示这些基本步骤：
- en: The Git repository being cloned from GitHub.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正在从GitHub克隆Git仓库。
- en: The Docker container being built.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正在构建Docker容器。
- en: The Docker container being pushed to Docker Hub.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正在将Docker容器推送到Docker Hub。
- en: Jenkins connecting to the production server via SSH.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins通过SSH连接到生产服务器。
- en: The script `chapter7/bin/ssh-dep.sh` runs on the production server, which then
    pulls the image from Docker Hub and restarts the Docker services.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本 `chapter7/bin/ssh-dep.sh` 在生产服务器上运行，它从 Docker Hub 拉取镜像并重新启动 Docker 服务。
- en: If any of the preceding steps fail, the Jenkins job will fail. If that happens,
    double-check that the credentials and environment variables are correct. You [can
    compare the output of](https://github.com/PacktPublishing/Docker-for-Developers/blob/master/chapter7/consoleOutput.txt)
    your test run to the sample output, `chapter7/consoleOutput.txt`, in the companion
    GitHub repository to see whether your Jenkins run worked as expected.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的任何步骤失败，Jenkins 任务将会失败。如果发生这种情况，请仔细检查凭据和环境变量是否正确。你[可以比较](https://github.com/PacktPublishing/Docker-for-Developers/blob/master/chapter7/consoleOutput.txt)你的测试运行输出与样本输出
    `chapter7/consoleOutput.txt`，这个样本输出在伴随的 GitHub 仓库中，看看你的 Jenkins 运行是否按预期工作。
- en: If this has built successfully, you should be able to go [to the same URL you
    used in the p](http://shipitclicker.example.com/)revious chapter (for example,
    [http://shipitclicker.example.com/](http://shipitclicker.example.com/) or [http://192.2.0.10/](http://192.2.0.10/))
    in order to see the application. Congratulations! Now every push to the master
    branch, including when pull requests get merged to the master branch, will deploy
    the production environment. This is one of the simplest ways to achieve continuous
    deployment.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这已经成功构建，你应该能够访问[上一章中使用的相同 URL](http://shipitclicker.example.com/)（例如，[http://shipitclicker.example.com/](http://shipitclicker.example.com/)
    或 [http://192.2.0.10/](http://192.2.0.10/)）来查看应用程序。恭喜你！现在每次推送到主分支，包括合并拉取请求到主分支时，都会部署到生产环境。这是实现持续部署的最简单方法之一。
- en: You might want to be able to see your changes in a separate environment that
    is stable and always available so that if you make changes that might break the
    production environment, you can test them out in isolation. In the next section,
    we will learn how to set up a staging environment similar to the production environment
    and orchestrate deployments to it using Jenkins.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望能够在一个独立且稳定的环境中查看你的更改，并且该环境始终可用。这样，如果你做出的更改可能会破坏生产环境，你就可以在隔离的环境中进行测试。在下一节中，我们将学习如何设置一个与生产环境类似的预发布环境，并使用
    Jenkins 协调部署到该环境。
- en: Deploying to multiple environments through multiple branches
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过多个分支部署到多个环境
- en: Being able to deploy to a single production environment is valuable, but in
    order to support development and testing, it is useful to have at least one other
    environment other than the production environment to test with. That way, people
    testing the software who do not have a development environment can see the effect
    of changes you make, without you having to deploy them to the production environment.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 能够部署到单一的生产环境非常有价值，但为了支持开发和测试，最好拥有至少一个除了生产环境外的其他环境来进行测试。这样，测试软件的人如果没有开发环境，也可以看到你做出的更改的效果，而你不必将这些更改部署到生产环境。
- en: In the next part of the chapter, we are going to create a second environment,
    a staging environment, to allow us to test changes before they are in production.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的下一部分，我们将创建第二个环境，一个预发布环境，以便在更改进入生产环境之前进行测试。
- en: Creating a staging environment
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建预发布环境
- en: 'You will need another host, similar in specifications to the one running the
    production environment, for the staging environment. Once you can SSH to that
    host, you could follow the instructions in the previous chapter about installing
    Docker and Git. Assuming you are running on CentOS 7, you can use the following
    script snippet to quickly provision Docker on that system and test that it is
    working (replace `centos@192.2.0.11` with the user and host you are using for
    your staging environment, and the GitHub URL with the URL of your organization''s
    fork of the project repository):'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要另一台主机，规格与运行生产环境的主机类似，用作预发布环境。一旦你能够通过 SSH 连接到该主机，你可以按照上一章关于安装 Docker 和 Git
    的说明进行操作。如果你使用的是 CentOS 7，你可以使用以下脚本片段在该系统上快速配置 Docker，并测试其是否正常工作（将 `centos@192.2.0.11`
    替换为你在预发布环境中使用的用户和主机，将 GitHub URL 替换为你组织的项目仓库的 URL）：
- en: '[PRE14]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once you have Docker working on the staging system, you can enter the `exit`
    command to go back to your local workstation. Then, make sure that the staging
    system has the same SSH public key that the production system has. Do this from
    the directory that contains the `jenkins.shipit.pub` key file:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Docker 在预发布系统上运行正常，您可以输入 `exit` 命令回到本地工作站。然后，确保预发布系统具有与生产系统相同的 SSH 公钥。从包含
    `jenkins.shipit.pub` 密钥文件的目录中执行此操作：
- en: '[PRE15]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now that the staging server has been prepared with the right SSH credentials
    and the essential software needed to run Docker applications, we will configure
    Jenkins to support this staging environment.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，预发布服务器已经准备好，具备了正确的 SSH 凭证和运行 Docker 应用所需的基础软件，我们将配置 Jenkins 以支持这个预发布环境。
- en: Creating Jenkins environment variables for staging support
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为支持预发布环境创建 Jenkins 环境变量
- en: 'In order to prepare Jenkins for deployments to the staging server, we will
    return to the **Environment variables** settings available on the Jenkins **configuration**
    screen. In order to proceed, please make sure that your staging host has a DNS
    name associated with it. Set up variables for these keys and values:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备 Jenkins 部署到预发布服务器，我们将返回到 Jenkins **环境变量**设置，这些设置可以在 Jenkins **配置**页面中找到。为了继续，请确保您的预发布主机已与
    DNS 名称关联。为以下键值设置环境变量：
- en: '`shipit_staging_host`: Staging server DNS domain name, for example, `shipit-staging.example.com`)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shipit_staging_host`：预发布服务器的 DNS 域名，例如 `shipit-staging.example.com`'
- en: '`shipit_staging_user`: Staging server username, for example, `centos`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shipit_staging_user`：预发布服务器用户名，例如 `centos`'
- en: Deploying by force-pushing to the staging branch
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过强制推送到预发布分支进行部署
- en: The deployment scripts detect what branch is being processed and deploy to the
    right environment. This is done with a combination of directives in the `Jenkinsfile`
    and having the deploy script use environment variables set up through the `Jenkinsfile`
    and the Jenkins global configuration. Before we get to the example that shows
    how to use Git to force-push, we need to examine the `Jenkinsfile` and support
    scripts to see how they handle branch names.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 部署脚本会检测正在处理的分支，并将代码部署到正确的环境。这是通过 `Jenkinsfile` 中的指令和部署脚本使用通过 `Jenkinsfile` 和
    Jenkins 全局配置设置的环境变量的结合实现的。在我们展示如何使用 Git 强制推送之前，我们需要检查 `Jenkinsfile` 和支持脚本，看看它们如何处理分支名称。
- en: How do the scripts know what server to use?
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本如何知道使用哪个服务器？
- en: 'The `Jenkinsfile` will only run the deploy stage if the branch name is either
    `master` or `staging`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`Jenkinsfile` 只有在分支名称为 `master` 或 `staging` 时才会运行部署阶段：'
- en: '[PRE16]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next up, we are going to see some of the power of using a `Jenkinsfile`, showing
    off some of the Groovy language features such as variable interpolation and calling
    functions. The steps that follow in the `Jenkinsfile` define environment variables
    that the `chapter7/bin/ssh-dep.sh` script uses to help pick the right environment:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将展示使用 `Jenkinsfile` 的一些优势，展示 Groovy 语言的一些特性，如变量插值和调用函数。接下来在 `Jenkinsfile`
    中的步骤定义了环境变量，`chapter7/bin/ssh-dep.sh` 脚本使用这些变量来帮助选择正确的环境：
- en: '[PRE17]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These use Jenkins variable interpolation expressions to call Jenkins functions
    written in Groovy (`getTarget()` and `getImageName(appName)`) that set some of
    the environment variables that the  `chapter7/bin/ssh-dep.sh` script uses.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这些使用 Jenkins 变量插值表达式来调用用 Groovy 编写的 Jenkins 函数（`getTarget()` 和 `getImageName(appName)`），这些函数设置了
    `chapter7/bin/ssh-dep.sh` 脚本使用的一些环境变量。
- en: 'The `getTarget()` function uses this ternary expression to pick whether to
    target the `prod` or `staging` environment:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`getTarget()` 函数使用这个三元表达式来决定是选择 `prod` 环境还是 `staging` 环境：'
- en: '[PRE18]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once the flow of control has passed to the `chapter7/bin/ssh-dep.sh` script,
    it uses the target environment variables to pick what environment to target and
    sets variables up so that the SSH command will pick the correct server:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦控制流传递给 `chapter7/bin/ssh-dep.sh` 脚本，它会使用目标环境变量来选择要部署的环境，并设置变量，以便 SSH 命令能够选择正确的服务器：
- en: '[PRE19]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this way, the shell script sets up `targetEnv` so that the following SSH
    command can reach the correct server:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，脚本设置了 `targetEnv`，使得接下来的 SSH 命令可以访问正确的服务器：
- en: '[PRE20]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now that you see how the variables in the `Jenkinsfile` and `chapter7/bin/ssh-dep.sh`
    interact, you are ready to use Git to initiate a deployment to staging.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经了解了 `Jenkinsfile` 和 `chapter7/bin/ssh-dep.sh` 中的变量如何交互，您可以使用 Git 来触发部署到预发布环境。
- en: Preparing to use Git to force-push a branch to staging
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备使用 Git 强制推送分支到预发布环境
- en: Although force-pushing branches in Git can be problematic, this is one of the
    times when it makes sense. If you consider the `staging` branch to be special,
    not something that you would ordinarily merge into the master, you can then repeatedly
    force-push work in progress from any branch to it.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在 Git 中强制推送分支可能会带来问题，但在某些情况下这样做是合理的。如果你认为 `staging` 分支是一个特殊的分支，不是你通常会合并到主分支的内容，那么你可以反复将任何分支上的工作进度强制推送到该分支。
- en: 'On your local workstation, create a new branch in the Git repository called
    `experiment` by issuing the command `git checkout -b experiment`. Edit the `chapter7/src/public/index.html`
    file and change the text enclosed in the `<h1>` tags to `ShipIt Clicker Experiment`.
    Save the file and do a `git commit` command. Then, force-push the `HEAD` of your
    branch to GitHub as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地工作站上，通过执行命令 `git checkout -b experiment` 在 Git 仓库中创建一个新的分支 `experiment`。编辑
    `chapter7/src/public/index.html` 文件，并将 `<h1>` 标签中的文本更改为 `ShipIt Clicker Experiment`。保存文件并执行
    `git commit` 命令。然后，强制将你分支的 `HEAD` 推送到 GitHub，命令如下：
- en: '[PRE21]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will push the code you just committed to GitHub. Then, open a web browser
    to your Jenkins server and examine the item for your repository. You should shortly
    see that Jenkins has created a `staging` branch job and will build the software
    and push it to Docker Hub, and deploy it to the staging environment. Observe the
    Jenkins console log for the job for the `staging` branch and make sure that it
    is similar to the one for the production deployments from the `master` branch.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把你刚刚提交的代码推送到 GitHub。然后，打开浏览器访问你的 Jenkins 服务器，查看你仓库的相关项。你应该很快看到 Jenkins 创建了一个
    `staging` 分支任务，并将构建软件、推送到 Docker Hub 并部署到预发布环境。观察该 `staging` 分支任务的 Jenkins 控制台日志，确保它与你从
    `master` 分支部署生产环境时的日志类似。
- en: If your deployment worked, check with a web browser to see that the title of
    the application on the staging server is `ShipIt Clicker Experiment`—the text
    you changed.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果部署成功，使用浏览器检查预发布服务器上应用程序的标题是否为 `ShipIt Clicker Experiment`——你更改的文本。
- en: At this point, we have used Jenkins to deploy a Docker application to both a
    production and a staging server. You might wonder what it would take to add a
    third or fourth environment, or what the drawbacks of this approach might be.
    Very complex scripts and environments might make it harder to deploy with Jenkins—let's
    examine that more closely.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用 Jenkins 将一个 Docker 应用部署到了生产和预发布服务器。你可能会想，添加第三个或第四个环境需要做什么，或者这种方法的缺点是什么。非常复杂的脚本和环境可能使得用
    Jenkins 部署变得更加困难——让我们更详细地检查一下这个问题。
- en: Complexity and limits to scaling deployments through Jenkins
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 Jenkins 扩展部署的复杂性和限制
- en: Since Jenkins is a general-purpose tool for building and scripting processes
    related to software development, it offers immense flexibility, but at the cost
    of complexity. While it can do almost any function related to continuous integration
    and deployment, it may take more scripting and setup than other systems, such
    as Spinnaker, CodeFresh, or WeaveWorks, that are more purpose-built. Some other
    continuous integration and deployment systems deal exclusively with Docker-focused
    workflows.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Jenkins 是一个通用的工具，用于构建和脚本化与软件开发相关的过程，它提供了巨大的灵活性，但也带来了复杂性。尽管它几乎可以执行任何与持续集成和部署相关的功能，但它可能需要比其他更为专门构建的系统（如
    Spinnaker、CodeFresh 或 WeaveWorks）更多的脚本和配置。一些其他的持续集成和部署系统专门处理专注于 Docker 的工作流。
- en: Using Jenkins to manage builds, tests, and deployments to one or two hosts is
    quite manageable. But when you start to scale out, it may become more complex
    and difficult to continue to use Jenkins to handle builds and deployments. The
    build and deployment scripts may also become too complex to manage due to the
    many different programming languages and approaches required. Let's examine these
    limits, starting with limits about managing multiple hosts.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Jenkins 管理到一两台主机的构建、测试和部署是相当可行的。但当你开始扩展时，可能会变得更加复杂，并且继续使用 Jenkins 来处理构建和部署可能变得更加困难。构建和部署脚本也可能变得过于复杂，难以管理，因为需要使用许多不同的编程语言和方法。让我们从管理多台主机的限制开始检查这些限制。
- en: Managing multiple hosts
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理多台主机
- en: 'The scripts shown in this chapter handled deployments to two environments:
    a production environment and a staging environment. However, if we wanted to have
    four more similar environments, say, development, QA, demo, and beta, we might
    have to spin up four additional hosts and extend our scripts accordingly. It could
    get to be a big, expensive mess pretty fast. Also consider what would happen if
    one host became too small to run the production site. You might need to run a
    fleet of instances and make sure that they all use the same database. Then, you
    would get into issues about how you might update and deploy that fleet of instances
    without downtime. The questions and problems start to get bigger if you use a
    brute-force scripting approach.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中展示的脚本处理了两个环境的部署：生产环境和暂存环境。然而，如果我们想要增加四个类似的环境，比如开发、QA、演示和 Beta 环境，我们可能需要启动四个额外的主机，并相应地扩展我们的脚本。很快，这就会变成一个庞大且昂贵的混乱。还要考虑如果某个主机变得太小，无法运行生产站点会发生什么。你可能需要运行一组实例，并确保它们都使用相同的数据库。接着，你将面临如何在不产生停机的情况下更新和部署这组实例的问题。如果你采用蛮力脚本的方法，问题和挑战会变得更大。
- en: If you were going to use Jenkins to manage multiple hosts at scale, you would
    want to look into integrating it with services that offer additional abstractions
    to handle scaling and deployment, such as AWS EC2 Auto Scaling Groups, and AWS
    CodeDeploy. However, neither of those are focused on Docker-specific functionality.
    You could also use Jenkins to run scripts that used Kubernetes tools, such as
    `kubectl` or `helm`, in order to deploy the software to a Kubernetes cluster,
    if you have an organizational commitment to using Jenkins as your continuous integration
    environment.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算使用 Jenkins 管理多个主机的大规模部署，你会想要考虑将其与提供额外抽象的服务集成，以处理扩展和部署，例如 AWS EC2 自动扩展组和
    AWS CodeDeploy。然而，这些服务都不专注于 Docker 特定的功能。如果你有组织上使用 Jenkins 作为持续集成环境的承诺，你还可以使用
    Jenkins 来运行使用 Kubernetes 工具（如 `kubectl` 或 `helm`）的脚本，以便将软件部署到 Kubernetes 集群。
- en: The complexity of build scripts
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建脚本的复杂性
- en: One of the best things about Jenkins is that it allows you to script builds
    using the Groovy domain-specific language; however, this can be one of the worst
    things simultaneously. Groovy is a powerful and concise Java virtual machine-based
    language, but it is much less well known than many other scripting languages,
    such as Python, Ruby, and Bash. Furthermore, Jenkins uses a sandbox model to limit
    what type of Groovy statements are allowed.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 最好的地方之一是它允许使用 Groovy 领域特定语言来编写构建脚本；然而，这也可能是最糟糕的地方之一。Groovy 是一种强大且简洁的基于
    Java 虚拟机的语言，但它远不如许多其他脚本语言（如 Python、Ruby 和 Bash）那么知名。此外，Jenkins 使用沙箱模型来限制允许使用的
    Groovy 语句类型。
- en: This often means that implementers must split their build scripts between a
    high-level orchestration layer written in the Jenkins pipeline DSL dialect of
    Groovy and some other language. This project uses a combination of Groovy `Jenkinsfile`
    and Bash shell scripts to do this, which drive the Docker builds and deploys.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常意味着实现者必须将构建脚本分割为高层次的协调层，该层使用 Groovy 的 Jenkins pipeline DSL 方言编写，并与其他语言一起使用。这个项目通过结合使用
    Groovy `Jenkinsfile` 和 Bash shell 脚本来实现这一点，这些脚本驱动 Docker 构建和部署。
- en: How do you know when you have hit the limit?
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何判断何时达到了极限？
- en: 'People who have had many years of experience using Jenkins and hand-rolled
    scripts to build and deploy software have learned to recognize a few signs that
    using Jenkins for your purposes has hit its limits:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 有多年经验使用 Jenkins 和手工编写脚本构建和部署软件的人，已经学会识别出一些迹象，表明使用 Jenkins 来完成你的目标已经达到了极限：
- en: The installation of Jenkins itself becomes fragile and too complex for new people
    on the project to learn quickly.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 本身的安装变得脆弱，并且对于项目中新的人来说，快速学习变得太复杂。
- en: It becomes difficult to upgrade Jenkins because of plugin incompatibilities.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于插件的不兼容性，升级 Jenkins 变得困难。
- en: The build scripts fail routinely, and people ignore the failures.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建脚本经常失败，人们忽视这些失败。
- en: It starts taking too long to build and deploy the software to meet the business
    needs.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和部署软件的时间开始变得太长，无法满足业务需求。
- en: If you maintain many applications, the scripts used to build and maintain them
    become a maze of cut and paste spaghetti code.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你维护多个应用程序，用来构建和维护它们的脚本就变成了一个充满剪切粘贴的意大利面代码的迷宫。
- en: If you see these signs, it might be time to consider using a more purpose-built
    approach, such as Spinnaker, GitLab CI, or CodeFresh as your CI and container
    pipeline management tool.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到以下迹象，可能是时候考虑使用更为专业的工具，比如 Spinnaker、GitLab CI 或 CodeFresh，作为你的 CI 和容器流水线管理工具。
- en: Summary
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you have learned how to construct a continuous deployment pipeline
    using Docker, Jenkins, and GitHub. You learned how to establish connectivity between
    a Jenkins server and multiple host servers through SSH, scripted using a `Jenkinsfile`.
    You learned how to combine those techniques to drive configuration changes and
    Docker deployments to the production host using Jenkins. You also learned how
    to set up a second staging environment and use the Jenkins environment variables
    and credentials support in order to make a single set of scripts deploy to multiple
    environments. Finally, you learned about the limitations of using Jenkins to manage
    larger-scale deployments, and when it might be time to reach for other tools to
    manage continuous deployment.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经学习了如何使用 Docker、Jenkins 和 GitHub 构建持续部署流水线。你学习了如何通过 SSH 建立 Jenkins 服务器与多个主机服务器之间的连接，并通过
    `Jenkinsfile` 脚本化实现。你还学会了如何将这些技术结合起来，利用 Jenkins 推动配置更改和 Docker 部署到生产主机。你还学习了如何设置第二个
    staging 环境，并使用 Jenkins 的环境变量和凭证支持，使一套脚本能够部署到多个环境。最后，你了解了使用 Jenkins 管理大规模部署的局限性，以及何时该使用其他工具来管理持续部署。
- en: Now that you have mastered the basics of using Jenkins to build and deploy software
    to both a production and a staging environment, you can apply this to your own
    projects. This will help you build and deploy your software more reliably.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经掌握了使用 Jenkins 在生产和 staging 环境中构建和部署软件的基础知识，你可以将这些应用到自己的项目中。这将帮助你更可靠地构建和部署软件。
- en: In the next chapter, we will see how we can use Kubernetes and the **Amazon
    Web Services Elastic Kubernetes Service** (**AWS EKS**) to manage larger-scale,
    more robust clusters of servers that can host applications running in Docker.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将看到如何使用 Kubernetes 和 **Amazon Web Services 弹性 Kubernetes 服务**（**AWS EKS**）来管理更大规模、更强大的服务器集群，这些集群可以托管运行在
    Docker 中的应用程序。
- en: Further reading
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you choose to use Jenkins to manage your Docker-based environments, you
    should look at these resources more closely:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择使用 Jenkins 来管理基于 Docker 的环境，应该更深入地查看这些资源：
- en: 'Using a `Jenkinsfile`: [https://jenkins.io/doc/book/pipeline/jenkinsfile/](https://jenkins.io/doc/book/pipeline/jenkinsfile/)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Jenkinsfile`：[https://jenkins.io/doc/book/pipeline/jenkinsfile/](https://jenkins.io/doc/book/pipeline/jenkinsfile/)
- en: 'Jenkins Docker integration docs: [https://jenkins.io/doc/book/pipeline/docker/](https://jenkins.io/doc/book/pipeline/docker/)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins Docker 集成文档：[https://jenkins.io/doc/book/pipeline/docker/](https://jenkins.io/doc/book/pipeline/docker/)
- en: 'Securing Jenkins: [https://jenkins.io/doc/book/system-administration/security/](https://jenkins.io/doc/book/system-administration/security/)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护 Jenkins： [https://jenkins.io/doc/book/system-administration/security/](https://jenkins.io/doc/book/system-administration/security/)
- en: 'Using Let''s Encrypt and Apache to secure Jenkins with SSL: https://www.agileana.com/blog/serve-jenkins-over-https-with-apache-as-proxy-and-certbot-lets[encrypt-ssl/](https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy)'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Let's Encrypt 和 Apache 配置 Jenkins 的 SSL：https://www.agileana.com/blog/serve-jenkins-over-https-with-apache-as-proxy-and-certbot-lets[encrypt-ssl/](https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy)
- en: '[Using an NGINX reverse proxy or AWS ELB to secure Jenkins with S](https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy)SL:
    [https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy](https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy)'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 NGINX 反向代理或 AWS ELB 为 Jenkins 配置 SSL](https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy)：
    [https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy](https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy)'
- en: 'If you are running a real production application on a single host with `docker-compose`,
    you should strongly consider securing your site with SSL. You can use Let''s Encrypt
    and a host of Docker sidecar containers to achieve this:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在单台主机上使用 `docker-compose` 运行真实的生产应用程序，你应该强烈考虑为你的站点配置 SSL。你可以使用 Let's Encrypt
    和一系列 Docker sidecar 容器来实现这一点：
- en: 'How to use Let''s Encrypt, NGINX, and Docker to secure your site with SSL:
    [https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion](https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion)'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Let's Encrypt、NGINX 和 Docker 为你的站点配置 SSL：[https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion](https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion)
- en: 'Using `docker-compose.yml` to configure Let''s Encrypt with NGINX and Docker:
    [https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion/blob/master/docs/Docker-Compose.md](https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion/blob/master/docs/Docker-Compose.md)'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker-compose.yml`配置Let's Encrypt与NGINX和Docker：[https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion/blob/master/docs/Docker-Compose.md](https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion/blob/master/docs/Docker-Compose.md)
