- en: Emails and Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Email is one of the most important communication tools in the world. It is a
    technology that people are familiar with and had the least amount of resistance
    in regard to its adoption. Therefore, these days email integration has become
    one of the key features of any system. Help-desk systems, CRMs, and even document-management
    systems all need to be able to both send and receive emails. So it is not surprising
    that Jira comes with a full list of email integration features out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to configure Jira to send out email notifications
    every time someone makes a change to issues, set up notification rules to manage
    email recipients, and create mail templates to customize email content. We will
    also look at how Jira can process emails and create issues automatically, saving
    us the effort of manual data entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an outgoing mail server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending emails to users from Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending notifications for issue updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending notifications with custom templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling outgoing notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating mail handlers to process incoming emails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using emails to update Jira issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a project-specific From email address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an outgoing mail server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to set up an outgoing mail server in Jira
    that can be used to send direct emails to users or automated notifications when
    updates are made to issues.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jira requires a working mail server to send emails, and it uses the **SMTP**
    (short for **Simple Mail Transfer Protocol**) to communicate with the mail server.
    Because of this, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working mail server that is either on the same server as Jira or accessible
    over the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectivity details, including the mail server's host, port, protocol (SMTP
    or secured SMTP), and SSL certificate if it is using a self-signed certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication details for Jira to log in to the mail server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to set up an outgoing mail server:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Jira as a Jira administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Administration > System > Outgoing Mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Configure new SMTP mail serverbutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a name for the mail server. For example, you can use the mail server's hostname.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the From addressfield that will be used when users receive an email from
    Jira.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide an Email prefixvalue, which will be added to every email's subject.
    For example, you can use `[Jira]` to let users know it is coming from Jira.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select whether you will be using a custom SMTP server or one from either Gmail
    or Yahoo! mail. If you are using Gmail or Yahoo!, make sure you select the corresponding
    option and provide the access credentials. If you are using a custom SMTP server,
    you will need to provide its hostname, port number, and credentials, if necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Test Connection button, with the credentials provided, to make
    sure Jira is able to connect to the mail server. If the test is successful, click
    on the Add button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27f85913-6cce-4767-81f7-7e982fc67a6e.png)'
  prefs: []
  type: TYPE_IMG
- en: You can only have one outgoing mail server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have configured the outgoing mail server in Jira, we can send a test
    email to make sure everything is working properly:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Send a Test Email link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify whether the email address in the **To **field is the one that you have
    access to. Jira will automatically populate it with the email address of the currently
    logged-in user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Send **button to send the test email.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Jira will immediately send out the test email (normal notification emails are
    placed in a queue before they are sent) to the address in the **To** field, with
    the Subject and Body content specified, as shown in the following screenshot.
    If there is an error, you can check the SMTP logging checkbox to get more details
    on the error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c21791a-2a09-4847-9e0e-07a9d5d4a4ee.png)'
  prefs: []
  type: TYPE_IMG
- en: We have now successfully set up an outgoing email server.
  prefs: []
  type: TYPE_NORMAL
- en: Sending emails to users from Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the outgoing mail server set up, we will now be able to send emails directly
    from Jira. One common use case is sending out reminders, such as system maintenance
    notices, to everyone in Jira, or sending important updates to members of a project.
    In this recipe, we will look at how to perform these types of tasks with Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must first configure an outgoing mail server for Jira. Refer to the previous
    recipe, *Setting up an outgoing mail server*, for more details.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to send out direct emails to users in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > **System** > **Send email**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the recipients of the email. You can choose to send an email via **Project
    Roles **or **Groups**. For example, to send an email to everyone who uses Jira,
    you can select the **jira-software-users** group (if it is the group that all
    of the users are in).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in your email **Subject **and **Body**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Bcc **checkbox if you do not want people to see other recipients'
    email addresses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Send **button to send the email, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/482bd1ec-4180-4b12-a4a9-d5a3b4e4dfe1.png)'
  prefs: []
  type: TYPE_IMG
- en: This completes the steps to send emails to users.
  prefs: []
  type: TYPE_NORMAL
- en: Sending notifications for issue updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The other major use of outgoing mails is for Jira to automatically send out
    notifications about changes to issues. For example, if an issue has been updated,
    you would want the issue's reporter and assignee to be notified of the change.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to set up notification rules so that interested
    parties are notified of any changes to their issues.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must first configure an outgoing mail server for Jira. Refer to the *Setting
    up an outgoing mail server* recipe for more details.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jira uses notification schemes to control who should receive notifications
    when there are any changes in issues. Jira comes with a default notification scheme
    that is applied to all projects by default. You can update this default scheme''s
    notification settings by clicking on its **Notifications** link. In this recipe,
    however, we will be creating a new notification scheme and applying it to projects.
    If you want to use the default notification scheme, you can skip the new scheme
    creation steps and go straight to step 2:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go through the following steps to create a new notification scheme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Administration** > **Issues** > **Notification schemes**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add notification scheme **link.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the new scheme and click on **Add **to create it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have created a new notification scheme, you will be taken to the notification
    settings page for the scheme. By default, there will be no notifications set for
    any event.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a notification recipient to an event, go through the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add link for the event.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the type of notification recipient (for example, the `Group` option,
    as shown in the following screenshot), and click on **Add**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can add a notification recipient to multiple events at the same time by
    using the multi-select events field. The following screenshot of the **Add Notification** page
    shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b23d0c1-2c2a-4753-bf9c-06ece0eda95e.png)'
  prefs: []
  type: TYPE_IMG
- en: You can add as many notification recipients as you need for an event, and Jira
    will not send duplicate emails to the same user. For example, if you have set
    both the reporter and assignee to receive notifications for a single event, and
    they happen to be the same user, Jira will only send out one email instead of
    two. Also, note that Jira will take permissions into consideration when sending
    out notifications. If a user does not have access to the issue, Jira will not
    send notifications to that user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to apply our new notification scheme to a project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the project you want to apply the notification scheme to.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Project settings **option.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Notifications **option from the panel on the left-hand side.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Use a different scheme **from the **Actions** menu.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the new notification scheme and click on **Associate**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira uses an event system where every issue operation, such as creating a new
    issue or workflow transition, will trigger a corresponding event to be fired.
    As we have seen, notification schemes map events to notification recipients. This
    way, we are able to set up flexible notification rules to notify different people
    for different events.
  prefs: []
  type: TYPE_NORMAL
- en: Jira provides many different notification recipient types. Some, such as Current
    Assignee and Reporter, are very simple—they will simply take the value of the
    current issue's assignee and reporter field respectively. Other options, such
    as User Custom Field Value, can be very flexible. For example, you can create
    a multi-user picker custom field, and for each issue, you can have a different
    list of users as recipients, without having to modify the actual scheme itself.
  prefs: []
  type: TYPE_NORMAL
- en: Events are also mapped to email templates so that Jira knows what to use for
    the subject and body. You cannot change the mapping for system events, but as
    we will see in the next recipe, we can create custom events and select which templates
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Being automatically notified of any changes that happen in Jira is convenient,
    but if you have a busy Jira, you might find yourself buried in emails as a result
    of too many updates. To help with that, you can enable the new email batching
    feature. By enabling batching, instead of receiving an email for each update that
    happens to an issue, Jira will group all updates for a given issue and send you
    a summary email instead. To enable email batching, go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > System > Batching email notification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the Batching email notification option to enable the feature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sending notifications with custom templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, *Sending notifications for issue updates*, we looked
    at how to set up notification schemes by mapping events to notification recipients.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will expand on that and look at how to create custom events
    and templates to use for notifications. This has two advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: We can customize the content and the look and feel of the notification email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can specify exactly which event will be fired for each workflow transition
    and set up notification rules accordingly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will create a new event that will represent a request that has been approved
    by the management to proceed. This event will be triggered in an approve workflow
    transition and will have a custom template applied to it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to create our custom email templates. All mail templates
    are stored in the `JIRA_INSTALL/atlassian-jira/WEB-INF/classes/templates/email` directory,
    and generally, for each event in Jira, there are three template files:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The subject template**: This is the template file for the email''s subject
    line, which is stored in the `subject` subdirectory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The text template**: This is the template file for emails sent in text format,
    which is stored in the `text` subdirectory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The HTML template**: This is the template file for emails sent in HTML format,
    which is stored in the `html` subdirectory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start creating our own email templates, we first need to create the three
    files mentioned in the previous list of template files and place them in their
    respective directories. Take special note that all three files need to have the
    same filename with a `.vm` extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with the subject template, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `issueapproved.vm` in the `subject` subdirectory with
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to create the body of the email, keeping in mind that we have to
    create two versions—one for text and one for HTML. The following snippet shows
    the HTML version; for the text version, simply remove the HTML markups. Note that
    both HTML and text template files need to be the same—that is, `issueapproved.vm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After we have created all three template files, we need to register them in
    Jira so that they can be selected while creating custom events. To register new
    email templates, open the `email-template-id-mappings.xml` file in a text editor;
    you can find the file inside the `JIRA_INSTALL/atlassian-jira/WEB-INF/classes` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `email-template-id-mappings.xml` file lists all the email templates in
    Jira, so we need to add a new entry at the end, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few points to note here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `id` value of `<templatemapping>` needs to be unique.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can give any value to the `<name>` element and it will be displayed in Jira.
    It is good practice to keep it consistent with standard Jira event convention.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<template>` element should be the name of the custom template files we
    have created. All three files need to have the same filename since we can only have
    one `<template>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<templatetype>` element needs to have the value set to `issueevent`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have added the entry and saved the file, you will need to restart Jira
    for the changes to be applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our custom email templates in place, we can create the custom
    event that will use our new templates. Go through the following steps to create
    a custom event in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > System > Events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Issue Approved` for the new event's name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Issue Approved **template we just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add** button to create the new event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/82b5b36f-ef53-4ac3-a920-70d8ab9ff941.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have created the event, it will be available in the notification schemes,
    and we will be able to select who will receive email notifications by configuring
    our notification schemes—as shown in the following screenshot. Whenever an issue
    is approved, both the reporter and the user Christine will be notified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/494b7342-9459-4985-834d-31422541588d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last step is to make sure that our custom events are fired when users trigger
    the action:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > Issues > Workflows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Edit **link for the workflow, which contains the transitions
    that will fire the custom event. In this case, we will be using a simple approval
    workflow that contains a transition called **Approve**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89991ec3-f024-464e-84bd-74159af35b11.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the workflow transition, and select the **Post Functions **tab. Normally,
    you will see the last post function in the list firing **Generic Event**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover your mouse over the post function and click on the edit icon (it looks
    like a pencil).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the new `Issue Approved` event and click on **Update**, as shown in
    the following screenshot. This will make the transition fire our event instead
    of the default Generic Event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0953245b-c72b-4e16-994b-77e35d8f28f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's see how the steps work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira's email templates use the Apache Velocity ([http://velocity.apache.org](http://velocity.apache.org/))
    template language to display dynamic data. Each template is a mix of static text
    (with or without HTML markups) and some Velocity code. If you do not need to have
    dynamic contents, then you can only have static text in your templates.
  prefs: []
  type: TYPE_NORMAL
- en: In our previous examples, every time you see the dollar sign (`$`), such as
    in the phrase `$issue.key`, it is a piece of Velocity code. The `$` sign is an
    instruction to get a variable from the Velocity context, and the variable name
    is the word that comes directly after the `$` sign so, in this case, it is `issue`. The
    period character (`.`) is an instruction to get the specified value from the variable.
    So, `$issue.key` can be read as *get the value of key from the variable issue*,
    or in other words, *get me the issue's key*.
  prefs: []
  type: TYPE_NORMAL
- en: Jira exposes a number of variables in its Velocity context for email templates;
    you can find the full list at [https://confluence.atlassian.com/display/JIRA041/Velocity+Context+for+Email+Templates](https://confluence.atlassian.com/display/JIRA041/Velocity+Context+for+Email+Templates).
  prefs: []
  type: TYPE_NORMAL
- en: So, if we take a look at our templates, for the subject template, the `($issue.key)
    $issue.summary` Velocity code will be turned into something like `IT-10 Request
    for Jira administrator access`, where `IT-10` replaces `$issue.key` and `Request
    for Jira administrator access` replaces `$issue.summary`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also have conditional logic in your Velocity templates. In our example,
    we have an `if/else` condition. We check to see if there is a comment accompanying
    the approve transition, and if there is, we will display the comment. If there
    is no comment, then we simply display No Comment in italic font.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a sample email generated from the custom template
    that we have created, displayed in Gmail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1bfe5151-cb11-429b-9d49-3caff5b455db.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, onto the custom Issue Approved event. Unlike system events, custom events
    can only be fired from workflow transitions (or custom script code), so we have
    to update our workflows. Every workflow transition fires an event, and by default,
    the Generic Event is fired. This means that most workflow transitions will have
    the same notification recipient using the email template.
  prefs: []
  type: TYPE_NORMAL
- en: By configuring the workflow to fire our own custom event, we have finer control
    over who receives notifications and which templates to use.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling outgoing notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to completely prevent Jira from sending out emails.
    You may need to do this if you are performing testing, performing data migration,
    or cloning a new development instance, and do not want to flood users with hundreds
    of test notifications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to disable outgoing notifications in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration **> **System** > **Outgoing Mail**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Disable Outgoing Mail **button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have disabled outgoing mail, Jira will no longer send out notifications.
    If you want to re-enable outgoing mail, simply click on the Enable Outgoing Mail
    button, and Jira will start sending out emails again.
  prefs: []
  type: TYPE_NORMAL
- en: Creating mail handlers to process incoming emails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira is not only able to send emails to users, but also to poll and process
    emails. It can also create issues or add comments to existing issues. When set
    up correctly, this can be a powerful way to let your users interact with Jira.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up Jira to poll incoming emails so that it can create
    new issues and add comments to the existing issues. This is useful in a help-desk
    scenario where customers can write an email to the support email address of the
    company and let Jira automatically create issues from them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since Jira will be polling email from an inbox, you need to have its connection
    details, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The protocol it supports (for example, **POP **or **IMAP**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step to configure Jira for processing incoming email is to set up
    the inboxes that Jira will use to poll the email from:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > System > Incoming Mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add POP / IMAP mail server button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the new mail server. We will be using this when adding the
    mail handler later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the credentials and click on the Test Connectionbutton to make sure
    that Jira is able to connect to the mail server. If the test is successful, click
    on the Add button. After we have set up the mail inbox, we can set up what are
    known as mail handlers in Jira to poll and process email. In this recipe, we will
    use the most common handler to create and/or comment on issues from email contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add incoming mail handlerbutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the mail handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the mail server you just added from the Server drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the Local Files option to test your configuration. This allows you
    to place a test email on the filesystem so that you do not have to send test emails
    all the time.
  prefs: []
  type: TYPE_NORMAL
- en: Set the Delaytimer in minutes for how often the handler should poll for new
    emails. Generally, you should not set the time too short: `5` minutes is usually
    a good delay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Create a new issue or add a comment to an existing issue` handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Next button to configure the mail handler, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93e8b645-4d2e-4d35-8af5-aa2272442363.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the mail handler configuration details. The most important configurations
    are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Project**: You can only select one project. All emails from the inbox will
    go into the selected project.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Issue Type**: This is the issue type from which new issues will be created.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create Users**: Check this if you want to automatically create a new account
    based on the email addresses. Note that this will count toward your license seat.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default Reporter**: If you do not want to create new accounts, you can select
    an existing user who will be the reporter for all new issues created from emails.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the Add button to create the mail handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following table explains the various parameters that you need to set:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Project | This is where the project''s new issues will be created. Note that
    this is only used for creating new issues. While adding comments, this is ignored,
    as comments will be added to the issue key specified in the subject. |'
  prefs: []
  type: TYPE_TB
- en: '| Issue Type | This is the issue type for all newly created issues. |'
  prefs: []
  type: TYPE_TB
- en: '| Strip Quotes | If this option is checked, the text wrapped in quotes will
    not be used as an issue description or comment. |'
  prefs: []
  type: TYPE_TB
- en: '| Catch Email Address | An email with the specified address will be processed
    if this option is selected. |'
  prefs: []
  type: TYPE_TB
- en: '| Bulk | This option dictates how to process autogenerated emails, such as
    an email from Jira. This is to prevent the creation of a loop where Jira sends
    email to the same inbox that it is polling the email from. |'
  prefs: []
  type: TYPE_TB
- en: '| Forward Email | This option sets an address to which Jira can forward all
    the emails that it cannot process. |'
  prefs: []
  type: TYPE_TB
- en: '| Create Users | This option creates a new user if the sender''s email address
    cannot be found. |'
  prefs: []
  type: TYPE_TB
- en: '| Default Reporter | This option sets the user who will be used as the reporter
    if the sender''s email address cannot be found. |'
  prefs: []
  type: TYPE_TB
- en: '| Notify Users | Uncheck this option if you do not want Jira to send an account-related
    email. |'
  prefs: []
  type: TYPE_TB
- en: '| CC Assignee | Check this option if you want the first user in the CC list
    to be the issue''s assignee if a matching account can be found. |'
  prefs: []
  type: TYPE_TB
- en: '| CC Watchers | Check this option if you want to add the CC list as watchers
    to the issue if matching accounts can be found. |'
  prefs: []
  type: TYPE_TB
- en: 'The following screenshot shows these parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb768386-bb51-4dca-b4a3-065654a6dc37.png)'
  prefs: []
  type: TYPE_IMG
- en: It's time to see the working information.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mail handlers periodically poll for new emails from the selected incoming mail
    server and process them based on the handler used. The Create a new issue or add
    a comment to an existing issue handlers will create a new issue in Jira, where
    the email subject becomes the issue summary and the email body becomes the issue
    description. If the email subject contains an issue key to an existing issue,
    the email body will be added as a comment to the issue.
  prefs: []
  type: TYPE_NORMAL
- en: '**Add a comment from the non-quoted email body**: This adds the email body
    that is not quoted with the `>` or `|` symbols as a comment to an existing issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add a comment with the entire email body**: This adds the entire email body
    as a comment to an existing issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create a new issue from each email message**: This always creates a new issue
    from an email.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add a comment before a specified marker or a separator in the email body**:
    This adds the email body *before *a marker line is specified as a regular expression.
    Contents *after *the marker will be ignored. This is useful when you do not want
    to include old contents from a forwarded email. Depending on the email client
    being used, you will need to use regular expressions (regex) to work out the text
    to be excluded. For most cases, the following regex will work:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using email to update Jira issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira's out-of-the-box mail handlers mostly focus on creating new issues from emails
    or adding comments to existing issues, based on certain matching criteria. In
    this recipe, we will look at how to update an existing issue via email.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we need to have the **Enterprise Mail Handler for Jira** (**JEMH**)
    app installed. You can download the app from [https://marketplace.atlassian.com/plugins/com.javahollic.jira.jemh-ui](https://marketplace.atlassian.com/plugins/com.javahollic.jira.jemh-ui).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have the app installed, the first step is to create a profile. You
    can think of a profile as a configuration scheme in Jira, such as a workflow scheme.
    The profile contains all aspects of the configuration settings that are needed
    for processing incoming emails. To create a new profile, go through the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > Manage apps > Configure JEMH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Profiles option from the left-hand navigation panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Create Profile button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a name for the profile, select `DEVELOPMENT` in the Readiness field,
    and click Create Profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bfc95b45-cdf9-45cc-bd4a-53aa7d7737a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the profile created, we now need to configure it so that the JEMH app
    will know how to process incoming emails. The first step is to create an incoming
    mail handler by going through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > System > Incoming Mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add incoming mail handler button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the new mail handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Enterprise Mail Handler (JEMH) for Jira as the **Handler** option
    and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the JEMH profile we have just created and click Submit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6cbadd48-2115-49cd-8df3-018bc270f115.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So now that we have an incoming mail handler that is associated with our JEMH
    profile, the next step is to configure it to process our email content:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Configure** link for our JEMH profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Field Processors** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Colon Suffix (Mailform)** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may choose any format or combination of formats for field processors, and
    it is usually a good idea to enable multiple processors so that Jira can understand
    and process more than one. The important point here is that, whichever option
    you choose, you need to communicate this with your end users so they will understand
    how to craft their emails so that they can be successfully processed by Jira.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7930addf-9fa7-47cf-bd2c-67ed67d0c4e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the minimum required configuration to set up an incoming mail handler
    so that you can update your issues with emails. With all the configurations in
    place, the easiest way to test things out is to use the test case feature provided
    by the app, which avoids the need to send a real email around to all interested
    users. We can set this up by going through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Test Cases option from the left-hand navigation panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the Subject with the key of an existing issue in the Content textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content under the **Content** textbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Click the Update and run button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see the result of running the test case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f4a19bf-d44c-4b71-b04e-b40921a49d6c.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the previous screenshot, and the issue you have referenced in the
    test case would have its summary and description values changed to the preceding
    content.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JEMH profile contains all the configurations needed for the app to process
    emails. By creating an incoming mail handler and selecting Enterprise Mail Handler for
    Jira (JEMH) as the handler, Jira will be able to pass on the processing to the
    JEMH app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The one key configuration in our recipe is the field processors. The field
    processor determines how email content should be processed, which directly determines
    the format for our emails if we want them to be processed correctly. JEMH comes
    with several processors, and we have chosen to use the Colon Suffix processor,
    which has the format of `key:value`. So in our test-case email, we have the name
    of the field we want to update as the key and the new value we want to assign
    to the field as the value—for example, `summary: this is a new summary`.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project-specific From email address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, all notifications sent from Jira will have the same From address,
    configured as a part of the outgoing mail server; however, it is possible to override
    this at the project level so that each project can have its own From address.
    This can be very useful if you want to let users reply directly to notifications
    and have the reply added as a comment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to set up a project-specific From address:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the project from which you want to set up a specific From address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Project settingsoption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the pencil (edit) icon for the Email in Notificationssection, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/152dcb16-21c8-4803-a7ae-3bd100b141d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter the email address dedicated to the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Update to apply the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can revert to the default values by leaving the field blank.
  prefs: []
  type: TYPE_NORMAL
