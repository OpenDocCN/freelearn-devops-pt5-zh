- en: Chapter 10. Extending Confluence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not every feature might be available in Confluence out of the box or as add-ons
    in the marketplace. Confluence is very extendable with custom plugins, and if
    you are a developer, you can even create your own plugin using the **Atlassian
    Software Development Kit** (**SDK**).
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will have learned about:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Atlassian Plugin SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The different extensions points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to release your plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are not a developer yourself, this chapter will probably be difficult
    to read, but it could give you an insight into what is possible with extending
    Confluence.
  prefs: []
  type: TYPE_NORMAL
- en: The Atlassian Plugin SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Atlassian provides plugin developers with a Software Development Kit (SDK).
    By using this SDK, developers can create plugins that extend the functionality
    of all Atlassian products. The SDK allows you to quickly connect and use the plugin
    development platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Atlassian Plugin SDK makes your life easier by helping to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Build plugins for any Atlassian application with a single tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a plugin skeleton, specific to the Atlassian application you are developing
    for.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the application binaries, install your plugin, and start the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamically re-install your plugin after changes during development. No restart
    required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write quality unit tests and integration tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speed up the all-important code-deploy-test cycle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Atlassian Plugin SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can start building our first plugin, we have to install the Atlassian
    Plugin SDK. We will go through the steps required to install the SDK on a Windows
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First we have to make sure our Windows system has the prerequisite software
    and is configured correctly. The Atlassian SDK relies on Version 1.6.x or higher
    of the Oracle JDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Oracle JDK, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest JDK from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing the latest version is JDK 7 update 17.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double-click the downloaded installation file to start the installation wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select where you would like to install Java, or simply accept the default values.
    The location where you install the JDK will be referred to as `JAVA_HOME`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the Computer icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Advanced system settings** from the left-hand side menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Environment Variables** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new environmental variable name `JAVA_HOME` with the value of where
    you just installed Java as shown:![Prerequisites](img/9526EN_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have the JDK installed on your system, add the JAVA `bin` directory
    to your path to ensure that you can use Java from the command prompt. Again, we
    assume a Windows setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add `JAVA_HOME` to your path, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the Computer icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Advanced system settings** from the left-hand side menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Environment Variables** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the **Path** variable under the System variables and click on **Edit...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `;%JAVA_HOME%\bin` to the end of variable value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the changes and close all dialogs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we continue, we have to make sure the JDK is installed correctly so that
    the Atlassian SDK is able to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify your JDK installation, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a command prompt window in Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to verify that the `JAVA_HOME` variable is set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should return a path, that is `C:\Program Files (x86)\Java\jdk1.7.0_17`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the variable is set, verify that your **Path** includes the JDK bin directory.
    Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should display the version of Java installed, that is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you have the JDK installed and your **Path** is configured correctly, you
    can move forward to the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When building a plugin for Confluence, the application will be running on your
    desktop. For Confluence to be able to start, it assumes **port 1990** is available.
    On most machines this would not be an issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify your port numbers by performing the following step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command prompt window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the preceding command doesn't return anything, the port is available. If
    the preceding command does return something, port 1990 is already being used by
    another application. The Atlassian SDK will notice this during startup and assign
    a different port to Confluence. We will go into this in the *Building, installing,
    and running your plugin* section.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are developing your plugin on a Linux or Mac, you can follow the online
    guide for installing the JDK at [https://developer.atlassian.com/display/DOCS/Set+up+the+SDK+Prerequisites+for+Linux+or+Mac](https://developer.atlassian.com/display/DOCS/Set+up+the+SDK+Prerequisites+for+Linux+or+Mac).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Atlassian SDK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With all the prerequisites installed, we can download and set up the Atlassian
    SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest version of the SDK via: [https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows](https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows)
    (direct download link).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the downloaded installer and double-click on the EXE file.![Setting up
    the Atlassian SDK](img/9526EN_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next** and select a location to install the SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the next screens to install the SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Atlassian Plugin SDK is now installed and we are ready to create our first
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that the SDK is configured correctly, perform the following step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command prompt window and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The system should respond with similar information as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Atlassian Plugin SDK provides a set of shell scripts for creating, installing,
    and building plugins for Atlassian products. Let's take a look at some typical
    tasks and examples of commands in the SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you want to build a new plugin, you need to create a plugin skeleton. Open
    a command prompt and run the following command in the location where you want
    to create the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Adding a new module to your plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to add a new module to your plugin, you could do this via the command
    line too. Open your command prompt and browse to the location of your plugin.
    Within your plugin directory run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Running a plugin in an application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to run your plugin in its target application, go to the plugin
    directory using the command prompt and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will start the application specified in your plugin (Confluence,
    JIRA, and so on) and automatically install your plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Running a specific version of an application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are building a plugin that should work for a specific version, or you
    just want to test your plugin against a new version of the application, you can
    specify this while starting the application. Run the following commands in your
    plugin directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `atlas-clean` command will clear any previously run version of the plugin.
    This is only needed if the previous run was a different version.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Maven Command Line Interface (CLI) plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The SDK bundles the Maven CLI plugin, allowing you to run a command against
    a development Confluence installation. To use it with your plugin''s host application,
    go to the plugin''s project directory (where you created the plugin) and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When the command-line interface is started you can use the command `pi` to package
    your plugin and install it into the running Confluence installation.
  prefs: []
  type: TYPE_NORMAL
- en: Running a standalone application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to quickly test a new version of an application, you can use the
    standalone command to start that application. You can run this command from anywhere,
    as there is no plugin required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The help command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are more commands available, but these are the most used. If you are
    ever in doubt how a command is used and which are available, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you are building a plugin, you will be using Maven as an underlying library
    dependency management and build tool. Maven is already bundled with the Atlassian
    Plugin SDK, so there is no need to install it on your machine. Even if you already
    have a Maven version installed, you should use the bundled version, as the SDK
    requires a specific Maven version.
  prefs: []
  type: TYPE_NORMAL
- en: The Atlassian SDK Maven comes with configured settings so that building an Atlassian
    plugin will be as easy as possible. Using Maven and building your plugin does
    require an active Internet connection, as Maven will resolve and download all
    dependencies needed during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are behind a company proxy, make sure to configure Maven accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `%USERPROFILE%/.m2/settings.xml` in a text editor. If the file doesn't
    exist, you can create it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following section to your file and make sure to replace the settings
    with your proxy settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With a normal Maven installation, or if you have multiple installations, `mvn`
    would be available via your command prompt. To ensure you use the Atlassian provided
    version, Maven uses `atlas-mvn` instead.
  prefs: []
  type: TYPE_NORMAL
- en: The pom.xml file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the root of your plugin, there is a `pom.xml` file; this file is the core
    of a project's configuration in Maven. In this file, you can define dependencies
    on other libraries and specify which Confluence version you want to run, but it
    also holds the name and description of your plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The `pom.xml` file is what is being used when you start your plugin with `atlas-run`.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin descriptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every plugin must have a plugin descriptor file. The file, `atlassian-plugin.xml`,
    describes your plugin to the target application. The Atlassian SDK generates the
    `atlassian-plugin.xml` file when you create your plugin for the first time. The
    descriptor is also updated when you use `atlassian-create-confluence-plugin-module`
    to add a new module.
  prefs: []
  type: TYPE_NORMAL
- en: At some point during the development of you plugin, you will have to update
    the file manually, so it's a good idea to have a bit of understanding as to what
    is in the plugin descriptor. The plugin descriptor is located in the directory
    `<plugin_home>/src/main/resources/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A very minimal plugin descriptor''s built looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This descriptor file mostly contains variables; these are Maven variables and
    will be replaced with the values from your `pom.xml` file when you build your
    plugin. The rest of the descriptor file is empty; this plugin does not contain
    any components, which is very unlikely for a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: We will be adding more modules to this file across this chapter, if you want
    an overview of the available modules, skip ahead to the *Plugin module types*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Using a development environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When developing your plugin, it is a good idea to use an IDE, short for integrated
    development environment. A development environment will help you to make fewer
    mistakes, and can come in very handy when trying to debug your plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Eclipse on Windows
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We will be using Eclipse, but if you have a different preference, use your own
    IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Download Eclipse for JAVA EE developers from [http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the downloaded ZIP file onto the root of you hard drive. When you are
    done, if your hard drive root is `C:\`, you will have the following folder on
    your hard drive:![Installing Eclipse on Windows](img/9526EN_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next step, we are making sure Eclipse uses the JDK we just installed;
    this is done by editing the Eclipse initialization file.
  prefs: []
  type: TYPE_NORMAL
- en: Make a copy of the original `eclipse.ini` and name it `eclipse.ini.original`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `eclipse.ini` file in Notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `–vm` entry before any `-vmargs` entry in the file. The entry should
    point to the value of your `%JAVA_HOME%/bin`. Eclipse requires that you reverse
    the slashes to forward slashes. Your file should look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close and save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Eclipse and choose a location where Eclipse will store you workspaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the Maven Eclipse plugin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We will be using the Maven Eclipse plugin, which will help us with getting the
    dependencies needed for our Confluence plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Select **Help** | **Install** new Software. Click on the **Add** button to add
    a new repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Sonatype M2Eclipse` in the **Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `http://m2eclipse.sonatype.org/sites/m2e` in the **Location** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the dialog. The system searches the site for the plugin.
    After a moment, the **Name** field fills with the **Maven Integration for Eclipse**
    software as the following:![Installing the Maven Eclipse plugin](img/9526EN_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the checkbox and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the terms of the license agreements and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart Eclipse when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the Maven plugin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After Eclipse has restarted, ensure that the Maven plugin is configured correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Window** | **Preferences** from the eclipse menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `Maven` in the filter text field and select **Installations**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to add a new Maven installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to your Atlassian SDK installation and select the `apache-maven` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.![Configuring the Maven plugin](img/9526EN_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Apply**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Maven root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck **Download repository index updates on startup**. This prevents Maven
    from updating on Eclipse startup, which can be time consuming. The `atlas-` commands
    will update the repositories for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building your first plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you have installed the Atlassian SDK, you can start building your first
    plugin. We will be building a new Confluence macro, which can be used to format
    content.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will take a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: The macro interface, which is the base of all macros
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `xhtml-macro` module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding resources, such as a stylesheet, to your plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be building a macro that displays links as buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the plugin project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we have to create our plugin skeleton using the Atlassian SDK and load
    our new project into Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Open a command prompt and navigate to the location for you new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command to create a new Confluence plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When prompted, enter the following information to identify your plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| `groupId` | `com.example.confluence` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `artifactId` | `button-macro` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `version` | `1.0-snapshot` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `package` | `com.example.confluence.button` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Confirm your entries when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **File** | **Import...** from the Eclipse menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `Maven` in the filter text field and select **Existing Maven Projects**:![Creating
    the plugin project](img/9526EN_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Browse** and browse to the location where you created the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `pom.xml` file and click on **Finish**. Eclipse will now import your
    project and download all dependencies if needed. This can take a while.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sometimes an error will occur during this process, if so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the imported project (in the project explorer).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Maven** | **Update Project Configuration**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating the generated code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you have just generated a new plugin skeleton, you have to make sure all
    the details, like the plugin name or description, are correct. In this section,
    we'll check the Confluence version value and tweak some settings. Open your plugin
    project in Eclipse and follow along.
  prefs: []
  type: TYPE_NORMAL
- en: Adding plugin metadata to the POM file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The metadata in your POM file will be used when your plugin is built. This would
    be the place to add your company details and description of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `pom.xml` file in the root of your plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add your company or organization details to the `<organization>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `<name>` and `<description>` elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verifying your Confluence version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you generated a new plugin skeleton, a default Confluence version was included
    in your `pom.xml` file. Before you start building your plugin, make sure this
    version is up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `pom.xml` file in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll to the bottom of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the `<properties>` element. This section lists the version of Confluence
    and other properties of your plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Confluence version to `5.1.2`, or a more recent one if available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the `pom.xml` file. Eclipse will automatically download the new dependencies
    for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cleaning up the plugin skeleton
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are building a new macro, and most of the generated code is for a different
    component. Therefore, we have no use for the generated code. Before we start,
    let's clean up first.
  prefs: []
  type: TYPE_NORMAL
- en: Open `src/main/resources/atlassian-plugin.xml` in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `<web-resource>`, `<component-import>`, and `<component>` sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also remove the corresponding files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MyPluginComponent.java`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MyPluginComponentImpl.java`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MyComponentWiredTest.java`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MyComponentUnitTest.java`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new macro module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With our plugin skeleton ready for development, we will be adding some new modules
    to our plugin descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: Open your `atlassian-plugin.xml` file in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `xhtml-macro` component to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Class` argument is pointing to an implementation of our macro.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing the macro interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The macro module we just defined will call the `execute` method of our Java
    class `com.example.confluence.button.LinkButton`. That class doesn't exist yet,
    so let's create it.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `com.example.confluence.button` package (folder) in your
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **New** | **Class** and enter the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Package** – `com.example.confluence.button`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name** – `LinkButton`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interfaces** – Add `com.atlassian.confluence.macro.Macro`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your new Java class will be generated, and you might notice we have to implement
    three methods.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the getBodyType and getOutputType methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These two methods specify whether the macro has a body (and the type of body
    if it does have one) and the output type, be it block or inline. The macro we
    implement will have a body and will have the block output type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the execute method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The execute method will determine what the output of our macro will be. I have
    included an easy template with some HTML to style our button. We will be using
    the body of our macro and use that as input for our button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The template we are using makes use of the **Atlassian User Interface** (**AUI**),
    a library with JavaScript, stylesheets, and templates that is included in all
    Atlassian products. If you use the AUI in your plugin, it will have the same look
    and feel as Confluence.
  prefs: []
  type: TYPE_NORMAL
- en: More information about the AUI can be found online at [https://developer.atlassian.com/display/AUI/](https://developer.atlassian.com/display/AUI/).
  prefs: []
  type: TYPE_NORMAL
- en: Building, installing, and running your plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we have the basics set for our plugin, it is time to build and run the
    plugin in Confluence.
  prefs: []
  type: TYPE_NORMAL
- en: Save all the changes to your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a command prompt and navigate to the location of your plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will build your plugin, start a Confluence installation, and install
    your plugin in that Confluence installation. This may take a while. When the process
    is completed, the last lines of the output should look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If Confluence couldn't use port 1990 because another application is using it,
    Confluence will start on a different port and will mention it in these lines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open your browser at `http://localhost:1990/confluence`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the Confluence login, enter a username `admin` with the password `admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new page with your new macro.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create** in the navigation bar.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Insert** | **Other macros**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `Link Button`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert your macro.![Building, installing, and running your plugin](img/9526EN_10_07.jpg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a link in the body of your macro as you would normally do in Confluence.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the page.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Watch how your new macro has formatted your link:![Building, installing, and
    running your plugin](img/9526EN_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What the preceding screenshot displays is not very user-readable; it would be
    better if the link itself is white. For this we have to add resources, a CSS file,
    to our plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `atlassian-plugin.xml` file, add the `<web-resources>` element to the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `<resource>` element determines which file will be included with our plugin.
    The location is relative to the `src/main/resources` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The `<context>` element will tell Confluence when to load these extra resources.
    In our case, the resources are loaded on every page except for administrative
    screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following CSS has to be added to our `button-macro.css` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'After reloading our plugin, the button should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding resources](img/9526EN_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Reloading your plugin with FastDev**'
  prefs: []
  type: TYPE_NORMAL
- en: FastDev is a feature of Atlassian SDK that speeds up plugin development. FastDev
    will scan your plugin directory for changes, and is able to package and reinstall
    your plugin directly from Confluence. More information on FastDev at [https://developer.atlassian.com/display/DOCS/Automatic+Plugin+Reinstallation+with+FastDev](https://developer.atlassian.com/display/DOCS/Automatic+Plugin+Reinstallation+with+FastDev).
  prefs: []
  type: TYPE_NORMAL
- en: Releasing your plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At a certain point, you are done developing your plugin and you want to deliver
    the end result to your company or maybe even to the rest of world. The first thing
    we have to do is release your plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The release process relies heavily on you to have a revision control system
    for your plugin, like Subversion or GIT. If you don't have such a system in place,
    you could consider taking a look at [http://bitbucket.org](http://bitbucket.org),
    which is an online Atlassian tool that offers free source hosting.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can release our plugin, we have to make sure that our `pom.xml` file
    has all the requirements to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the SCM properties, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `pom.xml` file in your plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines to the file with your SCM information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the `pom.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `connection` and `developerConnection` tell Maven how to connect to your
    repository. While `connection` requires read access for Maven to be able to find
    the source code (for example, an update), `developerConnection` requires a connection
    that will give write access.
  prefs: []
  type: TYPE_NORMAL
- en: The `url` element is not required, but can be used for a publicly accessible
    URL to your repository.
  prefs: []
  type: TYPE_NORMAL
- en: Setting distributionManagement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The release process will upload your plugin to a specified location defined
    by the `distributionManagement` section in your `pom.xml` file. This location
    can be anything from a remote server to your local filesystem. For now, we will
    set this location to a temp directory on your local machine, as the process requires
    this setting.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `pom.xml` file in your plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The variable will be replaced with your own local settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to release your plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure all changes have been committed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a command prompt and navigate to the location of your plugin and run the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will update your `pom.xml` file with the required version and will
    make a new tag for the release. During the process you will be asked the release
    version and the next development version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the command has finished run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check out the just created tag.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run all tests.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile the code and package it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload your binary to a defined location.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After the command is finished, you can find your released plugin in the target
    directory in your plugin folder. This should be a `.jar` file, named for your
    plugin and version, that is `button-macro-1.0.jar`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Releasing your plugin without revision control
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you don't have any revision control, the release process of your plugin involves
    some manual steps.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `pom.xml` file in your plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `<version></version>` parameter to your release version, that is
    `1.1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a command prompt and go to your plugin location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `atlas-package` command. This command will compile, test, and build
    your plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the command is finished, you can find your released plugin in the target
    directory in your plugin folder. This should be a `.jar` file, named for your
    plugin and version, that is `button-macro-1.1.jar`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plugin module types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Atlassian plugin can specify one or more plugin modules to affect the underlying
    Atlassian applications. Plugin modules are elements you can add to your plugin
    and which will be translated by the SDK and the application architecture to something
    Confluence understands.
  prefs: []
  type: TYPE_NORMAL
- en: We already used the `xhtml-macro` and `web-resource` modules in our first plugin,
    but there are many more.
  prefs: []
  type: TYPE_NORMAL
- en: Generic module types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are module types that are available in every application, not just Confluence.
    If you are building a plugin for multiple applications, stick to only these types.
  prefs: []
  type: TYPE_NORMAL
- en: '| Module type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `component` | Adds components to the component system for reuse and autowiring.
    Think of your own services. |'
  prefs: []
  type: TYPE_TB
- en: '| `component-import` | Imports components from other add-ons so that they are
    available in your own add-on. |'
  prefs: []
  type: TYPE_TB
- en: '| `module-type` | Adds new plugin modules to the plugin framework. Useful when
    building for, or on top of other add-ons. |'
  prefs: []
  type: TYPE_TB
- en: '| `path-converter` | Enables you to create custom URL schemes for your add-on,
    that is you can have SEO-friendly URL schemes. |'
  prefs: []
  type: TYPE_TB
- en: '| `rest` | Makes services and resources available as REST API. |'
  prefs: []
  type: TYPE_TB
- en: '| `servlet` | Deploys a standard Java servlet within a Confluence add-on. |'
  prefs: []
  type: TYPE_TB
- en: '| `servlet-context-listener` | Deploys a Java servlet context listener as a
    part of your add-on. |'
  prefs: []
  type: TYPE_TB
- en: '| `servlet-context-param` | Adds parameters in the Java Servlet context shared
    by your add-on''s servlets, filters, and listeners. |'
  prefs: []
  type: TYPE_TB
- en: '| `servlet-filter` | Adds a Java servlet filter to your add-on. Don''t forget
    to specify the location and ordering of your filter. |'
  prefs: []
  type: TYPE_TB
- en: '| `velocity-context-item` | Adds helper objects to your Velocity context, which
    can be used in templates. |'
  prefs: []
  type: TYPE_TB
- en: '| `web-item` | Adds links and tabs to the Confluence UI. |'
  prefs: []
  type: TYPE_TB
- en: '| `web-resource` | Enables you to include stylesheets and JavaScript to your
    add-on. |'
  prefs: []
  type: TYPE_TB
- en: '| `web-resource-transformer` | Allows you to manipulate web resources before
    they are send to the browser. |'
  prefs: []
  type: TYPE_TB
- en: '| `web-section` | Adds sections of links to the Confluence UI. |'
  prefs: []
  type: TYPE_TB
- en: Confluence-specific module types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each Atlassian application has it own modules, as does Confluence. The following
    are the module types supported by Confluence:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Module type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `codeformatter` | Adds new code languages to the `{code}` macro. |'
  prefs: []
  type: TYPE_TB
- en: '| `colour-scheme` | Adds a color scheme to a theme. |'
  prefs: []
  type: TYPE_TB
- en: '| `decorator` | Adds a decorator (layout) to your add-on for usage without
    a theme. |'
  prefs: []
  type: TYPE_TB
- en: '| `device-type-renderer` | Adds a renderer for a specified (mobile) device
    type. |'
  prefs: []
  type: TYPE_TB
- en: '| `extractor` | Allows you to extract data and put this in the Confluence indexer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `job` | Adds a repeatable job, like a scheduled service to Confluence. |'
  prefs: []
  type: TYPE_TB
- en: '| `keyboard-shortcut` | Defines a new keyboard shortcut within Confluence.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `language` | Provides a new language translation to Confluence. |'
  prefs: []
  type: TYPE_TB
- en: '| `layout` | Adds a layout (decorator) to your add-on for usage with a theme.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lifecycle` | Can be used to schedule tasks during application startup and
    shutdown. |'
  prefs: []
  type: TYPE_TB
- en: '| `listener` | A special component that will respond to certain events in Confluence.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `xhtml-macro` | Adds a new macro to the WYSIWYG editor. Should output HTML
    that can be embedded in a page. |'
  prefs: []
  type: TYPE_TB
- en: '| `rpc-soap` | Adds a SOAP service to Confluence. |'
  prefs: []
  type: TYPE_TB
- en: '| `rpc-xmlrpc` | Adds an XML-RPC service to Confluence. |'
  prefs: []
  type: TYPE_TB
- en: '| `theme` | Creates a new theme (look and feel) for Confluence or a single
    space. |'
  prefs: []
  type: TYPE_TB
- en: '| `trigger` | Adds a trigger that schedules jobs. |'
  prefs: []
  type: TYPE_TB
- en: '| `xwork` | Adds new actions and views to an add-on, enabling user interaction.
    |'
  prefs: []
  type: TYPE_TB
- en: The plugin module types in detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding list is pretty comprehensive and there is so much to choose from.
    In this section, I will explain in detail some plugin module types that you will
    almost certainly use in most of your plugins.
  prefs: []
  type: TYPE_NORMAL
- en: XWork
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to add an action or screen to Confluence, like a configuration screen,
    there are two options. The first is building a standard Java servlet, the second
    is making use of XWork/WebWork.
  prefs: []
  type: TYPE_NORMAL
- en: The module descriptor
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The syntax of an XWork module is as follows
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go quickly over the XML to explain what we just defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: defines the XWork module, both the `name` and `key` attributes are for identification
    only.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Packages are used to group actions, and your XWork module can have more than
    one. `name` is the only required attribute and identifies the package. `extends`
    specifies if the package inherits behavior from other packages; in this case we
    use the Confluence default. With `namespace`, you can define under which URL the
    actions are available.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `action` element is the basic unit of work and defines an action, which
    in most cases is a URL. The name attribute completes the URL, as the preceding
    action is available at `/plugins/config/alpha.action`. An action always has a
    class, which will extend `ConfluenceActionSupport`. With `method`, it is possible
    to specify the method in the class responsible for this action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `result` element will map the result of an action to a template. In the
    preceding example, the velocity template `alpha-config-action.vm` will be rendered
    if our `AlphaConfigAction` returns `success`.
  prefs: []
  type: TYPE_NORMAL
- en: The action class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Every action should have an implementation that extends the `ConfluenceActionSupport`
    class. Actions can use the same implementation if that makes sense for your plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `AlphaConfigAction` class should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Based on our action configuration, the method `view()` is called and based upon
    the return the success or error template is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: This is of course a simple example, but you can do much more in this action
    class. The action class is also available in your template, so if you want to
    render certain information via that template, make sure there is a `get` method
    available, just like `#getViewMessage()`.
  prefs: []
  type: TYPE_NORMAL
- en: Web Sections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Web Sections allows your plugin to add new sections to existing menus; each
    section can contain one or more links, which are defined as Web Items. We can
    use Web Sections to add a new section to the Confluence administration for our
    plugin configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The module descriptor
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The syntax of a Web Section is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down this definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: A web-section element requires a `key`, which is a unique identifier for this
    component. `location` relates to the menu this section needs to be added to and
    the `weight` determines at which position it needs to be added to.
  prefs: []
  type: TYPE_NORMAL
- en: '`location` menus can be difficult to find if you are not familiar with the
    source code of Confluence itself. More `location` menus are documented on [https://developer.atlassian.com/display/CONFDEV/Web+UI+Modules](https://developer.atlassian.com/display/CONFDEV/Web+UI+Modules).
    A few that are commonly used are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Location | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `system.profile` | The tabs above the user profile view. |'
  prefs: []
  type: TYPE_TB
- en: '| `system.user` | The drop-down menu when you click the user avatar in the
    top-right corner. |'
  prefs: []
  type: TYPE_TB
- en: '| `system.admin` | The links in the left-hand side menu in the Administrator
    Console. |'
  prefs: []
  type: TYPE_TB
- en: The `label` element is the only required element in the web-section plugin.
    It looks up for the `label` in your plugin properties file and uses it in the
    menu section header.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: You can add one or more conditions to a web panel or item. The implementation
    of these conditions must return `true` in order for the section to display in
    the interface. This can be used the make sure the links are only available for
    administrators.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Web Items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With Web Items you can add links to Confluence via your plugin. If you build
    a screen you probably want users to find it; adding a web items to your plugin
    should make this possible.
  prefs: []
  type: TYPE_NORMAL
- en: The module descriptor
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A common Web Item will be configured similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ll explain this example a bit more in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `web-item` attribute knows a `section` argument instead of a location, as
    Web Items must be placed in sections. In our example, I'm placing this Web Item
    in the section we have defined earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `link` element will determine where the user will go after clicking on the
    menu item. The `linkId` argument is optional and will provide an HTML ID when
    rendered. The link can either be relative to the Confluence server or absolute,
    pointing to any website you wish.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Web Items can contain icons that will be placed before the their `label` elements.
    The icon can have a `width` and a `height` attribute. The location of the image
    is defined by the `link` element.
  prefs: []
  type: TYPE_NORMAL
- en: Just like Web Sections can, Web Items can contain conditions to determine when
    a link is shown and to who.
  prefs: []
  type: TYPE_NORMAL
- en: Online resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter gives you only a small insight into the possibilities on extending
    Confluence and writing your own plugins. There are many online resources available
    to move you forward from this point.
  prefs: []
  type: TYPE_NORMAL
- en: All developer documentation is bundled and located at [https://developer.atlassian.com](https://developer.atlassian.com).
  prefs: []
  type: TYPE_NORMAL
- en: '**The Confluence module types**: For more details about the available modules
    and which arguments and elements they accept, visit [https://developer.atlassian.com/display/CONFDEV/Confluence+Plugin+Module+Types](https://developer.atlassian.com/display/CONFDEV/Confluence+Plugin+Module+Types).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Confluence Plugin Tutorials**: Various Confluence tutorials from beginner
    to advanced developer are available at [https://developer.atlassian.com/display/CONFDEV/Confluence+Tutorials](https://developer.atlassian.com/display/CONFDEV/Confluence+Tutorials).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Atlassian Design Guidelines and User Interface**: Atlassian provides a toolkit
    for you to help you create beautiful features for their products at [https://developer.atlassian.com/display/AUI/](https://developer.atlassian.com/display/AUI/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Marketplace**: Everything you need to get your plugin Marketplace-ready
    is available at [https://developer.atlassian.com/display/MARKET/Atlassian+Marketplace](https://developer.atlassian.com/display/MARKET/Atlassian+Marketplace).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Get the sources**'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a valid license for Confluence, you can download the sources via
    [https://my.atlassian.com](https://my.atlassian.com). If you are building your
    plugin, these sources are sometimes the best documentation available. When you
    are stuck, search the source code for similar situations and take a look at how
    Atlassian solved those problems.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have taken a look at how to extend Confluence with a plugin. We have learned
    how to set up our IDE and build our first plugin, creating a new Confluence macro.
  prefs: []
  type: TYPE_NORMAL
- en: We have also seen that Confluence has over 30 extension points that you can
    use enhancing Confluence with your features. This chapter should give you a head
    start when you start building your own plugin and a general sense about the possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have all the essentials to work with Confluence and make the
    tool essential to your company. If you are ever stuck, you'll find me, and many
    others in the community, on Atlassian Answers ([https://answers.atlassian.com](https://answers.atlassian.com)).
  prefs: []
  type: TYPE_NORMAL
