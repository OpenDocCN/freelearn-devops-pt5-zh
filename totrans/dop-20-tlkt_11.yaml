- en: Chapter 11. Automating Implementation of the Deployment Pipeline
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 自动化部署流水线的实现
- en: Now that we are in control of the process of manually executing the deployment
    pipeline, we can start working on the creation of a fully automated version. After
    all, our goal is not to employ an army of operators that will sit in front of
    their computers and continuously execute deployment commands. Before we proceed,
    let us quickly go through the process one more time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已控制手动执行部署流水线的过程，可以开始着手创建一个完全自动化的版本。毕竟，我们的目标并不是雇佣一支操作员队伍，让他们坐在电脑前不停地执行部署命令。在继续之前，让我们再快速回顾一下这个过程。
- en: Deployment Pipeline Steps
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署流水线步骤
- en: 'The steps of the pipeline are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线的步骤如下：
- en: Check out the code
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出代码
- en: Run pre-deployment tests, compile and package the code
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行预部署测试，编译并打包代码
- en: Build the container
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建容器
- en: Push the container to the registry
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器推送到注册表
- en: Deploy the container to the production server
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器部署到生产服务器
- en: Integrate the container
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集成容器
- en: Run post-deployment tests
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行后部署测试
- en: Push the tests container to the registry![Deployment Pipeline Steps](img/B05848_11_01.jpg)
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试容器推送到注册表！[部署流水线步骤](img/B05848_11_01.jpg)
- en: Figure 11-1 – Deployment pipeline
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11-1 – 部署流水线
- en: 'To minimize the impact the pipeline has on our business, we tried our best
    to run as many tasks as possible outside the production server. The only two steps
    that we had to perform on the `prod` node is deployment itself and the integrations
    (at the moment only with the proxy service). All the rest of the steps were done
    inside the `cd` server:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尽量减少流水线对我们业务的影响，我们尽最大努力将尽可能多的任务放在生产服务器之外执行。我们只在`prod`节点上执行了两个步骤：部署本身和集成（目前仅与代理服务集成）。其他所有步骤都在`cd`服务器上完成：
- en: '![Deployment Pipeline Steps](img/B05848_11_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![部署流水线步骤](img/B05848_11_02.jpg)'
- en: Figure 11-2 – Tasks distribution between the CD and production nodes
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-2 – CD节点与生产节点之间的任务分配
- en: 'We already chose Ansible as the tool we''re using for servers provisioning.
    We used it in several occasions to install packages, setup configurations and
    so on. Up until now, all those usages were aimed at providing all the requirements
    necessary for the deployment of our containers. We''ll extend the usage of Ansible
    playbooks and add the deployment pipeline to it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经选择了Ansible作为用于服务器配置的工具。我们在多个场合使用它来安装软件包、设置配置等。到目前为止，所有这些使用都旨在提供部署我们容器所需的所有要求。我们将扩展Ansible
    playbook的使用，并将部署流水线添加进去：
- en: '![Deployment Pipeline Steps](img/B05848_11_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![部署流水线步骤](img/B05848_11_03.jpg)'
- en: Figure 11-3 – Automated deployment pipeline with Ansible
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-3 – 使用Ansible的自动化部署流水线
- en: Of all the steps involved, we'll leave only one of them outside of the automation
    scope. We won't check out the code with Ansible. The reason behind this is not
    that Ansible is not capable of cloning a Git repository. It certainly is. The
    problem is that Ansible is not a tool designed to run continuously and monitor
    code repositories for changes. There are a few more problems that we did not yet
    tackle. For example, we do not have a set of actions that should be run in case
    of a failure of the process. Another hole in the current pipeline is that there
    is a short downtime related to each deployment. The process stops the running
    release and brings up the new one. Between those two actions, there is a (short)
    period the service we're deploying is not operational.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有涉及的步骤中，我们将只把其中一个步骤排除在自动化范围之外。我们不会使用Ansible来检出代码。这样做的原因不是Ansible无法克隆Git仓库，事实上它是可以的。问题在于，Ansible并不是一个设计用来持续运行并监控代码仓库变化的工具。还有一些我们尚未处理的问题。例如，在过程失败的情况下，我们没有一套应该执行的操作。当前流水线的另一个问题是，每次部署都会有短暂的停机时间。该过程会停止当前运行的版本并启动新版本。在这两个动作之间，有一个（短暂的）时期，我们正在部署的服务不可用。
- en: 'We''ll leave those and other possible improvements for later on:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这些以及其他可能的改进留到以后再做：
- en: '![Deployment Pipeline Steps](img/B05848_11_04.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![部署流水线步骤](img/B05848_11_04.jpg)'
- en: Figure 11-4 – Missing pieces in the deployment pipeline
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11-4 – 部署流水线中缺失的部分
- en: To get a better grasp on the process, we'll go through each manual step we performed
    earlier and see how it can be done with Ansible.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这个过程，我们将回顾我们之前执行的每个手动步骤，并看看如何通过Ansible完成这些步骤。
- en: 'We''ll start by creating up the nodes and cloning the code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建节点和克隆代码开始：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Playbook and the Role
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Playbook 和 Role
- en: If you already tried automated deployment, the chances are that the scripts
    you created were mostly related to the deployment itself. With Ansible (and CM
    tools in general), we have the option to do the process from scratch every time.
    Not only that we'll automate the deployment, but we'll set up the whole server.
    We cannot be confident in which state the server is. For example, maybe it has
    nginx or maybe it doesn't. Maybe it did have the nginx container up and running
    but, for some reason, its process stopped. Even if the process is running, maybe
    some crucial configuration changed. The same logic can be applied to anything,
    directly or indirectly, related to the service we want to deploy. The approach
    we'll take is to have a playbook that will make sure that everything is set correctly.
    Ansible is intelligent enough to check the status of all those dependencies and
    applies changes only if something is wrong.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经尝试过自动化部署，那么你创建的脚本很可能大部分都与部署本身有关。使用 Ansible（以及一般的 CM 工具），我们可以选择每次从头开始执行整个过程。我们不仅会自动化部署，还会配置整个服务器。我们无法确定服务器的当前状态。例如，服务器可能已经安装了
    nginx，也可能没有。也许它曾经运行着 nginx 容器，但由于某种原因，它的进程停止了。即使进程正在运行，某些关键配置也可能已经改变。相同的逻辑可以应用于任何与我们想要部署的服务直接或间接相关的内容。我们采用的方法是，拥有一个
    playbook，确保所有内容都配置正确。Ansible 足够智能，能够检查所有这些依赖项的状态，并且仅在出现问题时才会应用更改。
- en: 'Let us take a look at the `se` `rvice.yml` playbook:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下 `se` `rvice.yml` playbook：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `service` role will contain tasks directly related to the deployment and
    all the others before them are dependencies our service needs to work correctly.
    Since we already went through all but the last role from this playbook, stands
    to reason that we should jump directly to the definition of the list of tasks
    in the `service` role defined in the `roles/service/tasks` `/main.yml` file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`service` 角色将包含与部署直接相关的任务，而在它之前的所有任务都是我们的服务正常运行所需的依赖项。由于我们已经完成了该 playbook 中除了最后一个角色之外的所有部分，因此我们应该直接跳到
    `roles/service/tasks` `/main.yml` 文件中定义的任务列表：'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since this role will be a bit bigger than those we used before, we made the
    decision to split them into logical groups (*pre-deployment*, *deployment* and
    *post-deployment*) and include them into the `main.yml` file. That way we won't
    be dealing with too many tasks at a time, and we'll increase the readability of
    the role.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个角色将比我们之前使用的角色稍大，我们决定将它们拆分为逻辑组（*预部署*、*部署* 和 *后部署*），并将它们包含到 `main.yml` 文件中。这样我们就不会一次处理太多任务，并且可以提高角色的可读性。
- en: Pre-Deployment tasks
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预部署任务
- en: 'The first thing we should do is build the tests container. We already used
    the following command (please don''t run it):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该做的第一件事是构建测试容器。我们已经使用了以下命令（请不要运行它）：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Replicating the same command in Ansible is very easy with the `Sh` `ell module`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ansible 中复制相同的命令非常简单，使用 `Sh` `ell module`：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We changed the command itself so that parts that might be prone to change are
    used as variables. The first one is the `registry_url` that should contain the
    IP and the port of the Docker registry. The default value is specified in the
    `grou` `p_vars/all` file. The second one is more interesting. We are not creating
    this role to work with the service `books-ms` but as something that can be used
    with (almost) any service since all of them can follow the same pattern. We can
    do this sorts of things without sacrificing the freedom since the key instructions
    are stored in a few files located in the repository of each service. The most
    important ones are the `Dockerfile.test` and the *Dockerfile* that define testing
    and service containers, Docker Compose configurations that define how should containers
    be run and, finally, the proxy configuration and template. All those files are
    separated from the process we're creating, and people in charge of the project
    have the full freedom to tailor them to their needs. That showcases a very important
    aspect I'm trying to promote. It is crucial not only to have the right process
    in place but also to have the scripts, configurations and the code properly located.
    Everything that is common to multiple projects should be centralized (as is the
    case with Ansible playbooks located in the [https://github.com/vfarcic/ms-lifecycle](https://github.com/vfarcic/ms-lifecycle)
    repository). On the other hand, things that might be specific to a project should
    be stored in the repository that project resides in. Storing everything in one
    centralized place would introduce quite a lot of waiting time since a project
    team would need to request a change from the delivery team. The other extreme
    is just as wrong. If everything is stored in the project repositories, there would
    be quite a lot of duplication. Each project would need to come up with scripts
    to set up servers, deploy a service, and so on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改了命令本身，将可能会发生变化的部分作为变量使用。第一个变量是`registry_url`，它应该包含Docker注册表的IP和端口。默认值在`grou`
    `p_vars/all`文件中指定。第二个变量更有趣。我们创建这个角色的目的不是为了与服务`books-ms`配合工作，而是为了能够与（几乎）任何服务一起使用，因为所有服务都可以遵循相同的模式。我们可以做这些事情而不牺牲自由，因为关键指令存储在每个服务的代码库中的几个文件里。最重要的文件是`Dockerfile.test`和*Dockerfile*，它们定义了测试和服务容器，Docker
    Compose配置定义了容器如何运行，最后是代理配置和模板。所有这些文件都与我们正在创建的过程分开，项目负责人有完全的自由根据需要定制它们。这展示了我想要推广的一个非常重要的方面。确保不仅有正确的流程，而且脚本、配置和代码位置合适是至关重要的。所有对多个项目通用的内容应集中存储（就像位于[https://github.com/vfarcic/ms-lifecycle](https://github.com/vfarcic/ms-lifecycle)仓库中的Ansible
    playbooks）。另一方面，可能特定于某个项目的内容应存储在该项目所在的仓库中。如果把所有东西都存储在一个集中的地方，会引入大量等待时间，因为项目团队需要向交付团队请求更改。另一种极端情况同样错误。如果所有东西都存储在项目的仓库中，会产生大量重复。每个项目都需要编写脚本来设置服务器、部署服务等。
- en: Next we specified a single argument `chdir`. It will make sure that the command
    is run from the directory that, in this case, contains the `Dockerfile.test` file.
    The `chdir` value is the variable `repo_dir` that, unlike `registry_url` does
    not have the default value. We'll specify it at runtime when we run the playbook.
    Then comes the `delegate_to` instruction. Since we are committed to disrupting
    the destination server as little as possible, tasks like this one will be run
    on the localhost (`127.0.0.1`). Finally, we set few tags that can be used to filter
    which tasks will or will not be run.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们指定了一个单一的参数`chdir`。它将确保命令从包含`Dockerfile.test`文件的目录运行。在这种情况下，`chdir`的值是变量`repo_dir`，与`registry_url`不同，它没有默认值。我们将在运行playbook时在运行时指定它。然后是`delegate_to`指令。由于我们致力于尽量减少对目标服务器的干扰，像这样的任务将会在本地主机（`127.0.0.1`）上运行。最后，我们设置了几个标签，可以用来筛选哪些任务会被执行，哪些不会。
- en: The reason behind pulling the tests container before building it is to save
    the time. The execution of the playbook might change from one server to another
    and, if such a thing happens, without first pulling the container from the Registry,
    Docker would build all the layers even though most of them are likely to be the
    same as before. Take a note that we introduced the `ignore_errors` instruction.
    Without it, the playbook would fail if this is the first build of the container
    and there is nothing to be pulled.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建之前拉取测试容器的原因是为了节省时间。执行 playbook 在不同服务器上的表现可能有所不同，如果发生这种情况，如果不首先从注册中心拉取容器，Docker
    将会重新构建所有层，即使大部分层很可能和之前一样。请注意，我们引入了`ignore_errors`指令。没有它，如果这是容器的第一次构建且没有可拉取的内容，playbook
    会失败。
- en: Please keep in mind that the `shell` module should be avoided in most cases.
    The idea behind Ansible is to specify the desired behavior and not the action
    that should be performed. Once that desire is run, Ansible will try to do the
    right thing. If, for example, we specify that some package should be installed,
    Ansible will check whether such a package already exists and do the installation
    only if it doesn't. The shell module that we used, in this case, will always run,
    no matter the state of the system. In this particular situation, that is OK, because
    Docker itself will make sure that only changed layers are built. It won't build
    the whole container every time. Please keep this in mind when designing your roles.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在大多数情况下应该避免使用`shell`模块。Ansible 的理念是指定期望的行为，而不是要执行的动作。一旦运行该行为，Ansible 将尝试执行正确的操作。例如，如果我们指定某个软件包应该被安装，Ansible
    会检查该软件包是否已经存在，只有在不存在的情况下才会进行安装。我们使用的 shell 模块，在这种情况下，将始终运行，无论系统状态如何。在这个特定情况下，这是可以接受的，因为
    Docker 本身会确保只构建发生变化的层。它不会每次都构建整个容器。在设计角色时请牢记这一点。
- en: 'The rest of the commands we used in the pre-deployment phase are as follows
    (please don''t run them):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在预部署阶段使用的其余命令如下（请不要运行它们）：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When translated to the Ansible format, the result is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当转换为 Ansible 格式时，结果如下：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's not much to be said about those tasks. They all use the shell module
    and are all running on localhost. We run the tests container that, besides the
    obvious function of checking the quality of the code, compiles the service. The
    result of that compilation is used to build the service container that is later
    on pushed to the Docker registry.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些任务没什么可说的。它们都使用 shell 模块，并且都在本地主机上运行。我们运行的测试容器，除了检查代码质量的显而易见功能外，还会编译服务。该编译结果将用于构建服务容器，之后推送到
    Docker 注册表。
- en: The final result can be seen in the `roles/service/tasks/pre-` `deployment.yml`
    file and we can proceed with the deployment tasks.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果可以在`roles/service/tasks/pre-` `deployment.yml` 文件中看到，我们可以继续进行部署任务。
- en: Deployment tasks
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署任务
- en: The next set of commands we did when manually running the deployment pipeline
    had the goal of creating directories and files required for the process. They
    were as follows (please don't run them).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在手动运行部署流水线时执行的下一组命令，目的是创建所需的目录和文件。它们如下（请不要运行它们）。
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We created the service directory and downloaded the `docker-compose.yml`, `nginx-includes.conf`
    and `nginx-upstreams.ctmpl` files from the code repository. The latter two we''ll
    download later when the time comes to change the proxy, but we can group them
    all together as a single Ansible task. With Ansible, we''ll do it a bit differently.
    Since we already checked out the code, there is no reason to download those files.
    We can just copy them to the destination server. Ansible tasks that replicate
    this same set of commands are as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了服务目录，并从代码库中下载了`docker-compose.yml`、`nginx-includes.conf` 和 `nginx-upstreams.ctmpl`
    文件。后两个文件将在修改代理时再下载，但我们可以将它们作为一个单独的 Ansible 任务一起处理。使用 Ansible 时，我们会稍微有所不同。由于我们已经检出了代码，因此没有理由重新下载这些文件。我们可以直接将它们复制到目标服务器。复制这组命令的
    Ansible 任务如下：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We created two tasks. The first one uses the Ansible module `file` to create
    the service directory. Since this role is supposed to be generic and apply to
    (almost) any service, the name of the service is a variable that we'll set at
    runtime when we run the playbook. The second task uses the `copy` module to copy
    all the files that we'll need on the destination server. We're using the `with_items`
    instruction that will repeat this task for each entry into the `*files_ variable`.
    The variable is defined in the `roles/service/defaults/main.yml` file and is as
    follows.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了两个任务。第一个任务使用Ansible的`file`模块创建服务目录。由于这个角色应该是通用的并适用于（几乎）任何服务，服务的名称是一个变量，我们将在运行剧本时动态设置它。第二个任务使用`copy`模块将我们在目标服务器上需要的所有文件复制过去。我们使用了`with_items`指令，它会对`*files_
    variable`中的每个条目重复此任务。这个变量定义在`roles/service/defaults/main.yml`文件中，内容如下：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The source of all of those files utilizes the `repo_dir` variable that we already
    used in the pre-deployment tasks. Similarly, file destinations are using the `service_name`
    variable.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些文件的源都利用了我们在预部署任务中已经使用过的`repo_dir`变量。同样，文件的目标位置则使用了`service_name`变量。
- en: Once we're sure that all the files we'll need are on the destination server,
    we can proceed with the actual deployment that consists of two steps (please don't
    run them).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确认所有需要的文件都已经放置到目标服务器上，我们就可以继续进行实际的部署，这包括两个步骤（请不要运行它们）。
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: First we pulled the latest image from the Docker registry and then we brought
    it up. When `docker-compose up` is run, it checks whether the container image
    or its configuration changed when compared with the running container. If it is
    indeed different, Docker Compose will stop the running containers and run the
    new ones while preserving mounted volumes. We already discussed that, during some
    time (between the stopping the current version and running the new one), our service
    will be unavailable. We'll deal with this problem later on. For now, a (very short)
    downtime will be something we'll have to live with. Finally, we run `consul-template`
    that updates configurations and reloads nginx.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从Docker仓库拉取了最新的镜像，然后将其启动。当运行`docker-compose up`时，它会检查容器镜像或其配置是否与正在运行的容器有所不同。如果确实不同，Docker
    Compose会停止正在运行的容器并启动新的容器，同时保留挂载的卷。我们已经讨论过，在某段时间（从停止当前版本到运行新版本之间），我们的服务将不可用。我们稍后会处理这个问题。现在，短暂的停机时间是我们必须接受的。最后，我们运行`consul-template`来更新配置并重新加载nginx。
- en: 'As you probably guessed, we''ll run those two commands through the Ansible
    `shell` module:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的，我们将通过Ansible的`shell`模块运行这两个命令：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We''re not doing anything new. It''s the same pattern as the shell tasks we
    defined as pre-deployment tasks. The only thing worth noting is that we used variables
    as the `-template` value. The only reason behind this is that the length of the
    book has a maximum limit of characters per line, and all the parameters would
    not fit. Those variables are defined in the `roles/service/defaults/main.yml`
    file and are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有做任何新操作。这与我们在预部署任务中定义的shell任务模式相同。唯一值得注意的是，我们使用了变量作为`-template`值。这样做的唯一原因是，由于书籍的每行字符数有限，所有参数无法放下。那些变量定义在`roles/service/defaults/main.yml`文件中，内容如下：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The final result can be seen in the `roles/service/tas` `ks/deployment.yml`
    file. Please note that, unlike the pre-deployment tasks, all those in this group
    are indeed going to run on the destination server. That can be seen by the lack
    of the `delegate_to: 127.0.0.1` instruction.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '最终的结果可以在`roles/service/tas` `ks/deployment.yml`文件中看到。请注意，与预部署任务不同，这一组中的所有任务确实会在目标服务器上运行。从缺少`delegate_to:
    127.0.0.1`指令可以看出这一点。'
- en: We're done with deployment and can turn our attention to the last group of tasks.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了部署，可以将注意力转向最后一组任务。
- en: Post-Deployment tasks
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署后任务
- en: All that is left is to run integration tests and push the tests container to
    the registry. As a reminder, the commands are as follows (please don't run them).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是运行集成测试并将测试容器推送到仓库。提醒一下，命令如下（请不要运行它们）。
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Ansible equivalent of those commands is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令的Ansible等效命令如下：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There's nothing new here so we won't go into details. The complete version of
    post-deployment tasks can be found in the `roles/service/tasks/p` `ost-deploym`
    `ent.yml` file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么新内容，所以我们不再详细讨论。完整的部署后任务可以在`roles/service/tasks/p` `ost-deploym` `ent.yml`文件中找到。
- en: Running the Automated Deployment Pipeline
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行自动化部署管道
- en: 'Let us see the `service` playbook in action:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`service`剧本的实际运行：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We run the playbook `service.yml` with the inventory pointing to the `hosts/prod`
    file and few extra variables. The first one is the `repo_dir` with the value of
    the current directory (`$PWD`). The second represents the name of the service
    we want to deploy (`books-ms`). At the moment, we have only this service. If there
    would be more, they could all be deployed with this same playbook by changing
    the value of this variable.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行了`service.yml`的剧本，清单指向`hosts/prod`文件，并带有一些额外的变量。第一个是`repo_dir`，它的值为当前目录（`$PWD`）。第二个表示我们想要部署的服务名称（`books-ms`）。目前，我们只有这个服务。如果将来有更多服务，它们都可以通过修改此变量的值来使用相同的剧本进行部署。
- en: We managed to have not only the fully automated deployment but also provisioning
    of the destination server. The first of the playbook was done against a virgin
    Ubuntu server, so Ansible made sure that everything needed for the deployment
    is properly configured. The result is not perfect, but it is a good start.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅实现了完全自动化的部署，还实现了目标服务器的配置。第一次运行剧本是在一台全新的Ubuntu服务器上完成的，因此Ansible确保了部署所需的一切都已正确配置。结果虽然不是完美的，但已经是一个不错的起点。
- en: Feel free to repeat the execution of the playbook and observe the differences
    when compared to the first run. You'll notice that most of the Ansible tasks will
    be in the status `ok` since there was nothing to be done and that the playbook
    runs much faster.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 随时可以重复执行剧本并观察与第一次运行相比的差异。你会注意到，大多数Ansible任务的状态都会是`ok`，因为没有需要做的事情，且剧本运行得更快。
- en: 'What could be the things that we might be missing? There are quite a few. However,
    before we proceed and try to fix them, we should set up a proper *Continuous Deployment*
    platform and see whether it can help with the current process. Until then, let
    us destroy the VMs and let your computer take a break:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能错过了哪些东西？有不少。不过，在我们继续并尝试修复它们之前，我们应该建立一个合适的*持续部署*平台，看看它是否能帮助当前的流程。在那之前，先销毁虚拟机，让你的计算机休息一下：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
