- en: Chapter 2. Working with Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at Docker Hub, what it is, how to sign up for
    an account, how to pull an image, how to push an image, and automated image builds.
    This will give us a good solid foundation for future topics when we need to work
    with official images.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Docker Hub?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with official images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss Docker Hub, what it is used for, what features
    does it provide, and lastly, how is it different from other repository sites,
    such as GitHub or Puppet Forge. We will then create an account and explore our
    account settings. After this, we will look at official images to get a solid foundation
    for the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of Docker Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the last chapter, we looked at the Puppet's repo service, The Forge as it
    is called by the community ([https://forge.puppetlabs.com/](https://forge.puppetlabs.com/)).
    Now, let's look at Docker's repo service, Docker Hub. We can find Docker Hub at
    [https://hub.docker.com/](https://hub.docker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows what the screen looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of Docker Hub](img/B05201_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In Docker Hub, there are two type of images:'
  prefs: []
  type: TYPE_NORMAL
- en: Official images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images authored by developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we will talk about official images. On Docker Hub, you can get official
    images for just about any major operating system or application. So, the benefit
    for you as a developer is that the work to install the application is done for
    you, saving you the time and effort. This allows you to focus your time on developing.
    Let's look at an example—we will use golang.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will search for golang in the search box at the top right-hand side
    of the front page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of Docker Hub](img/B05201_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our search will return the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of Docker Hub](img/B05201_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will click on the official release of golang, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of Docker Hub](img/B05201_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, this repository gives us a lot of
    options. So, we can use multiple, different versions of golang, even on multiple
    different operating systems. So, to build a golang app, all we need to do is choose
    an image. We will use the following image in our Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of Docker Hub](img/B05201_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will then use the `COPY` method in our Dockerfile to get our code into the
    container on build. Lastly, we will run the command shown in the following screenshot
    to build our container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of Docker Hub](img/B05201_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, as you can see, it was very easy to build our app, where almost all of our
    development time would be spent on the actual application. This will increase
    our productivity and bring the applications to production a lot faster. In this
    day and age, where agility is everything, you would have to be mad to not see
    the benefit.
  prefs: []
  type: TYPE_NORMAL
- en: The second type of image on Docker Hub is developed and open sourced by developers
    and is maintained by them individually. The easiest way to tell whether an image
    is official or has been developed by an individual is through the image's name.
    In our last example, we looked at the golang image. The name of that image is
    `golang`. Now, let's look at a container that I have open sourced. For this example,
    we will look at my `consul` image. If you want to use my image, you would call
    it `scottyc/consul`. As you can see, the name is different, as it calls the author
    name `scottyc` and then the image name, `consul`. Now, you can see the difference
    in the naming convention between an official image and an authored image.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered the different images hosted at Docker Hub, we can move
    on to how images get to Docker Hub. There are two different ways to get images
    to Docker Hub. Both ways, we need a Docker Hub account, which we will cover in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The first way is to build the image locally and simply use the `docker push`
    command. The second way is using automated builds, which is an awesome functionality
    that Docker has built into Docker Hub. We will cover this later in much more detail.
    At a high level, it is a **CD** (**continuous delivery**) process to build the
    image based on a Dockerfile that is stored in a GitHub or Bitbucket public repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Docker Hub account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this topic, we will create a Docker Hub account and look at how to log in
    to the Docker daemon manually (we will cover how to do this with Puppet in the
    next chapter). So, let''s start. First, we will need to go to Docker Hub ([https://hub.docker.com/](https://hub.docker.com/))
    and fill out the form on the right-hand side of the page. Just replace **yourusername**
    with your desired username, **you@youremail.com**, with your e-mail ID, and, of
    course, enter a secure password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Docker Hub account](img/B05201_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, go to your e-mail ID and confirm your account. This will then redirect
    you to the Docker login page. Log in and you should see the following web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Docker Hub account](img/B05201_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have an account, let''s log in to our daemon. So, let''s use `vagrant
    ssh` back into our Docker vagrant box. We will change to root (`sudo –i`) and
    then enter the `docker login` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Docker Hub account](img/B05201_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the username that we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Docker Hub account](img/B05201_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, enter your password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Docker Hub account](img/B05201_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After this, enter your e-mail ID. Once this is done, you should see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Docker Hub account](img/B05201_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You have now successfully logged in the Docker daemon.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring official images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this topic, we are going to provide a quick overview of how to search for
    images on Docker Hub. There are two ways to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Through the Docker Hub website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Through the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at the website first. If you remember, in our golang example we
    already used the web interface to search for an image. Let''s look at another
    example. In this example, we will look for bitbucket, Atlassian''s git server.
    So, we will go back to Docker Hub ([https://hub.docker.com/](https://hub.docker.com/))
    and enter `bitbucket` in the search field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring official images](img/B05201_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our search will return the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring official images](img/B05201_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the preceding screenshot, we got 43 results. So what should
    we look for to choose the right image? We always look for three things, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We check the number of pulls. The more people using an image, the more likely
    it will run with no issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also check Docker''s official rating system: how many stars a repository
    has. Stars are awarded by other members of the community when they like the image,
    which is very similar to the star system on GitHub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We check whether the repo has a Dockerfile. This gives you peace of mind about
    how the image is built. You can see all the commands that were run to complete
    the build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the three metrics, let''s pick an image. Looking at the results, **atlassian/bitbucket-server**
    looks good, with 21 stars and 7.3k pulls. So, let''s click on the repo and look
    for a Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring official images](img/B05201_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the **Dockerfile** tab under the main image title, it takes
    us to the Dockerfile page. Not every repository has a Dockerfile; however, this
    does not mean that it''s a bad image. This just means that it will take more testing
    before you would be able use it in production. Some authors, such as *Jess (Jessie
    Frazelle)* from Docker, have their Dockerfiles on their GitHub page. She has awesome
    images on Docker Hub and the Dockerfiles can be found at [https://github.com/jfrazelle/dockerfiles](https://github.com/jfrazelle/dockerfiles).
    Alright, back to our example. As you can see in the following screenshot, there
    is a Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring official images](img/B05201_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, I think this is the winner!!!!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s do the same search from the command line. In the command line,
    type `docker search bitbucket`, and the search will return the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring official images](img/B05201_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it has returned the same information, and the only thing missing
    is the number of pulls. Again, it looks like we will use **atlassian/bitbucket-server**.
  prefs: []
  type: TYPE_NORMAL
- en: Automated builds in Docker Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this topic, we are going to look at how automated builds work at a high level,
    and how to publish an image via the push method on Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Automated builds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Docker Hub, we have two ways to publish images: via a simple push method
    or via an automated build. In this topic, we will cover automated builds. First,
    we will look at the flow of an automated build. In this example, we will be using
    GitHub, but you can also use Bitbucket. So, the first thing that we need to do
    is link our Docker Hub account to our GitHub account. This is done by navigating
    to **Settings** | **Linked Accounts & Services**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automated builds](img/B05201_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just follow the prompts to link the accounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is completed, let''s go to our GitHub account and create a repo.
    I am going to use the one that I have already set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automated builds](img/B05201_02_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot, the repo contains a Dockerfile.
    Now, let''s looks at the same repo except Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automated builds](img/B05201_02_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After this, we will look at the **Build Details** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automated builds](img/B05201_02_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, how does that build automate ? Well, it is quite simple. Every time we check
    in a change to the GitHub repo, it will trigger web hooks at Docker Hub. When
    Docker Hub receives the trigger, it will grab the Dockerfile and build the image.
    Docker Hub will take care of things such as version numbers for us with every
    build. So, at a high level, this is how automated builds work.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing to Docker Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a quite simple way to get an image to Docker Hub, but the downside is
    that there is no automated build process and the Dockerfile does not get placed
    in the Docker Hub repo automatically. So, in this example, we will assume that
    we have created an image called `scottyc/super_app`. To push this to Docker Hub,
    we simply type `docker push scottyc/super_app` in the terminal. Note that the
    Docker daemon needs to be logged in at the time of the push.
  prefs: []
  type: TYPE_NORMAL
- en: Working with official images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how Docker Hub serves images to us, let's look at how to integrate
    them into our code via three methods. The first will be a Dockerfile, the second
    will be in the `docker-compose.yaml` file, and the last will be straight into
    a Puppet manifest.
  prefs: []
  type: TYPE_NORMAL
- en: Dockerfiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this topic, we will look at using nginx in a basic Dockerfile. In a Dockerfile,
    we need to add a few things. The first is the image that we are basing our application
    on; for us it will be nginx. The second is a maintainer. It should look like as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dockerfiles](img/B05201_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As the base nginx image has already got port 80 and 443 exposed, we will not
    need that configuration for our Dockerfile. The next thing we will add is a simple
    `run` command to update the packages in the container. As its base OS is Debian,
    we will add the command shown on line **5** in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dockerfiles](img/B05201_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we are building a simple application, this is all that we are going to add
    to our Dockerfile. There are heaps of configurations that can be done with a Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to read about Dockerfiles, you can do so at [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s build our image. You will note that `server.yaml` in our Vagrant
    repo already has port `80` forwarding to port `8080`, so we won''t need to make
    any changes there. Copy the Dockerfile that we created into the root of your Vagrant
    repo. Then, let''s start our vagrant box with vagrant up from our terminal. Then,
    use `vagrant ssh` once the box is up. Let''s change to root (`sudo -i`). Then,
    if we change directories to `/vagrant`, we should see our Dockerfile. Now, let''s
    build our image with the command, `docker build -t YOUR AUTHOR NAME/nginx .` (note
    that `.` is part of the command). You will get the following output on your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dockerfiles](img/B05201_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s test our image and spin up a container with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If it was successful, we should get the nginx default page in your browser
    at `127.0.0.1:8080`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dockerfiles](img/B05201_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Docker Compose
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we are going to deploy the same nginx image with Docker Compose. We are
    going to run Docker Compose at a high level in this topic just to get an understanding
    of the technology. We will look at it in depth in another chapter of this book.
    The first thing we need to do is install Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing this book, my pull request is still open, so we will
    have to use my branch of Gareth's module.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, let''s modify our puppetfile in the Vagrant repo with the commands
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Compose](img/B05201_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, in the Puppetfile we added a new module dependency, `stankevich/python`,
    as Docker Compose is written in Python. We also updated our `epel` module to use
    the latest. Just to get a fresh working environment, we will run the command,
    `vagrant destroy && vagrant up`, in our terminal. Once the box is up, we will
    use `vagrant ssh` and then change to root (`sudo -i`). We will then change the
    directory to `/vagrant` and type `docker-compose`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the build was successful, we will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Compose](img/B05201_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s create `docker-compose.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Compose](img/B05201_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we used the official image, gave the container a name `nginx`,
    and exposed ports **80:80** again to be able to hit the nginx page. So, if we
    copy our `docker-compose.yml` file to the root of the Vagrant directory, log in
    to our vagrant box, and change the directory to root (`vagrant ssh`, then `sudo
    -i`), we will be able to change the directory to `/vagrant` again. Now, run `docker-compose
    up -d`. We will get the following output after running it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Compose](img/B05201_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then go to our web browser and visit the nginx page at `127.0.0.1:8080`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Compose](img/B05201_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to read more about Docker Compose, go to [https://docs.docker.com/compose/](https://docs.docker.com/compose/).
  prefs: []
  type: TYPE_NORMAL
- en: Puppet manifest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to build the same ngnix container with a simple
    Puppet manifest. This is just a proof of concept. In the next chapter, we will
    write a full module. This is just to give us a foundation and understanding of
    how Puppet interacts with Docker. So, in our Vagrant repo, let''s modify `manifest/default.pp`.
    The file should contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Puppet manifest](img/B05201_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will then open our terminal at the root of our Vagrant repo and run `vagrant
    provision`. Note that you should have no other containers running at this time.
    You will see the following output, which shows that Puppet provisioned a Docker
    container called nginx:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Puppet manifest](img/B05201_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then check our browser again at `127.0.0.1:8080`. We will get the nginx
    page again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Puppet manifest](img/B05201_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot about the Docker Hub ecosystem. We discussed
    what official images are, how automated builds work, and of course, how to work
    with images in three different ways. After working through this chapter, we now
    have the tools in our tool belt to build our first application with Puppet.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will write our first Puppet module to create a Docker
    container and we will look at writing rspec-puppet unit tests to make sure that
    our module does what it's meant to do.
  prefs: []
  type: TYPE_NORMAL
