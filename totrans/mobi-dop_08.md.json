["```\n$ terraform --version\n```", "```\n$ mkdir terraform\n$ cd terraform\n$ terraform workspace new MyTestMachine\n$ terraform workspace select MyTestMachine\n```", "```\nvariable \"instance_type\" {\n  description = \"the AWS instance type to use\"\n}\n```", "```\nresource \"aws_instance\" \"testapp\" {\n  ami = \"ami-12345t67\"\n  instance_type = \"${var.instance_type}\"\n}\n```", "```\nProvider \"aws\" {\n  access_key = \"ENTER_ACCESS_KEY\"\n  secret_key = \"ENTER_SECRET_KEY\"\n  region     = \"us-west-2\" // you can select any region\n}\n```", "```\n$ terraform init\n$ terraform plan -var 'instance_type=t2.micro'\n```", "```\n$ terraform apply -var 'instance_type=t2.micro'\n```", "```\nterraform apply -auto-approve -var 'instance_type=t2.micro'\n```", "```\nterraform show\n```", "```\nresource \"aws_eip\" \"ip\" {\n  instance = \"${aws_instance.testapp.id}\"\n}\n```", "```\n$ terraform apply\n\n+ aws_eip.ip\n allocation_id: \"<computed>\"\n association_id: \"<computed>\"\n domain: \"<computed>\"\n instance: \"${aws_instance.example.id}\"\n network_interface: \"<computed>\"\n private_ip: \"<computed>\"\n public_ip: \"<computed>\"\n```", "```\noutput \"ip\" {\n  value = \"${aws_eip.ip.public_ip}\"\n}\n```", "```\n$ terraform output ip\n```", "```\nterraform destroy\n# ...\n\n- aws_instance.testap\n```", "```\n$ vi main.tf\n\nvariable \"stack_name\" { default = \"MyTestMachine\"}\nvariable \"aws_region\" { default = \"us-east-1\" }\nvariable \"instance_type\" { default = \"t2.micro\" }\nvariable \"instance_count\" { default = \"1\" }\nvariable \"route53_zone_id\"\nvariable \"security_group_id\"\nprovider \"aws\" {\n  region = \"${var.aws_region}\"\n}\nmodule \"MyTestMachine\" {\n  source = \"./ec2_nodes\"\n  instance_type = \"${var.instance_type}\"\n  stack_name = \"${var.stack_name}\"\n  role = \"MyTestMachine\"\n  count = \"1\"\n  security_group_id = \"${var.security_group_id}\"\n}\nresource \"aws_route53_record\" \"MyTestMachine\" {\n  zone_id = \"${var.route53_zone_id}\"\n  name = \"${var.stack_name}-domainname.com\"\n  type = \"A\"\n  ttl = \"300\"\n  records = [\"${module.MyTestMachine.firstip}\"]\n}\n```", "```\n$ mkdir ec2_nodes\n$ cd ec2_nodes\n$ vi main.tf\n\nvariable \"stack_name\" {}\nvariable \"count\" {}\nvariable \"role\" {}\nvariable \"instance_type\" {}\nvariable \"security_group_id\" {}\nvariable \"route53_zone_id\" {}\nresource \"aws_instance\" \"MyTestMachine\" {\n  ami = \"ami-97785bed\" # you can select any AMI instance\n  instance_type = \"${var.instance_type}\"\n  count = \"${var.count}\"\n  vpc_security_group_ids = [\n    \"${var.security_group_id}\" \n  ]\n  associate_public_ip_address = false\n  iam_instance_profile = \"MyTestRole\"\n  subnet_id = \"subnet-12345678\"\n  key_name = \"aws-key-1234\"\n    user_data = <<EOF\n# yum update\nsudo yum update -y\nEOF\n  tags {\n    Name = \"${var.stack_name}\"\n    Role = \"${var.role}\"\n  }\n}\nresource \"aws_route53_record\" \"nodecname\" {\n  zone_id = \"${var.route53_zone_id}\"\n  count = \"${var.count}\"\n  name = \"${var.stack_name}-${var.role}-${count.index}.domainname.com\"\n  type = \"A\"\n  ttl = \"300\"\n  records = [\"${element(aws_instance.MyTestMachine.*.private_ip, count.index)}\"]\n}\n```", "```\noutput \"first_ip\" {\n  value = \"${aws_instance.MyTestMachine.0.private_ip}\"\n}\n```", "```\n$ terraform workspace new MyTestMachine\n$ terraform workspace select MyTestMachine\n\n$ terraform plan \\\n -var \"stack_name=MyTestMachine\" \\\n -var \"instance_type=t2.micro\" \\\n -var \"route53_zone_id=123456789\" \\ \n -var \"security_group_id=sg-12345678\"\n\n$ terraform apply -auto-approve \\\n -var \"stack_name=MyTestMachine\" \\\n -var \"instance_type=t2.micro\" \\\n -var \"route53_zone_id=123456789\" \\ \n -var \"security_group_id=sg-12345678\"\n```", "```\n$ aws ec2 run-instances <Pass parameters>\n```", "```\n$ aws ec2 run-instances --count 1 --security-groups launch-wizard-1 --subnet-id subnet-1234rt78 --instance-type t2.micro --key-name myTestKey --image-id ami-abc123dec --associate-public-ip-address --iam-instance-profile Name=MyTestIAM-Role\n```", "```\n{\n \"Instances\": [\n {\n \"Monitoring\": {\n \"State\": \"disabled\"\n },\n \"PublicDnsName\": \"\",\n \"StateReason\": {\n \"Message\": \"pending\",\n \"Code\": \"pending\"\n },\n \"State\": {\n \"Code\": 0,\n \"Name\": \"pending\"\n },\n \"EbsOptimized\": false,\n \"LaunchTime\": \"2018-03-10T07:55:32.000Z\",\n \"PrivateIpAddress\": \"10.10.81.24\",\n \"ProductCodes\": [],\n \"VpcId\": \"vpc-123456b\",\n \"StateTransitionReason\": \"\",\n \"InstanceId\": \"i-1234d5r6t7y8g9aws\",\n \"ImageId\": \"ami-12345678\",\n \"PrivateDnsName\": \"ip-10-10-81-24.ap-southeast-1.compute.internal\",\n \"KeyName\": \"MyTestKey\",\n \"SecurityGroups\": [\n {\n \"GroupName\": \"launch-wizard-1\",\n \"GroupId\": \"sg-12345678\"\n }\n ],\n \"ClientToken\": \"\",\n \"SubnetId\": \"subnet-1234rt78\",\n \"InstanceType\": \"t2.micro\",\n \"NetworkInterfaces\": [\n {\n \"Status\": \"in-use\",\n \"MacAddress\": \"02:d4:43:07:9c:a4\",\n \"SourceDestCheck\": true,\n \"VpcId\": \"vpc-12345678\",\n \"Description\": \"\",\n \"NetworkInterfaceId\": \"eni-12345678\",\n \"PrivateIpAddresses\": [\n {\n \"Primary\": true,\n \"PrivateIpAddress\": \"10.10.81.24\"\n }\n ],\n \"SubnetId\": \"subnet-1234rt78\",\n \"Attachment\": {\n \"Status\": \"attaching\",\n \"DeviceIndex\": 0,\n \"DeleteOnTermination\": true,\n \"AttachmentId\": \"eni-attach-c5d3e72e\",\n \"AttachTime\": \"2018-03-12T07:55:32.000Z\"\n },\n \"Groups\": [\n {\n \"GroupName\": \"launch-wizard-1\",\n \"GroupId\": \"sg-12345678\"\n }\n ],\n \"Ipv6Addresses\": [],\n \"OwnerId\": \"1234567891011\",\n \"PrivateIpAddress\": \"10.10.81.24\"\n }\n ],\n \"SourceDestCheck\": true,\n \"Placement\": {\n \"Tenancy\": \"default\",\n \"GroupName\": \"\",\n \"AvailabilityZone\": \"us-east-1a\"\n },\n \"Hypervisor\": \"xen\",\n \"BlockDeviceMappings\": [],\n \"Architecture\": \"x86_64\",\n \"RootDeviceType\": \"ebs\",\n \"IamInstanceProfile\": {\n \"Id\": \"A1B2C3D4E5S6F7G8I9J1K0\",\n \"Arn\": \"arn:aws:iam::1234567891011:instance-profile/MyTestIAM-Role\"\n },\n \"RootDeviceName\": \"/dev/xvda\",\n \"VirtualizationType\": \"hvm\",\n \"AmiLaunchIndex\": 0\n }\n ],\n \"ReservationId\": \"r-123456789101112\",\n \"Groups\": [],\n \"OwnerId\": \"1234567891011\"\n}\n```", "```\n$ aws ec2 describe-instances --instance-id <id-awsinstanceid>\n```", "```\n$ aws ec2 terminate-instances --instance-ids \"i-1234d5r6t7y8g9aws\"\n{\n \"TerminatingInstances\": [\n {\n \"InstanceId\": \"i-1234d5r6t7y8g9aws\",\n \"CurrentState\": {\n \"Code\": 32,\n \"Name\": \"shutting-down\"\n },\n \"PreviousState\": {\n \"Code\": 16,\n \"Name\": \"running\"\n }\n }\n ]\n}\n```", "```\n$ aws elb create-load-balancer --load-balancer-name my-test-elb --listeners \"Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80\" --availability-zones us-west-2a us-west-2b\n```", "```\n$ aws elb register-instances-with-load-balancer --load-balancer-name my-test-elb --instances i-awsinstance12fd\n```", "```\n$ aws autoscaling create-launch-configuration --launch-configuration-name my-test-launch --key-name my-key-pair --image-id ami-c1wjdlakf6 --instance-type m1.small --security-groups sg-lkjl3kmm --instance-type m1.small \n```", "```\n$ aws autoscaling create-auto-scaling-group --auto-scaling-group-name my-test-asg-group --launch-configuration-name test-launch --load-balancer-names my-test-elb --health-check-type ELB --health-check-grace-period 120 --min-size 1 --max-size 3 --desired-capacity 2 --default-cooldown 600--termination-policies \"OldestInstance\" \n```", "```\naws iam create-role --role-name myTestKey --assume-role-policy-document file://myTestKeyPolicy.json --description \"Role for testing access from EC2 to S3 and Route 53\"\n```", "```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"ec2:*\",\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"elasticloadbalancing:*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"cloudwatch:*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"autoscaling:*\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iam:CreateServiceLinkedRole\",\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"iam:AWSServiceName\": [\n            \"autoscaling.amazonaws.com\",\n            \"ec2scheduled.amazonaws.com\",\n            \"elasticloadbalancing.amazonaws.com\",\n            \"spot.amazonaws.com\",\n            \"spotfleet.amazonaws.com\"\n          ]\n        }\n      }\n```"]