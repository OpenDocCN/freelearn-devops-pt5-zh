- en: Develop Apps using Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web API is a new feature, introduced for the first time for Dynamics CRM 2016\.
    You can use Dynamics 365 Web API with different programming languages, multiple
    platforms, and devices. Web API in Dynamics 365 uses **Open Data Protocol** (**OData**),
    also known as OData version 4\. As Dynamics 365 Web API is built on open standards,
    it is not necessary to use any assemblies.
  prefs: []
  type: TYPE_NORMAL
- en: With Dynamics 365, **Organization Data Service** was deprecated and was replaced
    with Web API. The main purpose of the API is to provide parity with organization
    services and try to reduce as many constraints as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the characteristics of Web API:'
  prefs: []
  type: TYPE_NORMAL
- en: It implements OData version 4.0 for building and consuming RESTful APIs over
    rich data sources such as DOC, HTML, and PDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports a wide variety of programming languages such as .Net, C++, Java,
    Python, devices, and platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request and response have JSON format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Dynamics 365 Web API (client-side JavaScript)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dynamics 365 Web API can be called and accessed using JavaScript. You can use
    Web API with HTML web resources, form scripts, and ribbon commands to perform
    various operations on data.
  prefs: []
  type: TYPE_NORMAL
- en: Web API is very convenient to use with JavaScript as it returns results in the
    form of JSON objects that can be easily converted to JavaScript objects.
  prefs: []
  type: TYPE_NORMAL
- en: In Dynamics 365, Web API is used mainly with HTML web resources and in Single
    Page Applications.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript web resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main benefit of using Web API in JavaScript web resources is that you will
    not need to authenticate because web resources are a part of the application and
    can be accessed by authenticated users only. You can directly write a code for
    Web API operations in the JavaScript web resource, and perform operations.
  prefs: []
  type: TYPE_NORMAL
- en: Single Page Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Single Page Applications are capable of making Dynamics 365 Web API calls. They
    consists of many JavaScript libraries that are running on browsers, which authenticate
    the Dynamics 365 API using **Cross-Origin Resource Sharing** (**CORS**).
  prefs: []
  type: TYPE_NORMAL
- en: While using JavaScript in a Single Page Application, the `adal.js` library is
    used to allow the user to authenticate and to access Dynamics 365 from a hosted
    web app. You must also integrate an authorization header that contains an authentication
    token.
  prefs: []
  type: TYPE_NORMAL
- en: Further on, in this chapter, we will look through some examples that use Web
    API for performing CRUD operations using web resources.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamics 365 Web API uses `XMLHttpRequest` object to perform operations.
  prefs: []
  type: TYPE_NORMAL
- en: Working with XMLHttpRequest in Dynamics 365 Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**XMLHttpRequest** (**XHR**) is a native object supported by all browsers,
    which enables AJAX techniques for making web pages dynamic.'
  prefs: []
  type: TYPE_NORMAL
- en: We will look at a very simple example that uses a Web API and `XMLHttpRequest`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the Web API code that will fetch all the opportunities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you will notice that after initializing a new `XMLHttpRequest`
    object, you need to open it before sending or setting any properties for it. The
    parameters of an `open` method are an HTTP request method (`GET`, `PUT`, `POST`,
    `DELETE`, and so on), a URL, and a Boolean parameter that indicates whether the
    operation is to be performed asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: Web API URL and versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Web API URL consists of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Protocol**: A protocol in HTTP request can be `http://` or `https://`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Base URL**: A base URL is nothing but the URL of your current organization
    that can be retrieved using the function—`Xrm.Page.context.getClientUrl()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web API path**: Web API path in Dynamics 365 is API/data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version**: It is the version of Web API for Dynamics 365\. The latest version
    is 9.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource**: A resource can be the name of the entity, function, or an action
    you want to perform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The URL used in the preceding example is `Xrm.Page.context.getClientUrl() +
    "/api/data/v8.2/opportunities()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTTP request also supports various **HTTP methods** described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`: It is used for retrieving data; the status code for a successful call
    is `200 OK`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`: It is used for the creation of new records'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATCH`: It is used for updating or performing `upsert` operations on entity
    records'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: It is used for deletion of records'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT`: It is used when updating individual properties of an entity record'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For HTTP Request, various HTTP headers are also used that are described as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamics 365 supports only JSON format. So, these following headers can be used
    with Dynamics 365 Web API.
  prefs: []
  type: TYPE_NORMAL
- en: For every request, you must include the `Accept` header value of `application/json`,
    which returns body, even in the case of no response. If there is an error, it
    will be returned in JSON format. Your code can work without this header, but it
    is a best practice to use it with your request.
  prefs: []
  type: TYPE_NORMAL
- en: You must always include headers, `OData-Version` and `OData-Max-Version` set
    to a value of 4.0\. The current version of OData is 4.0, but to avoid ambiguity
    about OData versions in future, you should have these headers included in your
    request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties that do not include any recent changes may include cached data.
    So, to override browser caching of Web API requests, you must include the `If-None-Match:
    null` header in the request body**.**'
  prefs: []
  type: TYPE_NORMAL
- en: After getting a basic idea about Web API in Dynamics 365, we will move toward
    performing various operations using Web API. We will also learn how to create,
    retrieve, update, and delete an entity record using a Web API request. We will
    also go through associate and disassociate request examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, at least the following HTTP headers should be included:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Accept: application/json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OData-MaxVersion: 4.0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OData-Version: 4.0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`If-None-Match: null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying data using Dynamics 365 Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While retrieving data from Dynamics 365, you can set various criteria for the
    data you need and can apply various filters for retrieving specific data. For
    this, we will look at an example for querying data, using Web API from Dynamics
    365:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will use `$set` and `$top` system query options to return
    the `firstname` property of the first five contacts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The response to the preceding request will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next example, we will look at how to limit the number of entity records
    returned for any request. The maximum number of records that can be returned is
    5,000\. You cannot retrieve more than 5,000 records in Dynamics 365:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The response to the preceding request will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will see how to apply system query options to query data using Dynamics
    365 Web API. The first query option is appended after [`?`] and every proceeding
    option is separated using [`&`]. Query options are case sensitive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the next query, we will select the `firstname` and `lastname` of a contact
    whose age is less than `50`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The standard filter operators used in Dynamics 365 Web API are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Description** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| **Comparison operators** | - | - |'
  prefs: []
  type: TYPE_TB
- en: '| `Eq` | Equal | `$filter=age eq 50` |'
  prefs: []
  type: TYPE_TB
- en: '| `Ne` | Not equal | `$filter=age ne 50` |'
  prefs: []
  type: TYPE_TB
- en: '| `Gt` | Greater than | `$filter=age gt 50` |'
  prefs: []
  type: TYPE_TB
- en: '| `Ge` | Greater than or equal | `$filter=age ge 50` |'
  prefs: []
  type: TYPE_TB
- en: '| `Lt` | Less than | `$filter=age lt 50` |'
  prefs: []
  type: TYPE_TB
- en: '| `Le` | Less than or equal | `$filter=age le 50` |'
  prefs: []
  type: TYPE_TB
- en: 'The logical operators are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Description** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| **Logical operators** | - | - |'
  prefs: []
  type: TYPE_TB
- en: '| `And` | Logical and | `$filter=age lt 50 and age gt 20` |'
  prefs: []
  type: TYPE_TB
- en: '| `Or` | Logical or | `$filter=contains(firstname,''(sample)'') or contains(firstname,''test'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Not` | Logical negation | `$filter=not contains(firstname,''sample'')` |'
  prefs: []
  type: TYPE_TB
- en: 'The grouping operators are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Grouping operators** | - | - |'
  prefs: []
  type: TYPE_TB
- en: '| `( )` | Precedence grouping | `(contains(firstname,''sample'') or contains(firstname,''test''))
    and age gt 50` |'
  prefs: []
  type: TYPE_TB
- en: Standard query options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The OData string query functions supported by Web API are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Function** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| `Contains` | `$filter=contains(firstname,''(sample)'')` |'
  prefs: []
  type: TYPE_TB
- en: '| `Endswith` | `$filter=endswith(firstname,''Inc.'')` |'
  prefs: []
  type: TYPE_TB
- en: '| `startswith` | `$filter=startswith(firstname,''a'')` |'
  prefs: []
  type: TYPE_TB
- en: '**Order by query**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can order the records in ascending or descending order. The following example
    shows how to order records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, after learning to query using Dynamics 365 Web API, we will go through
    CRUD operations. We will look through some examples of performing these operations.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD operations using Dynamics 365 Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will look at some basic examples for creating, updating, retrieving, and
    deleting an entity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create an entity**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a code for Web API that creates a new record for the `entity`
    account. For that first, we will create a JSON object and set the required properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Retrieving list of entity records**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will retrieve a list of accounts from Dynamics 365 using a Web API
    request. The following is the code for retrieving a list of entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: These retrieved objects can be easily converted to JavaScript objects. These
    objects can be assigned to a JavaScript array and can be used for further operations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Update an entity record**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will update an `entity` record. For updating a record, you will need
    to pass the GUID of the record you want to update and also a JSON object that
    consists of fields to be updated. Here, we will update `email` and `city` for
    an account record:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Delete an entity record**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For deleting an `entity` record, you will need to pass the GUID of the record
    to be deleted. The following is the code to delete an account `entity` record
    from Dynamics 365:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Impersonation in Dynamics 365 Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you want to execute business logic on behalf of another user, then you
    will need to use impersonation. Sometimes, there are some processes or business
    logic on behalf of a particular Dynamics 365 user that has the appropriate security
    role of that user; for such requirements, impersonation is very useful.
  prefs: []
  type: TYPE_NORMAL
- en: In the code, whenever you need to create a record on behalf of another user,
    you will use this feature. For that, you will need two user accounts. To use impersonation
    you will need to add one header named `MSCRMCallerID` with a GUID value that is
    equal to the user's system user ID as shown in the next request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving metadata using Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Dynamics 365 is a metadata-driven application, where you will need
    to query metadata for some scenarios and specific requirements. Dynamics 365 Web
    API supports querying metadata. We will use the `EntityDefinitions` entity to
    retrieve the metadata of the `contact` entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the request to query metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Updates for Web API in Dynamics 365 in version 9.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, in the newly released version 9.0 for Dynamics 365, there are many remarkable
    changes made to querying data and performing various operations using Dynamics
    365 Web API. With the new release, we will not need to create any requests for
    using Web API, instead, you will use built-in and pre-defined functions for using
    Web API.
  prefs: []
  type: TYPE_NORMAL
- en: Using Web API in the new Dynamics 365 version is very simple and easy. Now,
    Dynamics 365 has a new library `Xrm.WebApi` and performs CRUD operations using
    Web API. This library provides functions to perform operations, which we will
    look through in the following examples and sample code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create an entity record**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample code to create a new contact using the `Xrm.WebApi.createRecord()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Update an entity record**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we will be updating a record contact by adding a
    new attribute `email`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Delete an entity record**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the sample code to delete a contact record:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Retrieving records**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the new version, you can directly use fetch XML to retrieve multiple records
    from Dynamics 365 using Web API. In the following example, we will use fetch an
    XML query to fetch/retrieve contacts for a selected account. The following is
    the sample code for retrieving records from Dynamics 365:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to work on Single Page Applications, XMLHttpRequest
    in Dynamics 365 Web API, Web API URL and versions, and Standard Query Options,
    and also saw how to work on CRUD operations using Dynamics 365 Web API.  In the
    next chapter, we will cover Azure integration with Dynamics 365, configure Azure
    integration with Dynamics 365, and write Azure-aware plugins and different listener
    applications.
  prefs: []
  type: TYPE_NORMAL
