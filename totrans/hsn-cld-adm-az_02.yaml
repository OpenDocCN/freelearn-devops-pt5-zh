- en: Azure Networking - Foundation of Azure IaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step in our cloud journey is Azure networking. This step will lay the
    foundation for our Azure infrastructure and will be used by both IaaS and PaaS
    in chapters to come. It's important to design and implement your Azure network
    with consideration for all Azure services that will be used in the future. This
    will save you a lot of headaches, and keep your cloud journey safe and without
    turbulence.
  prefs: []
  type: TYPE_NORMAL
- en: 'The areas that we''ll cover in this chapter are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure VNet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Address ranges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subntets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP address types and reservations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network security groups** (**NSGs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure virtual machine networking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you'll need an Azure subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Azure networking basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The networking stack in Microsoft Azure is very important and is the foundation
    for other services, especially when we talk about IaaS. Setting up Azure networking
    correctly is very important, as it will be key to setting up your IaaS infrastructure
    and allowing your virtual machines to communicate. The networking stack in Azure
    is composed of two components, external and private. External is used to access
    service endpoints over the internet and private is used for communication between
    Azure services internally.
  prefs: []
  type: TYPE_NORMAL
- en: Almost all Azure services have external endpoints configured by default, but
    we have some special cases when we don't want to enable access over the internet.
    In these cases, we can disable external endpoints and set up these services to
    use private traffic only. This applies to PaaS as well, even though these services
    usually don't have private network access configured by default (except for some
    PaaS services that are designed for this, for example, app service isolated).
    In this chapter, we'll discuss basic networking features and will continue to
    explore networking options for specific services when the time comes.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS usually has external endpoints configured as well, but we have the option
    to disable these and not allow access over the internet. On the other hand, IaaS
    always comes with a private network configured. Every virtual machine in Azure
    has to be assigned to a virtual network and have a private IP address assigned.
    Even if we have a single virtual machine configured and want to use it only for
    public access over the internet, a virtual network will be created in the background,
    and this VM will have a private IP address assigned.
  prefs: []
  type: TYPE_NORMAL
- en: Azure networking also extends to VPN options, which allow you to access services
    only over a private network and private IP addresses. This allows you to secure
    resources further and disable any kind of public access. We will explore these
    features and options when we discuss hybrid cloud with Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first virtual network in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Azure virtual network** (**Azure VNet**) is created in two cases, when you
    create a new VNet or when you create a new Azure virtual machine. Options are
    similar in both cases, but I recommend creating Azure VNet in advance and joining
    virtual machines to an existing VNet because this gives you a few more options.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new Azure Vnet, open the Azure portal, select Create a resource
    and choose Virtual network in Networking services (or search for `Virtual network`
    in the search bar), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b11dcce-39f3-4980-9162-59b52e6da46f.png)'
  prefs: []
  type: TYPE_IMG
- en: You need parameters for your virtual network. The resource name must be unique
    on the resource group level and must be one string, with no spaces allowed. My
    resource Name is `PacktVNet`, but it could be `Packt_VNet` if I wanted to separate
    the words. The next parameter we need to provide is Address space. This will define
    how many IP addresses will be available in this VNet and uses CIDR format. The
    biggest address space is `/8` and smallest is `/29`. In this case, I'll use `/16`,
    which will give me plenty of address space to use. We need to select the subscription
    where we want to place our resource (only if we have multiple subscriptions; one
    will be selected by default in the case of a single subscription). Two options
    are available for Resource group name, either a new one or to select an existing
    resource group. As I usually configure virtual network prior to any other resource,
    a new resource group is created along with VNet. The next step is to select the
    region where we want to create the resource. I recommend to select the Azure data
    center closest to you geographically, as this will provide the least network latency
    in the future. If you selected an existing resource group, this option will be
    preselected as the same region in which the resource group is located. You need
    to name the default subnet and provide an address space for that subnet. The address
    range for the subnet must be inside the address range of your VNet address space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic DDoS protection is provided by default for free, but you can select the standard
    tier, which is charged separately. We will discuss DDoS further when we reach [Chapter
    9](0e16c405-a21c-4cfc-9dc6-e20fc05db041.xhtml), *Azure Security and Administration*.
    Examples of the information needed for virtual network deployment are shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f237aaca-ae7a-447e-8603-2db4cdd05800.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The final option is related to service endpoints. If we enable this, new windows
    will be shown, as in the following screenshot. This option enables you to attach
    PaaS services to your VNet. You can select between Azure Cosmos DB, event hub,
    key vault, service bus, SQL, and storage, or you can select all of them. At this
    time, I''ll disable endpoints and we''ll discuss them later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aef94448-da9a-4ac3-8540-4a9eaad02f6c.png)'
  prefs: []
  type: TYPE_IMG
- en: The last step is to confirm options and start the process of creating a resource.
    Azure virtual network works relatively fast and a resource should be created in
    less than a minute. This can depend on data center workload and the number of
    requests but should be completed relatively quickly, even in high-demand situations.
  prefs: []
  type: TYPE_NORMAL
- en: Azure virtual network represents your own network in the cloud. It has similar
    features to your local network, such as IP address range and subnets. If you're
    familiar with networking in on-premises scenarios, it will be very easy to understand
    Azure networking.
  prefs: []
  type: TYPE_NORMAL
- en: Azure virtual network options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once deployment is finished, you have different management options available.
    Locate your resource group and open the VNet blade. In the Overview tab, you can
    see different information about your VNet, such as resource group, subscription
    location, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In settings, we have multiple options that are available for configuration:
    Address space, Connected Devices, Subnets, DDoS protection, DNS servers, Peering,
    and Service endpoints. Properties, locks, and automation scripts are available
    for every resource in Azure and aren''t limited only to Azure VNet. Properties
    have read-only information about your resource, and locks point out if there are
    any services in dependency to this service. The automation script will generate
    an ARM template for resource redeployment. Note that this option generates an
    ARM template for a complete resource group, not only for a specific resource.
    The automation script can be used for future redeployment, in case we need to
    replicate resources for a new client or a new environment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In address space, we can edit an existing address space or add additional ones.
    There are two restrictions: address spaces can''t overlap and you can''t change
    an address space to be smaller than the subnets using that address space. For
    example, if you created address space `10.1.0.0/16` and subnet `10.1.0.0./16`,
    the address space can''t be changed to less than `10.1.0.0/16` unless the subnet
    is changed first. It''s important, how you use an address space; in terms of future
    VPN connection, you cannot connect Azure VNet to a network (Azure or physical)
    using the same address space. Adding a new address space can be seen in the following
    screenshot. Make sure the new address space doesn''t overlap with the existing
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6352acd0-2a3f-428d-83aa-233e0cab8707.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the subnet blade, you have two options: to change the existing subnet or
    to add a new one. For both options, you have to use existing address spaces, and
    subnets can''t overlap. An existing subnet can''t be changed to use less address
    space than already in use. For example, if you have an address space of `10.1.0.0/24`
    and have 200 VMs on the subnet already, then you can''t change to anything less
    than `/24`, as `/25` has only 128 addresses available.'
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to note is that you don't have the complete IP range available
    on your subnet; five IP addresses are reserved for Azure-provided network roles
    such as DNS or DHCP. Speaking of DHCP, having a custom DHCP solution in Azure
    is not supported, you have to use an Azure-provided DHCP. This is not the case
    with DNS; by default, you use the Azure DNS service, but can use a custom solution
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: To add a new subnet, you need to provide similar information to when you created
    the default one during VNet deployment, but you have a couple of additional options.
    Again, you need to provide a name for your subnet and IP address range that must
    use the existing IP address range of your VNet and must not overlap with other
    subnets on your VNet. Note that here you get information about the reservation
    of five IP addresses for Azure networking services. A similar VNet deployment
    is the service endpoint option, which allows you to add PaaS services to your
    subnet. You can assign a Network security group to the subnet level and assign
    Route table.
  prefs: []
  type: TYPE_NORMAL
- en: 'NSGs are your main tool to control traffic on Azure Vnets, and we''ll discuss
    them in more detail later. Azure routes traffic automatically between all subnets
    on the same VNet, but you can create custom route tables to override the default
    options. This can be useful in cases when you have VPN or virtual appliance (third-party
    firewalls in Azure). An example of adding a new subnet to VNet is shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d298e1e3-7721-4314-8571-c483c8cdcb11.png)'
  prefs: []
  type: TYPE_IMG
- en: The DNS blade allows us to add a custom DNS solution to our VNet. As mentioned
    before, this is Azure-provided by default but you can use your own DNS, either
    a VM with DNS or public DNS.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a Site2Site connection to your local network, this can be DNS for
    your local network. If this is the case, I would recommend using a replica of
    your DNS in Azure. This will make the response faster and DNS available on your
    Azure VNet in case the VPN connection or your local network is down for some reason.
    The option to provide custom DNS is shown in the following screenshot. You need
    to provide the IP address of the DNS server, the public IP in case you choose
    public DNS, or a private one if you deploy DNS on your VNet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11db6274-3098-461f-a78f-ae7648c290b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We had the option to add service endpoints to our VNet during deployment, but
    we can add them at any time using the service endpoint blade, shown in the following
    screenshot. As adding these services starts a provisioning process that will set
    up routing and rules, it can take up to 15 minutes for the process to complete.
    The service endpoint option is available on at the VNet and subnet levels, so
    you can enable endpoints either for a complete network or on a single subnet.
    Using a single subnet gives you more control and the ability to separate the PaaS
    service from rest of your virtual network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f2dc55d-584b-4138-8af4-b8334d5a5888.png)'
  prefs: []
  type: TYPE_IMG
- en: Peering allows you to connect your VNet to other VNets in order to exchange
    traffic. This is available only for VNets in a single Azure tenant (but available
    across subscriptions in that tenant). You need to give a name to the connection
    and then select the appropriate subscription and virtual network. You have some
    additional options to define if needed, like if you want traffic forwarding, allowing
    gateway transit, and use of remote gateways. By default, only traffic coming from
    one VNet will go to the second VNet. Traffic coming from outside VNets that are
    connected by peering (coming from a second peer, only one of the VNets is involved
    in or coming over gateways) will not be forwarded unless you specify these options.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s say we have three VNets: A, B, and C. A is connected to
    B, and C is connected to B, but there is no direct connection between A and C.
    By default, traffic would be allowed for A to B, from B to A, from B to C, and
    C to B. No traffic would go from A to C or from C to A. If we enable traffic forwarding,
    traffic from A to C and C to A would go through.'
  prefs: []
  type: TYPE_NORMAL
- en: A similar thing goes for virtual gateways. Let's say we have networks A and
    B and peering between these VNets. VNet A has a virtual gateway and is connected
    to our on-premises network. By default, traffic would be allowed from A to B,
    B to A, from the on-premises network to A and from A to on-premises network. No
    traffic would be allowed from on-premises network to B and from B to on-premises
    network, unless we allow this traffic using extra options that allow gateway transit
    and the use of remote gateways.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to achieve this is to create a virtual gateway for each VNet and
    create a Site2Site connection, the same one that you would use in case you wanted
    to connect to your on-premises network (we'll discuss this in the hybrid cloud
    chapter). The big difference between the two approaches is that peering is free
    and you pay for a virtual gateway. If you want to connect two VNets that are located
    on different tenants, you need to use a virtual gateway; peering is available
    only for VNets on the same tenant.
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect different networks, either VNet to VNet or VNet to local network,
    IP address spaces/subnets must not overlap. If you have the same subnet for both
    networks, you won''t be able to create this connection as this would create confusion
    and make routing impossible. It would be impossible to distinguish which device
    is on which network and where traffic should go. How to connect your VNet to another
    VNet in your subscription is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2088ad9-ccee-4943-9ef2-eff8063208b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Where we have multiple networks connected either by peering or Site2Site, it's
    recommended to use route tables. Custom route tables allow us to create and forward
    traffic in specific cases and define rules concerning where traffic should go
    in each situation.
  prefs: []
  type: TYPE_NORMAL
- en: Connected devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have our VNet configured and ready but we need resources in there to actually
    start using it. The first step is to add a new Azure virtual machine to our VNet
    in order to start using the Azure networking stack.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to create a new Azure virtual machine through the portal, we have
    to take three steps. We need to select New resource and select a new virtual machine.
    We have hundreds of images available and we''ll discuss that in chapters to come:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we need a single VM only, to show networking options for it,
    and we''ll set all default parameters in order to get there quickly. I selected
    the Windows Server 2016 image and started providing the basic information needed:
    Name, VM disk type, Username, Password, Subscription, Resource group, and Location.
    Note that under Location, you have the options to create a new resource group
    and select an existing one. I selected to Use existing, the same one where our
    VNet is located.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example of basic VM creation is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf139d58-0d9c-4b30-b836-db2501700914.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to choose virtual machine size. This again is not relevant to
    the networking part and I''ll select the first one offered, B1s, shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1f64034-7e9b-4d48-b4de-6f8c65ac585d.png)'
  prefs: []
  type: TYPE_IMG
- en: In the final step, we are getting to the part where we have some networking
    options. I'll leave all other options at their defaults and concentrate on the network
    part.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we need to choose the Virtual network our VM will be connected to. We
    can choose either an existing one or create a new VNet. If no VNet is found, new
    VNet parameters will be automatically provided. If there is already a virtual
    network in the resource group where we place our VM, that VNet will be automatically
    selected. In our case, the PacktVNet created in the first step is shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f671e0f2-5066-4a76-bf76-2549fc7b9385.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second option we have is to choose the Subnet for our VM. If we are creating
    a new VNet along with the VM, this option will not be available; only the default
    subnet will be created. To be able to choose between subnets, a virtual network
    needs to be created prior to the VM, along with the subnet you want to use. In
    this case, I''ll choose to join the VM to the DMZ subnet I created before. Selecting
    the Subnet option is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d913aedf-a375-4067-81ee-e0236077353b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We also have options to choose the Public IP address for our VM. We can choose
    from an existing one (a reserved IP address no longer in use) or create a new
    public IP address. Same goes for Network Security Groups: we can choose an existing
    one or create a new one. I''ll select to create a new Public IP address and a
    new Network Security Group for my VM, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/229c263d-ff92-4152-8419-1a8ff9261189.png)'
  prefs: []
  type: TYPE_IMG
- en: After this, the deployment of the VM starts and it takes a few minutes until
    the process is complete. The time required to deploy a new Azure virtual machine
    depends on the VM size, screenshot, and number of requests against the data center.
  prefs: []
  type: TYPE_NORMAL
- en: IP address types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the deployment of the VM is finished, we can see the device in Connected
    devices under the virtual network blade. An example of what the connected device
    blade looks like is shown in the following screenshot. Information shown here
    includes the device name, type of device connected, private IP address, and subnet
    the device is assigned to. IP address information is related to a private IP address,
    one that was assigned to our VM on the VNet level and is used only for internal
    traffic. Note that type of device is Network interface. Every VM has a **network
    interface card** (**NIC**) that is used to communicate with the network and one
    is automatically created with your VM. A virtual machine can have more than one
    NIC if you need to connect to multiple subnets or make sure that the VM is available,
    even when one NIC fails. The number of NICs depends on VM size, it can be from
    1 for basic tier VMs to 8 for higher tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a66337bd-c431-4e79-ab10-b5a1393cebb1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the device, it will take us to the NIC blade, as illustrated
    in the following screenshot. We can get to the same blade if we select NIC in
    the resource group. In IP configuration, we can enable or disable IP forwarding,
    change the Subnet that the NIC is connected to, and see the IP configurations
    for both private and public IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96bf93cf-2f4a-4831-b588-1af4e10be46e.png)'
  prefs: []
  type: TYPE_IMG
- en: Private IP addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we select IP configuration, we have further options for IP addresses. An
    example is show in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: By default, a public IP address is enabled but we can disable it if needed.
    This is often used when the VM is in the backend and now public exposure is needed.
    In this case, we need to make sure that we have other options to connect to this
    VM, usually through a VPN. Disabling a public IP address is often in hybrid cloud scenarios when
    no access over the internet is needed. Beside using the public IP address assigned,
    we can create a new one as well here.
  prefs: []
  type: TYPE_NORMAL
- en: 'A private IP address is by default dynamic and can change over time. A change
    of IP address will not happen out of thin air but in the case of a VM restart
    or shutdown. If we use a private IP address for communication with other VMs on
    our VNet, we may want to keep this address. This can be done by setting IP address
    assignment from Dynamic to Static. This will reserve our IP for this NIC even
    if the VM is kept turned off for a long period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5d12c21-7387-42f3-99bd-4db4f9bd028c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'DNS is another option that is available on both the Vnet and VM levels. We
    can assign Custom DNS that will apply only for this specific NIC. If we assign
    DNS to the VNet level, that DNS will be applied to all VMs connected to that VNet.
    The default option for NIC DNS is to inherit the setting from the virtual network.
    In this case, it will be either Azure DNS or custom DNS, depending on VNet settings.
    If we selected Custom DNS for VNet, we can no longer choose Azure DNS as an option
    on the NIC level. Our only option available is to use Inherit from virtual network
    or Custom DNS. The DNS blade on the NIC level is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e600ed88-1b4a-4e19-a026-a012e5aaedf0.png)'
  prefs: []
  type: TYPE_IMG
- en: Network security groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NSGs are a set of security rules applied on your Azure network resources. They
    are the main tool to enforce and control network traffic rules for your resources.
    NSGs can be applied to two types of resources: subnets and NICs. If an NSG is
    applied to a subnet, the rules will be applied to all devices that are connected
    to that subnet. When an NSG is applied to an NIC, the rules will be applied only
    for that device.'
  prefs: []
  type: TYPE_NORMAL
- en: In the overview of the NSG blade, we can see all the rules that are currently
    applied, both inbound and outbound. By default, all inbound traffic from outside
    is disabled, except port `3389`, which allows us to connect to the VM remotely.
    All inbound traffic coming from inside the virtual network or Azure load balancers
    is allowed. These rules can be edited and more added as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Outbound traffic is by default allowed on all levels, going to the virtual network
    or outside. These rules can be edited as well, but there is usually no need to
    restrict outbound traffic.
  prefs: []
  type: TYPE_NORMAL
- en: All rules have a priority assigned to them; a lower number represents a rule
    with a higher priority. For example, we have the RDP rule with priority `1000`
    and the `DenyAllInBound` rule (which will block all inbound traffic) with priority
    `65500`. Even though the `DenyAllInBound `rule to block all incoming traffic is
    enforced, the rule to allow RDP has a higher priority and will be enforced first.
    As a result, we have all inbound traffic blocked with the exception of RDP, which
    is allowed due to being a higher priority rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'NSG settings can be opened either through the NIC blade or by selecting NSG
    in the list of resources in the resource group. The overview of the NSG blade
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b141627-152f-4af7-9ee5-9d464fda092f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add a new rule, go to Inbound security rules and select Add new rule. You
    can choose basic or advanced. If you choose basic, only a few options will be
    available to choose from. I recommend using advanced, as this will give you more
    control over rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Source: For Source, you can select between several options. Any will allow traffic
    from any source. IP addresses will allow traffic only from named addresses; you
    can enter either a single IP or a range of IP addresses in the CIDR format. This
    can be very useful for restricting access over port `3389` and to secure your
    virtual machines. Service tag will allow traffic coming from a specific service.
    For example, using the Service tag option, you can allow traffic coming from Azure
    storage but block everything else.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last option for source is an **Application Security Group** (**ASG**). An
    ASG allows you to create rules and allow traffic only to a certain  group of resources
    on your network. For example, we have multiple servers in our VNet, web servers
    and database servers. Allowing traffic over port `1433 ` to database servers should
    be enabled for web servers but not over the internet. Placing web servers in an
    ASG and creating a rule would allow only web servers to access our databases over
    port `1433` and stop any other traffic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Source port ranges: With Source port ranges, we can also restrict traffic and
    allow it only if it's coming from a specific port or port range.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destination port ranges: The Destination port ranges option is similar to the source
    option; we have the same set of options available. An ASG is something that can
    be useful to allow traffic only to a certain type of VM on your network. For example,
    placing web servers in an ASG and allowing traffic over ports `443` or `80` would
    allow only these servers to be accessed over these ports and block traffic to
    any other type of VM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Destination port ranges allow us to specify over which ports traffic is
    allowed, restricting it to a single port or a range.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Protocol: It helps us define which protocols are allowed, choosing from either
    TCP or UDP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Action: It defines whether this rule is used to allow traffic or block it.
    An NSG can be used either way, it can help us define if certain traffic is allowed,
    but can be used to deny traffic as well and help us secure our resources in Azure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Priority: This option is very important as it allows us to define which rules
    are applied first and which rules have the advantage. As mentioned before, the
    lower the priority number assigned to the rule, the higher priority the rule has. The
    rules are processed in order, from the highest priority rule (the lowest number)
    to the lower priority rule (higher number) until the condition is met. Once the
    condition is met, the rule is processed, and the rule processing stops. For example,
    let''s create a rule that will block all traffic over port `1433` and give it
    priority `1000`, and then create a rule that will allow certain sources to have
    traffic over port `1433` with priority `2000`. No traffic over port `1433` will
    ever go through, as a rule with a higher priority is blocking this traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Name: The last options are to Name the rule and enter a Description. The Description
    is optional, but I encourage you to fill this in, as it will help you later to
    keep track and understand why something was created in the first place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example settings for advanced options in an NSG are shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/150a7fd7-3759-434d-a382-f6d849896d56.png)'
  prefs: []
  type: TYPE_IMG
- en: NSGs can be applied on two levels, to NICs and to subnets. If an NSG is applied
    to an NIC, the rules defined in that NSG will be enforced only for the virtual
    machine attached to that NIC. If an NSG is applied to a subnet, the rules will
    be enforced on all VMs on that subnet.
  prefs: []
  type: TYPE_NORMAL
- en: You can have an NSG applied both on a subnet and an NIC in some cases. Be careful
    with configuration in that case, as only traffic that is allowed on both levels
    will go through. If we have traffic over port `80` allowed on the subnet level
    but blocked on the NIC level, nothing will pass over port `80`. Same goes the other
    way around, if allowed on the NIC but blocked on the subnet, nothing will pass.
    If you want to block something on the VM that has NSG applied on both the subnet
    and NIC levels, it's enough to block traffic over the named port on one of the NSGs.
  prefs: []
  type: TYPE_NORMAL
- en: Using NSGs in combination with ASGs is the best possible way to protect and
    secure your resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a scenario where we have three groups of servers: web, application,
    and database.'
  prefs: []
  type: TYPE_NORMAL
- en: We need web servers to have a connection to application servers and application
    servers to have a connection to the database server. The only connection allowed
    over the internet would be to web servers and we don't want a connection over
    internet to database servers under any circumstances. The first step would be
    to create three Azure security groups, one ASG for each server role. The next
    step would be to configure NSG rules with the use of ASGs.
  prefs: []
  type: TYPE_NORMAL
- en: Connection over the internet would be allowed only to servers that are in the
    web ASG. Connection to application servers would be allowed only in the case that
    traffic is coming from servers placed in the web ASG. This would be achieved by
    setting a rule that would allow traffic to the application ASG from the web ASG,
    blocking everything else. Finally, we create a rule that allows traffic to database
    servers (the database ASG) only in cases when the traffic is coming from the application
    ASG.
  prefs: []
  type: TYPE_NORMAL
- en: This approach makes administration and maintenance easier and more consistent.
    If you are adding a server to any of the three pools, you need to set proper rules
    and all apply the settings needed. It's easy to make a misstep that would result
    in that server not having all the needed connections or, in the worst case, being
    a security issue. When using an NSG and ASG to keep track of all the rules, all
    we need to do is add a new server to the proper ASG and all the rules and settings
    will automatically apply.
  prefs: []
  type: TYPE_NORMAL
- en: Public IP address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Public IP address settings are available through NSG settings or by selecting
    Public IP address from the resources in the Resource group blade.
  prefs: []
  type: TYPE_NORMAL
- en: Settings for public IP addresses are similar to private IP addresses. By default,
    they are Dynamic, so the IP can change in the case of a restart or shutdown, but
    we can change this setting to Static. Static will keep the reservation of our
    IP but there is a difference between public and private IP addresses in this case.
    Private IP reservation is free of charge as this is an internal IP, so you can
    choose the range and even set an IP address from that range to be reserved for
    a specific VM. Public IP addresses are assigned and there isn't the option to
    choose which IP address you want. The other difference is that public IP address
    reservation is not free; the first five public IP address reservations are free
    per subscription, but every reservation over that number is charged. The price
    of a reservation over the initial five public IP addresses is not much (around
    $3 per month), but it's good to know what you're paying for.
  prefs: []
  type: TYPE_NORMAL
- en: 'A public IP address can be removed from your NIC if you want to restrict access
    (private IP addresses can''t be removed). If you choose to use a public IP address,
    you''ll probably need it either to connect to your VM remotely or to use it for
    applications. If you don''t want to create a reservation, there is another option,
    to use a DNS name label. This option will assign a DNS name to your NIC and you
    can use it to access your VM. Any change of public IP address, which may happen
    as result of a restart or shutdown of your VM, will be handled by Azure DNS. Options
    for public IP address configuration are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1ceee20-9179-4829-8e54-5052785a91fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Other Azure network services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Azure services that we have covered so far are just part of the Azure networking
    stack. The Azure networking stack doesn't stop here and there are many other Azure
    services that are network-related, such as traffic manager, load balancers, or
    virtual gateways. Some of them will be covered in chapters to come.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we'll discuss load balancers with virtual machine high availability.
    A similar case will be with traffic manager when we discuss high availability
    for PaaS. Virtual gateways will be our topic in the chapter about hybrid cloud
    with Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid scenarios and security can be managed with a virtual appliance. Virtual
    appliances are Azure virtual machines with third-party firewall software. Most
    leading industry firewalls are supported and available (such as Barracuda, CheckPoint,
    Cisco, and PaloAlto). Virtual machine images for virtual appliances are available
    through Azure marketplace, and you can easily configure and set up a virtual appliance
    and use it to manage and secure your Azure network.
  prefs: []
  type: TYPE_NORMAL
- en: However, Microsoft Azure is evolving daily and more services are becoming available.
    It would be impossible to cover all services and features. Each chapter in this
    book is potentially a standalone book.
  prefs: []
  type: TYPE_NORMAL
- en: ARM templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already talked about ARM templates and how they can help us automate things.
    For this chapter, I created a virtual network and joined one virtual machine to
    that network.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you move to automation, you can find an ARM template in JSON format that
    you can use to redeploy my resources. The ARM template will contain all the resources
    and all the settings: a virtual network and parameters, a virtual machine with
    information about the image and size, NSG rules, and so on. It will contain information
    on all dependencies and information on what needs to be created first. For example,
    in order to create a VM, a subnet needs to be created in order to join the VM
    to that subnet, and a subnet can''t be created until a VNet is created.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that some `parameters`, such as passwords, are not provided as a password
    isn''t allowed to be shown in clear text, but only as a secure string, so you
    need to provide these `parameters` manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This can be particularly helpful once we have multiple resources deployed in
    our resource  group. Using these templates, we can provision identical environments automatically,
    quickly, and with precision. Redeploying a resource group to recreate an environment
    by hand can lead to inconsistencies and missing steps. Using ARM templates produces
    the same result each and every time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered the basic features of Azure networking with virtual networks, IP
    address types, and NSGs. This basic knowledge of Azure networking will be the foundation
    for chapters to come.
  prefs: []
  type: TYPE_NORMAL
- en: It's also very important to understand ARM templates, as they will be very helpful
    once our infrastructure becomes more complex.
  prefs: []
  type: TYPE_NORMAL
- en: From here, we'll advance to Azure IaaS, which will use Azure networking as the backbone
    and the service that holds everything together. We'll see how to create advanced
    VM scenarios that will use Azure networking, private for communication between
    VMs and public for external access. We'll explain in more detail options for creating
    new Azure virtual machines, availability groups, and high-availability for IaaS
    in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which services are depended on the Azure network in Microsoft Azure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What defines the IP address range in Azure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Subnet mask
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CIDR
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: RIP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Service endpoints are used to connect which services to your virtual network?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Virtual machines
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SaaS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The default DNS service in Microsoft Azure is...?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure DNS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Public DNS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Custom DNS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When can service endpoints be added?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When creating a virtual network
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: After a virtual network is created
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: At any time
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Private IP addresses in Azure can be...?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamic
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Static
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Public IP addresses in Azure can be...?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamic
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Static
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NSGs are...?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security rules that define traffic flow
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rules on IP address reservations
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What does an NSG define?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Outbound traffic rules
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Inbound traffic rules
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To what can an NSG not be assigned to?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Virtual network
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NIC
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Subnet
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
