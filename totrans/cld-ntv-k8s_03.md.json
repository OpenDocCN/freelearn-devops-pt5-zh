["```\n     curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 \\\n&& sudo install minikube-darwin-amd64 /usr/local/bin/minikube\n```", "```\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \\\n&& sudo install minikube-linux-amd64 /usr/local/bin/minikube\n```", "```\neksctl create cluster \\\n--name prod \\\n--version 1.17 \\\n--nodegroup-name standard-workers \\\n--node-type t2.small \\\n--nodes 3 \\\n--nodes-min 1 \\\n--nodes-max 4 \\\n--node-ami auto\n```", "```\nkubectl get nodes\n```", "```\ngcloud config set project proj_id\ngcloud config set compute/zone compute_zone\n```", "```\ngcloud container clusters create dev \\\n    --zone [compute_zone]\n```", "```\ngcloud container clusters create dev \\\n    --zone [compute_zone_1]\n    --node-locations [compute_zone_1],[compute_zone_2],[etc]\n```", "```\ngcloud container clusters create dev \\\n    --region [region] \\\n    --node-locations [compute_zone_1],[compute_zone_2],[etc]\n```", "```\ngcloud container clusters get-credentials [cluster_name]\n```", "```\nkubectl get nodes\n```", "```\naz ad sp create-for-rbac --skip-assignment --name myClusterPrincipal\n```", "```\n{\n  \"appId\": \"559513bd-0d99-4c1a-87cd-851a26afgf88\",\n  \"displayName\": \"myClusterPrincipal\",\n  \"name\": \"http://myClusterPrincipal\",\n  \"password\": \"e763725a-5eee-892o-a466-dc88d980f415\",\n  \"tenant\": \"72f988bf-90jj-41af-91ab-2d7cd011db48\"\n}\n```", "```\naz aks create \\\n    --resource-group devResourceGroup \\\n    --name myCluster \\\n    --node-count 2 \\\n    --service-principal <appId> \\\n    --client-secret <password> \\\n    --generate-ssh-keys\n```", "```\naz aks get-credentials --resource-group devResourceGroup --name myCluster\n```", "```\nkubeadm init\n```", "```\nkubeadm join --token [TOKEN] [IP ON MASTER]:[PORT ON MASTER] --discovery-token-ca-cert-hash sha256:[HASH VALUE]\n```", "```\nscp root@[IP OF MASTER]:/etc/kubernetes/admin.conf .\nkubectl --kubeconfig ./admin.conf get nodes \n```", "```\nbrew update && brew install kops\n```", "```\ncurl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '\"' -f 4)/kops-linux-amd64\nchmod +x kops-linux-amd64\nsudo mv kops-linux-amd64 /usr/local/bin/kops\n```", "```\naws iam create-group --group-name kops_users\n```", "```\naws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops\naws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops\naws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops\naws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops\naws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name kops\n```", "```\naws iam create-user --user-name kops\naws iam add-user-to-group --user-name kops --group-name kops_users\naws iam create-access-key --user-name kops\n```", "```\naws configure\nexport AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)\nexport AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)\n```", "```\naws s3api create-bucket \\\n    --bucket my-domain-dev-state-store \\\n    --region us-east-1\n```", "```\naws s3api put-bucket-versioning --bucket prefix-example-com-state-store  --versioning-configuration Status=Enabled\naws s3api put-bucket-encryption --bucket prefix-example-com-state-store --server-side-encryption-configuration '{\"Rules\":[{\"ApplyServerSideEncryptionByDefault\":{\"SSEAlgorithm\":\"AES256\"}}]}'\n```", "```\nexport NAME=devcluster.k8s.local\nexport KOPS_STATE_STORE=s3://my-domain-dev-cluster-state-store\n```", "```\nkops create cluster \\\n    --node-count 3 \\\n    --zones us-east-1a,us-east-1b,us-east-1c \\\n    --master-zones us-east-1a,us-east-1b,us-east-1c \\\n    --node-size t2.medium \\\n    --master-size t2.medium \\\n    ${NAME}\n```", "```\nkops edit cluster ${NAME}\n```", "```\nkops update cluster ${NAME} --yes\n```", "```\n[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n[Service]\nType=notify\nExecStart=/usr/local/bin/etcd \\\\\n  --name ${ETCD_NAME} \\\\\n  --cert-file=/etc/etcd/kubernetes.pem \\\\\n  --key-file=/etc/etcd/kubernetes-key.pem \\\\\n  --peer-cert-file=/etc/etcd/kubernetes.pem \\\\\n  --peer-key-file=/etc/etcd/kubernetes-key.pem \\\\\n  --trusted-ca-file=/etc/etcd/ca.pem \\\\\n  --peer-trusted-ca-file=/etc/etcd/ca.pem \\\\\n  --peer-client-cert-auth \\\\\n  --initial-cluster-state new \\\\\n  --data-dir=/var/lib/etcd\nRestart=on-failure\nRestartSec=5\n[Install]\nWantedBy=multi-user.target\n```", "```\n{\n  sudo systemctl daemon-reload\n  sudo systemctl enable etcd\n  sudo systemctl start etcd\n}\n```", "```\n[Unit]\nDescription=Kubernetes API Server\nDocumentation=https://github.com/kubernetes/kubernetes\n```", "```\n[Service]\nExecStart=/usr/local/bin/kube-apiserver \\\\\n  --advertise-address=${INTERNAL_IP} \\\\\n  --allow-privileged=true \\\\\n  --apiserver-count=3 \\\\\n  --audit-log-maxage=30 \\\\\n  --audit-log-maxbackup=3 \\\\\n  --audit-log-maxsize=100 \\\\\n  --audit-log-path=/var/log/audit.log \\\\\n  --authorization-mode=Node,RBAC \\\\\n  --bind-address=0.0.0.0 \\\\\n  --client-ca-file=/var/lib/kubernetes/ca.pem \\\\\n  --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\\\\n  --etcd-cafile=/var/lib/kubernetes/ca.pem \\\\\n  --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\\\\n  --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\\\\n  --etcd-\n  --service-account-key-file=/var/lib/kubernetes/service-account.pem \\\\\n  --service-cluster-ip-range=10.10.0.0/24 \\\\\n  --service-node-port-range=30000-32767 \\\\\n  --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \\\\\n  --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \\\\\n  --v=2\n```", "```\nRestart=on-failure\nRestartSec=5\n [Install]\nWantedBy=multi-user.target\n```", "```\n{\n  sudo systemctl daemon-reload\n  sudo systemctl enable kube-apiserver kube-controller-manager kube-scheduler\n  sudo systemctl start kube-apiserver kube-controller-manager kube-scheduler\n}\n```", "```\n[Unit]\nDescription=Kubernetes Kubelet\nDocumentation=https://github.com/kubernetes/kubernetes\nAfter=containerd.service\nRequires=containerd.service\n[Service]\nExecStart=/usr/local/bin/kubelet \\\\\n  --config=/var/lib/kubelet/kubelet-config.yaml \\\\\n  --container-runtime=remote \\\\\n  --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\\\\n  --image-pull-progress-deadline=2m \\\\\n  --kubeconfig=/var/lib/kubelet/kubeconfig \\\\\n  --network-plugin=cni \\\\\n  --register-node=true \\\\\n  --v=2\nRestart=on-failure\nRestartSec=5\n[Install]\nWantedBy=multi-user.target\n```"]