- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before moving on to writing and executing more advanced playbooks, we will look
    at the rest of the built-in Ansible commands. Here, we will cover using the commands
    that make up Ansible. Toward the end of this chapter, we will install a third-party
    tool to visualize our host inventory.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Inbuilt commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inbuilt commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we installed Ansible, several different commands were installed. These
    were as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-config`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-console`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-doc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-galaxy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-inventory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-playbook`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-pull`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-vault`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We already covered the `ansible-galaxy` command in [*Chapter 2*](B21620_02.xhtml#_idTextAnchor080),
    *Exploring Ansible Galaxy*. We will be looking at `ansible-playbook` throughout
    the remaining chapters of this book, so I will not go into any detail about that
    command in this chapter. Let’s start at the top of the list and a command we have
    already used.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, you would have thought that `ansible` would be the most common command
    we will use throughout this book, but it isn’t.
  prefs: []
  type: TYPE_NORMAL
- en: The `ansible` command is only ever used for executing ad hoc commands against
    a single host or collection of hosts. In [*Chapter 1*](B21620_01.xhtml#_idTextAnchor017),
    *Installing and Running Ansible*, we created a host inventory file that targeted
    a single local virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this part of the chapter, we’ll look at targeting four different hosts
    I have running in a cloud provider; my host’s file looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, I have four hosts – `ansible01` > `ansible04`. My first two
    hosts are in a group called `london` and my second two are in a group called `nyc`.
    I have then taken these two groups and created one containing them called `demohosts`,
    and I used this group to apply some basic configurations based on the hosts I
    have launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `ping` module, I can check connectivity to the hosts by running the
    following commands. First, let’s check the two hosts in `london`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Doing an Ansible ping targeting the london hosts](img/B21620_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Doing an Ansible ping targeting the london hosts
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s run the same command, but this time targeting the `nyc` hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 3.2\uFEFF – Doing an Ansible ping targeting the nyc hosts](img/B21620_03_2.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Doing an Ansible ping targeting the nyc hosts
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, all four of my hosts returned `pong`.
  prefs: []
  type: TYPE_NORMAL
- en: 'I can also target all four hosts at once by adding `all` rather than a particular
    group of hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we can access our host through Ansible, we can target them and run
    some ad hoc commands; let’s start with something basic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will connect to the `london` hosts and run the `ping -c 3 google.com`
    command; this will `ping` the [google.com](http://google.com) domain from the
    hosts and return the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Running the ping command against google.com](img/B21620_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Running the ping command against google.com
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also run a single module using the `ansible` command; we did this in
    [*Chapter 1*](B21620_01.xhtml#_idTextAnchor017), *Installing and Running Ansible*,
    using the `setup` module. However, a better example would be updating all the
    installed packages across all the hosts by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have taken the `ansible.builtin.apt` module, which we defined
    as follows in [*Chapter 1*](B21620_01.xhtml#_idTextAnchor017), *Installing and*
    *Running Ansible*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'I’ve passed in the same options, but rather than use YAML, I have formatted
    it as a key and value, which is typical of what you would pass into any command
    on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Using the ansible.builtin.apt module to update all the packages](img/B21620_03_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Using the ansible.builtin.apt module to update all the packages
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the output when running Ansible is quite verbose, and it provides
    feedback to tell us precisely what it did during the ad hoc execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s rerun the command against all our hosts, but this time just for a single
    package, say `ntp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the command once will install the package on all four of our hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Using the ansible.builtin.apt module to install the ntp package](img/B21620_03_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Using the ansible.builtin.apt module to install the ntp package
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s rerun the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the command once will install the package on all four of our hosts
    and give us the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Rerunning the ansible.builtin.apt module to install the ntp
    package](img/B21620_03_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Rerunning the ansible.builtin.apt module to install the ntp package
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the hosts are returning a `SUCCESS` status and are showing no
    changes, which is what we would expect to see.
  prefs: []
  type: TYPE_NORMAL
- en: So, why would you want to do this, and what is the difference between the two
    commands we ran?
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s take a look at two of the commands we initially ran once we confirmed
    our hosts were available using an Ansible `ping`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: While it appears that the first command isn’t running a module, it is. The default
    module for the `ansible` command is called `raw` and runs raw commands on each
    of the targeted hosts. The `-a` part of the command passes arguments to the module.
    The raw module happens to accept raw commands, which is precisely what we are
    doing with the second command.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, you will have noticed that the syntax is slightly different
    when we pass commands to the `ansible` command and when using it as part of a
    YAML playbook. All we are doing here is passing the key-value pairs directly to
    the module.
  prefs: []
  type: TYPE_NORMAL
- en: So, why would you want to use Ansible like this? Well, it’s excellent for running
    commands directly against non-Ansible managed hosts in an extremely controlled
    way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible uses SSH to connect to the hosts, runs the command, and lets you know
    the results. Just be careful – it is easy to get overconfident and run something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user Ansible is using to connect to the host has permission to execute
    the command, it will just run the command you give it. Running the previous command
    will reboot all the servers in the host inventory file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Rebooting all four of the hosts with a single command](img/B21620_03_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Rebooting all four of the hosts with a single command
  prefs: []
  type: TYPE_NORMAL
- en: 'All hosts have an `UNREACHABLE` status because the `reboot` command kicked
    our SSH session before the `SUCCESS` status could be returned. You can, however,
    see that each of the hosts has been rebooted by running the `uptime` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Checking the uptime of the four hosts](img/B21620_03_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Checking the uptime of the four hosts
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, plus speaking from experience (it’s a long story),
    please be extremely careful when using Ansible to manage hosts using ad hoc commands
    – it’s a powerful but dumb tool, and it will assume you know the consequences
    of running the commands against your hosts.
  prefs: []
  type: TYPE_NORMAL
- en: That concludes our look at the `ansible` command; let’s move on to our next
    command, `ansible-config`.
  prefs: []
  type: TYPE_NORMAL
- en: The ansible-config command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ansible-config` command is used to manage Ansible configuration files.
    Ansible ships with sensible defaults, so there is little to configure outside
    of these. You can view the current configuration by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown from the following output, all the text in green is the default config,
    and any configuration in orange is a changed value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Dumping our complete Ansible configuration to screen](img/B21620_03_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Dumping our complete Ansible configuration to screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the following command will list details of every configuration option
    there is within Ansible, including what the option does, its current state, when
    it was introduced, the type, and much more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Viewing details on an Ansible configuration option](img/B21620_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Viewing details on an Ansible configuration option
  prefs: []
  type: TYPE_NORMAL
- en: 'If you had a configuration file, say at `~/.ansible.cfg`, then you can load
    it using the `-c` or–`-config` flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will give you an overview of the custom configuration file
    and display the Ansible default values not defined in your custom configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The ansible-console command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ansible has a built-in console. It is not something I have used much in my
    day-to-day running of Ansible. To start the console, we need to run one of the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The first of the three commands targets all of the hosts, while the next two
    just target the named groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Establishing the console connection](img/B21620_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Establishing the console connection
  prefs: []
  type: TYPE_NORMAL
- en: 'Once connected, you will see that I am connected to the `london` group of hosts,
    in which there are two hosts. From here, you can type a module name, such as `ping`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Running ping from Ansible](img/B21620_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Running ping from Ansible
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can use the `raw` module; for example, you can check the
    `uptime` command by typing `ansible.builtin.raw uptime`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Using the raw module to run the uptime command](img/B21620_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Using the raw module to run the uptime command
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the same syntax as we did when running the `ansible` command
    to pass key-value pairs – for example, running the following at the console prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'It should give you something like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Checking that the ntp package is installed using the ansible.builtin.apt
    module](img/B21620_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Checking that the ntp package is installed using the ansible.builtin.apt
    module
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that the syntax of the command we are running this time
    is slightly different from when we ran the same module using the `ansible` command
    earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'That command was as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Whereas this time, we just ran the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The reason for this is that when we called the module using the `ansible` command,
    we were working on the command line of our local machine, so we needed to pass
    in the module name using the `-m` flag and then define the attributes by using
    the `-a` flag. After, we had to pass in our key-value pairs within quotation marks
    so as not to break the flow of the command as spaces are used as a delimiter when
    it comes to the command line.
  prefs: []
  type: TYPE_NORMAL
- en: When we ran the Ansible console, we had effectively already run the `ansible
    -i hosts london` part of the command, left our local command line altogether,
    and were interacting with Ansible itself directly.
  prefs: []
  type: TYPE_NORMAL
- en: To leave the console, type `exit` to return to your regular command-line shell.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned at the start of this section, the `ansible-console` command is
    something I do not use – mainly for the warning I gave when we looked at the `ansible`
    command at the start of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: When connecting to several hosts using the `ansible-console` command, you must
    be 100% confident that the commands you are typing are correct. For example, while
    I was only connected to two hosts, my `hosts` file could have contained 200 hosts.
    Now, imagine I typed the wrong command – executing it across 200 hosts at once
    could potentially do some unwanted things, such as rebooting them all simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: To quit the `ansible-console` session, simply type `exit` and hit *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: As you have probably guessed, this happened to me. It wasn’t 200 hosts, but
    it could have easily been – *so please* *be careful.*
  prefs: []
  type: TYPE_NORMAL
- en: The ansible-inventory command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the `ansible-inventory` command provides you with details of your host
    inventory files. It can be helpful to understand how your hosts are grouped. For
    example, let’s say I run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same folder as the `hosts` inventory file that I have been using throughout
    this section, the following is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Getting an overview of the inventory hosts file](img/B21620_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Getting an overview of the inventory hosts file
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it displays the groups, starting with `all`, then the main host
    group (`demohosts`), then the child groups (`london` and `nyc`), and finally the
    hosts themselves (`ansible01` > `ansible04`).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to view the configuration for a single host, you can use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Viewing a single host](img/B21620_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – Viewing a single host
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that it displays the configuration information that the
    host inherited from the configuration we set for all the hosts in the `demohost`
    host group in the inventory file. You can view all the information on each of
    your hosts and groups by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This command is helpful if you have a large or complicated host inventory file
    and want information on just a single host or if you have taken on a host inventory
    and want a better idea of how the inventory is structured. We will look at a third-party
    tool later in this chapter that gives more display options.
  prefs: []
  type: TYPE_NORMAL
- en: What is ansible-pull?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like the `ansible-console` command, `ansible-pull` is not a command I use very
    often; I can count on one hand how often I have used it in the past several years.
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible-pull` is a command that allows a target machine to pull its configuration
    from a given source, such as a Git repository, and apply it locally. This reverses
    the typical Ansible push model, where a central control node pushes configuration
    to managed nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ansible-pull` command works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The target machine, the one running `ansible-pull`, fetches a specified repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the repository has been fetched, the target machine looks for a playbook.
    By default, it looks for one called `localhost.yml`, but you can specify a different
    playbook file if you need to – please note that this is not included in the example
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The target machine then runs the playbook against itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are a few use cases for `ansible-pull`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible-pull` allows nodes to self-configure by pulling their configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-pull` can be scheduled to run at specific intervals via a cron job,
    ensuring that hosts can self-update when they have connectivity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-pull` to pull down and apply configurations to their local development
    environments, ensuring consistency with production configurations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a few prerequisites to running `ansible-pull` – the most prominent
    being that the host running `ansible-pull` must have an active and valid Ansible
    installation and any other dependencies needed to execute the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, `ansible-pull` provides a way to invert the traditional Ansible
    model, allowing hosts to pull their configurations as needed rather than having
    a central host push the configurations to them, as we did in [*Chapter 1*](B21620_01.xhtml#_idTextAnchor017),
    *Installing and Running Ansible*, and [*Chapter 2*](B21620_02.xhtml#_idTextAnchor080),
    *Exploring Ansible Galaxy*. For the remainder of this book, we will be taking
    the more traditional approach to Ansible deployments and pushing our configuration
    to our target hosts.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is always good to know that if, for whatever reason, you are not
    able to take this approach, then you do have an alternative option in `ansible-pull`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ansible-vault command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Ansible, it is possible to load variables from files or within a playbook
    itself; we will look at this in the next chapter in more detail. These files can
    contain sensitive information such as passwords and API keys. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have two sensitive bits of information visible as plaintext.
    This is OK while the file is on our local machine – well, just about OK. But what
    if we want to check the file into source control to share it with our colleagues?
  prefs: []
  type: TYPE_NORMAL
- en: '*We shouldn’t store this information in plaintext, even if the repository*
    *is private.*'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible introduced Ansible Vault to help solve this very problem. Using the
    `ansible-vault` command, we can encrypt a file or just variables, and then when
    Ansible is executed, it can be decrypted in memory, and the content can be read
    as part of the execution.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For the rest of the chapter, I will set a Vault password of `password`, should
    you wish to run the `ansible-vault` command against the files in the `Chapter03/vault`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'To encrypt a file, we need to run the following command, providing a password
    that will be used to decrypt the file when prompted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Using ansible-vault to encrypt an entire file](img/B21620_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Using ansible-vault to encrypt an entire file
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the output, you will be asked to confirm the password.
    Once encrypted, your file will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the details are encoded using text. This ensures that our `secrets.yml`
    file will still work without problems when it’s checked into source control such
    as Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the content of a file by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This will ask you for the password and print the content of the file to the
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Using ansible-vault to encrypt an entire file](img/B21620_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – Using ansible-vault to encrypt an entire file
  prefs: []
  type: TYPE_NORMAL
- en: 'You can decrypt the file on disk by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This will restore the file to its unencrypted original state.
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: When using the `ansible-vault decrypt` command, please do not commit or check
    the decrypted file into your source control system!
  prefs: []
  type: TYPE_NORMAL
- en: 'Since early in the release of Ansible 2, encrypting a single variable in a
    file is now possible. Let’s add some more variables to our file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: It would be good if we didn’t have to keep viewing or decrypting our file to
    check its variable name and overall content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s encrypt the password content by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This will encrypt the `mypassword` string and give it a variable name of `password`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Using ansible-vault to encrypt a single string](img/B21620_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – Using ansible-vault to encrypt a single string
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then copy and paste the output into our file and repeat this process
    for `secretapikey`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: With that, we have generated two secret variables and replaced the unencrypted
    ones in our variables file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For ease of reading, I have truncated the output a little – the entire file
    can be found in the `Chapter03/vault` folder in this book’s GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our variables file should end up looking something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, that is much easier to read and is just as secure as encrypting
    the file.
  prefs: []
  type: TYPE_NORMAL
- en: So far, so good, but how do you use Ansible Vault encrypted data in an Ansible
    playbook?
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we look at how to do this, let’s see what happens when you don’t tell
    the `ansible-playbook` command you are using Ansible Vault by running the following
    playbook. As you can see, it is loading in the `myvars.yml` file and then printing
    the contents of our variables to the screen using the `ansible.builtin.debug`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run the playbook using the following command; note that since it’s just
    running locally, we are not passing an inventory file. This is something it will
    give you a warning about:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in an error message being shown in the Terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Getting an error when running the ansible-playbook command](img/B21620_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Getting an error when running the ansible-playbook command
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it’s complaining that it found Vault-encrypted data in one of
    the files, but we haven’t provided the secret to unlock it.
  prefs: []
  type: TYPE_NORMAL
- en: The first way we can pass the Vault password during the `ansible-playbook` run
    is to put the password in a text file and have the `ansible-playbook` command
    read the file’s contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned at the start of this section, I have been encoding my Vaults using
    a password of `password`. Let’s put that in a file and then use it to unlock our
    Vault:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the following command will read the content of `/tmp/vault-file` and
    decrypt the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following playbook run, the output is now as we expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Running ansible-playbook and passing the Vault password in
    via a file](img/B21620_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – Running ansible-playbook and passing the Vault password in via
    a file
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to be prompted for the password, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output shows the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Running ansible-playbook and entering the password via a prompt](img/B21620_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – Running ansible-playbook and entering the password via a prompt
  prefs: []
  type: TYPE_NORMAL
- en: You might be asking yourself, why are there two different options? When prompted,
    just running the command and entering the password might seem enough.
  prefs: []
  type: TYPE_NORMAL
- en: However, when it comes to using services such as the ones we will cover in [*Chapter
    15*](B21620_15.xhtml#_idTextAnchor641), *Using Ansible with GitHub Actions and
    Azure DevOps*, the commands need to run utterly unattended as there will not be
    an active terminal for you to enter the password.
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage that will be looked at in both [*Chapter 15*](B21620_15.xhtml#_idTextAnchor641),
    *Using Ansible with GitHub Actions and Azure DevOps*, and [*Chapter 16*](B21620_16.xhtml#_idTextAnchor716),
    *Introducing Ansible AWX and Red Hat Ansible Automation Platform*, is that by
    abstracting away the need for an end user to enter credentials at runtime, it
    is entirely possible for someone to run a pipeline and never need to know or have
    access to any of the secrets stored in your playbooks or the credentials to unlock
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we finish looking at the various Ansible commands, let’s look at a command
    that isn’t shipped as part of Ansible itself but is, in fact, a third-party open
    source project.
  prefs: []
  type: TYPE_NORMAL
- en: The ansible-inventory-grapher command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ansible-inventory-grapher` command, by Will Thames, uses the Graphviz
    library to visualize your host inventories. The first thing we need to do is install
    Graphviz. To install this on macOS using Homebrew, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Graphviz on Ubuntu, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, you can install `ansible-inventory-grapher` using `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have everything installed, we can generate the graph using the
    `hosts` file we used earlier in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate something that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – Running ansible-inventory-grapher against our hosts file](img/B21620_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.23 – Running ansible-inventory-grapher against our hosts file
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the raw output of the graph. As you can see, it is like and uses some
    of the same syntax as HTML. We can render this using the `dot` command, which
    ships as part of Graphviz. The `dot` command creates hierarchical drawings from
    graphs. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate a PNG file called `hosts.png` that contains the visualization
    of the host inventory file you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24 – The output of passing our ansible-inventory-grapher output
    through Graphviz](img/B21620_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.24 – The output of passing our ansible-inventory-grapher output through
    Graphviz
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this is an excellent representation of the hosts being targeted
    by Ansible; it works great for inclusion in your documentation but also gives
    you an idea of how a complicated inventory file is structured.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we briefly looked at some of the supporting tools that ship
    as part of a standard Ansible installation and a useful third-party tool designed
    to work with Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: We will use these commands and the one we have purposely missed, `ansible-playbook`,
    in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will write a more complex playbook that installs a basic
    LAMP stack on our local virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the documentation for each of the tools covered in this chapter
    at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible command-line tools overview: [https://docs.ansible.com/ansible/latest/command_guide/command_line_tools.html](https://docs.ansible.com/ansible/latest/command_guide/command_line_tools.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible`: [https://docs.ansible.com/ansible/latest/cli/ansible.html](https://docs.ansible.com/ansible/latest/cli/ansible.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-config`: [https://docs.ansible.com/ansible/latest/cli/ansible-config.html](https://docs.ansible.com/ansible/latest/cli/ansible-config.html
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-console`: [https://docs.ansible.com/ansible/latest/cli/ansible-console.html](https://docs.ansible.com/ansible/latest/cli/ansible-console.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-doc`: [https://docs.ansible.com/ansible/latest/cli/ansible-doc.html](https://docs.ansible.com/ansible/latest/cli/ansible-doc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-inventory`: [https://docs.ansible.com/ansible/latest/cli/ansible-inventory.html](https://docs.ansible.com/ansible/latest/cli/ansible-inventory.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-playbook`: [https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html](https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-pull`: [https://docs.ansible.com/ansible/latest/cli/ansible-pull.html](https://docs.ansible.com/ansible/latest/cli/ansible-pull.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-vault`: [https://docs.ansible.com/ansible/latest/cli/ansible-vault.html](https://docs.ansible.com/ansible/latest/cli/ansible-vault.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-inventory-grapher`: [https://github.com/willthames/ansible-inventory-grapher](https://github.com/willthames/ansible-inventory-grapher)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 2: Deploying Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you understand Ansible’s basics, it’s time to put that knowledge into
    practice. In this part, we will focus on deploying applications using Ansible
    playbooks. From setting up a LAMP stack to deploying WordPress and targeting multiple
    distributions, you will gain hands-on experience automating application deployments.
    We will also explore how Ansible can manage Windows-based servers, expanding your
    automation capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21620_04.xhtml#_idTextAnchor202), *Deploying a LAMP Stack*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21620_05.xhtml#_idTextAnchor253), *Deploying WordPress*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21620_06.xhtml#_idTextAnchor291), *Targeting Multiple Distributions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21620_07.xhtml#_idTextAnchor336), *Ansible Windows Modules*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
