- en: Configuring TeamCity for CI/CD with Xamarin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 TeamCity 进行 CI/CD 与 Xamarin
- en: In the old days, application development used to happen in separate, not-so-integrated
    teams. Developers were not used to merging their work with other developers' code
    for quite a long time, and that used to create merge issues. Things that were
    working on the developer's local copy used to stop working when merged with others'
    code. This kind of *not-so-integrated development* environment increased the development
    time and delayed the discovery of issues. One solution for this is to have continuous
    integration built into the development cycle, where developers merge their code
    multiple times a day and get issues fixed at earlier stages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，应用程序开发通常是在分离的、不太集成的团队中进行的。开发人员不习惯将自己的代码与其他开发人员的代码合并，并且这种情况往往会导致合并问题。开发人员本地副本上正常工作的内容在与其他人代码合并时常常会停止工作。这种*不太集成的开发*环境增加了开发时间，并延迟了问题的发现。解决这一问题的一种方法是将持续集成纳入开发周期，开发人员每天多次合并代码，并在更早阶段解决问题。
- en: In this chapter, we will learn more about continuous integration, continuous
    delivery, and the different tools that we can use for a better development integration
    and delivery process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入了解持续集成、持续交付，以及我们可以用来改善开发集成和交付流程的各种工具。
- en: 'In this chapter, we''ll be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Introduction to continuous integration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成简介
- en: Various tools for continuous integration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成的各种工具
- en: Using TeamCity with Xamarin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TeamCity 与 Xamarin
- en: Preparing a build server for TeamCity and installing TeamCity
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 TeamCity 准备构建服务器并安装 TeamCity
- en: Creating a build script
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建构建脚本
- en: Creating a TeamCity project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 TeamCity 项目
- en: Introduction to continuous integration
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成简介
- en: '**Continuous Integration** (**CI**) is a development and integration practice
    in which developers check code into a shared repository frequently, preferably
    several times a day. Each code merge can then be verified by an automated build
    and automated tests if applicable.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是一种开发和集成实践，开发人员频繁地将代码提交到共享代码库中，最好是一天提交几次。每次代码合并后，可以通过自动构建和自动化测试（如果适用）进行验证。'
- en: There are many benefits to following continuous integration; one of the advantages
    is that it helps detect defects quickly and at an early stage. The check-ins are
    usually very small and contain small developments, thus helping to identify the
    exact issues quickly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循持续集成有许多好处，其中一个优势是帮助快速发现缺陷并尽早解决。提交的代码通常非常小，包含的是小规模的开发，因此能够迅速定位具体问题。
- en: '**Continuous Delivery** (**CD**), on the other hand, is a process performed
    after integration, and as the name suggests, it makes sure that the code base
    checked in is deployable at any point of time. Each environment from test to production
    can, and mostly does, have different configurations. Continuous delivery makes
    sure that all configurations are always ready for deployment to any environment,
    and that the code passes all the tests necessary for release.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）是集成后的一个过程，顾名思义，它确保已提交的代码库在任何时候都可以进行部署。从测试环境到生产环境的每个环境可能有不同的配置。持续交付确保所有配置始终准备好进行部署，并且代码通过发布所需的所有测试。'
- en: In short, continuous integration improves the development and testing experience
    with frequent code merges, helps quickly identify bugs, and involves running automated
    tests if included in the process. Continuous delivery makes sure the codebase
    is in a ready state for the code to be deployed in any environment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，持续集成通过频繁的代码合并改善了开发和测试体验，帮助快速发现错误，并在流程中包含自动化测试时运行自动化测试。持续交付确保代码库始终处于可随时部署的状态，适用于任何环境。
- en: CI/CD for a web application
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 应用程序的 CI/CD
- en: '![](img/e45d2f34-6d0e-48ac-9b51-11dc044cef30.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e45d2f34-6d0e-48ac-9b51-11dc044cef30.png)'
- en: For a web application, once the build is ready from the CI server, it is not
    a big task to test the application on different browsers since there are only
    a limited number of them. But in a mobile application, there is one more step
    involved to improve the experience, since there are thousands of devices with
    different versions of operating systems available.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Web 应用程序，一旦从 CI 服务器准备好构建，测试应用程序在不同浏览器上的表现并不是一项艰巨的任务，因为浏览器数量有限。但对于移动应用程序，需要更多的一步来改善体验，因为市面上有成千上万的设备，且操作系统版本各异。
- en: CI/CD for a mobile application
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用程序的 CI/CD
- en: '![](img/87519c1b-ca69-4533-af52-bc6727732fac.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87519c1b-ca69-4533-af52-bc6727732fac.png)'
- en: As shown in the preceding diagram, mobile applications need to be tested on
    hundreds of devices with different operating systems, and purchasing all these
    mobile devices, which keep on coming out on a regular basis, can be very expensive.
    To make sure the quality of the application stays high, including Test Cloud-based
    solutions becomes an integral part of the process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，移动应用程序需要在数百台具有不同操作系统的设备上进行测试，而购买这些不断推出的移动设备可能非常昂贵。为了确保应用程序的质量保持高水平，采用基于云的测试解决方案成为了流程中的一个重要组成部分。
- en: Choosing tools for continuous integration
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择持续集成工具
- en: There are many CI tools available on the market to implement continuous integration,
    just like there are many languages available on the market with which to develop
    applications, but choosing the right CI tool is very important for ensuring long-term
    benefits.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有许多 CI 工具可供实施持续集成，就像市场上有许多编程语言可以用于开发应用程序一样，但选择合适的 CI 工具对于确保长期利益至关重要。
- en: 'Choosing a CI tool for your project can depend on many variables:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的项目选择 CI 工具可能取决于许多因素：
- en: '**Programming language support**: This is one of the most important factors
    while choosing a CI tool. Some CI tools have better support for certain language-specific
    builds and packages, while others might not provide language-specific packaging
    options.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编程语言支持**：这是选择 CI 工具时最重要的因素之一。一些 CI 工具有更好的语言特定构建和包的支持，而其他工具可能不提供语言特定的打包选项。'
- en: '**Operating system**: Operating system support is important, as some teams
    might find an open source operating system such as Linux to be a better choice
    for all their servers, including the CI server, and it might be more comfortable
    for them to configure a familiar operating system, while other teams working on
    .NET applications might find Windows to be more comfortable and feature-rich for
    their configurations. It all boils down to the preference different teams have
    and the kind of application they are working on.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统**：操作系统的支持很重要，因为一些团队可能会觉得开源操作系统（如 Linux）对于所有服务器（包括 CI 服务器）来说是更好的选择，而且他们可能会觉得配置一个熟悉的操作系统更为舒适，而其他从事
    .NET 应用程序开发的团队可能会觉得 Windows 在配置上更为舒适且功能丰富。这一切归根结底是不同团队的偏好和他们所开发的应用程序类型决定的。'
- en: '**Integration with a code repository**: Different teams prefer different code
    repositories for various reasons. Some might find Git to be more feature-rich
    and supported on various IDEs with plugins, while others who are more familiar
    with Microsoft environments find Team Services to be easier to use and better
    integrated. Different CI tools have different levels of support for these repositories.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与代码库的集成**：不同的团队由于各种原因偏好不同的代码库。有些团队可能觉得 Git 更为功能丰富，并且在各种 IDE 中有插件支持，而另一些对微软环境更为熟悉的团队则觉得
    Team Services 更易于使用且集成性更好。不同的 CI 工具对这些代码库的支持程度也不同。'
- en: '**Support for application platform deployment**: Some CI servers are better
    suited for web application deployment, while others provide more features and
    better support for mobile application deployment to app stores. Depending on your
    type of application, the choice can vary.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用平台部署支持**：有些 CI 服务器更适合 Web 应用程序的部署，而其他一些则提供更多的功能并更好地支持将移动应用程序部署到应用商店。根据你的应用程序类型，选择可能会有所不同。'
- en: '**Cost**: Cost is always an important factor while choosing any type of tool.
    Medium to big companies can afford to have expensive, feature-rich CI tools, while
    smaller companies and teams might want to stick to low-budget and sometimes open
    source and freely available CI tools, and customize them according to their needs.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本**：成本始终是选择任何类型工具时的重要因素。中型到大型公司可以负担得起昂贵且功能丰富的 CI 工具，而较小的公司和团队可能会选择低预算，有时是开源并且免费的
    CI 工具，并根据需要对其进行定制。'
- en: Various tools for continuous integration
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 各种持续集成工具
- en: Let's have a look at some of the widely used CI tools available in the market.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一些市场上广泛使用的 CI 工具。
- en: TeamCity
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TeamCity
- en: TeamCity is a well-known CI server, built by JetBrains. JetBrains is quite well
    known for developing various tools for different phases in the software development
    life cycle, such as WebStorm and ReSharper. TeamCity has both a licensed version
    and a free version with a limited number of configurations and build agents. The
    free version is suitable for small teams that plan to grow over time.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity 是由 JetBrains 开发的著名 CI 服务器。JetBrains 在为软件开发生命周期的不同阶段开发各种工具方面颇有名气，例如
    WebStorm 和 ReSharper。TeamCity 提供有许可证的版本和一个免费版本，免费版具有有限的配置和构建代理数量。免费版本适用于计划随着时间增长的小型团队。
- en: Despite being a Java-based solution, TeamCity offers the best .NET support among
    the tools on this list. There are also different enterprise packages that scale
    by the number of agents needed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 TeamCity 是一个基于 Java 的解决方案，但它在此列表中的工具中提供了最佳的 .NET 支持。它还有不同的企业套餐，根据所需的代理数量进行扩展。
- en: You will be learning more about TeamCity later in this chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本章稍后学习更多关于 TeamCity 的内容。
- en: 'Its key features are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 其主要特点如下：
- en: Extensive support for .NET-based applications and Visual Studio
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广泛支持基于 .NET 的应用程序和 Visual Studio
- en: Remote run, which can be used to test changes for failures without doing an
    actual commit
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程运行，可以用来测试变更是否会导致失败，而无需进行实际的提交
- en: Supports both automated and manual types of build trigger, and you can configure
    automated build triggers for every commit
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持自动和手动触发构建，您可以为每次提交配置自动构建触发器
- en: Jenkins
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins
- en: Jenkins is one of the most popular open source projects for continuous integration.
    With thousands of plugins to choose from, Jenkins can help teams automate tasks
    that would otherwise put a time-consuming strain on your software team. Common
    uses include building projects, running tests, bug detection, code analysis, and
    project deployment.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是最受欢迎的开源持续集成项目之一。通过数千个插件可供选择，Jenkins 可以帮助团队自动化本来会对软件团队造成时间压力的任务。常见用途包括构建项目、运行测试、错误检测、代码分析和项目部署。
- en: 'Its key features are as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 其主要特点如下：
- en: Jenkins has an easy installation process by just running a command, `java -jar
    jenkins.war`, and deploying - nothing else
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 通过运行命令 `java -jar jenkins.war` 并部署，安装过程非常简单—没有其他复杂步骤
- en: Jenkins comes with a user-friendly web interface and you can configure Jenkins
    entirely from that
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 配备了用户友好的 web 界面，您可以完全通过它来配置 Jenkins
- en: Jenkins has a huge plugin library and integrates with most build tools
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 拥有庞大的插件库，并与大多数构建工具集成
- en: Customizing Jenkins to your project's needs is very straightforward by creating
    plugins and extending its capabilities
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过创建插件和扩展功能，Jenkins 可以非常简单地根据项目需求进行定制
- en: Distributed builds are supported by Jenkins over different servers, and even
    with different operating systems
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 支持在不同的服务器上进行分布式构建，甚至支持不同操作系统
- en: Visual Studio Team Services
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio Team Services
- en: Visual Studio Team Services, provided by Microsoft, helps teams plan better,
    code together, and ship faster. You can code in any IDE or language, for any target
    platform. Various tools and plugins can be downloaded to customize it to your
    project requirements.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft 提供的 Visual Studio Team Services 帮助团队更好地规划、共同编写代码并加速发布。您可以在任何 IDE 或语言中进行编码，针对任何目标平台。各种工具和插件可以下载并根据项目需求进行定制。
- en: 'The key features are as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 其主要特点如下：
- en: Supports a wide variety of tools including Visual Studio, Eclipse, or any other
    tool available
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多种工具，包括 Visual Studio、Eclipse 或任何其他可用的工具
- en: Comes with unlimited free, private repos (including Git repos)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供无限制的免费私有仓库（包括 Git 仓库）
- en: Planning boards and tools are available for Agile and even Kanban projects
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供适用于敏捷和看板项目的计划板和工具
- en: Automatically compiles and tests apps in the Cloud to avoid build failures
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动在云中编译和测试应用程序，以避免构建失败
- en: Bamboo
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bamboo
- en: Bamboo is a CI server used by software teams worldwide to automate the process
    of release management for applications and general software. It allows teams to
    establish a streamlined pipeline for build delivery. Mobile developers can deploy
    their apps back to the Apple store or Google Play automatically. Being an Atlassian
    tool, it has native support for Jira and BitBucket, and you can even import your
    Jenkins configurations into Bamboo easily.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Bamboo 是全球软件团队使用的 CI 服务器，用于自动化应用程序和一般软件的发布管理过程。它允许团队建立一个简化的构建交付管道。移动开发者可以自动将他们的应用程序部署到
    Apple Store 或 Google Play。作为一个 Atlassian 工具，它原生支持 Jira 和 BitBucket，您甚至可以轻松地将 Jenkins
    配置导入到 Bamboo 中。
- en: 'Its key features are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 其主要特点如下：
- en: Unlike Jenkins, Bamboo has built-in Git branching workflows
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Jenkins 不同，Bamboo 内置了 Git 分支工作流。
- en: Because it is built by Atlassian, it has built-in integration for Jira and BitBucket
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于它是由 Atlassian 构建的，因此它内置了对 Jira 和 BitBucket 的集成。
- en: Bamboo also supports automated merging to avoid conflicts and differences between
    the working branch and master branch
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bamboo 还支持自动合并，以避免工作分支和主分支之间的冲突和差异。
- en: Test automation in Bamboo produces a continuous flow from build, to test, even
    to releasing the application to the customer when ready
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bamboo 中的测试自动化产生了从构建、测试，甚至到将应用程序发布给客户的持续流程。
- en: Built-in support for Jira makes bug tracking in a specific release, and even
    builds, automated and easily trackable
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置对 Jira 的支持使得在特定发布版本中，甚至是在构建过程中，bug 跟踪实现了自动化且易于追踪。
- en: Using TeamCity with Xamarin for CI/CD
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TeamCity 与 Xamarin 进行 CI/CD
- en: As mentioned in the previous section, TeamCity provides great support for .NET-based
    applications.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如上一节所述，TeamCity 对基于 .NET 的应用程序提供了很好的支持。
- en: While it can automatically detect build steps from configuration files and project
    files, it can also detect automatic build triggers from GitHub.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它可以自动从配置文件和项目文件中检测构建步骤，但它也能从 GitHub 中检测自动构建触发器。
- en: Requirements for using TeamCity
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TeamCity 的要求
- en: 'To use TeamCity, knowledge about, and the access to, some hardware and technologies
    are required to make the setup process smoother:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 TeamCity，需要具备一定的硬件和技术知识，并且能够访问这些硬件和技术，以便使设置过程更加顺利：
- en: '**A dedicated build server for TeamCity installation and setup**: Ideally the
    build server should be a standalone server and should not be responsible for other
    responsibilities such as being a DB server or hosting server.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为 TeamCity 安装和设置专用的构建服务器**：理想情况下，构建服务器应该是独立的服务器，不应承担其他职责，如作为数据库服务器或托管服务器。'
- en: '**Knowledge of MSBuild**: Having knowledge of MSBuild can make this setup much
    better and helps in resolving any compilation-related issues if required.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSBuild 知识**：掌握 MSBuild 知识可以使这个设置更加顺利，并帮助在需要时解决任何与编译相关的问题。'
- en: '**Knowledge of Xamarin Test Cloud for continuous testing**: Xamarin Test Cloud
    will be used in this chapter for continuous testing after a build and application
    package is ready. You will be familiar with this because it has been described
    in detail in the last chapter.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin Test Cloud 连续测试的知识**：本章将使用 Xamarin Test Cloud 进行构建和应用程序包准备完毕后的连续测试。你应该已经很熟悉它，因为在上一章中已经详细描述过了。'
- en: Steps involved in TeamCity setup
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TeamCity 设置的步骤
- en: 'The following steps are involved in setting up TeamCity:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 TeamCity 时涉及以下步骤：
- en: '**Preparing the build server**: In order to build our mobile app on the build
    server, there is some software that needs to be installed on the build server,
    which will be used while building the application'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准备构建服务器**：为了在构建服务器上构建我们的移动应用程序，需要在构建服务器上安装一些软件，这些软件将在构建应用程序时使用。'
- en: '**Creating the build script**: A build script is basically a script containing
    a set of commands to perform various actions in the build process, such as compiling
    the application, building the APK, and then submitting it to the cloud for testing,
    as well as much more'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建构建脚本**：构建脚本基本上是一个包含一组命令的脚本，用于在构建过程中执行各种操作，如编译应用程序、构建 APK，然后将其提交到云端进行测试，以及更多其他操作。'
- en: '**Installing TeamCity**: Once we have the required tools installed on the CI
    server, TeamCity needs to be installed and configured for the project and its
    users to run build scripts'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 TeamCity**：一旦我们在 CI 服务器上安装了所需的工具，就需要安装和配置 TeamCity，以便项目和用户能够运行构建脚本。'
- en: '**Creating a TeamCity project**: Once we have all the software required to
    build our project and the script to perform the building, a TeamCity project should
    be created'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建 TeamCity 项目**：一旦我们拥有了构建项目所需的所有软件和执行构建的脚本，就应该创建一个 TeamCity 项目。'
- en: Preparing the build server
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备构建服务器
- en: In order to compile and build a mobile app on the server, some software need
    to be installed as it is required for the build process. For an Android application
    to be built on the build server, it is important to have tools such as the Visual
    Studio SDK and Visual Studio build tools installed on the server. Also, acquiring
    Android Keystore is required to sign the application package to be released later.
    To avoid any configuration issues, it is recommended to install this software
    under the same user account as TeamCity.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在服务器上编译和构建移动应用，需要安装一些软件，因为它们是构建过程的必要条件。为了在构建服务器上构建 Android 应用，必须安装 Visual
    Studio SDK 和 Visual Studio 构建工具等工具。同时，获取 Android Keystore 是为了签名即将发布的应用包。为了避免任何配置问题，建议将这些软件安装在与
    TeamCity 相同的用户账户下。
- en: Firewall configuration
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防火墙配置
- en: For continuous testing, we are using Xamarin Test Cloud, which was described
    in the previous chapter in detail. For tests to be submitted to Xamarin Test Cloud
    automatically as part of CI, the CI server must be configured to allow network
    traffic to and from [testcloud.xamarin.com](http://testcloud.xamarin.com) on ports
    `80` and `443`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于持续测试，我们使用 Xamarin Test Cloud，这在前一章节中已详细描述。为了让测试自动提交到 Xamarin Test Cloud 作为
    CI 的一部分，CI 服务器必须配置允许网络流量进出 [testcloud.xamarin.com](http://testcloud.xamarin.com)
    的端口 `80` 和 `443`。
- en: Once these configurations are done and the firewall is configured to allow communication
    between the server and Xamarin Test Cloud, we will be able to use command-line
    tools in the build steps to submit our UITests to Xamarin Test Cloud.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些配置并将防火墙配置为允许服务器与 Xamarin Test Cloud 之间的通信后，我们就能够在构建步骤中使用命令行工具将我们的 UITests
    提交到 Xamarin Test Cloud。
- en: Installing Visual Studio with Xamarin
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装带有 Xamarin 的 Visual Studio
- en: To install Visual Studio with Xamarin, you can follow the same steps described
    in [Chapter 3](1f45b30c-388e-4fd2-b2e6-cfe6d906cd7b.xhtml), *Cross-Platform Mobile
    App Development with Xamarin*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装带有 Xamarin 的 Visual Studio，您可以按照 [第 3 章](1f45b30c-388e-4fd2-b2e6-cfe6d906cd7b.xhtml)中描述的相同步骤进行操作，*使用
    Xamarin 进行跨平台移动应用开发*。
- en: Following the steps should install both Visual Studio and Xamarin with the required
    tools and SDKs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤将安装 Visual Studio 和 Xamarin，并附带所需的工具和 SDK。
- en: Android Keystore
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Keystore
- en: Android Keystore is used for signing the application while distributing it.
    This is required before packaging the application, so that our final package is
    signed with it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Android Keystore 用于在分发应用时对应用进行签名。在打包应用之前需要进行此操作，以确保我们的最终包是用它签名的。
- en: Creating your own Keystore
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自己的 Keystore
- en: 'The first step is to create your own personal Keystore that will contain the
    information used to digitally sign your Android package files. You can do this
    with the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建您自己的个人 Keystore，它将包含用于数字签名 Android 包文件的信息。您可以使用以下命令来完成此操作：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `30000` at the end of the command denotes the length of validity of certificates;
    Google requires this to be higher than `2033`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 命令末尾的 `30000` 表示证书的有效期；Google 要求此值大于 `2033`。
- en: 'Before you run this command, make note of a few parameters first. When you
    run the command, it will ask you to enter the following parameters. These parameters
    will be used again later in the project file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行此命令之前，请先记下几个参数。运行命令时，它会要求您输入以下参数。这些参数稍后将在项目文件中再次使用：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Running the command should generate a `.keystore` file with the filename provided
    in the command. Now that our build server is ready, let's prepare the build script
    that we'll be using in the build process.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后应生成一个 `.keystore` 文件，文件名由命令提供。现在我们的构建服务器已准备就绪，接下来让我们准备在构建过程中使用的构建脚本。
- en: Creating a build script
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建构建脚本
- en: 'The build script should contain the following steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 构建脚本应包含以下步骤：
- en: '**Compile the application**: Configuring the application project file to use
    the proper Keystore and compiling the application using Visual Studio SDK tools'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编译应用**：配置应用项目文件以使用正确的 Keystore，并使用 Visual Studio SDK 工具编译应用'
- en: '**Submit the application to Xamarin Test Cloud**: Once the server''s firewall
    is configured to allow communication with Test Cloud servers, as mentioned in
    previous steps, this step in the build script will run the command to upload the
    signed application package to the Test Cloud servers'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将应用提交到 Xamarin Test Cloud**：一旦服务器的防火墙配置为允许与 Test Cloud 服务器通信，如前面的步骤所述，构建脚本中的这一步将运行命令，上传已签名的应用包到
    Test Cloud 服务器。'
- en: Compiling the application
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译应用
- en: 'Now that we have our Android Keystore ready and prepped for use, we can look
    at the Visual Studio project. In order to automate this in the build system, we
    need to configure the project to use our Keystore credentials:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的 Android Keystore 准备好了，可以开始使用，我们可以查看 Visual Studio 项目。为了在构建系统中自动化这一过程，我们需要配置项目以使用我们的
    Keystore 凭据：
- en: 'In Visual Studio, edit the Android application `.csproj` file and add another
    `PropertyGroup` element as shown in the following code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，编辑 Android 应用的 `.csproj` 文件，并添加另一个 `PropertyGroup` 元素，如以下代码所示：
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now our `.csproj` file knows how to use our Keystore unattended. We can tie
    in to the Xamarin build process from within our automated builds and produce the
    base Android package. You can test that this is working using the following command:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们的 `.csproj` 文件知道如何在无人干预的情况下使用我们的 Keystore。我们可以在自动化构建中将其与 Xamarin 构建过程集成，并生成基础的
    Android 包。你可以使用以下命令来测试它是否正常工作：
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command uses MSBuild to build the application with the given configuration;
    in our case, it should be release.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令使用 MSBuild 按照给定的配置构建应用程序；在我们的案例中，它应该是发布版本。
- en: 'We have our application package now and we can apply the signing processes.
    To sign the package created in the previous step, we need to execute the following
    command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了应用程序包，可以应用签名过程。要签名在前一步中创建的包，我们需要执行以下命令：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This package is now digitally signed using your certificate from the Keystore
    we made earlier.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该包现在已使用我们之前制作的 Keystore 中的证书进行数字签名。
- en: 'Now that we have a signed package, we can zip-align this package and then publish
    this as an artifact of our TeamCity build process. This command makes use of the
    Android SDK''s `zipalign.exe` program. You''ll have to find where this is on your
    machine, as there are many potential locations. The command you need will look
    something like this:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了签名的包，我们可以使用 zipalign 对该包进行对齐，然后将其作为 TeamCity 构建过程的构件发布。此命令使用了 Android
    SDK 的 `zipalign.exe` 程序。你需要找到该程序在你机器上的位置，因为它可能在多个位置。你需要的命令看起来可能是这样的：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now it is time to upload our tests and Android package to Xamarin Test Cloud
    to be UI tested. We created Xamarin.UITest in the previous chapter, and it is
    assumed that you are aware of the process of creating and uploading the test to
    Xamarin Test Cloud.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候将我们的测试和 Android 包上传到 Xamarin Test Cloud 进行 UI 测试了。我们在前一章中创建了 Xamarin.UITest，并假设你已经了解了创建和上传测试到
    Xamarin Test Cloud 的过程。
- en: 'So, include the following command to your build process to upload the test
    to Test Cloud:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，将以下命令添加到你的构建过程中，以将测试上传到 Test Cloud：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When the test is run, the test results will be returned in the form of an NUnit-style
    XML file called `report.xml`. TeamCity will display the information in the build
    log.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试运行时，测试结果将以 NUnit 样式的 XML 文件 `report.xml` 形式返回。TeamCity 会在构建日志中显示这些信息。
- en: Installing and configuring TeamCity
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 TeamCity
- en: 'To install and configure TeamCity on a Windows machine, follow these steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 机器上安装和配置 TeamCity，请按照以下步骤进行：
- en: 'Go to [https://www.jetbrains.com/teamcity/download/#section=windows](https://www.jetbrains.com/teamcity/download/#section=windows)
    and click on the DOWNLOAD button to download the TeamCity installation package
    from the TeamCity website:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://www.jetbrains.com/teamcity/download/#section=windows](https://www.jetbrains.com/teamcity/download/#section=windows)，点击下载按钮从
    TeamCity 网站下载 TeamCity 安装包：
- en: '![](img/2c68084c-2a78-49c5-97d0-0ffd7501d095.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c68084c-2a78-49c5-97d0-0ffd7501d095.png)'
- en: 'Once downloaded, open the installation package and click Next:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，打开安装包并点击下一步：
- en: '![](img/6d6fcb61-aa1f-4154-9765-2a41dd7b333d.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d6fcb61-aa1f-4154-9765-2a41dd7b333d.png)'
- en: 'On the next screen, agree to the license and go to the next step:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，同意许可证并进入下一步：
- en: '![](img/e0ed84f1-71ab-4d32-bc9f-0b6f9dbf34c5.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0ed84f1-71ab-4d32-bc9f-0b6f9dbf34c5.png)'
- en: 'Select the path to install TeamCity in and click Next:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要安装 TeamCity 的路径并点击下一步：
- en: '![](img/cb1dd9fa-fbf6-4cad-8e11-18bbd627b601.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb1dd9fa-fbf6-4cad-8e11-18bbd627b601.png)'
- en: 'Select the packages to be installed; for example, if you are installing Build
    Agent and Server on different servers, then select accordingly. For learning purposes,
    you can select to install both on the same machine:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要安装的包；例如，如果你在不同的服务器上安装构建代理和服务器，请根据需要选择。为了学习目的，你可以选择将两者安装在同一台机器上：
- en: '![](img/4359740e-5f93-4cc4-8262-ca30989473d0.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4359740e-5f93-4cc4-8262-ca30989473d0.png)'
- en: 'Once the installation is done, select the port you would like the TeamCity
    server to run on. Make sure this port is not used by other services on the machine,
    and choose a unique port number and not the default one if possible:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，选择你希望 TeamCity 服务器运行的端口。确保该端口未被机器上的其他服务占用，尽量选择一个唯一的端口号，而不是默认端口：
- en: '![](img/986777ea-61eb-4688-8321-75baa185b910.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/986777ea-61eb-4688-8321-75baa185b910.png)'
- en: 'In the next screen, you''ll be able to see the configurations and ports configured
    for the server, and you can also change them here if you want to:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，你将能看到为服务器配置的设置和端口，如果需要，你也可以在这里进行更改：
- en: '![](img/a167c9a0-e506-46c2-9bac-acef1a0a9c3c.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a167c9a0-e506-46c2-9bac-acef1a0a9c3c.png)'
- en: Click on OK to save the configuration.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”以保存配置。
- en: '![](img/f7e2cda8-3259-41ea-800c-4aba928b66cc.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7e2cda8-3259-41ea-800c-4aba928b66cc.png)'
- en: 'Select the account to run TeamCity:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择用于运行 TeamCity 的账户：
- en: '![](img/93551935-ccf4-4c70-9590-be99307aded1.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93551935-ccf4-4c70-9590-be99307aded1.png)'
- en: 'Start the build server and build agent:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动构建服务器和构建代理：
- en: '![](img/21d37a27-52fe-45a2-ab42-5c8479703b47.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21d37a27-52fe-45a2-ab42-5c8479703b47.png)'
- en: 'Check Open TeamCity Web UI after Setup is completed and click Finish:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选“设置完成后打开 TeamCity Web UI”并点击“完成”：
- en: '![](img/beea17ad-6987-47e2-83db-a4c3d0bf5309.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/beea17ad-6987-47e2-83db-a4c3d0bf5309.png)'
- en: This will open the TeamCity web UI where we can create a TeamCity project.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开 TeamCity Web UI，在这里我们可以创建一个 TeamCity 项目。
- en: Creating a TeamCity project
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 TeamCity 项目
- en: 'Once the installation is done, the TeamCity web user interface will open in
    the browser and we can create a new TeamCity project there. To do so, follow these
    steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，TeamCity Web 用户界面将在浏览器中打开，我们可以在这里创建新的 TeamCity 项目。请按照以下步骤操作：
- en: 'Once you have logged in to TeamCity UI, click on Create project:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 TeamCity UI 后，点击“创建项目”：
- en: '![](img/ab11df06-2f6a-485a-80a5-85d93fc35d0c.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab11df06-2f6a-485a-80a5-85d93fc35d0c.png)'
- en: 'To connect to our project from GitHub, click on From GitHub on the next screen:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从 GitHub 连接到我们的项目，请在下一个屏幕上点击“从 GitHub”：
- en: '![](img/462123a3-e226-4a82-b404-a57ae4091008.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/462123a3-e226-4a82-b404-a57ae4091008.png)'
- en: 'This will open a popup with instructions to add a TeamCity application to your
    GitHub account:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个弹窗，提供将 TeamCity 应用添加到 GitHub 账户的指示：
- en: '![](img/173f07a4-7b9a-4998-a0c3-dab6b1790bf4.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/173f07a4-7b9a-4998-a0c3-dab6b1790bf4.png)'
- en: Click on the **register TeamCity** link and it should take you to the GitHub
    page where you can register a new OAuth app.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **注册 TeamCity** 链接，它会将你带到 GitHub 页面，在那里你可以注册一个新的 OAuth 应用。
- en: 'Give the details of the application, homepage URL, and callback URL, as shown
    in the following screenshot, and register the OAuth app:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写应用程序的详细信息、主页 URL 和回调 URL，如下截图所示，并注册 OAuth 应用：
- en: '![](img/3b713a00-4814-45a5-821d-2a32e42b25d3.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b713a00-4814-45a5-821d-2a32e42b25d3.png)'
- en: 'Once you register, on the next screen you''ll get a Client ID and Client Secret;
    copy those details since they will be required for the TeamCity project:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册后，在下一个屏幕上你将看到客户端 ID 和客户端密钥；请复制这些信息，因为它们将在 TeamCity 项目中需要用到：
- en: '![](img/aa251526-c01f-47d3-b086-1d4918b082b9.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa251526-c01f-47d3-b086-1d4918b082b9.png)'
- en: 'Go back to TeamCity, put the Client ID and Client Secret in the required fields,
    and click Save:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 TeamCity，将客户端 ID 和客户端密钥填写到相应字段，并点击“保存”：
- en: '![](img/9d01f773-267e-4acc-b5e7-1469bcf92f9a.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d01f773-267e-4acc-b5e7-1469bcf92f9a.png)'
- en: 'Next, you need to do a one-time sign in to allow TeamCity to use GitHub repositories.
    Click on Sign in to GitHub:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要进行一次性登录，以允许 TeamCity 使用 GitHub 仓库。点击“登录到 GitHub”：
- en: '![](img/dfd160ea-e948-4f35-a672-f95d18d6c297.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfd160ea-e948-4f35-a672-f95d18d6c297.png)'
- en: 'Authorize the TeamCity app to use GitHub by clicking on Authorize app:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击“授权应用”来授权 TeamCity 应用使用 GitHub：
- en: '![](img/cd55027e-d010-4e1d-9d60-f82fa941eeac.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd55027e-d010-4e1d-9d60-f82fa941eeac.png)'
- en: 'Once authorized, select the PhoneCallApp repository from the list of repositories
    shown on TeamCity:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 授权后，从 TeamCity 显示的仓库列表中选择 PhoneCallApp 仓库：
- en: '![](img/2da36619-883c-45ee-8ee0-c8e68eb61bf0.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2da36619-883c-45ee-8ee0-c8e68eb61bf0.png)'
- en: 'On the next screen, TeamCity will offer to create a new project from the URL
    selected. Give it a name and click Proceed:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，TeamCity 会提供从选定的 URL 创建新项目的选项。给它命名并点击“继续”：
- en: '![](img/ee1cac04-4355-493a-847d-aaf841cbd543.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee1cac04-4355-493a-847d-aaf841cbd543.png)'
- en: 'This should create two things. The first is a trigger in TeamCity for each
    code check-in you do; each will trigger a build. The second is a build step from
    the repository automatically:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这应该会创建两件事。第一，每次你提交代码时，TeamCity 都会触发一个构建。第二，它会自动创建一个来自仓库的构建步骤：
- en: '![](img/1e4786fd-f781-4679-9c5b-9508c3754e19.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4786fd-f781-4679-9c5b-9508c3754e19.png)'
- en: We need to configure the build steps manually and use the build scripts described
    in the *Creating a build script* section. Use those scripts, described sequentially
    in previous steps, to create the build steps in TeamCity.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要手动配置构建步骤，并使用*创建构建脚本*部分描述的构建脚本。使用这些脚本，按照前面的步骤逐步创建 TeamCity 中的构建步骤。
- en: 'Finally, your build steps should look like the following screenshot, consisting
    of all the steps mentioned in the *Creating a build script* section:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，你的构建步骤应该如下图所示，包括在*创建构建脚本*部分提到的所有步骤：
- en: '![](img/e3792c2d-7fab-47a7-aa59-76c15baf07fe.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3792c2d-7fab-47a7-aa59-76c15baf07fe.png)'
- en: Now, your TeamCity continuous build is ready, and a trigger is already configured
    to perform this build on each code check-in, or whenever it finds any code changes
    in the repository. This finally provides you with an Android package that is ready
    to be distributed.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的 TeamCity 持续构建已经准备好，触发器已配置好，在每次代码提交时，或者在仓库中发现任何代码变化时自动执行此构建。最终，你将获得一个准备分发的
    Android 包。
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about continuous integration and continuous delivery.
    We learned about various tools for continuous integration. We used TeamCity to
    implement CI/CD in the Xamarin project developed in earlier chapters, and learned
    how to create a project in TeamCity to automate the build process and finally
    get a distributable Android package.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了持续集成和持续交付。我们了解了各种持续集成工具。我们使用 TeamCity 在前面章节中开发的 Xamarin 项目中实现了 CI/CD，并学习了如何在
    TeamCity 中创建项目来自动化构建过程，最终得到一个可以分发的 Android 包。
- en: In the next chapter, you'll learn more about continuous distribution and delivery
    using Visual Studio Team Services.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将了解如何使用 Visual Studio Team Services 进行持续分发和交付。
