- en: Configuring TeamCity for CI/CD with Xamarin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the old days, application development used to happen in separate, not-so-integrated
    teams. Developers were not used to merging their work with other developers' code
    for quite a long time, and that used to create merge issues. Things that were
    working on the developer's local copy used to stop working when merged with others'
    code. This kind of *not-so-integrated development* environment increased the development
    time and delayed the discovery of issues. One solution for this is to have continuous
    integration built into the development cycle, where developers merge their code
    multiple times a day and get issues fixed at earlier stages.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn more about continuous integration, continuous
    delivery, and the different tools that we can use for a better development integration
    and delivery process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to continuous integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various tools for continuous integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using TeamCity with Xamarin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a build server for TeamCity and installing TeamCity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a build script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a TeamCity project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Continuous Integration** (**CI**) is a development and integration practice
    in which developers check code into a shared repository frequently, preferably
    several times a day. Each code merge can then be verified by an automated build
    and automated tests if applicable.'
  prefs: []
  type: TYPE_NORMAL
- en: There are many benefits to following continuous integration; one of the advantages
    is that it helps detect defects quickly and at an early stage. The check-ins are
    usually very small and contain small developments, thus helping to identify the
    exact issues quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous Delivery** (**CD**), on the other hand, is a process performed
    after integration, and as the name suggests, it makes sure that the code base
    checked in is deployable at any point of time. Each environment from test to production
    can, and mostly does, have different configurations. Continuous delivery makes
    sure that all configurations are always ready for deployment to any environment,
    and that the code passes all the tests necessary for release.'
  prefs: []
  type: TYPE_NORMAL
- en: In short, continuous integration improves the development and testing experience
    with frequent code merges, helps quickly identify bugs, and involves running automated
    tests if included in the process. Continuous delivery makes sure the codebase
    is in a ready state for the code to be deployed in any environment.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD for a web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/e45d2f34-6d0e-48ac-9b51-11dc044cef30.png)'
  prefs: []
  type: TYPE_IMG
- en: For a web application, once the build is ready from the CI server, it is not
    a big task to test the application on different browsers since there are only
    a limited number of them. But in a mobile application, there is one more step
    involved to improve the experience, since there are thousands of devices with
    different versions of operating systems available.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD for a mobile application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/87519c1b-ca69-4533-af52-bc6727732fac.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding diagram, mobile applications need to be tested on
    hundreds of devices with different operating systems, and purchasing all these
    mobile devices, which keep on coming out on a regular basis, can be very expensive.
    To make sure the quality of the application stays high, including Test Cloud-based
    solutions becomes an integral part of the process.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing tools for continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many CI tools available on the market to implement continuous integration,
    just like there are many languages available on the market with which to develop
    applications, but choosing the right CI tool is very important for ensuring long-term
    benefits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choosing a CI tool for your project can depend on many variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Programming language support**: This is one of the most important factors
    while choosing a CI tool. Some CI tools have better support for certain language-specific
    builds and packages, while others might not provide language-specific packaging
    options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating system**: Operating system support is important, as some teams
    might find an open source operating system such as Linux to be a better choice
    for all their servers, including the CI server, and it might be more comfortable
    for them to configure a familiar operating system, while other teams working on
    .NET applications might find Windows to be more comfortable and feature-rich for
    their configurations. It all boils down to the preference different teams have
    and the kind of application they are working on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration with a code repository**: Different teams prefer different code
    repositories for various reasons. Some might find Git to be more feature-rich
    and supported on various IDEs with plugins, while others who are more familiar
    with Microsoft environments find Team Services to be easier to use and better
    integrated. Different CI tools have different levels of support for these repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support for application platform deployment**: Some CI servers are better
    suited for web application deployment, while others provide more features and
    better support for mobile application deployment to app stores. Depending on your
    type of application, the choice can vary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost**: Cost is always an important factor while choosing any type of tool.
    Medium to big companies can afford to have expensive, feature-rich CI tools, while
    smaller companies and teams might want to stick to low-budget and sometimes open
    source and freely available CI tools, and customize them according to their needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various tools for continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at some of the widely used CI tools available in the market.
  prefs: []
  type: TYPE_NORMAL
- en: TeamCity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TeamCity is a well-known CI server, built by JetBrains. JetBrains is quite well
    known for developing various tools for different phases in the software development
    life cycle, such as WebStorm and ReSharper. TeamCity has both a licensed version
    and a free version with a limited number of configurations and build agents. The
    free version is suitable for small teams that plan to grow over time.
  prefs: []
  type: TYPE_NORMAL
- en: Despite being a Java-based solution, TeamCity offers the best .NET support among
    the tools on this list. There are also different enterprise packages that scale
    by the number of agents needed.
  prefs: []
  type: TYPE_NORMAL
- en: You will be learning more about TeamCity later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its key features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Extensive support for .NET-based applications and Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote run, which can be used to test changes for failures without doing an
    actual commit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports both automated and manual types of build trigger, and you can configure
    automated build triggers for every commit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is one of the most popular open source projects for continuous integration.
    With thousands of plugins to choose from, Jenkins can help teams automate tasks
    that would otherwise put a time-consuming strain on your software team. Common
    uses include building projects, running tests, bug detection, code analysis, and
    project deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its key features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins has an easy installation process by just running a command, `java -jar
    jenkins.war`, and deploying - nothing else
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins comes with a user-friendly web interface and you can configure Jenkins
    entirely from that
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins has a huge plugin library and integrates with most build tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing Jenkins to your project's needs is very straightforward by creating
    plugins and extending its capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed builds are supported by Jenkins over different servers, and even
    with different operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Team Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio Team Services, provided by Microsoft, helps teams plan better,
    code together, and ship faster. You can code in any IDE or language, for any target
    platform. Various tools and plugins can be downloaded to customize it to your
    project requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Supports a wide variety of tools including Visual Studio, Eclipse, or any other
    tool available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comes with unlimited free, private repos (including Git repos)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning boards and tools are available for Agile and even Kanban projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically compiles and tests apps in the Cloud to avoid build failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bamboo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bamboo is a CI server used by software teams worldwide to automate the process
    of release management for applications and general software. It allows teams to
    establish a streamlined pipeline for build delivery. Mobile developers can deploy
    their apps back to the Apple store or Google Play automatically. Being an Atlassian
    tool, it has native support for Jira and BitBucket, and you can even import your
    Jenkins configurations into Bamboo easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its key features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Jenkins, Bamboo has built-in Git branching workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because it is built by Atlassian, it has built-in integration for Jira and BitBucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bamboo also supports automated merging to avoid conflicts and differences between
    the working branch and master branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test automation in Bamboo produces a continuous flow from build, to test, even
    to releasing the application to the customer when ready
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in support for Jira makes bug tracking in a specific release, and even
    builds, automated and easily trackable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using TeamCity with Xamarin for CI/CD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous section, TeamCity provides great support for .NET-based
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: While it can automatically detect build steps from configuration files and project
    files, it can also detect automatic build triggers from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements for using TeamCity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use TeamCity, knowledge about, and the access to, some hardware and technologies
    are required to make the setup process smoother:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A dedicated build server for TeamCity installation and setup**: Ideally the
    build server should be a standalone server and should not be responsible for other
    responsibilities such as being a DB server or hosting server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Knowledge of MSBuild**: Having knowledge of MSBuild can make this setup much
    better and helps in resolving any compilation-related issues if required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Knowledge of Xamarin Test Cloud for continuous testing**: Xamarin Test Cloud
    will be used in this chapter for continuous testing after a build and application
    package is ready. You will be familiar with this because it has been described
    in detail in the last chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps involved in TeamCity setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps are involved in setting up TeamCity:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparing the build server**: In order to build our mobile app on the build
    server, there is some software that needs to be installed on the build server,
    which will be used while building the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creating the build script**: A build script is basically a script containing
    a set of commands to perform various actions in the build process, such as compiling
    the application, building the APK, and then submitting it to the cloud for testing,
    as well as much more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installing TeamCity**: Once we have the required tools installed on the CI
    server, TeamCity needs to be installed and configured for the project and its
    users to run build scripts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creating a TeamCity project**: Once we have all the software required to
    build our project and the script to perform the building, a TeamCity project should
    be created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the build server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to compile and build a mobile app on the server, some software need
    to be installed as it is required for the build process. For an Android application
    to be built on the build server, it is important to have tools such as the Visual
    Studio SDK and Visual Studio build tools installed on the server. Also, acquiring
    Android Keystore is required to sign the application package to be released later.
    To avoid any configuration issues, it is recommended to install this software
    under the same user account as TeamCity.
  prefs: []
  type: TYPE_NORMAL
- en: Firewall configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For continuous testing, we are using Xamarin Test Cloud, which was described
    in the previous chapter in detail. For tests to be submitted to Xamarin Test Cloud
    automatically as part of CI, the CI server must be configured to allow network
    traffic to and from [testcloud.xamarin.com](http://testcloud.xamarin.com) on ports
    `80` and `443`.
  prefs: []
  type: TYPE_NORMAL
- en: Once these configurations are done and the firewall is configured to allow communication
    between the server and Xamarin Test Cloud, we will be able to use command-line
    tools in the build steps to submit our UITests to Xamarin Test Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio with Xamarin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install Visual Studio with Xamarin, you can follow the same steps described
    in [Chapter 3](1f45b30c-388e-4fd2-b2e6-cfe6d906cd7b.xhtml), *Cross-Platform Mobile
    App Development with Xamarin*.
  prefs: []
  type: TYPE_NORMAL
- en: Following the steps should install both Visual Studio and Xamarin with the required
    tools and SDKs.
  prefs: []
  type: TYPE_NORMAL
- en: Android Keystore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Keystore is used for signing the application while distributing it.
    This is required before packaging the application, so that our final package is
    signed with it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own Keystore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to create your own personal Keystore that will contain the
    information used to digitally sign your Android package files. You can do this
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `30000` at the end of the command denotes the length of validity of certificates;
    Google requires this to be higher than `2033`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you run this command, make note of a few parameters first. When you
    run the command, it will ask you to enter the following parameters. These parameters
    will be used again later in the project file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Running the command should generate a `.keystore` file with the filename provided
    in the command. Now that our build server is ready, let's prepare the build script
    that we'll be using in the build process.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a build script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The build script should contain the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compile the application**: Configuring the application project file to use
    the proper Keystore and compiling the application using Visual Studio SDK tools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Submit the application to Xamarin Test Cloud**: Once the server''s firewall
    is configured to allow communication with Test Cloud servers, as mentioned in
    previous steps, this step in the build script will run the command to upload the
    signed application package to the Test Cloud servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our Android Keystore ready and prepped for use, we can look
    at the Visual Studio project. In order to automate this in the build system, we
    need to configure the project to use our Keystore credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio, edit the Android application `.csproj` file and add another
    `PropertyGroup` element as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our `.csproj` file knows how to use our Keystore unattended. We can tie
    in to the Xamarin build process from within our automated builds and produce the
    base Android package. You can test that this is working using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This command uses MSBuild to build the application with the given configuration;
    in our case, it should be release.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have our application package now and we can apply the signing processes.
    To sign the package created in the previous step, we need to execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This package is now digitally signed using your certificate from the Keystore
    we made earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a signed package, we can zip-align this package and then publish
    this as an artifact of our TeamCity build process. This command makes use of the
    Android SDK''s `zipalign.exe` program. You''ll have to find where this is on your
    machine, as there are many potential locations. The command you need will look
    something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now it is time to upload our tests and Android package to Xamarin Test Cloud
    to be UI tested. We created Xamarin.UITest in the previous chapter, and it is
    assumed that you are aware of the process of creating and uploading the test to
    Xamarin Test Cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, include the following command to your build process to upload the test
    to Test Cloud:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When the test is run, the test results will be returned in the form of an NUnit-style
    XML file called `report.xml`. TeamCity will display the information in the build
    log.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring TeamCity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install and configure TeamCity on a Windows machine, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://www.jetbrains.com/teamcity/download/#section=windows](https://www.jetbrains.com/teamcity/download/#section=windows)
    and click on the DOWNLOAD button to download the TeamCity installation package
    from the TeamCity website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c68084c-2a78-49c5-97d0-0ffd7501d095.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once downloaded, open the installation package and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6d6fcb61-aa1f-4154-9765-2a41dd7b333d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, agree to the license and go to the next step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e0ed84f1-71ab-4d32-bc9f-0b6f9dbf34c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the path to install TeamCity in and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb1dd9fa-fbf6-4cad-8e11-18bbd627b601.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the packages to be installed; for example, if you are installing Build
    Agent and Server on different servers, then select accordingly. For learning purposes,
    you can select to install both on the same machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4359740e-5f93-4cc4-8262-ca30989473d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the installation is done, select the port you would like the TeamCity
    server to run on. Make sure this port is not used by other services on the machine,
    and choose a unique port number and not the default one if possible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/986777ea-61eb-4688-8321-75baa185b910.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next screen, you''ll be able to see the configurations and ports configured
    for the server, and you can also change them here if you want to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a167c9a0-e506-46c2-9bac-acef1a0a9c3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on OK to save the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f7e2cda8-3259-41ea-800c-4aba928b66cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the account to run TeamCity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93551935-ccf4-4c70-9590-be99307aded1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Start the build server and build agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21d37a27-52fe-45a2-ab42-5c8479703b47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check Open TeamCity Web UI after Setup is completed and click Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/beea17ad-6987-47e2-83db-a4c3d0bf5309.png)'
  prefs: []
  type: TYPE_IMG
- en: This will open the TeamCity web UI where we can create a TeamCity project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a TeamCity project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the installation is done, the TeamCity web user interface will open in
    the browser and we can create a new TeamCity project there. To do so, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have logged in to TeamCity UI, click on Create project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab11df06-2f6a-485a-80a5-85d93fc35d0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To connect to our project from GitHub, click on From GitHub on the next screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/462123a3-e226-4a82-b404-a57ae4091008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open a popup with instructions to add a TeamCity application to your
    GitHub account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/173f07a4-7b9a-4998-a0c3-dab6b1790bf4.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **register TeamCity** link and it should take you to the GitHub
    page where you can register a new OAuth app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give the details of the application, homepage URL, and callback URL, as shown
    in the following screenshot, and register the OAuth app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b713a00-4814-45a5-821d-2a32e42b25d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you register, on the next screen you''ll get a Client ID and Client Secret;
    copy those details since they will be required for the TeamCity project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa251526-c01f-47d3-b086-1d4918b082b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back to TeamCity, put the Client ID and Client Secret in the required fields,
    and click Save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d01f773-267e-4acc-b5e7-1469bcf92f9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you need to do a one-time sign in to allow TeamCity to use GitHub repositories.
    Click on Sign in to GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dfd160ea-e948-4f35-a672-f95d18d6c297.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Authorize the TeamCity app to use GitHub by clicking on Authorize app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cd55027e-d010-4e1d-9d60-f82fa941eeac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once authorized, select the PhoneCallApp repository from the list of repositories
    shown on TeamCity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2da36619-883c-45ee-8ee0-c8e68eb61bf0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, TeamCity will offer to create a new project from the URL
    selected. Give it a name and click Proceed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee1cac04-4355-493a-847d-aaf841cbd543.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This should create two things. The first is a trigger in TeamCity for each
    code check-in you do; each will trigger a build. The second is a build step from
    the repository automatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e4786fd-f781-4679-9c5b-9508c3754e19.png)'
  prefs: []
  type: TYPE_IMG
- en: We need to configure the build steps manually and use the build scripts described
    in the *Creating a build script* section. Use those scripts, described sequentially
    in previous steps, to create the build steps in TeamCity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, your build steps should look like the following screenshot, consisting
    of all the steps mentioned in the *Creating a build script* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e3792c2d-7fab-47a7-aa59-76c15baf07fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, your TeamCity continuous build is ready, and a trigger is already configured
    to perform this build on each code check-in, or whenever it finds any code changes
    in the repository. This finally provides you with an Android package that is ready
    to be distributed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about continuous integration and continuous delivery.
    We learned about various tools for continuous integration. We used TeamCity to
    implement CI/CD in the Xamarin project developed in earlier chapters, and learned
    how to create a project in TeamCity to automate the build process and finally
    get a distributable Android package.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn more about continuous distribution and delivery
    using Visual Studio Team Services.
  prefs: []
  type: TYPE_NORMAL
