- en: Security-Testing Plan and Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already discussed the security practices involved in development, which
    included phases such as securing architecture, securing design, threat modeling,
    and securing coding. We will now discuss the security-testing plan and practices
    in the testing phase.
  prefs: []
  type: TYPE_NORMAL
- en: The objective of this chapter is to give an overview of what a security-testing
    plan, security-testing domains, and the minimum set of security-testing scope.
    We will discuss a security testing plan, testing approaches, risk analysis, security
    domains, and industry practices, to build your security-testing knowledge base.
    In addition, we will introduce some industry best practices, testing approaches,
    and security tools, for security testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Security-testing knowledge kit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security-testing plan templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security-testing domains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thinking like a hacker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security-training environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security-testing knowledge kit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Security-testing, also called *penetration testing,* is a very specialized
    profession. The testing results and the quality of the security testing may vary
    without proper guidance, training, and tools. It''s suggested to have an internal
    security-testing knowledge portal, which can include the security-testing guidelines,
    best practices, instructions, tools, and the training environment. An **Open Web
    Application Security Project** (**OWASP**) security-testing knowledge kit can
    be used to build such a knowledge portal. The following table gives an overview
    example of what the whole security-testing knowledge kit should cover:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Security-testing kit** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| Security-testing plan templates | The testing plan defines the security baselines
    to achieve the business objective, testing approach, tools, and risk analysis.
    Depending on the business of the application, it''s also suggested to adapt it
    to suit the technical domain. |'
  prefs: []
  type: TYPE_TB
- en: '| Privacy or security checklist | The checklist can be a basic set of testing
    cases. Security is more focused on the CIA of the application, and privacy is
    more about protecting personal information. |'
  prefs: []
  type: TYPE_TB
- en: '| Security-testing toolkits | The toolkits provide commonly suggested security-testing
    tools for the project teams. |'
  prefs: []
  type: TYPE_TB
- en: '| Training environment | The training environment uses vulnerable applications
    for the security team to do hands-on security-testing practice. |'
  prefs: []
  type: TYPE_TB
- en: 'To build your own in-house security testing knowledge portal, consider the
    adoption of the OWASP Security Knowledge Framework, which provides the OWASP ASVS,
    Security Knowledge, and Code Examples as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Source: https://skf.readme.io/docs/knowledge-base
  prefs: []
  type: TYPE_NORMAL
- en: Security-testing plan templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The key difference between hacking and security testing is that security testing
    requires a comprehensive security quality assurance of the whole application,
    while hacking is looking for specific security issues or vulnerabilities. Creating
    a security-testing template will help the project team to plan security testing
    and maintain the quality of security testing. The following are the well-known
    industry best practices to build a security testing plan:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OWASP Testing Guide**: The OWASP testing guide provides the what, why, when, where,
    and how of the web applications security testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PCI Penetration Testing Guidance**: Instead of listing detailed testing cases
    and tools, the PCI penetration testing guide includes four key agenda of the testing
    such as Penetration Testing Components, Qualifications of a Penetration Tester,
    Penetration Testing Methodologies, Penetration Testing Reporting Guidelines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-115 Technical Guide to Information Security Testing and Assessment:** It
    provides practical recommendations for planning and conducting penetration testing
    activities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile Security Testing Guide** (**MSTG**):  It''s focused on the mobile
    security testing which includes the testing approaches, techniques, and tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following is a sample of the security testing template that includes major
    sections only.
  prefs: []
  type: TYPE_NORMAL
- en: Security-testing objective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section should clearly define the business objective of security testing.
    For example, the most important part of the business objective can be GDPR compliance,
    PCI DSS compliance, customers' expectations, or a regular or major release security
    check. Tying the security testing to the business objective will help to manage
    the focus and scope of the security testing.
  prefs: []
  type: TYPE_NORMAL
- en: Security-testing baseline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The security-testing baseline defines the minimum expectation of the testing
    scope and criteria. OWASP ASVS and the OWASP MSTG are good references for organizations
    that are just beginning to build security-testing baselines. In addition to software
    application security, it also includes the following areas, which are often neglected:'
  prefs: []
  type: TYPE_NORMAL
- en: Platform secure configuration, such as OS, database, virtualization, web services
    (nginX, Apache)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The secure communication protocol, such as SFTP, SSH v2, or TLS v1.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Known vulnerabilities for third-party software components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive information, or the PII data handling, storage, and removal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation or on-line help instructions related to access management, changes
    of password, authentication, and usages of external communication interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure channels of software patch update and integrity check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complexity of password policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging files access control and logging for all non-query actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security-testing environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The testing environment lists all software components, including the application,
    all dependencies, and the platform. When preparing a security-testing environment,
    it's recommended to have a staging environment that is exactly the same as the
    production one. In most cases, the security issue may not be caused by the software
    application itself but by the dependencies or the insecure configuration of the
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: Testing strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The testing strategy highlights the testing approaches for certain high-risk
    functions. The testing strategies can be a manual review, automation, or whitebox
    or blackbox testing. The whitebox testing primarily focuses on the source-code-level
    inspection, and the blackbox testing reviews the while application from end users''
    and hackers'' perspectives. These testing strategies are normally executed using
    a mixed approach. The following table shows an example of testing strategies for
    the platform and the authentication function:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Testing strategy** | **Platform** | **Authentication** |'
  prefs: []
  type: TYPE_TB
- en: '| **Manual review** | NA | Design review |'
  prefs: []
  type: TYPE_TB
- en: '| **Automation** | Fully automated scanning | Brute force attack |'
  prefs: []
  type: TYPE_TB
- en: '| **WhiteBox** | Review configuration files | Code review for encryption |'
  prefs: []
  type: TYPE_TB
- en: '| **BlackBox** | Port or services scanning | Brute force attack |'
  prefs: []
  type: TYPE_TB
- en: High-risk modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of this section, *High-risk modules*, is to list the functions
    that hackers may be most interested to attack or those that may have a bigger
    security impact. The following table lists some of the high-risk modules'' risks
    and testing approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Module or functions** | **Security risks** | **Testing approaches** |'
  prefs: []
  type: TYPE_TB
- en: '| Authentication | Accounts compromisedBrute-force attack. | Bruce-force account
    attacksPassword attacks |'
  prefs: []
  type: TYPE_TB
- en: '| Administration management | Privilege escalation. | The same function tested
    with different roles.List of admin URLs to be tested with operator or guest accounts.Files
    ACL check. |'
  prefs: []
  type: TYPE_TB
- en: '| Files upload | Malicious license files uploaded or files injection attacks.
    | Illegal file type, size, name, and contents. |'
  prefs: []
  type: TYPE_TB
- en: '| Software update | The software may be updated or injected with malicious
    code. | The software package integrity check, signature check, and file size check.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Password reset | The accounts may be compromised or under the accounts enumeration
    bruteforce attacks. | The password can''t be sent in plain text. The password
    reset flow requires the original email, security questions, or mobile phone verification.
    |'
  prefs: []
  type: TYPE_TB
- en: Recommended security-testing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This can be a very broad area. Here is a typical set of security-testing tools,
    and we will discuss this further in later chapters. A minimum security testing
    scope includes the vulnerability scan, port scan, web security, fuzz testing,
    secure configuration, and so on. Each security testing area is suggested to use
    at least two security tools to cover more testing scenarios. Take a look at this
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Security-testing area** | **Suggested security-testing tools** |'
  prefs: []
  type: TYPE_TB
- en: '| Vulnerability scan | **Nessus, OpenVAS, Retina:**These are common open source
    tools to scan vulnerabilities of the applications, web services, and all the software
    dependencies.  |'
  prefs: []
  type: TYPE_TB
- en: '| Port scan | **Nmap:**Nmap is widely used for network security scanning. The
    common network security scanning scenarios include port scanning, hosts, and services
    discovery.  |'
  prefs: []
  type: TYPE_TB
- en: '| Web security | **OWASP ZAP, Arachni, Burp:**These are the most popular open
    source and free web security testing tools that can execute OWASP Top 10 security
    testing.  |'
  prefs: []
  type: TYPE_TB
- en: '| Code scanning | **FindBugs, SonarQube:**The tools are used for static secure
    coding scanning. FindBugs is mainly for Java.  SonarQube supports over 20 programming
    languages for the code quality issues.  |'
  prefs: []
  type: TYPE_TB
- en: '| Fuzz testing | **Peach, FuzzDB, API-fuzzer:**The objective of the fuzzing
    testing is to give a massive amount of dynamic and random data input to verify
    the target application behaviors under the unexpected input.  |'
  prefs: []
  type: TYPE_TB
- en: '| Secure configuration | **OpenSCAP:**The tool performs the security assessment and
    enforcement of the secure configuration baseline of the OS, software, and services
    configurations  |'
  prefs: []
  type: TYPE_TB
- en: '| Secrets or sensitive information | **TruffleHog or GittyLeaks:**These tools
    scan any potential secrets, API key, or passwords on the GIT source code repository.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Mobile | **Mobile Security Testing Framework (MSTF):**The MSTF provides a
    fully automated static and dynamic analysis of an APK file.  |'
  prefs: []
  type: TYPE_TB
- en: '| SSL | **SSLScan, SSLyze:**These tools scan and detect the insecure SSL/TLS
    configuration of a website.  |'
  prefs: []
  type: TYPE_TB
- en: '| Denial-of-Service (DoS) attack | **Hping: **Hping can do TCP packet manipulation.**HTTPSlow:** HTTPSlow is
    used to generate HTTP SLOW DoS attack. |'
  prefs: []
  type: TYPE_TB
- en: '| Injection | **SQLMap**: SQLMap is a common tool used for the SQL injection
    attack. **Commix**: Commix is used for command injection attack. |'
  prefs: []
  type: TYPE_TB
- en: '| Login brute force | **THC Hydra**:The tool is famous for the brute force
    login attack. It supports a wide range of protocols such as SNMP, SMTP, Cisco
    AAA, HTTP, MySQL, and so on.  |'
  prefs: []
  type: TYPE_TB
- en: '| Android testing | **APKtool**, **dex2Jar**, **JD-Gui, Appie**:These are common
    open source tools to do Android security testing. Appie is a portable Android
    security testing toolkit that includes all of the tools and can be executed on
    Windows without the need of a virtual machine.  |'
  prefs: []
  type: TYPE_TB
- en: '| SQL Injection Testing | **SQLMap, Sqlninja**SQL injection is also a very
    common attack to allow hackers to steal or manipulate the website backend database.
    Both SQLMap and the Sqlninjia can help do various kinds of SQL injection testing.
    |'
  prefs: []
  type: TYPE_TB
- en: Web security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have discussed the general security-testing plan, it's also suggested
    to prepare security-testing instructions based on the specific domain. Each domain
    requires different kinds of security-testing tools and approaches. Generally,
    there are the web, virtualization, firmware, big data, privacy, and IoT security
    domains.
  prefs: []
  type: TYPE_NORMAL
- en: 'Web services are the most common presentation of applications and cloud services.
    Almost all the cloud services are presented with Web UI, which can be easily managed
    by any browser without installing a client application. Besides, the restful API
    communication that is used for inter-services communication is also built on top
    of HTTPS. The web security can be seen as the foundation of cloud services. When
    it speaks to web security, we have to be familiar with the **Open Web Application
    Security Project** (**OWASP**) **Top 10**, which lists the most common web security
    issues by an **Industry-Ranked Survey**. Take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A1:2017-Injection**: Any source of data input can cause an injection attack,
    the common attacks include SQL injection, command injection, XML injection, and
    so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A2:2017-Broken Authentication**: Weak password policy, authentication controls,
    or session management may allow the attackers to gain unauthorized accounts access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A3:2017-Sensitive Data Exposure**: Insecure data transmission, or weak encryption
    or access control of the data storage may result in personal data exposure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A4:2017-XML External Entities** (**XXE**):  The uses of XML processor vulnerability
    to do XXE injection to achieve remote control, steal data, or denial-of-service
    attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A5:2017-Broken Access Control**: It''s the weak or missing access control
    with privileged functions, URLs, or critical resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A6:2017-Security Misconfiguration**: The attack may use default accounts,
    enabled services, error message, directory listing, default permissions or known
    vulnerabilities to attack the system. The security configurations include application
    services, network services, web server, application server, database, frameworks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A7:2017-Cross-Site Scripting** (**XSS**):  The uses of Cross-Site Scripting
    (XSS) allow the attacker to execute arbitrary HTML and JavaScript in the victim’s
    browser or stores attacker-controllable data on the web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A8:2017-Insecure Deserialization**: The serialization is the common process
    of converting an object into a stream of bytes in order to transmit it to memory,
    a database, or a file. The attacks may tamper with the object or data to achieve
    remote code injection attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A9:2017-Using Components with Known Vulnerabilities**: It includes any vulnerable dependencies
    or unused libraries in the  OS, web/application server, database management system
    (DBMS), applications, APIs and all components, runtime environments, and libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A10:2017-Insufficient Logging and Monitoring**: The lacks of logging or monitoring
    may allow the attacks or unauthorized users to steal sensitive information without
    being detected or audited.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OWASP also suggests that security testers consider using **Open Web Application
    Security Project** (**OWASP**), **Application Security Verification Standard**
    (**ASVS**), OWASP Testing Guide, and OWASP Security Knowledge Framework as an
    input, and don''t just depend on specific security tools to do all the security
    assurance. There is no one-size-fits-all solution. Don''t just copy and apply
    all those OWASP projects. Review the needs of existing projects and identify common
    security baselines. You can perform certain customizations to fit the project''s
    needs. Take a look at this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **OWASP projects** | **Project objective and reference** |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP Top 10 | OWASP Top 10 lists the 10 most critical web security issues. It
    also provides information on how to identify whether the application is vulnerable,
    how to prevent attacks, examples of attack scenarios, and related references to
    each critical security issue.  |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP ASVS | The OWASP Application Security Verification Standard provides
    a list of application security requirements and can also be used as a security-testing
    checklist.   |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP Testing Guide | The OWASP Testing Guide provides how-to test cases
    and suggested tools.  |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP Security Knowledge Framework (SKF) | The OWASP SKF can help to build
    your security knowledge portal, which includes the OWASP ASVS checklist, security
    knowledge base, and code examples.  |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP Security Mobile Testing Guide Project (MSTG) | This is a good reference
    for the mobile (Apple iOS and Android) application-testing guide, which provides
    the mobile-testing methodologies and also suggested testing tools.  |'
  prefs: []
  type: TYPE_TB
- en: Privacy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two kinds of privacy information that need to be protected. One is
    the sensitive information related to the application security, such as the password,
    API key, encryption key, CA certificate, and the other one is the **Personally
    Identifiable Information** (**PII**), which is also regulated by GDPR. For the
    sensitive information review, the functions that relate to IAM, encryption, session
    management, logging, CA manager, and administration are those modules that directly
    handle the sensitive information. Here are the general testing guidelines for
    the privacy data-handling life cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Data life cycle** | **Testing key points** | **Suggested testing tools**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Transmission of data |'
  prefs: []
  type: TYPE_TB
- en: Ensure the sensitive information is not transmitted by GET
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The secure communication protocol such as TLS v1.2, SSH V2, SFTP, SNMP V3.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| SSLyze, NMAP, Wireshark |'
  prefs: []
  type: TYPE_TB
- en: '| Storage of data |'
  prefs: []
  type: TYPE_TB
- en: Check whether sensitive information is encrypted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check whether the permissions of the files are properly configured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| TruffleHog |'
  prefs: []
  type: TYPE_TB
- en: '| Encryption of data | No uses of weak encryption algorithms, such as MD5,
    RC4, Jackfish, and Tripple DES | Code-scanning tools |'
  prefs: []
  type: TYPE_TB
- en: '| Data access and auditing |'
  prefs: []
  type: TYPE_TB
- en: Log any sensitive data query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ACL permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| AuthMatrix |'
  prefs: []
  type: TYPE_TB
- en: '| Removal of data |'
  prefs: []
  type: TYPE_TB
- en: No sensitive information in temp, exception files, and cookies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check any plain-text sensitive information in memory and cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| GCOREWinHex LaZagne   |'
  prefs: []
  type: TYPE_TB
- en: 'In addition, there are some file types that are highly related to sensitive
    information. Here are some of the common files that may expose sensitive information
    and need either encryption or proper access permission controls in an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Files may include sensitive information** | **Files types** |'
  prefs: []
  type: TYPE_TB
- en: '| SSH key | `*rsa`, `*dsa`, `edcsa` |'
  prefs: []
  type: TYPE_TB
- en: '| Cryptographic key | `Pckcs12`, `pfx`, `p12`,`  asc`, |'
  prefs: []
  type: TYPE_TB
- en: '| Shell history files | `Bash_history`, `zsh_history` |'
  prefs: []
  type: TYPE_TB
- en: '| Shell configuration file | `bashrc`, `zshrc`, `bash_profile`,  `zsh_profile`
    |'
  prefs: []
  type: TYPE_TB
- en: '| PHP configuration file | `.INC` |'
  prefs: []
  type: TYPE_TB
- en: '| Docker configuration file | `Dockercfg` |'
  prefs: []
  type: TYPE_TB
- en: '| MySQL command history | `Mysql_history` |'
  prefs: []
  type: TYPE_TB
- en: '| Application or web logs | `.log` |'
  prefs: []
  type: TYPE_TB
- en: 'For the PII handling review, please also refer to the following industry best
    practices:'
  prefs: []
  type: TYPE_NORMAL
- en: The GDPR checklist ([https://gdprchecklist.io/](https://gdprchecklist.io/))
    provides references for the data controller and the data processor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NIST SP 800-122  *Guide to Protecting the Confidentiality of PII* ([https://csrc.nist.gov/publications/detail/sp/800-122/final](https://csrc.nist.gov/publications/detail/sp/800-122/final))
    is also useful
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Information regarding Privacy Patterns can be found here: [https://privacypatterns.org/patterns/](https://privacypatterns.org/patterns/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security-testing domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have discussed web security testing and also privacy. The security testing
    must tie in closely to the business and the target of the application, which will
    be related to not only the testing scenario but also to the testing tools. Understanding
    the application domain knowledge is always the first step to plan the security
    testing. Here is a summary of industry references for each security testing domain.
    An organization may further develop its own domain-specific testing plan based
    on these references. Take a look at this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Security domain** | **Industry Security Best Practices and Testing Guide**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Web security testing |'
  prefs: []
  type: TYPE_TB
- en: OWASP Testing Guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Virtualization security testing |'
  prefs: []
  type: TYPE_TB
- en: NIST 800-125 Guide to Security for Full Virtualization Technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PCI DSS Virtualization Guidelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat Virtualization Security Guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SANS Top Virtualization Security Mistakes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ISCACA Virtualization Security checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Firmware security testing |'
  prefs: []
  type: TYPE_TB
- en: GitHub Awesome firmware security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Security of BIOS/UEFI System Firmware from Attacker and Defender Perspectives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Big-Data security testing |'
  prefs: []
  type: TYPE_TB
- en: NIST 1500-4 Big Data Interoperability Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSA Big Data Security and Privacy Handbook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Privacy |'
  prefs: []
  type: TYPE_TB
- en: GDPR Checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NIST SP 800-122  Guide to Protecting the Confidentiality of PII
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| IoT security |'
  prefs: []
  type: TYPE_TB
- en: ENISA Baseline Security Recommendations for IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GSMA IOT Security Assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Container security |'
  prefs: []
  type: TYPE_TB
- en: NIST 800-190 Application Container Security Guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Mobile security |'
  prefs: []
  type: TYPE_TB
- en: OWASP MSTG (Mobile Security Testing Guide)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Thinking like a hacker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security testing requires a systematic approach to review an application with
    a comprehensive set of security-testing cases. We refer to some industry best
    practices and tools to plan security testing. On the other hand, we should also
    learn from white-hat or real hackers. The purpose of studying real threats and
    exploits is to review and improve the existing security testing methodologies
    and tools. The following sections contain some of the recommended references for
    real-world exploits.
  prefs: []
  type: TYPE_NORMAL
- en: Exploits and CVE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These resources provide the proof-of-concept (PoC) testing scripts and tools
    of CVEs. They''re valuable because we may apply or customize those testing scripts
    to be parts of our security testing toolsets. The Security Focus, Packet Storm
    Security, and Exploit Database provide not only the CVEs information but also
    security testing tools and PoC scripts. Check out the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Security Focus: The Security Focus lists the technical details of every CVE
    vulnerability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packet Storm Security: In addition to the exploits, it provides lots of updated
    security tools and security whitepapers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit Database:  It provides the exploits, shellcode, security whitepapers,
    and also google hacking database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, for the Java deserialization security issue, you may search the
    keyword *deserialization* for the specific vulnerable product, the testing scripts
    (mostly in Python), and the paper that describes the deserialization concept and
    testing techniques. It can be found at the Exploit Database [https://www.exploit-db.com/](https://www.exploit-db.com/)
  prefs: []
  type: TYPE_NORMAL
- en: In addition, **Exploit kits** are also worth studying. These exploit kits can
    generate malicious payload and attack tools to target specific software vulnerabilities
    or create backdoor connections. ExploitPack and Metasploit are the most common
    testing framework in this category.
  prefs: []
  type: TYPE_NORMAL
- en: Hacker techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Adversarial Tactics, Techniques & Common Knowledge** (**ATT&CK**) gives
    a comprehensive list of malicious threats tactics and techniques for most platforms,
    including Windows, Linux, macOS, and mobile. For example, the **AppInit DLLs** in
    one of Windows Technique Matrix, the ATT&CK explains AppInit DLLs, examples, mitigation,
    detection and references ([https://attack.mitre.org/wiki/Technique/T1103](https://attack.mitre.org/wiki/Technique/T1103)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the testing scripts that can be used to simulate the APT attacks or
    the ATT&CK. These can be used to test whether existing security solutions are
    able to detect those suspicious behaviors. Refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'APT Simulator: It includes the toolset and PowerShell scripts to generate the
    attacks on Windows. [https://github.com/NextronSystems/APTSimulator](https://github.com/NextronSystems/APTSimulator)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Atomic Red Team: It can generate the attack scenarios based on MITRE''s ATT&CK[https://github.com/redcanaryco/atomic-red-team](https://github.com/redcanaryco/atomic-red-team)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Understanding real-world malware attacks is another way to review our security
    defenses. The US-CERT is a valuable reference since it provides detailed technical
    analysis of major malware attacks, the detection suggestions, an indicator of
    compromise, the signatures of the malware, the impact of the applications, and
    the defensive technique solutions. For the "Alerts and Tips" section, check out
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**US-CERT Alerts**: [https://www.us-cert.gov/ncas/alerts](https://www.us-cert.gov/ncas/alerts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security-Training environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s against the law to do security or penetration testing without permission.
    Developing the skills of security testing requires a proper testing environment
    or a training platform. These security-testing environments are purpose-built
    vulnerable web or mobile applications. Some security-testing environments even
    provide online tutorials to guide you through the security-testing tips. Refer
    to the OWASP projects listed below for a comprehensive list of online or offline
    virtualization images for the security-testing environment. If it''s possible,
    set up an in-house security-testing environment instead of using the external
    online testing site. Here are some vulnerable application projects that can help
    to build a security-testing environment. Be aware that these are vulnerable applications,
    so set up these applications in a security-controlled environment. The following
    open source projects are examples of vulnerable web applications for security
    testing purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OWASP Broken Web Application Project**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Vulnerable Web Application Directory Project**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Security Shepherd**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MITRE Vulnerable Mobile Apps**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To encourage the involvement of security testing, an in-house security testing
    competition may be held. The rewards can be based on the severity of the reported
    security issue. For external WhiteHat security researchers, consider setting up
    a security bug bounty program to reward the submitted vulnerabilities. For example,
    the Google Bug Hunter University defines defined rules of the non-qualifying findings
    and the reward program such as 'Google application Security Reward program' and
    the 'Google Bug Hunter University'.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have suggested the setting up of a security-testing knowledge
    kit to include the testing guides and related security tools. The **OWASP** **Security
    Knowledge Framework** (**SKF**) provides an in-house security-testing knowledge
    portal with an OWASP ASVS checklist, security knowledge, and a code example by
    default. The security team can use the OWASP SKF to further customize the security-testing
    knowledge portal.
  prefs: []
  type: TYPE_NORMAL
- en: To develop a security-testing plan, we suggested referring to the industry references,
    such as an OWASP testing guide, a PCI penetration testing guide, a NIST 800-115,
    and a **Mobile Security Testing Guide** (**MSTG**). One typical security-testing
    plan should include the testing objective, baseline, testing environment, testing
    strategy, identified high-risk modules, and also the recommended security-testing
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed some OWASP projects that can help the web and mobile applications
    security testing. In addition to this, we discussed the fact that how the applications
    handle the privacy information and sensitive data is also critical to security
    testing. We discussed the security-testing focus and tools for the data lifecycle
    and listed common system files that may include highly sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to web and mobile security, we also listed other security-testing
    domains and related industry references, including virtualization, firmware, big
    data, privacy, IoT security, and containers. Finally, to increase your security-testing
    knowledge, we shared some references that can help to understand the techniques
    that hackers use, such as exploits and CVE, hacker techniques, exploit kits, and
    a malware case study. The security-training environment can provide an in-house
    security-testing bed for the internal team to do hands-on security-testing practices.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss whitebox security-testing tips.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The suggested *security testing kit* should include which of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Privacy checklist
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing toolkits
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Security testing plan templates
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which industry reference refers to the mobile security?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OWASP testing guide
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NIST 800-115 pentest
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Moible Security Testing Guide (MSTG)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PCI Pentest Guide
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the testing strategy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a security checklist
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It defines the testing approaches for the high-risk functions
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a white-box testing
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a black-box testing
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not a typical high-risk module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Administration management
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Password reset
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following security tools is not used for web security?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OWASP ZAP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Arachni
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Burp
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following communication protocols is not secure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TLS v1.2
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH v1
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SFTP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SNMP v3
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What can the ATT&CK resource not provide?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security testing tools
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Adversarial Tactics
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Adversarial Techniques
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Adversarial Knowledge
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the OWASP Broken Web Application project used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a web security scanning tool
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a security checklist
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a purpose-built vulnerable web application for security testing practices
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's an automation-testing framework
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit the following URLs for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GitHub Awesome PenTest**: [https://github.com/enaqx/awesome-pentest/](https://github.com/enaqx/awesome-pentest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PCI penetration guide**: [https://www.pcisecuritystandards.org/documents/Penetration_Testing_Guidance_March_2015.pdf](https://www.pcisecuritystandards.org/documents/Penetration_Testing_Guidance_March_2015.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-115 Technical Guide to Information Security Testing and Assessment**: [https://csrc.nist.gov/publications/detail/sp/800-115/final](https://csrc.nist.gov/publications/detail/sp/800-115/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GSMA IOT Security Assessment**: [https://www.gsma.com/iot/future-iot-networks/iot-security-guidelines/](https://www.gsma.com/iot/future-iot-networks/iot-security-guidelines/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-125 Guide to Security for Full Virtualization Technologies:** [https://csrc.nist.gov/publications/detail/sp/800-125/final](https://csrc.nist.gov/publications/detail/sp/800-125/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ISCACA Virtualization Security checklist:** [http://www.isaca.org/Knowledge-Center/Research/Documents/Virtualization-Security-Checklist_res_Eng_1010.pdf](http://www.isaca.org/Knowledge-Center/Research/Documents/Virtualization-Security-Checklist_res_Eng_1010.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub** **Awesome** **firmware** **security**: [https://github.com/PreOS-Security/awesome-firmware-security](https://github.com/PreOS-Security/awesome-firmware-security)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub Security of BIOS/UEFI System Firmware from Attacker and Defender Perspectives:**
    [https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/BIOS%20UEFI%20Attacks%20Defenses.md](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/BIOS%20UEFI%20Attacks%20Defenses.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 1500-4 Big Data Security and Privacy:** [https://www.nist.gov/publications/nist-big-data-interoperability-framework-volume-4-security-and-privacy](https://www.nist.gov/publications/nist-big-data-interoperability-framework-volume-4-security-and-privacy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSA Big Data Security and Privacy Handbook:** [https://downloads.cloudsecurityalliance.org/assets/research/big-data/BigData_Security_and_Privacy_Handbook.pdf](https://downloads.cloudsecurityalliance.org/assets/research/big-data/BigData_Security_and_Privacy_Handbook.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST SP 800-122 Guide to Protecting the Confidentiality of PII:** [https://csrc.nist.gov/publications/detail/sp/800-122/final](https://csrc.nist.gov/publications/detail/sp/800-122/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ENISA Baseline Security Recommendations for IoT: ** [https://www.enisa.europa.eu/publications/baseline-security-recommendations-for-iot/at_download/fullReport](https://www.enisa.europa.eu/publications/baseline-security-recommendations-for-iot/at_download/fullReport)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GSMA IOT Security Assessment:** [https://www.gsma.com/iot/future-iot-networks/iot-security-guidelines/](https://www.gsma.com/iot/future-iot-networks/iot-security-guidelines/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-190 Application Container Security Guide:** [https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-190.pdf](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-190.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
