- en: Working with Code Repository Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码库系统
- en: In the last chapter, we learned what DevOps means for the application development
    life cycle, and the key differences between DevOps and mobile DevOps, while also
    exploring the challenges faced in applying DevOps to the mobile app development
    cycle.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了DevOps在应用开发生命周期中的意义，DevOps与移动DevOps之间的关键区别，同时探讨了将DevOps应用于移动应用开发周期所面临的挑战。
- en: In this chapter, we will be exploring code repository systems, as the title
    of the chapter suggests. We will discuss various versioning tools available and
    focus mainly on Git to get into detailed steps for source versioning and we'll
    be using that as our code repository in examples throughout the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，正如章节标题所示，我们将探讨代码库系统。我们将讨论各种可用的版本控制工具，并主要关注Git，以便详细了解源代码版本管理步骤，我们将在全书示例中使用Git作为代码库。
- en: 'Some of the topics covered in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的一些主题如下：
- en: Varieties of version control
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制的种类
- en: Source code management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码管理
- en: Using Git to create a repository for your project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Git为项目创建一个代码库
- en: Creating an account with GitHub
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub上创建一个帐户
- en: Managing users and groups
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理用户和组
- en: Configuring SSH keys
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置SSH密钥
- en: Source code management
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码管理
- en: In the mobile DevOps life cycle, one of the first phases is application development.
    Coding is one of the most important parts of the development life cycle, and managing
    that code is even more important in the long term.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动DevOps生命周期中，应用开发是其中的第一阶段。编码是开发生命周期中最重要的部分，而长期来看，管理这些代码更为重要。
- en: When developers are continuously coding an application, managing that code becomes
    troublesome if not done properly. As the development progresses, code merges are
    more frequent and, with time, the development team grows quickly and more people
    need to integrate code with other developers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者持续编写应用程序时，如果管理不当，代码的管理会变得麻烦。随着开发的进展，代码合并的频率越来越高，随着时间推移，开发团队迅速扩大，更多的人需要与其他开发者整合代码。
- en: Source code management becomes tricky and a very important part to focus on
    in order to ensure seamless development and code integration.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码管理变得复杂，成为必须重点关注的一个重要部分，以确保无缝的开发和代码集成。
- en: Need for source code management
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要进行源代码管理
- en: Let's take a real-world example of application development in a small company.
    The team is of two people initially. The team starts coding the application and
    keeps their code in their local machines.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个小公司的应用开发为实际例子。团队最初有两个人。团队开始编写应用程序，并将代码保存在本地机器上。
- en: At the end of the day, both the developers share their changes and integrate
    their code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在一天结束时，两位开发者分享他们的更改并整合代码。
- en: Everything goes fine at this point, because it is easy for two developers to
    check the files, merge their code, and copy files. After some time, two more people
    join the development team and now they need to manage and merge their code and
    make changes every day.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此时一切顺利，因为两位开发者很容易检查文件、合并代码和复制文件。过了一段时间，另外两个人加入了开发团队，现在他们需要管理和合并代码，并每天进行更改。
- en: 'These are the challenges the team now face:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是团队当前面临的挑战：
- en: '**Code merge issues**: Whenever new developers make changes in the code files,
    they''ll have to share their files with five different developers. This could
    create a lot of unmanaged code changes that are not properly synced. In this manual
    process of code merging, it is possible that some changes might be missed.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码合并问题**：每当新开发者对代码文件进行更改时，他们必须将自己的文件与五个不同的开发者共享。这可能会产生大量未管理的代码更改，导致无法正确同步。在这种手动合并代码的过程中，可能会错过一些更改。'
- en: '**Time wasted in manual checks**: There is a lot of time wasted in the manual
    process of checking the code changes and making sure all the changes are merged,
    manual copy-pasting, and again verifying that everything is properly integrated,
    making sure no changes are missed, and then building again manually to ensure
    the changes do not fail the build.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动检查中浪费的时间**：在手动检查代码更改并确保所有更改都已合并、手动复制粘贴，再次验证一切是否正确集成，确保没有遗漏更改，然后再次手动构建以确保更改不会导致构建失败的过程中，会浪费大量时间。'
- en: '**No record of code changes**: In the manual process of code merging, there
    is no record of the changes made by developers. There is a very high chance that
    a code change might break some functionality and it will not be discovered until
    late in the development process. There is no track of who made which change in
    the code, and this makes troubleshooting much more time-consuming and difficult.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有代码更改记录**：在手动代码合并过程中，开发人员的更改没有记录。代码更改可能会破坏某些功能，但直到开发过程的后期才会被发现。没有记录谁做了哪些更改，这使得故障排除变得更加耗时且困难。'
- en: '**No one place for the latest code**: Because code is not regularly checked
    in to any central repository, it creates dependency over developers and makes
    it difficult to transfer codebases to new systems and teams.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有统一的最新代码位置**：因为代码没有定期提交到任何中央代码库，所以它依赖于开发人员，并且使得将代码库迁移到新的系统和团队变得困难。'
- en: '**Distributed development**: When the team expands and becomes a distributed
    team working from different locations, which is quite normal in today''s world,
    code merging and change tracking become a big challenge if you don''t have a source
    code management solution. Developers make code changes from different places and
    need to merge them; this gets challenging since now they need to merge the code
    every day with all team members and it cannot be done by simple file sharing systems.
    A lot of tracking and merging is required in such a process.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式开发**：当团队扩展并成为一个分布在不同地点的分布式团队时，这在今天的世界中非常普遍，如果没有源代码管理解决方案，代码合并和更改跟踪将变得非常具有挑战性。开发人员从不同地方进行代码更改并需要合并这些更改；这会变得具有挑战性，因为他们现在需要每天与所有团队成员合并代码，而这不能通过简单的文件共享系统完成。在这种过程中需要大量的跟踪和合并工作。'
- en: '**Source versioning:** Source versioning is another issue when talking about
    source code management. Without a SCM tool, developers would have to manually
    maintain folders of different versions of code and make sure everybody uses the
    same structure, and the integrations must be done in the same way. SCM tools solve
    this problem by providing options to make branches and tags for different releases
    and features, thus making the source versioning process simple, easy to follow,
    and seamless.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源版本控制**：源版本控制是谈论源代码管理时的另一个问题。如果没有源代码管理工具，开发人员必须手动维护不同版本的代码文件夹，并确保每个人使用相同的结构，且集成必须以相同的方式进行。源代码管理工具通过提供创建分支和标签的选项来解决这个问题，这样可以对不同版本和特性进行管理，从而使源版本控制过程变得简单、易于跟随且无缝。'
- en: There are many such issues that require a code repository system to ensure code
    quality, track changes, seamlessly merge code, and integrate development between
    developers. This is where source code management and code repository systems come
    into play.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 存在许多此类问题，要求使用代码库系统来确保代码质量，跟踪更改，顺利地合并代码，并促进开发人员之间的集成。这就是源代码管理和代码库系统发挥作用的地方。
- en: Common terms used in source code management and versioning
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码管理和版本控制中常用的术语
- en: 'These are some common terms used in source code management and version control
    systems. They are usually widespread and standard terms used by most control systems:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些在源代码管理和版本控制系统中常用的术语。它们通常是广泛使用的标准术语，几乎所有的控制系统都使用这些术语：
- en: '**Branch**: It is a revision of the main code where developers can make a change
    and then can merge it with the main code later. Branches can be used to maintain
    different features and to keep different releases and versions. Tags also come
    in the same category and have a similar use.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支**：分支是主代码的一个修订版本，开发人员可以在其上进行更改，然后再将其与主代码合并。分支可用于维护不同的特性，并保持不同的发布和版本。标签也属于同一类别，并具有类似的用途。'
- en: '**Change**: Change represents a modification in the source code files and is
    tracked by the source version control system.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改**：更改代表源代码文件中的修改，并通过源版本控制系统进行跟踪。'
- en: '**Checkout**: Checking out source code means to make a local copy of the repository
    code on your machine. It can also mean to get the latest code.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检出**：检出源代码意味着在你的机器上创建一个代码库的本地副本。它也可以表示获取最新的代码。'
- en: '**Clone**: Cloning is similar to checking out, except it is mostly used when
    you are cloning the remote repository into an empty local repository.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**克隆**：克隆类似于检出，区别在于它通常用于将远程代码库克隆到一个空的本地代码库中。'
- en: '**Commit**: Commit is the same as in other systems; it is basically pushing
    your local copy or working copy changes to the remote repository.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交**：提交与其他系统中的提交相同；它基本上是将你的本地副本或工作副本的更改推送到远程代码库。'
- en: '**Conflict**: Conflict occurs when different developers make changes to the
    same source file and mostly at the same place in the file. Some difference checking
    tools, such as KDiff, can be used to compare documents and make sure conflicts
    are not overridden.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冲突**：冲突发生在不同的开发人员对同一个源文件进行修改，且通常是在文件的同一部分。可以使用一些差异检查工具，如 KDiff，来比较文档并确保冲突不会被覆盖。'
- en: '**Merge**: Merging is typically done when a developer makes changes to a file
    that has been changed by other developers as well, and then he has to check his
    code into the repository. In these kinds of scenario, SCM tools usually give warnings
    that the code file has some changes by other developers and your changes will
    be merged into theirs. Other times, a similar situation can be resolved by merging
    changes manually to avoid conflicts, or taking the latest changes from the repository
    and then merging locally before checking in the code.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并**：当开发人员对一个文件进行修改，而这个文件也被其他开发人员修改过，并且他需要将自己的代码提交到代码库时，通常会进行合并。在这种情况下，源代码管理工具通常会给出警告，指出该文件已经有其他开发人员的更改，你的更改将与他们的更改合并。另一些时候，类似的情况可以通过手动合并来解决，以避免冲突，或者先从代码库获取最新的更改，然后在本地合并，再提交代码。'
- en: Variety of source code management
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 各种源代码管理工具
- en: Since there are different requirements for different projects, and whether your
    project is centralized or distributed, different types of source code management
    might be required for different teams and organizations. Some organizations might
    require it to be in one place, while others want their code base to be distributed
    and not maintained in a single place.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不同的项目有不同的需求，而且根据你的项目是集中式还是分布式，团队和组织可能需要不同类型的源代码管理。有些组织可能要求将代码集中存放，而其他组织则希望代码库分散，不在单一位置维护。
- en: 'Keeping all those scenarios in mind, there are two types of source code management
    tools:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些场景，有两种类型的源代码管理工具：
- en: Centralized version control
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中式版本控制
- en: Distributed version control
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式版本控制
- en: Centralized version control
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集中式版本控制
- en: As the name suggests, centralized version control means there is a single central
    copy of our project code on the server and developers commit their changes to
    this central repository. In this kind of version control system, developers can
    check out their required source code files, but never have an entire local copy.
    One of the most common and well-known examples of this is **SVN**.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名字所示，集中式版本控制意味着我们的项目代码在服务器上有一个单一的中央副本，开发人员将他们的更改提交到这个中央代码库。在这种版本控制系统中，开发人员可以签出所需的源代码文件，但不能拥有整个本地副本。最常见且知名的例子之一是
    **SVN**。
- en: Distributed version control
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式版本控制
- en: Distributed version control is the opposite of centralized version control systems.
    In distributed version control systems, developers don't depend upon a central
    repository server to store all the version-related information and project files.
    They clone the repository onto their local machine, which contains all the versioning
    and branching information for the project source code. One of the most commonly
    used distributed systems is **Git**, and we'll be going deep into using Git as
    a source versioning tool in this chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式版本控制与集中式版本控制系统正好相反。在分布式版本控制系统中，开发人员不依赖于中央代码库服务器来存储所有与版本相关的信息和项目文件。他们将代码库克隆到本地计算机上，本地计算机包含项目源代码的所有版本和分支信息。最常用的分布式系统之一是
    **Git**，我们将在本章深入学习如何使用 Git 作为源代码版本控制工具。
- en: Creating an account with GitHub and using Git to create a repository
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GitHub 上创建账户并使用 Git 创建一个代码库
- en: As we described earlier, repositories are a place to manage and share your project
    code. Git allows you to create public or private repositories. Public repositories
    are open for everybody, but you can include a license file that explains how you
    want the project to be shared with others.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所描述的，代码库是用来管理和分享项目代码的地方。Git 允许你创建公共或私人代码库。公共代码库对所有人开放，但你可以包含一个许可证文件，说明你希望如何与他人共享项目。
- en: 'Follow these steps to create a repository on GitHub:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 GitHub 上创建一个代码库：
- en: 'Open a web browser, go to [https://github.com/](https://github.com/), and sign
    up for a new account by providing a username for your account and your email and
    password. You can skip this step if you already have an account on GitHub:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个网页浏览器，访问 [https://github.com/](https://github.com/)，并通过提供用户名、电子邮件和密码注册一个新账户。如果你已经在
    GitHub 上有账户，可以跳过这一步：
- en: '![](img/7cfacea7-6ab3-45cb-ae33-b87db757e8c9.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cfacea7-6ab3-45cb-ae33-b87db757e8c9.png)'
- en: 'Once the signup is done, go to [https://github.com/login](https://github.com/login)
    and sign in to your newly created account on GitHub:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册完成后，前往 [https://github.com/login](https://github.com/login) 并登录你的新创建的 GitHub
    账户：
- en: '![](img/93455d3d-4ed2-43e8-8887-d917d3bad14a.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93455d3d-4ed2-43e8-8887-d917d3bad14a.png)'
- en: 'Once signed in, in the upper-right corner of the page, click + and then click
    New repository, as shown in the following screenshot:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，在页面右上角点击“+”按钮，然后点击“新建仓库”，如下图所示：
- en: '![](img/ab0c73b6-35be-4bfa-b508-e6eeb8f37589.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0c73b6-35be-4bfa-b508-e6eeb8f37589.png)'
- en: 'On the next screen, give a name for your repository and optionally add a description.
    Also, check Initialize this repository with a README and then click on the Create
    repository button:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个页面，为你的仓库命名并可选择性地添加描述。然后，勾选“初始化仓库并添加 README”，接着点击“创建仓库”按钮：
- en: '![](img/2ea6cc46-7c22-487a-82ac-5bdb43804508.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ea6cc46-7c22-487a-82ac-5bdb43804508.png)'
- en: It was that simple to create a new repository for your project, where you can
    now push your code and manage and share it with other people in the team.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单，你可以为你的项目创建一个新仓库，现在可以推送代码并与团队中的其他人管理和共享它。
- en: Managing organization users and teams
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理组织用户和团队
- en: Organizations are a combination of multiple shared accounts and private repositories.
    Owners or administrators can manage access to the organization's data and projects.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 组织是多个共享账户和私有仓库的组合。拥有者或管理员可以管理对组织数据和项目的访问权限。
- en: Creating an organization and inviting users to join
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个组织并邀请用户加入
- en: 'Follow these steps to create your organization account on GitHub and invite
    users to join your organization on GitHub:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 GitHub 上创建你的组织账户，并邀请用户加入你的 GitHub 组织：
- en: Log in to your GitHub account by going to [https://github.com/login](https://github.com/login).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的 GitHub 账户，访问 [https://github.com/login](https://github.com/login)。
- en: 'Once logged in, click on your profile photo, then click Your profile as shown
    in the following screenshot:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，点击你的个人资料照片，然后点击“你的个人资料”，如下图所示：
- en: '![](img/d07777f7-1646-4f36-85e1-ebcfcdd83f02.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d07777f7-1646-4f36-85e1-ebcfcdd83f02.png)'
- en: 'On the next screen, click on the Edit profile button:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个页面，点击“编辑个人资料”按钮：
- en: '![](img/095c5ac6-5fc6-4610-a521-b4c919fe16b1.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/095c5ac6-5fc6-4610-a521-b4c919fe16b1.png)'
- en: 'From the left side of your page, under Personal settings, click on Organizations.
    Then, click on the New organization button to add a new organization:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面左侧，点击“个人设置”下的“组织”。然后，点击“新建组织”按钮以添加一个新组织：
- en: '![](img/aca6d56f-5424-42e2-9024-ded33fe52b18.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aca6d56f-5424-42e2-9024-ded33fe52b18.png)'
- en: 'On the next page, provide the name and email for the organization, and select
    a plan to create the organization account:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页面，提供组织的名称和电子邮件，并选择一个计划来创建组织账户：
- en: '![](img/e3616230-e56c-44a0-93f9-0f97bfc3ab27.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3616230-e56c-44a0-93f9-0f97bfc3ab27.png)'
- en: 'Click on the Create organization button:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建组织”按钮：
- en: '![](img/488e9b5f-a8a5-4e77-898f-71b7f8014867.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/488e9b5f-a8a5-4e77-898f-71b7f8014867.png)'
- en: 'Once the organization is created, you can now invite GitHub users to join your
    organization by searching for their username, full name, or email. You can also
    choose to invite them later. Click Finish to complete the organization creation
    process:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组织创建完成后，你现在可以通过搜索用户名、全名或电子邮件来邀请 GitHub 用户加入你的组织。你也可以选择稍后邀请他们。点击“完成”来完成组织创建过程：
- en: '![](img/540c4ade-4cfa-4d7d-bab7-2363e1a228d1.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/540c4ade-4cfa-4d7d-bab7-2363e1a228d1.png)'
- en: The invited person will receive an email to their registered email address inviting
    them to the organization. They will need to accept the invitation to become a
    member of the organization.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 被邀请的人会收到一封电子邮件，邀请他们加入该组织。他们需要接受邀请才能成为组织的成员。
- en: By following the preceding steps, you should be able to create an organization
    account on GitHub and invite members to the organization. Furthermore, you can
    create a repository for the organization in the same way you did for the personal
    account.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循之前的步骤，你应该能够在 GitHub 上创建组织账户并邀请成员加入该组织。此外，你还可以像为个人账户一样，为组织创建仓库。
- en: Creating a team and adding members to the team
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建团队并添加成员到团队
- en: 'Follow these steps to create a team and add members to the team on GitHub:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 GitHub 上创建团队并添加成员：
- en: 'Go to the organization page, then go to the Teams tab, and click on the New
    team button:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入组织页面，点击“团队”标签页，再点击“新建团队”按钮：
- en: '![](img/03f698f0-b35e-40c8-9492-63483c5e916c.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03f698f0-b35e-40c8-9492-63483c5e916c.png)'
- en: 'Provide the details of the team to be created and click on the Create team
    button:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供要创建的团队的详细信息，然后点击“创建团队”按钮：
- en: '![](img/67af32bd-354d-467a-be9a-e7986a76ac08.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67af32bd-354d-467a-be9a-e7986a76ac08.png)'
- en: 'Once the team is created, go to the Members tab to add members to the team:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队创建完成后，进入“成员”标签页，添加成员到团队：
- en: '![](img/153db813-d16a-4d29-a5ee-b8a02f76b558.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/153db813-d16a-4d29-a5ee-b8a02f76b558.png)'
- en: 'Click on the Add a member button to add a new member to the team:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加成员”按钮，向团队中添加新成员：
- en: '![](img/d42996dd-8b12-4e92-81d7-e98af8220639.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d42996dd-8b12-4e92-81d7-e98af8220639.png)'
- en: By following the preceding steps, you will be able to create a new team on GitHub
    and add members to it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 按照上述步骤，你将能够在 GitHub 上创建一个新团队并添加成员。
- en: Installing Git on different servers
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不同服务器上安装 Git
- en: In this topic, we'll be discussing how to install Git on different operating
    systems including Windows, Linux, and Ubuntu.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本主题将讨论如何在不同操作系统（包括 Windows、Linux 和 Ubuntu）上安装 Git。
- en: Installing Git on Windows
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Git
- en: 'Installing Git on Windows is as simple as installing any GUI-based application.
    Follow the steps to install Git on Windows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Git 就像安装任何基于 GUI 的应用程序一样简单。按照步骤在 Windows 上安装 Git：
- en: 'To download the latest Git for Windows installer, go to [https://git-scm.com/downloads](https://git-scm.com/downloads).
    Select Windows and the download will start:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要下载最新版本的 Git for Windows 安装程序，请访问 [https://git-scm.com/downloads](https://git-scm.com/downloads)。选择
    Windows，下载将自动开始：
- en: '![](img/cb4c0d1f-fc1a-45a6-b08a-582ee8841415.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb4c0d1f-fc1a-45a6-b08a-582ee8841415.png)'
- en: Once downloaded, start the installer file.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，启动安装程序文件。
- en: The next screen will ask you to accept the license. Click Next.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一屏幕会要求你接受许可协议。点击“下一步”。
- en: Provide the path for the Git installation; you can leave the default path as-is
    if you like and click Next.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供 Git 安装路径；如果你愿意，可以保持默认路径不变，然后点击“下一步”。
- en: 'The next screen is where you select how you would like to use Git on your system.
    There are multiple options provided. The first option lets you use Git from Git
    Bash, which is a command line for Git. The second option lets you user Git commands
    from both Git Bash and the Windows Command Prompt, which is great and adds flexibility
    to your use of Git. It is best to select the second option and click Next:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一屏幕是选择你希望在系统上如何使用 Git。有多个选项可供选择。第一个选项让你通过 Git Bash 使用 Git，这是 Git 的命令行工具。第二个选项允许你在
    Git Bash 和 Windows 命令提示符中都使用 Git 命令，这样非常灵活，能提高使用 Git 的便捷性。建议选择第二个选项，然后点击“下一步”：
- en: '![](img/62f4754a-67b1-4796-93d7-3ba283c7e67d.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62f4754a-67b1-4796-93d7-3ba283c7e67d.png)'
- en: 'Next, we''ll be choosing the OpenSSH client for remote connection, which is
    the default for Git:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将选择用于远程连接的 OpenSSH 客户端，这是 Git 的默认选项：
- en: '![](img/034d00ac-9c7a-4752-9216-548dca699c2f.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/034d00ac-9c7a-4752-9216-548dca699c2f.png)'
- en: 'Select the SSL library to be used for HTTPS connections. You can leave the
    default as-is, or change it according to your needs; click Next:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择用于 HTTPS 连接的 SSL 库。你可以保持默认设置，或根据需要进行更改；点击“下一步”：
- en: '![](img/c1431cfa-8a40-4912-b9de-4dcbee1a0c15.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1431cfa-8a40-4912-b9de-4dcbee1a0c15.png)'
- en: 'Select line ending styles to be used by Git while checking out your code and
    committing. You have to make a choice, because developers could be using different
    systems, such as Windows and Linux, for development purposes and line ending styles
    vary in different systems. So, keeping the same line ending style for commits
    is always recommended:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Git 在检出代码和提交时使用的行结束符样式。你需要做出选择，因为不同开发者可能使用不同的系统，如 Windows 和 Linux，行结束符样式在不同系统中有所不同。因此，始终建议保持提交时使用相同的行结束符样式：
- en: '![](img/ef1d6270-15a3-4db5-a320-95d63a0de479.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef1d6270-15a3-4db5-a320-95d63a0de479.png)'
- en: 'Select the terminal emulator to be used for Git Bash to run commands; MinTTY
    is more flexible and is the default option:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择用于 Git Bash 执行命令的终端仿真器；MinTTY 更加灵活，并且是默认选项：
- en: '![](img/bee740ea-d753-4fa7-afe1-04407389e749.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bee740ea-d753-4fa7-afe1-04407389e749.png)'
- en: 'In the final step, select all the features you would like to enable and click
    Install:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一步，选择你希望启用的所有功能，然后点击“安装”：
- en: '![](img/f3f15edb-21f6-4899-83c2-4ba1ee5e2d21.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3f15edb-21f6-4899-83c2-4ba1ee5e2d21.png)'
- en: 'Once the files are extracted into the `path` folder and installation is complete,
    click Finish:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦文件提取到`path`文件夹并完成安装，点击“完成”：
- en: 'Now, open a command prompt or Git Bash and run the following commands to set
    your username and email to be configured:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开命令提示符或 Git Bash，运行以下命令来配置你的用户名和电子邮件：
- en: '![](img/7318c09e-7211-48c3-abca-9d6e92bed089.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7318c09e-7211-48c3-abca-9d6e92bed089.png)'
- en: Git installation is now completed, and the user's identity is configured to
    be used for commits.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Git 安装已完成，且用户身份已配置为用于提交。
- en: Installing Git on CentOS/RHEL servers
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CentOS/RHEL 服务器上安装 Git
- en: 'To install Git on a CentOS or RHEL server, follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 CentOS 或 RHEL 服务器上安装 Git，请按照以下步骤操作：
- en: 'From your shell, install Git using `yum` (or `dnf` on older versions of Fedora):'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的 shell 中，使用 `yum`（或旧版 Fedora 上的 `dnf`）安装 Git：
- en: '[PRE0]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE1]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Verify the installation was successful by typing the following command:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令验证安装是否成功：
- en: '[PRE2]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Configure the username and email address for all repositories:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置所有仓库的用户名和电子邮件地址：
- en: '[PRE3]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Install the necessary build dependencies using `dnf` (or `yum` on older versions
    of Fedora):'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `dnf`（或旧版 Fedora 上的 `yum`）安装必要的构建依赖：
- en: '[PRE4]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or using the `yum`-Epel repo:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用 `yum`-Epel 仓库：
- en: '[PRE5]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Symlink `docbook2x` to the filename that the Git build expects:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `docbook2x` 创建为 Git 构建期望的文件名符号链接：
- en: '[PRE6]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Clone the Git source (or if you don''t yet have a version of Git installed,
    download and extract it):'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆 Git 源代码（如果你还没有安装 Git 版本，请下载并解压）：
- en: '[PRE7]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To build the Git source and install it under `/usr`, run `make`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建 Git 源代码并将其安装到 `/usr` 目录下，请运行 `make`：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Following the preceding steps will install and configure Git on a CentOS/RHEL
    server.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前的步骤将在 CentOS/RHEL 服务器上安装并配置 Git。
- en: Installing Git on Ubuntu/Debian systems
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu/Debian 系统上安装 Git
- en: 'To install Git on Ubuntu systems, follow these steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 系统上安装 Git，请按照以下步骤操作：
- en: 'From your shell, install Git using the `apt-get` command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的 shell 中，使用 `apt-get` 命令安装 Git：
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Verify the installation was successful by typing `git --version`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入 `git --version` 验证安装是否成功：
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Configure your Git username and email for a single repository:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为单个仓库配置 Git 用户名和电子邮件：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Install the necessary dependencies using the `apt-get` command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `apt-get` 命令安装必要的依赖：
- en: '[PRE12]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Clone the Git source (or if you don''t yet have a version of Git installed,
    download and extract it):'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆 Git 源代码（如果你还没有安装 Git 版本，请下载并解压）：
- en: '[PRE13]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To build the Git source and install it under `/usr`, run `make`:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建 Git 源代码并将其安装到 `/usr` 目录下，请运行 `make`：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With this, we have discussed installing and configuring Git on different platforms,
    including Windows, CentOS, and Linux systems.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经讨论了在不同平台上安装和配置 Git，包括 Windows、CentOS 和 Linux 系统。
- en: Configuring SSH keys
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 SSH 密钥
- en: 'To configure and set up SSH keys for your GitHub account, follow these steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要为你的 GitHub 账户配置和设置 SSH 密钥，请按照以下步骤操作：
- en: Check whether you already have an `ssh` key pair.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否已经有 `ssh` 密钥对。
- en: 'Open Git Bash and enter `ls -al ~/.ssh` to see whether existing SSH keys are
    present:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Git Bash，输入 `ls -al ~/.ssh` 查看是否已存在 SSH 密钥：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/d219f8eb-26f6-467f-9330-a4be18aa42ec.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d219f8eb-26f6-467f-9330-a4be18aa42ec.png)'
- en: The public key consists of the `.pub` extension. Create a new key pair (skip
    this step if you already have a key pair).
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 公钥的扩展名是 `.pub`。创建一个新的密钥对（如果你已经有密钥对，可以跳过此步骤）。
- en: 'Open Git Bash and paste in the following text, substituting your GitHub email
    address for the one shown:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Git Bash 并粘贴以下文本，替换为你的 GitHub 电子邮件地址：
- en: '[PRE16]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/1cfe963b-21e7-439e-accb-0c8065f21a38.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1cfe963b-21e7-439e-accb-0c8065f21a38.png)'
- en: 'When you''re prompted to `Enter a file in which to save the key`, press the
    *Enter* button to accept the default file location mentioned:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当系统提示你 `Enter a file in which to save the key` 时，按 *Enter* 键接受默认的文件位置：
- en: '![](img/949b9132-be2b-4fd2-bc61-ac9e3a5f3709.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/949b9132-be2b-4fd2-bc61-ac9e3a5f3709.png)'
- en: 'When prompted, type a secure passphrase (recommended), or press *Enter* to
    continue without a passphrase:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当系统提示时，输入一个安全的密码短语（推荐），或者按 *Enter* 继续而不设置密码短语：
- en: '![](img/5ffa7516-077f-44cf-85b9-0bf5b6b821c7.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ffa7516-077f-44cf-85b9-0bf5b6b821c7.png)'
- en: 'The entire setup will look as shown in the following screenshot:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个设置过程将在以下截图中显示：
- en: '![](img/afa5c48e-e905-43ea-96c0-a6e650e427e9.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afa5c48e-e905-43ea-96c0-a6e650e427e9.png)'
- en: 'Add the newly created SSH keys into `ssh-agent`; for that, ensure `ssh-agent`
    is running:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的 SSH 密钥添加到 `ssh-agent` 中；为此，请确保 `ssh-agent` 正在运行：
- en: '[PRE17]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/35dad196-03f2-4a28-8b27-4e810ee49b74.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35dad196-03f2-4a28-8b27-4e810ee49b74.png)'
- en: Add the newly created private key to `ssh-agent`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的私钥添加到 `ssh-agent`。
- en: 'If you created your key with a different name, or if you are adding an existing
    key that has a different name, replace `id_rsa` in the command with the name of
    your private key file:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用不同的名称创建了密钥，或者你要添加的现有密钥使用不同的名称，请将命令中的 `id_rsa` 替换为你的私钥文件名：
- en: '![](img/9e2ae767-f962-4f77-85d5-87098d89fa14.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e2ae767-f962-4f77-85d5-87098d89fa14.png)'
- en: To add SSH keys to your GitHub account, download/copy the public key from `~/.ssh/id_rsa.pub`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将SSH密钥添加到GitHub账户中，请下载/复制`~/.ssh/id_rsa.pub`中的公钥。
- en: 'You can also copy the public key manually, or you can use the following tools:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以手动复制公钥，或者使用以下工具：
- en: '**Windows**:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows**:'
- en: '`**$ clip < ~/.ssh/id_rsa.pub**` **Linux**:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`**$ clip < ~/.ssh/id_rsa.pub**` **Linux**:'
- en: '`**$ sudo apt-get install xclip**`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`**$ sudo apt-get install xclip**`'
- en: '`**$ xclip -sel clip < ~/.ssh/id_rsa.pub**`'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`**$ xclip -sel clip < ~/.ssh/id_rsa.pub**`'
- en: '**Mac**:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mac**:'
- en: '`**$ pbcopy < ~/.ssh/id_rsa.pub**`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`**$ pbcopy < ~/.ssh/id_rsa.pub**`'
- en: 'In the upper-right corner of the GitHub page, click your profile photo, and
    then click Settings:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GitHub页面的右上角，点击你的个人头像，然后点击设置：
- en: '![](img/1dacaf46-10e1-430a-bc57-1d1a2ea84307.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1dacaf46-10e1-430a-bc57-1d1a2ea84307.png)'
- en: 'In the Personal settings sidebar, click on SSH and GPG keys, and then select
    New SSH key:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在个人设置侧边栏中，点击SSH和GPG密钥，然后选择新建SSH密钥：
- en: '![](img/41413c8c-a9c3-4be4-98b1-c642f7c8b00c.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41413c8c-a9c3-4be4-98b1-c642f7c8b00c.png)'
- en: 'Give a meaningful name to your key in the Title field and paste your key into
    the Key field. Click on Add SSH key:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标题栏输入一个有意义的名称，并将你的密钥粘贴到密钥栏中。点击添加SSH密钥：
- en: '![](img/e10b5037-fb4e-416b-aa68-58c19e90bad7.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e10b5037-fb4e-416b-aa68-58c19e90bad7.png)'
- en: When prompted, type your GitHub password.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当提示时，输入你的GitHub密码。
- en: 'The newly added SSH keys will look like this:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新添加的SSH密钥将如下所示：
- en: '![](img/e6fe1f18-5c2f-4574-ae84-d735a2a77d77.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6fe1f18-5c2f-4574-ae84-d735a2a77d77.png)'
- en: Great, so now you have successfully added SSH keys to your GitHub account!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在你已经成功将SSH密钥添加到你的GitHub账户了！
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about different version control systems and source
    code management in detail. We also delved into using Git to create a repository
    and manage teams and organizations. In the next chapter, you'll be introduced
    to cross-platform application development using Xamarin and using Visual Studio
    for development.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细了解了不同的版本控制系统和源代码管理。我们还深入探讨了如何使用Git创建仓库并管理团队和组织。在下一章，你将学习使用Xamarin进行跨平台应用开发，并使用Visual
    Studio进行开发。
