- en: Working with Code Repository Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we learned what DevOps means for the application development
    life cycle, and the key differences between DevOps and mobile DevOps, while also
    exploring the challenges faced in applying DevOps to the mobile app development
    cycle.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be exploring code repository systems, as the title
    of the chapter suggests. We will discuss various versioning tools available and
    focus mainly on Git to get into detailed steps for source versioning and we'll
    be using that as our code repository in examples throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Varieties of version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Git to create a repository for your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an account with GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing users and groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring SSH keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the mobile DevOps life cycle, one of the first phases is application development.
    Coding is one of the most important parts of the development life cycle, and managing
    that code is even more important in the long term.
  prefs: []
  type: TYPE_NORMAL
- en: When developers are continuously coding an application, managing that code becomes
    troublesome if not done properly. As the development progresses, code merges are
    more frequent and, with time, the development team grows quickly and more people
    need to integrate code with other developers.
  prefs: []
  type: TYPE_NORMAL
- en: Source code management becomes tricky and a very important part to focus on
    in order to ensure seamless development and code integration.
  prefs: []
  type: TYPE_NORMAL
- en: Need for source code management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a real-world example of application development in a small company.
    The team is of two people initially. The team starts coding the application and
    keeps their code in their local machines.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, both the developers share their changes and integrate
    their code.
  prefs: []
  type: TYPE_NORMAL
- en: Everything goes fine at this point, because it is easy for two developers to
    check the files, merge their code, and copy files. After some time, two more people
    join the development team and now they need to manage and merge their code and
    make changes every day.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the challenges the team now face:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code merge issues**: Whenever new developers make changes in the code files,
    they''ll have to share their files with five different developers. This could
    create a lot of unmanaged code changes that are not properly synced. In this manual
    process of code merging, it is possible that some changes might be missed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time wasted in manual checks**: There is a lot of time wasted in the manual
    process of checking the code changes and making sure all the changes are merged,
    manual copy-pasting, and again verifying that everything is properly integrated,
    making sure no changes are missed, and then building again manually to ensure
    the changes do not fail the build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No record of code changes**: In the manual process of code merging, there
    is no record of the changes made by developers. There is a very high chance that
    a code change might break some functionality and it will not be discovered until
    late in the development process. There is no track of who made which change in
    the code, and this makes troubleshooting much more time-consuming and difficult.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No one place for the latest code**: Because code is not regularly checked
    in to any central repository, it creates dependency over developers and makes
    it difficult to transfer codebases to new systems and teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed development**: When the team expands and becomes a distributed
    team working from different locations, which is quite normal in today''s world,
    code merging and change tracking become a big challenge if you don''t have a source
    code management solution. Developers make code changes from different places and
    need to merge them; this gets challenging since now they need to merge the code
    every day with all team members and it cannot be done by simple file sharing systems.
    A lot of tracking and merging is required in such a process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source versioning:** Source versioning is another issue when talking about
    source code management. Without a SCM tool, developers would have to manually
    maintain folders of different versions of code and make sure everybody uses the
    same structure, and the integrations must be done in the same way. SCM tools solve
    this problem by providing options to make branches and tags for different releases
    and features, thus making the source versioning process simple, easy to follow,
    and seamless.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many such issues that require a code repository system to ensure code
    quality, track changes, seamlessly merge code, and integrate development between
    developers. This is where source code management and code repository systems come
    into play.
  prefs: []
  type: TYPE_NORMAL
- en: Common terms used in source code management and versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are some common terms used in source code management and version control
    systems. They are usually widespread and standard terms used by most control systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Branch**: It is a revision of the main code where developers can make a change
    and then can merge it with the main code later. Branches can be used to maintain
    different features and to keep different releases and versions. Tags also come
    in the same category and have a similar use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change**: Change represents a modification in the source code files and is
    tracked by the source version control system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Checkout**: Checking out source code means to make a local copy of the repository
    code on your machine. It can also mean to get the latest code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clone**: Cloning is similar to checking out, except it is mostly used when
    you are cloning the remote repository into an empty local repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commit**: Commit is the same as in other systems; it is basically pushing
    your local copy or working copy changes to the remote repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conflict**: Conflict occurs when different developers make changes to the
    same source file and mostly at the same place in the file. Some difference checking
    tools, such as KDiff, can be used to compare documents and make sure conflicts
    are not overridden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Merge**: Merging is typically done when a developer makes changes to a file
    that has been changed by other developers as well, and then he has to check his
    code into the repository. In these kinds of scenario, SCM tools usually give warnings
    that the code file has some changes by other developers and your changes will
    be merged into theirs. Other times, a similar situation can be resolved by merging
    changes manually to avoid conflicts, or taking the latest changes from the repository
    and then merging locally before checking in the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variety of source code management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since there are different requirements for different projects, and whether your
    project is centralized or distributed, different types of source code management
    might be required for different teams and organizations. Some organizations might
    require it to be in one place, while others want their code base to be distributed
    and not maintained in a single place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping all those scenarios in mind, there are two types of source code management
    tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Centralized version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centralized version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, centralized version control means there is a single central
    copy of our project code on the server and developers commit their changes to
    this central repository. In this kind of version control system, developers can
    check out their required source code files, but never have an entire local copy.
    One of the most common and well-known examples of this is **SVN**.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Distributed version control is the opposite of centralized version control systems.
    In distributed version control systems, developers don't depend upon a central
    repository server to store all the version-related information and project files.
    They clone the repository onto their local machine, which contains all the versioning
    and branching information for the project source code. One of the most commonly
    used distributed systems is **Git**, and we'll be going deep into using Git as
    a source versioning tool in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an account with GitHub and using Git to create a repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we described earlier, repositories are a place to manage and share your project
    code. Git allows you to create public or private repositories. Public repositories
    are open for everybody, but you can include a license file that explains how you
    want the project to be shared with others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create a repository on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a web browser, go to [https://github.com/](https://github.com/), and sign
    up for a new account by providing a username for your account and your email and
    password. You can skip this step if you already have an account on GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7cfacea7-6ab3-45cb-ae33-b87db757e8c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the signup is done, go to [https://github.com/login](https://github.com/login)
    and sign in to your newly created account on GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93455d3d-4ed2-43e8-8887-d917d3bad14a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once signed in, in the upper-right corner of the page, click + and then click
    New repository, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab0c73b6-35be-4bfa-b508-e6eeb8f37589.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, give a name for your repository and optionally add a description.
    Also, check Initialize this repository with a README and then click on the Create
    repository button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2ea6cc46-7c22-487a-82ac-5bdb43804508.png)'
  prefs: []
  type: TYPE_IMG
- en: It was that simple to create a new repository for your project, where you can
    now push your code and manage and share it with other people in the team.
  prefs: []
  type: TYPE_NORMAL
- en: Managing organization users and teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Organizations are a combination of multiple shared accounts and private repositories.
    Owners or administrators can manage access to the organization's data and projects.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an organization and inviting users to join
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create your organization account on GitHub and invite
    users to join your organization on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your GitHub account by going to [https://github.com/login](https://github.com/login).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once logged in, click on your profile photo, then click Your profile as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d07777f7-1646-4f36-85e1-ebcfcdd83f02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, click on the Edit profile button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/095c5ac6-5fc6-4610-a521-b4c919fe16b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the left side of your page, under Personal settings, click on Organizations.
    Then, click on the New organization button to add a new organization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aca6d56f-5424-42e2-9024-ded33fe52b18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next page, provide the name and email for the organization, and select
    a plan to create the organization account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e3616230-e56c-44a0-93f9-0f97bfc3ab27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Create organization button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/488e9b5f-a8a5-4e77-898f-71b7f8014867.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the organization is created, you can now invite GitHub users to join your
    organization by searching for their username, full name, or email. You can also
    choose to invite them later. Click Finish to complete the organization creation
    process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/540c4ade-4cfa-4d7d-bab7-2363e1a228d1.png)'
  prefs: []
  type: TYPE_IMG
- en: The invited person will receive an email to their registered email address inviting
    them to the organization. They will need to accept the invitation to become a
    member of the organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By following the preceding steps, you should be able to create an organization
    account on GitHub and invite members to the organization. Furthermore, you can
    create a repository for the organization in the same way you did for the personal
    account.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a team and adding members to the team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create a team and add members to the team on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the organization page, then go to the Teams tab, and click on the New
    team button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03f698f0-b35e-40c8-9492-63483c5e916c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide the details of the team to be created and click on the Create team
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/67af32bd-354d-467a-be9a-e7986a76ac08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the team is created, go to the Members tab to add members to the team:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/153db813-d16a-4d29-a5ee-b8a02f76b558.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Add a member button to add a new member to the team:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d42996dd-8b12-4e92-81d7-e98af8220639.png)'
  prefs: []
  type: TYPE_IMG
- en: By following the preceding steps, you will be able to create a new team on GitHub
    and add members to it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on different servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this topic, we'll be discussing how to install Git on different operating
    systems including Windows, Linux, and Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing Git on Windows is as simple as installing any GUI-based application.
    Follow the steps to install Git on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the latest Git for Windows installer, go to [https://git-scm.com/downloads](https://git-scm.com/downloads).
    Select Windows and the download will start:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb4c0d1f-fc1a-45a6-b08a-582ee8841415.png)'
  prefs: []
  type: TYPE_IMG
- en: Once downloaded, start the installer file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next screen will ask you to accept the license. Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the path for the Git installation; you can leave the default path as-is
    if you like and click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next screen is where you select how you would like to use Git on your system.
    There are multiple options provided. The first option lets you use Git from Git
    Bash, which is a command line for Git. The second option lets you user Git commands
    from both Git Bash and the Windows Command Prompt, which is great and adds flexibility
    to your use of Git. It is best to select the second option and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/62f4754a-67b1-4796-93d7-3ba283c7e67d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we''ll be choosing the OpenSSH client for remote connection, which is
    the default for Git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/034d00ac-9c7a-4752-9216-548dca699c2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the SSL library to be used for HTTPS connections. You can leave the
    default as-is, or change it according to your needs; click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1431cfa-8a40-4912-b9de-4dcbee1a0c15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select line ending styles to be used by Git while checking out your code and
    committing. You have to make a choice, because developers could be using different
    systems, such as Windows and Linux, for development purposes and line ending styles
    vary in different systems. So, keeping the same line ending style for commits
    is always recommended:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef1d6270-15a3-4db5-a320-95d63a0de479.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the terminal emulator to be used for Git Bash to run commands; MinTTY
    is more flexible and is the default option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bee740ea-d753-4fa7-afe1-04407389e749.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the final step, select all the features you would like to enable and click
    Install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f3f15edb-21f6-4899-83c2-4ba1ee5e2d21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the files are extracted into the `path` folder and installation is complete,
    click Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, open a command prompt or Git Bash and run the following commands to set
    your username and email to be configured:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7318c09e-7211-48c3-abca-9d6e92bed089.png)'
  prefs: []
  type: TYPE_IMG
- en: Git installation is now completed, and the user's identity is configured to
    be used for commits.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on CentOS/RHEL servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Git on a CentOS or RHEL server, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From your shell, install Git using `yum` (or `dnf` on older versions of Fedora):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the installation was successful by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the username and email address for all repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the necessary build dependencies using `dnf` (or `yum` on older versions
    of Fedora):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Or using the `yum`-Epel repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Symlink `docbook2x` to the filename that the Git build expects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone the Git source (or if you don''t yet have a version of Git installed,
    download and extract it):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To build the Git source and install it under `/usr`, run `make`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Following the preceding steps will install and configure Git on a CentOS/RHEL
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on Ubuntu/Debian systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Git on Ubuntu systems, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From your shell, install Git using the `apt-get` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the installation was successful by typing `git --version`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure your Git username and email for a single repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the necessary dependencies using the `apt-get` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone the Git source (or if you don''t yet have a version of Git installed,
    download and extract it):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To build the Git source and install it under `/usr`, run `make`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: With this, we have discussed installing and configuring Git on different platforms,
    including Windows, CentOS, and Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring SSH keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure and set up SSH keys for your GitHub account, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether you already have an `ssh` key pair.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Git Bash and enter `ls -al ~/.ssh` to see whether existing SSH keys are
    present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/d219f8eb-26f6-467f-9330-a4be18aa42ec.png)'
  prefs: []
  type: TYPE_IMG
- en: The public key consists of the `.pub` extension. Create a new key pair (skip
    this step if you already have a key pair).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Git Bash and paste in the following text, substituting your GitHub email
    address for the one shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/1cfe963b-21e7-439e-accb-0c8065f21a38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you''re prompted to `Enter a file in which to save the key`, press the
    *Enter* button to accept the default file location mentioned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/949b9132-be2b-4fd2-bc61-ac9e3a5f3709.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When prompted, type a secure passphrase (recommended), or press *Enter* to
    continue without a passphrase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5ffa7516-077f-44cf-85b9-0bf5b6b821c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The entire setup will look as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/afa5c48e-e905-43ea-96c0-a6e650e427e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the newly created SSH keys into `ssh-agent`; for that, ensure `ssh-agent`
    is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/35dad196-03f2-4a28-8b27-4e810ee49b74.png)'
  prefs: []
  type: TYPE_IMG
- en: Add the newly created private key to `ssh-agent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you created your key with a different name, or if you are adding an existing
    key that has a different name, replace `id_rsa` in the command with the name of
    your private key file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e2ae767-f962-4f77-85d5-87098d89fa14.png)'
  prefs: []
  type: TYPE_IMG
- en: To add SSH keys to your GitHub account, download/copy the public key from `~/.ssh/id_rsa.pub`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also copy the public key manually, or you can use the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**$ clip < ~/.ssh/id_rsa.pub**` **Linux**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**$ sudo apt-get install xclip**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**$ xclip -sel clip < ~/.ssh/id_rsa.pub**`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mac**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**$ pbcopy < ~/.ssh/id_rsa.pub**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the upper-right corner of the GitHub page, click your profile photo, and
    then click Settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1dacaf46-10e1-430a-bc57-1d1a2ea84307.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Personal settings sidebar, click on SSH and GPG keys, and then select
    New SSH key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41413c8c-a9c3-4be4-98b1-c642f7c8b00c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Give a meaningful name to your key in the Title field and paste your key into
    the Key field. Click on Add SSH key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e10b5037-fb4e-416b-aa68-58c19e90bad7.png)'
  prefs: []
  type: TYPE_IMG
- en: When prompted, type your GitHub password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The newly added SSH keys will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6fe1f18-5c2f-4574-ae84-d735a2a77d77.png)'
  prefs: []
  type: TYPE_IMG
- en: Great, so now you have successfully added SSH keys to your GitHub account!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about different version control systems and source
    code management in detail. We also delved into using Git to create a repository
    and manage teams and organizations. In the next chapter, you'll be introduced
    to cross-platform application development using Xamarin and using Visual Studio
    for development.
  prefs: []
  type: TYPE_NORMAL
