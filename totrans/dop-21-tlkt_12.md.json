["```\nexport AWS_ACCESS_KEY_ID=[...]\n\nexport AWS_SECRET_ACCESS_KEY=[...]\n\n```", "```\naws --version\n\n```", "```\naws-cli/1.11.15 Python/2.7.10 Darwin/16.0.0 botocore/1.4.72\n\n```", "```\nexport AWS_DEFAULT_REGION=us-east-1\n\n```", "```\naws ec2 describe-availability-zones \\\n    --region $AWS_DEFAULT_REGION\n\n```", "```\n{\n \"AvailabilityZones\": [\n {\n \"State\": \"available\",\n \"RegionName\": \"us-east-1\",\n \"Messages\": [],\n \"ZoneName\": \"us-east-1a\"\n },\n {\n \"State\": \"available\",\n \"RegionName\": \"us-east-1\",\n \"Messages\": [],\n \"ZoneName\": \"us-east-1b\"\n },\n\n {\n \"State\": \"available\",\n \"RegionName\": \"us-east-1\",\n \"Messages\": [],\n \"ZoneName\": \"us-east-1d\"\n }, {\n \"State\": \"available\",\n \"RegionName\": \"us-east-1\",\n \"Messages\": [],\n \"ZoneName\": \"us-east-1e\"\n }\n ]\n}\n\n```", "```\nAWS_ZONE[1]=b\n\nAWS_ZONE[2]=d\n\nAWS_ZONE[3]=e\n\nAWS_ZONE[4]=b\n\nAWS_ZONE[5]=d\n\n```", "```\ncd cloud-provisioning\n\ngit pull\n\n```", "```\ndocker-machine create \\\n    --driver amazonec2 \\\n    --amazonec2-zone ${AWS_ZONE[1]} \\\n    --amazonec2-tags \"Type,manager\" \\\n    swarm-1\n\n```", "```\nRunning pre-create checks...\nCreating machine...\n(swarm-1) Launching instance...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with ubuntu(systemd)...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this\\ virtual machine, run: docker-machine env swarm-1\n\n```", "```\naws ec2 describe-instances \\\n    --filter \"Name=tag:Name,Values=swarm-1\" \\\n    \"Name=instance-state-name,Values=running\"\n\n```", "```\n{\n\"Reservations\": [\n  {\n   ...\n   \"Instances\": [\n    {\n     ...\n     \"PrivateIpAddress\": \"172.31.51.25\",\n     ...\n\n```", "```\nMANAGER_IP=$(aws ec2 describe-instances \\\n    --filter \"Name=tag:Name,Values=swarm-1\" \\\n    \"Name=instance-state-name,Values=running\" \\\n    | jq -r \".Reservations[0].Instances[0].PrivateIpAddress\")\n\n```", "```\necho $MANAGER_IP\n\n```", "```\n172.31.51.25\n\n```", "```\neval $(docker-machine env swarm-1)\n\ndocker swarm init \\\n    --advertise-addr $MANAGER_IP\n\n```", "```\ndocker node ls\n\n```", "```\nHOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS\nswarm-1   Ready   Active        Leader\n\n```", "```\naws ec2 describe-security-groups \\\n    --filter \"Name=group-name,Values=docker-machine\"\n\n```", "```\n...\n           \"GroupName\": \"docker-machine\",\n           \"VpcId\": \"vpc-7bbc391c\",\n           \"OwnerId\": \"036548781187\",\n           \"GroupId\": \"sg-f57bf388\"\n        }\n    ]\n}\n\n```", "```\nSECURITY_GROUP_ID=$(aws ec2 \\\n    describe-security-groups \\\n    --filter \\\n    \"Name=group-name,Values=docker-machine\" |\\ \n    jq -r '.SecurityGroups[0].GroupId')\n\n```", "```\nfor p in 2377 7946 4789; do \\\n    aws ec2 authorize-security-group-ingress \\\n        --group-id $SECURITY_GROUP_ID \\\n        --protocol tcp \\\n        --port $p \\\n        --source-group $SECURITY_GROUP_ID\ndone\n\n```", "```\nfor p in 7946 4789; do \\\n    aws ec2 authorize-security-group-ingress \\\n        --group-id $SECURITY_GROUP_ID \\\n        --protocol udp \\\n        --port $p \\\n        --source-group $SECURITY_GROUP_ID\ndone\n\n```", "```\naws ec2 describe-security-groups \\\n    --filter \\\n    \"Name=group-name,Values=docker-machine\"\n\n```", "```\nMANAGER_TOKEN=$(docker swarm join-token -q manager)\n\nfor i in 2 3; do\n    docker-machine create \\\n        --driver amazonec2 \\\n        --amazonec2-zone ${AWS_ZONE[$i]} \\\n        --amazonec2-tags \"Type,manager\" \\\n        swarm-$i\n\n    IP=$(aws ec2 describe-instances \\\n        --filter \"Name=tag:Name,Values=swarm-$i\" \\\n        \"Name=instance-state-name,Values=running\" \\\n        | jq -r \".Reservations[0].Instances[0].PrivateIpAddress\")\n\neval $(docker-machine env swarm-$i)\n\n    docker swarm join \\\n        --token $MANAGER_TOKEN \\\n        --advertise-addr $IP \\\n        $MANAGER_IP:2377\ndone\n\n```", "```\nWORKER_TOKEN=$(docker swarm join-token -q worker)\n\nfor i in 4 5; do\n  docker-machine create \\\n    --driver amazonec2 \\\n    --amazonec2-zone ${AWS_ZONE[$i]} \\\n    --amazonec2-tags \"type,worker\" \\\n    swarm-$i\n\n  IP=$(aws ec2 describe-instances \\\n    --filter \"Name=tag:Name,Values=swarm-$i\" \\\n    \"Name=instance-state-name,Values=running\" \\\n    | jq -r \".Reservations[0].Instances[0].PrivateIpAddress\")\n\neval $(docker-machine env swarm-$i)\n\n  docker swarm join \\\n    --token $WORKER_TOKEN \\\n    --advertise-addr $IP \\\n    $MANAGER_IP:2377\ndone\n\n```", "```\neval $(docker-machine env swarm-1)\n\ndocker node ls\n\n```", "```\nHOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS\nswarm-4   Ready   Active\nswarm-2   Ready   Active        Reachable\nswarm-3   Ready   Active        Reachable\nswarm-5   Ready   Active\nswarm-1   Ready   Active        Leader\n\n```", "```\ndocker-machine ssh swarm-1\n\nsudo docker network create --driver overlay proxy\n\ncurl -o proxy-stack.yml \\\n    https://raw.githubusercontent.com/ \\\nvfarcic/docker-flow-proxy/master/docker-compose-stack.yml \n\nsudo docker stack deploy \\\n    -c proxy-stack.yml proxy\n\ncurl -o go-demo-stack.yml \\\n    https://raw.githubusercontent.com/ \\\nvfarcic/go-demo/master/docker-compose-stack.yml\n\nsudo docker stack deploy \\\n    -c go-demo-stack.yml go-demo\n\nexit\n\ndocker service ls\n\n```", "```\nNAME                 MODE       REPLICA IMAGE\ngo-demo_db           replicated 1/1     mongo:latest\ngo-demo_main         replicated 3/3     vfarcic/go-demo:latest\nproxy_swarm-listener replicated 1/1     vfarcic/docker-flow-swarmlistener:latest\nproxy_proxy          replicated 2/2     vfarcic/docker-flow-proxy:latest\n\n```", "```\ncurl \"$(docker-machine ip swarm-1)/demo/hello\"\n\n```", "```\ncurl: (7) Failed to connect to 54.157.196.113 port 80: Operation timed out\n\n```", "```\nfor p in 80 443; do\n    aws ec2 authorize-security-group-ingress \\\n        --group-id $SECURITY_GROUP_ID \\\n        --protocol tcp \\\n        --port $p \\\n        --cidr \"0.0.0.0/0\"\ndone\n\n```", "```\ncurl \"$(docker-machine ip swarm-1)/demo/hello\"\n\n```", "```\nhello, world!\n\n```", "```\nfor i in 1 2 3 4 5; do\n    docker-machine rm -f swarm-$i\ndone\n\n```", "```\naws ec2 delete-security-group \\\n    --group-id $SECURITY_GROUP_ID\n\n```", "```\naws ec2 create-key-pair \\\n    --key-name devops21 \\\n    | jq -r '.KeyMaterial' >devops21.pem\n\n```", "```\nmv devops21.pem $HOME/.ssh/devops21.pem\n\n```", "```\nchmod 400 $HOME/.ssh/devops21.pem\n\n```", "```\nexport KEY_PATH=$HOME/.ssh/devops21.pem\n\n```", "```\nDNS=[...]\n\n```", "```\nMANAGER_IP=[...]\n\n```", "```\nssh -i $KEY_PATH docker@$MANAGER_IP\n\n```", "```\nWelcome to Docker!\n~ $\n\n```", "```\ndocker node ls\n\n```", "```\nHOSTNAME                     STATUS  AVAILABILITY  MANAGER STATUS\nip-10-0-17-154.ec2.internal  Ready   Active        Reachable\nip-10-0-15-215.ec2.internal  Ready   Active        Reachable\nip-10-0-31-44.ec2.internal   Ready   Active\nip-10-0-15-214.ec2.internal  Ready   Active        Leader\n\n```", "```\nsudo docker network create --driver overlay proxy\n\ncurl -o proxy-stack.yml \\\n    https://raw.githubusercontent.com/ \\\nvfarcic/docker-flow-proxy/master/docker-compose-stack.yml\n\ndocker stack deploy \\\n    -c proxy-stack.yml proxy\n\ncurl -o go-demo-stack.yml \\\n    https://raw.githubusercontent.com/ \\\nvfarcic/go-demo/master/docker-compose-stack.yml\n\ndocker stack deploy \\\n    -c go-demo-stack.yml go-demo\n\n```", "```\ndocker service ls\n\n```", "```\nNAME                 MODE       REPLICAS \nproxy_proxy          replicated 2/2      \ngo-demo_main         replicated 3/3      \nproxy_swarm-listener replicated 1/1      \ngo-demo_db           replicated 1/1      \n----------------------------------------------\nIMAGE\nvfarcic/docker-flow-proxy:latest\nvfarcic/go-demo:latest\nvfarcic/docker-flow-swarm-listener:latest\nmongo:latest \n\n```", "```\nexit\n\ncurl $DNS/demo/hello\n\n```", "```\nhello, world!\n\n```", "```\nssh -i $KEY_PATH docker@$MANAGER_IP\n\ndocker node ls\n\n```", "```\nHOSTNAME                     STATUS  AVAILABILITY  MANAGER STATUS\nip-10-0-17-154.ec2.internal  Ready   Active        Reachable\nip-10-0-15-215.ec2.internal  Ready   Active        Reachable\nip-10-0-31-44.ec2.internal   Ready   Active\nip-10-0-15-214.ec2.internal  Ready   Active        Leader\nip-10-0-11-174.ec2.internal  Ready   Active\n\n```", "```\ndocker node ls\n\n```", "```\nHOSTNAME                     STATUS  AVAILABILITY  MANAGER STATUS\nip-10-0-17-154.ec2.internal  Ready   Active        Reachable\nip-10-0-15-215.ec2.internal  Ready   Active        Reachable\nip-10-0-31-44.ec2.internal   Ready   Active\nip-10-0-15-214.ec2.internal  Ready   Active        Leader\nip-10-0-11-174.ec2.internal  Down    Active\n\n```", "```\ndocker node ls\n\n```", "```\nHOSTNAME                     STATUS  AVAILABILITY  MANAGER STATUS\nip-10-0-17-154.ec2.internal  Ready   Active        Reachable\nip-10-0-15-215.ec2.internal  Ready   Active        Reachable\nip-10-0-2-22.ec2.internal    Ready   Active\nip-10-0-31-44.ec2.internal   Ready   Active\nip-10-0-15-214.ec2.internal  Ready   Active        Leader\nip-10-0-11-174.ec2.internal  Down    Active\n\n```", "```\nexport AWS_DEFAULT_REGION=us-east-1\n\nexport AWS_ACCESS_KEY_ID=[...]\n\nexport AWS_SECRET_ACCESS_KEY=[...]\n\n```", "```\ncurl https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl\n\n```", "```\ncurl https://editions-us-east-1.s3.amazonaws.com/aws/stable/ \\\nDocker.tmpl  \\\n    | jq '.Metadata'\n\n```", "```\n{\n  \"AWS::CloudFormation::Interface\": {\n    \"ParameterGroups\": [\n      {\n        \"Label\": {\n          \"default\": \"Swarm Size\"\n         },\n        \"Parameters\": [\n         \"ManagerSize\",\n         \"ClusterSize\"\n        ]\n      },\n    {\n        \"Label\": {\n        \"default\": \"Swarm Properties\"\n        },\n        \"Parameters\": [\n         \"KeyName\",\n         \"EnableSystemPrune\",\n         \"EnableCloudWatchLogs\"\n        ]\n    },\n    {\n        \"Label\": {\n         \"default\": \"Swarm Manager Properties\"\n      },\n        \"Parameters\": [\n         \"ManagerInstanceType\",\n         \"ManagerDiskSize\",\n         \"ManagerDiskType\"\n        ]\n    },\n    {\n        \"Label\": {\n         \"default\": \"Swarm Worker Properties\"\n        },\n        \"Parameters\": [\n         \"InstanceType\",\n         \"WorkerDiskSize\",\n         \"WorkerDiskType\"\n        ]\n    }\n  ],\n        \"ParameterLabels\": {\n         \"ClusterSize\": {\n          \"default\": \"Number of Swarm worker nodes?\"\n        },\n      \"EnableCloudWatchLogs\": {\n       \"default\": \"Use Cloudwatch for container logging?\"\n      },\n      \"EnableSystemPrune\": {\n       \"default\": \"Enable daily resource cleanup?\"\n      },\n      \"InstanceType\": {\n       \"default\": \"Agent worker instance type?\"\n      },\n      \"KeyName\": {\n       \"default\": \"Which SSH key to use?\"\n      },\n      \"ManagerDiskSize\": {\n       \"default\": \"Manager ephemeral storage volume size?\"\n      },\n      \"ManagerDiskType\": {\n       \"default\": \"Manager ephemeral storage volume type\"\n      },\n      \"ManagerInstanceType\": {\n       \"default\": \"Swarm manager instance type?\"\n      },\n      \"ManagerSize\": {\n       \"default\": \"Number of Swarm managers?\"\n      },\n      \"WorkerDiskSize\": {\n       \"default\": \"Worker ephemeral storage volume size?\"\n      },\n      \"WorkerDiskType\": {\n       \"default\": \"Worker ephemeral storage volume type\"\n      }\n    }\n  }\n}\n\n```", "```\naws cloudformation create-stack \\\n    --template-url https://editions-us-east \\\n    -1.s3.amazonaws.com/aws/stable/Docker.tmpl \\\n    --stack-name swarm \\\n    --capabilities CAPABILITY_IAM \\\n    --parameters \\\n    ParameterKey=KeyName,ParameterValue=devops21 \\\n    ParameterKey=InstanceType,ParameterValue=t2.micro \\\n    ParameterKey=ManagerInstanceType,ParameterValue=t2.micro \\\n    ParameterKey=ManagerSize,ParameterValue=3 \\\n    ParameterKey=ClusterSize,ParameterValue=1\n\n```", "```\naws cloudformation describe-stack-resources \\\n    --stack-name swarm\n\n```", "```\naws ec2 describe-instances \\\n    --filters \"Name=tag:Name,Values=swarm-Manager\" \\\n    \"Name=instance-state-name,Values=running\"\n\n```", "```\naws cloudformation delete-stack \\\n    --stack-name swarm\n\n```", "```\ncd terraform/aws\n\n```", "```\nexport AWS_ACCESS_KEY_ID=[...]\n\nexport AWS_SECRET_ACCESS_KEY=[...]\n\nexport AWS_DEFAULT_REGION=us-east-1\n\n```", "```\ncat packer-ubuntu-docker.json\n\n```", "```\n{\n   \"builders\": [{\n   ...\n  }],\n   \"provisioners\": [{\n   ...\n  }]\n}\n\n```", "```\n\"builders\": [{\n  \"type\": \"amazon-ebs\",\n  \"region\": \"us-east-1\",\n  \"source_ami_filter\": {\n    \"filters\": {\n      \"virtualization-type\": \"hvm\",\n      \"name\": \"*ubuntu-xenial-16.04-amd64-server-*\",\n      \"root-device-type\": \"ebs\"\n    },\n    \"owners\": [\"099720109477\"],\n    \"most_recent\": true\n  },\n  \"instance_type\": \"t2.micro\",\n  \"ssh_username\": \"ubuntu\",\n  \"ami_name\": \"devops21\",\n  \"force_deregister\": true \n}],\n\n```", "```\n\"provisioners\": [{\n  \"type\": \"shell\",\n  \"inline\": [\n    \"sleep 15\",\n    \"sudo apt-get update\",\n    \"sudo apt-get install -y apt-transport-https ca-certificates \\\nnfs-common\",\n    \"sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net: \\\n80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\",\n    \"echo 'deb https://apt.dockerproject.org/repo ubuntu-xenial \\\nmain' | sudo tee /etc/apt/sources.list.d/docker.list\",\n    \"sudo apt-get update\",\n    \"sudo apt-get install -y docker-engine\",\n    \"sudo usermod -aG docker ubuntu\"\n  ]\n}]\n\n```", "```\npacker build -machine-readable \\\n    packer-ubuntu-docker.json \\\n    | tee packer-ubuntu-docker.log\n\n```", "```\n...\n1480105510,,ui,say,Build 'amazon-ebs' finished.\n1480105510,,ui,say,\\n==> Builds finished. The artifacts of successful builds are:\n1480105510,amazon-ebs,artifact-count,1\n1480105510,amazon-ebs,artifact,0,builder-id,mitchellh.amazonebs\n1480105510,amazon-ebs,artifact,0,id,us-east-1:ami-02ebd915\n1480105510,amazon-ebs,artifact,0,string,AMIs were \\\ncreated: \\n\\nus-east-1: ami-02ebd915\n1480105510,amazon-ebs,artifact,0,files-count,0\n1480105510,amazon-ebs,artifact,0,end\n1480105510,,ui,say,--> amazon-ebs: AMIs were created: \\n\\nus-east-1: ami-02ebd915\n\n```", "```\ncd terraform/aws\n\nexport AWS_ACCESS_KEY_ID=[...]\n\nexport AWS_SECRET_ACCESS_KEY=[...]\n\nexport AWS_DEFAULT_REGION=us-east-1\n\n```", "```\nvariable \"swarm_manager_token\" {\n  default = \"\"\n}\nvariable \"swarm_worker_token\" {\n  default = \"\"\n}\nvariable \"swarm_ami_id\" {\n  default = \"unknown\"\n}\nvariable \"swarm_manager_ip\" {\n  default = \"\"\n}\nvariable \"swarm_managers\" {\n  default = 3\n}\nvariable \"swarm_workers\" {\n  default = 2\n}\nvariable \"swarm_instance_type\" {\n  default = \"t2.micro\"\n}\nvariable \"swarm_init\" {\n  default = false\n}\n\n```", "```\nresource \"aws_security_group\" \"docker\" {\n  name = \"docker\"\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  ingress {\n    from_port = 80\n    to_port   = 80\n    protocol  = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  ingress {\n    from_port = 443\n    to_port   = 443\n    protocol  = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  ingress {\n    from_port = 2377\n    to_port   = 2377\n    protocol  = \"tcp\"\n    self      = true\n  }\n  ingress {\n    from_port = 7946\n    to_port   = 7946\n    protocol  = \"tcp\"\n    self      = true\n  }\n  ingress {\n    from_port = 7946\n    to_port   = 7946\n    protocol  = \"udp\"\n    self      = true\n  }\n  ingress {\n    from_port = 4789\n    to_port   = 4789\n    protocol  = \"tcp\"\n    self      = true\n  }\n  ingress {\n    from_port = 4789\n    to_port   = 4789\n    protocol  = \"udp\"\n    self      = true\n  }\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n```", "```\nresource \"aws_instance\" \"swarm-manager\" {\n  ami = \"${var.swarm_ami_id}\"\n  instance_type = \"${var.swarm_instance_type}\"\n  count = \"${var.swarm_managers}\"\n  tags {\n    Name = \"swarm-manager\"\n  }\n  vpc_security_group_ids = [\n    \"${aws_security_group.docker.id}\"\n  ]\n  key_name = \"devops21\"\n  connection {\n    user = \"ubuntu\"\n    private_key = \"${file(\"devops21.pem\")}\"\n  }\n  provisioner \"remote-exec\" {\n    inline = [\n      \"if ${var.swarm_init}; then docker swarm init \\\n--advertise-addr ${self.private_ip}; fi\",\n      \"if ! ${var.swarm_init}; then docker swarm join \\\n--token ${var.swarm_manager_token} --advertise-addr \\\n${self.private_ip} ${var.swarm_manager_ip}:2377; fi\"\n    ]\n  }\n}\n\n```", "```\nresource \"aws_instance\" \"swarm-worker\" {\n  count = \"${var.swarm_workers}\"\n  ami = \"${var.swarm_ami_id}\"\n  instance_type = \"${var.swarm_instance_type}\"\n  tags {\n    Name = \"swarm-worker\"\n  }\n  vpc_security_group_ids = [\n    \"${aws_security_group.docker.id}\"\n  ]\n  key_name = \"devops21\"\n  connection {\n    user = \"ubuntu\"\n    private_key = \"${file(\"devops21.pem\")}\"\n  }\n  provisioner \"remote-exec\" {\n    inline = [\n    \"docker swarm join --token ${var.swarm_worker_token} \\\n--advertise-addr ${self.private_ip} ${var.swarm_manager_ip}:2377\"\n    ]\n  }\n}\n\n```", "```\noutput \"swarm_manager_1_public_ip\" {\n  value = \"${aws_instance.swarm-manager.0.public_ip}\"\n}\n\noutput \"swarm_manager_1_private_ip\" {\n  value = \"${aws_instance.swarm-manager.0.private_ip}\"\n}\noutput \"swarm_manager_2_public_ip\" {\n  value = \"${aws_instance.swarm-manager.1.public_ip}\"\n}\n\noutput \"swarm_manager_2_private_ip\" {\n  value = \"${aws_instance.swarm-manager.1.private_ip}\"\n}\n\noutput \"swarm_manager_3_public_ip\" {\n  value = \"${aws_instance.swarm-manager.2.public_ip}\"\n}\n\noutput \"swarm_manager_3_private_ip\" {\n  value = \"${aws_instance.swarm-manager.2.private_ip}\"\n}\n\n```", "```\nexport TF_VAR_swarm_ami_id=$( \\\n    grep 'artifact,0,id' \\\n    packer-ubuntu-docker.log \\\n    | cut -d: -f2)\n\n```", "```\nterraform plan\n\n```", "```\n...\n+ aws_instance.swarm-manager.0\n...\n+ aws_instance.swarm-manager.1\n...\n+ aws_instance.swarm-manager.2\n...\n+ aws_instance.swarm-worker.0\n...\n+ aws_instance.swarm-worker.1\n...\n+ aws_security_group.docker\n...\nPlan: 6 to add, 0 to change, 0 to destroy.\n\n```", "```\nterraform graph\n\n```", "```\ndigraph {\n    compound = \"true\"\n    newrank = \"true\"\n    subgraph \"root\" {\n      \"[root] aws_instance.swarm-manager\" [label = \\\n\"aws_instance.swarm-manager\",shape = \"box\"]\n      \"[root] aws_instance.swarm-worker\" [label = \\\n\"aws_instance.swarm-worker\", shape= \"box\"] \n      \"[root] aws_security_group.docker\" [label = \\\n\"aws_security_group.docker\", shape = \"box\"]\n     \"[root] provider.aws\" [label = \"provider.aws\", shape = \\\n\"diamond\"]\n     \"[root] aws_instance.swarm-man ager\" -> \"[root] \\\naws_security_group.docker\"\n     \"[root] aws_instance.swarm-manager\" -> \"[root] provider.aws\" \\\n     \"[root] aws_instance.swarm-worker\" -> \"[root] \\\naws_security_group.docker\"\n     \"[root] aws_instance.swarm-worker\" -> \"[root] provider.aws\" \\\n     \"[root] aws_security_group.docker\" -> \"[root] provider.aws\" \\\n    }\n}\n\n```", "```\nterraform graph | dot -Tpng > graph.png\n\n```", "```\nterraform plan \\\n    -target aws_instance.swarm-manager \\\n    -var swarm_init=true \\\n    -var swarm_managers=1\n\n```", "```\n+ aws_instance.swarm-manager\n+ aws_security_group.docker\n\n```", "```\nexport KEY_PATH=$HOME/.ssh/devops21.pem\n\ncp $KEY_PATH devops21.pem\n\n```", "```\nterraform apply \\\n    -target aws_instance.swarm-manager \\\n    -var swarm_init=true \\\n    -var swarm_managers=1\n\n```", "```\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\n\nThe state of your infrastructure has been saved to the path\nbelow. This state is required to modify and destroy your\ninfrastructure, so keep it safe. To inspect the complete state\nuse the `terraform show` command.\n\nState path: terraform.tfstate\n\nOutputs:\n\nswarm_manager_1_private_ip = 172.31.49.214\nswarm_manager_1_public_ip = 52.23.252.207\n\n```", "```\nterraform output swarm_manager_1_public_ip\n\n```", "```\n52.23.252.207\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip) \\\n    docker node ls\n\n```", "```\nHOSTNAME         STATUS AVAILABILITY MANAGER STATUS\nip-172-31-49-214 Ready  Active       Leader\n\n```", "```\nexport TF_VAR_swarm_manager_token=$(ssh \\\n    -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip) \\\n    docker swarm join-token -q manager)\n\nexport TF_VAR_swarm_worker_token=$(ssh \\\n    -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip) \\\n    docker swarm join-token -q worker)\n\n```", "```\nexport TF_VAR_swarm_manager_ip=$(terraform \\\n    output swarm_manager_1_private_ip)\n\n```", "```\nterraform plan\n\n```", "```\n...\nPlan: 4 to add, 0 to change, 0 to destroy.\n\n```", "```\nterraform apply\n\n```", "```\n...\nApply complete! Resources: 4 added, 0 changed, 4 destroyed.\n\nThe state of your infrastructure has been saved to the path\nbelow. This state is required to modify and destroy your\ninfrastructure, so keep it safe. To inspect the complete state\nuse the `terraform show` command.\n\nState path: terraform.tfstate\n\nOutputs:\n\nswarm_manager_1_private_ip = 172.31.49.214\nswarm_manager_1_public_ip = 52.23.252.207\nswarm_manager_2_private_ip = 172.31.61.11\nswarm_manager_2_public_ip = 52.90.245.134\nswarm_manager_3_private_ip = 172.31.49.221\nswarm_manager_3_public_ip = 54.85.49.136\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform \\\n    output swarm_manager_1_public_ip)\n\ndocker node ls\n\n```", "```\nHOSTNAME          STATUS  AVAILABILITY  MANAGER STATUS\nip-172-31-61-11   Ready   Active        Reachable\nip-172-31-49-221  Ready   Active        Reachable\nip-172-31-50-78   Ready   Active\nip-172-31-49-214  Ready   Active        Leader\nip-172-31-49-41   Ready   Active\n\n```", "```\nsudo docker network create --driver overlay proxy\n\ncurl -o proxy-stack.yml \\\n    https://raw.githubusercontent.com/ \\\nvfarcic/docker-flow-proxy/master/docker-compose-stack.yml\n\nsudo docker stack deploy \\\n    -c proxy-stack.yml proxy\n\ncurl -o go-demo-stack.yml \\\n    https://raw.githubusercontent.com/ \\\nvfarcic/go-demo/master/docker-compose-stack.yml\n\nsudo docker stack deploy \\\n    -c go-demo-stack.yml go-demo\n\ndocker service ls\n\n```", "```\nNAME                 MODE       REPLICAS \ngo-demo_db           replicated 1/1      \nproxy_swarm-listener replicated 1/1      \nproxy_proxy          replicated 2/2      \ngo-demo_main         replicated 3/3      \n-------------------------------------------------\nIMAGE\nmongo:latest\nvfarcic/docker-flow-swarm-listener:latest\nvfarcic/docker-flow-proxy:latest\nvfarcic/go-demo:latest \n\n```", "```\ncurl localhost/demo/hello\n\n```", "```\nhello, world!\n\n```", "```\nexit\n\ncurl $(terraform output \\\n    swarm_manager_1_public_ip)/demo/hello\n\n```", "```\nhello, world!\n\n```", "```\nterraform state show \"aws_instance.swarm-worker[1]\"\n\n```", "```\nid                                        = i-6a3a1964\nami                                       = ami-02ebd915\nassociate_public_ip_address               = true\navailability_zone                         = us-east-1b\ndisable_api_termination                   = false\nebs_block_device.#                        = 0\nebs_optimized                             = false\nephemeral_block_device.#                  = 0\niam_instance_profile                      =\ninstance_state                            = running\ninstance_type                             = t2.micro\nkey_name                                  = devops21\nmonitoring                                = false\nnetwork_interface_id                      = eni-322fd9cc\nprivate_dns                               = ip-172-31-56-227.ec2.internal\nprivate_ip                                = 172.31.56.227\npublic_dns                                = ec2-54-174-83-184.compute-1.amazonaws.com\npublic_ip                                 = 54.174.83.184\nroot_block_device.#                       = 1\nroot_block_device.0.delete_on_termination = true\nroot_block_device.0.iops                  = 100\nroot_block_device.0.volume_size           = 8\nroot_block_device.0.volume_type           = gp2\nsecurity_groups.#                         = 0\nsource_dest_check                         = true\nsubnet_id                                 = subnet-e71631cd\ntags.%                                    = 1\ntags.Name                                 = swarm-worker\ntenancy                                   = default\nvpc_security_group_ids.#                  = 1\nvpc_security_group_ids.937984769          = sg-288e1555\n\n```", "```\naws ec2 terminate-instances \\\n    --instance-ids i-6a3a1964\n\n```", "```\n{\n    \"TerminatingInstances\": [\n        {\n            \"InstanceId\": \"i-6a3a1964\",\n            \"CurrentState\": {\n                \"Code\": 32,\n                \"Name\": \"shutting-down\"\n            },\n            \"PreviousState\": {\n                \"Code\": 16,\n                \"Name\": \"running\"\n            }\n        }\n    ]\n}\n\n```", "```\nterraform plan\n\n```", "```\nPlan: 1 to add, 0 to change, 0 to destroy.\n\n```", "```\nterraform apply\n\n```", "```\n...\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n\nThe state of your infrastructure has been saved to the path\nbelow. This state is required to modify and destroy your\ninfrastructure, so keep it safe. To inspect the complete state\nuse the `terraform show` command.\n\nState path: terraform.tfstate\n\nOutputs:\n\nswarm_manager_1_private_ip = 172.31.60.117\nswarm_manager_1_public_ip = 52.91.201.148\nswarm_manager_2_private_ip = 172.31.57.177\nswarm_manager_2_public_ip = 54.91.90.33\nswarm_manager_3_private_ip = 172.31.48.226\nswarm_manager_3_public_ip = 54.209.238.50\n\n```", "```\nterraform destroy -force\n\n```"]