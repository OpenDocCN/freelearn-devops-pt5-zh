- en: Continuous Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous effort - not strength or intelligence - is the key to unlocking our
    potential
  prefs: []
  type: TYPE_NORMAL
- en: '- Winston Churchill'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover how to install the continuous integration server
    Jenkins and perform various tasks related to compilation, unit test execution,
    code analysis, and creating a package file. We will also cover continuous integration
    using Microsoft stack. The goal here is to gain as much information as you can
    about the continuous integration as it is a base for the rest of the automation.
    Here is the gist of topics that we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jenkins 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Maven-based JEE web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Jenkins and SonarQube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing command-line operations from Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous integration using VSTS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with making ourselves aware about Jenkins—continuous integration
    server or automation server nowadays after Jenkins 2.0\.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jenkins 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few steps that we can follow to install Jenkins :'
  prefs: []
  type: TYPE_NORMAL
- en: Install Java Development Kit 8 and set `JAVA_HOME` as the environment variable.
    In the Command Prompt or Terminal, verify that Java is installed properly or not
    by executing the `java –version`, `javac`, and `java` commands. Download `jenkins.war`
    from the Jenkins website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To run Jenkins, execute `java –jar jenkins.war`. Wait until Jenkins is fully
    up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Jenkins is fully up and running, open the browser and visit `http://<localhost/IP_ADDRESS>:8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to unlock Jenkins first to go ahead with the configuration. Copy the
    password from the given file location or copy it from the console/terminal from
    where we executed the Java command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the Administrator password and click on Continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the suggested plugins or select plugins to install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we are behind the firewall, then it will ask for Proxy Settings so we can
    download the required plugins. If we are familiar with Jenkins, then we can skip
    the plugins installation completely and install them later on when we require
    them. It will make this configuration fast. Behind the proxy, we might face an
    issue while downloading some of the plugins. In such a case, it is better to identify
    these plugins and use Select plugins to Install option to avoid endless waiting
    or configuration failure.
  prefs: []
  type: TYPE_NORMAL
- en: Once we finish the plugins installation process or skip it, we need to create
    our first admin user. After Jenkins 2, plugin installation and security configuration
    are part of the initial setup and that is a step forward towards a matured tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the required user details and click on Save and Finish. Now, Jenkins
    is ready and the Jenkins set up is complete. We can start using Jenkins. This
    is the time where we meet the Jenkins dashboard for the first time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can manage Jenkins-related configurations such as tools configurations, security
    configurations, creating build jobs, managing plugins, and managing agents.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot represents the Jenkins dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00229.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will use the Java/JEE sample application in our automation objective. First
    of all, we need to inform Jenkins where our installable files are as they are required
    to execute certain tasks. As the Maven build tool is used in this application,
    we need a Maven installable folder too. Download Apache Maven. Go to Manage Jenkins
    in the Jenkins dashboard and click on Global Tool Configuration. Click on Add
    JDK. We have JDK installed already, so we can give the path of `JAVA_HOME` and
    our Java is configured properly.
  prefs: []
  type: TYPE_NORMAL
- en: Global Tool Configuration in Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will configure various tools that we need to utilize at
    the time of creating a build job, for example, Java, Ant, Maven, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00230.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can install this also from the Jenkins dashboard. What if we have two different
    applications where one needs to be compiled with JDK 1.7 and the other with JDK
    1.8? We can add multiple JDK and while creating a Build Job, we can specify which
    JDK we want to utilize for that build job execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Java is configured, our next task is to configure Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have configured different tools in Jenkins, we will create a new
    job or item using the Jenkins dashboard, so we can configure continuous integration
    for JEE-based applications.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring Maven-based JEE web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a Maven-based Jenkins build job that will execute
    the `pom.xml` file for compilation, ubit test execution, and creating a package
    file. So let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Jenkins dashboard, click on New Item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As it is a Maven-based project, we will select the Maven project template.
    In case it is an Ant-based application or any other automation task, then we can
    select the Freestyle project template to create Build Job. Select Maven project
    and click on OK. It will open the build job configuration page, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00233.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In Source Code Management, provide a GitHub URL, SVN URL (install the subversion
    plugin first), or any repository URL. We can also access the code available on
    the filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Build section, select the Maven Version that we have configured in the Global
    Tool Configuration section. Provide the Maven goal to be executed on `pom.xml`.
    For more details on Maven goals, go to the Apache Maven website. The package goal
    will compile the source code, execute the unit test case, and create a package
    or war file in the context of Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Apply and Save on the job configuration page. Click on the Build Now
    link on the dashboard. Verify the Build History on the same page. The first build
    will be in progress.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the progress bar to go to the console output directly on the Jenkins
    dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: It will start fetching the code from the repository and put it into the local
    workspace. If it fetches the code successfully, then on a Project dashboard or
    on a Build dashboard, check workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait until the package goal of Maven is executed in Jenkins. It will compile
    all source files, execute unit test cases written in JUnit, and create a WAR file
    that needs to be deployed in the web server such as Tomcat or JBoss:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the build is successful, our first target is achieved and that is continuous
    integration. If it fails due to Maven downloads, then check Maven-related settings.
    If Jenkins is installed behind the proxy, then give proxy details in Apache Maven’s
    config file, so it can access the Maven repository and download the required files.
  prefs: []
  type: TYPE_NORMAL
- en: Unit test case results in Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To check the unit test execution, go to the Project and verify the build that
    has been executed successfully. Click on Test Result (no failures):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It will give a list of Test Result based on packages. To get more details,
    go to specific packages and verify the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Master agent architecture in Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s consider a scenario where we have specific tools, which are on a different
    server and these tools are part of an important phase of application life cycle
    management.
  prefs: []
  type: TYPE_NORMAL
- en: In that case, we can use our Jenkins server as a master and the server with
    specific tools as the agent. In this way, master Jenkins can access resources
    available on other servers to execute specific operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Manage Jenkins and click on Manage Nodes. We can see the master node
    available on which our Jenkins is installed. To add a new node that might have
    a different operating system and tool set, we need to click on New Node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Give a node name and select it as a Permanent Agent. Click on OK. Enter Name,
    Labels, and Remote root directory. Remote root directory is the directory where
    all details of execution on the agent will be stored. It is similar to the JENKINS_HOME’s
    workspace directory on the agent node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Save; go to Security Configuration and Enable Slave Agent Port – TCP
    port for JNLP agents (keep it as random and not the disable state):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Agent configuration in Master Jenkins. Copy the command to Run from
    agent command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Download the `slave.jar` as well on the agent machine and execute the command
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the agent is connected in the console, verify the same in master Jenkins
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have the agent connected to the master, we can assign build jobs to
    be assigned to that agent for execution. Before executing build jobs on the agent,
    we need to make sure that all tools that are needed for execution are configured
    in master Jenkins as well so that master can use these installable for execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the job configuration, we can select the Restrict where this project can
    be run checkbox and provide Label Expression for agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the agent Node page, we can provide Tool Locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can use such agents for static code analysis or test execution where different
    tools can be installed on agents and then agents are assigned to execute a job.
    Let's cover SonarQube in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Jenkins and SonarQube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, first let's see how to configure SonarQube with Jenkins so that we can perform
    static code analysis by triggering it from Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Go to Manage Jenkins, click on Manage Plugins, and then click on the Available
    tab. Find the SonarQube plugin and install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Manage Jenkins, and then click on Configure System. Find the SonarQube
    servers section and click on the Add SonarQube server. Provide Server URL and
    credentials. Get a Server authentication token from SonarQube (`Administration`
    | `Security` | `Users`) and provide it in Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to Global Tool Configuration in Manage Jenkins and configure the SonarQube
    Scanner to install automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Create a new freestyle job in Jenkins. Configure JDK path of agent where SonarQube
    is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Install the `Quality gate` plugin as well. By configuring the `Quality gate`
    plugin, we can fail the Jenkins build job if SonarQube analysis fails.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the repository URL of the project. Go to Job configuration and in
    the Build step add Execute SonarQube Scanner. Select JDK and enter the path to
    `sonar-project.properties` or provide Analysis properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In Post-build Actions, select Quality Gates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the Project Key that we have given in analysis properties or `sonar-project.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Build now and verify the results of build execution in Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the SonarQube server, and verify code analysis available in the Dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00253.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is how we can integrate SonarQube in Jenkins. Let's see how we can send
    e-mail notifications from Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: E-mail notifications in Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how to configure e-mail notifications to send the status of job
    executions to specific stakeholders. Go to Manage Jenkins, click on Configure
    System, and configure the e-mail settings as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00254.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Post-build Actions, select E-mail Notification and configure Recipients.
    Save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00256.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can send a notification if it is an unstable build and we can send an e-mail
    to the individual who has broken the build.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how continuous integration can be performed
    using **Visual Studio Team Services** (**VSTS**).
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration using Visual Studio Team Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We often say DevOps has nothing to do with the tools. All tools perform the
    same operation with some minor variations or flexibility. We will see how continuous
    integration can be performed using VSTS.
  prefs: []
  type: TYPE_NORMAL
- en: Create an Account in VSTS and create one Project with the name `PetClinic`.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse and VSTS integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to integrate Eclipse and VSTS so we can commit
    the code from the local system to VSTS.
  prefs: []
  type: TYPE_NORMAL
- en: Download Eclipse, open it, and click on the Help menu. Select Install New Software.
  prefs: []
  type: TYPE_NORMAL
- en: Add a site to install the TFS plugin in Eclipse so we can commit code to VSTS
    from the Eclipse directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Team Explorer Everywhere and click on Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00257.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Review Install Details and click on Next.
  prefs: []
  type: TYPE_NORMAL
- en: Review Licenses and Accept Terms and click on Finish.
  prefs: []
  type: TYPE_NORMAL
- en: Wait until the installation is complete and restart the Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: In Eclipse, go to Window | Perspective | Open Perspective | Other... | Select
    Team Foundation Server Exploring.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Connect to Team Services or a Team Foundation Server. We will connect
    with team services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00258.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Add... in the Team Foundation Server list. Provide the URL of our
    VSTS account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00259.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It will try to connect to the VSTS account and ask for credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Once the connection is successful, we can connect to the server from Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00260.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Select a Team Project from the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Finish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00261.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Go to the VSTS account in the browser and verify the existing data in the Project
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the Team Explorer perspective in Eclipse. Now it is connected, so we
    can perform operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00258.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Before any other action, import a PetClinic code into Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the Project and click on Team.
  prefs: []
  type: TYPE_NORMAL
- en: Select `Share Project`.
  prefs: []
  type: TYPE_NORMAL
- en: Select Team Foundation Server in the Select a repository type plugin dialog
    box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00262.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the team project that we created initially in the VSTS in the Team Project
    Selection dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00263.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a server location to share the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00264.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Review the share configuration and click on Finish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, go to the Team Explorer perspective and click on Check In after
    providing a comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00265.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Confirm Check In.
  prefs: []
  type: TYPE_NORMAL
- en: Verify Check In in Eclipse, where the icons of the nearby files will be changed
    to denote that the files are not changed since the last check in process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify all the files in VSTS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00267.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have the code available in the VSTS code section, we can easily configure
    continuous integration in VSTS.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration in VSTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Essentially, we will follow the process where developers can share code in
    the repository using IDE. VSTS will trigger a build definition execution and it
    will perform compilation of source files, unit test execution, and other tasks
    based on configuration and create a package file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In VSTS, we need to create the build definition for continuous integration.
    Go to the VSTS account in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the PetClinic project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00270.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Build & Release menu in the top bar and select Builds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00271.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is no build definition available as of now. Create a  + New Definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00272.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have Maven-based projects, so we will select the Maven build definition
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00273.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a Repository source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00274.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Check Continuous Integration (build whenever this repository is updated). Click
    on Create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00275.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It will open the build definition in Edit mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Maven build step, verify the location of the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00276.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Triggers section and verify Continuous integration (CI):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00277.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Save button and give an appropriate name to the build definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00278.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Queue new build... to execute the build definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00279.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It will wait for the available agent to execute the build definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00281.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Wait until the build execution is completed successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00282.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Builds section and verify the build results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00283.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify the Summary of the build definition execution. It is executed on the
    hosted agent. All the required runtime is available on the hosted agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00284.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify the history of the build definition execution to find out the result
    of unit test execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00285.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Test Plans section in VSTS and click on Recent test runs to find
    out more details on unit test execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00286.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we are done.
  prefs: []
  type: TYPE_NORMAL
- en: We have used VSTS to achieve continuous integration for our sample spring-based
    Java web application.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the things in Jenkins and VSTS are the same in terms of the way we perform
    automation. Hence, understanding of one tool always helps to do the same with any
    other tools and it proves our belief that it is not about tools. It is about people,
    processes, mindsets, and tools.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a famous quote by Marcel Proust that says:'
  prefs: []
  type: TYPE_NORMAL
- en: The real voyage of discovery consists not in seeking new landscapes, but in
    having new eyes.
  prefs: []
  type: TYPE_NORMAL
- en: We will change the way application packages are created. We may need to go through
    the same kind of procedures to create a package or a WAR file or an APK file or
    an IPA file. Hence, we are not seeking new landscape. However, we need to find
    an efficient way to finish the process effectively and hence we need to look for
    having new eyes.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we have described in detail how we can perform continuous integration
    using Jenkins and Visual Studio Team Services. We have seen results of the unit
    test execution and how packages are created in Jenkins and Visual Studio Team
    Services.
  prefs: []
  type: TYPE_NORMAL
- en: The most important thing we know is that we need to consider implementation
    of continuous integration as a DevOps practice doesn't require specific tools.
    We can use any tool for automation and achieve the same objective. It is about
    the culture or patterns in the organization and not the tools.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the package ready, we need to prepare or keep ready an environment
    for deployment. We will see how to prepare an environment using Docker containers
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
