- en: Leverage Azure Extensions in Dynamics 365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how we can consume the new REST Web API
    endpoint in Dynamics 365 to perform various operations and how to use it to develop
    custom business applications. In this chapter, we will learn how Dynamics 365
    natively supports integration with Microsoft Azure. This chapter assumes a basic
    understanding of fundamentals of the Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: For Microsoft Azure reference—[https://docs.microsoft.com/en-us/azure/fundamentals-introduction-to-azure](https://docs.microsoft.com/en-us/azure/fundamentals-introduction-to-azure)
    and [https://azure.microsoft.com/en-in/training/](https://azure.microsoft.com/en-in/training/)
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure can be defined as a cloud computing platform or collection of
    cloud-based services that developers and IT professionals can use to build, test,
    deploy and manage applications through various data centers across the globe.
    Microsoft Azure provides **Infrastructure as a service **(**IaaS**), **Platform
    as a service** (**PaaS**) and **Software** **as a service** (**SaaS**).
  prefs: []
  type: TYPE_NORMAL
- en: With **IaaS,** we are basically referring to Azure virtual machines, that is
    servers hosted on the cloud. The cloud computing service provider, Microsoft in
    this case, manages the infrastructure and we need to pay for using the resources.
    Here we have complete control and are responsible for managing operating systems,
    middleware and applications running there. We can also deploy Dynamics 365 On-premises
    in Microsoft Azure virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: With **PaaS**, we have a complete development and deployment environment available
    to us inside the cloud, which we can use to build, deploy, and manage our applications
    in the cloud. We pay for the cloud services that we are using. Here, we only manage
    our applications and services, and the cloud service provider manages everything
    else.
  prefs: []
  type: TYPE_NORMAL
- en: With **SaaS**, we basically connect and use software or cloud-based apps over
    the internet. Here, we just need to pay for the cloud-based app that we are going
    to use. The cloud service provider manages everything, be it underlying infrastructure,
    middleware, application software and so on. We just need to connect to these apps,
    mostly using a web browser over the internet to use them. Dynamics 365 Online
    falls under SaaS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Azure Integration with Dynamics 365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Azure Integration with Dynamics 365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Azure-aware plugins and different listener applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Azure integration with Dynamics 365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Azure Service Bus is the main component in Microsoft Azure Stack that
    enables us to connect Dynamics 365 with Microsoft Azure. Through Azure Service
    Bus we can pass the details of an operation performed inside Dynamics 365 to multiple
    applications that are listening to it and can read and process that information.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Microsoft Azure Service Bus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure Service Bus can be defined as a cloud messaging service that runs in
    Microsoft''s Azure Data Center. Azure Service Bus enables us to connect different
    applications, services or devices that are hosted in the cloud or on-Premises
    inside the firewalled networks. It can be used to connect different **line-of-business**
    (**LOB**) applications, tablets, phones or even any household appliances or sensors.
    This Azure Service Bus supports two different communication mechanisms: brokered
    messaging (queues, topics, and subscriptions) and relay service.'
  prefs: []
  type: TYPE_NORMAL
- en: The Azure Service Bus brokered messaging capabilities include queues and topics
    that can be created and hosted in Microsoft's Azure Data Center. An application
    can connect to the queue or topics created and send messages to them. These messages
    will be stored durably. Receiving applications can then connect to them and can
    receive and process the messages. The sending applications and the receiving applications
    can either be hosted in the cloud or can be on-premises. Queues provide unidirectional
    asynchronous communication where the publisher publishes a message and the subscriber
    receives the message. Each message is received by a single subscriber. Topics
    also provide unidirectional asynchronous messaging infrastructure where a publisher
    publishes a message and receivers receive the message like a queue. The main difference
    is that the same message can be received by multiple subscribers, who can optionally
    specify some criteria so that they only receive the messages that match the rules
    specified. As they provide one-way asynchronous communication through a broker,
    that is there is no direct connection between senders and receivers, it is not
    suitable for scenarios where we want both sender and receiver to exchange messages
    or directly connect to each other, or want synchronous communication between them.
    To address this Azure Service provides relays.
  prefs: []
  type: TYPE_NORMAL
- en: The Azure Service Bus relay service provides bi-directional synchronous communication
    capabilities between applications, unlike queues and topics. The relay service
    allows us to expose an endpoint in the cloud that serves as a proxy for our services
    hosted on the cloud or on-premises services. Any client with internet access can
    then make calls to this endpoint, which are relayed back to the service hosted
    behind the firewall or any other application listening for the messages. This
    provides a very reliable and cost-effective way for organizations to expose service.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Service Bus documentation :[ https://docs.microsoft.com/en-us/azure/service-bus-messaging/](https://docs.microsoft.com/en-us/azure/service-bus-messaging/).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Dynamics 365 and Azure Service Bus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we covered the basics of Azure Service Bus, in this
    section we will look at how Dynamics 365 is integrated with Azure Service Bus.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows how Dynamics 365 works along with Azure Service
    Bus to connect to applications that can be in the cloud or hosted behind the firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/741fde55-1da3-414a-8a00-ae41e8165c52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a step-by-step explanation for the same:'
  prefs: []
  type: TYPE_NORMAL
- en: A Dynamics 365 user performs an operation inside CRM, like creating a lead record,
    updating an opportunity and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This triggers the execution of registered Azure-aware OOB (out of the box) plugins
    or custom Azure-aware plugins or workflow activity, which then notifies the asynchronous
    service system job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the asynchronous service receives the notification, it handles the posting
    of data context of the request message to the Azure Service Bus. The posting is
    performed through a system job. Dynamics 365 User can check the status of the
    system job inside Dynamics 365 Web application, (Settings | System Jobs).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microsoft Azure Service Bus then relays the execution context to Microsoft Azure
    Service Bus listener applications. The Azure Service Bus also manages the authorization.
    Dynamics 365 that posts the data to Service Bus and any listener application that
    reads it, are authorized by using **either Access Control Service** (**ACS**)
    or **Shared Access Signature** (**SAS**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Azure Service Bus: Authentication and Authorization—[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-authentication-and-authorization](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-authentication-and-authorization).'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure Service Bus listener applications that are registered on an
    Azure Service Bus solution endpoint can read and process the Dynamics 365 execution
    context posted by Azure Service Bus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Azure Service Bus then sets the status of the related system job as completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SAS Authorization was introduced in CRM Online 2016 Update 1 and performs better
    than ACS. SAS is the recommended authorization method for Dynamics 365.  Refer
    here for updating a service endpoint from ACS to SAS Authorization—[https://msdn.microsoft.com/en-us/library/mt728940.aspx](https://msdn.microsoft.com/en-us/library/mt728940.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Azure-aware plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw earlier, we can register an Azure-aware plugin against a particular
    event inside Dynamics 365, which then passes this execution context to Azure Service
    Bus, which in turn relays it to the listener applications. Here, we can either
    use the OOB Azure-aware plugin or we can write our own custom Azure-aware plugin
    or custom workflow activity.
  prefs: []
  type: TYPE_NORMAL
- en: With Dynamics 365 Online Version 9.0, we can use Webhooks as an alternative
    to Azure Service Bus to send data about the events to a web application—[https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/use-webhooks](https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/use-webhooks).
  prefs: []
  type: TYPE_NORMAL
- en: 'For the OOB Azure-aware plugin, we need to first register the new service endpoint
    through the plugin registration tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1df8a907-14d4-4e8f-8514-c253c434f362.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside service endpoint registration, we need to specify a connection to Azure
    Service Bus to which we want to pass the plugin events:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0538aa22-6ecd-4146-b59b-aa5de641d363.png)'
  prefs: []
  type: TYPE_IMG
- en: The service endpoint holds the authorization information about the Azure Service
    Bus such as Service Bus Namespace address and SAS Key. After successful registration,
    we can then add a plugin step to the service endpoint added, the way we do for
    our usual plugin assemblies.
  prefs: []
  type: TYPE_NORMAL
- en: This Azure-aware OOB plugin executes in full trust. However, there are certain
    limitations with the OOB Azure-aware plugin, such as it can only run asynchronously,
    cannot call CRM SDK Method, and cannot write trace statements for logging, or
    auditing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the OOB Azure-aware plugin that Dynamics 365 provides, we can also
    create our own custom Azure-aware plugin or custom workflow activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `IServiceProvider` passed to the `Execute` method of IPlugin contains an
    instance of `IServiceEndpointNotificationService`**.** We can call its `Execute`
    method to post the execution context to Azure Service Bus. The `Execute` method
    needs an entity reference of the service endpoint; we can grab the service endpoint
    ID from the plugin registration tool. Adding this code to invoke the endpoint
    notification service makes our Plugin **Azure aware**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The custom Azure-aware plugin executes in partial trust mode in the sandbox.
    The benefit of writing a custom plugin is that we can call CRM SDK methods and
    can also receive a response from the listener applications in case of two-way
    relay service. Additionally, the plugin can be registered as either synchronous
    or asynchronous.
  prefs: []
  type: TYPE_NORMAL
- en: For Azure-aware plugins, it is recommended to register them to run asynchronously
    for best system performance.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding different contracts between Dynamics 365 and an Azure solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the different types of contract that can be defined while
    registering a new service endpoint through the plugin registration tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Queue:**'
  prefs: []
  type: TYPE_NORMAL
- en: For a queue contract, a message queue needs to be created in Azure Service Bus.
    The listener application waits for the message to be posted by Service Bus in
    the queue. When the message is available in the queue, the listener application
    can read and process the message. The listener application doesn't need to be
    actively listening in the case of a queue contract.
  prefs: []
  type: TYPE_NORMAL
- en: '**One-way:**'
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a one-way contract, the listener application needs to be actively
    listening. The post to the Service Bus fails if there is no active listener and
    the status of the system job is set to "Failed" after the system job runs out
    of retries.
  prefs: []
  type: TYPE_NORMAL
- en: The listener application needs to implement the `IServiceEndpointPlugin` interface's
    `Execute` method along with `WS2007HttpRelayBinding`, to which `RemoteExecutionContext`
    is passed from the Azure Service Bus.
  prefs: []
  type: TYPE_NORMAL
- en: '**Two-way:**'
  prefs: []
  type: TYPE_NORMAL
- en: The two-way contract is similar to a one-way contract, the only difference is
    that in the case of the two-way contract a message of type string can be returned
    back to the custom plugin workflow activity that posted the message to Azure Service
    Bus from the listener application.
  prefs: []
  type: TYPE_NORMAL
- en: The listener application needs to implement `ITwoWayServiceEndpointPlugin` interface's
    `Execute` method along with `WS2007HttpRelayBinding`, to which `RemoteExecutionContext`
    is passed from the Azure Service Bus.
  prefs: []
  type: TYPE_NORMAL
- en: '**REST:**'
  prefs: []
  type: TYPE_NORMAL
- en: A REST contract is similar to a two-way contract. Here, the listener application
    needs to implement the `IWebHttpServiceEndpointPlugin` interface's `Execute` method,
    along with `WebHttpRelayBinding`, to which `RemoteExecutionContext` is passed
    from the Azure Service Bus.
  prefs: []
  type: TYPE_NORMAL
- en: '**Topic:**'
  prefs: []
  type: TYPE_NORMAL
- en: Topics are similar to queues. However, with topics, one or more listeners can
    subscribe to receive messages from the topic. The messages are filtered and routed
    to the subscriber via the corresponding subscription from the topic.
  prefs: []
  type: TYPE_NORMAL
- en: '**Event Hub:**'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure event hubs provide telemetry services on a very large scale.
    They are typically used for large-scale application telemetry and Internet of
    Things scenarios. Several devices or applications can send telemetry messages
    to the event hubs. The messages can be in thousands or millions per second to
    be read and processed. Creating an event hub solution application is similar to
    writing an Azure Service Bus listener application. Here, we first start by creating
    an event hub in Microsoft Azure just as in Azure Service Bus. Next, we need to
    specify the event hub connection string while registering the Dynamics 365 service
    endpoint through the plugin registration tool. We will talk in more detail about
    it later on in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To write listener applications for the above contracts, we need to use Azure
    SDK Version 1.7 or later—[https://azure.microsoft.com/en-in/downloads/](https://azure.microsoft.com/en-in/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: Now, as we have a basic understanding of the Azure Extensions available inside
    Dynamics 365, we will implement a simple business scenario in the next section
    to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Dynamics 365 and Azure Service Bus integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us take a simple scenario for implementation which will help us in understanding
    how to configure Azure Extensions inside Dynamics 365 and how to write different
    listener applications for different contract types. The listener application is
    basically a third-party application which needs to get notified whenever an event
    occurs in Dynamics 365.  The listener application and the Dynamics 365 are two
    separate disconnected applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: On creation of a lead record in Dynamics 365, pass its information
    (execution context) to the listener application through Azure Service Bus. The
    listener application can then read and process that information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us walk through all the steps in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to an Azure Management portal [https://portal.azure.com](https://portal.azure.com)
    using an existing account or create a free account at [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search and Add a new Service Bus service in the portal. Provide the required
    details and click on Create namespace to create the Service Bus namespace. The
    name that must be specified needs to be unique across the entire data center.
    This creates a URI for the Service Bus namespace which can be used to access it
    over the internet. This Service Bus namespace acts as a container for the communication
    mechanisms such as relay service and brokered messaging (queues and topics):![](img/4368cfd1-3ea4-4f4c-aebc-a155c9b37887.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we would create a queue to which we would be posting the message from
    Dynamics 365\. Open the Service Bus and click on the **+** Que**ue** button to
    create a queue with the required details:![](img/a9fd163c-7023-4ab2-8bfe-f791488cf5c7.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide the details as shown here and click on the Create button to create
    the queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30a56508-769f-44b1-861e-d6230b8df185.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the Queue created, select Shared access policies and click on Add to create
    a new shared access policy. As the name suggests, send rights are required for
    sending messages to a listener at a namespace, similarly, listen rights will be
    required by a listener application to begin listening on a namespace. Manage rights
    would be required to create a queue, delete a queue, create a subscription, enumerate
    topics, subscriptions and so on. Here, we have selected the Send and Listen checkbox
    while adding the SAS policy as we are going to use the same policy for both sending
    and listening. We can also create two separate policies, one for the sender and
    another for the listening application. Click on Create, to create a new SAS policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5773cd38-b0c3-4fd3-bc39-9578e78ab78b.png)'
  prefs: []
  type: TYPE_IMG
- en: Rights required for **Service Bus Operations** (**SAS**) are detailed here—[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas#rights-required-for-service-bus-operations](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas#rights-required-for-service-bus-operations)
  prefs: []
  type: TYPE_NORMAL
- en: Select the shared access policy created and copy its primary connection string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in Dynamics 365, we need to register a service endpoint through the plugin
    registration tool. Select Register New Service Endpoint in the plugin registration
    tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the latest Microsoft Dynamics 365 SDK from—[https://www.microsoft.com/en-us/download/details.aspx?id=50032](https://www.microsoft.com/en-us/download/details.aspx?id=50032)
  prefs: []
  type: TYPE_NORMAL
- en: Paste the connection string into the Register New Service Endpoint dialog box
    and click Next:![](img/35de414d-9e59-493d-be8f-b1fc87cb4d75.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This auto-populates the Service Endpoint Registration details. Click on Save:![](img/b497793f-38fa-43f8-baea-1a5511b2c764.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This adds the service endpoint in the plugin registration tool. Next, we register
    a new step for create message on the Lead entity. Set Execution Mode to Asynchronous.
    If we try setting it as Synchronous we will get the following alert Only asynchronous
    steps are supported for Service Endpoint plug-ins as OOB Azure-aware plugin only
    supports asynchronous execution mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5728f833-6414-4640-82d9-e37f68d1a39d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let us create a lead record inside Dynamics 365 to trigger the plugin:![](img/603709d0-fd5d-4bf9-9c2f-01c454a05bc6.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to Settings | System Jobs, a corresponding system job would have been created
    which shows the status of the message posted to Azure Service Bus from the asynchronous
    service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cafb16d2-db7d-467e-b224-1a25155d02f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Back in our queue, we can see a new message added to ACTIVE MESSAGE COUNT:![](img/cae56573-5469-4d0e-83b3-a22da4725bdd.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In next section, we will create listener applications to read the data posted
    to Azure Service Bus from Dynamics 365.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a queue listener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us create a simple queue listener to read the message passed to queue:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio and select Project Type as Console Application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the following NuGet Package in the project—`WindowsAzure.ServiceBus`.
    It provides a client library for Microsoft Azure Service Bus operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a reference to the `Microsoft.Xrm.Sdk` assembly or install the following
    NuGet Package – `Microsoft.CrmSdk.Core` assemblies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the same connection string that was defined for the service endpoint
    in the plugin registration tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to create a `QueueClient` object using the connection string and get
    the remote execution context using the `BrokeredMessage` received. Next, we are
    retrieving the value for the topic field, the name of the entity and the message
    on which the plugin was fired from the `RemoteExecutionConext` and writing it
    to console as shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: On running our application, we can see the following details passed as `RemoteExecutionContext`
    to the queue in the output:![](img/14523ab2-794e-4d20-a6f5-b1824c6f1fa7.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The sample application, when run, will read the message in the queue and print
    the details in the console.
  prefs: []
  type: TYPE_NORMAL
- en: Here, the **Message Time to Live** property of the queue defines the time span
    the message will remain in the queue, if not processed. After which it is will
    be either removed or dead lettered, that is, moved to another secondary sub-queue
    named dead letter queue. The dead letter queue holds the messages that were not
    delivered or processed.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Service Bus dead letter queue—[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues).
  prefs: []
  type: TYPE_NORMAL
- en: The **Lock Duration** property of the queue specifies the number of seconds
    for which a message will be locked by a receiver once it receives it. This specifies
    the time the listener application has to process the message. If not processed,
    the message will be available to be received by another receiver.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a topic listener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us continue with our previous scenario of the creation of a lead record
    and update it to use topics instead of queues:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Azure Portal to create a topic in Azure Service Bus by clicking on
    +Topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the required details and click on the Create button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e3a8600-1894-47cf-a8cf-bd0caf3da7e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Inside Topic, create a new shared access policy and copy its primary connection
    string. This connection string will be used while registering a new service endpoint
    in the plugin registration tool as shown here:![](img/cbf1843a-93b4-4b3d-84e1-d1bb6b8ce6ff.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new step to this registered service endpoint for it to be triggered by
    the Create of the lead record in Dynamics 365.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let us go back to our created topic. Click on the + Subscription button
    inside Topic to add a new subscription. Specify required details as shown here
    and click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ff12b0a-9240-4985-8030-e14920b80d0c.png)'
  prefs: []
  type: TYPE_IMG
- en: This creates a new subscription inside Topic. We can create multiple subscriptions
    and each subscription will receive a copy of the message that has been posted
    to the Azure Service Bus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the sample code for our topic listener application. Here instead
    of a `QueueClient` object, we would be using a `SubscriptionClient` object to
    read and process the context passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, let us go back to Dynamics 365 and create a lead record to trigger our
    plugin:![](img/6b362696-9c1e-492e-b6d6-d1d1c431c8a2.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside our topic, we can see that all the subscriptions created for that topic
    have received the message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c97b1a1d-29bf-4603-b1d8-0c9ba5b3b9bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Running our subscription listener, we get the expected output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02029edc-0e90-419b-8e1d-45518c52e53c.png)'
  prefs: []
  type: TYPE_IMG
- en: Until now we have covered how to write a listener application for queues and
    topics, in the next section we will cover writing listener applications for one-way,
    two-way and REST contracts.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a one-way listener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us walk through all the steps required for writing a one-way listener:'
  prefs: []
  type: TYPE_NORMAL
- en: Continuing with the same scenario, first, we need to register our service endpoint.
    For this, create a new shared access policy for the Azure Service Bus namespace.
    Go to shared access policies settings for the Azure Service Bus and click on Add
    to create a new policy with send and listen rights and copy its primary connection
    string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the copied connection string in the Register Service Endpoint dialog box
    of the plugin registration tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we create an Azure Service Bus namespace, a policy called `RootManageSharedAccessKey`
    is automatically created. It has an associated pair of primary and secondary keys
    that grant send, listen, and manage rights to the Service Bus namespace. It is
    recommended you create additional policies instead of using this default policy
    which has all the permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the value for properties in Service Endpoint Registration as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Namespace Address: Replace `sb` with `https`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Designation type: `OneWay`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Path: `MyPath`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Service Endpoint Registration dialog box
    populated with the appropriate values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45196d0c-5aca-477a-8b16-ab802bba4047.png)'
  prefs: []
  type: TYPE_IMG
- en: Register a step, on the Create ofthe lead record for the service endpoint registered
    and trigger it by creating a lead record inside Dynamics 365.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Settings | System Jobs and check the corresponding system job created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here the system job will fail with the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c807d437-5b9b-4ede-9a1a-64bd0427707a.png)'
  prefs: []
  type: TYPE_IMG
- en: As we discussed earlier, for the relay service, an active listener is required,
    unlike queues or topics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our one-way listener application, we need to implement the `IServiceEndpointPlugin`
    interface and use `WS2007HttpRelayBinding`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following, we are self hosting the service in a console application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Run the listener application so that it can actively listen for messages passed
    to it and create the lead record inside Dynamics 365\. This will invoke the `Execute`
    method in our listener application and output the remote execution context details
    in the console window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we learned how to write a one-way listener, in the next section
    we will cover how to write a two-way listener application.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a two-way listener and an Azure-aware plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us walk through all the steps in detail for writing a two-way listener:'
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a two-way contract, we need to implement a custom Azure-aware
    plugin that can receive the response back from the two-way listener application,
    but before that let's register a new service endpoint for a two-way contract as
    shown here:![](img/52f70e55-d4c6-4cf6-8308-3720e0d4f6e2.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The two-way listener application needs to implement the `ITwoWayServiceEndPointPlugin`
    interface and use `WS2007HttpRelayBinding`. Also, the `Execute` method returns
    a string that enables the two-way communication. As mentioned earlier, with relay,
    it is real time, so the listener needs to be actively listening to the messages,
    unlike queue and topics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following, we are self-hosting the service in a console application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To read the message returned from the listener application in a two-way relay,
    let us write a custom Azure-aware plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first thing we need here is the GUID of the service endpoint we registered.
    We can get the GUID, ServiceEndpointId from the properties window of the service
    endpoint registered as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43afe7b4-e7a9-421f-b8ad-f2a763cd647a.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, `IServiceEndpointNotificationService` will provide us with the service
    endpoint, for which we will pass the service endpoint entity reference to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to call the `Execute` method of the notification service to post the
    execution context to the Azure Service Bus. The `Execute` method returns the response
    received from the listener application, which we are then tracing using the `ITracingService`
    inside our custom Azure-aware plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Register the plugin and add a new step forthe **Lead on Create** message to
    it. The custom Azure-aware plugin can be registered as synchronous, unlike the
    OOB Azure-aware plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a lead record to trigger the plugin. Make sure our two-way listener application
    is running and ready to receive the message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The listener application, on successfully receiving the context passed from
    the Azure Service Bus, returns the string Message Processed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside Dynamics 365, go to Settings |Plug-In Trace Log to verify the same:![](img/b89b1454-526b-4fe4-96da-267a48f14ccc.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To enable logging for the Plug-in Trace Log, go to Settings |System Settings
    |Customization tab. Select **All options** to enable logging to the Plug-in Trace
    Log field.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover how to write REST listener applications,
    which is similar to the two-way listener application, the main difference being
    that it uses a REST endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a REST listener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us walk through all the steps in detail for writing a two-way REST listener.
    As it uses a REST endpoint, it allows us to create a relay service in Node.js
    which can be executed on multiple platforms such as macOS, Windows, Linux and
    so on:'
  prefs: []
  type: TYPE_NORMAL
- en: Before writing a REST listener, let us first register a new service endpoint
    as shown here:![](img/b5c27824-531f-42a1-86eb-6f0b925dc144.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The REST Listener needs to implement the `IWebHttpServiceEndpointPlugin` interface
    and use `WebHttpRelayBinding`. Here again, we are self hosting the service in
    a console application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in Dynamics 365, create a lead record to trigger the plugin, which calls
    the `Execute` method of the listener application. The listener, on receiving the
    message, returns the string Message Processed by Rest Listener, which is traced
    by the plugin in the Plug-in Trace Logs as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f6dc9d9b-810c-47ca-9aa7-d33f7b144b4c.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we learned how to write a REST listener, in the next section
    we will cover how to write an event hub listener application.
  prefs: []
  type: TYPE_NORMAL
- en: Writing an event hub listener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us walk through all the steps in detail for writing an event hub listener.
    To create an event hub listener:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Azure Portal, search for event hubs, and create a new event hubs namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Event Hubs inside Event Hubs Namespace and click on Add Event Hub to
    create a new event hub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the event hub created, add a new `SharedAccessKey` with appropriate rights
    and copy its connection string and use it while registering a new service endpoint
    in the plugin registration tool as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de11c177-145a-4cc5-ad04-30f0ad938744.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a step to trigger the plugin on Create of the Lead record.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the event hub listener application, create a new console application, add
    the following NuGet Package in it—`WindowsAzure.ServiceBus`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the sample code for our event hub listener application. Here
    we are using the `EventHubClient` object to create the receiver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Create a new lead inside Dynamics 365.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Running our event hub listener, we see the expected JSON output inside the
    console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/deb1181e-2a8d-4a48-bdd8-0ea14d32100f.png)'
  prefs: []
  type: TYPE_IMG
- en: The recommended way to receive events from event hubs is by using the event
    processor host—[https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-dotnet-standard-api-overview#event-processor-host-apis](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-dotnet-standard-api-overview#event-processor-host-apis).
    (The source code for the chapter includes the example of receiving events using
    the event processor.)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered Azure Extensions provided within Dynamics 365 and
    how to configure and write listener applications for different supported contract
    types.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at the new Editable Grid introduced with CRM
    2016 and different properties that are supported.
  prefs: []
  type: TYPE_NORMAL
