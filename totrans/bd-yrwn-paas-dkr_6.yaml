- en: Chapter 6. Reverse Proxy Requests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：反向代理请求
- en: 'One big problem in having many containers with public ports on the same server
    is that they can''t all listen to the standard ports for their kinds of services.
    If we have a MySQL backend service and have 10 MySQL containers running, only
    one of them can listen to the MySQL standard port `3306`. For those who expose
    a web server, the standard port `80` can only be used by one of their WordPress
    containers. In this chapter, we''ll cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有许多容器并在同一服务器上公开端口的一个大问题是，它们无法都监听其服务类型的标准端口。如果我们有一个 MySQL 后端服务并且有 10 个 MySQL
    容器在运行，那么只有其中一个可以监听 MySQL 的标准端口 `3306`。对于那些暴露 Web 服务器的容器，标准端口 `80` 只能由其中一个 WordPress
    容器使用。在这一章中，我们将讨论以下主题：
- en: Explaining the problem
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释问题
- en: Coming up with a solution to the problem
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想出问题的解决方案
- en: Implementing the solution with Nginx and HAProxy
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Nginx 和 HAProxy 实现解决方案
- en: Automating the process of mapping domains
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化域名映射的过程
- en: Explaining the problem
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释问题
- en: The problem in having many containers with the same services on the same host
    is that there are standard ports used by user applications. Using a web browser
    and entering the IP to a Docker host running a WordPress container will ask for
    resources on port `80` by default. You can't expect your users to remember a nonstandard
    port in order to enter your website.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一主机上有多个容器运行相同服务的问题在于，用户应用程序会使用标准端口。使用 Web 浏览器并输入运行 WordPress 容器的 Docker 主机的
    IP 地址时，默认会请求端口 `80` 上的资源。你不能指望用户记住非标准端口来访问你的网站。
- en: '![Explaining the problem](img/3946OT_06_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![解释问题](img/3946OT_06_01.jpg)'
- en: The only way to reach each of the three containers is to manually enter the
    containers' exposed port number.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到达这三个容器的唯一方式是手动输入容器的暴露端口号。
- en: Finding a solution
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找解决方案
- en: Before we head to the solution, let me explain what a regular proxy server is,
    in case you're not familiar with it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入解决方案之前，让我解释一下什么是常规代理服务器，以防你不熟悉它。
- en: A proxy server is a server that connects to services on your behalf and forwards
    all the results to you. After you've set up to route all your traffic through
    the proxy server, you—as a user—won't notice it's there. Everything will work
    as usual.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 代理服务器是一个代表你连接服务并将所有结果转发给你的服务器。在你设置将所有流量通过代理服务器路由之后，你—作为用户—不会察觉到它的存在。所有内容将像平常一样工作。
- en: However, service owners only see that a certain machine (the proxy server) is
    connected to them. If another user uses the same proxy server and the same service
    as you do, the service owner can't tell the difference and will perceive you as
    one single user.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，服务所有者只看到某台机器（代理服务器）与他们连接。如果另一个用户使用相同的代理服务器并与您使用相同的服务，服务所有者无法区分并且会将您视为同一个用户。
- en: '![Finding a solution](img/3946OT_06_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![寻找解决方案](img/3946OT_06_02.jpg)'
- en: Different users connecting through a proxy server appear as one user.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过代理服务器连接的不同用户将显示为一个用户。
- en: As you can see in the preceding diagram, the service owners just see that someone
    with an IP of **213.12.12.3** has connected to them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的图示所示，服务所有者仅看到某个 IP 地址为 **213.12.12.3** 的用户连接到他们。
- en: So, what if we use this on the Docker host? What if we put something in front
    of all the containers? Depending on which domain name is being requested, this
    thing will forward the request to the right container and port and then just forward
    the request's response to the requesting user.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们在 Docker 主机上使用这个方法呢？如果我们在所有容器前放置一些东西呢？根据请求的是哪个域名，这个东西会将请求转发到正确的容器和端口，然后将请求的响应转发给请求的用户。
- en: There are things especially made to solve this kind of problem. They're called
    **reverse proxies** (reverse because the proxy is at the other end, making the
    user only see one IP and forwarding the request).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有些专门设计来解决这种问题的工具，叫做 **反向代理**（反向是因为代理位于另一端，使得用户只能看到一个 IP，并转发请求）。
- en: 'If we install and configure a reverse proxy on our Docker host server, then
    this is how the diagram will look:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 Docker 主机服务器上安装并配置了反向代理，那么图示将如下所示：
- en: '![Finding a solution](img/3946OT_06_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![寻找解决方案](img/3946OT_06_03.jpg)'
- en: A reverse proxy lets all Docker containers appear as one.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 反向代理使所有 Docker 容器看起来像是一个。
- en: The reverse proxy listens to port `80`—the standard web port—and when a request
    for `domain1.com` comes in, the proxy looks at its configuration to see whether
    there is a specified forwarding endpoint for this domain. If there is, the reverse
    proxy forwards the request to the right Docker container, waits for its response,
    and forwards the container's response to the requesting users when it comes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 反向代理监听 `80` 端口——标准的 Web 端口——当 `domain1.com` 的请求到来时，代理会查看其配置，看看是否有为该域名指定的转发端点。如果有，反向代理会将请求转发到正确的
    Docker 容器，等待其响应，并在响应到达时将容器的响应转发给请求的用户。
- en: This is the solution we're after. The only question now is which reverse proxy
    we are going to use. There are quite a bunch of them out there; some reverse proxies
    have more specific purposes, such as load balancing, and some are services that
    do a lot of other stuff and have this feature as well, such as a web server.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们想要的解决方案。现在唯一的问题是我们要使用哪种反向代理。市面上有很多种反向代理；其中一些反向代理有更具体的用途，比如负载均衡，而另一些则是多功能服务，同时也包含了反向代理功能，比如
    Web 服务器。
- en: Implementing the solution
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现解决方案
- en: You will always have preferences when selecting a tool to solve a problem. Sometimes,
    you select a tool because you're comfortable using it and it's good enough; sometimes,
    you select it because it has great performance or because you just want to try
    something new.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择解决问题的工具时，你总会有偏好。有时你选择一个工具是因为你对它熟悉并且它足够好；有时你选择它是因为它的性能优秀，或者只是因为你想尝试一些新的东西。
- en: That's why we will go through this problem and solve it with two different tools.
    The end result will be the same, but the tools have a slightly different setup.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们通过两个不同工具来解决这个问题的原因。最终结果是相同的，但这两个工具的配置方式略有不同。
- en: Before we start implementing the solutions, we use Crane to start an instance
    of our three-container application and verify that it's working by connecting
    it to the site. Have Docker decide the public port for you, so it's `491XX`. Remember
    this port since we will use it when implementing the solutions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始实现解决方案之前，我们使用 Crane 启动一个包含三个容器的应用实例，并通过连接到网站来验证它是否正常工作。让 Docker 决定公用端口，因此它是
    `491XX`。记住这个端口，因为我们在实施解决方案时将会使用它。
- en: We need to point out the domain names we want to use to our Docker host's IP
    address. We can do this either by setting the domain names A-record to our server's
    IP address or by adding a line in our local `/etc/hosts` file, which directs requests
    to the domain names to our server's IP address.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将我们希望使用的域名指向 Docker 主机的 IP 地址。我们可以通过将域名的 A 记录设置为我们服务器的 IP 地址，或者在本地的 `/etc/hosts`
    文件中添加一行，将域名请求指向我们服务器的 IP 地址。
- en: 'I''ll go with the latter and enter this in my Mac''s `/etc/hosts` file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我会选择后者，并将此内容添加到我 Mac 的 `/etc/hosts` 文件中：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you replace the above IP address with your server's IP address.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将上面的 IP 地址替换为你的服务器 IP 地址。
- en: Implementation with HAProxy
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 HAProxy 实现
- en: HAProxy ([http://www.haproxy.org](http://www.haproxy.org)) is a load balancer,
    which has the role of forwarding traffic to different services behind it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: HAProxy ([http://www.haproxy.org](http://www.haproxy.org)) 是一个负载均衡器，负责将流量转发到其背后的不同服务。
- en: 'This is how HAProxy describe themselves:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 HAProxy 对自身的描述：
- en: '*"HAProxy is a free, very fast and reliable solution offering high availability,
    load balancing, and proxying for TCP and HTTP-based applications. It is particularly
    suited for very high traffic web sites and powers quite a number of the world''s
    most visited ones. Over the years it has become the de-facto standard open source
    load balancer, is now shipped with most mainstream Linux distributions, and is
    often deployed by default in cloud platforms."*'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“HAProxy 是一个免费的、非常快速且可靠的解决方案，提供高可用性、负载均衡和基于 TCP 和 HTTP 的应用程序代理。它特别适用于流量非常大的网站，支撑了世界上一些最受欢迎的网站。多年来，它已成为事实上的标准开源负载均衡器，现在大多数主流
    Linux 发行版都已默认安装，且通常在云平台上作为默认部署工具。”*'
- en: This sounds like something that fits our needs.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来这正是我们所需要的。
- en: Installing HAProxy
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 HAProxy
- en: As noted in the quote, many systems are installed already and shipped with it.
    If you can't find it, it should be available in you package manager if you use
    Ubuntu or Debian (`apt-get install haproxy`) or in some other distro with a package
    manager.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如引用中所述，许多系统已经预装并随系统发布。如果找不到它，使用 Ubuntu 或 Debian 的包管理器（`apt-get install haproxy`）或其他发行版的包管理器，应该可以找到。
- en: On my Amazon EC2 instance that runs Amazon Linux, HAProxy can be installed using
    `yum install haproxy`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的Amazon EC2实例上，该实例运行的是Amazon Linux，HAProxy可以通过`yum install haproxy`安装。
- en: 'The following output will be obtained as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出将会如下所示：
- en: '![Installing HAProxy](img/3946OT_06_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![安装HAProxy](img/3946OT_06_04.jpg)'
- en: It's not the most recent version, but that's OK for the things we are about
    to do.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是最新版本，但对于我们接下来的操作来说已经足够了。
- en: Configuring HAProxy
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置HAProxy
- en: We'll write an HAProxy configuration in the file `/etc/haproxy/docker.cfg` so
    that we don't have to remove everything in the default configuration file, as
    it may be good for reference in the future.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在文件`/etc/haproxy/docker.cfg`中编写HAProxy配置，这样我们就不需要删除默认配置文件中的所有内容，因为它将来可能作为参考。
- en: 'HAProxy divides its configuration into four parts: global, defaults, frontend,
    and backend. Don''t confuse frontend and backend with frontend and backend development.
    Here, frontend means the server part that''s facing the Internet, and backend
    is the server part that''s behind HAProxy, which in our case are the Docker containers.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: HAProxy将其配置分为四个部分：global、defaults、frontend和backend。不要将frontend和backend与前端和后端开发混淆。在这里，frontend是面向互联网的服务器部分，而backend是HAProxy后面的服务器部分，在我们这个例子中是Docker容器。
- en: 'Open the configuration file and start by typing in the generic stuff, as shown
    here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 打开配置文件并从这里开始输入通用设置，如下所示：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we enter the port to listen on and the backend configurations to use for
    which domain:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们输入要监听的端口和要使用的后端配置，针对哪个域名：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We define that regular incoming HTTP traffic on port `80` should be captured.
    The `acl` here means access control list and is a flexible solution to take decisions
    based on content extracted from the requests. The `hdr_end(host) -i domain1.com`
    function call means that the end of the header host is case-insensitive, matched
    against the string `domain1.com`. The result (Boolean) of this match is saved
    in the `is_site1` variable.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了常规的传入HTTP流量应该在端口`80`上被捕获。`acl`是访问控制列表（Access Control List），是一种灵活的解决方案，可以根据请求中的内容做出决策。`hdr_end(host)
    -i domain1.com`函数调用意味着对header host的末尾进行不区分大小写的匹配，匹配字符串`domain1.com`。这个匹配的结果（布尔值）将被保存在`is_site1`变量中。
- en: Note that this means that all the subdomains for `domain1.com` will be matched
    with this setup. If you just want to match `www.domain1.com`, you can use `hdr(host)
    -i www.domain1.com` instead.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这意味着`domain1.com`的所有子域都将与此设置匹配。如果你只想匹配`www.domain1.com`，可以改用`hdr(host) -i
    www.domain1.com`。
- en: Now that we have the match result in the `is_site1` variable, we can send the
    request to a backend configuration, named `site1`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将匹配结果保存在`is_site1`变量中，接下来可以向名为`site1`的后端配置发送请求。
- en: 'We append this to our configuration file:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其附加到配置文件中：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We define our backend name as `site1`, set a few options, and add the server
    and the port to our WordPress container.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将后端名称定义为`site1`，设置一些选项，并将服务器和端口添加到我们的WordPress容器。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you enter your WordPress container's exposed port instead of `49187`
    in the preceding code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在之前的代码中输入的是你WordPress容器暴露的端口，而不是`49187`。
- en: 'It''s time to try this configuration. Save the configuration file and test
    it in a shell with this command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候尝试这个配置了。保存配置文件，并在终端中使用以下命令进行测试：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output should say `Configuration file is valid`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该显示`配置文件有效`。
- en: Make sure you don't have something already listening to port `80` on your machine.
    You can use something such as `netstat –a` to verify that `80` or HTTP isn't listed.
    If they are, find the app that's listening and shut it down.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的机器上没有其他应用在监听端口`80`。你可以使用类似`netstat –a`的命令来验证`80`或HTTP是否已经列出。如果已经有应用在监听，找到并关闭它。
- en: 'Start HAProxy with this command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动HAProxy：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `-D` option means that we want to run it as a daemon in the background.
    You shouldn't see any output when you invoke this command.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`-D`选项意味着我们希望它作为后台进程运行。你运行这个命令时应该不会看到任何输出。'
- en: Let's check whether HAProxy is running by invoking `ps aux | grep haproxy`.
    You should see it listed there. Finally, let's verify that it is listening to
    port `80` by invoking `netstat –a | grep http`. Now, you should have something
    in that list.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过运行`ps aux | grep haproxy`来检查HAProxy是否在运行。你应该能看到它列在那儿。最后，我们通过运行`netstat
    –a | grep http`来验证它是否在监听端口`80`。现在，你应该在列表中看到相应的内容。
- en: 'The output obtained is displayed here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的是获得的输出：
- en: '![Configuring HAProxy](img/3946OT_06_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![配置HAProxy](img/3946OT_06_05.jpg)'
- en: It all looks good!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一切看起来都很不错！
- en: 'Just to recap what we have done here: we set up a service that listens for
    incoming requests on port `80` on our server. When a request on this port comes
    in, a check on the request header''s host is performed to see whether it matches
    `domain1.com`. If we have a match, the request is forwarded to the IP address
    `127.0.0.1` and to the port `49187`. The response from this IP and port are sent
    back to the requester.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 简单回顾一下我们所做的：我们设置了一个服务，它在服务器的端口 `80` 上监听传入的请求。当该端口接收到请求时，检查请求头中的主机，看看是否与 `domain1.com`
    匹配。如果匹配，请求将被转发到 IP 地址 `127.0.0.1` 和端口 `49187`。来自该 IP 和端口的响应将返回给请求者。
- en: Now to the moment of truth. Open your web browser and enter the URL `domain1.com`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在到了关键时刻。打开你的网页浏览器，输入 URL `domain1.com`。
- en: Make sure that you have entries for `domain1.com` in your host's file, pointing
    it to your server.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在你的主机文件中有 `domain1.com` 的条目，并指向你的服务器。
- en: 'After you perform the preceding instructions, you will see the following website
    screen:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述步骤后，你将看到以下网站界面：
- en: '![Configuring HAProxy](img/3946OT_06_06.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![配置 HAProxy](img/3946OT_06_06.jpg)'
- en: You can see that in the location bar, no port is specified. Wonderful!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，在位置栏中没有指定端口号。太棒了！
- en: Adding more domains to HAProxy
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向 HAProxy 添加更多域
- en: 'We did not go through all this just to serve a single web application on port
    `80`, which can be done without a reverse proxy. Start another WordPress application
    with Crane by copying the old configuration to a new directory and change the
    service''s names, as shown here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不是为了仅在端口 `80` 上提供单个 Web 应用程序而进行这么多工作，这可以通过不使用反向代理来实现。使用 Crane 启动另一个 WordPress
    应用程序，方法是将旧的配置复制到一个新目录，并更改服务名称，如下所示：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open the HAProxy configuration file again and add two lines in the frontend:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打开 HAProxy 配置文件，并在前端添加两行：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After that, add a new backend configuration named `site2`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，添加一个名为 `site2` 的新后端配置：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Make sure that you replace the port with the one you got. Restart HAProxy and
    do the checks we did the last time we started it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你替换了你获得的端口号。重启 HAProxy 并进行我们上次启动时所做的检查。
- en: To restart HAProxy, run `/etc/init.d/haproxy restart`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要重启 HAProxy，运行 `/etc/init.d/haproxy restart`。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'HAProxy can reload a new configuration without dropping active sessions with
    this command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: HAProxy 可以使用以下命令重新加载新配置，而不会丢失活动会话：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Open your browser and go to `domain1.com` in order to make sure that the old
    one is working. If it does, go to `domain2.com`. You should see another WordPress
    installation site. Just to be sure that it's not the same, go ahead and install
    one of them. Or, go to `domain3.com` and see what happens when a domain points
    to the server without having it match in HAProxy.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器，访问 `domain1.com`，确保旧站点正常运行。如果它正常工作，再访问 `domain2.com`。你应该会看到另一个 WordPress
    安装站点。为了确保它不是相同的，安装其中一个。或者，访问 `domain3.com`，看看当一个域指向服务器而在 HAProxy 中没有匹配时会发生什么。
- en: Implementation with Nginx
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Nginx 实现
- en: Now, we are going to do the same thing as we did with HAProxy, but we will use
    the excellent web server Nginx ([http://nginx.org/en/](http://nginx.org/en/))
    as our reverse proxy instead. Nginx is a full featured and really fast web server
    that leaves a small footprint in the memory.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将做与 HAProxy 相同的操作，但我们将使用出色的 Web 服务器 Nginx（[http://nginx.org/en/](http://nginx.org/en/)）作为反向代理。Nginx
    是一个功能全面且速度极快的 Web 服务器，占用内存极少。
- en: 'This is how Nginx is described:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对 Nginx 的描述：
- en: '*"nginx [engine x] is an HTTP and reverse proxy server, as well as a mail proxy
    server, written by Igor Sysoev. For a long time, it has been running on many heavily
    loaded Russian sites including Yandex, Mail.Ru, VK, and Rambler. According to
    Netcraft, nginx served or proxied 20.41% busiest sites in November 2014\. Here
    are some of the success stories: Netflix, Wordpress.com, FastMail.FM."*'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"nginx [engine x] 是一个 HTTP 和反向代理服务器，同时也是一个邮件代理服务器，由 Igor Sysoev 编写。长期以来，它已经在许多重载的俄罗斯网站上运行，包括
    Yandex、Mail.Ru、VK 和 Rambler。根据 Netcraft 的数据，nginx 在 2014 年 11 月服务或代理了 20.41% 的最繁忙网站。以下是一些成功的案例：Netflix、Wordpress.com、FastMail.FM。"*'
- en: This also sounds like what we need, just like it did with HAProxy.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这也听起来像是我们需要的，就像之前使用 HAProxy 时一样。
- en: Installing Nginx
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Nginx
- en: Nginx is available in all Linux package managers, such as `aptitude`/`apt`,
    `yum`, and others, so an install can be simply done with `apt-get install nginx`
    or `yum install nginx`. Since it's open source, you can, of course, install it
    from the source as well.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 在所有 Linux 包管理器中都可用，如 `aptitude`/`apt`、`yum` 等，因此可以通过 `apt-get install
    nginx` 或 `yum install nginx` 来简单安装。由于它是开源的，你当然也可以从源代码进行安装。
- en: Configuring Nginx
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Nginx
- en: We are going to add the configuration to a file named `/etc/nginx/conf.d/wp1.conf`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把配置添加到名为`/etc/nginx/conf.d/wp1.conf`的文件中。
- en: 'Create and open this file in your favorite text editor:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在您喜欢的文本编辑器中创建并打开此文件：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This block, as you can see, makes the server listen to port `80` and to match
    the domain `domain1.com` for this configuration to apply. It's always good to
    specify the server charset so that the website text does not get the wrong encoding
    during the forwarding process; so, we add that line as well. To just listen to
    `domain1.com` and nothing else (Nginx uses the first configuration found as a
    default configuration if there's no match in the server name part), we return
    the HTTP status code `444` (no response) on the other requests that get in there.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个块使服务器监听`80`端口，并且匹配域名`domain1.com`，以便此配置生效。始终指定服务器字符集是一个好习惯，这样在转发过程中网站文本就不会出现错误编码；因此，我们也添加了这一行。为了只监听`domain1.com`而不监听其他域名（如果在服务器名称部分没有匹配，Nginx
    会使用找到的第一个配置作为默认配置），我们在其他进入的请求上返回 HTTP 状态码`444`（无响应）。
- en: What are we going to do with the requests on port `80` for `domain1.com` then?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们该如何处理`domain1.com`上`80`端口的请求呢？
- en: 'Add this inside the server''s scope (curly brackets):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将此添加到服务器的范围内（大括号内）：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `location` block will match all the requests since it matches `/`. We will
    get back to the `proxy_pass` part in a while. Other than this, you'll see that
    we set a lot of headers, most of them telling our Docker container the requesters'
    real IP address and so on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`location`块将匹配所有请求，因为它匹配`/`。稍后我们将回到`proxy_pass`部分。除此之外，您会看到我们设置了很多头信息，其中大部分告诉我们的
    Docker 容器请求者的真实 IP 地址等等。'
- en: Back to the `proxy_pass` part. This is the part that actually forwards the request,
    to something named `wp1`. This is called an upstream, which we have to define.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`proxy_pass`部分。这部分实际上是将请求转发到名为`wp1`的内容。这叫做上游，我们需要定义它。
- en: 'Add this outside the server''s scope:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将此添加到服务器范围之外：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The complete configuration file named `/etc/nginx/conf.d/wp1.conf` should look
    like this now:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的配置文件`/etc/nginx/conf.d/wp1.conf`现在应该是这样的：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the file and on most Linux systems, you can test it for syntax errors using
    the command `sudo /etc/init.d/nginx configtest` or `sudo service nginx configtest`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，在大多数 Linux 系统上，您可以使用命令`sudo /etc/init.d/nginx configtest`或`sudo service
    nginx configtest`来测试语法错误。
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Make sure that you have shut down HAProxy before you start Nginx, or you will
    get an error saying that Nginx can''t bind to port `80`. You can do this with
    the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在启动 Nginx 之前关闭 HAProxy，否则您会收到错误提示，说明 Nginx 无法绑定到`80`端口。您可以使用以下命令做到这一点：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If the test was successful, we can now restart (or start) the Nginx server.
    Again, use `sudo /etc/init.d/nginx restart` or `sudo service nginx restart` on
    most systems.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试成功，现在我们可以重新启动（或启动）Nginx 服务器。再次使用`sudo /etc/init.d/nginx restart`或`sudo service
    nginx restart`在大多数系统上执行此操作。
- en: Head over to your web browser and enter the URL `domain1.com` to take a look
    at our WordPress installation site. To make sure nothing but `domain1.com` works,
    try to go to `domain2.com` and expect no response.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的浏览器，输入`domain1.com`的 URL，查看我们的 WordPress 安装页面。为了确保只有`domain1.com`有效，尝试访问`domain2.com`并期待没有响应。
- en: Adding more domains to Nginx
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向 Nginx 添加更多域名
- en: 'To add another domain to match in Nginx, you can create a new file in the `/etc/nginx/conf.d/`
    directory and reload the Nginx configuration, as shown in the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要向 Nginx 添加另一个匹配域名，您可以在`/etc/nginx/conf.d/`目录下创建一个新文件，并重新加载 Nginx 配置，如下所示：
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Copy the configuration file, replace a few names, run `configtest`, and reload
    Nginx.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 复制配置文件，替换几个名称，运行`configtest`，然后重新加载 Nginx。
- en: Try `domain1.com` in your browser to make sure it still works. You should still
    see the WordPress installation page (unless you installed WordPress, of course);
    head over to `domain2.com` after that to see whether our new configuration is
    used.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中尝试`domain1.com`，确保它仍然有效。您应该仍然能看到 WordPress 安装页面（除非您已经安装了 WordPress）；之后，前往`domain2.com`查看我们的新配置是否生效。
- en: If you want to take a site down, just change the file's extension from `.conf`
    to something else and reload Nginx.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想关闭一个网站，只需将文件扩展名从`.conf`更改为其他扩展名，并重新加载 Nginx。
- en: Automating the process of mapping domains
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化域名映射过程
- en: The limitations in this setup are that it's manual and hands-on every time a
    new domain is added. On my website ([http://oskarhane.com](http://oskarhane.com)),
    I've written some blog posts about how this process could be automated and those
    posts are my most-read posts of all time.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置的局限性在于每次添加新域名时都需要手动操作。在我的网站（[http://oskarhane.com](http://oskarhane.com)）上，我写了一些关于如何自动化这个过程的博客文章，那些文章是我有史以来阅读最多的文章。
- en: I was very glad when I found **nginx-proxy** by Jason Wilder. nginx-proxy solves
    this problem in a more clever way than me by monitoring Docker events via the
    Docker Remote API.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当我找到 **nginx-proxy** 时，我非常高兴。nginx-proxy 通过通过 Docker 远程 API 监控 Docker 事件，比我更聪明地解决了这个问题。
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more about nginx-proxy on its GitHub page ([https://github.com/jwilder/nginx-proxy](https://github.com/jwilder/nginx-proxy)).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在其 GitHub 页面上查看更多关于 nginx-proxy 的信息（[https://github.com/jwilder/nginx-proxy](https://github.com/jwilder/nginx-proxy)）。
- en: '`nginx-proxy` comes as a container and we can run it by executing the following
    command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx-proxy` 作为一个容器提供，我们可以通过执行以下命令来运行它：'
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We are giving the container our Docker socket, so it can listen for the events
    we are interested in, which are container starts and stops. We also bind the Docker
    hosts'' port 80 to this new container, making it the entrance container for all
    incoming web requests. Make sure you stop Nginx on the Docker host before starting
    the `nginx-proxy` container. You can do this with the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 Docker 套接字提供给容器，这样它就可以监听我们感兴趣的事件，即容器的启动和停止。我们还将 Docker 主机的端口 80 绑定到这个新容器，使其成为所有传入
    Web 请求的入口容器。在启动 `nginx-proxy` 容器之前，请确保停止 Docker 主机上的 Nginx。你可以使用以下命令来执行此操作：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When a container starts, `nginx-proxy` creates an nginx reverse proxy `config`
    file and reloads Nginx—just like we did, but fully automated with `nginx-proxy`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器启动时，`nginx-proxy` 会创建一个 nginx 反向代理 `config` 文件并重新加载 Nginx——就像我们所做的那样，但通过
    `nginx-proxy` 完全自动化。
- en: To tell `nginx-proxy` which domain we want mapped to which container, we must
    run our containers with an environment variable named `VIRTUAL_HOST`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉 `nginx-proxy` 我们希望将哪个域名映射到哪个容器，我们必须使用名为 `VIRTUAL_HOST` 的环境变量运行容器。
- en: 'In our `crane.yaml file` , we add an environment variable in the `wp` run section:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `crane.yaml 文件` 中，我们在 `wp` 运行部分添加了一个环境变量：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we just have to lift this with crane again to have this container mapped
    to the domain `domain1.com` on port `80`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需再次用 crane 启动它，就能将该容器映射到 `domain1.com` 域名上的端口 `80`：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how you can solve the problem of having multiple containers
    that want to serve data on the same public port. We learned what a proxy server
    and reverse proxy server is and how a reverse proxy is used in load balancing.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到如何解决多个容器希望在同一公共端口提供数据的问题。我们了解了什么是代理服务器和反向代理服务器，以及反向代理如何在负载均衡中使用。
- en: 'We installed and configured two different reverse proxies: HAProxy and Nginx.
    In my workflow, the Nginx setup fits better, just copying a file, replacing a
    few words, and then reloading Nginx to have it working. HAProxy might work better
    in your setup; the choice is yours and one cannot be said to be better than the
    other.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装并配置了两个不同的反向代理：HAProxy 和 Nginx。在我的工作流程中，Nginx 配置更适合，只需复制一个文件，替换几个词，然后重新加载
    Nginx 就能使其工作。HAProxy 在你的设置中可能表现更好；选择权在你，不能说哪一个比另一个更好。
- en: '`nginx-proxy` automates the process of creating a reverse proxy for containers
    that are started and is an OK solution for a PaaS, except for one thing: easy
    and straightforward deployment. That''s what the next chapter is all about.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx-proxy` 自动化了为启动的容器创建反向代理的过程，是 PaaS 的一个不错的解决方案，除了一个问题：简单直接的部署。这就是下一章的内容。'
