- en: DevOps in the Real World
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现实世界中的DevOps
- en: In the past few years, the software world has evolved at a very high pace. One
    of my favorite examples of evolution is FinTech, a new field whose name comes
    from the fusion of finance and technology. In this field, companies tend to build
    financial products in a disruptive way up to a point that they are threatening
    the big traditional banks and putting them in jeopardy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，软件行业发展迅速。我最喜欢的演变例子之一是金融科技（FinTech），这是一个新的领域，其名称源于金融和技术的融合。在这个领域，企业往往以颠覆性的方式构建金融产品，直到威胁到大型传统银行，甚至将它们置于危险之中。
- en: This happens mainly due to the fact that big companies lose the ability to be
    cost-effective in their IT systems and banks are fairly big companies. It is not
    strange that banks still run their systems in an IBM mainframe and are reluctant
    to move to the cloud, and it is also not strange that the core components of the
    banks are still COBOL applications that haven't been renewed since the 90s. This
    wouldn't be bad if it wasn't because a small number of talented engineers with
    an AWS or Google Cloud Platform account can actually build a service that could
    virtually replace some bank products such as currency exchange or even a broker.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况主要是由于大公司失去了在IT系统中保持成本效益的能力，而银行恰恰是这些大公司之一。银行仍然使用IBM大型机运行系统，并且不愿意迁移到云端，这一点并不奇怪；同样，银行的核心组件依然是自90年代以来没有更新过的COBOL应用程序，这也并不奇怪。如果不是因为只有少数具备AWS或Google
    Cloud Platform账户的才华横溢的工程师，实际上可以构建出能够替代某些银行产品的服务，比如货币兑换甚至是经纪服务，那这一切或许还不会那么糟糕。
- en: 'This has become a norm in the last few years, and one of the keys for the success
    of small companies in FinTech is partially due to DevOps and partially due to
    its scale. Usually, big companies commoditize the IT systems over time, outsourcing
    them to third parties that work on price, pushing the quality aside. This is a
    very effective cost-cutting measure, but it has a downside: you lose the ability
    to deliver value quickly.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这在过去几年中已成为一种常态，FinTech中小公司成功的部分原因归功于DevOps，另一个部分则是其规模。通常，大公司会随着时间推移将IT系统商品化，外包给第三方，这些第三方专注于价格，忽视了质量。这是一个非常有效的削减成本的措施，但也有一个副作用：你失去了快速交付价值的能力。
- en: In this chapter, we are going to put DevOps into perspective and see how it
    can help us create cost-effective work units that can deliver a lot of value in
    a very short period of time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将把DevOps放到一个更广泛的视角来看，并探索它如何帮助我们创造成本效益高的工作单元，从而在极短的时间内提供大量价值。
- en: What is DevOps?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是DevOps？
- en: 'There is a famous quote by Henry Ford, the creator of Ford (the popular car-maker
    brand):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 亨利·福特（Ford公司创始人）有一句著名的名言：
- en: “If I had asked people what they wanted, they would have said faster horses.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “如果我问人们他们想要什么，他们会说更快的马。”
- en: 'This is what happened with the traditional system administrator role: people
    were trying to solve the wrong problem.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是传统系统管理员角色的变化：人们在尝试解决错误的问题。
- en: By the wrong problem, I mean the lack of proper tools to automate the intervention
    in production systems, avoiding the human error (which is more common than you
    may think) and leading to a lack of communication continuity in the processes
    of your company.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所谓“错误的问题”，是指缺乏合适的工具来自动化生产系统中的干预，避免人为错误（这种错误比你想象的还要常见），并导致公司流程中的沟通不连续。
- en: 'Initially, DevOps was the intersection of development and operations as well
    as QA. The DevOps engineer is supposed to do everything and be totally involved
    in the SDLC (software development life cycle), solving the communication problems
    that are present in the traditional release management. This is ideal and, in
    my opinion, is what a full stack engineer should do: end-to-end software development,
    from requirement capture to deployments and maintenance.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，DevOps是开发、运维和QA的交集。DevOps工程师应该做所有事情，完全参与软件开发生命周期（SDLC），解决传统发布管理中的沟通问题。这是理想的状态，在我看来，这正是全栈工程师应当做的：端到端的软件开发，从需求捕获到部署和维护。
- en: 'Nowadays, this definition has been bent up to a point where a DevOps engineer
    is basically a systems engineer using a set of tools to automate the infrastructure
    of any company. There is nothing wrong with this definition of DevOps, but keep
    in mind that we are losing a very competitive advantage: the end-to-end view of
    the system. In general, I would not call this actor a DevOps engineer but an **Site
    reliability engineering** (**SRE**). This was a term introduced by Google few
    years back, as sometimes (prominently in big companies), is not possible to provide
    a single engineer with the level of access required to execute DevOps. We will
    talk more about this role in the next section, SRE model.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，这一定义已经被扭曲到了一个地步，DevOps工程师基本上是一个使用一套工具来自动化任何公司基础设施的系统工程师。这种DevOps的定义并没有错，但请记住，我们正在失去一个非常有竞争力的优势：对系统的端到端视角。一般来说，我不会称这个角色为DevOps工程师，而是**站点可靠性工程师**（**SRE**）。这是谷歌几年前提出的一个术语，因为有时候（尤其是在大公司中），无法为一个工程师提供执行DevOps所需的访问权限。我们将在下一节中讨论这个角色，即SRE模型。
- en: 'In my opinion, DevOps is a philosophy more than a set of tools or a procedure:
    having your engineers exposed to the full life cycle of your product requires
    a lot of discipline but gives you an enormous amount of control over what is being
    built. If the engineers understand the problem, they will solve it; it is what
    they are good at.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，DevOps更像是一种理念，而不是一套工具或流程：让工程师接触到产品的完整生命周期需要很大的纪律性，但也能让你对所构建的内容拥有巨大的控制力。如果工程师理解问题，他们就能解决它；这正是他们擅长的。
- en: DevOps origins
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps的起源
- en: 'In the last few years, we have gone through a revolution in IT: it sparkled
    from pure IT companies to all the sectors: retail, banking, finance, and so on.
    This has led to a number of small companies called start-ups, which are basically
    a number of individuals who had an idea, executed it, and went to the market in
    order to sell the product or the service to a global market (usually). Companies
    such as Amazon or Alibaba, not to mention Google, Apple, Stripe or even Spotify,
    have gone from the garage of one of the owners to big companies employing thousands
    of people.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，我们经历了IT行业的革命：它从纯粹的IT公司蔓延到各行各业：零售、银行、金融等等。这催生了一批小公司，称为初创企业，基本上是一些有创意的个人，他们付诸实践，并走向市场，通常是为了将产品或服务销售给全球市场。像亚马逊、阿里巴巴，更不用说谷歌、苹果、Stripe甚至Spotify，已经从创始人车库中的小公司发展为雇佣数千人的大公司。
- en: 'One thing in common in the initial spark with these companies has always been
    corporate inefficiency: the bigger the company, the longer it takes to complete
    simple tasks**.**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些公司最初的共同点一直是企业效率低下：公司越大，完成简单任务所需的时间就越长**。**
- en: '![](img/03ce99c0-947e-45da-874a-e4e38c9c0767.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03ce99c0-947e-45da-874a-e4e38c9c0767.png)'
- en: Example of corporate inefficiency graph
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 企业效率低下图表示例
- en: 'This phenomenon creates a market on its own, with a demand that cannot be satisfied
    with traditional products. In order to provide a more agile service, these start-ups
    need to be cost-effective. It is okay for a big bank to spend millions on its
    currency exchange platform, but if you are a small company making your way through,
    your only possibility against a big bank is to cut costs by automation and better
    processes. This is a big drive for small companies to adopt better ways of doing
    things, as every day that passes is one day closer to running out of cash, but
    there is a bigger drive for adopting DevOps tools: failure.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种现象创造了一个独立的市场，需求无法通过传统产品满足。为了提供更敏捷的服务，这些初创公司需要具备成本效益。大银行可以在其货币兑换平台上花费数百万，但如果你是一家正在奋斗的小公司，你与大银行竞争的唯一方式就是通过自动化和更好的流程来降低成本。对于小公司来说，这促使它们采用更好的做事方式，因为每一天的过去都意味着离现金耗尽更近，但更大的驱动力是采用DevOps工具：失败。
- en: Failure is a natural factor for the development of any system. No matter how
    much effort we put in, failure is always there, and at some point, it is going
    to happen.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 失败是任何系统发展的自然因素。无论我们投入多少努力，失败总是存在，在某个时刻，它总会发生。
- en: 'Usually, companies are quite focused on removing failure, but there is a unwritten
    rule that is keeping them from succeeding: the 80-20 rule:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，公司非常关注消除失败，但有一条不成文的规则却阻碍了它们的成功：80/20法则：
- en: It takes 20% of time to achieve 80% of your goals. The remaining 20% will take
    80% of your time.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你只需要20%的时间就能实现80%的目标。剩下的20%将占用你80%的时间。
- en: 'Spending a huge amount of time on avoiding failure is bound to fail, but luckily,
    there is another solution: quick recovery.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在避免失败上花费大量时间注定会失败，但幸运的是，另一个解决方案是：快速恢复。
- en: Up until now, in my work experience, I have only seen one company asking "what
    can we do if this fails at 4 A.M. in the morning?" instead of "what else can we
    do to avoid this system from failing?", and believe me, it is a lot easier (especially
    with the modern tools) to create a recovery system than to make sure that our
    systems won't go down.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在我的工作经验中，我只见过一家公司问“如果凌晨 4 点发生故障，我们该怎么办？”而不是“我们还能做些什么来防止系统崩溃？”，相信我，创建一个恢复系统要比确保我们的系统不会宕机容易得多（特别是有了现代工具）。
- en: 'All these events (automation and failure management) led to the development
    of modern automation tools that enabled our engineers to:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些事件（自动化和故障管理）推动了现代自动化工具的发展，使我们的工程师能够：
- en: Automate infrastructure and software
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化基础设施和软件
- en: Recover from errors quickly
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速从错误中恢复
- en: DevOps and corporations
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 和企业
- en: 'DevOps fits perfectly into the small company world (start-ups): some individuals
    that can access everything and execute the commands that they need to make the
    changes in the system quickly. Within these ecosystems is where DevOps shines.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 完美契合了小型公司（初创公司）的世界：一些可以访问一切并执行所需命令的个人，能够快速进行系统更改。在这些生态系统中，DevOps 闪耀着光芒。
- en: This level of access in traditional development models in big companies is a
    no-go. It can be an impediment even at a legal level if your system is dealing
    with highly confidential data, where you need to get your employees security clearance
    from the government in order to grant them access to the data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型公司的传统开发模型中，这种访问级别是不可行的。如果您的系统处理的是高度机密的数据，这甚至可能成为法律上的障碍，因为您需要从政府那里为员工获取安全许可才能授予他们对数据的访问权限。
- en: It can also be convenient for the company to keep a traditional development
    team that delivers products to a group of engineers that runs it but works closely
    with the developers so that the communication is not an issue.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对公司来说，保持一个传统的开发团队将产品交付给运行该产品的工程师，并与开发人员密切合作，以确保沟通不成问题，也会是一个方便的选择。
- en: 'SREs also use DevOps tools, but usually, they focus more on building and running
    a middleware cluster (Kubernetes, Docker Swarm, and so on) that provides uniformity
    and a common language for the developers to be abstracted from the infrastructure:
    they don''t even need to know in which hardware the cluster is deployed; they
    just need to create the descriptors for the applications that they will deploy
    (the developers) in the cluster in an access-controlled and automated manner in
    a way that the security policies are followed up.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: SRE 也使用 DevOps 工具，但通常他们更多地关注构建和运行一个中间件集群（如 Kubernetes、Docker Swarm 等），为开发人员提供一致性和共同语言，使他们能够抽象化基础设施：他们甚至不需要知道集群部署在哪些硬件上；他们只需要为将要在集群中部署的应用程序创建描述符，并以访问控制和自动化的方式进行，以确保遵循安全政策。
- en: SRE is a discipline on its own, and Google has published a free ebook about
    it, which can be found at [https://landing.google.com/sre/book.html](https://landing.google.com/sre/book.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: SRE 是一个独立的学科，Google 已经发布了一本免费的电子书，您可以在[https://landing.google.com/sre/book.html](https://landing.google.com/sre/book.html)找到它。
- en: I would recommend that you read it as it is a fairly interesting point of view.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您阅读这本书，它提供了一个相当有趣的观点。
- en: Traditional release management
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统发布管理
- en: 'Through the years, companies have pushed the development of their IT systems
    out of their business core processes: retail shop business was retail and not
    software but reality has kicked in very quickly with companies such as Amazon
    or Alibaba, which can partially attribute their success to keeping their IT systems
    in the core of the business.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，企业将 IT 系统的发展从其核心业务流程中剥离出来：零售商店的业务是零售而非软件，但现实很快就敲响了警钟，像亚马逊或阿里巴巴这样的公司，部分可以归功于将其
    IT 系统置于业务核心位置。
- en: A few years ago, companies used to outsource their entire IT systems, trying
    to push the complexity aside from the main business in the same way that companies
    outsource the maintenance of the offices where they are. This has been successful
    for quite a long time as the release cycles of the same applications or systems
    were long enough (a couple of times a year) to be able to articulate a complex
    chain of change management as a release was a big bang style event where everything
    was measured to the millimeter with little to no tolerance for failure.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，许多公司习惯于将整个IT系统外包，试图像外包办公室维护一样将复杂性从主营业务中剥离出去。这种做法在很长一段时间里是成功的，因为相同应用程序或系统的发布周期足够长（每年发布几次），可以将复杂的变更管理链条组织起来，发布就像一次大爆炸事件，所有的内容都要精确到毫米，几乎没有容忍失败的空间。
- en: 'Usually, the life cycle for such projects is very similar to what is shown
    in the following diagram:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这类项目的生命周期非常类似于下图所示：
- en: '![](img/6ae433f0-0938-446a-9eb4-2df58df8a2ae.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ae433f0-0938-446a-9eb4-2df58df8a2ae.png)'
- en: 'This model is traditionally known as **waterfall** (you can see its shape),
    and it is borrowed from traditional industrial pipelines where things happen in
    very well-defined order and stages. In the very beginning of the software industry,
    engineers tried to retrofit the practices from the traditional industry to software,
    which, while a good idea, has some drawbacks:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模型传统上被称为**瀑布模型**（你可以看到它的形状），它借鉴了传统工业管道的做法，在这些管道中，事情按非常明确的顺序和阶段发生。在软件行业的最初阶段，工程师们尝试将传统行业的做法应用于软件，尽管这是一个不错的想法，但它也存在一些缺点：
- en: Old problems are brought to a new field
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧问题被带到了一个新领域
- en: The advantages of software being intangible are negated
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件的无形性优势被削弱
- en: 'With waterfall, we have a big problem: nothing moves quickly. No matter how
    much effort is put into the process, it is designed for enormous software components
    that are released few times a year or even once a year. If you try to apply this
    model to smaller software components, it is going to fail due to the number of
    actors involved in it. It is more than likely that the person who captures the
    requirements won''t be involved in the development of the application and, for
    sure, won''t know anything about the deployment.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用瀑布模型时，我们面临一个大问题：没有什么进展是快速的。无论在流程中投入多少努力，它都是为巨大的软件组件设计的，这些组件每年发布的次数很少，甚至只有一年一次。如果你尝试将这种模型应用于较小的软件组件，它会因涉及的参与者数量而失败。很可能，捕获需求的人不会参与应用程序的开发，而且肯定对部署一无所知。
- en: Chain of communication
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沟通链条
- en: 'I remember that when I was a kid, we used to play a game called the crazy phone.
    Someone would make up a story with plenty of details and write it down on paper.
    This person read the story to another person, who had to capture as much as possible
    and do the same to the next person, up until we reached the end of the number
    of people playing this game. After four people, it was almost guaranteed that
    the story wouldn''t look anywhere close to the initial one, but there was a more
    worrying detail: after the first person, the story would never be the same. Details
    would be removed and invented, but things would surely be different.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得小时候，我们曾经玩一个叫做“疯狂电话”的游戏。有人会编一个充满细节的故事并写在纸上，这个人把故事读给另一个人听，后者需要尽可能多地捕捉信息，并把故事传递给下一个人，直到达到游戏人数的上限。四个人之后，几乎可以肯定，故事不会和最初的版本相似，但还有一个更让人担忧的细节：在第一个人之后，故事就再也不会一样了。细节会被删减或创造出来，但故事肯定会发生变化。
- en: 'This exact game is what we are trying to replicate in the waterfall model:
    people who are working on the requirements are creating a story that is going
    to be told to developers, who are creating another story that is going to be told
    to QA so that they can test that the software product delivered matches with a
    story that was in two hands (at the very least) before reaching them.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个游戏正是我们在瀑布模型中试图复制的：那些在需求上工作的人员正在编写一个故事，这个故事将被开发人员转述，而开发人员又会编写另一个故事，交给QA，以便他们可以测试交付的产品是否符合一个已经经过至少两个人手的故事。
- en: As you can see, this is bound to be a disaster but hold on, what can we do to
    fix it? If we look at the traditional industry, we'll see that they never get
    their designs wrong or, at least, the error rate is very small. The reason for
    that (in my opinion) is that they are building tangible things, such as a car
    or a nuclear reactor, which can easily be inspected and believe me or not, they
    are usually simpler than a software project. If you drive a car, after a few minutes,
    you will be able to spot problems with the engine, but if you start using a new
    version of some software, it might take a few years to spot security problems
    or even functional problems.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这注定会是一场灾难，但等等，我们能做些什么来解决它？如果我们看看传统行业，我们会发现他们从来不会犯错，至少错误率非常低。我认为其中的原因是，他们正在构建的是有形的东西，比如汽车或核反应堆，这些东西可以轻易地进行检查，相信与否，它们通常比软件项目简单。如果你开车，几分钟后你就能发现发动机的问题，但如果你开始使用一个新版本的软件，可能要过几年才能发现安全问题，甚至功能性问题。
- en: 'In software, we tried to ease this problem by creating very concise and complex
    diagrams using **Unified Modeling Language** (**UML**) so that we capture the
    single source of truth and we can always go back to it to solve problems or validate
    our artifacts. Even though this is a better approach, it is not exempt from problems:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件中，我们通过创建非常简洁且复杂的图表来缓解这个问题，使用**统一建模语言**（**UML**），这样我们就可以捕捉唯一的事实来源，始终可以回到它来解决问题或验证我们的工件。尽管这是更好的方法，但它也不是没有问题：
- en: Some details are hard to capture in diagrams
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些细节很难在图表中捕捉
- en: People in the business stakeholders do not understand UML
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务相关人员不理解UML
- en: Creating diagrams requires time
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建图表需要时间
- en: Particularly, the fact that the business stakeholders do not understand UML
    is the big problem here. After the capture of requirements, changing them or even
    raising questions on lower levels (development, operations, and so on) requires
    involving some people, and at least one of them (the business stakeholder) does
    not understand the language of where the requirements were captured. This wouldn't
    be a problem if the project requirements were spot on since the first iteration,
    but in how many projects have you been involved where the requirements were static?
    The answer is none.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，业务相关人员不理解UML是这里的最大问题。在需求收集后，修改它们或在较低级别（如开发、运维等）提出问题时，通常需要涉及一些人，至少有一个人（即业务相关人员）不理解需求捕捉的语言。如果项目的需求从第一次迭代开始就是完全正确的，这不会成为问题，但你参与过的有多少个项目的需求是静态的？答案是没有。
- en: The cost of fixing a bug
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复bug的成本
- en: Once we have made it clear that we have a communication problem, bugs are expected
    to arise during our process. Either a misalignment with the requirements or even
    the requirements being wrong usually leads to a defect that could prevent us from
    deploying the application to production and delay everything.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们明确了存在沟通问题，bug通常会在我们的过程中出现。无论是与需求的不一致，还是需求本身有误，通常都会导致缺陷，这可能会阻止我们将应用程序部署到生产环境并延迟所有进度。
- en: 'In waterfall, fixing a bug is increasingly possible in every step we take.
    For example, fixing a bug in the requirements phase is very straightforward: just
    update the diagrams/documentation, and we are done. If the same bug is captured
    by a QA engineer in the verification phase, we need to:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在瀑布模型中，修复bug在每一步都变得越来越可能。例如，在需求阶段修复bug非常简单：只需更新图表/文档，就完成了。如果同样的bug在验证阶段被QA工程师捕获，我们需要：
- en: Update the documents/diagrams
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新文档/图表
- en: Create a new version of the application
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用程序的新版本
- en: Deploy the new version to the QA environment
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署新版本到QA环境
- en: '![](img/de37d050-49b4-4552-b77e-8b4e2d6b9979.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de37d050-49b4-4552-b77e-8b4e2d6b9979.png)'
- en: If the bug is caught in production, you can imagine how many steps are involved
    in fixing it, not to mention the stress, particularly if the bug compromises the
    revenue of your company.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果bug在生产环境中被发现，您可以想象修复它涉及多少步骤，更不用说压力，特别是当bug影响到公司收入时。
- en: Releasing new versions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布新版本
- en: 'A few years ago, I used to work in a company where the production rollouts
    steps were written in a Microsoft Word document command by command along with
    the explanation:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，我曾在一家公司的生产发布步骤中工作，步骤是逐条写在Microsoft Word文档中的，并附带解释：
- en: 'Copy this file there: `cp a.tar b.tar`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这个文件复制过去：`cp a.tar b.tar`
- en: 'Restart the server `xyz` with the command: `sudo service my-server restart`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令重启服务器`xyz`：`sudo service my-server restart`
- en: This was in addition to a long list of actions to take to release a new version.
    This happened because it was a fairly big company that had commoditized its IT
    department, and even though their business was based on an IT product, they did
    not embed IT in the core of their business.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这还加上了一长串发布新版本所需执行的操作。这种情况发生是因为那家公司相当大，IT部门已经商品化，尽管他们的业务是基于IT产品的，但他们并没有将IT嵌入到业务的核心。
- en: 'As you can see, this is a very risky situation. Even though the developer who
    created the version and the deployment document was there, someone was deploying
    a new WAR (a Java web application packed in a file) in a production machine, following
    the instructions blindly. I remember asking one day: if this guy is executing
    the commands without questioning them, why don’t we just write a script that we
    run in production? It was too risky, they said.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这是一个非常危险的情况。即便是创建版本和部署文档的开发人员在场，仍然有人在生产机器上盲目地按照指示部署新的WAR文件（一个打包在文件中的Java
    Web应用）。我记得有一天我问过：如果这个人在没有质疑的情况下执行命令，为什么我们不直接写一个在生产环境中运行的脚本呢？他们说那样太危险了。
- en: 'They were right about it: risk is something that we want to reduce when deploying
    a new version of the software that is being used by some hundred thousand people
    on a single day. In fairness, risk is what pushed us to do the deployment at 4
    A.M. instead of doing it during business hours.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 他们说得对：风险是我们在部署新版本软件时想要减少的因素，而这些软件一天内会被几十万用户使用。公平地说，正是风险促使我们选择在凌晨4点而不是在工作时间进行部署。
- en: 'The problem I see with this is that the way to mitigate the risks (deploy at
    4 A.M in the morning when no one is buying our product) creates what we call,
    in IT, a single point of failure: the deployment is some sort of all or nothing
    event that is massively constrained by the time, as at 8 A.M., the traffic in
    the app usually went from two visits per hour to thousands per minute, around
    9 A.M. being the busiest period of the day.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到的问题是，缓解风险的方法（在早上4点当没有人购买我们产品时进行部署）创造了我们在IT中所说的单点故障：部署是一种“全有或全无”的事件，受时间的巨大限制，因为在早上8点，应用的流量通常会从每小时两次访问增长到每分钟成千上万次，早上9点通常是一天中最繁忙的时段。
- en: 'That said, there were two possible outcomes from the rollout: either the new
    software gets deployed or not. This causes stress to the people involved, and
    the last thing you want to have is stressed people playing with the systems of
    a multi-million business.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，部署结果有两种可能的结果：新软件要么成功部署，要么没有成功。这给相关人员带来了压力，而你最不希望看到的就是压力重重的人在操作一个数百万美元的商业系统。
- en: 'Let’s take a look at the maths behind a manual deployment, such as the one
    from earlier:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看手动部署背后的数学原理，比如之前提到的：
- en: '| Description | Success Rate |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | 成功率 |'
- en: '| Detach `server 1` from the cluster | 99.5% |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 从集群中卸载`server 1` | 99.5% |'
- en: '| Stop `Tomcat` on `server 1` | 99.5% |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 停止`server 1`上的`Tomcat` | 99.5% |'
- en: '| Remove the old version of the app (the WAR file) | 98% |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 移除旧版本的应用（WAR文件） | 98% |'
- en: '| Copy the new version of the app (the WAR file) | 98% |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 复制新版本的应用（WAR文件） | 98% |'
- en: '| Update properties in configuration files | 95% |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 更新配置文件中的属性 | 95% |'
- en: '| Start `Tomcat` | 95% |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 启动`Tomcat` | 95% |'
- en: '| Attach `server 1` to the cluster | 99.5% |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 将`server 1`附加到集群 | 99.5% |'
- en: This describes the steps involved in releasing a new version of the software
    in a single machine. The full company system had a few machines, so the process
    would have to be repeated a number of times, but let's keep it simple; assume
    that we are only rolling out to a single server.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这描述了在单台机器上发布新版本的软件所涉及的步骤。整个公司系统有几台机器，因此该过程需要重复进行几次，但为了简化起见，我们假设只在一台服务器上进行部署。
- en: 'Now a simple question: what is the overall failure rate in the process?'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一个简单的问题：整个过程中的失败率是多少？
- en: 'We naturally tend to think that the probability of a failure in a chained process
    such as the preceding list of instructions is the biggest in any step of the chain:
    5%. That is not true. In fairness, it is a very dangerous, cognitive bias. We
    usually take very risky decisions due to the false perception of low risk.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自然倾向于认为，像前面这种链式过程中的失败概率，在每个步骤中是链条上最大的一步：5%。但事实并非如此。公平地说，这是一种非常危险的认知偏差。我们通常会因为对低风险的错误认知而做出非常危险的决定。
- en: 'Let''s use the math to calculate the probability of failure:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用数学来计算失败的概率：
- en: 'The preceding list is a list of dependent events. We cannot execute step number
    6 if step 4 failed, so the formula that we are going to apply is the following
    one:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表是依赖事件的列表。如果步骤4失败，我们就不能执行第6步，因此我们要应用的公式如下：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This leads to the following calculation:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了以下计算：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We are going to be successful only 85.38% of the times. This translated to
    deployments, which means that we are going to have problems 1 out of 6 times that
    we wake up at 4 A.M. to release a new version of our application, but there is
    a bigger problem: what if we have a bug that no one noticed during the production
    testing that happened just after the release? The answer to this question is simple
    and painful: the company would need to take down the full system to roll back
    to a previous version, which could lead to loss of revenue and customers.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只有85.38%的时间会成功。这转化为部署，这意味着我们在凌晨4点唤醒来发布新版本的时候，每6次中就会出现1次问题，但更大的问题是：如果在刚发布后的生产测试中没有人注意到的错误呢？对这个问题的答案既简单又痛苦：公司需要关闭整个系统以回滚到先前的版本，这可能导致收入和客户流失。
- en: Modern release management
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代发布管理
- en: 'A few years ago, when I was in the middle of a manual deployment at 4 A.M.,
    I remember asking myself "there has to be a better way"*.* Tools were not mature
    enough, and the majority of the companies did not consider IT the core of their
    business. Then, a change happened: DevOps tools started to do well in the open
    source community and companies started to create continuous delivery pipelines.
    Some of them were successful, but a big majority of them failed for two reasons:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，当我在凌晨4点进行手动部署时，我记得自问：“一定有更好的办法。”工具还不够成熟，而且大多数公司并不认为IT是他们业务的核心。然后，一场变革发生了：DevOps工具开始在开源社区中表现出色，公司开始创建持续交付管道。其中一些取得了成功，但绝大多数失败了，原因有两个：
- en: Release management process
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布管理流程
- en: Failure in the organizational alignment
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织对齐的失败
- en: We will talk about organizational alignment later on in this chapter. For now,
    we are going to focus on the release management process as it needs to be completely
    different from the traditional release management in order to facilitate the software
    life cycle.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面讨论组织对齐问题。现在，我们将专注于发布管理流程，因为它需要与传统的发布管理完全不同，以促进软件生命周期。
- en: 'In the preceding section, we talked about different phases:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们谈到了不同的阶段：
- en: Requirements
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求
- en: Design
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计
- en: Implementation
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施
- en: Verification
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证
- en: Maintenance
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护
- en: We also explained how it works well with gigantic software where we group features
    into big releases that get executed in a big bang style with all or nothing deployments.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还解释了它在庞大软件中如何运作，我们将功能分组到大版本中，以大爆炸式的方式执行，要么全面部署，要么不部署。
- en: The first try to fit this process into smaller software components was what
    everyone calls agile, but no one really knew what it was.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次尝试将此流程适应更小的软件组件就是每个人称为敏捷的东西，但没有人真正知道它是什么。
- en: Agile development and communication
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷开发和沟通
- en: 'In the traditional release management, one of the big problems was the communication:
    chains of people passing on messages and information, as we''ve seen, never ends
    well.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的发布管理中，一个大问题是沟通：人们传递信息和消息的链条，正如我们所见，往往收效甚微。
- en: 'Agile encourages shorter communication strings: the stakeholders are supposed
    to be involved in the software development management, from the definition of
    requirements to the verification (testing) of the same software. This has an enormous
    advantage: teams never build features that are not required. If deadlines need
    to be met, the engineering team sizes down the final product sacrificing functionality
    but not quality.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷鼓励更短的沟通链：利益相关者应参与软件开发管理，从需求定义到同一软件的验证（测试）。这有一个巨大的优势：团队永远不会构建不需要的功能。如果需要满足截止日期，工程团队会减少最终产品的规模，牺牲功能而不是质量。
- en: Deliver early and deliver often is the mantra of agile, which basically means
    defining an **Minimum Viable Product** (**MVP**) and delivering it as soon as
    it is ready in order to deliver value to the customers of your application and
    then delivering new features as required. With this method, we are delivering
    value since the first release and getting feedback very early on in the product
    life.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"提前交付并频繁交付"是敏捷的座右铭，基本含义是定义一个**最小可行产品**（**MVP**），并在它准备好时尽早交付，以便为应用程序的客户提供价值，然后根据需求交付新功能。通过这种方式，我们从第一次发布开始就提供价值，并在产品生命周期的早期就获得反馈。'
- en: 'In order to articulate this way of working, a new concept was introduced: the
    sprint. A sprint is a period of time (usually 2 weeks) with a set of functionalities
    that are supposed to be delivered at the end of it into production so that we
    achieve different effects:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表达这种工作方式，提出了一个新概念：sprint（冲刺）。冲刺是一个时间段（通常为 2 周），在这段时间内会完成一组功能，并在结束时将其交付到生产环境，以实现不同的效果：
- en: Customers are able to get value very often
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户能够频繁获得价值
- en: Feedback reaches the development team every 2 weeks so that corrective actions
    can be carried on
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反馈每 2 周就会到达开发团队，以便采取纠正措施
- en: The team becomes predictable and savvy with estimates
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队变得更加可预测，并且能够准确估算
- en: 'This last point is very important: if our estimates are off by 10% in a quarter
    release, it means that we are off by two weeks, whereas in a two weeks sprint,
    we are off only by 1 day, which, over time, with the knowledge gained sprint after
    sprint, means the team will be able to adjust due to the fact that the team builds
    a database of features and time spent on them so that we are able to compare new
    features against the already developed ones.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后这一点非常重要：如果我们在一个季度发布中的估算偏差为 10%，那么意味着我们误差了两周，而在两周的冲刺中，误差只有一天，随着时间推移，随着每次冲刺积累的知识，团队能够根据已有的功能和所花费的时间建立一个数据库，从而进行比较，调整新的功能。
- en: These features aren't called features. They are called stories. A story is,
    by definition, a well-defined functionality with all the info for the development
    team captured before the sprint starts, so once we start the development of the
    sprint, developers can focus on technical activities instead of focusing on resolving
    unknowns in these features.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能不叫功能，它们叫做故事。故事的定义是：在冲刺开始之前，为开发团队准备好所有必要信息的、功能清晰的模块，因此当我们开始开发冲刺时，开发者可以专注于技术活动，而不是集中精力解决这些功能中的未知问题。
- en: 'Not all the stories have the same size, so we need a measurement unit: the
    story points. Usually, story points do not relate to a time-frame but to the complexity
    of it. This allows the team to calculate how many story points can be delivered
    at the end of the sprint, so with time, they get better at the estimates and everybody
    gets their expectations satisfied.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的故事大小相同，因此我们需要一个衡量单位：故事点。通常，故事点与时间框架无关，而是与复杂性相关。这让团队能够计算出每个冲刺结束时能交付多少故事点，因此，随着时间的推移，他们能更好地进行估算，每个人的期望都能得到满足。
- en: At the end of every sprint, the team is supposed to release the features developed,
    tested, and integrated into production in order to move to the next sprint.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每个冲刺结束时，团队应该发布已开发、测试并集成到生产环境中的功能，以便进入下一个冲刺。
- en: The content of the sprints are selected from a backlog that the team is also
    maintaining and preparing as they go.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 冲刺的内容从团队正在维护和准备的待办事项列表中选择。
- en: The main goal is to meet everyone's expectations by keeping the communication
    open and be able to predict what is being delivered and when and what is needed
    for it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 主要目标是通过保持沟通畅通，满足每个人的期望，能够预测交付内容及其交付时间，并明确交付所需的条件。
- en: 'There are several ways of implementing the agile methodologies in our software
    product. The one explained earlier is called **Scrum**, but if you look into other
    development methodologies, you''ll see that they all focus on the same concept:
    improving the communication across different actors of the same team.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以在我们的软件产品中实现敏捷方法。前面讲解的叫做**Scrum**，但如果你研究其他开发方法论，你会发现它们都专注于相同的概念：改善同一团队中不同角色之间的沟通。
- en: If you are interested in **Scrum**, there is more info at [https://en.wikipedia.org/wiki/Scrum_(software_development)](https://en.wikipedia.org/wiki/Scrum_(software_development)).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对**Scrum**感兴趣，可以查看更多信息：[https://en.wikipedia.org/wiki/Scrum_(software_development)](https://en.wikipedia.org/wiki/Scrum_(software_development))。
- en: Releasing new versions
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布新版本
- en: 'As explained earlier, if we follow the Scrum methodology, we are supposed to
    deliver a new version every 2 weeks (the duration of a sprint in the majority
    of the cases), which has a dramatic impact on the resources consumed. Let''s do
    the maths: quarter versus bi-weekly releases:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: In quarter releases, we release only four times a year in addition to emergency
    releases to fix problems found in production.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In bi-weekly releases, we release once every 2 weeks in addition to emergency
    releases. This means 26 releases a year (52 weeks roughly) in addition to emergency
    releases.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the sake of simplicity, let''s ignore the emergency releases and focus
    on business as usual in our application. Let''s assume this takes us 10 hours
    to prepare and release our software:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Quarter releases: *10 x 4 = 40* hours a year'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bi-weekly releases: *10 x 26 = 260* hours a year'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As of now, releasing software is always the same activity, no matter whether
    we do it every quarter or every day. The implication is the same (roughly), so
    we have a big problem: our bi-weekly release is consuming a lot of time and it
    gets worse if we need to release fixes for problems that have been overlooked
    in QA.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'There is only one solution for this: automation. As mentioned earlier, up until
    2 years ago (around 2015) the tools to orchestrate automatic deployments weren''t
    mature enough. Bash scripts were common but weren''t ideal as bash is not designed
    to alter the state of production servers.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'The first few tools to automate deployments were frameworks to manage the state
    of servers: Capistrano or Fabric wrapped `ssh` access and state management in
    a set of commands on Ruby and Python, which allowed the developers to create scripts
    that, depending on the state of the servers, were executing different steps to
    achieve a goal: deploying a new version.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'These frameworks were a good step forward, but there were bigger problems with
    them: a solution across different companies usually solves the same problem in
    different ways, which implies that DevOps (developers *+* ops) engineers need
    to learn how to handle this in every single company.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: The real change came with Docker and orchestration platforms, such as Kubernetes
    or Docker Swarm. In this book, we will look at how to use them, particularly Kubernetes,
    to reduce the deployment time from 10 hours (or hours in general) to a simple
    click, so our 260 hours a year become a few minutes for every release.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'This also has a side-effect, which is related to what we explained earlier
    in this chapter: from a very risky release (remember, 85.38% of success) with
    a lot of stress, we are moving toward a release that can be patched in minutes,
    so releasing a bug, even though it is bad, has a reduced impact due to the fact
    that we can fix it within minutes or even roll back within seconds. We will look
    at how to do this in [Chapter 8](127a7b5f-4bd7-4290-bea0-3e8db867e4af.xhtml),
    *Release Management – Continuous Delivery*.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are aligned with these practices, we can even release individual items
    to production: once a feature is ready, if the deployment is automated and it
    gets reduced to a single click, why not just roll out the stories as they are
    completed?'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们与这些实践达成一致，我们甚至可以将单个项目发布到生产环境：一旦某个功能完成，如果部署是自动化的，且只需点击一下，为什么不在功能完成时直接推出这些功能呢？
- en: DevOps and microservices
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 和微服务
- en: 'Microservices are a big trend nowadays: small software components that allow
    companies to manage their systems on vertical slices of functionality, deploying
    features individually instead of bundling them in a big application, which can
    be problematic in big teams as the interaction across functionalities often leads
    to collisions and bugs being released into production without anyone noticing.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是如今的大趋势：小型软件组件，它允许公司在功能的垂直切片上管理他们的系统，单独部署功能，而不是将它们捆绑在一个大应用程序中，这在大团队中可能会导致问题，因为功能之间的交互常常会导致冲突和错误被发布到生产环境，而没人注意到。
- en: 'An example of quite a successful company using microservices is Spotify. Not
    only at the technical level but at the business level, they have organized things
    to be able to orchestrate a large number of services to provide a top class music
    streaming service that pretty much never fails, and if it does, it is a partial
    failure:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一个使用微服务且相当成功的公司例子是Spotify。不仅在技术层面，甚至在业务层面，他们已经组织好了相关工作，能够协调大量的服务，提供几乎不会失败的顶级音乐流媒体服务，如果失败了，也只是部分失败：
- en: Playlists are managed by a microservice; therefore, if it goes down, only playlists
    are unavailable.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放列表由一个微服务管理；因此，如果它宕机，只有播放列表会不可用。
- en: If the recommendations are not working, the users usually don't even notice
    it.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果推荐功能没有生效，用户通常甚至不会注意到。
- en: 'This comes at a huge cost: operational overhead. Splitting an application into
    many requires a proportional amount of operations to keep it running, which can
    be exponential if it is not handled well. Let''s look at an example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了巨大的成本：运营开销。将一个应用拆分成多个微服务需要相应的运营量来维持其运行，如果处理不当，这个开销会呈指数增长。我们来看一个例子：
- en: 'Our system is composed of five applications: A, B, C, D, and E.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的系统由五个应用程序组成：A、B、C、D 和 E。
- en: Each of them is a microservice that is deployed individually and requires around
    5 hours a month of operations (deployments, capacity planning, maintenance, and
    so on)
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们每个都是一个单独部署的微服务，每个月需要大约5小时的运维时间（部署、容量规划、维护等）。
- en: 'If we bundle all five applications together into a single big application,
    our maintenance cost goes down drastically to pretty much the same as any of the
    previously mentioned microservices. The numbers are clear:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将所有五个应用程序合并成一个大应用程序，我们的维护成本将大幅下降，几乎和之前提到的任何微服务的成本一样。数字非常清晰：
- en: 25 hours a month for a microservices-based system
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于微服务架构的系统每月需要25小时的维护时间
- en: 5 hours a month for a monolithic application
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单体应用每月需要5小时的维护时间
- en: 'This leads to a problem: if our system grows up to hundreds (yes, hundreds)
    microservices, the situation becomes hard to manage as it consumes all our time.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了一个问题：如果我们的系统增长到数百个（是的，数百个）微服务，情况就变得难以管理，因为这会消耗我们所有的时间。
- en: The only solution to this is automation. There will always be an operational
    overhead, but with automation, instead of adding 5 hours a month per service,
    this time will decrease with time, as once we have automated our interventions,
    there is pretty much no time consumed by new services as everything happens as
    a chain of events.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的解决方案是自动化。虽然始终会有运营开销，但通过自动化，我们不仅可以节省每个服务每月增加的5小时时间，随着时间的推移，这个时间会减少，因为一旦我们自动化了干预，新的服务几乎不会消耗任何时间，一切都会像事件链一样自动发生。
- en: In [Chapter 8](127a7b5f-4bd7-4290-bea0-3e8db867e4af.xhtml), *Release Management
    – Continuous Delivery,* we are going to set up a continuous delivery pipeline
    to demonstrate how this is possible, and even though we will have some manual
    steps for sanity, it is possible to fully automate the operations on a microservices
    environment running in a cluster such as Kubernetes.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](127a7b5f-4bd7-4290-bea0-3e8db867e4af.xhtml)中，*发布管理 - 持续交付*，我们将设置一个持续交付流水线，演示这一点是如何实现的，尽管我们会有一些手动步骤以保证稳定性，但完全可以自动化在Kubernetes等集群上运行的微服务环境中的所有操作。
- en: 'In general, I would not advise any company to start a project based on microservices
    without proper automation in place and more specifically, if you are convinced
    that the system will grow over time, Kubernetes would be a very interesting option:
    it gives you the language that other platforms lack, such as load balancers, routing,
    ingress, and more. We will dive deep into Kubernetes in the upcoming chapters.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'All these activities are supposed to be part of the DevOps engineer''s day-to-day
    work (among many others), but first, there is a problem that we need to solve:
    how to align our company resources to be able to get the most from the DevOps
    engineer figure.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'DevOps: Organizational alignment'
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, we have looked at how the modern and traditional release life
    cycle works. We have also defined what a DevOps engineer is and also how they
    can help with Microservices, which, as explained, are not viable without the right
    level of automation.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from technicalities, there is something that is extremely important for
    the DevOps culture to succeed: organizational alignment.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'The traditional software development used to divide teams into different roles:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Business analysts
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System administrators
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QA engineers
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is what we call horizontal slices: a team of system administrators has
    a few contact points with the developers so that they get enough information to
    deploy and maintain software.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'In the modern release life cycle, this simply does not work. Instead of horizontal
    slices of our company, we need to get vertical slices: a team should be composed
    of at least one member of every horizontal team. This means having developers,
    business analysts, system administrators, and QA engineers together...well, not
    100%.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'With the DevOps philosophy, some of these roles become irrelevant or need to
    evolve. The idea is that a single team is able to build, deploy, and run an application
    on its own without anything external: this is called cross-functional autonomous
    team.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'In my professional experience, cross-functional teams are the best organization
    for delivering high-quality reliable products. The product is run by people who
    build; therefore, they know it inside out. A combination of analysts (depending
    on the nature of the business), developers, and DevOps engineers is all you need
    to deliver high-quality software into production. Some teams might as well include
    a QA engineer, but in general, automated testing created by DevOps and developers
    should be the holy grail: it is impossible to release software in a continuous
    delivery manner without having good code coverage. I am a big fan of the analyst
    being the one that tests the software as he/she is the person who knows the best
    the requirements and is, therefore, the most indicated to validating them.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'The DevOps engineer plays a cross-cutting role: they need to know how the application
    is built (and possibly be part of its development), but their focus is related
    to the operation of the app: security, operational readiness, infrastructure,
    and testing should be their day-to-day job.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: I have also seen teams built entirely by DevOps engineers and analysts without
    any pure developers or QAs. In this variant, the DevOps engineers are responsible
    for the infrastructure part as well as the application development, which can
    be very challenging depending on the complexity of the system. In general, every
    case needs to be studied in isolation as DevOps is not a one size fits all product.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: What to expect from this book
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have introduced DevOps, it is time to specify what are we going
    to learn in this book. It will be mainly focused on the Google Cloud Platform
    and the DevOps tools around it. There are several reasons for this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: The trial period of GCP is more than enough to go through the entire book
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a very mature product
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes is a big part of GCP
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will learn the fundamentals of the DevOps tools and practices, which provide
    enough detail to allow you to search for extra information when needed but up
    to a point where you can use the learnings straight away in your company.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'It will be strongly focused on the ops part of DevOps as there is enough literacy
    in application development, and that hasn''t changed in the DevOps world. Needless
    to say, we are not going to show how to write tests for your application, which
    is a fundamental activity to ensure the stability of our systems: DevOps does
    not work without good code coverage and automated testing.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: In general, the examples are simple enough to be followed by people at the entry
    level of DevOps, but if you want to go deeper into some aspects of GCP, there
    is a good collection of tutorials available at [https://cloud.google.com/docs/tutorials](https://cloud.google.com/docs/tutorials).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'The book is structured in an incremental way: first, the Docker fundamentals
    will be shown just after a walkthrough of the different cloud providers but before
    going deep into configuration management tools (specifically, Ansible) and containers''
    orchestration platform (mainly Kubernetes).'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'We will end up setting up a continuous delivery pipeline for a system that
    manages timezoned timestamps called Chronos, which I use for talks for several
    reasons:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: It has pretty much no business logic
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is based on microservices
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It pretty much covers all the required infrastructure
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the code for Chronos on the following GitHub repository at [https://github.com/dgonzalez/chronos](https://github.com/dgonzalez/chronos).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: The majority of the examples can be repeated in your local machine using a virtualization
    provider such as VirtualBox and MiniKube for the Kubernetes examples, but I'd
    encourage you to sign up for the trial on Google Cloud Platform as it provides
    you (at the time of writing this) with $300 or 1 year of resources to spend freely.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数示例可以通过在本地计算机上使用虚拟化提供商（例如 VirtualBox 和 Kubernetes 示例中的 MiniKube）进行重复，但我鼓励你注册
    Google Cloud Platform 的试用版，因为它在写这篇文章时，提供给你 $300 或 1 年的资源供自由使用。
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: On this chapter we have seen how we should align our resources (engineers) to
    deliver low cost and high impact IT systems. We have seen how a poor communication
    can lead into a defective release process deadlocking our rollouts and making
    the system quite inefficient from the business point of view. Through the rest
    of the book, we are going to look at tools that can help us not only to improve
    this communication but also enable our engineers to deliver more top quality functionality
    with lower costs.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们已经看到了如何调整资源（工程师）以交付低成本、高影响力的 IT 系统。我们还看到了，沟通不畅如何导致缺陷的发布过程，从而使我们的部署陷入僵局，并且从业务角度来看，系统变得相当低效。在本书的其余部分，我们将探讨能够帮助我们不仅改善这种沟通，还能使我们的工程师以更低的成本交付更高质量功能的工具。
- en: 'The first of these set of tools are described on the next chapter: the cloud
    data centers. These data centers allow us to create resources (VMs, networks,
    load balancers...) from their pool of resources in order to satisfy our needs
    of specific hardware, at a very reasonable price and flexibility. These type of
    cloud data centers are being adopted more and more by the modern (and not so modern)
    IT companies, which is leading to the creation of a set of tools to automate pretty
    much everything around the infrastructure.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具的第一个系列将在下一章中介绍：云数据中心。这些数据中心使我们能够从其资源池中创建资源（虚拟机、网络、负载均衡器等），以满足我们对特定硬件的需求，且价格合理，灵活性高。现代（以及一些非现代）IT
    公司越来越多地采用这种云数据中心，这也促使了一系列自动化基础设施的工具的诞生。
