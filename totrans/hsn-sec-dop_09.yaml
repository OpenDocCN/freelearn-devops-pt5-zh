- en: Case Study - Security and Privacy by Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed secure architecture and design principles, threat modeling,
    and secure coding practices. In this chapter, we will examine a case study to
    discuss the implementation of security by design and privacy by design. The case
    study will show us the common challenges a DevOps team may have to face when applying
    security practices, and how the security team may help to provide best practices,
    tools, a security framework, and a training kit.
  prefs: []
  type: TYPE_NORMAL
- en: The case study will begin with a security assessment by OWASP ASVS, and will
    further identify the required security improvements, such as authentication, authorization,
    session management, data input/output controls, and privacy by design. We will
    look at some of the suggested tools and open source security framework implementations.
    In addition, the third-party components will also introduce vulnerabilities and
    security risks. We will also discuss the processes and tools that are used to
    review and manage the open source frameworks and dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure architecture review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy by design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary of security and privacy frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party component management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case study background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Richard is the CTO of an online bookstore and manages around 500 developers.
    Richard would like to work with the security team to apply standard security practices
    during the architecture review, design review, and third-party framework review,
    and also apply secure coding. Both Richard and the security team reached the consensus
    that they should have the following in order to prepare for the next stage of
    their business development:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure design checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommended secure design pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of reusable third-party components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at how the security team helps Richard through the stages of development.
  prefs: []
  type: TYPE_NORMAL
- en: Secure architecture review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To evaluate the existing security architecture of the e-commerce site, the
    security team decides to work with architects to do an initial architecture review
    based on OWASP ASVS practices. To do the assessment, the project team can either
    use an online portal or EXCEL. In this case, the project security architecture
    review was done by using EXCEL checklist before an in-house security assessment
    portal was used. The following table contains some resources and documentation
    concerning these two tools that you may find useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **OWASP assessment tool** | **Reference of resources** |'
  prefs: []
  type: TYPE_TB
- en: '| On-line Demo |'
  prefs: []
  type: TYPE_TB
- en: OWASP ASVS Assessment Generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demo site: [http://ibuildingsnl.github.io/owasp-asvs-report-generator/index.html](http://ibuildingsnl.github.io/owasp-asvs-report-generator/index.html)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Source: [https://github.com/ibuildingsnl/owasp-asvs-report-generator](https://github.com/ibuildingsnl/owasp-asvs-report-generator)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Security Knowledge Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Demo site: [https://demo.securityknowledgeframework.org/project-new](https://demo.securityknowledgeframework.org/project-new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'username: admin password: test-skf.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Source: [https://github.com/blabla1337/skf-flask](https://github.com/blabla1337/skf-flask)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Off-line EXCEL |'
  prefs: []
  type: TYPE_TB
- en: '[https://github.com/shenril/owasp-asvs-checklist](https://github.com/shenril/owasp-asvs-checklist)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of the OWASP ASVS assessment can be presented as a diagram to show
    you which security areas need further improvements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After some of the pilot projects, the security teams grew more familiar with
    the OWASP ASVS assessment, and there are more projects that require a security
    assessment. For ease of project data management and cross-reference review, the
    security team decided to build and customize an in-house assessment portal based
    on one of the following open source frameworks instead of EXCEL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ibuildingsnl/owasp-asvs-report-generator](https://github.com/ibuildingsnl/owasp-asvs-report-generator)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/blabla1337/skf-flask](https://github.com/blabla1337/skf-flask)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to establish a **secure design checklist**, the security team introduced
    the OWASP ASVS practices, built an in-house knowledge base, and went through a
    self-assessment with the project teams. To establish the secure design pattern and
    a list of reusable security frameworks, the security team decided to propose an
    open source security framework based on the assessment results of the OWASP ASVS.
    This is because some of the security frameworks also included security best practices,
    such as web security frameworks, Spring security, and Shiro.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Based on the OWASP ASVS assessment of the project, the security team identified
    that they were not meeting one of the authentication security requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '**OWASP ASVS authentication**:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP ASVS authentication verifies that secrets, API keys, and passwords are
    not included in the source code, or in online source code repositories.
  prefs: []
  type: TYPE_NORMAL
- en: The security team further investigated the existing practices of secrets management.
    The CTO, Richard, clarified that the issue was becoming a headache for both the
    development and operation team. In the development and testing environment, developers
    may keep the password or keys in a separate configuration file. However, to filter
    these files and to separate them in a different version controls repository really
    take lots of communication, and creates collaboration overhead.
  prefs: []
  type: TYPE_NORMAL
- en: 'To mitigate the risks, the security team proposed some security practices.
    They advised that the sensitive information should be encrypted when source codes
    are committed into a repository. Both the testing and operation teams will do
    regular scanning on the source code repository for any sensitive information.
    The following diagram shows the revised development workflow model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The security team also suggested some tools to integrate into the existing
    practices of the development, testing, and operation teams'' daily usage. Here
    are some of the open source tools that may be used in secret management:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tools** | **Scenario and tools** |'
  prefs: []
  type: TYPE_TB
- en: '| Git Secret | Developers may need a tool that can handle sensitive files that
    are to be encrypted when committed and decrypted when checked out transparently. If
    your development team is using Git as the primary source code repository, the
    following tools can be applied to reduce the leakage of secrets such as API key,
    passwords, or encryption key.'
  prefs: []
  type: TYPE_NORMAL
- en: Git-Secret
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BlackBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git-Crypt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git-Remote-gcrypt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| TruffleDumpsterDiver | Developers, QA, or operations teams prefer to search
    source code or configuration files regularly to identify whether there is any
    potential secret leakage in the files.The TruffleHog can do the secrets search
    on the GIT repository, and DumpsterDiver searches for the secrets on the local
    files.  |'
  prefs: []
  type: TYPE_TB
- en: Once the security team evaluates the tools, the next stage is to perform pilot
    testing with some of the development and operations teams before large-scale deployment.
    The purpose of the pilot testing was to make the process smooth and to customize
    the tools for better usability.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The authorization security requirements can refer to the ''OWASP ASVS V4: Access
    control verification requirements''. For example, the OWASP ASVS self-assessment
    results showed the need for centralized mechanism protection.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Centralized Mechanism Protection: You should verify that there is a centralized
    mechanism (including libraries that call external authorization services) for
    protecting access to each type of protected resource.'
  prefs: []
  type: TYPE_NORMAL
- en: To achieve the centralized mechanism protection, the security team decided to
    introduce the API gateway architecture that was designed so that all the API interfaces
    were controlled by the API gateway/manager, such as authentication, the API key,
    monitoring, ACL, logging, and rate limiting. The security team discussed this
    with the CTO, Richard, and realized that the existing security controls were implemented
    by each service, and the implementation was also subject to change for each service. Richard
    would like to have a common security framework for the purposes of not only consistent
    access control behaviors, but also the central management of security policies.
  prefs: []
  type: TYPE_NORMAL
- en: 'A central security policies management is critical for those services that
    need to interact with external partners:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a number of API manager options in the market. The following table
    lists some open source API manager solutions. One of the key advantages of adopting
    open source frameworks or tools is that you are able to make further customizations
    based on your business needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **API manager** | **Open source reference** |'
  prefs: []
  type: TYPE_TB
- en: '| Kong |'
  prefs: []
  type: TYPE_TB
- en: '[https://github.com/Kong/kong](https://github.com/Kong/kong)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://getkong.org/](https://getkong.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| API umbrella |'
  prefs: []
  type: TYPE_TB
- en: '[https://github.com/NREL/api-umbrella](https://github.com/NREL/api-umbrella)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| WSO2 API Manager |'
  prefs: []
  type: TYPE_TB
- en: '[https://github.com/wso2/product-apim](https://github.com/wso2/product-apim)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Session management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CTO also pointed out some existing challenges to the session management
    implementation. The existing session management needs to tie with specific container
    technology and does not support various kinds of client application access, such
    as standalone or non-web application. The CTO would like to have the session management
    support heterogeneous client access, and wants it to be container-independent.
    In addition, the team wants to implement the CSRF token in different ways, and
    this could result in potential risks and extra effort. The CTO expects the team
    to provide a common library to have consistent CSRF protection.
  prefs: []
  type: TYPE_NORMAL
- en: 'After assessing the challenges and needs of session management, the security
    team works on the evaluation of feasible security frameworks and prepares a security
    kit that may include the information in the following table. The purpose of the
    security kit is to help the development team to apply related security practices
    and tools during the development process:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Stage** | **Security references and tools** |'
  prefs: []
  type: TYPE_TB
- en: '| Threats analysis |'
  prefs: []
  type: TYPE_TB
- en: CWE-6 Insufficient Session-ID Length
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CWE-352 Cross-Site Request Forgery (CSRF)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CWE-384 Session Fixation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CWE-488 Exposure of Data Element to the Wrong Session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CWE-613 Insufficient Session Expiration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips to query a specific CWE. Just specify the CWE ID number at the end of the
    URL below. For example, the CWE-613 will be [https://cwe.mitre.org/data/definitions/613.html](https://cwe.mitre.org/data/definitions/613.html).
    |
  prefs: []
  type: TYPE_NORMAL
- en: '| Secure design |'
  prefs: []
  type: TYPE_TB
- en: OWASP ASVS V3 Session Management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Top 10 A2 Broken Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Session Management Cheat Sheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Secure architecture |'
  prefs: []
  type: TYPE_TB
- en: Apache Shiro Session Management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP CSRFGuard: [https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project](https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Data input/output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each project team implements the data input validation differently. Some project
    teams may miss filtering certain illegal characters, some may not know how to
    encode the output correctly, and some may neglect to do path or URL canonicalization
    before validation. These data input/output handling issues could cause some security
    problems. Therefore, the CTO wants the security team to help provide the appropriate
    security framework and also create hands-on tutorials for their staff members.
  prefs: []
  type: TYPE_NORMAL
- en: The security team proposes a security training kit that includes coding rules,
    the coding framework, scanning tools, and some case studies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data input/output training kit**:'
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the training kit is to provide security best practices, tools,
    and implementation guides for data input validation and also data output encoding
    to avoid XSS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '**General secure coding rules**:'
  prefs: []
  type: TYPE_NORMAL
- en: Canonicalization and normalization must occur before validation.
  prefs: []
  type: TYPE_NORMAL
- en: Output encoding should be used to avoid XSS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the preliminary agenda of the security training kit:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Security Framework/tools** | **Security Controls** |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP HTML Sanitizer Project ([https://www.owasp.org/index.php/OWASP_Java_HTML_Sanitizer_Project](https://www.owasp.org/index.php/OWASP_Java_HTML_Sanitizer_Project))
    | This is for Java to perform HTML sanitization to protect against XSS attacks.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Commons Validator ([https://commons.apache.org/proper/commons-validator/](https://commons.apache.org/proper/commons-validator/))
    | This is a general data validator that provides data format validation, such
    as email, credit card, date, URL, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| ValidateJS ([https://validatejs.org/](https://validatejs.org/)) | This is
    a frontend JavaScript data validator. |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP Java Encoder ([https://www.owasp.org/index.php/OWASP_Java_Encoder_Project](https://www.owasp.org/index.php/OWASP_Java_Encoder_Project))
    | This works in a similar way to the HTML sanitizer. It''s used to perform output
    encoding to avoid XSS attacks. |'
  prefs: []
  type: TYPE_TB
- en: Secure coding scanning tools
  prefs: []
  type: TYPE_NORMAL
- en: 'The Checker Framework: [https://checkerframework.org/](https://checkerframework.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Find security bugs: [https://find-sec-bugs.github.io](https://find-sec-bugs.github.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples of security risks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'FIO16-J: Canonicalizes path names before validating them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IDS07-J: Sanitizes untrusted data passed to the `Runtime.exec()` method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IDS00-J: Prevents SQL injection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IDS16-J: Prevents XML injection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IDS08-J: Sanitizes untrusted data included in a regular expression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IDS06-J: Excludes unsanitized user input from format strings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More can be found at [https://wiki.sei.cmu.edu/confluence/display/java/2+Rules](https://wiki.sei.cmu.edu/confluence/display/java/2+Rules).
  prefs: []
  type: TYPE_NORMAL
- en: Privacy by design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The team realizes the importance of privacy and also receives some awareness training
    related to privacy laws. However, there is still a gap between translating the
    legal languages into technical security requirements. The CTO would like the security
    team to help to provide common privacy design solutions and to make *privacy by
    design* manifest in technical guidelines for the software engineering team. As
    well as having the existing data tasking implementation being done by each project
    team, the CTO plans to have common libraries for consistent data-masking behaviors
    and to reduce implementation efforts across the teams. There are also other issues
    raised by the operation, such as sensitive information classification and privacy
    assessment scanning. The role of the security team is not only to introduce industry
    best practices but also to evaluate feasible tools or frameworks that support
    the privacy by design during the DevOps process. Some resources to help you in
    this stage of the process are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Challenges of privacy by design** | **Suggestions by the security team**
    |'
  prefs: []
  type: TYPE_TB
- en: '| How do you translate ''privacy by design'' into technical security requirements?
    |'
  prefs: []
  type: TYPE_TB
- en: Privacy design patterns: [https://privacypatterns.org/patterns/](https://privacypatterns.org/patterns/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NIST SP 800-122 Guide to Protecting the Confidentiality of PII
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Developers need a data-masking implementation API to handle the sensitive
    information. | The ARX De-Identifier Data anonymization tool. |'
  prefs: []
  type: TYPE_TB
- en: '| The operations team needs to classify PII attributes with the existing database
    and configure the access security policies. | Evaluate the Apache Atlas framework
    for the data governance and access control.  |'
  prefs: []
  type: TYPE_TB
- en: '| The DevOps team needs an automatic privacy-scanning tool to evaluate the
    privacy status of all web services. | Try to apply the Web privacy assessment
    by ''PrivacyScore''.   |'
  prefs: []
  type: TYPE_TB
- en: '| The developer team needs a common library to implement the consistent Cookie
    Consent behaviors for all the web services. | The open source CookieConsent library
    may be a good candidate to evaluate. |'
  prefs: []
  type: TYPE_TB
- en: Summary of security and privacy frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The adoption of any security framework requires not only the consideration
    of business needs but also the fit into the existing architecture. Here is the
    summary of the industry practices, tools, and frameworks that we discussed in
    this case study:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Security improvement area** | **Open source security and privacy framework**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Authentication |'
  prefs: []
  type: TYPE_TB
- en: 'Gluu: it''s for multiple-factor authentication and social login.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CAPTCHA is commonly used to prevent machine logins. The HCaptcha, ReCaptcha,
    Patcha are the open source solutions to be considered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Git-Secret: For the protection of sensitive information in source code repositories,
    consider using the tool for the development team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Authorization |'
  prefs: []
  type: TYPE_TB
- en: 'Gluu: It also provides the user consent management'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Shiro Session Management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP CSRF Guard can generate a secure token to protect the CSRF attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| API manager | The following open source frameworks can be considered to apply
    the API manager to secure the external restful API interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: Kong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API umbrella
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WSO2 API Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Data input/output | Depends on the programming language, there may be various
    kinds of data validator framework.'
  prefs: []
  type: TYPE_NORMAL
- en: 'OWASP Java HTML Sanitizer Project: It''s a  HTML Sanitizer written in Java
    to protect against XSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Commons validator: It''s a Java validator library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ValidateJS: It''s a JavaScript validator library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OWASP Java Encoder: It''s a Java encoder library which is mainly used to prevent
    XSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Privacy |'
  prefs: []
  type: TYPE_TB
- en: Data anonymization tool: [http://arx.deidentifier.org/](http://arx.deidentifier.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data governance: [https://atlas.apache.org/index.html](https://atlas.apache.org/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web privacy assessment: [http://privacyscore.org/](http://privacyscore.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookie Consent: [https://github.com/insites/cookieconsent](https://github.com/insites/cookieconsent)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Third-party component management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To mitigate the security risks of third-party components, the team defines
    a process to evaluate the third-party components. However, the CTO identified
    that the manual inspection of open source licenses to collect related information
    really took a lot of effort, and, in doing so, the team also made some mistakes,
    such as allowing information to go missing or incorrectly inputting data. The
    CTO met with the security team, discussing such matters as the feasibility of
    automating the process of scanning the whole project and creating an identity
    license for each component, and other such related information. The stages and
    key activities of this review are shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Stages** | **Key activities of the third-party component review** |'
  prefs: []
  type: TYPE_TB
- en: '| Requirements |'
  prefs: []
  type: TYPE_TB
- en: Evaluate open source framework components from legal, license, security, and
    support perspectives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Design |'
  prefs: []
  type: TYPE_TB
- en: Keep the open source information in a central database, including details such
    as the open source name, version, sources, and licenses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat and security analysis of the components, ensuring that there is no backdoor,
    no hard-coded encryption key, and no hidden malware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that a channel is provided for software updates and patches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Implementation |'
  prefs: []
  type: TYPE_TB
- en: The third-party components must be verified with secure code-scanning tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the security updates and changes should be documented as part of the change
    management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Verification |'
  prefs: []
  type: TYPE_TB
- en: The scope of security testing includes all the third-party components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: License declaration should be implemented in the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The licenses' compliance should be confirmed with the legal department
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Release |'
  prefs: []
  type: TYPE_TB
- en: Known CVE or vulnerabilities must be uncovered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure the integrity of all the binary files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Maintenance |'
  prefs: []
  type: TYPE_TB
- en: A security update plan must be drawn up and implemented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Without a proper tool or automation tool, security practices can be a big overhead
    to the development team. After understanding the challenges of the execution,
    the security team identified three key areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Code scanning for license information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary scan for known vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary scan and runtime behavior monitoring for potential backdoors and malicious
    behaviors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some recommended scanning tools for the third-party components:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Purposes** | **Suggested Open Source tools** |'
  prefs: []
  type: TYPE_TB
- en: '| Open source licenses check | The following projects help to identify and
    retrieve critical information from the open source components such as vulnerabilities,  license,
    and copyright status.'
  prefs: []
  type: TYPE_NORMAL
- en: AboutCode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FOSSology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ninka
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux Foundation open source scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Known vulnerabilities check | OWASP Dependency Check, OWASP Dependency Track,
    and OpenVAS are the suggested open source tools to scan software vulnerabilities. 
    |'
  prefs: []
  type: TYPE_TB
- en: '| Malware and suspicious behaviors analysis | Cuckoo: It''s a sandbox used
    to analyze static and dynamic behaviors of an unknown file.  |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this case study, we reviewed a typical e-commerce website's adoption of security
    practices for the requirement, architecture, security framework, design review,
    and threat-modeling stages. We discussed the role of the security team and also
    the challenges for the DevOps team in adopting the security practices.
  prefs: []
  type: TYPE_NORMAL
- en: The team did an architecture assessment by applying OWASP ASVS. The team identified
    that there are some security areas that can be improved, including authentication,
    authorization, session management, and data-input validation. In addition, the
    team was also looking for advice on the implementation of privacy by design.
  prefs: []
  type: TYPE_NORMAL
- en: For the authentication process, they discovered that some of the sensitive information,
    such as the encryption key, password, or secrets, may accidentally be committed
    in the source code repositories. The security team suggested applying monitoring
    or encryption tools (Git-Secret) to prevent developers from committing credentials
    into Git repositories in plain text.
  prefs: []
  type: TYPE_NORMAL
- en: For the authorization process, because of the REST API's open interface with
    third-party partners, the architecture requires a central security access control.
    The API manager was introduced to manage all the API's ACL, logging, authorization,
    and rate limiting. Open source solutions, such as Kong and WSO2 API Manager, were
    introduced to the team for further evaluation. In addition to the API access control,
    the team was also looking for a secure session management framework to handle
    various kinds of client technologies and to secure the system against a CSRF attack.
    To address the problem of the secure session management, the security team proposed
    a security kit that included threat analysis with examples of CWE, OWASP cheat
    sheets for secure design, and open source frameworks with Shiro and CSRF Guard
    for implementation.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to data-input validation and output encoding, the security team
    prepared a training kit that included the secure coding rules, security framework,
    and code-scanning tools. For the implementation, some of the open source frameworks
    were suggested based on their security needs, such as HTTP Sanitizer, common validator,
    ValidateJS, and Java Encoder.
  prefs: []
  type: TYPE_NORMAL
- en: Privacy by design is critical not only for legal compliance but also for personal
    data protection. The project team was confused about how to translate those legal
    requirements into software engineering technical requirements. The security team
    suggested some industry best practices and tools based on the likely scenarios.
    For example, the developers needed their API to correctly implement data masking.
    The operations team needed to classify the data classification of the PII attributes
    with the existing database and configure the access security policies. The DevOps
    team needed an automatic privacy-scanning tool to evaluate the privacy status
    of all web services. The developer team needed a common library to implement the
    consistent Cookie Consent behaviors for all the web services. Privacy by design
    will put our requirements into practice more easily if we apply the right tools
    and framework.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, we discussed third-party component management. There were
    lots of open source frameworks and tools applied to the security practices. The
    third party components also introduced legal and security risks. We introduced
    some practices and tools to mitigate those risks.
  prefs: []
  type: TYPE_NORMAL
- en: We have looked in great detail at threat modeling, security requirements, secure
    architecture, framework, security by design, and security by privacy, in the development
    stage. In the coming chapters, we will begin to explore security testing in greater
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following are secrets that we don't want to be included in the
    source code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: API keys
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Passwords
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Encryption key
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What can't an API gateway do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access the control list
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rate limiting
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Antivirus
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: API key authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following is related to the security of the session management?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insufficient session ID length
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Cross-Site Request Forgery (CSRF)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Session fixation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or False: For the data validation, does the canonicalization and normalization
    occur after validation?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is data anonymization used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's to perform the data masking of sensitive information
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It's for data governance
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Web privacy assessment
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Cookie Consent
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What can the AboutCode, FOSSology, and Ninka tools do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open source licenses check
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Known vulnerabilities check
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Suspicious behaviors analysis
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Intrusion defense
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**OWASP Secure Application Design**: [https://www.owasp.org/index.php/OWASP_Secure_Application_Design_Project](https://www.owasp.org/index.php/OWASP_Secure_Application_Design_Project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft MSDN Security Checklist: Architecture and Design Review**: [https://msdn.microsoft.com/en-us/library/ff647464.aspx](https://msdn.microsoft.com/en-us/library/ff647464.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SANS Web Application Security Design Checklist**: [https://www.sans.org/reading-room/whitepapers/securecode/security-checklist-web-application-design-1389](https://www.sans.org/reading-room/whitepapers/securecode/security-checklist-web-application-design-1389)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Design Guidelines for Secure Web Applications**: [https://msdn.microsoft.com/en-us/library/ff648647.aspx](https://msdn.microsoft.com/en-us/library/ff648647.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Core Security Patterns**: [http://coresecuritypatterns.com/downloads/patterns.pdf](http://coresecuritypatterns.com/downloads/patterns.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP ASVS Assessment Tool**: [https://www.owasp.org/index.php/OWASP_ASVS_Assessment_tool](https://www.owasp.org/index.php/OWASP_ASVS_Assessment_tool)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft''s guide for data classification (PDF)**: [https://download.microsoft.com/download/0/A/3/0A3BE969-85C5-4DD2-83B6-366AA71D1FE3/Data-Classification-for-Cloud-Readiness.pdf](https://download.microsoft.com/download/0/A/3/0A3BE969-85C5-4DD2-83B6-366AA71D1FE3/Data-Classification-for-Cloud-Readiness.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Carnegie Mellon University: Guidelines for Data Classification**: [https://www.cmu.edu/iso/governance/guidelines/data-classification.html#classification](https://www.cmu.edu/iso/governance/guidelines/data-classification.html#classification)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OVIC Privacy and Data Protection Checklists and Tools**: [https://www.cpdp.vic.gov.au/menu-resources/resources-privacy/resources-privacy-checklists-and-tools](https://www.cpdp.vic.gov.au/menu-resources/resources-privacy/resources-privacy-checklists-and-tools)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft GDPR Compliance Assessment**: [https://assessment.microsoft.com/gdpr-compliance](https://assessment.microsoft.com/gdpr-compliance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ENISA Privacy and Data Protection by Design**: [https://www.enisa.europa.eu/publications/privacy-and-data-protection-by-design/](https://www.enisa.europa.eu/publications/privacy-and-data-protection-by-design/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SP 800-122 Guide to protecting the confidentiality of personally identifiable
    information (PII)**: [https://csrc.nist.gov/publications/detail/sp/800-122/final](https://csrc.nist.gov/publications/detail/sp/800-122/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Anonymization for ****production data dumps**: [https://github.com/sunitparekh/data-anonymization](https://github.com/sunitparekh/data-anonymization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSA Code of Conduct for GDPR Compliance**: [https://cloudsecurityalliance.org/media/press-releases/cloud-security-alliance-issues-code-of-conduct-self-assessment-and-certification-tools-for-gdpr-compliance/](https://cloudsecurityalliance.org/media/press-releases/cloud-security-alliance-issues-code-of-conduct-self-assessment-and-certification-tools-for-gdpr-compliance/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
