["```\npipeline {\n     agent any\n     stages {\n          stage('First Stage') {\n               steps {\n                    echo 'Step 1\\. Hello World'\n               }\n          }\n          stage('Second Stage') {\n               steps {\n                    echo 'Step 2\\. Second time Hello'\n                    echo 'Step 3\\. Third time Hello'\n               }\n          }\n     }\n}\n```", "```\npipeline {\n     agent any\n     triggers { cron('* * * * *') }\n     options { timeout(time: 5) }\n     parameters { \n          booleanParam(name: 'DEBUG_BUILD', defaultValue: true, \n          description: 'Is it the debug build?') \n     }\n     stages {\n          stage('Example') {\n               environment { NAME = 'Rafal' }\n               when { expression { return params.DEBUG_BUILD } } \n               steps {\n                    echo \"Hello from $NAME\"\n                    script {\n                         def browsers = ['chrome', 'firefox']\n                         for (int i = 0; i < browsers.size(); ++i) {\n                              echo \"Testing the ${browsers[i]} browser.\"\n                         }\n                    }\n               }\n          }\n     }\n     post { always { echo 'I will always say Hello again!' } }\n}\n```", "```\npipeline {\n     agent any\n     stages {\n          stage(\"Checkout\") {\n               steps {\n                    git url: 'https://github.com/leszko/calculator.git', branch: 'main'\n               }\n          }\n     }\n}\n```", "```\n$ git clone https://github.com/leszko/calculator.git\n```", "```\n$ ls -a\n. .. build.gradle .git .gitignore gradle gradlew gradlew.bat HELP.md README.md settings.gradle src\n```", "```\n$ ./gradlew compileJava\n```", "```\n$ git add .\n$ git commit -m \"Add Spring Boot skeleton\"\n$ git push -u origin main\n```", "```\nstage(\"Compile\") {\n     steps {\n          sh \"./gradlew compileJava\"\n     }\n}\n```", "```\npackage com.leszko.calculator;\nimport org.springframework.stereotype.Service;\n@Service\npublic class Calculator {\n     public int sum(int a, int b) {\n          return a + b;\n     }\n}\n```", "```\npackage com.leszko.calculator;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n@RestController\nclass CalculatorController {\n     @Autowired\n     private Calculator calculator;\n     @RequestMapping(\"/sum\")\n     String sum(@RequestParam(\"a\") Integer a, \n                @RequestParam(\"b\") Integer b) {\n          return String.valueOf(calculator.sum(a, b));\n     }\n}\n```", "```\n$ ./gradlew bootRun\n```", "```\npackage com.leszko.calculator;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class CalculatorTest {\n     private Calculator calculator = new Calculator();\n     @Test\n     public void testSum() {\n          assertEquals(5, calculator.sum(2, 3));\n     }\n}\n```", "```\ndependencies {\n     ...\ntestImplementation 'junit:junit:4.13'\n}\n```", "```\n$ git add .\n$ git commit -m \"Add sum logic, controller and unit test\"\n$ git push\n```", "```\nstage(\"Unit test\") {\n     steps {\n          sh \"./gradlew test\"\n     }\n}\n```", "```\npipeline {\n     agent any\n     stages {\n          stage(\"Compile\") {\n               steps {\n                    sh \"./gradlew compileJava\"\n               }\n          }\n          stage(\"Unit test\") {\n               steps {\n                    sh \"./gradlew test\"\n               }\n          }\n     }\n}\n```", "```\n$ git add Jenkinsfile\n$ git commit -m \"Add Jenkinsfile\"\n$ git push\n```", "```\nplugins {\n     ...\n     id 'jacoco'\n}\n```", "```\njacocoTestCoverageVerification {\n     violationRules {\n          rule {\n               limit {\n                    minimum = 0.2\n               }\n          }\n     }\n}\n```", "```\n$ ./gradlew test jacocoTestCoverageVerification\n```", "```\n$ ./gradlew test jacocoTestReport\n```", "```\nstage(\"Code coverage\") {\n     steps {\n          sh \"./gradlew jacocoTestReport\"\n          sh \"./gradlew jacocoTestCoverageVerification\"\n     }\n}\n```", "```\nstage(\"Code coverage\") {\n     steps {\n          sh \"./gradlew jacocoTestReport\"\n          publishHTML (target: [\n               reportDir: 'build/reports/jacoco/test/html',\n               reportFiles: 'index.html',\n               reportName: \"JaCoCo Report\"\n          ])\n          sh \"./gradlew jacocoTestCoverageVerification\"\n     }\n}\n```", "```\n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n     \"-//Puppy Crawl//DTD Check Configuration 1.2//EN\"\n     \"http://www.puppycrawl.com/dtds/configuration_1_2.dtd\">\n<module name=\"Checker\">\n     <module name=\"TreeWalker\">\n          <module name=\"ConstantName\" />\n     </module>\n</module>\n```", "```\nplugins {\n     ...\n     id 'checkstyle'\n}\n```", "```\n$ ./gradlew checkstyleMain\n```", "```\n@SpringBootApplication\npublic class CalculatorApplication {\n     private static final String constant = \"constant\";\n     public static void main(String[] args) {\n          SpringApplication.run(CalculatorApplication.class, args);\n     }\n}\n```", "```\nstage(\"Static code analysis\") {\n     steps {\n          sh \"./gradlew checkstyleMain\"\n     }\n}\n```", "```\npublishHTML (target: [\n     reportDir: 'build/reports/checkstyle/',\n     reportFiles: 'main.html',\n     reportName: \"Checkstyle Report\"\n])\n```", "```\ntriggers {\n     pollSCM('* * * * *')\n}\n```", "```\npost {\n     always {\n          mail to: 'team@company.com',\n          subject: \"Completed Pipeline: ${currentBuild.fullDisplayName}\",\n          body: \"Your build completed, please check: ${env.BUILD_URL}\"\n     }\n}\n```", "```\npost {\n     failure {\n          slackSend channel: '#dragons-team',\n          color: 'danger',\n          message: \"The pipeline ${currentBuild.fullDisplayName} failed.\"\n     }\n}\n```", "```\n    if (feature_toggle) {\n         // do something\n    }\n    ```", "```\n$ git checkout -b feature\n$ git push origin feature\n```"]