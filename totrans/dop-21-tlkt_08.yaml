- en: Using Docker Stack and Compose YAML Files to Deploy Swarm Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Copy and paste is a design error.
  prefs: []
  type: TYPE_NORMAL
- en: –David Parnas
  prefs: []
  type: TYPE_NORMAL
- en: The most common question I receive during my Docker-related talks and workshops
    is usually related to Swarm and Compose.
  prefs: []
  type: TYPE_NORMAL
- en: '*Someone*: How can I use Docker Compose with Docker Swarm?'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me*: You can''t! You can convert your Compose files into a Bundle that does
    not support all Swarm features. If you want to use Swarm to its fullest, be prepared
    for `docker service create` commands that contain a never ending list of arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: Such an answer was usually followed with disappointment. Docker Compose showed
    us the advantages of specifying everything in a YAML file as opposed to trying
    to remember all the arguments we have to pass to docker commands. It allowed us
    to store service definitions in a repository thus providing a reproducible and
    well-documented process for managing them. Docker Compose replaced bash scripts,
    and we loved it. Then, Docker v1.12 came along and put a difficult choice in front
    of us. Should we adopt Swarm and discard Compose? Since summer 2016, Swarm and
    Compose were not in love anymore. It was a painful divorce.
  prefs: []
  type: TYPE_NORMAL
- en: But, after almost half a year of separation, they are back together, and we
    can witness their second honeymoon. Kind of… We do not need Docker Compose binary
    for Swarm services, but we can use its YAML files.
  prefs: []
  type: TYPE_NORMAL
- en: '*Docker Engine v1.13* introduced support for Compose YAML files within the
    stack command. At the same time, *Docker Compose v1.10* introduced a new *version
    3* of its format. Together, they allow us to manage our Swarm services using already
    familiar Docker Compose YAML format.'
  prefs: []
  type: TYPE_NORMAL
- en: I will assume you are already familiar with Docker Compose and won't go into
    details of everything we can do with it. Instead, we'll go through an example
    of creating a few Swarm services.
  prefs: []
  type: TYPE_NORMAL
- en: We'll explore how to create *Docker Flow Proxy *([http://proxy.dockerflow.com/](http://proxy.dockerflow.com/))
    service through *Docker Compose* files and the `docker stack deploy` command.
  prefs: []
  type: TYPE_NORMAL
- en: Swarm cluster setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To setup an example Swarm cluster using Docker Machine, please run the commands
    that follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the commands from this chapter are available in the `07-docker-stack.sh` ([https://gist.github.com/vfarcic/57422c77223d40e97320900fcf76a550](https://gist.github.com/vfarcic/57422c77223d40e97320900fcf76a550))
    Gist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now we're ready to deploy the `docker-flow-proxy` service.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Swarm services through Docker stack commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll start by creating a network:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A note to Windows users**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might experience a problem with volumes not being mapped correctly. If
    you see an `Invalid volume specification` error, please export the environment
    variable `COMPOSE_CONVERT_WINDOWS_PATHS` set to `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`export COMPOSE_CONVERT_WINDOWS_PATHS=0`'
  prefs: []
  type: TYPE_NORMAL
- en: Please make sure that the variable is exported before you run `docker-compose`
    or `docker stack deploy`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `proxy` network will be dedicated to the `proxy` container and services
    that will be attached to it.
  prefs: []
  type: TYPE_NORMAL
- en: We'll use `docker-compose-stack.yml` ([https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml](https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml))
    from the `vfarcic/docker-flow-proxy` ([https://github.com/vfarcic/do](https://github.com/vfarcic/docker-flow-proxy)[cker-flow-proxy](https://github.com/vfarcic/docker-flow-proxy))
    repository to create `docker-flow-proxy and docker-flow-swarm-listener` services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of the `docker-compose-stack.yml` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The format is written in *version 3* (mandatory for `docker stack deploy`).
  prefs: []
  type: TYPE_NORMAL
- en: It contains two services; `proxy` and `swarm-listener`. Since you are already
    familiar with the `proxy`, I won't go into the meaning of each argument.
  prefs: []
  type: TYPE_NORMAL
- en: When compared with previous Compose versions, most of the new arguments are
    defined within deploy. You can think of that section as a placeholder for Swarm-specific
    arguments. In this case, we are specifying that the `proxy` service should have
    two replicas while the `swarm-listener` service should be constrained to manager
    roles. Everything else defined for those two services is using the same format
    as in earlier Compose versions.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the YAML file is the list of networks which are referenced
    within services. If a service does not specify any, the default network will be
    created automatically. In this case, we opted for manual creation of a network
    since services from other stacks should be able to communicate with the `proxy`.
    Therefore, we created a network manually and defined it as external in the YAML
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the stack based on the YAML file we explored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first command downloaded the Compose file `docker-compose-stack.yml` ([https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml](https://github.com/vfarcic/docker-flow-proxy/blob/master/docker-compose-stack.yml))
    from the `vfarcic/docker-flow-proxy` ([https://github.com/vfarcic/docker-flow-proxy](https://github.com/vfarcic/docker-flow-proxy))
    repository. The second command created the services that form the stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tasks of the stack can be seen through the `stack ps` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows (IDs are removed for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We are running two replicas of the `proxy` (for high-availability in the case
    of a failure) and one of the `swarm-listener`.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying more stacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's deploy another stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time we''ll use Docker stack defined in the Compose file `docker-compose-stack.yml` ([https://github.com/vfarcic/go-demo/blob/master/docker-compose-stack.yml](https://github.com/vfarcic/go-demo/blob/master/docker-compose-stack.yml))
    located in the `vfarcic/go-demo` ([https://github.com/vfarcic/go-demo/](https://github.com/vfarcic/go-demo/))
    repository. It is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The stack defines two services (`main` and `db`). They will communicate with
    each other through the default network that will be created automatically by the
    stack (no need for `docker network create` command). Since the main service is
    an API, it should be accessible through the `proxy`, so we're attaching `proxy`
    network as well.
  prefs: []
  type: TYPE_NORMAL
- en: The important thing to note is that we used the deploy section to define `Swarm-specific`
    arguments. In this case, the main service defines that there should be three replicas
    and a few labels. As with the previous stack, we won't go into details of each
    service. If you'd like to go into more depth of the labels used with the main
    service, please visit the *Running Docker Flow Proxy In Swarm Mode With Automatic
    Reconfiguration *([http://proxy.dockerflow.com/swarm-mode-auto/](http://proxy.dockerflow.com/swarm-mode-auto/))
    tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s deploy the stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We downloaded the stack definition, executed `stack deploy` command that created
    the services and run the `stack ps` command that lists the tasks that belong to
    the `go-demo` stack. The output is as follows (IDs and Error ports columns are
    removed for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Since Mongo database is much bigger than the main service, it takes more time
    to pull it, resulting in a few failures. The `go-demo` service is designed to
    fail if it cannot connect to its database. Once the `db` service is running, the
    main service should stop failing, and we'll see three replicas with the current
    state `Running`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a few moments, the `swarm-listener` service will detect the main service
    from the `go-demo` stack and send the `proxy` a request to reconfigure itself.
    We can see the result by sending an HTTP request to the `proxy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `proxy` was reconfigured and forwards all requests with the base path `/demo`
    to the main service from the `go-demo` stack.
  prefs: []
  type: TYPE_NORMAL
- en: To stack or not to stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker stack is a great addition to the Swarm Mode. We do not have to deal with
    `docker service create` commands that tend to have a never ending list of arguments.
    With services specified in Compose YAML files, we can replace those long commands
    with a simple `docker stack deploy`. If those YAML files are stored in code repositories,
    we can apply the same practices to service deployments as to any other area of
    software engineering. We can track changes, do code reviews, share with others,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The addition of the Docker `stack` command and its ability to use Compose files
    is a very welcome addition to the Docker ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the rest of the book, we'll use `docker service create` commands
    when exploring new services and `docker stack deploy` to create those we are already
    familiar with. If you have trouble converting `docker service create` commands
    into stacks, please take a look at the `vfarcic/docker-flow-stacks` ([https://github.com/vfarcic/docker-flow-stacks](https://github.com/vfarcic/docker-flow-stacks))
    repository. It contains the stacks from some of the services we'll use. I expect
    you to contribute with the stacks you use. Please fork the repository and make
    a pull request. If you have trouble making a stack, please open an issue
  prefs: []
  type: TYPE_NORMAL
- en: Cleanup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please remove Docker Machine VMs we created. You might need those resources
    for some other tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
