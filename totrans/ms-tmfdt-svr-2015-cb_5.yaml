- en: Chapter 5. Testing Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"Walking on water and developing software from a specification are easy…If
    both are frozen!"* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Edward Berard* |'
  prefs: []
  type: TYPE_TB
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Running NUnit tests in the CI Pipeline using TFBuild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and setting up a Machine Group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a test agent through the TFBuild task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributing test execution on a Lab Machine Group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering Selenium Web Tests on a Selenium Test Grid using TFBuild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the Cloud Load Testing Service in TFBuild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing test execution results from the Runs view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting and importing test cases in Excel from TFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copying and cloning test suites and test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting test artifacts and test results from the test hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charting testing status on Dashboards in Team Portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software teams are constantly under pressure to deliver more… faster. End users
    expect software to simply work. Low quality software just isn't acceptable. But,
    you may ask what the right level of quality is? Quality is a very subjective term;
    it is therefore important for Teams to agree to a definition of quality for their
    software. Teams that are unable to define quality usually end up testing for coverage
    rather than testing for quality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The toolkit in Team Foundation Server provides tooling for both manual and
    automation testing. **Microsoft Test Manager** (**MTM**), first introduced with
    TFS 2010, enables testers to plan, track, and run manual, exploratory, and automated
    tests. While Test Manager fully integrates with TFS, it does not offer any integration
    with other testing platforms. The Test Manager architecture does not lend itself
    to extensibility. Microsoft has ambitions to support every developer and every
    app; however, it isn''t possible with tooling that can''t be run on non-window
    platforms. The test tooling is gradually moving out from the Test Manager client
    into the web-based Team Web Portal to enable extensibility, cross-platform availability,
    and integration with other testing platforms. The following screenshot provides
    a comparison of testing features already in test hub, those that will gradually
    move, and those that will remain in MTM. For a full comparison of all the features,
    download `Microsoft Test Manager Vs Test Hub Feature Comparison.png` from the
    course material:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00651.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To speed up the software delivery loop, software testing needs to be incorporated
    into the **Continuous Integration** (**CI**) Pipeline. In order to do this, software
    testing needs to shift left in the development processes. **Test-driven development**
    (**TDD**) enables developers to write code that's maintainable, flexible, and
    easily extensible. Code backed by unit tests helps identify change impact and
    empowers developers to make changes confidently. In addition to this, functional
    testing needs to be automated. This enables software testers to focus on high-value
    exploratory testing rather than just coverage of test matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'The DevOps movement at large supports bringing testing into the CI Pipeline.
    The tooling in TFS has evolved to enable this. The pre 2015 version of TFS shipped
    with a separate test controller and test agent, with the introduction of the new
    build framework in TFS 2015 test runner has been distilled down to a task in the
    build definition. TFS now provides a task based open and extensible build framework
    that allows you to pick not only a build framework of your choice, but also provides
    you full autonomy to pick and assemble the test frameworks of your choice too.
    The new build system enables the agent to be a generic task orchestrator. The
    agent is capable of executing the entire CI Pipeline. This new approach removes
    the need for managing multiple single purpose agents. This takes away the friction
    from the setup process and enables a scale up option without the need for tedious
    configuration. This also enables integrating other testing frameworks and platforms
    into the same pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00652.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Through the recipes in this chapter, you'll learn how to leverage tasks in the
    build definition to provision test agents on demand, perform a distributed test
    execution that includes a large number of diverse automated tests such as unit,
    functional UI, Selenium and, coded UI on remote Machine Groups. We'll also look
    at integrating with Visual Studio Team Systems to run cloud load tests. Last but
    not least, we will look at the rich test reports and test result analysis from
    the test executions.
  prefs: []
  type: TYPE_NORMAL
- en: Look at the richness of testing features within the bigger DevOps capabilities
    available in TFS; should you decide to move from your existing Test Case Management
    Solutions to the Microsoft Test Manager, you may wonder what the possibilities
    for migration are. We'll briefly cover a few tools that are available today to
    help you with the migration. In the end, we'll look at how to export and visualize
    test execution results with the help of light weight charts.
  prefs: []
  type: TYPE_NORMAL
- en: Along with providing world-class tooling for manual and automation testers,
    TFS also provides rich, integrated test tooling to stakeholders. The web-based
    testing extension allows you to perform exploratory testing of your web or mobile
    application right from the browser on any platform (Windows, Mac, or Linux). Your
    stakeholders now do not need to follow predefined test cases or test steps. Stakeholders
    can capture and annotate screenshots, log bugs, and share notes. The testing session
    records and logs every step providing developers rich action logs for diagnosing
    application and user experience issues. Read more on this at [http://bit.ly/1I82pfK](http://bit.ly/1I82pfK).
  prefs: []
  type: TYPE_NORMAL
- en: These investments are taking the testing tooling from good to great. It is a
    very exciting time to be in the testing space!
  prefs: []
  type: TYPE_NORMAL
- en: Running NUnit tests in the CI Pipeline using TFBuild
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditionally, developers using the NUnit framework had to install the NUnit
    Test Adapter on the build machines. While this approach worked if you were dealing
    with a small number of build servers, it quickly became tedious when dealing with
    large number of build servers. An alternative to installing the NUnit adapter
    was to inject the NUnit adapter DLLs to the build machines using the custom assembly
    field available in the build controller properties. While this worked with TFVC-based
    repositories, there were challenges using this approach for Git-based repositories.
    This is a classic example of configuration hell when using non-Microsoft testing
    frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: The new build framework makes running non-Microsoft unit test frameworks completely
    configuration free. In this recipe, you'll learn how to use the Visual Studio
    Test task in the build definition to run NUnit tests or generally any non-Microsoft
    unit testing frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to create a build definition, you'll need to be a member of the Project
    Build Administrator Group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch Team Explorer and connect to the FarbikamTFVC Team Project. From the
    Source Control Explorer, open the `FabrikamFiber.CallCenter.sln` in Visual Studio:![How
    to do it...](img/image00653.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions at [http://bit.ly/1XgG0UG](http://bit.ly/1XgG0UG) to
    create a new NUnit test project. Call the project `FabrikamFiber.Web.NUnit.Tests.csproj`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `FabrikamFiber.Web.NUnit.Tests.csproj` project and select
    **Manage NuGet Packages...** from the context menu:![How to do it...](img/image00654.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the NuGet package manager, search and install the NUnit test adapter.![How
    to do it...](img/image00655.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the folder location of the solution and you'll notice that the `NUnitTestAdapter
    NuGet` package has been added under the packages folder:![How to do it...](img/image00656.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check in the code changes from the **Pending Changes** view in Team Explorer:![How
    to do it...](img/image00657.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the FabrikamTFVC Team Web Portal, navigate to the **BUILD** hub and click
    on the **+** icon to add a new build definition. Create it using Visual Studio
    Build Template:![How to do it...](img/image00658.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Visual Studio Build Task, ensure that the **Restore NuGet Packages**
    flag is checked. You don't need to make any other changes in the build or test
    task. Ensure that the code repository is mapped as FabrikamTFVC in the repository
    tab. Save the build definition as `FabrikamTFVC NUnit CI`. You can learn more
    about setting up a build definition in the *Creating a continuous integration
    build definition in TFBuild* recipe in [Chapter 4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building
    Your Application"), *Building Your Application*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Queue a build. Once the build completes, you will see a summary of the test
    results in the build summary section. The build successfully executes all NUnit
    tests without any manual configuration specific to NUnit:![How to do it...](img/image00659.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now understand how TFBuild manages to identify the test runner for NUnit
    tests. Open the FabrikamTFVC NUnit CI build definition. In the **Advanced** section
    of the Visual Studio Test task, you''ll see a field for specifying the path to
    custom adapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/image00660.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With the restore NuGet packages flag checked in the Visual Studio Build task,
    all NuGet packages that the solution has dependency on are downloaded into the
    agent's working directory. The Visual Studio Test task scans the agent working
    directory for all test adapter packages. In this instance, the NUnit Test Adapter
    NuGet package was checked into source control. The package would have been restored
    into the agent working directory during the package restore process; as a result
    the Visual Studio Test task loaded up the NUnit Test Adapter during the scan.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TFBuild publishes the test and coverage results into TFS independent of the
    testing framework used. This is automatically handled by the TFBuild framework.
  prefs: []
  type: TYPE_NORMAL
- en: This approach scales really well, as you add more machines to carry out testing,
    you do not need to worry about manually adding the NUnit Test Adapter on the test
    machines. This also simplifies upgrading test adapters. The test task can load
    multiple versions of one test adapter and use the adapter referenced by the unit
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Path to Custom Test Adapters** field wasn''t really put to use in this
    case. However, this field is useful for specifying the test adapter path if your
    solution uses a unit test framework that does not have a NuGet package associated
    with it. The path to the test adapter needs to be constructed using the build
    agent''s source directory variable. The `Build.SourceDirectory` variable points
    to the directory in the build agent where the source code has been synced. If
    your custom test adapter was in the `$\FabrikamTFVC\myAdapters` folder, you would
    need to specify the path: `$(Build.SourcesDirectory)\src\myAdapters\TestAdapter.1.2`.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and setting up a Machine Group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simply put, Machine Group is a logical grouping of machines. The Machine Group
    holds metadata, connectivity, and login details of the machines in the group.
    Machine Group can directly be referenced from build and release definitions. In
    this recipe, you'll learn how to create and set up a Machine Group.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team has a lab environment in the `Fabrikam.lab`
    domain. `Fabrikam.lab` comprises of five servers that serve different roles. The
    FabrikamTFVC Team wants the ability to directly reference these machines from
    the build definition and release definition to deploy test agents on all the machines
    and trigger a distributed test run. `Fabrikam.Lab` is managed by the Fabrikam
    Environments Team who cannot share environment credentials with the FabrikamTFVC
    Team. In this recipe, we''ll walk through the process followed by the Fabrikam
    Environments Team to set up and configure the Machine Group `Fabrikam-QA` for
    the FabrikamTFVC Team:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00661.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Machine Group will be accessed by a remote host; the remote host will likely
    be playing the role of a build agent or release agent. As illustrated in the following
    figure, the remote host is in the same network as the Machine Group and has a
    trust relationship with the Machine Group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00662.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The build agent uses Windows PowerShell remoting that requires the **Windows
    Remote Management** (**WinRM**) protocol to connect to the machines in the Machine
    Groups. WinRM needs to be enabled on a machine as a prerequisite before it can
    be added into the Machine Group. In this case, Kerberos will be used as the mode
    of authentication since the agent and Machine Group are in the same corp network.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Target Machine state** | Target Machine trust with automation agent | Machine
    Identity | Auth Account | Auth Mode | Auth Account permission on target machine
    | Conn Type |'
  prefs: []
  type: TYPE_TB
- en: '| **Domain-joined machine in the corp network** | Trusted | DNS name | Domain
    account | Kerberos | Machine admin | WinRMHTTP |'
  prefs: []
  type: TYPE_TB
- en: 'In the next few steps, we''ll walk through how to configure WinRM on a machine,
    and you''ll learn how to test connectivity through WinRM:'
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell 2.0 and Windows Management Framework 4.0 ([http://bit.ly/1kNlxuW](http://bit.ly/1kNlxuW))
    are required to be installed on both the agent and machines in the Machine Group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log into the `QA-Web1.Farbikam.lab` machine, start Windows PowerShell as an
    administrator by right-clicking on the Windows PowerShell shortcut and selecting
    **Run as Administrator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By default, the WinRM service is configured for manual startup and stopped.
    Executing the `winrmquickconfig -q` command performs a series of actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starts the WinRM service.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Sets the startup type on the WinRM service to **Automatic**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Creates a listener to accept requests on any IP address.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enables a firewall exception for WS-Management communications.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Registers the `Microsoft.PowerShell` and `Microsoft.PowerShell.Workflow` session
    configurations, if they are not already registered.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Registers the `Microsoft.PowerShell32` session configuration on 64-bit computers,
    if it is not already registered.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enables all session configurations.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Changes the security descriptor of all session configurations to allow remote
    access.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Restarts the WinRM service to make the preceding changes effective.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The next few commands will prepare WinRM for Kerberos authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Increase the maximum memory allocation per session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, increase the session timeout period:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Allow the traffic between agent and Machine Group to be unencrypted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Disable basic authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Setup a firewall exception to allow inbound traffic on port `5985`; this is
    the default port used by WinRM when using HTTP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Disable digest for client authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set service authentication to use Kerberos:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Trust all connections between agent and Machine Group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the `win-rm` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To ensure Kerberos authentication is enabled on WinRM, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Getting ready](img/image00663.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now, let''s validate whether WinRM has correctly been set up on `QA-Web1.Fabrikam.lab`.
    Log into another VM in the lab, in this case `QA-Web2.Fabrikam.lab`. Launch PowerShell
    as an administrator by right-clicking on the Windows PowerShell shortcut and selecting
    **Run as administrator**. Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Getting ready](img/image00664.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Execute the following command to check the port WinRM is listing on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Getting ready](img/image00665.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Execute the following command should you want to change the port WinRM is currently
    configured to listen on:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Most importantly, validate that you are able to invoke the Pssession on `QA-Web1.Fabrikam.lab`
    by manually running the following command from `QA-Web2.Fabrikam.lab`. Once you
    execute the first statement, you''ll receive a prompt to enter your credentials.
    Enter your domain account that has admin permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Executing the next command will use your domain account to connect to the destination
    server; DNS will be used to resolve the destination name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Getting ready](img/image00666.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Follow steps 1 to 5 to configure WinRM on other machines in the lab. Follow
    step 6 to validate WinRM connectivity before moving forward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigating to the test hub in the FabrikamTFVC Team Web Portal, on the **Machines**
    page, click on the **+** icon to create a new Machine Group:![How to do it...](img/image00667.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the details as illustrated in the following screenshot:![How to do it...](img/image00668.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The WinRM protocol in `Fabrikam.lab` will use HTTP since the remote machine
    has a trust relationship with `Fabrikam.lab.Add` and the details for all the machines.
    Now, click on **Done** to complete the setup:![How to do it...](img/image00669.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Fabrikam-QA Machine Group setup uses a common administrator credentials
    for all machines in the Machine Group. It is alternatively possible to specify
    different credentials for the individual machines added in the Machine Group:'
  prefs: []
  type: TYPE_NORMAL
- en: To enter credentials per machine, check the option **Use custom credentials
    for each machine along with global credentials**.![How it works...](img/image00670.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The password field is masked in the user interface. In addition to this, the
    value of this field is not printed in any of the log files either.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tags provide a great way to query for machines with in the Machine Group.
    For example, when using the test agent deployment task in build definition, you
    can specify a Machine Group and use Tags to filter the execution of the action
    on machines that include the Tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Machine Groups, at the moment, support limited scenarios mainly domain joined
    on premise machine and standalone machines in Azure. Refer to [http://bit.ly/1NFqYma](http://bit.ly/1NFqYma)
    for a full list of supported scenarios.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying a test agent through the TFBuild task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous versions of TFS, the test controller and agent used to ship as separate
    installers. While the installers supported unattended installation, the configuration
    needed manual intervention. This limited the ability to scale out the test agents
    on demand. In TFS 2015, the test controller and agent do not ship as separate
    installers; instead, the capability offered by the test agent has been distilled
    into one build task. In this recipe, you'll learn how to deploy a test agent on
    multiple machines in a Machine Group.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team has a dependency on the cucumber framework,
    since cucumber conflicts with the existing framework on the build agent, it cannot
    be installed on the build agent. The FabrikamTFVC Team instead wants the test
    agent to be deployed on the `QA-App1.Fabrikam.lab` server. This server is already
    part of the Fabrikam-QA Machine Group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00671.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we'll be using the Fabrikam-QA Machine Group. If you don't already
    have Machine Group set up, follow the instructions in the recipe *Creating and
    setting up a Machine Group*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigating to the test hub in the FabrikamTFVC Team Web Portal, in the **Machine**
    page, edit the Fabrikam-QA Machine Group. Append the Tag `Framework: Cucumber`
    for the machine `QA-App1.Fabrikam.lab` and save.![How to do it...](img/image00672.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the build hub and create a new build definition using the empty
    build template. Ensure that the code repository is mapped as FabrikamTFVC in the
    repository tab. Add the **Visual Studio Test Agent Deployment** task from the
    test section. The task comprises of three sections; configure the Fabrikam-QA
    Machine Group, select the machine by machine names or tags, and filter the machine
    using the Tag `Framework:Cucumber`:![How to do it...](img/image00673.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Agent Configuration** section accepts the credentials and the test agent
    service will run under it once installed. Create a variable for the test agent
    username and the test agent password from the **Variables** tab. Add the variables
    to the **Agent Configuration** section. Check the **Interactive Process** option
    to run the agent as an interactive process. The agent is installed as a Windows
    service if it's not requested to be run as an interactive process:![How to do
    it...](img/image00674.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Advanced** section allows you to specify the location for the installer
    of the test agent. This is useful if you want to control the version of the agent
    getting installer. In the absence of a location, the latest version of the test
    agent is downloaded from the Internet. Check the option to enable data collection:![How
    to do it...](img/image00675.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the build definition as `FabrikamTFVC Agent Deployment`. Queue a new build
    from this build definition. Once the build is complete, navigate to the `QA-App1.Fabrikam.lab`
    server. The test agent has successfully been installed as a Windows service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The build agent downloads the test agent installer from the Internet into a
    `temp` location. The installer is then pushed for installation into the remote
    `QA-App1.Fabrikam.lab` machine:![How it works...](img/image00676.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The agent is installed as a Windows service on the machines in the Machine Group:![How
    it works...](img/image00677.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Distributing test execution on a Lab Machine Group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this chapter, you learned how to create a Machine Group and deploy
    the test agent on selected machines in the Machine Group. The TFBuild framework
    ships a task to distribute the test execution across multiple test agents. In
    this recipe, you'll learn how to trigger a distributed test run across a farm
    of test runners deployed in a Machine Group.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team has over 2,000 automated coded UI tests that
    need to be executed as part of the functional testing workflow. FabrikamTFVC Team
    would like the ability to parallelize the test execution. In order to do this,
    the Team wants to deploy the Visual Studio test agent to all machines in the Fabrikam-QA
    Machine Group and then parallelize by distributing the test execution at the test
    assembly level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00678.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, you'll be using the Fabrikam-QA Machine Group. If you don't
    already have Machine Group set up, follow the instructions in the *Creating and
    setting up a Machine Group* recipe. Since test agents need to be deployed as a
    prerequisite to the distribution of the tests, follow the steps in the *Deploying
    a test agent through the TFBuild task* recipe to learn how TFBuild can be used
    to deploy the test agent in a Machine Group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigating to the build hub in the FabrikamTFVC Team Web Portal, click on **Edit**
    to open `FabrikamTFVC Agent Deployment` in edit mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **+** to add a build step and from the **Add Task** window, select
    the **Build** tab and add the Visual Studio Build task. This task will be used
    to compile the test projects:![How to do it…](img/image00679.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Deploy** tab, add the **Windows Machine File Copy** task. This task
    will copy the test assemblies across to the machines the test need to be executed:![How
    to do it…](img/image00680.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Test** tab, add the **Visual Studio Test using Test Agent** task.
    This task will be used to manage the test distribution across the farm of test
    agents:![How to do it…](img/image00681.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on close icon to close the **Add Task** window. The tasks in the build
    definition need to be ordered as:![How to do it…](img/image00682.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the Visual Studio Build task to build the solution the functional
    tests are part of:![How to do it…](img/image00683.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the Windows Machine File Copy task to copy the test assemblies into
    a directory on the machines in the Machine Group. It is always recommended to
    parameterize the test locations with configuration variables. The preconfigured
    build variables can be used to construct the path to the assemblies on the build
    agent working folder that need to be copied across. If the **Clean Target** flag
    is checked, the build engine will delete the contents of the destination folder
    before copying the new files. The advanced section in this task also includes
    a flag to enable copying files in parallel and use this flag to allow the build
    system to copy the binaries across the machines on the Machine Group in parallel:![How
    to do it…](img/image00684.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No changes need to be made to the Visual Studio test agent deployment task.
    The configuration set up in the *Deploying a test agent through the TFBuild task*
    recipe will carry out the test agent deployment across all machines in the Machine
    Group. The Visual Studio Tests using test agent task should immediately follow
    this task. Select the Fabrikam-QA Machine Group as the destination Machine Group,
    where the tests need to be executed. In addition to this, specify the test binaries
    location, the pattern of the test assemblies, the configuration, and the platform
    the tests need to be executed in. Check the code coverage flag in the **Advanced**
    section. You can inject the test settings file to optionally override the configuration
    in the test settings file through the **Override Test Run Parameters** field:![How
    to do it…](img/image00685.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the changes to the build definition and queue a new build. Once the build
    completes, navigate to the build summary page; the logs for the Visual Studio
    Tests using test agent step shows the details of the test distribution:![How to
    do it…](img/image00686.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's look at the log files of the Visual Studio Test using a test agent task
    through the build summary. As illustrated in the preceding screenshot, the test
    DLLs have been distributed to multiple test agents in the group. The distribution
    is done at a DLL level rather than a test level. The test distribution significantly
    reduces the execution time if your tests are in multiple projects since each DLL
    is distributed to a test agent to execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also worth noting that the Windows Machine File Copy task successfully
    moves the files from the agent working directory across to the `C:\Fabrikam\FunctionalTests\$(Build.BuildNumber)`
    folder in the Machine Group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00687.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You'll learn more about the Windows Machine File Copy task in [Chapter 6](part0074.xhtml#aid-26I9K1
    "Chapter 6. Releasing Your Application"), *Releasing Your Application*, as it'll
    be used extensively for deployments in release management.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering Selenium Web Tests on a Selenium Test Grid using TFBuild
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The cost of testing can significantly increase if your software needs to support
    multiple devices and browsers. The rise in client-side scripting frameworks and
    responsive design technologies enable each browser to offer a unique immersive
    user experience. With the matrix of devices and browsers rapidly increasing, it
    is virtually impossible to cover the matrix with manual testing. There are a number
    of commercial and open source tools available for assisting with the development
    of test automation. Selenium is possibly the most widely used open source solution.
    TFS works better together with open source tools. In this recipe, you'll learn
    how to execute Selenium Tests from TFBuild.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamGit Team has automated functional tests using Selenium.
    The Team now wants to validate the functionality by running the tests in Chrome,
    Firefox, and Internet Explorer. The FabrikamGit Team would like to trigger the
    execution of these tests on a Selenium grid via TFBuild.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00688.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Follow the instructions in the blog post at [http://bit.ly/1PSjfWy](http://bit.ly/1PSjfWy)
    to set up a Selenium grid on a Windows machine. For the purposes of this recipe,
    we''ll follow a simple setup that comprises of both the Selenium hub and node
    on the same machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00689.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The course material provided with this book includes a Selenium Test Project.
    Download the `SeleniumHelloWorld.zip` folder; alternatively, you can use your
    own Selenium Test Project. Commit and publish `Selenium.Web.Test.sln` into the
    master branch in the FabrikamGit repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00690.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: More information on how to commit and publish changes to a Git repository is
    available in the introduction section of [Chapter 2](part0027.xhtml#aid-PNV62
    "Chapter 2. Setting Up and Managing Code Repositories"), *Setting Up and Managing
    Code Repositories*. The SeleniumHQ website ([http://bit.ly/1YmqRDJ](http://bit.ly/1YmqRDJ))
    includes great C# tutorials for authoring Selenium Tests.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the FarbikamGit Team Web Portal, navigate to **Build** hub. Click on the
    **+** icon to add a new build definition. Select the Visual Studio Build Template
    and click on **Create**. Navigate to the **Repository** tab in the build definition
    and map the repository to the master branch of the FabrikamGit repository:![How
    to do it…](img/image00691.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the build definition navigate to the **Build** tab, select the **Visual Studio
    Build** task. Set the name of the solution containing the Selenium Test Project.
    Ensure that the **Restore NuGet Packages** flag is checked:![How to do it…](img/image00692.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Visual Studio Test task, enter the path to the test settings file,
    and inject the URL of the Selenium grid via the **Override TestRun Parameters**
    field:![How to do it…](img/image00693.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the build definition as `FabrikamGitSelenium`. Queue a new build for this
    definition. Once the build execution completes, you can see the test results from
    the build summary view:![How to do it…](img/image00694.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by understanding why the Selenium grid URL was injected in the
    Visual Studio Test task via the **Override TestRun Parameters** field. The solution
    contains Selenium Test Project and a `Run` settings file. This is the configuration
    file holding test settings used by the Test Project. The new build system provides
    the ability to overwrite the values in the `Test` settings file by directly passing
    the values through the **Override TestRun Parameters** field, in this specific
    case, the value of `SeleniumTestGridURL`. This value is used by the Selenium Test
    to execute the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00695.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s look at the build execution log file for this task; this provides
    a clear summary of the test executed, duration, and update on the result publishing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00696.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Last but not least, the TFBuild system automatically handles the publishing
    of test results back to the TFS, independent of the testing framework used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00697.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, the Selenium Test Project execution
    results can directly be viewed in the build summary section.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating the Cloud Load Testing Service in TFBuild
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"Tests at Amazon revealed: every 100 ms increase in load time of Amazon.com
    decreased sales by 1% (Kohavi and Longbotham 2007)."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Performance Testing can't be an afterthought! Mature software teams test for
    performance early in the development life cycle. The biggest entry barrier to
    performance testing is the high cost and low utilization of infrastructure required
    to generate sufficient load on the application. Today, a wide range of pay-as-you-go
    Cloud Load Test Services are available. Microsoft also offers a Load Test Service
    with Visual Studio Team Services. Each VSTS account receives 20,000 virtual user
    minutes of Load Test Quota free every month. In this recipe, you'll learn how
    to integrate the VSTS Cloud Load Test Service into your CI Pipeline in TFS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio Team Services is free for Teams of up to five people. You can
    create a free account at [http://bit.ly/1lANwhA](http://bit.ly/1lANwhA). In this
    recipe, we'll be using the account [https://tfs2015cookbook.visualstudio.com](https://tfs2015cookbook.visualstudio.com).
  prefs: []
  type: TYPE_NORMAL
- en: For TFS to authenticate with the VSTS account using your identity, you will
    need to generate a personal access token in the VSTS account. Follow the instructions
    at [http://bit.ly/1I3kzVk](http://bit.ly/1I3kzVk) to generate a personal access
    token.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the Cloud Load Test service in VSTS and personal access token,
    the Cloud Load Test service needs to be added as an endpoint in TFS. Adding an
    endpoint in TFS requires that you have **Edit project level information** permissions.
    You can acquire this permission by being added to the Team Project Administrator
    Group. Follow the instructions here to add the Cloud Load Test Service endpoint
    to TFS.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to FabrikamTFVC Team Administration Console. In the **Services** tab,
    click on the **+** icon to add a new endpoint. Select the **Generic** endpoint
    option and fill out the details as illustrated in the following screenshot. Name
    the endpoint `CLD-VSTS`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00698.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Build** hub in the FabrikamTFVC Team Web Portal. Edit the
    FabrikamTFVC CI build definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon to launch the **Add New Task** window. From the **Test**
    tab, select and add the **Cloud-based Web Performance Test** task:![How to do
    it…](img/image00699.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Cloud Load Test Service was added as a generic endpoint in the Fabrikam
    Team Administration Console. Select the `CLD-VSTS` endpoint from the registered
    connection dropdown. Enter the endpoint you would like to run the test against.
    Specify the location to generate the load from:![How to do it…](img/image00700.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** and trigger queue a new build. Once the build execution completes,
    the results of the load test execution is available as part of the build result:![How
    to do it…](img/image00701.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can start to load test your application with simple configuration. It is
    easy to get started and utilize the free Cloud Load Test Virtual User Minutes
    available in your VSTS account. TFBuild also includes a Cloud-based Load Test
    task that allows you to run multistep performance tests.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing test execution results from the Runs view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Team Foundation Server 2015, the test execution results of both manual and
    automated testing are surfaced in the **Runs** page. This page is a new addition
    to the **Test** hub in Team Web Portal. The **Runs** page offers a unified experience
    for analyzing the results of test executed using any framework. In this recipe,
    you'll learn how to analyze and action the test execution results in the **Runs**
    view in Team Web Portal.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Test** hub and click on **Runs** to load the **Runs** page.
    The **Runs** page displays the recent test runs. At first glance, you can see
    the test execution status, test configuration, build number, number of failed
    tests, and the pass rate:![How to do it...](img/image00702.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Filters** view by clicking on the **Filters** tab. The query
    is defaulted to display the test runs from the last 7 days. Amend and add new
    clauses to show only the automated test runs for today:![How to do it...](img/image00703.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The query narrows down the test execution results to just one run:![How to do
    it...](img/image00704.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on test run ID to open the test run for analysis. This view shows
    the run summary along with charts to visualize the test results by properties,
    traits, configuration, failures types, and resolution. Any attachments associated
    to the test run are also available in this view:![How to do it...](img/image00705.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Test results** tab to see the list of all tests executed as
    part of this test run. Prior to TFS 2015, you would have had to download the TRX
    file and open it in Visual Studio to get to this information. This view provides
    the next level of detail among other things. You can see the test execution duration
    and failure error messages:![How to do it...](img/image00706.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select multiple tests and click on **Create Bug** to create a bug-type Work
    Item. Clicking on **Update Analysis** lets you add comments to the test results.
    You can also double-click on a test to go the next level of detail on its test
    execution:![How to do it...](img/image00707.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This functionality gives you a unified test analysis experience irrespective
    of the framework you choose to execute your tests in. In summary, you can query
    all test runs available in your Team Project, drill down into a specific test
    run to get a summary view of that run, visualize test runs using charts, query/filter
    the test results within a run, drill down to a specific test result, download
    attachments, and last but not least, analyze test failures and file bugs.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting and importing test cases in Excel from TFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While test cases in TFS can be accessed from Microsoft Test Manager as well
    as Team Web Access, you may still find stakeholders wanting to access the test
    cases from Excel. As a matter of preference, a few of your stakeholders may find
    it easier to document test cases in excel. While TFS does not offer an out-of-the-box
    feature to export and import test cases in Excel, it offers a good **Software
    Development Kit** (**SDK**) that can be used to create tools that enable such
    functionality. In this recipe, you'll learn how to use "test case export to excel"
    and "Test Case Migrator Plus (open source community tools)" to export test cases
    into Excel and import test cases from Excel into TFS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Download and install the following utilities on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Test case** **export utility**: [https://tfstestcaseexporttoexcel.codeplex.com](https://tfstestcaseexporttoexcel.codeplex.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test case** **import utility**: [http://tcmimport.codeplex.com](http://tcmimport.codeplex.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll need elevated permissions to install these utilities. The machine where
    these utilities are installed needs a version of Excel installed. These utilities
    do not need to be installed on the TFS application tier.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exporting test cases from TFS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On starting the **Test Cases Export** utility, you'll be prompted to connect
    to TFS. Once connected, you'll see a list of test plans and test suits associated
    to that plan. Select the test suite and the file location for export and fill
    out the export output location and filename as illustrated in the following screenshot:![Exporting
    test cases from TFS](img/image00708.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The export process gives you the following options:![Exporting test cases from
    TFS](img/image00709.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Export Each Test Suite into Separate Sheets** option to export
    each test suite into a separate sheet. In the preceding example, regression pack,
    payments, and website will be exported in three separate sheets in the workbook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the export completes, open the spreadsheet from the export location to
    view the results of the export.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing test cases from TFS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Start the **Test Case Migrator Plus** utility to launch the test case import
    wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the data source from the **Source** tab. The input format can either
    be **Excel Workbook** or **MHT/Word**. In this recipe, we'll be using the input
    source format as **Excel Workbook**. Key in the output folder location. Once the
    workbook has been parsed, you'll see the list of columns in the selected worksheet.
    Click on **Next** to configure the **Destination** settings:![Importing test cases
    from TFS](img/image00710.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Destination** tab, enter the destination details such as Team Project
    and Work Item type to import the test cases to. From the **Settings** tab, choose
    to create a new settings file and click on the **Next** button (the settings file
    will persist your selections for future imports). From the **Field** mapping tab,
    map the columns in the spreadsheet to the Work Item. For example, the **Title**
    field in the spreadsheet maps to the title field of the Work Item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Links mapping** tab, you can optionally enable linking between Work
    Items using the **Miscellaneous** tab to specify how the data is read from the
    source Excel file. Click on **Save and Migrate** to start the migration process
    based on the settings configured through the wizard. This will trigger the import
    process; progress on the update is shown on the user interface:![Importing test
    cases from TFS](img/image00711.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the import has been completed, exit the wizard by clicking on the **Close**
    icon button. The import utility processes the worksheet and generates a report
    in the same location as the source worksheet. The import settings file is also
    generated in the same location. The import settings file stores the settings specified
    during the import process. The settings file can be used for future imports:![Importing
    test cases from TFS](img/image00712.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Report.xls` file and all successfully imported test cases will be
    listed in the **Passed** sheet. Any test cases that have issues during import
    will be listed in the warning sheet, and any test cases that couldn't be imported
    will be listed in the failed sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To view the imported test results, navigate to the FabrikamTest hub in Team
    Web Portal. You'll see the new plans appear in the test plan dropdown. The following
    screenshot illustrates a test suite and a linked test case in Team Web Portal:![Importing
    test cases from TFS](img/image00713.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This, by no means, is a Test Case Migration solution, but it is worth pointing
    out that if you are using other Test Case Management tools that support extracting
    test cases into Excel, you could use these tools to import the artifacts into
    TFS.
  prefs: []
  type: TYPE_NORMAL
- en: There is more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While we are on the subject of test suites, it is worth highlighting that TFS
    2015 now supports assigning multiple people to a test suite. This capability can
    be invoked by right-clicking on a test suite in test hub and choosing **Assign
    Individuals** from the context menu. As illustrated in the following screenshot,
    the new form allows assigning multiple testers to the test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There is more](img/image00714.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will iterate through the test suite and create test cases for each individual.
    An e-mail with the link to the test cases is e-mailed out to the individuals.
    This is a great way to enable multiple individuals to test using the same test
    suite, giving you the ability to track the test activity of each individual in
    isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Copying and cloning test suites and test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TFS offers two types of copy operations for test suites and test cases, namely,
    **copy** and **clone**. Copy uses a mechanism called shallow copy that simply
    creates a reference to the artifact. If any amendment is made to the artifact,
    it reflects into all its references. Clone uses a mechanism called deep copy;
    the new artifacts have no reference back to its origin and is not impacted by
    any updates made to the original artifact. A common scenario for using shallow
    copy is when testing using the same scripts across multiple iterations. On the
    other hand, a common scenario for deep copy is creating a regression test script
    by copying several existing test suites and test cases. In this recipe, you'll
    learn how to use the copy and clone functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we'll be using Microsoft Test Manager. Microsoft Test Manager
    is installed with Visual Studio Enterprise or Visual Studio Test Professional.
    Launch Microsoft Test Manager and connect to the FabrikamTFVC Team Project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copying (shallow copy)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Microsoft Test Manager, from the **Plan** tab, select a static test suite
    that will hold the new copy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the toolbar, click on the **Create test suites by referencing existing
    test cases** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the dialog, select the test plan and test suites that you want to copy
    and click on **Create Suite**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone (deep copy)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Microsoft Test Manager, from the **Organize** tab, select a test plan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the toolbar, click on the **Clone** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the dialog, select one or more test suites that you want to clone. You
    can optionally choose to clone requirements that are associated with the selected
    test suite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the destination test plan and set the associated Area Path
    and Iteration Path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Clone** button to trigger the clone operation. The clone
    log appears showing updates of the clone process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Cloning test cases is supported between Team Projects, but only in the same
    Team Project Collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also use the `/clone` switch with `tcm.exe` from command line to clone
    test cases and test suites. In the following sample, you''ll notice that the `/clone`
    requirements is being used to clone the requirements. The value of the field Area
    Path and Iteration Path in the destination will be overridden with the specified
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you clone a test suite, the following objects get copied from the source
    test plan to the destination test plan:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Test plan object | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Test case | Each new test case retains its shared steps. A link is made between
    the source and new test cases. The new test cases do not have test runs, bugs,
    test results, and build information. |'
  prefs: []
  type: TYPE_TB
- en: '| Shared steps referenced by cloned test cases | Any shared steps referenced
    by the source test cases are maintained in the cloned test cases at destination.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Test suite | The following data is retained:'
  prefs: []
  type: TYPE_NORMAL
- en: Names and hierarchical structure of the test suites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order of the test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigned testers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Action recordings linked from a cloned test case | Any action recording links
    are maintained in the clone test case. |'
  prefs: []
  type: TYPE_TB
- en: '| Links and attachments | Any links and attachments in the source are also
    available in the cloned test case. |'
  prefs: []
  type: TYPE_TB
- en: '| Test configuration | The test configuration is reapplied in the destination
    test plan. |'
  prefs: []
  type: TYPE_TB
- en: Exporting test artifacts and test results from the test hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TFS test artifacts comprise of test plans, test suites, and test cases, and
    of course, test results. It is common to have to export the test artifacts for
    purposes of sharing and reporting. Back in the days of TFS 2013 Test Scribe delivered
    as a Visual Studio Extension, it was the only way to export these artifacts from
    TFS. Test hub now boasts the e-mail or print test artifacts functionality that
    allows you to easily share test artifacts with stakeholders. The feature is simple
    to use and can be triggered from several places within the test hub in Team Web
    Portal. In this recipe, you'll learn how to export the test artifacts from the
    test hub.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browse to the FabrikamTFVC Team web access and navigate into **Test** hub. To
    export at the test plan level, select the test plan, and then click on the **Email
    or print test artifacts** button from the toolbar:![How to do it...](img/image00715.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To export at the test suite level, select the test suite open the context menu
    and chose the **Export** option:![How to do it...](img/image00716.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whether you choose to export from test plan or test suite, in both cases, you
    will get a new form to select "what" and "how". The "what" in this case being
    the artifacts. The "how" in this case being e-mail or print. A few items are worth
    highlighting in the following screenshot. The **Latest test outcome** option has
    been added in Update 1, selecting this option also exports the test results. Choosing
    **Selected suite + children** recursively exports all children of the selected
    suite:![How to do it...](img/image00717.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clicking on print or e-mail starts the process of generating the extract; this
    may take up to a few seconds to complete depending on the quantity and size of
    the artifacts being exported. Once the export has been completed, a form will
    pop up to show you the preview of the export. You can also edit and format the
    values from the preview form. Since we have chosen the e-mail option, the form
    has a field that allows us to choose the e-mail address of the person we would
    like the export to be sent out to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00718.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As illustrated in the following screenshot, the export also includes the test
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00719.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is possible to customize the format of the export by modifying the underlying
    template used by TFS during the export/print process. The following points are
    to be kept in mind before customizing the template:'
  prefs: []
  type: TYPE_NORMAL
- en: You should create a backup of the original template, for example, copy and rename
    it to `TestSuite-Original.xsl`. If not, when you upgrade TFS, the changes you
    made in the `TestSuite.xsl` file may get overwritten. The export does not support
    customization per project; the style changes will affect all projects in your
    TFS instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the steps listed here to add your company logo to the export:'
  prefs: []
  type: TYPE_NORMAL
- en: Log on to the TFS application tier and navigate to the following path. Add your
    company logo (`companylogo.png`) in the `C:\Program Files\Microsoft Team Foundation
    Server 14.0\Application Tier\Web Services\_static\tfs\12\_content` folder path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the `TestSuite.xsl` file in the `C:\Program Files\Microsoft Team Foundation
    Server 14.0\Application Tier\Web Services\_tfs_resources\TestManagement\v1.0\Transforms\1033`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `TestSuite.xsl` file in the notepad and add the following lines of
    code to include your company logo into the export template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The results of the customization can be tested by generating an export through
    the test hub in Team Web Portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Charting testing status on Dashboards in Team Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The charting tools in Team Web Portal provide a great way to analyze and visualize
    test case execution. The charts created through the charting tools can be pinned
    to custom Dashboards. Both charts and Dashboards are fantastic information radiators
    to share the test execution results with Team members and stakeholders. In this
    recipe, you'll learn how to pin the test execution results on a custom Dashboard
    in Team Portal.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps in the Configuring Dashboards in Team Project recipe in [Chapter
    1](part0016.xhtml#aid-F8901 "Chapter 1. Team Project Setup"), *Team Project Setup*,
    to create a custom Dashboard for testing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Test** hub in FabrikamTFVC Team Web Portal. The **Test Plan**
    page gives you a list of test suites and a list of test cases for the selected
    suite. The **Charts** tab gives you a great way to visualize this information.
    Click on the **+** icon and select **New test result** charts. Select a bar chart
    and group by **Outcome**; this renders the test case outcome in the bar chart.
    Click on **OK** to save the chart. Right-click on the newly created chart and
    pin the chart to the testing Dashboard:![How to do it...](img/image00720.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **+** icon and select the **New test case** chart. Test case
    chart types support trend charts and the supported trend period is from 7 days
    to up to 12 months. Select the stacked area chart type and chose to stack by **State**.
    This will allow you to visualize the state of the test cases over time. Click
    on OK to save the chart, right-click on the chart and pin it to the Dashboard:![How
    to do it...](img/image00721.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The charts are calculated using the Work Item data in the transactional database.
    When Work Items are updated, the charts reflect the updates immediately. To learn
    more about the charting functionality in Team Web Portal refer to the walkthrough
    at [http://bit.ly/1PGP8CU](http://bit.ly/1PGP8CU).
  prefs: []
  type: TYPE_NORMAL
