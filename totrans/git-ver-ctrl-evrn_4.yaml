- en: Chapter 4. Split the Load – Distributed Working with Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*So far we have worked entirely with a single local repository. It''s high
    time to go one step further and explore the most highlighted feature of Git in
    earlier chapters: distributed working with Git.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will learn the essentials for collaborative development:'
  prefs: []
  type: TYPE_NORMAL
- en: How to share your files/projects over the Internet and intranet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Various concepts such as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git clone
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Git fetch
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Git merge
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Git pull
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Git push
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Git remote
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These concepts are involved in sharing your files over the Internet and intranet
    *progressively* and *continuously*.
  prefs: []
  type: TYPE_NORMAL
- en: Why share your files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take the same computer gaming analogy which has helped us to understand
    the basics of Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario 1: single player'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of your favorite game that allows you to save the state of the game in
    your system at any given point of time and resume it later on. Now let's consider
    a situation where you are in some remote location with access to a computer and
    want to resume the game, but are not able to because the saved game file is not
    accessible from that system.
  prefs: []
  type: TYPE_NORMAL
- en: Apply the same situation to your data files. On average we spend most of our
    time of the day at two to three different locations; think about how productive
    it might be to *continue our work across systems* without having to start from
    scratch on each new system we lay our hands on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario 2: multiple players – one at a time'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of your favorite adventure game that has multiple levels. Consider a scenario
    where you are stuck in a level without knowing how to proceed forward. After desperate
    attempts, which ended in vain, you suddenly realize that your friend is an expert
    on that level, and you want to use your friend's help. So you quickly share the
    last saved state of the game file with him so he can finish that level for you,
    save the state, and push the file back to you, which will enable you to continue
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: The same situation can apply to you when you are working with datafiles, especially
    when you are working as a team where different people take care of different parts
    of a bigger task to produce a single result. Another possibility might be that
    you want the domain experts to handle specific portions of the work, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to sharing files over the network there can be only two modes.
  prefs: []
  type: TYPE_NORMAL
- en: Internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intranet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The appropriate method is employed based on proximity.
  prefs: []
  type: TYPE_NORMAL
- en: Kid's play – push and pull for a remote source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before getting into the concept of a **distributed file system** as in *Scenario
    1* or **collaborative development** as in *Scenario 2*, it''s time we add five
    more entries to our Git lingo, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: Git clone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git fetch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git merge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git push
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git remote
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's quickly understand what these terms mean and where can they be put to
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning ain't banned here
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Yes, we are talking about Git's **clone** functionality . Git clone is used
    when we need an exact replica or a copy of an existing repository along with its
    history.
  prefs: []
  type: TYPE_NORMAL
- en: So a question may arise as to how all the cloned repositories maintain sync
    with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Well, the answer to that lies in the remaining four Git commands, which are
    listed previously after `git clone`, namely `git fetch`, `git merge`, `git push`,
    and `git remote`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Git fetch**: This command is used to fetch the changes from source to destination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git merge**: Merge is used to combine two workspaces (technically called
    branches) into one. It is frequently used to combine the current user''s workspace
    with the one from the remote user, after fetching the changes from the remote
    source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Git pull**: Executing `git pull` will internally execute `git fetch` followed
    by `git merge`. Hence, it is used as an alternate to fetch plus merge.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Git push**: This command is used to push our contents from source to destination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git remote**: This command is used to manage one''s source and destination.
    It says where and how you can share your work with others and vice versa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any operation which enables data sharing makes use of remote connections, which
    are established by `git remote`. Here, `git fetch`, `git push`, and `git pull`
    make use of the remote connections established by `git remote`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a heads up on a few concepts, let's see how they are put to
    use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario 1: solution'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We shall learn how to utilize Git to serve you in the case of *Scenario 1* as
    mentioned previously.
  prefs: []
  type: TYPE_NORMAL
- en: Going public – sharing over the Internet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several online Git hosting providers available for use with different
    pricing models. Broadly speaking a few of them offer a free service for limited
    functional use and ask you to pay for additional usage; a few others offer full
    functional access for a limited time and ask you to choose a payment plan to continue,
    and there are a few others who combine a bit of both.
  prefs: []
  type: TYPE_NORMAL
- en: I am going to choose Bitbucket, a reliable service provider belonging to the
    third category, from now on to take you through the concepts related to sharing
    over the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Bitbucket is a product of Atlassian, which currently offers free, unlimited
    public and private repositories with the only restriction being the number of
    users with whom your private repositories are shared. This means we can share
    our private repository over the Internet with five people who have read and write
    access to it, for free.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a few other competitive products such as GitHub, Codaset, and others.
    We chose Bitbucket as it provides private repositories for free.
  prefs: []
  type: TYPE_NORMAL
- en: A bit of Bitbucket
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s do a quick signup for their services; open up your browser, go to [http://bitbucket.org](http://bitbucket.org),
    click on the **Pricing and Signup** button, and then click on the first **Sign
    up** button under the **free** quota. It then leads you to the registration page
    where you choose an individual account type for now (it is possible to have a
    entire team use a single account) and choose your username and password for the
    **username** and **password** fields respectively, and enter your active e-mail
    address in the **Email address** field, whereas your **First name** and **Last
    name** are optional fields as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A bit of Bitbucket](img/7522_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After completing the procedures you can expect a confirmation e-mail from Bitbucket
    to validate your e-mail address.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As an alternative to going through this entire sign up process, you can also
    sign in with your OpenID if you have one.
  prefs: []
  type: TYPE_NORMAL
- en: 'The beauty of Bitbucket is that it has keyboard shortcuts for almost all actions
    like in Gmail. Similar to Gmail you can press *Shift* + *?* to see the list of
    shortcuts available. The following is a tabulation of frequently used shortcut
    keys for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Key combination | Action |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| *?* | Display keyboard shortcuts help. |'
  prefs: []
  type: TYPE_TB
- en: '| *c* + *r* | Create repository. |'
  prefs: []
  type: TYPE_TB
- en: '| *i* + *r* | Import repository. |'
  prefs: []
  type: TYPE_TB
- en: '| *g* + *d* | Go to dashboard. |'
  prefs: []
  type: TYPE_TB
- en: '| *g* + *a* | Go to account settings. |'
  prefs: []
  type: TYPE_TB
- en: '| *g* + *i* | Go to inbox. |'
  prefs: []
  type: TYPE_TB
- en: '| */* | Focus on the site search. Puts your cursor on the site field. |'
  prefs: []
  type: TYPE_TB
- en: '| *Esc* | Dismiss the help dialog or remove the focus from a form field. |'
  prefs: []
  type: TYPE_TB
- en: '| *u* | Go back up the stack you just went down with the shortcuts. Like the
    back button in a browser, this takes you back through the Bitbucket pages you
    just paged through. |'
  prefs: []
  type: TYPE_TB
- en: Let's start our journey by creating a new repository in your account. You can
    either press *c* + *r*, or click on the **Create repository** option from the
    **Repositories** menu at the top, or simply click on the **Create a repository**
    link from the repositories block at your right side and this will take you to
    the page that will guide you in creating a new repository/repo (repo is a widely
    used shortform for repository).
  prefs: []
  type: TYPE_NORMAL
- en: '| Field name | Value | Reason |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | `online_workbench` | We are going to import the same `Workbench`
    repository on our desktop to this online portal. |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | `An online Git repository to showcase the collaboration
    function of Git` | This is a brief description of your repository. You can have
    your own description here that best describes the purpose of the repository. |'
  prefs: []
  type: TYPE_TB
- en: '| **Access level** | `Checked` | A private repo is only visible to you and
    those you give access to (more about this later). If this box is unchecked, everyone
    can see your repo. |'
  prefs: []
  type: TYPE_TB
- en: '| **Repository type** | `Git` | Bitbucket supports both Git and Mercurial version
    control systems.As we are going to import a Git repository, let''s select that.
    |'
  prefs: []
  type: TYPE_TB
- en: 'Enter the values in the fields as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A bit of Bitbucket](img/7522_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Create repository** button to complete the repository creation
    process. Now that you have an empty repository, Bitbucket prompts us for immediate
    action as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A bit of Bitbucket](img/7522_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we have two different startup options.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory in our machine, initialize it as a repository, and link
    that to the remote Bitbucket repository that we just created, which is represented
    by the **I'm starting from scratch** link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skip to the later part, which is linking our existing repository to the remote
    Bitbucket repository and pushing our contents to it, which is represented by the
    option **I have code I want to import** link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we already have our repository created, let''s select the second option
    which leads us to a screen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A bit of Bitbucket](img/7522_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are getting to the core part now. Shown in the screen are instructions for
    CLI users to link the `Workbench` repository from the desktop to the `online_workbench`
    repository in Bitbucket.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding a remote origin using CLI mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Linking or adding a remote origin to your repository (yet another addition
    to your Git lingo) is a simple process. Fire up your command-line interface and
    enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After the execution of the `git push` command you will be prompted for your
    Bitbucket account password to complete the process as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – adding a remote origin using CLI mode](img/7522_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you see a similar message in your window, the linkage cum transfer was successful.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created a remote link for our `Workbench` repository with the `online_workbench`
    repository and pushed our files to it making them available online, thus opening
    the door for a distributed file system, using the CLI mode.
  prefs: []
  type: TYPE_NORMAL
- en: '`git remote add` is the command to add a Git repository identified by its path
    to your present repository''s configuration file so that your changes in one repository
    get tracked in another. Let''s just say **origin** is nothing but an alias for
    the path representing the remote repository.'
  prefs: []
  type: TYPE_NORMAL
- en: The parameter `–u origin master`, which is used with `git pull` is to default
    the repositories' push and pull operations to that specified remote branch.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If `–u` is not used initially, then for each and every pull and push request
    we need to specify `origin master` along with the request. Now it's enough for
    us to say `git push` for pushing and `git pull` for pulling.
  prefs: []
  type: TYPE_NORMAL
- en: This means you can continue your work from anywhere if you have access to a
    computer with Git and your application software installed on it (it's Microsoft
    Word in this case as we are dealing with a Word document).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – resume your work from anywhere using CLI mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's enter the second phase, where we would like to resume our work from
    a remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: There are only three stages involved here.
  prefs: []
  type: TYPE_NORMAL
- en: Clone the repository from the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make your changes to the files needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add/stage the modifications made in files, commit, and push.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: As an alternative to `git pull`, we can also use `git fetch` followed by `git
    merge @{u}`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just practiced a working solution for maximizing productivity by effectively
    handling situations as described in *Scenario 1*.
  prefs: []
  type: TYPE_NORMAL
- en: '`Git add *` stages/adds all your changes, which is confirmed and recorded by
    the `git commit` command. `Git pull` is used to check whether there are unsynced
    updates in the server; if present, they are synced appropriately followed by `git
    push`, which updates the server''s files with the changes that you have made and
    committed in your local repository.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might happen to think why we are doing `git pull` before `git push` when
    our sole intention was to push the updated files to the server. Wonderful question
    – hold that thought right there; you will get to know more about it when we discuss
    the concepts of branching.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding a remote origin using GUI mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Linking or adding a remote origin to our `Workbench` repository present in
    our desktop and syncing the contents using the Git GUI is performed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your Git GUI window for our `Workbench` repository from the desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** option from the **Remote** menu in your GUI window.![Time
    for action – adding a remote origin using GUI mode](img/7522_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This opens up the **Add New Remote** window where we enter the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Field name | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Name** | `origin` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Location** | [https://your_bitbucket_repo_identity_here/online_workbench.git](https://your_bitbucket_repo_identity_here/online_workbench.git)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Further Action** | **Do Nothing Else Now** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: This is shown in the following screenshot; click on the **Add** button:![Time
    for action – adding a remote origin using GUI mode](img/7522_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now successfully added a remote to our `Workbench` repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To push our code to the `online_workbench` repository, go to the same **Remote**
    menu and select the option **Push**, which will lead you to the **Push Branches**
    window as shown in the following screenshot:![Time for action – adding a remote
    origin using GUI mode](img/7522_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, **master** will be selected under **Source Branches**, and **origin**
    will be selected in the listbox for the **Remote** option under **Destination
    Repository**. Leave it as it is, click on the **Push** button, and wait for some
    time; it should lead you to a screen where you will be prompted for your Bitbucket
    account password to proceed as shown in the following screenshot:![Time for action
    – adding a remote origin using GUI mode](img/7522_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon successful authentication, your content will be synced with the `online_workbench`
    repository, which can be understood from the following screenshot:![Time for action
    – adding a remote origin using GUI mode](img/7522_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It says that the master branch of your local `Workbench` repository is synced
    with the master branch of the `online_workbench` repository (more on branches
    in later chapters).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created a remote link for our `Workbench` repository with the `online_workbench`
    repository and pushed our files to it making them available online, thus opening
    the door for a distributed file system, using GUI mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you open your Bitbucket account in your browser you will see history
    updated on your dashboard as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/7522_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This means you can continue your work from anywhere if you have access to a
    computer with Git and your application software installed on it (it's Microsoft
    Word in this case as we are dealing with a Word document).
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and browse through the different tabs available to make yourself comfortable
    with it. Once you are done with it, let's move to the next half to see how we
    can resume our work form distributed locations.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – resume your work from anywhere using GUI mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we are reaping the benefits for what we did earlier by creating an online
    repository, remoting to it, and syncing our local files to the online one. Resuming
    your work on any machine you lay your hands on is an easy three-phase process.
  prefs: []
  type: TYPE_NORMAL
- en: Clone the repository from the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Git GUI and select the **Clone Existing Repository** option as shown in
    the following screenshot:![Time for action – resume your work from anywhere using
    GUI mode](img/7522_04_12.jpg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This leads you to the respective window where you are prompted for **Source
    Location** and **Target Directory** where you enter the values as follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Field name | Value |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| **Source location** | [https://your_name@bitbucket.org/username/online_workbench.git](https://your_name@bitbucket.org/username/online_workbench.git)
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| **Target Directory** | `/Path/where/you/want/to/have/the_cloned_repository_for_ease_of_work`
    |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: 'This is shown in the following screenshot; click on the **Clone** button:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – resume your work from anywhere using GUI mode](img/7522_04_13.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: Once the clone process starts you will be prompted for your Bitbucket account
    password. Upon successful authentication, you will have a cloned repository with
    the files with which you can resume your work.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Make your changes to the files as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add/stage the modifications made in files, commit, fetch, merge, and push.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We already know how to add/stage the modifications made to files and commit
    them to the repository. So let's start from fetch now. To perform a fetch operation,
    go to the **Remote** | **Fetch from** | **Origin** menu option. This should bring
    you the remote fetch window, which will prompt you for your Bitbucket account
    password as shown in the following screenshot:![Time for action – resume your
    work from anywhere using GUI mode](img/7522_04_14.jpg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon entering the correct password and a successful authentication, if there
    are any new changes to the files in the server that are not updated in your local
    repository, those changes are synced.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – resume your work from anywhere using GUI mode](img/7522_04_15.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: The previous screenshot shows you the sync process and the status of the sync.
    Upon success we can close the window and proceed to merge these two workspaces.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Merging two workspaces, namely local master (your local workspace, which you
    have been using to make changes) and remote master (the workspace which is present
    in the server), is performed by selecting the **Merge** | **Local merge** menu
    option. This opens up a local merge window as shown in the following screenshot:![Time
    for action – resume your work from anywhere using GUI mode](img/7522_04_16.jpg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The default selected option would be **origin/master**; leave it as it is, and
    click on the **Merge** button.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: If there are no conflicts in merging you should see a success message like the
    one shown in the following screenshot:![Time for action – resume your work from
    anywhere using GUI mode](img/7522_04_17.jpg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This marks that you have successfully down-synced the contents present in the
    server with yours. Now let's up-sync your content with the one present in the
    servers by using the `git push` functionality, which can be accessed from the
    **Remote** | **Push** menu option.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just practiced a working solution for maximizing productivity by effectively
    handling situations as described in *Scenario 1*, using Git GUI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario 2: solution'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Handling *Scenario 2* is very easy now that we know how we handled *Scenario
    1*. The only addition to *Scenario 2* when compared to the former is the involvement
    of multiple people to the same repository.
  prefs: []
  type: TYPE_NORMAL
- en: Inviting users to your Bitbucket repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inviting your friend to access your game file so that he can finish that level
    for you is an easy two-step process from your side as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: From your repository homepage, click on the **Share** icon or the **invite**
    button as shown in the following screenshot:![Inviting users to your Bitbucket
    repository](img/7522_04_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will prompt you to enter the details about the user whom you wanted to
    invite or share your repository with. If it's an existing user you can enter his/her
    username and if it's a new user you can enter his/her e-mail ID and click on the
    **Add** button as shown in the following screenshot:![Inviting users to your Bitbucket
    repository](img/7522_04_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the username/e-mail ID gets added to the list and you will be prompted to
    specify the access level for the user that you have added. Click on the **Write**
    button and then click on the **Share** button as shown in the following screenshot:![Inviting
    users to your Bitbucket repository](img/7522_04_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it! You will see a success message at the top of your page, as shown
    in the following screenshot, as an acknowledgement for sharing:![Inviting users
    to your Bitbucket repository](img/7522_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And the user you have added will receive an e-mail mentioning that you wanted
    to share your repository with him/her as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Inviting users to your Bitbucket repository](img/7522_04_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Upon clicking the link you will be given two options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sign up**: If your friend is a new user of Bitbucket, he/she needs to go
    through the registration process as discussed earlier in this chapter. Post registration
    you will be routed to your dashboard.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log in with your existing username**: If your friend already has a Bitbucket
    account and once he/she logs in with his/her credentials, he/she will be prompted
    for acceptance to the shared repository as shown in the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Inviting users to your Bitbucket repository](img/7522_04_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: When the **Accept invitation** button is clicked, the user will be taken to
    his/her dashboard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'And the dashboard will contain affirmation in the form of an onscreen notification
    as shown in the following screenshot along with an e-mail which is sent to your
    registered e-mail ID which contains the details of the repository that you have
    been given access to:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Inviting users to your Bitbucket repository](img/7522_04_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: And an e-mail is sent to that user with the details about the repository which
    he/she has access to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Voila! We have successfully practiced a working solution for handling *Scenario
    2* cases effectively.
  prefs: []
  type: TYPE_NORMAL
- en: This means you can split a bigger task into smaller ones, and share those tasks
    and related files with others so that they can fill in their sectors to produce
    a common output.
  prefs: []
  type: TYPE_NORMAL
- en: Staying local – share over the intranet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are situations where you work within a local network, like in different
    floors of a building, and don't want to upload your files to the web due to various
    reasons such as cost involved, bandwidth consumption for every put and get, security,
    and others.
  prefs: []
  type: TYPE_NORMAL
- en: 'In such cases there are several ways to handle this – the most commonly used
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: Gitolite server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common shared directory with bare repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We shall look at procedures to create a bare repository inside a shared directory
    so that it can be shared within your network.
  prefs: []
  type: TYPE_NORMAL
- en: Concept of a bare repository
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As soon as it is said that you need a bare repository to share your files with
    others, a few basic questions you might have in your mind would be:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a bare repository?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why do we need such a thing to share the files of our repository with others?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bare repository**: A bare repository is the one where no working directory
    is present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Working directory**: This is nothing but a directory with your source files,
    for example, `content.docx` inside the `Workbench` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The contents of the `.git` directory alone would be the contents of your entire
    directory if it is a bare repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Why bare repository**: Think about a situation where there are multiple people
    working on the same file at the same time. Now what happens when you are in the
    process of changing some content in the file from the repository and another person
    working on the same file makes his own changes and pushes it to your repository!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The contents of your file will be altered, or the file itself may cease to exist
    based on the actions performed from the other end, whereas you would have the
    file opened for manipulation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It causes a great deal of confusion in handling such scenarios, so the people
    who have created Git have done the smart thing of avoiding such situations by
    implementing the bare repository concept. This bare repository acts as a middle
    man between all such clones and your source repository, which contains the working
    directory. So you cannot simply push from a clone to the source of the clone,
    if the source contains the working directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Concept of a bare repository](img/7522_04_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let's create a bare repository and take a quick peek into it to understand it
    better.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a bare repository in CLI mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The command for creating a bare repository would be the same as the one that
    you used to clone a repository except for the `--bare` parameter, which makes
    all the difference.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Executing the preceding code in your console should create a bare clone of our
    `Workbench` repository in your common shared folder called `generic_share`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a bare repository in GUI mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating a bare clone from an already existing repository using GUI is an easy
    process. All you need to do is:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `.git` directory from the existing repository and paste it with a `different_name.git`
    (whatever name you want to give to your new bare repository) outside the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our case we have a non bare repo called `Workbench` at `C:\Users\raviepic3\Desktop\`
    inside which we have `content.docx`. And now I want to create a new bare repository
    from this using GUI. I'll copy `C:\Users\raviepic3\Desktop\Workbench\.git` and
    paste it as `C:\generic_share\Bare_Workbench.git`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `config` file inside `Bare_Workbench.git` with a text editor and find
    the line which says `bare = false` and replace the string `false` with `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By performing the previous actions through CLI or GUI we have just created
    a bare repository out of the `Workbench` repository inside a directory called
    `generic_share` under the name of `Bare_Workbench` whose contents are as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/7522_04_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For a better understanding, a content comparison between the two repositories
    is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/7522_04_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are in a local network, you can control who has access to the repository
    by controlling the visibility of the shared folder `generic_share`, the same way
    you control visibility of other shared folders within your network.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have learned what is and how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Clone a repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differentiate between bare and non bare repositories, their usage, and implementation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a remote to a repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch, merge, and push content to the added remote repository or a cloned repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pull operation and its alternates
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, you have also learned how to:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Share your repositories over the Internet and intranet using:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git CLI
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Git GUI
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You are also ready to get productive with the concepts that you have learned
    starting from day one, as you already have a Bitbucket account with which you
    can create and manage unlimited public and private repositories and share them
    with at the most five users without spending a penny on it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
