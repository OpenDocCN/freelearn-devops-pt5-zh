- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploring Collaboration in Automation Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you work as a team, collaboration is the key to your team’s harmony. Instead
    of keeping your automation content and knowledge to yourself, you can share it
    with your team, or even other departments. By doing that, the content will be
    useful to many others and also, they can contribute with their own ideas and tips.
    Compared to custom scripts, Ansible content is human-readable and easy for others
    to understand. Hence, they can modify it and later contribute to the content by
    fixing bugs or adding features. It is possible to use any standard methods to
    keep and distribute your Ansible automation content, such as a Git server, Subversion,
    or any other **Version Control System** (**VCS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of version control in IT automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where should I keep automation artifacts?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing automation content in a Git server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaboration is the key to automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will start by looking at GitHub account configuration and access management
    to share content with your team. You will also learn how to manage contributions
    from other users without losing the original content.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter focuses on Git and how to use Git for Ansible content. If you are
    familiar with Git and GitHub, then you may skip the sections about those topics.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements to proceed with this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: One Linux machine for the Ansible control node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One or more Linux machines with Red Hat repositories configured (if you are
    using other Linux operating systems instead of RHEL machines, then make sure you
    have appropriate repositories configured to get packages and updates).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An email ID to create a new GitHub account (if you don’t already have a GitHub
    account).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic knowledge about source control server and version control systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible code, Ansible playbooks, commands, and snippets for this chapter
    can be found in the GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-04](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-04).
  prefs: []
  type: TYPE_NORMAL
- en: The importance of version control in IT automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like any other software, configurations, or scripts, it is not a best practice
    to keep your Ansible playbooks and configurations on the local machine, which
    is the Ansible control node. There are many reasons for not keeping the automation
    content on the local Ansible control node. A few of them are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: If something happens to the Ansible control node, you will lose all your automation
    content, which is not desirable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If someone accidentally deletes any files or changes any configurations, you
    will not have the opportunity to restore the original content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to make any changes to configurations or playbooks, then you need
    to make a backup of files and configurations. This is general practice in case
    something goes wrong and you want to restore an old version of your files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to consider the Ansible automation content as software code, which
    should keep track of every change and have the option to use old versions at any
    point in time. Keeping multiple versions of the content will give you the freedom
    and confidence to make continuous changes to your automation playbooks and configurations.
    This will also implement the *single-source-of-truth* practice where your Ansible
    playbooks and variables reside in a central place and track all the changes.
  prefs: []
  type: TYPE_NORMAL
- en: VCSs, such as Git and Subversion, will help you to keep a track of the changes
    for your Ansible automation content and configurations. Depending on the technology,
    all these tools will create new versions of your content whenever there are changes
    made to it.
  prefs: []
  type: TYPE_NORMAL
- en: You will keep your content in Git servers as repositories, which are collections
    of files and directories. It is possible to create and maintain multiple Git repositories
    based on the content, such as one Git repository for keeping package installation
    playbooks and tasks, another Git repository for Linux remediation automation,
    and so on. You will practice creating and managing Git repositories in the following
    sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Git Documentation
  prefs: []
  type: TYPE_NORMAL
- en: Check [https://git-scm.com/doc](https://git-scm.com/doc) for the reference manual,
    books, and videos to learn Git. Learn the important terminologies in Git, such
    as branch, commit, push, pull, clone, and staging. Since this book is focused
    on Ansible, we will not go into detail about these topics.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that **Software Configuration Management** (**SCM**) is not the
    same as VCS but VCS is a part or subset of SCM.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a Git server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Choose any type of VCS, but in this chapter, we will focus on how to use Git
    servers for storing your Ansible automation content. Organizations use enterprise
    Git solutions such as **GitHub Enterprise**, GitLab **Enterprise Edition** (**EE**),
    and **Atlassian Bitbucket**. If you do not have a Git server in your environment,
    then it is possible to easily set up one using any of the free and open source
    solutions available, such as GitLab **Community Edition** (**CE**), Gogs, and
    Gitea. Most of them are included a web **Graphical User Interface** (**GUI**)
    and you can use them for any general Git use cases, including Ansible automation
    content.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GitHub is a hosted service provider for version control repositories and other
    **Continuous Integration/Continuous Delivery** (**CI/CD**) operations. It is possible
    to create a personal GitHub account and create unlimited public or private repositories
    to store your software or configurations. One of the main limitations of GitHub
    is that you cannot host a private GitHub server for your environment.
  prefs: []
  type: TYPE_NORMAL
- en: GitLab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GitLab ([gitlab.com](http://gitlab.com)) is another hosted VCS provider similar
    to GitHub but with different features and services. GitLab offers public-hosted
    servers ([gitlab.com](http://gitlab.com)) and also private hosting via GitLab
    EE or CE.
  prefs: []
  type: TYPE_NORMAL
- en: How to Install a Git Server
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://www.techbeatly.com/build-your-own-git-server-using-gogs/](https://www.techbeatly.com/build-your-own-git-server-using-gogs/)
    to learn how to install a Git server using Gogs inside a simple Docker container.
    If you want to install GitLab CE, then refer to the documentation at [https://about.gitlab.com/install/](https://about.gitlab.com/install/)
    for detailed instructions.
  prefs: []
  type: TYPE_NORMAL
- en: We have learned the importance of storing Ansible automation content in Git
    servers and about the different Git servers available to use. In the next section,
    we will learn the best practices for storing Ansible content in Git and repository
    guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: Where should I keep automation artifacts?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keep your playbooks and configurations in multiple Git repositories based on
    the automation and content type.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible and Git repositories – best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many best practices for keeping your Ansible automation content in
    a VCS.
  prefs: []
  type: TYPE_NORMAL
- en: Repository for Ansible roles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are creating Ansible roles alone (it is no longer common to create individual
    roles for distribution without a collection), then create one Git repository per
    role so that the development and collaboration will be easy without depending
    on other tasks and configurations. See the sample ansible-role repositories in
    *Figure 4.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Separate repositories for Ansible roles ](img/B18383_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – Separate repositories for Ansible roles
  prefs: []
  type: TYPE_NORMAL
- en: Repositories for Ansible collections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are creating Ansible collections, then create one Git repository per
    collection to make the development and management easy. Move your existing Ansible
    roles, libraries, modules, and other plugins to an Ansible collection repository
    and distribute them in a standard way. See the sample ansible-collection repositories
    in *Figure 4.2*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Ansible collection repositories ](img/B18383_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Ansible collection repositories
  prefs: []
  type: TYPE_NORMAL
- en: Dedicated repositories for teams
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is a best practice to create different repositories for different teams if
    they are working on different items as it will make repository management easy
    and transparent.
  prefs: []
  type: TYPE_NORMAL
- en: Dedicated repositories for inventories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Keeping inventories for different environments and groups in separate Git repositories
    will help you to use them efficiently in playbooks. Also, this practice will avoid
    the accidental execution of automation jobs in wrong inventories. For example,
    you can keep production servers in one repository and development servers in another
    repository, as shown in *Figure 4.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Ansible inventory directory structure for different environments
    ](img/B18383_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Ansible inventory directory structure for different environments
  prefs: []
  type: TYPE_NORMAL
- en: By separating inventories for different environments into different Git repositories,
    it is possible to control the access to these inventories’ data as well, such
    as who can modify or use this content.
  prefs: []
  type: TYPE_NORMAL
- en: If you use an Ansible controller, this practice will also help you as it is
    possible to import inventories from project repositories. Read [https://docs.ansible.com/automation-controller/latest/html/userguide/inventories.xhtml#sourced-from-a-project](https://docs.ansible.com/automation-controller/latest/html/userguide/inventories.xhtml#sourced-from-a-project)
    to find out more.
  prefs: []
  type: TYPE_NORMAL
- en: Managing automation content in a Git server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to create a GitHub ([github.com](http://github.com))
    account, create, install, and configure the repositories, and keep Ansible automation
    content inside the repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a GitHub account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you already have a GitHub personal or enterprise account, then you can skip
    the account creation steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your web browser and go to [github.com](http://github.com), then click
    the **Signup** button in the top-right corner of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter your email address and a password and username on the next screen, as
    shown in *Figure 4.4*. GitHub will tell you whether the username is available
    as usernames in GitHub must be unique:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Creating a GitHub account ](img/B18383_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Creating a GitHub account
  prefs: []
  type: TYPE_NORMAL
- en: Click **Continue** and finish the simple puzzle (CAPTCHA) on the next screen
    to verify your identity. Once done, create your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, GitHub will ask you for the one-time code that you will
    receive on your registered email. Check your email inbox for the code (*Figure
    4.5*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Fetching the activation token from your mailbox ](img/B18383_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Fetching the activation token from your mailbox
  prefs: []
  type: TYPE_NORMAL
- en: Enter the code into the GitHub window and complete the signup process (*Figure
    4.6*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Inputting the one-time token in GitHub ](img/B18383_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Inputting the one-time token in GitHub
  prefs: []
  type: TYPE_NORMAL
- en: Now, you will be taken to the GitHub home page with your activated account (*Figure
    4.7*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – GitHub account home page ](img/B18383_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – GitHub account home page
  prefs: []
  type: TYPE_NORMAL
- en: Other Git Servers
  prefs: []
  type: TYPE_NORMAL
- en: Use any other Git services, such as GitLab (https://gitlab.com) or Bitbucket
    ([https://bitbucket.org](https://bitbucket.org)), and the sign-up process will
    be more or less the same.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first Git repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will create a new Git repository to store your playbooks
    and configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: From the GitHub home page, click the **+** icon in the upper-right corner and
    select **New repository** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Creating a new repository ](img/B18383_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Creating a new repository
  prefs: []
  type: TYPE_NORMAL
- en: Enter the details of the new repository, such as the repository name and description.
    Also select the visibility of the repository as a public or private repository.
    Also, tick the **Add a README file** option as shown in *Figure 4.9*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Entering a new repository name and details ](img/B18383_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – Entering a new repository name and details
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to change all these configurations at any time, but it is a best
    practice not to change the repository name as it may break your integrations and
    paths.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have entered all the details, click on the **Create repository** button.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub will show the repository with default `README.md` file content (*Figure
    4.10*). This file was created automatically because we ticked the **Add a README
    file** option in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.10 – GitHub repository default view with README.md file ](img/B18383_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – GitHub repository default view with README.md file
  prefs: []
  type: TYPE_NORMAL
- en: '`README.md` is a special file that will be used to communicate important information
    about the repository or directory inside a repository. GitHub will render and
    show the content of the `README.md` file as an HTML-equivalent format, which is
    a great way to add your repository information, documentation, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Markdown Format
  prefs: []
  type: TYPE_NORMAL
- en: The `.md` extension is used for Markdown files, which is a lightweight markup
    language. Markdown language is used for creating formatted text using plain-text
    editors that is later rendered to HTML or other formats. Read [https://www.markdownguide.org/getting-started](https://www.markdownguide.org/getting-started)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git on a local machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create and manage your Git repository and content from the GitHub web UI itself,
    but this is limited as you cannot do any bulk operations, such as changing multiple
    files in a single commit. You can manage your repository and content from any
    compatible Git CLI or GUI tools, such as the default Git CLI, GitHub Desktop,
    Sourcetree, TortoiseGit, SmartGit, and Tower.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, you will install and use the Git command-line utility to
    access and manage your Git repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Git on the Ansible control node, use the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, verify the Git version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the Git username and email address. This step will update the global
    username and email address for your Git environment. You need to use the username
    and email address that you used during the GitHub account creation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that it is possible to use any other dummy username or email address as
    this information is not used as credentials for GitHub access but the identity
    for local users.
  prefs: []
  type: TYPE_NORMAL
- en: Git CLI and GUI Clients
  prefs: []
  type: TYPE_NORMAL
- en: Check out [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
    to find out how to install Git on different operating systems. Git GUI clients
    are used for better management of Git repositories without much command-line execution.
    Check out https://git-scm.com/downloads/guis for available Git GUI clients.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring SSH keys in GitHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to access and manage your GitHub repositories using your username
    and password, but it is not desirable to enter the username and password every
    time you want to update something in the Git server. This is where we can utilize
    SSH keys, and you can use the same or different SSH keys to configure GitHub access.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, you will configure the SSH public keys to GitHub for seamless
    and password-less access from the Git client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch the SSH public key content. Use the same SSH key pairs that were created
    in the *Setting up SSH key-based authentication* section in [*Chapter 1*](B18383_01.xhtml#_idTextAnchor014),
    *Ansible Automation – Introduction*. Copy the public key content as shown in *Figure
    4.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Copy SSH public key content ](img/B18383_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Copy SSH public key content
  prefs: []
  type: TYPE_NORMAL
- en: Go to **GitHub** | **Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Opening the GitHub settings ](img/B18383_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – Opening the GitHub settings
  prefs: []
  type: TYPE_NORMAL
- en: Select the **SSH and GPG keys** tab on the left (*Figure 4.13*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.13 – GitHub account SSH and GPG keys configuration  ](img/B18383_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – GitHub account SSH and GPG keys configuration
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New SSH key** button and enter a title (any identifiable name)
    and the SSH public key content that we copied in *Step 1*. Click on **Add SSH
    key**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Adding SSH public key content ](img/B18383_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Adding SSH public key content
  prefs: []
  type: TYPE_NORMAL
- en: GitHub will ask for your password to confirm this SSH key addition task.
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the SSH key has been added (*Figure 4.15*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.15 – Verifying SSH keys  ](img/B18383_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – Verifying SSH keys
  prefs: []
  type: TYPE_NORMAL
- en: Add any number of keys here; for example, if you want to manage your GitHub
    repository from another workstation (or your laptop), then add the SSH public
    key from that workstation here. Also, note that if you find that any of the SSH
    keys are not in use or have been compromised, you can remove them from this page
    and deny access.
  prefs: []
  type: TYPE_NORMAL
- en: Adding SSH Keys to GitHub
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the documentation at [https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Adding content to the Git repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will add your previously created automation playbooks
    (in [*Chapter 2*](B18383_02.xhtml#_idTextAnchor043), *Starting with Simple Automation*)
    and configurations to the newly created GitHub repository. To achieve that, you
    need to **clone** the remote repository (on [github.com](http://github.com)) to
    a local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to GitHub and access your repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.16 – GitHub repository details ](img/B18383_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – GitHub repository details
  prefs: []
  type: TYPE_NORMAL
- en: Find the **Code** button, click on the drop-down arrow, switch to the **SSH**
    option, and copy the command to clone the repository to your local machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Getting the GitHub repository URL ](img/B18383_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – Getting the GitHub repository URL
  prefs: []
  type: TYPE_NORMAL
- en: Since you have configured the SSH keys, you can use the SSH-based clone and
    access the repository. If you are using HTTPS-based cloning, GitHub will ask for
    your username and password every time you update the content back to the remote
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your Ansible control node, execute the `git clone` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Clone Git repository to local machine ](img/B18383_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – Clone Git repository to local machine
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the content of the cloned Git repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Listing content of cloned Git repository ](img/B18383_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – Listing content of cloned Git repository
  prefs: []
  type: TYPE_NORMAL
- en: See the `README.md` file that was created automatically when you created the
    Git repository. The `.git` directory contains all the information about this repository,
    including remote repository and commit details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move/copy the files you created in the `Chapter-02` exercise to this directory
    and verify the files are inside the directory as shown in *Figure 4.20*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.20 – Content of Git local repository after files moved ](img/B18383_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – Content of Git local repository after files moved
  prefs: []
  type: TYPE_NORMAL
- en: 'Check `git status` and notice the changes as shown in *Figure 4.21*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.21 – git status output for untracked files ](img/B18383_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – git status output for untracked files
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding output, you can understand the following facts:'
  prefs: []
  type: TYPE_NORMAL
- en: The `ansible.cfg`, `chrony.conf.sample`, `hosts`, and `install-package.yaml`
    files are not in the Git database and are called **untracked files**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to add them to Git, you need to use the `git add` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add untracked files to Git (you can add them one by one or all at once):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the `git status` again as shown in *Figure 4.22*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.22 – git status after adding file to the Git repository ](img/B18383_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – git status after adding file to the Git repository
  prefs: []
  type: TYPE_NORMAL
- en: Also note that the files are not transferred to the remote repository (GitHub)
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Commit the changes to Git using the `git commit` command. Use appropriate comments
    to identify the change in the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.23 – git commit output ](img/B18383_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 – git commit output
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, push the changes to the remote repository using the `git push` command
    as shown in *Figure 4.24*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.24 – Push changes to the remote Git repository ](img/B18383_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.24 – Push changes to the remote Git repository
  prefs: []
  type: TYPE_NORMAL
- en: This will transfer all the files and changes to the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: Verify the content on GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.25 – Verifying pushed content on the remote repository ](img/B18383_04_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 – Verifying pushed content on the remote repository
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the files are already available on the Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Verify the commit history on GitHub. Click on the **Commits** link (below the
    **Code** button as shown in *Figure 4.25*) and check the commits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.26 – Verifying Git commits in GitHub ](img/B18383_04_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.26 – Verifying Git commits in GitHub
  prefs: []
  type: TYPE_NORMAL
- en: 'You can explore commits and history by referring to the Git documentation here:
    https://git-scm.com/docs/gittutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we have learned how to add Ansible content to a Git repository and see the
    version history from the GitHub UI. In the next section, we will learn how to
    manage contributions and collaborative development in a Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration is the key to automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you have your Ansible automation content in your GitHub repository. There
    are several advantages to this:'
  prefs: []
  type: TYPE_NORMAL
- en: You do not need to take a backup of your files before you make changes (once
    you make the changes, remember to test, commit, and push the changes to a remote
    GitHub repository).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull the content to any of the machines whenever needed and test it. For example,
    you can download the code to your local workstation and develop it further. Once
    you make the changes, push it back to the remote repository; a new version of
    the code will be stored there.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other users and developers can test and contribute to your code without having
    access to your Ansible control node. You just need to allow appropriate access
    to other users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If any of the code is not working after an update, you can revert to an old
    version of the code at any point in time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s learn how to use Git branching in the next session.
  prefs: []
  type: TYPE_NORMAL
- en: Using Git branching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git provides a feature called branching, which will help you to create multiple
    versions (or branches) of code in the same Git repository. A `main` (formerly
    `master`) and all your Git commits go to the `main` branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create multiple branches on the Git repository to take advantage of
    the Git workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Create multiple branches for `development` and `staging` to track the changes.
    Once the content of `development` and `staging` branches are tested and confirmed
    as good content, then you can merge the content from these `development` and `staging`
    branches to the `main` branch of your Git repository. With this practice, the
    `main` branch will contain only tested and clean code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create different branches for patching or bug fixes and merge them to the `main`
    branch once tested.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a branch for users to contribute their code and merge to the `main` branch
    once tested.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can choose any type of branching strategy based on your development workflow
    and the organization’s requirements. For our exercise, we will be using a simple
    Git branching strategy, as shown in *Figure 4.27*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.27 – Git branching ](img/B18383_04_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.27 – Git branching
  prefs: []
  type: TYPE_NORMAL
- en: 'Git branching and merging may happen for different reasons. The following are
    the typical tasks involved in the Git workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: The `main` branch will contain the code, for example, version 1.0 of your automation
    content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create new feature branches as needed. Once the feature branch is tested and
    good to use, you will raise a merge request (**PR**, or **pull request**). This
    is the stage where a contributor informs the maintainer of the Git repository
    to review code in the feature branch and merge it into the main branch of the
    project. You can call this version of code **2.0**, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you find any issues in the code, duplicate a bugfix branch (same as the feature
    branch) and raise another PR to merge the changes into the main branch. You can
    call this version **2.1** here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at an example to understand this concept better.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Git branching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will learn how to create multiple branches and contribute
    as different users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, I am using another workstation to clone the previously created
    repository as a different GitHub user (for example, `ginigangadharan`). Create
    another GitHub account or ask your friend if you can use their account to test
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fork the original repository from the web browser as a different user (eg:
    `ginigangadharan`). Click on the **Fork** button as shown in *Figure 4.28*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.28 – Opening the repository as a different user ](img/B18383_04_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.28 – Opening the repository as a different user
  prefs: []
  type: TYPE_NORMAL
- en: GitHub will ask for the target account as shown in the *Figure 4.29* (if you
    have other organization accounts) to fork the repository and will create a copy
    of the original repository in the new user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.29 – Forking the repository ](img/B18383_04_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.29 – Forking the repository
  prefs: []
  type: TYPE_NORMAL
- en: Now you can see a new repository created under the new account, which is forked
    from the original repository.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.30 – Forked repository details ](img/B18383_04_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.30 – Forked repository details
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone this repository to your workstation and check the content; remember to
    clone with the new repository URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.31 – Clone the Git repository from new user account ](img/B18383_04_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.31 – Clone the Git repository from new user account
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Git branch called `feature-1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Switch to the new branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the Git branches:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, you can see the `*` symbol, which denotes the current branch.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can update your code, for example, change some lines of code or add
    some tasks to the playbook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check git `status` to see the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.32 – Git status after updating repositry content ](img/B18383_04_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.32 – Git status after updating repositry content
  prefs: []
  type: TYPE_NORMAL
- en: You can see that `install-package.yaml` (or whichever file you have changed)
    is highlighted there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the changed file and commit the changes to Git; remember to use appropriate
    commit messages to identify the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.33 – Add update to Git and commit changes ](img/B18383_04_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.33 – Add update to Git and commit changes
  prefs: []
  type: TYPE_NORMAL
- en: 'Check git `log` to review the commit history as shown in *Figure 4.34*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.34 – Details of commits in Git logs ](img/B18383_04_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.34 – Details of commits in Git logs
  prefs: []
  type: TYPE_NORMAL
- en: 'Push the new branch and changes to the remote repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.35 – Push the changes to remote GIt repository ](img/B18383_04_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.35 – Push the changes to remote GIt repository
  prefs: []
  type: TYPE_NORMAL
- en: Now the updated code is available in the new user’s GitHub repository, which
    is a forked copy of the original repository.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the new user’s GitHub repository and select **Pull requests**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.36 – Pull requests in the GitHub repository ](img/B18383_04_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.36 – Pull requests in the GitHub repository
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **New pull request** button. Select the repository and branches
    and click on the **Create pull request** button to submit a PR (provide the PR
    comment as required):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.37 – Create a pull request in the GitHub repository ](img/B18383_04_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.37 – Create a pull request in the GitHub repository
  prefs: []
  type: TYPE_NORMAL
- en: Now, go back to the `demouser-2022` user’s GitHub account and check the PRs.
    You will find the PR from the other user (that is, `ginigangadharan`) and can
    open the PR. Verify the merge, check for any conflicts, and click on the **Merge
    pull request** button to accept the changes from this user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.38 – Pull request details in GitHub repository ](img/B18383_04_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.38 – Pull request details in GitHub repository
  prefs: []
  type: TYPE_NORMAL
- en: Now you have the latest contribution from another user in your Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that this is a very basic Git workflow, and you need to include
    additional steps, such as adding PR approvals, creating tests before merging to
    the `main` branch, and other policies as required.
  prefs: []
  type: TYPE_NORMAL
- en: Accept contributions from other users and teams using the preceding workflow
    without giving full access to your repository, which is a common method used for
    any other open source software.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned the importance of version control in an IT
    automation environment. You have learned the basics of Git and different Git servers
    and providers. You have practiced creating a GitHub account, Git repository, and
    other steps. You also learned how to accept contributions to your Git content,
    branching methods, and PR processes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to find more automation use cases from
    your workplace and personal projects. You will also learn more about inventory
    management and different strategies to keep your managed nodes’ information.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics covered in this chapter, please visit the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*What is Git?*: [https://git-scm.com/docs/gittutorial](https://git-scm.com/docs/gittutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What is version control?*: [https://en.wikipedia.org/wiki/Version_control](https://en.wikipedia.org/wiki/Version_control)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*What are pull requests?*: [https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Syncing your branch*: [https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/keeping-your-local-repository-in-sync-with-github/syncing-your-branch](https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/keeping-your-local-repository-in-sync-with-github/syncing-your-branch)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 2: Finding Use Cases and Integrations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part of the book will explain how to use Ansible in real-world use cases
    in an IT environment. It will also cover most of the general items, such as infrastructure,
    platforms, and applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part of the book comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18383_05.xhtml#_idTextAnchor086)*, Expanding Your Automation
    Landscape*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18383_06.xhtml#_idTextAnchor105)*, Automating Microsoft Windows
    and Network Devices*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18383_07.xhtml#_idTextAnchor125)*, Managing Your Virtualization
    and Cloud Platforms*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18383_08.xhtml#_idTextAnchor144)*, Helping the Database Team
    with Automation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18383_09.xhtml#_idTextAnchor161)*, Implementing Automation in
    a DevOps Workflow*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18383_10.xhtml#_idTextAnchor178)*, Managing Containers Using
    Ansible*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18383_11.xhtml#_idTextAnchor194)*, Managing Kubernetes Using
    Ansible*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18383_12.xhtml#_idTextAnchor213)*, Integrating Ansible with
    Your Tools*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B18383_13.xhtml#_idTextAnchor241)*, Using Ansible for Secret
    Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
