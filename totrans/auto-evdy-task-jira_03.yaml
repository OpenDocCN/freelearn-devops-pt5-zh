- en: '*Chapter 2*: Automating Jira Issues'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we introduced you to some of the key concepts of automation
    rules in Jira and looked at the basic building blocks of rules. To really get
    to grips with automation rules, we need to understand how we can use those building
    blocks to automate issues within Jira, and this is what this chapter is all about.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will learn how the various conditions work and when to use each of
    them. We will also cover how we can work with related issues, such as sub-tasks,
    linked issues, and stories within Epics. Importantly, you will learn how to use
    issue actions to make changes to your issue fields.
  prefs: []
  type: TYPE_NORMAL
- en: We will also cover how to use the advanced field editing function for those
    rare occasions when the standard field editors are not sufficient and finally,
    we will look at how to transition issues through their workflows and how to create
    scheduled rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with branch rules and related issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing issue fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced field editing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitioning issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduling tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter you should have a solid understanding of how you
    can use automation conditions and actions within your rules to effectively work
    with issues in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira Cloud environment**: If you don''t already have access to Jira, you
    can create a free Jira Cloud account at [https://www.atlassian.com/software/jira/free](https://www.atlassian.com/software/jira/free)
    and ensure that you have both Jira Software and Jira Service Management selected;
    or'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jira Server environment**: If you are using Jira Server (available from [https://www.atlassian.com/software/jira/download](https://www.atlassian.com/software/jira/download)),
    ensure that you have licenses for both Jira Software and Jira Service Management.
    In addition, you will also need to ensure that you install the *Automation for
    Jira* app, available from the Atlassian Marketplace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In both instances, you will need to have at least project administrator access
    to a Service Management project and a Scrum Software project in order to be able
    to follow the examples in this chapter. For the examples in this chapter, we have
    used the IT Service Management project template to create the Service Management
    project, and the Scrum Software project template to create the Software project.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the latest code samples for this chapter from this book's official
    GitHub repository at [https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira](https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira).
    The Code in Action videos for this chapter are available at [https://bit.ly/2XPMdR7](https://bit.ly/2XPMdR7).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Conditions give us the ability to make our rules much more powerful and flexible
    as they enable us to both narrow the scope of our rules and, in the case of **if/else**
    blocks, alter the control flow of the rule.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at each of the conditions that we introduced in
    [*Chapter 1*](B16551_01_Final_ASB_ePub.xhtml#_idTextAnchor017), *Key Concepts
    of Automation*, in more detail, exploring what each of them can do and how we
    can make use of them in automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by taking a look at the **Issue fields condition**.
  prefs: []
  type: TYPE_NORMAL
- en: The Issue fields condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Issue fields condition is the simplest of the conditions. It allows you
    to test most Jira fields against certain criteria without requiring the use of
    smart values or **JQL** (short for **Jira Query Language**).
  prefs: []
  type: TYPE_NORMAL
- en: You can use it to compare a field against a value or set of values, and it can
    also be used to test the field against another field in either the same issue
    or certain related issues, such as a parent issue, an epic issue, a destination
    issue, or the issue that triggered the rule.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, these conditions can be chained together to form more complex conditions
    by using an additive operation.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The Issue fields condition should be used ahead of any of the other conditions
    wherever possible, as it is not only simpler to configure, but it also has performance
    benefits over conditions such as the JQL and Advanced compare conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at how we can use this condition in a rule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to generate sub-tasks for a story task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we''ll assume a development team has a requirement that every
    user story requires the following three sub-tasks to be created at the same time
    that the user story is created:'
  prefs: []
  type: TYPE_NORMAL
- en: Develop the feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform QA tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document the feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll create a rule that adds these sub-tasks when a user story is created
    to demonstrate the Issue fields condition:'
  prefs: []
  type: TYPE_NORMAL
- en: If you're using Jira Cloud, navigate to **Project settings** and click on the
    **Automation** tab of your Software project, or, for Jira Server, navigate to
    **Project settings**, click on the **Project automation** tab, and then click
    on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Issue created** as the trigger and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **New condition** and then select **Issue fields condition**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Field** to **Issue Type**, **Condition** to **equals**, and finally, set
    **Value** to **Story**, and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, select `Develop feature`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Perform QA tasks`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Document feature`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your rule should appear as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Completed Create sub-tasks rule'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.1 – Completed Create sub-tasks rule
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, name the rule `Create story sub-tasks` and click **Turn it on** to
    save and enable the rule as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Naming and enabling the automation rule'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.2_B16551_a.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Naming and enabling the automation rule
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have seen how we can use the Issue fields condition to create
    a decision point in a rule by simply selecting what we would like to evaluate
    from the available list of fields, conditions, and values.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at the JQL condition and how we can use this
    in our automation rules.
  prefs: []
  type: TYPE_NORMAL
- en: JQL condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **JQL condition** allows you to test an issue against any valid JQL query.
    In addition to standard JQL, smart values can also be used in the query. We will
    cover smart values in more detail in [*Chapter 3*](B16551_03_Final_ASB_ePub.xhtml#_idTextAnchor065),
    *Enhancing Rules with Smart Values*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can make use of the JQL condition in an example rule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to create a high-priority incident reminder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we want to ensure that the assigned team member updates a
    high-priority incident if it is about to breach and the reporter has not been
    informed of the progress of the incident within the last 15 minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Service Management project, navigate to **Project settings**, click
    on the **Automation** tab, and then click the **Create rule** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want to check when the Time to resolution SLA is about to breach within the
    next 30 minutes, so we select the **SLA threshold breached** trigger. Select **Time
    to resolution SLA** and then select the **will breach in the next** option, ensuring
    30 minutes is selected, and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select `type = Incident AND priority in (Highest, High) AND updated >=
    "-15m"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot demonstrates how your rule should look at this point:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Adding a JQL condition'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.2_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.3 – Adding a JQL condition
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We want the rule to notify the assignee by email, so select `Issue {{issue.key}}
    is about to breach without update`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, set the `The issue {{issue.key}} - {{issue.summary}} is about to breach
    in 30 minutes and requires an update.`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Please add a comment to the above issue or update it as required.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Many thanks,`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Jira Automation`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your rule should now look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The High priority incident reminder rule'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.3_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.4 – The High priority incident reminder rule
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, click `High priority incident reminder`, and then click **Turn it on**
    to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have seen how we can use any valid JQL query as a condition
    in our rules.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at how we can use the `User` condition in automation
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: User condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **User condition** allows you to check whether a particular type of user
    exists, and whether they are in a particular role or group or are a certain type
    of user. This condition also allows you to add multiple criteria in a single condition
    and you can specify whether *all* criteria should match or only *one* of the criteria
    specified is sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: Where this condition really shines though is in a Service Management project,
    where a customer can be a reporter, a request participant, or a member of a customer
    organization, and the User condition provides us with a criterion, *User is a
    customer*, to check a user against all of these conditions in a single operation.
    In addition, we can also check whether a user belongs to a particular organization
    and apply specific actions accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at how we can use this condition in a rule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to add a relationship manager to customer requests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this rule, we want to add the customer relationship manager as a watcher
    to any issues raised by users in our Service Management project from our more
    important customers. You will need to create the following organizations in your
    Service Management project and also create a few customers in each:'
  prefs: []
  type: TYPE_NORMAL
- en: Kate Price looks after *ACME* and *The Widget Co*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pete Kramer looks after *Rain Forest Books*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To add users to Jira so as to follow this example, you will need to supply each
    user with a unique email address. If your mail server supports email sub-addressing
    or tags, such as Gmail or Outlook 365, you can use this feature to create unique
    email addresses that get delivered to your own email. For example, if your email
    address is *your.name@yourcompany.com*, using the email address *your.name+kateprice@yourcompany.com*
    will be both unique and deliver emails to your inbox with the email tag *kateprice*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s create our rule:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Service Management project, navigate to **Project settings**, click
    the **Automation** tab, and then click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Issue created** as the trigger and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select `Reporter`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`is in organization`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`ACME, The Widget Co`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your condition should look as per the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.5 – User condition for a reporter in an organization'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.4_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.5 – User condition for a reporter in an organization
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **New Action**, followed by **Manage watchers**, select **Kate Price**
    in the **Add these watchers** field, and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `Reporter`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`is in organization`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Rain Forest Books`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **New Action**, followed by **Manage watchers**, select **Pete Kramer**
    in the **Add these watchers** field, and then click **Save**. Your rule should
    look like the following screenshot:![Figure 2.6 – Adding relationship managers
    as watchers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.5_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.6 – Adding relationship managers as watchers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name your rule `Add relationship manager to customer request` and then
    click **Turn it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we looked at how the User condition allows us to validate the
    existence of a user and whether a user belongs to a particular group, role, or
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll take a look at the Related issues condition and how we can use this
    to test for issues related to the trigger issue.
  prefs: []
  type: TYPE_NORMAL
- en: Related issues condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Related issues** condition allows you to check the state of issues related
    to the current issue in the rule context, be that the issue that triggered the
    rule, or each issue in a branch rule.
  prefs: []
  type: TYPE_NORMAL
- en: With this condition, you can check whether the related issues exist, whether
    all of them match a given JQL condition, or even whether only some of the related
    issues match the condition.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at an example rule that uses the **Related issues** condition.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to close parent bug or story tasks when all sub-tasks are complete
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When an issue has sub-tasks, we need to autoclose the main issue when all the
    sub-tasks attain **Done** status. We''ll need to use the Related issues condition
    to achieve this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Software project, navigate to **Project settings**, click on the **Automation**
    tab (or the **Project automation** tab if you're using Jira Server), and then
    click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Issue transitioned** trigger and then select **Done** in the **To**
    status field and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select `Issue Type`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Sub-task`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, select **Branch rule / related issues** and then select **Parent** as
    **Type of related issue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now select `Sub-tasks`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`All match specified JQL`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`status = Done`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your rule should now look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Configuring the Related issues condition'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.6_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.7 – Configuring the Related issues condition
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, select **New action** followed by **Transition issue**. In this case,
    the parent issue, either **Bug** or **Story**, shares the same final status as
    the sub-tasks, so we can leave **Destination status** as **Copy from trigger issue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Close parent when sub-tasks complete`, and then click **Turn it on**
    to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When a rule needs to work with related issues in other projects, it needs to
    be able to execute in those projects that contain the related issues and the rule
    should therefore be either a global or multi-project rule.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This means that only Jira global administrators will be able create and manage
    these rules.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this section, we have seen how to use the Related issues condition to perform
    actions against issues related to the issue that triggered the automation rule.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll take a look at the Advanced compare condition.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced compare condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For most rules, the Issue fields condition will be adequate; however, there
    will be times when you need that extra bit of flexibility when writing rules and
    this is where the **Advanced compare condition** comes in. This condition allows
    you to use compare smart values, functions and regular expressions against smart
    values or functions!
  prefs: []
  type: TYPE_NORMAL
- en: We will be looking at smart values and functions in detail in [*Chapter 3*](B16551_03_Final_ASB_ePub.xhtml#_idTextAnchor065),
    *Enhancing Rules with Smart Values*, so for now, let's take a look at a rule that
    uses this condition.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how we use the Advanced compare condition in an example
    rule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to reopen an issue when the reporter creates a comment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In most cases, when a customer creates a request, the service desk team, or
    indeed an automation rule, will resolve the request without further input from
    the customer. In some cases, however, the request may not have been resolved to
    the customer's satisfaction and instead of creating a new request, we want to
    be able to reopen the original request when a new comment is added by the customer
    who opened the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can leverage the Advanced compare condition to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Service Management project, navigate to **Project settings**, click
    the **Automation** tab, and then click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the **Issue commented** trigger and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select `{{comment.author.accountId}}`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{{issue.reporter.accountId}}`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your condition should look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/Figure_2.7_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.8 – Configuring the Advanced compare condition
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **accountId** field for users is only applicable to Jira Cloud. If you are
    using Jira Server or Jira Data Center, you will need to use *{{comment.author}}*
    and *{{issue.reporter}}* instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, select `Status`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Resolved`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now select **New action**, then **Transition issue**, and then set the **Destination
    status** field to **In Progress** and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, name your rule `Re-open ticket on reporter comment` and click **Turn
    it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we looked at when we should use the Advanced compare condition
    and how it allows us to compare items using smart values.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we'll explore the **if/else** block and how we can
    use it to perform alternate actions based on different conditions.
  prefs: []
  type: TYPE_NORMAL
- en: If/else block
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The if/else statement is arguably the most powerful condition in the automation
    toolbox. It allows us to perform alternate actions based on whether the specified
    conditions match.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how we can use the **if/else** block in an example rule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to define an incident priority matrix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The correct prioritization of an incident is critical in determining the relative
    importance of an issue. Relying on users to select the correct priority of incidents
    results, more often than not, in a large number of incidents being incorrectly
    prioritized.
  prefs: []
  type: TYPE_NORMAL
- en: It is more common practice to define the priority of incidents based on their
    impact and urgency instead. The following table shows a typical priority matrix
    based on the impact and urgency selected and we'll use this to help define our
    automation rule.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Incident priority matrix'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.8_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Incident priority matrix
  prefs: []
  type: TYPE_NORMAL
- en: We are going to create our rule in a Service Management project created using
    the IT Service Management template. We have adjusted the custom fields, **Impact**
    and **Urgency**, with the options shown in the preceding incident priority matrix.
    You will also need to add these two fields to the **Request** form for the Incident
    Request types in your Service Management project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the preceding matrix as a reference, let''s create our rule:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Service Management project, navigate to **Project settings**, click
    on the **Automation** tab, and then click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want this rule to trigger when the issue is created and also if any changes
    are made to either the **Impact** or **Urgency** fields, so we'll select the **Field
    value changed** trigger and then select the **Impact** and **Urgency** fields
    in the **Fields to monitor for changes** dropdown. We also want to trigger this
    rule only when an incident is created or edited, so we'll only select those two
    operations in the **For** dropdown and save our changes, as shown in the following
    screenshot:![Figure 2.10 – Incident priority matrix trigger
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.9_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.10 – Incident priority matrix trigger
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we'll add a **New condition** field and select **If/else** block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **If** block, we are going to configure our first criterion to test for
    the highest priority, when both **Impact** and **Urgency** are set to **High**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Add conditions…**, then **Issue fields condition**, set **Field** to
    **Impact**, **Condition** to **Equals**, select **High** in the **Value** field,
    and then repeat the exact same steps for the **Urgency** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your rule should now look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Configuring the If block'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.10_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.11 – Configuring the If block
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we need to add the action to perform when the preceding condition is met,
    so select **New action**, followed by **Edit issue**, find the **Priority** field
    in the **Choose fields to set…** dropdown, set **Value** to **Highest**, and then
    click **Save**.![Figure 2.12 – Editing the issue priority field
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.11_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.12 – Editing the issue priority field
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's build out the rest of the matrix. Click on **Add else** in the **Rule-chain**
    view and then on **Add conditions**, followed by **Issue fields condition**. Set
    **Field** to **Impact**, **Condition** to **Equals**, and **Value** to **High**.
    Repeat for the **Urgency** field, setting **Value** to **Medium**, and then click
    **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to add the action to perform when the **else** block condition is satisfied,
    so click on **New action**, followed by **Edit issue**. Then, set the **Priority**
    field to **High** in line with the preceding matrix:![Figure 2.13 – Adding the
    first Else-if block
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.12_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.13 – Adding the first Else-if block
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat *steps 6* and *7* for the remaining priorities in the incident priority
    matrix shown previously. You should end up with one **If** block followed by eight
    **Else-if** blocks corresponding to each intersection of **Impact** and **Urgency**
    in the priority matrix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, name the rule **Incident priority matrix**, and click **Turn it on**
    to save and enable it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have seen how we can use conditions to ensure we target
    the correct issues in our rule, and we have also learned how to control the flow
    of a rule using the powerful **If**/**else** block.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll take a look at branch rules and how to work with related issues.
  prefs: []
  type: TYPE_NORMAL
- en: Working with branch rules and related issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not often that issues exist in isolation. In fact, in many cases, there
    are always other issues that relate to any given issue. This could be in the form
    of sub-tasks, stories linked to a larger epic, or issues linked to other issues
    using relationships such as blocked, duplicated, and more.
  prefs: []
  type: TYPE_NORMAL
- en: You will therefore often come across situations when creating automation rules
    where you need to perform actions against not only the issue that triggered the
    rule, but also against issues related to the source issue.
  prefs: []
  type: TYPE_NORMAL
- en: This is where the **Branch** rule component and its companion condition, the
    **Related issues** condition, prove most useful, allowing you to create rules
    that can work across complex issue relationships.
  prefs: []
  type: TYPE_NORMAL
- en: Branch rule/related issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we use the Branch rule component to perform actions against a related issue
    or list of issues, the rule no longer executes in a linear fashion, instead expanding
    into multiple sub-branches representing each related issue. When using smart values,
    which we will discuss in more detail in the next chapter, the smart value *{{issue}}*
    refers to the related issue in the current sub-branch, and not the issue that
    triggered the rule, which can be found instead using the smart value *{{triggerIssue}}*.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Branches on *multiple issues* run in separate processes in parallel and there
    is therefore no guarantee that any one branch will finish execution before the
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the main branch will continue to execute before the sub-branches
    start.
  prefs: []
  type: TYPE_NORMAL
- en: If you have only a single related issue, the main branch will block until the
    sub-branch has completed its execution.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now see how we can use the Branch rule/related issues component in an
    example rule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to keep an Epic task in sync with its user story tasks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A common requirement in development projects is for Epic to transition to **In
    Progress** when the first story it contains transitions to In Progress. This is
    a perfect scenario for the Branch rules component. Let''s see how we can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Software project, navigate to **Project settings**, click on the **Automation**
    tab (or the **Project automation** tab if you're using Jira Server), and then
    click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Issue transitioned** trigger and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the **From status** field blank and select **In Progress** in the **To
    status** field and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select `Epic`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Matches specified JQL`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`status != "In Progress"`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now select **Branch rule / related issues** and set the **Type of related issues**
    field to **Epic (Parent)** and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, select **New action**, followed by **Transition issue**, choose **In
    Progress** as **Destination status**, and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your rule should now look as per the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Moving Epic to In Progress when the story changes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.13_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.14 – Moving Epic to In Progress when the story changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As always, the final step is to name your rule `Sync Epic status to stories`
    and then click **Turn it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have learned in this section how we can make use of the Branch rules component
    to create powerful rules enabling us to target issues related to the issue that
    triggered the rule.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at editing issue fields in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Editing issue fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the majority of your automation rules, you will be editing information in
    issues. In this section, we are going to cover some of the more common actions
    you will need to understand when creating your rules, including assignments, commenting
    on issues, linking issues to other issues and, of course, editing fields within
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the more tedious tasks usually encountered in Jira is having team members
    track a queue of unassigned issues and take ownership of these issues. The other
    common approach is to have someone such as a team lead go through these issues
    and apportion them off to members of the team based on certain criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can instead use automation to handle these tasks for us, and the following
    list is a few of the capabilities we have at our disposal when it comes to assigning
    issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Assigning based on current workload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning in a round-robin fashion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning to a previous assignee or commenter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning from a related issue or JQL query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at how we can use this in a rule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to autoassign incoming bugs to developers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this rule, we are going to assign any incoming issue of the bug type to
    the development team based on how much work each team member currently has, as
    long as the issue does not already have an assigned user. The development team
    are all members of the developer role in the project:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Software project, navigate to **Project settings**, click on the **Automation**
    tab (or the **Project automation** tab if you're using Jira Server), and then
    click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Issue created** trigger and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we need to ensure that we only assign issues of the bug type. Select **New
    condition** and then choose **Issue fields condition**. Set the **Field** to **Issue
    Type**, **Condition** to **Equals**, **Value** to **Bug**, and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to execute assignment of the new issue. Do this by selecting **New
    action** and then choosing **Assign issue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Assign the issue to** field, select **User** in a role. Then, select
    **Balanced workload** in the **Method to choose assignee** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Because we don''t want to reassign any issues that already have an assignee
    set, we need to add a further restriction using JQL. Type the following query
    in the **JQL to restrict issues** field:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, set **Role** to **Developers** and then click **Save**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Assigning users using Balanced workload'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.14_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.15 – Assigning users using Balanced workload
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the final screen, name the rule `Auto assign incoming bugs` and then click
    **Turn it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you are using Jira Server, you must ensure that the rule actor has the **Assign
    Issues** permission in order to assign issues to users. In Jira Cloud, the default
    permissions are designed to ensure that users in the *atlassian-addons-project-access*
    role, such as *Automation app user*, have the necessary permissions to edit and
    assign issues and you should only need to adjust this if you have made changes
    to the default permissions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this section, we have seen how to use the **Assign issues** action to assign
    issues to users using various scenarios, including based on individual workload,
    round-robin, randomly, or by using input from related issues or queries.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at how to use the **Edit issue** fields action
    to update issues.
  prefs: []
  type: TYPE_NORMAL
- en: Edit issue fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The ability to edit fields within an issue is one of the main objectives of
    automation rules and a number of rule actions provide this functionality, these
    being the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloning an issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing an issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitioning an issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The field editors are very flexible and allow you to clear values from fields,
    set new values, and even copy values from other fields within the current issue,
    a parent issue, trigger issue, epic issue, or destination issue.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you are able to edit multiple fields in a single action and most
    fields support smart values and functions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at a rule to see how to use this action in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to align user story due dates and fix versions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, when starting a sprint, we will update all the stories within
    that sprint, set the due date to the end date of the sprint, and set the fix version
    to the next unreleased version in the project:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Scrum Software project, navigate to **Project settings**, click on the
    **Automation** tab (or the **Project automation** tab if you're using Jira Server),
    and then click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Sprint started**, choose your Scrum board from the **Boards** available
    and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the **Branch rules / related issues** component and, in the **Type
    of related issues** field, select **Issues** in the sprint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select `{{sprint.endDate}}`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Next unreleased version`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: TIP
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have used a smart value for the **Due date** field in this example and you
    can find the list of smart values which can be used in a rule at [https://support.atlassian.com/jira-software-cloud/docs/smart-values-general](https://support.atlassian.com/jira-software-cloud/docs/smart-values-general).
    We will cover smart values and smart value functions in more detail in [*Chapter
    3*](B16551_03_Final_ASB_ePub.xhtml#_idTextAnchor065), *Enhancing Rules with Smart
    Values*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your rule should look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Editing issue fields'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.15_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.16 – Editing issue fields
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name your rule `Align story version and dates to sprint` and click
    **Turn it on** to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we covered some of the more common actions you will be using
    when creating automation rules. We learned how you can use the different algorithms
    to assign issues to team members in a more intelligent fashion, and we also learned
    how we can use actions to make modifications to issue fields.
  prefs: []
  type: TYPE_NORMAL
- en: In certain cases, we may need more flexibility to edit issues and, in the next
    section, we will explore how to use the available advanced field editing functionality
    to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced field editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not all fields in Jira are created equal, and more especially in the case of
    custom fields provided by third-party apps. In these cases, where it is not possible
    to update the fields using the default functionality provided by the actions,
    an **advanced field editor** is provided that we can utilize to apply the field
    updates we require.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will take a look at the advanced field editor and how we
    can use it to take advantage of those situations when we cannot use the standard
    field editors.
  prefs: []
  type: TYPE_NORMAL
- en: The advanced field editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The advanced field editor is present in a number of actions under the **More
    options** section and allows you to specify the fields to edit using a JSON object
    using the format specified in Jira's REST API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The actions that allow advanced field editing are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloning an issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Service Management request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing an issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitioning an issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we look at how to use the advanced field editor, we'll first need to
    understand how the JSON object required by the field editor is structured.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the JSON object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two attributes that we can use in the JSON object:'
  prefs: []
  type: TYPE_NORMAL
- en: '**update**: You can use any of the supported field operations, such as add,
    set or remove, in the update attribute. It is most useful for fields with multiple
    values where you want to add values to, or remove values from, the existing set
    of values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fields**: This attribute is a shortcut for calling the update attribute with
    the set operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The fields you can use in the advanced editor within either the **update**
    or **fields** attribute depends on whether you''re using the advanced editor when
    creating a new issue or editing an existing one, and these fields can be found
    by using one of the following REST API calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '*createmeta:* `https://<yourjira.domain.com>/rest/api/latest/issue/createmeta?projectKeys={projectKey}&expand=projects.issuetypes.fields`
    or'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*editmeta*: `https://<yourjira.domain.com>/rest/api/latest/{issueKey}/editmeta`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The response from these calls will return a JSON object listing all the fields
    available when creating or editing the issue, including the possible operations
    and values for each. You can read more about finding fields using the REST API
    in the official documentation available at [https://support.atlassian.com/jira-software-cloud/docs/advanced-field-editing-json/](https://support.atlassian.com/jira-software-cloud/docs/advanced-field-editing-json/).
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: These API calls return a list of fields on the corresponding create or edit
    screen configured for the project and issue type. If you cannot find a field in
    the returned JSON, you will need to add it to the corresponding screen first.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at how we could use the advanced field editor in a rule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to demonstrate the advanced field editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To demonstrate how to use the advanced field editing functionality, we are going
    to use a somewhat contrived situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this rule, we''ll look for the word *printer* in the summary or description
    field and then add the **Printers** component to the **Component** field, add
    a new label, and update the description field. Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Service Management project, navigate to **Project settings**, click
    the **Automation** tab, and then click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the **Issue created** trigger and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new **Issue fields condition**, set **Issue Type** equal to **Service
    Request**, and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new `summary ~ printer OR description ~ printer`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an **Edit issue** action, expand the **More options** section, and then
    set **Additional fields** to the following JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: TIP
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The JSON structure used in the advanced field editor is based on the Jira REST
    API which you can learn more about at [https://developer.atlassian.com/cloud/jira/platform/rest](https://developer.atlassian.com/cloud/jira/platform/rest)
    for Jira Cloud and at [https://developer.atlassian.com/server/jira/platform/rest-apis](https://developer.atlassian.com/server/jira/platform/rest-apis)
    for Jira Server and Jira Data Center.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your rule should look similar to the following screenshot:![Figure 2.17 – Advanced
    field editing rule
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.16_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.17 – Advanced field editing rule
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, click `Advanced field editing example`, and then click **Turn it on**
    to save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have learned how to use the advanced field editor to update
    issue fields when the default field editors are not sufficient. We have also learned
    how to leverage the REST API to understand which fields are available and how
    to correctly format the JSON data in the advanced editor.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will look at how to transition an issue through
    a workflow using automation.
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira, whether you're working in a Software, Service Management or Business project,
    is all about being able to track the progress of an issue through a particular
    workflow. The ability to automate the **transitioning** of an issue through the
    various statuses in the workflow is therefore key to completing the loop in terms
    of working with issues.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to learn how we can use automation to react to
    state transitions of an issue through its workflow, as well as how we can transition
    an issue through subsequent statuses within its workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Transitions and workflows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have mentioned, we can use automation to transition an issue through a
    workflow and, to be able to achieve this, your rules must be aligned to that issue
    type's particular workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the following workflow, which represents a service request
    in a Jira Service Management project, we could automate the transition from **In
    Progress** to **Pending**; however, as there is no direct transition from **In
    Progress** to **Closed**, any automation rule attempting to perform this transition
    would result in the rule failing and an error being recorded in the audit log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – A service request workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.17_B16551.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.18 – A service request workflow
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the workflow representation in the preceding diagram, automation
    rules can only transition issues through a workflow where a transition already
    exists between two statuses in that workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Another point to consider is that the rule actor must have permission to perform
    the particular transition. If, for example, you have a condition on the workflow
    transition that restricts it to certain users or groups, you will need to adjust
    the condition to allow the rule actor to also be allowed to perform the transition.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at how we can transition issues through their workflow in an automation
    rule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to automatically escalate requests to the correct team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s assume a service desk team is usually inundated with requests, so, in
    order to free up some of their time, we want to automatically escalate any requests
    that we know are infrastructure-related to a member of the infrastructure team.
    We''ll use the workflow in *Figure 2.17* as a guide:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Service Management project, navigate to **Project settings**, click
    the **Automation** tab, and then click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Waiting for support` in the **To** status field, and finally click
    **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we select `Components`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`contains any of`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Cloud Storage Services, Data Center Services, Office Network`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now select **New action**, then **Transition issue**, and set **Destination
    status** to **Escalated**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we could choose to set the **Assignee** field to a particular
    user; however, we want to distribute any tasks evenly across the infrastructure
    team, so click **Save**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your rule should now look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Transitioning an issue to ESCALATED'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.18_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.19 – Transitioning an issue to ESCALATED
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's add the assignment next. Select `User in a group`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Round-robin`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Infrastructure Team`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, name your rule `Auto-escalate requests` and click **Turn it on** to
    save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, you have learned how to create rules to respond to state transitions
    of an issue, as well as how you can automatically transition an issue to the next
    status in its workflow.
  prefs: []
  type: TYPE_NORMAL
- en: In the final section of this chapter, we will look at how you can use automations
    to schedule recurring tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first things people think about when you mention automation is the
    ability to create issues on a scheduled basis, and with automation in Jira, this
    is a relatively straightforward task to achieve. In conjunction with the rest
    of the components we have already discussed, this gives you great flexibility
    in terms of what you can achieve.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at how you can use the **Scheduled** trigger to
    perform a variety of tasks that need to be performed at defined intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduled trigger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Scheduled trigger** allows us to run rules at specified intervals. We
    can use either a fixed rate interval in our rule, or we can use a **cron** expression
    to create a more complex schedule.
  prefs: []
  type: TYPE_NORMAL
- en: Fixed rate intervals are pretty straightforward; you specify how often the rule
    should trigger in minutes, hours, or days, and the automation engine will initiate
    execution of the rule based on the interval.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When you use a fixed rate interval of hours or days, the automation engine will
    consider the starting time of the interval to be the time you saved or updated
    the rule. For example, if you have a schedule running daily and you save the rule
    at 09:21, it will run at 09:21 every day until you edit and save the rule at a
    different time.
  prefs: []
  type: TYPE_NORMAL
- en: Cron expressions give you greater flexibility over when your rule will trigger.
    Using cron expressions allows you to define schedules such as kicking off the
    rule every Monday and Friday at 8:30 a.m. You can find much more detailed information
    on creating cron expressions in Jira at [https://support.atlassian.com/jira-software-cloud/docs/construct-cron-expressions-for-a-filter-subscription/](https://support.atlassian.com/jira-software-cloud/docs/construct-cron-expressions-for-a-filter-subscription/).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Writing cron expressions is not always intuitive or straightforward. I'd recommend
    that you use a site such as CronMaker ([https://www.cronmaker.com](https://www.cronmaker.com))
    to help you build cron expressions that are compatible with Jira automation. Note
    that Jira cron expressions have a **seconds** field, whereas some cron expression
    generators only support resolution down to minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first take a look at how we can use a fixed rate interval in a scheduled
    rule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to close out stale issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we''ll look at how we can resolve any requests that have been
    waiting for customer feedback for longer than 5 days:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Service Management project, navigate to **Project settings**, click
    on the **Automation** tab, and then click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `status = "Waiting for customer" AND updated > -5d`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your rule should look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Scheduling a fixed rate rule'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.19_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.20 – Scheduling a fixed rate rule
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we'll add a comment to the issue that will fire a notification to the
    customer that we're auto-closing their request, so we'll select `Dear {{issue.reporter.displayName}},`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`We haven''t heard from you for a while, so we''re closing this issue.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`If you feel this is incorrect, please reply to this message and we''ll re-open
    this request for you.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Kind regards,`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`The Service Team`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then we'll transition the issue to **Resolved**. Select **New action**, **Transition
    issue**, and set the **Destination status** field to **Resolved**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click `Auto-resolve stale issues`, and then click **Turn it on** to
    save and enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we've seen how the fixed rate interval works, let's take a look at
    how to use a cron expression to create a more precise schedule.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to generate recurring start-of-week tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, let''s look at how we can use the Scheduled trigger to create weekly
    tasks for the Service Management every Monday morning. We will create a single
    main task to track this and add sub-tasks as required to this main task. The due
    date for this task should be within 1 day:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Service Management project, navigate to **Project settings**, click
    the **Automation** tab, and then click on **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `0 0 9 ? * MON *`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your trigger should look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Setting a scheduled trigger with a cron expression'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.20_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.21 – Setting a scheduled trigger with a cron expression
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select `Task`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Start of week checks`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{{now.plusDays(1)}}`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, select **Branch rule / related issues** and **All created issues** as
    **Type of related issue** and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, click **New action**, **Create sub-tasks**, and add as many sub-tasks
    as required for the actions you want to check. For this example, we''ll add two
    sub-tasks: **Check weekend access logs** and **Other tasks**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your rule should look similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Creating a scheduled weekly task'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.21_B16551.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.22 – Creating a scheduled weekly task
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, click `Start-of-week checks`, and click **Turn it on** to save and
    enable the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have seen how to use the Scheduled trigger to automate both
    the creation of tasks on a regular basis as well as how we can leverage scheduling
    to perform maintenance tasks at defined intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how we can use automation rules to work with
    issues in Jira. We have explored rule conditions in more detail and how you can
    use these to accurately target issues in your rules.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we introduced branch rules and learned how to author rules that target
    not only the issue that triggered a rule, but also its related issues, and then
    we introduced the most common actions involved in making changes to your issues.
  prefs: []
  type: TYPE_NORMAL
- en: We then learned how to use the advanced field editor for those situations where
    the standard rule actions are not sufficient and also learned how to transition
    issues through their workflows automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at how to use the scheduling capability of rules to perform
    tasks on a regular basis using both fixed rate scheduling and cron expressions
    for finer control over our schedules.
  prefs: []
  type: TYPE_NORMAL
- en: These skills form the basis of working with issues in automation rules and we'll
    be using all of them throughout the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be learning about smart values and smart value functions
    and how we can use these to take your automation rules to the next level.
  prefs: []
  type: TYPE_NORMAL
