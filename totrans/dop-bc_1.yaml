- en: DevOps Concepts and Assessment Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have an innovation culture, even those who are not scientists or engineers
    - poets, actors, journalists - they, as communities, embrace the meaning of what
    it is to be scientifically literate. They embrace the concept of an innovation
    culture. They vote in ways that promote it. They don't fight science and they
    don't fight technology
  prefs: []
  type: TYPE_NORMAL
- en: -  Neil deGrasse Tyson
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how to quickly get an understanding of DevOps
    from 10,000 feet, with best practices on how to prepare for changing a culture.
    This will allow us to build the foundations of the DevOps concepts by discussing
    what our goals are, as well as getting buy-in from organization management. Basically,
    we will try to cover DevOps practices that can make application life cycle management
    easy and effective.
  prefs: []
  type: TYPE_NORMAL
- en: It is very important to understand that DevOps is not a framework, tool, or
    technology. It is more about the culture of an organization. It is also a way
    people work in an organization using defined processes and by utilizing automation
    tools to make daily work more effective and less manual.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand the basic importance of DevOps, we will cover the following topics
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Need for DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How DevOps culture can evolve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importance of PPT—people, process, and technology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why DevOps is not all about tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps assessment questions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Need for DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a famous quote by *Harriet Tubman* which you can find on ([http://harriettubmanbiography.com](http://harriettubmanbiography.com)).
    It says :'
  prefs: []
  type: TYPE_NORMAL
- en: Every great dream begins with a dreamer. Always remember, you have within you
    the strength, the patience, and the passion to reach for the stars to change the
    world .
  prefs: []
  type: TYPE_NORMAL
- en: Change is the law of life and that is applicable to organizations as well. If
    any organization or individual looks only at the past or present patterns, culture,
    or practices, then they are certain to miss future best practices. In the dynamic
    IT world, we need to keep pace with the technology evolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can relate to *George Bernard Shaw*''s saying:'
  prefs: []
  type: TYPE_NORMAL
- en: Progress is impossible without change, and those who cannot change their minds
    cannot change anything.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are focusing on changing the way we manage the application life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: The important question is whether we really need this change? Do we really need
    to go through the pain of this change?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is yes.
  prefs: []
  type: TYPE_NORMAL
- en: One may say that such kinds of change in business or culture must not be forceful.
  prefs: []
  type: TYPE_NORMAL
- en: Agree.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s understand the pain points faced by organizations in application life
    cycle management in the modern world with the help of the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00219.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Considering the changing patterns and competitive environment in business, it
    is the need of the hour to improve application life cycle management.
  prefs: []
  type: TYPE_NORMAL
- en: Are there any factors that can be helpful in these modern times which can help
    us to improve application life cycle management?
  prefs: []
  type: TYPE_NORMAL
- en: Yes. Cloud computing has changed the game. It has opened doors for many path-breaking
    solutions and innovations. Let’s understand what cloud computing really means
    and how terms like DevOps and automation play an important role for enterprise
    companies.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of cloud computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud computing is the next logical step in terms of the evolution of computing.
    From traditional data centers and virtualization, to hybrid environments, private,
    public, and hybrid cloud services, cloud computing is a type of computing that
    provides multitenant or dedicated computing resources such as compute, storage,
    and network, which are delivered to cloud consumers on demand. It comes in different
    flavors which include **cloud deployment models** and **cloud service models**.
    The most important thing in this is the way its pricing model works, which is
    pay-as-you-go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cloud deployment models describe the way cloud resources are deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: '1) **Private cloud**: private cloud consists of cloud resources that are behind
    the firewall and on-premise exclusively for a specific organization'
  prefs: []
  type: TYPE_NORMAL
- en: 2) **Public cloud:** public cloud consists of cloud resources that are available
    to all organizations and individuals
  prefs: []
  type: TYPE_NORMAL
- en: '3) **Hybrid cloud**: hybrid cloud consists of cloud resources that are available
    to a specific set of organizations that share similar types of interests or similar
    types of requirements'
  prefs: []
  type: TYPE_NORMAL
- en: '4) **Community cloud**: community cloud consists of cloud resources that combine
    two or more deployment models'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud service models describe the way cloud resources are made available to
    customers of all kinds, from individuals and small organizations, to large enterprises.
  prefs: []
  type: TYPE_NORMAL
- en: It can be in the form of pure infrastructure, where virtual machines are accessible
    and controlled by cloud consumers or end users, that is, **Infrastructure as a
    Service** (**IaaS**); or a platform where runtime environments are provided so
    that the installation and configuration of all software needed to run the application
    is already available and managed by cloud service providers, that is, **Platform
    as a service** (**PaaS**); or **Software as a Service** (**SaaS**), where the
    whole application is made available by cloud service providers with the responsibility
    of infrastructure and the platform remaining with the cloud service provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many Service Models that have emerged during the last few years,
    but IaaS, PaaS, and SaaS are based on the **National Institute of Standards and
    Technology** (**NIST**) definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00220.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Cloud computing has a few characteristics that are significant such as multitenancy,
    pay-as-you-use similar to electricity or gas connection, On Demand Self Service,
    Resource Pooling for better utilization of compute, storage, and network resources,
    Rapid Elasticity for scaling up and scaling down resources, based on needs, in
    an automated fashion, and Measured Service for billing.
  prefs: []
  type: TYPE_NORMAL
- en: Over the years, the usage of different cloud deployment models has varied based
    on use cases. Initially, public cloud was used for applications that were considered
    noncritical, while private cloud was used for critical applications where security
    was a major concern.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid cloud and public cloud usage has evolved over time, with the experience
    and confidence in the services provided by cloud service providers. Similarly,
    the usage of different cloud service models has varied based on use cases and
    flexibility. IaaS was the most popular in the early days, but PaaS is catching
    up in its maturity and ease of use with enterprise capabilities such as auto-scaling,
    support for multiple programming languages, and support for end-to-end application
    life cycle management tools.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps is all about the culture of an organization, processes, and technology
    to develop communication and collaboration between development and IT operations
    teams to manage the application life cycle more effectively than the existing
    ways of doing it. We often tend to work based on patterns to find reusable solutions
    from similar kinds of problems or challenges.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Over the years, achievements and failed experiments, best practices, automation
    scripts, configuration management tools, and methodologies have become an integral
    part of DevOps culture.
  prefs: []
  type: TYPE_NORMAL
- en: It helps to define practices for a way of designing, a way of developing, a
    way of testing, a way of setting up resources, a way of managing environments,
    a way of configuration management, a way of deploying an application, a way of
    gathering feedback, a way of code improvements, and a way of doing innovations.
  prefs: []
  type: TYPE_NORMAL
- en: The following are some of the visible benefits that can be achieved by implementing
    DevOps practices.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00224.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: DevOps culture is considered an innovative package to integrate Dev and Ops
    teams in an effective manner that includes components such as continuous build
    integration, continuous testing, cloud resource provisioning, continuous delivery,
    continuous deployment, continuous monitoring, continuous feedback, continuous
    improvement, and continuous innovation to make application delivery faster, as
    per the demands of agile methodology. Evolving a culture is not an overnight journey.
    It takes a long time. However, there are also confusions regarding what DevOps
    is, hence, often only continuous integration or configuration management practices
    are considered as a DevOps practices implementation. It is a scenario similar
    to that of the elephant and five blind men, where every man touches a specific
    part of his body and assumes that to be an elephant.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is not only the development and operations teams that are involved.
    The testing team, business analysts, build engineers, automation team, cloud team,
    and many other stakeholders are involved in this exercise of evolving the existing
    culture.
  prefs: []
  type: TYPE_NORMAL
- en: The DevOps culture is not much different than the organization culture, which
    has shared values and behavioral aspects. It needs adjustment in mindsets and
    processes to align with new technology and tools.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges for the development and operations teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some challenges, which is why this scenario has occurred and that
    is why DevOps is going in the upward direction and is the talk of the town in
    all information technology related discussions.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges for the development team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developers are enthusiastic and willing to adopt new technologies and approaches
    to solve problems. However, they face many challenges, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The competitive market creates pressure for on-time delivery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They have to take care of production-ready code management and new feature implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release cycle is often long, hence, the development team has to make assumptions
    before the application deployment finally takes place. In such a scenario, it
    takes more time to fix the issues that occur during deployment in the staging
    or production environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenges for the operations team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The operations team is always careful in changing resources or using any new
    technologies or new approaches, as they want stability. However, they face many
    challenges, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Resource contention: it''s difficult to handle increasing resource demands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Redesigning or tweaking: this is needed to run the application in the production
    environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Diagnosing and rectifying: they are supposed to diagnose and rectify issues
    after application deployment in isolation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenges for the IT team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The IT team provides resources to the respective teams to carry out the operations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Infrastructure provisioning: to provide infrastructure and a runtime environment
    with proper package installation on resources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configuration management: to upgrade the existing infrastructure or packages
    based on updates available in tools or technologies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering all the challenges faced by the development and operations teams,
    how should we improve existing processes, make use of automation tools to make
    processes more effective, and change people's mindset? Let's see in the next section
    on how to evolve the DevOps culture in an organization and improve efficiency
    and effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: How can DevOps culture evolve?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inefficient estimation, a long time to market, and other issues led to a change
    in the waterfall model, resulting in the agile model. Evolving a culture is not
    a time-bound or overnight process. It can be a step-by-step and stagewise process
    that can be achieved without dependencies on the other stages.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can achieve continuous integration without **Cloud Provisioning**. We can
    achieve **Cloud Provisioning** without **Configuration Management**. We can achieve
    **Continuous Testing** without any other DevOps practices. The following are different
    stages to achieve DevOps practices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00225.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Agile development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Agile development or agile-based methodologies are useful for building an application
    by empowering individuals and encouraging interactions, giving importance to working
    software, customer collaboration—using feedback for improvement in subsequent
    steps—and responding to change in an efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most attractive benefits of agile development is continuous delivery
    in short time frames or, in agile terms, sprints. Thus, the agile approach of
    application development, improvement in technology, and disruptive innovations
    and approaches have created a gap between the development and operations teams.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps attempts to fill these gaps by developing a partnership between the development
    and operations teams. The DevOps movement emphasizes communication, collaboration,
    and integration between software developers and IT operations.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps promotes collaboration, and collaboration is facilitated by automation
    and orchestration in order to improve processes. In other words, DevOps essentially
    extends the continuous development goals of the agile movement to continuous integration
    and release.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is a combination of agile practices and processes, leveraging the benefits
    of cloud solutions. Agile development and testing methodologies help us meet the
    goals of continuously integrating, developing, building, deploying, testing, and
    releasing applications.
  prefs: []
  type: TYPE_NORMAL
- en: Build automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An automated build helps us create an application build using build automation
    tools such as Gradle, Apache Ant, and Apache Maven.
  prefs: []
  type: TYPE_NORMAL
- en: An automated build process includes activities such as compiling source code
    into class files or binary files, providing references to third-party library
    files, providing the path of configuration files, packaging class files or binary
    files into package files, executing automated test cases, deploying package files
    on local or remote machines, and reducing manual effort in creating the package
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In simple words, continuous integration or CI is a software engineering practice,
    where each check-in made by a developer is verified by either of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pull mechanism**: executing an automated build at a scheduled time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Push mechanism**: executing an automated build when changes are saved in
    the repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This step is followed by executing a unit test against the latest changes available
    in the source code repository. Continuous integration is a popular DevOps practice
    that requires developers to integrate code into code repositories such as Git
    and SVN multiple times a day to verify the integrity of the code.
  prefs: []
  type: TYPE_NORMAL
- en: Each check-in is then verified by an automated build, allowing teams to detect
    problems early.
  prefs: []
  type: TYPE_NORMAL
- en: CI, and even CD, is the baseline for companies to even archive DevOps. We can’t
    do DevOps without good CI and CD implementations in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud provisioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already covered the basics of cloud computing earlier in the chapter.
    Cloud provisioning has opened the door to treat **Infrastructure as Code** (**IAC**),
    and that makes the entire process extremely efficient and effective, as we are
    automating a process which involved manual intervention to a huge extent.
  prefs: []
  type: TYPE_NORMAL
- en: The pay-as-you-go billing model has made the required resources more affordable
    to not only large organizations, but also to mid and small scale organizations,
    as well as individuals.
  prefs: []
  type: TYPE_NORMAL
- en: It helps to go for improvements and innovations, as earlier resource constraints
    were blocking organizations from going the extra mile because of cost and maintenance.
    Once we have agility in infrastructure resources, we can then think of automating
    the installation and configuration of packages that are required to run the application.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Configuration management** (**CM**) manages changes in the system or, to
    be more specific, the server runtime environment. There are many tools available
    in the market with which we can achieve configuration management. The popular
    tools are Chef, Puppet, Ansible, Salt, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's consider an example where we need to manage multiple servers with the
    same kind of configuration.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we need to install Tomcat on each server. What if we need to change
    the port on all servers, update some packages, or provide rights to some users?
    Any kind of modification in this scenario is a manual and, if so, error-prone
    process. As the same configuration is being used for all the servers, automation
    can be useful here.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous delivery and continuous deployment are used interchangeably. However,
    there is a small difference between them.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous delivery is process of deploying an application in any environment
    in an automated fashion and providing continuous feedback to improve its quality.
  prefs: []
  type: TYPE_NORMAL
- en: An automated approach may not change in continuous delivery and continuous deployment.
    The approval process and some other minor things can change.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous testing and deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous testing is the very important phase of the end-to-end application
    life cycle management process. It involves functional testing, performance testing,
    security testing, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium, Appium, Apache JMeter, and many other tools can be utilized for the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous deployment, on the other hand, is all about deploying an application
    with the latest changes to the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous monitoring is a backbone of the end-to-end delivery pipeline, and
    open source monitoring tools are like toppings on an ice cream scoop.
  prefs: []
  type: TYPE_NORMAL
- en: It is desirable to have monitoring at almost every stage in order to have transparency
    about all the processes, as shown in the following diagram. It also helps us troubleshoot
    quickly. Monitoring should be a well thought-out implementation of a plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to depict the entire process as a continuous approach in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00227.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We need to understand here that it is a phased approach and it is not necessary
    to automate every phase of automation at once. It is more effective to take one
    DevOps practice at a time, implement it and realize its benefit before implementing
    another one.
  prefs: []
  type: TYPE_NORMAL
- en: This way we are safe enough to assess the improvements of changing the culture
    in the organization and remove manual efforts from the application life cycle
    management.
  prefs: []
  type: TYPE_NORMAL
- en: Importance of PPT - people, process, and technology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PPT is an important word in any organization. Wait! We are not talking about
    Powerpoint Presentation. Here, we are focusing on people, processes, and tools/technology.
    Let's understand why and how they are important in changing the culture of any
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: People
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the famous quote from Jack Canfield :'
  prefs: []
  type: TYPE_NORMAL
- en: Successful people maintain a positive focus in life no matter what is going
    on around them. They stay focused on their past successes rather than their past
    failures, and on the next action steps they need to take to get them closer to
    the fulfillment of their goals rather than all the other distractions that life
    presents to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'A curious question could be, why do people matter? If we try to answer this
    in one sentence, then it would be: Because we are trying to change culture.'
  prefs: []
  type: TYPE_NORMAL
- en: So?
  prefs: []
  type: TYPE_NORMAL
- en: People are an important part of any culture and only people can drive the change
    or change themselves to adapt to new processes or define new processes and learn
    new tools or technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand how and why with the *Formula for Change*.
  prefs: []
  type: TYPE_NORMAL
- en: David Gleicher created the *Formula for Change* in the early 1960s, as per references
    available in Wikipedia. Kathie Dannemiller refined it in 1980\. This formula provides
    a model to assess the relative strengths affecting the possible success of organizational
    change initiatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gleicher (original) version***:** C = (ABD) > X, **where: C = change, A = the
    status quo dissatisfaction, B = a desired clear state, D = is practical steps
    to the desired state, X = the cost of the change.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dannemiller version:** *D x V x F > R;  where D, V, and F must be present
    for organizational change to take place where: D = Dissatisfaction with how things
    are now, V = Vision of what is possible, F = First concrete steps that can be
    taken toward the vision. If the product of these three factors is greater than
    R = Resistance, then change is possible.*'
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, it implies that there has to be strong dissatisfaction with existing
    things or processes, vision of what is possible with new trends, technologies,
    and innovations with respect to the market scenario; concrete steps that can be
    taken toward achieving the vision.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details on *Formula for Change*, you can visit this wiki page: [https://en.wikipedia.org/wiki/Formula_for_change#cite_note-myth-1](https://en.wikipedia.org/wiki/Formula_for_change#cite_note-myth-1)'
  prefs: []
  type: TYPE_NORMAL
- en: If it comes to sharing an experience, I would say it is very important to train
    people to adopt a new culture. It is a game of patience. We can't change the mindset
    of people overnight and we need to understand first before changing the culture.
  prefs: []
  type: TYPE_NORMAL
- en: Often, it is observed in the industry, that job opening with a DevOps knowledge
    or DevOps engineers, but ideally they should not be imported and people should
    instead be trained in the existing environment by changing things gradually to
    manage resistance. We don't need a special DevOps team; we need more communication
    and collaboration between developers, test teams, automation enablers, and the
    cloud or infrastructure team.
  prefs: []
  type: TYPE_NORMAL
- en: It is essential for all to understand the pain points of each other. In the organizations
    I have worked, we used to have a **Center of Excellence** (**COE**) in place to
    manage new technologies, innovations, or culture. As an automation enabler and
    part of the DevOps team, we should be working as a facilitator only and not a
    part of the silo.
  prefs: []
  type: TYPE_NORMAL
- en: Processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a famous quote from *Tom Peters*, which says:'
  prefs: []
  type: TYPE_NORMAL
- en: Almost all quality improvement comes via simplification of design, manufacturing...
    layout, processes, and procedures
  prefs: []
  type: TYPE_NORMAL
- en: Quality is extremely important when we are dealing with evolving a culture.
    We need processes and policies for doing things in a proper way and standardized
    across the projects so the sequence of operations, constraints, rules and so on
    are well defined to measure success.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to set processes for the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Agile planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource planning and provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Role-based access control to cloud resources and other tools used in automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static code analysis – rules for programming languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing methodology and tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These processes are also important for measuring success in the process of evolving
    DevOps culture.
  prefs: []
  type: TYPE_NORMAL
- en: Technology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a famous quote from *Steve Jobs*, which says:'
  prefs: []
  type: TYPE_NORMAL
- en: Technology is nothing. What's important is that you have a faith in people,
    that they're basically good and smart, and if you give them tools, they'll do
    wonderful things with them.
  prefs: []
  type: TYPE_NORMAL
- en: Technology helps people and organizations to bring creativity and innovations
    while changing the culture. Without technology, it is difficult to achieve speed
    and effectiveness in the daily and routine automation operations. Cloud computing,
    configuration management tools, and the build pipeline are among a few that are useful
    in resource provisioning, installing a runtime environment, and orchestration.
    Essentially, it helps to speed up different aspects of application life cycle
    management.
  prefs: []
  type: TYPE_NORMAL
- en: Why DevOps is not all about tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes, tools are nothing. They are not that important a factor in changing the
    culture of any organization. The reason is very simple. No matter what technology
    we use, we will perform continuous integration, cloud provisioning, configuration
    management, continuous  delivery, continuous deployment, continuous monitoring,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Categorywise, different tool sets can be used, but all perform similar operations.
    It is just the way that tool performs a certain operation that differs, else the
    outcome is the same. The following are some of the tools based on the categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Category** | **Tools** |'
  prefs: []
  type: TYPE_TB
- en: '| **Build automation** | Nant, MSBuild, Maven, Ant and Gradle |'
  prefs: []
  type: TYPE_TB
- en: '| **Repository** | Git and SVN |'
  prefs: []
  type: TYPE_TB
- en: '| **Static code analysis** | Sonar and PMD |'
  prefs: []
  type: TYPE_TB
- en: '| **Continuous integration** | Jenkins, Atlassian Bamboo, and VSTS |'
  prefs: []
  type: TYPE_TB
- en: '| **Configuration management** | Chef, Puppet, Ansible, and Salt |'
  prefs: []
  type: TYPE_TB
- en: '| **Cloud platforms** | AWS and Microsoft Azure |'
  prefs: []
  type: TYPE_TB
- en: '| **Cloud management tool** | RightScale |'
  prefs: []
  type: TYPE_TB
- en: '| **Application deployment** | Shell Scripts and Plugins |'
  prefs: []
  type: TYPE_TB
- en: '| **Functional testing** | Selenium and Appium |'
  prefs: []
  type: TYPE_TB
- en: '| **Load testing** | Apache Jmeter |'
  prefs: []
  type: TYPE_TB
- en: '| **Repositories** | Artifactory, Nexus, and Fabric |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s see how different tools can be useful in different stages for different
    operations. This may change based on the number of environments or the number
    of DevOps practices we follow in different organizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00228.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we need to categorize tools based on different DevOps best practices, then
    we can categorize them based on open source and commercial categories. The following
    are just some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Components** | **Open Source** | **IBM Urban Code** | **Electric-Cloud**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Build tools** | Ant or Maven or MS Build | Ant or Maven or MS Build | Ant
    or Maven or MS Build |'
  prefs: []
  type: TYPE_TB
- en: '| **Code repositories** | Git or Subversion | Git or Atlassian Stash or Subversion
    or StarTeam | Git or Subversion or StarTeam |'
  prefs: []
  type: TYPE_TB
- en: '| **Code analysis tools** | Sonar | Sonar | Sonar |'
  prefs: []
  type: TYPE_TB
- en: '| **Continuous integration** | Jenkins | Jenkins or Atlassian Bamboo | Jenkins
    or ElectricAccelerator |'
  prefs: []
  type: TYPE_TB
- en: '| **Continuous delivery** | Chef | Artifactory and IBM UrbanCode Deploy | ElectricFlow
    |'
  prefs: []
  type: TYPE_TB
- en: In this book, we will try to focus on the open source category, as well as commercial
    tools. We will use Jenkins and Visual Studio Team Services for all the major automation
    and orchestration-related activities.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps assessment questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps is a culture and we are very much aware of that fact. However, before
    implementing automation, putting processes in place and evolving culture, we need
    to understand the existing status of the organization's culture and whether we
    need to introduce new processes or automation tools.
  prefs: []
  type: TYPE_NORMAL
- en: We need to be very clear that we need to make the existing culture more efficient
    rather than importing culture. To accommodate an assessment framework is difficult,
    but we will try to provide some questions and hints based on which it will be
    easier to create an assessment framework.
  prefs: []
  type: TYPE_NORMAL
- en: Create categories for which we want to ask questions and get responses for specific
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are a few sample questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Do you follow agile principles?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you using any source code repository?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you using any tools for static code analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you using any build automation tools?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you using on-premise infrastructure or cloud-based infrastructure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you using any configuration management tools or scripts for installing application
    packages or a runtime environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you using any automated scripts to deploy applications in prod and nonprod
    environments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you using any orchestration tools or scripts for application life cycle
    management?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you using automation tools for functional testing, load testing, security
    testing, and mobile testing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you using any tools for application and infrastructure monitoring?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the questions are ready, prepare responses and, based on those responses,
    decide a rating for each response given for the preceding questions.
  prefs: []
  type: TYPE_NORMAL
- en: Make a framework flexible so, even if we change a question in any category,
    it will be managed automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Once the rating is given, capture responses and calculate overall ratings by
    introducing different conditions and intelligence into the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Create categorywise final ratings and create different kinds of charts from
    the final rating to improve the reading value of it. The important thing to note
    here is the significance of organizations' expertise in each area of application
    life cycle management. It will give the assessment framework a new dimension to
    add intelligence and make it more effective.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have set many goals to achieve throughout this book. We
    have covered continuous integration, resource provisioning in the cloud environment,
    configuration management, continuous delivery, continuous deployment, and continuous
    monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: Setting goals is the first step in turning the invisible into the visible.
  prefs: []
  type: TYPE_NORMAL
- en: -Tony Robbins
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how cloud computing has changed the way innovation was previously
    perceived and how feasible it has become now. We have also covered the need for
    DevOps and all different DevOps practices in brief. People, processes, and technology
    are also important in this whole process of changing the existing culture of an
    organization. We tried to touch upon the reasons why they are important. Tools
    are important but not the show stopper; any toolset can be utilized and changing
    a culture doesn't need a specific set of tools. We have discussed in brief the DevOps
    assessment framework as well. It will help you to get going on the path of changing
    culture.
  prefs: []
  type: TYPE_NORMAL
- en: Faith is taking the first step even when you don't see the whole staircase.
  prefs: []
  type: TYPE_NORMAL
- en: -Martin Luther King, Jr.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take our first step of this journey towards continuous
    integration. We will use Jenkins and Microsoft Visual Studio Team Services for
    implementing continuous integration and verify how CI can be implemented in different
    tools without any major challenges.
  prefs: []
  type: TYPE_NORMAL
