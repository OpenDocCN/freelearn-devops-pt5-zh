- en: Case Studies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll be going through the entire process of mobile DevOps,
    from mobile application development and integration, to continuous testing and
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be using two applications as case studies to show the entire process:'
  prefs: []
  type: TYPE_NORMAL
- en: A basic Hello World GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A ButtonWidget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case study 1 - Hello World GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this case study, we'll be covering the mobile DevOps cycle with a simple
    Android application that will have a MainActivity with a `Hello World` text label
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: This study is going to cover the entire process in brief, and show you a step-by-step
    workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since these case studies will be covering all the steps involved in the lifecycle,
    it will not be possible to cover these topics in detail and explain different
    parts of the IDE and Android development fundamentals.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the minimum prerequisites to follow this chapter smoothly.
    If you need a greater understanding of any of the following topics, please refer
    to previous chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: It is assumed that you have Visual Studio and Xamarin installed on your computer,
    and configured and ready for Android application development. If you do not have
    Visual Studio and Xamarin installed on your system, please refer to [Chapter 3](1f45b30c-388e-4fd2-b2e6-cfe6d906cd7b.xhtml),
    *Cross-Platform Mobile App Development with Xamarin*, and install them first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic understanding of Visual Studio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic understanding of Android development fundamentals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should have a working Git account that you are able to access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s get started with the following steps to put together a complete practical
    workflow for mobile app development:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio and go to File | New| Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0adef156-b51c-4ae5-8ab3-30c5f99548a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next window, select Android from the left-hand pane and then Blank App
    (Android). Give your project a name and also tick the Create a new Git repository
    checkbox (this will create a new Git repository for your project) and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a50272bb-6a8d-4bd7-9927-a74b4644bf7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Visual Studio will create a new project called `HelloWorld` for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8790195b-d895-4cc1-b292-b1b1af866b9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this is done, open Solution Explorer to see the project structure. Go
    to View | Solution Explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/320dbcc4-cc61-4219-b6ab-a04aed94fad2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Solution Explorer, expand the `Resources` folder and the `layout` folder,
    and find a file called `Main.axml`. This is the layout file, or you can say the
    view, of our MainActivity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/90e9a277-33bc-45c8-a177-3d31d88f97c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open `Main.axml` by double-clicking on it. This should open the layout designer
    for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/349c5dd8-f1ea-49f3-b2e2-b080df025fd2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are not able to see the toolbox on the left-hand side, go to View |
    Toolbox to make it appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1fc79b8a-144a-45ae-9935-064c8a71d46b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we will just add a text view on the activity, which says, `HelloWorld`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the toolbox on the left, select Text (Medium) from the Form Widgets section
    and drag and drop it to the Activity View:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e8a8550d-af30-4b6b-bb6f-9743ab36c66b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on the text view and change its text to `Hello World`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/da8a089b-6d34-40da-9c5c-003436fb5bee.png)'
  prefs: []
  type: TYPE_IMG
- en: Awesome, the `HelloWorld` app is done, now we just need to build the solution
    to make sure everything is fine and ready to be deployed on an Android device
    or emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the solution and click on Build Solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b0558428-e2a7-43a4-a069-9e88b7619dcc.png)'
  prefs: []
  type: TYPE_IMG
- en: This will build the solution for you and it should say Build Succeeded in the
    bottom-left corner, on the blue line, when it's done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To deploy and test the application on an emulator, click on the Android Emulator
    Manager (AVD) icon from the toolbar at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c1f2620-2636-4510-8948-9bb5c01cd9ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open Android Emulator Manager, where you can select any existing
    virtual device from the list provided by Visual Studio and hit the Start button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c4c96f52-6a83-4d97-a8d3-c8807bc09fa2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, click on Launch without changing any configurations in the next window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d46dbe0e-ad83-4e39-9a80-971ecacd534a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This should start a new AVD on your machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29b4a1c9-55e3-4b70-b290-264398e18886.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, come back to Visual Studio after the AVD has started and hit the play
    button by selecting your device from the list to deploy and starting your application
    on the AVD:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/522131df-442e-42f8-851a-5a4fd18c657f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the application is deployed, it will be opened on the AVD and you should
    be able to see your Hello World text on the MainActivity screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/134f64d5-6a15-4249-8f3d-b250cff31b9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, your HelloWorld app is up and running on the emulator!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is time to push our newly created project to the Git remote repository. Remember
    that we have created a local repository already while creating the project, so
    now we need to connect this local repository to a remote Git repository and then
    push the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the push logo in the bottom-right corner in Visual Studio. It will
    open Team Explorer, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b12e4bf-2550-45e4-b97a-c05c1418888d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, before publishing we need to create a repository in GitHub to connect to
    this local repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Head over to GitHub and log in to your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new repository called `HelloWorld` and copy the URL to that repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once done, come back to Visual Studio and hit Publish Git Repo, as shown in
    the preceding screenshot, then copy the link to the repository and hit Publish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41c3402e-1723-4ef7-8094-fd6701e6fa2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Visual Studio might ask you to provide your credentials for the first time to
    connect to Git, but once done it should configure the remote repository with the
    local one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, click on the edit icon that says Changes (2) to commit your changes
    locally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make some commit comments and then hit Commit All:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6105f2e9-4052-4bf0-8d8e-dbe48c07d2d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on the Sync link to share your committed changes with the remote
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b6bc70e-07a4-42a2-a8af-3a83f453795f.png)'
  prefs: []
  type: TYPE_IMG
- en: On the next page, hit Push to push your changes to the GitHub remote repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since there isn't much to test in this application, we'll be covering that in
    the next case study.
  prefs: []
  type: TYPE_NORMAL
- en: Case study 2 - ButtonWidget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this case study, we''ll be creating a new Android application that will
    have a button which that show a new text view when clicked. We''ll also be writing
    UITest for this application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new blank Android application project in Visual Studio, name it `ButtonWidget`,
    and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44e1124c-48aa-4bbd-b076-a79644b5d102.png)'
  prefs: []
  type: TYPE_IMG
- en: After creating the project, open the `Main.axml` file from Resources | Layout
    in Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, add a text view and a button to the view from the Toolbox on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give each of these IDs to identify them in the code. You can select them, then
    show the property window, and give them IDs there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9644673b-558e-4368-bf9a-a68fa792e42d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, set the visibility of the text view to hidden, because we''ll be showing
    this text only on a button-click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89de4430-dd45-4a53-ac58-7b194ccdea12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, open the `MainActivity.cs` file from Solution Explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee70252c-ca55-41d1-bd4a-b9287031cb93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In `MainActivtiy.cs`, add code to show the text view when the button is clicked.
    Change your code to match what is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3bbe63a1-8d91-448c-9d64-54e285a1e336.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it. The coding part is done for the application. Now, the text view will
    be added, but will not be shown in the application until the button is clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build your application and hit Run. You''ll see that the text view is not visible
    when the app loads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10ba6cb1-939a-4388-8f25-61079af598c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on the button and see that the text view appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d24641e8-c35a-4913-bb35-cdf2e3c3c097.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that the application is working, let's write Xamarin.UITest for it and upload
    it to Xamarin Test Cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new test project to the solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3565e2ba-8734-433d-9813-3e69d74d84d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Add New Project window, click on Test from the left pane and then select
    UI Test App (Xamarin.UITest | Android). Give the project a name and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4bcdd9d2-d95a-43a0-affe-3ca4fc6c2775.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to add a reference to the application project, so the `UITest`
    project can build and run the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on References under the `UITest` project and click on Add Reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0b73f11c-3356-4169-9814-632ddad7a0fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, select Projects from the left section and then select the
    ButtonWidget (the application project we want to test) and click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38341c66-f34a-4cf2-bd66-13e07bcab24e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are all set to start writing our tests for the ButtonWidget app. Open the
    `Tests.cs` file from Solution Explorer under TestProjectName | Tests.cs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/468cda17-f83b-4e41-9f68-56b0278c7f2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, change the code to add a new test in the `Tests.cs` file, to test that
    the text view is displayed when the button is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b92ab4d2-63aa-4b62-b08b-39ca101d30d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, rebuild and deploy the solution, then click Test | Windows | Test Explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6038ee3-5ba8-4db2-ab76-d3973f5734de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should be able to see the tests written in the Test Explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/751b7f05-210d-41ef-9aa5-73e6f6d1c66e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Run All to run the tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, to upload these tests to Xamarin Test Cloud, log in to your Xamarin Test
    Cloud account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Account Settings | Teams & Apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New Team button to create a new team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add members to the team and then click on New Test Run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open a self-guiding dialog box, where we can select the platform,
    choose devices, and much more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the operating system as Android and then the devices of your choice, and
    go to the last step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll find a screen like the following, where you get a command to upload
    the tests to Xamarin Test Cloud:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89bb7340-5521-4a9b-9d5c-2047a7268ebf.png)'
  prefs: []
  type: TYPE_IMG
- en: Before you upload your application to Xamarin Test Cloud, it is important to
    build your application in the Release build configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add internet permissions to the project in the project's manifest file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have built the project with Release, you are ready to upload your application
    on Xamarin and tune the UITests there. Use the command from the previous step,
    modify `Xamarin.UITest.[version]` to your UITest version, then enter the APK filename
    with the full path to the APK and a relative path to the `UITest` folder, and
    then run it in the root directory of your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have made these changes to the command, go to the root directory,
    open command prompt windows there, and run the command to upload UITests to Xamarin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3d0b9530-5bc8-4527-a5eb-7bc36037e213.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, the application is being deployed and tested on Xamarin Test Cloud
    on real physical devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use this command with your CI tool to automate this process as part
    of continuous integration and continuous testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On checking back in Xamarin Test Cloud''s web application, we can see that
    the test has passed on the selected device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9189052e-6d35-4595-8823-ca026fad6345.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone through the entire process of application development,
    deployment, writing test cases, and testing the application by using continuous
    testing on Xamarin Test Cloud. There were two case studies used in this chapter
    to explain the process step by step, from creating a simple Android project to
    writing UITests and using Test Cloud for continuous testing.
  prefs: []
  type: TYPE_NORMAL
