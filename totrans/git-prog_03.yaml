- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Branching, Places, and GUIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the crucial "five places" for Git: the
    work area, the index, the local repository, the remote repository, and the stash.
    You will see how to use each of these and how they work together.'
  prefs: []
  type: TYPE_NORMAL
- en: Each concept will be illustrated with both code and screenshots, and most Git
    actions will be illustrated in the command line, Visual Studio, and a GUI (GitHub
    Desktop).
  prefs: []
  type: TYPE_NORMAL
- en: You'll also learn about creating branches, committing code, and how to move
    commits from the work area to the repository, and from the repository to the remote
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Five places
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a programmer I think of Git as divided into five places:'
  prefs: []
  type: TYPE_NORMAL
- en: The work area
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The index (staging area)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The local repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The remote repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The stash
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's begin by examining each of these in turn.
  prefs: []
  type: TYPE_NORMAL
- en: The work area
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The work area is where your current files are. That is, if you were to open
    Windows Explorer and navigate to the directory you cloned to, you would see the
    version of the program you were currently working on. If you were to open Visual
    Studio 2019, these are the files that would be in the Solution Explorer. Again,
    the work area is where your current files are; if you open Visual Studio on your
    project, the files in the work area are what you will see. As you change branches
    (see below) the work area is updated with the appropriate files. This can be one
    of the hardest concepts in Git: when you change branches you change the files
    that are in your work area â€“ that is, the files for that branch are swapped into
    the Windows (or Mac or Linux) directory.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: it is possible to have more than one work area using what are known
    as work trees. These are well beyond the scope of this book, and you can go a
    long while before you will need them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our current program the work area looks like this in Windows Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Current work area'
  prefs: []
  type: TYPE_NORMAL
- en: 'This same directory can be seen from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: Current work area from command line'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio, the same work area looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: Current work area from Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: If you look at what is in the directory, you will find the exact same files.
  prefs: []
  type: TYPE_NORMAL
- en: The index/staging area
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have files in the work area that you would like to commit, you first
    add them to the staging area (often called the index). From the staging area,
    it takes just one command (`commit`) to move these files into the local repository.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: Modifying Program.cs'
  prefs: []
  type: TYPE_NORMAL
- en: I have added a couple of lines to all three copies we have.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start at the command line. I make a habit of invoking `git status` before
    doing anything else:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5: git status from the command line'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add this to the index at the command line, you just use the keyword `add`
    followed either by the name of the file or by a period (`.`) indicating you want
    all the files moved to the staging area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Git will make no response, but the file is now in the staging area. You can
    see this if you get the status again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: Modified file staged'
  prefs: []
  type: TYPE_NORMAL
- en: This time, it shows the modified file as ready to be committed. To commit this
    file all you need to do is enter `git commit`. Because the file is already staged,
    it will be immediately committed to the local repository. If you don't add `-m
    "my message"` the editor will be opened for you to add your message.
  prefs: []
  type: TYPE_NORMAL
- en: Skipping the staging area
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can bypass the staging area and go directly to committing the file by using
    the `-a` flag. Thus, with your file unstaged you can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will immediately commit `Program.cs` with the indicated message. I confess
    this is the way I commit files 90% of the time. (You can also use `git commit
    -a -m "my message"` to commit all the modified files in the working area.)
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Visual Studio the status is visible at all times, in the lower right-hand
    corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: Lower right of Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: The 0 with an up arrow indicates that you have no files waiting to be pushed.
    The 1 next to the pencil indicates that you have one modified file. Next comes
    the name of your program and then finally the branch you are on.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways to commit in Visual Studio. For example, you can
    commit right from the Git menu or by right-clicking on the file and selecting
    **Git**. You will then select **Commit or Stash**. An easier way, however, is
    to click on the pencil, which brings up the **Git Changes** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Visual Studio changes window'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you can see the changed files and their paths. You can choose **Commit
    All** or drop down that button and choose from a number of related options. Fill
    in the message and press **Commit All** and Visual Studio immediately responds
    with a confirmation, reinforcement that you''ve committed to the *local* repository,
    and offers you the opportunity to upload to the remote repository (showing you
    that you have one outgoing file):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.9: Visual Studio commit and push/pull menu'
  prefs: []
  type: TYPE_NORMAL
- en: It can be confusing as to which way is outgoing as we tend to think of uploading
    rather than outgoing. Suffice to say that when Visual Studio says outgoing they
    mean going from the local to the remote server, and when they say incoming they
    mean moving from the server to the local repo.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GitHub Desktop gives you a tremendous amount of information on one screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: On the top row, you can see the name of the repository and the current branch.
    In the window on the upper left, you can see that one file changed, and which
    file that is. On the right, you can see the actual change.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, on the lower left, you can put in your message and commit your file.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you commit, the page is cleared and a new button appears to allow
    you to push the changes to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Local and remote repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The third and fourth areas for Git are the local and remote repositories. We've
    covered this in the previous chapter so all I'll repeat here is that `commit`
    puts your files into the *local* repository and `push` sends your commit from
    your local repository to the remote one.
  prefs: []
  type: TYPE_NORMAL
- en: While I believe in committing frequently, you'll want to put in a few commits
    before you push. This will give you the opportunity to combine similar commits
    as we'll see in *Chapter 6,* *Interactive Rebasing* on interactive rebase.
  prefs: []
  type: TYPE_NORMAL
- en: The stash
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The fifth and final area for Git is the stash. The stash, as it sounds, is a
    place to stash away files that you've modified but don't want to commit or lose
    when changing branches. We'll see more of this just below, when we discuss branching.
  prefs: []
  type: TYPE_NORMAL
- en: Branches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using branches is critical to working with Git, not to mention to the success
    of your project. The idea is this: you have a "main" branch that you''ll do your
    releases from. Each time code is added to the main branch it is checked and reviewed
    so that the main branch stays as clean as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you want to work on a bug or a feature, you create a new branch (often
    called a feature branch). This creates a copy of the code that is currently in
    the main branch. You can work on your feature branch without affecting the main
    branch at all. Once you are done, and all is working, you can then "merge" your
    feature branch into the main branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.11: First feature branch'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that there is a pointer named **Head**. This points to whatever is in
    your work area. In this case, we've branched to **Feature 1** and **Head** shows
    that the code for that feature branch is now in our work area.
  prefs: []
  type: TYPE_NORMAL
- en: That is a pretty good simplification of branching but there is a good deal more
    to it. First, let's see how to do it. Until now, all your code has been on the
    Main branch â€“ a bad practice. We should have created a feature branch before doing
    any coding. That said, we can do so now.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the command line, you simply check out Main (putting whatever is at the
    tip of Main into your work area. The tip means the most recent commit). Once you
    are in Main you will `pull` from the remote repository to get the very latest
    version of Main. You are now ready to create your first branch. The sequence of
    commands looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.12: Creating branch on command line'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that creating the branch `Calculator` did not check it out; you must do
    that as a separate step. However, if you use the `-b` flag, then you can create
    the branch and check it out at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In either case, the new branch is in the work area. But what is in that branch?
    Because that branch was created from main, and we've not changed anything yet,
    the new branch is identical to the main branch. From here they will diverge. As
    you add code, it will be in the new branch (`Calculator`) but not in the main
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Before we look at that in depth, let's create branches for the Visual Studio
    user and for the GitHub Desktop user.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to do this (and the least confusing) is to open Windows Explorer
    and navigate to the `VisualStudio` folder (in my case, **GitHub** | **VisualStudio**
    | **ProGitForProgrammers** | **ProGitForProgrammers**). In that folder is a `.sln`
    file, which I will double-click on, opening Visual Studio. (This book was originally
    named Pro Git For Programmers and you will see that name in the code quite a bit.)
  prefs: []
  type: TYPE_NORMAL
- en: Don't be confused between the `VisualStudio` folder (which we are using to demonstrate
    Git in Visual Studio) and the program itself, which we use to modify the code
    in all three places (`CommandLine`, `GitHubDesktop`, and `VisualStudio`).
  prefs: []
  type: TYPE_NORMAL
- en: It might be less confusing if you think of these as three separate programmers,
    each one on their own computer (mimicked here by using separate directories).
    Each programmer has a main branch and each one is now branching off for their
    own work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to put this on a branch as well, and to reduce confusion we''ll call
    this branch `Book`. To create the branch, click on the **Git** menu and select
    **New Branch**.Give the new branch the name `Book`, and press **Create**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.13: Creating a new branch in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you do, a window will open on the left that lists the branches for this
    repository and `Book` will be in bold indicating that it is the current branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.14: Branches menu in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Two of the users have now branched off of main. Let's use GitHub Desktop to
    create a third branch. Open the program and click on the menu choice **Repository**.
    On that menu click on **Show In Explorer** and make sure you are in the path `C:\GitHub\GitHubDesktop\ProGitForProgrammers`.
  prefs: []
  type: TYPE_NORMAL
- en: It should indicate that you have one pull from the origin (the server) and have
    a button that says **Pull Origin**. Go ahead and click that button. That brings
    down the latest version of **Main**. You now should see that the button says **Push
    Origin** â€“ that's to push up to the server the two commits that are now sitting
    in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: To create your new branch, click on the **Branch** menu choice and select **New
    Branch**. It will prompt you for the name of your new branch. Enter `Movie` and
    click **Create**. The interface now asks if you want to publish your branch. Publishing
    in GitHub Desktop simply means uploading it for the first time. Let's hold off
    on that and first make some commits.
  prefs: []
  type: TYPE_NORMAL
- en: Programmer 1 (CommandLine) and calculator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open Visual Studio in the `CommandLine` directory path. In the Solution Explorer,
    you should see `Program.cs`, which has five `WriteLine` statements. Add a new
    class named `Calculator` and set it to `public`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Normally we would not create a commit after so little work, but for this book,
    to make simple examples, we''ll be doing a great deal of committing. Return to
    the command line and get the status. It will tell you that you have one untracked
    file. Git has recognized that there is a file in the directory that it knows nothing
    about. Our next step is to add it to Git:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'By using the dot, the `add` command will add any modified or new files to the
    staging area. You can then commit the new file just by writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you write `git status` now, Git will tell you that you are on the branch
    `Calculator`, that you have nothing to commit, and that your working tree is clean.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to talk about the `log` command in detail in *Chapter* *9,* *Using
    the Log*, but for now, let''s just use it to see our commit and the message that
    went with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display all of your commits, one per line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The seven-digit hexadecimal identifier is the "short ID" and is enough to uniquely
    identify each commit. They are listed in newest-to-oldest order. Our most recent
    commit says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells you that your Head pointer is pointing to your **Calculator** branch
    (that is, what is in your working area right now is the **Calculator** branch)
    and it displays the message we added for that commit. Graphically, it might look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.15: Head pointer'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the arrow runs from **Calculator** to **Main**. Each commit points
    to its parent.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing the new branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can push this commit up to the server, but the server doesn''t know about
    this branch. When we enter `git push`, we get back this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It is saying that it could not proceed (`fatal`) because the current branch
    (which is `Calculator`) does not correspond to a branch on the server. Wonderfully,
    however, it gives us the command line to use. Just copy the command and paste
    it at the prompt and hit *Enter*. Hey presto! You''ve pushed your branch up to
    the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.16: Pushing to the server'
  prefs: []
  type: TYPE_NORMAL
- en: For now, you can ignore all the other messages; what you care about is the last
    two lines, indicating that you now have a branch, `Calculator`, on the server,
    and that on the server it is also called `Calculator`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that from now on, when pushing commits on the `Calculator` branch, you
    won't have to use that line; you'll just be able to write `git push`.
  prefs: []
  type: TYPE_NORMAL
- en: Examining origin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s go to GitHub and examine our new branch. Sign in and select the `ProGitForProgrammers`
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.17: Repository on server'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, where is our calculator folder? Notice the button in the upper left that
    says **main**. Drop that down and choose **Calculator** â€“ which will display the
    contents of the `Calculator` branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.18: Calculator branch on server'
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the `Calculator` branch *does* have the expected file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding commits to a branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s add another commit to our branch. Return to Visual Studio and give our
    `Calculator` class an `add` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, just to have lots of commits, let''s commit this. The easiest way is
    to combine the add and the commit and to add a message on a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To see that this was in fact committed, run the `log` command again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.19: Tracking HEAD'
  prefs: []
  type: TYPE_NORMAL
- en: If you study this for a moment, not only will you see that our commit worked
    (it is the first one listed) but also that we have various pointers. On the first
    line, we see that `HEAD` is pointing to our `Calculator` branch. Good enough.
  prefs: []
  type: TYPE_NORMAL
- en: The second line indicates that the `Calculator` branch on origin (GitHub) is
    pointing to the previous commit. We have one commit to push.
  prefs: []
  type: TYPE_NORMAL
- en: The third line shows us that `main` on origin, `HEAD` on origin, the main branch,
    and the `featureOne` branch are all pointing to the third most recent commit.
    All this is fine. We expect `Calculator` to have diverged from main, and we can
    push our commit if we like, or we can wait until we have a few of them.
  prefs: []
  type: TYPE_NORMAL
- en: The Book branch â€“ Git within Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's turn our attention to the Visual Studio programmer. You will remember
    that this takes place in the `VisualStudio` folder. Let's open Visual Studio in
    that directory, and note that in the upper right, it says **1 outgoing** â€“ this
    indicates that we have a commit to push. Click on it and Visual Studio opens two
    more windows.
  prefs: []
  type: TYPE_NORMAL
- en: One shows that `Book` is the current branch (see above) and the other shows
    the history of your commits (not unlike `log`).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a section in the middle window that shows what was committed locally
    and what awaits commitment in the outgoing section. Also note that `Book` and
    `main` are indicated as outgoing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.20: Commitments window Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'To push these commits find the tiny up arrow in the upper-right corner (magnified
    here):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.21: Link to push files on Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a `Book` class. The process is similar to the creation of the
    `Calculator` class above. Right-click on the project and choose **Add** | **Class**.
    Name your new class "Book". Make your `Book` class public and give it three properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.22: New Book class'
  prefs: []
  type: TYPE_NORMAL
- en: Let's commit this. To do so either click on the **Git** menu choice and choose
    **Commit or Stash**, or click on the pencil at the bottom of the screen. Either
    way, you will be brought to the commit screen. Notice that it says **1 outgoing**.
    Click on the up arrow. That will push our previous commit. You will get back a
    message saying that you have successfully pushed `Book` to origin.
  prefs: []
  type: TYPE_NORMAL
- en: Committing with GitHub Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open Visual Studio in the `GitHubDesktop` directory. Here we will create the
    `Movie` class and give it two properties: `Title` and a collection of people (which
    we will represent as strings to keep things simple):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.23: Movie class'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open GitHub Desktop. It recognizes and displays the changes (with deleted
    lines in red and new lines in green). It also offers you the opportunity to check
    in the new changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.24: Changes shown in GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: You can see the changes highlighted above, in *Figure 3.24*.
  prefs: []
  type: TYPE_NORMAL
- en: Status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can see that the GUIs make the work easier, but that the command line makes
    the steps more explicit. Our repository looks like this (conceptually):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.25: Multiple branches'
  prefs: []
  type: TYPE_NORMAL
- en: What's on origin?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's important to remember that this map of commits only applies to the local
    repository. What is on the remote repository may or may not be the same for any
    given branch depending on whether you've pushed all your commits. In *Chapter
    6*, *Interactive Rebasing*, we'll review why you might want to hold on to a number
    of commits before pushing them (in short, you will have the ability to combine
    commits to reduce the number of commits a reviewer must slog through).
  prefs: []
  type: TYPE_NORMAL
- en: Adding more commits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'd like to add a number of commits so that we can review their history and
    toÂ set us up for future chapters. To do so, we'll want to work on the CommandLine
    project. You can, as we have done already, open Windows Explorer and navigate
    to the appropriate directory, and then double-click on `ProGitForProgrammers.sln`.
    AnÂ alternative is to open Visual Studio from anywhere and then choose **File**Â |
    **Recent Projects and Solutions**, and click on the one you want, in this case,Â `ProGitForProgrammers`
    (`C:\GitHub\CommandLine\ProGitForProgrammers`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio will open to the `Calculator` folder. Just to triple-check that
    you are in the right place, right-click on the project and select **Open Folder
    In File Explorer**. You should see a Windows Explorer window open in the expected
    folder (no matter which folder you started out in). Let''s add a `Subtract` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'While we normally wouldn''t commit for such a small change, let''s go ahead
    now and turn to the command line. As always we start with a `git status`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.26: git status'
  prefs: []
  type: TYPE_NORMAL
- en: Let's read through this carefully. The first line after `git status` confirms
    that you are on the `Calculator` branch. Next comes a notice that you are ahead
    of `origin/Calculator` by one commit. That means that you didn't push your last
    commit (and this is true).
  prefs: []
  type: TYPE_NORMAL
- en: Next comes a paragraph telling you that `Calculator.cs` has been modified and
    gives you a couple of commands you might want to use in this context. Let's use
    the `add` command to place our modified file in the index.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than typing the name of the modified file, we''ll use a period (`.`)
    to indicate that we want everything changed in the working directory (in this
    case, just the one file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Git makes no real acknowledgment, but if you request the status, you''ll find
    that the modified file is now a different color (on most setups) and that the
    message is slightly different, as you now have that modified file in the index:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.27: Modified files in git status'
  prefs: []
  type: TYPE_NORMAL
- en: Git helpfully gives you a command to unstage your files if you choose to do
    so. Be careful with the `restore` command, however. If you use it as shown with
    the `--staged` flag you will unstage your file, but if you leave out the flag
    you will restore your file to your last commit, **losing all the work you've done
    in the interim**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we want to commit that change, and so we will enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we don't need the `-a` flag as the files we want to commit have
    already been added to the index.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `multiply` method and commit it. Next, add an integer division method
    and commit that as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Examining your commits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the `log` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/B17441_03_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.28: log command'
  prefs: []
  type: TYPE_NORMAL
- en: Again, examine the output carefully. The first line tells you that `HEAD` is
    pointing to the `Calculator` branch, as we would expect. Below that are a couple
    of commits and then you see a line that indicates that `Calculator` on origin
    is only up to commit `e5c4db9` (the one where the message is `Add calculator class`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Is that right? There are a couple of ways to tell. The easiest is to go to
    GitHub and see if the `Calculator` class has what this indicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.29: Branch on server'
  prefs: []
  type: TYPE_NORMAL
- en: Notice in the upper left that we are on the `Calculator` branch. Now drill down
    to the code. What you see is only the class in its initial state. This is consistent
    with what the log showed.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one more way to tell. Return to Visual Studio and click on the **3**
    next to the up arrow on the right side of the very bottom of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.30: Accessing history on Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you do, a window will open that shows your local history and the "outgoing"
    files â€“ that is, the ones you''ve not yet pushed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.31: History in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Again, this is consistent with what `log` has shown.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you have learned about the crucial "five places" for Git:
    the work area, the index, the local repository, the remote repository, and the
    stash. You have seen how to use each of these and how they work together.'
  prefs: []
  type: TYPE_NORMAL
- en: Each concept was illustrated with both code and screenshots, and every Git action
    was illustrated in the command line, Visual Studio, and GitHub Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you have learned about creating branches, committing code, and how
    to move commits from the work area to the repository and from the repository to
    the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a private repository on GitHub named `Contacts`, and then clone that
    repository down to a folder on your disk. Using the command line, create a feature
    branch named `Person` and in that feature branch, create a person object with
    their name, age, and social security number. Create commits as you add each attribute.
    Review the log to see what you've created and then add these commits to the remote
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no one right way to do this, but we'll walk through a likely answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #1 â€“ create a private repository on GitHub named `Contacts`. To do this,
    open a browser to [Github.com](http://Github.com) and navigate to your repository
    page. Click on **New** and fill in the fields as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.32: New repo on server'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that I've marked the repository as private. Click the **Create Repository**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #2 â€“ clone that repository down to a folder on your disk.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the same GitHub page, click on **Code** and click on the clipboard to copy
    the HTTPS or SSH path (if you have SSH you''ll know it, otherwise choose HTTPS):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.33: Copy address from server'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command line where you want your cloned repo and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'and paste in the link you just copied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.34: Cloning from server to local repo'
  prefs: []
  type: TYPE_NORMAL
- en: This indicates that you have cloned `Contacts` from GitHub into a directory
    named `Contacts` and then you have changed to that directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #3 â€“ using the command line, create a feature branch named `Person`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a feature branch, we''ll use the `branch` command and the `checkout`
    command (or the `cb` alias):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.35: Creating a branch'
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #4 â€“ in that feature branch, create a `person` object with their name,
    age, and social security number. Create commits as you add each attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this I created my project (`Contacts`) and then within a folder, I added
    the `Person` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.36: Adding the Person class'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating the class was intentionally trivial:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.37: Person properties'
  prefs: []
  type: TYPE_NORMAL
- en: I then returned to the command line to check in these changes.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to save your file before each commit or the command line will tell
    you that there is nothing to commit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #5 â€“ review the log to see what you''ve created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.38: Examining the log'
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #6 â€“ add these commits to the remote repository.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll try to push, but the remote repository won''t have heard of our branch.
    Fortunately, Git tells us what to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.39: Pushing to server'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you have a local and remote repository named `Contacts` and
    a branch named `Person`. On the branch named `Person` you have code for a skeleton
    class named `Person`. A quick review of GitHub shows that main does not have a
    `Person` object (or class, or folder):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.40: Branches on origin'
  prefs: []
  type: TYPE_NORMAL
- en: 'But the `Person` branch does:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_03_41.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.41: Person branch on origin'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the `Person` branch does have the expected code.
  prefs: []
  type: TYPE_NORMAL
