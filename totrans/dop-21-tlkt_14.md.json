["```\ncd cloud-provisioning\n\ngit pull\n\n```", "```\ncd terraform/aws-full\n\n```", "```\nexport AWS_ACCESS_KEY_ID=[...]\n\nexport AWS_SECRET_ACCESS_KEY=[...]\n\nexport AWS_DEFAULT_REGION=us-east-1\n\n```", "```\n \"provisioners\": [{\n...\n  }, {\n\"type\": \"file\",\n\"source\": \"docker.service\",\n\"destination\": \"/tmp/docker.service\"\n  }, {\n\"type\": \"shell\",\n\"inline\": [\n\"sudo mv /tmp/docker.service /lib/systemd/system/docker.service\",\n\"sudo chmod 644 /lib/systemd/system/docker.service\",\n\"sudo systemctl daemon-reload\",\n\"sudo systemctl restart docker\"\n    ]\n  }]\n\n```", "```\n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network.target docker.socket\nRequires=docker.socket\n\n[Service]\nType=notify\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375\nExecReload=/bin/kill -s HUP $MAINPID\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nTimeoutStartSec=0\nDelegate=yes\nKillMode=process\n\n[Install]\nWantedBy=multi-user.target\n\n```", "```\npacker build -machine-readable \\ \n    packer-ubuntu-docker.json \\\n    | tee packer-ubuntu-docker.log\n\n```", "```\nexport TF_VAR_aws_access_key=$AWS_ACCESS_KEY_ID\n\nexport TF_VAR_aws_secret_key=$AWS_SECRET_ACCESS_KEY\n\nexport TF_VAR_aws_default_region=$AWS_DEFAULT_REGION\n\nexport KEY_PATH=$HOME/.ssh/devops21.pem\n\ncp $KEY_PATH devops21.pem\n\nexport TF_VAR_swarm_ami_id=$( \\\n    grep 'artifact,0,id' \\\n    packer-ubuntu-docker.log \\\n    | cut -d: -f2)\n\n```", "```\nterraform apply \\\n    -target aws_instance.swarm-manager \\\n    -var swarm_init=true \\\n    -var swarm_managers=1\n\nexport TF_VAR_swarm_manager_token=$(ssh \\\n    -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip) \\\n    docker swarm join-token -q manager)\n\nexport TF_VAR_swarm_manager_ip=$(terraform \\\n    output swarm_manager_1_private_ip)\n\nterraform apply \\\n    -target aws_instance.swarm-manager\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip) \\\n\ndocker node ls\n\n```", "```\nHOSTNAME         STATUS AVAILABILITY MANAGER STATUS\nip-172-31-16-158 Ready  Active       Leader\nip-172-31-31-201 Ready  Active       Reachable\nip-172-31-27-205 Ready  Active       Reachable\n\n```", "```\ndocker network create --driver overlay proxy\n\ncurl -o proxy-stack.yml \\\n    https://raw.githubusercontent.com/\\\nvfarcic/docker-flow-proxy/master/docker-compose-stack.yml\n\ndocker stack deploy \\\n    -c proxy-stack.yml proxy\n\nexit\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip)\n\ndocker service create --name jenkins \\\n-e JENKINS_OPTS=\"--prefix=/jenkins\" \\\n    --label com.df.notify=true \\\n    --label com.df.distribute=true \\\n    --label com.df.servicePath=/jenkins \\\n    --label com.df.port=8080 \\\n    --network proxy \\\n    --reserve-memory 300m \\\n    jenkins:2.7.4-alpine\n\n```", "```\nexit\n\nopen \"http://$(terraform output swarm_manager_1_public_ip)/jenkins\"\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip) \\\n\ndocker service ps jenkins\n\n```", "```\nNAME       IMAGE                 NODE              DESIRED STATE           \njenkins.1  jenkins:2.7.4-alpine  ip-172-31-16-158  Running       \n---------------------------------------------------------------\nCURRENT STATE\nRunning 8 minutes ago \n\n```", "```\nJENKINS_IP=$(docker service ps jenkins \\\n    | tail -n 1 \\\n    | awk '{ print $4 }' \\\n    | cut -c 4- \\\n    | tr \"-\" \".\")\n\n```", "```\nJENKINS_ID=$(docker -H tcp://$JENKINS_IP:2375 \\\n    ps -q \\\n    --filter label=com.docker.swarm.service.name=jenkins)\n\n```", "```\ndocker -H tcp://$JENKINS_IP:2375 \\\n    exec -it $JENKINS_ID \\\n    cat /var/jenkins_home/secrets/initialAdminPassword\n\n```", "```\ncb7483ce39894c44a48b761c4708dc7d\n\n```", "```\ndocker -H tcp://$JENKINS_IP:2375 \\\n    rm -f $JENKINS_ID\n\n```", "```\ndocker service ps jenkins\n\n```", "```\nNAME        IMAGE                NODE               DESIRED STATE CURRENT STATE                                    \njenkins.1   jenkins:2.7.4-alpine ip-172-31-31-201   Running       Running about 1 min \n_ jenkins.1 jenkins:2.7.4-alpine ip-172-31-16-158   Shutdown      Failed about 1 min   \n-------------------------------------------------------------\nERROR PORT\n\"task: non-zero exit (137)\" \n\n```", "```\ndocker service rm jenkins\n\nexit\n\n```", "```\nopen \"https://console.aws.amazon.com/efs/home?region=$AWS_DEFAULT_REGION\"\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip)\n\nsudo mkdir -p /mnt/efs\n\n```", "```\nsudo mount -t nfs4 \\\n    -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,\\\n    retrans=2 fs-07538d4e.efs.us-east-1.amazonaws.com:/ \\\n    /mnt/efs\n\n```", "```\nsudo mkdir -p /mnt/efs/jenkins\n\nsudo chmod 777 /mnt/efs/jenkins\n\nexit\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_2_public_ip)\n\nsudo mkdir -p /mnt/efs\n\nsudo mount -t nfs4 \\\n    -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600, \\\n    retrans=2 fs-07538d4e.efs.us-east-1.amazonaws.com:/ \\\n    /mnt/efs\n\nexit\n\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_3_public_ip)\n\nsudo mkdir -p /mnt/efs\n\nsudo mount -t nfs4 \\\n    -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,\\\n    retrans=2 fs-07538d4e.efs.us-east-1.amazonaws.com:/ \\\n    /mnt/efs\n\nexit\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip) \\\n\ndocker service create --name jenkins \\\n-e JENKINS_OPTS=\"--prefix=/jenkins\" \\\n    --mount \"type=bind,source=/mnt/efs/jenkins,target=/var/jenkins_home\" \\\n    --label com.df.notify=true \\\n    --label com.df.distribute=true \\\n    --label com.df.servicePath=/jenkins \\\n    --label com.df.port=8080 \\\n    --network proxy \\\n    --reserve-memory 300m \\\n    jenkins:2.7.4-alpine\n\n```", "```\ndocker service ps jenkins\n\n```", "```\nexit\n\nopen \"http://$(terraform output swarm_manager_1_public_ip)/jenkins\"\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip)\n\ncat /mnt/efs/jenkins/secrets/initialAdminPassword\n\n```", "```\nJENKINS_IP=$(docker service ps jenkins \\\n    | tail -n 1 \\\n    | awk '{ print $4 }' \\\n    | cut -c 4- \\\n    | tr \"-\" \".\")\n\nJENKINS_ID=$(docker -H tcp://$JENKINS_IP:2375 \\\n    ps -q \\\n    --filter label=com.docker.swarm.service.name=jenkins)\n\ndocker -H tcp://$JENKINS_IP:2375 \\\n    rm -f $JENKINS_ID\n\ndocker service ps jenkins\n\n```", "```\ndocker service rm jenkins\n\nexit\n\n```", "```\nterraform output security_group_id\n\n```", "```\nsg-d9d4d1a4\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip)\n\n```", "```\ncurl -sSL https://dl.bintray.com/emccode/rexray/install | sh -s -- stable\n\n```", "```\nREX-Ray\n-------\nBinary: /usr/bin/rexray\nSemVer: 0.6.3\nOsArch: Linux-x86_64\nBranch: v0.6.3\nCommit: 69b1f5c2d86a2103c792bec23b5855babada1c0a\nFormed: Wed, 07 Dec 2016 23:22:14 UTC\n\nlibStorage\n----------\nSemVer: 0.3.5\nOsArch: Linux-x86_64\nBranch: v0.6.3\nCommit: 456dd68123dd6b49da0275d9bbabd6c800583f61\nFormed: Wed, 07 Dec 2016 23:21:36 UTC\n\n```", "```\nexport AWS_ACCESS_KEY_ID=[...]\n\nexport AWS_SECRET_ACCESS_KEY=[...]\n\nexport AWS_DEFAULT_REGION=[...]\n\nexport AWS_SECURITY_GROUP=[...]\n\n```", "```\necho \"\nlibstorage:\n  service: efs\n  server:\n    services:\n      efs:\n        driver: efs\n        efs:\n          accessKey:      ${AWS_ACCESS_KEY_ID}\n          secretKey:      ${AWS_SECRET_ACCESS_KEY}\n          securityGroups: ${AWS_SECURITY_GROUP}\n          region:         ${AWS_DEFAULT_REGION}\n          tag:            rexray\" \\\n | sudo tee /etc/rexray/config.yml\n\n```", "```\nsudo rexray service start\n\n```", "```\nrexray.service - rexray\n   Loaded: loaded (/etc/systemd/system/rexray.service; enabled; \\\nvendor preset: enabled)\n   Active: active (running) since Thu 2016-12-22 19:34:51 UTC; 245ms ago\n Main PID: 7238 (rexray)\n    Tasks: 4\n   Memory: 10.6M\n      CPU: 109ms\n   CGroup: /system.slice/rexray.service/\\\n           _7238 /usr/bin/rexray start -f\n\nDec 22 19:34:51 ip-172-31-20-98 systemd[1]: Started rexray.\n\n```", "```\nexit\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip)\n\n```", "```\nsudo rexray volume get\n\n```", "```\nID  Name  Status  Size\n\n```", "```\ndocker service create --name jenkins \\\n-e JENKINS_OPTS=\"--prefix=/jenkins\" \\\n    --mount \"type=volume,source=jenkins,target=/var/jenkins_home, \\\nvolume-driver=rexray\" \\\n    --label com.df.notify=true \\\n    --label com.df.distribute=true \\\n    --label com.df.servicePath=/jenkins \\\n    --label com.df.port=8080 \\\n    --network proxy \\\n    --reserve-memory 300m \\\n    jenkins:2.7.4-alpine\n\n```", "```\nsudo rexray volume get\n\n```", "```\nID          Name    Status   Size\nfs-0a64ba43 jenkins attached 6144\n\n```", "```\ndocker volume ls\n\n```", "```\nDRIVER  VOLUME NAME\nrexray  jenkins\n\n```", "```\nexit\n\nopen \"https://console.aws.amazon.com/efs/home?region=$AWS_DEFAULT_REGION\"\n\n```", "```\nopen \"http://$(terraform output swarm_manager_1_public_ip)/jenkins\"\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip)\n\ndocker run -it --rm \\\n    --volume-driver rexray \\\n    -v jenkins:/var/jenkins_home \\\n    alpine cat /var/jenkins_home/secrets/initialAdminPassword\n\n```", "```\n9c5e8e51af954d7988b310d862c3d38c\n\n```", "```\nJENKINS_IP=$(docker service ps jenkins | tail -n 1 \\\n    | awk '{ print $4 }' | cut -c 4- | tr \"-\" \".\")\n\nJENKINS_ID=$(docker -H tcp://$JENKINS_IP:2375 \\\n    ps -q \\\n    --filter label=com.docker.swarm.service.name=jenkins)\n\ndocker -H tcp://$JENKINS_IP:2375 \\\n    rm -f $JENKINS_ID\n\n```", "```\ndocker service ps jenkins\n\n```", "```\ndocker service rm jenkins\n\ndocker volume rm jenkins\n\nexit\n\nterraform destroy -force\n\n```", "```\ncat packer-ubuntu-docker-rexray.json\n\n```", "```\n\"provisioners\": [{\n  \"type\": \"shell\",\n  \"inline\": [\n   ...\n   \"curl -sSL https://dl.bintray.com/emccode/rexray/install | sh -s -- stable\"\n   ...\n  }]\n\n```", "```\npacker build -machine-readable \\\n    packer-ubuntu-docker-rexray.json \\\n    | tee packer-ubuntu-docker-rexray.log\n\nexport TF_VAR_swarm_ami_id=$(\\\n    grep 'artifact,0,id' \\\n    packer-ubuntu-docker-rexray.log \\\n    | cut -d: -f2)\n\n```", "```\ncat rexray.tpl\n\n```", "```\nlibstorage:\n  service: efs\n  server:\n    services:\n      efs:\n        driver: efs\n        efs:\n          accessKey:      ${aws_access_key}\n          secretKey:      ${aws_secret_key}\n          region:         ${aws_default_region}\n          securityGroups: ${aws_security_group}\n          tag:            rexray\n\n```", "```\ncat common.tf\n\n```", "```\ndata \"template_file\" \"rexray\" {\n  template = \"${file(\"rexray.tpl\")}\"\n\n  vars {\n    aws_access_key = \"${var.aws_access_key}\"\n    aws_secret_key = \"${var.aws_secret_key}\"\n    aws_default_region = \"${var.aws_default_region}\"\n    aws_security_group = \"${aws_security_group.docker.id}\"\n  }\n}\n\n```", "```\ncat swarm.tf\n\n```", "```\n\"if ${var.rexray}; then echo \\\"${data.template_file.rexray.rendered}\\\"\\\n | sudo tee /etc/rexray/config.yml; fi\",\n\"if ${var.rexray}; then sudo rexray service start >/dev/null 2>/dev/null; fi\"\n\n```", "```\nterraform apply \\\n    -target aws_instance.swarm-manager \\\n    -var swarm_init=true \\\n    -var swarm_managers=1 \\\n    -var rexray=true\n\n```", "```\nexport TF_VAR_swarm_manager_token=$(ssh \\\n    -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip) \\\n    docker swarm join-token -q manager)\n\nexport TF_VAR_swarm_manager_ip=$(terraform \\\n    output swarm_manager_1_private_ip)\n\nterraform apply \\\n    -target aws_instance.swarm-manager \\\n    -var rexray=true\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip)\n\nrexray version\n\n```", "```\nREX-Ray\n-------\nBinary: /usr/bin/rexray\nSemVer: 0.6.3\nOsArch: Linux-x86_64\nBranch: v0.6.3\nCommit: 69b1f5c2d86a2103c792bec23b5855babada1c0a\nFormed: Wed, 07 Dec 2016 23:22:14 UTC\n\nlibStorage\n----------\nSemVer: 0.3.5\nOsArch: Linux-x86_64\nBranch: v0.6.3\nCommit: 456dd68123dd6b49da0275d9bbabd6c800583f61\nFormed: Wed, 07 Dec 2016 23:21:36 UTC\n\n```", "```\ncat /etc/rexray/config.yml\n\n```", "```\nlibstorage:\nservice: efs\nserver:\n  services:\n  efs:\n    driver: efs\n    efs:\n      accessKey:      ##########\n      secretKey:      ##########\n      region:         ##########\n      securityGroups: ##########\n      tag:            rexray\n\n```", "```\ndocker network create --driver overlay proxy\n\ncurl -o proxy-stack.yml \\\n    https://raw.githubusercontent.com/ \\\nvfarcic/docker-flow-proxy/master/docker-compose-stack.yml\n\ndocker stack deploy \\\n    -c proxy-stack.yml proxy\n\ndocker service create --name jenkins \\\n-e JENKINS_OPTS=\"--prefix=/jenkins\" \\\n    --mount \"type=volume,source=jenkins,target=/var/jenkins_home,\\\nvolume-driver=rexray\" \\\n    --label com.df.notify=true \\\n    --label com.df.distribute=true \\\n    --label com.df.servicePath=/jenkins \\\n    --label com.df.port=8080 \\\n    --network proxy \\\n    --reserve-memory 300m \\\n    jenkins:2.7.4-alpine\n\n```", "```\ndocker volume ls\n\n```", "```\nDRIVER              VOLUME NAME\nrexray              jenkins\n\n```", "```\ndocker service ps jenkins # Wait until finished\n\nexit\n\nopen \"http://$(terraform output swarm_manager_1_public_ip)/jenkins\"\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip)\n\ndocker run -it --rm \\\n    --volume-driver rexray \\\n    -v jenkins:/var/jenkins_home \\\n    alpine cat /var/jenkins_home/secrets/initialAdminPassword\n\n```", "```\ndocker service rm jenkins\n\ndocker volume rm jenkins\n\nexit\n\n```", "```\nssh -i devops21.pem \\\n    ubuntu@$(terraform output \\\n    swarm_manager_1_public_ip)\n\n```", "```\ndocker network create --driver overlay go-demo\n\n```", "```\nfor i in 1 2 3; do\n    docker service create --name go-demo-db-rs$i \\\n        --reserve-memory 100m \\\n        --network go-demo \\\n        mongo:3.2.10 mongod --replSet \"rs0\"\ndone\n\n```", "```\ndocker service ls\n\n```", "```\nNAME           REPLICAS IMAGE        COMMAND\n...\ngo-demo-db-rs2 1/1      mongo:3.2.10 mongod --replSet rs0\ngo-demo-db-rs1 1/1      mongo:3.2.10 mongod --replSet rs0\ngo-demo-db-rs3 1/1      mongo:3.2.10 mongod --replSet rs0\n...\n\n```", "```\ndocker service create --name go-demo-db-util \\\n    --reserve-memory 100m \\\n    --network go-demo \\\n    --mode global \\\n    mongo:3.2.10 sleep 100000\n\n```", "```\nUTIL_ID=$(docker ps -q \\\n    --filter label=com.docker.swarm.service.name=go-demo-db-util)\n\n```", "```\ndocker exec -it $UTIL_ID sh\n\n```", "```\nmongo --host go-demo-db-rs1 --eval '\n    rs.initiate({\n        _id: \"rs0\",\n        version: 1,\n        members: [\n            {_id: 0, host: \"go-demo-db-rs1\" },\n            {_id: 1, host: \"go-demo-db-rs2\" },\n            {_id: 2, host: \"go-demo-db-rs3\" }\n        ]\n    })\n'\n\n```", "```\nMongoDB shell version: 3.2.10\nconnecting to: go-demo-db-rs1:27017/test\n{ \"ok\" : 1 }\n\n```", "```\nmongo --host go-demo-db-rs1 --eval 'rs.conf()'\n\n```", "```\nMongoDB shell version: 3.2.10\nconnecting to: go-demo-db-rs1:27017/test\n{\n      \"_id\" : \"rs0\",\n      \"version\" : 1,\n      \"protocolVersion\" : NumberLong(1),\n      \"members\" : [\n              {\n                    \"_id\" : 0,\n                    \"host\" : \"go-demo-db-rs1:27017\",\n                    \"arbiterOnly\" : false,\n                    \"buildIndexes\" : true,\n                    \"hidden\" : false,\n                    \"priority\" : 1,\n                    \"tags\" : {\n\n                    },\n                    \"slaveDelay\" : NumberLong(0),\n                    \"votes\" : 1\n              },\n              ...\n    ],\n    \"settings\" : {\n            \"chainingAllowed\" : true,\n            \"heartbeatIntervalMillis\" : 2000,\n            \"heartbeatTimeoutSecs\" : 10,\n            \"electionTimeoutMillis\" : 10000,\n            \"getLastErrorModes\" : {\n\n            },\n           \"getLastErrorDefaults\" : {\n                   \"w\" : 1,\n                   \"wtimeout\" : 0\n            },\n            \"replicaSetId\" : ObjectId(\"585d643276899856d1dc5f36\")\n    }\n}\n\n```", "```\nmongo --host go-demo-db-rs1 --eval 'rs.status()'\n\n```", "```\nconnecting to: go-demo-db-rs1:27017/test\n{\n        \"set\" : \"rs0\",\n        \"date\" : ISODate(\"2016-12-23T17:52:36.822Z\"),\n        \"myState\" : 1,\n        \"term\" : NumberLong(1),\n        \"heartbeatIntervalMillis\" : NumberLong(2000),\n        \"members\" : [\n                {\n                        \"_id\" : 0,\n                        \"name\" : \"go-demo-db-rs1:27017\",\n                        \"health\" : 1,\n                        \"state\" : 1,\n                        \"stateStr\" : \"PRIMARY\",\n                        \"uptime\" : 254,\n                        \"optime\" : {\n                                \"ts\" : Timestamp(1482515517, 2),\n                                \"t\" : NumberLong(1)\n              },\n              \"optimeDate\" : ISODate(\"2016-12-23T17:51:57Z\"),\n              \"infoMessage\" : \"could not find member to sync from\",\n              \"electionTime\" : Timestamp(1482515517, 1),\n              \"electionDate\" : ISODate(\"2016-12-23T17:51:57Z\"),\n              \"configVersion\" : 1,\n              \"self\" : true\n        },\n        ...\n    ],\n    \"ok\" : 1\n}\n\n```", "```\nmongo --host go-demo-db-rs1\n\n```", "```\nMongoDB shell version: 3.2.10\nconnecting to: go-demo-db-rs1:27017/test\nWelcome to the MongoDB shell.\nFor interactive help, type \"help\".\nFor more comprehensive documentation, see\n       http://docs.mongodb.org/\nQuestions? Try the support group\n       http://groups.google.com/group/mongodb-user\nrs0:PRIMARY>\n\n```", "```\nuse test\n\ndb.books.insert(\n   {\n      title:\"The DevOps 2.0 Toolkit\"\n   }\n)\n\ndb.books.insert(\n   {\n      title:\"The DevOps 2.1 Toolkit\"\n   }\n)\n\ndb.books.find()\n\n```", "```\n{ \"_id\" : ObjectId(\"585d6491660a574f80478cb6\"), \"title\" : \\\n\"The DevOps 2.0 Toolkit\" }\n{ \"_id\" : ObjectId(\"585d6491660a574f80478cb7\"), \"title\" : \\\n\"The DevOps 2.1 Toolkit\" }\n\n```", "```\nexit # Mongo\n\nexit # go-demo-db-util\n\nRS1_IP=$(docker service ps go-demo-db-rs1 \\\n    | tail -n 1 \\\n    | awk '{ print $4 }' \\\n    | cut -c 4- \\\n    | tr \"-\" \".\")\n\ndocker -H tcp://$RS1_IP:2375 ps\n\n```", "```\nIMAGE                            COMMAND                CREATED                                 \nmongo:3.2.10                     \"/entrypoint.sh sleep\" 3 minutes ago                   \nmongo:3.2.10                     \"/entrypoint.sh mongo\" 6 minutes ago                   \nvfarcic/docker-flow-proxy:latest \"/docker-entrypoint.s\" 13 minutes ago \n-----------------------------------------------------------------------\nNAMES                                        PORTS \ngo-demo-db-util.0.8qcsmlzioohn3j6p78hntskj1  27017/tcp \ngo-demo-db-rs1.1.86sg93z9oasd43dtgoax53nuw   27017/tcp proxy.2.3tlpr1xyiu8wm70lmrffod7ui            80/tcp,443/tcp/,8080/tcp \n\n```", "```\nRS1_ID=$(docker -H tcp://$RS1_IP:2375 \\\n    ps -q \\\n    --filter label=com.docker.swarm.service.name=go-demo-db-rs1) \\\n\ndocker -H tcp://$RS1_IP:2375 rm -f $RS1_ID\n\n```", "```\ndocker service ps go-demo-db-rs1\n\n```", "```\nNAME                 IMAGE        NODE               DESIRED STATE          \ngo-demo-db-rs1.1     mongo:3.2.10 ip-172-31-16-215   Running       \n_ go-demo-db-rs1.1   mongo:3.2.10 ip-172-31-16-215   Shutdown       \n-----------------------------------------------------------------------\nCURRENT STATE           ERROR\nRunning 28 seconds ago   \nFailed 35 seconds ago   \"task: non-zero exit (137)\"\n\n```", "```\ndocker exec -it $UTIL_ID sh\n\nmongo --host go-demo-db-rs1 --eval 'rs.status()'\n\n```", "```\nMongoDB shell version: 3.2.10\nconnecting to: go-demo-db-rs1:27017/test\n{\n       \"set\" : \"rs0\",\n       \"date\" : ISODate(\"2016-12-23T17:56:08.543Z\"),\n       \"myState\" : 2,\n       \"term\" : NumberLong(2),\n       \"heartbeatIntervalMillis\" : NumberLong(2000),\n       \"members\" : [\n               {\n                   \"_id\" : 0,\n                   \"name\" : \"go-demo-db-rs1:27017\",\n                   ...\n                   \"stateStr\" : \"SECONDARY\",\n                   ...\n               },\n               {\n                   \"_id\" : 1,\n                   \"name\" : \"go-demo-db-rs2:27017\",\n                   ...\n                   \"stateStr\" : \"PRIMARY\",\n                   ...\n               },\n               {\n                  \"_id\" : 2,\n                  \"name\" : \"go-demo-db-rs3:27017\",\n                  ...\n                  \"stateStr\" : \"SECONDARY\",\n                  ...\n               }\n    ],\n    \"ok\" : 1\n}\n\n```", "```\nmongo --host go-demo-db-rs2\n\n```", "```\nuse test\n\ndb.books.find()\n\n```", "```\n{ \"_id\" : ObjectId(\"585d6491660a574f80478cb6\"), \"title\" : \\\n\"The DevOps 2.0 Toolkit\" }\n{ \"_id\" : ObjectId(\"585d6491660a574f80478cb7\"), \"title\" : \\\n\"The DevOps 2.1 Toolkit\" }\n\n```", "```\nexit # Mongo\n\nexit # go-demo-db-util\n\ndocker service rm go-demo-db-rs1 \\\n    go-demo-db-rs2 go-demo-db-rs3 \\\n    go-demo-db-util\n\n```", "```\nfor i in 1 2 3; do\n    docker service create --name go-demo-db-rs$i \\\n        --reserve-memory 100m \\\n        --network go-demo \\\n        mongo:3.2.10 mongod --replSet \"rs0\"\n\n    MEMBERS=\"$MEMBERS go-demo-db-rs$i\"\ndone\n\n```", "```\nFROM mongo:3.2.10\n\nCOPY init-mongo-rs.sh /init-mongo-rs.sh\nRUN chmod +x /init-mongo-rs.sh\nENTRYPOINT [\"/init-mongo-rs.sh\"]\n\n```", "```\n#!/usr/bin/env bash\n\nfor rs in \"$@\"; do\n    mongo --host $rs --eval 'db'\n    while [$? -ne 0 ]; do\n      echo \"Waiting for $rs to become available\"\n      sleep 3\n        mongo --host $rs --eval 'db'\n    done\ndone\n\ni=0\nfor rs in \"$@\"; do\n    if [ \"$rs\" != \"$1\" ]; then\n       MEMBERS=\"$MEMBERS ,\"\n    fi\n    MEMBERS=\"$MEMBERS {_id: $i, host: \\\"$rs\\\" }\"\n    i=$((i+1))\ndone\n\nmongo --host $1 --eval \"rs.initiate({_id: \\\"rs0\\\", version: 1, \\\nmembers: [$MEMBERS]})\"\nsleep 3\nmongo --host $1 --eval 'rs.status()'\n\n```", "```\ndocker service create --name go-demo-db-init \\\n    --restart-condition none \\\n    --network go-demo \\\n    vfarcic/mongo-devops21 $MEMBERS\n\n```", "```\ndocker service ls\n\n```", "```\nID            NAME             REPLICAS  IMAGE                     \n1lpus9pvxoj6  go-demo-db-rs1   1/1       mongo:3.2.10             \n59eox5zqfhf8  go-demo-db-rs2   1/1       mongo:3.2.10              \n5tchuajhi05e  go-demo-db-init  0/1       vfarcic/mongo-devops21    \n6cmd34ezpun9  go-demo-db-rs3   1/1       mongo:3.2.10                        \nbvfrbwdi5li3  swarm-listener   1/1       vfarcic/docker-flow-swarm-listener\ndjy5p4re3sbh  proxy            3/3       vfarcic/docker-flow-proxy\n----------------------------------------------------------------------\nCOMMAND\nmongod --replSet rs0\nmongod --replSet rs0\ngo-demo-db-rs1 go-demo-db-rs2 go-demo-db-rs3\nmongod --replSet rs0 \n\n```", "```\nDB_INIT_IP=$(docker service ps go-demo-db-init \\\n    | tail -n 1 \\\n    | awk '{ print $4 }' \\\n    | cut -c 4- \\\n    | tr \"-\" \".\")\n\nDB_INIT_ID=$(docker -H tcp://$DB_INIT_IP:2375 \\\n    ps -aq \\\n    --filter label=com.docker.swarm.service.name=go-demo-db-init)\n\ndocker -H tcp://$DB_INIT_IP:2375 logs $DB_INIT_ID\n\n```", "```\nMongoDB shell version: 3.2.10\nconnecting to: go-demo-db-rs1:27017/test\n{\n        \"set\" : \"rs0\",\n        \"date\" : ISODate(\"2016-12-23T18:18:30.723Z\"),\n        \"myState\" : 1,\n        \"term\" : NumberLong(1),\n        \"heartbeatIntervalMillis\" : NumberLong(2000),\n        \"members\" : [\n               {\n                    \"_id\" : 0,\n                    \"name\" : \"go-demo-db-rs1:27017\",\n                    ...\n                    \"stateStr\" : \"PRIMARY\",\n                    ...\n               },\n               {\n                   \"_id\" : 1,\n                   \"name\" : \"go-demo-db-rs2:27017\",\n                   \"...\n                   \"stateStr\" : \"SECONDARY\",\n                   ...\n              },\n              {\n                   \"_id\" : 2,\n                   \"name\" : \"go-demo-db-rs3:27017\",\n                   ...\n                   \"stateStr\" : \"SECONDARY\",\n                   ...\n              }\n    ],\n    \"ok\" : 1\n}\n\n```", "```\ndocker service create --name go-demo \\\n-e DB=\"go-demo-db-rs1,go-demo-db-rs2,go-demo-db-rs3\" \\\n    --reserve-memory 10m \\\n    --network go-demo \\\n    --network proxy \\\n    --replicas 3 \\\n    --label com.df.notify=true \\\n    --label com.df.distribute=true \\\n    --label com.df.servicePath=/demo \\\n    --label com.df.port=8080 \\\n    vfarcic/go-demo:1.2\n\n```", "```\ndocker service ps go-demo\n\n```", "```\nNAME      IMAGE               NODE             DESIRED STATE          \ngo-demo.1 vfarcic/go-demo:1.2 ip-172-31-23-206 Running       \ngo-demo.2 vfarcic/go-demo:1.2 ip-172-31-25-35  Running       \ngo-demo.3 vfarcic/go-demo:1.2 ip-172-31-25-35  Running       \n---------------------------------------------------\nERROR\nRunning 11 seconds ago\nRunning 9 seconds ago\nRunning 9 seconds ago \n\n```", "```\nexit\n\nterraform destroy -force\n\n```"]