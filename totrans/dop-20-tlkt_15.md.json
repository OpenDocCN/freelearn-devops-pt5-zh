["```\nvagrant up cd swarm-master swarm-node-1 swarm-node-2\n\n```", "```\nvagrant ssh cd\nansible-playbook /vagrant/ansible/swarm.yml \\\n -i /vagrant/ansible/hosts/prod\n\n```", "```\nansible-playbook /vagrant/ansible/jenkins-node-swarm.yml \\\n -i /vagrant/ansible/hosts/prod\nansible-playbook /vagrant/ansible/jenkins.yml \\\n --extra-vars \"main_job_src=service-healing-config.xml\" \\\n -c local\n\n```", "```\ndf -h\n\n```", "```\nFilesystem      Size  Used Avail Use% Mounted on\nudev            997M   12K  997M   1% /dev\ntmpfs           201M  440K  200M   1% /run\n/dev/sda1        40G  4.6G   34G  13% /\nnone            4.0K     0  4.0K   0% /sys/fs/cgroup\nnone            5.0M     0  5.0M   0% /run/lock\nnone           1001M     0 1001M   0% /run/shm\nnone            100M     0  100M   0% /run/user\nnone            465G  118G  347G  26% /vagrant\nnone            465G  118G  347G  26% /tmp/vagrant-cache\n\n```", "```\nset -- $(df -h | awk '$NF==\"/\"{print $2\" \"$3\" \"$5}')\ntotal=$1\nused=$2\nused_percent=${3::-1}\n\n```", "```\nprintf \"Disk Usage: %s/%s (%s%%)\\n\" $used $total $used_percent\n\n```", "```\nDisk Usage: 4.6G/40G (13%)\n\n```", "```\nif [ $used_percent -gt 95 ]; then\n  echo \"Should exit with 2\"\nelif [ $used_percent -gt 80 ]; then\n  echo \"Should exit with 1\"\nelse\n  echo \"Should exit with 0\"\nfi\n```", "```\nexit\nvagrant ssh swarm-master\n\n```", "```\nsudo mkdir -p /data/consul/scripts\n\n```", "```\necho '#!/usr/bin/env bash\nset -- $(df -h | awk '\"'\"'$NF==\"/\"{print $2\" \"$3\" \"$5}'\"'\"')\ntotal=$1\nused=$2\nused_percent=${3::-1}\nprintf \"Disk Usage: %s/%s (%s%%)\\n\" $used $total $used_percent\nif [ $used_percent -gt 95 ]; then\n  exit 2\nelif [ $used_percent -gt 80 ]; then\n  exit 1\nelse\n  exit 0\nfi\n```", "```\n' | sudo tee /data/consul/scripts/disk.sh\nsudo chmod +x /data/consul/scripts/disk.sh\n\n```", "```\n/data/consul/scripts/disk.sh\n\n```", "```\nDisk Usage: 3.3G/39G (9%)\n\n```", "```\necho $?\n\n```", "```\n{\n  \"checks\": [\n    {\n      \"id\": \"disk\",\n      \"name\": \"Disk utilization\",\n      \"notes\": \"Critical 95% util, warning 80% util\",\n      \"script\": \"/data/consul/scripts/disk.sh\",\n      \"interval\": \"10s\"\n    }\n  ]\n}\n```", "```\necho '{\n  \"checks\": [\n    {\n      \"id\": \"disk\",\n      \"name\": \"Disk utilization\",\n      \"notes\": \"Critical 95% util, warning 80% util\",\n      \"script\": \"/data/consul/scripts/disk.sh\",\n      \"interval\": \"10s\"\n    }\n  ]\n}\n```", "```\nsudo tee /data/consul/config/consul_check.json\n\n```", "```\nsudo killall -HUP consul\n\n```", "```\n#!/usr/bin/env bash\n\nRED=\"\\033[0;31m\"\nNC=\"\\033[0;0m\"\n\nread -r JSON\necho \"Consul watch request:\"\necho \"$JSON\"\n\nSTATUS_ARRAY=($(echo \"$JSON\" | jq -r \".[].Status\"))\nCHECK_ID_ARRAY=($(echo \"$JSON\" | jq -r \".[].CheckID\"))\nLENGTH=${#STATUS_ARRAY[*]}\n\nfor (( i=0; i<=$(( $LENGTH -1 )); i++ ))\ndo\n CHECK_ID=${CHECK_ID_ARRAY[$i]}\n STATUS=${STATUS_ARRAY[$i]}\n echo -e \"${RED}Triggering Jenkins job http://10.100.198.200:8080/job/hardware-notification/build${NC}\"\n curl -X POST http://10.100.198.200:8080/job/hardware-notification/build \\\n --data-urlencode json=\"{\\\"parameter\\\": [{\\\"name\\\":\\\"checkId\\\", \\\"value\\\":\\\"$CHECK_ID\\\"}, {\\\"name\\\":\\\"status\\\", \\\"value\\\":\\\"$STATUS\\\"}]}\"\ndone\n\n```", "```\necho '#!/usr/bin/env bash\n\nRED=\"\\033[0;31m\"\nNC=\"\\033[0;0m\"\n\nread -r JSON\necho \"Consul watch request:\"\necho \"$JSON\"\n\nSTATUS_ARRAY=($(echo \"$JSON\" | jq -r \".[].Status\"))\nCHECK_ID_ARRAY=($(echo \"$JSON\" | jq -r \".[].CheckID\"))\nLENGTH=${#STATUS_ARRAY[*]}\n\nfor (( i=0; i<=$(( $LENGTH -1 )); i++ ))\ndo\n CHECK_ID=${CHECK_ID_ARRAY[$i]}\n STATUS=${STATUS_ARRAY[$i]}\n echo -e \"${RED}Triggering Jenkins job http://10.100.198.200:8080/job/hardware-notification/build${NC}\"\n curl -X POST http://10.100.198.200:8080/job/hardware-notification/build \\\n --data-urlencode json=\"{\\\"parameter\\\": [{\\\"name\\\":\\\"checkId\\\", \\\"value\\\":\\\"$CHECK_ID\\\"}, {\\\"name\\\":\\\"status\\\", \\\"value\\\":\\\"$STATUS\\\"}]}\"\ndone\n\n```", "```\n' | sudo tee /data/consul/scripts/manage_watches.sh\n\nsudo chmod +x /data/consul/scripts/manage_watches.sh\n\n```", "```\n{\n \"watches\": [\n {\n \"type\": \"checks\",\n \"state\": \"warning\",\n \"handler\": \"/data/consul/scripts/manage_watches.sh >>/data/consul/logs/watches.log\"\n }, {\n \"type\": \"checks\",\n \"state\": \"critical\",\n \"handler\": \"/data/consul/scripts/manage_watches.sh >>/data/consul/logs/watches.log\"\n }\n ]\n}\n\n```", "```\necho '{\n  \"watches\": [\n    {\n      \"type\": \"checks\",\n      \"state\": \"warning\",\n      \"handler\": \"/data/consul/scripts/manage_watches.sh >>/data/consul/logs/watches.log\"\n    }, {\n      \"type\": \"checks\",\n      \"state\": \"critical\",\n      \"handler\": \"/data/consul/scripts/manage_watches.sh >>/data/consul/logs/watches.log\"\n    }\n  ]\n}'\n```", "```\nsudo tee /data/consul/config/watches.json\n\n```", "```\nsudo sed -i \"s/80/2/\" /data/consul/scripts/disk.sh\n\n```", "```\nsudo killall -HUP consul\n\n```", "```\ncat /data/consul/logs/watches.log\n\n```", "```\nConsul watch request:\n[{\"Node\":\"swarm-master\",\"CheckID\":\"disk\",\"Name\":\"Disk utilization\",\"Status\":\"warning\",\"Notes\":\"Critical 95% util, warning 80% util\",\"Output\":\"Disk Usage: 3.3G/39G (9%)\\n\",\"ServiceID\":\"\",\"ServiceName\":\"\"}]\nTriggering Jenkins job http://10.100.198.200:8080/job/hardware-notification/build\n\n```", "```\nexit\n\n```", "```\nvagrant ssh cd\n\nansible-playbook /vagrant/ansible/swarm-healing.yml \\\n -i /vagrant/ansible/hosts/prod\n\n```", "```\n- hosts: swarm\n remote_user: vagrant\n serial: 1\n sudo: yes\n vars:\n - debian_version: vivid\n - docker_cfg_dest: /lib/systemd/system/docker.service\n - is_systemd: true\n roles:\n - common\n - docker\n - consul-healing\n - swarm\n - registrator\n\n```", "```\n{\n \"service\": {\n \"name\": \"books-ms\",\n \"tags\": [\"service\"],\n \"port\": 80,\n \"address\": \"{{key \"proxy/ip\"}}\",\n \"checks\": [{\n \"id\": \"api\",\n \"name\": \"HTTP on port 80\",\n \"http\": \"http://{{key \"proxy/ip\"}}/api/v1/books\",\n \"interval\": \"10s\",\n \"timeout\": \"1s\"\n }]\n }\n}\n\n```", "```\nnode(\"cd\") {\n    def serviceName = \"books-ms\"\n    def prodIp = \"10.100.192.200\"\n    def proxyIp = \"10.100.192.200\"\n    def swarmNode = \"swarm-master\"\n    def proxyNode = \"swarm-master\"\n    def registryIpPort = \"10.100.198.200:5000\"\n    def swarmPlaybook = \"swarm-healing.yml\"\n    def proxyPlaybook = \"swarm-proxy.yml\"\n    def instances = 1\n\n    def flow = load \"/data/scripts/workflow-util.groovy\"\n\n    git url: \"https://github.com/vfarcic/${serviceName}.git\"\n    flow.provision(swarmPlaybook)\n    flow.provision(proxyPlaybook)\n    flow.buildTests(serviceName, registryIpPort)\n    flow.runTests(serviceName, \"tests\", \"\")\n    flow.buildService(serviceName, registryIpPort)\n\n    def currentColor = flow.getCurrentColor(serviceName, prodIp)\n    def nextColor = flow.getNextColor(currentColor)\n\n    flow.deploySwarm(serviceName, prodIp, nextColor, instances)\n    flow.runBGPreIntegrationTests(serviceName, prodIp, nextColor)\n    flow.updateBGProxy(serviceName, proxyNode, nextColor)\n    flow.runBGPostIntegrationTests(serviceName, prodIp, proxyIp, proxyNode, currentColor, nextColor)\n    flow.updateChecks(serviceName, swarmNode)\n}\n```", "```\ndef updateChecks(serviceName, swarmNode) {\n stage \"Update checks\"\n stash includes: 'consul_check.ctmpl', name: 'consul-check'\n node(swarmNode) {\n unstash 'consul-check'\n sh \"sudo consul-template -consul localhost:8500 \\\n -template 'consul_check.ctmpl:/data/consul/config/${serviceName}.json:killall -HUP consul' \\\n -once\"\n }\n}\n\n```", "```\n    if [[ \"$CHECK_ID\" == \"mem\" || \"$CHECK_ID\" == \"disk\" ]]; then\n        echo -e \"${RED}Triggering Jenkins job http://{{ jenkins_ip }}:8080/job/hardware-notification/build${NC}\"\n        curl -X POST http://{{ jenkins_ip }}:8080/job/hardware-notification/build \\\n            --data-urlencode json=\"{\\\"parameter\\\": [{\\\"name\\\":\\\"checkId\\\", \\\"value\\\":\\\"$CHECK_ID\\\"}, {\\\"name\\\":\\\"status\\\", \\\"value\\\":\\\"$STATUS\\\"}]}\"\n    else\n        echo -e \"${RED}Triggering Jenkins job http://{{ jenkins_ip }}:8080/job/service-redeploy/buildWithParameters?serviceName=${SERVICE_ID}${NC}\"\n        curl -X POST http://{{ jenkins_ip }}:8080/job/service-redeploy/buildWithParameters?serviceName=${SERVICE_ID}\n    fi\n```", "```\nnode(\"cd\") {\n    def prodIp = \"10.100.192.200\"\n    def swarmIp = \"10.100.192.200\"\n    def proxyNode = \"swarm-master\"\n    def swarmPlaybook = \"swarm-healing.yml\"\n    def proxyPlaybook = \"swarm-proxy.yml\"\n\n    def flow = load \"/data/scripts/workflow-util.groovy\"\n    def currentColor = flow.getCurrentColor(serviceName, prodIp)\n    def instances = flow.getInstances(serviceName, swarmIp)\n\n    deleteDir()\n    git url: \"https://github.com/vfarcic/${serviceName}.git\"\n    try {\n        flow.provision(swarmPlaybook)\n        flow.provision(proxyPlaybook)\n    } catch (e) {}\n\n    flow.deploySwarm(serviceName, prodIp, currentColor, instances)\n    flow.updateBGProxy(serviceName, proxyNode, currentColor)\n}\n```", "```\ndef getInstances(serviceName, swarmIp) {\n    return sendHttpRequest(\"http://${swarmIp}:8500/v1/kv/${serviceName}/instances?raw\")\n}\n```", "```\n deleteDir()\n git url: \"https://github.com/vfarcic/${serviceName}.git\"\n\n```", "```\n    try {\n        flow.provision(swarmPlaybook)\n        flow.provision(proxyPlaybook)\n    } catch (e) {}\n```", "```\n flow.deploySwarm(serviceName, prodIp, currentColor, instances)\n flow.updateBGProxy(serviceName, proxyNode, currentColor)\n\n```", "```\nexit\n\nvagrant ssh swarm-master\n\ndocker stop nginx\n\nexit\n\nvagrant ssh cd\n\n```", "```\ncurl swarm-master/api/v1/books\n\n```", "```\ncurl: (7) Failed to connect to swarm-master port 80: Connection refused\n\n```", "```\ncurl -I swarm-master/api/v1/books\n\n```", "```\nHTTP/1.1 200 OK\nServer: nginx/1.9.9\nDate: Tue, 19 Jan 2016 21:53:00 GMT\nContent-Type: application/json; charset=UTF-8\nContent-Length: 2\nConnection: keep-alive\nAccess-Control-Allow-Origin: *\n\n```", "```\nexport DOCKER_HOST=tcp://swarm-master:2375\n\ndocker rm -f $(docker ps --filter name=booksms --format \"{{.ID}}\")\n\n```", "```\ndocker ps --filter name=books --format \"table {{.Names}}\"\n\ncurl -I swarm-master/api/v1/books\n\n```", "```\nNAMES\nswarm-node-2/booksms_app-blue_1\nswarm-node-1/books-ms-db\n\n...\n\nHTTP/1.1 200 OK\nServer: nginx/1.9.9\nDate: Tue, 19 Jan 2016 22:05:50 GMT\nContent-Type: application/json; charset=UTF-8\nContent-Length: 2\nConnection: keep-alive\nAccess-Control-Allow-Origin: *\n\n```", "```\nnode(\"cd\") {\n    def serviceName = \"books-ms\"\n    def swarmIp = \"10.100.192.200\"\n\n    def flow = load \"/data/scripts/workflow-util.groovy\"\n    def instances = flow.getInstances(serviceName, swarmIp).toInteger() + scale.toInteger()\n    flow.putInstances(serviceName, swarmIp, instances)\n    build job: \"service-redeploy\", parameters: [[$class: \"StringParameterValue\", name: \"serviceName\", value: serviceName]]\n}\n```", "```\nexport DOCKER_HOST=tcp://swarm-master:2375\n\ndocker ps --filter name=books --format \"table {{.Names}}\"\n\ncurl swarm-master:8500/v1/kv/books-ms/instances?raw\n\n```", "```\nNAMES\nswarm-node-1/booksms_app-blue_1\nswarm-node-2/books-ms-db\n...\n1\n\n```", "```\ndocker ps --filter name=books --format \"table {{.Names}}\"\n\ncurl swarm-master:8500/v1/kv/books-ms/instances?raw\n\n```", "```\nNAMES\nswarm-node-2/booksms_app-blue_3\nswarm-node-1/booksms_app-blue_2\nswarm-node-1/booksms_app-blue_1\nswarm-node-2/books-ms-db\n...\n3\n\n```", "```\ndocker ps --filter name=books --format \"table {{.Names}}\"\n\ncurl swarm-master:8500/v1/kv/books-ms/instances?raw\n\n```", "```\nNAMES\nswarm-node-1/booksms_app-blue_1\nswarm-node-2/books-ms-db\n...\n1\n\n```", "```\ndocker run --restart=on-failure:3 mongo\n\n```", "```\nexit\n\nvagrant halt\n\n```"]