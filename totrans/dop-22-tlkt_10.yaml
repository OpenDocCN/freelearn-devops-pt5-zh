- en: Alerting Humans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While Prometheus alerts are great by themselves, they are not very useful unless
    you’re planning to spend all your time in front of the *alerts* screen. There
    are much better things to stare. For example, you can watch Netflix instead. It
    is much more entertaining than watching Prometheus screen. However, before you
    start watching Netflix during your working hours, we need to find a way so that
    you do get notified when an alert is fired.
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed, I must stress that alerts to humans (operators and sysadmins)
    are the last resort. We should receive them only if the system was not capable
    of fixing the problem. However, in the beginning, we do not have a self-healing
    system. The approach we’ll take is to send each alert to a human. That’s a quick
    fix. From there on, we’ll try to build the system that will receive those alerts
    instead us. It will be per use-case. We’ll create a system that sends us all alerts
    and then we’ll start exploring each of the scenarios. If we can make the system
    accept that alert and self-heal, we’ll stop sending it to a human. On the other
    hand, if we cannot add that scenario into the system, it will continue alerting
    us. In other words, all alerts will be sent to humans except those integrated
    into the self-healing system we’ll build.
  prefs: []
  type: TYPE_NORMAL
- en: Where should we send alert messages? Slack is probably a good candidate to start.
    Even if you do not use Slack, the principles we’ll explore will be the same no
    matter whether your end-point will be email, HangOuts, Messenger, HipChat, SMS,
    or pigeon couriers. As long as that end-point has an API, we should be able to
    utilize it. That might be easier for some than others. Pigeon couriers might not
    yet have an API.
  prefs: []
  type: TYPE_NORMAL
- en: Creating The Cluster And Deploying Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll start by recreating the cluster and deploying the stacks that we used
    in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
