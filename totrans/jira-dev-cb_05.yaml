- en: Chapter 5. Gadgets and Reporting in JIRA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing a JIRA report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reports in Excel format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data validation in JIRA reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting access to reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object configurable parameters for reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pie chart in JIRA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing JIRA 4 gadgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoking REST services from gadgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring user preferences in gadgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing gadgets outside of JIRA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reporting support in an application like JIRA is inevitable! With so much data
    spanning across different projects, issues, and lot of project planning done on
    it, we need more and more reports with customized data according to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two different kinds of reporting available in JIRA:'
  prefs: []
  type: TYPE_NORMAL
- en: Gadgets that can be added into a user's dashboard – From 4.x, the JIRA dashboard
    was revamped to include gadgets, replacing the legacy portlets. These gadgets
    are mini applications built using HTML and JavaScript that can run on any OpenSocial
    gadget container. They communicate with JIRA using REST APIs and retrieve the
    required information before rendering the display for the user appropriately.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the JIRA dashboard is now an OpenSocial gadget container, we can even add
    third-party gadgets onto it provided they meet the gadget specifications. Similarly,
    JIRA gadgets can be added on to other containers like iGoogle, Gmail, and so on,
    but not all features of JIRA gadgets are supported by other gadget containers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Normal JIRA reports – JIRA also provides an option to create reports that show
    statistics for particular people, projects, versions, or other fields within issues.
    These reports can be found under 'Browse Project', and can be used to generate
    simple tabular reports, charts, and so on, and can then be exported to Excel if
    supported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JIRA provides a number of built-in reports, the details of which can be found
    at [http://confluence.atlassian.com/display/JIRA/Generating+Reports](http://confluence.atlassian.com/display/JIRA/Generating+Reports).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In addition to the Gadgets and Reports that JIRA provides, there are a lot of
    them available in the Atlassian plugin exchange. But still, we will end up writing
    some that are customized specifically for our organization and that is where JIRA's
    plugin architecture helps us by providing two plugin modules, one for reports
    and one for gadgets.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see more details on writing JIRA reports and gadgets,
    converting legacy portlets into gadgets, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to that, we will also have a quick look at the **JIRA Query Language**
    (**JQL**), which provides advanced searching capabilities within the issue navigator.
    JQL helps us to generate a lot of the reports in issue navigator and export them
    into convenient views like Excel, Word, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a JIRA report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we just mentioned, a JIRA report can display statistical information based
    on all elements within JIRA – for example, issues, projects, users, issue types,
    and so on. They can have HTML results and optionally Excel results.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add new reports in JIRA, you can use the **Report Plugin Module**. The following
    are the key attributes and elements supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Attributes**:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `key` | This should be unique within the plugin. |'
  prefs: []
  type: TYPE_TB
- en: '| `class` | Class to provide contexts for rendered velocity templates. Must
    implement the `com.atlassian.jira.plugin.report.Report` interface. Recommended
    to extend the `com.atlassian.jira.plugin.report.impl.AbstractReport` class. |'
  prefs: []
  type: TYPE_TB
- en: '| `i18n-name-key` | The localization key for the human-readable name of the
    plugin module. |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | Human-readable name of the report. Appears in the plugins page.
    Default is the plugin key. |'
  prefs: []
  type: TYPE_TB
- en: '**Elements**:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `description` | Description of the report. |'
  prefs: []
  type: TYPE_TB
- en: '| `label` | User visible name of the report. |'
  prefs: []
  type: TYPE_TB
- en: '| `resource type="velocity"` | Velocity templates for the report views. |'
  prefs: []
  type: TYPE_TB
- en: '| `resource type="18n"` | JAVA properties file for the i18n localization |'
  prefs: []
  type: TYPE_TB
- en: '| `properties` | Reports configurable parameters that used to accept user inputs.
    |'
  prefs: []
  type: TYPE_TB
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a skeleton plugin using the Atlassian plugin SDK.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us consider creating a very simple report with little business logic in
    it. The example we choose here is to display the key and summary of all *issues*
    in a selected *project*. The only input for the report will be the *project name*,
    which can be selected from a drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the step-by-step procedure to create this report:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the report plugin module in the plugin descriptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this first step, we will look at populating the entire plugin module in the
    `atlassian-plugin.xml` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the report module:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: As usual, the plugin module should have a unique key. The other most important
    attribute here is the class. `AllIssuesReport`, in this case, is the class that
    populates the context for the velocity templates used in the report display. It
    holds the business logic to retrieve the report results based on the criteria
    entered by the user.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the `i18n` property resource that can be used for internationalization
    within the report. The keys entered, such as `report.allissues.label`, will be
    mapped to a key within the property file:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Here, the `AllIssuesReport.properties` file will be present in the `com.jtricks.allissues`
    package under the resources folder in your plugin. All the keys that you used
    should be present in the properties file with the appropriate values.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the velocity template resources within the report module:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Here we have defined the velocity templates that will be used to render the
    HTML and the Excel views for the report.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Define the user-driven properties:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: This is a list of properties that will be rendered appropriately on the report
    input page. In our example, we need to select a project from a select list before
    generating the report. For this, we have defined a project property here for which
    the type is `select`. JIRA will automatically render this as a select list by
    taking the key/value pair from the `ProjectValuesGenerator` class. We will see
    more details on the types supported in the coming recipes.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we have the plugin descriptor filled in with the details required for the
    report plugin module. The entire module now looks as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `i18n` resource properties file. As mentioned, it will be created
    in the `com.jtricks.allissues` package under the resources folder. The name of
    the file will be `AllIssuesReport.properties`. We have used three properties so
    far, which will be populated with the appropriate values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can create `AllIssuesReport.proprties_{language}_{countrycode}` to support
    other locales.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the **Value Generator** class. This is the class that is used to generate
    the values to be used for rendering the user properties on the report input page.
    In our example, we have used the `ProjectValuesGenerator` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The class that generates the values should implement the `ValuesGenerator` interface.
    It should then implement the `getValues()` method to return a key/value map. The
    value will be used for display, and the key will be returned as the property value
    which will be used in the report class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `ProjectValuesGenerator` class, we use the project ID and the name as
    the key/value pair.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the report class. This is where the actual business logic lies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The report class, `AllIssuesReport` in this case, should extend the `AbstractReport`
    class. It can just implement the `Report` interface, but `AbstractReport` has
    some already implemented methods, and hence is recommended.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The only mandatory method we need to implement here is the `generateReportHtml`
    method. We need to populate a map here that can be used to render the velocity
    views. In our example, we populate the map with variable issues, which is a list
    of issue objects in the selected project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The selected project can be retrieved using the key value entered in the property
    in the `atlassian-plugin.xml` file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now use this `pid` to retrieve the list of issues using the method `getIssuesFromProject`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now all we need to do here is populate the map with this and return the rendered
    view as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can populate any useful variable like this, and it can then be used in the
    velocity templates to render the view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The class now looks as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the velocity template. In our case, we are using `templates/allissues/allissues-report.vm`.
    We will use the issues variable we populated in the report class, iterate on it,
    and display the issue key and summary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, our report is ready. Package the plugin and deploy it. We will see
    more on creating Excel reports, validation within reports, and so on in the coming
    recipes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The whole logic of how it works can be outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The input view of reports is generated by the object configurable properties,
    a set of pre-defined properties used to populate input parameters in JIRA. In
    our example, we used the `select` property. We will see more of this in detail
    later in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The report class gets the properties, uses them to retrieve the details required
    in the report, and populates the velocity context with the details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Velocity templates use the details in its context to render the report.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After the plugin is deployed, you can see the report among other JIRA reports
    in the **Browse Project** section, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on the report, the input screen is displayed, which is constructed
    using the properties entered in the plugin descriptor, **Project** drop-down in
    our case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on **Next**, the report will be generated using the Report class and
    will be rendered using the velocity template as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating a skeleton plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process"), *Plugin Development Process*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying your plugin in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reports in Excel format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how to write a simple report. We will now see
    how to modify the report plugin to include Excel reports.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the report plugin, as mentioned in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are the steps to include the provision of exporting the report
    to Excel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the velocity resource type for the Excel view in the plugin descriptor
    if not added already:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `isExcelViewSupported` method in the report class to return true.
    In our case, we add this in the `AllIssuesReport.java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method returns false by default, as it is implemented that way in the `AbstractReport`
    class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Override the `generateReportExcel` method returning the Excel view. This is
    very similar to the `generateReportHtml` we implemented in the previous recipe.
    The only difference is the view returned. The method looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here the `getVelocityParams` method is exactly the same as what is used in the
    `generateReportHtml` method in the previous recipe. It retrieves the list of issues
    and populates the map of velocity parameters with the variable name issues.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the Excel velocity template. The template is created using HTML tags
    and velocity syntax, just like the other templates. In our example, it will be
    `allissues-report-excel.vm` under the folder `templates/allissues/` under resources.
    This is where the view can be customized for Excel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our example, all we have is a list of issues with its summary and key. Hence,
    we can even use the same template for Excel. It appears as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Package the plugin and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the Excel view is added into the reports, a link **Excel View** will appear
    on the right-hand top side of the generated reports, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On clicking the link, the `generateReportExcel` method is executed, which in
    turn will generate the report and render the Excel view using the appropriate
    template that is defined in the plugin descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed that when you click on the **Excel View** link, the excel
    report that opens is of the name `ConfigureReport!excelView.jspa`, and we need
    to rename that to `.xls` to make it Excel-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do it automatically, we need to set the **content-disposition** parameter
    in the response header, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This snippet is added in the `generateReportExcel` method before returning the
    excel view using the descriptor. The report will now open as a `.xls` file and
    can then be opened in Excel without any renaming.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1803-05-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please refer to [http://support.microsoft.com/kb/260519](http://support.microsoft.com/kb/260519)
    and [http://jira.atlassian.com/browse/JRA-8484](http://jira.atlassian.com/browse/JRA-8484)
    for some details on this.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Writing a JIRA report*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data validation in JIRA reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we take user inputs, it is always a good idea to validate them to make
    sure the input is in the format that is expected. The same applies to reports
    also. JIRA reports, as we have seen in the previous recipes, accept user inputs
    based on which the reports are generated. In the example we used, a project is
    selected and the details of issues in the selected project are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous example, the likelihood of a wrong project being selected is
    low as the project is selected from a valid list of available projects. But still,
    the final URL that generates the report can be tampered with to include a wrong
    project ID, and so it is best to do the validation no matter how the input is
    taken.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the report plugin, as explained in the first recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All we need here is to override the validate method to include our custom validations.
    The following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Override the `validate` method in the report class we created in the previous
    recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extract the input parameters from the request parameters, which is an argument
    to the `validate` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`reqParams` here is an argument of the `validate` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the validity of the input parameter. In our example, the input parameter
    is the `projectId`. We can check if it is valid by verifying if a project exists
    with the given ID. The following condition returns true if it is an invalid project
    ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the parameter is invalid, add an error to the action with the appropriate
    error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we pass the field name to the `addError` method so that the error message
    appears on top of the field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can use internationalization here as well to include appropriate error messages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add similar validation for all the interested parameters. The following is
    how the method looks like in our example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Package the plugin and deploy it!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just before the report is generated, the `validate` method is executed. If
    there is any error, the user is taken back to the input screen with the error
    highlighted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This example shows an error when the report URL is tampered with to include
    an invalid project with ID 12020.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Writing a JIRA report*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting access to reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to restrict access to JIRA reports based on pre-defined criteria,
    such as making the report visible only to a certain group of people, or showing
    the report only in certain projects, and so on. Let us quickly have a look at
    how to code permissions for a JIRA report.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the report plugin, as explained in the first recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All we need to do here is to implement the `showReport` method on the report.
    Let us assume we want to restrict the report only to JIRA Administrators. The
    following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Override the `showReport` method in the report class we created in the previous
    recipes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement the logic to return `true` only if the condition is satisfied. In
    our example, the report should be visible only to JIRA Administrators, and hence
    we should return `true` only if the current user is a JIRA Administrator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the method `getJiraAdministrators` should be used from JIRA v 4.3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Package the plugin and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the user is an Administrator, he/she will see the report link under the
    Browse projects area. If not, the report link won''t be visible. We can include
    similar conditions and evaluate them in the `showReport` method before returning
    true:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The user **Test User**, highlighted in the preceding screenshot, is not a JIRA
    Administrator and therefore, not able to see the **All Issues** report.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Writing a JIRA report*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object configurable parameters for reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to write JIRA reports and we also had a brief look at how JIRA
    lets us configure the input parameters. The example we have chosen in the previous
    recipe, on creating JIRA reports, explained the usage of the `select` type. In
    this recipe, we will see the various property types supported and some examples
    on how to configure them.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of property types supported in JIRA. The full list supported
    by your JIRA version can be found in the `com.atlassian.configurable.ObjectConfigurationTypes`
    class. For JIRA 4.2.*, the following are the types supported for reports:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Input HTML type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `string` | Text Box |'
  prefs: []
  type: TYPE_TB
- en: '| `long` | Text Box |'
  prefs: []
  type: TYPE_TB
- en: '| `hidden` | NA. Hidden to the user. |'
  prefs: []
  type: TYPE_TB
- en: '| `date` | Text Box with Calendar popup |'
  prefs: []
  type: TYPE_TB
- en: '| `user` | Text Box with User Picker |'
  prefs: []
  type: TYPE_TB
- en: '| `text` | Text Area |'
  prefs: []
  type: TYPE_TB
- en: '| `select` | Select List |'
  prefs: []
  type: TYPE_TB
- en: '| `multiselect` | Multi select List |'
  prefs: []
  type: TYPE_TB
- en: '| `checkbox` | Check Box |'
  prefs: []
  type: TYPE_TB
- en: '| `filterpicker` | Filter Picker |'
  prefs: []
  type: TYPE_TB
- en: '| `filterprojectpicker` | Filter or Project Picker |'
  prefs: []
  type: TYPE_TB
- en: '| `cascadingselect` | Cascading Select List. Dependant on a parent Select List.
    |'
  prefs: []
  type: TYPE_TB
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us quickly see each property and how it is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**string**: The `string` property is used to create a Text Box. The Java data
    type is String. All you need here is to add the `property` tag with the type as
    `string`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Each of the property types, including the `string` property, can have a default
    value populated using the `default` tag, as shown.
  prefs: []
  type: TYPE_NORMAL
- en: '**long**: The `long` property is used to create a Text Box. The Java data type
    is again String:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**select**: The select property is used to create a Select List. The Java data
    type is String. We have seen an example of this in the previous recipe. There
    are two ways you can populate the values of a select property:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using a Value Generator class**: The class should implement the `ValuesGenerator`
    interface and return a map of key/value pairs. The *key* will be the value returned
    to the report class, whereas the *value* is the display value to the user. Let
    us use the same example in the previous recipe here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ProjectValuesGenerator` implements the `getValues()` method as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Using pre-defined key/value pairs in the property**: The following is an
    example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**multiselect**: The `multiselect` property is used to create a Multi Select
    List. It is the same as the select property. The only difference is that the type
    name is multiselect. Here the Java type will be a String if only one value is
    selected, and it will be an array of Strings (`String[]`) if more than one value
    is selected!'
  prefs: []
  type: TYPE_NORMAL
- en: '**hidden**: The `hidden` property is used to pass a Hidden Value. The Java
    data type is String:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We need to provide a value using the `default` tag as the user won't be seeing
    the field to enter a value.
  prefs: []
  type: TYPE_NORMAL
- en: '**date**: The `date` property is used to create a Date Picker. The Java data
    type is String. We should then parse it to the `Date` object in the report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**user**: The `user` property is used to create a User Picker. The Java data
    type is String and it will be the username:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**text**: The `text` property is used to create a Text Area. The Java data
    type is String:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**checkbox**: The `checkbox` property is used to create a Checkbox. The Java
    data type is String and the value will be `true` if selected. If the checkbox
    is unchecked, the value will be `null`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**filterpicker**: The `filterpicker` property is used to create a Filter Picker.
    The Java data type is String and it will hold the ID of the selected filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**filterprojectpicker**: Used to create a Filter or Project Picker. The Java
    data type is String, and it will be the ID preceded by filter (if a filter is
    selected) and project (if a project is selected):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**cascadingselect**: Used to create a Cascading Select, based on another select
    box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Here the cascading select `testCascadingSelect` depends on the select property
    named `testSelect`. We have seen the `testSelect` property with the key/value
    pairs. The next important thing is the values generator class. As with the other
    value generator classes, this one also generates a map of key/value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here the key in the key/value pair should be the value that will be returned
    to the user. The value should be an instance of a `ValueClassHolder` class, which
    is a static class. The `ValueClassHolder` class will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `value` in the `ValueClassHolder` will be the display value of the cascading
    select options to the user. The `className` attribute will be the `key` of the
    parent select option.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, the parent select property is `testSelect`. It has three keys
    – `key1`, `key2`, and `key3`. The `getValues()` method will, therefore, look as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: If you take a single line, for example, `allValues.put("One1", new ValueClassHolder("First
    Val1", "key1"))`, it will have the key/value pair `One1/First Val1` when the select
    list has the key `key1` selected!
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting the appropriate values, they can be retrieved in the report
    class, as shown in the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Special mention should be given to the `filterprojectpicker`. The value will
    be `filter-10000` if a filter with the ID 10000 is selected. The value will be
    `project-10000` if a project with ID 10000 is selected.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the report input screen is presented to the user, the properties mentioned
    in the plugin descriptor are converted into the appropriate HTML elements, as
    discussed. We can then retrieve their values in the report class and process them
    to generate the report.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following two screenshots show how these properties appear on the input
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-08.jpg)![How it works...](img/1803-05-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you print the extracted values into the console in the report class, it
    will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hopefully, that gives you a fair idea of how to use Object Configurable Parameters
    in JIRA reports.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Writing a JIRA report*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pie chart in JIRA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already seen in the previous recipes, JIRA ships with a bunch of
    built-in reports. It also lets us write our own reports using the report plugin
    module. One of the reports that attract a lot of users in JIRA is the Pie Chart.
    While the existing JIRA pie reports are really good at what it is meant for, sometimes
    the need arises to write our own pie charts.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a pie chart in JIRA is easy because JIRA already supports `JFreeChart`
    and has utility classes which do most of the work in creating these charts. In
    this recipe, we will see how to write a simple pie chart with the help of Atlassian
    Utility classes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a skeleton plugin using Atlassian Plugin SDK.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us try to create a very simple pie chart without any business logic. To
    keep things simple and to concentrate on the pie chart, let us go for a report
    without any input parameters and with just the HTML view. The following are the
    steps to accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the report plugin module in the plugin descriptor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All it has is a class and a velocity template for the HTML view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the report class. As usual, it should implement the `AbstractReport`
    class. All we do here is to populate the velocity templates with parameters from
    the pie chart we create using a custom `PieChartGenerator` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is how the `generateReportHtml` looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Chart` class is an Atlassian class of the type `com.atlassian.jira.charts.Chart`.
    The business logic of creating the chart is done inside a custom utility class,
    `JTricksPieChartGenerator`, which we will see next.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the `JTricksPieChartGenerator` utility class, which generates the pie
    chart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is where the business logic of creating the chart is done, and therefore,
    we will see them in detail:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the `DefaultPieDataset`, which will be the data set for the pie chart.
    This is a `JFreeChart` class for which the Java Docs can be found at [http://www.jfree.org/jfreechart/api/javadoc/org/jfree/data/general/DefaultPieDataset.html](http://www.jfree.org/jfreechart/api/javadoc/org/jfree/data/general/DefaultPieDataset.html).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Populate the values in `dataset`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: In the example, we just populated two key/value pairs with a *name* and a *number*
    *value*. This is the data, using which the pie chart is generated. When we generate
    custom charts, we should replace this with the appropriate data that we are interested
    in.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get an `i18nBean`. This is required in the Atlassian utility class:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the chart:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Here we use the `com.atlassian.jira.charts.jfreechart.PieChartGenerator` class
    to generate the chart using the dataset we just created and the `i18nBean`. Make
    sure you invoke the generate method, as shown in the preceding snippet.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Populate a map with all the required parameters from the generated `ChartHelper`
    and return a `Chart` object, as shown next:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: You can add all parameters available, but we are limiting it to the absolute
    minimum. `params.putAll(chart.getParameters())` in the report class will then
    populate the velocity context with all these parameters.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `generateChart` method will now look as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the velocity template for the HTML view using the context we populated
    in the report class. In our example, the template is `templates/pie/pie-chart.vm`.
    It looks like the following block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we display the chart we created. The chart is available at the URL `$baseurl/charts?filename=$chart`,
    where `$chart` is the location generated by the helper class. We populated this
    earlier in the context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Package the plugin, deploy it, and test it!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In short, the bit we need to do here is to create the `DefaultPieDataset` and
    everything else is done by JIRA for you. The `generateChart` method may take more
    arguments depending on the complexity of the reports we are going to create. For
    example: `startDate`, `endDate`, and so on. The data set will then be created
    using these arguments instead of our hardcoded values!'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, the chart appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have a look at the other helper classes under the `com.atlassian.jira.charts.jfreechart`
    package, for example, `StackedBarChartGenerator`, `HistogramChartGenerator`, `CreatedVsResolvedChartGenerator`,
    and so on, for other types of charts!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Writing a JIRA report*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing JIRA 4 gadgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gadgets are a big leap in JIRA's reporting features! The fact that JIRA is now
    an OpenSocial container lets its user add useful gadgets (both JIRA's own and
    third-party) into its dashboard. At the same time, gadgets written for JIRA can
    be added in other containers like iGoogle, Gmail, and so on!
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will have a look at writing a very simple gadget, one that
    says 'Hello from JTricks'. By keeping the content simple, it will let us concentrate
    more on writing the gadget!
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start writing the gadget, it is probably worth understanding the
    key components of a JIRA gadget:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Gadget XML is the most important part of a JIRA Gadget. It holds the specification
    of the gadget and includes the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Gadget Characteristics**. It includes title, description, author''s name,
    and so on'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screenshot and a thumbnail image**. Please note that the screenshot is not
    used within Atlassian containers such as JIRA or Confluence. We can optionally
    add it if we want them to be used in other OpenSocial containers'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Required features** that the gadget container must provide for the gadget'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User preferences** which will be configured by the gadget users'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Gadget content** created using HTML and JavaScript
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A screenshot and thumbnail image will be used during preview and while selecting
    the gadget from the container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An `i18n` property file used for internationalization in the gadget
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optional CSS and JavaScript file used to render the display in the **Content**
    section of the gadget
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will see each of them in the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a skeleton plugin using Atlassian Plugin SDK.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are the steps to write our irst gadget, one that shows the greetings
    from JTricks!
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the plugin descriptor with the gadget module and the resources required
    for our gadget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `Gadget` module in the plugin descriptor:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, this has a unique `key` and points to the `location` of the
    gadget XML! You can have as many gadget definitions as you want in your `atlassian-plugin.xml`
    file, but in our example, we stick with the preceding one.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the thumbnail and screenshot images and downloadable resources in the
    plugin descriptor. We have seen details of this in the previous chapter and more
    can be learned at [http://confluence.atlassian.com/display/JIRADEV/Downloadable+Plugin+Resources](http://confluence.atlassian.com/display/JIRADEV/Downloadable+Plugin+Resources).
    In our example, the resources are added on to the plugin descriptor as:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The location is relative to the `src/main/resources` folder in the plugin. As
    mentioned before, the screenshot is optional.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `i18n` properties file that will be used in the gadget also as a downloadable
    resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `atlassian-plugin.xml` will now look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the screenshot and thumbnail images under the `src/main/resources/images`
    folder. The thumbnail image should be of the size 120 x 60 pixels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `i18n` properties file under the `src/main/resources/i18n` folder. The
    name of the filer we defined in `messages.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This file is an XML file wrapped within the `messagebundle` tag. Each property
    in the file is entered as an XML tag, as shown next:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `msg` tag has a `name` attribute, which is the property, and the corresponding
    Value is enclosed in the `msg` tag. We use three properties in our example and
    the entire file in our example looks like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write the Gadget XML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Gadget XML has a Module element at the root of the XML. It has mainly three
    elements underneath – `ModulePrefs`, `UserPref`, and `Content`. We will write
    of each of them in this example. The entire set of attributes and elements and
    other details of the gadget specification can be read at [http://confluence.atlassian.com/display/GADGETDEV/Creating+your+Gadget+XML+Specification](http://confluence.atlassian.com/display/GADGETDEV/Creating+your+Gadget+XML+Specification).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write the `ModulePrefs` element. This element holds the information about the
    gadget. It also has two child elements – `Require` and `Optional`, that are used
    to define the required or optional features for the gadget.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is how the `ModulePrefs` element looks in our example after it
    is populated with all the attributes:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, it holds information like `title`, `title URL` (to which the
    gadget title will link to), `description`, `author` `name` and `email`, `height`
    of the gadget, and URLs to screenshot and thumbnail images.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Anything that starts with `__MSG_` and ends with `__` is a property that is
    referred from the `i18n` properties file.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The `height` of the gadget is optional and 200, by default. The images are referenced
    using `#staticResourceUrl` where the first argument is the fully qualified gadget
    module key which is of the form `${atlassian-plugin-key}:${module-key}`. In our
    example, the plugin key is `com.jtricks.gadgets` and the module key is `hello-gadget`.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the optional gadget directory feature inside `ModulePrefs`. This is currently
    supported only in JIRA:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: In the example, we add the category as `Other`!
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Other values supported for category are: `JIRA`, `Confluence`, `FishEye`, `Crucible`,
    `Crowd`, `Clover`, `Bamboo`, `Admin`, `Charts`, and `External` `Content`.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: You can add the gadget to more than one category by adding the categories within
    the `Param` element, each in a new line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Include `Required` features if there are any under the XML tag `require`. A
    full list of supported features can be found at [http://confluence.atlassian.com/display/GADGETDEV/Including+Features+into+your+Gadget](http://confluence.atlassian.com/display/GADGETDEV/Including+Features+into+your+Gadget).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the `Locale` element to point to the `i18n` properties file:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Here the property `__ATLASSIAN_BASE_URL__` will be automatically substituted
    with JIRA's configured base URL when the gadget is rendered. The path to the property
    file here is `__ATLASSIAN_BASE_URL__/download/resources/com.jtricks.gadgets`,
    where `com.jtricks.gadgets` is the Atlassian plugin key. The path to the XML file
    `/i18n/messages.xml` is what is defined in the resource module earlier.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Add User Preferences if required, using the `UserPref` element. We will omit
    the same in this example as the 'Hello Gadget' doesn't take any inputs from the
    user.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `Content` for the gadget. This is where the gadget is rendered using
    HTML and JavaScript. In our example, we just need to provide the static text 'Hello
    From JTricks' and it is fairly easy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The entire content is wrapped within the `< ![CDATA[` and `]]>`, so that they
    won''t be treated as XML tags. The following is how it looks in our example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our gadget''s XML is now ready and looks like the following block of code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Package the plugin, deploy it, and test it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the plugin is deployed, we need to add the gadget in the JIRA dashboard.
    The following is how it appears in the **Add Gadget** screen. Note the thumbnail
    is the one we have in the plugin and also note that it appears in the **Other**
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once it is added, it appears as follows in the **Dashboards** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can modify the look-and-feel of the gadgets by adding more HTML or gadget
    preferences! For example, `<font color="red">Hello From JTricks</font>` will make
    it appear in red.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can adjust the size of the gadget using the dynamic-height feature. We should
    add the following under the `ModulePrefs` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'We should then invoke `gadgets.window.adjustHeight();` whenever the content
    is reloaded. For example, we can do it in a window onload event, as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The `gadget xml` file, in this case, will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The gadget should now appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1803-05-14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the size is adjusted to just fit the text!
  prefs: []
  type: TYPE_NORMAL
- en: Invoking REST services from gadgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how to write a gadget with static content. In
    this recipe, we will have a look at creating a gadget with dynamic content or
    the data that is coming from the JIRA server.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA uses REST services to communicate between the gadgets and the server. We
    will see how to write REST services in the coming chapters. In this recipe, we
    will use an existing REST service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the **Hello Gadget**, as described in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us consider a simple modification to the existing **Hello Gadget** to understand
    the basics of invoking REST services from gadgets. We will try to greet the current
    user by retrieving the user details from the server instead of displaying the
    static text: **Hello From JTricks**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'JIRA ships with some inbuilt REST methods, one of which is to retrieve the
    details of the current user. The method can be reached in the URL: `/rest/gadget/1.0/currentUser`.
    We will use this method to retrieve the current user''s full name and then display
    it in the gadget greeting. If the user''s name is **Jobin Kuruvilla**, the gadget
    will display the message as **Hello, Jobin Kuruvilla**.'
  prefs: []
  type: TYPE_NORMAL
- en: As we are only changing the content of the gadget, the only modification is
    required in the gadget XML, which is `hello-gadget.xml` in our example. Only the
    `Content` element needs to be modified, which will now invoke the REST service
    and render the content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the common Atlassian gadget resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`#requireResource` will bring in the JIRA gadget JavaScript framework into
    the gadget''s context. `#includeResources` will write out the HTML tags for the
    resource in place. Check out [http://confluence.atlassian.com/display/GADGETDEV/Using+Web+Resources+in+your+Gadget](http://confluence.atlassian.com/display/GADGETDEV/Using+Web+Resources+in+your+Gadget)
    for more details.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Construct a gadget object as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The gadget object has four top-level options:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`baseUrl`: An option to pass the base URL. It is a mandatory option, and we
    use `__ATLASSIAN_BASE_URL__` here which will be rendered as JIRA''s base URL.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useOauth`: An optional parameter. Used to configure the type of authentication
    which must be a URL. `/rest/gadget/1.0/currentUser` is commonly used.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config`: Another optional parameter. Only used if there are any configuration
    options for the gadget.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view`: Used to define the gadget''s view.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our example, we don''t use authentication or any configuration options.
    We will just go with the `baseUrl` and `view` options. The following is how the
    Gadget is created using JavaScript:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Populate the gadget view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `view` object has the following properties:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`enableReload`: Optional. Used to reload the gadget at regular intervals.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onResizeReload`: Optional. Used to reload the gadget when the browser is resized.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onResizeAdjustHeight`: Optional and used along with the `dynamic-height` feature.
    This will adjust the gadget height when the browser is resized.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`template`: Created the actual view.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args`: An array of objects or function that returns an array of objects. It
    has two attributes. `Key` –used to access the data from within the template and
    `ajaxOptions` – set of request options used to connect to the server and retrieve
    data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our example, we will use the `template` and `args` properties to render
    the view. First, let us see `args` because we use the data retrieved here in the
    `template`. `args` will look like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, we invoke the `/rest/gadget/1.0/currentUser` method and use
    the key `user` to refer the data we retrieved while rendering the view. `ajaxOptions`
    uses the jQuery Ajax Options, details of which can be found at [http://api.jquery.com/jQuery.ajax#options](http://api.jquery.com/jQuery.ajax#options).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The key `user` will now hold the user details from the REST method, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `template` function will now use this `args` object (defined earlier) and
    its `key`, `user` to render the view as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `args.user["fullName"]` will retrieve the user's `fullName` from the REST
    output. Username or e-mail can be retrieved in a similar fashion.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AJS.$` will construct the view as `<h1>Hello, Jobin Kuruvilla</h1>`, where
    `Jobin Kuruvilla` is the `fullName` retrieved.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The entire `Content` section will look as shown in the following lines of code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Package the gadget and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the modification to the gadget XML, the gadget will now display the method
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-14a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Writing JIRA 4 gadgets*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring user preferences in gadgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous two recipes, we saw how to create gadgets from static content
    and dynamic content. In this recipe, we will go one step further and display the
    gadget content, based on user input.
  prefs: []
  type: TYPE_NORMAL
- en: The user will configure the gadget during its creation, or modify it later and
    the gadget content will vary depending on the configuration parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the **Hello Gadget**, populated with dynamic content, as described in
    the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will let the user choose whether to display the name in the
    greeting message or not. There will be a property on the gadget named `displayName`.
    If it is set to `true`, the gadget will display the username and the greeting
    message will be **Hello, Jobin Kuruvilla**. If the `displayName` is set to false,
    the greeting message will be **Hello**!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps to configure user preferences:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the `setprefs` and the `views` features under the `ModulePrefs` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`setprefs` is required to persist user preferences, whereas `views` determines
    whether the current user can edit the preferences or not.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the gadget, the `common` locale, under `ModulePrefs`, along with our
    custom `Locale` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is required to get the gadget configuration language properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the required `UserPref` elements. This element defines the various
    user preferences. The element supports the following fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`name`: Required. Name of the user preferences. The value of this can then
    be accessed using `gadget.getPref("name")`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display_name`: Display name of the field. By default, it will be the same
    as the name.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`urlparam`: Optional string to pass as the parameter name for content `type="url"`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datatype`: Data type of the field. Valid options include: `string`, `bool`,
    `enum`, `hidden`, or `list`. Default is string.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`required`: Marks the field as required. Default is false.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_value`: Sets a default value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our example, we add the `displayName` property as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The field is marked as `hidden` so that it won't appear in the OpenSocial gadget
    configuration form!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the creation of `AJS.Gadget` to include the `config` property. `config`
    is normally of the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `descriptor` is a function that returns a new Configuration Descriptor.
    `args` is an array of objects or a function that returns one similar to `view`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In our example, we define a function to return a descriptor with the configuration
    details of the `displayName` property. It looks like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, there is only one field: `displayName`. It is of the type `select` and
    has a `label` and `description`, both populated from the `i18n` property file
    using the `gadget.getMsg` method. The `Selected` attribute is populated with the
    current value – `gadget.getPref("displayName")`. `Options` are given as an array,
    as shown in the preceding snippet.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: More details on the various other field types and their properties can be found
    at [http://confluence.atlassian.com/display/GADGETDEV/Field+Definitions](http://confluence.atlassian.com/display/GADGETDEV/Field+Definitions).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the new `i18n` properties to the message bundle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include the `UserPref` – `isConfigured`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The user preferences are set every time the gadget loads, and we use this property
    which is specially designed to prevent this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When this property is used, `AJS.gadget.fields.nowConfigured()` should be added
    as an additional field under the `config descriptor`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Modify the view to display usernames based on the configured property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `template` function is modified as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the configured property is retrieved using `gadget.getPref("displayName")`.
    If it is `true`, the username is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The entire `Content` section now looks like the following lines of code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Package the gadget and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the user configurable properties are added, the gadget on its creation
    will ask the user to configure the `displayName` property, as shown next. The
    default value will be `true` (label :Yes) as we configured it.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When **Yes** is selected, it appears as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the gadget options now, you can see the **Edit** option, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot appears while clicking on **Edit**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On selecting **No**, the message is displayed without the username, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-05-19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most popular user preferences in JIRA gadgets, and therefore, worth
    a special mention, is its ability to auto refresh itself at a configured interval.
    JIRA has a pre-defined feature that helps us to do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are only a couple of things you need do to implement this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `refresh` UserPref:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include the `enableReload: true` property in the `view`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will now see an extra **Refresh** action on the gadget properties, as shown
    in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1803-05-20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This can be used to refresh the gadget at any time.
  prefs: []
  type: TYPE_NORMAL
- en: 'On clicking on **Edit**, the automatic refresh interval can be selected, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1803-05-21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Writing JIRA 4 gadgets*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoking REST services from gadgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing gadgets outside of JIRA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to write a gadget and add it onto the JIRA Dashboard. But have
    we made use of all the advantages of an OpenSocial gadget? How about adding them
    onto other OpenSocial containers such as Gmail or iGoogle?
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to add a gadget in to Gmail. The process is
    pretty much similar for other containers as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a quick step-by-step procedure to add a gadget to Gmail:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the Gadget URL for the gadget that we are going to add. We can find
    this URL from the JIRA gadgets directory, as shown in the next screenshot. In
    the example, we choose to add the **Favourite Filters** gadget:![How to do it...](img/1803-05-22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Gmail** | **Settings** | **Gadgets**. Enter the URL, as shown in the
    next screenshot:![How to do it...](img/1803-05-23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that this is the only process that will be different for different containers.
    We need to enter this URL in the appropriate place for each different container.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once added, the gadget will appear in the settings as shown in the following
    screenshot:![How to do it...](img/1803-05-24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The gadget should now be available under the list of gadgets you have in your
    Gmail sidebars. Save the configurations. In our example, we need to choose whether
    to display the count of issues or not and the refresh interval.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refer to the next screenshot to see how it appears in Gmail.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The gadget now shows no results because we haven't connected to JIRA with a
    proper username/password. Edit the gadget settings and you will see an option,
    **Login & Approve**, which allows you to log in to your JIRA instance and approve
    the retrieval of data to be displayed in Gmail:![How to do it...](img/1803-05-25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Approve Access**, as shown in the following screenshot. The gadget should
    now show the results:![How to do it...](img/1803-05-26.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The way it works is identical to that of its behavior in JIRA Dashboards. The
    gadget will communicate with JIRA using the REST APIs and the data is rendered
    using the HTML and JavaScript code under the `view` section in the gadget XML's
    `Content` element.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Writing JIRA 4 gadgets*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Invoking REST services from gadgets*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
