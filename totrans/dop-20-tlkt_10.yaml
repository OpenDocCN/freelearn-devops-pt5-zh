- en: Chapter 10. Implementation of the Deployment Pipeline – The Late Stages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章. 部署管道的实施 – 后期阶段
- en: We had to make a break from the implementation of our deployment pipeline and
    explore service discovery and proxy services. Without a proxy service, our containers
    would not be accessible in an easy and reliable manner. To provide all the data
    proxy service needs, we spent some time exploring different options and came up
    with a few combinations that could serve as service discovery solutions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不得不中断部署管道的实施并探索服务发现和代理服务。如果没有代理服务，我们的容器将无法以简单和可靠的方式访问。为了提供所有数据代理服务需要的数据，我们花了一些时间探索不同的选项，并提出了几种可能作为服务发现解决方案的组合。
- en: 'With service discovery and proxy services in our tool-belt, we can continue
    where we left and finalize manual execution of the deployment pipeline:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 带着服务发现和代理服务的工具，我们可以继续上次离开的地方，并完成部署管道的手动执行：
- en: Checkout the code – Done
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查代码 – 完成
- en: Run pre-deployment tests – Done
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行部署前测试 – 完成
- en: Compile and/or package the code – Done
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译和/或打包代码 – 完成
- en: Build the container – Done
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建容器 – 完成
- en: Push the container to the registry – Done
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器推送到注册表 – 完成
- en: Deploy the container to the production server – Done
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署容器到生产服务器 – 完成
- en: Integrate the container – Pending
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集成容器 – 待完成
- en: Run post-deployment tests – Pending
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行部署后测试 – 待完成
- en: Push the tests container to the registry – Pending![Implementation of the Deployment
    Pipeline – The Late Stages](img/B05848_10_01.jpg)
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送测试容器到注册表 – 待完成
- en: Figure 10-1 – The intermediate stages of the deployment pipeline with Docker
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10-1 – 使用 Docker 的部署管道的中间阶段
- en: We are missing three steps in our deployment pipeline. We should integrate our
    container and, once that is done, run post-deployment tests. Finally, we should
    push our tests container to the registry so that everyone can use it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的部署管道缺少三个步骤。我们应该集成我们的容器，并且一旦完成，运行部署后测试。最后，我们应该将我们的测试容器推送到注册表，以便所有人都可以使用它。
- en: 'We''ll start by bringing up the two nodes we''re using for our deployment pipeline:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从启动我们用于部署管道的两个节点开始：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We''ll use the `prod2.y` `ml` Ansible playbook to provision the `prod` node.
    It contains service discovery and proxy roles that we already discussed in the
    previous chapter:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `prod2.y` `ml` Ansible playbook 来配置 `prod` 节点。它包含我们在前一章中已经讨论过的服务发现和代理角色：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once run, our `prod` node will have Consul, Registrator, Consul Template and
    nginx up and running. They will allow us to proxy all requests to their destination
    services (at the moment only `books-ms`). Let us run the playbook from the `cd`
    node.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行，我们的 `prod` 节点将会运行 Consul、Registrator、Consul Template 和 nginx。它们将允许我们将所有请求代理到它们目标服务（目前只有
    `books-ms`）。让我们从 `cd` 节点运行 playbook。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Starting the Containers
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动容器
- en: 'Before we proceed with the integration, we should run the containers:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续集成之前，我们应该运行这些容器：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since we provisioned this node with Consul and Registrator, IPs and ports from
    those two containers should be available in the registry. We can confirm this
    by visiting the Consul UI from a browser by opening `http://10.100.198.201:850`
    `0/ui`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用 Consul 和 Registrator 配置了这个节点，这两个容器中的 IP 和端口应该在注册表中可用。我们可以通过在浏览器中打开 `http://10.100.198.201:8500/ui`
    访问 Consul UI 来确认这一点。
- en: 'If we click on the **Nodes** button, we can see that the `prod` node is registered.
    Further on, clicking the `prod` node button should reveal that it contains two
    services; `consul` and `books-ms`. The `mongo` container that we started is not
    registered because it does not expose any ports:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击 **Nodes** 按钮，我们可以看到 `prod` 节点已注册。更进一步，点击 `prod` 节点按钮应该会显示它包含两个服务；`consul`
    和 `books-ms`。我们启动的 `mongo` 容器没有注册，因为它没有暴露任何端口：
- en: '![Starting the Containers](img/B05848_10_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: 启动容器 – 完成
- en: Figure 10-2 – Consul screenshot with the prod node and services running on it
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-2 – 带有生产节点和运行在其上的服务的 Consul 截图
- en: 'We can see the same information by sending a request to Consul:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 发送请求到 Consul，可以看到相同的信息：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first command listed all services registered in Consul. The output is as
    follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令列出了 Consul 中注册的所有服务。输出如下：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The second command output all the information related to the `books-ms` services:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个命令输出与 `books-ms` 服务相关的所有信息：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With the containers up and running and their information stored in the service
    registry, we can reconfigure nginx so that the `books-ms` service is accessible
    through the standard HTTP port `80`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器启动并运行，且其信息已存储在服务注册表中后，我们可以重新配置 nginx，使得 `books-ms` 服务可以通过标准 HTTP 端口 `80`
    进行访问。
- en: Integrating the Service
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成服务
- en: 'We''ll start by confirming that nginx does not know about the existence of
    our service:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从确认 nginx 并不认识我们的服务开始：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After sending the request, nginx responded with the `404 Not Found` message.
    Let''s change this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 发送请求后，nginx 返回了 `404 Not Found` 消息。我们来修改一下：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We already did most of those steps in the previous chapter so we'll go through
    them very briefly. We entered the `prod` node and downloaded the includes file
    and upstreams template from the code repository. Then we run `consul-template`
    that fetched data from Consul and applied them to the template. The result is
    the nginx upstreams configuration file. Please note that, this time, we added
    the third argument `docker kill -s HUP nginx`. Not only that `consul-template`
    created the configuration file from the template, but it also reloaded nginx.
    The reason that we did those command from the `prod` server instead of doing everything
    remotely like in the previous chapters lies in automation. The steps we just run
    are much closer to the way we'll automate this part of the process in the next
    chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一章中完成了大部分步骤，因此这次我们将简要介绍。我们进入了 `prod` 节点，并从代码仓库下载了包含文件和上游模板。然后，我们运行了 `consul-template`，它从
    Consul 获取数据并应用到模板中，结果就是 nginx 上游配置文件。请注意，这一次，我们添加了第三个参数 `docker kill -s HUP nginx`。不仅
    `consul-template` 从模板中创建了配置文件，它还重新加载了 nginx。之所以从 `prod` 服务器运行这些命令，而不是像上一章那样远程操作，是因为自动化的原因。我们刚刚执行的步骤更接近于我们将在下一章中自动化这一部分过程的方式。
- en: 'Now we can test whether our service is indeed accessible through the port `80`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试我们的服务是否确实可以通过端口 `80` 进行访问：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running Post-Deployment Tests
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行部署后测试
- en: 'While we did confirm that the service is accessible from nginx by sending the
    request and observing the proper response, this way of verification is not reliable
    if we are trying to accomplish full automation of the process. Instead, we should
    repeat the execution of our integration tests but, this time, using port `80`
    (or no port at all since `80` is standard `HTTP` port):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们确实通过发送请求并观察正确的响应来确认服务可以从 nginx 访问，但如果我们试图实现过程的完全自动化，这种验证方式并不可靠。相反，我们应该重复执行集成测试，但这次使用端口
    `80`（或者不指定端口，因为 `80` 是标准的 `HTTP` 端口）：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As expected, the output shows that integration tests passed successfully. The
    truth is that we have only one test that makes the same request as the `curl`
    command we run earlier. However, in a `real world` situation, the number of tests
    would increase, and using proper testing frameworks is much more reliable than
    running `curl` requests.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，输出显示集成测试成功通过。事实上，我们只有一个测试，它发出了与之前运行的 `curl` 命令相同的请求。然而，在“真实世界”情况下，测试的数量会增加，使用适当的测试框架比运行
    `curl` 请求要可靠得多。
- en: Pushing the Tests Container to the Registry
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将测试容器推送到注册表
- en: Truth be told, we already pushed this container to the registry to avoid building
    it every time we need it and, therefore, save you from waiting. However, this
    time, we should push it as part of the deployment pipeline process. We are trying
    to run tasks in order of their importance so that we get feedback as fast as possible.
    Pushing containers with tests is very low on our list of priorities, so we left
    it for the end. Now that everything else was run successfully, we can push the
    container and let others pull it from the registry and use it as they see fit.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，我们已经将这个容器推送到了注册表，以避免每次需要它时重新构建，从而节省等待时间。然而，这一次，我们应该将它作为部署管道过程的一部分进行推送。我们尝试按任务的重要性顺序运行，以便尽快获得反馈。将包含测试的容器推送是我们优先级列表中的低项，因此我们将其留到最后。现在，其他一切都顺利运行后，我们可以推送容器，让其他人从注册表中拉取并按需使用。
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Checklist
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查清单
- en: 'We managed to go through the whole deployment pipeline. It took us quite a
    lot of time since we had to take a few brakes and explore different ways to proceed.
    We could not deploy to production without exploring configuration management concepts
    and tools. Later on, we got stuck again and had to learn about service discovery
    and proxy before being able to integrate the service container:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功完成了整个部署流程。由于我们需要休息几次并探索不同的方式，所以花费了相当多的时间。我们无法在不探索配置管理概念和工具的情况下部署到生产环境。后来，我们再次遇到瓶颈，必须学习服务发现和代理，才能成功集成服务容器：
- en: Checkout the code – Done
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出代码 – 完成
- en: Run pre-deployment tests – Done
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行部署前的测试 – 完成
- en: Compile and/or package the code – Done
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译和/或打包代码 – 完成
- en: Build the container – Done
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建容器 – 完成
- en: Push the container to the registry – Done
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器推送到注册表 – 完成
- en: Deploy the container to the production server – Done
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器部署到生产服务器 – 完成
- en: Run post-deployment tests – Done
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行部署后的测试 – 完成
- en: Push the tests container to the registry – Done![The Checklist](img/B05848_10_03.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试容器推送到注册表 – 完成！[检查清单](img/B05848_10_03.jpg)
- en: Figure 10-3 – The late stages of the deployment pipeline with Docker
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10-3 – 使用 Docker 部署流程的后期阶段
- en: 'Now we are all set. We are capable of running the deployment procedure manually.
    The next step is to automate all those commands and start running the pipeline
    automatically from the beginning to the end. We''ll destroy the nodes we used
    so that we can start over fresh and confirm that the automated procedure indeed
    works:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好。我们能够手动执行部署过程。下一步是将所有这些命令自动化，并开始从头到尾自动运行整个流程。我们将销毁当前使用的节点，以便重新开始并确认自动化过程是否确实有效：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
