- en: Customize Application Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A site map can be defined as a set of links through which a user can navigate
    and find their way around the website. In Dynamics 365 and in its earlier version,
    a site map is an XML file that is used for defining the navigation of the application
    or specific app module for the users. Until CRM 2016, there had been only one
    site map file for an organization. With the advent of apps in Dynamics 365, now
    we have one site map file for each of the app modules. As far as customizing the
    site map was concerned, until now we had to either update it using XML Editor,
    a text editor or some third-party tools. However, with Microsoft Dynamics 365
    we have the built-in Site Map Designer in the product itself. This designer allows
    the administrator, customizers, or users with appropriate privileges to easily
    define navigation for an app by simply adding, dragging, and dropping the components
    within the Site Map Designer canvas. In this chapter, we will be covering the
    following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the site map in Dynamics 365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the designer interface and its components—areas, group, and sub
    areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common operations that can be performed on the site map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For every app that is configured, we will have a separate site map defined
    for it. By default, we will have a Dynamics 365 custom app configured during the
    set up of the Dynamics 365\. We can also have other apps configured while provisioning
    the Dynamics 365 instance such as Sales, Field service, Project service automation,
    or Customer service, if we have opted for them while provisioning Dynamics 365\.
    For now, let''s try to understand the basics of using the Site Map Designer using
    Dynamics 365 for a Sales app. Suppose we have selected Sales while provisioning
    Microsoft Dynamics 365, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3621005-599e-4dff-944a-735ef5d886b7.png)'
  prefs: []
  type: TYPE_IMG
- en: The link for the *Dynamics 365 Trial with Enterprise Plan 1* can be found here: [https://signup.microsoft.com/Signup?OfferId=bd569279-37f5-4f5c-99d0-425873bb9a4b&dl=DYN365_ENTERPRISE_PLAN1](https://signup.microsoft.com/Signup?OfferId=bd569279-37f5-4f5c-99d0-425873bb9a4b&dl=DYN365_ENTERPRISE_PLAN1).
  prefs: []
  type: TYPE_NORMAL
- en: 'This will provision Dynamics 365 with a Sales app. This is how the navigation
    will look for the Sales app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55245fa1-85af-4dc3-8a9b-ecbc6297f856.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, as we have covered the basics of site map, let us look at the Site Map
    Designer interface and what components it has and how we can use it to update
    our site map for sales.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Site Map Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To access the Site Map Designer for our Sales app, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Dynamics 365 Sales app with a user having System Customizer, System
    Administrator, or any appropriate security role to customize the site map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Settings | Solutions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new solution with the appropriate details. For example, we have created
    a solution with the name of Site Map Solution, the publisher as default publisher,
    and the version as 1.0.0.0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also log in to the default *Dynamics 365 - custom* app and create a new
    solution and add the Sales App Site Map in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Client Extensions and add Sales App Site Map in it, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/32b54edb-b203-48c2-8eaf-d1e71ef609d5.png)'
  prefs: []
  type: TYPE_IMG
- en: We can go to Settings | Customizations and update the site map in the default
    solution as well. However, as a best practice, we should create a separate solution
    and add the required components that need to be customized in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-clicking on it will open the Sales App Site Map on the Site Map Designer
    for us to edit. The Site Map Designer canvas allows us to work with Area, Group,
    and Subarea components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6f19284-84bb-4218-b904-dce1147959a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Within the designer canvas, we can Add, Cut, Copy, Paste, Clone, and Delete.
  prefs: []
  type: TYPE_NORMAL
- en: Let us look at these components in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding components in the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Site map consists of three main components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Area: Area can be defined as the main node or area inside the navigation pane
    that consists of groups and their corresponding subarea. A new area can be added
    or the existing area can be updated or deleted. If an area doesn''t consist of
    any visible subarea, the area will be hidden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Group: Groups can be defined as a collection or group of subareas. Just like
    an area, a new group can be added or an existing group can be updated or deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subarea: A subarea can be defined as a navigation link within the area that
    defines what should load inside CRM''s main pane when clicked. The subarea can
    point to a dashboard, an entity, a URL, or a web resource. Just like area and
    group, a new subarea can be added and an existing subarea can be updated or deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Referring to our Sales app interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Sales, Marketing, Settings, and Training are termed as areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My Work, Customers, Sales, Collateral, Marketing, Goals, and Tools are groups
    within the Sales area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dashboards, What's New, and Activities are subareas inside the My Work group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Sales area would have subareas specific to Sales, arranged inside what
    are termed as groups. Similarly, the Marketing, Settings and Training Area will
    have corresponding subareas inside the corresponding group. As shown in the following
    screenshot, the Marketing Area has Dashboards, Activities, Accounts, Contacts,
    Leads, Marketing Lists, Campaigns, Quick Campaigns, and so on. It also has subareas
    specific to the marketing module. These subareas are arranged inside the My Work,
    Customers, Marketing, Collateral, and Tools groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff089d67-a6ad-4816-87bd-238e00dcb4f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, as we have got the overview of the site map components, let us look at
    the different properties of each of these components in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know the area, group, and subarea properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us look at the different properties of these components before we start
    customizing our Sales app navigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The area component comprises of following properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6b325c1b-258e-4f4d-8709-3d93b7b61790.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Group component shares most of the same properties as Area:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/99bf8e74-a27f-4e99-92b3-abe466e0a107.png)'
  prefs: []
  type: TYPE_IMG
- en: Set as Profile property of Group might not be relevant for Dynamics 365, as
    the Workplace area has been discontinued starting CRM 2013.
  prefs: []
  type: TYPE_NORMAL
- en: 'Subarea has few more properties compared to Area and Group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85cdc0cf-1d55-44b9-ae45-cef6ab4fd5e5.png)![](img/c6d7c015-be6a-4617-a9a7-6e77042c9e12.png)![](img/9318859b-036b-4773-a8cd-c54714a2928d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we know that the site map is basically an XML file, any changes that we
    are doing through Site Map Designer are basically updating the site map''s XML
    behind the scenes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get the Sales App Site Map definition, export the solution containing the
    Sales App Site Map client extension and unzip it. Then, open the `customizations.xml`
    file and search for the `SiteMap` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the sample XML for the My Work group of the Sales area inside
    the Sales App Site Map. We can see the `Area`, `Group`, and `SubArea` tags along
    with their corresponding attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4fa3d7b7-532a-4a75-adf3-27aa7d4afd99.png)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned earlier, instead of using the Site Map Designer, we can manually
    update the site map's XML using any text editor, and can import back the solution
    (and publish it) to see the changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Site map XML reference : [https://msdn.microsoft.com/en-us/library/gg334430.aspx.](https://msdn.microsoft.com/en-us/library/gg334430.aspx)
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at the properties of the area, group, and subarea
    components of Site Map Designer. In the next section, we will learn how to perform
    some basic operations such as updating, adding, deleting, and so on, on these
    components through Site Map Designer.
  prefs: []
  type: TYPE_NORMAL
- en: Common operations using Site Map Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, as we have gone through all the properties of the components of site map
    in detail, let us see how we can perform some common operations using Site Map
    Designer.
  prefs: []
  type: TYPE_NORMAL
- en: Editing an existing component in the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To edit an existing area, group, and subarea in the site map, we need to select
    that component in the designer and go to the properties tab of that component.
    Let us take a simple example to understand this. Suppose we want to rename the
    existing Training area to Help, we need to select the Training area on the site
    map, go to its Properties tab, and update its Title property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4d71b80-18f3-447b-ab39-cf596d87b350.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us specify Help as the value for the Title property. This updates the area''s
    title from Training to `Help`, as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7b87e8b-2d6a-4ba3-9fb7-6e893db0e7bf.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also update the title property of the site map components through inline
    editing. For this, hover over the component to reveal the pencil. We can click
    on the pencil icon to edit the Title. Similarly, we can edit or update the corresponding
    properties of the group and subarea components, and as we mentioned earlier, any
    changes made in the designer will reflect back in the XML for the site map.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a component to the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add an area, group, or subarea to the site map, we need to click on the Add
    button on the Action Bar in the Sitemap Designer. Let''s add an area here to understand
    this. Click on the Add button and select Area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0b24185-89f5-449b-9f76-6f5ae90c6f2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Or, drag-and-drop the Area from the Components tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once added, we need to select the component (Area here), and then edit its
    properties in the Properties tab. For example, the Properties tab for the new
    Area component added is shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cab78a0-db81-49c3-a717-48d459d3f789.png)'
  prefs: []
  type: TYPE_IMG
- en: This will add a new Area named New Area in the site map.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we can add or drag and drop new groups and subarea components in
    the Navigation and specify their properties.
  prefs: []
  type: TYPE_NORMAL
- en: Cutting, copying, and pasting a component to the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through Site Map Designer, we can also cut, copy, and paste site map components.
    Let's select our New Area and click on the Cut button on the Action Bar to cut
    the component. The component will be grayed out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can select the component and click on the Copy button to copy
    the component. The Paste button gives us the option of pasting the component to
    the right or left in case of Area and Group components, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f3ce459-e058-4500-a2f7-7a89715709ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Cloning a component to the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To clone or make a copy of an existing Area, Group, and Subarea to the site
    map, we can select the component and click the Clone button on the Action Bar
    in the Sitemap Designer. The clone will add the respective component to the next
    component being cloned with the -Copy suffix added to its Title. For example,
    cloning the Sales Area, as shown in the following image, will add a new area named
    Sales-Copy next to the Sales Area that is cloned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b39fd9f7-0d07-4646-9ed6-a7d09f85a075.png)'
  prefs: []
  type: TYPE_IMG
- en: Deleting a component from the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To delete an Area, Group, or Subarea from the site map, select the component
    and either click Delete from the Action bar or press the Delete key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1dac548-440a-4a66-b0d1-317a03250b01.png)'
  prefs: []
  type: TYPE_IMG
- en: Deleting an Area will also delete the Group and Subarea in it. Similarly, deleting
    the Group will delete the Subarea in it.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing a component within the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using Drag and Drop, we can move the components around the site map before
    we rearrange it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4964b3c-cee7-4fdf-9fd8-46ac40d79617.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, we can move the Sales Area to be the last Area in the site map,
    My Work to be the second group within the Sales Area, Dashboard as the last Subarea
    inside the MyWork Group, and so on, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/826c7823-0e77-472f-ba68-535d3b0a01af.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also move a Subarea to a different Group. For example, the Dashboards
    Subarea can be moved to any of the other Groups such as Customer, Sales, Collateral,
    and so on, and a Group to be part of a different Area. That is, we can move the My
    Work Group to be part of the Settings, Training, and Sales area.
  prefs: []
  type: TYPE_NORMAL
- en: Saving, validating, and publishing changes in the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To reflect any of the preceding changes for the users, such as add, clone,
    delete, and so on, we need to click Save and then Publish it in the Site Map Designer
    canvas. Here, *Draft indicates that there are unsaved changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/788a64df-618b-4973-9dd8-4af3a05f84c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On saving the changes and clicking on Publish, it changes to Published to indicate
    that changes have been applied and are available for the users to see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/379d16b6-1fae-4393-8a36-f5afb092d4e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Save button will also validate and show up if there are any
    errors in the site map. For example, if we have not provided values for any of
    the required fields or specified unallowed characters for any of the properties.
    In the following screenshot, we have not provided a value for the entity property
    in the Subarea and clicked on Save, which is a mandatory field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee174d40-58b8-421c-b86b-2a0a8c91c78c.png)'
  prefs: []
  type: TYPE_IMG
- en: This shows the ERROR MESSAGE notification in the designer with all the details.
    We will only be able to save and then publish the changes after fixing the error.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Subarea component in the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a simple scenario here to understand how we can add a new Subarea
    component. We realize that our Sales app users would be frequently accessing the
    Open Leads View inside CRM, so it would be helpful for them if we could add a
    Subarea for Open Leads View in the My Work Group in the Sales Area for them. To
    implement it, we will need to add a new Subarea inside the My Work Group of type
    URL. To do so, we need to click on Add in the Action bar in Sitemap Designer and
    add a new Subarea and drag and place it below the Activities SubArea in the My
    Work Group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8fa0bd2-26c6-490c-9220-8fd0354fa1c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, the URL pattern for the view needs to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `etc` and `viewid` query parameters, we need to go to the Open Leads
    view in CRM and click on the EMAIL A LINK| Of Current View ribbon button to get
    the link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77ae0149-95f6-4b06-921d-d16fb0cf956c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The link will have the value of `etc` and `viewid`. We will then copy the value
    of the `etc` and `viewid` query string parameters from the link. We can then set
    the properties for our new SUB AREA, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e20b976b-4983-4845-a914-fe09a03fcb70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will save and then publish it. After publishing, inside the Sales app the
    user will be able to see the new Subarea named Open Leads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e9b2064-1182-42f7-b429-0f8eb9f8d26d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Open Leads Subarea will open the Open Leads view, shown as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2ce4e07-dfe6-4bd7-bc1a-dd057ea482cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Hiding a Subarea component in the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw earlier, the Subarea component has a privilege property. It defines
    whether to show or hide the Subarea based on privileges the user has through the
    security roles assigned. Let us try to understand this with an example as well.
    Suppose we want to show the Open Leads Subarea we just added to only those users
    who have a Create privilege on the Lead entity. To define this, let us go back
    to the Properties tab of the Open Leads Subarea in Site Map Designer. There, we
    need to go to Privileges inside the Advanced section. Inside the Entity drop-down,
    we can select the Lead entity and click on the + (plus) button to add the record.
    We will leave all the checkboxes unchecked, except Create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9726b6e3-0a4f-4f80-905f-b061d04452c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save and publish the changes. Now, let us log in with the user that has only
    the Salesperson security role assigned. Here, we have updated the security role
    and have set None for Create Privilege on Lead Entity; that is, the first option
    that we see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51841768-0243-4a37-ac09-a5e31c903cc3.png)'
  prefs: []
  type: TYPE_IMG
- en: The users who do not have the Create privilege on the Lead record, will not
    be able to see the Open Leads Subarea in their site map.
  prefs: []
  type: TYPE_NORMAL
- en: Passing parameters to a URL from the site map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw earlier, the Subarea component has a Parameter Passing checkbox property.
    It specifies whether to pass information about the organization and language context
    to the URL. The property is only available for Subareas of type web resource or
    URL. Suppose we have the following URL defined in our URL property of Subarea:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://mydomain/mypage.aspx`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Checking the Parameter Passing checkbox will pass the following parameters
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://mydomain/mypage.aspx/?orglcid=1033&orgname=org29d341dd&userlcid=1033`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`orglcid`: language code identifier of the base language of the organization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orgname `: unique name of the organization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`userlcid`: language code identifier used by the current user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This information could be used to create solutions that support multiple languages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating solutions that support multiple languages is detailed at [https://msdn.microsoft.com/en-us/library/hh670609.aspx#Anchor_0](https://msdn.microsoft.com/en-us/library/hh670609.aspx#Anchor_0).
  prefs: []
  type: TYPE_NORMAL
- en: Editing the site map and support for clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us look briefly at separate ways of editing the site map apart from Site
    Map designer and the ways in which clients are supported for the different type
    of site map that we now have in Dynamics 365.
  prefs: []
  type: TYPE_NORMAL
- en: Site map editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A site map, as we essentially know, is an XML file. Any XML text editor is good
    enough to edit site map XML files. For this, we can export the unmanaged solution
    that contains the site map XML, edit it either in NotePad, Visual Studio, or any
    other XML editor, and import it back. The important thing to remember here is,
    if we are importing the site map as a managed solution, it will create a new site
    map record with all the latest changes, and in the case of unmanaged, the existing
    site map XML is overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the site map XML with schema validation is detailed at [https://msdn.microsoft.com/en-us/library/gg334493(v=crm.8).aspx](https://msdn.microsoft.com/en-us/library/gg334493(v=crm.8).aspx).
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from Site Map Designer, we can use one of the third-party site map editors
    to edit the site map. One of the most popular tools is site map editor that is
    included as part of the XRM Tool Box. This is how our Sales App Site Map loads
    up inside site map editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1635c806-3831-488b-b9a8-ac23fde32972.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The tool makes it easy to edit the site map compared to editing the XML manually.
    The tool has been one of the most popular tools for editing site maps and has
    been available since CRM 2011\. The tool has been recently updated to support
    multiple site maps available in Dynamics 365\. The other option is programmatically
    updating the site map. For this, we can make use of the site map entity and update
    its `sitemapxml` property, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an object of the site map entity:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Update its `sitemapxml` property with valid XML:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the entity using Organization Service''s instance:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Publish the changes using the `PublishXmlRequest` class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can also create and delete app-specific site map records programmatically.
    However, it is recommended you use Site Map Designer instead of doing it programmatically.
    Another point to note is that the default site map record cannot be created or
    deleted.
  prefs: []
  type: TYPE_NORMAL
- en: It is strongly recommended that we export the existing site map XML file and
    save a copy of it before we start editing, which can help us to restore it back
    in case of any errors while editing.
  prefs: []
  type: TYPE_NORMAL
- en: Supported clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default site map, which is the site map for Dynamics 365 – custom app is
    supported for both Dynamics 365 web applications and Dynamics 365 for Outlook.
    The site maps for any new custom apps, or the business apps such as Sales, Customer
    Service, Field Service, and Project Service Automation, are only supported by
    Dynamics 365 web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how the site map has evolved in Dynamics 365\. Now,
    we can have multiple site maps per app and the built-in Site Map Designer tool
    in the product itself. We also had a detailed look at the new Site Map Designer
    and some common operations that can be performed through it. In the next chapter,
    we will cover the new Visual Process Designer and how it can be used to create
    business process flows with intuitive drag and drop capabilities.
  prefs: []
  type: TYPE_NORMAL
