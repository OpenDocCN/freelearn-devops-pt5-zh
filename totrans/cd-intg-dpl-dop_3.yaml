- en: Chapter 3. DevOps – Continuous Integration and Delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this lesson, we will learn about implementing DevOps core process such as
    source code repository, code review, artifacts repository, continuous testing,
    continuous development, and continuous integration. We will focus on few popular
    tools such as Git, Jenkins, Maven, Gerrit, Nexus, Selenium, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous integration** (**CI**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous delivery** (**CD**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins tool setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration management-Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code management—Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build management—Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code review—Gerrit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repository management—Nexus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Automation—Selenium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous deployment—Pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins client setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Continuous integration and continuous delivery are popular and valuable processes
    to ensure high-quality and timely software delivery. Continuous integration is
    the integrated software development process where multiple developers adhere to
    the agile methodology and adapt it to best practices like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure all development code is subject to a version control system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An adequate code review process is incorporated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to code are integrated, tested, and built quickly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build process is integrated to run unit tests and automated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attend to the build errors immediately, turn around quickly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking and Metrics of build results and repository management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparency and a user-friendly build process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous delivery is the process of extending the continuous integration.
  prefs: []
  type: TYPE_NORMAL
- en: The most current and latest version of the software is readily available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes passing through the testing cycle from the technical and quality standpoint
    are ready for deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate the shipment and deployment process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The continuous integration process is depicted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![DevOps – Continuous Integration and Delivery](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The continuous integration process is detailed following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The developer''s environment**: Developers create code changes in a local
    workspace with an Integrated Development Environment runtime and with build tools
    physically installed on PC, or a cloud-based (Web IDE). They do unit level testing,
    data validations, code performance checks, and so on. The code changes done by
    the developer are pushed to the source code management system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The typical continuous integration and deployment cycle is comprises of setting
    up a CI/CD infrastructure and processes as listed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code version and repository management system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A process scheduler to initiate the orchestration pipeline
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A build process to manage code builds and scheduled tests
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Build nodes for executing the build
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing process on identified test nodes for automated testing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Build outcome artifact repository
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Artefact repository to store build results
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scenario and acceptance tests on test nodes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Application installation with deploy tool on to runtime systems
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Acceptance tests for applications deployed on the runtime systems
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The quality manager will approve the acceptance tests to agree to deployment
    test systems.
  prefs: []
  type: TYPE_NORMAL
- en: The delivery manager will approve the application deployment to production.
  prefs: []
  type: TYPE_NORMAL
- en: Best Practices for CI/CD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at the best practices for CI/CD:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using version control**: In collaborative development environments with simultaneous
    development there will be multiple challenges:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A source code management system defines a single source of truth for the code
    after placing the code under a version control system. The source code will be
    reproducible by effectively adopting the merge process for mainline development
    and loop lines for bug fixes and so on in the system. Git is a popular source
    code management system and GitHub is a cloud variant as a **Software as Service**
    (**SaaS**) model:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automate the build**: Standardized automated build procedure will stabilize
    the build process to produces dependable results. The matured build process must
    contain the build description and all the dependencies to execute the build with
    a standardized build tool installation. Jenkins is the most versatile tool for
    build schedules; it offers a convenient UI and also has plug-ins integrating most
    popular tools for continuous integration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tests in the build**: A few tests are to be performed to validate effectiveness
    and fitness of code beyond just the syntactical correctness of the code as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit tests operate directly on build results
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Static code checks on source code prior to developer check-in. Git pre-commit
    triggers or CI system could be used to set up a gating or non-gating check
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scenario tests for new build applications to be installed and started
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional performance of the code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit test frameworks are popular across source code technologies like JUnit
    for Java. Selenium Framework provides graphical user interfaces and browser behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing these tests on the developer's workstation early as part of the
    build saves time and effort addressing bugs discovered later in the development
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Early and frequent commit of code**: In a distributed development environment
    with multiple projects, each team or developer intends to integrate their code
    with the mainline. Also, the feature branches change to be integrated into the
    main line. It''s a best practice to integrate code quickly and early. The time
    delay increases between new changes and merging with the mainline will increase
    the risk of product instability, the time taken, and complications as the main-line
    evolves from the baseline. Hence each developer working with the feature branch
    should push their code at least once per day. For main branch inactive projects,
    the high effort for constant rebasing must be evaluated before implementing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Every change to be built**: Developer changes are to be incorporated into
    the mainline, however, they can potentially destabilize the mainline affecting
    its integrity for the developers relying on the main line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous integration addresses this with the best practice of continuous build
    for any code change committed. Any broken build requires immediate action as a
    broken build blocks the entire evolution of the mainline and it will be expensive
    depending on the frequency of commits and such issues. These issues can be minimized
    by enforcing branch level builds.
  prefs: []
  type: TYPE_NORMAL
- en: Push for review in Gerrit or pull request in GitHub are effective mechanisms
    to propose changes and check the quality of changes by identifying problems before
    they're pushed into the mainline, causing rework.
  prefs: []
  type: TYPE_NORMAL
- en: '**Address build errors quickly**: The best practice of building at the branch
    level for each change will put the onus on the respective developers to fix their
    code build issues immediately rather than propagate it to the main branch. This
    forms a continuous cycle of Change-Commit-Build-Fix at each respective branch
    level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build fast**: The quick turnaround of builds, results, and tests by automatic
    processes should be vital inputs for the developer workflow; a short wait time
    will be good for the performance of the continuous integration process on overall
    cycle efficiency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a balancing act between integrating new changes securely to the main
    branch and simultaneously building, validating, and scenario testing. At times,
    there could be conflicting objectives so trade-offs need to be achieved to find
    a compromise between different levels of acceptance criteria, considering the
    quality of the mainline is most important. Criteria include syntactical correctness,
    unit tests, and fast-running scenario tests for changes incorporated.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pre-production run**: Multiple setups and environments at various stages
    of the production pipeline cause errors. This would apply to developer environments,
    branch level build configurations, and central main build environments. Hence
    the machines where scenario tests are performed should be similar and have a comparable
    configuration to the main production systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual adherence to an identical configuration is a herculean task; this is
    where DevOps value addition and core value proposition and treat the infrastructure
    setup and configuration similar to writing code. All the software and configuration
    for the machine are defined as source files which enable you to recreate identical
    systems; we will cover them in more detail in [Lesson 4](part0032_split_000.html#UGI02-9e1d43bf5c22491b83b15944fc98f0e3
    "Chapter 4. DevOps Continuous Deployment"), *DevOps Continuous Deployment*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The build process is transparent: The build status and records of the last
    change must be available to ascertain the quality of the build for everyone. Gerrit
    is a change review tool and can be effectively used to record and track code changes,
    the build status, and related comments. Jenkins flow plugins offer build team
    and developers a complete end to end overview of the continuous integration process
    for source code management tools, the build scheduler, the test landscape, the
    artifact repository, and others as applicable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automate the deployment: Installation of the application to a runtime system
    in an automated way is called deployment and there are several ways to accomplish
    this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated scenario tests should be part of the acceptance process for changes
    proposed. These can be triggered by builds to ensure product quality.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple runtime systems like JEE servers are set up to avoid single-instance
    bottlenecks of serializing test requests and the ability to run parallel test
    queries. Using a single system also has associated overheads in recreating the
    environment with change overhead for every test case, causing a degeneration a
    performance.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker or container technology to install and start runtime systems on demand
    in well-defined states, to be removed afterward.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated test cases, since the frequency and time of validations of new comments,
    is not predictable in most cases, so scheduling daily jobs at a given time is
    an option to explore, where the build is deployed to a test system and notified
    after successful deployment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The deployment to production is a manual conscious decision satisfying all quality
    standards and ensure the change is appropriate to be deployed to production. If
    it can also be automated with confidence, that's the highest accomplishment of
    automated continuous deployment too.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous delivery means that any change integrated is validated adequately
    so that it is ready to be deployed to production. It doesn't require every change
    to be deployed to production automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start with Jenkins as it''s the core component of the continuous integration
    process. The Jenkins process workflow is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins Setup](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'See the Jenkins homepage at: [https://jenkins.io/index.html](https://jenkins.io/index.html),
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins Setup](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Prerequisites to Install Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jenkins installation and configuration requirements should be planned well
    as prescribed on the Jenkins homepage based on the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: Operating system--Linux versions of Ubuntu/Debian, Red Hat/Fedora/CentOS, openSUSE,
    FreeBSD, OpenBSD, Gentoo, Windows, macOS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disk space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Containers--The Jenkins WAR file can run on any servlet-supported engine
    such as tomcat or Glassfish application servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Jenkins can be installed in different modes as per its utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standalone**: Jenkins can run standalone in its own process using its own
    built-in web server (Jetty) for experimentation and small projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Servlet-based**: It can also run as one servlet framework for development
    projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-node setup for staging or production**: Distributed client-server setup;
    the Jenkins advanced installation procedure is recommended'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standalone Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A standalone installation as suggested in the name is all by itself on a single
    machine (as opposed to multiple systems for different tasks):'
  prefs: []
  type: TYPE_NORMAL
- en: Standalone installation requires JDK to be installed on the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the `Jenkins.war` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the command prompt and, at the location of the `Jenkins.war` file, run
    the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Standalone Installation](img/00018.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'During initialization, a few tasks will run and the following screen will appear
    during the installation process:'
  prefs: []
  type: TYPE_NORMAL
- en: The initial screen page will ask about the plugin options:![Standalone Installation](img/00019.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plugins will be installed as per the selected configuration in the preceding
    option:![Standalone Installation](img/00020.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After successful installation, the following admin credential creation page
    will pop up:![Standalone Installation](img/00021.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Accessing Jenkins**: After successful installation, Jenkins can be accessed
    through a web browser from your local machine as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8080`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Jenkins dashboard will open at this link:![Standalone Installation](img/00022.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Manage Jenkins** option in the dashboard will provide various options
    to configure various parameters:![Standalone Installation](img/00023.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Manage Plugins** option in the dashboard is an important option with a
    very wide choice of plugins to integrate with source code systems, authentication
    systems, various development platforms, and so on.![Standalone Installation](img/00024.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Jenkins on a Servlet Engine needs the installation of Tomcat or Glassfish.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Standalone Installation](img/00025.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Copy the `Jenkins.war` file it to the web apps folder in the `tomcat` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Tomcat server from the Tomcat `bin` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8080/Jenkins` --access Jenkins on Tomcat server.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linux System Installation on Ubuntu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Log into the server and update: `sudo apt-get -y update`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Java: `sudo apt-get install -y default-jdk`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download an Ubuntu version from `Jenkins-ci.org` site using the `wget` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Package install `sudo dpkg - i Jenkins.zip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dependency resolve by `sudo apt - get -f install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access Jenkins on port `http://localhost:8080/Jenkins`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue with the steps listed in preceding figure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To initialize Jenkins at startup, add the command `/etc/init.d/jenkins` start
    in `/etc/rc.local` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Git (SCM) Integration with Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Git is the most popular source code management system and offers extensive
    benefits such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Version control lets you maintain multiple versions of the code for different
    purposes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A code repository is required to keep all project-related code in one place
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaboration among users and intervention for debugging purposes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Git can be downloaded from [https://git-scm.com/downloads](https://git-scm.com/downloads):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Git (SCM) Integration with Jenkins](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Multiple platforms versions such as Linux, Windows, and so on are available
    within desktop and web flavors.
  prefs: []
  type: TYPE_NORMAL
- en: 'There can be multiple types of repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: A public repository created on GitHub can give read access to everyone but write
    or commit access is given to chosen individuals or groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A private repository permits collaborators for participation and is a paid subscription
    to GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A local repository is a desktop version without the need for an internet connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A remote repository is a web-based repository for extended features like issue
    management and pull requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub provides options to synchronize code changes from a single computer or
    between multiple computers.
  prefs: []
  type: TYPE_NORMAL
- en: Pull changes will sync code changes from a desktop with an online repository
    and clone options will create a new copy of the repository on the computer.
  prefs: []
  type: TYPE_NORMAL
- en: Performing these tasks enables us to maintain source code on cloud-based SaaS
    system
  prefs: []
  type: TYPE_NORMAL
- en: Create a sign-in account on GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a project repository for organizing your project-related code.![Git (SCM)
    Integration with Jenkins](img/00027.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrating GitHub with Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To integrate a GitHub repository with Jenkins, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In **Manage Plugins**, search for Git plugin under the filter section and install
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it's installed by default, we can find it on the **Installed** tab as follows:![Integrating
    GitHub with Jenkins](img/00028.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After Jenkins is restarted, create new item on the Jenkins home page will give
    the following screen:![Integrating GitHub with Jenkins](img/00029.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a job name and the next screen will show Git options as following, under
    the **Source Code Management** tab. You can add other SCM tools like CVS, subversion,
    and so on, in a similar manner:![Integrating GitHub with Jenkins](img/00030.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the Git repository address of the local machine or a web link in the preceding
    repository URL placeholder to configure Git with Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maven (Build) Tool Integration with Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps for Maven (build) tool integration with
    Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Maven from [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi);
    this is the latest version of the binary file:![Maven (Build) Tool Integration
    with Jenkins](img/00031.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the downloaded Maven file to a folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Manage Jenkins**:![Maven (Build) Tool Integration with Jenkins](img/00032.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Maven Plugins as follows and install them without the restart option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Maven (Build) Tool Integration with Jenkins](img/00033.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Monitor plugin progress as follows:![Maven (Build) Tool Integration with Jenkins](img/00034.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Configure** tools, add Maven by giving the repository location:![Maven
    (Build) Tool Integration with Jenkins](img/00035.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new item job with the Maven project option:![Maven (Build) Tool Integration
    with Jenkins](img/00036.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Maven option in build environment is as follows:![Maven (Build) Tool Integration
    with Jenkins](img/00037.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The project is created as follows:![Maven (Build) Tool Integration with Jenkins](img/00038.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building Jobs with Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps for building jobs with Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: A simple application builds and runs the program:![Building Jobs with Jenkins](img/00039.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The source code repository options as listed as follows:![Building Jobs with
    Jenkins](img/00040.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can specify the location of files which need to be built either from a source
    Git code repository or the URL from GitHub:![Building Jobs with Jenkins](img/00041.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Builds can be executed with multiple options, command modes, and Maven and so
    on:![Building Jobs with Jenkins](img/00042.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Command-line programs can be executed as follows:![Building Jobs with Jenkins](img/00043.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After saving, the build option is visible, and history is also available:![Building
    Jobs with Jenkins](img/00044.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build progress can be seen and repository available as follows:![Building Jobs
    with Jenkins](img/00045.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Source Code Review – Gerrit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code review is an important function in the software development framework.
    Having a good collaborative tool like Gerrit for a code review process is very
    appropriate and needed. Gerrit initiates a pull-based workflow to initiate change
    requests, wherein comments are included even for source code to allow the change
    to be merged into the code repository through the workflow process. Gerrit maintains
    a local repository of the mirrored Git project repositories with reference repositories.
    Gerrit creates another maintenance branch from master branch to track reviews
    to the code; it creates a change-id identifier for the commit message to keep
    track of each change in a code review.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gerrit allows for code change comparisons and a reviewer can give one of five
    ratings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**+2**: Looks good, approved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**+1**: Looks good, but needs additional approval'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0**: No comments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-1**: Suggest not submit this'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-2**: Block the submit![Source Code Review – Gerrit](img/00046.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of Gerrit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to install Gerrit:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Gerrit from [https://www.gerritcodereview.com/](https://www.gerritcodereview.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the installation instructions as per the platform option and access Gerrit
    on port `8080` as follows to create users and projects:![Installation of Gerrit](img/00047.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure in Jenkins under **Manage Plugins** for Gerrit:![Installation of Gerrit](img/00048.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Version control tools listed in the [Lesson 2](part0014_split_000.html#DB7S1-9e1d43bf5c22491b83b15944fc98f0e3
    "Chapter 2. DevOps Framework"), *DevOps Framework*, for example Gerrit the web-based
    code review interface, allow reviewing changes online to push changes from any
    Git client and then auto-merging them with the master; it can also be configured
    as a remote Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Gerrit configuration includes user creation, Secure Shell (SSH) set up to exchange
    data with a Gerrit server. The configuration file `/etc/gerrit.config` has extensive
    parameters you need to set as per configuration requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Repository Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maintaining multiple build version artifacts is the key feature of repository
    management and Nexus is a popular repository manager. It can be downloaded from
    [http://www.sonatype.org/nexus/downloads/](http://www.sonatype.org/nexus/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, it can be accessed from `http://<nexus host>:8081/nexus`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Repository Management](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Nexus can be configured with plugins for Jenkins integration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Repository Management](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Testing with Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jenkins provides many out-of-the-box functionalities and plugins for testing.
    The site [https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin](https://wiki.jenkins.io/display/JENKINS/xUnit+Plugin)
    provides the plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing with Jenkins](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A list of available testing plugins is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: JUnit itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MSTest (imported from MSTest Plugin)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NUnit (imported from NUnit Plugin)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UnitTest++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boost Test Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHPUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Free Pascal Unit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CppUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MbUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EmbUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gtester/glib
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QTestLib
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Unit Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to set up unit testing:'
  prefs: []
  type: TYPE_NORMAL
- en: Pick up the project we have set up:![Setting up Unit Testing](img/00052.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose build option:![Setting up Unit Testing](img/00053.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose an **Advanced** option:![Setting up Unit Testing](img/00054.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the location of `build.xml`:![Setting up Unit Testing](img/00055.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the option of post-build option and choose **Publish JUnit test result
    report**:![Setting up Unit Testing](img/00056.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the test `reports.xml`, enter the reports created a folder in our project
    so that Jenkins picks the resulting XML files produced by running of the JUnit
    test cases:![Setting up Unit Testing](img/00057.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can select the build and drill-down to the test results.
  prefs: []
  type: TYPE_NORMAL
- en: Automated Test Suite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuous integration is the process of verifying a build to objectively access
    its readiness for the next level; this is accomplished with automated testing.
    So, the build artifacts are set to be tested automatically; Selenium is the most
    popular framework for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be downloaded from the following site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automated Test Suite](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Under **Jenkins**, **Plugin Manager**, select the Selenium plugin and install,
    restart to initiate:![Automated Test Suite](img/00059.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the `selenium server JAR` file:![Automated Test Suite](img/00060.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the project we created to be set for this automated framework:![Automated
    Test Suite](img/00061.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the build process, add the option, **SeleniumHQ htmlSuite Run**:![Automated
    Test Suite](img/00062.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selenium IDE will generate Test Suite, the Selenium test is enabled with SuiteFile
    by launching the Selenium driver:![Automated Test Suite](img/00063.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous Delivery- Build Pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous delivery is the process of building a robust pipeline from software
    development to deployment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Continuous Delivery- Build Pipeline](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Install the Build Pipeline plugin from **Manage Plugins** as follows:![Continuous
    Delivery- Build Pipeline](img/00065.jpeg)![Continuous Delivery- Build Pipeline](img/00066.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To set up the Build Pipeline, Click on the **+** symbol, next to the **All**
    tab on the dashboard:![Continuous Delivery- Build Pipeline](img/00067.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Build Pipeline View** and choose a name for the pipeline:![Continuous
    Delivery- Build Pipeline](img/00068.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Options** and the project created:![Continuous Delivery- Build
    Pipeline](img/00069.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The delivery pipeline view is created with the status of each stage of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkins Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Client-server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Larger projects need multiple machines to be configured instead of centralized
    builds on one machine. Also, there are requirements for several different environments
    for test builds. Slave machines are effective to offload these loads from a master
    server.
  prefs: []
  type: TYPE_NORMAL
- en: They need a bi-directional communication link from the master through a TCP/IP
    socket, with only a slave agent instead of the full Jenkins package or compiled
    binaries.
  prefs: []
  type: TYPE_NORMAL
- en: To set up slave/nodes under Jenkins, configure and select the manage nodes option
    and create a new node:![Jenkins Features](img/00070.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select name and **Dumb Slave** option.![Jenkins Features](img/00071.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The slave node details are to be given, then choose to let Jenkins consider
    the Windows slave as a Windows service. Details such as name node and login credentials
    of the machine are required.![Jenkins Features](img/00072.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The slave machine will be available as follows; new jobs can be configured to
    run on this slave machine.![Jenkins Features](img/00073.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security in Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Users with relevant permissions can be set up with security configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Under **Manage Jenkins**, select **Configure Global Security**, and choose to
    **Enable security** option:![Security in Jenkins](img/00074.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you save the options, you will be prompted for an admin user.![Security
    in Jenkins](img/00075.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under **Jenkins Manage** setup, choose **Manage Users Options** to create users
    and then set up authorizations required to execute jobs with matrix based security:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Reporting Options**, **Metrics Options**, and **Reporting Plugins** can
    be installed.![Security in Jenkins](img/00076.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Many Metrics are available such as the Build History Metrics Plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mean Time To Failure** (**MTTF**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Time To Recovery** (**MTTR**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard deviation of build times
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Security in Jenkins](img/00077.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: It can be installed under **Manage Plugins** choosing the **Build History Metrics
    Plugin**, the above metrics will be reflected on the job page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To see a graphical representation, use Hudson global-build-stats and **Global
    Build Stats** plugins under **Manage Plugins**. Setting the options, initialize
    stats, create new chart options, and all the existing builds records will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this lesson, we learned about processes and tools for implementing continuous
    development, continuous integration, and continuous deployment with the use of
    repository management, code reviews, and test automation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, we will cover the topics of infrastructure configuration
    management as code for continuous deployment with tools such as Chef, Puppet,
    and Ansible. We will discuss on continuous monitoring process with tools Splunk
    and Nagios.
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous delivery is the process of extending the __________.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous deployment
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous monitoring
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous delivery
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'State whether the following is True or False: The delivery manager will approve
    the acceptance tests to agree to deployment test systems.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following are effective mechanisms to propose changes and check
    the quality of changes by identifying problems before they're pushed into the
    mainline, causing rework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pull for review in Gerrit
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Pull request in SVN
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Push request in GitHub
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Pull request in GitHub
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command is used to install Jenkins?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C:>java Jenkins.war
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: C:>Java -jar Jenkins.war
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: C:>Java –jar Jenkins.war
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: C:>java –jar Jenkins.war
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following is the process of building a robust pipeline from
    software development to deployment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous monitoring
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous deployment
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuous delivery
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
