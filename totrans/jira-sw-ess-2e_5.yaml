- en: Customizing Jira Software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we created both Scrum and Kanban projects using Jira's
    agile project templates. With these templates, a default set of configurations
    is automatically created and applied to our projects, such as the types of issue
    we can create and fields that we need to fill in when creating new issues. As
    your projects become more complex and new requirements come up, you will quickly
    find you need to be able to have more control over your project settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of the chapter, you will have learned how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create your own issue types and make them available to your projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add new custom fields to collect more relevant data from users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize workflows to better mimic your processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure your Jira with different levels of permission control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage email notifications sent out from Jira to notify users of changes to
    issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing issue types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each issue has a type (therefore, the name "issue type"), which is represented
    by the issue type field. This lets you know what type of issue it is; for example,
    if the issue is a bug or a feature. Jira comes with a list of pre-defined issue
    types, such as Story, Epic, and Task.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default issue types are great for simple software development projects,
    but they do not necessarily meet the needs of others. Since it is impossible to
    create a system that can address everyone''s needs, Jira lets you create your
    own issue types and assigns them to projects. For example, for a help desk project,
    you might want to create a custom issue type called **ticket**. You can create
    this custom issue type and assign it to the Help Desk project and users will be
    able to log tickets, instead of bugs, in the system as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Jira as a Jira administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Issues tab and then the Issue types option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Add issue type button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name and description for the new issue type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select whether the new issue type will be a Standard Issue Type or a Sub-Task
    Issue Type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Add to create the new issue type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you have created your new issue type, you will need to make it available
    to the project. You can do this by adding the new issue type to the *issue type
    scheme* used by the project. An issue type scheme contains a list of issue types,
    and is applied to one or more projects. This way, a project can have its own set
    of issue types, or have a shared set of issue types with other similar projects.
    To add your new issue type to an issue type scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Issues tab and then the Issue types schemes option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for the issue type scheme used by the project and click its Edit link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop the new issue type from the right Available Issue Types column
    to the left Issue Types for Current Scheme column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Save button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding new custom fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like issue types, Jira comes with a number of built-in fields. You have
    already seen a few of them in the previous chapters. For example, when creating
    new stories for your agile boards, there are fields such as summary, priority,
    and assignee. These fields make up the backbone of an issue, and you cannot remove
    them from the system. For this reason, they are referred to as **system fields**.
  prefs: []
  type: TYPE_NORMAL
- en: While Jira's built-in fields are quite comprehensive for agile software development
    uses, most organizations soon find they have special requirements that cannot
    be addressed simply with the default fields available. To help you tailor Jira
    to your organization's needs, Jira lets you create and add your own fields to
    the system, called **custom fields**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira comes with many types of custom fields, ranging from simple text fields,
    and select lists, to more complex ones, such as cascading select lists and user
    selectors. And if you find these are not sufficient enough, there are many more
    you can get from the Atlassian Marketplace, where you can find more specialized
    fields that talk to Salesforce.com, and many more. To start adding new custom
    fields to Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Issues tab and then the Custom fields option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add Custom Field button. This will bring you to step 1 of the process,
    where you can select the custom field type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search and select the custom field type you wish to add, and click on Next.
    This will bring you to step 2 of the process, where you can specify the custom
    field''s name and options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you do not see the field type you are looking for, select the All option
    from the left-hand side and then search again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter values for the Name and Description fields. If you are creating a selection-based
    custom field, such as a select list, you will need to add its select options too
    (you can update this list later):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Create button. This will bring you to the last step of the process,
    where you can specify the screen to which you would like to add the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the screens and click on Update. The following screenshot shows that
    the newly created field has been added to both of the support screens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After you have created the custom field, you can always come back later and
    customize it. For example, with our origin select list field, we have added three
    options when creating the field. If more options are needed, we can edit the field
    and add more options to it.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Jira workflows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up until now, all the Scrum and Kanban projects we have created have their
    own workflow, named `Software Simplified Workflow` for Project X, and this is
    what is called the **Simplified Workflow**. A simplified workflow is a type of
    workflow that is designed specifically to work with agile projects, by having
    minimum restrictions. This means:'
  prefs: []
  type: TYPE_NORMAL
- en: There is a pre-defined set of statuses/columns for both Scrum and Kanban
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Board administrators can easily make changes, by simply adding and removing
    columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issues can be moved between the statuses/columns freely with no restrictions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no intermediate screens when an issue is being moved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is great for most standard agile projects, where the goal is to have a
    straightforward workflow, and freedom for team members to move issues on the board
    as needed. However, sometimes you will have special requirements around your processes
    and your workflow will need to reflect those. For example, you might have a validation
    requirement that an issue can only be closed if a quality assurance engineer has
    signed off on it, or you might have a security requirement that only members of
    a certain group can move an issue to a target status.
  prefs: []
  type: TYPE_NORMAL
- en: These requirements may seem counter-intuitive in an agile environment, but remember
    that nothing is a one size fits all solution, and Jira lets you customize the
    workflow used by your project to best fulfill all your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira comes with a very intuitive graphical tool to help you, as a Jira administrator,
    to create and customize your workflows. The following is a screenshot of how Jira
    visually represents a workflow in the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Each **status** is represented as a box. Each **transition** is represented
    as a line between two statuses. When clicking on either a status or a transition,
    a properties panel will appear on the right-hand side, allowing you to further
    customize it.
  prefs: []
  type: TYPE_NORMAL
- en: Authoring a workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, let''s take a look at how to create and set up a new workflow in Jira.
    To create a new workflow, all you need is a name and description:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Issues tab and then the Workflows option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add Workflow button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name and description for the new workflow in the Add Workflow dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add button to create the workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The newly created workflow will only contain the default create and open status,
    so you will need to configure it by adding new statuses and transitions to make
    it useful. Let''s start with adding new statuses to the workflow using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Add status button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select an existing status from the drop-down list. If the status you need does
    not exist, you can create a new status by entering its name and pressing the *Enter*
    key on your keyboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the Allow all statuses to transition to this one option, if you want users
    to be able to move the issue into this status regardless of its current status.
    This will create a **Global Transition**, which is a convenient way to allow an
    issue to use this transition from any status to get to the target status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add button to add the status to your workflow. You can repeat
    these steps to add as many statuses as you want to your workflow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Try to re-use existing statuses if possible, so you do not end up with many
    similar statuses to manage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the statuses are added to the workflow, they need to be linked with
    transitions, so issues can move from one status to the next. There are two ways
    to create a transition:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Add transition button or you can follow the next step
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the originating status, then click and drag the arrow to the destination
    status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both options will bring up the Add transition dialog, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, you can choose to either create a new transition
    with the New Transition tab or use an existing transition with the Reuse a transition
    tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a new transition, you will need to configure the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From status: The originating status. The transition will be available when
    the issue is in the selected status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To status: The destination status. Once the transition is executed, the issue
    will be put into the selected status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Name: Name of the transition. This is the text that will be displayed to users.
    It is usually a good idea to name your transitions starting with a verb, such
    as `Close Issue` or `Submit for Review`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Description: An optional text description is the purpose of this transition.
    This will not be displayed to users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Screen: An optional intermediate screen to be displayed when users execute
    the transition. For example, you display a screen to capture additional data as
    part of the transition. If you do not select a screen, the transition will be
    executed immediately. The following screenshot shows a workflow screen:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to reuse an existing transition, simply select the Reuse a transition
    tab, the From status and To status, and the transition to reuse, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Jira will only list valid transitions based on the To status selection.
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering when you should create a new transition and when you
    should reuse an existing transition. The big difference between the two is that
    when you reuse a transition, all instances of the reused transition, also known
    as **common transition**, will share the same set of configurations, such as conditions
    and validators. Also, any changes made to the transition will be applied to all
    instances. A good use case for this is when you need to have multiple transitions
    with the same name and setup, such as Close Issue; instead of creating separate
    transitions each time, you can create one transition and reuse it whenever you
    need a transition to close an issue. Later on, if you need to add a new validator
    to the transition to validate additional user input, you will only need to make
    the change once, rather than multiple times for each Close Issue transition.
  prefs: []
  type: TYPE_NORMAL
- en: Another good practice to keep in mind is to not have a *dead end* state in your
    workflow, for example, allowing closed issues to be reopened. This will prevent
    users from accidentally closing an issue and not being able to correct the mistake.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to add new statuses and transitions to a workflow,
    let's look at adding conditions, validators, and post functions to a transition.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a condition to transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New transitions do not have any conditions by default. This means that anyone
    who has access to the issue will be able to execute the transition. By adding
    a condition to a workflow transition, you can control who or when an issue can
    be transitioned.
  prefs: []
  type: TYPE_NORMAL
- en: Conditions take place before a transition is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira allows you to add any number of conditions to the transition:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the transition you want to add conditions to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Conditions link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add condition link. This will bring you to the Add Condition To
    transition page, which lists all the available conditions you can add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the condition you want to add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add button to add the condition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on the condition, you may be presented with the Add Parameters To
    Condition page, where you can specify the configuration options for the condition.
    For example, the User Is In Group condition will ask you to select the group to
    check against.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Newly added conditions are appended to the end of the existing list of conditions,
    creating a **condition group**. By default, when there is more than one condition,
    a logical `AND` is used to group the conditions. This means that all conditions
    must pass for the entire condition group to pass. If one condition fails, the
    entire group fails, and the user will not be able to execute the transition. You
    can switch to use a logical `OR`, which means only one of the conditions in the
    group needs to pass for the entire group to pass. This is a very useful feature
    as it allows you to combine multiple conditions to form a more complex logical
    unit.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the **User Is In Group** condition lets you specify a single group,
    but with the `AND` operator, you can add multiple **User Is In Group** conditions
    to ensure the user must exist in all the specific groups to be able to execute
    the transition. If you use the `OR` operator, then the user will only need to
    belong to one of the listed groups. The only restriction to this is that you cannot
    use both operators for the same condition group.
  prefs: []
  type: TYPE_NORMAL
- en: One transition can only have one condition group, and each condition group can
    only have one logical operator.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a validator to transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like conditions, transitions, by default, do not have any validators associated.
    This means transitions are completed as soon as they are executed. You can add
    validators to transitions to make sure that executions are only allowed to be
    completed when certain criteria are met. One good use case of validators is when
    a transition has a workflow screen to capture user input, and you need to validate
    the inputs, such as date format.
  prefs: []
  type: TYPE_NORMAL
- en: Validators take place during a transition execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to add a validator to a transition:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the transition you want to add validators to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Validators link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add validator link. This will bring you to the Add Validator To
    Transition page, which lists all the available validators you can add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the validator you want to add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add button to add the validator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on the validator, you may be presented with the Add Parameters To
    Validator page where you can specify configuration options for the validator.
    For example, the Permissions validator will ask you to select the permission to
    validate against.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similar to conditions, when there are multiple validators added to a transition,
    they form a **validator group**. Unlike conditions, you can only use a logical
    `AND` for the group. This means that in order to complete a transition, every
    validator added to the transition must pass its validation criteria. Transitions
    cannot selectively pass validations using a logical `OR`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a validator being placed on the transition,
    validating if the user has entered a value for the Resolution Details field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a post function to transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Transitions, by default, are created with several post functions. These post
    functions provide key services to Jira''s internal operations, so they cannot
    be deleted from the transition. These post functions perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the issue status to the linked status of the destination workflow step
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a comment to an issue if one is entered during a transition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the change history for an issue and store the issue in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-index an issue to keep indexes in sync with the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fire an event that can be processed by the listeners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, these post functions provide some of the basic functions such
    as updating a search index and setting an issue's status after transition execution,
    which are essential in Jira. Therefore, instead of users having to manually add
    them in and risk the possibility of leaving one or more out, Jira adds them for
    you automatically when you create a new transition.
  prefs: []
  type: TYPE_NORMAL
- en: Post functions take place after a transition has successfully executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to add a post function to a transition:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the transition you want to add post functions to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Post Functions link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add post function link and select the post function you want to
    add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add button to add the post function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending on the post function, you may be presented with the Add Parameters
    To Function page, where you can specify configuration options for the post function.
    The following screenshot shows an example from the Update Issue Field post function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Just like conditions and validators, multiple post functions form a post function
    group in a transition. After a transition is executed, each post function in the
    group is executed sequentially as it appears in the list, from top to bottom.
    If any post function in the group encounters an error during processing, you will
    receive an error, and the remaining post functions will not be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Since post functions are executed sequentially and some of them possess the
    abilities to modify values and perform other tasks, often, their sequence of execution
    becomes very important. For example, if you have a post function that changes
    the issue's assignee to the current user and another post function that updates
    an issue field's value with the issue's assignee, obviously the update assignee
    post function needs to occur first, so you need to make sure it is above the other
    post function.
  prefs: []
  type: TYPE_NORMAL
- en: You can move the positions of post functions up and down along the list by clicking
    on the Move Up and Move Down links. Note that not all post functions can be repositioned.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Jira permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is the top most important priority in today's digital world. Ensuring
    only authorized personnel will have access to the data stored in Jira to prevent
    any potential information leak is something every Jira administrator needs to
    keep track of. To ensure there are proper security controls in place, Jira provides
    a number of options to control access permissions to the data it stores.
  prefs: []
  type: TYPE_NORMAL
- en: Global permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Global permissions, as the name suggests, is the highest permission level in
    Jira. These are coarse-grained permissions applied globally across Jira, controlling
    broad security levels, such as the ability to administer various configuration
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Global permissions can only be granted to groups. For this reason, you will
    need to organize your users into logical groups for global permissions to take
    effect. For example, you will want to have all your administrators belong to a
    single group, such as the `JIRA-administrators` group, so you can grant them administration
    permission:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the System tab and then the Global permissions option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the permission you wish to assign from the Add Permission section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the group to be given the permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add button to add the assignment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A user with Jira Administrators' global permission cannot grant himself/herself
    Jira System Administrators' global permission.
  prefs: []
  type: TYPE_NORMAL
- en: Project permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen, global permissions controls mostly administration-level accesses,
    and in most cases, you will need the ability to control access to projects, such
    as who will be able to view and create new issues. This is where **permission
    schemes** come in.
  prefs: []
  type: TYPE_NORMAL
- en: 'A permission scheme defines a list of permissions available in Jira, such as
    who can delete an issue, and who can add comments, and lets you grant each permission
    to different users. This mapping of permission types to user definitions make
    up the permission scheme. Once you have defined the mapping for your scheme, you
    can then apply it to one or more projects. This gives you the flexibility to define
    unique permission settings for each project, as well as share and apply the same
    permission settings to multiple projects. To start working with permission schemes,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Issues tab and then the Permission schemes option. By default, there
    should be two permission schemes already defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Default permission scheme:** Default scheme used by non-agile projects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default software scheme:** Default scheme used by all agile (Scrum and Kanban)
    projects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can update the permission settings for the existing schemes by clicking
    on the Permissions link, which will affect all existing projects using the scheme,
    or create a new scheme by clicking the Add permission scheme button.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you have either selected or created the permission scheme you wish to
    configure, you will be taken to the **Edit Permissions** page, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On this page, you will be presented with a list of project level permissions,
    along with short descriptions for each, and the users, groups, and roles that
    are linked to each of the permissions. You will notice that for the default permission
    scheme, most of the permission options have default users linked to them through
    project roles. If you are looking at a new permission scheme, there will be no
    users linked to any of the permissions. This is your one-page view of permission
    settings for projects, and you will also be able to add and delete users. To grant
    a permission to users:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Grant permission button or the Edit link for a specific permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the permissions you wish to grant the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the user option to specify whom to grant the permission to. Click on
    the Show more link to see more options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Grant button to grant the selected permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat this process to grant more users to the permission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A permission option such as **User Custom Field Value** is a very flexible way
    to allow end users to control access. For example, you can have a custom field
    called **Editors**, and set up your Edit Issues permission to allow only users
    specified in the custom field to be able to edit issues. The custom field does
    not have to be placed on the usual view/edit screens for the permission to be
    applied. For example, you can have the custom field appear on a workflow transition
    called Submit to Manager; once the user has selected the manager, only the manager
    will have permission to edit the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Issue permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A project level permission with a permission scheme is usually all you will
    need with your security requirements. However, sometimes you might need to take
    things one step further and control access permission on a per issue basis. One
    example of such a use case is when you have both internal and external users,
    such as customers working on the same project, and there are issues you do not
    want to share with your outside customers. In these cases, you can use **issue
    security schemes**.
  prefs: []
  type: TYPE_NORMAL
- en: Issue security allows users to set view permissions (not edit) on issues by
    selecting one of the preconfigured issue security levels from the system Security
    Level field. On a high level, issue security works in a similar way to permission
    schemes. The Jira administrator will start by creating and configuring a set of
    issue security schemes with security levels set. Project administrators can then
    apply one of these schemes to their projects, which allows the users (with Set
    Issue Security project permission) to select the security levels within the scheme
    and apply them to individual issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'The starting point of using issue security is the issue security scheme. It
    is the responsibility of the Jira administrator to create and design the security
    levels so they can be reused as much as possible:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Issues tab and then the Issue security schemes option. Unlike permission
    schemes, there are no default issue security schemes available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add Issue Security Scheme button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name and description for the new scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add button to create the new issue security scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Security Levels link for the issue security scheme we just created.
    New issue security schemes do not contain any security levels, so we will need
    to add them manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name and description for the new security level in the Add Security
    Level section and click on the Add Security Level button. Repeat this step to
    add more security levels. With the security levels in place, we can now assign
    users who will have a view permission for each of the security levels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add link for the security level you wish to assign users to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the option you wish to assign to the security level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add button to assign the users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, we have two security levels defined,
    Internal Only and Public. So when an issue is set to have the Internal Only security
    level, only members of the demo-project-members group will be able to view the
    issue; anyone else will get a security error. When an issue is set to the Public
    security level, then anyone in Jira will be able to view the issue, provided they
    also meet the project level permissions set in the permission scheme used by the
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Troubleshooting permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting permission settings right is very critical to secure data for your organization,
    especially for projects containing sensitive information that require very restricted
    permission control. And with the different levels of permission controls in Jira,
    it can be frustrating and confusing to figure out why a user cannot access an
    issue he or she is expected to have access to.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help with this, Jira provides a permission helper to assist administrators
    with pinpointing settings that prevent users from accessing certain features.
    To use the permission helper:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the System tab and then the Permission helper option at the bottom.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the user that is having access problems in the User field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the issue to test with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the permission the user does not have (for example, Edit Issues).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Submit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, the user Patrick Li cannot edit issue
    DEMO-3 because he is not in the Internal Only issue security level, which is required
    as per the **Default Permission Scheme** used.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Jira notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your team starts to use Jira to run their projects day to day, each member
    would need to be notified when changes happen to the tasks they are working on,
    such as a quality assurance officer rejecting a bug fix submitted by an engineer,
    or a comment logged by the product owner on a new feature. This is especially
    important for distributed teams in different time zones, where simply walking
    up to someone for a quick chat is not an option. To help with collaboration within
    the team, Jira uses email notifications to keep everyone up to date on changes
    that happen to issues in the project, and it has a very flexible way to allow
    you to define how and when these notifications should be sent out.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling outgoing emails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order for Jira to send out outgoing email notifications, you need to be
    a Jira system administrator (for example, the user created during the initial
    setup is a system administrator) to configure mail server details. Perform the
    following steps to manage the outgoing mail server:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the System tab and then the Outgoing Mail option. This will bring up
    the Outgoing Mail page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Configure new SMTP mail server button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the general details of your mail server, including the name, description,
    from address, and email prefix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the type of mail server from the Service Provider field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the mail server's connection details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Test Connection button to verify configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add button to register to the mail server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have set up the SMTP mail server for your Jira instance, you will be
    able to send test emails to verify connectivity, which will be very useful during
    troubleshooting situations, as we will see later in this chapter. You can also
    disable all outgoing email notifications with the Disable Outgoing Mail button,
    a useful option if you want to temporarily disable all email notifications while
    you perform other maintenance tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring notification schemes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the SMTP mail server setup, the next step is to configure rules for the
    following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: When should Jira send out email notifications?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who should receive these email notifications?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Jira uses **notification schemes** to control the preceding two questions.
    In Jira, each user action, such as editing an issue, can trigger an event, and
    for each event, you can define a list of users that will receive notifications.
    This event to notification mapping is what makes up a notification scheme. Once
    you have defined your notification scheme, you can then apply the scheme to various
    projects. This way, each project can have its own unique notification settings,
    and multiple projects can share the same notification settings. To configure a
    notification scheme, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Issues tab and then the Notification schemes option. This will bring
    up the Notification Schemes page. By default, there is only one notification scheme,
    called Default Notification Scheme, and all projects make use of it. You can choose
    to edit the default scheme by clicking on its Notifications link, which will affect
    all projects, or create a new scheme by clicking the Add notification scheme button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have the notification scheme ready, Jira will display the list of
    events available, and users (if any) that will receive notifications, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can add new users to receive notifications by clicking the Add link for
    an event you want. Jira will then show you a list of all the options you can use
    to define the notification recipients. As you can see in the following screenshot,
    there are many options, ranging from static options, such as specific users in
    Jira or exact email addresses, to more dynamic options, such as all users in a
    group or in a custom field of the issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the notification recipient option and click Add. You can repeat the
    process to add more users to receive notifications for the event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Troubleshooting notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often, as an administrator, when people do not receive expected notifications
    from Jira, it can be difficult and frustrating to find the cause. There are two
    common causes for notification-related problems: outgoing mail server connectivity,
    or misconfiguration of the notification scheme.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Troubleshooting outgoing mail server problems is quite simple. All you need
    to do is try to send out a test email from the Send a Test Email option from the
    Outgoing Mail administration section. If you receive your test email, then there
    will be no problems with your outgoing mail server configuration, and you can
    focus on your notification configurations. As shown in the following screenshot,
    the test email delivery has failed, and the error is because Jira was unable to
    connect to the configured SMTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Troubleshooting notification settings is not as straightforward, since there
    are a number of things that you will need to consider. To help with this challenge,
    Jira has a new feature, called Notification helper. The notification helper can
    save the Jira administrators time by helping them to pinpoint why a given user
    does or does not receive notifications. All the administrator has to do is tell
    the helper who the user is, which issue (or an example issue from the target project)
    the user should be receiving notifications for, and the event that is triggering
    the notification:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Jira administration console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the System tab and then the Notification helper option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the user that should receive notifications in the User field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the issue to test with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the type of notification event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Submit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notification helper will then process the input and report if the user is expected
    to receiving be notifications and why, based on notification scheme settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, the user Patrick Li is currently
    not receiving notifications for the DEMO-2 issue when it is updated because the
    notification is set up to have only the Current Assignee receive emails, and Patrick
    Li is not the assignee.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to customize Jira beyond the default templates
    provided by its agile templates. We looked at how to create new issue types and
    custom fields, as well as authoring workflows with custom permission and validations.
    We also introduced Jira's permission hierarchy and the options you have to secure
    your system against unauthorized access. Lastly, we looked at how to manage email
    notifications in Jira, so team members can stay up to date on changes that happen
    in their projects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at some advanced topics, such as integrating
    Jira with other tools to go beyond what it can do with out-of-the box features.
  prefs: []
  type: TYPE_NORMAL
