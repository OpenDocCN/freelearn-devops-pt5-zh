- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible Automation Best Practices for Production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible can be used to automate IT infrastructure and DevOps tasks. Because
    of its flexible and modular architecture, we can implement large, complex automation
    use cases using Ansible. But at the same time, we need to keep the simplicity
    and reusability of the automation artifacts and methods.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the important and well-known best practices
    for implementing efficient automation solutions.
  prefs: []
  type: TYPE_NORMAL
- en: First, you will learn how to organize the playbooks, roles, collections, and
    inventories in an Ansible project. After that, we will discuss the best practices
    for storing managed node information in the inventory and different methods for
    storing and maintaining multiple inventories. You can store the remote nodes separately
    based on their function, criticality, or location; these details will be explained
    in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn about the most efficient ways to store the variables in
    dynamic methods and how to store host variables and group variables to maintain
    them appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Another critical component in Ansible automation is handling credentials such
    as usernames and passwords, API keys, and secrets. Therefore, you will explore
    the best practices for Ansible credential management, such as how to store sensitive
    data for an Ansible playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you will learn about the best practices, methods, and optimization
    techniques for developing and executing Ansible playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Organizing Ansible automation content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing remote host information – inventory best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible host variables and group variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible credentials best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible playbook best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will start by covering various Ansible content organization methods
    and different inventory organization methods.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following technical requirements to complete this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A Linux machine for the Ansible control node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One or more Linux machines as managed nodes with Red Hat repositories configured
    (if you are using non-RHEL machines, then make sure you have the appropriate repositories
    configured to get packages and updates).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible artifacts, Ansible playbooks, commands, and snippets for this
    chapter can be found in this book’s GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-16](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-16).
  prefs: []
  type: TYPE_NORMAL
- en: Organizing Ansible automation content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 4*](B18383_04.xhtml#_idTextAnchor067), *Exploring Collaboration
    in Automation Development*, you learned about **version control systems** (**VCSs**)
    and **source control management** (**SCM**) and how to use GitHub services to
    store Ansible artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: It is the best practice to create project-specific directories (that is, repositories)
    to keep all related items at a single location, such as project-specific `ansible.cfg`
    files, playbooks, roles, collections, or libraries. If there are external roles
    or collections dependencies, then mention the details inside the `requirements.yaml`
    (or `requirements.yml`) file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `tree` command in Linux to list the directories and files recursively
    and understand the structure of the directory’s content. A sample project directory
    can be organized like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1 – Typical Ansible project directory ](img/B18383_16_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.1 – Typical Ansible project directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Your roles will be under the `roles` directory, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2 – Ansible roles directory ](img/B18383_16_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.2 – Ansible roles directory
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the projects and use cases, you may have more or fewer directories
    and files. We will explore the best practices for storing an inventory in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Storing remote host information – inventory best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managed nodes or remote host information is critical data in Ansible automation
    since, without the proper host details, Ansible will not be able to execute the
    automation tasks. You learned about the Ansible inventory and its basic details
    in [*Chapter 1*](B18383_01.xhtml#_idTextAnchor014), *Ansible Automation – Introduction*.
    In *Chapter 4*, *Exploring Collaboration in Automation Development*, you learned
    about the importance of storing an inventory in a GitHub repository for version
    control and better management. If your managed nodes are hosted in cloud platforms,
    then it is a best practice to use Ansible dynamic inventories, as you learned
    in [*Chapter 5*](B18383_05.xhtml#_idTextAnchor086), *Expanding Your Automation
    Landscape*.
  prefs: []
  type: TYPE_NORMAL
- en: Using meaningful hostnames
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create your Ansible static inventory files, use meaningful and user-friendly
    names for your managed nodes instead of complex **Fully Qualified Domain Names**
    (**FQDNs**) or IP addresses. It will help you while executing the Ansible playbook
    and troubleshooting it if that’s required.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following is a generic Ansible static inventory file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3 – Sample static inventory file ](img/B18383_16_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.3 – Sample static inventory file
  prefs: []
  type: TYPE_NORMAL
- en: 'The same static inventory can be rewritten with user-friendly names and `ansible_host`
    information, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.4 – Ansible inventory with user-friendly names ](img/B18383_16_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.4 – Ansible inventory with user-friendly names
  prefs: []
  type: TYPE_NORMAL
- en: Using `ansible_host` means you don’t have to rely on your DNS name (FQDN) by
    using the IP address to access the managed nodes.
  prefs: []
  type: TYPE_NORMAL
- en: This practice will not only help you troubleshoot output and logs but also help
    you manage your inventory with simple and meaningful names.
  prefs: []
  type: TYPE_NORMAL
- en: How to Build Your Inventory
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the official documentation for more details: [https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.xhtml](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to separate the inventory based on environments
    such as production, staging, and development.
  prefs: []
  type: TYPE_NORMAL
- en: Storing production, staging, and development hosts separately
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need to organize your inventory at the project level or overall inventory
    level. If you are using the same managed nodes for multiple Ansible projects (the
    same nodes but different automation and use cases), then keep your inventory somewhere
    in a central GitHub repository as a single source of truth. This will help you
    organize your managed node information in a better way so that it can be used
    for different automation playbooks. The following diagram shows a scenario where
    the inventory is stored in a dedicated GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.5 – Ansible inventory in a dedicated repository ](img/B18383_16_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.5 – Ansible inventory in a dedicated repository
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we have created a separate directory for the inventories
    and placed the production, development, and staging managed nodes in separate
    directories (refer to the `Chapter-16` directory in this book’s GitHub repository):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.6 – Ansible inventory organized based on the environment ](img/B18383_16_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.6 – Ansible inventory organized based on the environment
  prefs: []
  type: TYPE_NORMAL
- en: 'When you execute the playbook, you must mention which inventory file will be
    used, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The inventory can also be categorized based on location, criticality, server
    type, and more. It is possible to do the same categorization inside the inventory
    file using host groups, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.7 – Host groups and group variables for managed nodes ](img/B18383_16_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.7 – Host groups and group variables for managed nodes
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the grouping of managed nodes using the `ansible-inventory` command,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.8 – Listing the hosts and host groups using the ansible-inventory
    command ](img/B18383_16_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.8 – Listing the hosts and host groups using the ansible-inventory
    command
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding examples, we created multiple inventory files in the same or
    different folders and grouped-managed nodes based on function or location. In
    the next section, you will learn how to maintain host-specific and group-specific
    variables using the `group_vars` and `host_vars` variables, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible host variables and group variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learned previously, like many other automation tools, Ansible allows
    you to use variables for dynamically executing playbooks. It is possible to configure
    the same playbook so that it can be executed for different desired states using
    variables and values. We can keep the variables inside the playbooks, external
    variable files, inventory files, and many other places. You learned more about
    variables in [*Chapter 6*](B18383_06.xhtml#_idTextAnchor105), *Automating Microsoft
    Windows and Network Devices*.
  prefs: []
  type: TYPE_NORMAL
- en: The same variable can be specified in multiple places but depending on the location
    of your variable and variable precedence, Ansible will apply the appropriate value
    for the variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible uses the appropriate variable values and executes the playbooks based
    on them; the following diagram shows the typical flow where Ansible combines the
    variable values with the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.9 – Ansible combines playbooks and variables for the final execution
    ](img/B18383_16_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.9 – Ansible combines playbooks and variables for the final execution
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Variable Precedence
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.xhtml#understanding-variable-precedence](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.xhtml#understanding-variable-precedence)
    to learn and understand more about variable precedence.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is best practice to use host-specific variables and group-specific variables
    in the `host_vars` and `group_vars` directories, respectively, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.10 – host_vars and group_vars for the Ansible inventory ](img/B18383_16_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.10 – host_vars and group_vars for the Ansible inventory
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s learn how to create `host_vars` and `group_vars`.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible group_vars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The variables for a group should be mentioned in a file such as `group_vars/INVENTORY_GROUP_NAME.yaml`
    or a subdirectory such as `group_vars/INVENTORY_GROUP_NAME/VAR_FILE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`group_vars/web.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_vars/web/vars.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_vars/web/credential.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible host_vars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The variables for the host should be mentioned in a file such as `host_vars/INVENTORY_HOSTNAME`
    or a subdirectory such as `host_vars/INVENTORY_HOSTNAME/VAR_FILE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`host_vars/node1.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host_vars/node1/vars.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host_vars/node2.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is possible to create multiple variable files for the same managed node so
    that you can manage related variables separately.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping your secret variables in a safe location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have credentials or secrets as part of your host variables, then keep
    such variables in a separate variable file and encrypt them using Ansible Vault.
    The following are some examples of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`host_vars/node1/vars.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host_vars/node1/credentials.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_vars/web/vault.yaml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also possible to use other vault services such as HashiCorp Vault or CyberArk
    instead of Ansible Vault. Refer to [*Chapter 13*](B18383_13.xhtml#_idTextAnchor241),
    *Using Ansible for Secret Management*, to learn more about Ansible Vault.
  prefs: []
  type: TYPE_NORMAL
- en: Managing group_vars and host_vars in Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will use host variables and group variables to control
    the values of multiple web servers. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `hosts` inventory file inside the staging inventory directory (`Chapter-16/inventories/stg`)
    with the following content (do not worry about `node1`, `node2`, or `node3` as
    we are not going to connect to these machines):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.11 – Ansible inventory with a web group ](img/B18383_16_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.11 – Ansible inventory with a web group
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `group_vars` and `host_vars` directories for storing group variables
    and host variables, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.12 – Creating directories for group variables and host variables
    ](img/B18383_16_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.12 – Creating directories for group variables and host variables
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a group variable file called `inventories/stg/group_vars/web.yaml` with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.13 – Creating a group variable file ](img/B18383_16_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.13 – Creating a group variable file
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure a different value for `web_server_port` (`8080`) for `node1`. Create
    a host variable file called `inventories/stg/host_vars/node1.yaml` with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.14 – Creating a host variable file ](img/B18383_16_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.14 – Creating a host variable file
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure a different value for `web_server_port` (`8081`) for `node2`. Then,
    create a host variable file for `node2` in `inventories/stg/host_vars/node2.yaml`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.15 – Creating a host variable file for node2 ](img/B18383_16_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.15 – Creating a host variable file for node2
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that all the variable files have been created, you must verify them, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.16 – Project directory structure with group variables and host
    variables ](img/B18383_16_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.16 – Project directory structure with group variables and host variables
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, verify the variable values for each host with the `ansible-inventory`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.17 – Verifying the inventory and variables using the ansible-inventory
    command ](img/B18383_16_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.17 – Verifying the inventory and variables using the ansible-inventory
    command
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you must verify and understand the host variables that have been assigned,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`node1` has been assigned with `web_server_port: 8080`, which is coming from
    `host_vars/node1.yaml`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node2` has been assigned with `web_server_port: 8081`, which is coming from
    `host_vars/node2.yaml`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node3` has been assigned with `web_server_port: 80`, which is coming from
    `group_vars/web.yaml`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Based on variable precedence, the nodes will get different values for the same
    variable, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.18 – Ansible group variables and host variables on target nodes
    ](img/B18383_16_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.18 – Ansible group variables and host variables on target nodes
  prefs: []
  type: TYPE_NORMAL
- en: It is important to configure the host-specific variable in `host_vars` or `group_vars`
    so that you don’t miss important values at the playbook level. If you have the
    same variable and values being shared by multiple hosts in the same group, then
    configure them under `group_vars`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about the best practices for storing credentials
    in Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible credentials best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible supports multiple credentials and authentication methods, such as username
    and password, SSH keys, API tokens, webhooks, and even the ability to create custom
    credentials. You should use a simple authentication mechanism as a starting point,
    but you need to consider the best practices to ensure security and safety are
    in place.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid using default admin user accounts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is common for engineers to configure the default administrator accounts as
    a `remote_user` such as `root` in Linux or as an **administrator** in Microsoft
    Windows. This is not a best practice; you should create dedicated accounts for
    Ansible and configure them for managed nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Split the login credentials for environments and nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous examples, you created user accounts in Linux and Microsoft
    Windows for Ansible to log in and execute tasks. It is possible to create the
    same user account for all of your nodes, but this is not required or recommended.
    It is possible to create different user accounts for different managed nodes since
    you have the option to specify `remote_user` or `ansible_user` for every managed
    node or host group, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.19 – A different user account for remote nodes ](img/B18383_16_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.19 – A different user account for remote nodes
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding inventory output, notice different `ansible_user` instances
    have been configured for different nodes, such as `ansibleadmin` for `node1`,
    `user1` for `node2`, `devops` for `node3`, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid passwords in plain text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using password-based authentication, then the password should be
    encrypted and saved separately. Refer to [*Chapter 3*](B18383_03.xhtml#_idTextAnchor052)*''s*,
    *Encrypting Sensitive Data Using Ansible Vault* section, to learn more about Ansible
    Vault and secret management. Once encrypted using Ansible Vault, the password
    file will be safe and cannot be read by anyone else, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.20 – Encrypting sensitive files using Ansible Vault ](img/B18383_16_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.20 – Encrypting sensitive files using Ansible Vault
  prefs: []
  type: TYPE_NORMAL
- en: 'When you execute the playbook, it is also possible to instruct Ansible to prompt
    for a password using the `--ask-pass` switch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.21 – Ansible Vault password prompt ](img/B18383_16_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.21 – Ansible Vault password prompt
  prefs: []
  type: TYPE_NORMAL
- en: Based on your organization’s best practices and compliance requirements, add
    more restrictions and best practices for handling sensitive data in Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about some of the best practices for Ansible
    playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible playbook best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to develop your Ansible playbooks with reader-friendliness and
    reusability in mind. Since the YAML format is human readable, it is easy to develop
    and follow some style guides for your Ansible playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 15*](B18383_15.xhtml#_idTextAnchor275), *Using Raw Commands for
    Network Operations*, you learned when to use the `raw` module and commands. Always
    check the documentation and see if there are modules available for your task.
    The `command`, `shell`, `raw`, and `script` modules can be used if no suitable
    modules are available for the task. But always keep in mind that the `command`,
    `shell`, `raw`, and `script` modules are not idempotent and will always report
    as `changed` when executed.
  prefs: []
  type: TYPE_NORMAL
- en: Always give your tasks names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though the `name` parameter is an optional component, it is a best practice
    to provide an appropriate and meaningful name for the plays, tasks, blocks, and
    other components in your Ansible playbooks. Refer to *Figure 16.22*, where you
    can see the sample names that were used for the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Use the appropriate comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding comments to your playbooks will help you troubleshoot when there is an
    issue. Comments are also useful when further developments or enhancements are
    required so that the original author and other developers can easily understand
    the task or steps that are required in the Ansible playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows that comments have been added before the tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.22 – Ansible playbook with comments, extra lines, and tags ](img/B18383_16_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.22 – Ansible playbook with comments, extra lines, and tags
  prefs: []
  type: TYPE_NORMAL
- en: Extra lines and whitespaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding whitespaces and extra lines in a playbook will increase its readability.
    As shown in the preceding screenshot, adding an extra line after each task will
    help you identify the individual tasks easily.
  prefs: []
  type: TYPE_NORMAL
- en: Implement your own style guide and follow the best practices for YAML writing
    to achieve better readability and reusability of Ansible artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Add tags to the tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you have large or complex playbooks, you may need to run some tasks specifically
    instead of executing every task in the playbooks and roles. It is possible to
    achieve this by using `--tags` argument, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'These tasks can be skipped by using the `--skip-tags` argument, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Refer to the Ansible tags documentation ([https://docs.ansible.com/ansible/latest/user_guide/playbooks_tags.xhtml](https://docs.ansible.com/ansible/latest/user_guide/playbooks_tags.xhtml))
    to learn more about the usage and methods of tags in Ansible playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: Use explicit declarations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The modules may have default parameter values and these values may apply automatically
    if we do not mention them in the playbook. But declaring such parameters explicitly
    in your playbooks will help you identify the desired result of the task. For example,
    in the `ansible.posix.firewalld` module, the default value for `immediate` is
    **no**, as shown in the documentation at [https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_module.xhtml](https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_module.xhtml):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.23 – firewalld module showing immediate parameter details ](img/B18383_16_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.23 – firewalld module showing immediate parameter details
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave it as-is or declare it explicitly as `immediate: yes` if you need to
    apply the firewall entry immediately. The following screenshot shows an example
    `firewalld` task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.24 – firewalld task with explicit declarations ](img/B18383_16_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.24 – firewalld task with explicit declarations
  prefs: []
  type: TYPE_NORMAL
- en: Always declare the desired result in the Ansible playbook so that it is possible
    to troubleshoot and remediate issues when they occur.
  prefs: []
  type: TYPE_NORMAL
- en: Use native YAML for playbooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is possible to write tasks in any acceptable YAML format, so long as Ansible
    can read and understand it. The following screenshot shows some example tasks
    in an Ansible playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.25 – Ansible tasks in the non-native YAML format ](img/B18383_16_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.25 – Ansible tasks in the non-native YAML format
  prefs: []
  type: TYPE_NORMAL
- en: 'The same playbook can be written in native YAML, which is tidier and more readable.
    This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.26 – Ansible tasks written in native YAML format ](img/B18383_16_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.26 – Ansible tasks written in native YAML format
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the Ansible YAML syntax ([https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.xhtml](https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.xhtml))
    and advanced syntax ([https://docs.ansible.com/ansible/latest/user_guide/playbooks_advanced_syntax.xhtml](https://docs.ansible.com/ansible/latest/user_guide/playbooks_advanced_syntax.xhtml))
    documentation to learn more about YAML for Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid hardcoding variables and details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot shows a play where the target nodes and package details
    have been mentioned (hardcoded) inside the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.27 – Ansible playbook with hardcoded values ](img/B18383_16_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.27 – Ansible playbook with hardcoded values
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to execute the playbook for other target nodes, then you must modify
    the playbook file and update its values. The same playbook can be written like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.28 – Ansible playbook with dynamic variables  ](img/B18383_16_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.28 – Ansible playbook with dynamic variables
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, pass the variable while executing the playbook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By avoiding hardcoding, it is possible to dynamically use the same playbook
    for different target nodes with different values.
  prefs: []
  type: TYPE_NORMAL
- en: Use blocks in Ansible playbooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blocks are a logical grouping of tasks in Ansible playbooks and help handle
    errors during execution. Instead of validating the success rate of tasks, use
    `block` in a playbook, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.29 – Using blocks in an Ansible playbook ](img/B18383_16_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.29 – Using blocks in an Ansible playbook
  prefs: []
  type: TYPE_NORMAL
- en: If any of the tasks in `block` fail, Ansible will execute the tasks under the
    `rescue` block. The tasks under the `always` block will be executed regardless
    of the failure or success of the block and rescue tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the blocks documentation ([https://docs.ansible.com/ansible/latest/user_guide/playbooks_blocks.xhtml](https://docs.ansible.com/ansible/latest/user_guide/playbooks_blocks.xhtml))
    to learn more about how to use blocks in Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Use roles and subtasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you develop large and complex automation use cases, you should split the
    playbook into small subtask files and roles. This practice will improve the modularity
    and flexibility of Ansible artifacts and also help troubleshoot the playbook easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.30 – An Ansible playbook calling roles and subtask files ](img/B18383_16_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.30 – An Ansible playbook calling roles and subtask files
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows an Ansible playbook calling the `linux-patching`
    role and some of the specific task files from the role.
  prefs: []
  type: TYPE_NORMAL
- en: Use meaningful names for variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous chapters, you learned about Ansible variables and their different
    usages. It is possible to use multiple variables in your playbooks and roles,
    so it is important to use meaningful names for the variables. The following screenshot
    shows both good and bad examples of how to name variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.31 – Ansible variables with short and meaningful names ](img/B18383_16_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.31 – Ansible variables with short and meaningful names
  prefs: []
  type: TYPE_NORMAL
- en: Naming your variables appropriately will help you avoid duplicating variable
    names and complexity in playbook development.
  prefs: []
  type: TYPE_NORMAL
- en: Learn playbook optimization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are multiple ways to optimize Ansible playbooks and speed up their execution.
    Some of them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Use parallelism.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the appropriate execution strategy as needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the appropriate value for `forks`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `serial` to execute in batches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `order` to control execution based on inventory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `throttle` for high CPU-intensive tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Read *8 ways to speed up your Ansible playbooks* ([https://www.redhat.com/sysadmin/faster-ansible-playbook-execution](https://www.redhat.com/sysadmin/faster-ansible-playbook-execution))
    and *5 ways to make your Ansible modules work faster* ([https://www.redhat.com/sysadmin/faster-ansible-modules](https://www.redhat.com/sysadmin/faster-ansible-modules))
    to learn more about Ansible optimization techniques. To expand your learning on
    Ansible best practices, refer to the official Red Hat course *Advanced Automation:
    Red Hat Ansible Best Practices* ([https://www.redhat.com/en/services/training/do447-advanced-automation-ansible-best-practices](https://www.redhat.com/en/services/training/do447-advanced-automation-ansible-best-practices)).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about some of the best practices that can be implemented
    in your Ansible development workflow. You explored the best practices for organizing
    Ansible artifacts, including playbooks, roles, variables, inventories, and other
    Ansible content. Then, you learned about the importance of storing the inventory
    separately based on the managed node environment, criticality, and other facts.
    You also learned how to use host variables and group variables to organize variables.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you learned about some of the best practices for storing and managing
    credentials in Ansible, such as avoiding plain text passwords and separating secrets
    from regular variable files. Finally, you learned about the different best practices
    and optimization techniques for improving the efficiency of Ansible playbooks.
    Refer to the *Further reading* section to learn more about Ansible best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! With this chapter, you have reached the end of this book on
    Ansible automation for real-life use cases.
  prefs: []
  type: TYPE_NORMAL
- en: First, you were introduced to Ansible and learned how to install and deploy
    it. Based on that knowledge, you learned about Ansible commands, modules, and
    managed nodes. After that, you learned about Ansible playbooks and developed basic
    automation use cases, such as collecting system information, weekly system reboots,
    and system report generation. You also learned about the importance of version
    control systems and practiced how to use them to store Ansible artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you expanded your learning by understanding how to find Ansible
    automation use cases. You learned how to automate Microsoft Windows and network
    devices such as VyOS and Cisco ASA using Ansible. You also learned how to use
    Ansible to manage virtualization platforms, cloud platforms (AWS, GCP, and VMware),
    and database operations.
  prefs: []
  type: TYPE_NORMAL
- en: Later, you learned how to use Ansible in DevOps practices and workflows and
    practiced container management using Ansible. You also learned how to use Ansible
    for Kubernetes management by deploying and scaling applications on Kubernetes.
    To expand your knowledge, you learned about Ansible Automation Platform and its
    various integration methods. After that, you learned how to manage sensitive information
    in Ansible using Ansible Vault.
  prefs: []
  type: TYPE_NORMAL
- en: In the last few chapters, you learned how to manage non-standard platforms and
    operations using raw commands, API calls, and modules. You also learned the best
    practices for developing and storing Ansible artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on, remember to join the Ansible community, real-time chat groups,
    and mailing lists. Refer to the Ansible community page ([https://www.ansible.com/community](https://www.ansible.com/community))
    to find details about meetup events. Contact me on LinkedIn ([https://www.linkedin.com/in/gineesh](https://www.linkedin.com/in/gineesh))
    if you have any questions or feedback on the content of this book.
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking for official Ansible training, then check out the courses
    from Red Hat ([https://www.ansible.com/products/training-certification](https://www.ansible.com/products/training-certification)).
  prefs: []
  type: TYPE_NORMAL
- en: Raise issues in the book repository ([https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/issues](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/issues))
    if you have any issues while practicing the exercises in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for your interest and your dedication to completing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Reusing Ansible artifacts (Include and Import)*: [https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse.xhtml#playbooks-reuse](https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse.xhtml#playbooks-reuse)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible tips and tricks*: [https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.xhtml](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible Best Practices (Presentation Deck archive)*: [https://aap2.demoredhat.com/decks/ansible_best_practices.pdf](https://aap2.demoredhat.com/decks/ansible_best_practices.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*10 habits of great Ansible users*: [https://www.redhat.com/sysadmin/10-great-ansible-practices](https://www.redhat.com/sysadmin/10-great-ansible-practices)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
