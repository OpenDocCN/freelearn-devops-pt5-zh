- en: Building PHP Applications from Source Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to build applications from Dockerfile,
    how to use `oc new-app` to initiate a Docker build, and finally, how to use `oc
    start-build` to start a new build from an existing build config.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the most frequently used application images
    that are already available on Docker Hub. Every now and then, it is required to
    build a custom image that contains custom software or is aligned with company
    security policy/standards. You will learn how OpenShift automates the build process
    through a **Source-to-Image** (**S2I**) build strategy, which is one of its main
    advantages. You will also learn how it allows you to build an image from your
    application's source code and then run it as a container.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: PHP S2I
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple PHP application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the PHP build process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter doesn''t have strict requirements when it comes to the lab environment,
    so any OpenShift installation and development environment is supported—Minishift,
    `oc cluster up`, or a standard production-ready deployment based on Ansible. It
    is up to you which flavor to use. However, this chapter will focus on the `oc cluster
    up` method. The following Vagrantfile can be used to deploy our virtual lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The environment can be deployed by running a single command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the virtual machine is deployed, you can connect to it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, log in as the `developer`, to be able to perform unprivileged operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: PHP S2I
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenShift supports S2I builds for PHP, and also for many other runtimes. The
    S2I process produces a ready-to-run image by combining the source code of an application
    with a base builder image, which prepares the application. The builder is a special
    image that is able to handle application installation and configuration for a
    particular programming language/framework. For example, the PHP builder can only
    handle PHP source code, and it doesn''t support Java by default. Most of the frequently
    used programming languages, like Python, Ruby, Java, and Node.js, are already
    covered by OpenShift built-in builders. The S2I process involves the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Determining the correct base builder image. This process relies on complex heuristics
    and primarily involves looking for specific files and file extensions, like `Gemfile`
    for Ruby on Rails, or `requirements.txt` for Python. The runtime environment that
    the builder image is determined by can also be overriden by the user from CLI
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a `BuildConfig` pointing to the application source code's repository
    and to the ImageStream for the builder image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starting a `build` pod from the builder image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Downloading the application's source code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Streaming the scripts and the application's source code into the builder image
    container, using the `tar` utility for images that support it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the `assemble` script (the one provided by the builder image has the
    highest priority)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Saving the final image to the internal registry
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating resources necessary to support the application. They include, but not
    limited to, `DeploymentConfig`, `Service`, and `Pod`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PHP builder supports changing the default PHP configuration by using a number
    of environment variables. They are described on the web page for each particular
    builder.
  prefs: []
  type: TYPE_NORMAL
- en: The build process can be initiated by running the `oc new-app`. This command
    takes the repository URL/local path as an argument, and creates all required OpenShift
    entities to support the S2I build and application deployment at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following OpenShift entities are created by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Type** | **Name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Pod | `<application name>-<build sequential number>-build` | Builder pod
    that builds your application, producing the application image and possibly some
    artifacts to be used in future builds along the way |'
  prefs: []
  type: TYPE_TB
- en: '| Pod | `<name>-<build sequential number>-<id>` | Application pod produced
    by the build process |'
  prefs: []
  type: TYPE_TB
- en: '| Service | `<name>` | Application service |'
  prefs: []
  type: TYPE_TB
- en: '| Replication controller | `<name>-<build sequential number>` | Application
    replication controller, maintaining only one replica by default |'
  prefs: []
  type: TYPE_TB
- en: '| Deployment config | `<name>` | Deployment configuration containing all information
    on how to deploy the application |'
  prefs: []
  type: TYPE_TB
- en: '| Image stream | `<name>` | Path to the image built |'
  prefs: []
  type: TYPE_TB
- en: '| Build config | `<name>` | Build configuration containing all required information
    on how to build the application |'
  prefs: []
  type: TYPE_TB
- en: '| Build | `<name>-<build sequential number>` | Particular build; can be run
    multiple times |'
  prefs: []
  type: TYPE_TB
- en: OpenShift doesn't create a route automatically. If you need to expose your application,
    a route should be created by running `oc expose svc <name>`.
  prefs: []
  type: TYPE_NORMAL
- en: Building a simple PHP application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first S2I lab will use a very simple PHP application that displays the
    PHP configuration using a standard PHP function—`phpinfo()`. It''s composed of
    a single `index.php` file, with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This application is enough to demonstrate a basic S2I build. We have already
    prepared a Git repository on GitHub, which contains the code of our application.
    The repository is located at [https://github.com/neoncyrex/phpinfo.git](https://github.com/neoncyrex/phpinfo.git),
    and is going to be used in this lab.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create a separate project for our new lab, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `oc new-app` command can build an application from its source code, using
    either a local or remote Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s clone the repository locally, to be able to make changes to it. This
    will create the `phpinfo` directory, with repository files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The build and application deployment processes can be initiated by running
    the `oc new-app` command. This basic S2I strategy can be triggered as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Uses `phpinfo` as a path to the application's source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically detects the programming language—PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initiates the build process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a number of OpenShift resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The build process takes some time. During the first phase, you can see a container
    with `-build` in its name. This container is deployed from the PHP builder image
    and is responsible for build operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After some time, the application will be available. That means that the application''s
    pod should be in a `Running` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'OpenShift built and deployed the `phpinfo` application, which is now available
    by using its service IP. Let''s try to access our application using the `curl`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `phpinfo()` function displays the PHP configuration as an HTML table.
  prefs: []
  type: TYPE_NORMAL
- en: 'A summary of the build process can be displayed by running the `oc status`
    or `oc status -v` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command shows that deployment `#1` has been rolled out. It can
    also contain some useful information for troubleshooting the build, in case something
    goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is another way to display build logs with low-level details—using the `oc
    logs` command. We need to show the log for the `buildconfig` (or just `bc`) entity,
    which can be displayed, as follows, by using the `oc logs bc/phpinfo` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding output gives us some insight into how builds work.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the PHP build process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know that the `phpinfo` application works as expected, let''s focus
    on the low-level details that are required to understand the build process. OpenShift
    created a number of API resources to make the build possible. Some of them are
    related to the deployment process, which we learned about in previous chapters.
    We can display all entities as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Most of the entities (the pod, service, replication controller, and deployment
    configuration) in the preceding output are already familiar to you, from previous
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The S2I build strategy uses the following additional entities—**build configuration,
    build,** and **image stream**. The build config has all of the information necessary
    to build the application. As with the rest of the OpenShift API resources, its
    configuration can be gathered using the `oc get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following fields are especially important:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spec.source.git`: Repository URL for the application source code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spec.strategy.sourceStrategy`: Contains information on which builder will
    be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our case, OpenShift uses a built-in builder from image stream `php:7.0`,
    in the `openshift` namespace. Let''s look at its configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The PHP builder image used to build our application is `centos/php-70-centos7:latest`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have all the information on how to build an application from source
    code. OpenShift puts together all the information (provided by you and inferred
    from the source code) and starts a new build. Each build has a sequential number,
    starting from `1`. You can display all builds by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This build is reported as `Complete`, as our application is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a new build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If an application's source code was updated, you can trigger the rebuild process
    by running the `oc start-build` command. The build itself is managed by the build
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to gather information on all available build configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we only have one build, `phpinfo`, and it was deployed only
    once; hence, the number `1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start a new build, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'OpenShift started a new build, versioned as `2`, which is present in the names
    of the pods spawned by the new build. Once everything is complete, your application
    will be redeployed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The latest version of the build is now `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'A list of all builds is kept by OpenShift for future inspection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This example is not close to production, as the build was triggered manually,
    not by changes to the source code. However, it gives you a general idea of how
    to use builds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following code to clean everything up for the next lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the build entities created by OpenShift,
    and how to deploy a simple PHP application from source code. We showed you how
    to start a new build and how to customize a build process.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, you will build and deploy a WordPress application
    from a custom template. You will also learn how to create and deploy OpenShift
    templates, and how to deploy applications from OpenShift templates.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Which of the following OpenShift entities controls how to build a particular
    application from source code? choose two:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pod
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Replication controller
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Build config
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployment config
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following commands starts a new build? choose one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc new-app`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc new build`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc start-build`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc get build`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following commands display information on a build? choose three:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc status -v`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc status`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc logs build/phpdemo-2`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc show logs`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'S2I is one of the most important features of OpenShift. You may want to have
    more deep knowledge of this process. The following links provide additional information:'
  prefs: []
  type: TYPE_NORMAL
- en: Builds and Image Streams at [https://docs.openshift.org/latest/architecture/core_concepts/builds_and_image_streams.html#builds](https://docs.openshift.org/latest/architecture/core_concepts/builds_and_image_streams.html#builds).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP at [https://docs.openshift.com/online/using_images/s2i_images/php.html/](https://docs.openshift.com/online/using_images/s2i_images/php.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
