- en: Building PHP Applications from Source Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建PHP应用程序
- en: In the previous chapter, you learned how to build applications from Dockerfile,
    how to use `oc new-app` to initiate a Docker build, and finally, how to use `oc
    start-build` to start a new build from an existing build config.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学会了如何从Dockerfile构建应用程序，如何使用`oc new-app`启动Docker构建，最后如何使用`oc start-build`从现有的构建配置启动新构建。
- en: In this chapter, we will discuss the most frequently used application images
    that are already available on Docker Hub. Every now and then, it is required to
    build a custom image that contains custom software or is aligned with company
    security policy/standards. You will learn how OpenShift automates the build process
    through a **Source-to-Image** (**S2I**) build strategy, which is one of its main
    advantages. You will also learn how it allows you to build an image from your
    application's source code and then run it as a container.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Docker Hub上已有的最常用的应用程序镜像。偶尔需要构建一个自定义镜像，包含定制的软件或符合公司安全政策/标准。你将学习OpenShift如何通过**Source-to-Image**（**S2I**）构建策略自动化构建过程，这是其主要优势之一。你还将学习如何从应用程序的源代码构建镜像，并将其作为容器运行。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: PHP S2I
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP S2I
- en: Building a simple PHP application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个简单的PHP应用程序
- en: Understanding the PHP build process
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解PHP构建过程
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter doesn''t have strict requirements when it comes to the lab environment,
    so any OpenShift installation and development environment is supported—Minishift,
    `oc cluster up`, or a standard production-ready deployment based on Ansible. It
    is up to you which flavor to use. However, this chapter will focus on the `oc cluster
    up` method. The following Vagrantfile can be used to deploy our virtual lab:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章在实验环境方面没有严格要求，因此任何OpenShift安装和开发环境都是支持的——Minishift、`oc cluster up`或基于Ansible的标准生产就绪部署。选择使用哪种方式由你决定。不过，本章将重点介绍`oc
    cluster up`方法。以下的Vagrantfile可以用来部署我们的虚拟实验室：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The environment can be deployed by running a single command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 该环境可以通过运行单个命令来部署：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the virtual machine is deployed, you can connect to it as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦虚拟机部署完成，你可以按以下方式连接到它：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, log in as the `developer`, to be able to perform unprivileged operations:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，作为`developer`用户登录，以便能够执行没有特权的操作：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: PHP S2I
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP S2I
- en: 'OpenShift supports S2I builds for PHP, and also for many other runtimes. The
    S2I process produces a ready-to-run image by combining the source code of an application
    with a base builder image, which prepares the application. The builder is a special
    image that is able to handle application installation and configuration for a
    particular programming language/framework. For example, the PHP builder can only
    handle PHP source code, and it doesn''t support Java by default. Most of the frequently
    used programming languages, like Python, Ruby, Java, and Node.js, are already
    covered by OpenShift built-in builders. The S2I process involves the following
    steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift支持PHP的S2I构建，也支持许多其他运行时。S2I过程通过将应用程序的源代码与基础构建器镜像结合，生成一个可运行的镜像，该镜像准备好应用程序。构建器是一个特殊的镜像，能够处理特定编程语言/框架的应用程序安装和配置。例如，PHP构建器只能处理PHP源代码，并且默认不支持Java。大多数常用的编程语言，如Python、Ruby、Java和Node.js，已经由OpenShift内置的构建器覆盖。S2I过程包括以下步骤：
- en: Determining the correct base builder image. This process relies on complex heuristics
    and primarily involves looking for specific files and file extensions, like `Gemfile`
    for Ruby on Rails, or `requirements.txt` for Python. The runtime environment that
    the builder image is determined by can also be overriden by the user from CLI
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定正确的基础构建器镜像。此过程依赖于复杂的启发式算法，主要通过查找特定的文件和文件扩展名来实现，比如Ruby on Rails的`Gemfile`，或Python的`requirements.txt`。构建器镜像的运行时环境也可以通过CLI由用户覆盖
- en: Creating a `BuildConfig` pointing to the application source code's repository
    and to the ImageStream for the builder image
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个指向应用程序源代码仓库和构建器镜像的ImageStream的`BuildConfig`
- en: Starting a `build` pod from the builder image
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从构建器镜像启动`build` pod
- en: Downloading the application's source code
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载应用程序的源代码
- en: Streaming the scripts and the application's source code into the builder image
    container, using the `tar` utility for images that support it
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tar`工具将脚本和应用程序的源代码流式传输到构建器镜像容器中，适用于支持该工具的镜像
- en: Running the `assemble` script (the one provided by the builder image has the
    highest priority)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `assemble` 脚本（由构建器镜像提供的脚本优先级最高）
- en: Saving the final image to the internal registry
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最终的镜像保存到内部注册表
- en: Creating resources necessary to support the application. They include, but not
    limited to, `DeploymentConfig`, `Service`, and `Pod`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建支持应用程序所需的资源，包括但不限于 `DeploymentConfig`、`Service` 和 `Pod`。
- en: The PHP builder supports changing the default PHP configuration by using a number
    of environment variables. They are described on the web page for each particular
    builder.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 构建器支持通过使用多个环境变量来更改默认的 PHP 配置。每个特定构建器的网页上有详细描述。
- en: The build process can be initiated by running the `oc new-app`. This command
    takes the repository URL/local path as an argument, and creates all required OpenShift
    entities to support the S2I build and application deployment at the same time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程可以通过运行 `oc new-app` 命令来启动。此命令将仓库 URL 或本地路径作为参数，并同时创建所有必需的 OpenShift 实体来支持
    S2I 构建和应用程序部署。
- en: 'The following OpenShift entities are created by default:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，创建以下 OpenShift 实体：
- en: '| **Type** | **Name** | **Description** |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| **Type** | **Name** | **Description** |'
- en: '| Pod | `<application name>-<build sequential number>-build` | Builder pod
    that builds your application, producing the application image and possibly some
    artifacts to be used in future builds along the way |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| Pod | `<application name>-<build sequential number>-build` | 构建您的应用程序的构建器
    Pod，生成应用程序镜像并可能生成一些供未来构建使用的工件 |'
- en: '| Pod | `<name>-<build sequential number>-<id>` | Application pod produced
    by the build process |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Pod | `<name>-<build sequential number>-<id>` | 构建过程中生成的应用程序 Pod |'
- en: '| Service | `<name>` | Application service |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| Service | `<name>` | 应用程序服务 |'
- en: '| Replication controller | `<name>-<build sequential number>` | Application
    replication controller, maintaining only one replica by default |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Replication controller | `<name>-<build sequential number>` | 应用程序的复制控制器，默认情况下仅维持一个副本
    |'
- en: '| Deployment config | `<name>` | Deployment configuration containing all information
    on how to deploy the application |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| Deployment config | `<name>` | 包含有关如何部署应用程序的所有信息的部署配置 |'
- en: '| Image stream | `<name>` | Path to the image built |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Image stream | `<name>` | 构建的镜像路径 |'
- en: '| Build config | `<name>` | Build configuration containing all required information
    on how to build the application |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| Build config | `<name>` | 包含如何构建应用程序的所有必要信息的构建配置 |'
- en: '| Build | `<name>-<build sequential number>` | Particular build; can be run
    multiple times |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| Build | `<name>-<build sequential number>` | 特定构建；可以多次运行 |'
- en: OpenShift doesn't create a route automatically. If you need to expose your application,
    a route should be created by running `oc expose svc <name>`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 不会自动创建路由。如果需要暴露应用程序，应该通过运行 `oc expose svc <name>` 来创建路由。
- en: Building a simple PHP application
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个简单的 PHP 应用程序
- en: 'The first S2I lab will use a very simple PHP application that displays the
    PHP configuration using a standard PHP function—`phpinfo()`. It''s composed of
    a single `index.php` file, with the following content:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 S2I 实验将使用一个非常简单的 PHP 应用程序，使用标准的 PHP 函数 `phpinfo()` 显示 PHP 配置信息。它由一个 `index.php`
    文件组成，内容如下：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This application is enough to demonstrate a basic S2I build. We have already
    prepared a Git repository on GitHub, which contains the code of our application.
    The repository is located at [https://github.com/neoncyrex/phpinfo.git](https://github.com/neoncyrex/phpinfo.git),
    and is going to be used in this lab.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序足以展示基本的 S2I 构建。我们已经在 GitHub 上准备好了一个包含我们应用程序代码的 Git 仓库。该仓库位于 [https://github.com/neoncyrex/phpinfo.git](https://github.com/neoncyrex/phpinfo.git)，并将在本实验中使用。
- en: 'First, we need to create a separate project for our new lab, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们的新实验创建一个单独的项目，如下所示：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `oc new-app` command can build an application from its source code, using
    either a local or remote Git repository.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`oc new-app` 命令可以从源代码构建应用程序，使用本地或远程 Git 仓库。'
- en: 'Let''s clone the repository locally, to be able to make changes to it. This
    will create the `phpinfo` directory, with repository files:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将仓库克隆到本地，以便能够对其进行更改。这将创建 `phpinfo` 目录，其中包含仓库文件：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The build and application deployment processes can be initiated by running
    the `oc new-app` command. This basic S2I strategy can be triggered as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和应用程序部署过程可以通过运行 `oc new-app` 命令来启动。此基本 S2I 策略可以如下触发：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding command does the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令执行以下操作：
- en: Uses `phpinfo` as a path to the application's source code
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `phpinfo` 作为应用程序源代码的路径
- en: Automatically detects the programming language—PHP
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动检测编程语言——PHP
- en: Initiates the build process
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动构建过程
- en: Creates a number of OpenShift resources
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多个 OpenShift 资源
- en: 'The build process takes some time. During the first phase, you can see a container
    with `-build` in its name. This container is deployed from the PHP builder image
    and is responsible for build operations:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程需要一些时间。在第一阶段，你可以看到一个名称中带有 `-build` 的容器。这个容器是从 PHP 构建器镜像部署的，负责执行构建操作：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After some time, the application will be available. That means that the application''s
    pod should be in a `Running` state:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一段时间后，应用程序将可用。这意味着应用程序的 pod 应该处于 `Running` 状态：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'OpenShift built and deployed the `phpinfo` application, which is now available
    by using its service IP. Let''s try to access our application using the `curl`
    command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 已构建并部署了 `phpinfo` 应用程序，现在可以通过其服务 IP 进行访问。让我们尝试使用 `curl` 命令访问我们的应用程序：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `phpinfo()` function displays the PHP configuration as an HTML table.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`phpinfo()` 函数以 HTML 表格的形式显示 PHP 配置信息。'
- en: 'A summary of the build process can be displayed by running the `oc status`
    or `oc status -v` commands:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行 `oc status` 或 `oc status -v` 命令显示构建过程的摘要：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding command shows that deployment `#1` has been rolled out. It can
    also contain some useful information for troubleshooting the build, in case something
    goes wrong.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令显示了部署 `#1` 已经完成。它还可能包含一些有用的信息，用于在构建出现问题时进行故障排除。
- en: 'There is another way to display build logs with low-level details—using the `oc
    logs` command. We need to show the log for the `buildconfig` (or just `bc`) entity,
    which can be displayed, as follows, by using the `oc logs bc/phpinfo` command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种显示详细构建日志的方法——使用 `oc logs` 命令。我们需要显示 `buildconfig`（或简称 `bc`）实体的日志，可以通过如下命令显示：`oc
    logs bc/phpinfo`：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding output gives us some insight into how builds work.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出给了我们一些关于构建如何工作的线索。
- en: Understanding the PHP build process
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 PHP 构建过程
- en: 'Now that we know that the `phpinfo` application works as expected, let''s focus
    on the low-level details that are required to understand the build process. OpenShift
    created a number of API resources to make the build possible. Some of them are
    related to the deployment process, which we learned about in previous chapters.
    We can display all entities as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道 `phpinfo` 应用程序按预期工作，让我们专注于理解构建过程所需的低级细节。OpenShift 创建了多个 API 资源来使构建成为可能。其中一些与部署过程相关，这部分内容我们在前面的章节已经学习过了。我们可以通过如下命令显示所有实体：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Most of the entities (the pod, service, replication controller, and deployment
    configuration) in the preceding output are already familiar to you, from previous
    chapters.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出中的大多数实体（如 pod、服务、复制控制器和部署配置）在前面的章节中你应该已经熟悉了。
- en: 'The S2I build strategy uses the following additional entities—**build configuration,
    build,** and **image stream**. The build config has all of the information necessary
    to build the application. As with the rest of the OpenShift API resources, its
    configuration can be gathered using the `oc get` command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: S2I 构建策略使用以下附加实体——**构建配置、构建** 和 **镜像流**。构建配置包含构建应用程序所需的所有信息。与 OpenShift 其他 API
    资源一样，其配置可以通过 `oc get` 命令获取：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following fields are especially important:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下字段尤为重要：
- en: '`spec.source.git`: Repository URL for the application source code'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec.source.git`: 应用程序源代码的仓库 URL'
- en: '`spec.strategy.sourceStrategy`: Contains information on which builder will
    be used.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec.strategy.sourceStrategy`: 包含将使用哪个构建器的信息。'
- en: 'In our case, OpenShift uses a built-in builder from image stream `php:7.0`,
    in the `openshift` namespace. Let''s look at its configuration:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，OpenShift 使用来自 `openshift` 命名空间中的内建构建器，基于镜像流 `php:7.0`。让我们看看它的配置：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The PHP builder image used to build our application is `centos/php-70-centos7:latest`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 用于构建我们应用程序的 PHP 构建器镜像是 `centos/php-70-centos7:latest`。
- en: 'We now have all the information on how to build an application from source
    code. OpenShift puts together all the information (provided by you and inferred
    from the source code) and starts a new build. Each build has a sequential number,
    starting from `1`. You can display all builds by running the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经掌握了从源代码构建应用程序的所有信息。OpenShift 将所有信息（包括你提供的和从源代码推断出的信息）组合起来，并启动新的构建。每个构建都有一个顺序编号，从
    `1` 开始。你可以通过运行以下命令显示所有构建：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This build is reported as `Complete`, as our application is already up and running.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 该构建报告为 `Complete`，因为我们的应用程序已经启动并运行。
- en: Starting a new build
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动新构建
- en: If an application's source code was updated, you can trigger the rebuild process
    by running the `oc start-build` command. The build itself is managed by the build
    configuration.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序的源代码已更新，您可以通过运行`oc start-build`命令来触发重新构建过程。构建本身由构建配置管理。
- en: 'First, we need to gather information on all available build configurations:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要收集所有可用的构建配置的信息：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, we only have one build, `phpinfo`, and it was deployed only
    once; hence, the number `1`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们只有一个构建，`phpinfo`，并且它只部署了一次；因此，版本号是`1`。
- en: 'Let''s start a new build, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始一个新构建，如下所示：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'OpenShift started a new build, versioned as `2`, which is present in the names
    of the pods spawned by the new build. Once everything is complete, your application
    will be redeployed:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift启动了一个新构建，版本号为`2`，该版本在新构建生成的Pod名称中出现。完成后，您的应用程序将重新部署：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The latest version of the build is now `2`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的构建现在是`2`：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A list of all builds is kept by OpenShift for future inspection:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift会保存所有构建的列表，以便将来检查：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This example is not close to production, as the build was triggered manually,
    not by changes to the source code. However, it gives you a general idea of how
    to use builds.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例并不接近生产环境，因为构建是手动触发的，而不是由源代码的更改触发的。然而，它可以让您大致了解如何使用构建。
- en: 'Use the following code to clean everything up for the next lab:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码清理所有内容，为下一个实验做准备：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, you learned about the build entities created by OpenShift,
    and how to deploy a simple PHP application from source code. We showed you how
    to start a new build and how to customize a build process.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了OpenShift创建的构建实体，以及如何从源代码部署一个简单的PHP应用程序。我们向您展示了如何启动新构建以及如何自定义构建过程。
- en: In the following chapter, you will build and deploy a WordPress application
    from a custom template. You will also learn how to create and deploy OpenShift
    templates, and how to deploy applications from OpenShift templates.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将从自定义模板构建并部署一个WordPress应用程序。您还将学习如何创建和部署OpenShift模板，以及如何从OpenShift模板部署应用程序。
- en: Questions
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Which of the following OpenShift entities controls how to build a particular
    application from source code? choose two:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个OpenShift实体控制如何从源代码构建特定应用程序？选择两个：
- en: Pod
  id: totrans-104
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pod
- en: Route
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由
- en: Replication controller
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制控制器
- en: Build config
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建配置
- en: Build
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建
- en: Deployment config
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署配置
- en: 'Which of the following commands starts a new build? choose one:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令启动一个新构建？选择一个：
- en: '`oc new-app`'
  id: totrans-111
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc new-app`'
- en: '`oc new build`'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc new build`'
- en: '`oc start-build`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc start-build`'
- en: '`oc get build`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc get build`'
- en: 'Which of the following commands display information on a build? choose three:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个命令显示构建的信息？选择三个：
- en: '`oc status -v`'
  id: totrans-116
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc status -v`'
- en: '`oc status`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc status`'
- en: '`oc logs build/phpdemo-2`'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc logs build/phpdemo-2`'
- en: '`oc show logs`'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`oc show logs`'
- en: Further reading
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'S2I is one of the most important features of OpenShift. You may want to have
    more deep knowledge of this process. The following links provide additional information:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: S2I是OpenShift最重要的功能之一。您可能希望深入了解这一过程。以下链接提供了更多信息：
- en: Builds and Image Streams at [https://docs.openshift.org/latest/architecture/core_concepts/builds_and_image_streams.html#builds](https://docs.openshift.org/latest/architecture/core_concepts/builds_and_image_streams.html#builds).
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建与镜像流：[https://docs.openshift.org/latest/architecture/core_concepts/builds_and_image_streams.html#builds](https://docs.openshift.org/latest/architecture/core_concepts/builds_and_image_streams.html#builds)。
- en: PHP at [https://docs.openshift.com/online/using_images/s2i_images/php.html/](https://docs.openshift.com/online/using_images/s2i_images/php.html).
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP：[https://docs.openshift.com/online/using_images/s2i_images/php.html/](https://docs.openshift.com/online/using_images/s2i_images/php.html)。
