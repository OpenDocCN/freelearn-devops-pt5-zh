- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Important Git Commands and Metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are hundreds of Git commands and flags. In this chapter, we''ll endeavor
    to review a few of the most important that we have not looked at so far. These
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the stash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing what's in the stash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving from the stash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The clean command for getting rid of unwanted untracked files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to see metadata and choose which data you want to see
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start by digging into the stash.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete list at [http://git-scm.com/docs](http://git-scm.com/docs).
  prefs: []
  type: TYPE_NORMAL
- en: Stash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we reviewed the five areas of Git, we included an area called the stash,
    but we did not delve into what the stash is. In short, the stash is a place where
    you can hold (stash) files you''ve modified but not yet committed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.1: The five areas of Git'
  prefs: []
  type: TYPE_NORMAL
- en: The stash can be pretty important. Let's say you are working on a feature and
    suddenly you are asked to work on a very important bug. You are not ready to commit
    the code you have, but you can't switch branches with uncommitted files in the
    work area.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this, you *could* just make a backup of your directory, and then delete
    the uncommitted files, but that is very slow and error-prone. Instead, you want
    to stash them away somewhere that you can get them back when you are ready, which
    of course is the purpose of the stash.
  prefs: []
  type: TYPE_NORMAL
- en: To see this at work, we need a repository with some commits. Let's quickly make
    a mirror of the `RockyHorror2` repo. To do so, we'll start by making sure we have
    the `RockyHorror2` repository on disk, or else we'll pull it from the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to GitHub and create a repo called `RockyHorrorStash`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.2: Creating the repository'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that I did not bother creating a readme, .gitignore, nor a license since
    these will all be overwritten when I do the mirror.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create Repository** and once created, grab its address.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to mirror `RockyHorror2` over `RockyHorrorStash`. Be sure
    to change directory to `RockyHorror2` and enter this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.3: Push the mirrored repo to the remote'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have the mirrored repo on the server but not locally, so let''s clone
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.4: Pull the mirrored repo back to the local repo'
  prefs: []
  type: TYPE_NORMAL
- en: 'Great, we have a repo we can work with. Let''s see what''s in it with a quick
    call to log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5: Examining the local repo with log'
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we are working on this project and we modify two files. First, we modify
    the `Showing` class to keep count of how many boxes of popcorn are sold:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.6: Adding the Showing class'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we modify `Program.cs` to say that the Brattle theater has 500 seats.
    If we take a status, we see the two modified files in the work area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.7: git status shows two modified files'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have two uncommitted modified files. We have more work to do but our boss
    calls and she tells us that there is an urgent bug in another project. This is
    where stash comes in. We *could* commit what we have, but we''re not ready to,
    so let''s put it in the stash:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.8: Adding to the stash'
  prefs: []
  type: TYPE_NORMAL
- en: You tell it `git stash`, and it takes everything in the work area and in the
    index and puts it in the stash without committing it. At that point, the work
    area is reset to the state it was in before you started modifying files—that is
    the previous position of `HEAD`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see what is in your stash with the `stash list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.9: Listing what is in the stash'
  prefs: []
  type: TYPE_NORMAL
- en: The stash has added the designation `WIP on main`. WIP means Work In Progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, you only have one thing in the stash. You might find, however,
    that while fixing that "very important bug," your boss calls back and says to
    stop work on that and fix a fatal bug. Once again, you may need to stash your
    work. Rather than setting all that up, we''ll make a small change in the main
    program and then stash it. Let''s change the name of the theater:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.10: Stashing more work'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hey! What happened to the number of seats being increased to 500? Remember,
    we never committed that, we stashed it away and the working area was reset. Let''s
    take a look at the status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.11: Examining the status'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we expect, we see the one modification we''ve made. Let''s stash that away
    using `git stash`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.12: Stashing the modification'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have two items in the stash. If we ask for a list, we should see both:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.13: Listing the items in the stash'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure enough, both stashed items are there. Normally they would have different
    ID and messages, but since we stashed from the same place, we ended up with this
    anomalous situation. You can see what is in the stash by using `stash show`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.14: Showing the contents of the stash'
  prefs: []
  type: TYPE_NORMAL
- en: You can drop items from the stash and you can clear the entire stash with `stash
    clear`.
  prefs: []
  type: TYPE_NORMAL
- en: Clean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From time to time, you''ll find that there are untracked files listed in your
    status. 99% of the time these will be files you created and you''ll want them
    to be tracked, which you do by adding them to the index (as shown previously).
    There are times, however, when you may find untracked files that you don''t want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.15: Untracked files'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we have a couple choices. We can add `Untracked.cs` to the index
    or we can get rid of it. To do so, we try `git clean`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.16: Using clean to remove untracked files (fails)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because `git clean` is one of the few truly destructive commands—once called,
    the untracked files are gone, never to be seen again—Git comes back with the snarky
    reply that it is "refusing to clean." To actually clean, Git requires that you
    tell it you really mean it by using the `-f` (force) flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.17: Using clean as above, but with the force flag (succeeds)'
  prefs: []
  type: TYPE_NORMAL
- en: The `-f` flag essentially says "I know what I'm doing"—so make sure you do.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every commit, merge, and so on, is accompanied by metadata. You can get at
    a lot of the metadata by using the log, but sometimes you just want to extract
    a few pieces of important metadata. For that you can use the `show` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.18: Using show to see metadata'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we use `show` to find the name and email of the author, along
    with the ID and the metadata telling us where the tip of main is. Let''s break
    it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`git` `show`—the `show` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`—silent (or quiet), which suppresses the difference output (try the command
    without it to see).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HEAD` tells show which commit you are interested in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%an` is the author''s name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%ae` is the author''s email address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We put this code into a string and assign it to the format flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the log and see what else we can do with showing metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.19: Looking at the log'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s zero in on the metadata associated with one of these entries. To do
    so, we use the ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.20: Using show -s to see metadata'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also specify a range of entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.21: Specifying a range of entries'
  prefs: []
  type: TYPE_NORMAL
- en: We are able to zero in on what we want in the stash. To retrieve the stashed
    files, use `git stash apply`. This will apply everything in the stash to the current
    working directory. Once you are sure you have what you need, you can then call
    `git stash pop`, which will apply the changes again and remove them from the stash.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we reviewed some of the most important commands that we had
    not yet looked at. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the stash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing what's in the stash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving from the stash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `clean` command for getting rid of unwanted untracked files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to see metadata and choose which data you want to see
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mirror a repo, or use one you already have if you don't mind changing it. Examine
    the list of commits. Start work on some changes but don't commit your changes.
    Switch to working on a different repo. Create or modify some files in the second
    repo but don't commit them. Start work on a third repo. Abandon that work and
    go back to the first repository. Examine the stash and retrieve the stash you
    need to keep working.
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once again, there are many ways to answer this. I'll start by mirroring the
    `RockyHorrorStash` repo to `RockyHorrorStash2`, and then I will immediately clone
    it to my local repo.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ll do the same thing with `Panofy` (to `PanofyStash`) and `musicHandler2`
    (creating `musicHandler2Stash`). Now we have three repos we can work on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`musicHandler2Stash`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PanofyStash`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RockyHorrorStash`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s begin with `musicHandler2Stash` by changing directory and getting a
    log of what is already there. Then let''s open it in Visual Studio and do some
    work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.22: Log of MusicHandler2Stash'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make two changes by opening Visual Studio in that directory. We need
    changes in a couple of files, so let''s just add comments. When we take a status,
    we see that there are two modified files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.23: Status of MusicHandler files after changes and before commit'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right in the middle of our work, we''re asked to work on a bug. We''re not
    ready to check in these files so we add them to the stash:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.24: Call stash, which puts the modified files into the stash, then
    call status to see the working directory is empty'
  prefs: []
  type: TYPE_NORMAL
- en: We are now free to change to the `RockyHorrorStash` directory. Here we will
    start fixing the bug (which we will do by adding comments to represent the real
    work). Uh oh, we have to work on a bigger bug. Let's stash the work we did in
    `RockyHorrorStash`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll switch to `PanofyStash` and make some changes and commit them. We are
    now ready to return to the bug we were working on in `musicHandler2stash` as that
    has now become the priority. The first thing to do is to list what we have in
    the stash for this repository (remember, stashes are per repository):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.25: stash list in musicHandler2stash'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s restore that. There are two ways to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '`apply` applies the stashed files but leaves them in the stash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pop` applies the stashed files but removes them from the stash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I recommend using `apply` because it leaves a copy of the stashed items in
    the:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.26: stash apply'
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 10.26* we first call `git stash apply`. Be very careful with this—there
    is a different command, `git apply`, which is not what you want here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once applied you can see that the two files that were modified are back. We
    take a status to make sure everything is as we expect. Now that we know it is
    safe, we can clean out the stash:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_10_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.27: Dropping the cache'
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 10.27* we list what's in the stash, then we drop the stash, and then
    list again to make sure it is gone.
  prefs: []
  type: TYPE_NORMAL
- en: In this challenge, we mirrored three repos so that we could work on them without
    changing their original state. We then looked at what commits were there and added
    new files without committing them. In order to be able to switch repositories,
    we stashed the uncommitted files. When we returned to the original project, we
    were able to retrieve the stashed items.
  prefs: []
  type: TYPE_NORMAL
