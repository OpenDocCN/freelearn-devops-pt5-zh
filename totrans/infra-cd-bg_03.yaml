- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Planning the Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will dive into the important stage of planning the deployment
    of our **Infrastructure as Code** workload. Before we can deploy our infrastructure,
    it is crucial to have an understanding of what we are deploying and how we want
    to approach the deployment process. This will ensure that our deployment is efficient,
    streamlined, and free of errors.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by introducing the workload that we will be deploying in the following
    two chapters. This will give us a clear understanding of what we are trying to
    achieve and what resources we need to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss how to approach the deployment of our infrastructure.
    This will include a step-by-step guide on how to plan and execute the deployment
    process in a smooth and effective manner. We will also discuss best practices
    and tips for ensuring a successful deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will examine the high-level architecture of our infrastructure.
    This will give us an overview of how the various components of our infrastructure
    will fit together and interact with each other.
  prefs: []
  type: TYPE_NORMAL
- en: With this understanding of our workload and deployment approach, we can move
    forward confidently to [*Chapter 4*](B19537_04.xhtml#_idTextAnchor151)*, Deploying
    to Microsoft Azure*, and [*Chapter 5*](B19537_05.xhtml#_idTextAnchor268)*, Deploying
    to Amazon Web Services*, where we go into the low-level design and deployment
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Planning the deployment of our workload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When coming up with sample workloads for projects, it is sometimes difficult
    to find something that isn’t too complex, but also not so simple that the example
    is simply a case of following steps 1 through 10 and you are done. To ensure that
    the project we are going to be covering is both exciting and has the sort of considerations
    you will need to make in your projects, but also is something that most of you
    will have had some experience with at one point or another, I have chosen to use
    **WordPress**.
  prefs: []
  type: TYPE_NORMAL
- en: 'WordPress is an open source **content management system** (**CMS**), hosted
    using PHP and MySQL, that enables you to build websites and blogs. It was developed
    in 2003 and has grown to be one of the most popular CMS platforms in the world,
    running millions of websites. WordPress is renowned for its simplicity and flexibility,
    which makes it a great choice for users of all skill levels. I can hear what you
    are thinking: *But WordPress has its famous five-minute installation, which is
    just a case of following a few simple steps!* However, in our case, we are going
    to look at deploying WordPress across multiple hosts as well as using services
    native to each of the public clouds we are going to be targeting for the database,
    storage, and networking layers.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the key features of WordPress is its use of themes, which allow users
    to easily change the look and feel of their website without having to modify the
    underlying code. This makes it simple for users to produce professional-looking
    websites without having any knowledge of web design or programming. In addition
    to WordPress having a large and active community of users and developers, there
    are always new features and updates being released. This, in combination with
    its open source nature, makes it an excellent choice for anybody looking to develop
    a website or blog.
  prefs: []
  type: TYPE_NORMAL
- en: Before we progress any further, a word of warning.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: While we will be deploying WordPress across multiple instances, this approach
    is being taken to give an example of the considerations you need to make tackling
    your own Infrastructure as Code projects; please do not use it as a guide for
    deploying and managing your own highly available WordPress installations.
  prefs: []
  type: TYPE_NORMAL
- en: So, now that we have an idea of what we are going to be deploying, let us look
    at answering some of the questions that you may have to give an idea of how we
    are going to be approaching the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: How to approach the deployment of our infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, as we have already mentioned, WordPress runs on top of PHP and MySQL;
    to be more explicit, it has the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: A piece of web server software such as Apache or NGINX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP version 7.4 or greater
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL version 5.7 or greater, or MariaDB version 10.3 or greater
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: Please note that, at the time of writing, PHP 8 only has beta support in WordPress
    version 6.1; because of this, we will be installing PHP 7 in our example deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, we know from our requirements that we are going to need a web server and
    PHP installed on something, while all the cloud services we are going to be looking
    at in the next two chapters offer some sort of application hosting as a service.
    For our project, we are going to use **virtual machine instances** running Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than launching a single host, which would be a single point of failure,
    let’s look at launching a minimum of two virtual machine instances to run WordPress
    on. This approach introduces some complexity as WordPress really likes to run
    as a fixed point, so what considerations do we need to make when running WordPress
    across more than a single virtual machine instance?
  prefs: []
  type: TYPE_NORMAL
- en: Shared storage across our hosts – all the WordPress code and files should be
    stored on a filesystem that is available across all the virtual machine instances
    we are running. As we are running Ubuntu Linux, this should be NFS rather than
    Samba or a Windows File share – this should be a **Platform-as-a-Service** offering
    from the cloud provider.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When installing WordPress using our Infrastructure as Code scripts, we should
    look at only doing this from a single virtual machine instance and only once –
    let’s refer to this as our **admin host**. All other hosts, or web hosts, should
    have all the packages needed to run WordPress installed and configured, and then
    mount the NFS share once WordPress has been successfully bootstrapped.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As well as needing a way of distributing traffic across our multiple virtual
    machine instances, we are also going to have to think about how we will be serving
    traffic for the WordPress administration section of our website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What about the **database**? As both the cloud services we are going to be
    targeting offer MySQL as a service, we will be utilizing these with our deployments.
    *Great*, you may be thinking to yourself – yes, it is one less resource we need
    to manage on our virtual machine instances – but there are also some considerations
    we need to make here as well, quite big ones:'
  prefs: []
  type: TYPE_NORMAL
- en: We will need to know the endpoint of the database host and the credentials we
    need to access it before we do the initial bootstrap of WordPress.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We would want to lock down our database endpoint to only our virtual machine
    instances, as these will be the only things that will need access to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should also set up database backups!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Like the database-as-a-service and as already mentioned, we should be using
    an as-a-service for our **shared storage** running NFS; there are some considerations
    to make there too:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to know the NFS endpoints so they can be mounted before we bootstrap
    WordPress, as we are going to need WordPress to be correctly installed before
    we launch the additional virtual machine instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again, like the database, the NFS service needs to be locked down to only allow
    trusted virtual machine instances to be able to connect to it – we don’t want
    just anyone to be able to connect randomly and be able to browse/download the
    contents of our filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are other aspects we also need to think about in our deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Private networking**: As we want to lock things down, we will need some sort
    of internal network to launch our resources into'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load balancing**: We need a Layer 7 load-balancing service to distribute
    traffic across our backend services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bootstrapping**: We will need to bootstrap both the software stack and WordPress
    itself on the virtual machine instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we are aware of the key considerations, let’s look at the specific
    tasks that we will need to perform for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Performing deployment tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Based on the information in the previous section, we have a rough idea of what
    needs to happen and in which order. This all starts with launching the resources
    in our preferred cloud provider. To deploy our workload using Infrastructure as
    Code, we will need to perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch and configure resources required for our private network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch and configure the database as a service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch and configure the NFS filesystem as a service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch and configure the load balancer service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have the core resources in our cloud provider, we can perform the
    following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Gather information on the services and resources we have launched so far in
    our cloud provider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamically generate the script needed to bootstrap the admin virtual machine
    instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamically generate the script needed to bootstrap the web virtual machine
    instance(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we have the scripts, we can continue to launch our workload.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the admin virtual machine instance, attaching the script we generated;
    this should then do the following, once it is executed when the instance first
    boots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run an operating system update
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Download, install, and configure Apache, PHP, and the MySQL clients and NFS
    clients
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the remote NFS share by creating the mount points, setting it to mount
    on boot, and also ensuring that the NFS share is mounted before progressing any
    further
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Download WordPress, bootstrap the database, and configure the site
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the webserver and make sure that all the services we have installed and
    configured are configured to start after a reboot
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that the admin virtual machine instance has been launched, we hopefully
    have a working copy of WordPress stored on our NFS share, meaning we can progress
    with the remaining web virtual machine instances:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the web virtual machine instances, attaching the script we generated;
    this should then do the following, once it is executed when the instance boots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run an operating system update
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Download, install, and configure Apache, PHP, and the MySQL clients and NFS
    clients
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the remote NFS share by creating the mount points, setting it to mount
    on boot, and ensuring that the NFS share is mounted before progressing any further
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the webserver and ensure all the services we have installed and configured
    will start after a reboot
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now have – if everything has gone as planned – a working WordPress
    installation across a small number of virtual machine instances, which leaves
    us with one last task.
  prefs: []
  type: TYPE_NORMAL
- en: Register all the virtual machine instances with the load balancer so they can
    start receiving traffic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are a few other cloud provider-specific tasks, which we will get into
    in the next few chapters as we get lower into the design and start to write our
    Infrastructure as Code; that sums up the tasks we will need to complete in the
    rough order they need to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Back in [*Chapter 2*](B19537_02.xhtml#_idTextAnchor085)*, Ansible and Terraform
    beyond the Documentation*, one of the points we mentioned was that Terraform isn’t
    really designed to be used to deploy and configure the software – it’s not that
    straightforward for it to SSH into a virtual machine host to install and configure
    the software stack, so how are we going to do that?
  prefs: []
  type: TYPE_NORMAL
- en: Let’s answer that now, by using a tool called **cloud-init**.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing cloud-init
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *steps 6* and *7* of the tasks we listed in the previous section, we talk
    about generating a script – this will be a `cloud-init` script. This is a cloud
    and Linux operating system-agnostic tool used for bootstrapping instances as they
    boot.
  prefs: []
  type: TYPE_NORMAL
- en: It is supported on both Microsoft Azure and Amazon Web Services, and we will
    be using our Infrastructure as Code tools to populate a base template with the
    information gathered on the resources that have been launched, such as SQL and
    NFS endpoints, and then attach the output to the virtual machine instances when
    they are launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'What follows is an example `cloud-init` script, which, when deployed with a
    virtual machine instance, will do the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Update all of the packages which are already installed on the virtual machine
    to ensure we are fully patched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install NGINX.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a default NGINX site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an example `index.html` file and place it in the root of the default
    NGINX site we configured in *step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the NGINX service to pick up the new configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To action these steps, the script looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it is relatively straightforward to read and follow along with
    what is happening; the one we will be using to deploy WordPress is a little more
    complicated as it is going to do a lot more than the example we have just given
    – but more on that in [*Chapter 4*](B19537_04.xhtml#_idTextAnchor151), *Deploying
    to Microsoft Azure*, and [*Chapter 5*](B19537_05.xhtml#_idTextAnchor268), *Deploying
    to Amazon* *Web Services*.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: Please note that while the example above used NGINX as the webserver, we will
    use Apache for the web server in our Wordpress deployment.
  prefs: []
  type: TYPE_NORMAL
- en: This means that we will still be able to use the programmatic parts of Terraform
    to configure our virtual machine instances without having to SSH into them. For
    Ansible, in [*Chapter 6*](B19537_06.xhtml#_idTextAnchor350), *Building upon the
    Foundations*, we will be taking a slightly different approach where we will use
    SSH to log in to our virtual machine to be able to make changes to the software
    stack and its configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the steps we are going to be taking to deploy our workload,
    let’s visualize what it is going to look like.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the high-level architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know what we are going to be deploying, we should have a good idea
    of what the high-level architecture is going to look like. The following diagram
    shows a cloud-agnostic overview of how the resources we are going to be deploying
    across the next two chapters are going to hang together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – An overview of our high-level cloud architecture](img/Figure_3.01_B19537.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – An overview of our high-level cloud architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'From a software stack perspective, each of the virtual machine instances will
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – An overview of our high-level software architecture](img/Figure_3.02_B19537.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – An overview of our high-level software architecture
  prefs: []
  type: TYPE_NORMAL
- en: While this is not the most verbose high-level design, we now have a good idea
    of what it is we need to code to deploy our WordPress-based workload.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have spoken about the example project we are going to look
    at deploying into Microsoft Azure and Amazon Web Services in the next two chapters
    using both Terraform and Ansible. While we have kept the discussion at a high
    level and aimed to be as cloud-agnostic as possible, we know the tasks we need
    to follow and roughly how we will get around the limitation of Terraform not really
    being a tool you can use to manage your application deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know what our cloud and software architecture is going to look like,
    as well as having an idea of the order in which we need to deploy the resources,
    we can make a start on getting into the low-level design and the actual deployments.
    In our next chapter, we will look at deploying the workload discussed to Microsoft
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find more details on the software we have mentioned in this chapter
    at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'WordPress: [https://wordpress.org/](https://wordpress.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PHP: [https://www.php.net/](https://www.php.net/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL: [https://www.mysql.com/](https://www.mysql.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NGINX: [https://nginx.org/](https://nginx.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cloud-init`: [https://cloud-init.io/](https://cloud-init.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 2: Getting Hands-On with the Deployment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have an understanding of the tools we are going to be using and
    also have an idea of the tasks we need to execute to deploy our example workload,
    it is time to roll up our sleeves and make a start on the code and deploy it.
  prefs: []
  type: TYPE_NORMAL
- en: In this part, we will be deploying the workload using Terraform and Ansible
    in Microsoft Azure and Amazon Web Services and discussing how we could build upon
    the scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19537_04.xhtml#_idTextAnchor151)*, Deploying to Microsoft Azure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19537_05.xhtml#_idTextAnchor268)*, Deploying to Amazon Web Services*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19537_06.xhtml#_idTextAnchor350)*, Building upon the Foundations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
