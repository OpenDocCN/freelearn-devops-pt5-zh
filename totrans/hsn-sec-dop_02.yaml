- en: Security Goals and Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed the challenges and the business drivers
    for DevSecOps. In this chapter, we will discuss security goals and metrics. The
    adoption of DevSecOps is a continuous learning journey and takes lots of stakeholder
    involvement, process optimization, business priority conflict, customization of
    security tools, and security knowledge learning. This chapter will give you some
    hands-on tips, challenges, and common practices based on a functional role perspective,
    and will also look at GDPR as an example to explain how to do a privacy impact
    assessment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Organization goal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development goal/metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QA goals/metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operation goal/metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organization goal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The end goal of security for any organization is to secure customer digital
    assets. The goal we are going to discuss here is how to define organization-level
    phased goals for security assurance programs and DevSecOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Open Web Application Security Project** (**OWASP**) and **Software Assurance
    Maturity Model** (**SAMM**) governance define three key areas when considering
    an organization security goal:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strategy and metrics**: Establishes the framework for a software security
    assurance program'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Policy and compliance**: Focused on ensuring external legal or regulatory
    compliance (such as GDPR or ISO 27001) is met'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Education and guidance**: This is for security awareness training and role-specific
    security capabilities in order to perform DevOps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some typical DevSecOps security practices to be aligned with the business
    objective. The goal of DevSecOps may be subject to the needs of not only the business
    objective but also the maturity of the security environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Security compliance with European Union GDPR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP SAMM self-assessment security maturity to reach level 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security requirement guidelines and baselines ready for each project to follow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adoption of secure coding automation tools for a development team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Threat intelligence security monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure design knowledge-base ready for all developers as a reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security testing tools or platforms ready for QA uses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to OWASP SAMM, NIST 800-160 *Systems Security Engineering* is also
    a good reference for security engineering methods and practices throughout the
    life cycle of the software engineering process.
  prefs: []
  type: TYPE_NORMAL
- en: Take the **General Data Protection Regulation** (**GDPR**) security compliance
    requirements as an example to review how to implement data privacy during the
    software engineering life cycle. Whenever a business decides to sell services
    in European Union markets, the organization will have to comply with GDPR. From
    an organization-level security management points of view, it's suggested to plan
    the GDPR compliance in terms of strategy and metrics, security policies, and the
    security awareness training.
  prefs: []
  type: TYPE_NORMAL
- en: Strategy and metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To identify current organization business risk profiles, specific to GDPR compliance,
    it's suggested you define **Privacy Impact Assessment** (**PIA**) templates and
    process to review current data handing risks. The PIA is a tool to identify the
    privacy risks through the development and operations cycle by the following assessment.
  prefs: []
  type: TYPE_NORMAL
- en: Whether the information should be collected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of collected information, and related to PII (Personal Identifiable
    Information)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protection and process of handling the information to mitigate any privacy risks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options and explicit consents of the user to collect, handle, edit or remove
    the information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the [https://www.bitkom.org/noindex/Publikationen/2017/Leitfaden/170919-LF-Risk-Assessment-ENG-online-final.pdf ](https://www.bitkom.org/noindex/Publikationen/2017/Leitfaden/170919-LF-Risk-Assessment-ENG-online-final.pdf)
    for the PIA resources and templates.
  prefs: []
  type: TYPE_NORMAL
- en: Policy and compliance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Defines general GDPR security requirements and release gates for all projects
    to follow. In addition, an organization may define security policies as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum security requirements for the release date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IAM, privacy, key management, cryptography, and session management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security design best practices and templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may be a good practice to provide common security requirements as templates
    or policies for projects teams to follow. Furthermore, it will be more effective
    to provide or to suggest related implementation frameworks to build into products,
    which we will discuss in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Education and guidance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Education and security awareness training may be subject to the business''s
    needs, culture, roles, and contents. If GDPR compliance is one of the business
    goals, education should also support the goal. Examples are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Privacy and data handling security awareness training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deliver role-specific privacy information training to developers, QA, DevOps,
    or the IT team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish a knowledge-base for a case study, a FAQ, and data-handling templates
    for employees.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development goal/metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The security goal of a development team is to deliver secure design and implementation.
    Based on OWASP SAMM practices, there are three key aspects to consider during
    the construction phase:'
  prefs: []
  type: TYPE_NORMAL
- en: Threat assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although design and implementation review is normally also part of the development
    team's activities, we will take these into consideration in further discussions.
  prefs: []
  type: TYPE_NORMAL
- en: Threat assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To have an effective threat assessment, the following guideline or templates
    are suggested for the project team:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Threat Modeling tools/templates** | **Rationale and purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| Knowledge-base of threats and mitigation | Threat and mitigation knowledge
    can help the team to decide what''s most relevant to the project from the knowledge
    list instead of starting from zero. For example, CAPEC or ATT&CCK are also good
    references. |'
  prefs: []
  type: TYPE_TB
- en: '| Tools or threat modeling templates | A template or tool can enable the team
    to deliver consistent quality for threat modeling reports. |'
  prefs: []
  type: TYPE_TB
- en: In addition, threat modeling analysis won't limit itself to the role of the
    development team. It also involves the whole team including RD, QA, and DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: If the team is looking for templates or tools, to begin with the followings
    resources are suggested. We will cover the threat modeling analysis in more detail
    in [Chapter 7](part0134.html#3VPBC0-993778ed0b7e4894800dd46a3f389a65), *Threat
    Modeling Practices and Secure Design*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Attack Pattern Enumeration and Classification (CAPEC)**: [http://capec.mitre.org/data/definitions/1000.html](http://capec.mitre.org/data/definitions/1000.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adversarial Tactics, Techniques, and Common Knowledge (ATT&CK)**: [https://attack.mitre.org/wiki/Main_Page](https://attack.mitre.org/wiki/Main_Page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft SDL threat modeling tool**: [https://www.microsoft.com/en-us/sdl/adopt/threatmodeling.aspx](https://www.microsoft.com/en-us/sdl/adopt/threatmodeling.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP threat modeling cheat sheet**: [https://www.owasp.org/index.php/Threat_Modeling_Cheat_Sheet](https://www.owasp.org/index.php/Threat_Modeling_Cheat_Sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elevation of Privilege (EoP) card game**: [https://www.microsoft.com/en-us/sdl/adopt/eop.aspx](https://www.microsoft.com/en-us/sdl/adopt/eop.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Cornucopia**: [https://www.owasp.org/index.php/OWASP_Cornucopia](https://www.owasp.org/index.php/OWASP_Cornucopia)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are looking for a threat and mitigation knowledge-base, both CAPEC and
    ATT&CK provide a very good reference. If you need to draw diagrams to do threat
    analysis, Microsoft's SDL threat modeling tool may help. If you would like to
    give the team a quick introduction to threat modeling, refer to the OWASP threat
    modeling cheatsheet. Finally, both the EoP and OWASP Cornucopia provide a card
    game that makes the threat modeling process more interactive and creates involvement
    among team members.
  prefs: []
  type: TYPE_NORMAL
- en: Threat assessment for GDPR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typical threat assessment involves **Spoofing, Tampering, Repudiation, Information
    Disclosure, Destruction, Escalation** (**STRIDE**). When it comes to GDPR compliance
    assessment, the **Privacy Impact Assessment** (**PIA**) will focus on how each
    module collects, handles, and remove Personal Identifiable Information and privacy
    data. In addition to STRIDE, the PIA focuses on the principles of personal data
    protection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following diagram of PIA to explore the data flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Deliverables and development team self-assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The deliverables for a development include threat modeling, design, and coding.
    The following table summarizes examples of self-assessment metrics for a development
    team:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Deliverables** | **Self-assessment checklist** |'
  prefs: []
  type: TYPE_TB
- en: '| Threat modeling analysis report | Does the threat modeling analysis cover
    STRIDE six-threat analysis?Does the diagram include all components, data flows,
    and trust boundaries?Are all the threat mitigations effective and incorporated
    into the release plan?Does the threat modeling analysis cover all the new features
    and the previously released risks?Sharing effective threat mitigation as a case
    study. |'
  prefs: []
  type: TYPE_TB
- en: '| Secure coding analysis report | Do any static secure code scanning tools
    apply to the whole project including legacy parts?Were all the scanning results
    and false positive warnings reviewed and checked?Secure compiling options have
    been properly configured.All dangerous or insecure APIs are identified and removed.Knowledge
    sharing of effective code scanning tools, custom-scanning rules, mitigation approaches,
    or a common coding issue case study. |'
  prefs: []
  type: TYPE_TB
- en: '| Secure architecture | Case study.Delivery of the common security frameworks.Apply
    an industry best-practice security framework. |'
  prefs: []
  type: TYPE_TB
- en: Security requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security requirements depend on the business environment, regulations, and security
    compliance. An organization should define a minimum expected security requirement
    baseline to be part of the release gate. Based on the severity and impact, the
    release plan may be a release conditional on the readiness of hotfixes, not released
    until the issue is fixed, released with mitigation protection, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: To have a security requirement release baseline will also help to build consensus
    among stakeholders such as IT, development teams, security teams, and so on. Otherwise,
    it may be that business teams would like to release even though there are security
    defects, while the security team may not endorse the release.
  prefs: []
  type: TYPE_NORMAL
- en: It's a trade-off between time to market and the level of security maturity.
    The objective is to build appropriate (not perfect) security controls to protect
    digital assets with the balance between security quality and time-to-market software
    releases.
  prefs: []
  type: TYPE_NORMAL
- en: 'OWASP **Application Security Verification Standard** (**ASVS**) defines three
    levels of security requirement:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Application scenario** | **Threat Protection** |'
  prefs: []
  type: TYPE_TB
- en: '| ASVS Level 1 | This is the minimum required security requirement for all
    applications. | Simple and easy-to-exploit vulnerabilities. |'
  prefs: []
  type: TYPE_TB
- en: '| ASVS Level 2 | Application that handles sensitive data. | Specific tools
    and target attacks to exploit weakness within an application. |'
  prefs: []
  type: TYPE_TB
- en: '| ASVS Level 3 | Applications that require the highest level of security such
    as e-business, health systems, the Stock Exchange, or critical services. | To
    attack a Level 3 application will require more in-depth architecture or code analysis.
    |'
  prefs: []
  type: TYPE_TB
- en: In addition, OWASP Secure Software Contract Annex defines a software contract
    template that covers the security requirements for an outsourcing project: [Https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex/](https://www.owasp.org/index.php/OWASP_Secure_Software_Contract_Annex/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following diagram showing OWASP ASVS requirements mapping to a
    web architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At an organization level, keeping a list of recommended security frameworks
    or modules can help projects teams not only to build services on top of a mature
    framework but can also reduce known security risks. Don't reinvent the wheel.
    An organization should keep these common security modules as part of their security
    knowledge-base. Here is a common key security module mapping to OWASP ASVS. It's
    not a comprehensive one; if you are looking for other open source modules, BlackDuck
    Open Hub may be a good database to search: [www.openhub.net](http://www.openhub.net).
  prefs: []
  type: TYPE_NORMAL
- en: '| **Security Requirements** | **Open Source Security Framework ** |'
  prefs: []
  type: TYPE_TB
- en: '| V2: Authentication | OpenSAML2 for JavaCentral Authentication ServiceHostapd
    |'
  prefs: []
  type: TYPE_TB
- en: '| V3: Session Management | Shiro, Spring Security |'
  prefs: []
  type: TYPE_TB
- en: '| V4: Access Control | Shiro, Spring Security, OpenSAMLOpenLDAP, Apache Directory
    studio |'
  prefs: []
  type: TYPE_TB
- en: '| V5: Malicious Input handling | Apache Jakarta commons validatorBean ValidationOWASP
    Java HTML Sanitizer |'
  prefs: []
  type: TYPE_TB
- en: '| V6: Output encoding/escaping | Apache Santuario, Apache XML Security for
    JavaOWASP Java Encoder Project |'
  prefs: []
  type: TYPE_TB
- en: '| V7: Cryptography | OpenSSL, BouncyCastle, scrypt, KeycZar |'
  prefs: []
  type: TYPE_TB
- en: '| V8: Error handling and logging | Apache Log4j, Apache Jakarta common logging
    |'
  prefs: []
  type: TYPE_TB
- en: '| V9: Data Protection | Hashicorp Vault, Google Rappor, Private data sharing
    interface, UTD Anonymization toolboxletsEncrypt, BetterCrypto, mbed TLS |'
  prefs: []
  type: TYPE_TB
- en: '| V10: Communication Security | OpenSSL, OpenSSH, JSCH |'
  prefs: []
  type: TYPE_TB
- en: '| V11: Http Security configuration | OpenSCAP |'
  prefs: []
  type: TYPE_TB
- en: '| V12: Security configuration | OpenSCAP |'
  prefs: []
  type: TYPE_TB
- en: '| V13: Malicious controls | VisualCaptcha |'
  prefs: []
  type: TYPE_TB
- en: '| V14: Internal Security | This section was incorporated into V13. |'
  prefs: []
  type: TYPE_TB
- en: '| V15: Business logic | n/a |'
  prefs: []
  type: TYPE_TB
- en: '| V16: Files and resources | ProjectSend, LinShare |'
  prefs: []
  type: TYPE_TB
- en: '| V17: Mobile | VisualCaptcha |'
  prefs: []
  type: TYPE_TB
- en: '| V18: Web services | Shiro |'
  prefs: []
  type: TYPE_TB
- en: QA goal/metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this stage of verification, the role of QA is to assess software security-related
    issues, code-level vulnerabilities, misconfigurations, or logical errors that
    lead to critical security risks, and so on. OWASP SAMM-defined key security activities
    in the verification phases include design review, implementation review, and security
    testing. As we will discuss software security verification details in later chapters,
    here we highlight some of the key practices in this phase.
  prefs: []
  type: TYPE_NORMAL
- en: Design review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In practice, the security design review can be considered as low-level threat
    modeling. The following are suggested during design review:'
  prefs: []
  type: TYPE_NORMAL
- en: Security compliance checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security requirement checklist (OWASP ASVS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Top 10 security design issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security issues in the previous release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer or marketing feedback on security issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we are doing a design review for the top security issues, we may also
    refer to industry practices such as OWASP Top 10 and CWE/SANS Top 25 Most Dangerous
    Software Errors. Meanwhile, the project team may also build its own top security
    issue based on historical records or customer feedback:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OWASP Top 10**: [https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CWE/SANS Top 25 Most Dangerous Software Errors**: [http://cwe.mitre.org/top25/](http://cwe.mitre.org/top25/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, we can review whether the design can effectively mitigate the
    security risks that we have analyzed in the threat assessment stage. ATT&CK is
    also a good reference source for design reviews since it lists techniques for
    threats and also mitigation suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: '** ATT&CK adversarial tactics, techniques and common knowledge**: [https://attack.mitre.org/wiki/Main_Page](https://attack.mitre.org/wiki/Main_Page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Implementation review involves the following key activities in a development
    team:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure coding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selection of reliable and secure third-party components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we will discuss secure configuration in a later section, let's focus on
    third-party components and secure coding in this section. Automated secure code
    scanning is considered the most efficient way to review. There are some different
    technical approaches for secure code review.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For third-party component management and review, it''s suggested to have the
    following security guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A third-party software evaluation checklist**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will allow every project to follow consistent criteria to introduce external
    third-party software components.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended third-party software and usage by projects**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having an internal third-party component database allows the project team to
    cross-reference what projects may have used third-party components and the integration
    approaches.
  prefs: []
  type: TYPE_NORMAL
- en: '**CVE status of third-party components**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any third-party components may introduce security risks. Track and plan for
    security patch updates as part of the operation team's routine tasks.
  prefs: []
  type: TYPE_NORMAL
- en: IDE-plugin code review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having an IDE-plug for code review will help a developer learn and correct a
    security code issue on the spot even before code submission. It's the most effective
    way and the least challenging for developers in terms of secure code disciplines.
    However, due to its line-by-line static code scanning and its inability to analyze
    the context of the whole source code, the scanning results may give some false
    positives.
  prefs: []
  type: TYPE_NORMAL
- en: Static code review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Static code scanning tools are used during daily builds or whenever code is
    submitted for scanning. It''s the most effective method to identify security issues
    at the very beginning of software development. There are various kinds of static
    code scanning techniques. Refer to the OWASP Benchmark project if you would like
    to further evaluate these tools ([https://www.owasp.org/index.php/Benchmark](https://www.owasp.org/index.php/Benchmark)):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Techniques** | **What is it?** | **Examples** |'
  prefs: []
  type: TYPE_TB
- en: '| **Static Application Security Testing** (**SAST**) | Static code scanning.
    Developers can use the tool as part of the IDE plug-in or trigger scanning together
    with the daily build. It''s considered a basic code scanning tool since it''s
    easy for developers to use. | FindSecbugs, Fortify, Coverity, klocwork. |'
  prefs: []
  type: TYPE_TB
- en: '| **Dynamic Application Security Testing** (**DAST**) | Instead of code review,
    the DAST identifies security issues by sending an attack payload to the runtime
    web application. | OWASP ZAP, BurpSuite |'
  prefs: []
  type: TYPE_TB
- en: '| **Interactive Application Security Testing **(**IAST**) | IAST not only does
    DAST security testing but also can identify the root/cause at the source code
    level via a RASP Agent. In simple terms, IAST = RASP Agent + DAST. | CheckMarksVaracode
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Run-time Application Security Protection** (**RASP**) | RASP is normally
    used in web application firewalls since it can detect attacks and take mitigating
    action in real time. | OpenRASPRefer to[https://github.com/baidu/openrasp](https://github.com/baidu/openrasp)
    |'
  prefs: []
  type: TYPE_TB
- en: Target code review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition, we can also target and focus on specific security issues by identifying
    the relevant code patterns. This is also a kind of **Static Application Security
    Testing** (**SAST**), but is more focused on the specific issue. It''s the most
    effective way to review specific kinds of security vulnerability. For example,
    when it comes to cryptography, the following Java APIs are considered insecure
    and should not be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: OWASP Code Review Project and SEI CERT Coding Standards are good references.
    For other tips on the code review process, please also refer to [Chapter 8](part0145.html#4A91I0-993778ed0b7e4894800dd46a3f389a65),
    *Secure Coding Best Practices*.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Code Review Project [https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project](https://www.owasp.org/index.php/Category:OWASP_Code_Review_Project)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SEI CERT Coding Standards [https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards](https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The objective of security testing is to ensure the overall application meets
    security requirements, industry standards, customer expectations, and regulatory
    controls. At an organizational level, it''s suggested to have the following toolkits
    and knowledge ready in terms of release criteria, testing plan/cases, and automation
    testing toolkits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security Release Criteria**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release criteria define the minimum requirement of a quality release gate.
    They can help business stakeholders to reach consensus decisions about when to
    release the software. To have such a baseline ready will help to reduce lots of
    communication issues or arguments between the development, QA, and DevOps teams.
  prefs: []
  type: TYPE_NORMAL
- en: '**Security Testing Plan/Cases**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OWASP testing guide and OWASP ASVS provide a very good reference base for
    a security testing plan/cases. For mobile security testing, refer to the OWASP
    Mobile security testing guide. [https://www.owasp.org/index.php/OWASP_Mobile_Security_Testing_Guide](https://www.owasp.org/index.php/OWASP_Mobile_Security_Testing_Guide)
  prefs: []
  type: TYPE_NORMAL
- en: '**Automation Testing Toolkits**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best approach to security automation is to integrate security tools with
    existing CI/CD frameworks such as Jenkins. It may require the security tools to
    have CLI or RESTful API interfaces and also XML/HTML/JSON output reports.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s important to build in-house toolkits for development and QA teams to
    do security testing. If your organization has just started to build in-house security
    testing toolsets, the toolset list in Kali Linux is a good start. The Kali Linux
    tools listing provides a complete set of security testing tools in many areas.
    Go here for the list of tools: [https://tools.kali.org/tools-listing](https://tools.kali.org/tools-listing). For
    mobile testing, refer to the **Mobile Security Testing Guide** (**MSTG**): [https://github.com/OWASP/owasp-mstg/](https://github.com/OWASP/owasp-mstg/).'
  prefs: []
  type: TYPE_NORMAL
- en: You may consider building an in-house security testing platform with all the
    security tools ready. Once the software package is deployed, the security testing
    platform will be triggered to do various kinds of security testing. For example, the
    **Software Assurance Marketplace** (**SWAMP**) provides cloud-based source code
    security analysis with a wide range of programming language and tool support: [https://www.mir-swamp.org/](https://www.mir-swamp.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Operation goal/metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Based on the SAMM, operational goals can be categorized into three functions:
    are issue management, environmental hardening, and operational enablement. Let''s
    discuss some of the best practices in each function.'
  prefs: []
  type: TYPE_NORMAL
- en: Issue management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Issue management here means how security incidents, vulnerability issues, or
    security breaches are handled. There should be a vulnerability process in place
    that involves both the DevOps and Dev team.
  prefs: []
  type: TYPE_NORMAL
- en: In an organization-level security assurance program, it's a must to define security
    incident and vulnerability response processes and also root cause analysis templates.
    NIST SP800-61 is a good reference for an organization to establish a security
    incident response process. It defines an incident handling action checklist in
    three stages. They are Detection and Analysis; Containment, Eradication, and Recovery,
    and Post-Incident Activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The table lists typical security activities during a security incident handling
    cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Stage** | **Development Team** | **DevOps/IT Team** |'
  prefs: []
  type: TYPE_TB
- en: '| Vulnerability received | Initially evaluate the received vulnerability.Gives
    the security issue an initial CVSS rating to understand the level of severity
    and impact.The incident response team (including DevOps, Dev, and IT) discusses
    the action plan and initial response. |'
  prefs: []
  type: TYPE_TB
- en: '| Internal/ExternalCommunication |'
  prefs: []
  type: TYPE_TB
- en: '| Root/Cause Analysis | The technical and development teams will look into
    the security issue, such as which APIs caused the issue, what the data flow may
    impact, what tools or payload were used for the issue, and come up with a plan
    to fix it. | IT or DevOps may check if it''s a well-known CVE or vulnerability,
    and any released patches available.If the firewall or virtual patch security controls
    can be applied to mitigate the issue. Analyze what other cloud services or interface
    may also have the issue. |'
  prefs: []
  type: TYPE_TB
- en: '| Mitigation | Code changes and related impact services.Secure configuration
    changes. |   Firewall security policies  Virtual Patch security rules  Deployment
    of security patches Secure configuration changes |'
  prefs: []
  type: TYPE_TB
- en: '| Deployment and Verification | Deployment and verification. |'
  prefs: []
  type: TYPE_TB
- en: In addition to having an action checklist, it also a good practice to have a
    vulnerability root cause analysis template. A root cause template will help the
    incident team to know what to follow, how to collect findings, and what root/cause
    analysis should be done.
  prefs: []
  type: TYPE_NORMAL
- en: Environment Hardening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The organization-level security policy in environment hardening should at least
    cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure configuration baseline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constant monitoring mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The secure configuration baseline defines what is secure and the monitoring
    mechanism ensures all the configurations are secure all the time.
  prefs: []
  type: TYPE_NORMAL
- en: Secure configuration baseline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Secure configuration guidelines include operating systems, servers, communication
    protocols, software, web services, databases, virtualization, and so on. It''s
    highly recommended to refer to the CIS benchmarks ([www.cisecurity.org](http://www.cisecurity.org))
    as a baseline:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Common software components** |'
  prefs: []
  type: TYPE_TB
- en: '| Database | MySQL, SQL Server, Oracle  |'
  prefs: []
  type: TYPE_TB
- en: '| Web Service | Apache Tomcat, NginX |'
  prefs: []
  type: TYPE_TB
- en: '| Virtualization | VMWare, Docker |'
  prefs: []
  type: TYPE_TB
- en: '| Operating | Linux (Sent, REdHat, Suse, Ubuntu), Windows Server |'
  prefs: []
  type: TYPE_TB
- en: Constant monitoring mechanism
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to having a secure configuration baseline, there should also be
    a general policy to define what should be scanned and what tools can apply:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Purpose** | **Open source tools** |'
  prefs: []
  type: TYPE_TB
- en: '| **Common vulnerabilities and exposures** (**CVEs**) | To understand if there
    are any publicly known vulnerabilities in the cloud services. Refer to[https://cve.mitre.org/](https://cve.mitre.org/).
    | OpenVAS, NMAP |'
  prefs: []
  type: TYPE_TB
- en: '| **Integrity monitoring** | It determines if major system configuration files
    have been tampered with. | OSSEC |'
  prefs: []
  type: TYPE_TB
- en: '| **Secure configuration compliance** | Secure configuration to meet industry
    best practices. | OpenSCAP([https://www.open-scap.org/](https://www.open-scap.org/))
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Sensitive information exposure** | To review whether there is any personally
    identifiable information, keys, or secret leakage in the configuration files.
    | No specific open source tool in this area. However, we may define specific regular
    expression patterns to scan the sensitive info. |'
  prefs: []
  type: TYPE_TB
- en: Operational enablement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Operational enablement mainly focuses on the interaction between the development
    team and the DevOps/IT team. Typical activities for an operation team include
    package deployment to production, ensuring the integrity of every software releases,
    secure communication protocols, secure configurations and the software updates
    for the software vulnerabilities. The following three items are considered as
    a must when a development team delivers a software release to the operation team
    for production deployment review.
  prefs: []
  type: TYPE_NORMAL
- en: Code signing for an application deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application communication ports matrix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure application configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code signing for application deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The objective of code signing is to ensure packaged software integrity and authenticity.
    It ensures the application hasn't been modified and determines the source of the
    application signed by the specific vendor. The code signing is not only a guideline
    or process—it's part of the continuous integration build process.
  prefs: []
  type: TYPE_NORMAL
- en: Application communication ports matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of the service communication ports matrix is to allow the IT/DevOps
    team to know what communication ports/protocols are used. The communication ports
    list will help the security team to do the necessary firewall configuration adjustment
    or monitoring. That will also help IT/DevOps to build a networking communication
    baseline and be able to tell unusual ports or traffic communication. A sample
    communication ports matrix is listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Source services** | **Source IP** | **Source Port** | **Destination****services**
    | **Destination port** | **Protocol** | **Usage** | **How to Config** |'
  prefs: []
  type: TYPE_TB
- en: '| `Service A` | `10.1.1.1` | `80` | `Service B` | `8080` | `10.1.1.2` | `REST
    API` | `/ect/nginx.conf` |'
  prefs: []
  type: TYPE_TB
- en: Application configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application configuration list defines a list of service or application
    configurations with change history information The purpose is to allow the DevOps/IT
    team to manage the secure configuration and monitor any unauthorized changes.
    The configuration list may cover the OS, virtualization, web services, databases,
    and frameworks that are specific to the target services. These configurations
    are often done through Infrastructure as Code, such as Puppet or Chef.  Infrastructure
    as Code makes secure configuration happen even in the implementation phase and
    allows for easier collaboration between the development and operation teams.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed security practices from different perspectives
    based on the OWASP SAMM framework. We discussed security activities in different
    roles such as security management, development, QA, and operation teams.
  prefs: []
  type: TYPE_NORMAL
- en: First, from the security management perspective, there are organization goals,
    policies, and education. We use GDPR compliance as an example to show what can
    be planned in security management.
  prefs: []
  type: TYPE_NORMAL
- en: For a development team, key security activities include threat assessment, security
    requirements, and secure architecture and coding. Although secure coding is also
    considered critical in the development stage, we moved the discussion to the secure
    code verification phase. In terms of threat assessment, we introduced some industry
    tools, best practices, and even card games. We used GDPR privacy assessment as
    an example to explain how to execute the PIA. For self-assessment, we listed the
    key deliverables of a development team. We also discussed the OWASP ASVS security
    requirements and how the ASVS fits into web framework implementation with suggested
    open source components.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of verification, there is design review, implementation review, and
    security testing. We discussed the key considerations of design review and the
    OWASP Top 10\. Different kinds of secure coding review tool were also discussed.
    Security testing involves release criteria, a testing plan, and automation testing
    toolkits. After all, automation security testing is the ultimate goal in DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Operational activities mainly include security issue management, environment
    hardening, and operation enablement. Moving toward DevSecOps, these activities
    highly involve not only the operation team itself but also the development and
    QA teams. We gave examples such as an application communication ports matrix and
    configuration lists, and analyzed the security incident root/cause.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss security assurance programs and organization,
    and how an organization or culture may execute a security program in an organization.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Does OWASP SAMM stand for Software Assurance Maturity Model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following are defined in OWASP security governance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Strategy and metrics
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Policy and compliance
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Education and guidance
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: According to OWASP SAMM, what should be considered during the construction phase?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security architecture
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Threat assessment
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Security requirements
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not a tool or technique for threat modeling?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CAPEC
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ATT&CK
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OWASP Cornucopia
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: GDPR
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In GDPR, what security practices may we apply to do a privacy assessment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PIA Privacy Impact Analysis
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Penetration testing
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Issue Management
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ISO 27001
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GDPR Privacy Impact Assessment**: [https://gdpr-info.eu/issues/privacy-impact-assessment/](https://gdpr-info.eu/issues/privacy-impact-assessment/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adversarial Tactics, Techniques & Common Knowledge**: [https://attack.mitre.org/wiki/Main_Page](https://attack.mitre.org/wiki/Main_Page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SDL Threat Modeling Tool**: [https://www.microsoft.com/en-us/sdl/adopt/threatmodeling.aspx](https://www.microsoft.com/en-us/sdl/adopt/threatmodeling.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elevation of Privilege (EoP) Card Game**: [https://www.microsoft.com/en-us/sdl/adopt/eop.aspx](https://www.microsoft.com/en-us/sdl/adopt/eop.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SP 800-100 Information Security Handbook: A Guide for Managers** [https://csrc.nist.gov/publications/detail/sp/800-100/final](https://csrc.nist.gov/publications/detail/sp/800-100/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software assurance marketplace**: [https://www.mir-swamp.org/](https://www.mir-swamp.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST Resources from the Software Assurance Reference Dataset**: [https://samate.nist.gov/SARD/around.php](https://samate.nist.gov/SARD/around.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST Test Suites**: [https://samate.nist.gov/SARD/testsuite.php](https://samate.nist.gov/SARD/testsuite.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST Security Recommendations for Hypervisor Deployment on Servers**: [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-125A.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-125A.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST Protecting Controlled Unclassified Information in Nonfederal Information
    Systems and Organizations**: [https://www.nist.gov/publications/protecting-controlled-unclassified-information-nonfederal-information-systems-and-3](https://www.nist.gov/publications/protecting-controlled-unclassified-information-nonfederal-information-systems-and-3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST Systems Security Engineering**: [https://www.nist.gov/publications/systems-security-engineering-considerations-multidisciplinary-approach-engineering-1](https://www.nist.gov/publications/systems-security-engineering-considerations-multidisciplinary-approach-engineering-1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Mobile security testing guide**. [https://www.owasp.org/index.php/OWASP_Mobile_Security_Testing_Guide](https://www.owasp.org/index.php/OWASP_Mobile_Security_Testing_Guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
