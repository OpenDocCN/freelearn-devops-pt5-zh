["```\n   spec:\n     containers:\n     - name: myapp\n       image: ravirdv/http-responder:latest\n       imagePullPolicy: IfNotPresent\n     - name: nginx-sidecar\n       image: nginx\n       imagePullPolicy: IfNotPresent\n       volumeMounts:\n         - name: secrets\n           mountPath: /app/cert\n         - name: config\n           mountPath: /etc/nginx/nginx.conf\n           subPath: nginx.conf\n```", "```\n    volumes:\n     - name: secrets\n       secret:\n         secretName: nginx-certificates\n         items:\n           - key: server-cert\n             path: server.pem\n           - key: server-key\n             path: server-key.pem\n     - name: config\n       configMap:\n         name: nginx-configuration\n```", "```\nhttp {\n    sendfile        on;\n    include       mime.types;\n    default_type  application/octet-stream;\n    keepalive_timeout  80;\n    server {\n       ssl_certificate      /app/cert/server.pem;\n      ssl_certificate_key  /app/cert/server-key.pem;\n      ssl_protocols TLSv1.2;\n      ssl_ciphers EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:!EECDH+3DES:!RSA+3DES:!MD5;\n      ssl_prefer_server_ciphers on;\n      listen       443 ssl;\n      server_name  localhost;\n      location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_pass http://127.0.0.1:5000/;\n      }\n    }\n}\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\n```", "```\nkubectl create cm nginx-configuration --from-file=nginx.conf=./nginx.conf\n```", "```\nConfigmap \"nginx-configuration\" created\n```", "```\n{\n   \"CN\": \"mydomain.com\",\n   \"hosts\": [\n       \"mydomain.com\",\n       \"www.mydomain.com\"\n   ],\n   \"key\": {\n       \"algo\": \"rsa\",\n       \"size\": 2048\n   },\n   \"names\": [\n       {\n           \"C\": \"US\",\n           \"ST\": \"MD\",\n           \"L\": \"United States\"\n       }\n   ]\n}\n```", "```\ncfssl gencert -initca nginxca.json | cfssljson -bare nginxca\n```", "```\n{\n  \"signing\": {\n      \"default\": {\n          \"expiry\": \"20000h\"\n      },\n      \"profiles\": {\n          \"client\": {\n              \"expiry\": \"43800h\",\n              \"usages\": [\n                  \"signing\",\n                  \"key encipherment\",\n                  \"client auth\"\n              ]\n          },\n          \"server\": {\n              \"expiry\": \"20000h\",\n              \"usages\": [\n                  \"signing\",\n                  \"key encipherment\",\n                  \"server auth\",\n                  \"client auth\"\n              ]\n          }\n      }\n  }\n}\n```", "```\n{\n  \"CN\": \"server\",\n  \"hosts\": [\n    \"\"\n  ],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  }\n}\n```", "```\ncfssl gencert -ca=nginxca.pem -ca-key=nginxca-key.pem -config=nginxca-config.json -profile=server -hostname=\"127.0.0.1\" nginxcarequest.json | cfssljson -bare server\n```", "```\nkubectl create secret generic nginx-certs --from-file=server-cert=./server.pem --from-file=server-key=./server-key.pem\n```", "```\nkubectl apply -f nginx-sidecar.yaml \n```", "```\ndeployment \"myapp\" created\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n name:myapp\n labels:\n   app: myapp\nspec:\n selector:\n   app: myapp\n type: NodePort\n ports:\n - port: 443\n   targetPort: 443\n   protocol: TCP\n   name: https\n```", "```\nadmin:\n  access_log_path: \"/dev/null\"\n  address:\n    socket_address:\n      address: 0.0.0.0\n      port_value: 8001\n```", "```\nstatic_resources:\n  listeners:\n   - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8443\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager\n          stat_prefix: ingress_https\n          codec_type: auto\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: backend\n              domains:\n              - \"*\"\n              routes:\n              - match:\n                  prefix: \"/service/1\"\n                route:\n                  cluster: service1\n              - match:\n                  prefix: \"/service/2\"\n                route:\n                  cluster: service2\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config: {}\n```", "```\n      transport_socket:\n        name: envoy.transport_sockets.tls\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n          common_tls_context:\n            tls_certificates:\n              certificate_chain:\n                inline_string: |\n                   <INLINE CERT FILE>\n              private_key:\n                inline_string: |\n                  <INLINE PRIVATE KEY FILE>\n```", "```\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8080\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager\n          codec_type: auto\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: backend\n              domains:\n              - \"*\"\n              routes:\n              - match:\n                  prefix: \"/service1\"\n                route:\n                  cluster: service1\n              - match:\n                  prefix: \"/service2\"\n                route:\n                  cluster: service2\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config: {}\n```", "```\n  clusters:\n  - name: service1\n    connect_timeout: 0.25s\n    type: strict_dns\n    lb_policy: round_robin\n    http2_protocol_options: {}\n    load_assignment:\n      cluster_name: service1\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: service1\n                port_value: 5000\n```", "```\n  - name: service2\n    connect_timeout: 0.25s\n    type: strict_dns\n    lb_policy: round_robin\n    http2_protocol_options: {}\n    load_assignment:\n      cluster_name: service2\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: service2\n                port_value: 5000\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-service\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: my-service\n    spec:\n      containers:\n      - name: envoy\n        image: envoyproxy/envoy:latest\n        ports:\n          - containerPort: 9901\n            protocol: TCP\n            name: envoy-admin\n          - containerPort: 8786\n            protocol: TCP\n            name: envoy-web\n```", "```\n        volumeMounts:\n          - name: envoy-config-volume\n            mountPath: /etc/envoy-config/\n        command: [\"/usr/local/bin/envoy\"]\n        args: [\"-c\", \"/etc/envoy-config/config.yaml\", \"--v2-config-only\", \"-l\", \"info\",\"--service-cluster\",\"myservice\",\"--service-node\",\"myservice\", \"--log-format\", \"[METADATA][%Y-%m-%d %T.%e][%t][%l][%n] %v\"]\n```", "```\n- name: my-service\n        image: ravirdv/http-responder:latest\n        ports:\n        - containerPort: 5000\n          name: svc-port\n          protocol: TCP\n      volumes:\n        - name: envoy-config-volume\n          configMap:\n            name: envoy-config\n            items:\n              - key: envoy-config\n                path: config.yaml\n```", "```\nkubectl create cm envoy-config \n--from-file=config.yaml=./envoy-config.yaml\n```", "```\nConfigmap \"envoy-config\" created\n```", "```\nkubectl apply -f deployment.yaml\n```", "```\nDeployment \"my-service\" created\n```", "```\nkubectl create -f service1-deployment.yaml\nkubectl create -f service1-service.yaml\nkubectl create -f service2-deployment.yaml\nkubectl create -f service2-service.yaml\n```", "```\nKubectl exec <my-service-pod-name> -it -- curl localhost:8080/service1\n```", "```\nService 1 Reached!\n```", "```\n    curl -L https://istio.io/downloadIstio | sh -\n    ```", "```\n    cd istio-<VERSION>\n    export PATH=$PWD/bin:$PATH\n    ```", "```\n    istioctl install --set profile=demo\n    ```", "```\n    kubectl label namespace my-namespace istio-injection=enabled\n    ```", "```\n    istioctl x uninstall --purge\n    ```", "```\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: service-frontend\n    spec:\n      replicas: 1\n      template:\n        metadata:\n          labels:\n            app: service-frontend\n            version: v2\n        spec:\n          containers:\n          - name: service-frontend\n            image: ravirdv/http-responder:latest\n            ports:\n            - containerPort: 5000\n              name: svc-port\n              protocol: TCP\n    ```", "```\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: service-frontend\n    spec:\n      selector:\n        name: service-frontend\n      ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 5000\n    ```", "```\n    apiVersion: networking.istio.io/v1alpha3\n    kind: Gateway\n    metadata:\n      name: myapplication-gateway\n    spec:\n      selector:\n        istio: ingressgateway\n      servers:\n      - port:\n          number: 80\n          name: http\n          protocol: HTTP\n        hosts:\n        - \"*\"\n    ```", "```\n    apiVersion: networking.istio.io/v1alpha3\n    kind: VirtualService\n    metadata:\n      name: myapplication\n    spec:\n      hosts:\n      - \"*\"\n      gateways:\n      - myapplication-gateway\n      http:\n      - match:\n        - uri:\n            prefix: /app\n        - uri:\n            prefix: /frontend\n        route:\n        - destination:\n            host: service-frontend\n            subset: v1\n    ```", "```\n    apiVersion: networking.istio.io/v1alpha3\n    kind: DestinationRule\n    metadata:\n      name: service-frontend\n    spec:\n      host: service-frontend\n      subsets:\n      - name: v1\n        labels:\n          version: v1\n      - name: v2\n        labels:\n          version: v2\n    ```", "```\n    apiVersion: networking.istio.io/v1alpha3\n    kind: VirtualService\n    metadata:\n      name: myapplication-a\n    spec:\n      hosts:\n      - service-a\n      http:\n        route:\n        - destination:\n            host: service-backend-a\n            subset: v1\n    ```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: service-backend-a\nspec:\n  host: service-backend-a\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n```", "```\n    kubectl apply --filename https://github.com/knative/serving/releases/download/v0.18.0/serving-crds.yaml\n    ```", "```\n    kubectl apply --filename https://github.com/knative/serving/releases/download/v0.18.0/serving-core.yaml\n    ```", "```\n    kubectl apply --filename https://github.com/knative/net-istio/releases/download/v0.18.0/release.yaml\n    ```", "```\n    Kubectl get service -n istio-system istio-ingressgateway\n    ```", "```\n    kubectl apply --filename https://github.com/knative/serving/releases/download/v0.18.0/serving-default-domain.yaml\n    ```", "```\n    kubectl apply --filename https://github.com/knative/eventing/releases/download/v0.18.0/eventing-crds.yaml\n    ```", "```\n    kubectl apply --filename https://github.com/knative/eventing/releases/download/v0.18.0/eventing-core.yaml\n    ```", "```\n    kubectl apply --filename https://github.com/knative/eventing/releases/download/v0.18.0/in-memory-channel.yaml\n    ```", "```\n    kubectl apply --filename https://github.com/knative/eventing/releases/download/v0.18.0/mt-channel-broker.yaml\n    ```", "```\napiVersion: eventing.knative.dev/v1\nkind: broker\nmetadata:\n name: my-broker\n namespace: default\n```", "```\napiVersion: eventing.knative.dev/v1\nkind: Trigger\nmetadata:\n  name: my-trigger\nspec:\n  broker: my-broker\n  filter:\n    attributes:\n      type: myeventtype\n  subscriber:\n    ref:\n     apiVersion: v1\n     kind: Service\n     name: service-consumer\n```", "```\nkubectl get broker\n```", "```\nNAME      READY   REASON   URL                                                                                 AGE\nmy-broker   True             http://broker-ingress.knative-eventing.svc.cluster.local/default/my-broker     1m\n```", "```\nkubectl run -i --tty --rm debug --image=radial/busyboxplus:curl --restart=Never -- sh\n```", "```\ncurl -v \"http://broker-ingress.knative-eventing.svc.cluster.local/default/my-broker\" \\\n  -X POST \\\n  -H \"Ce-Id: anyid\" \\\n  -H \"Ce-Specversion: 1.0\" \\\n  -H \"Ce-Type: myeventtype\" \\\n  -H \"Ce-Source: any\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"payload\":\"Does this work?\"}'\n```", "```\n> HTTP/1.1 200 OK\n> Content-Type: application/json\n{\n  \"Output\": \"Does this work?\"\n}\n```", "```\nkubectl apply -f https://raw.githubusercontent.com/openfaas/faas-netes/master/namespaces.yml\n```", "```\nhelm repo add openfaas https://openfaas.github.io/faas-netes/\nhelm repo update\n```", "```\nhelm install openfaas openfaas/openfaas \\\n    --namespace openfaas  \\\n    --set functionNamespace=openfaas-fn \\\n    --set ingress.enabled=true \\\n    --set generateBasicAuth=true \n```", "```\nOPENFAASPWD=$(kubectl get secret basic-auth -n openfaas -o jsonpath=\"{.data.basic-auth-password}\" | base64 --decode)\n```", "```\ncurl -sL https://cli.openfaas.com | sudo sh\n```", "```\nfaas-cli new my-function –lang node\n```", "```\nFolder: my-function created.\nFunction created in folder: my-function\nStack file written: my-function.yml\n```", "```\nprovider:\n  name: openfaas\n  gateway: http://localhost:8080\nfunctions:\n  my-function:\n    lang: node\n    handler: ./my-function\n    image: my-function\n```", "```\n\"use strict\"\nmodule.exports = (context, callback) => {\n    callback(undefined, {output: \"my function succeeded!\"});\n}\n```", "```\nfaas-cli build -f /path/to/my-function.yml \n```", "```\nfaas-cli push -f my-function.yml \n```", "```\nfaas-cli deploy -f my-function.yml\n```", "```\nexport OPENFAAS_URL=http://127.0.0.1:8080\nkubectl port-forward -n openfaas svc/gateway 8080:8080\n```", "```\necho -n $OPENFAASPWD | faas-cli login -g $OPENFAAS_URL -u admin --password-stdin\n```", "```\nfaas-cli invoke -f my-function.yml my-function\n```", "```\nReading from STDIN - hit (Control + D) to stop.\nThis is my message\n{ output: \"my function succeeded!\"});}\n```", "```\nfaas-cli rm -f my-function.yml \n```"]