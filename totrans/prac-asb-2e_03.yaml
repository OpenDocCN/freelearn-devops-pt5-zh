- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Defining Your Inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in the preceding two chapters, Ansible cannot do anything until
    you tell it which hosts it is responsible for. This is, of course, logical—you
    wouldn’t want any automation tool, regardless of how easy it is to use and set
    up, to simply go out and take control of every single device on your network.
    Hence, at the bare minimum, you must tell Ansible what hosts it is going to automate
    tasks on, and this, in the most fundamental terms, is what an inventory is.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is so much more to inventories than just a list of automation
    targets. Ansible inventories can be provided in several formats; they can be either
    static or dynamic, and they can contain important variables that define how Ansible
    interacts with each host (or groups of hosts). Hence, they deserve a chapter to
    themselves, and in this chapter, we shall perform a practical exploration of inventories
    and how to use them to your best advantage as you automate your infrastructure
    with Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an inventory file and adding hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a dynamic inventory file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special host management using patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter assumes that you have set up your control host with Ansible, as
    detailed in [*Chapter 1*](B20846_01.xhtml#_idTextAnchor015), *Getting Started
    with Ansible*, and you are using the most recent version available—the examples
    in this chapter were tested with Ansible 8.0 and `ansible-core` 2.15.0\. This
    chapter also assumes that you have at least one additional host to test against,
    and this should be Linux-based. Although we will give specific examples of hostnames
    in this chapter, you are free to substitute them with your own hostnames and/or
    IP addresses, and details of how to do this will be provided in the appropriate
    places.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code bundle for this chapter is available here: [https://github.com/PacktPublishing/Practical-Ansible-Second-Edition/tree/main/Chapter%203](https://github.com/PacktPublishing/Practical-Ansible-Second-Edition/tree/main/Chapter%203).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an inventory file and adding hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever you see a reference to “*creating an inventory*” in Ansible, you are
    normally quite safe to assume that it is a static inventory. Ansible supports
    two types of inventory—static and dynamic—and we will cover the latter of these
    two later in this chapter. Static inventories are by their very nature static;
    they are unchanging unless a human manually edits them. This is great when you
    are starting out and testing Ansible, as it provides you with a very quick and
    easy way to get up and running quickly. Even in small, closed environments, static
    inventories are a great way to manage your environment, especially when changes
    to the infrastructure are infrequent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most Ansible installations will look for a default inventory file in `/etc/ansible/hosts`
    (though this path is configurable in the Ansible configuration file, as discussed
    in [*Chapter 2*](B20846_02.xhtml#_idTextAnchor099), *Understanding the Fundamentals
    of Ansible*). You are welcome to populate this file or to provide your own inventory
    for each playbook run, and it is commonplace to see inventories provided alongside
    playbooks—after all, when you start to build them out with variables and groupings,
    they become a code asset just as your playbooks and roles do, so it makes sense
    to commit them to source control alongside your other automation code. As you
    will have seen in the earlier chapters of this book, Ansible commands use the
    `-i` flag to specify the location of the inventory file if not using the default.
    We’ve already seen examples of this in this book, but as a refresher, this might
    look like the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Most static inventory files you will come across are created in INI format,
    though it is important to note that other formats are supported. The most common
    format you will find after INI-formatted files are YAML ones—more details of the
    types of inventory files you can work with may be found here: [https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.xhtml](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will provide some examples of both INI and YAML formatted
    inventory files for you to consider, as you must have an awareness of both. Personally,
    I have worked with Ansible for many years and only worked with either INI-formatted
    files or dynamic inventories, but they say knowledge is power and so it will do
    no harm to learn a little about both formats.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by creating a static inventory file. This inventory file will be
    separate from the default inventory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an inventory file in `/etc/ansible/my_inventory` using the following
    INI-formatted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The blank lines between inventory hosts are not required—they have been inserted
    simply to make the inventory more readable in this book. This inventory file is
    very simple and does not include any grouping; however, when referencing the inventory,
    you can still refer to all the hosts together using the special `all` group, which
    is implicitly defined regardless of how you format and divide your inventory file.
  prefs: []
  type: TYPE_NORMAL
- en: Each line in the preceding file contains one inventory host. The first column
    contains the inventory hostname that Ansible will use (which can be accessed through
    the `inventory_hostname` magic variable we discussed in [*Chapter 2*](B20846_02.xhtml#_idTextAnchor099),
    *Understanding the Fundamentals of Ansible*). All the parameters on the same line
    after that are variables that are assigned to the host. These can be user-defined
    variables or special Ansible variables, as we have set here.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many such variables, but the preceding examples specifically include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible_host`: If the inventory hostname cannot be accessed directly—perhaps
    because it is not in DNS, for example—this variable contains the hostname or IP
    address that Ansible will connect to instead'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible_port`: By default, Ansible attempts all communication over port `22`
    for SSH—if you have an SSH daemon running on another port, you can tell Ansible
    about it using this variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible_user`: By default, Ansible will attempt to connect to the remote host
    using the current user account you are running the Ansible command from—you can
    override this in several ways, of which this is one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hence, the preceding three hosts can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `target1.example.org` host should be connected to using the `192.168.81.142`
    IP address, on port `3333`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `target2.example.org` host should be connected to on port `3333` also, but
    this time, using the `james` user rather than the account running the Ansible
    command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `target3.example.org` host should be connected to using the `192.168.81.143`
    IP address, on port `5555`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this way, even with no further constructs, you can begin to see the power
    of static INI-formatted inventories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you wanted to create exactly the same inventory as the preceding, but
    this time, format it as YAML, you would specify it as follows (we’ll call this
    file `my_inventory.yaml`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You may come across inventory file examples containing parameters such as `ansible_ssh_port`,
    `ansible_ssh_host`, and `ansible_ssh_user`—these variable names (and others like
    them) were used in Ansible versions before 2.0\. Backward compatibility has been
    maintained for many of these, but you should update them where possible as this
    compatibility may be removed at some point in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you were to run the preceding inventory within Ansible using a simple
    `ansible.builtin.shell` command, the result would appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: That covers the basics of creating a simple static inventory file. Let’s now
    expand upon this by adding host groups to the inventory in the next part of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using host groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is rarely one playbook that will suit an entire infrastructure, and although
    it is easy to tell Ansible to use an alternate inventory for a different playbook,
    this could get very messy, very quickly, with potentially hundreds of small inventory
    files dotted around your network. You can imagine how quickly this would get unmanageable,
    and Ansible is supposed to make things more manageable, not the opposite. One
    possible simple solution to this is to start adding groups to your inventories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s assume you have a simple three-tier web architecture, with multiple hosts
    in each tier for high availability and/or load balancing. The three tiers in this
    architecture might be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Frontend servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this architecture set out, let’s set about creating an inventory for it,
    again mixing up the YAML and INI formats to give you experience in both. To keep
    the examples clear and concise, we’ll assume that you can access all servers using
    their **Fully Qualified Domain Names** (**FQDNs**), and hence won’t add any host
    variables in these inventory files. There is nothing to stop you from doing this,
    of course, and every example is different.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let’s create the inventory for the three-tier frontend using
    the INI format. We will call this file `hostsgroups-ini`, and the contents of
    this file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding inventory, we have created three groups, called `frontends`,
    `apps`, and `databases`. Note that, in INI-formatted inventories, group names
    go inside square braces. Under each group name goes the server names that belong
    to each group, so the preceding example shows two servers in each group. Notice
    the outlier at the top, `loadbalancer.example.org`—this host isn’t in any group.
    All ungrouped hosts must go at the very top of an INI-formatted file.
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed any further, it’s worth noting that inventories can also contain
    groups of groups, which is incredibly useful for processing certain tasks by a
    different division. The preceding inventory stands in its own right, but what
    if our frontend servers are built on Ubuntu, and the app and database servers
    are built on Fedora? There will be some fundamental differences in the ways we
    handle these hosts—for example, we might use the `ansible.builtin.apt` module
    to manage packages on Ubuntu and the `ansible.builtin.dnf` module on Fedora.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could, of course, handle this case using facts gathered from each host as
    these will contain the operating system details. We could also create a new version
    of the inventory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With the use of the `children` keyword in the group definition (inside the square
    braces), we can create groups of groups; hence, we can perform clever groupings
    to help our playbook design without having to specify each host more than once.
  prefs: []
  type: TYPE_NORMAL
- en: 'This structure in INI format is quite readable but takes some getting used
    to when it is converted into YAML format. The code listed next shows the YAML
    version of the preceding inventory—the two are identical as far as Ansible is
    concerned, but it is left to you to decide which format you prefer working with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the `children` keyword is still used in the YAML-formatted
    inventory, but now the structure is more hierarchical than it was in the INI format.
    The indentation might be easier for you to follow, but note how the hosts are
    ultimately defined at quite a high level of indentation—this format could be more
    difficult to extend, depending on your desired approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you want to work with any of the groups from the preceding inventory,
    you would simply reference it either in your playbook or on the command line.
    Extending our previous example, we can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the `all` keyword in the middle of that line. That is the special `all`
    group that is implicit in all inventories and is explicitly mentioned in your
    previous YAML example. If we wanted to run the same command, but this time on
    just the `fedora` group hosts from the previous YAML inventory, we would run this
    variation of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this is a powerful way of managing your inventory and making
    it easy to run commands on just the hosts you want. The possibility of creating
    multiple groups makes life simple, especially when you want to run different tasks
    on different groups of servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an aside to developing your inventories, it is worth noting that there is
    a quick shorthand notation that you can use to create multiple hosts. Let’s assume
    you have 100 app servers, all named sequentially, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is entirely possible, but would be tedious and error-prone to create by
    hand and would produce some very hard to read and interpret inventories. Luckily,
    Ansible provides a quick shorthand notation to achieve this, and the following
    inventory snippet actually produces an inventory with the same 100 app servers
    that we could create manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to use alphabetic ranges as well as numeric ones—extending
    our example to add some cache servers, you might have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the same as manually creating the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now that we’ve completed our exploration of the various static inventory formats
    and how to create groups (and indeed, child groups), in the next section, let’s
    expand on our previously brief look at host variables.
  prefs: []
  type: TYPE_NORMAL
- en: Adding host and group variables to your inventory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already touched upon host variables—we saw them earlier in this chapter
    when we used them to override connection details such as the user account to connect
    with, the address to connect to, and the port to use. However, there is so much
    more you can do with Ansible and inventory variables, and it is important to note
    that they can be defined not only at the host level but also at the group level,
    which again provides you with some incredibly powerful ways in which you can efficiently
    manage your infrastructure from one central inventory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s build on our previous three-tier example and suppose that we need to
    set two variables for each of our two frontend servers. These are not special
    Ansible variables but instead are variables entirely of our own choosing, which
    we will use later on in the playbooks that run against this server. Suppose that
    these variables are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https_port`, which defines the port that the frontend proxy should listen
    on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lb_vip`, which defines the FQDN of the load balancer in front of the frontend
    servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s see how this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We could simply add these to each of the hosts in the `frontends` part of our
    inventory file, just as we did before with the Ansible connection variables. In
    this case, a portion of our INI-formatted inventory might look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we run an ad hoc command against this inventory, we can see the contents
    of both of these variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This has worked just as we desired, but the approach is inefficient as you have
    to add the same variables to every single host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, you can assign variables to a host group as well as to hosts individually.
    If we edited the preceding inventory to achieve this, the `frontends` section
    would now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice how much more readable that is? Yet, if we run the same command as before
    against our newly organized inventory, we see that the result is the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'There will be times when you want to work with host variables for individual
    hosts, and times when group variables are more relevant. It is up to you to determine
    which is better for your scenario; however, remember that host variables can be
    used in combination. It is also worth noting that host variables override group
    variables, so if we need to change the connection port to `8444` on the `web01.example.org`
    one, we could do this as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if we run our ad hoc command again with the new inventory, we can see
    that we have overridden the variable on one host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Of course, doing this for one host alone when there are only two might seem
    a little pointless, but when you have an inventory with hundreds of hosts in it,
    this method of overriding one host will suddenly become very valuable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just for completeness, if we were to add the host variables we defined previously
    to our YAML version of the inventory, the `frontends` section would appear as
    follows (the rest of the inventory has been removed to save space):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the same ad hoc command as before, you can see that the result is the
    same as for our INI-formatted inventory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: So far, we have covered several ways of providing host variables and group variables
    to your inventory; however, there is another way that deserves special mention
    and will become valuable to you as your inventory becomes larger and more complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, our examples are small and compact and only contain a handful of
    groups and variables; however, when you scale this up to a full infrastructure
    of servers, using a single flat inventory file could, once again, become unmanageable.
    Luckily, Ansible also provides a solution to this. Two specially named directories,
    `host_vars` and `group_vars`, are automatically searched for appropriate variable
    content if they exist within the playbook directory. We can test this out by recreating
    the preceding frontend variables example using this special directory structure,
    rather than putting the variables into the inventory file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by creating a new directory structure for this purpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, under this directory, we’ll create two more directories for the variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'https_port: 8444'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, under the `group_vars` directory, create a YAML file named after
    the group to which we want to assign variables (that is, `frontends.yml`) with
    the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we will create our inventory file as before, except that it contains
    no variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Just for clarity, your final directory structure should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s try running our familiar ad hoc command and see what happens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, this works exactly as before, and without further instruction,
    Ansible has traversed the directory structure and ingested all the variable files.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have many hundreds of variables (or need an even finer-grained approach),
    you can replace the YAML files with directories named after the hosts and groups.
    Let’s recreate the directory structure, but now with directories instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice how we now have directories named after the `frontends` group and the
    `web01.example.org` host? Inside the `frontends` directory, we have split the
    variables into two files, and this can be incredibly useful for logically organizing
    variables in groups, especially as your playbooks get bigger and more complex.
    Although we have named the variables files by the name of the variable they contain,
    this has been done purely to help us understand the code structure here. Each
    variables file may contain any number of variables, and they need not hold any
    relation to the filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'The files themselves are simply an adaptation of our previous ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Even with this more finely divided directory structure, the result of running
    the ad hoc command is still the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'One final thing of note before we conclude this section is, if you define the
    same variable at both a group level and a child group level, the variable at the
    child group level takes precedence. This is not as obvious to figure out as it
    first sounds. Consider our earlier inventory where we used child groups to differentiate
    between Fedora and Ubuntu hosts—if we add a variable with the same name to both
    the `ubuntu` child group and the `frontends` group (which is a `ubuntu` group)
    as follows, what will the outcome be? The inventory would look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s run an ad hoc command to see what value of `testvar` is actually
    set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: $ sudo dnf install -y cobbler
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'cobblerd service is configured to listen on the loopback address by checking
    the settings in /etc/cobbler/settings—the relevant snippet of the file is shown
    here and should appear as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ sudo systemctl enable --now cobblerd.service
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '/boot directory, assuming you have installed Cobbler on Fedora 38\. On the
    test system used for this demo, the following commands were used; however, you
    must replace the version number in the vmlinuz and initramfs filenames with the
    appropriate version numbers from your system’s /boot directory:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ sudo cobbler system add --name=frontend01 --profile=webservers --dns-name=frontend01.example.org
    --interface=eth0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ sudo cobbler system add --name=frontend02 --profile=webservers --dns-name=frontend02.example.org
    --interface=eth0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-galaxy collection list | grep community.general
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: community.general             6.5.0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ cat my.cobbler.yml
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'plugin: community.general.cobbler'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ansible-inventory command, which you can use to validate the operation of the
    dynamic inventory:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible -i my.cobbler.yml cobbler_webservers -m ansible.builtin.ping
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: frontend01.example.org | SUCCESS => {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: frontend02.example.org | SUCCESS => {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-doc -t inventory community.general.cobbler
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[cobbler_webservers]'
  prefs: []
  type: TYPE_NORMAL
- en: '[fedora:children]'
  prefs: []
  type: TYPE_NORMAL
- en: cobbler_webservers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible -i my.cobbler.yml -i static-groups-mix-ini fedora -m ansible.builtin.ping
  prefs: []
  type: TYPE_NORMAL
- en: frontend01.example.org | SUCCESS => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: frontend02.example.org | SUCCESS => {
  prefs: []
  type: TYPE_NORMAL
- en: '"ansible_facts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"discovered_interpreter_python": "/usr/bin/python3"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"changed": false,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ping": "pong"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: loadbalancer.example.org
  prefs: []
  type: TYPE_NORMAL
- en: '[frontends]'
  prefs: []
  type: TYPE_NORMAL
- en: web01.example.org
  prefs: []
  type: TYPE_NORMAL
- en: web02.example.org
  prefs: []
  type: TYPE_NORMAL
- en: '[apps]'
  prefs: []
  type: TYPE_NORMAL
- en: app01.example.org
  prefs: []
  type: TYPE_NORMAL
- en: app02.example.org
  prefs: []
  type: TYPE_NORMAL
- en: '[databases]'
  prefs: []
  type: TYPE_NORMAL
- en: db01.example.org
  prefs: []
  type: TYPE_NORMAL
- en: db02.example.org
  prefs: []
  type: TYPE_NORMAL
- en: '[fedora:children]'
  prefs: []
  type: TYPE_NORMAL
- en: apps
  prefs: []
  type: TYPE_NORMAL
- en: databases
  prefs: []
  type: TYPE_NORMAL
- en: '[ubuntu:children]'
  prefs: []
  type: TYPE_NORMAL
- en: frontends
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible -i hostgroups-ini all --list-hosts
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'hosts (7):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: loadbalancer.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: app01.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: app02.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: db01.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: db02.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: web01.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: web02.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible -i hostgroups-ini '*' --list-hosts
  prefs: []
  type: TYPE_NORMAL
- en: 'hosts (7):'
  prefs: []
  type: TYPE_NORMAL
- en: loadbalancer.example.org
  prefs: []
  type: TYPE_NORMAL
- en: app01.example.org
  prefs: []
  type: TYPE_NORMAL
- en: app02.example.org
  prefs: []
  type: TYPE_NORMAL
- en: db01.example.org
  prefs: []
  type: TYPE_NORMAL
- en: db02.example.org
  prefs: []
  type: TYPE_NORMAL
- en: web01.example.org
  prefs: []
  type: TYPE_NORMAL
- en: web02.example.org
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: $ ansible -i hostgroups-ini frontends:apps --list-hosts
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'hosts (4):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: web01.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: web02.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: app01.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '! to exclude a specific group—you can combine this with other characters such
    as : to show (for example) all hosts except those in the apps group. Again, !
    is a special character in the shell and so you must quote your pattern string
    in single quotes for it to work, as in this example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible -i hostgroups-ini 'fedora:&apps' --list-hosts
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'hosts (2):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: app01.example.org
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '* wildcards in a similar manner to what you would use in the shell, as in this
    example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ansible-playbook -i hostgroups-ini site.yml --limit frontends:apps
  prefs: []
  type: TYPE_NORMAL
- en: PLAY [A simple playbook for demonstrating inventory patterns] *************************************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: TASK [Ping each host] *****************************************************************************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [web02.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [web01.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [app02.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: 'ok: [app01.example.org]'
  prefs: []
  type: TYPE_NORMAL
- en: PLAY RECAP ****************************************************************************************************************************************
  prefs: []
  type: TYPE_NORMAL
- en: 'app01.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: 'app02.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: 'web01.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: 'web02.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
