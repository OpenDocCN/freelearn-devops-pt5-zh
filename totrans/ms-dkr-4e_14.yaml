- en: '*Chapter 14*'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at Docker security, a topic at the forefront
    of everyone''s mind these days. We will split the chapter up into the following
    five sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Container considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker Bench security "applications"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party security services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using Docker Desktop, and we will be using Multipass
    to launch a Docker host that we will then launch some poorly configured container
    on. As in the previous chapters, I will be using my preferred operating system,
    which is macOS.
  prefs: []
  type: TYPE_NORMAL
- en: As previously, the Docker commands that we will run will work on all three of
    the operating systems that we have installed Docker on so far. However, some of
    the supporting commands, which will be few and far between, may only apply to
    macOS and Linux-based operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3m8ubVd](https://bit.ly/3m8ubVd)'
  prefs: []
  type: TYPE_NORMAL
- en: Container considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Docker was first released, there was a lot of talk about Docker versus
    virtual machines. I remember reading articles in magazines, commenting on threads
    on Reddit, and reading endless blog posts. In the early days of the Docker alpha
    and beta versions, people used to approach Docker containers like virtual machines,
    because there weren't really any other points of reference, and we viewed them
    as tiny VMs.
  prefs: []
  type: TYPE_NORMAL
- en: In the past, I would enable SSH, run multiple processes in containers, and even
    create my container images by launching a container and running the commands to
    install my software stack. We discussed in [*Chapter 2*](B15659_02_Final_JM_ePub.xhtml#_idTextAnchor068),
    *Building Container Images*, that you should never install, configure, and export
    SSH on your containers as it is regarded as a bad practice as Docker provides
    ways for you to access your containers without having to use SSH.
  prefs: []
  type: TYPE_NORMAL
- en: So, rather than discussing containers versus virtual machines, let's look at
    some of the considerations that you need to make when running containers, rather
    than virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: The advantages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you start a Docker container, Docker Engine does a lot of work behind the
    scenes. One of the tasks that Docker Engine performs when launching your containers
    is setting up namespaces and control groups. What does that mean? By setting up
    namespaces, Docker keeps the processes isolated in each container, not only from
    other containers but also from the host system. The control groups ensure that
    each container gets its own share of items, such as CPU, memory, and disk `I/O`.
    More importantly, they ensure that one container doesn't exhaust all of the resources
    on a given Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in [*Chapter 4*](B15659_04_Final_JM_ePub.xhtml#_idTextAnchor133)*,
    Managing Containers*, being able to launch your containers in a Docker controlled
    network means that you can isolate your containers at the application level; all
    of the containers for Application A will not have any access, at the network layer,
    to the containers for Application B.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this network isolation can run on a single Docker host by using
    the default network driver, or it can span multiple Docker hosts by using Docker
    Swarm's built-in, multi-host networking driver, or the Weave Net driver from Weave.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, what I consider one of the most significant advantages of Docker over
    a typical virtual machine is that you shouldn't have to log in to the container.
    Docker is trying its hardest to keep you from needing to log in to a container
    to manage the process that it is running. With commands such as `docker container
    exec`, `docker container top`, `docker container logs`, and `docker container
    stats`, you can do everything that you need to do, without exposing any more services
    than you have to.
  prefs: []
  type: TYPE_NORMAL
- en: Your Docker hosts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are dealing with virtual machines, you can control who has access to
    which virtual machine. Let's suppose that you only want **User 1**, who is a developer,
    to have access to the development VMs.
  prefs: []
  type: TYPE_NORMAL
- en: However, **User 2** is an operator who is responsible for both the development
    and production environments, so they need access to all of the VMs. Most virtual
    machine management tools allow you to grant role-based access to your VMs.
  prefs: []
  type: TYPE_NORMAL
- en: With Docker, you are at a slight disadvantage because everyone who has access
    to Docker Engine on your host, either through being granted sudo access or by
    having their user added to the Docker Linux group, will have access to every Docker
    container that you are running on that host.
  prefs: []
  type: TYPE_NORMAL
- en: They can run new containers, they can stop existing containers, and they can
    delete images as well. Be careful to whom you grant permission to access Docker
    Engine on your hosts. They mostly hold the keys to the kingdom, concerning all
    of your containers. Knowing this, it is recommended to use Docker hosts only for
    Docker; keep other services separate from your Docker hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Image trust
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are running virtual machines, you will most likely be setting them up
    yourself, from scratch. It's likely that, due to the size of the download (and
    also the effort in launching it), you will not download a prebuilt machine image
    that some random person on the internet created. Typically, if you were to do
    this, it would be a prebuilt virtual appliance from a trusted software vendor.
  prefs: []
  type: TYPE_NORMAL
- en: So, you will be aware of what is inside the virtual machine and what isn't,
    as you were responsible for building and maintaining it.
  prefs: []
  type: TYPE_NORMAL
- en: Part of the appeal of Docker is its ease of use; however, this ease of use can
    make it easy to ignore a quite crucial security consideration â€“ do you know what
    it is running inside your container?
  prefs: []
  type: TYPE_NORMAL
- en: We have already touched upon image trust in earlier chapters. For example, we
    spoke about not publishing or downloading images that haven't been defined using
    Dockerfiles, and not embedding custom code or secrets (and so on) directly into
    an image that you will be pushing to Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: While containers have the protection of namespaces, control groups, and network
    isolation, we discussed how a poorly judged image download could introduce security
    concerns and risk into your environment. For example, a legitimate container running
    an unpatched piece of software can add risk to the availability of your application
    and data.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered some basic principles, let's take a look at the Docker
    commands that can be used to help tighten up security, as well as to view information
    about the images that you might be using.
  prefs: []
  type: TYPE_NORMAL
- en: Docker commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two commands that we will be looking at. The first will be the `docker
    container run` command so that you can see some of the items that you can use
    to your advantage with this command. Secondly, we will take a look at the `docker
    container diff` command, which you can use to view what has been done with the
    image that you are planning to use.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how we can use these two commands to help secure our containers.
  prefs: []
  type: TYPE_NORMAL
- en: The Docker Run command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With respect to the `docker run` command, we will mainly focus on the option
    that allows you to set everything inside the container as read-only, instead of
    a specified directory or volume. This helps to limit the amount of damage that
    can be caused by malicious "applications" that could also hijack a vulnerable
    application by updating its binaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how to launch a read-only container, and then break down
    what it does, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are running a MySQL container and setting the entire container as
    read-only, except for the following folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/var/lib/mysql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/run/mysqld`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/tmp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These will be created as three separate volumes, and then mounted as read/write.
    If you do not add these volumes, then MySQL will not be able to start, as it needs
    read/write access to be able to create the socket file in `/var/run/mysqld`, some
    temporary files in `/tmp`, and finally, the databases themselves, in `/var/lib/mysql`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any other location inside the container won''t allow you to write anything
    in it. If you tried to run the following, it would fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command would give you the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This can be extremely helpful if you want to control where the containers can
    write to (or not write to). Be sure to use this wisely. Test thoroughly, as there
    can be consequences when "applications" can't write to certain locations.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the previous command, with `docker container run`, where we set everything
    to read-only (except for a specified volume), we can do the opposite and set just
    a single volume (or more, if you use more `-v` switches) to read-only.
  prefs: []
  type: TYPE_NORMAL
- en: 'The thing to remember about volumes is that when you use a volume and mount
    it in a container, it will mount as an empty volume over the top of the directory
    inside the container, unless you use the `--volumes-from` switch or add data to
    the container in some other way after it has been launched; for example, you could
    use something like the following command (which will not work):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will mount `/local/path/to/html/` from the Docker host to `/var/www/html/`
    and will set it to read-only. This can be useful if you don't want a running container
    to write to a volume, to keep the data or configuration files intact.
  prefs: []
  type: TYPE_NORMAL
- en: The docker diff command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take another look at the `docker diff` command; since it relates to the
    security aspects of containers, you may want to use the images that are hosted
    on Docker Hub or other related repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that whoever has access to your Docker host and the Docker daemon has
    access to all of your running Docker containers. That being said, if you don't
    have monitoring in place, someone could be executing commands against your containers
    and doing malicious things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the MySQL container that we launched in the previous
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that no files are returned. Why is that?
  prefs: []
  type: TYPE_NORMAL
- en: Well, the `docker diff` command tells you the changes that have been made to
    the image since the container was launched. In the previous section, we launched
    the MySQL container with the image read-only and then mounted volumes to where
    we knew MySQL would need to be able to read and write â€“ meaning that there are
    no file differences between the image that we downloaded and the container that
    we are running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop and remove the MySQL container, then prune the volumes by running the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, launch the same container again, minus the read-only flag and volumes;
    this gives us a different story, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there were two folders created, and several files added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is a great way to spot anything untoward or unexpected that may be going
    on within your container. Now that we have looked at how we can launch our containers
    more securely, let's discuss some of the other best practices we can apply.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at best practices when it comes to Docker. Some
    of these we have already mentioned in previous chapters. We will then discuss
    the **Center for Internet Security** guide, which documents how to properly secure
    all aspects of your Docker environment.
  prefs: []
  type: TYPE_NORMAL
- en: Docker best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we dive into the Center for Internet Security guide, let''s go over
    some of the best practices for using Docker, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Only launch one application per container**: Docker was built for this, and
    it makes everything easier, at the end of the day. The isolation that we discussed
    earlier is where this is key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Only install what you need**: As we already covered in previous chapters,
    if you have to install more services to support the one process your container
    should be running, I would recommend that you review the reasons why. This not
    only keeps your images small and portable, but it also reduces the potential attack
    surface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Review who has access to your Docker hosts**: Remember, whoever has root
    or sudo access to your Docker hosts has access to manipulate all of the images
    and running containers on the host, as well the ability to launch new ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Always use the latest version of Docker**: This will ensure that all security
    holes have been patched and that you have the latest features as well. While fixing
    security issues, keeping up to date using the community version may introduce
    problems caused by changes in functionality or new features. If this is a concern
    for you, then you might want to look at the LTS Enterprise versions available
    from Docker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use the resources available if you need help**: The Docker community is huge
    and immensely helpful. Use their website, documentation, and the Slack chat rooms
    to your advantage when planning your Docker environment and assessing platforms.
    For more information on how to access Slack and other parts of the community,
    see [*Chapter 16*](B15659_16_Final_JM_ePub.xhtml#_idTextAnchor922), *Next Steps
    with Docker*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Center for Internet Security benchmark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Center for Internet Security (CIS) is an independent, non-profit organization
    whose goal is to provide a secure online experience. They publish benchmarks and
    controls that are considered best practices for all aspects of IT.
  prefs: []
  type: TYPE_NORMAL
- en: The CIS benchmark for Docker is available for download, for free. You should
    note that it is currently a 257-page PDF, released under the Creative Commons
    license, and it covers Docker CE 18.09 and later.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be referring to this guide when you actually run the scan (in the
    next section of this chapter) and get results back as to what needs to (or should
    be) fixed. The guide is broken down into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host configuration**: This part of the guide is about the configuration of
    your Docker hosts. This is the part of the Docker environment where all your containers
    run. Thus, keeping it secure is of the utmost importance. This is the first line
    of defense against attackers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker daemon configuration**: This part of the guide has the recommendations
    that secure the running Docker daemon. Everything that you do to the Docker daemon
    configuration affects each and every container. These are the switches that you
    can attach to the Docker daemon that we saw previously, and to the items you will
    see in the next section when we run through the tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker daemon configuration files**: This part of the guide deals with the
    files and directories that the Docker daemon uses. This ranges from permissions
    to ownership. Sometimes, these areas may contain information that you don''t want
    others to know about, which could be in a plain text format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container images/runtime and build files**: This part of the guide contains
    both the information for securing the container images and the build files. The
    first part contains images, covering base images, and the build files that were
    used. As we covered previously, you need to be sure about the images that you
    are using, not only for your base images, but for any aspect of your Docker experience.
    This section of the guide covers the items that you should follow while creating
    your own base images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container runtime**: This section was previously a part of a later section,
    but it has been moved into its own section in the CIS guide. The container runtime
    covers a lot of security-related items. Be careful with the runtime variables
    that you are using. In some cases, attackers can use them to their advantage,
    when you think you are using them to your own advantage. Exposing too much in
    your containers, such as exposing application secrets and database connections
    as environment variables, can compromise the security of not only your container
    but the Docker host and the other containers running on that host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker security operations**: This part of the guide covers the security
    areas that involve deployment; the items are more closely tied to Docker best
    practices. Because of this, it is best to follow these recommendations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker Bench Security application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will cover the Docker Bench Security application that you
    can install and run. The tool will inspect the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The host configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker daemon configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container images and build files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The container runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker security operations Docker Swarm configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looks familiar? It should, as these are the same items that we reviewed in the
    previous section, only built into an application that will do a lot of the heavy
    lifting for you. It will show you what warnings arise within your configurations
    and will provide information on other configuration items, and even the items
    that have passed the test.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will look at how to run the tool, a live example, and what the output
    of the process means.
  prefs: []
  type: TYPE_NORMAL
- en: Running the tool on Docker for macOS and Docker for Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Running the tool is simple. It's already been packaged for us, inside a Docker
    container. While you can get the source code and customize the output or manipulate
    it in some way (say, emailing the output), the default may be all that you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool''s GitHub project can be found at [https://github.com/docker/docker-bench-security/](https://github.com/docker/docker-bench-security/),
    and to run the tool on a macOS or Windows machine, you simply have to copy and
    paste the following into your Terminal. The following command is missing the line
    needed to check `systemd`, as Moby Linux, which is the underlying operating system
    for Docker for macOS and Docker for Windows, does not run `systemd`. We will look
    at a `systemd`-basedsystem when we run the container on an Ubuntu Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the image has been downloaded, it will launch and immediately start to
    audit your Docker host, printing the results as it goes, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 â€“ Running a Docker Bench Security check'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image_00_0014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 â€“ Running a Docker Bench Security check
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are a few warnings **[WARN]**, as well as notes **[NOTE]**
    and information **[INFO]**; however, as this host is managed by Docker, as you
    would expect, there is not too much to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: Running on Ubuntu Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we look into the output of the audit in a little more detail, I am going
    to launch a vanilla Ubuntu server using `multipass` and perform a clean installation
    of Docker using the official installer by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, I will launch a few containers, all of which don''t have very
    sensible settings. I will launch the following two containers from Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, I will build a custom image, based on Ubuntu 16.04, that runs SSH using
    the following `Dockerfile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'I will build and launch the preceding Dockerfile using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in one image, we are mounting the root filesystem of our host
    with full read/write access in the `root-nginx` container. We are also running
    with extended privileges in `priv-nginx`, and finally, running SSH in `sshd`.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Please do run the previous Dockerfile or containers outside of this test; we
    are purposely launching containers that ignore best practices to get results from
    the scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the audit on our Ubuntu Docker host, I ran the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As we are running on an operating system that supports `systemd`, we are mounting
    `/usr/lib/systemd` so that we can audit it.
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot of output and a lot to digest, but what does it all mean? Let's
    take a look and break down each section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are four types of output that we will see, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[PASS]`: These items are solid and good to go. They don''t need any attention
    but are good to read, to make you feel warm inside. The more of these, the better!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[WARN]`: These are those items that need to be fixed. These are the items
    that we don''t want to see.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[INFO]`: These are items that you should review and fix if you feel they are
    pertinent to your setup and security needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[NOTE]`: These give best-practice advice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As mentioned, there are seven main sections that are covered in the audit,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Host configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker daemon configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker daemon configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container images and build files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The container runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker security operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Swarm configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at what we see in each section of the scan. These scan results
    are from a default Ubuntu Docker host, with no tweaks made to the system at this
    point. We want to focus on the `[WARN]` items in each section.
  prefs: []
  type: TYPE_NORMAL
- en: Other warnings may come up when you run yours, but these will be the ones that
    come up for most people (if not for everyone) at first.
  prefs: []
  type: TYPE_NORMAL
- en: Host configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'I had five items with a `[WARN]` status for my host configuration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Docker uses `/var/lib/docker` on the host machine to store all
    of its files, including all images, containers, and volumes created by the default
    driver. This means that this folder may grow quickly. As my host machine is running
    a single partition (and depending on what your containers are doing), this could
    potentially fill the entire drive, which would render my host machine unusable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: These warnings are being flagged because `auditd` is not installed, and there
    are no audit rules for the Docker daemon and associated files; for more information
    on `auditd`, see the blog post at [https://www.linux.com/topic/desktop/customized-file-monitoring-auditd/](https://www.linux.com/topic/desktop/customized-file-monitoring-auditd/).
  prefs: []
  type: TYPE_NORMAL
- en: Docker daemon configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'My Docker daemon configuration flagged up seven `[WARN]` statuses, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Docker allows traffic to pass between containers unrestricted,
    on the same host. It is possible to change this behavior; for more information
    on Docker networking, see [https://docs.docker.com/network/](https://docs.docker.com/network/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the user namespace is not remapped. Mapping them, while possible,
    can currently cause issues with several Docker features; see [https://docs.docker.com/engine/reference/commandline/dockerd/](https://docs.docker.com/engine/reference/commandline/dockerd/)
    for more details on known restrictions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'A default installation of Docker allows unrestricted access to the Docker daemon;
    you can limit access to authenticated users by enabling an authorization plugin.
    For more details, see [https://docs.docker.com/engine/extend/plugins_authorization/](https://docs.docker.com/engine/extend/plugins_authorization/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As I am only running a single host, I am not using a service such as `rsyslog`
    to ship my Docker host''s logs to a central server, nor have I configured a log
    driver on my Docker daemon; see [https://docs.docker.com/config/containers/logging/configure/](https://docs.docker.com/config/containers/logging/configure/)
    for more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `--live-restore` flag enables full support of daemon-less containers in
    Docker; this means that, rather than stopping containers when the daemon shuts
    down, they continue to run, and it properly reconnects to the containers when
    restarted.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is not enabled by default, due to backward compatibility issues. For more
    details, see [https://docs.docker.com/config/containers/live-restore/](https://docs.docker.com/config/containers/live-restore/%20):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two ways that your containers can route to the outside world: either
    by using a hairpin NAT, or a userland proxy. For most installations, the hairpin
    NAT mode is the preferred mode, as it takes advantage of iptables and has better
    performance. Where this is not available, Docker uses the userland proxy. Most
    Docker installations on modern operating systems will support hairpin NAT. For
    details on how to disable the userland proxy, see [https://docs.docker.com/config/containers/container-networking/](https://docs.docker.com/config/containers/container-networking/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This stops the processes within the containers from potentially gaining any
    additional privileges by setting `suid` or `sgid` bits; this could limit the impact
    of any dangerous operations trying to access privileged binaries.
  prefs: []
  type: TYPE_NORMAL
- en: Docker daemon configuration files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: I had no `[WARN]` statuses in this section, which is to be expected, as Docker
    was deployed using the Docker installer.
  prefs: []
  type: TYPE_NORMAL
- en: Container images and build files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'I had three `[WARN]` statuses for container images and build files; you may
    notice that multi-line warnings are prefixed with `*` after the status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The processes in the containers that I am running are all running as the root
    user; this is the default action of most containers. For more information, see
    [https://docs.docker.com/engine/security/security/](https://docs.docker.com/engine/security/security/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Enabling Content Trust for Docker ensures the provenance of the container images
    that you are pulling, as they are digitally signed when you push them; this means
    that you are always running the images that you intended to run. For more information
    on Content Trust, see [https://docs.docker.com/engine/security/trust/content_trust/](https://docs.docker.com/engine/security/trust/content_trust/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: When building your image, it is possible to build in a `HEALTHCHECK`; this ensures
    that when a container launches from your image, Docker will periodically check
    the status of your container and, if needed, it will restart or relaunch it. More
    details can be found at [https://docs.docker.com/engine/reference/builder/#healthcheck](https://docs.docker.com/engine/reference/builder/#healthcheck).
  prefs: []
  type: TYPE_NORMAL
- en: The container runtime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As we were a little silly when launching our containers on the Docker host
    that we audited, we know that there will be a lot of vulnerabilities here, and
    there are 11 of them altogether:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding vulnerability is a false positive â€“ we are not running SELinux,
    as it is an Ubuntu machine, and SELinux is only applicable to Red Hat-based machines.
    Instead, 5.1 shows us the result, which is a `[PASS]`, which we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The next `[WARN]` status is of our own making, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is also of our own making:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: These can be safely ignored; it should be very rare that you have to launch
    a container running in `Privileged mode`. It is only if your container needs to
    interact with Docker Engine running on your Docker host; for example, when you
    are running a GUI (such as Portainer), which we covered in [*Chapter 9*](B15659_09_Final_JM_ePub.xhtml#_idTextAnchor261),
    *Portainer â€“ A GUI for Docker*.
  prefs: []
  type: TYPE_NORMAL
- en: We have also discussed that you should not be running SSH in your containers.
    There are a few use cases, such as running a jump host within a certain network;
    however, these should be the exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next two `[WARN]` statuses are flagged because, by default on Docker, all
    running containers on your Docker hosts share the resources equally; setting limits
    on memory and the CPU priority for your containers will ensure that the containers
    that you want to have a higher priority are not starved of resources by lower-priority
    containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'As we already discussed earlier in the chapter, if possible, you should be
    launching your containers as read-only, and mounting volumes for where you know
    your process needs to write data to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason the following flags are raised is that we are not telling Docker
    to bind our exposed port to a specific IP address on the Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'As my test Docker host only has a single NIC, this isn''t too much of a problem.
    However, if my Docker host had multiple interfaces, then this container would
    be exposed to all of the networks, which could be a problem if I had, for example,
    an external and internal network. See [https://docs.docker.com/network/](https://docs.docker.com/network/)
    for more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Although I haven''t launched my containers using the `--restart` flag, there
    is no default value for `MaximumRetryCount`. This means that if a container failed
    over and over, it would quite happily sit there attempting to restart. This could
    have a negative effect on the Docker host; adding a `MaximumRetryCount` of `5`
    will mean that the container will attempt to restart five times before giving
    up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Docker does not put a restriction on a process or its child processes
    gaining new privileges via `suid` or `sgid` bits. To find out details on how you
    can stop this behavior, see [https://www.projectatomic.io/blog/2016/03/no-new-privs-docker/](https://www.projectatomic.io/blog/2016/03/no-new-privs-docker/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we are not using any health checks, meaning that Docker will not periodically
    check the status of your containers. To see the GitHub issue for the pull request
    that introduced this feature, see [https://github.com/moby/moby/pull/22719](https://github.com/moby/moby/pull/22719):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Potentially, an attacker could trigger a fork bomb with a single command inside
    your container. This has the potential to crash your Docker host, and the only
    way to recover would be to reboot the host. You can protect against this by using
    the `--pids-limit` flag. For more information, see the pull request at [https://github.com/moby/moby/pull/18697](https://github.com/moby/moby/pull/18697).
  prefs: []
  type: TYPE_NORMAL
- en: Docker security operations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This section includes `[INFO]` about best practices, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Docker Swarm configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This section includes `[PASS]` information, as we don't have Docker Swarm enabled
    on the host.
  prefs: []
  type: TYPE_NORMAL
- en: Removing the Multipass machine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have finished with the Ubuntu server, you can remove it by running
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Remember, there is no warning when running the preceding command; it will delete
    the running machine straight away.
  prefs: []
  type: TYPE_NORMAL
- en: Summing up Docker Bench
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you have seen, running Docker Bench against your Docker host is a much better
    way to get an understanding of how your Docker host stacks up against the CIS
    Docker Benchmark; it is certainly a lot more manageable than manually working
    through every single test in the 257-page document.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered how you can assess and secure your Docker host, let's
    quickly discuss how we can secure images.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party security services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we finish this chapter, we are going to take a look at some of the third-party
    services available to help you with the vulnerability assessment of your images.
  prefs: []
  type: TYPE_NORMAL
- en: Quay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quay, an image registry by Red Hat, is similar to Docker Hub/Registry; one difference
    is that Quay actually performs a security scan of each image after it is pushed/built.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the results of the scan by viewing the **Repository Tags** for
    your chosen image. Here you will see a column for **Security Scan**. As you can
    see in the following screenshot, in the example image that we created, there are
    no problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 â€“ A passed security scan on Quay'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image_00_0024.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.2 â€“ A passed security scan on Quay
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on **Passed** will take you to a more detailed breakdown of any vulnerabilities
    that have been detected within the image. As there are no vulnerabilities at the
    moment (which is a good thing), this screen does not tell us much. However, clicking
    on the **Packages** icon in the left-hand menu will present us with a list of
    the packages that the scan has discovered.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our test image, it has found 34 packages with no vulnerabilities, all of
    which are displayed here, along with confirmation of the version of the package,
    and how they were introduced to the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 â€“ A list of all packages installed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image_00_0034.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.3 â€“ A list of all packages installed
  prefs: []
  type: TYPE_NORMAL
- en: As you can also see, Quay is scanning our publicly available image, which is
    being hosted on the free-of-charge open source plan that Quay offers. Security
    scanning comes as standard with all plans on Quay.
  prefs: []
  type: TYPE_NORMAL
- en: Clair
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Clair is an open source project from Red Hat. In essence, it is a service that
    provides the static analysis functionality for both the hosted version of Quay
    and the commercially supported, enterprise version.
  prefs: []
  type: TYPE_NORMAL
- en: 'It works by creating a local mirror of the following vulnerability databases:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Debian Security Bug Tracker: [https://security-tracker.debian.org/tracker/](https://security-tracker.debian.org/tracker/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ubuntu CVE Tracker: [https://launchpad.net/ubuntu-cve-tracker/](https://launchpad.net/ubuntu-cve-tracker/%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Red Hat Security Data: [https://www.redhat.com/security/data/metrics/](https://www.redhat.com/security/data/metrics/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Oracle Linux Security Data: [https://linux.oracle.com/security/](https://linux.oracle.com/security/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alpine SecDB: [https://git.alpinelinux.org/cgit/alpine-secdb/](https://git.alpinelinux.org/cgit/alpine-secdb/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NIST NVD: [https://nvd.nist.gov/](https://nvd.nist.gov/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once it has mirrored the data sources, it mounts the image's filesystem, and
    then performs a scan of the installed packages, comparing them to the signatures
    in the preceding data sources.
  prefs: []
  type: TYPE_NORMAL
- en: Clair is not a straightforward service; it only has an API-driven interface,
    and there are no fancy web-based or command-line tools that ship with Clair by
    default. The documentation for the API can be found at [https://app.swaggerhub.com/apis/coreos/clair/3.0](https://app.swaggerhub.com/apis/coreos/clair/3.0).
  prefs: []
  type: TYPE_NORMAL
- en: The installation instructions can be found at the project's GitHub page, at
    [https://github.com/quay/clair/](https://github.com/quay/clair/).
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can find a list of tools that support Clair on its integration page,
    at [https://github.com/quay/clair/blob/master/Documentation/integrations.md](https://github.com/quay/clair/blob/master/Documentation/integrations.md).
  prefs: []
  type: TYPE_NORMAL
- en: Before we finish, there is one more tool to look at, and this is one we can
    run locally.
  prefs: []
  type: TYPE_NORMAL
- en: Anchore
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final tool that we are going to cover is Anchore. This comes in several
    versions; there are cloud-based offerings and an "on-premises" enterprise version,
    both of which come with a full, web-based graphical interface. There is a version
    that hooks into Jenkins, and also the open source command-line scanner, which
    is what we are going to take a look at now.
  prefs: []
  type: TYPE_NORMAL
- en: 'This version is distributed as a Docker Compose file, so we will start by creating
    the folders that we need, and we will also download the Docker Compose file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the basics in place, you can pull the images and start the
    containers, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we can interact with our Anchore deployment, we need the command-line
    client. Luckily, the Docker Compose file we downloaded comes with a container
    running the client configured out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show you the overall status of your installation; it might take a
    minute or two from when you first launched for everything to show as up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 â€“ Checking the status of the Anchore engine'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image_00_0044.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.4 â€“ Checking the status of the Anchore engine
  prefs: []
  type: TYPE_NORMAL
- en: 'The next command shows you where Anchore is in the database sync:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following screenshot, my installation is currently syncing
    the databases. This process can take up to a few hours; however, for our example,
    we are going to be scanning an Alpine Linux-based database, which are the first
    databases to be downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 14.5 â€“ Checking the status of the feed download'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image_00_0054.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.5 â€“ Checking the status of the feed download
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we have to grab an image to scan; let''s grab an older image, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take a minute or two to run its initial scan; you can check the status
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'After a while, the status should change from **analyzing** to **analyzed**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show you an overview of the image, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 â€“ Viewing information on the analyzed image'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image_00_0064.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.6 â€“ Viewing information on the analyzed image
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then view a list of problems (if there are any) by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following screenshot, each package that is listed has
    the current version, a link to the CVE issue, and also confirmation of the version
    number that fixes the reported issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 14.7 â€“ Reviewing the vulnerabilities found by Anchore'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image_00_0074.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.7 â€“ Reviewing the vulnerabilities found by Anchore
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the following commands to remove the Anchore containers and database
    volume:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Also, don't forget to remove the `anchore` folder we created at the start of
    the section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered some aspects of Docker security. First, we took
    a look at some of the things that you must consider when running containers (versus
    typical virtual machines) with regard to security. We looked at the advantages
    and your Docker host, and then we discussed image trust. We then took a look at
    the Docker commands that we can use for security purposes.
  prefs: []
  type: TYPE_NORMAL
- en: We launched a read-only container so that we could minimize any potential damage
    an intruder could do within our running containers. As not all "applications"
    lend themselves to running in read-only containers, we then looked at how we can
    track changes that have been made to the image since it was launched. It is always
    useful to be able to easily discover any changes that were made on the filesystem
    at runtime when trying to look into any problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we discussed the Center for Internet Security guidelines for Docker.
    This guide will assist you in setting up multiple aspects of your Docker environment.
    Lastly, we took a look at Docker Bench Security. We looked at how to get it up
    and running, and we ran through an example of what the output would look like.
    We then analyzed the output to see what it meant. Remember the seven items that
    the application covered: the host configuration, the Docker daemon configuration,
    the Docker daemon configuration files, the container images and build files, the
    container runtime, the Docker security operations, and the Docker Swarm configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how Docker can fit into your existing workflows,
    as well as some new ways to approach working with containers.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When launching a container, how can we make all of it, or parts of it, read-only?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How many processes should you be running per container?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the best way to check your Docker installation against the CIS Docker
    benchmark?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When running the Docker Bench Security application, what should be mounted?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Quay only supports image scanning for private images'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information, visit the website at [https://www.cisecurity.org/](https://www.cisecurity.org/).
    The Docker Benchmark can be found at [https://www.cisecurity.org/benchmark/docker/](https://www.cisecurity.org/benchmark/docker/).
  prefs: []
  type: TYPE_NORMAL
