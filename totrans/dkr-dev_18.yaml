- en: '*Chapter 15*: Scanning, Monitoring, and Using Third-Party Tools'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have explored how we can manually configure our Docker containers
    to ensure security is a priority. In this chapter, we will look at some of the
    tools available to automatically scan our images and monitor our production loads.
    This will provide a jumping off spot for you to expand your Docker-based projects
    further, based upon your cloud provider if you use one.
  prefs: []
  type: TYPE_NORMAL
- en: We will start off by looking at DevOps solutions such as Anchore Engine for
    scanning images for security vulnerabilities, review `docker stats` and learn
    how it is useful, set up cAdvisor for local monitoring, and understand how Datadog
    can be used as a cloud-based solution for gathering container stats.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will also briefly review AWS security options including GuardDuty
    for monitoring production environments and cover some of the features that Microsoft
    Azure offers. You'll gain an understanding of what tools are available to **Google
    Cloud Platform** (**GCP**) users and deploy the Datadog Agent to your container
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and monitoring – cloud and DevOps security for containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your containers using AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your containers using Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your containers using GCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started by looking at techniques for monitoring containers, scanning
    for security issues.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need to have access to a Linux machine running Docker.
    We recommend that you use the setup you have been using so far in this book.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, you will need an account on Docker Hub in order to access
    images located there. If you have not already set one up during previous chapters,
    you can do so via [https://hub.docker.com:](https://hub.docker.com:)
  prefs: []
  type: TYPE_NORMAL
- en: In order to use many of the programs explored in this chapter, you will need
    to download them from the web. We'll provide links in each section where relevant
    so you know where to get them from. In some instances, you may need to set up
    an account in order to use a service or download a tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/30VfWu8](https://bit.ly/30VfWu8)'
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and monitoring – cloud and DevOps security for containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin to look at specific tools for monitoring and scanning your containers,
    we shall first define exactly what we mean by the term monitoring in a security
    context.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen throughout this book, containers provide a mechanism to serve
    up applications in small self-contained environments. However, we need to ensure
    that released software does not suffer from performance degradation while running.
    For example, we need to know if a container is consuming a lot of resources and
    thereby impacting the overall performance of our environment. You may already
    have some understanding of this concept from [*Chapter 10*](B11641_10_Final_AM_ePub.xhtml#_idTextAnchor226),
    *Monitoring Docker Using Prometheus, Grafana, and Jaeger*.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, monitoring allows us to look for anomalies that may indicate that
    the system is under attack or has been compromised in some fashion. While elsewhere
    in this book monitoring has been focused on ensuring system stability and performance,
    we will use those concepts from a security angle. Security scanning applications
    are an important part of any tool chain, but may not pick up every issue, especially
    newer exploits. Therefore, looking for negative side effects of a malicious software's
    presence is an important defense mechanism. As such, combining scanning prior
    to release, monitoring post release, and incident response are important parts
    of running a production container system.
  prefs: []
  type: TYPE_NORMAL
- en: A note on sandbox environments
  prefs: []
  type: TYPE_NORMAL
- en: One concept that may also be useful to understand is a sandbox environment.
    A sandbox provides an environment for isolating and testing untrusted code. These
    environments are useful for reviewing containers you believe may be infected with
    malware without risking impacting live systems or development environments your
    team uses.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to start by looking at the scanning stage in the
    CI/CD (DevOps) pipeline, before investigating how monitoring tools can be used
    in conjunction with them to protect our systems. Let's get started with Anchore
    Engine for scanning our containers.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning using Anchore Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When building out a DevOps pipeline, scanning our containers for security issues
    is an important consideration. One of the final steps in a typical CI process
    is to build the container itself, having tested the software we intend to deploy
    to it. As you have seen throughout this book, we have experimented with a number
    of technologies deployed within containers. While there are many security tools
    for each language, whether it be JavaScript or PHP (which are sadly out of scope
    for this book), we shouldn't fail to lessen our manual security burden at the
    container level by using automated tools.
  prefs: []
  type: TYPE_NORMAL
- en: While we have seen the importance of pulling down signed images, it certainly
    doesn't hurt to scan them. As the saying goes, *better safe than sorry!*
  prefs: []
  type: TYPE_NORMAL
- en: If we discover that an image we have included in our build is compromised or
    a tag violates an internal work security policy or compliance, we know that the
    whole build is thus vulnerable to attack and can in turn prevent it from reaching
    our production environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, we can think of the security scanning process as the following two
    interrelated steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the image we are including in the `Dockerfile`, and also the configuration
    in the `Dockerfile` itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensuring that the container matches any internal requirements that we may have
    such as not using blacklisted images. In this case, the image may have not been
    blacklisted purely for security reasons, but also for performance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to accommodate these two factors, we need a container scanning tool
    that allows us the flexibility of defining our own policies on top of standard
    security considerations.
  prefs: []
  type: TYPE_NORMAL
- en: "One of the most popular open source tools on the market that allows us to meet\
    \ both these goals is Anchore Engine. You can find the official website at: \L\
    [https://anchore.com/engine/](https://anchore.com/engine/)."
  prefs: []
  type: TYPE_NORMAL
- en: In addition to a large number of features we will shortly investigate, it is
    also an open source project. So, if you wish to contribute to it, make sure to
    check out the GitHub repository at [https://github.com/anchore/anchore-engine](https://github.com/anchore/anchore-engine).
  prefs: []
  type: TYPE_NORMAL
- en: At its heart, Anchore is an engine for scanning containers for security issues.
    It can easily be hooked into your CI pipeline to provide vulnerability and policy
    scanning prior to deployment. Let's take a look at getting it installed and running
    a basic scan against the latest Alpine image.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Anchore Engine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installing Anchore Engine is straightforward. First, we need to start with
    the engine portion of the product. Let''s create and navigate into a new directory
    called `aevolume`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, pull down the latest version of Anchore Engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now run Docker''s `create` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Use curl to grab the docker-compose.yaml
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also copy the `docker-compose.yaml` via curl using: `curl` [https://docs.anchore.com/current/docs/engine/quickstart/docker-compose.yaml](https://docs.anchore.com/current/docs/engine/quickstart/docker-compose.yaml)
    `> docker-compose.yaml`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy over the `docker-compose` file to your current directory and then remove
    the `ae` folder that was created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, run the `pull` and `up` commands as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to install the CLI that can interact with the engine. You have
    several options here, including the Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use one of the methods listed here, which will install the CLI
    locally onto your machine: [https://github.com/anchore/anchore-cli](https://github.com/anchore/anchore-cli).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python version of the CLI can be installed using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have pulled the container image and wish to use the default credentials,
    run the following command to be dropped into the CLI shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the following section will be use the Python command line version of the
    CLI to interact with the engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now execute the CLI commands against the engine from within the container
    shell, or from the CLI if you''ve installed it manually. The following example
    demonstrates calling the endpoint via the CLI, passing in the credentials and
    endpoint, and requesting the system status information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see some status results in your console indicating the engines
    are up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now let's review the scanning step.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and scanning images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's try out Anchore Engine by running a scan on the latest Alpine container.
    You'll remember that Alpine is the base operating system that our `shipitclicker`
    image version 0.1 has been using so far. Therefore, confirming this is free of
    issues is a good first step.
  prefs: []
  type: TYPE_NORMAL
- en: When we run a scan, it checks the image against what is known as a set of **policies**.
    Policies in Anchore are collections of whitelists and checks that the image must
    pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process to kick off a scan is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the Alpine image using the CLI command by executing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When this completes successfully, you should see something similar to the following.
    This tells us the image was added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our image hasn''t been analyzed by Anchore yet. This is where we extract and
    classify metadata. So, let''s move the image into this state as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once complete, we can now run a vulnerability scan on the Alpine image using
    this command. Here, we are checking for operating-system-level package vulnerabilities
    using the `os` property. In addition to `os`, we have the option of checking for
    `non-os` (this includes language-specific packages such as Python PIP and Ruby
    GEM types) and `all`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If everything is successful and the image passes, you will not see any vulnerabilities
    displayed on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If a vulnerability is found, it will come back in the following format:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By default, the basic Anchore installation policy will scan for CVE issues and
    Dockerfile problems, such as those we have explored in the previous few chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you have the scanning engine in place, you can begin to build out your
    own policies and scan against them. For more information, refer to the Anchor
    policy documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.anchore.com/current/docs/using/cli_usage/policies/](https://docs.anchore.com/current/docs/using/cli_usage/policies/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, to see examples of policies you can copy and modify, check out the Anchore
    Hub page on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/anchore/hub](https://github.com/anchore/hub)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether defining custom policies or reusing others, these JSON files can be
    added using the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once added, they can then be activated using the `activate` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to know a policy ID, you can use the `policy list` command from
    the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As an experiment, you might like to run the default or your own policies against
    the other images in the Docker for Developers Docker Hub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://hub.docker.com/r/dockerfordevelopers/shipitclicker/tags](https://hub.docker.com/r/dockerfordevelopers/shipitclicker/tags)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This covers the basics of getting up and running. If you wish to add scanning
    to your DevOps pipeline, Anchore integrates with a number of CI/CD systems, including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: CloudBees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitLab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CircleCI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Codefresh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Integration instructions for each platform can be found on the Anchore website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.anchore.com/current/docs/using/integration/ci_cd/](https://docs.anchore.com/current/docs/using/integration/ci_cd/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anchore also includes a plugin for Jenkins, so you can experiment with integrating
    it with the Jenkins setup we completed earlier in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://plugins.jenkins.io/anchore-container-scanner/](https://plugins.jenkins.io/anchore-container-scanner/)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's quickly mention another tool before we move on to looking at monitoring
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: A brief mention of Chef InSpec
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another tool you may be interested in reviewing when considering scanning container
    infrastructure is Chef InSpec.
  prefs: []
  type: TYPE_NORMAL
- en: Chef InSpec is an open source framework like Anchore but geared toward testing
    and auditing all of your applications and infrastructure. This includes running
    auditing tests against Docker. If you are looking for an all-in-one solution for
    infrastructure beyond just your container environment, this may meet your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'A complete walk-through of InSpec is out of scope of this book, however, if
    you would like to read more about it, you can find further information in the
    document portal at the InSpec website: [https://www.inspec.io/docs/](https://www.inspec.io/docs/).'
  prefs: []
  type: TYPE_NORMAL
- en: In summary, we can scan our containers before deploying them to check if they
    are secure. Let's now move on and look at Docker stats for container monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: Native monitoring locally using Docker stats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we have deployed our containers and believe that they are secure, we should
    consider using monitoring tools to review performance and help investigate problems
    when they arise.
  prefs: []
  type: TYPE_NORMAL
- en: Before exploring some of the complex and comprehensive tools available in the
    cloud, we can use Docker's native stats tool to get a quick overview of the container's
    health. This can be useful if you are quickly testing a container in an isolated
    sandbox environment due to a suspicion that some software on it may be using up
    resources in an anomalous fashion – for example, if you suspect a web application
    may be infected by a coin miner that wasn't picked up at the CI stage.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Running a container in a VM sandbox, as well as allowing you to probe performance
    metrics, allows you to safely scan it for security issues without risking infecting
    the underlying machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access data on your container''s performance, you can execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For each container, you will see CPU usage, memory usage, the memory limit
    (`MEM`), `% NET I/O`, and finally, `BLOCK I/O`. The following example demonstrates
    a typical output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: While the `stats` command is useful when doing local development or if you wish
    to get a quick snapshot of how a system is performing, it would be nice to gather
    a more comprehensive set of metrics. One method of achieving this is to use the
    Stats API. We'll now briefly look at this and also consider some of the security
    implications around it.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Stats API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Stats API is a more comprehensive set of results, returned in JSON format,
    and is available on the Docker socket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You'll remember from the *Securing the Daemon Socket* section in [*Chapter 12*](B11641_12_Final_NM_ePub.xhtml#_idTextAnchor278),
    *Introduction to Container Security*, that we need to ensure an attacker cannot
    compromise the socket and then use it to gain root access to the underlying host.
    We can do this by encrypting the traffic using TLS. Refer back to this chapter
    if you need help in getting this set up.
  prefs: []
  type: TYPE_NORMAL
- en: The Stats API operates using a REST architecture and thus takes HTTP requests
    as queries. You can see examples on the official documentation site at [https://docs.docker.com/engine/api/latest/](https://docs.docker.com/engine/api/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: Requests to the API can be made from the command line using netcat or `curl`,
    with a third-party tool such as Postman, or you can write your own script using
    Python, Bash, or similar, to hit the endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `curl` as an example, you can replace the value in this command with
    your own and execute it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You should see a JSON object returned with the results. These are more comprehensive
    than using the Docker command, and may be more useful if you wish to save them
    as JSON files for further analysis, for example, if gathering data on a container
    you may believe is compromised.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the native Docker tools, Google provides **Container Advisor**
    (**cAdvisor**) for gathering metrics on your container. We will now briefly take
    a look at this, as a third option for local monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: cAdvisor for container monitoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'cAdvisor is a Google-managed software project for providing container insights
    into container performance and resource usage. The source code for cAdvisor is
    available on GitHub at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/google/cadvisor](https://github.com/google/cadvisor)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To test it out, you can use the standard demo container provided by Google.
    Simply run the following command to pull it down from Google Container Registry
    and start it up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can now access cAdvisor's web portal on port `8080` of `localhost`. If you
    have other services running on this port, such as Jenkins, you can change the
    cAdvisor port in the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try accessing `http://localhost:8080/containers/` and you should see the dashboard
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – cAdvisor dashboard](img/B11641_15_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – cAdvisor dashboard
  prefs: []
  type: TYPE_NORMAL
- en: From this dashboard, you can explore a variety of metrics ranging from filesystem
    and memory to CPU and processes. Monitoring these for poor performance can be
    a useful tool to monitor security issues as we have noted elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if resource usage seems to be abnormally high, this can be an indication
    of software that it isn't functioning properly, or a potential security issue,
    such as malware running on the container.
  prefs: []
  type: TYPE_NORMAL
- en: All of this is very useful for small local systems and perhaps a quick investigation
    of a potentially compromised container, but what about monitoring our containers
    in a production environment and gathering actionable data if we believe a security
    issue may exist? Well, we can look at one of the many third-party tools that exist
    that allow us to gather metrics and build comprehensive dashboard and alerting
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this, we are going to look at one of the most popular tools on
    the market for gathering monitoring data for Kubernetes and Docker environments,
    Datadog.
  prefs: []
  type: TYPE_NORMAL
- en: Aggregating monitoring data in the cloud with Datadog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For commercial projects where environments are deployed to a cloud environment
    or on your own data center, we need a platform that is capable of aggregating
    data from a variety of inputs and then presenting it in a fashion you can work
    with.
  prefs: []
  type: TYPE_NORMAL
- en: Datadog is one such product capable of achieving this and provides plugins for
    both simple Docker and advanced Kubernetes-based environments. It is also supported
    on a number of platforms, including major cloud providers such as AWS. Datadog
    ([https://www.datadoghq.com/](https://www.datadoghq.com/)) offers a free 14-day
    trial so you can experiment with their container features and decide if they meet
    your needs. You'll find this a worthy rival to some of the tools explored in earlier
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: So, now let's take a look at the agents you can run for Kubernetes and Docker
    on your nodes to start sending data back to Datadog.
  prefs: []
  type: TYPE_NORMAL
- en: Datadog agents for Docker and Kubernetes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have an account set up at [https://www.datadoghq.com/](https://www.datadoghq.com/),
    you can install the Datadog Agent on a test node to monitor performance.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'We''d recommend starting with a test environment before trying to deploy the
    production.  We also recommend that, before deploying to your production environment,
    you familiarize yourself with the Docker and Kubernetes agent documentation at:
    [https://docs.datadoghq.com/agent/docker/?tab=standard](https://docs.datadoghq.com/agent/docker/?tab=standard).'
  prefs: []
  type: TYPE_NORMAL
- en: The following examples will cover installing Docker Agent and also the Kubernetes
    agent. Each example uses a cluster with only a single node for demonstration purposes.
    You are welcome to reuse the Docker container from [*Chapter 12*](B11641_12_Final_NM_ePub.xhtml#_idTextAnchor278),
    *Introduction to Container Security*, or one of the other containers used elsewhere
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and monitoring Docker Agent
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Your first task is to install the Docker Agent on the host. The Datadog Docker
    Agent is responsible for collecting the metrics and passing them back to your
    account dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the agent is now incredibly easy. From within your host, execute
    the following Docker command to include the Datadog Agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Based upon your OS version, and the version of the agent you have installed,
    you can then confirm it is running by checking the list of commands here:'
  prefs: []
  type: TYPE_NORMAL
- en: https://docs.datadoghq.com/agent/guide/agent-commands/?tab=agentv6v7#agent-status-and-information
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Datadog dashboard you should now see data being returned. You can
    now begin to explore the metrics that come back from your containers, and set
    alerts when issues arise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Example of the Datadog dashboard showing metrics](img/B11641_15_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – Example of the Datadog dashboard showing metrics
  prefs: []
  type: TYPE_NORMAL
- en: 'The next area you may be interested in exploring is the **Security** option
    in the menu. Select this and follow the wizard to set up security monitoring.
    Once complete, you can enable and disable security **Detection Rules**, as the
    following screenshot demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Detection rules in Datadog](img/B11641_15_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – Detection rules in Datadog
  prefs: []
  type: TYPE_NORMAL
- en: 'For more on setting monitors and alerts for containers in Datadog, please refer
    to the documentation here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.datadoghq.com/monitors/](https://docs.datadoghq.com/monitors/)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at the Kubernetes agent equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and monitoring the Kubernetes agent
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As with our previous Docker example, we need to install the agent first. To
    do this, we can deploy a DaemonSet via Helm. The following instructions use Helm
    version 3.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Remember to run add `helm repo add stable,` [https://kubernetes-charts.storage.googleapis.com](https://kubernetes-charts.storage.googleapis.com),
    if you haven't already, to add stable to your repositories.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the official Helm file (`values.yaml`) containing the configuration
    from GitHub at ([https://github.com/helm/charts/blob/master/stable/datadog/values.yaml](https://github.com/helm/charts/blob/master/stable/datadog/values.yaml)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will need to grab your API key from your account. With the API key,
    we can now complete the installation process. In the following command, replace
    `{API_KEY}` with your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a confirmation in your terminal that the deployment was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Datadog Agent deployment ](img/B11641_15_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Datadog Agent deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you have deployed the agent, it will start to collect metrics from Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Example dashboard metrics](img/B11641_15_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – Example dashboard metrics
  prefs: []
  type: TYPE_NORMAL
- en: As part of this installation process, the `kube-state-metrics` Helm chart is
    also included. This Helm chart installs the `kube-state-metrics` service ([https://github.com/kubernetes/kube-state-metrics](https://github.com/kubernetes/kube-state-metrics)).
  prefs: []
  type: TYPE_NORMAL
- en: A variety of data is collected by this service and you can view the exposed
    metrics at [https://github.com/kubernetes/kube-state-metrics/tree/master/docs](https://github.com/kubernetes/kube-state-metrics/tree/master/docs).
  prefs: []
  type: TYPE_NORMAL
- en: For example, you may be interested in the metrics around secrets, so you can
    see what data is being gathered by reviewing the Kubernetes log collection document.
    You can also enable log collection via Helm. To do this, update the `datadog-values.yaml`
    file to set the `enabled` and `containerCollectAll` key-value pairs both to `true`.
    Once you have done this, run `helm upgrade` to update your Datadog Helm chart.
  prefs: []
  type: TYPE_NORMAL
- en: With the metrics from your nodes being sent back to the Datadog default Kubernetes
    dashboard, you can start to configure alerting and monitoring and explore the
    many features Datadog offers.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can create a custom dashboard that displays the number of
    security signals discovered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B11641_15_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – Dashboard list
  prefs: []
  type: TYPE_NORMAL
- en: We've briefly seen how we can use third-party tools to monitor our containers
    in a security context. This can help to alert us about security issues that may
    manifest their symptoms as performance problems.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at some of the tools provided by the major cloud platforms out
    there. Both Datadog and the CI/CD scanning pipeline we discussed can be integrated
    with the providers listed in the following sections, to provide an even more comprehensive
    security posture.
  prefs: []
  type: TYPE_NORMAL
- en: Securing your containers using AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of approaches we can take to securing containers in the cloud.
    We will start by looking at **Amazon Web Services**, commonly known as **AWS**.
    This section of the book assumes you are already familiar with working in AWS
    for hosting container-based projects. If you use a different service, such as
    Azure or GCP, then please feel free to skip ahead to the *Azure container security*
    and *Google container security options* sections respectively. The topic of AWS
    and container hosting is also discussed in [*Chapter 5*](B11641_05_Final_NM_ePub.xhtml#_idTextAnchor080),
    *Alternatives for Deploying and Running Containers in Production*, and [*Chapter
    8*](B11641_08_Final_AM_ePub.xhtml#_idTextAnchor157), *Deploying Docker Apps to
    Kubernetes*. Let's take a look at the tools used for monitoring in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Security alerts for AWS with GuardDuty
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A number of tools exist either in AWS or as third-party plugins that can be
    used to monitor your Amazon environment hosting your container infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon's major tool for monitoring security issues within a VPC is GuardDuty
    ([https://aws.amazon.com/guardduty/](https://aws.amazon.com/guardduty/)).
  prefs: []
  type: TYPE_NORMAL
- en: We've seen how we can monitor container health with Datadog, but also saw how
    important it is to monitor the environment that supports our infrastructure. Complex
    production instances often use AWS services that sit outside of **Elastic Kubernetes
    Service** (**EKS**), **Elastic Container Service** (**ECS**), and **Elastic Compute
    Cloud** (**EC2**). Examples include the IAM roles you might have used to set up
    CloudWatch metrics or S3 buckets earlier in this book.
  prefs: []
  type: TYPE_NORMAL
- en: AWS GuardDuty provides a mechanism to monitor our cloud-based environment to
    ensure that any attacks within the VPC that hosts our containers can be tracked
    down. This is achieved by being integrated with CloudWatch, which allows us to
    trigger certain security actions based upon the type of alert we see, such as
    triggering a lambda function, or sending the events on to a third-party application
    or an S3 bucket for storage.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to enable GuardDuty, you will need a VPC setup hosting your containers,
    such as the one configured in [*Chapter 8*](B11641_08_Final_AM_ePub.xhtml#_idTextAnchor157),
    *Deploying Docker Apps to Kubernetes*.
  prefs: []
  type: TYPE_NORMAL
- en: With this in place, you can now create a rule to allow CloudWatch to send events
    for anything that GuardDuty discovers. This is especially useful for spotting
    whether containers are generating suspicious network traffic in your VPC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the AWS CLI, we can now enable CloudWatch to start sending the previously
    mentioned events. To do this, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'With these events enabled, you have a number of options for next steps. You
    could, for example, attach a lambda function that will handle events that are
    triggered and act on them, or integrate CloudWatch GuardDuty events with your
    Datadog setup, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/DataDog/datadog-serverless-functions/tree/master/aws/logs_monitoring](https://github.com/DataDog/datadog-serverless-functions/tree/master/aws/logs_monitoring)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to write the results of CloudWatch GuardDuty events to the S3 bucket
    created in [*Chapter 10*](B11641_10_Final_AM_ePub.xhtml#_idTextAnchor226), *Monitoring
    Docker Using Prometheus, Grafana, and Jaeger*, in the *Storing logs for the long
    term with AWS S3* section, then you can attach the lambda function as an event
    rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of a lambda function that can be used to write to the S3 bucket
    is provided by AWS at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://aws.amazon.com/blogs/database/monitoring-your-security-with-guardduty-in-real-time-with-amazon-elasticsearch-service/](https://aws.amazon.com/blogs/database/monitoring-your-security-with-guardduty-in-real-time-with-amazon-elasticsearch-service/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have modified this lambda to your needs and added it between the `<`
    and `>` brackets, you can include the required permissions  by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This should act as a jumping-off point for you to explore GuardDuty in more
    detail and expand upon the setup you have created over the course of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to store findings to S3
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the steps provided by AWS here for exporting GuardDuty findings
    to an S3 bucket: [https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_exportfindings.html](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_exportfindings.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Other security features in AWS you may be interested in checking out include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Inspector for analyzing application security: [https://aws.amazon.com/inspector/](https://aws.amazon.com/inspector/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS Security Hub for creating a unified central security center: [https://aws.amazon.com/security-hub/](https://aws.amazon.com/security-hub/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Detective for detecting potential security issues: [https://aws.amazon.com/detective/](https://aws.amazon.com/detective/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these services can be enabled through your AWS web console. Let's now
    move on and take a look at some of the options available in Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Securing your containers using Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure is Microsoft's flagship cloud service and provides a number of tools you
    can use to deploy and monitor Docker containers. This section assumes some familiarity
    with both Azure and the Log Analytics service.
  prefs: []
  type: TYPE_NORMAL
- en: Container monitoring in Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft's Container Monitoring solution provides a mechanism to manage Docker
    and Windows hosts from a single place and supports Kubernetes and Docker Swarm,
    both of which have been discussed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: If you are already using Microsoft's AKS service, you may be familiar with the
    monitoring services available on the AKS page, however, it is also possible to
    monitor containers across your whole Microsoft infrastructure in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the monitoring of your containers, you will need to start by enabling
    the feature by adding it to Log Analytics. You can do this by clicking the **GET
    IT NOW** button on the Azure Marketplace website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.containersoms?tab=overview](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.containersoms?tab=overview)'
  prefs: []
  type: TYPE_NORMAL
- en: Once this is complete, you can create a new Log Analytics workspace. From this
    new workspace, record the name you chose, and also obtain the workspace ID and
    key. These are available under the **Advanced settings** of your workspace and
    can be found under the **Connected Sources** | **Linux Servers** options.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this overview, we are going to assume an environment of
    a single host as we did for Datadog running on Linux. In this scenario, you will
    need to install the Log Analytics agent as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now restart the agent using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s try running the monitor against the container as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We can modify the event data we collect under the **Data** option of the Log
    Analytics workspace. From here, we can add syslog and also enable the Linux Performance
    Counters.
  prefs: []
  type: TYPE_NORMAL
- en: Once the solution is enabled, you will see the **Container** tile appear. You
    can then drill into the **Container** dashboard to gather metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have some monitoring in place, let's look at some security features that
    are available in Azure for container-based platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Using Security Center to secure your containers in Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With monitoring in place, you can now move on to looking at Microsoft's container
    security tools. The recommended native tool for achieving this in Azure is the
    Security Center service.
  prefs: []
  type: TYPE_NORMAL
- en: You can sign up to add it to your Azure account by clicking the **Turn on Security
    Center** button at [https://azure.microsoft.com/en-us/services/security-center/](https://azure.microsoft.com/en-us/services/security-center/)
    and sign up for an Azure account at the same time if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the feature enabled, you will see that Security Center provides
    a number of features, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Container runtime protection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment hardening
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll take a look at each of these briefly.
  prefs: []
  type: TYPE_NORMAL
- en: Container runtime protection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Security Center''s runtime protection for container environments allows you
    to generate real-time threat metrics that can be used to plan remediation efforts.
    The threat detection mechanism is broken down into two core areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**At the host level**: At this level, we can monitor for containers acting
    in a malicious or suspicious fashion, including an exposed Docker daemon or a
    privileged command run within the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**At the AKS cluster level**: AKS cluster-level threat detection analyzes the
    Kubernetes audit logs for suspicious activity such as highly privileged role creation
    or a coin miner being detected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These two features combined can help to look at the layers of your container
    stack and detect suspicious activity.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, you can use the Container Registries bundle to scan new images when they
    are pushed. Security Center integration with third-party security provider Qualys
    scans the container for some of the vulnerabilities we've discussed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: When an issue is detected, it will be logged on the dashboard with a recommended
    remediation step.
  prefs: []
  type: TYPE_NORMAL
- en: Environment hardening
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Security Center provides a variety of tools for monitoring the security of your
    container environment. One of the most important features is running bench mark
    tests, such as the CIS Docker Benchmark, to alert you if your environment's configuration
    is weakened. An example of a CIS control is checking whether containers have unrestricted
    network traffic being exchanged between each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download a copy of the CIS Docker Benchmark for free from the CIS website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.cisecurity.org/benchmarks](https://learn.cisecurity.org/benchmarks)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: InSpec users may be interested in downloading the InSpec profile for CIS Docker
    Benchmarking at [https://github.com/dev-sec/cis-docker-benchmark](https://github.com/dev-sec/cis-docker-benchmark).
  prefs: []
  type: TYPE_NORMAL
- en: When Security Center spots a problem with your environment, it will flag it
    on the **Recommendations** page of the dashboard for you, so you can start remediating
    the issue.
  prefs: []
  type: TYPE_NORMAL
- en: We've briefly looked at what is available in Azure. Let's wrap up with a quick
    tour of some of GCP's features.
  prefs: []
  type: TYPE_NORMAL
- en: Securing your containers using GCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google offers a number of tools for monitoring containers in both Anthos and
    **Google Kubernetes Engine** (**GKE**).
  prefs: []
  type: TYPE_NORMAL
- en: For those unfamiliar with Google's offerings, Anthos is a platform that is designed
    for hybrid and multi-cloud deployment and allows you, among other features, to
    deploy container-oriented platforms such as Kubernetes. GKE is Google's enterprise-grade
    Kubernetes platform offered via **Google Cloud Platform** (**GCP**) and can be
    thought of as a rival to Amazon's EKS. Googles Container Registry is a platform
    for storing images that can be reused across your projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the following sections, it is assumed that you have some prior knowledge
    of GCP. If you would like to know more about getting started with GCP, please
    visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/gcp/getting-started](https://cloud.google.com/gcp/getting-started)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by looking at container security in GCP.
  prefs: []
  type: TYPE_NORMAL
- en: Container Analysis and Binary Authorization in GCP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A useful feature that Google offers is the **Container Analysis** scanner for
    Container Registry. This feature allows you to scan images for security issues
    and exposes an API for your use to pull down the metadata results. If you enable
    this feature on your account, it will scan all new images that are pushed to the
    registry, however, for existing images you will need to re-push them to trigger
    the scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two core features of Container Analysis are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Incremental scans**: This handles the scanning of new images and generates
    the metadata related to them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous monitoring**: The metadata generated by incremental scans is continuously
    analyzed to see if it matches new sets of security vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When running scans, a severity level for effective severity (the level defined
    by the Linux distribution owner) and **Common Vulnerability Scoring System** (**CVSS**)
    score is assigned to a matching issue.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to know more about CVSS, please visit the CVSS website: [https://www.first.org/cvss/specification-document](https://www.first.org/cvss/specification-document).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Severity levels are categorized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Critical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These results are stored within your Container Registry account and can be
    viewed from there. Additionally, they can be retrieved by the RESTful API. For
    an overview of the REST commands available, please refer to the Container Analysis
    API documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/container-registry/docs/reference/rest](https://cloud.google.com/container-registry/docs/reference/rest)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To explore Container Analysis further, you can enable it within your account
    and test it out by pushing an existing image to the registry. For example, you
    could use one of the `shipitclicker` projects we have used throughout this book.
    To do this, remember to tag the image first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The hostname will be one of the four following storage regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[gcr.io](http://gcr.io) (US)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[us.gcr.io](http://us.gcr.io) (US)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[eu.gcr.io](http://eu.gcr.io) (EU)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[asia.gcr.io](http://asia.gcr.io) (Asia)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, to push to the registry, use the `docker push` command in the following
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: It's as simple as that, you can then pull the container image as and when you
    need to and use the Container Analysis service. In addition to conducting analysis
    on containers, we can enforce rules around using signed images to complement this.
  prefs: []
  type: TYPE_NORMAL
- en: Google have built a deploy-time security feature geared toward preventing untrusted
    container images from making it into GKE. This is called **Binary Authorization**
    ([https://cloud.google.com/binary-authorization](https://cloud.google.com/binary-authorization)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Binary Authorization is built around **Kritis**, which defines a specification
    for the deployment authorization of Kubernetes applications. You can read more
    about it here on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/grafeas/kritis/blob/master/docs/binary-authorization.md](https://github.com/grafeas/kritis/blob/master/docs/binary-authorization.md)'
  prefs: []
  type: TYPE_NORMAL
- en: Using this service will allow you to enforce rules around requiring Docker images
    to be signed by trusted authorities. This involves a process known as attestations.
    Effectively, each container image has a unique hash (called a digest), which is
    signed by the signer. You might remember we saw how digests can be used earlier
    in this book, in [*Chapter 13*](B11641_13_Final_NM_ePub.xhtml#_idTextAnchor299),
    *Docker Security Fundamentals and Best Practices*.
  prefs: []
  type: TYPE_NORMAL
- en: When a digest is signed, this is known as an attestation. When we come to deploy
    a container image, we can use a Binary Authorization attestor to verify the attestation.
    This allows us to prevent unauthorized – that is, unsigned – container images
    being used.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in learning more, to set up Binary Analysis you can follow
    the simple steps documented here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/binary-authorization/docs/quickstart](https://cloud.google.com/binary-authorization/docs/quickstart)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at another feature of GCP, Security Command Center.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding your attack surface with Security Command Center
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final tool we will quickly take a look at is Google's Security Command Center.
    For this, you will need to have set up an organization and project in GCP to work
    with. If not, please refer back to the preceding section for a link to Google's
    own quick-start guide.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable Security Command Center for this new organization and project, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Cloud Console at [https://console.cloud.google.com](https://console.cloud.google.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following two roles via `organizationAdmin` (`roles/resourcemanager.organizationAdmin`)
    from `securitycenter.admin` (`roles/securitycenter.admin`) from **Security Center**
    | **Security Center Admin**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the changes and navigate to the Security Command Center page in the web
    console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the organization you added in step 2 from the drop-down list called **Organization**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now be presented with the **Enable asset discovery** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **All current and future projects** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Asset discovery will now begin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Security Command Center has finished scanning your resources, you will
    be able to see the results on the dashboard. By default, anomaly detection is
    enabled, however, Google provides a number of security sources you can integrate,
    or you can plug in container-specific third-party services.
  prefs: []
  type: TYPE_NORMAL
- en: 'A full list of the potential sources you can integrate can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/security-command-center/docs/how-to-security-sources](https://cloud.google.com/security-command-center/docs/how-to-security-sources)'
  prefs: []
  type: TYPE_NORMAL
- en: With these two basic services set up, you are now free to explore integrating
    other third-party providers such as Twistlock or experiment with these services
    to get comfortable rolling them out to a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: That concludes our whistle-stop tour of a few of the major cloud providers'
    offerings. Let's summarize what we have looked at.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've provided you with some pointers for where you can take
    your cloud skills to next. This has included looking at scanning tools such as
    Anchore, reviewing metric-gathering platforms such as Datadog, and looking briefly
    at some of the features offered by the major cloud providers.
  prefs: []
  type: TYPE_NORMAL
- en: These cloud platforms included AWS, Microsoft Azure, and GCP. Each of these
    companies also provide a number of other cloud-based container infrastructure
    products you may wish to explore further.
  prefs: []
  type: TYPE_NORMAL
- en: We hope this high-level overview has provided you with some thoughtful insights
    on how to apply these skills to your own projects. Each topic in this chapter
    should act as a jumping-off point to explore each tool further, or provide you
    with the basics to start experimenting with monitoring in a cloud-based container
    environment. For those of you working with local projects, tools such as Docker
    stats and cAdvisor will provide a handy mechanism for monitoring container performance.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will move on to the final chapter, where we shall recap what we have
    studied throughout the book and leave you with some takeaway points for where
    to take your learning to next.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Don''t forget you can visit each provider''s website for a list of these further
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Containers on AWS: [https://aws.amazon.com/containers/services/](https://aws.amazon.com/containers/services/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Container services in Azure: [https://azure.microsoft.com/en-us/product-categories/containers/](https://azure.microsoft.com/en-us/product-categories/containers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Container options in GCP: [https://cloud.google.com/container-options](https://cloud.google.com/container-options)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
