- en: Security Testing Toolkits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at white box testing tips. In this chapter,
    we will learn about a common (but not a comprehensive) set of security testing
    tools. The major elements of a network that involve security testing include web
    and mobile connections, configuration, communication, third-party components,
    and sensitive information. We will look at the testing tips and tools for each
    element. Furthermore, we will also learn how these tools can be executed both
    automatically and as tools that are built into continuous integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: General security testing toolkits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation testing criteria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavior-driven security testing frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure infrastructure configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker security scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated security tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General security testing toolkits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The objective of providing security testing toolkits is for project teams to
    understand what tools are available and apply the tools that they judge to be
    appropriate based on the business application scenario. There are many kinds of
    security testing tools. An organization may define one general testing toolkit
    for all projects, and also suggest other security testing tools based on those
    specific domains, such as automation, infrastructure, Docker, and BDD:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are many kinds of Linux security distributions that have been installed
    and preconfigured with security tools. Kali, BlackArch, and PentestBox are the
    common Linux security distributions. PenetestBox is recommended because it doesn''t
    need a Linux virtual machine environment to execute Linux utilities, and it can
    be executed natively on Windows. PenetestBox also includes many security tools,
    as does Kali Linux. For more information on each tool, go to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux: [https://www.kali.org/](https://www.kali.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BlackArch: [https://blackarch.org/](https://blackarch.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PentestBox: [https://pentestbox.org/](https://pentestbox.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As there can be hundreds of security tools in Kali or BlackArch Linux, it may
    not be feasible to require the security testing team to execute the security testing
    with all of the tools. It's suggested that you familiarize yourself with some
    of the key and common security tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the recommended minimum security testing toolset
    (only open source or free tools are listed here):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Area that is being security checked** | **Common open source security tools**
    |'
  prefs: []
  type: TYPE_TB
- en: '| WhiteBox review | GraudIT or GREP-ITThese tools are recommended because they
    don''t require a whole buildable source code to identify the security issue for
    different programming languages:'
  prefs: []
  type: TYPE_NORMAL
- en: GraudIT: [https://github.com/wireghoul/graudit](https://github.com/wireghoul/graudit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GREP-IT:[ ](https://github.com/floyd-fuh/crass/blob/master/grep-it.sh)[https://github.com/floyd-fuh/crass/blob/master/grep-it.sh](https://github.com/floyd-fuh/crass/blob/master/grep-it.sh)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Web | BurpSuite, OWASP ZAP, Vega, SQLmap, Arachni |'
  prefs: []
  type: TYPE_TB
- en: '| Vulnerability | Nessus, OpenVAS, OpenSCAP, NMAP |'
  prefs: []
  type: TYPE_TB
- en: '| Networking | NMAP, WireShark, TCPDump, Hping, SSLScan, SSLyze, masscan |'
  prefs: []
  type: TYPE_TB
- en: Automation testing criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We would like most basic and obvious web security testing cases to be done
    automatically while human testing is focused on deeper security issue reviews.
    The objective of automated web security testing is to integrate the security testing
    tools with a continuous integration framework, such as Jenkins. The web security
    testing can be automatically triggered every time the build is submitted. To be
    able to integrate web security testing tools with Jenkins, there are several key
    criteria that we need to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Command console**: Most security testing tools provide a command console
    or GUI interface to operate the security testing procedures. It would be ideal
    for the tool to provide both interfaces. The command console can be used for Jenkins
    to trigger the execution of the security testing, and the GUI can help the human
    testing. From the automated testing point of view, the **command-line interface**
    (**CLI**) is a minimum requirement to integrate with Jenkins. The CLI interface
    also helps us to integrate with the unit test framework or BDD framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API interface**: The web security testing can be executed in a standalone
    attacker mode or a proxy mode. The API interface will allow us to interact with
    the testing tool programmatically during runtime. For example, the OWASP ZAP provides
    a REST API to automate all the operations using Python and also the ZAP CLI to
    interact with ZAP from the command line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Output formats**: Most web security testing tools provide different kinds
    of reporting formats, such as HTML, PDF, XML, CSV, JSON, or console output. CSV,
    JSON, and XML are considered the basics if we would like to import the testing
    results together. Because of the various security tools and large quantities of
    results in the daily report, it''s suggested that you apply integrated security
    testing tools, such as OWASP DefectDojo, to consolidate all the testing results
    in one dashboard (this option will be discussed later). In addition, some tools
    may provide the Jenkins plugin, which can help you to output the results in the
    Jenkins management console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on these criteria, the suggested web security testing tools for automation
    are summarized in the following table. OWASP ZAP, Arachni, and W3af are three
    open source web security testing tools that provide CLI, API, and web GUI interfaces.
    Nikto and Wapiti are also good choices if you are looking for lightweight command-line
    tools. For web security testing, we also suggest using one additional tool to
    do the scanning because of the false positive rate of each tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just be aware that the web security automated test can''t complete all web
    security tasks. Some testing scenarios still require a human security tester to
    guide the tool and perform further verification, such as authentication, web page
    authorization, business logic-related tests, and multiple order submissions. The
    following table displays the tools and their features:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Web GUI** | **CLI** | **REST API** |'
  prefs: []
  type: TYPE_TB
- en: '| **OWASP ZAP** | Yes | ZAP CLI | ZAP API  |'
  prefs: []
  type: TYPE_TB
- en: '| **Arachni** | Yes | Yes | Yes(It also provides Ruby libraries.) |'
  prefs: []
  type: TYPE_TB
- en: '| **W3af** | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| **Nikto** | n/a | Yes | n/a |'
  prefs: []
  type: TYPE_TB
- en: '| **Wapiti** | n/a | Yes | n/a |'
  prefs: []
  type: TYPE_TB
- en: Behavior-driven security testing framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BDD security testing is very suitable when your security testing reports will
    be shared with external vendors, or even internal, cross-team communication to
    understand what security testing cases are being executed. In addition, BDD security
    tests can help you to integrate all of the various kinds of security testing tools
    and consolidate testing reports based on the framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a simple example to understand what behavior-driven security
    testing is. Under the behavior-driven security testing framework, the security
    testing scripts are the testing cases that are written in a human-readable language.
    It makes the security testing cases, and testing results, easily understood by
    non-security professionals. Here is an example of this human-readable script:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scenario: The attack may execute a system command to gain valuable information.****Precondition:
    Given the "ping" command line binary is available on the OS.****When I launch
    a "ping" attack with:**    "Ping 127.0.0.1"**Then it should pass with regexp:**   
    "<1ms TTL=128"    |'
  prefs: []
  type: TYPE_TB
- en: The preceding example is a re-edited version based on GauntIT testing scripts.
    You may also refer to [https://github.com/gauntIT/gauntIt/tree/master/examples/](https://github.com/gauntIT/gauntIt/tree/master/examples/) for
    more examples of defining security testing cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three open source tools in the BDD security testing framework. If
    you are familiar with Java BDD cucumber, then BDD security will be your best choice.
    If you would like to use Python with a BDD framework, refer to MITTN. GauntIT
    is programming-language independent, and can be easily extended to execute any
    tools and verify the results by defining a regular expression. GauntIT allows
    security testers to focus on the definition of the testing script, and is suitable
    for testers who have little knowledge of Java or Python. The BDD security frameworks
    and their featured tools are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **BDD security frameworks** | **Default security tools included** |'
  prefs: []
  type: TYPE_TB
- en: '| BDD security | OWASP ZAP, SSLyze, NessusBDD Security is based on Java and
    Cucumber.'
  prefs: []
  type: TYPE_NORMAL
- en: BDD Security: [https://www.continuumsecurity.net/bdd-security/](https://www.continuumsecurity.net/bdd-security/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| MITTN | BurpSuite, SSlyze, and Radamsa API fuzzingMITTN is based on Python
    and Behave.'
  prefs: []
  type: TYPE_NORMAL
- en: MITTN: [https://github.com/F-Secure/mittn](https://github.com/F-Secure/mittn)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| GauntIT | CURL, NMAP, SSLyze, SQLmap, Garmr, heartbleed, dirb, Arachni'
  prefs: []
  type: TYPE_NORMAL
- en: GauntIT: [http://gauntlt.org/](http://gauntlt.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Android security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android security testing requires the reverse engineering analysis using APK
    files, permission analysis using Manifest, and internal components analysis using
    intents, services, broadcast, and content providers. Generally, the following
    are considered common testing tools when it comes to Android security testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tools** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| ApkTool | ApkTool is used to perform reverse engineering for Android APK
    files. |'
  prefs: []
  type: TYPE_TB
- en: '| ByteCode View | ByteCode View is a Java Bytecode viewer and GUI Java decompiler.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Dex2JAR | Dex2JAR converts the DEX to a CLASS file. |'
  prefs: []
  type: TYPE_TB
- en: '| JADX | JADX converts the DEX to a Java decompiler. |'
  prefs: []
  type: TYPE_TB
- en: '| JD-GUI | JD-GUI is a GUI viewer that is used to read the source code of CLASS
    files. |'
  prefs: []
  type: TYPE_TB
- en: '| Drozer | Drozer is an interactive security and attacks framework for the
    Android app. |'
  prefs: []
  type: TYPE_TB
- en: '| Baksmali | Baksmali is an assembler/disassembler for the DEX format. |'
  prefs: []
  type: TYPE_TB
- en: '| AndroBugs | AndroBugs takes an APK file as input and performs an APK security
    vulnerabilities scan. |'
  prefs: []
  type: TYPE_TB
- en: '| AndroGuard | AndroGuard is a Python framework that can perform reverse engineering
    and malware analysis of the APK. |'
  prefs: []
  type: TYPE_TB
- en: '| QARK | **Quick Android Review Kit** (**QARK**) works similarly to AndroBugs.
    It detects security vulnerabilities for APK files. |'
  prefs: []
  type: TYPE_TB
- en: '| AppMon | AppMon can monitor API calls for both iOS and Android apps. |'
  prefs: []
  type: TYPE_TB
- en: 'To install and configure the tools separately can be very time-consuming, so
    it is suggested that you use the following toolkits, which have most of the Android
    security testing tools preinstalled:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Toolkit** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| AndroL4b | AndroL4b is an Unbuntu-based virtual machine that includes not
    only security testing tools, but also vulnerable APK labs for practice.'
  prefs: []
  type: TYPE_NORMAL
- en: AndroL4b: [https://github.com/sh4hin/Androl4b/](https://github.com/sh4hin/Androl4b/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Appie | Appie is a portal for Android testing toolkits that can be executed
    in Windows without any installation and virtual machines.'
  prefs: []
  type: TYPE_NORMAL
- en: Appie: [https://manifestsecurity.com/appie/](https://manifestsecurity.com/appie/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| PentestBox | PentestBox is similar to Appie, but also includes lots of other
    non Android-related security testing tools.'
  prefs: []
  type: TYPE_NORMAL
- en: PentestBox: [https://tools.pentestbox.org/](https://tools.pentestbox.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, if you would like a fully automated APK and iOS security
    analysis that you can use by dragging and dropping an APK file to the Android
    security analysis platform, the MobSF (Mobile Security Framework) is what you
    will need, as shown in the following screenshots:  Source: [http://github.com/MobSF/Mobile-Security-Framework-MobSF/](http://github.com/MobSF/Mobile-Security-Framework-MobSF/)
  prefs: []
  type: TYPE_NORMAL
- en: MobSF/Mobile-Security-Framework-MobSF is licensed under the GNU General Public
    License v3.0.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the basic uses of MobSF.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The following screenshot shows the MobSF security assessment results for the
    Manifest Analysis and the Code Analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Source : https://github.com/MobSF/Mobile-Security-Framework-MobSF'
  prefs: []
  type: TYPE_NORMAL
- en: Securing infrastructure configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Securing the infrastructure configuration is vital in ensuring that the infrastructure
    configurations and system hardening are compliant with industry security best
    practices, such as CIS benchmarks, PCI-DSS, and the **National Checklist Program**
    (**NCP**). If the DevOps team have applied infrastructure tools, such as Chef
    or Puppet, it''s highly recommended that you define the security configuration
    on top of these tools to achieve the goal of **infrastructure security as code**.
    This helps to move the infrastructure security from the operation stage to the
    development stage. The Inspec, Hardening Framework, and ServerSpec tools are tools
    that are used for checking infrastructure security configurations. You can learn
    more about them at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: Inspec: [https://www.inspec.io/](https://www.inspec.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardening Framework: [https://Dev-Sec.io](https://Dev-Sec.io)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serverspec: [https://serverSpec.org/](https://serverSpec.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For an infrastructure environment that is not deployed with configuration management
    tools (Puppet, Chef, Ansible, or SaltStack), the following scanning tools are
    suggested:'
  prefs: []
  type: TYPE_NORMAL
- en: Lynis Security Auditing: [https://github.com/CISOfy/lynis](https://github.com/CISOfy/lynis)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSCAP: [https://www.open-scap.org/](https://www.open-scap.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CIS Benchmarks: [https://www.cisecurity.org/cis-benchmarks/](https://www.cisecurity.org/cis-benchmarks/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These infrastructure security configuration review tools will reduce the operation
    team's and security team's efforts. The operation team may apply these tools before
    services deployment, and they may also do a regular check on the production environment.
    The development and testing team may use these tools to know whether any secure
    configurations are missing or incorrectly configured.
  prefs: []
  type: TYPE_NORMAL
- en: For a sample of the scanning result of OpenSCAP, go to [https://www.open-scap.org/wp-content/uploads/2015/09/ssg-rhel7-ds-xccdf.report.html](https://www.open-scap.org/wp-content/uploads/2015/09/ssg-rhel7-ds-xccdf.report.html).
  prefs: []
  type: TYPE_NORMAL
- en: Docker security scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker technology is widely used for software deployment and cloud infrastructure.
    For Docker-specific security testing, the Docker Bench defines several security
    best practices and configurations for Docker containers deployment. The "CIS Docker
    Community Edition Benchmark" defines a security recommendation on the Docker host,
    daemon, container images, and container runtime. Generally speaking, there are
    three kinds of Docker security tools that do one of three different things:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan for Docker security best practices based on CIS (Docker Bench, Actuary)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scan for known common vulnerabilities and exposures (CVEs) (Claire, Anchor Engine)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runtime threat analysis (Falco, Dagda)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are the open source security testing tools for Docker security:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Docker security tools** | **Purpose and reference** |'
  prefs: []
  type: TYPE_TB
- en: '| Docker Bench | Docker Bench is an automated script that checks the Docker
    security best practices compliance. The scanning rules are based on the CIS Docker
    Security Benchmark.'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Bench Security: [https://github.com/docker/docker-bench-security/](https://github.com/docker/docker-bench-security/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Benchmark: [https://benchmarks.cisecurity.org/](https://benchmarks.cisecurity.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Actuary | Actuary works similarly to Docker Bench. Additionally, Actuary
    can scan based on user-defined security profiles from the Docker security community.'
  prefs: []
  type: TYPE_NORMAL
- en: Actuary: [https://github.com/diogomonica/actuary/](https://github.com/diogomonica/actuary/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Clair | Clair is a container image security static analyzer for CVEs. Clair: [https://github.com/coreos/clair](https://github.com/coreos/clair)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Anchor EngineAnchor Cloud | Anchor Cloud and Anchor Engine scan the Docker
    images for CVEs. Anchor Engine is a hosted tool and Anchor Cloud is a cloud-based
    tool.'
  prefs: []
  type: TYPE_NORMAL
- en: Anchor Engine: [https://github.com/anchore/anchore-engine](https://github.com/anchore/anchore-engine)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anchor Cloud: [https://Anchore.com/cloud/](https://Anchore.com/cloud/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Falco | Falco is a Docker container runtime security tool that can detect
    anomalous activities.'
  prefs: []
  type: TYPE_NORMAL
- en: Falco: [https://sysdig.com/opensource/falco/](https://sysdig.com/opensource/falco/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Dagda | Dagda is an integrated Docker security tool that provides runtime
    anomalous activities detection (Sysdig Falco), vulnerabilities (CVEs) analysis
    (OWASP dependency check, Retire.JS), and malware scanning (CalmAV).'
  prefs: []
  type: TYPE_NORMAL
- en: Dagda:[ https://github.com/eliasgranderubio/dagda/](https://github.com/eliasgranderubio/dagda/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Integrated security tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As there are many security testing tools, we may like the testing results to
    be integrated into one dashboard, or to execute the tool through a unified interface.
    If you are looking for such an integrated security testing management tool, here
    are some of the open source and free tools to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tools** | **Tools included by default** |'
  prefs: []
  type: TYPE_TB
- en: '| JackHammer | JackHammer, provided by Ola, is an integrated security testing
    tool. It provides you with a dashboard to consolidate all the testing results.
    The key difference is that JackHammer includes mobile app security scanning and
    source code static analysis tools. The supported open source security scanners
    include Brakeman, Bundler-Audit, Dawnscanner, FindSecurityBugs, PMD, RetireJS,
    Arachni, Trufflehog, Androbugs, Androguard, and NMAP. The following screenshots
    show a typical example of its integrated interface.'
  prefs: []
  type: TYPE_NORMAL
- en: JackHammer: [https://github.com/olacabs/jackhammer](https://github.com/olacabs/jackhammer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional information: [https://jch.olacabs.com/userguide/](https://jch.olacabs.com/userguide/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg) |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Faraday | Faraday is an integrated penetration testing environment, and provides
    a dashboard for all the testing results. It integrates with over 50 security tools.'
  prefs: []
  type: TYPE_NORMAL
- en: Faraday: [https://www.faradaysec.com/#why-faraday](https://www.faradaysec.com/#why-faraday)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional information: [https://github.com/infobyte/faraday/wiki/Plugin-List](https://github.com/infobyte/faraday/wiki/Plugin-List)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Mozilla Minion | Mozilla Minion is also an integrated security testing tool
    that includes the following plugins by default:'
  prefs: []
  type: TYPE_NORMAL
- en: ZAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skipfish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSLScan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find Mozilla Minion at [https://github.com/mozilla/minion/](https://github.com/mozilla/minion/).
    |
  prefs: []
  type: TYPE_NORMAL
- en: '| Penetration testing toolkit | Penetration testing toolkit provides a unified
    web interface for many Linux scanning tools, such as nmap, nikto, WhatWeb, SSLyze,
    fping, URLCrazy, lynx, mtr, nbtscan, automater, and shellinabox.'
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing toolkit: [https://github.com/veerupandey/Penetration-Testing-Toolkit](https://github.com/veerupandey/Penetration-Testing-Toolkit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Seccubus | The key advantage of using Seccubus is that it integrates with
    various kinds of vulnerability scanner testing results, and also compares the
    differences between each scan. It includes the following scanners:'
  prefs: []
  type: TYPE_NORMAL
- en: Nessus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenVAS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NMAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nikto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medusa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSLyze
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL Labs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TestSSL.sh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SkipFish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ZAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find Seccubus at [https://github.com/schubergphilis/Seccubus](https://github.com/schubergphilis/Seccubus). 
    |
  prefs: []
  type: TYPE_NORMAL
- en: '| OWTF | **Offensive Web Testing Framework** (**OWTF**) is an integrated security
    testing standards OWASP testing guide and includes PTES and NIST tools.'
  prefs: []
  type: TYPE_NORMAL
- en: OWTF: [https://owtf.github.io/](https://owtf.github.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional information: [https://owtf.github.io/online-passive-scanner/](https://owtf.github.io/online-passive-scanner/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| RapidScan | RapidScan is a mult-itool that includes a web-vulnerability scanner.
    The security scanning tools that it contains include nmap, dnsrecon, uniscan,
    sslyze, fierce, theharvester, and golismero. |'
  prefs: []
  type: TYPE_TB
- en: '| DefectDojo | The OWASP DefectDojo is a security tool that can import and
    consolidate various security testing tool outputs into one management dashboard. DefectDojo: [https://github.com/DefectDojo/django-DefectDojo](https://github.com/DefectDojo/django-DefectDojo)
    |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about security testing toolkits. Based on the elements
    that are to be tested, there are Kali Linux, BlackArch, and PentestBox, which
    are the Linux security distributions that provide general security testing toolkits.
    As there are many tools, we suggested a minimum set of security tools to cover
    the white box review, web connection, vulnerability, and network security.
  prefs: []
  type: TYPE_NORMAL
- en: We also showed the key factors of security automation tools and compared the
    capabilities of some web security tools for supporting the CLI and REST API interfaces.
    The BDD Security framework was also introduced for the support of an automated
    framework. We looked at BDD Security, MITTN, and GauntIT.
  prefs: []
  type: TYPE_NORMAL
- en: Some other security testing tools were also discussed. For Android security
    testing, MobSF (Mobile Security Framework) was recommended for a quick-win, fully
    automated analysis platform. For infrastructure security, we looked at the Lynis
    Security Auditing, OpenSCAP, or CIS Benchmarks security scanning tools to detect
    insecure configurations. For Docker security, there are three kinds of security
    tools—namely, the CIS security configuration best practices, the scan for known
    vulnerabilities, and the runtime threat analysis. Finally, we introduced the integrated
    security tools, which can help you to integrate and consolidate all the testing
    results.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss security automation with continuous integration.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Which one of the following is not a Linux distribution for security testing?
    Ans: d'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kali Linux
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: BlackArch
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PentestBox
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OSSEC
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The OWASP ZAP, Vega, and Arachni tools are used for which of the following security
    tests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web security
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Network security
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Intrusion detection
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrity monitoring
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following tools is used for vulnerability scanning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WireShark
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenVAS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: TCPDump
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hping
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following is not a minimum criterion for automated testing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GUI interface
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CLI interface
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: API interface
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Output formats
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What're the benefits of using BDD security?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integration with all tools
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Consolidated testing results
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Easy to communicate across the team
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one of the following is not used for Docker security?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scanning for Docker security best practices based on CIS (Docker Bench, Actuary)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Appie
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Scanning for known CVEs. (Claire, Anchor Engine)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Runtime threats analysis. (Falco, Dagda)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not mainly focused on infrastructure security?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inspec
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hardening Framework
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Serverspec
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PentestBox
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information visit the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GauntIT examples**: [https://github.com/gauntIT/gauntIt/tree/master/examples/](https://github.com/gauntIT/gauntIt/tree/master/examples/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**United States Government Configuration Baseline (USGCB)**: [https://csrc.nist.gov/projects/united-states-government-configuration-baseline/](https://csrc.nist.gov/projects/united-states-government-configuration-baseline/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**National Checklist Program Repository**: [https://nvd.nist.gov/ncp/repository](https://nvd.nist.gov/ncp/repository)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Secure Deployment Guidelines**: [https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines](https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vulscan**: [https://github.com/scipag/vulscan](https://github.com/scipag/vulscan)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AttifyOS distribution for IoT security testing**: [https://github.com/adi0x90/attifyos](https://github.com/adi0x90/attifyos)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attify Firmware Analysis Toolkit**: [https://github.com/attify/firmware-analysis-toolkit](https://github.com/attify/firmware-analysis-toolkit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CHIPSEC Platform Security Assessment Framework**: [https://github.com/chipsec/chipsec](https://github.com/chipsec/chipsec)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List of penetration testing resources**: [https://github.com/enaqx/awesome-pentest](https://github.com/enaqx/awesome-pentest)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List of penetration testing resources**: [https://github.com/wtsxDev/Penetration-Testing](https://github.com/wtsxDev/Penetration-Testing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
