["```\n$ cd ansible/roles  \n```", "```\n$ ansible-galaxy init jenkins  \n```", "```\n- name: Add Jenkins repository\n  shell: wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo\n```", "```\n- name: Import Jenkins GPG key \n  rpm_key: \n    state: present \n    key: https://pkg.jenkins.io/redhat/jenkins.io.key\n```", "```\n- name: Install Jenkins \n  yum: \n    name: jenkins-2.99\n    enablerepo: jenkins \n    state: present\n```", "```\n- name: Start Jenkins \n  service: \n    name: jenkins \n    enabled: yes \n    state: started \n```", "```\n- name: Removing old version of JAVA from Amazon Linux\n  yum:\n    name: java-1.7.0-openjdk\n    state: absent\n\n- name: Install specific supported version of JAVA\n  yum:\n    name: java-1.8.0-openjdk\n    state: present\n```", "```\n--- \n- hosts: \"{{ target | default('localhost') }}\" \n  become: yes \n  roles: \n    - jenkins \n    - nodejs \n```", "```\n$ git checkout -b jenkins  \n```", "```\n$ git add jenkins.yml roles/jenkins  \n```", "```\n$ git commit -m \"Adding a Jenkins playbook and role\" $ git push origin jenkins\n```", "```\n$ git checkout master\n$ git branch\n    jenkins\n  * master\n$ git pull \n```", "```\n$ git pull\n```", "```\n$ cp ansiblebase-cf-template.py jenkins-cf-template.py  \n```", "```\n$ pip install awacs\n```", "```\nApplicationName = \"jenkins\" \nApplicationPort = \"8080\" \n```", "```\nGithubAccount = \"yogeshraheja\"\n```", "```\nfrom troposphere.iam import ( \n    InstanceProfile, \n    PolicyType as IAMPolicy, \n    Role,  \n) \n\nfrom awacs.aws import ( \n    Action, \n    Allow, \n    Policy, \n    Principal, \n    Statement, \n) \n\nfrom awacs.sts import AssumeRole \n```", "```\nt.add_resource(Role(\n    \"Role\",\n    AssumeRolePolicyDocument=Policy(\n        Statement=[\n            Statement(\n                Effect=Allow,\n                Action=[AssumeRole],\n                Principal=Principal(\"Service\", [\"ec2.amazonaws.com\"])\n            )\n        ]\n    )\n))\n```", "```\nt.add_resource(InstanceProfile(\n    \"InstanceProfile\",\n    Path=\"/\",\n    Roles=[Ref(\"Role\")]\n))\n```", "```\nt.add_resource(ec2.Instance(\n    \"instance\",\n    ImageId=\"ami-cfe4b2b0\",\n    InstanceType=\"t2.micro\",\n    SecurityGroups=[Ref(\"SecurityGroup\")],\n    KeyName=Ref(\"KeyPair\"),\n    UserData=ud,\n    IamInstanceProfile=Ref(\"InstanceProfile\"),\n)\n```", "```\n$ git add jenkins-cf-template.py\n$ git commit -m \"Adding troposphere script to generate a Jenkins instance\"\n$ git push\n$ python jenkins-cf-template.py > jenkins-cf.template \n```", "```\n$ aws cloudformation create-stack \\\n --capabilities CAPABILITY_IAM \\\n      --stack-name jenkins \\\n      --template-body file://jenkins-cf.template \\\n      --parameters  \n      ParameterKey=KeyPair,ParameterValue=EffectiveDevOpsAWS  \n```", "```\n$ aws cloudformation wait stack-create-complete \\\n --stack-name jenkins  \n```", "```\n$ aws cloudformation describe-stacks \\\n --stack-name jenkins \\\n      --query 'Stacks[0].Outputs[0]'\n    {\n        \"Description\": \"Public IP of our instance.\",\n        \"OutputKey\": \"InstancePublicIp\",\n        \"OutputValue\": \"18.208.183.35\"\n    }  \n```", "```\n\n$ ssh -i ~/.ssh/EffectiveDevOpsAWS.pem ec2-user@18.208.183.35 \\ \nsudo cat /var/lib/jenkins/secrets/initialAdminPassword \n```", "```\n$ ssh -i ~/.ssh/EffectiveDevOpsAWS.pem ec2-user@18.208.183.35\n$ node –v\n$ npm –v \n```", "```\n$ git clone https://github.com/<your_github_organization>/helloworld.git\n$ cd helloworld\n```", "```\n$ git checkout -b initial-branch  \n```", "```\n$ touch helloworld.js  \n```", "```\n$ npm config set registry http://registry.npmjs.org/\n$ npm init –yes\n```", "```\n$ npm install mocha@2.5.3 --save-dev\n```", "```\n$ npm install zombie@3.0.15 --save-dev \n```", "```\n$ mkdir test \n```", "```\n \"scripts\": {\n \"test\": \"node_modules/mocha/bin/mocha\"\n },\n```", "```\nvar Browser = require('zombie') \nvar assert = require('assert') \n```", "```\nvar app = require('../helloworld')\n```", "```\ndescribe('main page', function() { \n  it('should say hello world')\n})\n```", "```\ndescribe('main page', function() {\nbefore(function() {\n this.browser = new Browser({ site: 'http://localhost:3000' })\n})\n\nit('should say hello world')\n}) \n...\n```", "```\ndescribe('main page', function() { \n  before(function() { \n    this.browser = new Browser({ site: 'http://localhost:3000' }) \n  })\n\n before(function(done) { this.browser.visit('/', done) })\n\n  it('should say hello world') \n})\n...\n```", "```\ndescribe('main page', function() { \n  before(function() {\n    this.browser = new Browser({ site: 'http://localhost:3000' })\n  })\n  before(function(done) {\n    this.browser.visit('/', done)\n  })\n  it('should say hello world', function() { \n    assert.ok(this.browser.success)\n    assert.equal(this.browser.text(), \"Hello World\")\n  })\n})\n```", "```\n$ npm test\n\n./node_modules/mocha/bin/mocha\n main page\n 1) \"before all\" hook\n  0 passing (48ms)\n  1 failing\n  1) main page \"before all\" hook:\n TypeError: connect ECONNREFUSED 127.0.0.1:3000  \n```", "```\n$ curl -L https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.js > helloworld.js\n```", "```\n$ npm test\nServer running\n main page\n      should say hello world\n  1 passing (78ms)  \n```", "```\n#!groovy \n```", "```\nnode { } \n```", "```\nnode { \n   stage 'Checkout' \n        checkout scm \n} \n```", "```\nstage 'Checkout'\n    checkout scm\n\nstage 'Setup'\n    sh 'npm config set registry http://registry.npmjs.org/'\n    sh 'npm install'\n```", "```\n   stage 'Mocha test' \n        sh './node_modules/mocha/bin/mocha' \n```", "```\nstage 'Cleanup'\n        echo 'prune and cleanup'\n        sh 'npm prune'\n        sh 'rm node_modules -rf'\n```", "```\n$ git add Jenkinsfile helloworld.js package.json test\n$ git commit -m \"Helloworld application\"\n$ git push origin initial-branch\n```", "```\n$ mkdir library  \n```", "```\n$ curl -L https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter05/ansible/library/aws_codedeploy > library/aws_codedeploy\n```", "```\n# update ansible.cfg \n[defaults]\ninventory = ./ec2.py \nremote_user = ec2-user \nbecome = True \nbecome_method = sudo \nbecome_user = root \nnocows = 1\nlibrary = library\n```", "```\n$ cd roles  \n```", "```\n$ ansible-galaxy init codedeploy  \n```", "```\n---\n# tasks file for codedeploy\n- name: Installs and starts the AWS CodeDeploy Agent\n aws_codedeploy: \n    enabled: yes  \n```", "```\n$ cd ..  \n```", "```\n$ touch nodeserver.yml  \n```", "```\n--- \n- hosts: \"{{ target | default('localhost') }}\" \n  become: yes \n  roles: \n    - nodejs \n    - codedeploy \n```", "```\n$ git checkout -b code-deploy $ git add library roles/codedeploy nodeserver.yml ansible.cfg\n```", "```\n$ git commit -m \"adding aws_codedeploy library, role and a nodeserver playbook\"\n$ git push origin code-deploy\n```", "```\n$ cd EffectiveDevOpsTemplates\n$ cp jenkins-cf-template.py nodeserver-cf-template.py\n```", "```\nApplicationName = \"nodeserver\" \nApplicationPort = \"3000\" \n```", "```\nt.add_resource(IAMPolicy( \n    \"Policy\", \n    PolicyName=\"AllowS3\", \n    PolicyDocument=Policy( \n        Statement=[ \n            Statement( \n                Effect=Allow, \n                Action=[Action(\"s3\", \"*\")], \n                Resource=[\"*\"]) \n        ] \n    ), \n    Roles=[Ref(\"Role\")] \n)) \n```", "```\n$ git add nodeserver-cf-template.py\n$ git commit -m \"Adding node server troposhere script\"\n$ git push\n$ python nodeserver-cf-template.py > nodeserver-cf.template\n```", "```\n $ aws cloudformation create-stack \\\n    --capabilities CAPABILITY_IAM \\\n    --stack-name helloworld-staging \\\n    --template-body file://nodeserver-cf.template \\\n    --parameters ParameterKey=KeyPair,ParameterValue=EffectiveDevOpsAWS  \n```", "```\n{ \n  \"Version\": \"2012-10-17\", \n  \"Statement\": [ \n    { \n      \"Sid\": \"\", \n      \"Effect\": \"Allow\", \n      \"Principal\": { \n        \"Service\": [ \n          \"codedeploy.amazonaws.com\" \n        ] \n      }, \n      \"Action\": \"sts:AssumeRole\" \n    } \n  ] \n} \n```", "```\n$ aws iam create-role \\\n --role-name CodeDeployServiceRole \\\n --assume-role-policy-document \\\n https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-    \n    with-AWS/master/Chapter05/misc/CodeDeploy-Trust.json\n```", "```\n\n$ aws iam attach-role-policy \\\n --role-name CodeDeployServiceRole \\\n --policy-arn \\\n arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole \n```", "```\n$ git clone https://github.com/<YOUR GITHUB ORGANIZATION>/helloworld.git\n$ cd helloworld\n$ git checkout -b helloworld-codedeploy \n```", "```\n$ touch appspec.yml  \n```", "```\nversion: 0.0 \n```", "```\nos: linux \n```", "```\nversion: 0.0 \nos: linux \nfiles:\n - source: helloworld.js\n destination: /usr/local/helloworld/\n```", "```\n$ mkdir scripts\n$ wget https://raw.githubusercontent.com/yogeshraheja/Effective-DevOps-with-AWS/master/Chapter02/helloworld.conf -O scripts/helloworld.conf\n```", "```\nfiles:\n  - source: helloworld.js\n    destination: /usr/local/helloworld/\n  - source: scripts/helloworld.conf \n    destination: /etc/init/\n```", "```\n$ touch scripts/start.sh  \n```", "```\n#!/bin/sh\nstart helloworld  \n```", "```\n$ touch scripts/stop.sh  \n```", "```\n#!/bin/sh\n[[ -e /etc/init/helloworld.conf ]] \\ \n   && status helloworld | \\\n      grep -q '^helloworld start/running, process' \\ \n   && [[ $? -eq 0 ]] \\\n   && stop helloworld || echo \"Application not started\"\n```", "```\n$ touch scripts/validate.sh  \n```", "```\n#!/bin/sh\ncurl -I localhost:3000  \n```", "```\n$ chmod a+x scripts/{start,stop,validate}.sh \n```", "```\nversion: 0.0 \nos: linux \nfiles: \n[...] \nhooks: \n```", "```\nhooks: \n  BeforeInstall: \n    - location: scripts/stop.sh \n      timeout: 30 \n```", "```\nhooks: \n  BeforeInstall: \n    - location: scripts/stop.sh \n      timeout: 30 \n  ApplicationStart:\n    - location: scripts/start.sh\n      timeout: 30\n  ValidateService:\n    - location: scripts/validate.sh\n```", "```\n$ git add scripts appspec.yml\n$ git commit -m \"Adding CodeDeploy support to the application\"\n$ git push\n```", "```\n$ aws cloudformation describe-stacks \\\n --stack-name helloworld-staging \\\n --query 'Stacks[0].Outputs[0].OutputValue' \\\n | xargs -I {} curl {}:3000 \nHello World\n```", "```\nt.add_resource(IAMPolicy(\n    \"Policy\",\n    PolicyName=\"AllowS3\",\n    PolicyDocument=Policy(\n        Statement=[\n            Statement(\n                Effect=Allow,\n                Action=[Action(\"s3\", \"*\")],\n                Resource=[\"*\"])\n        ]\n    ),\n\n))\n```", "```\n$ git add jenkins-cf-template.py\n$ git commit -m \"Allowing Jenkins to interact with CodePipeline\"\n$ git push\n$ python jenkins-cf-template.py > jenkins-cf.template \n```", "```\nnpm config set registry http://registry.npmjs.org/ \nnpm install\n./node_modules/mocha/bin/mocha \n```", "```\n$ aws cloudformation create-stack \\\n --capabilities CAPABILITY_IAM \\\n --stack-name helloworld-production \\\n --template-body file://nodeserver.template \\\n --parameters ParameterKey=KeyPair,ParameterValue=EffectiveDevOpsAWS\n```", "```\n$ aws cloudformation wait stack-create-complete \\\n --stack-name helloworld-production\n```", "```\n$ arn=$(aws deploy get-deployment-group \\\n --application-name helloworld \\\n --deployment-group-name staging \\\n --query 'deploymentGroupInfo.serviceRoleArn')\n```", "```\n$ aws deploy create-deployment-group \\\n --application-name helloworld \\\n --ec2-tag-filters Key=aws:cloudformation:stack-             \n    name,Type=KEY_AND_VALUE,Value=helloworld-production \\\n --deployment-group-name production \\\n --service-role-arn $arn\n```", "```\n$ aws deploy list-deployment-groups \\\n --application-name helloworld\n{\n\"applicationName\": \"helloworld\", \n\"deploymentGroups\": [\n \"staging\",\n        \"production\"\n]\n} \n```", "```\n$ aws sns create-topic --name production-deploy-approval\n{\n\"TopicArn\": \"arn:aws:sns:us-east-1:511912822958:production-deploy- approval\"\n}\n```", "```\n$ aws sns subscribe --topic-arn \\\n arn:aws:sns:us-east-1:511912822958:production-deploy-approval \\\n --protocol email \\\n --notification-endpoint yogeshraheja07@gmail.com\n{\n\"SubscriptionArn\": \"pending confirmation\"\n} \n```"]