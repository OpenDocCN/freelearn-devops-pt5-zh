- en: Jira Troubleshooting and Administration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we looked at Jira's different customization options.
    As we have seen, Jira can be a complex system, especially as the number of customizations
    increases. This can be a headache for administrators when users run into problems
    and require support.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will how learn to use tools for troubleshooting Jira configuration
    issues that easily pinpoint the cause of the problem. We will also look at other
    tools that can help you, as an administrator, to be more efficient at diagnosing
    and fixing issues, as well as supporting your users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting field configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Jira in safe mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing data from other issue trackers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating tasks in Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running scripts in Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching user sessions in Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Jira from the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing Jira logs online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing shared filters and dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to troubleshoot problems related to notifications,
    such as determining whether a user is receiving notifications for an issue and
    determining the reason why a user might not be receiving notifications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to troubleshoot notification problems in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > **System** > **Notification Helper**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the user that is not receiving the notifications as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the issue for which the user is expected to receive notifications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the notification event that should trigger the notification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Submit to start troubleshooting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also run the **Notification Helper** tool from the Admin menu while
    viewing an issue.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Notification Helper tool works by looking at the notification scheme settings
    that are used by the project of the selected issue, and it verifies whether the
    selected user matches one of the notifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be1d7a9b-afb6-4e85-a480-d704d4e61682.png)'
  prefs: []
  type: TYPE_IMG
- en: The user, Christine Johnson, should not receive notifications about the HUM-14 issue,
    because she is not the reporter, assignee, or a watcher of the issue.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, other than your notification scheme settings, you will also want
    to check that your Jira is able to send outgoing emails successfully (refer to
    the *Setting up an outgoing mail server* recipe in [Chapter 6](de142fbf-5c35-4240-9581-1c12d1eddbdd.xhtml), *Emails
    and Notifications*), and also that the notification emails are not being filtered
    out to the user's spam folder.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to troubleshoot problems caused by permission settings,
    such as a user being unable to view an issue.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to troubleshoot permission problems in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration** > System > Permission Helper.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the affected user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the issue for which the user is expected to have permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the permission type that the user should have access to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Submit **to start troubleshooting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also run the **Permission Helper** tool from the Admin menu while viewing
    an issue.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Permission Helper tool works by looking at both the permission scheme and
    the security scheme settings that are used by the selected issue. It verifies
    whether the selected user has the required permissions for the necessary action.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, the user Eric Lin does not have the ability
    to delete the HUM-10 issue because he does not have the Administrators project
    role for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/355d81f5-44e1-4d26-9aad-de9e621e4d7a.png)'
  prefs: []
  type: TYPE_IMG
- en: This completes our recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting field configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will determine why a given field is not displayed while viewing
    an issue and look at how to troubleshoot it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to troubleshoot why a field is not being displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the issue that has missing fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Where is my field?option from the Admin menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f707882-326c-4b1e-bae0-8252ff1afaad.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the field that is missing to start troubleshooting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Field Helper** tool examines field-related configurations, including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Field context**: This checks whether the field is a custom field. The tool
    will then check whether the field has a context that matches the current project
    and issue type combinations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Field configuration**: This verifies that the field is set to Hidden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screens**: This verifies whether the field is placed on the current screen
    based on the screen scheme and issue type screen scheme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Field data**: This verifies whether the current issue has a value for the
    field, as custom fields without a value will often not be displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5593cbf5-054b-4bf8-8ae6-05cb98d430c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Total Comments is a custom field, and the reason it isn't displayed is that
    it has not been added to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Running Jira in safe mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you have different people installing apps in Jira, you can, at times, run
    into problems, but you might be unsure as to which app has caused a certain problem.
    In these cases, you can use the process of elimination by first disabling all
    the apps and re-enabling them one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enabling safe mode will impact on your users, so make sure you plan accordingly
    before doing so.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to enable safe mode:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > **System** > Manage apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Enter safe modelink at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Enter safe mode **when you are prompted to confirm the operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The window looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e780545-acf0-4b51-accc-71f355b3d5b9.png)'
  prefs: []
  type: TYPE_IMG
- en: This completes the steps for our recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Universal Plugin Manager** (**UPM**) is what Jira uses to manage all its
    apps. Other than being the interface that allows you to upload and install third-party
    apps (unless instructed otherwise), it also provides a number of other useful
    administrative features.
  prefs: []
  type: TYPE_NORMAL
- en: When you enable safe mode, the UPM will disable all user-installed apps, which
    returns Jira to a vanilla state. You can then individually enable each app, thereby
    finding the problematic app via the process of elimination.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UPM also provides an audit feature, which keeps track of all the changes
    related to the apps. You can simply click on the Audit log link at the bottom
    of the page and the UPM will display a list of changes made in the last 90 days.
  prefs: []
  type: TYPE_NORMAL
- en: Importing data from other issue trackers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have another issue tracker and are thinking about switching to Jira,
    you can often easily migrate your existing data into Jira with its built-in import
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to import data from Bitbucket's issue tracker.
    Jira supports the importing of data from other issue trackers, such as **Bugzilla**
    and **GitHub**, and as a CSV file. As we will see, the process is almost identical,
    so this recipe can be applied to these other systems too.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to import data from other issue trackers, such
    as Bitbucket, into Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > System > External System Import.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the source's issue tracker system. We will select Bitbucketfor this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Next button to authorize the Jira importer to access data from
    Bitbucket, and when prompted, click on Authorize:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2eeb31c3-2d37-48de-9b88-e980cba14add.png)'
  prefs: []
  type: TYPE_IMG
- en: Map projects from Bitbucket to Jira projects. Check the Don't import this projectoption
    for those projects that you do not want to import to Jira. Click on Next to continue,
    as shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you have clicked on Next, Jira will query Bitbucket to get an export
    of settings, such as fields and values, so that they can be used to map the Jira
    counterparts. This process may take a few minutes, depending on the size of your
    Bitbucket project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8edf7a07-62e1-43d6-80b9-c3b78b649312.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the fields from Bitbucket that you want to manually map to the Jira
    field values. Click on Nextto continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8b33f2f2-9981-49de-a1ac-8c98f6b02285.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Map the field values from Bitbucket to the field values of the Jira fields,
    as shown in the following screenshot. Click on Nextto continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eecf94dd-3185-4090-bb9a-75a4dec4ead5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Map Bitbucket''s link types to the Jira issue link types. Click on Begin Importto
    start importing data into Jira, as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/40f54fa0-c41e-4d1c-9761-ae9d1a594649.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Review the import result. You can click on the download a detailed loglink
    to get a full log of the process if the import has failed. You can also click
    on the save the configuration link to get a copy of the mapped files so that you
    do not have to remap everything from scratch next time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1f3d55d-99a9-47e3-8c29-839092b7b69a.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now look at how the steps work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jira has a common wizard interface for all the different issue tracker importers.
    While each importer is unique in its own way, they all follow the same basic steps,
    as described in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuring the target data source**: This step is where the target issue
    tracker''s data is retrieved. It can be direct database access in the case of
    Bugzilla or it can be over the internet in the case of Bitbucket.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selecting a project to import to**: This is where we have to choose the issues
    that are to be imported to either an existing project or a new project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mapping the target system''s fields to Jira fields**: This is where the target
    issue maps the tracker''s fields to the corresponding Jira fields. Custom fields
    can be automatically created as part of the process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mapping a target system''s field values to Jira field values**: This maps
    the field data based on the previous field mappings. It is usually required for
    selecting list-based fields, such as priority, issue status, and custom fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mapping the issue link types**: This step is optional depending on whether
    the target issue tracker supports linking. If it does, those link types will need
    to be mapped to the Jira issue link types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although the Jira importer is able to handle most instances where the data mapping
    is straightforward, for bigger instances with complex mapping requirements, such
    as project merging and conditional mapping, it is recommended that you engage
    an Atlassian Expert ([https://www.atlassian.com/resources/experts](https://www.atlassian.com/resources/experts))
    to handle the migration rather than relying on the importer alone.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If there are no import options available for your issue tracker, you can also
    try to export your data in CSV format and then use the built-in CSV importer to
    import the data.
  prefs: []
  type: TYPE_NORMAL
- en: Automating tasks in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an administrator, being able to automate tasks is often a very important
    part of your job. You will often need to have some programming skills in order
    to take advantage of some of the automation facilities provided by Jira out of
    the box, such as **listeners** and **services**. Luckily, there are now tools
    that can help you with automation without you needing to know any programming.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up an automated task where Jira will periodically
    check for issues that have not been updated in 7 days, close them, and add a comment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we need to have the** Automation for Jira **app installed.
    You can download it from [https://marketplace.atlassian.com/apps/1215460/automation-for-jira](https://marketplace.atlassian.com/apps/1215460/automation-for-jira) and
    install it using the UPM.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to set up an automated task:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > System > Automation rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Create rulebutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Scheduled` trigger for the new automation rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter how often the automation task should run. We want our task to run once
    every day, so enter `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the `project = "Support Desk" and updated <= 7d` JQL query so that the
    automation task will know which issues it should affect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7a452bc6-9a0c-48c4-b0a0-6335c297af5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Save button to save the trigger configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the trigger configured, we now need to select an action. Since we want
    to close issues, we will select the New action option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Transition issue action type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the destination status to transition affected issues when the automation
    task runs. We want to close issues, so select the Done status. If your workflow
    uses a different status, select that instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37194869-d627-4846-a605-6156fad13dd6.png)'
  prefs: []
  type: TYPE_IMG
- en: If your workflow requires additional fields to be set, you can also set them
    here by selecting the fields from the Choose fields to set… drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Save button to save our changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for our new automation task, such as Close old issues, and click
    on the Turn it on button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your completed automation task should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66a1c653-651a-48d5-b24e-da31fb866d89.png)'
  prefs: []
  type: TYPE_IMG
- en: It's time to look at how these steps work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In its most basic form, an automation rule consists of two components: the
    trigger and the action. The trigger will determine when the automation task will
    run. There are three built-in trigger types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Issue triggers**: These triggers run when the corresponding issue fires an
    event, usually when issues are updated in some way, such as during issue updates
    and workflow transitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scheduled**: This trigger type will automatically run on a predetermined
    time frame. You can use the simple form, as we have in this recipe, to specify
    the frequency, or you can use a *cron* expression to specify the exact hour, minute,
    and second.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrations:** This trigger type creates a webhook URL. When an external
    system makes an HTTP `POST` request to the URL, the trigger will run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **action** is what will happen when a trigger runs. A trigger can run more
    than one action. An action can perform operations, including making changes to
    issue data, sending email notifications, and sending outgoing HTTP `POST` requests.
  prefs: []
  type: TYPE_NORMAL
- en: You can add more advanced components to your automation rule to have conditional
    branching and execution. For example, when a trigger is run, you can run one action
    for issues of type Bug, and another action for issues of type Story. You can also
    chain your automation rules so that one rule has a trigger based on a webhook,
    and you can have another rule with an action that makes an HTTP `POST` to that
    webhook URL to trigger it.
  prefs: []
  type: TYPE_NORMAL
- en: With our automation rule, we have set up a trigger to run once every day. We
    then used a JQL query to select only the issues in the Support Desk project that
    have not been updated in the last 7 days since the task was run. We then added
    an action for the trigger to transition all the issues returned from the JQL query
    to Done.
  prefs: []
  type: TYPE_NORMAL
- en: Running scripts in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira provides an app framework for people with programming skills to create
    apps to extend its features or perform tasks that would otherwise be impossible
    or tedious;  however, even with this functionality, it is sometimes overkill to
    create a full-blown app for what may seem like a simple task. The good news is
    that there is an option for you to write or program scripts that can take advantage
    of what the API offers without the burden of full app development.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a Groovy script that will share a number of search
    filters by adding them as favorites for everyone in Jira—a task that would otherwise
    take a lot of time if done manually.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we need to have ScriptRunner for the Jira app installed. You
    can download it from [https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner](https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner) and
    install it with the UPM.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to run a custom Groovy script in Jira (note
    that you will need to update the filter IDs accordingly):'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > Manage apps > Script Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following script into the Script text area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Switch the filter IDs (`searchRequestIds`) and group name (`shareWith`) based
    on your data. You can get filter IDs by running your filter, and the ID will be
    in your browser's address bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Run to execute the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Script Console window is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/097cb7f0-94a5-47f1-aa61-589ef1e5117d.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see the information being displayed in the console.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ScriptRunner for Jira app allows you to run Groovy scripts inside Jira.
    Since both Java (what Jira is built with) and Groovy can run on the JVM, you will
    have access to all the components and APIs that Jira exposes to developers.
  prefs: []
  type: TYPE_NORMAL
- en: In the script, we list a number of search filters by their IDs (these filters
    need to be shared so that other users can favorite them), loop through them, and
    add each ID as a favorite to the users in the `jira-software-users` group, all
    done using Jira's public API.
  prefs: []
  type: TYPE_NORMAL
- en: Switching user sessions in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will often have problems that only happen to a particular user. In these
    cases, you will have to either sit next to the user in order to see and understand
    the problem or reset the user's password and log in as that user.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how you can switch your current session to any
    other user's session without having to reset or get hold of the user's password.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we need to have the **SU** (short for **switch user**) for
    Jira app installed. You can download it from [https://marketplace.atlassian.com/plugins/com.dolby.atlassian.jira.jirasu ](https://marketplace.atlassian.com/plugins/com.dolby.atlassian.jira.jirasu)and
    install it with the UPM.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To switch (SU) to a different user, go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Administration >** **User management** > Users
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the SU link for the user you want to switch to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed68cd01-868c-4f89-b058-d7afb88ed07c.png)'
  prefs: []
  type: TYPE_IMG
- en: After you have selected the user, your current user session will be switched
    to that user, with the same configurations and permissions applied. After you
    are done, you can switch back by selecting the SU Exit option from the SU menu
    item from the top navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SU for Jira app works by changing your current user session to the user
    of your choice, then, from Jira's point of view, you have effectively logged in
    (without having to supply the user's password) as the selected user.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand this, it should be obvious that this technique could
    be potentially misused in the wrong hands. You can restrict access to the SU functionality
    by going to the UPM and clicking on the Configure button of the SU for Jira app.
    This will then allow you to restrict access to selected groups.
  prefs: []
  type: TYPE_NORMAL
- en: One useful feature is its audit log. Every time someone uses the SU function,
    it is logged in the system, so administrators can always go and check if someone
    has been abusing it. You can access the SU Audit Log by navigating to Administration
    > System > SU Audit Log.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Jira from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We normally interact with Jira via the browser, but sometimes it is useful to
    be able to use the command line, especially for administrative tasks or writing
    shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the command line to create new users in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you need to have the **Atlassian** **Command Line Interface** (**CLI**)
    tool available on your workstation. You can download it from [https://marketplace.atlassian.com/plugins/org.swift.atlassian.cli](https://marketplace.atlassian.com/plugins/org.swift.atlassian.cli).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the Atlassian CLI tool, we first need to install it by unzipping it to
    a convenient location on your workstation. Next, update the `jira.sh` (for Unix)
    or `jira.bat` (for Windows) file to add Jira's details.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, as shown in the following command, Jira is running on `http://localhost:8080`,
    and the administrator credential is `admin_user` with `admin_password` as the
    password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'So, now that we have everything set up, we can run the following command to create a
    new user in Jira:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Atlassian CLI tool works by accessing Jira features and functions via its
    remote SOAP and REST API.
  prefs: []
  type: TYPE_NORMAL
- en: We updated the Jira script file with Jira details, so we don't have to specify
    them every time; this is useful if we want to use the tool in a script. When we
    run the Jira script, it will have all the necessary connection information.
  prefs: []
  type: TYPE_NORMAL
- en: The Atlassian CLI comes with a list of command actions, such as the `addUser` action
    that we used to create users in Jira. You can get a full list of actions from [https://bobswift.atlassian.net/wiki/display/JCLI/Documentation](https://bobswift.atlassian.net/wiki/display/JCLI/Documentation).
  prefs: []
  type: TYPE_NORMAL
- en: Viewing Jira logs online
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, when an error occurs, you, as the administrator, will need to examine
    the Jira log files to pinpoint the exact problem. Normally, in order to get access
    to the logs, you will need to either SSH into the server or download the file
    using an FTP client. In a locked-down environment, you will have to request this
    via your IT team, which could lead to a long turnaround time.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how you can access and search through your Jira
    log files, all from the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we need to have the** Last Log for Jira** app installed. You
    can download it from [https://marketplace.atlassian.com/apps/1211604/last-log-for-jira?hosting=server&tab=overview](https://marketplace.atlassian.com/apps/1211604/last-log-for-jira?hosting=server&tab=overview) and
    install it with the UPM.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to access the Jira log files from the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > Manage apps > View log.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the log file to view from the log-file drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the text string to search the selected log file. If matches are found,
    they will be highlighted, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f44010ed-7d4e-4214-93f0-835be7548a8d.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, we have completed the steps for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira writes its logs in the `atlassian-jira.log` file in the `JIRA_HOME/log` directory.
    Some Jira components, such as Jira Service Desk, and third-party apps write to
    their own log files. Since the Last Log for Jira app allows you to access all
    the files inside the `JIRA_HOME/log` directory, you will have access to all the
    log files.
  prefs: []
  type: TYPE_NORMAL
- en: Managing shared filters and dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira allows end users to create their own search filters and dashboards and
    share them with other users. When the owner of the shared filters and dashboards
    leaves the organization or goes on leave, others will not be able to make changes
    to them. In these cases, as the Jira administrator, you can temporarily (or permanently)
    change the owner of the shared filter and dashboard to a new user.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to reassign a shared filter or dashboard to
    another user:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > System > Shared filters (or dashboards).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the shared filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Change Owneroption for the filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a new owner for the filter—for example, yourself—and click on the Change
    Ownerbutton:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f628c20a-d6bb-4112-a2c1-35fd62544257.png)'
  prefs: []
  type: TYPE_IMG
- en: This completes the steps for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normally, you will only need to change the owner of shared filters or dashboards,
    as other users use those; however, in rare cases where you need to change the
    owner of nonshared filters or dashboards, you can first switch the user session
    to the owner of the filter or dashboard, as outlined in the *Switching user sessions
    in Jira* recipe, and then change the owner to someone else. Note that this requires
    the user to be active in Jira, so you might need to first reactivate the account.
  prefs: []
  type: TYPE_NORMAL
