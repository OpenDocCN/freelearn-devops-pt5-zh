- en: Cloud Computing and Configuration Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Change is hard because people overestimate the value of what they have and
    underestimate the value of what they may gain by giving that up."'
  prefs: []
  type: TYPE_NORMAL
- en: – James Belasco and Ralph Stayer
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we have seen an overview of Docker containers. In this
    chapter, we will focus on creating and configuring the environment for application
    deployment in the cloud. We will use **Infrastructure as a Service** (**IaaS**)
    and the configuration management tool, Chef, to create a platform so that we can
    deploy an application in the later part using automation.
  prefs: []
  type: TYPE_NORMAL
- en: Chef is a configuration management tool that can be utilized to create a runtime
    environment for application deployment on a physical machine, virtualized infrastructure,
    or in the public or private cloud infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the Chef configuration management tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring a Chef workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converging a Chef node using a Chef workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Tomcat packages using community cookbooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of the Chef configuration management tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chef is one of the most popular configuration tools. It comes in two flavors:'
  prefs: []
  type: TYPE_NORMAL
- en: Open source Chef server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hosted Chef
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What we intend to do here is to show how to prepare a runtime environment for
    application deployment. Let''s understand it in terms of application life cycle
    management:'
  prefs: []
  type: TYPE_NORMAL
- en: We have a Java-based Spring application package ready after continuous integration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to deploy the application in the Tomcat web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Tomcat server can be installed in a physical system, virtualized environment,
    Amazon EC2 instances, or Microsoft Azure virtual machines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also need to install Java.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In all these, except for the first point, we need to do the installation and
    configuration activity manual avoid such a repetitive scenario, we can use the
    Chef configuration management tool to create a virtual machine in AWS or in Microsoft
    Azure and then install Tomcat with all the dependencies in order to deploy our Java-based
    spring application.
  prefs: []
  type: TYPE_NORMAL
- en: However, let's look at the basics of the Chef configuration management tool
    so that we can understand how Chef works and how it performs various steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three important parts of the Chef configuration management tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The open source Chef server or hosted Chef**: The Chef server installed on-premise
    or the hosted Chef, is the heart of this automation process of installing the
    runtime environment. It is a centralized repository of cookbooks and details of
    registered nodes. A Chef workstation is used to upload cookbooks and make changes
    in the configurations so that they can be applied to the nodes available in the
    AWS and Microsoft Azure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Chef workstation**: A Chef workstation is a system where we can manage cookbooks
    and other changes. We can perform all the administrative tasks from the Chef workstation.
    Knife is used to upload cookbooks to the Chef server and execute plugin commands.
    Knife plugins can be used to perform various operations in AWS and Microsoft Azure
    Cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node**: A node is a physical or virtual machine. This virtual machine can
    be in a virtualized environment, a private cloud empowered by Openstack or VMware,
    or in a public cloud such as AWS or Microsoft Azure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The node communicates with the open source or hosted Chef server
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Node gets the configuration details related to itself, and then starts executing
    the steps based on these to maintain itself in compliance with what the administrator
    has decided
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go to the official Chef website at [https://chef.io](https://chef.io) and visit
    the Chef homepage. We can use the on-premise Chef server by installing and managing
    it on our own or we can use the hosted Chef:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on MANAGEMENT CONSOLE on [https://chef.io](https://chef.io)  or navigate
    to [https://manage.chef.io/login.](https://manage.chef.io/login)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On [https://manage.chef.io/login](https://manage.chef.io/login)  click on Click
    here to get started!.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the Full Name, Company name, Email ID, and Username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box that says I agree to the Terms of Service and the Master License
    and Services Agreement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Get Started button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So the obvious next step is to go to the mailbox and verify the e-mail ID to
    complete the registration process. We will get an e-mail verification successful
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide the password and click on the Create User button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now create an organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create New Organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the Full Name and Short Name of the organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Create Organization button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, download a starter kit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on Download Starter Kit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will get confirmation dialog; click on Proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's verify the operations available on the hosted Chef.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We haven't configured any node, so the node list is empty. Click on Nodes. Once
    we create the node and register it, we will get all the details about that node
    in the Chef server or on the hosted Chef.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Administration menu and click on Users in the sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the User Name, Full Name, and Email ID created at the time of registration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Check the Reports tab and we won't find any data. The reason for this is that
    the process of convergence, where nodes become compliant based on the configuration
    available on the Chef server, has not taken place and hence there is no data.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, we have a hosted Chef account available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s configure a Chef workstation so that we can communicate with the
    hosted Chef and converge the nodes in AWS and Microsoft Azure Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: Based on the operating system, download the Chef client installable file. In
    our case, we are using CentOS; therefore, we will download the Red Hat version
    of the Chef client from [https://downloads.chef.io/chef-client/redhat/](https://downloads.chef.io/chef-client/redhat/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the operating system type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Chef client version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the installation files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Chef-dk or Chef development kit is used for installing development tools,
    and it can also be used to install knife plugins for AWS and Microsoft Azure.
    Download it from [https://downloads.chef.io/chef-dk/](https://downloads.chef.io/chef-dk/).
    This will help us to install `knife-ec2` and `knife-azure` plugins so that we
    can create and manage virtual machines in the cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have installable files ready for the Chef client and Chef development
    kit and the hosted Chef account is also available, it is time to install and configure
    the Chef workstation. Let's do it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring a Chef workstation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s verify whether the Chef client has been installed on the system or virtual
    machine where we want to configure the Chef workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `chef-client -version` command; if we get the command not found
    error, then it means that the Chef client is not installed. If the Chef client
    is installed, then it will give the version number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the directory where the Chef client installable is downloaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the Chef client RPM using `rpm -ivh chef-<version>.rpm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If the permission is denied while installing the Chef RPM, then use `sudo`
    to run the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After successful installation, verify the Chef client version and this time
    we will get the version number of the Chef client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will use the Chef starter kit that we downloaded while creating an account
    in the hosted Chef:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract `chef-repo`. Copy the `.chef` directory into the root or user folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify the `cookbooks` folder available in the `chef-repo` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `.chef` folder, open the `knife.rb` file in the editor, which contains
    various configurations. Modify the path of the cookbooks directory if required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With that, we've finished configuring our Chef workstation. The next step is
    using it to converge the node.
  prefs: []
  type: TYPE_NORMAL
- en: Converging a Chef node using a Chef workstation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will set up the runtime environment in the node (physical/virtual
    machine) using the Chef workstation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the Chef workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and verify the IP address by executing the `ifconfig` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the knife version installed on the Chef workstation with `knife --version`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `knife node list` command is used to obtain the list of nodes served by
    the Chef server in our case, the hosted Chef. As we haven''t converged any nodes,
    the list will be empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Create a virtual machine using VMware Workstation or VirtualBox. Install CentOS.
    Once the VM is ready, find its IP address and note it down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On our Chef workstation, open a terminal and, using the `ssh` command, try
    to connect to the node or VM we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have an SSH session on the node from the Chef workstation. If you verify
    the IP address, you''ll know that you are accessing a different machine by remote
    (SSH) access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Use knife to converge the node. Provide the IP address/DNS name, user, password,
    and name of the node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The node convergence is successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the first Chef client run in the log.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the Chef client version that is installed.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the empty run list message in the log.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify converging 0 resource messages.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We can check whether the preceding process is successful or not by navigating
    to the hosted Chef account and verifying whether Node Name and IP Address in the
    Nodes section is available or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the dashboard, go to the Details tab to get more information about the node;
    verify Attributes associated with the node and also Permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00290.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the bottom section of the hosted Chef Dashboard, verify the CPU attributes
    and other details of the node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The report section provides details on Runs Summary, Run Durations, and Run
    Counts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00309.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will try to install Tomcat using Chef.
  prefs: []
  type: TYPE_NORMAL
- en: Installing software packages using cookbooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until now, we''ve performed the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a hosted Chef account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Chef workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converging a node using a Chef workstation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we will install application packages using community cookbooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the runtime environment automatically, it''s best to use the Chef
    community cookbooks:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://github.com/chef-cookbooks](https://github.com/chef-cookbooks) 
    and find all the community cookbooks required to set up a runtime environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are using a sample Spring application, namely, PetClinic. We need to install
    Java and Tomcat to run Java EE applications such as this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Tomcat cookbook from [https://supermarket.chef.io/cookbooks/tomcat](https://supermarket.chef.io/cookbooks/tomcat) 
    and navigate to the Dependencies section on that page. Without the dependencies
    uploaded to our Chef server, we can't upload the Tomcat cookbook to use it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download OpenSSL and Chef sugar from [https://supermarket.chef.io/cookbooks/openssl](https://supermarket.chef.io/cookbooks/openssl) and
    [https://supermarket.chef.io/cookbooks/chef-sugar](https://supermarket.chef.io/cookbooks/chef-sugar)
    respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install Java, download the cookbook from [https://supermarket.chef.io/cookbooks/java](https://supermarket.chef.io/cookbooks/java) 
    and its dependency as well from [https://supermarket.chef.io/cookbooks/apt](https://supermarket.chef.io/cookbooks/apt).
    Extract all the compressed files to the cookbook''s directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to cookbooks in the terminal and execute the `ls` command to verify the
    subdirectories of the community cookbooks which we downloaded earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s upload one of the cookbooks and verify whether it is uploaded on the
    hosted Chef or not. Upload the apt cookbook with the `knife cookbook upload apt`
    command as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the hosted the Dashboard and click on Policy. Go to the Cookbook section
    on the hosted Chef instance and see if the apt Cookbook has been uploaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to upload all dependencies in terms of cookbooks for the Tomcat cookbook
    to be uploaded, otherwise it will give us an error. Upload all other cookbooks
    in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the hosted Chef Dashboard and verify all the Cookbooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have uploaded all the cookbooks to the hosted Chef, let's create a role.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this stage, all the required cookbooks are uploaded on the hosted Chef. Now,
    let's create a role on the hosted Chef.
  prefs: []
  type: TYPE_NORMAL
- en: Before creating a role, let's understand what it means.
  prefs: []
  type: TYPE_NORMAL
- en: A role is created for a specific function. It provides a path for various patterns
    and workflow processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the web server role can consist of Tomcat server recipes and any
    custom attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Policy in the hosted Chef Dashboard and click on Roles in the sidebar
    menu. Click on Create Role to create a role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Create Role window, provide a Name and `Description`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00269.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A Run List keeps roles/recipes in a specific manner and order. It can be considered
    as the specifications of a node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Tomcat from the Available Recipes list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the Tomcat recipe to the Current Run List.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the newly added role in the hosted Chef Dashboard in the Policy tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s specify a role while converging the node in the terminal. Add the
    role to the node with `knife node run_list add tomcatserver "role[v-tomcat]"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `v-tomcat` role is now being associated with the `tomcatserver` node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to node and execute `chef-client`; it will execute the steps to bring the
    node status in compliance with the role assigned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the node and check whether Tomcat is available or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the Reports tab in the hosted Chef account to get the latest details
    about the node convergence:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At this stage, we are ready with a hosted Chef account, configured workstation,
    and converged node.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will install knife plugins for some popular cloud platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Installing knife plugins for Amazon Web Services and Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our objective is to install application packages to provide the runtime environment
    for our Java-based Petclinic application. In the traditional environment, we raise
    the acquisition request for the physical server and then the infrastructure team
    helps us to install different software on it to provide the runtime environment
    for our application. With Chef, we can install these packages using community
    cookbooks and hence we can automate it easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will use cloud resources. Amazon EC2 and Microsoft Azure
    are two very popular public cloud resource providers. We will create virtual machines
    in the cloud environment and then install different application packages using
    the Chef configuration management tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: First, we will provision virtual machines in Amazon EC2 and Microsoft Azure using
    knife plugins using a Chef workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Chef workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `knife` commands to create instances (Chef nodes) in Amazon EC2 and
    Microsoft Azure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is how the process will work:'
  prefs: []
  type: TYPE_NORMAL
- en: Execute the command on the Chef workstation to create a new instance in your
    cloud environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new instance is created in Amazon EC2 and Microsoft Azure and it is up and
    running (the Chef node is available).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Chef node communicates with the Chef server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Chef server instructs the Chef node to execute a list of tasks and download
    the Chef client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A secure handshake takes place between the Chef server and the Chef node; the
    Chef server generates a security certificate that is used to authenticate the
    new node's upcoming queries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Chef node executes tasks and informs the Chef server regarding its compliance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following are the major benefits of using the Chef configuration management
    tool with different public cloud service providers as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Faster time to market
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centralized control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistent environment to deploy the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less or no manual effort and errors due to manual limitations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rapid application development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy rollback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High availability and disaster recovery for business continuity that is essential
    in today's day and age
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community cookbooks accessible to all
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Chef Development Kit** (**ChefDK**) provides development tools built by
    the Chef community that makes installing knife plugins easier.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://downloads.chef.io/chef-dk/](https://downloads.chef.io/chef-dk/)
    and download ChefDK based on the operating system we use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, select Red Hat Enterprise Linux and select the ChefDK version.
    Click on Red Hat Enterprise Linux 6 and download it, as it works on 64-bit (`x86_64`)
    versions of Red Hat Enterprise Linux and CentOS 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the `chef gem install knife-ec2` command to create, bootstrap, and
    manage Amazon EC2 instances. More details are available at [https://github.com/chef/knife-ec2](https://github.com/chef/knife-ec2):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the `knife ec2 --help` command to check the available Amazon EC2 commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Configure Amazon EC2 credentials for the `knife` plugin in the `knife.rb` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `knife[:aws_access_key_id]` and `knife[:aws_secret_access_key]` as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the `chef gem install knife-azure` command to create, bootstrap, and
    manage Microsoft Azure virtual machines. More details are available at [https://github.com/chef/knife-ec2](https://github.com/chef/knife-ec2):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the available Azure commands using `knife azure --help`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Creating and configuring a virtual machine in Amazon EC2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the `knife node list` command to get the list of nodes to get clarity on
    how many nodes are already configured using Chef:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `knife ec2 server create` command with the following parameters to
    create a new virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `-I` | `ami-1ecae776` | This is the ID of the Amazon machine image |'
  prefs: []
  type: TYPE_TB
- en: '| `-f` | `t2.micro` | This is the type of the virtual machine |'
  prefs: []
  type: TYPE_TB
- en: '| `-N` | DevOpsVMonAWS | This is the name of the Chef node |'
  prefs: []
  type: TYPE_TB
- en: '| `--aws-access-key-id` | Your access key ID | This is the access key ID of
    the AWS account |'
  prefs: []
  type: TYPE_TB
- en: '| `--aws-secret-access-key` | Your secret access key | This is the secret access
    key of the AWS account |'
  prefs: []
  type: TYPE_TB
- en: '| `-S` | Book | This is the SSH key |'
  prefs: []
  type: TYPE_TB
- en: '| `--identity-file` | `book.pem` | This is the PEM file |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssh-user` | `ec2-user` | This is the user for the AWS instance |'
  prefs: []
  type: TYPE_TB
- en: '| `-r` | `role[v-tomcat]` | This is the Chef role |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s create an EC2 instance using the `knife` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'At this stage, the AWS EC2 instance has been created and is `Waiting for sshd
    access to become available`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the Chef client has been installed on the AWS instance. It is ready for
    the initial `Chef Client run` with `version 12.9.41`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'It is now ready to resolve cookbooks based on the role and install runtime
    environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The runtime environment is available now and it is time to start Tomcat services
    in the AWS instance; verify the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the details of the newly created AWS instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Go to [https://aws.amazon.com/](https://aws.amazon.com/) and sign in.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Amazon EC2 section and click on Instances in the left-hand sidebar
    or on Running Instances on the Resources page get to the details about AWS instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the Name, Tags, Public DNS, and other details that we get in the Chef
    client run with the details available on the Amazon Dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s go to the hosted Chef Dashboard and click on Nodes to verify the
    newly created/converged node in Amazon EC2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify the instance Details and Run List:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: An instance is created in Amazon EC2 and Tomcat is also installed and its service
    is also started, we can verify whether it is actually running or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to access the Tomcat server installed on the AWS instance using
    the public domain name of the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If it gives the connection has timed out error, then the reason for this is
    the restriction of security groups in AWS. Go to the Security Group in the AWS
    instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the AWS portal, go to the Security Group section. Select the default security
    group to verify the inbound rules. We can see only the SSH rule available; we
    need to allow port `8080` so that we can access it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a new custom rule with port 8080:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, try to access the public domain URL, and we will get the Tomcat page on
    our AWS instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, we will create and configure a virtual machine in Microsoft
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring a virtual machine in Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create and configure Chef and Microsoft Azure integration, we need to provide
    the Microsoft Azure account and credentials. To get Microsoft Azure credentials,
    download the `publishsettings` file and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Login to the Microsoft Azure portal using the login name and password and download
    a `publishsettings` file from [https://manage.windowsazure.com/publishsettings/index?client=xplat](https://manage.windowsazure.com/publishsettings/index?client=xplat).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy it on a Chef workstation and refer to this local file by creating an entry
    in the `knife.rb` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the parameters to create a virtual machine in the Microsoft
    Azure public cloud:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Parameter** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `--azure-dns-name` | `distechnodemo` | This is the DNS name |'
  prefs: []
  type: TYPE_TB
- en: '| `--azure-vm-name` | `dtserver02` | This is the name of the virtual machine
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--azure-vm-size` | `Small` | This is the size of the virtual machine |'
  prefs: []
  type: TYPE_TB
- en: '| `-N` | `DevOpsVMonAzure2` | This is the name of the Chef node |'
  prefs: []
  type: TYPE_TB
- en: '| `--azure-storage-account` | `classicstorage9883` | This is Azure''s storage
    account |'
  prefs: []
  type: TYPE_TB
- en: '| `--bootstrap-protocol` | `cloud-api` | This is the Bootstrap protocol |'
  prefs: []
  type: TYPE_TB
- en: '| `--azure-source-image` | `5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-67-20160310`
    | This is the name of the Azure source image |'
  prefs: []
  type: TYPE_TB
- en: '| `--azure-service-location` | `Central US` | This is the Azure location to
    host the virtual machine |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssh-user` | `dtechno` | This is the SSH user |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssh-password` | `<YOUR PASSWORD>` | This is the SSH password |'
  prefs: []
  type: TYPE_TB
- en: '| `-r` | `role[v-tomcat]` | This is the role |'
  prefs: []
  type: TYPE_TB
- en: '| `--ssh-port` | `22` | This is the SSH port |'
  prefs: []
  type: TYPE_TB
- en: 'We have installed the `knife azure` plugin successfully. Now we can create
    the virtual machine in Microsoft Azure Cloud by executing the `knife azure server
    create` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will start with resource provisioning in Microsoft Azure Public Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Go to the hosted Chef account in the browser and click on the Nodes tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the new node we created on Microsoft Azure Public Cloud has been
    registered on the hosted Chef server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can see the `DevOpsVMonAzure2` Node Name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Microsoft Azure portal and click on the VIRTUAL MACHINES section
    to verify the newly created virtual machine using the Chef configuration management
    tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on VIRTUAL MACHINES in the Microsoft Azure Dashboard, and verify the
    details of virtual machines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Go to the bottom of the virtual machines page, and verify the extensions section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check whether it shows chef-service enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have now created virtual machines in Amazon EC2 and Microsoft Azure using
    `knife` plugins with installed runtime environment using role.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed and configured a Chef workstation, we converged
    the node, created a role, and installed the runtime environment for Java-based
    web applications. We also used `knife` plugins to create virtual machines in Microsoft
    Azure and Amazon EC2 and used a role to install a runtime environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to deploy Java-based web applications into
    the web server in an automated way using scripts or plugins.
  prefs: []
  type: TYPE_NORMAL
- en: We will deploy our WAR file into the local or remote Tomcat. The remote Tomcat
    will be on Amazon EC2, Microsoft Azure Virtual Machine, AWS Elastic Beanstalk,
    or Microsoft Azure Web Apps.
  prefs: []
  type: TYPE_NORMAL
