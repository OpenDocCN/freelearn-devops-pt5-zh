- en: Applying DevOps to Salesforce Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 DevOps 应用于 Salesforce 应用程序
- en: In the previous chapter, we learned some basics about the Salesforce development
    process, what a sandbox is, the different types of sandbox, and how to choose
    a sandbox according to our needs. We developed our own recruiting application
    using Salesforce, followed by learning the traditional ways used for Salesforce
    deployment. We also had a look at the issues we face during traditional deployments
    of Salesforce applications. We learned Salesforce development setup with Eclipse.
    We discussed applying DevOps to Salesforce applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了关于 Salesforce 开发流程的一些基础知识，了解了什么是沙箱，沙箱的不同类型，以及如何根据我们的需求选择沙箱。我们使用 Salesforce
    开发了自己的招聘应用程序，随后学习了 Salesforce 部署的传统方式。我们还了解了在传统的 Salesforce 应用部署过程中遇到的问题。我们学习了如何通过
    Eclipse 设置 Salesforce 开发环境，并讨论了如何将 DevOps 应用于 Salesforce 应用程序。
- en: In this chapter, we will discuss why there is a need for DevOps in Salesforce
    applications. We will also discuss the problems we face while working on big projects
    that involve large numbers of developers, testers, and so on. We will try to get
    a clear idea about how applying DevOps for Salesforce is different from other
    tech stacks such as simple Java application stacks. We will differentiate between
    the development process involved in Salesforce applications and that of other
    tech stacks such as Java, PHP, Ruby, and so on. We will also see in detail the
    DevOps process in Java applications to get a clearer idea about the DevOps continuous
    integration and delivery process using DevOps tools. We will go through a step-by-step
    process to set up a simple continuous integration  pipeline with Jenkins and Git.
    We will also learn how to install required plugins, configure the Maven plugin
    in Jenkins, and how to add a Jenkins webhook URL in a GitHub project; we'll also
    implement continuous deployment using the Jenkins plugin. Finally, we will see
    how we can deploy our code whenever any changes are pushed to GitHub.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将讨论为什么在 Salesforce 应用程序中需要 DevOps。我们还将讨论在涉及大量开发人员、测试人员等的大型项目中，我们面临的挑战。我们将尝试澄清将
    DevOps 应用于 Salesforce 与将其应用于其他技术栈（例如简单的 Java 应用程序栈）之间的不同。我们将区分 Salesforce 应用程序开发过程中与其他技术栈（如
    Java、PHP、Ruby 等）开发过程中所涉及的不同之处。我们还将详细了解 Java 应用程序中的 DevOps 流程，以便更清楚地了解 DevOps 持续集成和交付过程，以及如何使用
    DevOps 工具进行操作。我们将逐步介绍如何使用 Jenkins 和 Git 设置一个简单的持续集成管道。我们还将学习如何安装所需的插件，如何在 Jenkins
    中配置 Maven 插件，以及如何在 GitHub 项目中添加 Jenkins Webhook URL；我们还将实现使用 Jenkins 插件进行持续部署。最后，我们将了解如何在任何更改推送到
    GitHub 时自动部署我们的代码。
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将学习以下内容：
- en: The need for a DevOps process in Salesforce development.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Salesforce 开发中对 DevOps 流程的需求。
- en: The differences between DevOps for Salesforce and DevOps for other tech stacks.
    For example, the typical DevOps process for a Java development stack
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Salesforce 的 DevOps 与其他技术栈的 DevOps 之间的区别。例如，Java 开发栈的典型 DevOps 流程。
- en: The need for a DevOps process in Salesforce development
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Salesforce 开发中对 DevOps 流程的需求
- en: As discussed in the previous chapter, we can apply DevOps practices in Salesforce
    projects to achieve faster delivery of applications. The question arises, *Why
    do we need DevOps?*
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在上一章中讨论的那样，我们可以在 Salesforce 项目中应用 DevOps 实践，以实现更快速的应用交付。那么，问题来了，*为什么我们需要 DevOps？*
- en: Let's discuss some normal development practices in Salesforce projects. In Salesforce,
    everything is on the cloud, you just need a browser and internet connection to
    start developing your application. But as the development team grows, the complexities
    of building different features and deploying them in a production environment
    also become difficult. Although we can use different types of sandbox according
    to our need, managing the deployment process is still a time-consuming task.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下 Salesforce 项目中的一些常见开发实践。在 Salesforce 中，一切都在云端，你只需要一个浏览器和互联网连接，就可以开始开发应用程序。但是随着开发团队的增长，构建不同功能并将它们部署到生产环境中的复杂性也变得更加困难。虽然我们可以根据需要使用不同类型的沙箱，但管理部署流程仍然是一个耗时的任务。
- en: Given that multiple developers are working on different features in different
    sandbox environments, we need to cherry-pick some features from those environments
    and deploy them to  a **user acceptance testing** (**UAT**) environment. This
    process is error-prone as it involves human interaction at various phases. Also
    we don't have any system for version control to manage changes done by developers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到多个开发人员在不同的沙盒环境中处理不同的功能，我们需要从这些环境中挑选一些功能并将其部署到 **用户验收测试**（**UAT**）环境中。这个过程容易出错，因为它涉及多个阶段的人为操作。此外，我们没有任何版本控制系统来管理开发人员所做的更改。
- en: Let's assume that somehow we managed to work with multiple developers with multiple
    sandbox environments and without managing the source code (that is just a hypothetical
    case but consider it is possible). What about testing new features in your application,
    and more importantly ensuring that nothing breaks in the previous application?
    Achieving this with manual testing would require a large number of testers and
    still we can't ensure that we have tested each and every feature right from login
    to some complex feature we just introduced in our application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们设法与多个开发人员在多个沙盒环境中合作，并且不管理源代码（虽然这只是一个假设情况，但可以认为是可能的）。那么，如何测试应用程序中的新特性，更重要的是，如何确保不会破坏之前的应用程序呢？通过手动测试来实现这一点将需要大量的测试人员，而且我们仍然无法确保已测试每一个功能，从登录到我们刚刚在应用程序中引入的复杂功能。
- en: Why make such a mess when we can achieve more a streamlined delivery with the
    help of DevOps? DevOps reduces the time of delivery and makes the process less
    prone to errors; tracking applications becomes easier with a different set of
    open-source tools. We can improve the Salesforce application development process
    by integrating it with a DevOps toolset such as Git to maintain our source code
    version. We can integrate Jenkins for the deployment of Salesforce applications.
    We will see how to do this in more detail in [Chapter 6](c18c24e5-b3e1-467c-8e33-cc278016e0a6.xhtml)*,
    Continuous Integration*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要做如此繁琐的工作，当我们可以借助 DevOps 实现更精简的交付呢？DevOps 减少了交付时间，使过程更不易出错；通过一系列开源工具，跟踪应用程序变得更加容易。我们可以通过将
    Salesforce 应用程序开发过程与 DevOps 工具集（如 Git）集成，以保持源代码版本。我们将更详细地介绍如何在[第六章](c18c24e5-b3e1-467c-8e33-cc278016e0a6.xhtml)*，持续集成*中实现这一点。
- en: DevOps helps applications in other stacks to get more productive and follow
    a faster delivery process. We can achieve fast delivery in Salesforce projects
    with some modifications to the development and delivery processes. DevOps will
    impact everyone who is involved in Salesforce application development, testing,
    and deployment directly or indirectly, along with other end users.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 帮助其他技术栈的应用程序提高生产力，并遵循更快的交付流程。我们可以通过对开发和交付流程进行一些修改，在 Salesforce 项目中实现快速交付。DevOps
    将直接或间接地影响参与 Salesforce 应用程序开发、测试和部署的所有人员，以及其他终端用户。
- en: The differences between DevOps for Salesforce and other tech stacks
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Salesforce 的 DevOps 与其他技术栈的差异
- en: Applying DevOps in Salesforce is different from other environments; let's look
    at this step by step.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Salesforce 中应用 DevOps 与其他环境不同，让我们一步一步来看。
- en: First, we will talk about the development process. Salesforce development is
    easy to start with because you don't need any installations and extra setup on
    your development machines. All you need is an internet connection and a browser
    supported by Salesforce platforms, such as Internet Explorer, Google Chrome, Safari,
    and so on. As we demonstrated in the previous chapter, a sample application in
    Salesforce is easy to develop with some clicks as Salesforce provides some existing
    applications and tabs for you to reuse. We can create some custom tabs in our
    application according to our requirements. When it comes to other tech stacks
    such as Java, to get started with development we need to install Java on our machines
    and set up some environment variables.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将讨论开发过程。Salesforce 开发容易上手，因为你不需要在开发机器上进行任何安装或额外的设置。你所需要的只是一个互联网连接和一个 Salesforce
    支持的浏览器，如 Internet Explorer、Google Chrome、Safari 等。如我们在上一章所示，Salesforce 中的示例应用程序只需几次点击就能轻松开发，因为
    Salesforce 提供了一些现有的应用程序和标签供你重用。我们可以根据需求在应用程序中创建一些自定义标签。当谈到其他技术栈（如 Java）时，为了开始开发，我们需要在机器上安装
    Java 并设置一些环境变量。
- en: In tech stacks such as Java, JavaScript, PHP, and Ruby, the most common thing
    is using version control systems such as Git, CVS, SVN, and so on, which help
    to keep track of application changes done by each developer. Version control systems
    make it possible for multiple developers to work on a single project or module
    without overwriting each other's changes. In some situations, such as when something
    goes wrong and unfortunately we need to roll back updates, version control is
    very useful.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java、JavaScript、PHP 和 Ruby 等技术栈中，最常见的做法是使用版本控制系统，如 Git、CVS、SVN 等，帮助追踪每个开发人员对应用所做的更改。版本控制系统使多个开发人员能够在同一个项目或模块上工作而不覆盖彼此的更改。在某些情况下，比如当出现问题且我们需要回滚更新时，版本控制非常有用。
- en: When we have a small team of one or two developers working on a Salesforce application,
    we may not need to use version control. But when it comes to teams with multiple
    developers working on different sandboxes, developing different features releasing
    at different timelines or sprints, it becomes necessary to have version control
    for a streamlined development and delivery process.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们只有一两名开发人员在开发一个 Salesforce 应用时，可能不需要使用版本控制。但当团队中有多个开发人员在不同的沙箱中工作，开发不同的功能并在不同的时间线或冲刺中发布时，使用版本控制就变得必要，以便实现精简的开发和交付过程。
- en: There are some ways to deploy changes to Salesforce production organizations,
    such as using Change Set, Eclipse, and Ant. For deployment using Change Set, you
    need to connect organizations using Deployment Connection. Eclipse uses metadata
    for deployment and it is mostly used by developers. Using Ant for deployment,
    we can perform file-based deployment to production organizations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以将更改部署到 Salesforce 生产组织中，例如使用 Change Set、Eclipse 和 Ant。对于使用 Change Set
    的部署，你需要通过部署连接来连接组织。Eclipse 使用元数据进行部署，主要由开发人员使用。使用 Ant 进行部署时，我们可以执行基于文件的部署到生产组织。
- en: Example – the typical DevOps process for a Java development stack
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 – Java 开发栈的典型 DevOps 流程
- en: 'The prerequisites are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 前提条件如下：
- en: Java version 1.6 or above
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 版本 1.6 或更高
- en: Apache Maven 3.5.2
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Maven 3.5.2
- en: Jenkins server
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 服务器
- en: 'Note: Use latest version of software available. In future, the previous versions
    may not be compatible.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：请使用最新版本的软件。将来，先前的版本可能不兼容。
- en: If you haven't already installed Java, you can download it from the official
    website: [https://java.com/en/download/](https://java.com/en/download/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装 Java，可以从官方网站下载：[https://java.com/en/download/](https://java.com/en/download/)。
- en: Use the following commands for this sample CI/CD application. I will be using
    an Ubuntu 16.04 instance for setup. So let's start by installing Java.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令来配置此示例 CI/CD 应用。我将使用一个 Ubuntu 16.04 实例进行设置。那么我们先开始安装 Java。
- en: 'Log in to your Ubuntu server machine as a normal user. We need a user with
    `sudo` access for installing packages on the machine. I will be using the Ubuntu
    username for this example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以普通用户身份登录到你的 Ubuntu 服务器机器。我们需要一个具有 `sudo` 权限的用户来安装机器上的软件包。这里我将使用 Ubuntu 的用户名作为示例：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The previous commands will install Java version 8 on the machine. Verify this
    with the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将在机器上安装 Java 8 版本。可以使用以下命令验证：
- en: 'Note: The same setup should work if the Java version is incremented to a stable
    version.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果 Java 版本更新到一个稳定版本，则相同的设置应当能够正常工作。
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we have Java in place, so we will move on to the installation of Maven.
    The installation steps are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Java，接下来我们将安装 Maven。安装步骤如下：
- en: 'Download Maven from the official website:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从官方网站下载 Maven：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Extract the package using the following:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令提取包：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We need to set up environment variables. Add a path to `.bashrc`:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要设置环境变量。在 `.bashrc` 中添加路径：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Verify whether Maven was installed on your machine:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证是否在机器上安装了 Maven：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will create a project in Maven. Here we will be using the official Maven
    example *Maven in 5 Minutes*. You will find a link in the References section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 Maven 中创建一个项目。这里我们将使用官方的 Maven 示例 *Maven in 5 Minutes*。你可以在参考部分找到链接。
- en: 'Let''s move on to creating a sample project in Maven:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们创建一个 Maven 示例项目：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It will take some time to download dependencies. After completing execution
    of command, it will create a directory with value passed to `DartifactId` that
    is `my-app`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下载依赖项需要一些时间。命令执行完成后，它会创建一个目录，目录名称为传递给`DartifactId`的值，即`my-app`。
- en: In this example, `src/main/java` contains source code, `src/test/java` has test
    code, and `pom.xml` contains all information required to build the project.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`src/main/java` 包含源代码，`src/test/java` 包含测试代码，而 `pom.xml` 包含构建项目所需的所有信息。
- en: 'The following is the source code we have from the sample app:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们从示例应用中获得的源代码：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we will build our sample project:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来构建我们的示例项目：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will compile the project and create a JAR in the target folder as `my-app-1.0-SNAPSHOT.jar`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译项目并在目标文件夹中创建一个名为 `my-app-1.0-SNAPSHOT.jar` 的 JAR 文件。
- en: 'Test the JAR with the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令测试 JAR 文件：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We get the following output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So, we got our sample application running but what if we have many developers
    working on the project? We need a version control tool and some standard procedure
    for deploying this project to the server environment. For this, we will follow
    our sample DevOps pipeline with Git and Jenkins.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的示例应用已经运行起来了，但如果有多个开发人员在项目上工作怎么办？我们需要一个版本控制工具以及一些标准的部署流程，将该项目部署到服务器环境中。为此，我们将按照我们的示例
    DevOps 流水线，使用 Git 和 Jenkins。
- en: Git is a version control tool that helps us to track changes in our source code
    and coordinate our work with different developments. It is the most commonly used
    version control tool nowadays. We will have a look at Git in depth in [Chapter
    5](45e26817-986f-4fa4-a9c3-3044e7aad5da.xhtml)*, Version Control*. For this sample
    pipeline, we can use a GitHub account.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个版本控制工具，它帮助我们跟踪源代码中的更改，并与不同的开发人员协调工作。它是当今最常用的版本控制工具。我们将在[第五章](45e26817-986f-4fa4-a9c3-3044e7aad5da.xhtml)*《版本控制》*中深入了解
    Git。对于这个示例流水线，我们可以使用 GitHub 账户。
- en: 'Create a repository on GitHub and push sample code to this repository:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上创建一个代码仓库，并将示例代码推送到该仓库：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we have our version control ready, we will move on to the next step
    in using a continuous integration and continuous delivery process using Jenkins.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的版本控制准备好了，我们将继续下一步，使用 Jenkins 进行持续集成和持续交付。
- en: Jenkins is an open-source tool written in the Java programming language. It
    is used to automate continuous integration and continuous delivery jobs. We will
    see Jenkins in detail in [Chapter 6](c18c24e5-b3e1-467c-8e33-cc278016e0a6.xhtml)*,
    Continuous Integration*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是一个开源工具，用 Java 编写。它用于自动化持续集成和持续交付工作。我们将在[第六章](c18c24e5-b3e1-467c-8e33-cc278016e0a6.xhtml)*《持续集成》*中详细介绍
    Jenkins。
- en: 'Let''s get started with Jenkins:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用 Jenkins：
- en: Install Jenkins. I have installed Jenkins on an Ubuntu server.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Jenkins。我已在一台 Ubuntu 服务器上安装了 Jenkins。
- en: Log in to the Jenkins server.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 Jenkins 服务器。
- en: Install the required Jenkins plugins on the Jenkins server using the following
    process.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下过程，在 Jenkins 服务器上安装所需的 Jenkins 插件。
- en: Go to Manage Jenkins | GitHub Plugin and search for `maven plugin`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入“管理 Jenkins” | “GitHub 插件”并搜索 `maven plugin`。
- en: Install the Maven plugin in Jenkins if it was not installed while setting up
    Jenkins. You need to configure Maven in Jenkins Global Tool Configuration as we
    have already installed it.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在设置 Jenkins 时没有安装 Maven 插件，请在 Jenkins 中安装该插件。你需要在 Jenkins 全局工具配置中配置 Maven，因为我们已经安装了它。
- en: Configuring Maven in the Jenkins server
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jenkins 服务器中配置 Maven
- en: Go to Manage Jenkins | Global Tool Configuration.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 进入“管理 Jenkins” | “全局工具配置”。
- en: 'We have already installed Maven on our machine. So enter a name for the Maven
    installation and the `M2_HOME` path as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在机器上安装了 Maven。所以输入 Maven 安装的名称和 `M2_HOME` 路径，如下所示：
- en: '![](img/d034ba5d-5b79-45ca-8f81-085a9f0f5308.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d034ba5d-5b79-45ca-8f81-085a9f0f5308.png)'
- en: 'Let''s configure our Jenkins job to build our sample project:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置我们的 Jenkins 任务，来构建我们的示例项目：
- en: 'Click on create new jobs:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建新任务：
- en: '![](img/962d2573-4502-4aa8-9d2c-55ea6ee683f8.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/962d2573-4502-4aa8-9d2c-55ea6ee683f8.png)'
- en: 'Create a Jenkins job with the Maven plugin. Provide the job name `devops-ci-cd`
    (you can choose another project name, if you want):'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有 Maven 插件的 Jenkins 任务。提供任务名称 `devops-ci-cd`（如果你愿意，可以选择另一个项目名称）：
- en: '![](img/e1f74887-1063-4104-bcae-dd8aa070247f.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1f74887-1063-4104-bcae-dd8aa070247f.png)'
- en: 'In the Source Code Management section, provide the Git URL of your project.
    Provide credentials to clone the repository in Jenkins:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源代码管理部分，提供你的项目的 Git URL。提供凭据以便在 Jenkins 中克隆该仓库：
- en: '![](img/8afea5b2-d6a7-4e9c-ad22-67da35dfe815.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8afea5b2-d6a7-4e9c-ad22-67da35dfe815.png)'
- en: 'Choose GitHub hook trigger for GitScm polling in Build Triggers. If Jenkins
    receives a PUSH GitHub webhook from the preceding repository, it will trigger
    this job:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建触发器中选择 GitHub 钩子触发器进行 GitScm 轮询。如果 Jenkins 收到来自前述仓库的 PUSH GitHub Webhook，它将触发该任务：
- en: '![](img/6f811618-8cc0-47ed-a6d8-aadf156c40f5.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f811618-8cc0-47ed-a6d8-aadf156c40f5.png)'
- en: 'Provide a path to root `pom.xml`. It will be a relative path to the module
    root. In Build, add Root POM as `pom.xml` and Goals and options as `package`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供 `pom.xml` 的根路径。这将是相对于模块根目录的路径。在构建中，添加根 POM 文件为 `pom.xml`，并将 Goals 和选项设置为
    `package`：
- en: '![](img/d3723517-d5a3-4bb0-8812-bfe4c94f3e13.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3723517-d5a3-4bb0-8812-bfe4c94f3e13.png)'
- en: Save your work and click on Build now.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的工作并点击立即构建。
- en: This will create `my-app-1.0-SNAPSHOT.jar` in the `/var/lib/Jenkins/workspace/target`
    folder. You can check the console logs while the project build is in progress.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `"/var/lib/Jenkins/workspace/target"` 文件夹中创建 `my-app-1.0-SNAPSHOT.jar` 文件。在项目构建过程中，您可以查看控制台日志。
- en: 'Once the JAR is successfully built, you can see the console logs as shown in
    the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 JAR 文件成功构建，您可以看到如下截图所示的控制台日志：
- en: '![](img/cffe2dea-3a82-4be4-9031-9d07405853c0.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cffe2dea-3a82-4be4-9031-9d07405853c0.png)'
- en: We have completed a continuous integration job successfully. Now, we need to
    add the Jenkins webhook URL in the GitHub settings to trigger a Jenkins build
    whenever someone pushes code to our GitHub project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功完成了持续集成任务。现在，我们需要在 GitHub 设置中添加 Jenkins webhook URL，以便每当有人将代码推送到我们的 GitHub
    项目时，Jenkins 会自动触发构建。
- en: Adding a Jenkins webhook URL in a GitHub project
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GitHub 项目中添加 Jenkins webhook URL
- en: 'To add a Jenkins webhook URL, you need to perform the following steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加 Jenkins webhook URL，请按照以下步骤操作：
- en: Grab your GitHub webhook URL from Manage Jenkins | Configure System | GitHub
    Web Hook Section.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 "Manage Jenkins | Configure System | GitHub Web Hook Section" 获取您的 GitHub
    webhook URL。
- en: 'Example URL: `https://<your-domain-name or IP address>/web-hook/`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 URL：`https://<your-domain-name or IP address>/web-hook/`
- en: 'Go to GitHub | Choose your project. Go to Settings and select Integrations
    and Services. Click on Add service and search for `Jenkins`. As a result, you
    will see two service: Jenkins (Git plugin) and Jenkins (GitHub plugin). Choose
    one according to your project. We are going for Jenkins (GitHub plugin):'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 GitHub | 选择您的项目。进入设置并选择集成和服务。点击添加服务并搜索 `Jenkins`。结果中会显示两个服务：Jenkins（Git 插件）和
    Jenkins（GitHub 插件）。根据您的项目选择其中一个。我们选择 Jenkins（GitHub 插件）：
- en: '![](img/cdc4bc33-6755-49e4-9dbd-5b9b4d6e053f.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cdc4bc33-6755-49e4-9dbd-5b9b4d6e053f.png)'
- en: 'Add your Jenkins webhook URL and click on Add service:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加您的 Jenkins webhook URL 并点击添加服务：
- en: '![](img/5257dcbf-324d-432f-a2f7-77d944f1bd3c.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5257dcbf-324d-432f-a2f7-77d944f1bd3c.png)'
- en: 'Verify that the hook is working by clicking on Test service. It will send our
    test payload to the Jenkins server. If everything is working fine, then we will
    see a green check mark before the Jenkins webhook:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击测试服务来验证 hook 是否工作正常。它会将我们的测试负载发送到 Jenkins 服务器。如果一切正常，我们将看到 Jenkins webhook
    前面有一个绿色勾选标记：
- en: '![](img/44cb59a8-aed2-4325-9bcf-88f06bd84c67.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44cb59a8-aed2-4325-9bcf-88f06bd84c67.png)'
- en: To test your continuous integration pipeline, add some changes in the `README`
    file we created. Push changes to GitHub.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试您的持续集成管道，请在我们创建的 `README` 文件中添加一些更改。将更改推送到 GitHub。
- en: 'In Jenkins, you can see the "devops-ci-cd"  build is automatically started
    as shown in the following screenshot:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jenkins 中，您可以看到如下面截图所示的 "devops-ci-cd" 构建已经自动启动：
- en: '![](img/264a1a2c-b0be-4ca8-b036-a7ff2cb42c02.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/264a1a2c-b0be-4ca8-b036-a7ff2cb42c02.png)'
- en: Continuous deployment
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续部署
- en: We have completed the continuous integration step. When source code is updated
    in a GitHub project, our Jenkins server will build a `.jar` file. We need to deploy
    the updated code to a remote server. SSH is secure shell protocol widely used
    to securely log in to remote systems. In this sample application, we will be using
    the Publish Over SSH plugin. It is used to send build artifacts and execute commands
    on remote server using the SSH protocol.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了持续集成步骤。当 GitHub 项目的源代码更新时，我们的 Jenkins 服务器将构建一个 `.jar` 文件。接下来，我们需要将更新的代码部署到远程服务器。SSH
    是一种广泛使用的安全外壳协议，用于安全地登录到远程系统。在这个示例应用程序中，我们将使用 Publish Over SSH 插件。该插件用于通过 SSH 协议将构建工件发送到远程服务器并执行命令。
- en: Installing the Publish Over SSH plugin in a Jenkins server
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jenkins 服务器上安装 Publish Over SSH 插件
- en: 'Now, we will edit the Jenkins job which we created earlier. As the output of
    the continuous integration step, we get `my-app-1.0-SNAPSHOT.jar` created in our
    Jenkins workspace. To deploy this JAR on our test server, we are going to use
    a simple Jenkins plugin called Publish Over SSH. This plugin allows us to transfer
    files to a remote server and run commands as well. First we need to set up an
    SSH private key on the Manage Jenkins page. Go to Manage Jenkins | Configure System
    and provide the following information:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编辑之前创建的 Jenkins 任务。作为持续集成步骤的输出，我们在 Jenkins 工作空间中得到了创建的 `my-app-1.0-SNAPSHOT.jar`
    文件。为了将此 JAR 部署到我们的测试服务器上，我们将使用一个简单的 Jenkins 插件——Publish Over SSH。这个插件允许我们将文件传输到远程服务器并运行命令。首先，我们需要在“管理
    Jenkins”页面上设置 SSH 私钥。进入“管理 Jenkins”|“配置系统”，并提供以下信息：
- en: 'Passphrase: Provide a passphrase for the key (leave it blank if not encrypted)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码短语：为密钥提供密码短语（如果未加密则留空）
- en: 'Path to key: The path to the key can be absolute, or relative to `$JENKINS_HOME`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥路径：密钥路径可以是绝对路径，也可以相对于 `$JENKINS_HOME`。
- en: 'Key: If the key is not present on Jenkins server then you can copy and paste
    it in this field'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥：如果密钥不存在于 Jenkins 服务器上，则可以将其复制并粘贴到此字段中
- en: 'Add SSH Server details such as Username, Hostname, and Remote Directory:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 SSH 服务器的详细信息，如用户名、主机名和远程目录：
- en: '![](img/43fe2682-c084-4bc5-90f7-28da81433645.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43fe2682-c084-4bc5-90f7-28da81433645.png)'
- en: Now go to our previous Jenkins job and choose the Run only if build succeeds
    option from Post Steps so that if the build is successful then only the post steps
    will be executed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到我们之前的 Jenkins 任务，并从“构建后步骤”中选择“仅在构建成功时运行”选项，这样只有在构建成功时，后续步骤才会被执行。
- en: 'From the Add post-build step drop-down list, select the Send files or execute
    commands over SSH option:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从“添加构建后步骤”下拉列表中选择“通过 SSH 发送文件或执行命令”选项：
- en: '![](img/92f87f3b-d41d-4e79-bd40-7cce0b1f6c1b.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92f87f3b-d41d-4e79-bd40-7cce0b1f6c1b.png)'
- en: 'Add the following configuration to copy the JAR to the test server and run
    the command to start it:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下配置以将 JAR 文件复制到测试服务器并运行命令启动它：
- en: '![](img/c9e1c025-55a2-40c6-9ffc-c7ce6bc31f93.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9e1c025-55a2-40c6-9ffc-c7ce6bc31f93.png)'
- en: 'The command to deploy `Hello world!` is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 `Hello world!` 的命令如下：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have completed the continuous integration and Continuous Deployment process
    for our sample Java application using Maven and Jenkins. So, whenever any developer
    commits code to Git, the Jenkins job will be triggered, which will execute the
    build step to create a JAR and deploy it to the test server, if the build is successful.
    We can add one more step where we can execute automated test cases on the deployed
    application and get the results of our new changes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了使用 Maven 和 Jenkins 对我们的示例 Java 应用程序进行持续集成和持续部署的过程。因此，每当开发者将代码提交到 Git
    时，Jenkins 任务将被触发，执行构建步骤以创建 JAR 文件并将其部署到测试服务器，如果构建成功的话。我们可以添加一个步骤，在部署的应用程序上执行自动化测试用例，并获取我们新变更的结果。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed why there is a need for DevOps in Salesforce projects,
    and what challenges we might face while handling large Salesforce project developments
    and deployments. Also, we looked at why DevOps for Salesforce is not like any
    other tech stacks and what the differences between them are from the point of
    view of development, setting up environments, and deploying changes to the production
    environment in Salesforce and other stacks.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了为什么在 Salesforce 项目中需要 DevOps，以及在处理大型 Salesforce 项目的开发和部署时可能会面临的挑战。同时，我们还探讨了为什么
    Salesforce 的 DevOps 与其他技术栈不同，以及从开发、设置环境和将变更部署到 Salesforce 生产环境与其他技术栈的区别。
- en: We went through the typical DevOps process for a Java development stack, where
    we created a sample Java application and used Git version-control and track changes
    done while developing the application. We worked on how to add a Jenkins webhook
    URL in a GitHub project. We set up a sample Jenkins job where we added a Maven
    build step to create a JAR whenever anyone pushes code to the Git master branch
    using a Jenkins webhook. After completing the continuous integration step for
    our sample Java application, we added a step in the Jenkins job for continuous
    deployment using the Publish Over SSH plugin.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了典型的 Java 开发栈的 DevOps 流程，在这个过程中我们创建了一个示例 Java 应用程序，并使用 Git 版本控制来跟踪在开发过程中所做的更改。我们学习了如何在
    GitHub 项目中添加 Jenkins Webhook URL。我们设置了一个示例 Jenkins 任务，其中添加了一个 Maven 构建步骤，当任何人向
    Git 主分支推送代码时，就会通过 Jenkins Webhook 创建一个 JAR 文件。在完成示例 Java 应用程序的持续集成步骤之后，我们在 Jenkins
    任务中添加了一个使用 Publish Over SSH 插件进行持续部署的步骤。
- en: In the next chapter, we will discuss how deployment is done in Salesforce in
    traditional ways. We will learn what deployment methods in Salesforce are, and
    discuss why there is a need for automation in the deployment process and how Salesforce
    deployments can be automated using Ant scripts.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Salesforce中传统部署方式的实现。我们将学习Salesforce中的部署方法，并讨论为什么部署过程中需要自动化，以及如何使用Ant脚本实现Salesforce部署的自动化。
- en: References
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '**Maven in 5 Minutes**: [https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**5分钟掌握Maven**: [https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)'
