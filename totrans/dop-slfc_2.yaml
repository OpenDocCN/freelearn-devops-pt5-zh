- en: Applying DevOps to Salesforce Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned some basics about the Salesforce development
    process, what a sandbox is, the different types of sandbox, and how to choose
    a sandbox according to our needs. We developed our own recruiting application
    using Salesforce, followed by learning the traditional ways used for Salesforce
    deployment. We also had a look at the issues we face during traditional deployments
    of Salesforce applications. We learned Salesforce development setup with Eclipse.
    We discussed applying DevOps to Salesforce applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss why there is a need for DevOps in Salesforce
    applications. We will also discuss the problems we face while working on big projects
    that involve large numbers of developers, testers, and so on. We will try to get
    a clear idea about how applying DevOps for Salesforce is different from other
    tech stacks such as simple Java application stacks. We will differentiate between
    the development process involved in Salesforce applications and that of other
    tech stacks such as Java, PHP, Ruby, and so on. We will also see in detail the
    DevOps process in Java applications to get a clearer idea about the DevOps continuous
    integration and delivery process using DevOps tools. We will go through a step-by-step
    process to set up a simple continuous integration  pipeline with Jenkins and Git.
    We will also learn how to install required plugins, configure the Maven plugin
    in Jenkins, and how to add a Jenkins webhook URL in a GitHub project; we'll also
    implement continuous deployment using the Jenkins plugin. Finally, we will see
    how we can deploy our code whenever any changes are pushed to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The need for a DevOps process in Salesforce development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The differences between DevOps for Salesforce and DevOps for other tech stacks.
    For example, the typical DevOps process for a Java development stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The need for a DevOps process in Salesforce development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in the previous chapter, we can apply DevOps practices in Salesforce
    projects to achieve faster delivery of applications. The question arises, *Why
    do we need DevOps?*
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss some normal development practices in Salesforce projects. In Salesforce,
    everything is on the cloud, you just need a browser and internet connection to
    start developing your application. But as the development team grows, the complexities
    of building different features and deploying them in a production environment
    also become difficult. Although we can use different types of sandbox according
    to our need, managing the deployment process is still a time-consuming task.
  prefs: []
  type: TYPE_NORMAL
- en: Given that multiple developers are working on different features in different
    sandbox environments, we need to cherry-pick some features from those environments
    and deploy them to  a **user acceptance testing** (**UAT**) environment. This
    process is error-prone as it involves human interaction at various phases. Also
    we don't have any system for version control to manage changes done by developers.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume that somehow we managed to work with multiple developers with multiple
    sandbox environments and without managing the source code (that is just a hypothetical
    case but consider it is possible). What about testing new features in your application,
    and more importantly ensuring that nothing breaks in the previous application?
    Achieving this with manual testing would require a large number of testers and
    still we can't ensure that we have tested each and every feature right from login
    to some complex feature we just introduced in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Why make such a mess when we can achieve more a streamlined delivery with the
    help of DevOps? DevOps reduces the time of delivery and makes the process less
    prone to errors; tracking applications becomes easier with a different set of
    open-source tools. We can improve the Salesforce application development process
    by integrating it with a DevOps toolset such as Git to maintain our source code
    version. We can integrate Jenkins for the deployment of Salesforce applications.
    We will see how to do this in more detail in [Chapter 6](c18c24e5-b3e1-467c-8e33-cc278016e0a6.xhtml)*,
    Continuous Integration*.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps helps applications in other stacks to get more productive and follow
    a faster delivery process. We can achieve fast delivery in Salesforce projects
    with some modifications to the development and delivery processes. DevOps will
    impact everyone who is involved in Salesforce application development, testing,
    and deployment directly or indirectly, along with other end users.
  prefs: []
  type: TYPE_NORMAL
- en: The differences between DevOps for Salesforce and other tech stacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applying DevOps in Salesforce is different from other environments; let's look
    at this step by step.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will talk about the development process. Salesforce development is
    easy to start with because you don't need any installations and extra setup on
    your development machines. All you need is an internet connection and a browser
    supported by Salesforce platforms, such as Internet Explorer, Google Chrome, Safari,
    and so on. As we demonstrated in the previous chapter, a sample application in
    Salesforce is easy to develop with some clicks as Salesforce provides some existing
    applications and tabs for you to reuse. We can create some custom tabs in our
    application according to our requirements. When it comes to other tech stacks
    such as Java, to get started with development we need to install Java on our machines
    and set up some environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: In tech stacks such as Java, JavaScript, PHP, and Ruby, the most common thing
    is using version control systems such as Git, CVS, SVN, and so on, which help
    to keep track of application changes done by each developer. Version control systems
    make it possible for multiple developers to work on a single project or module
    without overwriting each other's changes. In some situations, such as when something
    goes wrong and unfortunately we need to roll back updates, version control is
    very useful.
  prefs: []
  type: TYPE_NORMAL
- en: When we have a small team of one or two developers working on a Salesforce application,
    we may not need to use version control. But when it comes to teams with multiple
    developers working on different sandboxes, developing different features releasing
    at different timelines or sprints, it becomes necessary to have version control
    for a streamlined development and delivery process.
  prefs: []
  type: TYPE_NORMAL
- en: There are some ways to deploy changes to Salesforce production organizations,
    such as using Change Set, Eclipse, and Ant. For deployment using Change Set, you
    need to connect organizations using Deployment Connection. Eclipse uses metadata
    for deployment and it is mostly used by developers. Using Ant for deployment,
    we can perform file-based deployment to production organizations.
  prefs: []
  type: TYPE_NORMAL
- en: Example – the typical DevOps process for a Java development stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The prerequisites are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Java version 1.6 or above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Maven 3.5.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: Use latest version of software available. In future, the previous versions
    may not be compatible.'
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't already installed Java, you can download it from the official
    website: [https://java.com/en/download/](https://java.com/en/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Use the following commands for this sample CI/CD application. I will be using
    an Ubuntu 16.04 instance for setup. So let's start by installing Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your Ubuntu server machine as a normal user. We need a user with
    `sudo` access for installing packages on the machine. I will be using the Ubuntu
    username for this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous commands will install Java version 8 on the machine. Verify this
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: The same setup should work if the Java version is incremented to a stable
    version.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have Java in place, so we will move on to the installation of Maven.
    The installation steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download Maven from the official website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the package using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to set up environment variables. Add a path to `.bashrc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify whether Maven was installed on your machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will create a project in Maven. Here we will be using the official Maven
    example *Maven in 5 Minutes*. You will find a link in the References section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move on to creating a sample project in Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It will take some time to download dependencies. After completing execution
    of command, it will create a directory with value passed to `DartifactId` that
    is `my-app`.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, `src/main/java` contains source code, `src/test/java` has test
    code, and `pom.xml` contains all information required to build the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the source code we have from the sample app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will build our sample project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will compile the project and create a JAR in the target folder as `my-app-1.0-SNAPSHOT.jar`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test the JAR with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: So, we got our sample application running but what if we have many developers
    working on the project? We need a version control tool and some standard procedure
    for deploying this project to the server environment. For this, we will follow
    our sample DevOps pipeline with Git and Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Git is a version control tool that helps us to track changes in our source code
    and coordinate our work with different developments. It is the most commonly used
    version control tool nowadays. We will have a look at Git in depth in [Chapter
    5](45e26817-986f-4fa4-a9c3-3044e7aad5da.xhtml)*, Version Control*. For this sample
    pipeline, we can use a GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a repository on GitHub and push sample code to this repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our version control ready, we will move on to the next step
    in using a continuous integration and continuous delivery process using Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins is an open-source tool written in the Java programming language. It
    is used to automate continuous integration and continuous delivery jobs. We will
    see Jenkins in detail in [Chapter 6](c18c24e5-b3e1-467c-8e33-cc278016e0a6.xhtml)*,
    Continuous Integration*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Jenkins. I have installed Jenkins on an Ubuntu server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the Jenkins server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the required Jenkins plugins on the Jenkins server using the following
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Manage Jenkins | GitHub Plugin and search for `maven plugin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Maven plugin in Jenkins if it was not installed while setting up
    Jenkins. You need to configure Maven in Jenkins Global Tool Configuration as we
    have already installed it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring Maven in the Jenkins server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Manage Jenkins | Global Tool Configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already installed Maven on our machine. So enter a name for the Maven
    installation and the `M2_HOME` path as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d034ba5d-5b79-45ca-8f81-085a9f0f5308.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s configure our Jenkins job to build our sample project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on create new jobs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/962d2573-4502-4aa8-9d2c-55ea6ee683f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a Jenkins job with the Maven plugin. Provide the job name `devops-ci-cd`
    (you can choose another project name, if you want):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1f74887-1063-4104-bcae-dd8aa070247f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Source Code Management section, provide the Git URL of your project.
    Provide credentials to clone the repository in Jenkins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8afea5b2-d6a7-4e9c-ad22-67da35dfe815.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose GitHub hook trigger for GitScm polling in Build Triggers. If Jenkins
    receives a PUSH GitHub webhook from the preceding repository, it will trigger
    this job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6f811618-8cc0-47ed-a6d8-aadf156c40f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide a path to root `pom.xml`. It will be a relative path to the module
    root. In Build, add Root POM as `pom.xml` and Goals and options as `package`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3723517-d5a3-4bb0-8812-bfe4c94f3e13.png)'
  prefs: []
  type: TYPE_IMG
- en: Save your work and click on Build now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will create `my-app-1.0-SNAPSHOT.jar` in the `/var/lib/Jenkins/workspace/target`
    folder. You can check the console logs while the project build is in progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the JAR is successfully built, you can see the console logs as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cffe2dea-3a82-4be4-9031-9d07405853c0.png)'
  prefs: []
  type: TYPE_IMG
- en: We have completed a continuous integration job successfully. Now, we need to
    add the Jenkins webhook URL in the GitHub settings to trigger a Jenkins build
    whenever someone pushes code to our GitHub project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Jenkins webhook URL in a GitHub project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add a Jenkins webhook URL, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Grab your GitHub webhook URL from Manage Jenkins | Configure System | GitHub
    Web Hook Section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Example URL: `https://<your-domain-name or IP address>/web-hook/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to GitHub | Choose your project. Go to Settings and select Integrations
    and Services. Click on Add service and search for `Jenkins`. As a result, you
    will see two service: Jenkins (Git plugin) and Jenkins (GitHub plugin). Choose
    one according to your project. We are going for Jenkins (GitHub plugin):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cdc4bc33-6755-49e4-9dbd-5b9b4d6e053f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add your Jenkins webhook URL and click on Add service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5257dcbf-324d-432f-a2f7-77d944f1bd3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify that the hook is working by clicking on Test service. It will send our
    test payload to the Jenkins server. If everything is working fine, then we will
    see a green check mark before the Jenkins webhook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44cb59a8-aed2-4325-9bcf-88f06bd84c67.png)'
  prefs: []
  type: TYPE_IMG
- en: To test your continuous integration pipeline, add some changes in the `README`
    file we created. Push changes to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Jenkins, you can see the "devops-ci-cd"  build is automatically started
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/264a1a2c-b0be-4ca8-b036-a7ff2cb42c02.png)'
  prefs: []
  type: TYPE_IMG
- en: Continuous deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have completed the continuous integration step. When source code is updated
    in a GitHub project, our Jenkins server will build a `.jar` file. We need to deploy
    the updated code to a remote server. SSH is secure shell protocol widely used
    to securely log in to remote systems. In this sample application, we will be using
    the Publish Over SSH plugin. It is used to send build artifacts and execute commands
    on remote server using the SSH protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Publish Over SSH plugin in a Jenkins server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will edit the Jenkins job which we created earlier. As the output of
    the continuous integration step, we get `my-app-1.0-SNAPSHOT.jar` created in our
    Jenkins workspace. To deploy this JAR on our test server, we are going to use
    a simple Jenkins plugin called Publish Over SSH. This plugin allows us to transfer
    files to a remote server and run commands as well. First we need to set up an
    SSH private key on the Manage Jenkins page. Go to Manage Jenkins | Configure System
    and provide the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passphrase: Provide a passphrase for the key (leave it blank if not encrypted)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Path to key: The path to the key can be absolute, or relative to `$JENKINS_HOME`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Key: If the key is not present on Jenkins server then you can copy and paste
    it in this field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add SSH Server details such as Username, Hostname, and Remote Directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/43fe2682-c084-4bc5-90f7-28da81433645.png)'
  prefs: []
  type: TYPE_IMG
- en: Now go to our previous Jenkins job and choose the Run only if build succeeds
    option from Post Steps so that if the build is successful then only the post steps
    will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Add post-build step drop-down list, select the Send files or execute
    commands over SSH option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92f87f3b-d41d-4e79-bd40-7cce0b1f6c1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the following configuration to copy the JAR to the test server and run
    the command to start it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9e1c025-55a2-40c6-9ffc-c7ce6bc31f93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The command to deploy `Hello world!` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We have completed the continuous integration and Continuous Deployment process
    for our sample Java application using Maven and Jenkins. So, whenever any developer
    commits code to Git, the Jenkins job will be triggered, which will execute the
    build step to create a JAR and deploy it to the test server, if the build is successful.
    We can add one more step where we can execute automated test cases on the deployed
    application and get the results of our new changes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed why there is a need for DevOps in Salesforce projects,
    and what challenges we might face while handling large Salesforce project developments
    and deployments. Also, we looked at why DevOps for Salesforce is not like any
    other tech stacks and what the differences between them are from the point of
    view of development, setting up environments, and deploying changes to the production
    environment in Salesforce and other stacks.
  prefs: []
  type: TYPE_NORMAL
- en: We went through the typical DevOps process for a Java development stack, where
    we created a sample Java application and used Git version-control and track changes
    done while developing the application. We worked on how to add a Jenkins webhook
    URL in a GitHub project. We set up a sample Jenkins job where we added a Maven
    build step to create a JAR whenever anyone pushes code to the Git master branch
    using a Jenkins webhook. After completing the continuous integration step for
    our sample Java application, we added a step in the Jenkins job for continuous
    deployment using the Publish Over SSH plugin.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how deployment is done in Salesforce in
    traditional ways. We will learn what deployment methods in Salesforce are, and
    discuss why there is a need for automation in the deployment process and how Salesforce
    deployments can be automated using Ant scripts.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Maven in 5 Minutes**: [https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)'
  prefs: []
  type: TYPE_NORMAL
