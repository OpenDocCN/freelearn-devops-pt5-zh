- en: Developing AWS CloudFormation Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building AWS CloudFormation needs knowledge on how to write IaC for AWS. In
    this chapter, we'll explore how to develop IaC scripts using JSON and YAML. We'll
    also review how to access AWS resources from IaC scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the AWS CloudFormation template format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing JSON and YAML for AWS CloudFormation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The programming model for AWS CloudFormation templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing JSON and YAML for creating AWS CloudFormation templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting input from the CloudFormation template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to AWS CloudFormation Designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving template description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting input from options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with intrinsic functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the AWS CloudFormation template format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IaC technology is designed to enable developers to build infrastructure by writing
    scripts. AWS CloudFormation uses the IaC approach to build infrastructure-based
    AWS technology stacks. Each AWS resource can be declared in a scripting form.
    Developers can make their own infrastructures by declaring AWS resources in the AWS
    CloudFormation template.
  prefs: []
  type: TYPE_NORMAL
- en: 'To develop AWS CloudFormation, we should understand what the AWS CloudFormation
    template is and how to build that template. The AWS resource is defined in the
    AWS service. For instance, Amazon S3 can be defined in the AWS CloudFormation
    template in JSON format, which is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This template can also be declared in the YAML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that each AWS resource can be declared as a resource type. In general,
    the AWS resource type can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We should about know AWS resource types if we want to use those resources.
    A sample of the AWS resource type list can be seen in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **AWS resource name** | **AWS resource type** |'
  prefs: []
  type: TYPE_TB
- en: '| AWS EC2 instance | `AWS::EC2::Instance` |'
  prefs: []
  type: TYPE_TB
- en: '| AWS EC2 VPC | `AWS::EC2::VPC` |'
  prefs: []
  type: TYPE_TB
- en: '| AWS IAM user | `AWS::IAM::User` |'
  prefs: []
  type: TYPE_TB
- en: '| AWS IoT device thing | `AWS::IoT::Thing` |'
  prefs: []
  type: TYPE_TB
- en: '| AWS Lambda function | `AWS::Lambda::Function` |'
  prefs: []
  type: TYPE_TB
- en: '| AWS RDS database instance | `AWS::RDS::DBInstance` |'
  prefs: []
  type: TYPE_TB
- en: '| AWS S3 bucket | `AWS::S3::Bucket` |'
  prefs: []
  type: TYPE_TB
- en: 'Table 3.1: A sample list of AWS resource types'
  prefs: []
  type: TYPE_NORMAL
- en: Further information about various AWS resource types can be found at [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'An AWS CloudFormation template consists of various AWS resource types, depending
    on your needs in the infrastructure. In general, the AWS CloudFormation template
    format can be described in the following diagram. The template consists of various
    attributes, such as **AWSTemplateFormatVersion**, **Description**, **Metadata**,
    and **Parameters**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: AWS CloudFormation template format'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each AWS CloudFormation template has one or more of the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AWSTemplateFormatVersion`: This is the AWS CloudFormation template version
    that is not the same as the API or WSDL version. This attribute is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Description`: This defines a text string that describes the template. This
    attribute is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Metadata`: This defines objects that provide additional information about
    the template. This attribute is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Parameters`: This defines values to pass to your template at runtime. You
    can refer to parameters from the `Resources` and `Outputs` sections of the template.
    This attribute is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mappings`: This is a mapping of keys and associated values that you can use
    to specify conditional parameter values. This attribute is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Conditions`: This defines conditions that control whether certain resources
    are created or whether certain resource properties are assigned a value during
    stack-creation or stack-update. This attribute is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Transform`: This helps simplify template authoring by condensing the expression
    of AWS infrastructure as code and enabling the reuse of template components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resources`: This specifies the stack resources and their properties, such
    as EC2 and Amazon S3\. This attribute is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Output`: This describes the values that are returned whenever you view your
    stack''s properties. This attribute is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since AWS CloudFormation templates are written in JSON and YAML, we will learn
    how to develop both JSON and YAML. We'll explore these programming methods in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing JSON and YAML programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn a bit about programming for JSON and YAML. We
    should know about JSON and YAML in order to build AWS CloudFormation templates.
    Technically, JSON and YAML are part of a scripting language. We will explore each
    topic in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: JSON programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JSON is a data-interchange format. This format is based on ECMA-404\. For more
    information, refer to [http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
    JSON can be defined as a key-value model. We can write the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, we can define a JSON object for the `Employee` data. We can write
    the following scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that the `Employee` object has three attributes—`id`, `name`, and
    `country`. Technically, we can declare an attribute in numeric and string types.
    We can also define a collection of the `Employee` object using `[]`. Each object
    is defined in `{}`. We can write the scripts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'JSON supports unlimited parent-child attributes. For instance, each `Employee`
    object probably has two or more addresses. We can declare them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is the end of the JSON programming section. Next, we'll learn how to develop
    YAML.
  prefs: []
  type: TYPE_NORMAL
- en: YAML programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'YAML is a data-serialization language designed to be directly writable and
    readable by humans. A simple YAML object can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the JSON format, we use `{}` and `:` for key-value data. In YAML, we only
    use `:`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section, we declared the `Employee` object in JSON. We can
    convert it to YAML with the following scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to define a collection of YAML objects, we can use the `-` syntax
    to represent an item of a collection. Let''s rewrite the collection of `Employee`
    from JSON into YAML. We can write the following scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To declare a parent-child of a YAML object, we can use `:` by passing the YAML
    object. For instance, we add an `address` object from the `Employee` object. We
    can write the following scripts to implement it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That's a simple implementation for writing a YAML object. Next, we'll build
    AWS CloudFormation templates in JSON and YAML.
  prefs: []
  type: TYPE_NORMAL
- en: The programming model for AWS CloudFormation templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developing AWS CloudFormation templates means we write scripts for infrastructure-based
    AWS technology. In this model, we can apply the **Software Development Life Cycle**
    (**SDLC**). In general, we represent the development model for AWS CloudFormation
    templates in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: CloudFormation template development cycle'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding diagram, we can perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Analyze problems**: We identity what the problems are and decide which problems
    to fix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build an infrastructure design**:Based on your problem and solution, we define
    an infrastructure design, including some AWS resources to implement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Develop a CloudFormation template**: After you have built the infrastructure
    design, you write the CloudFormation template. You define all AWS resources on
    your scripts. You can write the template using JSON and YAML files or with CloudFormation
    Designer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deploy AWS CloudFormation**:After you complete the CloudFormation template,
    you can upload and provision those scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing**:You can test your infrastructure. If you find a problem in testing,
    you can modify your scripts and then perform testing again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In term of SDLC, you can use an agile methodology while developing CloudFormation
    templates. There are a lot of agile methodology models, such as scrum and **Extreme
    Programming** (**XP**). You can also use source control to manage CloudFormation
    template files. Next, we'll write scripts for CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Writing JSON and YAML to create AWS CloudFormation templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have learned the CloudFormation template format that is described in *Figure
    3.1*. CloudFormation templates can be implemented in JSON and YAML. From *Figure
    3.1*, we can implement the CloudFormation template in JSON format as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'All attributes in CloudFormation are not required. Only the `Resources` attribute
    should be defined on your CloudFormation template. You can also define the CloudFormation
    template in YAML. We can declare the CloudFormation template from *F**igure 3.1*
    in YAML as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Some attributes from CloudFormation templates will be explored in this book
    with various use cases and scenarios. In the next section, we'll build a CloudFormation
    template to get input from users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting input from the CloudFormation template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](part0032.html#UGI00-ff9c6455e1444393ad97060c22881bf4), *Building
    Your First AWS CloudFormation Project*, we built CloudFormation while applying
    Amazon S3 resources. Since we didn't specify the S3 bucket name, Amazon S3 will
    generate a random name for our bucket. In this section, we'll build CloudFormation,
    which gets input from users to set the Amazon S3 bucket name.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `Parameters` attribute from the CloudFormation template. The
    value of the `Parameters` attribute will be passed to our Amazon AWS resources.
    To get `Parameters` from resources, you can use `Ref` by passing the parameter
    name. For instance, I have a parameter `YourBucketName`. This parameter passes
    to my resource `MySimpleBucket`, on the `BucketName` attribute, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For demonstration purposes, we will create Amazon S3 with a custom bucket name
    that is filled in by the user. You can perform the following steps to implement
    the demo:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the CloudFormation template on your local computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a JSON or YAML file to build the CloudFormation template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give a template file for JSON format as `simple-s3.json` and the `simple-s3.yaml`
    file in YAML format. You can write the following scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The script for the `simple-s3.json` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The script for the `simple-s3.yaml` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Once done, save these scripts into a file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the template file to AWS CloudFormation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to [https://console.aws.amazon.com/cloudformation](https://console.aws.amazon.com/cloudformation) and
    click on the Create New Stack button. You should see a screen, which is shown
    in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Upload a template to Amazon S3 option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Choose File button to upload the CloudFormation template file
    and then click on the Next button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: Selecting the CloudFormation template'
  prefs: []
  type: TYPE_NORMAL
- en: You should see a screen, which is shown in *Figure 3.4*. You should use our
    defined parameter called `YourBucketName`. This is our S3 bucket name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the Stack name and YourBucketName fields for the bucket name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: Displaying parameters for CloudFormation templates'
  prefs: []
  type: TYPE_NORMAL
- en: For instance, I filled in my stack name as `my-simple-stack` and my bucket name
    as `my-simple-s3`. You can see my input in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once done, you can click on the Next button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5: Filling in the CloudFormation parameters'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have clicked the Next button, you should be asked to fill in the
    options. In this case, we don''t fill in any items. Just click on the Next button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: Setting the CloudFormation options'
  prefs: []
  type: TYPE_NORMAL
- en: You should have confirmation, as shown in the following screenshot, before provisioning
    your CloudFormation template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are done, you can click on the Create button to deploy CloudFormation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: Confirmation for CloudFormation'
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudFormation will create all the resources that are defined in the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the provision status on the dashboard, which is shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Deploying CloudFormation'
  prefs: []
  type: TYPE_NORMAL
- en: You can verify the Amazon S3 console to ensure your resource has been created
    by CloudFormation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check out the following screenshot, my Amazon S3 with my bucket name, `my-simple-s3`.
    This bucket name is filled in from our input from *Figure 3.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.9: Amazon S3 is created from the CloudFormation template'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to run the CloudFormation template using the AWS CLI, you can
    do that easily. For instance, the template file is located on `home/user/templates/simple-s3.json`.
    We also set the stack name as `my-simple-stack` and pass parameters for `YourBucketName`
    with `my-simple-s3`. You can type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The AWS CLI will deploy your CloudFormation based on its template file.
  prefs: []
  type: TYPE_NORMAL
- en: This is the end of our demo. We have created a resource, Amazon S3, and passed
    a parameter to define a bucket name. You can practice more with various parameters
    from the Amazon AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will build CloudFormation Designer.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing AWS CloudFormation Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to create a CloudFormation template manually by writing
    scripts, in JSON or YAML, with a text editor. In this section, we'll build a CloudFormation
    template graphically using CloudFormation Designer. You can click and drag AWS
    resources into the template. This tool will generate JSON or YAML files. Then,
    you can upload the template to AWS CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a demo, we''ll build a CloudFormation template using CloudFormation Designer.
    We''ll use Amazon S3 to show how CloudFormation Designer works. You can perform
    the following steps for the demo:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and navigate to the AWS CloudFormation console at [https://console.aws.amazon.com/cloudformation](https://console.aws.amazon.com/cloudformation). You
    should see the AWS CloudFormation console dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To work with CloudFormation Designer, click on the Design template button at
    the top of  the dashboard. You should have the following CloudFormation Designer
    form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: A form for CloudFormation designer'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a list of AWS resource types on the left (see *Figure 3.10*). Find
    the S3 bucket on the list and drag it onto the right panel, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.11: Adding Amazon S3 into designer'
  prefs: []
  type: TYPE_NORMAL
- en: After dropping the AWS resource type into the right panel, there will be skeleton
    scripts on bottom.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on the Properties tab, you should see JSON or YAML scripts which are
    generated from the CloudFormation Designer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the template to Amazon S3 by clicking the cloud with the up-arrow icon.
    You should get a dialog box, which is shown in *Figure 3.12*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Amazon S3 bucket tab, fill in the template name, such as `mysimples3.template`,
    and click on the Save button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.12: Saving the template to the Amazon S3 bucket'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should get a dashboard for creating a stack. Since we have uploaded the
    template to Amazon S3, the dashboard has selected the URL on Amazon S3, as shown
    in the following screenshot. Click on the Next button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.13: Uploading a designer to create a stack'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the instructions until you review configurations, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.14: Confirmation for creating CloudFormation'
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS CloudFormation generates Amazon S3 based on your template. You can verify
    it by checking it on the Amazon S3 console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.15: Amazon S3 is created from CloudFormation designer'
  prefs: []
  type: TYPE_NORMAL
- en: We have finished creating the CloudFormation template and deploying it to AWS
    CloudFormation. You can now perform other experiments with various resource types.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll work with template descriptions.
  prefs: []
  type: TYPE_NORMAL
- en: Giving a template description
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CloudFormation template provides the `Description` attribute to display
    information about your template. You must set a description as a literal string
    that is between 0 and 1,024 bytes in length. You can see our sample implementation
    for the `Description` attribute. A sample program for JSON is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For YAML, you can implement it with the following scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This attribute is optional. When you apply words on the `Description` attribute
    on the template, you can see it when you review the template. See *Figure 3.7*
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll learn how to select a value from various options in CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the input from options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, when you build an infrastructure in CloudFormation, you need input
    from users. In the previous section, we learned how to get input from users by
    filling in the Amazon S3 bucket name. Now, we want to learn how to select input
    from various options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The scenario can be illustrated to get an EC2 instance type size. Users can
    select the instance types that we defined on the `Parameters` section. You can
    see the following scripts for implementation in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For YAML, you can use these scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that we defined four instance types, which are defined in the `AllowedValues`
    attribute. Users can select one of the instance types. The following is a list
    of options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`t1.micro`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`t2.nano`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`t2.micro`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`t2.small`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a lot of EC2 instance types. In this demo, I set only four types.
    You can find a list of types supported for EC2 instance here at  [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html).
    You can put all instance types if you need them.
  prefs: []
  type: TYPE_NORMAL
- en: We can also set a default value for our options. We can use the `Default` attribute
    and set its value as the default value. For instance, I set `t1.micro` as the
    default value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can set this selection from the user on the `InstanceType` attribute
    from `EC2Instance`. The following is a sample program in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the YAML format, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you deploy this template file (`simple-ec2.json` or `simple-ec2.yaml`)
    to CloudFormation, you should see a selection option on the `Parameters` section,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.16: Selecting instance type for EC2'
  prefs: []
  type: TYPE_NORMAL
- en: This is a simple sample to get input from some options. You can practice more
    by exploring some AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll learn how to use the `Mappings` attribute on CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some AWS resources need specific attribute types that probably do not become
    accommodated from a user''s input. In this case, we can utilize the `Mappings`
    attribute on CloudFormation. For instance, we can map the EC2 instance type based
    on region. We can declare this on the `Mapping` attribute as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the preceding code in YAML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `RegionMap` will map various values based on region input, such
    as `us-east-1`, `us-west-1`, and `eu-west-1`. If we choose `eu-west-1`, we will
    obtain `ami-37c2f643` for the `32` architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a real program, we usually use the `Mappings` attribute with the `Fn::FindInMap` intrinsic
    function that''s available at [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-findinmap.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-findinmap.html).
    This function returns the value corresponding to keys in a two-level map that
    is declared in the `Mappings` section. `Fn::FindInMap` can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here it is in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'And here it is in YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, we want to set the `ImageId` attribute from `EC2Instance`. We
    can look up `AWSRegionArch2AMI` and `AWSInstanceType2Arch` from the `Mappings`
    attribute. You can see a sample implementation of `Fn::FindInMap` in the following
    JSON scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following script is for YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Keep practicing with the `Mappings` attribute in CloudFormation. Next, we'll
    learn how to use intrinsic functions on the CloudFormation template.
  prefs: []
  type: TYPE_NORMAL
- en: Working with intrinsic functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Intrinsic functions enable us to put logic functions inside CloudFormation templates.
    Technically, we have used intrinsic functions, for example `Ref` and `Fn::FindInMap`,
    in previous CloudFormation templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, Amazon AWS provides some intrinsic functions that we can apply
    to CloudFormation templates. The following is a list of intrinsic functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fn::Base64 `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::Cidr`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Condition Functions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::FindInMap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `Fn::GetAtt` ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::GetAZs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::ImportValue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::Join`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::Select`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::Split`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::Sub`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ref`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The various intrinsic functions are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Fn::Base64` intrinsic function returns the Base64 representation of the
    input string. `Fn::Base64` is defined as follows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here it is in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'And here it is in YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `Fn::Cidr` intrinsic function returns the specified CIDR address block.
    You can declare this function as follows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here it is in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'And here it is in YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Conditional functions apply logical conditional on a CloudFormation template.
    We can use the following conditional functions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::And`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::Equals`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::If`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::Not`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `Fn::Or` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, we want to decide the volume size of EC2\. We check `CreateLargeSize`
    if this is true, and we set the volume size as `100`. Otherwise, we set the volume
    size as `10`. The following is a sample program for JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Here it is in YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '`Fn::FindInMap` returns the value corresponding to keys in a two-level map
    that is declared in the `Mappings` section. We have also learned how to use this
    function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Fn::GetAtt` intrinsic function returns the value of an attribute from
    a resource in the template. We define `Fn::GetAtt` in JSON as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here it is in the YAML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`Fn::GetAZs` returns an array that lists the **Availability Zones** (**AZs**)
    for a specified region. This function is useful when you are working with multiple
    regions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Fn::Join` intrinsic function appends a set of values into a single value,
    separated by the specified delimiter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Fn::Select` function returns a single object from a list of objects by
    index. The  `Fn::Select` function is used to split a string into a list of string
    values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Fn::Sub` substitutes variables in an input string with values that you specify.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about intrinsic functions, check out [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: Working with Metadata on the CloudFormation template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CloudFormation template offers an optional attribute, `Metadata`, that
    provides details about the template. For example, you can include template implementation
    details about specific resources, such as the `AWS::ElasticLoadBalancing::LoadBalancer`
    resource. You can write the scripts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: You cannot change the `Metadata` attribute once you update the CloudFormation
    template.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFormation resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Resources` attribute is one of the required attributes in the CloudFormation
    template. You can declare one or more AWS resources in your template. For instance,
    you can use the Amazon EC2 instance and an Amazon S3 bucket in one template. In
    general, the `Resources` attribute in CloudFormation can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Here it is in YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '`Logical ID` is a unique ID for AWS resources. You can declare it in alphanumeric
    form (A-Z a-z 0-9). The `Type` attribute is defined for AWS resource types. You
    can check a list of resource types that you can use in the template. Check them
    out at [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Each resource type has properties. You probably want to set the resource properties
    on the `Properties` attribute. You should match between resource type and resource
    type properties.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFormation output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to get responses from AWS resources after they're deployed, we can
    import those responses into your CloudFormation. We can use the `Outputs` attribute.
    It will return in response (to describe stack calls), or view on the AWS CloudFormation
    console.
  prefs: []
  type: TYPE_NORMAL
- en: The `Outputs` section consists of the key name `Outputs`, followed by a space
    and a single colon. You can declare a maximum of 60 output in a template.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can declare the `Outputs` attribute in JSON as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Here it is in the YAML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'For a demo, we want to retrieve the bucket name when we create an Amazon S3
    bucket. We pass our bucket resource into the `Outputs` section. We can implement
    it with the following scripts in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Here it is in YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Save this file as `simple-s3-outputs.json` or `simple-s3-outputs.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can upload this template to CloudFormation. If done, you should see
    the Amazon S3 bucket name on the Outputs tab in your stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.17: Output messages from CloudFormation'
  prefs: []
  type: TYPE_NORMAL
- en: You have learned about CloudFormation output. Keep practicing by applying some
    output from various AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll try to build EC2 using CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Demo – building Amazon EC2 using AWS CloudFormation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build Amazon EC2 using CloudFormation. We explored
    some of the CloudFormation attributes for EC2 in previous sections. Just so you
    know, Amazon EC2 may not be free, so you may be charged.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll prepare before we build EC2 on CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with the EC2 instance, we should have a key-pair to access EC2\. If
    you don't have a key-pair yet, you can create it through the EC2 management console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser and navigate to [https://console.aws.amazon.com/ec2](https://console.aws.amazon.com/ec2).
    You should see the EC2 management console dashboard. You can click on the Key
    Pairs option on the left menu so that you get the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.18: AWS EC2 console management'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can click on the Create Key Pair button to create a new key-pair. You should
    get a dialog box, as shown in the following screenshot. Fill in the Key pair name
    field and click on the Create button in the dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.19: Creating a key-pair on AWS EC2 management console'
  prefs: []
  type: TYPE_NORMAL
- en: Now you have a key-pair that we can use in our EC2 instance. Next, we'll develop
    a CloudFormation template for EC2.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a CloudFormation template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll develop a CloudFormation template for EC2\. Some attributes
    have already been explained in the previous sections in this chapter. Since we
    need a key-pair on EC2, we set it on the `Parameters` attribute so that users
    can select their key-pairs. The following is a sample program in JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Here it is in the YAML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'A key-pair from the `KeyName` parameter will be used on the EC2 instance. We
    put it on the resource as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is it in YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need a public IP address for the EC2 instance, so we access it from
    SSH. We define it on the `SSHLocation` section from the `Parameters` attribute.
    The JSON format is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Here it is in YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: For details of the EC2 instance template, check out `ec2demo.json` and `ec2demo.yaml`.
    You can start deploying this template to AWS CloudFormation. We'll perform this
    task in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After completing our CloudFormation template for EC2, you can upload it on
    AWS CloudFormation. You should select the KeyName and other options on the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.20: Deploying EC2 through AWS CloudFormation'
  prefs: []
  type: TYPE_NORMAL
- en: You probably set the IP address for SSH access on the SSHLocation parameter.
    Then, follow the instructions to deploy the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this has been created, you can check the progress of CloudFormation provision
    on the CloudFormation dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.21: AWS EC2 instance has created'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the EC2 instance, you can verify this on the EC2 management
    console. You should see the EC2 instance as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.22: Verifying EC2 instance on EC2 management console'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can manage your EC2 instance on the management console . If you want
    to modify your EC2 instance, you can update the CloudFormation template. Then,
    you can provision that template.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to build AWS CloudFormation templates using JSON and YAML.
    We reviewed the CloudFormation template format. Then, we looked at some attributes
    from the CloudFormation template. Finally, we deployed Amazon EC2 using the CloudFormation
    template.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about CloudFormation StackSets.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the CloudFormation template?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we develop the CloudFormation template?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you implement AWS resources in the CloudFormation template?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
