- en: The Docker Platform – Distinct Capabilities and Use Cases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 平台 - 独特的能力和使用案例
- en: Without any doubt, IT is the most happening and highly visible domain at any
    point in time. As every kind of enterprising business (small, medium, and large)
    is being enabled through the delectable advancements in the IT space, there is
    a direct and decisive relationship between IT and business. With the IT budgets
    being pruned by business behemoths year after year due to the stagnant, even sliding,
    world economy, it is a clear-cut mandate and timely reminder for IT professionals
    to do more with less. That is, there is a continued insistence for deeper and
    deft automation of various business operations by methodically leveraging the
    proven and promising technologies, tools, and tips. Infrastructure optimization
    through hybrid clouds, process excellence through integration and orchestration
    techniques, the fast spread of the DevOps culture, the foundational aspect of
    compartmentalization through virtualization and containerization approaches, the
    penetrative, pervasive, and persuasive nature of APIs, the fast emergence of MSA,
    the cognitive analytics, and so on, are being overwhelmingly recognized and reaped
    as the dominant and prominent ways forward toward business agility, affordability,
    adaptivity, and autonomy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，IT 领域在任何时刻都是最活跃和最显眼的领域。随着每种企业（小型、中型和大型）都通过IT空间中令人垂涎的进步来实现业务，IT与业务之间存在直接而决定性的关系。由于全球经济停滞甚至滑坡，企业巨头年复一年地削减IT预算，这明确要求IT专业人士做更多的事情，用更少的资源。也就是说，通过系统地利用经过验证和有前景的技术、工具和技巧，坚持更深入、更熟练地自动化各种业务操作。通过混合云进行基础设施优化，通过集成和编排技术进行流程优化，DevOps
    文化的迅速传播，通过虚拟化和容器化方法进行部门化的基础方面，API的渗透性、普及性和说服力，MSA的快速出现，认知分析等等，都被广泛认可和接受作为业务敏捷性、可负担性、适应性和自主性的主导和突出前进方式。
- en: Docker-enabled containerization is an intensely reviewed mechanism that has
    the innate strength to bring in certain critical disruptions for the field of
    software engineering. The Docker paradigm is all about optimal packaging of any
    kinds of software applications along with their dependencies to be shipped, deployed,
    and executed across any on-premise and off-premise environments. Containerized
    applications (applications and their execution containers) are extremely lightweight,
    portable, scalable, reproducible, and repeatable packages compared with the currently
    available options in the software industry.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 可启用的容器化是一种深受关注的机制，它具有天生的能力来为软件工程领域带来某些关键的颠覆。Docker 范式完全围绕着任何类型的软件应用程序及其依赖项的最佳打包，以便在任何本地和外部环境中进行传送、部署和执行。容器化的应用程序（应用程序及其执行容器）与当前软件行业中现有的选项相比，极为轻量级、便携、可扩展、可复制和可重复使用。
- en: The Docker idea facilitates many purposeful innovations. Docker (through its
    unique packaging format and the highly integrated platform) simplifies and accelerates
    the formation of publicly discoverable, network accessible, and remotely deployable
    containerized applications that are easily composable, consumable, and configurable.
    Further, there are software solutions for robust monitoring, measuring, and managing
    containers. In this chapter, we will discuss how the accelerated maturity and
    stability of the Docker paradigm ensures the much-needed business transformations.
    The literature talks about several game-changing implications of the Docker technology
    toward the next-generation IT and this chapter aims to unravel the Docker mystery.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 的理念促进了许多有意义的创新。Docker（通过其独特的打包格式和高度集成的平台）简化并加速了公开可发现、网络可访问和远程部署的容器化应用程序的形成，这些应用程序易于组合、消耗和配置。此外，还有用于强大的容器监控、测量和管理的软件解决方案。在本章中，我们将讨论Docker范式加速成熟和稳定性如何确保急需的业务转型。文献讨论了Docker技术对下一代IT的几个改变性影响，而本章旨在揭开Docker的神秘面纱。
- en: Describing containers
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述容器
- en: Compartmentalization that comprises both virtualization and containerization
    is the new norm for IT agility. Virtualization has been the enigmatic foundation
    for the enormous success of cloud computing. Now with the containerization idea
    becoming ubiquitous and usable, there is a renewed focus on using containers for
    faster application building, deployment, and delivery. Containers are distinctively
    fitted with a few game-changing capabilities and hence there is a rush in embracing
    and evolving the containerization technologies and tools.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 包括虚拟化和容器化在内的隔离化是 IT 敏捷性的新时代标准。虚拟化一直是云计算巨大成功的神秘基础。现在，随着容器化概念的普及和可用性，越来越多的关注被投入到使用容器来加速应用程序构建、部署和交付上。容器特别配备了一些改变游戏规则的能力，因此有一股力量在推动拥抱和发展容器化技术和工具。
- en: Containers are very hot in the industry. Essentially, a container is lightweight,
    virtualized, and portable, and the **Software-Defined Environment** (**SDE**)
    in which software can run is in isolation of other software running on the same
    physical host. The software that runs inside a container is typically a single-purpose
    application. Containers bring forth the much-coveted modularity, portability,
    and simplicity for IT environments. Developers love containers because they speed
    up the software engineering, whereas the operation team loves containers because
    they can just focus on runtime tasks such as logging, monitoring, managing the
    life cycle, and utilizing the resource rather than managing deployment and dependency.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 容器在业界非常火热。从本质上讲，容器是轻量级、虚拟化的且可移植的，**软件定义环境**（**SDE**）使得软件可以在与同一物理主机上运行的其他软件隔离的环境中运行。容器内运行的软件通常是单一功能的应用程序。容器为
    IT 环境带来了备受追捧的模块化、可移植性和简洁性。开发人员喜爱容器，因为它们加速了软件工程，而运维团队则喜爱容器，因为他们可以专注于运行时任务，如日志记录、监控、生命周期管理和资源利用，而不是管理部署和依赖关系。
- en: Distinguishing Docker containers
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区分 Docker 容器
- en: 'Precisely speaking, Docker containers wrap a piece of software in a complete
    filesystem that contains everything that is needed to run: source code, runtime,
    system tools, and system libraries (anything that can be installed on a server).
    This guarantees that the software will always run the same, regardless of its
    operating environment.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，Docker 容器将一段软件包装在一个完整的文件系统中，该文件系统包含运行所需的一切：源代码、运行时、系统工具和系统库（任何可以安装在服务器上的东西）。这保证了软件无论在什么操作环境下运行，都会始终如一。
- en: 'The main motivations of Docker-enabled containerization are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 Docker 容器化的主要动机如下：
- en: Containers running on a single machine share the same operating system kernel.
    They start instantly and use less RAM. Container images are constructed from layered
    filesystems and share common files, making disk usage and image downloads much
    more efficient.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行在单台机器上的容器共享相同的操作系统内核。它们能够立即启动并使用更少的 RAM。容器镜像是由分层的文件系统构建而成，并共享公共文件，从而使磁盘使用和镜像下载更加高效。
- en: Docker containers are based on open standards. This standardization enables
    containers to run on all major Linux distributions and other operating systems
    such as Microsoft Windows and Apple Macintosh.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 容器基于开放标准。这种标准化使得容器可以在所有主要的 Linux 发行版以及其他操作系统，如 Microsoft Windows 和 Apple
    Macintosh 上运行。
- en: 'There are several benefits being associated with Docker containers, as listed here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Docker 容器相关的几个好处如下：
- en: '**Efficiency**:As mentioned earlier, there can be multiple containers on a
    single machine leveraging the same kernel so they are lightweight, can start instantly,
    and make more efficient use of RAM.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**：如前所述，多个容器可以在一台机器上共享同一个内核，因此它们轻量、可以瞬间启动，并且更加高效地利用 RAM。'
- en: '**Resource sharing**: Thisamong workloads allows greater efficiency compared
    to the use of dedicated and single-purpose equipment. This sharing enhances the
    utilization rate of resources.'
  id: totrans-14
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源共享**：这种工作负载之间的共享相比于使用专用和单一用途的设备可以提高效率。资源共享提升了资源的利用率。'
- en: '**Resource partitioning**: This ensures that resources are appropriately segmented
    in order to meet the system requirements of each workload. Another objective for
    this partitioning is to prevent any kind of untoward interactions among workloads.'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源分区**：这确保资源被适当划分，以满足每个工作负载的系统需求。此分区的另一个目标是防止工作负载之间发生任何不良的交互。'
- en: '**Resource as a Service (RaaS)**: Various resources can be individually and
    collectively chosen, provisioned, and given to applications directly or to users
    to run applications.'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源即服务（RaaS）**：可以单独或共同选择、配置并直接提供各种资源给应用或用户以运行应用。'
- en: '**Native performance**: Containers guarantee higher performance due to their
    lightweight nature and less wastage.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原生性能**：由于容器的轻量特性和较少的资源浪费，容器保证了更高的性能。'
- en: '**Portability**: Applications, dependencies, and configura­tions are all bundled
    together in a complete filesystem, ensuring applications work seamlessly in any
    environ­ment (VMs, bare metal servers, local or remote, generalized or specialized
    machines, and so on). The main advantage of this portability is that it is possible
    to change the runtime dependencies (even programming language) between deployments.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植性**：应用、依赖项和配置被打包在完整的文件系统中，确保应用能够在任何环境中无缝运行（虚拟机、裸金属服务器、本地或远程、通用或专用机器等）。这种可移植性的主要优势是，可以在部署之间更改运行时依赖项（甚至是编程语言）。'
- en: 'The following diagram illustrates how containers are being moved and swapped
    across multiple hosts:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了容器如何在多个主机之间移动和交换：
- en: '![](img/image_12_001.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_12_001.png)'
- en: '**Real-****time scalability**: Any number of fresh containers can be provisioned
    in a few seconds in order to handle the user and data loads. On the reverse side,
    additionally provisioned containers can be knocked down when the demand goes down.
    This ensures higher throughput and capacity on demand. Tools such as Docker Swarm,
    Kubernetes, and Apache Mesos further simplify elastic scaling.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时可扩展性**：可以在几秒钟内配置任意数量的全新容器，以应对用户和数据负载。相反，当需求减少时，可以关闭额外配置的容器。这确保了按需提供更高的吞吐量和容量。Docker
    Swarm、Kubernetes 和 Apache Mesos 等工具进一步简化了弹性扩展。'
- en: '**High availability**: By running with multiple containers, redundancy can
    be built into the application. If one container fails, then the surviving peers—which
    are providing the same capability—continue to provide service. With orchestration,
    failed containers can be automatically recreated (rescheduled) either on the same
    or a different host, restoring full capacity and redundancy.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**：通过运行多个容器，可以在应用中建立冗余。如果一个容器失败，那么提供相同功能的存活容器将继续提供服务。通过编排，失败的容器可以自动重新创建（重新调度），无论是在同一主机还是不同主机上，从而恢复完整的容量和冗余。'
- en: '**Maneuverability**: Applications running in Docker containers can be easily
    modified, updated, or extended without impacting other containers in the host.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机动性**：运行在 Docker 容器中的应用可以轻松修改、更新或扩展，而不会影响主机中其他容器。'
- en: '**Flexibility**: Developers are free to use the pro­gramming languages and
    development tools they prefer.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：开发者可以自由选择他们偏好的编程语言和开发工具。'
- en: '**Clusterability**: Containers can be clustered for specific purposes on demand
    and there are integrated management platforms for cluster-enablement and management.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集群化**：容器可以根据需求进行集群化，并且有集成的管理平台来启用和管理集群。'
- en: '**Composability**: Software services hosted in containers can be discovered,
    matched for, and linked to form business-critical, process-aware, and composite
    services.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组合性**：托管在容器中的软件服务可以被发现、匹配并链接，以形成业务关键、过程感知和复合型服务。'
- en: '**Security**: Containers isolate applications from one another and the underlying
    infrastructure by providing an additional layer of protection for the application.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：容器通过为应用提供额外的保护层，将应用与彼此及底层基础设施隔离开来。'
- en: '**Predictability**: With immutable images, the image always exhibits the same
    behavior everywhere because the code is contained in the image. This means a lot
    in terms of deployment and in the management of the application life cycle.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可预测性**：通过不可变的镜像，由于代码包含在镜像中，镜像在任何地方都会表现出相同的行为。这对于部署和应用生命周期管理具有重要意义。'
- en: '**Repeatability**: With Docker, one can build an image, test that image, and
    then use that same image in production.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重复性**：使用 Docker，用户可以构建一个镜像，测试该镜像，然后在生产环境中使用相同的镜像。'
- en: '**Replicability**: With containers, it is easy to instantiate identical copies
    of full application stack and configuration. These can then be used by new hires,
    partners, support teams, and others to safely experiment in isolation.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可复制性**：使用容器，轻松实例化完整应用栈和配置的相同副本。新员工、合作伙伴、支持团队等可以使用这些副本在隔离环境中安全地进行实验。'
- en: Briefing the Docker platform
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker平台简介
- en: Linux containers are hugely complicated and not user-friendly. Having realized
    the fact that several complexities are coming in the way of massively producing
    and fluently using containers, an open-source project got initiated with the goal
    of deriving a sophisticated and modular platform comprising an enabling engine
    for simplifying and streamlining the life cycle phases of various containers.
    This means that the Docker platform is built to automate the crafting, packaging,
    shipping, deployment, and delivery of any software application embedded inside
    a lightweight, extensible, and self-sufficient container. Docker is positioned
    as the most flexible and futuristic containerization technology in realizing highly
    competent and enterprise-class distributed applications. This will make deft and
    decisive impacts on the IT industry, as instead of large monolithic applications
    distributed on a single physical or virtual server, companies are building smaller,
    self-defined and sustainable, easily manageable, and discrete ones. In short,
    services are becoming microservices these days in order to give the fillip to
    the containerization movement.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 容器非常复杂且不易于用户操作。意识到这一事实后，一个开源项目启动，旨在创建一个复杂而模块化的平台，包括一个能够简化和优化各种容器生命周期阶段的引擎。这意味着
    Docker 平台旨在自动化轻量、可扩展和自给自足容器中的任何软件应用的制作、打包、运输、部署和交付。Docker 被定位为实现高度灵活和面向未来的容器化技术，适用于高效和企业级分布式应用。这将对IT行业产生敏锐和决定性的影响，因为公司不再依赖于单一物理或虚拟服务器上分发的大型单块应用，而是构建更小、自定义、可持续、易管理和独立的应用。简言之，服务正在变成微服务，以推动容器化运动。
- en: The Docker platform enables artistically assembling applications from disparate
    and distributed components and eliminates any kind of deficiencies and deviations
    that could come when shipping the code. Docker, through a host of scripts and
    tools, simplifies the isolation of software applications and makes them self-sustainable
    by running them in transient containers. Docker brings the required separation
    for each of the applications from one another as well as from the underlying host.
    We have been hugely accustomed to VMs that are formed through an additional layer
    of indirection in order to bring the necessary isolation. This additional layer
    and overhead consumes a lot of precious resources and is hence an unwanted cause
    of the slowdown of the system. On the other hand, Docker containers share all
    the resources (compute, storage, and networking) to the optimal level and hence
    can run much faster. Docker images, being derived in a standard form, can be widely
    shared and stocked easily for producing bigger and better application containers.
    In short, the Docker platform lays a stimulating and scintillating foundation
    for optimal consumption, management, and maneuverability of various IT infrastructures.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 平台允许艺术般地从不同的分布式组件中组装应用程序，并消除在代码发布过程中可能出现的任何缺陷和偏差。通过一系列脚本和工具，Docker 简化了软件应用的隔离，并通过在临时容器中运行它们使它们自给自足。Docker
    为每个应用程序提供了与其他应用程序以及底层主机的必要隔离。我们习惯于通过额外的间接层形成的虚拟机来实现必要的隔离。然而，这种额外的层级和开销消耗了大量宝贵资源，因此是系统减速的不良原因。另一方面，Docker
    容器共享所有资源（计算、存储和网络），因此可以运行得更快。标准形式的 Docker 镜像可以广泛共享和轻松存储，以生产更大、更好的应用程序容器。简而言之，Docker
    平台为各种IT基础设施的最佳消耗、管理和操纵奠定了刺激和引人入胜的基础。
- en: The Docker platform is an open-source containerization solution that smartly
    and swiftly automates the bundling of any software applications and services into
    containers and accelerates the deployment of containerized applications in any
    IT environments (local or remote systems, virtualized or bare metal machines,
    generalized or embedded devices, and so on). The container life cycle management
    tasks are fully taken care of by the Docker platform. The whole process starts
    with the formation of a standardized and optimized image for the identified software
    and its dependencies. Now the Docker platform takes the readied image to form
    the containerized software. There are image repositories made available publicly
    as well as in private locations. Developers and operations teams can leverage
    them to speed up software deployment in an automated manner.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Docker平台是一个开源的容器化解决方案，智能迅速地将任何软件应用程序和服务打包成容器，并加速在任何IT环境（本地或远程系统、虚拟化或裸机、通用或嵌入式设备等）中部署容器化应用程序。Docker平台完全负责容器的生命周期管理任务。整个过程从为识别的软件及其依赖项形成标准化和优化的镜像开始。现在，Docker平台使用准备好的镜像来形成容器化软件。公开和私有位置都提供了镜像存储库。开发人员和运维团队可以利用它们以自动化方式加快软件部署。
- en: 'The Docker ecosystem is rapidly growing with a number of third-party product
    and tool developers in order to make Docker an enterprise-scale containerization
    platform. It helps to skip the setup and maintenance of development environments
    and language-specific tooling. Instead, it focuses on creating and adding new
    features, fixing issues, and shipping software. "Build once and run everywhere,"
    is the endemic mantra of the Docker-enabled containerization. Concisely speaking,
    the Docker platform brings in the following competencies:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Docker生态系统正在快速发展，有许多第三方产品和工具开发者致力于将Docker打造成一个企业规模的容器化平台。它帮助跳过开发环境和特定语言工具的设置和维护。相反，它专注于创建和添加新功能，修复问题并发布软件。"构建一次，到处运行"是Docker启用的容器化的典型口号。简而言之，Docker平台带来了以下能力：
- en: '**Agility**: Developers have the freedom to define environments and the ability
    to create applications. IT operation teams can deploy applications faster, allowing
    the business to outpace the competition.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：开发人员可以自由定义环境，并能创建应用程序。IT运营团队可以更快地部署应用程序，使业务能够超越竞争对手。'
- en: '**Controllability**: Developers own all the code from infrastructure to application.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可控性**：开发人员拥有从基础架构到应用程序的所有代码。'
- en: '**Manageability**: IT operation team members have the manageability to standardize,
    secure, and scale the operating environment while reducing overall costs to the
    organization.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可管理性**：IT运营团队成员具备标准化、安全化和扩展操作环境的管理能力，同时降低组织的总体成本。'
- en: The evolving Docker platform components
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker平台不断发展的组件
- en: 'Docker is a platform for developing, shipping, and running powerful applications
    crafted out of distributed microservices. The platform is in the expansion mode
    with the persistent support rendered by a number of third-party product vendors
    and start-ups in the Docker space. For different use cases, additional automation
    tools are being built and released to the marketplace:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个平台，用于开发、发布和运行由分布式微服务构建的强大应用程序。该平台在第三方产品供应商和Docker空间的初创公司的持续支持下正在扩展。为不同的使用案例，正在构建并发布额外的自动化工具到市场上：
- en: Docker Hub
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub
- en: Docker Trusted Registry
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Trusted Registry
- en: Docker Engine
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Engine
- en: Docker Kitematic
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Kitematic
- en: Docker Toolbox
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Toolbox
- en: Docker Registry
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Registry
- en: Docker Machine
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Machine
- en: Docker Swarm
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Docker Compose
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose
- en: Docker Cloud
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Cloud
- en: Docker Datacenter
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker数据中心
- en: With the ongoing requirements, we can safely expect new additions to the preceding
    list in the days ahead. The Docker team is proactively and preemptively working
    on various tools in order to bring in the desired automation and simplicity for
    lessening the workloads of IT professionals.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 随着持续的需求，我们可以安全地预期在未来几天内将有新的添加到上述列表中。Docker团队正在积极主动地研发各种工具，以实现所需的自动化和简化，减少IT专业人员的工作量。
- en: Implications of the Docker technology
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker技术的影响
- en: With the systematic and sagacious usage of the Docker idea, enterprising businesses
    and organizations across the globe are bound to benefit immensely for their business
    transformation needs. This section will describe the paramount and potential impacts
    of the Docker paradigm. Without any doubt, containers are a hot topic these days.
    Corporates, service providers (cloud, communication, and so on), and consumers
    are pursuing the Docker dream. Docker has been creating multifaceted impressions
    and implications for enterprise and cloud IT. The systematic leverage of the Docker
    technology is assuredly accentuated to pour in delectable advancements for businesses.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过系统化和明智地使用Docker理念，全球各地的企业和组织必将在其业务转型需求中获得巨大的好处。本节将描述Docker范式的重大影响和潜力。毫无疑问，容器现在是一个热门话题。企业、服务提供商（云、通信等）和消费者都在追寻Docker的梦想。Docker已经在企业和云IT领域创造了多方面的印象和影响。系统化利用Docker技术无疑能为企业带来可喜的进步。
- en: Modern enterprise development
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现代企业开发
- en: Conceptually, a container image can be thought of as a snapshot of a container's
    filesystem that can be stored on disk. The container filesystem is typically arranged
    in layers and every change gets carefully captured in a separate layer. This allows
    the container image to indicate from which parent image it is derived. The Docker
    images, being represented through a standardized and simplified format, can ultimately
    lead to the rapid and rewarding deployment and execution of software applications.
    Containers are portable. This means that building images once and running them
    everywhere is the crux of the portability goal. Containers can run on any hardware
    that runs the relevant operating system.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，容器镜像可以被视为容器文件系统的快照，可以存储在磁盘上。容器文件系统通常是按层次结构排列的，每次更改都会被仔细地捕捉到一个独立的层中。这使得容器镜像能够标明其派生自哪个父镜像。Docker镜像通过标准化和简化的格式表示，最终能够实现软件应用的快速和高效部署与执行。容器具有可移植性。这意味着“一次构建，处处运行”是可移植性目标的核心。容器可以在任何运行相关操作系统的硬件上运行。
- en: There are challenges too. As there can be many containers in a single Docker
    host, there can be the issue of the container sprawl in a cloud environment (private,
    public, and hybrid). For effective monitoring and management, the concepts of
    clustering and orchestration are being leveraged in order to find and bind different
    and distributed containers. Further on, for constructing distributed applications
    through containerized applications, service composition through the orchestration
    technique is encouraged. Docker Compose is the key solution for making composite
    applications. For working at the container level, there are automated monitoring,
    measurement, management, and orchestration software solutions (Docker Swarm, Kubernetes,
    and Mesos). In the following sections, we explain how containers are the best
    fit for agile and adroit businesses. This does not mean that virtualization is
    out of business. There are certain situations and scenarios wherein the mixed
    and merged usage of virtualization and containerization is posted for wonders.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当然也有挑战。由于一个Docker主机中可能有多个容器，因此在云环境（私有、公共和混合）中可能会出现容器蔓延的问题。为了有效的监控和管理，正在利用集群和编排的概念，以便查找和绑定不同的分布式容器。此外，为了通过容器化应用程序构建分布式应用，提倡通过编排技术进行服务组合。Docker
    Compose是构建复合应用的关键解决方案。针对容器级别的工作，已经有自动化监控、度量、管理和编排的软件解决方案（如Docker Swarm、Kubernetes和Mesos）。在接下来的部分，我们将解释为什么容器最适合灵活和高效的企业。这并不意味着虚拟化已退出历史舞台。在某些情况下，虚拟化和容器化的混合使用会产生奇妙的效果。
- en: Combining these special powers with container images, resulting in a viable
    and venerable abstraction, enables a clean isolation between applications from
    the underlying operating systems. This neat decoupling of image and OS makes it
    possible to deploy software applications in development, testing, staging, and
    production environments without any hurdle or hitch. This Docker-enabled uniformity
    and ubiquity improves deployment reliability and speeds up modern enterprise development
    by decimating all kinds of inconsistencies and unnecessary frictions. The widely
    expressed recommendation is to have an airtight container image that can encompass
    and encapsulate all of an application's dependencies into a package. This then
    can be deployed into a container to enable shipping to run anytime anywhere.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些特殊功能与容器镜像结合，形成一个可行且值得尊敬的抽象层，实现了应用程序与底层操作系统之间的清晰隔离。这种镜像和操作系统的干净解耦使得在开发、测试、预发布和生产环境中部署软件应用成为可能，且没有任何障碍或问题。Docker使能的统一性和普遍性提高了部署的可靠性，并通过消除各种不一致和不必要的摩擦，加速了现代企业开发。广泛推荐的做法是，拥有一个严密的容器镜像，它可以将应用程序的所有依赖项打包在一起。然后，这个镜像可以被部署到容器中，确保应用程序可以随时随地运行。
- en: MSA and Docker containers
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSA和Docker容器
- en: The service-enablement has been going on successfully for a number of reasons
    and objectives. Every system (physical, mechanical, electrical, and electronic)
    is systematically enabled with easily consumable interfaces. RESTful interfaces
    and services have become pervasive due to their simplicity. In the recent past,
    with the surging popularity of the web, enterprise, mobile, and cloud applications,
    the REST idea has clearly captured a lot of attention and attraction. It has been
    quickly discovered that splitting out business functions into reusable services
    is very effective; however, at the same, it introduces a risk point. This means
    that every time a service gets updated, then all the other services that make
    use of the updated service have to be subjected to a variety of formal verifications
    and validations. This is because services inevitably have to find, bind, and leverage
    other services and their unique capabilities and data points to be right and relevant.
    This unbridled sharing can happen locally or with remote ones over networks.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 服务使能的成功推进是由多种原因和目标驱动的。每个系统（物理、机械、电气和电子）都通过易于消费的接口进行系统化使能。由于其简单性，RESTful接口和服务已经变得无处不在。在最近，随着互联网、企业、移动和云应用的迅速普及，REST理念显然吸引了大量关注。人们很快发现，将业务功能拆分成可重用的服务是非常有效的；然而，这也带来了一个风险点。这意味着，每当一个服务更新时，所有依赖于该更新服务的其他服务都必须经过各种正式的验证和确认。这是因为服务不可避免地需要查找、绑定并利用其他服务及其独特的功能和数据点，以确保其正确性和相关性。这种不受限制的共享可以在本地或通过网络与远程服务发生。
- en: Basically, the microservices approach, in a nutshell, dictates that instead
    of having one giant code base that all developers touch, that often becomes perilous
    to manage, it is better to have numerous smaller code bases managed by small and
    agile teams that sit across different time zones. Every code base has to interoperate
    through well-intended and defined APIs. Every code base is small in size but also
    totally decoupled from one another. The dependency is gone totally, resulting
    in better security, reliability, simplicity, scalability, availability, and so
    on. The code base is termed as microservices. The motives for the unprecedented
    take off of microservices are definitely many; specifically, the granular scaling,
    easy manageability, maneuverability, reconfigurability and extensibility, strong
    security through API access, the appropriateness of containers as the optimal
    runtime environment, and so on, are the widely articulated ones. Microservices
    can be independently deployable, horizontally scalable, supported by any backend
    databases (SQL, NoSQL, NewSQL, In-Memory, and so on), and built by any programming
    languages.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，微服务方法简而言之规定，与其拥有一个庞大的代码库供所有开发人员操作（这往往变得难以管理），不如拥有多个较小的代码库，由小型灵活的团队负责管理，这些团队分布在不同的时区。每个代码库都必须通过良好设计和定义的API进行互操作。每个代码库的体积较小，且相互完全解耦。依赖关系完全消失，从而带来了更好的安全性、可靠性、简易性、可扩展性、可用性等。代码库被称为微服务。微服务如此前所未有地蓬勃发展背后的动机有很多，特别是细粒度的扩展、易管理性、灵活性、可重新配置性和可扩展性、通过API访问实现的强大安全性、容器作为最佳运行时环境的适用性等，都是被广泛提及的。微服务可以独立部署、横向扩展，支持任何后端数据库（SQL、NoSQL、NewSQL、内存数据库等），并且可以使用任何编程语言构建。
- en: Docker containers are the best fit for hosting microservices. This intentional
    containerization of single services or processes makes it very simple to manage,
    update, and scale out these services. Now with the number of microservices in
    any IT environment growing very rapidly, the management complexity is to zoom.
    This means that the challenges include how to manage single services in a cluster
    and how to tackle multiple services spread across distributed and different hosts.
    Kubernetes, MaestroNG, Mesosphere, and Fleet spring up to answer this growing
    need.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器最适合承载微服务。将单个服务或进程进行容器化，使得管理、更新和扩展这些服务变得非常简单。现在，随着任何IT环境中微服务数量的快速增长，管理复杂度也在急剧增加。这意味着，面临的挑战包括如何在集群中管理单个服务，以及如何应对分布式和不同主机上的多个服务。Kubernetes、MaestroNG、Mesosphere和Fleet应运而生，满足了这一日益增长的需求。
- en: In summary, one prominent reason is the onset and rollout of microservices in
    droves and this has brought out the indispensability of containers. The various
    targets expected out of microservices are being fulfilled by stuffing microservices
    within containers. This interesting combination is bound to play a very stellar
    role for the IT teams of worldwide enterprising businesses. Practically speaking,
    the widespread usage of the containerization tenet has laid a stimulating foundation
    for the explosion of purpose-specific as well as agnostic microservices.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，一个显著的原因是微服务的兴起和大量推广，这使得容器的不可或缺性得以显现。微服务所期待的各种目标通过将微服务封装进容器中得到了实现。这一有趣的组合注定将在全球企业的IT团队中发挥至关重要的作用。实际上，容器化原则的广泛应用为特定目的和通用微服务的爆炸性增长奠定了激励基础。
- en: Case study
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 案例研究
- en: SA Home Loans faced challenges in development, as well as in production. SA
    currently has four scrum teams, each with a development and a system test lab.
    The team faced slow deployment times and was only able to build and deploy two
    applications in the dev labs, causing long deployment cycles and sometimes taking
    up to 2 weeks to get applications over to the testing environment. This issue
    got extended to production as well. The main home loan servicing software monolithic
    was built using legacy technologies.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: SA Home Loans在开发和生产过程中面临挑战。SA目前有四个Scrum团队，每个团队都拥有一个开发和系统测试实验室。团队面临着部署速度慢的问题，只能在开发实验室中构建和部署两个应用程序，导致部署周期长，有时需要花费多达2周的时间才能将应用程序部署到测试环境。这一问题也延伸到生产环境中。主要的住房贷款服务软件是使用传统技术构建的单体应用。
- en: The IT team made the conscious decision to adopt the MSA to gain the agility,
    portability, and extensibility, and the break-in resulted in 50 microservices.
    Having understood the significance of the blossoming Docker technology, the team
    could move all the microservices to containers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: IT团队作出了有意识的决定，采用微服务架构（MSA）以获得灵活性、可移植性和可扩展性，并且这一决策导致了50个微服务的诞生。在理解了Docker技术的巨大潜力后，团队将所有微服务迁移到了容器中。
- en: The team also needed a production-ready orchestration service that could give
    it a single point from which to manage and distribute containers onto the nodes,
    as well as give the team a high-level oversight of all the containers. Docker
    Swarm is the orchestration tool. SA Home Loans now uses Docker Datacenter, the
    on-premises solution that brings container management and deployment services
    to the enterprise via a supported **Container as a Service** (**CaaS**) platform
    that is hosted locally. SA Home Loans now builds and deploys applications up to
    20-30 times a day. **Universal Control Plane** (**UCP**) has embedded Swarm to
    give the production-ready container orchestration solution.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 团队还需要一个生产就绪的编排服务，能够为其提供一个集中管理和分发容器到各个节点的单一入口，并且为团队提供所有容器的高层次监控。Docker Swarm就是编排工具。SA
    Home Loans现在使用Docker Datacenter，这是一种本地托管的解决方案，通过支持的**容器即服务**（**CaaS**）平台将容器管理和部署服务带入企业。SA
    Home Loans现在每天构建和部署应用程序多达20到30次。**统一控制平面**（**UCP**）内嵌Swarm，提供生产就绪的容器编排解决方案。
- en: Infrastructure optimization
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础设施优化
- en: Virtualization has been the main mechanism for hugely optimizing and organizing
    various IT infrastructures (server machines, storage appliances, networking, and
    security solutions). The proven divide and conquer technique accomplished through
    VMs is the main target for IT optimization. In the recent past, Docker containers
    emerged as a blessing in disguise. Containers contain only what is necessary to
    build, ship, and run software applications. Unlike VMs, there is no guest OS or
    hypervisor necessary for containers. This allows enterprises to radically reduce
    the amount of storage and totally eliminate hypervisor licensing costs. The number
    of containers that can be accommodated in a physical host or in a VM is more compared
    to the number of VMs being stuffed in a physical machine. This means that containers
    are fine-grained whereas VMs are coarse-grained. The wastage of resources is very
    minimal in the case of containerization. Every bit of IT infrastructures and resources
    is being methodically used by containers.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化一直是大幅优化和组织各种IT基础设施（服务器、存储设备、网络和安全解决方案）的主要机制。通过虚拟机实现的已验证的分而治之技术是IT优化的主要目标。近期，Docker容器作为一种“伪装的福音”出现了。容器只包含构建、传输和运行软件应用所需的内容。与虚拟机不同，容器不需要来宾操作系统或虚拟机监控程序。这使得企业能够大幅减少存储量，并完全消除虚拟机监控程序的许可费用。与在物理机器中堆叠虚拟机的数量相比，物理主机或虚拟机中可以容纳的容器数量更多。这意味着容器是细粒度的，而虚拟机是粗粒度的。在容器化的情况下，资源浪费非常少。容器使得IT基础设施和资源得到有条理的使用。
- en: Portability is another factor. This enables IT operations teams to move workloads
    across different cloud services, physical servers, or VMs without locking them
    into using a specific infrastructure tooling. Workload consolidation or optimization
    through containers is error-free because containers can run everywhere. In the
    case of VMs, VM placement is a tricky and tough affair considering the diversity
    of hypervisors / **Virtual Machine Monitors** (**VMMs**). The point here is that
    Docker allows enterprises to optimize infrastructure utilization and decrease
    the cost of maintaining existing applications, which is incidentally the number
    one challenge enterprise IT teams face every day.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可移植性是另一个因素。这使得IT运维团队能够在不同的云服务、物理服务器或虚拟机之间移动工作负载，而不必将它们锁定在特定的基础设施工具中。通过容器进行的工作负载整合或优化是无误的，因为容器可以在任何地方运行。在虚拟机的情况下，考虑到虚拟机监控程序/**虚拟机监控器**（**VMMs**）的多样性，虚拟机的部署是一个复杂且困难的事务。这里的关键点是，Docker使企业能够优化基础设施的利用率，并减少维护现有应用程序的成本，这恰恰是企业IT团队每天面临的最大挑战。
- en: Docker greatly reduces the amount of time it takes to install an application,
    scale to meet customer demands, or simply start new containers. This means, taking
    new offerings to market is exceedingly fast because the underlying infrastructure
    (virtual or physical) is being readied in a few seconds.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Docker大大缩短了安装应用程序、扩展以满足客户需求或简单启动新容器所需的时间。这意味着，将新产品推向市场的速度极快，因为底层基础设施（无论是虚拟还是物理）只需几秒钟就能准备好。
- en: Case study
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 案例研究
- en: 'A client with the need to establish and provide **Database as a Service** (**DaaS**)
    capability has resolved that every database instance is provisioned and stationed
    inside its own VM. There can be occasions wherein there are 100 VMs running 100
    databases. This is extremely inefficient, wasting a lot of expensive resources.
    Now the same number of database instances can be run on that number of containers,
    which in turn could run inside a few VMs. The result is huge cost savings. Another
    case study follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 需要建立并提供**数据库即服务**（**DaaS**）功能的客户已经决定每个数据库实例都部署在自己的虚拟机（VM）中。有时可能会有100个虚拟机运行着100个数据库。这是极其低效的，浪费了大量昂贵的资源。而现在，相同数量的数据库实例可以在同样数量的容器中运行，容器又可以在少数几个虚拟机中运行。结果是巨大的成本节约。以下是另一个案例研究：
- en: '**Customer details**: Swisscom is a Switzerland''s leading telecom provider
    offering a range of enterprise and consumer services.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户详情**：Swisscom是瑞士领先的电信服务提供商，提供一系列企业和消费者服务。'
- en: '**The business challenges**: This includes offering a reliable, easy-to-maintain
    DaaS to customers while achieving server density necessary to operate efficiently.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务挑战**：包括为客户提供可靠且易于维护的DaaS，同时实现高服务器密度，以确保高效运行。'
- en: '**The solution approach**: Flocker by ClusterHQ provides the ability to programmatically
    manage persistent data for Docker containers stored in EMC ScaleIO.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案方法**：ClusterHQ的Flocker提供了程序化管理Docker容器持久数据的能力，这些数据存储在EMC ScaleIO中。'
- en: '**The business outcome**: This solution has substantially increased the density
    of applications hosted per server, improved operational management of databases,
    and laid out a stimulating and sparkling platform for sustainable innovation in
    consumer and enterprise IT sectors.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务成果**：该解决方案显著提高了每台服务器上托管的应用程序密度，改善了数据库的运维管理，并为消费级和企业级IT部门的可持续创新铺设了充满活力的平台。'
- en: Enabling DevOps
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用DevOps
- en: Agile development is being increasingly followed in the IT industry these days
    in order to elegantly ensure business agility, adaptivity, and affordability.
    This means that it is true that the much-demanded business agility is being fulfilled
    by stringently embracing the competent methods for IT agility. There is a growing
    array of viable and venerable mechanisms to realize IT agility. Primarily, IT
    agility is being driven through agile programming methods such as pair programming,
    **Extreme Programming** (**XP**), Lean, Scrum and Kanban, **Test-Driven Development**
    (**TDD**), and **Behaviour-Driven Development** (**BDD**).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，IT行业越来越多地遵循敏捷开发，以优雅地确保业务敏捷性、适应性和可负担性。这意味着，通过严格采用有效的IT敏捷方法，满足了广泛需求的业务敏捷性。为实现IT敏捷性，有一系列日益可行且值得尊敬的机制。主要地，IT敏捷性是通过敏捷编程方法来推动的，如结对编程、**极限编程**（**XP**）、精益开发、Scrum和看板、**测试驱动开发**（**TDD**）和**行为驱动开发**（**BDD**）。
- en: Now the software development process gets speeded up remarkably. However, there
    is a big disconnect between development and operation. This means that the real
    IT agility gets realized when the operation team also strictly follows agile,
    adaptive, and automated IT operations. Enterprise DevOps is the most promising
    way forward for establishing the beneficial connect between developers and operators
    so that the IT systems get up and running quickly. Containerization is the most
    positive development toward making DevOps pervasive, penetrative, and persuasive.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，软件开发过程的速度显著加快。然而，开发和运维之间存在着很大的脱节。这意味着，只有当运维团队也严格遵循敏捷、适应性和自动化的IT操作时，真正的IT敏捷性才能实现。企业级DevOps是建立开发者和运维人员之间有效联系的最有前途的方式，从而使IT系统能够快速启动。容器化是推动DevOps普及、渗透和具有说服力的最积极的发展趋势。
- en: Docker is ideal for quickly setting up development and test environments as
    well as sandbox environments. Docker interestingly offers a better separation
    of concerns for guarantee-efficient DevOps; container crafters need to focus only
    on building Docker images and committing them to make them containers. The operation
    team could monitor, manage, and maintain the containers. Finally, Docker can be
    easily integrated into multiple DevOps tools to achieve better workflow automation
    and continuous integration. Also, it enables the DevOps teams to scale up development
    and test environments, quickly and cost-effectively, and to move applications
    from development, to test, to produc­tion in a seamless manner.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Docker非常适合快速设置开发和测试环境以及沙箱环境。Docker有趣的是为确保高效的DevOps提供了更好的关注点分离；容器开发者只需专注于构建Docker镜像并提交它们，使其成为容器。运维团队可以监控、管理和维护这些容器。最后，Docker可以轻松集成到多个DevOps工具中，实现更好的工作流自动化和持续集成。此外，它还使DevOps团队能够快速、经济高效地扩展开发和测试环境，并无缝地将应用程序从开发、测试迁移到生产。
- en: Continuous integration and continuous deployment
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续集成与持续部署
- en: '**Continuous Integration** (**CI**) and **Continuous Deployment** (**CD**)
    are the most sought-after technologies and tools for having agile IT. In the past,
    developers would automate their build process using any one of the build tools.
    Then they would hand over their code to the operation team to proceed with deployment,
    administration, management, and support. There are many configuration management
    and software deployment tools in order to automate the tedious and tough affair
    of software deployment and delivery. This segregated pattern brought forth a number
    of recurring issues. With containers, the operation team could build standard
    container images of the full stack that they want to deploy and deliver. Developers
    can use them to deploy their code to do unit testing. That same tested, refined,
    and hardened image can be used across all environments (development, test, stage,
    and production) to get the same results every time. This containerization-sponsored
    setup specifically accelerates the software deployment and delivery activities
    in a risk-free fashion.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）和**持续部署**（**CD**）是实现敏捷IT最受欢迎的技术和工具。过去，开发人员会使用任一构建工具来自动化他们的构建过程。然后，他们会将代码交给运维团队进行部署、管理、维护和支持。为了自动化繁琐且艰难的软件部署和交付过程，存在许多配置管理和软件部署工具。这种分离的模式带来了一些重复出现的问题。使用容器后，运维团队可以构建他们希望部署和交付的完整栈的标准容器镜像。开发人员可以使用这些镜像来部署代码并进行单元测试。经过测试、优化和加固后的相同镜像可以在所有环境（开发、测试、预生产和生产）中使用，每次都能得到相同的结果。这种容器化支持的设置专门加速了软件部署和交付活动，以无风险的方式进行。'
- en: As per the Docker site, CI/CD typically merges development with testing, allowing
    developers to build code collaboratively, submit it to the master branch, and
    check for any issues. This means that developers can build and test their code
    to catch bugs early in the applications development life cycle. Since Docker can
    integrate with tools such as Jenkins and GitHub, developers can submit code in
    GitHub, test the code, and automatically trigger a build using Jenkins, and once
    the image is complete, it can be added to Docker registries. This ultimately streamlines
    the process and saves times on build and setup processes, all while allowing developers
    to run tests in parallel and automate them so that they can continue to work on
    other projects while tests are being run. The environment dependencies and inconsistencies
    get eliminated with the containerization.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Docker官网，CI/CD通常将开发与测试结合起来，使开发人员能够协作构建代码，将其提交到主分支，并检查是否存在问题。这意味着开发人员可以在应用程序开发生命周期的早期阶段构建和测试代码，从而尽早发现bug。由于Docker可以与Jenkins和GitHub等工具集成，开发人员可以在GitHub中提交代码，测试代码，并使用Jenkins自动触发构建。构建完成后，镜像可以添加到Docker注册中心。这最终简化了过程，节省了构建和设置过程的时间，同时允许开发人员并行运行测试并自动化它们，从而在测试运行时可以继续进行其他项目工作。通过容器化，环境依赖性和不一致性得到了消除。
- en: Continuous delivery
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续交付
- en: 'The **continuous delivery** approach involves fast software development iterations
    and frequent, safe updates to the deployed application. It is all about reducing
    risk and delivering value faster by producing reliable software in short iterations. Because
    Docker encapsulates both the application and the application''s environment or
    infrastructure configuration, it provides a key building block for two essential
    aspects of a continuous delivery pipeline. Docker makes it easy to test exactly
    what you are going to deploy. The possibility of making serious errors during
    the handoff or bringing in any undesirable changes is less likely in this case.
    Docker containers encourage a central tenet of continuous delivery: they reuse
    the same binaries at each step of the pipeline to ensure no errors are introduced
    in the build process itself.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**方法涉及快速的软件开发迭代和频繁、安全的应用程序更新。这完全是为了通过在短时间内生产可靠的软件来减少风险，并更快速地交付价值。由于Docker封装了应用程序及其环境或基础设施配置，它为持续交付管道的两个关键方面提供了基础构件。Docker使得测试您将要部署的内容变得更加容易。在交接过程中出现严重错误或引入任何不希望的变化的可能性因此减少。Docker容器鼓励持续交付的核心原则：它们在管道的每个步骤中重用相同的二进制文件，确保在构建过程中不会引入错误。'
- en: 'As indicated earlier, Docker containers provide the basis for immutable infrastructures.
    Applications can be added, removed, cloned, and/or their constituencies can change
    without leaving any residues behind. IT infrastructures can be changed without
    affecting the applications that run on them. The Docker tool ecosystem is the
    growth trajectory and hence a lot of delivery-related works get simply automated
    and accelerated to add business value. As Martin Fowler says, you actually do
    continuous delivery in the following situations:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker容器为不可变基础设施提供了基础。应用程序可以被添加、移除、克隆，或其组成部分可以发生变化，而不会留下任何残余。IT基础设施可以在不影响其上运行的应用程序的情况下进行更改。Docker工具生态系统是其成长轨迹，因此许多与交付相关的工作得以自动化并加速，以增加业务价值。正如Martin
    Fowler所说，您实际上会在以下情况下进行持续交付：
- en: If your software is deployable throughout its life cycle
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的软件在整个生命周期内都可以部署
- en: If your team prioritizes keeping the software deployable over working on new
    features
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的团队优先考虑保持软件可部署，而不是开发新功能
- en: If anybody can get fast, automated feedback on the production readiness of their
    systems anytime somebody makes a change to them
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何人在对系统进行更改时，可以随时获得关于其生产就绪情况的快速自动反馈
- en: If you can perform push-button deployments of any version of the software to
    any environment on demand
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您可以按需将任何版本的软件部署到任何环境
- en: Docker also easily integrates with CI and continuous delivery platforms enabling
    development and testing to deliver seamless updates to production. In the case
    of any kind of failure, it is possible to roll back to the previous working version.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Docker还可以轻松与CI和持续交付平台集成，使得开发和测试能够无缝地将更新交付到生产环境中。在任何类型的故障发生时，可以回滚到之前的工作版本。
- en: Accurate testing
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 精确测试
- en: Docker accelerates DevOps by creating a common framework for building, testing,
    and administering distributed applications, inde­pendent of languages, development
    tools or environmen­tal variables. Docker improves collaboration by allowing developers,
    **Quality Assurance** (**QA**) teams, and system administrators to efficiently
    share code, exchange content, and integrate applications. We can be confident
    that our QA environment exactly matches what will be deployed in the production
    environment.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Docker通过为构建、测试和管理分布式应用程序创建一个通用框架，从而加速了DevOps的进程，这一框架不依赖于编程语言、开发工具或环境变量。Docker通过允许开发人员、**质量保证**（**QA**）团队和系统管理员高效地共享代码、交换内容和集成应用程序，改善了协作。我们可以确信，我们的QA环境与即将在生产环境中部署的环境完全一致。
- en: Facilitating CaaS
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 促进CaaS
- en: 'We have been fiddling with IT infrastructure and **Platform as a Service**
    (**PaaS**). Bare metal servers and VMs are the key computing resources in IT centers.
    Now with the successful proliferation of containers, **Container as a Service**
    (**CaaS**) is becoming hugely popular and tantalizing. There are certain issues
    with PaaS in traditional environments. CaaS is being touted as the solution approach
    for surmounting the prickling issues of PaaS:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在调整IT基础设施和**平台即服务**（**PaaS**）。裸金属服务器和虚拟机是IT中心中的关键计算资源。现在，随着容器的成功普及，**容器即服务**（**CaaS**）正变得异常流行并充满诱惑。传统环境中的PaaS存在一些问题，CaaS被视为克服PaaS问题的解决方案：
- en: '![](img/image_12_002.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_12_002.png)'
- en: The high-level CaaS architecture
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 高级CaaS架构
- en: In the preceding figure, developers on the left-hand side are pulling and pushing
    application content from a library of trusted and curated base images. Operations
    teams on the right-hand side are monitoring and managing deployed applications
    and infrastructures. The two teams can collaborate through a toolset that allows
    for a separation of concerns while unifying the two teams through the application
    life cycle. The Docker platform is that toolset empowering to build a CaaS that
    fits varying business requirements.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，位于左侧的开发人员正在从受信任和精心挑选的基础镜像库中拉取和推送应用内容。位于右侧的运维团队则负责监控和管理已部署的应用和基础设施。这两个团队可以通过一个工具集进行协作，工具集使得两个团队在应用生命周期内保持关注点分离的同时，能够统一协作。Docker平台就是这样一个工具集，它使得构建一个符合不同业务需求的CaaS成为可能。
- en: Adding new technology components is greatly simplified. Let's say a company
    wants to add MongoDB to its portfolio. Now a certified image can be pulled down
    from Docker Hub and tweaked as needed, and then quickly deployed. This container
    can then be offered to developers for their consumption. Containers also allow
    for more experimentation. Since it is so easy to build and tear down containers,
    a developer can quickly compare the features of a stack component. For example,
    a developer wants to test the performance of three different NoSQL database technologies
    and they can simply fire up the appropriate container for each NoSQL technology
    without having to deal with the complexity of managing the infrastructure and
    the underlying technology stack. The developer could then run performance tests
    against each distinct container and select the appropriate one quickly.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新技术组件变得极为简单。假设一家公司想要将MongoDB加入其技术栈中。现在，可以从Docker Hub拉取一个经过认证的镜像，根据需要进行调整，并迅速部署。然后，开发人员可以使用这个容器。容器还允许更多的实验。由于构建和拆除容器非常容易，开发人员可以快速比较堆栈组件的特性。例如，开发人员想要测试三种不同NoSQL数据库技术的性能，他们只需启动每种NoSQL技术的相应容器，无需处理管理基础设施和底层技术栈的复杂性。然后，开发人员可以针对每个不同的容器运行性能测试，并快速选择合适的容器。
- en: Containers have the innate and incredible power to offer JVM-like portability
    in terms of completely abstracting the underlying infrastructure. A true CaaS
    model is to pave the way for the deployment of multi-container applications in
    multi-cloud environments.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 容器天生具备令人惊叹的能力，能够提供类似JVM的可移植性，完全抽象掉底层基础设施。一个真正的CaaS模型是为多容器应用在多云环境中的部署铺平道路。
- en: Accelerating workload modernization
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加速工作负载现代化
- en: There are a variety of workloads in need of getting appropriately modernized
    and migrated to powerful environments (clouds) to be readily found, bound, and
    used by worldwide users for producing business-critical applications. Workloads
    typically represent software applications, middleware, platforms, and so on. In
    the past, **Service-Oriented Architecture** (**SOA**) was an enabler of software
    modernization through integration and composition. In the recent past, MSA is
    being touted as the best-in-class approach for modernizing legacy, monolithic,
    and massive applications. Applications are being fragmented accordingly in order
    to be easily manageable. The development, deployment, and management complexities
    are expected to go down with complex applications being expressed and exposed
    as a collection of interoperable, portable, and composable microservices. This
    means that application modules are being refactored and readied to be loosely
    or lightly coupled, even decoupled. Further, applications are recommended to be
    stateless to be scalable and independently deployable.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种工作负载需要适当地现代化并迁移到强大的环境（云端），以便全球用户可以轻松查找、绑定并使用这些工作负载来生产业务关键应用。工作负载通常代表软件应用、
    middleware、平台等。在过去，**面向服务的架构**（**SOA**）通过集成和组合促进了软件的现代化。最近，MSA被誉为现代化遗留系统、单体应用和大型应用的最佳方法。应用程序因此被拆分，以便更容易管理。随着复杂应用以互操作、可移植和可组合的微服务集合的形式呈现和暴露，开发、部署和管理的复杂性预计会降低。这意味着应用模块将被重构，并准备好实现松耦合，甚至解耦。此外，推荐将应用设计为无状态的，以便于扩展和独立部署。
- en: Some applications can take a "lift and shift" path to the cloud. This means
    that if some code modifications are brought in, they can be significantly refactored
    to take the distinct advantages of cloud centers. The applications are being redesigned,
    recoded, and repurposed for the specific cloud platform. This gives the legacy
    application a new life and a new purpose.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序可以采取“提升和转移”路径到云端。这意味着如果进行一些代码修改，它们可以被显著重构，以充分利用云中心的独特优势。应用程序正在重新设计、重新编码，并为特定的云平台重新定位。这赋予了遗留应用程序新的生命和新的用途。
- en: Containers are the highly optimized and organized runtime for hosting and delivering
    microservices. Containers in conjunction with microservices are emerging as the
    most crucial combination for the IT world in many respects. The use of containers
    to "wrap" or containerize existing legacy applications comes with a few advantages.
    The containers take care of the underlying platforms and infrastructures and the
    complexities associated with them. Containerized applications are portable and
    enhances the speed in which legacy modernization is performed. The cloud migration
    is smoothened through the utilization of containers. Additional capabilities such
    as security, web and service enablement, and governance can be attached to containerized
    applications easily and quickly. Further, modernized legacy applications are a
    better fit for distributed computing.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是托管和交付微服务的高度优化和有组织的运行时环境。容器与微服务相结合，在许多方面正成为IT世界中最关键的组合。使用容器来“包装”或容器化现有的遗留应用程序具有一些优势。容器负责底层平台和基础设施以及与之相关的复杂性。容器化的应用程序具有可移植性，并加快了遗留应用程序现代化的速度。通过使用容器，云迁移变得更加顺畅。可以轻松快速地将安全性、Web和服务启用以及治理等附加功能应用到容器化应用程序上。此外，现代化的遗留应用程序更适合分布式计算。
- en: A great way to modernize the current and conventional applications as we move
    them to the cloud is to leverage technologies such as Kubernetes and Mesos instead
    of building all of the **Non-Functional Requirements** (**NFRs**), such as scalability,
    security, and sustainability.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将当前和传统应用程序现代化，并将它们迁移到云端的一个好方法是利用Kubernetes和Mesos等技术，而不是构建所有的**非功能需求**（**NFRs**），如可扩展性、安全性和可持续性。
- en: Docker for stateful applications
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Docker用于状态应用程序
- en: Containers are typically stateless. However, for several applications, stateful
    compute resources are needed. Docker does not natively provide storage volume
    management or data persistence when porting these compute resources between hosts.
    The Flocker solution by ClusterHQ addresses these needs and enables the containers
    to be used for stateful applications, such as databases, by providing a framework
    for volume management and data persistence when moving compute resources from
    one host to another. Flocker works with all the major container managers (including
    Docker Swarm, Kubernetes, and Apache Mesos).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 容器通常是无状态的。然而，对于某些应用程序，状态计算资源是必需的。Docker在将这些计算资源在主机之间迁移时，原生并未提供存储卷管理或数据持久化。ClusterHQ的Flocker解决方案解决了这些需求，并通过提供一个框架来管理卷和数据持久化，使容器能够用于状态应用程序，如数据库，当计算资源从一个主机迁移到另一个主机时。Flocker与所有主要的容器管理器兼容（包括Docker
    Swarm、Kubernetes和Apache Mesos）。
- en: Containers for edge computing
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 边缘计算的容器
- en: The security fear along with the lack of visibility and controllability is being
    touted as the widely articulated and accepted drawback of cloud computing. Private
    clouds and cloudlets are the viable options. Yet, they too face certain limitations.
    However, the recent phenomenon of edge or fog computing has been pronounced as
    the most successful computing paradigm for surmounting all the cloud weaknesses.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性担忧以及缺乏可视性和可控性被认为是云计算的广泛认同的缺点。私有云和云小单元是可行的选择。然而，它们也面临着某些限制。然而，最近的边缘计算或雾计算现象被认为是克服云计算所有弱点的最成功的计算范式。
- en: Edge computing is all about shifting the data processing and storage from the
    centralized locations (cloud) to the distributed and decentralized environments
    (local). This means that by bringing in compute, network, and storage competencies
    closer to the users, the **Quality of Service** (**QoS**) attributes / the NFRs
    are readily and rewardingly accomplished. Traditionally, all the computing and
    storage takes place in cloud environments (on-premises and off-premises). However,
    certain scenarios such as real-time analytics and faster responses insist for
    computing at the user end. It is not an exaggeration to say that the QoS and experience
    goes up significantly when IT becomes people-centric, context-aware, adaptive,
    real-time, and multimodal. Real-world and real-time applications and services
    invariably pitch in for computing at the edges. There have been several architectural
    complications even for edge computing, and now with the faster maturity and stability
    of application and volume containers, edge computing innately gets the much-needed
    fillip.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘计算的核心在于将数据处理和存储从集中式位置（云端）转移到分布式和去中心化的环境（本地）。这意味着通过将计算、网络和存储能力更接近用户，**服务质量**（**QoS**）属性
    / 非功能性要求（NFRs）能够轻松且高效地完成。传统上，所有计算和存储都发生在云环境中（本地和非本地）。然而，某些场景，如实时分析和更快的响应，需要在用户端进行计算。可以毫不夸张地说，当IT变得以人为中心、情境感知、具有适应性、实时性和多模态时，QoS和用户体验会显著提高。现实世界和实时应用及服务必然要求在边缘进行计算。即使在边缘计算方面也有若干架构上的复杂性，但随着应用和容器体积的成熟和稳定，边缘计算自然得到了急需的推动。
- en: Devices networking, service enablement, and clustering
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 设备网络、服务启用和集群
- en: Generally, edge devices such as implantables, wearables, portables, gateways,
    mobiles, handhelds, consumer electronics, and robots may be primarily resource-constrained.
    Most of these devices are not static and typically nomadic. Establishing seamless
    connectivity among them for process, application, and data integration is a tedious
    and tough affair indeed. Geo-distributed computation on edge devices, therefore,
    requires a lightweight, intrinsically extensible, and intelligent platform to
    handle extremely fragile service deployment, delivery, and management. **Open
    Service Gateway interface** (**OSGi**) is an interesting framework for elegantly
    activating and administering resource-constrained, embedded and connected devices,
    and their unique services. Any service or application can be containerized and
    can be loaded with all kinds of participating devices. Then an instance of the
    OSGi package can be containerized and hosted in a reasonably powerful device stationed
    at the user environment in order to discover and manage all kinds of devices and
    their service containers inside. This kind of setup enables centralized (from
    the cloud) as well as decentralized monitoring, measurement, and management of
    device services. The Dockerized platform is a proven mechanism to install, configure,
    manage, upgrade, and terminate running services.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，边缘设备如植入设备、可穿戴设备、便携式设备、网关、移动设备、手持设备、消费电子产品和机器人通常是资源受限的。这些设备大多数不是静态的，通常是流动的。在它们之间建立无缝连接以进行过程、应用和数据整合确实是一项艰巨的任务。因此，边缘设备上的地理分布计算需要一个轻量级、本质上可扩展且智能的平台来处理极为脆弱的服务部署、交付和管理。**开放服务网关接口**（**OSGi**）是一个有趣的框架，用于优雅地激活和管理资源受限的嵌入式和连接设备及其独特的服务。任何服务或应用程序都可以容器化，并可以与各种参与设备一起加载。然后，OSGi包的一个实例可以被容器化并托管在用户环境中一台功能较强的设备上，从而发现并管理所有设备及其服务容器。这种设置使得集中式（来自云端）以及去中心化的设备服务监控、测量和管理成为可能。Docker化平台是一种经过验证的机制，用于安装、配置、管理、升级和终止正在运行的服务。
- en: Device service registry for discovery
  id: totrans-114
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 设备服务注册与发现
- en: There may be thousands of edge devices in a particular environment. To discover,
    index, and manage heterogeneous, dynamic, and distributed devices in a systematic
    manner, the need for service registry and discovery capabilities is being insisted
    upon. The management platform has to have this feature in order to find, bind,
    and leverage multiple devices in an automated manner.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定环境中可能有成千上万的边缘设备。为了以系统化的方式发现、索引和管理异构、动态和分布式的设备，强烈需要服务注册和发现能力。管理平台必须具备此功能，以便自动地发现、绑定和利用多个设备。
- en: Fault tolerance
  id: totrans-116
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 容错
- en: The platform must be fault-tolerant in order to guarantee high availability
    and reliability to ensure business continuity.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 平台必须具备容错能力，以保证高可用性和可靠性，从而确保业务连续性。
- en: Caching
  id: totrans-118
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 缓存
- en: Caching can be performed on the edge devices to enable faster access and to
    improve the overall application performance. If Docker images are stocked and
    cached at the edge, then application provisioning can be speeded up sharply. Another
    use case is to store application data in a cache in order to remarkably increase
    application performance.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在边缘设备上执行缓存操作，以实现更快的访问并提升整体应用性能。如果Docker镜像存储并缓存于边缘设备，则可以大大加速应用的配置过程。另一个使用案例是将应用数据存储在缓存中，从而显著提高应用性能。
- en: Bukhary Ikhwan Ismail and the team have built a testbed in order to examine
    Docker as one of the candidate technologies for edge or fog computing. The testbed
    consists of a data center and three edge sites to simulate the environment. At
    each edge site, a Docker Registry is set up to store Docker images locally at
    the edge. A Docker daemon at the edge site will be able to search and pull the
    Docker image from the Docker Registry. Docker Swarm is configured on each edge
    site to manage multiple Docker daemons. Docker Swarm acts as a clustering and
    orchestration tool. Based on the experimentation and evaluation, Docker is found
    to be providing fast deployment, small footprint, and good performance, which
    make it potentially a viable edge computing platform.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 布哈里·伊赫万·伊斯梅尔（Bukhary Ikhwan Ismail）及其团队建立了一个测试平台，以考察Docker作为边缘计算或雾计算候选技术之一的可行性。该测试平台由一个数据中心和三个边缘站点组成，用于模拟环境。在每个边缘站点上，都会设置一个Docker
    Registry，用于在本地存储Docker镜像。边缘站点的Docker守护进程可以从Docker Registry中搜索并拉取Docker镜像。在每个边缘站点上配置Docker
    Swarm，用于管理多个Docker守护进程。Docker Swarm充当集群和编排工具。根据实验和评估，Docker提供了快速部署、小巧的占用空间和良好的性能，这使其有可能成为一个可行的边缘计算平台。
- en: Marcel Grossmann and the team have developed **Hypriot Cluster Lab** (**HCL**).
    This is an ARM-powered cloud solution utilizing Docker. Embedded systems and other
    **Single Board Computers** (**SBCs**) have gained tremendous computing power.
    With devices increasingly interconnected and web-enabled, a massive amount of
    machine data gets generated and the growing need is to collect and crunch them
    quickly in order to squeeze out real-time insights. As illustrated earlier, the
    era of edge/fog analytics is picking up fast. HCL can provide the basis for a
    virtualized edge because it runs on the ARM architecture, which behaves like a
    small data center and ships energy-efficient features by design.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 马塞尔·格罗斯曼（Marcel Grossmann）及其团队开发了**Hypriot Cluster Lab**（**HCL**）。这是一个基于ARM架构的云解决方案，利用Docker进行操作。嵌入式系统和其他**单板计算机**（**SBCs**）已经获得了巨大的计算能力。随着设备的互联互通和网络化，大量的机器数据被生成，日益增长的需求是快速收集和处理这些数据，以提取实时洞察。正如前面所述，边缘/雾计算时代正在迅速发展。HCL可以为虚拟化边缘提供基础，因为它运行在ARM架构上，像一个小型数据中心一样工作，并通过设计提供节能功能。
- en: The Docker use cases
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker的使用案例
- en: Containerization is emerging as the way forward for the software industry as
    it brings forth a newer and richer way of building and bundling any kind of software,
    shipping and running them everywhere. That is the fast-evolving aspect of containerization
    that promises and provides software portability, which has been a constant nuisance
    for IT developers and administrators for many decades now. The Docker idea is
    flourishing here because of a number of enabling factors and facets. This section
    is specially prepared for specifying the key use cases of the Docker idea.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化正在成为软件行业发展的方向，它为构建和打包各种软件、将其运输并在任何地方运行提供了一种更新、更丰富的方式。这就是容器化快速发展的方面，它承诺并提供软件的可移植性，这一直是IT开发人员和管理员多年来的一个持续难题。Docker的理念在这里蓬勃发展，得益于多种推动因素和方面。本节特别准备了Docker理念的关键使用案例。
- en: Integrating containers into workflows
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将容器集成到工作流中
- en: Workflows are a widely accepted and used abstraction for unambiguously representing
    the right details of any complicated and large-scale business and scientific applications
    and executing them on distributed computing systems such as clusters, clouds,
    and grids. However, workflow management systems have been largely evasive in conveying
    the relevant information of the underlying environment on which the tasks inscribed
    in the workflow are to run. This means that the workflow tasks can run perfectly
    on the environment for which they were designed. The real challenge is to run
    the tasks across multiple IT environments without tweaking and twisting the source
    codes of the required tasks. Increasingly, the IT environments are heterogeneous
    with the leverage of disparate operating systems, middleware, programming languages
    and frameworks, databases, and so on. Typically, workflow systems focus on data
    interchange between tasks and are environment-specific. A workflow, which is working
    fine in one environment, starts to crumble when it is being migrated and deployed
    on different IT environments. All kinds of known and unknown dependencies and
    incompatibilities spring up to denigrate the workflows delaying the whole job
    of IT setup, application installation and configuration, deployment, and delivery.
    Containers are the best bet for resolving this imbroglio once and for all.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流是一种广泛接受并使用的抽象方法，用于明确表示任何复杂的大规模商业和科学应用程序的相关细节，并将其在分布式计算系统（如集群、云和网格）上执行。然而，工作流管理系统在传达工作流中任务运行的底层环境的相关信息方面一直存在问题。这意味着，工作流中的任务可以在为其设计的环境中完美运行。真正的挑战在于如何在不同的IT环境中运行这些任务，而无需修改和扭曲所需任务的源代码。随着不同操作系统、中间件、编程语言和框架、数据库等的不断发展，IT环境日益异构。通常，工作流系统关注任务之间的数据交换，并且是特定于环境的。一个在某个环境中运行良好的工作流，迁移到不同的IT环境后就会崩溃。各种已知和未知的依赖关系与不兼容性会浮现出来，拖延整个IT设置、应用程序安装与配置、部署和交付的过程。容器是解决这个复杂局面的一劳永逸的最佳选择。
- en: 'In the article, *Integrating Containers into Workflows: A Case Study Using
    Makeflow, Work Queue, and Docker, Chao Zheng* and *Douglas Thain* have done a
    good job of analyzing several methods in order to experimentally prove the unique
    contributions of containers in empowering workflow/process management systems.
    They have explored the performance of a large bioinformatics workload on a Docker-enabled
    cluster and observed the best configuration to be locally managed on containers
    that are shared between multiple tasks.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在文章《将容器集成到工作流中：使用Makeflow、Work Queue和Docker的案例研究》中，*Chao Zheng* 和 *Douglas Thain*
    做得很好，分析了几种方法，旨在通过实验证明容器在提升工作流/过程管理系统方面的独特贡献。他们探讨了在Docker启用的集群上运行大规模生物信息学工作负载的表现，并观察到，最佳配置是在多个任务之间共享的容器上进行本地管理。
- en: Docker for HPC and TC applications
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker在HPC和TC应用程序中的应用
- en: According to Douglas M. Jacobsen and Richard Shane Canon, currently, containers
    are being overwhelmingly used for the web, enterprise, mobile, and cloud applications.
    However, there are questions being asked and doubts being raised on whether containers
    can be a viable runtime for hosting technical and scientific computing applications.
    Especially, there are many **High-Performance Computing** (**HPC**) applications
    yearning for a perfect deployment and execution environment. The authors of this
    research paper have realized that Docker containers can be a perfect answer for
    HPC workloads.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Douglas M. Jacobsen和Richard Shane Canon的说法，目前，容器在Web、企业、移动和云应用程序中被广泛使用。然而，关于容器是否能够作为承载技术和科学计算应用程序的可行运行时，仍然存在疑问。尤其是，许多**高性能计算**（**HPC**）应用程序渴望找到一个完美的部署和执行环境。这篇研究论文的作者们意识到，Docker容器可以成为HPC工作负载的完美答案。
- en: In many cases, users desire to have the ability to easily execute their scientific
    applications and workflows in the same environment used for development or adopted
    by their community. Some researchers have tried out the cloud option, but the
    challenges are many. The users need to solve how they handle workload management,
    filesystems, and basic provisioning. Containers promise to offer the flexibility
    of cloud-type systems coupled with the performance of bare-metal systems. Furthermore,
    containers have the potential to be more easily integrated into traditional HPC
    environments, which means that users can obtain the benefits of flexibility without
    the added burden of managing other layers of the system (that is, batch systems,
    filesystems, and so on).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Minh Thanh Chung and the team have analyzed the performance of VMs and containers
    for high-performance applications and benchmarked the results that clearly show
    containers are the next-generation runtime for HPC applications. In short, Docker
    offers many attractive benefits in an HPC environment. To test these, IBM Platform
    LSF and Docker have been integrated outside the core of Platform LSF and the integration
    leverages the rich Platform LSF plugin framework.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: We all know that the aspect of compartmentalization is for resource partitioning
    and provisioning. This means that physical machines are subdivided into multiple
    logical machines (VMs and containers). Now on the reverse side, such kinds of
    logical systems carved out of multiple physical machines can be linked together
    to build a virtual supercomputer to solve certain complicated problems. *Hsi-En
    Yu* and *Weicheng Huang* have described how they built a virtual HPC cluster in
    the research paper, *Building a Virtual HPC Cluster with Auto Scaling by the Docker.*
    They have integrated the autoscaling feature of service discovery with the lightweight
    virtualization paradigm (Docker) and embarked on the realization of a virtual
    cluster on top of physical cluster hardware.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Containers for telecom applications
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Csaba Rotter and the team* have explored and published a survey article with
    the title, *Using Linux Containers in Telecom Applications.* Telecom applications
    exhibit strong performance and high availability requirements; therefore, running
    them in containers requires additional investigations**.** A telecom application
    is a single or multiple node application responsible for a well-defined task.
    Telecom applications use standardized interfaces to connect to other network elements
    and implement standardized functions. On top of the standardized functions, a
    telecom application can have vendor-specific functionality. There is a set of
    QoS and **Quality of Experience** (**QoE**) attributes such as high availability,
    capacity, and performance/throughput. The paper has clearly laid out the reasons
    for the unique contributions of containers in having next-generation telecom applications.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '*Efficient Prototyping of Fault Tolerant Map-Reduce Applications with Docker-Hadoop*
    by*Javier Rey and the team* advocated that distributed computing is the way forward
    for compute and data-intensive workloads. There are two major trends. Data becomes
    big and there are realizations that big data leads to big insights through the
    leverage of pioneering algorithms, scripts, and parallel languages such as Scala,
    integrated platforms, new-generation databases, and dynamic IT infrastructures.
    MapReduce is a parallel programming paradigm currently used to perform computations
    on massive amounts of data. Docker-Hadoop1 is a virtualization testbed conceived
    to allow the rapid deployment of a Hadoop cluster. With Docker-Hadoop, it is possible
    to control the characteristics of the node and run scalability and performance
    tests that otherwise would require a large computing environment. Docker-Hadoop
    facilitates simulation and reproduction of different failure scenarios for the
    validation of an application.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding interactive social media applications, Alin Calinciuc and the team
    have come out with a research publication titled as *OpenStack and Docker: Building
    a high-performance IaaS platform for interactive social media applications*. It
    is a well-known truth that interactive social media applications face the challenge
    of efficiently provisioning new resources in order to meet the demands of the
    growing number of application users. The authors have given the necessary description
    on how Docker can run as a hypervisor, and how the authors can manage to enable
    the fast provisioning of computing resources inside of an OpenStack IaaS using
    the `nova-docker` plugin that they had developed.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point in time, Docker is nothing short of an epidemic and every enterprising
    business across the globe is literally obsessed with the containerization mania
    for their extreme automation, transformation, and disruption. With the blossoming
    of hybrid IT, the role of Docker-enabled containerization is steadily growing
    in order to smartly empower IT-enabled businesses. In this chapter, we discussed
    the prime capabilities and contributions of the Docker paradigm. We described
    how a typical software package can be containerized. Further, you can come across
    industrial and enterprise-scale use cases.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
