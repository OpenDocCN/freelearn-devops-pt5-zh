- en: Chapter 8. Customizing the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the basic look and feel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new web sections in the UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new web items in the UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding conditions for web fragments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating new velocity context for web fragments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new drop-down on the top navigation bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic creation of web items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new tabs in the **View** **Issue** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new tabs in the **Browse** **Project** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the **Project Tab Panel** using fragments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new tabs in the **Browse** **Version** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new tabs in the **Browse** **Component** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending a webwork action to add UI elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying dynamic notifications/warnings on issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-ordering issue operations in the **View** **Issue** page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-ordering fields in the **View** **Issue** page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the good things about JIRA is that it has a simple but powerful user
    interface. A lot has changed between 3.13.x and 4.1.x in terms of the user interface,
    and it still continues to be one that keeps the users happy and plugin developers
    interested.
  prefs: []
  type: TYPE_NORMAL
- en: While the existing JIRA interface works for many people, there are cases where
    we need to modify bits and pieces of it, add new UI elements, remove some, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, when we think of modifying a web application's user interface, the
    first thought that comes to our mind is to go and modify the JSPs, VMs, and many
    others involved. While it is true, in some cases, for JIRA as well, a lot of the
    user-interface changes can be introduced without even touching the JIRA code.
    JIRA helps us to do that with the help of a number of UI-related plugin modules.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be looking at various recipes for enhancing the JIRA
    UI with the various plugin modules available, and also, in some cases, by modifying
    the JSPs or other files involved.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the look and feel can be changed to a big extent only by modifying
    the CSS files and other templates involved. But here we are talking about adding
    new web fragments, such as new sections and links, in the various parts of the
    UI without actually modifying the core JIRA files or with little modification
    of them. If we modify the JIRA files, it should be noted that maintaining the
    files over various JIRA versions, enabling or disabling of the changes, and so
    on, would be very difficult and worth considering!
  prefs: []
  type: TYPE_NORMAL
- en: Changing the basic look and feel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, any big changes to the look and feel of JIRA can be achieved
    only by modifying the CSS files, JSPs, templates, and other tools involved. But
    JIRA lets its administrators make slightly simpler changes like changing the logo,
    coloring scheme, and so on, with some simple configurations. In this recipe, we
    will see some examples on how easy it is to make those changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are mainly four things that can be configured to change JIRA''s appearance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logo**: Understandably, this is one thing everyone wants to change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Colors**: JIRA has a nice theme of colors revolving around a theme of blue.
    But we can easily change these colors to suit our taste or rather the company''s
    taste!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gadget colors**: For each gadget in JIRA, we can set a different color chosen
    from a predefined set of colors. We can easily change the predefined list of colors
    through simple configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Date and Time formats**: The Date and Time formats in JIRA could be modified
    easily to suit our needs, provided it is a valid format supported by Java''s `SimpleDateFormat`
    ([http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html](http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are the steps to make changes to the basic JIRA look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to JIRA as an administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Administration** | **Global** **Settings** | **Look** **and**
    **Feel**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Edit** **Configuration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the changes as appropriate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Logo**: Bundle your new logo as part of the JIRA WAR or drop it under the
    JIRA installation under the `images` folder or another valid directory. Refer
    to the new logo''s URL as a relative path to your new logo within the JIRA installation
    directory.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, `/images/logo/mynewlogo.png` will refer to the `mynewlogo.png`
    image under the `images/logo` folder. Enter the new logo width or height as suitable.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Colors**: Specify the hexadecimal notations (HEX values) of the interested
    colors if the color scheme needs to be changed.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Gadget** **colors**: Here also, specify the hexadecimal notations (HEX values)
    of the interested colors so that gadget users can pick from the new set of colors.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Date** **and Time** **formats**: Enter the new Date and Time formats, provided
    it is a valid format supported by Java''s `SimpleDateFormat` ([http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html](http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html)).'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Update**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the cycle until the desired result is achieved. We can always get back
    to the defaults by clicking on **Reset** **Defaults** while editing the configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'With some simple changes, the JIRA UI can look a lot different from how it
    normally looks. The following screenshot is a small example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1803-08-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, the **View** **issue** page will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1803-08-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a small, yet powerful change!
  prefs: []
  type: TYPE_NORMAL
- en: Adding new web sections in the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web *fragment* is a link or a section of links at a particular location of
    the JIRA web interface. It can be a menu in JIRA's top navigation bar, a new set
    of issue operations, or a new section in the **Admin** **UI** section.
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of plugin modules to add new web fragments in JIRA, namely,
    the **Web** **Section** plugin module and the **Web** **Item** plugin module.
    A **Web** **Section** is a collection of links that is displayed together at a
    particular location of the JIRA user interface. It maybe a group of buttons on
    the issue operations bar or a set of links separated by lines.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to add a new web section to JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to add a new web section into JIRA:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the *location* where the new sections should be added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JIRA has a lot of identified locations in its user interface and it lets us
    add new web sections in any of these locations. A complete list of the available
    locations can be found at [http://confluence.atlassian.com/display/JIRA/Web+Fragments](http://confluence.atlassian.com/display/JIRA/Web+Fragments).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add the new `web-section` module into the `atlassian-plugin.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As with all other plugin modules, it has unique module `key`. Here, the two
    other important attributes of the `web-section` element are `location` and `weight`.
    `location` defines the location in the UI where the section should appear and
    `weight` defines the order in which it should appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the above example, location is `system.admin`, which will create a new web
    section under the administration screen, just like the existing sections: **Project**,
    **Global** **Settings**, and so on.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `web-section` module also has a set of child elements. The `condition` or
    `conditions` element can be used to define conditions, one or more, details of
    which we will see in the following recipes. The `context-provider` element can
    be used to add a new context provider which will then define the velocity context
    for the web section. `label` is what will be displayed to the user. `param` is
    another element that can be used to define key/value parameters and is handy if
    we want to use additional custom values from the UI. The `resource` element can
    be used to include resource files like JavaScript or CSS files and the `tooltip`
    element will provide a tooltip for the section. `label` is the only mandatory
    element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Elements such as `label` and `tooltip` can have optional key value parameters,
    as shown in the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see in the example, label takes a `key/value` parameters where the
    value is dynamically populated from a velocity variable. The `param` will be passed
    to the text as `{0}` and will substitute that position in the label. Here, the
    parameters allow one to insert values into the `label` using Java's `MessageFormat`
    syntax, the details of which can be found at `http://download.oracle.com/javase/7/docs/api/java/text/MessageFormat.html`.Parameter
    names must start with `param` and will be mapped in alphabetical order to the
    substitutions in the format string, that is, `param0` is `{0}`, `param1` is `{1}`,
    `param2` is `{2`}, so on and so forth.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deploy the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the plugin is deployed, we can see that a new section is created in the
    Admin screen of JIRA, as shown in the following screenshot. The web item is explained
    in detail in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can add the section at many different places just by changing the `location`
    attribute. If we change the location alone to `opsbar-operations`, the new section
    will appear on the **View** **issue** page, as shown in the next screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: The web item's section attribute must be changed to match the new location as
    well, that is, `opsbar-operations/jtricks-admin-section`.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the web section label may not always be visible because in some cases
    the section is used to just group the links. For example, in the case of issue
    operations, the section is just used to group the links together as shown before.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Adding* *new* *web* *items* *in* *the* *UI*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new web items in the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A *web* *item* is a new link that can be added at various places in the JIRA
    UI. A link will typically go under a *web* *section*. A link can simply point
    to a URL or can be used to invoke an action. In this recipe, we will see how to
    add a new web item to JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to add a new web item into JIRA:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the *web section* where the new link should be added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have already seen how to create a new web section. A link is then added into
    a section created as above or into a predefined JIRA section. We can add the link
    directly to a location if it is a **non-sectioned** one. For **sectioned** locations,
    it is the location **key**, followed by a slash ('/'), and the **key** of the
    web section in which it should appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, if we want to place a link in the web section created before, the
    section element will have the value `system.admin/jtricks-admin-section`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add the new web item module into the `atlassian-plugin.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A Web item module also has a unique `key`. The other two important attributes
    of a web-item are `section` and `weight`. `section` defines the web section where
    the link is placed, as mentioned above, and `weight` defines the order in which
    the link will appear.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A web item also has all the elements of a web section: `condition`/`conditions`,
    `context`-`provider`, `description`, `param`, `resource`, and `toolitp`. In addition,
    a web item also has a `link` element that defines where the web item should link
    to. The link could be an action, a direct link, and so on, and can be created
    using velocity parameters dynamically, as shown in the examples below:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the third example, `user` is a variable available in the velocity context!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An `icon` element is used when we need to add an icon alongside the link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Deploy the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the plugin is deployed, we can see that a new web item is shown in the
    web section we created previously under the **Admin** screen of JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can add the item under various different places, just by changing the section
    attribute. We have seen an example while creating a new issue operation in the
    previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Adding* *new* *web* *sections* *in* *the* *UI*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding conditions for web fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous recipes, adding a web fragment is pretty easy. However,
    the job doesn't stop with that always. In many cases, we would want to limit the
    web item based on a set of conditions.
  prefs: []
  type: TYPE_NORMAL
- en: For example, an **Edit** **Issue** link should only appear for people with edit
    permission on an issue. An admin link should appear only if the user is a JIRA
    Administrator. In this recipe, let us look at how we can implement conditions
    for displaying web fragments.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to add one or more conditions to a web section or a web item.
    In the latter case, the `conditions` element is used, in this case, a collection
    of `condition/conditions` elements and a `type` attribute. The type attribute
    is either the logical `AND` or `OR`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following condition specifies that the user should have either
    the `admin` permission or `use` permission in a project before he/she can see
    the web fragment that has the following condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Possible values of permission are `admin`, `use`, `sysadmin`, `project`, `browse`,
    `create`, `edit`, `scheduleissue`, `assign`, `assignable`, `attach`, `resolve`,
    `close`, `comment`, `delete`, `work`, `worklogdeleteall`, `worklogdeleteown`,
    `worklogeditall`, `worklogeditown`, `link`, `sharefilters`, `groupsubscriptions`,
    `move`, `setsecurity`, `pickusers`, `viewversioncontrol`, `modifyreporter`, `viewvotersandwatchers`,
    `managewatcherlist`, `bulkchange`, `commenteditall`, `commenteditown`, `commentdeleteall`,
    `commentdeleteown`, `attachdeleteall`, and `attachdeleteown`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us consider a simple example of how to write a condition and display the
    web items based on it. In this example, we will display a web item in the top
    navigation bar if, and only if, the user has logged in and belongs to the `jira-developer`
    group. The following are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Write the `condition` class. The class should extend the `AbstractJiraCondition`
    class and override the following abstract method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In our example, all we need to check is that the user is not null and is a
    member of the group `jira-developers`. The class is implemented as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new condition class in the `web-item`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the section here is `system.top.navigation.bar`, which will
    place the new link on the Top Navigation bar. But the link will be visible only
    if the condition `DeveloperCondition` returns `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can easily invert a condition using the `invert` flag as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will display the link if the user is not logged in or not in the group
    of JIRA developers!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deploy the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the plugin is deployed, we can see that the new **JTricks** **Conditional**
    **Menu** is rendered in the Top Navigation bar only when the user is logged in
    and in the group of JIRA developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the dashboard of a user who is logged in and
    in the group of JIRA developers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the user is not logged in, the menu is not shown as seen in the following
    screenshot. In this case, we only have web items that don't have conditions defined
    for them!
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating new velocity context for web fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have mentioned in the previous recipes, it is possible to add velocity
    variables while constructing a JIRA web fragment. JIRA supports a list of variables
    by default, which includes `user`, `req`, `baseurl`, and so on. The full list
    and the details of these variables can be found at [http://confluence.atlassian.com/display/JIRADEV/Web+Fragments#WebFragments-VelocityContext](http://confluence.atlassian.com/display/JIRADEV/Web+Fragments#WebFragments-VelocityContext).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to add more variables to the velocity context
    with the use of the `context-provider` element.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `context-provider` element adds to the Velocity context available to the
    web section and web item modules. Only one `context-provider` can be added for
    an item. The following steps show how we can make use of a context provider:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the new `ContextProvider` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The class must implement `com.atlassian.plugin.web.ContextProvider`. To make
    things easy, it is enough to extend the `AbstractJiraContextProvider` class and
    override the following abstract method in it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following is what the `class` looks like if you want to add the full name
    of the user as a separate variable in the velocity context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Please note that the `$user` variable is already available in the velocity context
    of web fragments and so the full name can be retrieved easily using `$user.getFullName()`.
    This is just a simple example of how to use the context providers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the variable which is added into the velocity context appropriately while
    constructing the web section/item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the example, let us create a new web section with the user's full name in
    the admin section with a single web item in it to link to the user's website.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the web section refers to `$userName` in its label.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deploy the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the plugin is deployed, we can see that the new web section is created
    under JIRA Admin UI, as shown in the following screenshot. The `$userName` variable
    is dynamically replaced by the current user's full name.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new drop-down menu on the top navigation bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will show how to use the web section and web-item modules
    quickly to add a new drop-down menu in JIRA's top navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we need a *web* *item* first to be placed in the system's top navigation
    bar and then have a *web* *section* declared under it. The web section can then
    have a list of web items created under it which will then form the links on the
    drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the steps to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new web item under the system''s top navigation bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the section is `system.top.navigation.bar`. It can have a link
    that is pointed to somewhere, in this case, the JTricks' website. Here, an important
    thing to notice is that the `linkId` should be same as the `key`. In this case,
    both come under `jtricks-menu`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Define a web section located under the above web item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure the location is pointing to the `key` of the first web item which
    is also its `linkId`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now add the various web-items under the above web section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the section is pointed to `jtricks-menu/jtricks-section`, which is
    similar to a localized section. Here `jtricks-menu` is the key for the first web-item
    and `jtricks-section` is the key for the previous web section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deploy the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the plugin is deployed, we can see that the new web fragments are created
    in the top navigation banner. We have a web item, `JTricks` `Menu`, under which
    a list of links are grouped into a section, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dynamic creation of web items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now seen quite a few recipes on how to create web items and place them
    at different places in the UI. But in all the cases, we knew what links we needed.
    How about creating these links on the fly?
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to create web items dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new web item, **Favourites**, in the system top navigation bar, as
    discussed in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us assume we want to create some links in the system top navigation bar.
    We have seen the same thing in the previous recipe, but that works only when we
    know the links in advance. Let us consider a new scenario where the user sees
    different sets of links when he/she is logged in and not logged in! Here the links
    change based on the user's status and hence need to be created dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a step-by-step process to do the same:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a **Favourites** web section in the system top navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we did exactly what we saw in the previous recipe. A web-item is created
    in the top navigation bar under which a web section is created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Define a **simple** **link** **factory** in the `atlassian-plugin.xml`. A Simple
    Link Factory defines a new link factory that creates the set of links dynamically.
    It always hangs off an already declared web section, `favourites-section` in our
    case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, a simple link factory has a unique `key` and it points to an
    already available `location`. In our case, the location is `favourites-menu/favourites-section`,
    which is declared in *Step* *1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The most important attribute is the `class` attribute, `FavouritesLinkFactory`.
    Also, notice that the attribute `lazy` is declared as `true` to represent lazy
    loading.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the **simple** **link** **factory** class. The class should implement
    the `SimpleLinkFactory` interface, as shown:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All we need to do is to implement two methods, `getLinks` and `init`. The `init`
    method needs to be implemented only when you need to initialize anything in your
    plugin. This will be invoked only once, that is, at JIRA startup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `getLinks` method is the actual method that we need to implement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Implement the `getLinks` method. In this method, we need to return a collection
    of links that will be then displayed as a `web-item` under the section we defined
    earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each link we return is an instance of the `SimpleLink` class. A `SimpleLink`
    object is the Java representation of a web item we normally declare in the `atlassian-plugin.xml`.
    It has all the same attributes such as the `label`, `title`, `iconUrl`, `style`,
    `url`, and an `accesskey`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following is the method for our example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we just create different links based on whether the user is null or not.
    A user is null if he/she is not logged in. As you can see, each link has different
    attributes mentioned earlier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Package the plugin and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The links should now be created dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the plugin is deployed, we can see that the new web fragments are created
    in the top navigation banner. If the user is not logged in, the **Favourites**
    menu is shown with the default link, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the user is logged in, he/she will see a different set of links, as per
    the `getLinks` method.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The same idea can be used to create dynamic links based on a different criterion,
    and of course, at various different places in the UI.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new tabs in the View Issue screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to enhance the UI by adding new sections and links at various
    locations. In this recipe, we will see how to add a new tab panel under the view
    issue page, similar to the existing panels such as Comments, Change History, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new skeleton plugin using the Atlassian Plugin SDK.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a new tab panel to the **View** **Issue** page can be done by the **Issue**
    **Tab Panel** Plugin **Module**. Following are the steps to create a new issue
    tab panel that displays some static text with a greeting to the logged-in user.
  prefs: []
  type: TYPE_NORMAL
- en: Define the `Issue` `Tab` `Panel` in the `atlassian-plugin.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, the plugin module has a unique `key` and should define the `class` that
    implements the tab panel. It also has a list of elements, as explained as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`description`: A description of the tab panel'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`label`: A human-readable label for the panel'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`resource`: Defines the velocity template that renders the tab panel view'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`order`: Defines the order in which the panels will appear on the view issue
    page'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sortable`: Defines whether the contents of the panel is sortable or not. For
    example, sorting comments or the change history elements.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the `Issue` `Tab` `Panel` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The class should extend the `AbstractIssueTabPanel` class, which in turn implements
    the `IssueTabPanel` interface. We need to implement the `showPanel` and `getActions`
    methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Implement the `shownPanel` method to return `true` if the panel can be displayed
    to the user. This method can have complex logic to check whether the user can
    see the tab or not, but in the example we have, we just return `true`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Implement the `IssueAction` classes that need to be returned in the `getActions`
    method. It is in the `Action` classes that we populate the velocity context to
    render the view and also return the time performed to facilitate sorting if `sortable
    = true.`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the example, let us create a single `Action` class as follows:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the action class must extend the `AbstractIssueAction` class,
    which in turn implements the `IssueAction` interface.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `getTimePerformed` method, it just returns the current date. `populateVelocityParams`
    is the important method where the velocity context is populated. In our example,
    we just include the current user's full name with key name as `user`.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Implement the `getActions` method in the `Tab` `Panel` class to return a list
    of `IssueActions`. In our example, we just return a list that contains the new
    `JTricksAction`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Here, the `descriptor` is an instance variable of the super class. All we do
    here is create an instance of the `Action` class and return a list of such actions.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the view template in the location specified earlier.`Hey $user, sample
    Issue Tab Panel!` is all we need and the user here is populated into the context
    in the `Action` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Package the plugin and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the plugin is deployed, a new tab panel will appear in the **View** **Issue**
    page, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the greeting message there is populated using the velocity context
    and the attributes in it.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding new tabs in the Browse Project screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to add a new tab in the **Browse** **Project**
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new skeleton plugin using Atlassian Plugin SDK.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to create a new project tab panel:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the `Project` `Tab` `Panel` in the `atlassian-plugin.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, the plugin module has a unique `key` and should define the `class` that
    implements the tab panel. It also has a list of elements, as explained as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`description`: A description of the tab panel'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`label`: A human-readable label for the panel'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`resource`: Defines the velocity template that renders the tab panel view'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`order`: Defines the order in which the panels will appear on the browse project
    screen.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the `Project` `Tab` `Panel` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The class should extend the `AbstractProjectTabPanel` class, which in turn implements
    the `ProjectTabPanel` interface. We need to implement only the `showPanel` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `showPanel` method should return `true` if the panel can be displayed to
    the user. This method can have complex logic to check whether the user can see
    the tab or not, but in the example we have, we just return `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view template in the location specified earlier. The template we
    defined is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we need extra velocity parameters in this context, it can be populated in
    the `Project` `Tab` `Panel` class by overriding the `createVelocityParams` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Package the plugin and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the plugin is deployed, a new tab panel will appear in the **Browse**
    **Project** page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating Project Tab Panel using fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to create a new `Project` `Tab` `Panel` in the previous recipe.
    While this works in most cases, sometimes we would like to create the nice fragmented
    view in JIRA 4.1+. Here, each project tab panel has a list of fragments organized
    in two columns. We can create the fragments and order them so that they appear
    in a formatted way on clicking the new tab panel.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to create the project tab panel using fragments.
    Before we start, there are a couple of things worth mentioning.
  prefs: []
  type: TYPE_NORMAL
- en: We need to use the same package structure, `com.atlassian.jira.plugin.projectpanel.impl`,
    to create the fragment class, as we need to override the protected methods in
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The components used in creating the fragments are not available in the OSGI
    v2.0 plugins, and hence we have chosen to go with a v1.0 plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following are the steps to create a fragmented `Project` `Tab` `Panel`.
  prefs: []
  type: TYPE_NORMAL
- en: Add the project tab panel module in `atlassian-plugin.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The attributes and elements are similar to a normal `Project` `Tab` `Panel`,
    except that it doesn't have a view velocity resource defined. The HTML here is
    constructed with the help of fragments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the fragments needed in the project panel. Let us assume we need two
    fragments, `FragmentOne` and `FragmentTwo`, for our example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each Fragment must extend the `AbstractFragment` class. We need to override
    three methods for a fragment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`getId`: It defines the ID of the fragment, which will also be the name of
    the velocity template used to render this fragment.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`getTemplateDirectoryPath`: It returns the path where the velocity template
    is placed.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`showFragment`: It defines whether the fragment is visible to the user or not.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A fourth method, `createVelocityParams`, can be overridden if we need to pass
    extra parameters to the velocity context. Following is how `FragmentOne` looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here the velocity template will be `fragmentone.vm`, placed under `templates/project/fragments/`.
    The fragment is always shown, but this can be modified to include complex logic.
    We also add a new variable, `user`, to the context which then holds the full name
    of the current user. Note that user variable is already in the context, but this
    is just for an example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`FragmentTwo` will be similar, as shown in the next few lines of code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the velocity template will be `templates/project/fragments/fragmenttwo.vm`.
    Note that we don't override the `createVelocityParams` method here as we don't
    need any extra parameter in the context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the fragment-based project tab panel class. In our example, the class
    is `JTricksFragProjectTabPanel`. The class must extend the `AbstractFragmentBasedProjectTabPanel`
    class. We need to implement three methods in this class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`getLeftColumnFragments`: This returns a list of `ProjectTabPanelFragment`
    classes that form to the left column of the panel.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`getRightColumnFragments`: This returns a list of `ProjectTabPanelFragment`
    classes that forms to the right column of the panel.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`showPanel`: This determines whether the panel can be shown or not.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The class will look like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we just construct the fragment objects and return them to the appropriate
    column list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the velocity templates for the fragments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our example, `fragmentone.vm` looks like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the use of `$user`, which was populated in the velocity context of the
    `FragmentOne` class. Also, the various `div` elements are used for the UI conformance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Similarly, `fragmenttwo.vm` is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The only difference is that we don't use the `velocity` variable here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Package the plugin and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the plugin is deployed, a new fragment-based tab panel will appear in
    the **Browse** **Project** page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding new tabs in the Browse Version screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to add a new tab in the **Browse** **Version**
    screen. This screen holds details of a particular version in JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new skeleton plugin using **Atlassian** **Plugin** **SDK**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are the steps to create a new version tab panel. It is much similar
    to creating a new project tab panel, except for the obvious changes in the files
    and keywords involved.
  prefs: []
  type: TYPE_NORMAL
- en: Define the `Version` `Tab` `Panel` in the `atlassian-plugin.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, the plugin module has a unique `key` and should define the `class` that
    implements the tab panel. It also has a list of elements, as explained below:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`description`: A description of the tab panel'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`label`: A human-readable label for the panel'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`resource`: Defines the velocity template that renders the tab panel view'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`order`: Defines the order in which the panels will appear on the Browse Version
    Screen.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the `Version` `Tab` `Panel` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The class should extend the `GenericTabPanel` class, which in turn would implement
    the `TabPanel` interface. We need to implement only the `showPanel` and `createVelocityParams`
    methods, the latter only if we need to add extra variables into the velocity context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `showPanel` method should return true if the panel can be displayed to the
    user. This method can have complex logic to check whether the user can see the
    tab or not, but in the example we have, we just return true.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This variable will now be available on the view template that we are using.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the view template in the location specified in the plugin descriptor.
    Let us just create a simple template with a greeting to the current user as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Welcome $user, This is your new Version Tab!**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that we have used the `$user` variable that we populated in the previous
    step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Package the plugin and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the plugin is deployed, a new tab panel will appear in the **Browse**
    **Version** page, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding new tabs in the Browse Component screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to add a new tab in the **Browse** **Component**
    screen. This screen holds details of a particular component in JIRA, and the process
    of adding a new tab is much similar to adding a new version tab or project tab
    panel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new skeleton plugin using **Atlassian** **Plugin** **SDK**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are the steps to create a new component tab panel.
  prefs: []
  type: TYPE_NORMAL
- en: Define the `Component` `Tab` `Panel` in the `atlassian-plugin.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As in the case of a version tab panel, component tab panel also has a unique
    key and should define the `class` that implements the tab panel. It also has a
    list of elements, as explained below:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`description`: A description of the tab panel'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`label`: A human-readable label for the panel'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`resource`: Defines the velocity template that renders the tab panel view'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`order`: Defines the order in which the panels will appear on the Browse Component
    Screen.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the `Component` `Tab` `Panel` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The class should extend the `GenericTabPanel` class, which in turn implements
    the `ComponentTabPanel` interface. We need to implement only the `showPanel` method
    and `createVelocityParams` method, the latter only if we need to add extra variables
    into the velocity context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `showPanel` method should return true if the panel can be displayed to the
    user. This method can have complex logic to check whether the user can see the
    tab or not, but in the example we have, we just return true.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As in the previous recipe, let us override the `createVelocityParams` method
    to add a new variable, `user`, to the velocity context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This variable will now be available on the view template that we are using.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the view template in the location specified in the plugin descriptor.
    Let us create a simple template, as in the previous recipe, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Welcome $user, This is your new Component Tab!**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that we have used the $user variable, which we populated in the previous
    step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Package the plugin and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the plugin is deployed, a new tab panel will appear in the Browse component
    page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Extending a webwork action to add UI elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the second chapter, we have seen how to extend a webwork action. In this
    recipe, let us build on it and see how we can add more UI elements to an existing
    JIRA form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a skeleton plugin using Atlassian plugin SDK .
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us consider a simple example for explaining this. The clone issue operation
    in JIRA creates a copy of the original issue with the value of almost all of its
    fields copied across, barring few fields like issue key, created date, updated
    date, estimates, number of votes, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: What if we want to copy across the number of votes on the issue as well? Let
    us say we want to add a checkbox on the clone issue form, leaving the decision
    to the user whether to copy the votes across or not. If the user selects the checkbox,
    votes will be copied across and if not, the cloned issue will be created with
    0 votes as it happens in JIRA by default. This example will give a rough idea
    on adding new UI elements on JIRA forms and using them in the action classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the step-by-step process that can be used to implement our
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: Override the JIRA web action for `CloneIssue` by creating an entry for it in
    the `atlassian-plugin.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we have seen in [Chapter 2](ch02.html "Chapter 2. Understanding Plugin Framework"),
    *Understanding* *Plugin* *Framework*, the alias of the action remains the same
    as that of the `Clone` `Issue` action. We have gone for a custom class `ExtendedCloneIssueDetails`
    that extends the JIRA action class `CloneIssueDetails`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here, we also use a copy of the original JSP, named as `extended-cloneissue-start.jsp`,
    just to keep track of the modified files. It is entirely possible to modify directly
    on the JIRA-supplied `cloneissue-start.jsp`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the new action class extending the original action class. It is also
    possible to create an entirely new action class, but extending the original action
    will be easier as it leaves us with the task of only adding the extra bits that
    are needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Declare a variable for the new field we are going to add in the Clone Issue
    form. The variable name will be same as the name of the UI element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The variable that we declare should match the type of the UI element. For example,
    a checkbox will have a Java Boolean as the variable type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Different UI elements are mapped to different Java types like text fields to
    Java String, number fields to Long, and so on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create getters and setters for the new field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These getter/setter methods will be used to get values to and from the JSPs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add the new UI element into the JSP. In our case, the JSP is `extended-cloneissue-start.jsp`,
    which is a copy of `cloneissue-start.jsp`. The UI element that we add should follow
    the rules of the templates used in the version of JIRA we are using. This is important
    as the UI keeps changing between versions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As in JIRA 4.3, the new checkbox can be added as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the checkbox field has the same `name` as that of the class variable
    in the Action class. The rest of the code revolves around the decorator to use,
    attributes and elements to be passed, and so on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Capture the checkbox value in the action class when the form is submitted. The
    value can be retrieved in the class using the getter method. We can now do all
    the things that we want using the checkbox value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, if the cloneVotes checkbox is checked, the votes field should
    be copied across from the original issue to the cloned one. As we have seen in
    the previous chapter while discarding field values during cloning, we can override
    the `setFields` method to do that.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The important bit here is that the checkbox value is passed across to the action
    class behind the scenes and we are using the same to decide whether to copy the
    votes' values across.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Package the plugin, deploy it, and see it in action. Don't forget to copy the
    modified JSP file to the `/secure/views` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An action can be overridden only once. Care must be taken not to override it
    again in another plugin (might be a third party one), as only one will be picked
    up.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the plugin is deployed and the JSP file is copied across to the right
    location, we can find the modified UI while cloning an issue. The form will have
    the new field, **Clone** **Votes?**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the issue we are cloning has one vote on it. If the cloneVotes field
    is checked, the cloned issue will have the votes on it, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A similar approach can be used to add any new fields into the JIRA forms and
    use the fields in the action classes, as required. You can find more information
    about the various elements and its attributes by looking at the `webwork.tld`
    file, residing in the `WEB-INF/tld/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Extending a webwork action in JIRA*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying dynamic notifications/warnings on issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JIRA has an interesting feature, the Announcement Banner, which can be used
    to make announcements to its user community via JIRA itself. But sometimes, it
    isn't enough to satisfy all its users. Power users of JIRA sometimes want to see
    warnings or notifications while they are viewing an issue based on some attributes
    of the issue.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to add a warning or error message on an issue
    based on whether the issue has subtasks or not!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a Skeleton plugin using Atlassian Plugin SDK. Here also, as in the previous
    recipe, the core logic is in extending the JIRA action and modifying the existing
    JSP files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are the steps to display warnings/errors based on the number of
    subtasks on a standard issue type.
  prefs: []
  type: TYPE_NORMAL
- en: As in the previous recipe, extend the JIRA action (in this case, View action)
    by adding a webwork module in `atlassian-plugin.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Override the action class `ViewIssue` with `ExtendedViewIssue`, mentioned above,
    and add a public method to check whether the issue has any subtasks or not. Make
    sure the method is public so that it can be invoked from the JSP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It just checks whether the issue is a subtask or not and returns `true` if it
    is a standard `issuetype` and has no subtasks of its own.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `extended-viewissue.jsp` file to add a warning at the top, if the
    issue has no subtasks. Here we add a condition to check if the public method returns
    `true`, and if so, the warning is added, as shown below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, we have used the JIRA styles to add a warning icon and a warning
    div container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Package the plugin and deploy it to see it in action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the plugin is deployed, if a standard issue has no subtasks, the user will
    see a warning, as shown below, if the warning code was added immediately after
    the summary field.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just by modifying the CSS to add error styles, the message will appear as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/1803-08-20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Extending* *a* *webwork* *action* *in* *JIRA*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-ordering Issue Operations in the View Issue page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we have seen how to create new issue operations. All
    the existing issue operations in JIRA have a predefined order associated with
    it. Currently, in JIRA, the actions are ordered as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Re-ordering Issue Operations in the View Issue page](img/1803-08-21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we will see how we can reorder those actions with out actually
    doing any coding! For example, let us assume we want to move **Delete** option
    to first in the list and then move the subtask operations up the chart!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following is the step-by-step process to reorder the issue operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the `system-issueoperations-plugin.xml` residing under the `WEB-INF/classes`
    folder. This is the file where all the issue operations are defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the `weight` attribute on the relevant plugin modules to order them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`weight` is the attribute that defines the order of JIRA web fragments. Issue
    operations post JIRA 4.1.x are stored as web fragments and hence are reordered
    using weight.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Prior to JIRA 4.1, issue operations were defined using Issue Operations plugin
    module instead of `web-items`. In those modules, the `order` attribute was used
    to define the ordering, which is an equivalent to the current `weight` attribute.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Lower the `weight`, and the item will appear first.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the file and restart JIRA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our example, we wanted the Delete operation to appear first. As 10 is the
    lowest weight value by default, if we give a weight of 5 to the `delete` web section,
    that is, `operations-delete`, it will appear first in the list, as shown below.
    Similarly, we can reorder every other action, as we have done for the subtask
    operations as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1803-08-22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Adding* *new* *Issue* *Operations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-ordering fields in the View Issue page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is always difficult to satisfy everyone in a big user community and that
    is what has happened with JIRA's view issue page. While some people love it, some
    think there are simple improvements possible, resulting in huge customer satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: One such thing is the layout of the view issue page. While it is neatly organised
    in terms of the code, the order in which they appear seems to be a strong contender
    for change in many cases.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the view issue page, the summary of the issue is followed by
    standard issue fields like Status, Priority, versions, components, and so on.
    It is then followed by the custom fields and then comes the description of the
    issue. This can sometimes be a pain, for example, in cases where description is
    the most important field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is how the view issue page looks when you have a large custom field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Re-ordering fields in the View Issue page](img/1803-08-23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the `Test` `Free` `Text` field has a huge value and the `description`
    field is not present anywhere on the screen. In this recipe, we will see how we
    can re-order some of the things.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we saw in the previous recipe, the view issue action makes use of `/secure/views/issue/viewissue.jsp`.
    If we closely look at the JSP, it is neatly arranged by placing the different
    section of fields in different JSPs. For example, custom fields, description,
    attachments, linking, subtasks, and so on, all have different dedicated JSPs and
    are ordered in a manner that works for most.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to make `description` the very first field on the view issue page,
    we can do that by just moving the JSP rendering description, that is, `issue_descriptiontable.jsp`,
    higher up in the order.
  prefs: []
  type: TYPE_NORMAL
- en: 'The page will then appear like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1803_08_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can even wrap the custom fields in a separate div with the appropriate CSS
    classes, as shown in the following screenshot. Make sure you don't duplicate the
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/1803-08-25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, we can reorder the other UI fragments on JIRA's **View** **Issue**
    page as well!
  prefs: []
  type: TYPE_NORMAL
