- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interactive Rebasing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interactive rebasing is a confusing name for a very useful Git functionality.
    From a user's perspective, rebase and interactive rebase have little in common.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interactive rebase allows you to clean up your commits, but only *before* you
    push them to the server. With interactive rebasing you can:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Squash" your commits so that your commit history is sparser and easier to
    read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the message for your commits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixup, which is just like squash except that it doesn't stop and ask for a new
    message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop, which removes a commit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key thing here is that you are modifying commits, not the files that go
    into a commit. And, as I'll keep mentioning, you must do this interactive rebasing
    *before* you push your commits to origin. You never modify commits once they are
    on the server because other developers may be interacting with the commits, and
    you will likely create conflicts, which are time-consuming to repair. See *Chapter
    4*, *Merging, Pull Requests and Handling Merge Conflicts*, for information on
    merge conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive rebasing at work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To see this at work, we need a dozen commits. Let's create a new quick and dirty
    program and create commits with every line. Once we have that, we can look at
    how interactive rebasing is accomplished at the command line and also in Visual
    Studio.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: you would never commit this frequently, but we need commits to work
    with.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For variety''s sake, let''s create the skeleton of a music tracking application.
    The first step is to create the repository on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Creating a repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the repository created, we need to clone it into a local repository. This
    time let''s use Visual Studio, and GitHub''s awareness of Visual Studio. On GitHub
    click on **Code** and when the dropdown opens, choose **Open with Visual Studio**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Downloading a commit with Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you do, Visual Studio will open and offer to save your project, with the
    name and default location chosen. For this exercise, create a solution with that
    project, and then add a `Music` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Cloning a repository with Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Clone** in the lower-right corner and you will be brought to your
    application. You may be asked to sign in to GitHub if you haven't already done
    so from Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Because the checkboxes were selected at repo creation, your three files are
    already in the **Solution Explorer** (`README.md`, `LICENSE`, and `.gitignore`).
    Your next step is to create a project in that solution. In our case, we'll create
    a console application named `MusicHandler`. Click on **File** | **New Project**
    and select **Console Application**. You'll be asked what framework you'd like
    to use. For this console application any will do; I'll choose .NET 5\. Click on
    **Create** in the lower right-hand corner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your application is created, complete with `Program.cs`. Let''s make this our
    first commit. Staying in Visual Studio, we can click on the **Git** menu item,
    and choose **Commit or Stash**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: Your first commit with Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as you select it, the right-hand window (where **Solution Explorer**
    is) will turn into a Git handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Visual Studio''s principal Git handler'
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot of information here. At the bottom of the figure, you see that
    the project and `Program.cs` are marked as new (capital A) and that there are
    two changes (which is correct). You can stage them by clicking on the **+** sign.
    Or you can click on **Commit All** to both stage and commit your files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter your message and select **Commit All**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: After creating a commit in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: The view immediately changes in a few significant ways. At the top you see that
    a commit was created locally – that is, in the local repository. You also see
    that you now have "1 outgoing" – that is, one commit locally that has not been
    pushed to the server.
  prefs: []
  type: TYPE_NORMAL
- en: You also see an **Amend** checkbox; you can use that if you want to change the
    message on the most recent commit. Even though we have one outgoing, we are not
    going to push that commit. We need a number of local commits.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need a solution to work with, so create a new project/solution in the same
    location. When you are done, your **Solution Explorer** should look like *Figure
    6.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: Creating a project in the repo folder'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re now ready to create our `Music` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s commit that. You will see that your files are not yet tracked. You''ll
    need to add them to the index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you are ready to commit it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look at the log, `git log --oneline`, you should see all three commits:
    the one created when you cloned the repository and the two you created by hand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create two more commits. We''ll start by giving the `Music` class some
    properties, committing as we add each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can review our commits by going to the **Git** menu and choosing **View
    Branch History** (which is much like `git log ––oneline`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: Reviewing a commit in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is a list of the IDs, the author of the commit, the date of the
    commit, and the commit message, as shown in *Figure 6.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: Reviewing the history of commits in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that Visual Studio differentiates between those commits that are already
    on the server (under **Local History**) and those that have not yet been pushed
    (under **Outgoing**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add just three more commits. If you followed along, then you are as
    stuck as I am with `Music` outside of any namespace. Let''s fix that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now drag `Music.cs` out of the solution and into the project, and you will thus
    have fixed my error. This is an easy error to make when grabbing a solution from
    a repository using Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Commit these changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can make an instance of `Music` inside `Program.cs` and commit that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now use the **Git** menu in Visual Studio to see the entire commit history:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.10: Returning to Visual Studio to see the entire commit history'
  prefs: []
  type: TYPE_NORMAL
- en: 'We should see the same information in our log from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.11: Using the log to see the commit history'
  prefs: []
  type: TYPE_NORMAL
- en: Using interactive rebase to clean up your commits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us suppose that we do not want the three commits of name, artist, and release
    date to appear as separate commits, cluttering up the history. This is where interactive
    rebase comes in. We need only to count the number of commits down to one or two
    past the `Add Name property`. Let''s say we decide on `7`. We can then enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Git will respond with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'and it will open Visual Studio Code as shown in *Figure 6.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.12: Waiting for your editor to open'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now comes the fun part. For each line, we have a number of options:'
  prefs: []
  type: TYPE_NORMAL
- en: Leave pick, which will just keep the commit as is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squash – the one we want, explained below
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop – leave that commit out – erase it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Label – label chosen commit(s) with a label (see *Chapter 6*, *Using the Log*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also re-order your commits if that is somehow helpful to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do what we set out to do, squash the release, name, and artist into
    the commit above (create the `music` class). With Visual Studio Code make the
    changes shown in *Figure 6.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.13: Inside the editor for an interactive rebase'
  prefs: []
  type: TYPE_NORMAL
- en: Notice we are set to squash the release date into the artist (making them one
    commit), then squash that commit into Name, and then take all of that and squash
    it into the `music` class. This will make one commit out of the four.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the file; Git comes back and re-opens the file and offers to allow you
    to fix up the messages. It starts by showing you what messages you had, as shown
    in *Figure 6.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: The history of the messages'
  prefs: []
  type: TYPE_NORMAL
- en: You can now choose your message (and edit it as well) leaving out or including
    the previous messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will choose one meaningful message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: Choosing the messages you want to keep'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice, again, that there are extensive comments at the bottom of the file
    to help you understand what is happening:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.16: Progress notes on your interactive feedback'
  prefs: []
  type: TYPE_NORMAL
- en: When we save and close this file, Git tells us that the rebase was successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you ask Git for the status at this point, you''ll get a review of where
    your rebase stands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.17: Git status after an interactive rebase'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter `git rebase ––continue` and you should see a recap and success message
    as shown in *Figure 6.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.18: Git summary of interactive rebase'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your rebase worked. Let''s look at the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.19: Log reflects the interactive rebase'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s turn back to Visual Studio and ask for a history:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.20: Looking at the modified history in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the interim commits are gone! They have been merged into **Add music
    class**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interactive rebase is both powerful and safe. It can clean up your commits
    before pushing them, making it easier for your teammates to read the history.
    If you get into trouble during the interaction with interactive rebase, you can
    enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: to return to where you were before the interactive rebase started.
  prefs: []
  type: TYPE_NORMAL
- en: I confess, I use squash all the time, and I almost never use any of the other
    options; though it is good to know they are there.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use interactive rebase to squash commits before pushing them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other options in interactive rebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The impact of squash in interactive rebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to fix up the messages for your rebased files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this challenge you will create a new project that you will clone to your
    local repository using GitHub Desktop. You will then add at least 7-8 commits.
    Finally, you'll use interactive rebase to squash some of your commits together.
    Feel free to experiment with some of the other options in interactive rebase.
  prefs: []
  type: TYPE_NORMAL
- en: For my project I'm going to create a solution that tracks the Rocky Horror Picture
    Show (a true classic).
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1, as usual, is to create the new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.21: Creating the repo'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2 is to clone to your disk; however, this time we''ll use GitHub Desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.22: Downloading the repository with GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub Desktop will be launched:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.23: Launching GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub Desktop will launch and pop up a modal dialog box asking you to confirm
    or change the repository and where you want to put it on your disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.24: Cloning to GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: 'As expected, your repository is cloned to the folder you designated, and GitHub
    Desktop is set to your repository and main branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.25: Confirming the local repository was created'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to create a project in that directory. GitHub Desktop is immediately
    populated on the left side with the files you''ve entered, and on the right side
    with the changes to the selected file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.26: Creating a project in your repository directory'
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to commit this, but not push it. We make the commit using the commit
    section at the bottom left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.27: Creating a commit (with a message) in GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub Desktop reconfigures to show you the current state of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.28: The state of your project, shown in GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: Following the arrows from left to right we see that there are now zero changes
    to report; this is reiterated in the headline and the third arrow points to the
    button that would push your changes to origin (which we will not do now).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the upper left-hand corner is a button that says **History**; clicking that
    brings you to your commit history, with each file added or modified in that commit
    listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.29: Your commit history in GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: There is quite a bit to see here. The highlighted commit has an up arrow offering
    to push it to origin. It also has the one-line headline from the commit, which
    is repeated on the right where you will also find the commit message. Once again,
    clicking on any of the files in that commit will show the changes in the right-hand
    window (not shown).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add commits as we have in the past. I opted to begin by creating
    a class called `Showing`, which will have properties for the location and time
    of each showing of the film in Boston for a given week:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ll commit after creating the class and each of its properties. When I''m
    done, `Showing` looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The first time I saved this file, `ShowTimes` was just a `DateTime`, but I quickly
    realized that would require an object at each location for each showtime, so I
    changed it to a list of `DateTime` objects.
  prefs: []
  type: TYPE_NORMAL
- en: '`Program.cs` ended up looking like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The first time I committed the `ShowTimes` I forgot to include midnight (horrors!).
    Let''s look at the history available in GitHub Desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.30: Commit history in GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: Before we push these, let's clean them up with an interactive rebase. We can
    combine some commits, and more interesting, we can drop the commit with just a
    single time because it is replaced with the commit that makes `ShowTimes` into
    a list.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to do so is to use the command line to bring up the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the initial state of our interactive rebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.31: Before the interactive rebase'
  prefs: []
  type: TYPE_NORMAL
- en: 'And here is where we''ll end up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.32: After the interactive rebase'
  prefs: []
  type: TYPE_NORMAL
- en: We are dropping the commit in which showtime was a `DateTime` as it is replaced
    by the next commit where `ShowTimes` is a list of `DateTime` objects. We are also
    squashing all the entries into our instance into a single commit. Once we save
    this, we will have an opportunity to fix up the messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Oops, we are notified there is a conflict:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.33: A conflict during the interactive rebase'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git offers us a number of alternatives: fix the conflict and then continue
    the rebase or skip the conflicted commit and abort the rebase. Let''s fix the
    problem by returning to GitHub Desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.34: Finding the conflict in GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that GitHub Desktop knows about the conflict too, and offers a number
    of choices:'
  prefs: []
  type: TYPE_NORMAL
- en: Open in Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open in the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open with your tool of choice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolve manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s choose to open in Visual Studio Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.35: The conflict in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio Code works hard to help you make the changes. Notice the small
    menus that allow you to accept one or the other or both changes (and it gives
    you the message on the incoming change to make sure you know what you are choosing).
    When you are done, the file looks as you intended:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and close the file. When you return to the command line, add the fixed
    file back in and then tell Git to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Visual Studio Code will open again, to allow you to fix up the commit messages.
    Save and close and Visual Studio Code will open a third time to allow you to fix
    up all your messages. Once you save and close that, much to your relief, Git will
    tell you that the rebase has succeeded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_06_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.36: Your interactive rebase worked!'
  prefs: []
  type: TYPE_NORMAL
