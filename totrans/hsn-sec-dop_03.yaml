- en: Security Assurance Program and Organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will discuss security assurance programs such as **Security Development
    Lifecycle** (**SDL**), OWASP **Software Assurance Maturity Model** (**SAMM**),
    and ISO 27001\. Then, we will talk about how security may develop with business
    growth. Furthermore, there are non-technical parts that matter to the success
    of any security program, such as the processes, guidelines, training, and roles.
    A small case study will be discussed to explain how different organization structures
    may impact the execution of a security assurance program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics to be covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Security assurance programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security growth with business
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Role of a security team in an organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case study—a matrix, functional, or taskforce structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By the end of the chapter, you will have learned about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The key parts of a security assurance program, used to rollout DevSecOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How security may grow with the business
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process, roles, and training parts in a security program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to plan a security team in an organization across business units
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security assurance program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will discuss the security assurance program by introducing some industry
    practices such as SDL, OWASP SAMM, and ISO 27001\. SDL lists security activities
    through the whole development lifecycle. OWASP SAMM explains three levels of maturity
    to apply security practices in four different functional roles. ISO 27001 is considered
    the foundation of security certification standards and gives an overview of what
    a security management program should be.
  prefs: []
  type: TYPE_NORMAL
- en: SDL (Security Development Lifecycle)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microsoft defines the **SDL (Security Development Lifecycle)** to help developers
    to build secure software. The security activities in each development phase are
    shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **MS SDL Stages** | **Security activities** |'
  prefs: []
  type: TYPE_TB
- en: '| Training |'
  prefs: []
  type: TYPE_TB
- en: Core security training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Requirements |'
  prefs: []
  type: TYPE_TB
- en: Establish security requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create quality gates/bug bars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform security and privacy risk assessments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Design |'
  prefs: []
  type: TYPE_TB
- en: Establish design requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform attack surface analysis reduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use threat modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Implementation |'
  prefs: []
  type: TYPE_TB
- en: Use approved tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecate unsafe functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform static analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Verification |'
  prefs: []
  type: TYPE_TB
- en: Perform dynamic analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform fuzz testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct attack surface review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Release |'
  prefs: []
  type: TYPE_TB
- en: Create an incident response plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct final security review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certify, release, and archive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Response | Execute incident response plan |'
  prefs: []
  type: TYPE_TB
- en: Although there is a mature SDL process that an organization can follow or refer
    to, the key to these security practices and their execution is how to make these
    security practices part of developer, QA or development team daily tasks. In addition,
    for any security program to be successful, it must be tailored to business needs
    and to support the business's success.
  prefs: []
  type: TYPE_NORMAL
- en: Take a developer's routine daily tasks as an example—he needs to understand
    the business and functional requirements to do the design, apply appropriate third-party
    modules, code, debug, troubleshoot, and locally compile/build for verification.
    It's lots of work just to finish the functions to meet a project deadline. The
    activity of secure coding takes more than 100+ secure coding rules. It's a big
    challenge for any developer to be an expert or even be aware of all the coding
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in most cases, the adoption of proper tools will greatly help. If
    the developer is using Eclipse as the main source code editor, then it's recommended
    you have secure coding tools as part of the Eclipse plug-in. Depending on the
    programming language and IDE, the security and development team may put together
    a plan involving how security tools can help and be built into the development
    of daily tasks. A secure coding guideline is still a must; however, the most effective
    and efficient way to implement secure coding is to provide an easy-to-use tool
    for every developer—to be parts of his/her daily tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The same situations also apply to QA or IT DevOps teams. It's a challenge to
    require every QA or IT team to be familiar with all security testing or hardening
    practices. The best approach is also to provide related automation security tools
    to do the job.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP SAMM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OWASP SAMM categorizes security practices into four key business functions—governance,
    construction, verification, and operations. It''s a very practical guide for any
    organization to follow for self-assessment of the security maturity level. Microsoft
    SDL defines security practices during the development process while OWASP SAMM
    defines security practices based on business functions and the four levels of
    security maturity:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Business functions** | **Security practices** |'
  prefs: []
  type: TYPE_TB
- en: '| Governance |'
  prefs: []
  type: TYPE_TB
- en: Strategy and metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policy and compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Education and guidance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Construction |'
  prefs: []
  type: TYPE_TB
- en: Threat assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Verification |'
  prefs: []
  type: TYPE_TB
- en: Design review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operations |'
  prefs: []
  type: TYPE_TB
- en: Issue management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment Hardening
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operational enablement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the organization, the business function or the boundary between
    construction, verification, and operations may vary; OWASP SAMM 12 security practices
    are considered the minimum in a DevOps environment. If we map the business organization
    functions to the OWASP SAMM, it may look like the following diagram. There is
    a CSO, which manages the whole security program: the development team manages
    software application construction, the security testing team verification, and
    the IT or operation team application operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Security guidelines and processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After looking at the industry practices, SDL, OWASP SAMM, and ISO 27001, it''s
    normally the CSO or CTO security office''s job to define the security governance
    program and the security guidelines. The following table shows an overview of
    security guidelines. In practice, these security guidelines are templates, suggested
    centrally and updated in a security knowledge base for every project team to refer
    to. Again, guidelines won''t be effective if these guidelines aren''t able to
    be part of a developer, QA, IT, or DevOps''s daily tasks. Providing tools with
    built-in security practices for DevOps teams is still key to the success of DevSecOps.
    The following table suggests some industry practices and tools that may apply
    to security guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ** Phases** | **Guidelines, templates, checklist, toolkits** | **Industry
    practice reference** |'
  prefs: []
  type: TYPE_TB
- en: '| Security training |'
  prefs: []
  type: TYPE_TB
- en: Security awareness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security certification program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case study knowledge base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Top common issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Penetration learning environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP top 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CWE top 25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP VWAD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Security maturity assessment |'
  prefs: []
  type: TYPE_TB
- en: Microsoft SDL, OWASP SAMM self-assessment for maturity level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft SDL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP SAMM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Secure design |'
  prefs: []
  type: TYPE_TB
- en: Threat modeling templates (risks/mitigation knowledge base)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security requirements for release gate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security design case study
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy protection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP ASVS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NIST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy risk assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Secure coding |'
  prefs: []
  type: TYPE_TB
- en: Coding guidelines (C++, Java, Python, PHP, Shell, Mobile)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure coding scanning tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common secure coding case study
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: CWE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure coding CERT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Security testing |'
  prefs: []
  type: TYPE_TB
- en: Secure compiling options such as Stack Canary, NX, Fortify Source, PIE, and
    RELRO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security testing plans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security testing cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Known CVE testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Known secure coding issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API-level security testing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation testing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuzz testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitation and penetration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security compliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CIS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Secure deployment |'
  prefs: []
  type: TYPE_TB
- en: Configuration checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardening guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication ports/protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code signing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: CIS Benchmarks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Incident and vulnerability handling |'
  prefs: []
  type: TYPE_TB
- en: Root cause analysis templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incident handling process and organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: NIST SP800-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Security training |'
  prefs: []
  type: TYPE_TB
- en: Security awareness by email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case study newsletter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toolkit usage hands-on training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security certificate and exam
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: NIST 800-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NIST 800-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SAFECode security engineering training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Security growth with business
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on the business's development status, the needs and implementation
    of security may be subject to the business's objectives and environment. A start-up
    company may leverage external cloud services and out-of-the-box security services
    to protect services and data. A multi-million dollar cloud service company may
    self-build and customize security services based on its own business needs, and
    even share the security technology, making it open source. Let's discuss how business
    growth in different stages may be related to the scope of security practices.
  prefs: []
  type: TYPE_NORMAL
- en: Stage 1 – basic security control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this stage, we may be dealing with a start-up company. No dedicated security
    team is part of the IT team. Most security controls are adopted from cloud services,
    such as AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the cloud service may provide security services, it''s still the user''s
    responsibility to protect the application and data. Therefore, the following are
    critical for the security assurance program at this stage. Take AWS service practices
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: Leverage third-party cloud service provider security mechanisms (for example,
    AWS provides IAM, KMS, security groups, WAF, Inspector, CloudWatch, and Config)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure configuration replies on external tools such as AWS Config and Inspector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service or operation monitoring may apply to AWS Config, Inspector, CloudWatch,
    WAF, and AWS shield
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There may still be no skilled secure coding developers or penetration testers
    in the organization. Mostly the team still relies on external tools and services
    for security practices.
  prefs: []
  type: TYPE_NORMAL
- en: Stage 2 – building a security testing team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this stage, the business is getting stable and mature. The organization may
    set up a security testing team who is in charge of application security verification
    before release and continuous environment vulnerability monitoring. The development
    team may heavily rely on the security testing team for security defects and issues.
    The development team is only focused on the business's functional development,
    and not yet involved with the secure design or secure coding.
  prefs: []
  type: TYPE_NORMAL
- en: Dedicated security testing may start to use some security automation testing
    or open source monitoring tools. Developers are learning secure coding through
    identified security defects case by case, and still haven't adopted any formal
    process for threat modeling, design or architecture security review. The team
    is at the beginning of shifting security to the left.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this stage, the in-house security team may try to investigate or use parts
    of open source security tools. The following table shows typical security toolkits
    that you may consider applying:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Category** | **Opensource tool name** |'
  prefs: []
  type: TYPE_TB
- en: '| Vulnerability assessment |'
  prefs: []
  type: TYPE_TB
- en: NMAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenVAS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Static security analysis |'
  prefs: []
  type: TYPE_TB
- en: FindBugs for Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brakeman for Ruby on Rails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infer for Java, C++, Objective C and C
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cppcheck or Flawfinder for C/C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Web security |'
  prefs: []
  type: TYPE_TB
- en: OWASP dependency check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP ZAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archni-Scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLMap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: w3af
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Communication |'
  prefs: []
  type: TYPE_TB
- en: Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NCAT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSLScan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sslyze
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Infrastructure security |'
  prefs: []
  type: TYPE_TB
- en: OpenSCAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InSpec
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| VM Toolset |'
  prefs: []
  type: TYPE_TB
- en: Pentest Box for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile Security Testing Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Security monitoring |'
  prefs: []
  type: TYPE_TB
- en: ELK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MISP—Open source Threat Intelligence Platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OSSCE—Open source HIDS Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facebook/osquery—performant endpoint visibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AlienValut OSSIM—opensource SIEM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Stage 3 – SDL activities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As software service delivery becomes more large-scale and frequent, the need
    for a secure development lifecycle becomes critical. In this stage, the key objective
    is to build security practices into the development and operation teams.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key differences and newly introduced security practices in this stage are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Security shifts to the left and involves every stakeholder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architect and design review is required to do threat modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers get secure design and secure coding training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operation and development teams are as a closed-loop collaboration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adoption of industry best practices such as OWASP SAMM and Microsoft SDL for
    security maturity assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are be some learning curves or even resistance when applying the SDL.
    After all, these security practices will bring in additional efforts for the team.
    In the initial SDL implementation stage, adequate training and communication are
    necessary. Allow some time for the team to become familiar with security practices
    and tools. Make it a fun learning journey.
  prefs: []
  type: TYPE_NORMAL
- en: The adoption of tools to bake security into DevOps is critical. Making security
    tools (threat modeling, secure coding, security framework) easy to use for developers
    is the key to shifting security to the left in the development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Stage 4 – self-build security services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this stage, the company not only has its own security testing and monitoring
    team but also develops and tailors its own security services such as a **web application
    firewall** (**WAF**) and intrusion detection. Furthermore, the company may even
    contribute some security tools or services to the open source community. The security
    assurance program covers not only the company itself but also the partners or
    the ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Take Salesforce as an example—the Salesforce Developer Center portal provides
    security training modules, coding, implementation guidelines, tools such as assessment
    tools, code scanning, testing or CAPTCHA modules, and also a developer forum.
    Whether you are building an application on top of salesforce or not, the Salesforce
    Developer Center is still a good reference not only for security knowledge but
    also for some open source tools you may consider applying.
  prefs: []
  type: TYPE_NORMAL
- en: Stage 5 – big data security analysis and automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This stage in security is not only about detection of a known threat but also
    using the cloud, big data analysis, and machine learning to prevent unknown threats
    and to enable the system to take proactive protection action. Key characteristics
    at this stage are:'
  prefs: []
  type: TYPE_NORMAL
- en: Fully or mostly automated security testing through the whole development cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying big data analysis and machine learning to identify abnormal behavior
    or unknown threats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proactive security action is taken automatically for security events, for example,
    the deployment of WAF rules or the deployment of a virtual patch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Typical open source technical components in big data analysis frameworks include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Flume, Log Logstash, and Rsyslog for log collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kafka, Storm, or Spark for log analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis, MySQL, HBase, and HDFS for data storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kibana, ElasticSearch, and Graylog for data indexing, searching, and presentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The key stages in big data security analysis are explained in the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Stage** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Data collection | Collects logs from various kinds of sources and systems
    such as firewalls, web services, Linux, networking gateways, endpoints, and so
    on. |'
  prefs: []
  type: TYPE_TB
- en: '| Data normalization | Sanitizes or transforms data formats into JSON, especially,
    for critical information such as IP, hostname, email, port, and MAC. |'
  prefs: []
  type: TYPE_TB
- en: '| Data enrich/label | In terms of IP address data, it will further be associated
    with GeoIP and WhoIS information. Furthermore, it may also be labeled if it''s
    a known black IP address. |'
  prefs: []
  type: TYPE_TB
- en: '| Correlation | The correlation analyzes the relationship between some key
    characteristics such as IP, hostname, DNS domain, file hash, email address, and
    threat knowledge bases. |'
  prefs: []
  type: TYPE_TB
- en: '| Storage | There are different kinds of data that will be stored—the raw data
    from the source, the data with enriched information, the results of correlation,
    GeoIP mapping, and the threat knowledge base. |'
  prefs: []
  type: TYPE_TB
- en: '| Alerts | Trigger alerts if threats were identified or based on specified
    alerting rules. |'
  prefs: []
  type: TYPE_TB
- en: '| Presentation/query | Security dashboards for motoring and queries. ElasticSearch,
    RESTful API, or third-party SIEM. |'
  prefs: []
  type: TYPE_TB
- en: A typical big data security analysis framework is shown in the following diagram,
    or you can refer to the open source Apache Metron framework: [https://cwiki.apache.org/confluence/display/METRON/Metron+Architecture](https://cwiki.apache.org/confluence/display/METRON/Metron+Architecture).
  prefs: []
  type: TYPE_NORMAL
- en: 'The big data security analysis conceptual architecture is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Role of a security team in an organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The role and job scope of a security team also depend on the stage of the business.
    It can be part of the IT team at the beginning; a dedicated security team for
    infrastructure security monitoring, moving toward a specialized security function
    team for security tool development and security policy management; or a security
    testing team, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at two kinds of typical scenario to discuss the role and the scope
    that an organization may have. One is the security engineering team under a CTO,
    and the other is a dedicated CSO with full, specialized functions of a security
    team.
  prefs: []
  type: TYPE_NORMAL
- en: Security office under a CTO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a typical organization structure with the security engineering team
    under the CTO office. There are some characteristics of this kind of organization
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: No dedicated **Chief Security Officer** (**CSO**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security team may not be big—for example, under 10 members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security engineering team serves all projects based on their needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key responsibility of the security engineering team is to provide security
    guidelines, policies, checklists, templates, or training for all project teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's possible the security engineering team members may be allocated to a different
    project to be subject matter experts based on the project's needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security engineering provides the guidelines, toolkits, and training, but it's
    the project team that takes on the main responsibility for daily security activity
    execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The disadvantage of this kind of team structure is that the security engineering
    team may not be able to fully dedicate itself to projects due to limited security
    members. After all, the security will work the best to tie in with business more
    closely, and to understand the challenges of the engineering team more deeply.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows how the CTP manages the team on a project basis,
    and how the security engineering team reports to the CTO directly to support them
    and ensure security practices for all projects and architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Dedicated security team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the business grows, the organization may set up an official CSO role with
    more dedicated security functional teams such as a security management team, security
    testing, security engineering, security monitoring, and security services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security management**: The team defines the security guidelines, process,
    policies, templates, checklist, and requirements. The role of the security management
    team is the same as the one previously discussed in the *Security office under
    a CTO* section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security testing**: The team is performing in-house security testing before
    application release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security engineering**: The team provides a common security framework, architecture,
    SDK, and API for a development team to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security monitoring**: This is the security operation team, who monitor the
    security status for all online services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security services**: This is the team that develops security services such
    as WAF and intrusion deference services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes, it can be a mixed structure. For example, there is still no dedicated
    CSO, but the security testing team and security management team report to the
    CIO. It all depends on the business objective and the stage of the business needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'This kind of security team structure includes most security functions. However,
    there is a similar issue to the previous one. We would like security built-in
    with the project and practices. This will require deep involvement with the project
    team and a clear understanding of each project business flow. That''s why we would
    like to discuss another matrix style of organization structure in the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Case study – a matrix, functional, or taskforce structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: John, the CSO of a cloud software application provider, is planning the security
    team structure in an organization. The existing security team consists of a secure
    design team, a secure coding team, and a testing team. The secure design team
    is in charge of threat modeling, the secure framework, and secure design guidelines.
    The secure coding team is providing secure coding tools and a checklist for development
    teams. The secure testing team is doing security verification for every service
    release. On the other hand, the CSO, Peter, manages the software development team
    (including developers, QA, and operation members).
  prefs: []
  type: TYPE_NORMAL
- en: Both Peter and John know security is an expert knowledge and that is better
    to have a dedicated security team to allow the security knowledge to apply across
    projects and also to enable members to increase their security skills. On the
    other hand, they also know security must tie with business and existing software
    development teams. Therefore, they are going through two main stages—the security
    resource pool stage followed by the security technical committee stage.
  prefs: []
  type: TYPE_NORMAL
- en: Security resource pool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The key advantage to keeping security members within one dedicated security
    team is to allow security knowledge sharing across projects and be able to deliver
    tools or best practices for the whole organization. However, for security practices
    to bake into DevOps practices requires a certain level of involvement for DevOps
    and security teams. Therefore, the CTO lists the all-year project plan for the
    CSO as a reference to plan the security team''s involvement with projects. The
    CSO allocates security members to participate in different projects. The security
    members dot line report to the project manager during the period of a project
    assignment. It works for a while but there are some issues under this kind of
    organization structure:'
  prefs: []
  type: TYPE_NORMAL
- en: The project team may rely heavily on security team involvement. For example,
    developers may still have little knowledge of secure coding because the security
    team has been doing most jobs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the business and project grow, security team members may own several projects
    at a time, and not be able to handle all the security details for every project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, John and Peter realize the situation and would like the existing
    DevOps team to involve more security tasks, while the role of the security team
    may be more like security consultants.
  prefs: []
  type: TYPE_NORMAL
- en: Security technical committee (taskforce)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the project team is getting large, and the number of projects is also rapidly
    growing. John and Peter decide to form a security technical committee, which is
    a virtual taskforce team to encourage team involvement in security and also to
    enable security knowledge sharing across projects. They form three taskforce teams—**secure
    design**, **secure coding**, and the **secure testing taskforce team**. Take the
    secure design taskforce team as an example—the team consists of one or several
    secure design experts from the security team, and also a developer representative
    from every project team. The developer representative is like a security champion
    of the project team. He will join in the security discussion with the task force
    and take security practices or guidelines back to the project team. The secure
    design taskforce will have a weekly meeting with all security representatives—from
    all project teams—and security experts from the security team to discuss the following
    topics (not an exhaustive list):'
  prefs: []
  type: TYPE_NORMAL
- en: Common secure design issues and mitigation (initiated by security team)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure design patterns for a project to follow (initiated by security team)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure design framework suggestions for projects (initiated by security team)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific secure design issues raised by one project and looking for advice on
    other projects (initiated by project team)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure design review assessment for one project (initiated by project team)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The structure of the security taskforce team between the developer and security
    teams is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There is no perfect security organization structure. It's a question of a better
    fit with existing business needs and practices. For any security team structure,
    the most important thing is to understand the objective of the business goal.
    Setting up a virtual taskforce team may supplement any existing official team
    structure since the taskforce allows security knowledge to be shared across projects.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed three typical security assurance programs. The
    SDL focused on the security activities in each development stage. The OWASP SAMM
    defined security activities in four different functions. The ISO 27001 provided
    an overview of the security management program. These are the foundations on which
    we can build our own security guidelines, process, checklist, or toolkits.
  prefs: []
  type: TYPE_NORMAL
- en: As a business grows, the need and the scope of security gets complicated. We
    divided security growth into five stages. In stage one, we began with the basic
    need for security control. In stage two, an organization may build its own in-house
    security testing team. In stage three, the security activities apply SDL to the
    larger scope and shift to the left—to the development team—in the early design
    stage. In this stage, most security tools or automation are applied not only to
    testing but also to the development and operation teams. In stage four, instead
    of purchasing security services, the security team started to build security services,
    such as WAF, or intrusion detection, that better to fit business needs. In stage
    five, the team use big data analysis to prevent unknown threats.
  prefs: []
  type: TYPE_NORMAL
- en: Since security ties in with every business stakeholder, the roles and security
    teams in an organization structure were also discussed. There is no perfect organization
    structure, only the best fit based on business needs and also the culture. After
    all, there are critical non-technical things to consider for the adoption of any
    security program.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Does Microsoft SDL stand for Security Development Lifecycle?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: According to SDL, what activities should be done during the design stages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Establishing design requirements
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Performing attack surface analysis reduction
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: User threat modeling
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In OWASP SAMM, what security practice is not part of security governance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security and metrics
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Education and guidance
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Secure architecture
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Policy and compliance
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In OWASP SAMM, which security practice is not part of security operations?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Issue Management
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Security requirements
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Environment hardening
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Operational enablement
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is not one of the characteristics of the security office under CTO?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Large security team size—over 100 members
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: No dedicated CSO
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The security team serves all projects
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The security team may not be able to fully involve project teams
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Microsoft Security Development Lifecycle**: [http://www.microsoft.com/en-us/SDL/](http://www.microsoft.com/en-us/SDL/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP SAMM Project**: [https://www.owasp.org/index.php/OWASP_SAMM_Project](https://www.owasp.org/index.php/OWASP_SAMM_Project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CWE/SANS Top 25 Most Dangerous Software Errors**: [https://cwe.mitre.org/top25/](https://cwe.mitre.org/top25/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OWASP Vulner****able Web Applications Directory Project**: [https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project](https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CERT Secure Coding Standards**: [https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards](https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST Special Publication 800-53**: [https://nvd.nist.gov/800-53](https://nvd.nist.gov/800-53)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAFECode Security White Papers**: [https://safecode.org/publications/](https://safecode.org/publications/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Threat Modeling tool 2016**: [https://aka.ms/tmt2016/](https://aka.ms/tmt2016/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Salesforce Developer Center**: [https://developer.salesforce.com/devcenter/security](https://developer.salesforce.com/devcenter/security)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Metron for real-time big data security**: [http://metron.apache.org/documentation/](http://metron.apache.org/documentation/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Introducing OCTAVE Allegro: Improving the Information Security Risk Assessment
    Process**: [https://resources.sei.cmu.edu/asset_files/TechnicalReport/2007_005_001_14885.pdf](https://resources.sei.cmu.edu/asset_files/TechnicalReport/2007_005_001_14885.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-18 Guide for Developing Security Plans for Federal Information Systems**: [http://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-18r1.pdf](http://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-18r1.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ITU-T X.805 (10/2003) Security architecture for systems providing end-to-end
    communications**: [https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.805-200310-I!!PDF-E&type=items](https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.805-200310-I!!PDF-E&type=items)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ETSI TS 102 165-1 V4.2.1 (2006-12) : Method and proforma for Threat, Risk,
    Vulnerability Analysis**: [http://www.etsi.org/deliver/etsi_ts/102100_102199/10216501/04.02.01_60/ts_10216501v040201p.pdf](http://www.etsi.org/deliver/etsi_ts/102100_102199/10216501/04.02.01_60/ts_10216501v040201p.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAFECode Fundamental Practices for Secure Software Development**: [https://safecode.org/wp-content/uploads/2018/03/SAFECode_Fundamental_Practices_for_Secure_Software_Development_March_2018.pdf](https://safecode.org/wp-content/uploads/2018/03/SAFECode_Fundamental_Practices_for_Secure_Software_Development_March_2018.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-64 Security Considerations in the System Development Life Cycle**: [https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-64r2.pdfhttps://csrc.nist.gov/publications/detail/sp/800-64/rev-2/final](https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-50 Building an information technology security awareness and training
    program**: [https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-50.pdf](https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-50.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CIS Security Benchmark**: [https://www.cisecurity.org/cis-benchmarks/](https://www.cisecurity.org/cis-benchmarks/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST 800-16 Information Technology Security Training Requirements**: [https://csrc.nist.gov/publications/detail/sp/800-16/final](https://csrc.nist.gov/publications/detail/sp/800-16/final)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAFECode Security Engineering Training**: [http://safecode.org/publication/SAFECode_Training0409.pdf](http://safecode.org/publication/SAFECode_Training0409.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A Hybrid Threat Modeling Method**: [https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=516617](https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=516617)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft SDL tools** [https://www.microsoft.com/en-us/SDL/adopt/tools.aspx](https://www.microsoft.com/en-us/SDL/adopt/tools.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
