- en: '*Chapter 7*: Automating Jira Software Projects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tracking software development tasks and bugs is arguably what Jira is most well-known
    for; however, it has always come with administrative overhead in keeping issues
    aligned and ensuring that work across projects is synchronized.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping on top of the administrative tasks in Jira can be frustrating at times
    and usually means that less time can be devoted to actual development work. Introducing
    automation can help cut down on many of the manual tasks, which leads to happier
    and more productive team members.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to harness automation rules to provide simple
    yet effective productivity increases in Jira Software projects, such as how to
    keep versions synchronized across projects.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also see how aligning the statuses of an issue hierarchy using automation
    can reduce a number of otherwise manual interactions and increase the efficiency
    of working with issues in a software project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing versions across projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring epics and stories stay aligned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the scope of a sprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira cloud environment**: If you don''t already have access to Jira, you
    can create a free Jira cloud account at [https://www.atlassian.com/software/jira/free](https://www.atlassian.com/software/jira/free)
    and ensure that you have both **Jira Software** and **Jira Service Desk** selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jira server environment**: If you are using Jira Server (available from [https://www.atlassian.com/software/jira/download](https://www.atlassian.com/software/jira/download)),
    ensure you have licenses for both Jira Software and Jira Service Desk. In addition,
    you will also need to ensure that you install the *Automation for Jira* app, available
    from the Atlassian Marketplace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In both instances, you will need to have at least **Project Administrator**
    access to a Service Desk project and a Scrum software project to be able to follow
    the examples in this chapter. For the examples in this chapter, we have used the
    *IT service management project template* to create the Service Desk project and
    the *Scrum software project template* to create the Software project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the latest code samples for this chapter from this book''s
    official GitHub repository at [https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira](https://github.com/PacktPublishing/Automate-Everyday-Tasks-in-Jira).
    Please visit the following link to check the CiA videos: https://bit.ly/3quqjil'
  prefs: []
  type: TYPE_NORMAL
- en: Managing versions across projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common use case with Jira Software projects is to have a public-facing project
    where your customers can log defects and feature requests against released software,
    and an internal project that is used by the development team to track their work.
  prefs: []
  type: TYPE_NORMAL
- en: Having this setup allows teams to triage incoming requests and select relevant
    issues to work on without clogging up their actual project with thousands of issues.
  prefs: []
  type: TYPE_NORMAL
- en: However, realizing the benefits from this setup requires that the software versions
    in both projects are synchronized, allowing customers to report issues against
    the correct versions of the released software.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore how to use automation rules to manage the version
    synchronization between projects.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we will need to ensure that when we release a version in the internal
    project, we create a corresponding version in the public-facing project that customers
    can then use when reporting bugs or creating feature requests.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a rule that enables us to keep versions in sync across
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to keep versions in sync across projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll create a rule that will trigger for version releases
    in our internal project and create and release a corresponding version in the
    public-facing project that customers can then use when reporting issues.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Creating automation rules that span multiple projects requires the user to create
    the rule to have Jira administrator permissions. Project administrators are not
    permitted to create multi-project rules.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are going to use two software projects in our rule. For
    the first software project, we will create a project using the Scrum software
    template named *My Application* with the project key *MAPP*. For the public-facing
    support project, we will create a project using the bug tracking software template
    named *My Application Support* with the project key *MAPS*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how to build this rule:'
  prefs: []
  type: TYPE_NORMAL
- en: As we are working with more than a project, this rule needs to be set up by
    a user with Jira administrator permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Settings** (the cog icon in the top menu), select **System**,
    click on the **Automation rules** tab in the left menu, and then click on **Create
    rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Version released** trigger and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As both projects configured in this rule can cause this rule to fire, we need
    to ensure that it only continues executing when the MAPP project causes it to
    fire. To do this, select `{{version.project.key}}`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`MAPP`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, select `{{version.name}}` smart value to select the name of the version
    that caused the rule to fire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **More options** disclosure and select your application support project
    in the **Project** field. In the case of this example, it is **My Application
    Support (MAPS)**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `{{version.name}}` smart value to ensure the correct version is released.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click `Keep support project versions in sync`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `Multiple projects`, and in the `My Application` and `My Application
    Support`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, click **Save**, and then click **Turn it on** to publish and enable
    the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have learned how to use automation rules to keep versions
    synchronized across multiple projects, enabling customers to raise bugs and features
    outside of the development project.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will look at how to ensure that the status of epics
    in a software project stays aligned to the underlying stories in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring epics and stories are aligned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working in software projects using the **Scrum Agile framework** generally involves
    having a hierarchy of issue types.
  prefs: []
  type: TYPE_NORMAL
- en: In a typical Scrum-based agile hierarchy, you will have epics that define larger
    pieces of work, or business requirements, which may span multiple sprints.
  prefs: []
  type: TYPE_NORMAL
- en: These are broken down into stories (or user stories), which are high-level definitions
    of the requirements that can be delivered in a time-boxed period or sprint.
  prefs: []
  type: TYPE_NORMAL
- en: Stories can then be decomposed into tasks, modeled as sub-tasks of the story,
    which are specific, measurable items of work required to get the story done.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll look at how we can use automation rules to keep the statuses
    of the issues in this hierarchy in sync so that when work is started on a sub-task,
    the linked issues above the sub-task move to the correct status without needing
    manual intervention.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to keep epics and stories synchronized
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll create a rule that triggers when a sub-task is transitioned
    to a new status, and depending on the status of the sub-task, the rule will automatically
    transition its parent story to the correct status if required.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we'll use the same rule to transition the epic linked to the story
    to the correct status when the story transitions to a new status, so we'll need
    to allow the rule to be triggered by other rules.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Allowing rules to be triggered by other rules can inadvertently lead to execution
    loops where a rule could be triggered indefinitely. The automation rule engine
    includes loop detection to prevent infinite loops; however, an incorrectly configured
    rule could still cause an execution loop up to a depth of 10 levels before the
    rule execution is terminated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at this rule now:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Software project, navigate to **Project settings**, click on the
    **Automation** link in the project settings menu, and then click **Create rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Issue transitioned** trigger and click **Save**. Leave both the
    **From status** and **To status** fields blank as we want the rule to fire for
    every transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first thing we want to check is whether progress has started on a sub-task
    and move its parent story to `issueType = Sub-task AND statusCategory = "In Progress"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select **Branch rule / related issues**, and in the **Type of related issues**
    field, select **Parent** and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select **New action** followed by **Transition issue**. For this example,
    ensure that the **Destination status** field is set to **Copy from trigger issue**,
    and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next stage of the rule is to ensure the user story transitions to a completed
    status when all of its sub-tasks are done. To do this, click on `issueType = Sub-task
    AND statusCategory = Done`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **Branch rule / related issues**, and again, in the **Type of related
    issues** field, select **Parent**, and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we need to check that all the sub-tasks for the parent issue
    selected in the `Sub-tasks`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`All match specified JQL`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`statusCategory = Done`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the condition mentioned in *step 8* matches and all sub-tasks of the story
    have a status whose category is done, then we need to transition the story itself
    to a done status. To do this, select **New action** followed by **Transition issue**
    and ensure the **Destination** field is set to **Copy from trigger issue**, and
    then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you use **Copy from trigger issue** for statuses, you need to ensure that
    both issue types use the same workflow or that the workflows share the same statuses.
    If this is not the case, you will need to select the actual status you wish to
    transition to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've handled keeping the story in sync with its sub-tasks, we need
    to handle keeping epics in sync with their underlying stories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we'll handle moving epics to `issueType = Story AND status = "In Progress"`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, select **Branch rule / related issues**, and in the **Type of related
    issues** field, select **Epic (parent)** and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **New action**, and then select **Transition issue**. Make sure
    the **Destination** field is set to **Copy from trigger issue** for this example,
    and then click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final conditional branch in this rule will ensure that an epic is automatically
    transitioned to a completed status when all of its underlying stories are complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do this by clicking `issueType = Story AND statusCategory = Done`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, select `Epic (parent)` and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like we did for sub-tasks, we need to ensure that all the stories in the epic
    are completed before we can automatically transition the epic to a completed status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We do this by selecting `Stories (or other issues in this Epic)`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`All match specified JQL`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`statusCategory = Done`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To actually transition the epic, we need to add an action, so select **New action**
    followed by **Transition issue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Destination** field is set to **Copy from trigger issue**
    for this example, and then click **Save**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: One of the requirements for this rule is that it is able to fire itself to ensure
    that all issues in the hierarchy are updated to the correct status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to achieve this, we need to set the rule option that allows rules to
    be triggered by other rules.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Rule details** in the rule-chain view on the left. In the **Name**
    field, set the name of the rule to **Keep issue hierarchy statuses in sync** and
    ensure that the **Allow rule trigger** checkbox is selected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your rule should look similar to the following two screenshots:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Rule to keep epics and stories in sync (part 1)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_7.2.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.2 – Rule to keep epics and stories in sync (part 1)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding screenshot, we can see the rule details and the first part
    of the rule chain dealing with keeping stories in sync with sub-tasks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Keeping epics and stories in sync (part 2)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_7.3.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.3 – Keeping epics and stories in sync (part 2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this screenshot, we can see the second part of the rule chain, which deals
    with keeping epics in sync with their underlying user stories.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, click **Save**, and then click **Turn it on** to save and publish the
    rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have learned how to use automation rules to keep a hierarchy
    of issues in sync with each other and how we can allow a rule to trigger itself
    in order to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll take a look at how we can automatically adjust the
    scope of a sprint by adding linked issues into the current sprint as well as notify
    the team when the scope of a sprint is changed.
  prefs: []
  type: TYPE_NORMAL
- en: Managing the scope of a sprint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During any development life cycle, it is inevitable that at some point there
    will be a change to the scope of the sprint, either due to last-minute changes
    to the requirements or by the need to include an urgent bug fix.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll firstly look at how we can change the scope of a sprint
    by including a newly linked issue to the sprint.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also look at how we can use automation rules to monitor the sprint and
    notify the team when the scope changes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to add a linked issue to the sprint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we are going to make use of the fact that we have both a private
    internal software development project (*My Application* with key *MAPP*) and a
    public support project (*My Application Support* with key *MAPS*) where customers
    can raise requests and report bugs.
  prefs: []
  type: TYPE_NORMAL
- en: We are also going to assume that we have a team that monitors the public support
    project and triages incoming requests.
  prefs: []
  type: TYPE_NORMAL
- en: Part of this triage involves examining high-priority bugs submitted by the organization's
    top customers and if verified, will create a linked bug in the private development
    project and add it to the current sprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can achieve this with an automation rule:'
  prefs: []
  type: TYPE_NORMAL
- en: As we are working with more than a project, this rule needs to be set up by
    a user with Jira administrator permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Settings** (the cog icon in the top menu), select **System**,
    and then click on the **Automation rules** tab in the left menu and click **Create
    rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `To Do`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`In Progress`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we need to add in some conditions to ensure we only select the highest
    priority bugs in the support project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use multiple issue field conditions in this example as they have a performance
    advantage over using a JQL condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check for the correct project by selecting `Project`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`My Application Support (MAPS)`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we'll ensure that this rule only executes for bug issue types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Issue Type`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Bug`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The last condition is to check that the bug has the highest priority.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Priority`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`is one of`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Highest`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The final step in this rule is to create the linked issue in our development
    project and add it to the current sprint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `My Application (MAPP)`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Same issue type`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`relates to`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Trigger issue`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Active Sprint (My Application Scrum Board)`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your rule should now look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Creating a linked issue in the active sprint'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_7.4.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.4 – Creating a linked issue in the active sprint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, select `Add critical bug to active sprint`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Scope** field to **Multiple projects** and in the **Restrict to projects**
    field, select your internal and support projects. In this case, we'll select **My
    Application** and **My Application Support**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, click **Save**, and then click **Turn it on** to publish and enable
    the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this example, we have learned how to use automation rules to create a linked
    issue in a project and add it to the current sprint.
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, we'll see how we can watch for scope changes to the current
    sprint and notify the development team when this occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule to notify the team when the scope changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the scope of an active sprint changes, we want to keep the team informed
    so that everyone on the team is kept abreast of what is happening.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we'll create a rule that listens for a change in the **Sprint**
    field of an issue and if that sprint is currently the active sprint, we'll send
    a notification to our team's Slack channel.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we'll send notifications to the **#sprint-updates** Slack
    channel using the Slack integration that we set up in [*Chapter 4*](B16551_04_Final_ASB_ePub.xhtml#_idTextAnchor080),
    *Sending Automated Notifications*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how this rule works:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira Software project, navigate to **Project settings**, click on the
    **Automation** link in the **Project Settings** menu, and then click **Create
    rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As there is no direct way to monitor changes to the active sprint, we'll instead
    set our rule to trigger when the **Sprint** field in an issue is changed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To do this, we'll select the **Field value changed** trigger. In the **Fields
    to monitor for changes** dropdown, select **Sprint**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Leave the **For** field blank that corresponds to **All issue operations**,
    and click **Save**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We need to ensure that the sprint that the issue was added to corresponds with
    the currently active sprint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can achieve this by selecting `sprint in openSprints()`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we'll select `#sprint-updates`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your rule should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Monitoring scope changes to a sprint'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16551_Figure_7.5.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.5 – Monitoring scope changes to a sprint
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also need to ensure that this rule can be triggered by other automation rules;
    otherwise, scope changes created by other rules will not cause notifications to
    be sent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Rule details** in the rule-chain view on the left. In the **Name**
    field, set the name of the rule to **Send notification to Slack when Sprint scope
    changes** and ensure that the **Allow rule trigger** checkbox is selected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, click **Save**, and then click **Turn it on** to publish and enable
    the rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have learned in this example how we can use the sprint field in an issue
    to monitor scope changes of a sprint and keep the team informed of these changes.
  prefs: []
  type: TYPE_NORMAL
- en: By cutting down on manual effort using automation to keep issues synchronized
    and teams updated, you will enable your teams to be more efficient as they no
    longer need to manage the project tool and can instead focus on their actual tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how we can use automation rules to minimize the
    administrative overhead usually involved in managing and working with Jira Software
    projects, and indeed these can be applied to most project types within Jira.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, we learned how to keep versions synchronized across projects,
    which is especially useful when you have a software project spanning multiple
    Jira projects, whether they be internal team projects or, as in our example, public
    projects for customers to log and track requests.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping hierarchies of issues in sync is a very common task faced in Jira projects
    and in this chapter, we learned how to use a looping rule to achieve this using
    the most common hierarchy encountered in Jira Software projects. Lastly, we learned
    how to maintain visibility of any scope changes to a sprint and how we can also
    use automation to adjust the scope of a sprint.
  prefs: []
  type: TYPE_NORMAL
- en: With the exception of the sprint-specific examples we have looked at, the topics
    we have covered in this chapter apply equally to any other style of software development,
    including Kanban and waterfall, with some minor adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: Applying what we have learned in this chapter to your projects using automation
    will help reduce the amount of manual and repetitive administrative work and in
    doing so will enable your users to be both more efficient and productive.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at how to leverage automation rules to integrate
    with tools such as GitHub and Bitbucket to support DevOps processes.
  prefs: []
  type: TYPE_NORMAL
