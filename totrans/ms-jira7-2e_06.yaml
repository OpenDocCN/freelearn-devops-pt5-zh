- en: Chapter 6.  Sample Implementation of Use Cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already learned about customization for test management by modifying
    JIRA's configuration as well as using the popular **Zephyr** add-on. This chapter
    will not repeat these configurations; rather, it will present sample data in order
    to create various use cases that can be implemented in JIRA. This chapter will
    cover the issue types usually required, the custom fields to add, and workflow
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: The user can take these examples as a starting point to implement something
    similar in their company. In this chapter, we will understand how to start collecting
    the requirements, and the sample use cases mentioned can be leveraged further
    to customize JIRA specific to their requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Gathering requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the JIRA configuration document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up JIRA for helpdesk/support tickets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up JIRA for requirement management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up JIRA for bug tracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in the customizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gathering requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with any other software project, treat your JIRA customization as a project
    in itself. As a JIRA administrator, you should first meet all the stakeholders
    to understand how they want to use JIRA. This usually starts with a brainstorming
    session with all the teams' managers.
  prefs: []
  type: TYPE_NORMAL
- en: When you want to start customizing JIRA, always prepare a document to store
    all the configurations that are required. Even after implementation, if any further
    changes are required, you should still update this document. This also helps a
    new administrator take charge of the JIRA instance. When all the requirements
    are stored in the configuration document, then it is much easier to track the
    changes that were done in the system. If you already have a **Confluence** instance
    running, you can use it to create these documents, which can be accessed by all
    the stakeholders. Usually, people use Confluence along with JIRA to collaborate
    on documents and share information.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the JIRA configuration document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The configuration document should have information about all the schemes, along
    with the relevant background information to justify it.
  prefs: []
  type: TYPE_NORMAL
- en: This document should have the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: What kind of issue tracking needs to be done?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, start by asking these questions: what kind of issue tracking is required
    in JIRA? Do you want to keep track of your customer complaints or track bugs in
    your ongoing project? You may be tempted to start using JIRA and customize it
    on-the-go, but this approach will lead to a messed-up system in the long run and
    will be difficult to manage.'
  prefs: []
  type: TYPE_NORMAL
- en: Issue types required
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the purpose of using JIRA is clear, identify what kinds of issue need to
    be tracked. If JIRA is going to be used for simple bug tracking, then the existing
    issue types are sufficient, but if you want to use JIRA for support tickets, then
    you might want to create new issue types.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create new issue types only when existing ones cannot be used. Always try to
    reuse issue types that are already there in the system. Too many of them can create
    confusion for not only the end user, but also the administrators.
  prefs: []
  type: TYPE_NORMAL
- en: What data needs to be captured?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Identify the information that needs to be captured while creating issues. JIRA
    comes with lots of default system fields, such as **Summary**, **Priority**, **Due
    Date**, **Description**, and more. In your case, it might be necessary to capture
    additional information from the user, such as customer name or issue category.
    Prepare a list of all the custom fields and also their type—whether they are text
    fields, select lists, or dates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Identify for which operation custom fields will be shown to the user: create,
    edit, or view. It is possible to have different screens for each operation. It
    could also be possible to have additional screens between workflow transitions;
    for instance, you may want to ask the user to fill up a feedback form before moving
    the issue to the On Hold state.'
  prefs: []
  type: TYPE_NORMAL
- en: For each custom field, note its behavior—whether a field is mandatory or optional
    should be decided earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices for customizing JIRA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is quite easy to create custom fields in JIRA, but as the instance grows,
    you could have lots of these fields. Always try to reuse similar fields. Try to
    use a generic name for your fields so that they can be reused in other projects.
    Contexts can also be used to employ the same select list with different options
    in the drop-down menu in multiple projects. The best practices are discussed in
    detail in [Chapter 17](ch17.html "Chapter 17. JIRA Best Practices"), *JIRA Best
    Practices*.
  prefs: []
  type: TYPE_NORMAL
- en: Issue workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How your issue will move from one state to another is defined in the workflow.
    It is usually your process followed in the company for a particular use case.
    The process is simply the various stages that an issue goes through. First, decide
    how many states are required in the workflow and then decide the transitions between
    these states. Transitions define whether the issue can be moved from one state
    to another. For each transition, decide what conditions, validations, and post
    functions are required. In [Chapter 4](ch04.html "Chapter 4. Customizing JIRA
    for Test Management"), *Customizing JIRA for Test Management*, we discussed workflow
    customization in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The whole project could use a single workflow, or each issue type could have
    its own workflow. Discuss this carefully with the project manager to understand
    how the issues move through various stages.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up JIRA for helpdesk/support tickets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Companies that have software products and applications used by various customers
    or clients usually need a system where their users can raise complaints, suggestions,
    and feedback. There are various dedicated open source and proprietary tools for
    this activity, but JIRA can be easily customized to act like a helpdesk or a support
    ticketing system.
  prefs: []
  type: TYPE_NORMAL
- en: Issue types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The helpdesk has a mechanism to capture support requests for customers. We
    will also create a new issue type called `Support Request` for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scheme name** | **Issue types** | **Remarks** |'
  prefs: []
  type: TYPE_TB
- en: '| Helpdesk—Issue Type Scheme | Support RequestImprovementBugNew FeatureNew
    User RequestSub-task | This creates issue types that are not available |'
  prefs: []
  type: TYPE_TB
- en: Workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use a custom workflow for the **Support Request** issue type, which
    is described next. It is almost identical to the default JIRA workflow, except
    for two additional states—Waiting for Client and On Hold:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **From** | **To** | **Remarks** |'
  prefs: []
  type: TYPE_TB
- en: '| Open | In ProgressResolvedClosedWaiting for Client |'
  prefs: []
  type: TYPE_TB
- en: '**Condition**: Only the reporter can move the issue to Waiting for Client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post function**: This changes the priority to minor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| In Progress | OpenResolvedClosedOn Hold |'
  prefs: []
  type: TYPE_TB
- en: '**Condition**: Only the reporter can move the issue to On Hold'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post function**: This changes the priority to minor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Resolved | ClosedReopened | Issues in the Resolved state can be moved to
    either the Closed state or the Reopened state |'
  prefs: []
  type: TYPE_TB
- en: '| Reopened | ResolvedClosedIn Progress | Once an issue is reopened, it can
    be resolved again, closed, or moved to the In Progress state |'
  prefs: []
  type: TYPE_TB
- en: '| Closed | Reopened | A Closed issue can be Reopened |'
  prefs: []
  type: TYPE_TB
- en: '| Waiting for Client | Open | Once more clarity is received, an issue can be
    opened again |'
  prefs: []
  type: TYPE_TB
- en: '| On Hold | In Progress | An On Hold issue can be moved to the In Progress
    state |'
  prefs: []
  type: TYPE_TB
- en: Fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Support Request** issue type will have a few additional fields apart
    from the default system JIRA fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field Name** | **Type** | **Mandatory** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Project** | Select List | Yes | Select the project name |'
  prefs: []
  type: TYPE_TB
- en: '| **Issue Type** | Select List | Yes | Enter the activity to be performed |'
  prefs: []
  type: TYPE_TB
- en: '| **Summary** | Text | Yes | Enter a brief description of the issue |'
  prefs: []
  type: TYPE_TB
- en: '| **Priority** | Select List | No | Values:'
  prefs: []
  type: TYPE_NORMAL
- en: Highest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lowest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Due Date** | Date Picker | No | Enter the due date of the issue, if any
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Component/s** | Select List | No | The user can select the components if
    they are created by the project administrator. Each component in the project can
    have a dedicated component lead, and that user can be configured to become the
    default assignee for the issues using the component |'
  prefs: []
  type: TYPE_TB
- en: '| **Affects Version/s** | Select List | Yes | Select the version for which
    this issue is raised |'
  prefs: []
  type: TYPE_TB
- en: '| **Assignee** | User Picker | No | Select the user who will work on this issue
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Reporter** | User Picker | Yes | Select the reporter of the issue. The
    default is the creator |'
  prefs: []
  type: TYPE_TB
- en: '| **Environment** | Text Field | No | Specify under what system environment
    this issue was reported |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | Text Field | No | Enter the details of the issue in this
    field |'
  prefs: []
  type: TYPE_TB
- en: '| **Attachment** | File | No | Upload a file or screenshot |'
  prefs: []
  type: TYPE_TB
- en: '| **Category** | Select List | Yes | Values:'
  prefs: []
  type: TYPE_NORMAL
- en: Billing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User Registration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User Interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: These fields are shown to the user while creating a new issue of the type **Support
    Request**; for other issue types, use the system default fields.
  prefs: []
  type: TYPE_NORMAL
- en: Screen schemes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have decided what fields we want for **Support Request**, create
    a new screen called `Support Request Screen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Issue Type Screen Scheme name** | **Screen Scheme** | **Issue Types** |
    **Screen** |'
  prefs: []
  type: TYPE_TB
- en: '| Helpdesk—Issue Type Screen Scheme | Helpdesk—Screen Scheme | Support Request
    | Support Request Screen |'
  prefs: []
  type: TYPE_TB
- en: '| Default Screen Scheme | ImprovementBugNew FeatureNew User RequestSub-task
    | Default Screen |   |'
  prefs: []
  type: TYPE_TB
- en: Permission schemes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned earlier, it is always desirable and easier to copy the default
    permission scheme and then make any changes in it. Let's name our new scheme `Helpdesk—Permission
    Scheme`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table highlights only those permissions that are different than
    the default permission schemes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Project permission** | **Users/Groups/Project Roles** |'
  prefs: []
  type: TYPE_TB
- en: '| **Assign Issue** | Reporter |'
  prefs: []
  type: TYPE_TB
- en: '| **Delete Issues** | Reporter |'
  prefs: []
  type: TYPE_TB
- en: '| **Work On Issues** | Assignee |'
  prefs: []
  type: TYPE_TB
- en: Also, as discussed in [Chapter 4](ch04.html "Chapter 4. Customizing JIRA for
    Test Management"), *Customizing JIRA for Test Management*, we can also use **Issue
    Security Scheme** to hide a specific issue in the project from other users.
  prefs: []
  type: TYPE_NORMAL
- en: In this section we have discussed the customization of JIRA for support tickets.
    The important thing to keep in mind is that users who will log in to JIRA to raise
    support requests should have an account in JIRA that means they will count towards
    the license. In the enterprise edition with unlimited users this might not be
    a problem, but when JIRA is used with a limited license, only who have a licensed
    account in JIRA can log in and raise tickets. If JIRA is exposed to the general
    population, such as your customers, then you should either have unlimited JIRA
    user licenses or you can use JIRA Service Desk, which is a popular JIRA application
    especially for support requests. It doesn't require end users who will raise support
    tickets to be part of JIRA user license.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 15](ch15.html "Chapter 15. Implementing JIRA Service Desk"), *Implementing
    JIRA Service Desk*, we will take a look at this popular application. It is a dedicated
    application for support requests and doesn't require you to customize JIRA. It
    has the inbuilt standard features of a typical support project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up JIRA for requirement management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at the configuration for using JIRA requirement management;
    we will store issues that are related to requirements. This will also ensure that
    expectations of the project are captured and later verified during testing.
  prefs: []
  type: TYPE_NORMAL
- en: Issue types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following table lists the different issue types for requirement management:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scheme name** | **Issue types** | **Remarks** |'
  prefs: []
  type: TYPE_TB
- en: '| Requirements—Issue Type Scheme | RequirementsDocumentationChange RequestImprovementBugNew
    FeatureNew User RequestSub-task | Create the issue types that are not available
    |'
  prefs: []
  type: TYPE_TB
- en: Workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use a custom workflow for the Requirements issue type; it will be used
    to store the project requirements; for the rest of the issue types, the default
    JIRA workflow will be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table depicts the requirements workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **From** | **To** | **Remarks** |'
  prefs: []
  type: TYPE_TB
- en: '| Open | In Progress | A new issue can be moved to the In Progress state when
    the work starts |'
  prefs: []
  type: TYPE_TB
- en: '| In Progress | OpenReview |'
  prefs: []
  type: TYPE_TB
- en: '**Condition**: Only the assignee can move the issue to review'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Review | In ProgressResolved |'
  prefs: []
  type: TYPE_TB
- en: '**Transition screen**: Ask the user to enter comments when moving the issue
    from Review to In Progress'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Resolved | ClosedIn ProgressReopened | Once resolved, the issue can then
    be closed, moved back to the In Progress state, or reopened again |'
  prefs: []
  type: TYPE_TB
- en: '| Closed | Reopened | A closed issue can be reopened |'
  prefs: []
  type: TYPE_TB
- en: Fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Requirements** issue type will have a few additional fields apart from
    the default system JIRA fields. Similarly, we will also create a few new custom
    fields for the **Documentation** issue type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table displays information about the field names and descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field name** | **Type** | **Mandatory** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Project** | Select List | Yes | Select the project name |'
  prefs: []
  type: TYPE_TB
- en: '| **Issue Type** | Select List | Yes | Select the activity to be performed
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Summary** | Text | Yes | Enter a brief description of the issue |'
  prefs: []
  type: TYPE_TB
- en: '| **Due Date** | Date Picker | No | Pick the due date of the issue if any |'
  prefs: []
  type: TYPE_TB
- en: '| **Component/s** | Select List | No | The user can select the components if
    they are created by the project administrator |'
  prefs: []
  type: TYPE_TB
- en: '| **Assignee** | User Picker | No | Select the user who will work on this issue
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Reporter** | User Picker | Yes | Select the reporter of the issue. The
    default is the creator |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | Text Field | No | Enter the details of the issue in this
    field |'
  prefs: []
  type: TYPE_TB
- en: '| **Attachment** | File | No | Upload a file or screenshot |'
  prefs: []
  type: TYPE_TB
- en: '| **Requirement Type** | Select List | Yes | Values:'
  prefs: []
  type: TYPE_NORMAL
- en: Customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-functional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Traceability** | Text Field | No | In this field, the user can enter the
    changes made to a requirement over a period of time |'
  prefs: []
  type: TYPE_TB
- en: Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following table displays information about field names and descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field Name** | **Type** | **Mandatory** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Project** | Select List | Yes | Select the project name |'
  prefs: []
  type: TYPE_TB
- en: '| **Issue Type** | Select List | Yes | Select the activity to be performed
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Summary** | Text | Yes | Enter a brief description of the issue |'
  prefs: []
  type: TYPE_TB
- en: '| **Due Date** | Date Picker | No | Pick the due date of the issue, if any
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Component/s** | Select List | No | The user can select the components if
    they are created by the project administrator |'
  prefs: []
  type: TYPE_TB
- en: '| **Assignee** | User Picker | No | Pick the user who will work on this issue
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Reporter** | User Picker | Yes | Pick the reporter of the issue. The default
    is the creator |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | Text Field | No | Enter the details of the issue in this
    field |'
  prefs: []
  type: TYPE_TB
- en: '| **Attachment** | File | No | Upload a file or screenshot |'
  prefs: []
  type: TYPE_TB
- en: '| **Document Type** | Select List | Yes | Values:'
  prefs: []
  type: TYPE_NORMAL
- en: PDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DOC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Document ID** | Text Field | No | If documents are stored in the external
    system, then store its ID here |'
  prefs: []
  type: TYPE_TB
- en: These fields are shown to the user while creating a new issue of the type **Support
    Request**; for other issue types, use the system default fields.
  prefs: []
  type: TYPE_NORMAL
- en: Screen schemes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have decided what fields we want for the **Support Request**, create
    a new screen called `Requirements Screen`. The following table displays information
    about field names and their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Issue Type Screen Scheme name** | **Screen schemes** | **Issue types**
    | **Screen** |'
  prefs: []
  type: TYPE_TB
- en: '| Requirements—Issue Type Screen Scheme | Requirement—Screen Scheme | Requirements
    | Requirements Screen |'
  prefs: []
  type: TYPE_TB
- en: '| Documentation—Screen Scheme | Documentation | Documentation Screen |   |'
  prefs: []
  type: TYPE_TB
- en: '| Default Screen Scheme | Change RequestImprovementBugNew FeatureNew User RequestSub-task
    | Default Screen |   |'
  prefs: []
  type: TYPE_TB
- en: Permission schemes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, it is always desirable and easier to copy the default
    permission scheme and then make any changes in it. Let's name our new scheme Requirements-Permission
    Scheme.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table highlights only those permissions that are different than
    the default permission schemes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Project Permission** | **Users/Groups/Project Roles** |'
  prefs: []
  type: TYPE_TB
- en: '| Assign Issue | Reporter |'
  prefs: []
  type: TYPE_TB
- en: '| Delete Issues | Reporter |'
  prefs: []
  type: TYPE_TB
- en: '| Work On Issues | Assignee |'
  prefs: []
  type: TYPE_TB
- en: Setting up JIRA for bug tracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JIRA can be used out-of-the-box for bug tracking. It comes with a default issue
    type called **Bug**, along with other issue types. However, you may be required
    to make certain changes in the default configurations in the future, and it is
    a good idea to create custom schemes even for bug tracking. Of course, we will
    copy the default schemes and make changes in the copied configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Issue types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the issue types for bug tracking:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scheme name** | **Issue types** | **Remarks** |'
  prefs: []
  type: TYPE_TB
- en: '| Default Issue Type Scheme | ImprovementBugNew FeatureNew User RequestSub-task
    | There''s no need to create new issue types or new schemes here |'
  prefs: []
  type: TYPE_TB
- en: Workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use a custom workflow for the **Bug** issue type; it will be used to
    store project requirements; for rest of the issue types, the default JIRA workflow
    will be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the workflow for bug tracking:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **From** | **To** | **Remarks** |'
  prefs: []
  type: TYPE_TB
- en: '| Open | ConfirmedResolvedClosedWaiting for Client |'
  prefs: []
  type: TYPE_TB
- en: '**Condition**: Only the assignee can confirm the bug'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Confirmed | In ProgressResolved | Once the issue is confirmed, move the issue
    to the In Progress state |'
  prefs: []
  type: TYPE_TB
- en: '| In Progress | OpenResolvedClosedOn Hold | An issue in the In Progress state
    can be opened again, resolved, closed, or put in the On Hold state |'
  prefs: []
  type: TYPE_TB
- en: '| Resolved | ClosedReopened | A resolved issue can be closed or reopened |'
  prefs: []
  type: TYPE_TB
- en: '| Reopened | ResolvedClosedIn Progress | A reopened issue can be resolved,
    closed, or moved to the In Progress state |'
  prefs: []
  type: TYPE_TB
- en: '| Closed | Reopened | A closed issue can be reopened again |'
  prefs: []
  type: TYPE_TB
- en: The preceding workflow is similar to the default JIRA workflow, except for one
    additional state called Confirmed. Once the bug is raised, it is the responsibility
    of the assignee to check the bug first.
  prefs: []
  type: TYPE_NORMAL
- en: Fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Bug** issue type will have a few additional fields in addition to the
    default system JIRA fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field Name** | **Type** | **Mandatory** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Project** | Select List | Yes | Select the project name |'
  prefs: []
  type: TYPE_TB
- en: '| **Issue Type** | Select List | Yes | Select the activity to be performed
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Summary** | Text | Yes | Enter a brief description of the issue |'
  prefs: []
  type: TYPE_TB
- en: '| **Priority** | Select List | No | Values:'
  prefs: []
  type: TYPE_NORMAL
- en: Major
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Critical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trivial
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Due Date** | Date Picker | No | Pick the due date of the issue, if any
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Component/s** | Select List | No | The user can select the components if
    they are created by the project administrator |'
  prefs: []
  type: TYPE_TB
- en: '| **Affects Version/s** | Select List | Yes | Select the version for which
    this issue is raised |'
  prefs: []
  type: TYPE_TB
- en: '| **Assignee** | User Picker | No | Select the user who will work on this issue
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Reporter** | User Picker | Yes | Select the reporter of the issue. The
    default reporter is the creator |'
  prefs: []
  type: TYPE_TB
- en: '| **Environment** | Text Field | No | Specify under which system environment
    this issue was reported |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | Text Field | No | Enter the details of the issue in this
    field |'
  prefs: []
  type: TYPE_TB
- en: '| **Attachment** | File | No | Upload a file or screenshot |'
  prefs: []
  type: TYPE_TB
- en: '| **Category** | Select List | Yes | Values:'
  prefs: []
  type: TYPE_NORMAL
- en: Billing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User Registration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User Interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Customer Name** | Select List | No | If the application is used by multiple
    customers, use this field to capture their names |'
  prefs: []
  type: TYPE_TB
- en: These fields are shown to the user while creating a new issue of the type **Support
    Request**; for other issue types, use the system default fields.
  prefs: []
  type: TYPE_NORMAL
- en: Screen schemes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have decided what fields we want for **Bug**, create a new screen
    called `Bug Screen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Issue Type Screen Scheme name** | **Screen Scheme** | **Issue Types** |
    **Screen** |'
  prefs: []
  type: TYPE_TB
- en: '| Bug—Issue Type Screen Scheme | Bug—Screen Scheme | Support Request | Bug
    Screen |'
  prefs: []
  type: TYPE_TB
- en: '| Default Screen Scheme | ImprovementBugNew FeatureNew User RequestSub-task
    | Default Screen |   |'
  prefs: []
  type: TYPE_TB
- en: Permission schemes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned earlier, it is always desirable and easier to copy the default
    permission scheme and then make any changes in it. Let's name our new scheme `Helpdesk—Permission
    Scheme`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table highlights only those permissions that are different than,
    the default permission schemes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Project permission** | **Users/groups/project roles** |'
  prefs: []
  type: TYPE_TB
- en: '| **Assign Issue** | Reporter |'
  prefs: []
  type: TYPE_TB
- en: '| **Delete Issues** | Reporter |'
  prefs: []
  type: TYPE_TB
- en: '| **Work On Issues** | Assignee |'
  prefs: []
  type: TYPE_TB
- en: '| **Move Issues** | Project role (administrators) |'
  prefs: []
  type: TYPE_TB
- en: Changes in the customizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed various use cases that can be implemented in JIRA. When you start
    using JIRA for the first time, you can never be exactly sure about the possible
    changes that may be required in these customizations. JIRA administrators can
    always make modifications in the schemes to accommodate further changes. However,
    it is always a good thing to set up a change control board in your company and
    check for the possible impact of these changes. We will discuss this in detail
    in [Chapter 17](ch17.html "Chapter 17. JIRA Best Practices"), *JIRA Best Practices*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we checked the sample implementation of a few use cases that
    can be implemented in JIRA. You could start your customizations by following the
    sample data given in this chapter; by now, you already know how to customize JIRA,
    but it is more important that you treat your JIRA customization as a project and
    prepare a configuration document to store your requirements, which we discussed
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at user management in JIRA. We will
    also understand how to configure the default global permission of the users to
    control all that they should have access to. We will also learn the importance
    of creating groups and their usage.
  prefs: []
  type: TYPE_NORMAL
