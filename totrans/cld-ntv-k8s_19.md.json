["```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql\nspec:\n  selector:\n    matchLabels:\n      app: mysql\n  serviceName: mysql\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: mysql\n```", "```\n    spec:\n      initContainers:\n      - name: init-mysql\n        image: mysql:5.7\n        command:\n        - bash\n        - \"-c\"\n        - |\n          set -ex\n          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1\n          ordinal=${BASH_REMATCH[1]}\n          echo [mysqld] > /mnt/conf.d/server-id.cnf\n          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf\n          if [[ $ordinal -eq 0 ]]; then\n            cp /mnt/config-map/master.cnf /mnt/conf.d/\n          else\n            cp /mnt/config-map/slave.cnf /mnt/conf.d/\n          fi\n        volumeMounts:\n        - name: conf\n          mountPath: /mnt/conf.d\n        - name: config-map\n          mountPath: /mnt/config-map\n```", "```\n      - name: clone-mysql\n        image: gcr.io/google-samples/xtrabackup:1.0\n        command:\n        - bash\n        - \"-c\"\n        - |\n          set -ex\n          [[ -d /var/lib/mysql/mysql ]] && exit 0\n          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1\n          ordinal=${BASH_REMATCH[1]}\n          [[ $ordinal -eq 0 ]] && exit 0          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql\n          xtrabackup --prepare --target-dir=/var/lib/mysql\n```", "```\n      containers:\n      - name: mysql\n        image: mysql:5.7\n        env:\n        - name: MYSQL_ALLOW_EMPTY_PASSWORD\n          value: \"1\"\n        ports:\n        - name: mysql\n          containerPort: 3306\n        volumeMounts:\n        - name: data\n          mountPath: /var/lib/mysql\n          subPath: mysql\n        - name: conf\n          mountPath: /etc/mysql/conf.d\n```", "```\n- name: xtrabackup\ncontainerPort: 3307\ncommand:\n- bash\n- \"-c\"\n- |\nset -ex\ncd /var/lib/mysql if [[ -f xtrabackup_slave_info && \"x$(<xtrabackup_slave_info)\" != \"x\" ]]; thencat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.inrm -f xtrabackup_slave_info xtrabackup_binlog_info\nelif [[ -f xtrabackup_binlog_info ]]; then[[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1\nrm -f xtrabackup_binlog_info xtrabackup_slave_info\necho \"CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\\\nMASTER_LOG_POS=${BASH_REMATCH[2]}\" > change_master_to.sql.in\nfi if [[ -f change_master_to.sql.in ]]; then\necho \"Waiting for mysqld to be ready (accepting connections)\"\nuntil mysql -h 127.0.0.1 -e \"SELECT 1\"; do sleep 1; done\necho \"Initializing replication from clone position\"\nmysql -h 127.0.0.1 \\\n-e \"$(<change_master_to.sql.in), \\\nMASTER_HOST='mysql-0.mysql', \\\nMASTER_USER='root', \\\nMASTER_PASSWORD='', \\\nMASTER_CONNECT_RETRY=10; \\\nSTART SLAVE;\" || exit 1\nmv change_master_to.sql.in change_master_to.sql.orig\nfi exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \\\n\"xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root\"\n```", "```\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      resources:\n        requests:\n          storage: 10Gi\n```", "```\n    (\n      set -x; cd \"$(mktemp -d)\" &&\n      curl -fsSLO \"https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.tar.gz\" &&\n      tar zxvf krew.tar.gz &&\n      KREW=./krew-\"$(uname | tr '[:upper:]' '[:lower:]')_$(uname -m | sed -e 's/x86_64/amd64/' -e 's/arm.*$/arm/')\" &&\n      \"$KREW\" install krew\n    )\n    ```", "```\n    kubectl krew commands.\n    ```", "```\n    kubectl krew install minio\n    ```", "```\n    kubectl minio init\n    ```", "```\n    CustomResourceDefinition tenants.minio.min.io: created\n    ClusterRole minio-operator-role: created\n    ServiceAccount minio-operator: created\n    ClusterRoleBinding minio-operator-binding: created\n    MinIO Operator Deployment minio-operator: created\n    ```", "```\n    kubectl get pods\n    ```", "```\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\ndefault       minio-operator-85ccdcfb6-r8g8b     1/1     Running   0          5m37s\n```", "```\n    DIRECT_CSI_DRIVES=data{1...4}\n    DIRECT_CSI_DRIVES_DIR=/mnt\n    KUBELET_DIR_PATH=/var/lib/kubelet\n    ```", "```\n    export $(cat default.env)\n    ```", "```\n    kubectl apply -k github.com/minio/direct-csi\n    ```", "```\n    kubenamespace/direct-csi created\n    storageclass.storage.k8s.io/direct.csi.min.io created\n    serviceaccount/direct-csi-min-io created\n    clusterrole.rbac.authorization.k8s.io/direct-csi-min-io created\n    clusterrolebinding.rbac.authorization.k8s.io/direct-csi-min-io created\n    configmap/direct-csi-config created\n    secret/direct-csi-min-io created\n    service/direct-csi-min-io created\n    deployment.apps/direct-csi-controller-min-io created\n    daemonset.apps/direct-csi-min-io created\n    csidriver.storage.k8s.io/direct.csi.min.io created\n    ```", "```\n    kubectl get pods –n direct-csi\n    ```", "```\n    NAME                                          READY   STATUS    RESTARTS   AGE\n    direct-csi-controller-min-io-cd598c4b-hn9ww   2/2     Running   0          9m\n    direct-csi-controller-min-io-cd598c4b-knvbn   2/2     Running   0          9m\n    direct-csi-controller-min-io-cd598c4b-tth6q   2/2     Running   0          9m\n    direct-csi-min-io-4qlt7                       3/3     Running   0          9m\n    direct-csi-min-io-kt7bw                       3/3     Running   0          9m\n    direct-csi-min-io-vzdkv                       3/3     Running   0          9m\n    ```", "```\n    Tenant Tenant CRD. This first part of our spec has two containers specified, a container for the Minio console and one for the Minio server itself. In addition, the replicas value mirrors what we specified in our kubectl minio tenant create command. Finally, it specifies the name of a secret for the Minio console.Next, let's look at the bottom portion of the Tenant CRD:\n\n    ```", "```\n\n    As you can see, the `Tenant` resource specifies a number of servers (also specified by the `creation` command) that matches the number of replicas. It also specifies the name of the internal Minio Service, as well as a `volumeClaimTemplate` instance to be used.This spec, however, does not work for our purposes, since we are using the Direct CSI. Let's update the `zones` key with a new `volumeClaimTemplate` that uses the Direct CSI, as follows (save this file as `my-updated-minio-tenant.yaml`). Here's just the `zones` portion of that file, which we updated: \n\n    ```", "```\n\n    ```", "```\n    kubectl apply -f my-updated-minio-tenant.yaml\n    ```", "```\ntenant.minio.min.io/my-tenant created\nsecret/my-tenant-creds-secret created\nsecret/my-tenant-console-secret created\n```", "```\necho $(kubectl get secret my-tenant-console-secret -o=jsonpath='{.data.CONSOLE_ACCESS_KEY}' | base64 --decode)\n```", "```\necho $(kubectl get secret my-tenant-console-secret -o=jsonpath='{.data.CONSOLE_SECRET_KEY}' | base64 --decode)\n```", "```\nkubectl port-forward service/my-tenant-console 8081:9443\n```", "```\necho $(kubectl get secret my-tenant-creds-secret -o=jsonpath='{.data.accesskey}' | base64 --decode)\n```", "```\necho $(kubectl get secret my-tenant-creds-secret -o=jsonpath='{.data.secretkey}' | base64 --decode)\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: minio-mc\nspec:\n  containers:\n  - name: mc\n    image: minio/mc\n    command: [\"/bin/sh\", \"-c\", \"sleep 10000000s\"]\n  restartPolicy: OnFailure\n```", "```\nkubectl apply -f minio-mc-pod.yaml\n```", "```\nKubectl exec -it minio-mc -- sh\n```", "```\nmc config host add my-minio https://<MINIO TENANT POD IP>:9000 --insecure\n```", "```\nAdded `my-minio` successfully.\n```", "```\nmc mb my-minio/my-bucket-2 --insecure\n```", "```\nBucket created successfully `my-minio/my-bucket-2`.\n```", "```\nmc mv test.txt my-minio/my-bucket-2 --insecure\n```", "```\n    helm repo add cockroachdb https://charts.cockroachdb.com/\n    ```", "```\n    \"cockroachdb\" has been added to your repositories\n    ```", "```\n    storage:\n      persistentVolume:\n        size: 2Gi\n    statefulset:\n      resources:\n        limits:\n          memory: \"1Gi\"\n        requests:\n          memory: \"1Gi\"\n    conf:\n      cache: \"256Mi\"\n      max-sql-memory: \"256Mi\"\n    ```", "```\n    helm install cdb --values cockroach-db-values.yaml cockroachdb/cockroachdb\n    ```", "```\n    kubectl get po \n    ```", "```\n    NAMESPACE     NAME                                          READY   STATUS      RESTARTS   AGE\n    default       cdb-cockroachdb-0                             0/1     Running     0          57s\n    default       cdb-cockroachdb-1                             0/1     Running     0          56s\n    default       cdb-cockroachdb-2                             1/1     Running     0          56s\n    default       cdb-cockroachdb-init-8p2s2                    0/1     Completed   0          57s\n    ```", "```\n    kubectl run -it --rm cockroach-client \\\n            --image=cockroachdb/cockroach \\\n            --restart=Never \\\n            --command -- \\\n            ./cockroach sql --insecure --host=cdb-cockroachdb-public.default\n    ```", "```\nroot@cdb-cockroachdb-public.default:26257/defaultdb>\n```", "```\n    CREATE DATABASE mydb;\n    ```", "```\n    CREATE TABLE mydb.users (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        first_name STRING,\n        last_name STRING,\n        email STRING\n     );\n    ```", "```\n    INSERT INTO mydb.users (first_name, last_name, email)\n      VALUES\n          ('John', 'Smith', 'jsmith@fake.com');\n    ```", "```\n    SELECT * FROM mydb.users;\n    ```", "```\n                  id                  | first_name | last_name |      email\n---------------------------------------+------------+-----------+------------------\n  e6fa342f-8fe5-47ad-adde-e543833ffd28 | John       | Smith     | jsmith@fake.com\n(1 row)\n```", "```\n    helm repo add bitnami https://charts.bitnami.com/bitnami\n    ```", "```\n    auth:\n      user: user\n      password: test123\n    persistence:\n      enabled: false\n    ```", "```\n    helm install rabbitmq bitnami/rabbitmq --values values-rabbitmq.yaml\n    ```", "```\n    http://localhost:15672. It will look like the following:![Figure 15.4 – RabbitMQ management console login](img/B14790_15_004.jpg)Figure 15.4 – RabbitMQ management console login\n    ```"]