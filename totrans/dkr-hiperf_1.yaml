- en: Chapter 1. Preparing Docker Hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker allows us to deliver applications to our customers faster. It simplifies
    the workflows needed to get code from development to production by enabling us
    to easily create and launch Docker containers. This chapter will be a quick refresher
    on how to get our environment ready to run a Docker-based development and operations
    workflow by:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a Docker host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Docker images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Docker containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most parts of this chapter are concepts that we are already familiar with and
    are readily available on the Docker documentation website. This chapter shows
    selected commands and interactions with the Docker host that will be used in the
    succeeding chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a Docker host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is assumed that we are already familiar with how to set up a Docker host.
    For most of the chapters of this book, we will run our examples against the following
    environment, unless explicitly mentioned otherwise:'
  prefs: []
  type: TYPE_NORMAL
- en: Operating system—Debian 8.2 Jessie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker version—1.10.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following command displays the operating system and Docker version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If we haven't set up our Docker environment yet, we can follow the instructions
    on the Docker website found at [https://docs.docker.com/installation/debian](https://docs.docker.com/installation/debian)
    to prepare our Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Docker images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker images are artifacts that contain our application and other supporting
    components to help run it, such as the base operating system, runtime and development
    libraries, and so on. They get deployed and downloaded into Docker hosts in order
    to run our applications as Docker containers. This section will cover the following
    Docker commands to work with Docker images:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker build`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker images`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker push`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker pull`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most of the material in this section is readily available on the Docker documentation
    website at [https://docs.docker.com/userguide/dockerimages](https://docs.docker.com/userguide/dockerimages).
  prefs: []
  type: TYPE_NORMAL
- en: Building Docker images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the `Dockerfile` of `training/webapp` from the Docker Education
    Team to build a Docker image. The next few steps will show us how to build this
    web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, we will clone the Git repository of `webapp`, which is available
    at [https://github.com/docker-training/webapp](https://github.com/docker-training/webapp)
    via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, let''s build the Docker image with the `docker build` command by executing
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `-t` flag is used to tag the image as `hubuser/webapp`. Tagging containers
    as `<username>/<imagename>` is an important convention to be able to push our
    Docker images in the later section. More details on the `docker build` command
    can be found at [https://docs.docker.com/reference/commandline/build](https://docs.docker.com/reference/commandline/build)
    or by running `docker build --help`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, let''s confirm that the image is already available in our Docker host
    with the `docker images` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Pushing Docker images to a repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have made a Docker image, let''s push it to a repository to share
    and deploy across other Docker hosts. The default installation of Docker pushes
    images to Docker Hub. Docker Hub is a publicly hosted repository of Docker, Inc.,
    where anyone with an account can push and share their Docker images. The following
    steps will show us how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before being able to push to Docker Hub, we will need to authenticate with
    the `docker login` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If we don't have a Docker Hub account yet, we can follow the instructions to
    sign up for an account at [https://hub.docker.com/account/signup](https://hub.docker.com/account/signup).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now push our images to Docker Hub. As mentioned in the previous section,
    the tag of the image identifies `<username>/<imagename>` in the repository. Issue
    the `docker push` command shown as follows in order to push our image to Docker
    Hub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have successfully pushed our Docker image, it will be available
    in Docker Hub. We can also get more information about the image we pushed in its
    Docker Hub page, which is similar to that shown in the following image. In this
    example, our Docker Hub URL is `https:// hub.docker.com/r/hubuser/webapp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing Docker images to a repository](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details on pushing Docker images to a repository are available at `docker
    push --help` and [https://docs.docker.com/reference/commandline/push](https://docs.docker.com/reference/commandline/push).
  prefs: []
  type: TYPE_NORMAL
- en: Docker Hub is a good place to start hosting our Docker images. However, there
    are some cases where we want to host our own image repository. For example, when
    we want to save bandwidth when pulling images to our Docker hosts. Another reason
    could be that our Docker hosts inside a datacenter may have firewalled off the
    Internet. In [Chapter 2](part0018_split_000.html#H5A42-afc4585f6623427885a0b0c8e5b2e22e
    "Chapter 2. Optimizing Docker Images"), *Optimizing Docker Images*, we will discuss
    in greater detail how to run our own Docker registry to have an in-house repository
    of Docker images.
  prefs: []
  type: TYPE_NORMAL
- en: Pulling Docker images from a repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once our Docker images are built and pushed to a repository, such as Docker
    Hub, we can pull them to our Docker hosts. This workflow is useful when we first
    build our Docker image in our development workstation Docker host and want to
    deploy it to our production environment''s Docker host in the cloud. This removes
    the need to rebuild the same image in our other Docker hosts. Pulling images can
    also be used to grab the existing Docker images from Docker Hub to build over
    our own Docker images. So, instead of cloning the Git repository as we did earlier
    and redoing the build in another one of our Docker hosts, we can pull it instead.
    The next few steps will walk us through pulling the `hubuser/webapp` Docker image
    that we just pushed earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s clean our existing Docker host to make sure that we will download
    the image from Docker Hub. Type the following command to make sure we have a clean
    start:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we can now download the image using `docker pull`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let''s confirm again that we have downloaded the image successfully
    by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details on how to pull Docker images is available at `docker pull --help`
    and [https://docs.docker.com/reference/commandline/pull](https://docs.docker.com/reference/commandline/pull).
  prefs: []
  type: TYPE_NORMAL
- en: Running Docker containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have pulled or built Docker images, we can run and test them with
    the `docker run` command. This section will review selected command-line flags
    that we will use throughout the succeeding chapters. This section will also use
    the following Docker commands to get more information about the Docker containers
    being run inside the Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker ps`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker inspect`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More comprehensive details on all the command-line flags are found at `docker
    run --help` and [https://docs.docker.com/reference/commandline/run](https://docs.docker.com/reference/commandline/run).
  prefs: []
  type: TYPE_NORMAL
- en: Exposing container ports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `training/webapp` example, its Docker container is run as a web server.
    To have the application serve web traffic outside its container environment, Docker
    needs information on which port the application is bound to. Docker refers to
    this information as exposed ports. This section will walk us through how to expose
    port information when running our containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to the `training/webapp` Docker image we worked on earlier, the
    application serves a Python Flask web application that listens to port `5000`,
    as highlighted here in `webapp/app.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Correspondingly, the Docker image makes the Docker host aware that the application
    is listening on port `5000` via the `EXPOSE` instruction in the `Dockerfile`,
    which can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a basic idea of how Docker exposes our container''s ports,
    follow the next few steps to run the `hubuser/webapp` container:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `docker run` with the `-d` flag to run the container as a daemon process,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, confirm that the Docker host has the container running with port `5000`
    exposed with `docker ps`. We can do this through the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In addition to the `EXPOSE` instruction, exposed ports can be overridden during
    runtime with the `--expose=[]` flag. For example, use the following command to
    have the `hubuser/webapp` application expose ports `4000`-`4500`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This ad hoc `docker run` flag is useful when debugging applications. For example,
    let's say our web application uses ports `4000`-`4500`. However, we normally don't
    want these ranges to be available in production. We can then use `--expose=[]`
    to enable it temporarily to spin up a debuggable container. Further details on
    how to use techniques such as this to troubleshoot Docker containers will be discussed
    in [Chapter 7](part0046_split_000.html#1BRPS2-afc4585f6623427885a0b0c8e5b2e22e
    "Chapter 7. Troubleshooting Containers"), *Troubleshooting Containers*.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing container ports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exposing only makes the port available inside the container. For the application
    to be served outside its Docker host, the port needs to be published. The `docker
    run` command uses the `-P` and `-p` flags to publish a container's exposed ports.
    This section talks about how to use these two flags to publish ports on the Docker
    host.
  prefs: []
  type: TYPE_NORMAL
- en: --publish-all
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `-P` or `--publish-all` flag publishes all the exposed ports of a container
    to random high ports in the Docker host port within the ephemeral port range defined
    in `/proc/sys/net/ipv4/ip_local_port_range`. The next few steps will go back to
    the `hubuser/webapp Docker` image that we were working on to explore publishing
    exposed ports:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, type the following command to run a container publishing all the exposed
    ports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s confirm that the Docker host publishes port `32771` to forward
    traffic to the Docker container''s exposed port `5000`. Type the `docker ps` command
    as follows to perform this verification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also verify that the allocated port `32771` is within the configured
    ephemeral port range of our Docker host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In addition, we can confirm that our Docker host is listening on the allocated
    port `32771` as well via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can validate that the Docker host''s port `32771` is indeed mapped
    to the running Docker container by confirming that it is the `training/webapp`
    Python application responding by making an actual HTTP request. Run the following
    command to confirm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: --publish
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `-p` or `--publish` flag publishes container ports to the Docker host.
    If the container port is not yet exposed, the said container will also be exposed.
    According to the documentation, the `-p` flag can take the following formats to
    publish container ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '`containerPort`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hostPort:containerPort`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ip::containerPort`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ip:hostPort:containerPort`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By specifying the `hostPort`, we can specify which port in the Docker host
    the container port should be mapped to instead of being assigned a random ephemeral
    port. By specifying `ip`, we can restrict the interfaces that the Docker host
    will accept connections from to relay the packets to the mapped Docker container''s
    exposed port. Going back to the `hubuser/webapp` example, the following is the
    command to map the Python application''s exposed port `5000` to our Docker host''s
    port `80` on the loopback interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding invocation of `docker run`, the Docker host can only serve
    HTTP requests in the application from `http://localhost`.
  prefs: []
  type: TYPE_NORMAL
- en: Linking containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The published ports described in the previous section also allow containers
    to talk to each other by connecting to the published Docker host ports. Another
    way to directly connect containers with each other is establishing container links.
    Linked containers allow a source container to send information to the destination
    containers. It enables the communicating containers to discover each other in
    a secure manner.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details about linked containers can be found on the Docker documentation
    site at [https://docs.docker.com/userguide/dockerlinks](https://docs.docker.com/userguide/dockerlinks).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will work with the `--link` flag to connect containers
    securely. The next few steps give us an example of how to work with linked containers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As preparation, make sure that our `hubuser/webapp` container runs with only
    the exposed ports. We will create a container called source that will serve as
    our source container. Type the following command to recreate this container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will create a destination container. We will use `--link` `<source>:<alias>`
    to create a link from the source container named `source` to an alias called `webapp`.
    Type the following command to create this link to our destination container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s now confirm that the link was made by inspecting the newly created destination
    container called `destination`. Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'What happened during the linking process was that the Docker host created a
    secure tunnel between the two containers. We can confirm this tunnel in the Docker
    host''s iptables, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding iptables, the Docker host allowed the destination container
    called `destination (172.17.0.28)` to accept outbound connections to port `5000`
    of the source container called `source (172.17.0.15)`. The second iptable's entry
    allows the container called `source` to receive connections to its port `5000`
    from the container called `destination`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the secure connections established by the Docker host between
    containers, the Docker host also exposes information about the source container
    to the destination container through the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entries in `/etc/hosts`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These two sources of information will be further explored in the next section
    as an example use case of working with interactive containers.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By specifying the `-i` flag, we can specify that a container running in the
    foreground is attached to the standard input stream. By combining it with the
    `-t` flag, a pseudoterminal is also allocated to our container. With this, we
    can use our Docker container as an interactive process, similar to normal shells.
    This feature is useful when we want to debug and inspect what is happening inside
    our Docker containers. Continuing from the previous section, we can debug what
    happens when containers are linked through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To prepare, type the following command to establish an interactive container
    session linking to the container called `source` that we ran earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s first explore the environment variables that are exposed to the
    interactive destination container via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In general, the following environment variables are set in linked containers:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<alias>_NAME=/container_name/alias_name` for each source container'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<alias>_PORT_<port>_<protocol>` shows the URL of each exposed port. It also
    serves as a unique prefix expanding to the following more environment variables:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<prefix>_ADDR` contains the IP address of the source container'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<prefix>_PORT` shows the exposed port''s number'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<prefix>_PROTO` describes the protocol of the exposed port which is either
    TCP or UDP'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<alias>_PORT` shows the source container''s first exposed port'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second container discovery feature in linked containers is an updated `/etc/hosts`
    file. The alias of the `webapp` linked container is mapped to the IP address of
    the `source` source container The name of the source container is also mapped
    to the same IP address. The following snippet is the content of the `/etc/hosts`
    file inside our interactive container session, and it contains this mapping:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can use the alias to connect to our source container. In the following
    example, we will connect to the web application running in our source container
    by making an HTTP request to its alias, `webapp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Interactive containers can be used to build containers as well, together with
    `docker commit`. However, this is a tedious process, and this development process
    doesn't scale beyond a single developer. Use `docker build` instead and manage
    our `Dockerfile` in version control.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully by this time, we are refamiliarized with most of the commands that
    will be used throughout the book. We prepared a Docker host to be able to interact
    with Docker containers. We then built, downloaded, and uploaded various Docker
    images to develop and deploy containers to our development and production Docker
    hosts alike. Finally, we ran Docker containers from built or downloaded Docker
    images. In addition, we established some basic skills of how to communicate and
    interact with running containers by learning about how Docker containers are run.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn how to optimize our Docker images. So, let's
    dive right in!
  prefs: []
  type: TYPE_NORMAL
