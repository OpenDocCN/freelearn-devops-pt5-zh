- en: '*Chapter 9*'
  prefs: []
  type: TYPE_NORMAL
- en: Portainer – A GUI for Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at Portainer. Portainer is a tool that
    allows you to manage Docker resources from a web interface.
  prefs: []
  type: TYPE_NORMAL
- en: As Portainer itself is distributed in containers, it is simple to install and
    you can run it anywhere you can launch a container, making it the perfect interface
    for those who would prefer to not manage their containers using the command line
    as we have been doing in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The road to Portainer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Portainer up and running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Portainer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Portainer and Docker Swarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in previous chapters, we will continue to use our local Docker installations.
    Also, the screenshots in this chapter will be from my preferred operating system,
    macOS. Toward the end of the chapter, we will use Multipass to launch a local
    Docker Swarm cluster.
  prefs: []
  type: TYPE_NORMAL
- en: As before, the Docker commands we will be running will work on all three of
    the operating systems we have installed Docker on so far, however, some of the
    supporting commands, which will be few and far between, may only apply to macOS
    and Linux-based operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3jR2HBa](https://bit.ly/3jR2HBa)'
  prefs: []
  type: TYPE_NORMAL
- en: The road to Portainer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we roll up our sleeves and dive into installing and using Portainer,
    we should discuss the background of the project. The first edition of this book
    covered *Docker UI.* *Docker UI* was written by *Michael Crosby*, who handed the
    project over to *Kevan Ahlquist* after about a year of development. It was at
    this stage, due to trademark concerns, that the project was renamed UI for Docker.
  prefs: []
  type: TYPE_NORMAL
- en: The development of UI for Docker continued up until the point Docker started
    to accelerate the introduction of features such as Swarm mode into the core Docker
    Engine. It was around this time that the UI for Docker project was forked into
    the project that would become Portainer, which had its first major release in
    June 2016\. Since their first public release, the team behind Portainer estimate
    the majority of the code has already been updated or rewritten, and by mid-2017,
    new features were added, such as role-based controls and Docker Compose support.
  prefs: []
  type: TYPE_NORMAL
- en: In December 2016, a notice was committed to the UI for Docker GitHub repository
    stating that the project was deprecated and that Portainer should be used. Since
    its release, it has been downloaded over 1.3 billion times.
  prefs: []
  type: TYPE_NORMAL
- en: Now we know a little about the background of Portainer, let's look at the steps
    needed to get it launched and configured.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Portainer up and running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are first going to be looking at using Portainer to manage a single Docker
    instance running locally. I am running Docker for Mac so I will be using that,
    but these instructions should also work with other Docker installations.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, to grab the container image from Docker Hub, we just need to
    run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you may see from the output if you are following along when we run the `docker
    image ls` command, the Portainer image is only 78.6 MB. To launch Portainer, you
    simply have to run the following command if you are running macOS or Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Windows users will have to run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the command we have just run, we are mounting the socket
    file for Docker Engine on our Docker host machine. Doing this will allow Portainer
    full, unrestricted access to Docker Engine on our host machine. It needs this
    so it can manage Docker on the host; however, it does mean that your Portainer
    container has full access to your host machine, so be careful in how you give
    access to it and also when publicly exposing Portainer on remote hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows this being executed on macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Downloading and launching the Portainer container'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.01_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Downloading and launching the Portainer container
  prefs: []
  type: TYPE_NORMAL
- en: For the most basic type of installation, that is all we need to run. There are
    a few more steps to complete the installation; they are all performed in the browser.
    To complete them, go to [http://localhost:9000/](http://localhost:9000/). The
    first screen you will be greeted by asks you to set a password for the admin user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have set the password, you will be taken to a login page: enter the
    username admin and the password you just configured. Once logged in, you will
    be asked about the Docker instance you wish to manage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four options:'
  prefs: []
  type: TYPE_NORMAL
- en: Manage the Docker instance where Portainer is running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage a remote Docker instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect to a Portainer Agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect to Microsoft **Azure Container Instances** (**ACI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the moment, we want to manage the instance where Portainer is running,
    which is the **Local** option, rather than the default **Remote** one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Choosing which environment you want to manage with Portainer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.02_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Choosing which environment you want to manage with Portainer
  prefs: []
  type: TYPE_NORMAL
- en: As we have already taken mounting the Docker socket file into account when launching
    our Portainer container, we can click on **Connect** to complete our installation.
    This will take us straight into Portainer itself, showing us the dashboard. With
    Portainer launched and configured, we can now look at some of the features.
  prefs: []
  type: TYPE_NORMAL
- en: Using Portainer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have Portainer running and configured to communicate with our Docker
    installation, we can start to work through the features listed in the left-hand
    side menu, starting at the top with the Dashboard, which is also the default landing
    page of your Portainer installation, as you can see from the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Viewing the default page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.03_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – Viewing the default page
  prefs: []
  type: TYPE_NORMAL
- en: You are first taken to the list of endpoints. As we only have our local installation,
    click on that and then we can start exploring.
  prefs: []
  type: TYPE_NORMAL
- en: The dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see from the following screenshot, the dashboard gives us an overview
    of the current state of the Docker instance that Portainer is configured to communicate
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Getting an overview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.04_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – Getting an overview
  prefs: []
  type: TYPE_NORMAL
- en: 'In my case, this shows how many containers I have running, which at the moment
    is just the already running Portainer container, as well as the number of images
    I have downloaded. We can also see the number of **Volumes** and **Networks**
    available on the Docker instance. It will also show the number of running **Stacks**:'
  prefs: []
  type: TYPE_NORMAL
- en: It also shows basic information on the Docker instance itself; as you can see,
    the Docker instance is running Moby Linux, and has 6 CPUs and 2.1 GB of RAM. This
    is the default configuration for Docker for Mac.
  prefs: []
  type: TYPE_NORMAL
- en: The dashboard will adapt to the environment you have Portainer running in, so
    we will revisit it when we look at attaching Portainer to a Docker Swarm cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Application templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next up in the left-hand menu, we have **App Templates**. This section is probably
    the only feature not to be a direct feature available in the core Docker Engine;
    it is instead a way of launching common applications using containers downloaded
    from Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Exploring the templates'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.05_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – Exploring the templates
  prefs: []
  type: TYPE_NORMAL
- en: 'There are around 25 templates that ship with Portainer by default. The templates
    are defined in JSON format. For example, the NGINX template looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There are more options you can add, for example, the MariaDB template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the templates look similar to a Docker Compose file; however,
    this format is only used by Portainer. For the most part, the options are pretty
    self-explanatory, but we should touch upon the **Name** and **Label** options.
  prefs: []
  type: TYPE_NORMAL
- en: 'For containers that typically require options defined by passing custom values
    via environment variables, the **Name** and **Label** options allow you to present
    the user with custom form fields that need to be completed before the container
    is launched, as demonstrated by the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Launching MariaDB using the template'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.06_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.6 – Launching MariaDB using the template
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we have a field where we can enter the root password we would
    like to use for our MariaDB container. Filling this in will take that value and
    pass it as an environment variable, building the following command to launch the
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For more information on app templates, I recommend reviewing the documentation
    – a link to this can be found in the *Further reading* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next thing we are going to look at in the left-hand menu is **Containers**.
    This is where you launch and interact with the containers running on your Docker
    instance. Clicking on the **Containers** menu entry will bring up a list of all
    of the containers, both running and stopped, on your Docker instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Listing the containers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.07_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – Listing the containers
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, I currently have only a single container running, and that just
    happens to be the Portainer one. Rather than interacting with that, let's click
    the **+ Add container** button to launch a container running the cluster application
    we used in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several options on the **Create container** page; these should be
    filled in as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cluster`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`russmckendrick/cluster`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Always pull the image**: On'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Publish all exposed network ports to random host ports**: On'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, add a port mapping from port 8080 on the host to port 80 on the container
    by clicking on **+ publish a new network port**. Your completed form should look
    something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Launching a container'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.08_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – Launching a container
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that''s done, click on **Deploy the container**, and after a few seconds,
    the list of running containers will be returned, where you should see your newly
    launched container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Listing the containers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.09_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – Listing the containers
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the tick box on the left of each container in the list will enable the
    buttons at the top, where you can control the status of your containers. Make
    sure not to **Kill** or **Remove** the Portainer container. Clicking on the name
    of the container in our case cluster will bring up more information on the container
    itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Drilling down into our container'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.10_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – Drilling down into our container
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the information about the container is the same information
    you would get if you were to run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can see the full output of this command by clicking on **Inspect**. You
    will also notice that there are buttons for **Stats**, **Logs**, **Console**,
    and **Attach**, which we will be discussing next.
  prefs: []
  type: TYPE_NORMAL
- en: Stats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Stats** page shows the CPU, memory, and network utilization, as well
    as a list of the processes for the container you are inspecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Viewing the container stats'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.11_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.11 – Viewing the container stats
  prefs: []
  type: TYPE_NORMAL
- en: 'The graphs will automatically refresh if you leave the page open, and refreshing
    the page will zero the graphs and start afresh. This is because Portainer is receiving
    this information from the Docker API using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Each time the page is refreshed, the command is started from scratch as Portainer
    currently does not poll Docker in the background to keep a record of statistics
    for each of the running containers.
  prefs: []
  type: TYPE_NORMAL
- en: Logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next up, we have the **Logs** page. This shows you the results of running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It displays both the STDOUT and STDERR logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12 – Viewing the container logs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.12_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.12 – Viewing the container logs
  prefs: []
  type: TYPE_NORMAL
- en: 'You also have the option of adding timestamps to the output; this is the equivalent
    of running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As we have previously discussed, remember that the timestamps may be different
    depending on your host machine's time zone settings.
  prefs: []
  type: TYPE_NORMAL
- en: Console and Attach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next up, we have `/bin/bash , bin/sh, or /bin/ash`, and also which user to
    connect as – root is the default. While the cluster image has both shells installed,
    I choose to use `/bin/bash`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13 – Opening a session to the container'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.13_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.13 – Opening a session to the container
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the equivalent of running the following command to gain access to your
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the screenshot, the bash process has a PID of 15\. This
    process was created by the `docker container exec` command, and that will be the
    only process that is terminated once you disconnect from your shell session.
  prefs: []
  type: TYPE_NORMAL
- en: If we had launched our container with the `TTY` flag, we could have also used
    the `TTY` of the container rather than spawning a shell to attach to, as we did
    when using **Console**, like the like when attaching on the command line your
    process will stop when disconnect.
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up in the left-hand menu is **Images**. From here, you can manage, download,
    and upload images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – Managing your images'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.14_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.14 – Managing your images
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the page, you have the option of pulling an image. For example,
    simply entering `amazonlinux` into the box and then clicking on **Pull the image**
    will download a copy of the Amazon Linux container image from Docker Hub. The
    command executed by Portainer would be this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find more information about each image by clicking on the image ID;
    this will take you to a page that nicely renders the output of running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – Getting more information on your image'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.15_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – Getting more information on your image
  prefs: []
  type: TYPE_NORMAL
- en: Not only do you get all of the information about the image, but you also get
    options to push a copy of the image to your chosen registry or, by default, Docker
    Hub. You also get a complete breakdown of each of the layers contained within
    the image, showing the command that was executed during the build and the size
    of each layer.
  prefs: []
  type: TYPE_NORMAL
- en: The next two items in the menu allow you to manage networks and volumes; I am
    not going to go into too much detail here as there is not much to them.
  prefs: []
  type: TYPE_NORMAL
- en: Networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, you can quickly add a network using the default bridge driver. Clicking
    on **Advanced settings** will take you to a page with more options. These include
    using other drivers, defining the subnets, adding labels, and restricting external
    access to the network. As with other sections, you can also remove networks and
    inspect existing networks.
  prefs: []
  type: TYPE_NORMAL
- en: Volumes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are not many options here other than adding or removing a volume. When
    adding a volume, you get a choice of drivers as well as being able to fill in
    options to pass to the driver, which allows the use of third-party driver plugins.
    Other than that, there is not much to see here, not even an inspect option.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The events page shows you all of the events from the last 24 hours; you also
    have an option of filtering the results, meaning you can quickly find the information
    you are after:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – Viewing Docker events'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.16_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.16 – Viewing Docker events
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the equivalent of running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This leaves us with one more option to cover.
  prefs: []
  type: TYPE_NORMAL
- en: Host
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The final entry simply shows you the output of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following shows the output of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – Viewing information on the Docker host'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.17_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 – Viewing information on the Docker host
  prefs: []
  type: TYPE_NORMAL
- en: This can be useful if you are targeting multiple Docker instance endpoints and
    need information on the environment the endpoint is running on.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we are moving on to looking at Portainer running on Docker Swarm,
    so now would be a good time to remove the running containers and also the volume
    that was created when we first launched Portainer. You can remove the volume using
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now we have cleaned up, let's look at launching a Docker Swarm cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Portainer and Docker Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we looked at how to use Portainer on a standalone Docker
    instance. Portainer also supports Docker Swarm clusters, and the options in the
    interface adapt to the clustered environment. We should look at spinning up a
    Swarm and then launching Portainer as a service and see what changes.
  prefs: []
  type: TYPE_NORMAL
- en: So let's start by launching a new Docker Swarm cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Swarm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As in the Docker Swarm chapter, we are going to be creating the Swarm locally
    using Multipass; to do this, run the following commands to launch the three nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now install Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Once Docker is installed, initialize and create the cluster:`P=$(multipass info
    node1 | grep IPv4 | a`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a note of the IP address of `node1` by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, log in to the Swarm manager node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You should now be logged into the primary Swarm node and ready to progress.
  prefs: []
  type: TYPE_NORMAL
- en: The Portainer service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a Docker Swarm cluster, we can launch a Portainer stack by
    simply running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give you something that looks like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18 – Launching the Portainer Stack on our Docker Swarm cluster'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.18_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.18 – Launching the Portainer Stack on our Docker Swarm cluster
  prefs: []
  type: TYPE_NORMAL
- en: Once the stack has been created, you should be able to go to the IP address
    of `node1` with `:9000` at the end in your browser; for example, I opened [http://192.168.64.9:9000](http://192.168.64.9:9000).
  prefs: []
  type: TYPE_NORMAL
- en: Swarm differences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As already mentioned, there are a few changes to the Portainer interface when
    it is connected to a Docker Swarm cluster. In this section, we will cover them.
    If a part of the interface is not mentioned, then there is no difference between
    running Portainer in single-host mode or Docker Swarm mode. The first change we
    are going to look at is what changes when you first log in to the newly launched
    Portainer.
  prefs: []
  type: TYPE_NORMAL
- en: Endpoints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing you will have to do when you log in is to select an endpoint.
    As you can see from the following screen, there is a single one called **primary**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19 – Viewing the endpoint'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.19_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.19 – Viewing the endpoint
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the endpoint will take you to the dashboard. We will look at endpoints
    again at the end of the section.
  prefs: []
  type: TYPE_NORMAL
- en: The dashboard and Swarm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the first changes you will notice is that the dashboard now displays
    some information on the Swarm cluster. As you can see in the following screen,
    there is a **Cluster information** section at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20 – Getting a cluster overview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.20_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.20 – Getting a cluster overview
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on **Go to cluster vizualizer** will take you to the Swarm page. This
    gives you a visual overview of the cluster, where the only running containers
    are currently the ones needed to provide and support the Portainer service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21 – Visualizing the cluster'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.21_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.21 – Visualizing the cluster
  prefs: []
  type: TYPE_NORMAL
- en: Stacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The one item we haven''t covered in the left-hand menu is **Stacks**. From
    here, you can launch stacks as we did when we looked at Docker Swarm. In fact,
    let''s take the Docker Compose file we used, which looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Click on the `MobyCounter`. Do not add any spaces or special characters to the
    name as this is used by Docker for. Then click on **Deploy the stack**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once deployed, you will be able to click on **MobyCounter** and manage the
    stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.22 – Launching a stack'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.22_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.22 – Launching a stack
  prefs: []
  type: TYPE_NORMAL
- en: Stacks are a collection of services. Let's take a look at them next.
  prefs: []
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This page is where you can create and manage services; it should already be
    showing several services, including Portainer. So that we don''t cause any problems
    with the running Portainer container, we are going to create a new service. To
    do this, click on the **+ Add Service** button. On the page that loads, enter
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cluster`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`russmckendrick/cluster`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Replicated`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This time, we need to add a port mapping for port `7000` on the host to map
    to port `80` to the container, this is because some of the common ports we have
    been using previously are already taken on the hosts due to the services and stacks
    we have already launched:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.23 – Launching a service'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.23_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.23 – Launching a service
  prefs: []
  type: TYPE_NORMAL
- en: Once you have entered the information, click on the **Create the service** button.
    You will be taken back to the list of services, which should now contain the cluster
    service we just added. You may have noticed that in the **Scheduling mode** section,
    there is an option to scale. Click on it and increase the number of replicas to
    **6** for our **cluster** service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on **cluster** in the **Name** section takes us to an overview of
    the service. As you can see, there is a lot of information on the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.24 – Viewing details on the service'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.24_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.24 – Viewing details on the service
  prefs: []
  type: TYPE_NORMAL
- en: 'You can make a lot of changes to the service on the fly, including placement
    constraints, the restart policy, adding service labels, and more. Right at the
    bottom of the page is a list of the tasks associated with the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.25 – Viewing the tasks'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.25_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.25 – Viewing the tasks
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we have six running tasks, two on each of our three nodes.
    Clicking on **Containers** in the left-hand menu may show something different
    than you expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.26 – Listing all of the containers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.26_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.26 – Listing all of the containers
  prefs: []
  type: TYPE_NORMAL
- en: You can see all of the containers that are running within the cluster, rather
    than just the ones on the node where we deployed Portainer. You may recall that
    when we looked at the cluster visualizer, there were Portainer Agent containers
    running on each of the nodes within the cluster that were launched as part of
    the stack. These are feeding information back, giving us an overall view of our
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to the cluster visualizer now shows us that there are a lot more
    containers running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.27– Viewing the visualizer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.27_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.27– Viewing the visualizer
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at what else has changed now we have moved to running Docker
    Swarm.
  prefs: []
  type: TYPE_NORMAL
- en: App Templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Going to the **App Templates** page now shows stacks instead of containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.28 – Viewing the stack templates'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.28_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.28 – Viewing the stack templates
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are quite a few defaults listed, clicking on one, such
    as **Wordpress** will take you to a page where you simply have to enter a few
    details and then click on the **Deploy the stack** button. Once deployed, you
    should be able to then go to the **Stacks** page and view the port that has been
    assigned to the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.29 – Launching Wordpress'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.29_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.29 – Launching Wordpress
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you know the port, entering the IP address of any of your nodes and the
    port will take you to the application, which, after following the installation
    instructions, looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.30 – WordPress up and running'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.30_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.30 – WordPress up and running
  prefs: []
  type: TYPE_NORMAL
- en: These templates are hosted on GitHub and you can find a link in the *Further
    reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: Removing the cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have finished exploring Portainer on Docker Swarm, you can remove
    the cluster by running the following commands on your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: It is important to remove your running nodes on your local machine, because
    if you don't, they will continue to run and consume resources.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That concludes our deep dive with Portainer. As you can see, Portainer is very
    powerful, yet simple to use, and will only continue to grow and integrate more
    of the Docker ecosystem as features are released. With Portainer, you can do a
    lot of manipulation with not only your hosts but also the containers and services
    running on single or cluster hosts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at another container clustering solution
    supported by Docker called Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On a macOS or Linux machine, what is the path to mount the Docker socket file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default port Portainer runs on?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: You can use Docker Compose files as application templates.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: The stats shown in Portainer are only real time, you can''t
    view historical data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find more information on Portainer here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Main website: [https://www.portainer.io](https://www.portainer.io)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Portainer on GitHub: [https://github.com/portainer/](https://github.com/portainer/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Latest documentation: [https://portainer.readthedocs.io/en/latest/index.html](https://portainer.readthedocs.io/en/latest/index.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Template documentation: [https://portainer.readthedocs.io/en/latest/templates.html](https://portainer.readthedocs.io/en/latest/templates.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Templates: [https://github.com/portainer/templates](https://github.com/portainer/templates)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
