- en: Assessments
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章
- en: 'b and c: We can run more than one process per container, but it is not recommended
    because Docker Engine will only manage the main container process. We will need
    to manage additional logic between processes to start and stop everything at once.
    It is not easy and you can leave "zombie" processes in your hosts. Microservices
    are based on minimal functionality for each application component, which fits
    with containers very well.'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b 和 c: 我们可以在每个容器中运行多个进程，但不推荐这样做，因为 Docker 引擎只会管理主容器进程。我们需要在进程之间管理额外的逻辑，才能一次性启动和停止所有进程。这并不容易，可能会在主机上留下“僵尸”进程。微服务基于每个应用组件的最小功能，这与容器非常契合。'
- en: 'b: Control groups, or cgroups, will manage the host resources provided to each
    container, but it is very important to understand that, by default, containers
    will run with unlimited resources.'
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b: 控制组（cgroups）将管理提供给每个容器的主机资源，但非常重要的一点是，默认情况下，容器会以无限制的资源运行。'
- en: 'a and b: Containers will run as root unless the source image has a non-root
    user definition or we specify a non-root user upon container creation. User namespaces
    allow us to use the root inside containers, although a real user outside the container
    can have a non-root ID. This is useful when processes require UID 0 to work.'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a 和 b: 容器默认会以 root 用户身份运行，除非源镜像定义了非 root 用户，或者我们在创建容器时指定了非 root 用户。用户命名空间允许我们在容器内使用
    root 权限，尽管容器外的真实用户可以拥有非 root 用户 ID。这在进程需要 UID 0 才能工作时非常有用。'
- en: 'd. All of the above sentences are true: Windows hosts will run two different
    types of isolation. We can run Linux containers on Windows, but this is not true
    in reverse.'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'd: 以上所有句子都是正确的：Windows 主机将运行两种不同类型的隔离。我们可以在 Windows 上运行 Linux 容器，但反过来则不成立。'
- en: 'a, b, and c: We can use `systemd` unit files or `/etc/docker/daemon.json` to
    configure the Docker daemon on Linux. On Windows hosts, `daemon.json` is located
    in the `%programdata%\docker\config\` directory. In both cases, Docker daemon
    remote access is not secure by default.'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a、b 和 c: 我们可以使用 `systemd` 单元文件或 `/etc/docker/daemon.json` 来配置 Linux 上的 Docker
    守护进程。在 Windows 主机上，`daemon.json` 位于 `%programdata%\docker\config\` 目录。在这两种情况下，Docker
    守护进程的远程访问默认不安全。'
- en: Chapter 2
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章
- en: 'b: The image ID is the only identification of uniqueness when listing or managing
    images. We can have one ID with many names, including the registry part, and tags.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b: 镜像 ID 是列出或管理镜像时唯一的标识。我们可以有一个 ID，包含多个名称，包括注册表部分和标签。'
- en: 'd: All the methods described are valid.'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'd: 所有描述的方法都是有效的。'
- en: 'b: Using a Dockerfile is a reproducible method as we describe all actions to
    add software, execute commands, add files, and more, in order to build a new image.
    We can automate and use templates to build images with Dockerfiles and this is
    the preferred method.'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b: 使用 Dockerfile 是一种可重现的方法，因为我们会描述所有添加软件、执行命令、添加文件等操作，以构建一个新的镜像。我们可以通过自动化和使用模板来构建镜像，这也是首选的方法。'
- en: 'a and c: Only `RUN`, `CMD`, and `ENTRYPOINT` instructions admit shell and exec
    formats.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a 和 c: 只有 `RUN`、`CMD` 和 `ENTRYPOINT` 指令支持 shell 和 exec 格式。'
- en: 'a: Using the shell format, the container main process, as defined by the `ENTRYPOINT`
    key, cannot be modified with arguments.'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a: 使用 shell 格式时，容器的主进程（由 `ENTRYPOINT` 键定义）无法通过参数进行修改。'
- en: Chapter 3
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章
- en: 'a and c: `build` is only available for image objects, and `destroy` does not
    exist for any object.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a 和 c: `build` 仅适用于镜像对象，`destroy` 对任何对象都不存在。'
- en: 'b: This is not true. The Docker daemon will wait a defined amount of time (10
    seconds, by default) before issuing a `SIGKILL` signal to the container''s main
    process.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b: 这不正确。Docker 守护进程会等待一定的时间（默认是 10 秒），然后才会向容器的主进程发送 `SIGKILL` 信号。'
- en: 'b: `docker kill` will immediately send a `SIGKILL` signal to the container''s
    main process. Not all processes will be killed if they were executed in the background;
    for example, inside the container. It can leave zombie processes if they do not
    have parent-child dependencies. As we learned, containers must be removed by hand
    and `docker kill` will not remove them.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b: `docker kill` 会立即向容器的主进程发送 `SIGKILL` 信号。如果进程是在后台执行的，比如在容器内部，并非所有进程都会被杀死。如果这些进程没有父子依赖关系，它们可能会变成僵尸进程。如我们所学，容器必须手动删除，`docker
    kill` 并不会删除它们。'
- en: 'b: `docker container update` will only change the container restart policy
    and its access to host resources.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b: `docker container update` 仅会更改容器的重启策略及其对主机资源的访问权限。'
- en: 'c: We have launched a privileged container; therefore no resource limits will
    be applied, although we have used `-memory` to confine memory usage. The privileged
    mode does not affect the filesystem. It will only modify the main process behavior,
    but in this case, we used a non-root user to create a new file on a directory
    owned by root and, as a result, it could not be created.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'c: 我们已经启动了一个特权容器，因此不会应用资源限制，尽管我们使用了 `-memory` 来限制内存使用。特权模式不会影响文件系统。它只会修改主进程的行为，但在这种情况下，我们使用了非
    root 用户在一个由 root 拥有的目录中创建新文件，结果导致文件无法创建。'
- en: Chapter 4
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章
- en: 'c: Each container will use its own filesystem unless we declare a shared volume
    for them.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'c: 每个容器将使用其自己的文件系统，除非我们为它们声明共享卷。'
- en: 'a, b, and c: There are different types of volumes and it is not only allowed
    on container creation or execution.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a、b 和 c: 有不同类型的卷，并且不仅仅在容器创建或执行时允许使用。'
- en: 'b: Docker volumes can be removed along with their associated container using
    the `--volumes` (or `-v`) option. A Docker volume purge will remove all unused
    volumes; those not associated to any container. But Docker will never remove a
    bind mount volume content (a local directory mounted on a container).'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b: Docker 卷可以通过 `--volumes`（或 `-v`）选项与其关联的容器一起删除。执行 Docker 卷清理将删除所有未使用的卷；即那些没有与任何容器关联的卷。但
    Docker 永远不会删除绑定挂载卷的内容（即挂载到容器上的本地目录）。'
- en: 'c: Only custom bridge networks are attachable after container creation. If
    we create or start a container and we want it to be connected to the default bridge
    network, we need to recreate it and attach it to that network on container creation.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'c: 只有自定义的桥接网络可以在容器创建后附加。如果我们创建或启动一个容器，并希望它连接到默认的桥接网络，我们需要重新创建它并在容器创建时将其连接到该网络。'
- en: 'b: Using `--publish-all` or `-P` will associate a random port between `32768`
    and `65535` to internal container port `80`. A NAT rule will automatically be
    created by the Docker daemon to allow this communication. You can disable the
    Docker daemon iptables management, but it is enabled by default.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b: 使用 `--publish-all` 或 `-P` 将把 `32768` 到 `65535` 之间的随机端口关联到容器的内部端口 `80`。Docker
    守护进程将自动创建一个 NAT 规则以允许这种通信。你可以禁用 Docker 守护进程的 iptables 管理，但默认是启用的。'
- en: Chapter 5
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章
- en: 'a: Docker Compose will run all application components just in one host. We
    will also use `docker-compose` files for deploying Swarm orchestrated applications
    with their components distributed on different hosts, but that requires a cluster
    running. In that case, we will not use the `docker-compose` binary to deploy the
    application; only the definition file will be valid and we will use it with the
    `docker stack` action. In Docker Swarm, we deploy swarm services, not containers.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a: Docker Compose 会在单一主机上运行所有应用组件。我们还将使用 `docker-compose` 文件来部署通过 Swarm 协调的应用程序，这些应用程序的组件分布在不同的主机上，但这需要一个正在运行的集群。在这种情况下，我们不会使用
    `docker-compose` 二进制文件来部署应用程序；只有定义文件有效，我们将使用 `docker stack` 操作。 在 Docker Swarm
    中，我们部署的是 Swarm 服务，而不是容器。'
- en: 'd: Docker Compose provides all required actions to build, share, and deploy
    multi-container applications.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'd: Docker Compose 提供了所有所需的操作来构建、共享和部署多容器应用程序。'
- en: 'a and c: Docker Compose will review whether project images are present in the
    host. If they are not, the Docker daemon will try to download all not-present
    ones. Once the Docker daemon has all the required images, it will start all project
    containers and our terminal will be attached to containers'' standard and error
    output unless the `--detach` or `-d` argument is used.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a 和 c: Docker Compose 会检查项目镜像是否存在于主机中。如果没有，Docker 守护进程将尝试下载所有缺失的镜像。一旦 Docker
    守护进程拥有所有所需的镜像，它将启动所有项目容器，除非使用 `--detach` 或 `-d` 参数，否则我们的终端将附加到容器的标准输出和错误输出。'
- en: 'a: Docker Compose will allow us to scale the number of containers associated
    with a service. By default, Docker Compose will create a bridge network for our
    deployment, therefore an internal DNS will be associated and will manage all application
    IP addresses and names. In scaled services, we will receive one of the IP addresses
    of the replicas each time we ask for the defined service name. It uses round-robin
    DNS resolution.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a: Docker Compose 将允许我们扩展与某个服务关联的容器数量。默认情况下，Docker Compose 会为我们的部署创建一个桥接网络，因此一个内部
    DNS 将会关联并管理所有应用程序的 IP 地址和名称。在扩展服务中，每次我们请求已定义的服务名称时，我们将收到一个副本的 IP 地址。它使用轮询 DNS
    解析。'
- en: 'd: In this case, we could say that answer c is almost right, but it is incomplete.
    Docker Compose will remove all containers. If containers were running, they will
    be stopped before they are deleted. All associated resources created during the
    application execution will also be removed.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'd: 在这种情况下，我们可以说答案c几乎正确，但它不完整。Docker Compose将删除所有容器。如果容器正在运行，它们将在删除之前被停止。所有在应用执行过程中创建的相关资源也将被移除。'
- en: Chapter 6
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章
- en: 'c: Docker Content Trust is based on **The Update Framework** (**TUF**) and
    this framework was created to ensure the release of content between updates using
    different keys. It is possible to validate the trustfulness of a package or any
    other content using TUF.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'c: Docker内容信任基于**更新框架**（**TUF**），该框架旨在通过使用不同的密钥确保在更新之间发布内容。可以使用TUF验证包或任何其他内容的可信度。'
- en: 'a and d: Docker Content Trust will use Root, Targets, Snapshot, and Timestamp
    keys to ensure content.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a和d: Docker内容信任将使用Root、Targets、Snapshot和Timestamp密钥来确保内容。'
- en: 'c: We ensure image freshness using Content Trust, but it is true that we cannot
    ensure that the image tagged as "latest" in a given repository is actually the
    latest one created. We can only ensure that the image tagged as "latest" will
    be used. It is always recommended to use tags avoiding the use of "latest".'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'c: 我们使用内容信任来确保镜像的新鲜度，但确实无法确保在给定仓库中标记为“latest”的镜像实际上是最新创建的镜像。我们只能确保将使用标记为“latest”的镜像。始终建议使用标签，避免使用“latest”。'
- en: 'b: We tried to sign a version of a non-public write repository. We are not
    allowed to modify root repositories at docker.io.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b: 我们尝试签署一个非公开的写仓库版本。我们不被允许修改docker.io上的根仓库。'
- en: 'd: We can recover the key if we have a backup. If it is not possible, we can
    generate a new one or let Docker generate one for us on first signing. Although
    we will be able to sign images after the new key has been generated, all our previously
    signed images will be untrusted because we changed our signature.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'd: 如果我们有备份，可以恢复密钥。如果不可能，我们可以生成一个新的密钥，或者让Docker在首次签署时为我们生成一个新的密钥。尽管在生成新密钥后我们能够签署镜像，但所有先前签署的镜像将被视为不受信任，因为我们更改了签名。'
- en: Chapter 7
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章
- en: 'a: Orchestrators will not know anything about your application logic. On the
    other hand, we have quickly reviewed the interfaces that use orchestration to
    ensure that containers get the appropriate volumes of data on distributed environments.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a: 编排器将不了解你的应用逻辑。另一方面，我们已经快速审查了使用编排的接口，以确保容器在分布式环境中获得适当的数据量。'
- en: 'c: Orchestrators will not manage application data, nor do they know anything
    about your application logic. The orchestrator will take care of the application
    components'' health and will run a new instance if one of the required instances
    dies.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'c: 编排器不会管理应用数据，也不了解你的应用逻辑。编排器将负责应用组件的健康状况，如果某个必需的实例死亡，它会启动一个新的实例。'
- en: 'a and b: Distributed environments will help us to deploy applications with
    high availability and improved performance. But on the other hand, we will have
    new challenges because we need to be able to distribute application logic and
    components'' interactions on different nodes.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a和b: 分布式环境将帮助我们以更高的可用性和更好的性能部署应用程序。但另一方面，我们将面临新的挑战，因为我们需要能够在不同节点上分布应用逻辑和组件的交互。'
- en: 'a and b: Answers a and b are correct, while c is not, because application components
    can be managed one at a time. Therefore, upgrades will only impact one application
    component if the application logic knows how to manage the situation.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a和b: 答案a和b是正确的，而c是错误的，因为应用组件可以逐一管理。因此，如果应用逻辑知道如何管理情况，升级只会影响一个应用组件。'
- en: 'c: All sentences are correct. We learned that we can define container limits
    and the required resources. Orchestrators will review these specifications and
    will deploy them on nodes with enough resources to ensure their correct execution.
    We can guide orchestration to choose labeled nodes, for example, to ensure application
    disk I/O, along with many other features. Each orchestrator will manage different
    rules and workflows to choose the best node for each workload.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'c: 所有句子都是正确的。我们了解到，可以定义容器限制和所需资源。编排器会审查这些规格，并将在资源充足的节点上部署它们，以确保其正确执行。我们可以引导编排选择带有标签的节点，例如，以确保应用程序的磁盘I/O，以及许多其他功能。每个编排器将管理不同的规则和工作流，以选择最适合每个工作负载的节点。'
- en: Chapter 8
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章
- en: 'a: Docker Swarm is built into Docker Engine, but we have to enable Swarm mode
    for it to work. We can deploy other orchestrators such as Kubernetes, but it will
    involve extra work to deploy them. Orchestrators allow us to deploy applications
    on clusters, hence Swarm will deploy distributed applications.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a: Docker Swarm是内置于Docker引擎中的，但我们需要启用Swarm模式才能使其工作。我们可以部署其他编排器，如Kubernetes，但这将需要额外的工作来部署它们。编排器使我们能够在集群上部署应用程序，因此Swarm将部署分布式应用程序。'
- en: 'd: Docker Swarm provides service discovery via DNS, internal load balancing
    for services and their tasks, and overlay networking for services and containers
    distributed on different nodes.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'd: Docker Swarm通过DNS提供服务发现，为服务及其任务提供内部负载均衡，并为分布在不同节点上的服务和容器提供覆盖网络。'
- en: 'b: Each cluster has only one leader node. The leader is elected from the available
    managers. When we initialize a cluster, the first node will be the leader until
    a new election is required. All managers will run workloads unless we specifically
    avoid them using service constraints.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b: 每个集群只有一个领导节点。领导节点是从可用的管理节点中选出的。当我们初始化集群时，第一个节点将是领导节点，直到需要进行新的选举为止。除非我们通过服务约束特别避免它们，否则所有管理节点都会运行工作负载。'
- en: 'd: Roles can be changed as we require, such as for maintenance, for example.
    We need to always maintain the defined number of odd managers to avoid cluster
    instability.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'd: 角色可以根据需要进行更改，例如进行维护时。我们需要始终保持定义的奇数个管理节点，以避免集群不稳定。'
- en: 'a and b: By default, Docker Swarm will deploy stacks on its own network, unless
    others are specified. Everything related to the application to be deployed must
    be configured in the Docker Compose stack file. We can add externally created
    components, but they must exist before the stack is deployed and we will set them
    as external in the infrastructure-as-code stack file.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a和b: 默认情况下，Docker Swarm将在其自身的网络上部署堆栈，除非另行指定。与待部署应用程序相关的所有内容必须在Docker Compose堆栈文件中进行配置。我们可以添加外部创建的组件，但它们必须在堆栈部署之前就存在，并且我们将它们设置为外部组件，在基础设施即代码的堆栈文件中进行配置。'
- en: Chapter 9
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章
- en: 'a and b: Kubernetes requires etcd to work. Most of the Kubernetes deployment
    solutions will deploy etcd for you, but it is an external application and therefore
    it is up to you to manage and ensure that the key-value solution provides high
    availability. Kubernetes internal networking will work out of the box, but communications
    between components deployed on different hosts rely on external plugins (the CNI
    standard). Therefore, we will need to choose and deploy ourselves a solution to
    provide this kind of communication.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a和b: Kubernetes需要etcd才能工作。大多数Kubernetes部署解决方案会为你部署etcd，但它是一个外部应用程序，因此由你来管理并确保该键值存储解决方案提供高可用性。Kubernetes的内部网络开箱即用，但部署在不同主机上的组件之间的通信依赖于外部插件（CNI标准）。因此，我们需要选择并部署一个解决方案来提供这种通信。'
- en: 'b and c: We will deploy pods in Kubernetes, hence these are the minimum unit
    of deployment. We can deploy more than one container in a pod. The container density
    is higher in Kubernetes. Scaling pods will replicate all their components at once.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'b和c: 我们将在Kubernetes中部署pods，因此它们是最小的部署单元。我们可以在一个pod中部署多个容器。Kubernetes中的容器密度较高。扩展pod时，将一次性复制所有组件。'
- en: 'd: All sentences are true. All containers in a pod share the same IP address
    and localhost. They also share pod volumes. **Container Network Interface** (**CNI**)
    is not required for connections between pods running on the same host. They all
    are accessible using their virtual IP addresses.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'd: 所有句子都正确。一个pod中的所有容器共享相同的IP地址和localhost，它们也共享pod卷。在同一主机上运行的pod之间的连接不需要**容器网络接口**（**CNI**）。它们都可以通过虚拟IP地址进行访问。'
- en: 'a, b, and c: ReplicaSets allow us to manage replicated environments. Deployments
    create ReplicaSets and allow us to scale application pods both up and down. They
    will also maintain the application health based on the required running pods.
    DaemonSets will ensure one replica on each cluster node.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a、b和c: ReplicaSets使我们能够管理复制的环境。部署将创建ReplicaSets，并允许我们向上或向下扩展应用程序的pods。它们还将根据所需的运行pods来维持应用程序的健康状态。DaemonSets将确保每个集群节点上有一个副本。'
- en: 'a: The ClusterIP service type will only provide internal access to a service.
    The assigned IP is not available from the cluster nodes.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'a: ClusterIP服务类型仅提供对服务的内部访问。分配的IP地址无法从集群节点访问。'
- en: Chapter 10
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章
- en: 'c: Docker Machine is maintained by the Docker community.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'c: Docker Machine由Docker社区维护。'
- en: 'a: Docker Enterprise provides a supported and enterprise-ready CaaS platform,
    with supported Kubernetes, **Universal Control Plane** (**UCP**), and **Docker
    Trusted Registry** (**DTR**, based on the Docker Registry community). We can deploy
    Docker Swarm in production even with Docker support using Docker Enterprise Engine.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a：Docker Enterprise 提供了一个受支持的企业级 CaaS 平台，支持 Kubernetes、**通用控制平面**（**UCP**）和
    **Docker 受信注册表**（**DTR**，基于 Docker Registry 社区）。即使使用 Docker Enterprise Engine，我们也可以在生产环境中部署
    Docker Swarm 并获得 Docker 的支持。
- en: 'a, b, and d: Docker Enterprise provides Kubernetes out of the box when we deploy
    UCP – we do not need to install Kubernetes manually.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a、b 和 d：Docker Enterprise 在我们部署 UCP 时提供 Kubernetes 开箱即用——我们不需要手动安装 Kubernetes。
- en: 'd: We will use fixed IP addresses for all components. We will use an external
    load balancer to forward traffic to all manager nodes for UCP and all worker nodes
    with DTR running for the registry. Forwarding traffic to just one node will not
    provide high availability if it fails. The Docker UCP installation will deploy
    Calico by default for Kubernetes, but we will need to review `pod-cidr` and `service-cidr`
    to ensure that the subnets defined by default will be valid in our environment.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d：我们将为所有组件使用固定 IP 地址。我们将使用外部负载均衡器将流量转发到所有管理节点的 UCP 和所有运行 DTR 的工作节点的注册表。如果流量只转发到一个节点，则在该节点出现故障时将无法提供高可用性。Docker
    UCP 安装将默认为 Kubernetes 部署 Calico，但我们需要查看 `pod-cidr` 和 `service-cidr`，确保默认定义的子网在我们的环境中有效。
- en: 'c: To provide high availability for workloads, we will deploy at least two
    Linux nodes. Although it is possible to run DTR on UCP managers, it is not recommended
    because managers need to have enough resources for control plane tasks and image
    scanning can affect cluster stability. We will also need to choose different ports
    for the applications'' frontends because both use port `443`.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c：为了提供工作负载的高可用性，我们将部署至少两个 Linux 节点。虽然可以在 UCP 管理节点上运行 DTR，但不推荐这样做，因为管理节点需要足够的资源来执行控制平面任务，而镜像扫描可能会影响集群的稳定性。我们还需要为应用程序的前端选择不同的端口，因为两者都使用端口
    `443`。
- en: Chapter 11
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章
- en: 'b: As we have learned, Docker Enterprise Engine is required to install UCP.
    It will not be installed automatically for us. We can use Web UI, the UCP bundle,
    and the UCP API to manage our workloads and cluster configurations. UCP''s RBAC
    system will manage authorizations, but it is true that it will also authenticate
    users if no external authorization source is configured or it is not available.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b：正如我们所学，Docker Enterprise Engine 是安装 UCP 所必需的，它不会为我们自动安装。我们可以使用 Web UI、UCP
    包和 UCP API 来管理我们的工作负载和集群配置。UCP 的 RBAC 系统将管理授权，但如果没有配置外部授权源或外部授权源不可用，它也会认证用户。
- en: 'b and d: Docker provides a complete UCP backup and restore solution with the
    `docker/ucp` image, but remember that we should take care of Docker Swarm''s filesystem
    because it is not part of UCP''s backup. We should use the appropriate `docker/ucp`
    image release for our environment. In fact, we will use the same installed release
    for any action other than upgrading. UCP removal can be executed from the `docker/ucp`
    image and this will remove UCP components from all nodes in the cluster. We should
    then remove the `docker/ucp` image. The upgrade process can be achieved automatically
    using the `docker/ucp` image, but this may impact your users. We will usually
    upgrade UCP managers automatically and then execute upgrade steps manually on
    worker nodes.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b 和 d：Docker 提供了一个完整的 UCP 备份和恢复解决方案，使用 `docker/ucp` 镜像，但请记住，我们需要关注 Docker Swarm
    的文件系统，因为它不包含在 UCP 的备份中。我们应根据我们的环境使用合适的 `docker/ucp` 镜像版本。实际上，除了升级以外，我们将使用相同的安装版本执行其他任何操作。可以通过
    `docker/ucp` 镜像执行 UCP 卸载，这将从集群中所有节点移除 UCP 组件。然后，我们应该移除 `docker/ucp` 镜像。升级过程可以使用
    `docker/ucp` 镜像自动完成，但这可能会影响用户。我们通常会先自动升级 UCP 管理节点，然后在工作节点上手动执行升级步骤。
- en: 'a and b: We can use `--controller-port` and:`-kube-apiserver-port` to modify
    the UCP controller and Kubernetes'' API server ports. We can also isolate the
    control plane from the data plane by choosing different interfaces in multihomed
    hosts using `--data-path-addr`. **Subject Alias Names** (**SANs**) will add alias
    names to UCP''s certificate. We can add all required aliases for our environment
    using `--san` multiple times.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a 和 b：我们可以使用 `--controller-port` 和 `-kube-apiserver-port` 来修改 UCP 控制器和 Kubernetes
    的 API 服务器端口。我们还可以通过在多宿主机上选择不同的接口，使用 `--data-path-addr` 来隔离控制平面和数据平面。**主题别名名称**
    (**SANs**) 将为 UCP 的证书添加别名。我们可以通过多次使用 `--san` 来为我们的环境添加所有需要的别名。
- en: 'a, c, and d: UCP deploys a Kubernetes cluster with high availability on top
    of Docker Swarm. As UCP is deployed on Docker Swarm, we will need at least three
    nodes to provide high availability. All managers will run the same control plane
    processes and an external load balancer is required to distribute access between
    them. This requires a transparent proxy configuration to allow managers to manage
    encrypted communications. We will use the `/_ping` endpoint to verify manager
    nodes'' health and it can be used on load balancers as a backend health check.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a、c 和 d：UCP 在 Docker Swarm 上部署一个具有高可用性的 Kubernetes 集群。由于 UCP 部署在 Docker Swarm
    上，我们至少需要三个节点来提供高可用性。所有管理节点将运行相同的控制平面进程，并且需要一个外部负载均衡器来分配它们之间的访问。这需要透明代理配置，以允许管理节点管理加密通信。我们将使用
    `/_ping` 端点来验证管理节点的健康状况，并可以在负载均衡器上用作后端健康检查。
- en: 'a and c: UCP provides **None**, **View Only**, **Restricted Control**, **Scheduler**,
    and **Full Control**. We can create new roles, but there are no privileged or
    administrator roles by default. Docker Enterprise administrators are not defined
    as roles. There is a checkbox in the user''s properties to enable this feature.
    Only administrators can create grants, users, teams, organizations, and collections.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a 和 c：UCP 提供 **None**、**View Only**、**Restricted Control**、**Scheduler** 和 **Full
    Control**。我们可以创建新的角色，但默认情况下没有特权或管理员角色。Docker Enterprise 管理员并不作为角色定义。用户属性中有一个复选框可以启用此功能。只有管理员才能创建授权、用户、团队、组织和集合。
- en: Chapter 12
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章
- en: 'b and c: There are two labels that are always required. We will need to ensure
    Interlock forwards the service''s requests using `com.docker.lb.hosts` and `com.docker.lb.port`.
    These will have all the required information, but `com.docker.lb.network` is recommended
    and required if the service''s instances are attached to more than one network.
    We need to specify which network should be used as an ingress.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b 和 c：始终需要两个标签。我们需要确保 Interlock 使用 `com.docker.lb.hosts` 和 `com.docker.lb.port`
    转发服务的请求。这些标签将包含所有必要的信息，但如果服务的实例连接到多个网络，推荐并要求使用 `com.docker.lb.network`。我们需要指定应该使用哪个网络作为入口。
- en: 'b: The Interlock solution is based on a main process named `interlock`, a process
    for managing external proxy services and configurations, and an `interlock-proxy`
    service that will run inside the Docker Enterprise environment if no external
    load balancer is specified. These three processes run as services within Docker
    Swarm and they are prefixed with `ucp-`. `ucp-interlock-controller` does not exist.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b：Interlock 解决方案基于一个名为 `interlock` 的主进程，负责管理外部代理服务和配置，还有一个 `interlock-proxy`
    服务，如果没有指定外部负载均衡器，该服务将在 Docker Enterprise 环境内运行。这三个进程作为服务在 Docker Swarm 中运行，并且它们的前缀是
    `ucp-`。`ucp-interlock-controller` 并不存在。
- en: 'd: By default, only the `ucp-interlock` service will be located by the node''s
    roles. All other components can run anywhere. We will use location constraints
    to run the `ucp-interlock-proxy` and `ucp-interlock-extension` components on worker
    nodes.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d：默认情况下，只有 `ucp-interlock` 服务会根据节点的角色来定位。所有其他组件可以在任何地方运行。我们将使用位置约束在工作节点上运行 `ucp-interlock-proxy`
    和 `ucp-interlock-extension` 组件。
- en: 'a, b, and c: Interlock allows us to either manage SSL/TLS tunnels on `ucp-interlock-proxy`
    or configure it as a transparent proxy. In this case, our services'' backends
    should manage SSL/TLS certificates. Interlock interacts with the Docker API and
    all changes will be updated automatically on Interlock''s proxy component. Interlock
    is a Layer 7 load balancer; reverse proxy, TCP, and UDP protocols should be published
    using a routing mesh or host mode.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a、b 和 c：Interlock 允许我们管理 `ucp-interlock-proxy` 上的 SSL/TLS 隧道，或将其配置为透明代理。在这种情况下，我们的服务后端应该管理
    SSL/TLS 证书。Interlock 与 Docker API 进行交互，所有更改将自动更新到 Interlock 的代理组件。Interlock 是一个七层负载均衡器；反向代理、TCP
    和 UDP 协议应该通过路由网格或主机模式发布。
- en: 'a and b: Ingress controllers and Interlock have a common logic, using a few
    published ports. They will manage all ingress traffic using load balancing and
    reverse proxy features. We will not publish applications directly. No application''s
    service has to be exposed directly. The ingress controllers (and Interlock) will
    be exposed and they will route requests to the application''s defined services.
    Interlock has to interact with the application''s services, hence it has to connect
    to their networks. This will happen automatically. Docker Enterprise will connect
    the `interlock-proxy` service to our application''s networks.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a 和 b：Ingress 控制器和 Interlock 具有相同的逻辑，使用少数公开端口。它们将使用负载均衡和反向代理功能来管理所有的入口流量。我们不会直接发布应用程序。没有应用程序的服务需要直接暴露。Ingress
    控制器（和 Interlock）将被暴露，并且它们将把请求路由到应用程序定义的服务。Interlock 需要与应用程序的服务交互，因此它必须连接到这些服务的网络。这将自动发生。Docker
    Enterprise 将把 `interlock-proxy` 服务连接到我们的应用程序网络。
- en: Chapter 13
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章
- en: 'b: This list only shows one valid feature. DTR provides repository mirroring.
    Neither repository load balancing nor repository signing are valid features. We
    do not sign repositories. We sign repositories'' images/tags.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b：此列表仅显示一个有效功能。DTR 提供仓库镜像。既不提供仓库负载均衡，也不提供仓库签名功能。我们不对仓库进行签名。我们对仓库的镜像/标签进行签名。
- en: 'b: DTR does not manage images'' data with high availability. Deploying more
    than one replica will provide high availability for DTR''s processes. DTR replication
    requires data sharing between replicas, but we must include third-party solutions
    to provide high availability for our storage.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b：DTR 不管理镜像的数据高可用性。部署多个副本将为 DTR 的进程提供高可用性。DTR 的复制需要副本之间的数据共享，但我们必须包含第三方解决方案来为我们的存储提供高可用性。
- en: 'a and b: The DTR installation runs the `dtr-garant` and `dtr-jobrunner` containers.
    The first will manage user authentication, while jobrunner will execute DTR''s
    maintenance tasks to remove unreferenced layers. `dtr-notary-server` and `dtr-notary-signer`
    will be deployed within DTR to manage Docker Content Trust metadata.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a 和 b：DTR 安装会运行 `dtr-garant` 和 `dtr-jobrunner` 容器。第一个容器将管理用户身份验证，而 jobrunner
    将执行 DTR 的维护任务，以删除未引用的层。`dtr-notary-server` 和 `dtr-notary-signer` 将部署在 DTR 中，以管理
    Docker 内容信任元数据。
- en: 'd: All the question''s sentences describe required steps for deploying DTR
    with high availability.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d：所有问题的句子都描述了部署具有高可用性的 DTR 所需的步骤。
- en: 'a: DTR backups do not include images'' layers. This can constitute a great
    amount of data and is the key to recovering your images. You should prepare third-party
    solutions for this data. On the other hand, repository metadata, RBAC configurations,
    and images'' signatures will be stored within your backup TAR file.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a：DTR 备份不包括镜像的层。这可能包含大量数据，而这些数据是恢复镜像的关键。你应该为这些数据准备第三方解决方案。另一方面，仓库元数据、RBAC 配置和镜像的签名将存储在你的备份
    TAR 文件中。
- en: Exam answers
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考试答案
- en: 1 - b and c
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 1 - b 和 c
- en: 2 - c
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 2 - c
- en: 3 - b
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 3 - b
- en: 4 - a, b, and c
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 4 - a、b 和 c
- en: 5 - b
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 5 - b
- en: 6 - c
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 6 - c
- en: 7 - a
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 7 - a
- en: 8 - a, c, and d
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 8 - a、c 和 d
- en: 9 - c
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 9 - c
- en: 10 - a and c
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 10 - a 和 c
- en: 11 - b
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 11 - b
- en: 12 - a
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 12 - a
- en: 13 - d
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 13 - d
- en: 14 - b
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 14 - b
- en: 15 - c
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 15 - c
- en: 16 - a, b, and c
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 16 - a、b 和 c
- en: 17 - a, b, and c
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 17 - a、b 和 c
- en: 18 - a
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 18 - a
- en: 19 - b and c
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 19 - b 和 c
- en: 20 - a and b
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 20 - a 和 b
- en: 21 - d
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 21 - d
- en: 22 - c
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 22 - c
- en: 23 - b, c, and d
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 23 - b、c 和 d
- en: 24 - c and d
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 24 - c 和 d
- en: 25 - a, c, and d
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 25 - a、c 和 d
- en: 26 - a and c
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 26 - a 和 c
- en: 27 - c
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 27 - c
- en: 28 - c
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 28 - c
- en: 29 -c
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 29 - c
- en: 30 - b
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 30 - b
- en: 31 - d
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 31 - d
- en: 32 - a and b
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 32 - a 和 b
- en: 33 - d
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 33 - d
- en: 34 - b and c
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 34 - b 和 c
- en: 35 - d
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 35 - d
- en: 36 - b
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 36 - b
- en: 37 - a
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 37 - a
- en: 38 - c
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 38 - c
- en: 39 - c
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 39 - c
- en: 40 - a and b
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 40 - a 和 b
- en: 41 - a and b
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 41 - a 和 b
- en: 42 - b and c
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 42 - b 和 c
- en: 43 - a and c
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 43 - a 和 c
- en: 44 - c
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 44 - c
- en: 45 - a and c
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 45 - a 和 c
- en: 46 - b
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 46 - b
- en: 47 - d
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 47 - d
- en: 48 - b, c, and d
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 48 - b、c 和 d
- en: 49 - a and b
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 49 - a 和 b
- en: 50 - a
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 50 - a
- en: 51 - a
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 51 - a
- en: 52 - a, b, and c
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 52 - a、b 和 c
- en: 53 - b
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 53 - b
- en: 54 - a
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 54 - a
- en: 55 - c
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 55 - c
- en: 56 - b
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 56 - b
- en: 57 - c and d
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 57 - c 和 d
- en: 58 - d
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 58 - d
- en: 59 - d
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 59 - d
- en: 60 - b
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 60 - b
- en: 61 - a
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 61 - a
- en: 62 - b and c
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 62 - b 和 c
- en: 63 - b
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 63 - b
- en: 64 - b
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 64 - b
- en: 65 - a
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 65 - a
- en: 66 - a, b, and c
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 66 - a、b 和 c
- en: 67 - b
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 67 - b
- en: 68 - a and b
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 68 - a 和 b
- en: 69 - a
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 69 - a
- en: 70 - b and d
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 70 - b 和 d
