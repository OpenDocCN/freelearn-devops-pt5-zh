- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Expanding Your Automation Landscape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to find and apply automation at the right place and at the right
    level. Usually, when searching for automation use cases, people make mistakes
    by automating the inappropriate tasks and end up wasting money, effort, and time.
    This is the reason why we need to analyze the environment and day-to-day tasks
    and find the best tasks as automation candidates. We can use your statistical
    data such as event tickets, customer change requests, and project tasks to find
    this information.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding your automation use cases in your day-to-day work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation feasibility and usability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Involving teams in the automation journey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Ansible dynamic inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start with standard methods to analyze the tasks to find the highest
    number of tasks and check the feasibility of automation. We will explore the integration
    opportunities between **IT service management** (**ITSM**) tools and Ansible Automation
    Platform. We will also practice the Ansible dynamic inventory with public clouds
    such as **Amazon Web Services** (**AWS**) and explore the importance of Ansible
    host variables and group variables.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements to proceed with this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A Linux machine as an Ansible control node (with internet access)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One or more Linux machines as managed nodes with Red Hat repositories configured
    (if you are using non-RHEL machines, then make sure you have appropriate repositories
    configured to get packages and updates)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic knowledge of the AWS platform and an AWS account with one or more test
    machines created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible artifacts, playbooks, commands, and snippets for this chapter
    can be found in the GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-05](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-05).
  prefs: []
  type: TYPE_NORMAL
- en: Finding your automation use cases in your day-to-day work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We all know that every member of staff working in an IT environment is executing
    some tasks and most of the time, they repeat the same job every day. Looking around,
    we can see many examples, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A system engineer is building servers and virtual machines, installing packages,
    patching old systems, and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network engineer is configuring the new network device and firewall devices,
    configuring ports and **virtual local area networks** (**VLANs**) based on requests,
    patching the device firmware, and many other things.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A developer is struggling to build his coding environment every time there is
    a new version of the programming language or software library. They are also spending
    a lot of time testing the code and waiting for test results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A storage administrator is spending their valuable time provisioning the disk
    space and configuring the storage devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database administrator is complaining about the provisioning delay of a new
    database server and issues with network or system readiness.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database user is struggling with the delay on a simple database password resetting
    task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The operation team is struggling with the flood of events and alerts and spending
    their time filtering out the false alerts, resulting in unproductive work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security team is working hard to fix the violations and make sure the systems
    are compliant with the security standards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list is not comprehensive; you will be able to find many additional tasks
    and scenarios in your workplace as well.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing the tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can take your daily or weekly task reports or details from your ITSM systems
    such as ServiceNow, Remedy, and Jira. For this scenario, we will use the very
    common tasks undertaken by a platform team, but you can use any tasks, team, or
    methods for this assessment. We have extracted a report for a week, as shown in
    *Figure 5.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Sample task report ](img/B18383_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Sample task report
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see on the chart (*Figure 5.2*) the most critical tasks that are taking
    the most time and effort of systems engineers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Weekly task summary ](img/B18383_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Weekly task summary
  prefs: []
  type: TYPE_NORMAL
- en: Based on this very small chart, we can almost identify the tasks needed to automate
    and save time.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we check some more details, we can see the source of the task requests (*Figure
    5.3*) and further scope and opportunities for automation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Weekly task source summary ](img/B18383_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Weekly task source summary
  prefs: []
  type: TYPE_NORMAL
- en: Most of the ITSM tools can integrate with automation tools that will help us
    to automate the execution trigger from the tools themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible and ITSM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For example, when a user requests a package deployment in a Linux server via
    the ServiceNow portal, you can configure your Ansible Automation Platform to trigger
    the package installation job based on the input details from ServiceNow. At the
    end of the automation job, Ansible will return the results to the ServiceNow ticket
    and the user who created the ticket can see the details without waiting for the
    engineer to update the ticket manually.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that you need either Ansible AWX or Red Hat **Ansible Automation
    Platform** (**AAP**) for this integration, and this is not possible with a simple
    Ansible control node alone.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5.4* demonstrates a simple integration with ITSM tools and Ansible
    AWX or Red Hat AAP. You will learn more about Ansible and ITSM tools integration
    in [*Chapter 12*](B18383_12.xhtml#_idTextAnchor213), *Integrating Ansible with
    Your Tools*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Ansible integration with ITSM tools ](img/B18383_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Ansible integration with ITSM tools
  prefs: []
  type: TYPE_NORMAL
- en: ITSM Software
  prefs: []
  type: TYPE_NORMAL
- en: 'ITSM software will help organizations track and manage their IT infrastructure
    operations, resources, and other related usages: [https://www.gartner.com/reviews/market/it-service-management-tools](https://www.gartner.com/reviews/market/it-service-management-tools).'
  prefs: []
  type: TYPE_NORMAL
- en: Automation and Information Technology Infrastructure Library compliance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we talk about automated operations using ITSM and automation tools, it
    is normal for the stakeholders to raise concerns about **Information Technology
    Infrastructure Library** (**ITIL**) practices and compliances. IT automation does
    not mean that you need to bypass your organization’s best practices or ITIL processes;
    instead, you are automating the tasks that a human needs to execute manually and
    repeatedly. For example, you will still follow the standard change approval process
    in the ITSM system, and the tool will trigger automation only when the request
    is approved to execute.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned some simple methods to find automation use
    cases from your workspaces. You can break complex operations into small tasks
    and start with simple automation use cases. We will learn how to study those use
    cases and convert them into automation candidates in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Automation feasibility and usability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all need to understand that not all use cases or repeated jobs are suitable
    for automation. We need to study and confirm the feasibility of implementing the
    use case using Ansible automation.
  prefs: []
  type: TYPE_NORMAL
- en: Once you find the use cases, you can ask yourself several questions to understand
    the feasibility of implementation and usability of your automation use cases.
  prefs: []
  type: TYPE_NORMAL
- en: How complex is the use case?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to Consider the complexity of the use case or workflow you are trying
    to automate. If the use case is too complex, then you can split it into smaller
    use cases. You need to start with smaller use cases to avoid any possible delay
    or obstruction.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to automate the Linux **operating system** (**OS**)
    patching task, then split the job into multiple use cases as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Take a virtual machine snapshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back up the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OS patching tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verification of the OS after patching and reboot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restore snapshot in case of any failure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By doing this, you will get more confidence to start the automation journey
    and also, different people on your team can contribute to their own domain of
    expertise.
  prefs: []
  type: TYPE_NORMAL
- en: Can I reduce human error?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consider how many human mistakes we can avoid by implementing automation for
    a use case. If the task contains multiple steps, there is a high chance that the
    engineer will miss some steps or execute typos while implementing the job. Such
    jobs are good candidates for automation, as you will not need to worry about errors
    and typos when using automated workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, imagine you have a task to deploy a database cluster with hundreds
    of steps, a sample of which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the IP address for the cluster nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install multiple packages on the cluster nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure multiple files on the nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure clustering and heartbeats.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the virtual IP and virtual interface, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In such cases, you can develop Ansible playbooks to cover each and every task
    and save enormous amounts of time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: Can I reduce the deployment time and speed up my tasks?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is a proven fact that automation can improve the speed of your tasks, deployment,
    and deliveries. Automation can significantly reduce the time required for an operation,
    as a single trigger can complete the entire workflow and the engineer doesn’t
    need to observe the monitor or console for errors and status updates.
  prefs: []
  type: TYPE_NORMAL
- en: So, you should ask yourself about the use case and whether you can save time
    or not by automating this task.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you are automating the OS patching task using Ansible, you can
    trigger the patching for hundreds of servers with a single command and just wait
    for the tasks to be completed. You do not need to log in to different servers,
    switch between consoles, collect logs, or keep the time of events. You can include
    each and every task in Ansible playbooks and collect the summary or report for
    your later auditing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: How frequently am I doing this task?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the tasks are not executed frequently (for example, once a year), then it
    will not be much use to spend time developing the automation content for that
    task. But, if the task is to be executed for several servers, then that automation
    use case is valid and a good candidate, as during the execution time, you will
    need fewer resources for that job as the automation will take care of the complex
    workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Always compare the time required for the manual task with the time required
    for the development of Ansible playbook content. You also have to bear in mind
    that the task might currently be executing less frequently due to resource unavailability
    or task complexity. By automating such tasks, you can increase the frequency of
    the tasks as you need less effort to execute them using your Ansible playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: For example, assume you have thousands of servers to manage and the patching
    is possible only once every 6 months due to having a small team, and we all know
    that engineers need to spend a few hours to complete patching for a single server.
    Due to the complexity and criticality of OS patching tasks, you can do it only
    during non-business hours (usually weekends) and you need to rotate your engineers
    on weekend activities to accomplish this task. If you can automate this task using
    Ansible, then the engineers need to spend much less time and you can do the OS
    patching almost every month or whenever necessary.
  prefs: []
  type: TYPE_NORMAL
- en: How much time can I save by automating this task?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consider whether the automation can help to save some time and help the engineers
    to focus on improving their workflows. For some tasks, engineers need to sit in
    front of their workstations until the task reaches a particular stage and they
    need to interactively complete the task regardless of their work hours.
  prefs: []
  type: TYPE_NORMAL
- en: For example, for a weekly system reboot job, you need to wait for the system
    to be up and running before focusing on the next machine in the workflow. Ansible
    can help you to automate this reboot, validation, and system restore process in
    case of an emergency. You can schedule the jobs in a parallel or serial workflow
    without waiting for one machine to complete the reboot activity.
  prefs: []
  type: TYPE_NORMAL
- en: Can I save some money?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is not a major reason from the technical point of view, but reducing cost
    is one of the most common reasons organizations are looking for automation of
    their IT and application infrastructure. You can assess the cost savings together
    with the time saving, as the engineers will be spending more time on improvements
    and better practices rather than working on the same repeated jobs. Also, the
    reduction of human errors will help to reduce service outages, which, in turn,
    reduces the cost to the organization.
  prefs: []
  type: TYPE_NORMAL
- en: You can add more facts and questions in the use case selection criteria and
    assessment as per your organization’s requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to organize and store managed node information
    in the Ansible inventory, and different best practices to follow.
  prefs: []
  type: TYPE_NORMAL
- en: Involving teams in the automation journey
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is a common misunderstanding that the responsibility for finding use cases
    and implementing automation only falls to the systems team, platforms team, or
    infrastructure team. When we explore our work environment and day-to-day tasks,
    we will find thousands of tasks that we can automate using Ansible. It could be
    the database team managing database servers and instances, the network team handling
    network operations, or the application team who wants to deploy their application
    updates more effectively. Implementing automation in the environment is a collaborative
    journey, and we need support and guidance from different teams.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, typical database provisioning steps can be seen in *Figure 5.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Typical database provisioning tasks ](img/B18383_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Typical database provisioning tasks
  prefs: []
  type: TYPE_NORMAL
- en: Many of the tasks listed in *Figure 5.5* can be automated using Ansible, and
    the workflow can be completed in minutes instead of days and weeks. The database
    team needs to share more insight about the database operations and the automation
    opportunities, as they are the **subject matter experts** (**SMEs**) for database-related
    topics.
  prefs: []
  type: TYPE_NORMAL
- en: We have detailed sections on learning about database automation using Ansible,
    which you can find in [*Chapter 8*](B18383_08.xhtml#_idTextAnchor144), *Helping
    the Database Team with Automation*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can take Windows server automation as another example, as there is always
    a misconception that Ansible is only available for Linux and cannot be used for
    automation on Windows servers. This is incorrect as Ansible can be used to automate
    most of your Windows management and administration operations. There are about
    100 Ansible modules available in the Ansible Windows collection, which can be
    downloaded from Ansible Galaxy as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`community.windows` – [https://galaxy.ansible.com/community/windows](https://galaxy.ansible.com/community/windows)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ansible.windows` – [https://galaxy.ansible.com/ansible/windows](https://galaxy.ansible.com/ansible/windows%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to *Figure 5.6* for a typical user creation job in Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Windows user creation workflow ](img/B18383_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Windows user creation workflow
  prefs: []
  type: TYPE_NORMAL
- en: The entire workflow can be automated using a few tasks inside an Ansible playbook
    and the Windows team can reuse the same automation artifacts for thousands of
    servers in the environment. As an Ansible content developer, you can collaborate
    with the Windows platform team and find more such use cases for implementing automation.
    You will learn more about Windows automation in [*Chapter 6*](B18383_06.xhtml#_idTextAnchor105),*Automating
    Microsoft Windows and Network Devices*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore one more use case opportunity and challenge that the cloud platform
    team faces. When you introduce Ansible automation to the cloud platform team that
    manages the public or private cloud, they are always faced with a dilemma – how
    to update the managed node information in the Ansible inventory every time when
    there are frequent changes in terms of virtual machines, disks, network, and so
    on. In the next section, we will learn how to handle a large number of dynamically
    managed nodes in the Ansible inventory using the dynamic inventory plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible dynamic inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is easy to manage your managed node information inside static inventory files
    when you have a smaller number of nodes or an almost fixed set of assets, such
    as bare-metal servers or virtual machines that are not frequently recreated. But,
    if your environment contains many dynamic nodes, such as virtual machines on multiple
    public or private cloud platforms, Kubernetes, or OpenShift platforms, then keeping
    your managed node information inside static files will be difficult, as you need
    to keep track of the changes and update your inventory files with them, including
    IP addresses, login credentials, and more. In such cases, you can use the **dynamic
    inventory** features in Ansible, which are basically some custom scripts and inventory
    plugins that collect inventory information from these virtualization or container
    platforms.
  prefs: []
  type: TYPE_NORMAL
- en: When you pass the dynamic inventories to Ansible, the inventory plugins will
    be executed and will collect the details of managed nodes from your virtualization
    platforms. This information will be passed to Ansible as regular inventory data
    and Ansible will execute the automation tasks for those managed nodes based on
    the node selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use dynamic inventory plugins for any supported platforms, such as
    VMware, OpenStack, AWS, Azure, GCP, or from other container platforms such as
    Kubernetes, OpenShift, and so on, as depicted in *Figure 5.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Ansible static and dynamic inventories ](img/B18383_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Ansible static and dynamic inventories
  prefs: []
  type: TYPE_NORMAL
- en: 'You can list all the available dynamic plugins as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Please note that you will see additional inventory plugins if you have installed
    additional Ansible collections, as some of the collections may include inventory
    plugins as well.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Inventory Plugins
  prefs: []
  type: TYPE_NORMAL
- en: For more details about Ansible Inventory plugins, you can look them up at [https://docs.ansible.com/ansible/latest/plugins/inventory.xhtml](https://docs.ansible.com/ansible/latest/plugins/inventory.xhtml).
    Old dynamic inventory scripts are available at [https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.xhtml](https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.xhtml)
    and [https://github.com/ansible/ansible/tree/stable-2.9/contrib/inventory](https://github.com/ansible/ansible/tree/stable-2.9/contrib/inventory).
  prefs: []
  type: TYPE_NORMAL
- en: Using the Ansible dynamic inventory with AWS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this practice session, you will learn how to install Ansible collections
    and how to use the Ansible inventory plugin for AWS Cloud. You will use the default
    AWS inventory plugin available at the official `amazon.aws` collection.
  prefs: []
  type: TYPE_NORMAL
- en: Assumptions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We assume the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You have an AWS account (the Free Tier is enough to proceed with this exercise).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have basic knowledge of the AWS platform sufficient to create new users
    and EC2 instances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing AWS collection and libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First of all, we need to install the required Ansible collection and plugins
    before using the inventory plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure `ansible.cfg` with a collection path. By default, `ansible-galaxy`
    will install the Ansible collections (and roles) to a default path, which is under
    your home directory (for example, `/home/ansible/.ansible/collections/ansible_collections`).
    In this case, we will tell Ansible to install the collection to a specific path
    for better management. Configure the `COLLECTIONS_PATHS` line in your `ansible.cfg`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `amazon.aws` collection using the `ansible-galaxy` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the installed collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Ansible AWS collection installed ](img/B18383_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – Ansible AWS collection installed
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the collection is installed in your `PROJECT_DIRECTORY/collections`
    path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the installed inventory plugin for AWS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.9 – AWS inventory plugin ](img/B18383_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – AWS inventory plugin
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `python3-boto3` package. AWS modules and plugins require the `boto3`
    package to be available on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If your Ansible was installed using Python, then install `boto3` using the `pip
    install` `boto3` command.
  prefs: []
  type: TYPE_NORMAL
- en: After installing the Ansible AWS collection, you need to create the AWS user
    with which Ansible will access the AWS platform.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the automation execution environments with Ansible Automation
    Platform, then all the dependencies and libraries can be packaged inside the execution
    environment images. Refer to [https://www.ansible.com/products/execution-environments](https://www.ansible.com/products/execution-environments)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AWS user and credential
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the AWS `ec2` inventory plugin to access your AWS account, you need to
    configure your AWS credentials using standard methods, as shown in *Figure 5.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **AWS Console** | **IAM** | **Users** | **Add User** and select **Programmatic
    access**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Creating an AWS user with programmatic access ](img/B18383_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Creating an AWS user with programmatic access
  prefs: []
  type: TYPE_NORMAL
- en: 'Add appropriate permissions for the new user (do not give the user **AdministratorAccess**
    to your production account), as shown in *Figure 5.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Applying permissions for the new AWS user ](img/B18383_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Applying permissions for the new AWS user
  prefs: []
  type: TYPE_NORMAL
- en: Add **Tags** if needed and click **Create User**. Please remember to copy the
    **Access key ID** and **Secret access key** as shown in *Figure 5.12* as we need
    this information in the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.12 – AWS user access key ID and secret access key  ](img/B18383_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – AWS user access key ID and secret access key
  prefs: []
  type: TYPE_NORMAL
- en: Once you create the user account, you need to configure the access key and secret
    access key on your Ansible control node.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring AWS credentials on the Ansible control node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, you need to configure the AWS credential information on the control node:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add new AWS credentials on your Ansible control node machine. If you have multiple
    credentials, then add this as a new profile as follows (for example, `default`
    and `ansible` profiles):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.13 – AWS profile configuration ](img/B18383_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – AWS profile configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `config` file as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.14 – AWS profile config file ](img/B18383_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – AWS profile config file
  prefs: []
  type: TYPE_NORMAL
- en: Remember to use the correct AWS profile name in your inventory configuration
    in the next steps (`ansible`, in our case).
  prefs: []
  type: TYPE_NORMAL
- en: Using the AWS aws_ec2 inventory plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you configure the AWS credentials, you can start testing the dynamic inventory
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an inventory file with the `ec2` plugin information. We will also include
    the location to filter for the `ec2` instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Inventory file for AWS ec2 instances ](img/B18383_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – Inventory file for AWS ec2 instances
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the dynamic inventory plugin by passing the inventory location (`inventories/aws/`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Verify AWS dynamic inventory ](img/B18383_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – Verify AWS dynamic inventory
  prefs: []
  type: TYPE_NORMAL
- en: The inventory plugin will access the AWS platform using the account you have
    configured in the previous steps and return the result in a format that Ansible
    can read and use for execution. (We have used the `--graph` option for a summary
    view, but you can use other options, such as `--list`.)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add more filters with tags and hostnames as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The plugin will return the result based on the filter you have configured in
    the inventory YAML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.17 – AWS dynamic inventory with additional filters ](img/B18383_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17 – AWS dynamic inventory with additional filters
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have configured the `ec2` instances (using the AWS `ec2` template or
    other methods), then you can test the access now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Ansible ping test using the AWS dynamic inventory ](img/B18383_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.18 – Ansible ping test using the AWS dynamic inventory
  prefs: []
  type: TYPE_NORMAL
- en: Secure Shell (SSH)
  prefs: []
  type: TYPE_NORMAL
- en: SSH is a cryptographic network protocol that helps users to access the target
    systems in a secure way. Read [https://www.techtarget.com/searchsecurity/definition/Secure-Shell](https://www.techtarget.com/searchsecurity/definition/Secure-Shell)
    to learn more about SSH.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding exercise, you have learned how to use Ansible dynamic inventory
    plugins and use the inventory without adding your managed node information inside
    any static files. The procedure is more or less the same for all other cloud and
    container platforms, as you can generally find and use suitable inventory plugins
    to implement the dynamic inventory for them.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Inventory Plugin Options
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the official documentation for the inventory plugin’s additional options
    and filters: [https://docs.ansible.com/ansible/latest/plugins/inventory.xhtml](https://docs.ansible.com/ansible/latest/plugins/inventory.xhtml)
    and [https://docs.ansible.com/ansible/latest/collections/amazon/aws/aws_ec2_inventory.xhtml](https://docs.ansible.com/ansible/latest/collections/amazon/aws/aws_ec2_inventory.xhtml)
    and [https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.xhtml#understanding-variable-precedence](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.xhtml#understanding-variable-precedence).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned methods to find automation use cases in your
    workplace and determine the feasibility and usability of these automation use
    cases. You have also explored the importance of collaboration between teams to
    implement better automation use cases. Later in the chapter, you learned how to
    use the Ansible dynamic inventory and practiced using the Ansible inventory plugin
    with the AWS `ec2` inventory plugin.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn the basics of Windows automation and the
    remote connection methods available. We will also learn the basics of network
    automation using Ansible with practice sections.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics covered in this chapter, please visit the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ansible ServiceNow collection*: [https://github.com/ansible-collections/servicenow.itsm](https://github.com/ansible-collections/servicenow.itsm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Automating ServiceNow with Red Hat Ansible Automation Platform*: [https://www.ansible.com/blog/certified-collection-servicenow](https://www.ansible.com/blog/certified-collection-servicenow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible Use Cases*: [https://www.ansible.com/use-cases](https://www.ansible.com/use-cases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to build your inventory*: [https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.xhtml](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Inventory tips*: [https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.xhtml#inventory-tips](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.xhtml#inventory-tips)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working with dynamic inventory*: [https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.xhtml](https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible AWS collection*: [https://docs.ansible.com/ansible/latest/collections/amazon/aws/index.xhtml](https://docs.ansible.com/ansible/latest/collections/amazon/aws/index.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible and Windows*: [https://www.ansible.com/for/windows](https://www.ansible.com/for/windows)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible Windows Guides*: [https://docs.ansible.com/ansible/latest/user_guide/windows.xhtml](https://docs.ansible.com/ansible/latest/user_guide/windows.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
