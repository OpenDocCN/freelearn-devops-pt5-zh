- en: Defining Cluster-Wide Alerts
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义集群级别警报
- en: A common mistake is to focus on dashboards as the primary means of noticing
    when something is wrong. Dashboards have their place in the big scheme of things
    and are an indispensable part of any monitoring solution. However, they are not
    as critical as we think.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的错误是过于依赖仪表盘作为发现问题的主要手段。仪表盘在整体方案中有其作用，是任何监控解决方案中不可或缺的一部分。然而，它们并不像我们想象的那么重要。
- en: Monitoring systems are not meant to be a substitute for Netflix. They are not
    supposed to be watched. Instead, they should collect data and, if certain conditions
    are met, create alerts. Those alerts should try to communicate with the system
    and trigger a set of actions that will correct the problem automatically. Notifications
    should be sent to humans only if the system does not know how to fix the issue.
    In other words, we should strive to create a self-healing system that consults
    doctors (us, humans) only when it cannot fix itself.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 监控系统的目的不是替代 Netflix。它们不应该被不断观察。相反，它们应该收集数据，并在满足特定条件时创建警报。这些警报应该尝试与系统进行交互，并触发一系列操作来自动修复问题。只有在系统无法修复问题时，才应该向人类发送通知。换句话说，我们应该努力创建一个自愈系统，只有在它无法自我修复时，才会向“医生”（我们，人类）求助。
- en: Dashboards come in handy when we know that there is a problem. If the system
    is working as expected, looking at dashboards is a waste of time that could be
    better spent on improving the system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们知道系统出现问题时，仪表盘非常有用。如果系统运行正常，查看仪表盘就是浪费时间，应该把时间花在系统改进上。
- en: Imagine a Slack notification that would say that “there is no available memory
    in the cluster and the system failed to create additional VMs.” Please notice
    the second part of that sentence. The system detected a problem and failed to
    correct it. Something went wrong, and it could not scale up. It failed to create
    new VMs. That was a good example of a type of notification that should be sent
    to a human operator. If the system managed to heal itself, there would be no need
    for that Slack notification.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，一个 Slack 通知会显示“集群内没有可用内存，系统未能创建额外的虚拟机”。请注意这句话的第二部分。系统检测到问题并未能修复它。出现了故障，系统无法扩展，未能创建新的虚拟机。这是一个很好的例子，说明这种类型的通知应该发送给人工操作员。如果系统能够自我修复，就无需发送这样的
    Slack 通知了。
- en: We should consult dashboards only after we receive a message stating that the
    system failed to heal itself. Until that moment, everything is fine, and we can
    work on the next big improvement of the system. After receiving the message, we
    should visit a dashboard or two. We should try to get the high-level picture of
    the system. Sometimes, information from a dashboard is all we need. More often
    than not, we need more. We need to visit Prometheus and start querying it for
    additional information. Finally, once the culprit is found, we can create a fix,
    test it, employ it in production, improve the self-healing system so that the
    problem is fixed automatically the next time it happens, and write “post-mortem”
    report.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在收到系统无法自我修复的消息后，才查看仪表盘。在那之前，一切正常，我们可以继续进行系统的下一次重大改进。收到消息后，我们应访问一个或两个仪表盘，试图获取系统的高层次视图。有时，仪表盘提供的信息就足够了。但更常见的是，我们需要更多的信息。我们需要访问
    Prometheus，开始查询更多信息。最后，一旦找出罪魁祸首，我们可以创建修复方案，进行测试，并将其应用到生产环境中，改进自愈系统，使得下次发生同样的问题时能够自动修复，并撰写“事后分析”报告。
- en: As you can see, it all starts with a single alert, and that will be the focus
    of this chapter. For now, we will not distinguish alerts fired to a system that
    will auto-correct itself from those that are sending notifications to human operators.
    That will come later. For now, we’ll focus on creating alerts without defining
    events they should fire.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，一切都从一个单一的警报开始，这将是本章的重点。目前，我们不会区分那些能自我修正的系统和那些需要发送通知给人工操作员的警报。这个问题会在后面讨论。现在，我们将专注于创建警报，而不定义它们应该触发的事件。
- en: Creating The Cluster And Deploying Services
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建集群并部署服务
- en: We’ll start by recreating the cluster and deploying the stacks that we used
    in the previous chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从重新创建集群并部署上一章中使用的堆栈开始。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
