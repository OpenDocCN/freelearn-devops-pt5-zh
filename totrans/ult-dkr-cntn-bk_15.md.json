["```\nversion: \"3.5\"services:\n  web:\n    image: nginx:alpine\n    deploy:\n      replicas: 10\n      update_config:\n        parallelism: 2\n        delay: 10s\n...\n```", "```\n    $ ssh -i \"aws-docker-demo.pem\" <public-dns-of-manager1-instance>\n    ```", "```\n    version: \"3.7\"services:  whoami:    image: nginx:1.12-alpine    ports:    - 81:80    deploy:      replicas: 10      update_config:        parallelism: 2        delay: 10s\n    ```", "```\n    $ docker stack deploy -c web-stack.yaml web\n    ```", "```\nCreating network web_defaultCreating service web_web\n```", "```\n    $ watch docker stack ps web\n    ```", "```\n    $ docker service update --image nginx:1.13-alpine web_web\n    ```", "```\n$ docker stack rm web\n```", "```\n$ docker service create --name web \\    --replicas 10 \\\n    --update-parallelism 2 \\\n    --update-delay 10s \\\n    nginx:alpine\n```", "```\nFROM alpine:3.6…\nHEALTHCHECK --interval=30s \\\n    --timeout=10s\n    --retries=3\n    --start-period=60s\n    CMD curl -f http://localhost:3000/health || exit 1\n...\n```", "```\nversion: \"3.8\"services:\n  web:\n    image: example/web:1.0\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", http://localhost:3000/health]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 60s\n...\n```", "```\n    version: \"3.8\"services:  web:    image: nginx:alpine    deploy:      replicas: 3    healthcheck:      test: [\"CMD\", \"wget\", \"-qO\", \"-\", \"http://localhost\"]      interval: 5s      timeout: 2s      retries: 3      start_period: 15s\n    ```", "```\n    $ docker stack deploy -c stack-health.yml myapp\n    ```", "```\nversion: \"3.8\"services:\n  web:\n    image: nginx:1.12-alpine\n    ports:\n    - 80:80\n    deploy:\n      replicas: 10\n    update_config:\n      parallelism: 2\n      delay: 10s\n      failure_action: rollback\n      monitor: 10s\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"-qO\", \"-\", http://localhost]\n      interval: 2s\n      timeout: 2s\n      retries: 3\n      start_period: 2s\n```", "```\n    $ echo \"Hello world\" | docker config create hello-config –\n    ```", "```\n941xbaen80tdycup0wm01nspr\n```", "```\n    $ docker config ls\n    ```", "```\nID       NAME        CREATED            UPDATEDrrin36..  hello-config  About a minute ago   About a minute ago\n```", "```\n    $ docker config inspect hello-config\n    ```", "```\n[    {\n        \"ID\": \"941xbaen80tdycup0wm01nspr\",\n        \"Version\": {\n            \"Index\": 557\n        },\n        \"CreatedAt\": \"2023-05-01T15:58:15.873515031Z\",\n        \"UpdatedAt\": \"2023-05-01T15:58:15.873515031Z\",\n        \"Spec\": {\n            \"Name\": \"hello-config\",\n            \"Labels\": {},\n            \"Data\": \"SGVsbG8gd29ybGQK\"\n        }\n    }\n]\n```", "```\n    $ echo 'SGVsbG8gd29ybGQK' | base64 --decode\n    ```", "```\nHello world\n```", "```\n    username=pguserdatabase=productsport=5432dbhost=postgres.acme.com\n    ```", "```\n    $ docker config create app.properties ./my-app.properties\n    ```", "```\n2yzl73cg4cwny95hyft7fj80u\n```", "```\n    $ sudo apt install –y jq\n    ```", "```\n    $ docker config inspect app.properties | jq .[].Spec.Data | xargs echo | base64 --decode\n    ```", "```\nusername=pguserdatabase=products\nport=5432\ndbhost=postgres.acme.com\n```", "```\n    $ docker service create \\     --name nginx \\    --config source=app.properties,target=/etc/myapp/conf/app.properties,mode=0440 \\    nginx:1.13-alpine\n    ```", "```\nsvf9vmsjdttq4tx0cuy83hpgfoverall progress: 1 out of 1 tasks\n1/1: running [==================================================>]\nverify: Service converged\n```", "```\n$ docker service ps nginxID   NAME     IMAGE              NODE            DESIRED STATE   CURRENT STATE           ERROR      PORTS\npvj  nginx.1  nginx:1.13-alpine  ip-172-31-32-21   Running  Running 2 minutes ago\n```", "```\n$ docker container lsCONTAINER ID    IMAGE                COMMAND                 CREATED         STATUS               PORTS …\n44417e1a70a1    nginx:1.13-alpine    \"nginx -g 'daemon of…\"   5 minutes ago   Up 5 minutes         80/tcp …\n```", "```\n$ docker exec 44417 cat /etc/my-app/conf/app.properties\n```", "```\nusername=pguserdatabase=products\nport=5432\ndbhost=postgres.acme.com\n```", "```\n$ docker config rm app.properties\n```", "```\nError response from daemon: rpc error: code = InvalidArgument desc = config 'app.properties' is in use by the following service: nginx\n```", "```\n$ docker service rm nginxnginx\n```", "```\n$ docker config rm app.propertiesapp.properties\n```", "```\n$ echo \"sample secret value\" | docker secret create sample-secret -\n```", "```\n    $ echo \"other secret\" > secret-value.txt\n    ```", "```\n    $ docker secret create other-secret ./secret-value.txt\n    ```", "```\n$ docker service create --name web \\    --secret api-secret-key \\\n    --publish 8000:8000 \\\n    training/whoami:latest\n```", "```\nsecret not found: api-secret-key.\n```", "```\n$ echo \"my secret key\" | docker secret create api-secret-key -\n```", "```\n$ docker exec -it <container ID> cat /run/secrets/api-secret-key\n```", "```\nmy secret key\n```", "```\n$ docker service create --name web \\    --name web \\\n    -p 8000:8000 \\\n    --secret source=api-secret-key,target=/run/my-secrets/api-secret-key \\\n    fundamentalsofdocker/whoami:latest\n```", "```\n$ echo \"demo secret value\" > ./dev-secrets/sample-secret\n```", "```\n$ docker container run -d --name whoami \\    -p 8000:8000 \\\n    -v $(pwd)/dev-secrets:/run/secrets \\\n    fundamentalsofdocker/whoami:latest\n```", "```\n    $ docker container exec -it whoami /bin/bash\n    ```", "```\n    /# cd /run/secrets/# cat demo-secretdemo secret value\n    ```", "```\nexport DEMO_SECRET=$(cat /run/secrets/demo-secret)\n```", "```\n…secrets:\ndemo-secret: \"<<demo-secret-value>>\"\nother-secret: \"<<other-secret-value>>\"\nyet-another-secret: \"<<yet-another-secret-value>>\"\n…\n```", "```\nfile=/app/bin/app.confdemo_secret=$(cat /run/secret/demo-secret)\nsed -i \"s/<<demo-secret-value>>/$demo_secret/g\" \"$file\"\n```", "```\n    database:    name: demo    db_password: \"<<db_password_value>>\"others:    val1=123    val2=\"hello world\"\n    ```", "```\n    file=/app/whoami.confdb_pwd=$(cat /run/secret/db-password)sed -i \"s/<<db_password_value>>/$db_pwd/g\" \"$file\" /app/http\n    ```", "```\n    $ sudo chmod +x ./entrypoint.sh\n    ```", "```\n    FROM fundamentalsofdocker/whoami:latestCOPY ./whoami.conf /app/COPY ./entrypoint.sh /CMD [\"/entrypoint.sh\"]\n    ```", "```\n    $ docker image build -t secrets-demo:1.0 .\n    ```", "```\n    $ echo \"passw0rD123\" | docker secret create demo-secret -\n    ```", "```\n    $ docker service create --name demo \\--secret demo-secret \\secrets-demo:1.0\n    ```", "```\n$ echo \"newPassw0rD\" | docker secret create db-password-v2 -\n```", "```\n$ docker service create --name web \\    --publish 80:80\n    --secret db-password\n    nginx:alpine\n```", "```\n$ docker service update --secret-rm db-password web\n```", "```\n$ docker service update \\    --secret-add source=db-password-v2,target=db-password \\\n    web\n```", "```\n    $ docker service update \\    --image acme/inventory:2.1 \\    --update-parallelism 2 \\    --update-delay 60s \\    inventory\n    ```", "```\n    $ docker service update \\    --secret-rm MYSQL_PASSWORD \\    inventory$ docker service update \\    --secret-add source=MYSQL_PASSWORD_V2, target=MYSQL_PASSWORD \\    inventory\n    ```"]