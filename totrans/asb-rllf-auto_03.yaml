- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automating Your Daily Jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Are you struggling to find automation use cases to start with Ansible automation?
    Your workplace is a great place to start your search for automation use cases.
    Track the most repeated jobs that you or your team are doing every day and you
    will see the opportunity to automate these tasks. This can be simple server information
    gathering, collecting operating system versions, or a simple weekly reboot job.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use the Jinja2 template to create reports
    and emails with the help of Ansible. You will also learn how to develop Ansible
    artifacts in a modular way and include tasks and variables dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Ansible to collect server details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting system information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System scanning and remediation using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated weekly system reboot using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start with `ansible_facts` and learn how to extract the data for your
    system reports. The chapter will explain how to collect data, insert it into an
    HTML report, and store it on web servers. Then, you will learn how to configure
    standard system files and automate a server reboot with an email notification.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A Linux machine for the Ansible control node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two or more Linux machines with Red Hat repositories configured (if you are
    using other Linux operating systems instead of **Red Hat Enterprise Linux** (**RHEL**)
    machines, then make sure you have the appropriate repositories configured to get
    packages and updates)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible configurations, playbooks, commands, and snippets for this chapter
    can be found in this book’s GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-03](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-03).
  prefs: []
  type: TYPE_NORMAL
- en: Using Ansible to collect server details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to use Ansible for basic automation
    by using simple playbooks and tasks. In this chapter, you will learn more by automating
    the simple day-to-day jobs in your workplace.
  prefs: []
  type: TYPE_NORMAL
- en: An up-to-date system inventory with easy access is the dream of every system
    engineer and IT team. In large enterprises, it is common to use **configuration
    management database** (**CMDB**) software. However, engineers must maintain their
    spreadsheets to keep the server and device information they are managing. When
    you have software-defined infrastructures such as virtual machines and virtual
    appliances, verifying and updating these local spreadsheets will become a tedious
    task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maintaining such information can be automated using Ansible, as shown in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Maintaining a system information database using Ansible ](img/B18383_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Maintaining a system information database using Ansible
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible and `ansible_facts` can be used to create and update your system inventory
    database or your own CMDB. `ansible_facts` provides detailed and informative data
    that’s gathered from the target nodes (managed nodes) and stored in `setup` module
    at the beginning of each play in the playbook. If you remember the `chrony` package
    installation playbook, check the `TASK [Gathering Facts]` line, which shows the
    `setup` module running in the background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – An Ansible fact-gathering task by the setup module ](img/B18383_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – An Ansible fact-gathering task by the setup module
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible_facts` can be used to make decisions inside the playbook, such as
    skipping the task if the system memory is less than the required value or installing
    specific packages, depending on the operating system version of the target node.'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An Ansible role is a collection of tasks, handlers, templates, and variables
    for configuring the target system so that it meets the desired state. Ansible
    roles enable content sharing without much trouble as we can include the required
    variables, tasks, templates, and other files in the role directory itself. Ansible
    roles are meant for reusability and collaborative support in such a way that the
    same roles can be distributed to teams or the public. Other users can use the
    roles to achieve the same task:'
  prefs: []
  type: TYPE_NORMAL
- en: With Ansible roles, we can easily share a playbook’s content with other teams
    by sharing the entire role directory. For example, it is possible to write a role
    for `install_dbserver` or `setup_webserver` and later share it with the public/other
    teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Larger projects can be created in a modular way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different users can create different roles in parallel and share the same project.
    For example, developer 1 writes a role for `install_dbserver` and developer 2
    focuses on the `setup_webserver` role.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us learn about the directory structure of Ansible roles in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Roles directory structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The content of Ansible roles is arranged in an organized way. The top-level
    directory defines the name of the role itself, as shown in the following screenshot
    (we will create these roles and their content later in this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Sample project directory with roles ](img/B18383_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Sample project directory with roles
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, I have two roles named `deploy-web-server` and
    `security-baseline-rhel8` under my `roles` directory. Some of the directories
    contain `main.yml`, which contains tasks, variables, or handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Defaults/main.yml`: This contains variables for the role that can be overwritten
    when the role is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tasks/main.yml`: This contains the main list of tasks to be executed when
    using the role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vars/main.yml`: This contains internal variables for the role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`files`: This contains static files that can be referenced from this role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templates`: This is the jinja2 templates that can be used via this role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`handlers/main.yml`: This contains the handler definitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta/main.yml`: This defines some metadata for this role, such as the author,
    license, platform, and dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tests`: This is an inventory. `test.yml` file that can be used to test this
    role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default variables can be defined under `defaults/main.yml`; additional role
    variables can be defined inside `vars/main.yml`. However, depending on the location
    of your variable and variable precedence, Ansible will apply the appropriate value
    for the variable. Refer to [https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.xhtml#understanding-variable-precedence](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.xhtml#understanding-variable-precedence)
    to learn and understand more about variable precedence.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Roles
  prefs: []
  type: TYPE_NORMAL
- en: There are over 10,000 roles available in Ansible Galaxy ([https://galaxy.ansible.com](https://galaxy.ansible.com))
    that have been contributed by the community. Users can freely download and use
    them for their Ansible automation process. If the organization is looking for
    certified content collections (collections and roles), then we can find them by
    going to Red Hat Automation Hub (at the [console.redhat.com](http://console.redhat.com)
    portal). Read [https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.xhtml](https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.xhtml)
    to learn more about Ansible roles. Find the official Red Hat roles at [https://galaxy.ansible.com/RedHatOfficial](https://galaxy.ansible.com/RedHatOfficial).
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Jinja2 templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`template` module (or the Ansible `template` filter) to convert the Jinja2
    template into actual content or a file. Ansible will replace the variable with
    values as needed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a standard `/etc/motd` file can be deployed to your servers by
    using the appropriate values dynamically. Your Jinja2 template will look as follows
    (it may look different, based on your customization):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Jinja2 template for the motd file ](img/B18383_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Jinja2 template for the motd file
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the playbook, you will `template` the file and transfer it to the target
    machine using the `template` module (do not use the `copy` module as the templating
    will not work):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Using template module in playbook ](img/B18383_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Using template module in playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'On the target machine, the variables inside the Jinja2 template will be replaced
    with values, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – The /etc/motd file that was created using the Jinja2 template
    ](img/B18383_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – The /etc/motd file that was created using the Jinja2 template
  prefs: []
  type: TYPE_NORMAL
- en: Any level of complexity and loops can be used inside the template to create
    dynamic output files. Some of the use cases generate reports, web server configuration
    (HTTPS, Nginx), system configuration files (`/etc/hosts`, `/etc/motd`, and `/etc/fstab`),
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Jinja2 Templating
  prefs: []
  type: TYPE_NORMAL
- en: Read more about Ansible Jinja2 templating at [https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.xhtml](https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this use case, you will extract the required information using `ansible_facts`
    from `node1` (and other machines if you have some) and store it as an HTML report
    inside a web server (`node2`), as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Machines for the Ansible CMDB use case ](img/B18383_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Machines for the Ansible CMDB use case
  prefs: []
  type: TYPE_NORMAL
- en: For the following use case, we need to deploy a web server. We will use Ansible
    to deploy and configure the web server on `node2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to deploy a web server using an Ansible role:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On your Ansible control node, create a new directory called `Chapter-03` and
    create an `ansible.cfg` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.8 – The ansible.cfg file ](img/B18383_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – The ansible.cfg file
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `hosts` file in the same directory as the `node-1` managed node (use
    the correct IP address as per your lab or environment):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.9 – The Ansible inventory (hosts) file ](img/B18383_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – The Ansible inventory (hosts) file
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, `[nodes:vars]` is the group variable. The variables
    will be available for all managed nodes under the `nodes` host group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create an Ansible role to deploy a web server on `node2` using Apache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you have created the `roles` directory, initiate a new Ansible role using
    the `ansible-galaxy` command. The `ansible-galaxy` command will initiate and create
    the skeleton directory structure for the role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Initializing the Ansible role with the ansible-galaxy command
    ](img/B18383_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Initializing the Ansible role with the ansible-galaxy command
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the content of the `roles` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.11 – The roles directory’s content ](img/B18383_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – The roles directory’s content
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following tasks to the `roles/deploy-web-server/tasks/main.yml` file
    to install the `firewalld` and `httpd` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Installing httpd and firewalld ](img/B18383_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Installing httpd and firewalld
  prefs: []
  type: TYPE_NORMAL
- en: 'Add more tasks to the role to enable the firewall service and permit the `httpd`
    service in the firewall, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Ansible web deploy role – enabling the firewalld service and
    permitting httpd in the firewall ](img/B18383_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Ansible web deploy role – enabling the firewalld service and permitting
    httpd in the firewall
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the task for enabling and starting the `httpd` service, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Ansible web deploy role – enabling and starting httpd ](img/B18383_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Ansible web deploy role – enabling and starting httpd
  prefs: []
  type: TYPE_NORMAL
- en: The `tasks/main.yml` file will create the `/var/www/html` directory and install
    the `httpd` and `firewalld` packages. Then, it will start the `httpd` and `firewalld`
    services and open `httpd` ports in the firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Remove other unwanted directories and files (automatically generated) inside
    the `deploy-web-server` role directory. In this case, leave it as-is and proceed
    with the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a playbook called `Chapter-03/deploy-web.yml` so that you can deploy
    the web server (remember to go back to the main directory – that is, `Chapter-03`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Ansible playbook to call the role ](img/B18383_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Ansible playbook to call the role
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, your directory will contain the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – The project directory’s content ](img/B18383_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – The project directory’s content
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `deploy-web.yml` playbook to deploy the web server on `node2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Executing the web server deployment playbook ](img/B18383_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Executing the web server deployment playbook
  prefs: []
  type: TYPE_NORMAL
- en: The same playbook can be executed multiple times and Ansible will execute or
    skip the operation in the backend based on the desired status. This feature is
    called **idempotency** in Ansible, by which the Ansible module will check the
    desired status (for example, installing packages or copying files) and execute
    the operation only if required.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Idempotency
  prefs: []
  type: TYPE_NORMAL
- en: '*“An operation is idempotent if the result of performing it once is the same
    as the result of performing it repeatedly without any intervening actions.”* –
    Ansible Glossary ([https://docs.ansible.com/ansible/latest/reference_appendices/glossary.xhtml](https://docs.ansible.com/ansible/latest/reference_appendices/glossary.xhtml))'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s execute the same playbook again and check the difference. Here, we can
    see the `ok` status instead of `changed` (*Figure 3.17*) since Ansible has not
    executed the operation. This is because the `firewalld` and `httpd` packages have
    been installed and the services have been started already (the desired state has
    already been met):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Executing the deployment playbook again and noticing the ok
    status instead of changed ](img/B18383_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – Executing the deployment playbook again and noticing the ok status
    instead of changed
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, verify the web server by visiting the server IP or **Fully Qualified Domain
    Name** (**FQDN**) in a web browser (you may see different or similar pages, depending
    on the operating system and version):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Default Apache web page ](img/B18383_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – Default Apache web page
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to `node2` and remove the default `welcome.conf` file so that you can
    see the directory content of `/var/www/html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is not the best practice in production, and you need to configure your
    web server with adequate permissions and directory listing options. The preceding
    step was mentioned to explain the demo and web server functionality.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have deployed a web server using an Ansible role to keep the
    systems information reports or CMDB.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are many open source projects that can be used to implement CMDB, such
    as using Ansible facts such as Ansible-CMDB ([https://ansible-cmdb.readthedocs.io/en/latest/](https://ansible-cmdb.readthedocs.io/en/latest/)).
    Refer to the project documentation and repository for detailed information.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting system information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will extract the required information from `ansible_facts`
    and generate HTML reports inside the web server that you created in the previous
    section.
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible_facts` contains a lot of information about nested dictionaries and
    lists. Search and go through the content and find the important information you
    need for your report.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the content of `ansible_facts`, execute the following ad hoc command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Ansible facts output after using an ad hoc command ](img/B18383_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Ansible facts output after using an ad hoc command
  prefs: []
  type: TYPE_NORMAL
- en: Using the `less` or `more` commands after the pipe (`|`) symbol will keep the
    output on top without you having to scroll to the bottom. It is possible to scroll
    down or up using the arrow keys or find the text by searching for it (`/` + `<text>`).
  prefs: []
  type: TYPE_NORMAL
- en: Find sample `ansible_facts` details for a Linux machine at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-03/node1-ansible-facts](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-03/node1-ansible-facts).
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to use some of the variables from the preceding `setup`
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a role called `Chapter-03/roles/system-report` to generate the HTML
    reports, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Creating a new Ansible role for the system report ](img/B18383_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – Creating a new Ansible role for the system report
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Jinja2 template file called `roles/system-report/templates/system-information.xhtml.j2`
    and add the HTML header and other details inside the template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Jinja2 template for HTML report ](img/B18383_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – Jinja2 template for HTML report
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the full Jinja2 template at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/blob/main/Chapter-03/roles/system-report/templates/system-information.xhtml.j2](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/blob/main/Chapter-03/roles/system-report/templates/system-information.xhtml.j2).
    You may have already noticed the variables that are being used inside the Jinja2
    template, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{{ ansible_hostname }}`: The hostname of the managed node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{ ansible_all_ipv4_addresses }}`: The IP address list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{ ansible_architecture }}`: The architecture of the target machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{ ansible_distribution }}` and `{{ ansible_distribution_version }}`: The
    operating system’s distribution and version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{ report_admin_email }}`: This is a custom variable you need to define in
    the playbook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `roles/system-report/tasks/main.yml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.23 – The task file for the system report role ](img/B18383_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.23 – The task file for the system report role
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, the `template` module will convert the template into
    the target HTML file with variables replaced with values. Since the report needs
    to be saved in the web server path, the task will be delegated to `node2` (the
    web server).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Chapter-03/system-info.yml` playbook and include the `system-report`
    role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.24 – The Ansible playbook for collecting system information ](img/B18383_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.24 – The Ansible playbook for collecting system information
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook and verify its output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.25 – Collecting system information ](img/B18383_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.25 – Collecting system information
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the web server to view the report, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.26 – The report that was generated on the web server ](img/B18383_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.26 – The report that was generated on the web server
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `node1.xhtml` to see its content, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.27 – System information report generated by Ansible ](img/B18383_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.27 – System information report generated by Ansible
  prefs: []
  type: TYPE_NORMAL
- en: This is a very basic HTML report template that explains the capability of the
    Jinja2 template and `ansible_facts`. Expand the template with additional items,
    CSS styles, or even different formats such as Markdown, CSV, or JSON. Also, it
    is possible to keep the report in alternate locations such as a GitHub server
    or web server with authentication.
  prefs: []
  type: TYPE_NORMAL
- en: System scanning and remediation using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security scanning and remediation are critical, and organizations are spending
    more time and money on this area every year. When there are new features and changes
    in the operating system and applications, you will have more configurations to
    check and validate to ensure the best security practices are in place. With the
    help of Ansible, it is possible to automate the security scanning and remediation
    tasks for your systems and devices.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will automate a few basic security and compliance configurations
    based on the CIS Red Hat Enterprise Linux 8 Benchmark.
  prefs: []
  type: TYPE_NORMAL
- en: CIS Benchmark
  prefs: []
  type: TYPE_NORMAL
- en: CIS provides the best practices and configurations for systems and platforms
    to ensure security and compliance. Refer to [https://www.cisecurity.org/cis-benchmarks](https://www.cisecurity.org/cis-benchmarks)
    to learn more about CIS Benchmarks.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we have several tasks in a playbook or role, then we can split the tasks
    into multiple files and call them using the `include_tasks` module dynamically.
    For example, different parts of security remediation tasks can be split into different
    tasks files so that they can be called from `main.yaml`, as shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – Splitting tasks into multiple files ](img/B18383_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.28 – Splitting tasks into multiple files
  prefs: []
  type: TYPE_NORMAL
- en: Such methods can help us develop, test, and execute the tasks dynamically and
    in a modular way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to develop a security remediation use case:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new role called `Chapter-03/roles/security-baseline-rhel8`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.29 – Creating a new role for security baselining ](img/B18383_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.29 – Creating a new role for security baselining
  prefs: []
  type: TYPE_NORMAL
- en: Add the necessary security baseline configurations to `roles/security-baseline-rhel8/tasks/main.yml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As I mentioned at the beginning of this section (*Figure 3.28*), in this example,
    you will learn how to split the tasks into multiple files and develop playbooks
    in a modular way. Add the following content to `roles/security-baseline-rhel8/tasks/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30 – The main task file for the security baselining role ](img/B18383_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.30 – The main task file for the security baselining role
  prefs: []
  type: TYPE_NORMAL
- en: 'You have two tasks and both are calling other tasks files via the `include_tasks`
    module. There is an important line you need to take note of, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`when: “’01.01’ not in baseline_exclusions”`: This is a mechanism we are adding
    to the task to control the execution of specific baseline rule using the `when`
    statement. Ansible will check the condition and execute or skip the tasks based
    on this condition. In this case, you need to define a list variable called `baseline_exclusions`
    and add the specific item to exclude from execution. (Use any other string or
    numbering system; this is just a sample list for this demonstration.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a file called `roles/security-baseline-rhel8/tasks/part-01.yml` that
    contains the following content to install `sudo` and enable `sudo` logging:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.31 – part-01.yml for the sudo configuration ](img/B18383_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.31 – part-01.yml for the sudo configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'The first task will install the `sudo` package, while the second will enable
    `sudo` logging. There is an important line you need to take note of, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`line: ‘Defaults logfile=”{{ sudo_log }}”’`: You need to define this `sudo_log`
    variable in the playbook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create another task file called `roles/security-baseline-rhel8/tasks/part-02.yml`
    with the following content to deploy the default `/etc/motd` and `/etc/issue`
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.32 – part-02.yml for the motd configuration ](img/B18383_03_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.32 – part-02.yml for the motd configuration
  prefs: []
  type: TYPE_NORMAL
- en: The first task will deploy default content to `/etc/motd`, while the second
    will deploy content to the `/etc/issue` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following default content for the `motd` and `issue` files under
    the `roles/security-baseline-rhel8/files/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.33 – The default motd and issue files ](img/B18383_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.33 – The default motd and issue files
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the files of your Ansible role to ensure all the content is in place,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.34 – The content of the security baseline role ](img/B18383_03_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.34 – The content of the security baseline role
  prefs: []
  type: TYPE_NORMAL
- en: You can remove other unwanted directories that are not in use. However, in this
    case, keep everything as-is.
  prefs: []
  type: TYPE_NORMAL
- en: 'The variables can be kept in your playbook or even inside the inventory file,
    but it will not be easy to manage the content when you have more variables to
    maintain. Create a directory to keep the variables in, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a variable file called `vars/common.yml` to keep the common variables
    in and add `sudo_log` and other variables there (remember to add the variables
    and values as needed inside the file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.35 – Creating a variable file ](img/B18383_03_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.35 – Creating a variable file
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another variable file called `vars/baseline_exclusions.yml` to keep
    the `baseline_exclusions` variable in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.36 – Creating a variable file for baseline exclusions ](img/B18383_03_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.36 – Creating a variable file for baseline exclusions
  prefs: []
  type: TYPE_NORMAL
- en: We can disable the security check by uncommenting the line (for example, `‘01.01’`)
    so that Ansible will check before executing the task.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a best practice, you need to keep the default values for all variables that
    are used inside the Ansible role in a file. The `roles/security-baseline-rhel8/defaults/main.yml`
    file can be used for this purpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.37 – Default variables for the security-baseline-rhel8 role ](img/B18383_03_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.37 – Default variables for the security-baseline-rhel8 role
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create the main playbook, `security-compliance-rhel8.yml`, and ensure
    it contains the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.38 – The main playbook – security-compliance-rhel8.yml ](img/B18383_03_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.38 – The main playbook – security-compliance-rhel8.yml
  prefs: []
  type: TYPE_NORMAL
- en: Note that in the preceding playbook, we are not hardcoding the hosts. Instead,
    we are using a variable called `NODES`. This variable will be passed to the playbook
    using the `hosts` to avoid the playbook being executed accidentally on the incorrect
    servers. (More about `extra-vars` will be covered in the next section.)
  prefs: []
  type: TYPE_NORMAL
- en: Also, note `vars_files` where we included the two variable files we created
    earlier. Here, the playbook is calling the `security-baseline-rhel8` role.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook and pass the `NODES` details as an extra variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.39 – Executing the security baseline playbook and ensuring the subtasks
    are executed ](img/B18383_03_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.39 – Executing the security baseline playbook and ensuring the subtasks
    are executed
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to `node1` and verify the implemented items (note the login prompt):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.40 – Verifying the content of motd on the login screen for node1
    ](img/B18383_03_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.40 – Verifying the content of motd on the login screen for node1
  prefs: []
  type: TYPE_NORMAL
- en: Enhance your playbook by adding more validations and verifications to the tasks.
    Also, create reports while executing the job and send or save them for later auditing
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Integration with Third-Party Security Tools
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to integrate Ansible with other third-party platforms and tools
    such as OpenSCAP or Red Hat Insight. In such cases, you need to develop playbooks
    to control scanning and remediation instead of manually scanning and fixing the
    configurations on the systems directly. Refer to [https://www.ansible.com/use-cases/security-and-compliance](https://www.ansible.com/use-cases/security-and-compliance)
    and [https://www.open-scap.org/](https://www.open-scap.org/) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible --extra-vars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`extra-vars` contains the variables that will override all other variables.
    Using a dynamic extra variable will help you control the playbook based on the
    values and is also useful when you are using survey forms in Ansible AWX or Ansible
    Automation Controller, where variables can be defined in the GUI method (survey
    forms). `--extra-vars` can be passed as a single value, multiple key-value pairs,
    in JSON format, or read from a variable file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.41 – Ansible extra-vars examples ](img/B18383_03_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.41 – Ansible extra-vars examples
  prefs: []
  type: TYPE_NORMAL
- en: Ansible --extra-vars
  prefs: []
  type: TYPE_NORMAL
- en: Read more about runtime variables at [https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.xhtml#defining-variables-at-runtime](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.xhtml#defining-variables-at-runtime).
    Also check out the automation controller survey forms at [https://docs.ansible.com/automation-controller/latest/html/userguide/job_templates.xhtml#surveys](https://docs.ansible.com/automation-controller/latest/html/userguide/job_templates.xhtml#surveys).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to automate scheduled reboot jobs using
    Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Automated weekly system reboot using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A scheduled and planned system reboot is a standard process in an IT environment
    to ensure the servers and applications are working well and the environment is
    stable with service restart operations. The `reboot` command might be simple when
    it executes but the reboot process and its formalities are not straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'A generic server reboot activity involves multiple steps, as shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.42 – Typical system reboot job workflow ](img/B18383_03_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.42 – Typical system reboot job workflow
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you have hundreds of servers to reboot every week and your team
    is too small to handle such critical operations on weekends. It is possible to
    automate the entire workflow using Ansible by using backup operations before reboot
    and service verifications after reboot.
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible `reboot` module was introduced in Ansible 2.7 (2018). At the time
    of writing, this module is part of `ansible-core` and included in all Ansible
    installations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an Ansible playbook to reboot the machine as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Chapter-03/system-reboot.yml` playbook with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.43 – Ansible playbook for the reboot job ](img/B18383_03_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.43 – Ansible playbook for the reboot job
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the reboot status on `node1`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.44 – Verifying the reboot status on node1 ](img/B18383_03_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.44 – Verifying the reboot status on node1
  prefs: []
  type: TYPE_NORMAL
- en: Enhance the playbook with the snapshot jobs (for example, a VMWare or OpenStack
    backup) or file backup (for example, `/etc/hosts`, `/etc/motd`, or `/etc/fstab`)
    before rebooting the system. Also, create additional tasks to verify the required
    services are running on the server, such as the `httpd` or `mysql` services. If
    you are using an automation controller or Ansible AWS, then schedule these automation
    tasks as weekly or daily jobs; the tasks will be executed based on the schedule
    without any user interaction (refer to [*Chapter 12*](B18383_12.xhtml#_idTextAnchor213),
    *Integrating Ansible with Your Tools*, for more details).
  prefs: []
  type: TYPE_NORMAL
- en: Ansible reboot Module
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the Ansible `reboot` module, refer to [https://docs.ansible.com/ansible/latest/collections/ansible/builtin/reboot_module.xhtml](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/reboot_module.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Automating notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is very important to notify the administrators and end users about the changes
    you are making in the environment. Whether it’s a simple package installation
    or a system reboot, the end user should be aware of the downtime and changes that
    are occurring. Instead of sending emails manually, the Ansible `mail` module can
    be used to automate email notifications. The Ansible `mail` module is powerful
    and can support most email features, including custom headers, attachments, and
    security.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting sensitive data using Ansible Vault
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the email server (**SMTP**) is not **open** (configured to send email without
    authentication), then you need to authenticate the SMTP server with a username
    and password (app password or secret key). Keeping such sensitive information
    in plain text is not a best practice, so you need to store it in a safe method.
    To store such sensitive information, use key vault tools, in which the information
    will be saved in an encrypted format. Fortunately, there’s an built-in feature
    in Ansible for storing and managing encrypted content called **Ansible Vault**.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Vault will encrypt the files with the password (vault secret) you are
    providing and make the sensitive data unreadable to normal users. When Ansible
    wants to read the data, Ansible will ask for the vault password; you need to provide
    the password by keystrokes or via a secret file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a vault file using the `ansible-vault create` command. Do not forget
    the vault password as you will not be able to decrypt the content otherwise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.45 – Creating a secret variable file using Ansible Vault ](img/B18383_03_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.45 – Creating a secret variable file using Ansible Vault
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve done this, a text editor (for example, `vim`) will open so that
    you can enter the content of your sensitive file. Add your content and save the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you try to read the file, you will see the encrypted content, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.46 – The Ansible Vault file after being encrypted ](img/B18383_03_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.46 – The Ansible Vault file after being encrypted
  prefs: []
  type: TYPE_NORMAL
- en: 'View the content of the file using the `ansible-vault view` command; Ansible
    will ask for the vault password, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.47 – Viewing the content of the Ansible Vault file ](img/B18383_03_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.47 – Viewing the content of the Ansible Vault file
  prefs: []
  type: TYPE_NORMAL
- en: You will be using this Ansible Vault in the upcoming exercise to keep the SMTP
    server username and password safe.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss Ansible Vault in more detail in [*Chapter 13*](B18383_13.xhtml#_idTextAnchor241),
    *Using Ansible for Secret Management*.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting Content with Ansible Vault
  prefs: []
  type: TYPE_NORMAL
- en: You have more options with Ansible Vault, such as edit, encrypt, decrypt, rekey,
    and more. Refer to [*Chapter 13*](B18383_13.xhtml#_idTextAnchor241), *Using Ansible
    for Secret Management**,* for more details. Check out the documentation at [https://docs.ansible.com/ansible/latest/user_guide/vault.xhtml](https://docs.ansible.com/ansible/latest/user_guide/vault.xhtml)
    for more details about Ansible Vault.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, you will enhance the previous **weekly reboot** playbook
    by adding email notifications before and after the system reboot:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new role called `Chapter-03/roles/send-email`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.48 – Creating an Ansible role for sending emails ](img/B18383_03_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.48 – Creating an Ansible role for sending emails
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a task inside `roles/send-email/tasks/main.yml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.49 – The task file for the send-email role ](img/B18383_03_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.49 – The task file for the send-email role
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The `delegate_to: localhost` line of the `mail` module needs to be executed
    on the localhost (the Ansible control node here) rather than the managed node.'
  prefs: []
  type: TYPE_NORMAL
- en: Skip the `username` and `password` variables if your SMTP server has been configured
    as open and no authentication is required. In this case, you need to create a
    secret file to keep the username and password in. (The `cc` and `attach` options
    have been kept here as comments for demonstration purposes. It is possible to
    enhance the use case by adding those features.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new variable file called `vars/smtp_secrets.yml` using Ansible Vault
    (remember the vault password):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.50 – Creating a secret variable file using Ansible Vault ](img/B18383_03_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.50 – Creating a secret variable file using Ansible Vault
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the content of the secret file and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.51 – Adding a variable to the vault file and saving it (:wq) ](img/B18383_03_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.51 – Adding a variable to the vault file and saving it (:wq)
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new playbook called `Chapter-03/system-reboot-with-email.yml` with
    the following content (alternatively, copy the previous `system-reboot.yml` file
    and rename it):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.52 – Ansible playbook for rebooting with an email notification (1)
    ](img/B18383_03_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.52 – Ansible playbook for rebooting with an email notification (1)
  prefs: []
  type: TYPE_NORMAL
- en: 'Add tasks for the reboot and email, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.53 – Ansible playbook for rebooting with an email notification (2)
    ](img/B18383_03_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.53 – Ansible playbook for rebooting with an email notification (2)
  prefs: []
  type: TYPE_NORMAL
- en: Note that different values should be used for `email_report_body` and `email_smtp_subject`
    based on the job (pre-reboot or post-reboot).
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have all required variables in the playbook for the `send-email`
    role except `email_smtp_username` and `email_smtp_password`. This is because they
    are sensitive and you cannot store them as plain text here; instead, you should
    include them in your secret variable file (`vars/smtp_secrets.yml`) that’s being
    encrypted by Ansible Vault.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.54 – Executing the Ansible playbook without the vault password ](img/B18383_03_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.54 – Executing the Ansible playbook without the vault password
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible is trying to decrypt the secret file, but no vault secret (vault password)
    has been provided. Execute the same playbook but add the `--ask-vault-password`
    switch at the end (Ansible will not ask or prompt for vault secrets by default):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.55 – Executing the Ansible playbook with the vault password ](img/B18383_03_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.55 – Executing the Ansible playbook with the vault password
  prefs: []
  type: TYPE_NORMAL
- en: 'Check your inbox (your `email_smtp_to_address`) for an automated email from
    Ansible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.56 – Email notification ](img/B18383_03_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.56 – Email notification
  prefs: []
  type: TYPE_NORMAL
- en: As an exercise, enhance the playbook by sending consolidated emails for all
    servers rather than sending an individual email or attaching a job summary report
    in the email.
  prefs: []
  type: TYPE_NORMAL
- en: Send an Email Using Ansible
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the Ansible mail module, refer to [https://docs.ansible.com/ansible/latest/collections/community/general/mail_module.xhtml](https://docs.ansible.com/ansible/latest/collections/community/general/mail_module.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create Ansible roles, Jinja2 templates,
    and Ansible Vault secrets. You also learned how to collect system information
    from Ansible facts and use the Jinja2 template to create reports and configurations.
    The use cases you have practiced were very generic, such as collecting system
    information, configuring standard system files, rebooting servers, and sending
    email notifications. As an exercise, enhance the use cases by adding more tasks
    and validation (such as validating the reboot activity before sending an email
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the importance of **version control
    systems** (**VCSs**) in Ansible, the best practices to keep your Ansible artifacts
    safe, and how to enable collaboration and sharing to improve the quality of Ansible
    artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '*How to pass extra variables to an Ansible playbook*: [https://www.redhat.com/sysadmin/extra-variables-ansible-playbook](https://www.redhat.com/sysadmin/extra-variables-ansible-playbook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible for Security and Compliance*: [https://www.ansible.com/use-cases/security-and-compliance](https://www.ansible.com/use-cases/security-and-compliance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
