- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Merging, Pull Requests, and Handling Merge Conflicts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will see how to merge branches, using different types of
    merges. You will also see how to handle merge conflicts and tools to make managing
    conflicts easier. You will learn about pull requests and the difference between
    a fast-forward merge and a "true" merge.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to push a commit to the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to manage your commits with the command line, Visual Studio, and GitHub
    Desktop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to merge into the main branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a pull request is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What merge conflicts are and how to resolve them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a fast-forward merge is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a true merge is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with an overview of merging.
  prefs: []
  type: TYPE_NORMAL
- en: Merging overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are on a feature branch, and the feature is sufficiently complete and
    tested, you will want to merge your branch back into the main branch. Some organizations
    let you simply merge, others (most?) require that you create a **Pull Request
    (PR)**. A **PR** says, essentially, "Please examine my code and if you think it
    is right, merge it into the main branch."
  prefs: []
  type: TYPE_NORMAL
- en: Having a second (or third) set of eyes on your code before merging can save
    a lot of headaches later on (see *Chapter 12*, *Fixing Mistakes (Undo)*, on fixing
    mistakes).
  prefs: []
  type: TYPE_NORMAL
- en: Often, if you've been careful (see below) you will merge without a problem.
    From time to time, however, you will run into the dreaded merge conflict. You'll
    see below a couple ways to handle that conflict.
  prefs: []
  type: TYPE_NORMAL
- en: Book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will remember from the previous chapter that we have a directory, `C:\GitHub\VisualStudio\ProGitForProgrammers`,
    that is the home of the Books application and that we''ve been editing in Visual
    Studio. Of course, we don''t have to manage it in Visual Studio; we can use any
    of our tools. For example, I can open the terminal and change directories to the
    Books app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Opening the terminal'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that it says I have one commit to push (as indicated by the up-pointing
    arrow followed by the 1). I must have forgotten to do so the last time I was working
    with this code. I don't want to just push it, howeverâ€”who knows what's in there?
    There are a few ways to find out.
  prefs: []
  type: TYPE_NORMAL
- en: What's in that push?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the command line, we can use the `git show` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Examining the push'
  prefs: []
  type: TYPE_NORMAL
- en: There's a lot of information here. First, we see the author and the date. Then
    we see the message that was attached to this commit (`Add properties`). Next,
    Git does a `diff` (difference) between `Book.cs` and `Book.cs` naming the first
    one **a** and the second **b**. The one labeled **a** is `Book.cs` before this
    commit, the one labeled **b** is the new contents in this commit.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed the line that says `/dev/null`. This indicates that a file
    is being compared against nothing, and thus everything is new.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next line shows that `/dev/null` is being compared against file **b** (the
    new `Book.cs` file):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Comparing against dev/null'
  prefs: []
  type: TYPE_NORMAL
- en: What follows are the changes. Deletions will be marked in red, modifications
    in green, and new code in yellow. (This display and these colors may depend on
    which shell you are using.) We see here that three `using` statements, a namespace,
    and the class `Book` were all added in this commit. Before we push it, let's see
    what we can learn in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Opening the same directory in Visual Studio and going to the Git view reveals,
    as we would expect, that we have one commit to push (outgoing):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: Visual Studio showing one file to push'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we push, let''s see what''s in that push. Clicking on **1 outgoing**
    opens two windows. The **Branches** window shows us which branch we are on (**Book**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5: Visual Studio showing contents of the local repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'The middle panel has the really cool info. It tells you the local (as opposed
    to origin) history of your branches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.6: Visual Studio showing commit history'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that **main** has five commits (reading newest to oldest) and that
    preceding the newest commit in **main**, we have an outgoing commit on the **Book**
    branch, whose message is **Add properties**. This is consistent with what we saw
    at the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can go further, and return to **Solution Explorer**. Because there is more
    to see in `Program.cs` (rather than `Book.cs`), right-click on `Program.cs` and
    choose **Git** and then **History**. That opens the **History** page for `Program.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.7: Visual Studio showing the history of Program.cs'
  prefs: []
  type: TYPE_NORMAL
- en: Note that if we registered a user with an image, that image would be shown on
    the extreme left.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we see the four commits. We can compare them by right-clicking on, for
    example, the first one and choosing **Compare with previous**. Two windows open.
    On the left, you have the older commit, on the right the newer. We can see that
    in the newer commit one line was added, which is shown in Visual Studio with green
    highlighting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.8: Side-by-side comparison'
  prefs: []
  type: TYPE_NORMAL
- en: You can see that Visual Studio can give you a graphic representation of the
    same information you might get from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Details, details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s close all these history windows and go back to the list of outgoing
    and local history. Under **Outgoing**, we see **Add properties**. Right-click
    on that line and a window will open on the right. You''ll see the commit ID (ID)
    along with the name of the committer, the date, and so forth. You''ll also see
    the message and then you''ll see a list of which files were changed (in this case,
    **Book.cs**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.9: Visual Studio showing which files have changed for a commit'
  prefs: []
  type: TYPE_NORMAL
- en: We want to know what changed in `Book.cs`. To do this, right-click on `Book.cs`
    and choose **View History**. The single commit will come up in the middle window.
    Double-click on that and you'll see the `Book` class that is being added by this
    commit.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can open GitHub Desktop to the same directory. Click on **File** and choose
    **Add local repository...**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.10: Opening GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to tell GitHub Desktop where that repository is. A dialog
    opens and you can either enter the local path by hand, or you can click **Choose...**,
    which will bring you to a Windows Explorer window where you can pick the appropriate
    directory. Once that is all set, click **Add repository**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.11: Adding a local repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll now be brought to the main page. Notice that we are still in the repository
    **ProGitForProgrammers**, but on the **Book** branch, and that it knows we have
    one commit to push. It also offers a handy **Push origin** button with an explanation
    that pressing that button will push the commit to the origin (the server; your
    repository on GitHub):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.12: GitHub Desktop information bar'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, we want to know what we are pushing. No problem, just click **History**
    and you''ll see the history of commits and the changes for whichever commit you
    highlight:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.13: History in GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen the various ways the command line, Visual Studio, and GitHub
    Desktop manage the commit, it is time to get the commit to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Push it already
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s return to the command line and push the commit we''ve been examining:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.14: Pushing from the command line'
  prefs: []
  type: TYPE_NORMAL
- en: If you go to Visual Studio now, it should say **0 outgoing** as you've pushed
    the one that was waiting. Similarly, GitHub Desktop will have changed its button
    from **Push Origin** to **Create Pull Request** â€“ the likely next thing to do.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the `Book` branch sorted, it is (finally!) time to merge it
    into **main**.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our goal is to merge `Book` back into `main`. To do this in Visual Studio,
    just click on **Git** and then on **Manage Branches**. Your **Branches** window
    will open. Right-click on **main** and choose **Checkout**. You are now ready
    to merge `Book` into `main`, which you''ll see in the right-click (context) menu
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.15: Merging in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: The trick is, while main is checked out, right-click on **Book** and you'll
    see the option to make the merge.
  prefs: []
  type: TYPE_NORMAL
- en: Merge conflicts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s turn to the command line and do a pull as our branch has diverged from
    the origin. When we do, we''re told that there is a merge conflict in `Program.cs`
    and that the merge has failed. Git tells you to fix the conflicts and then commit
    the result. This is unusual, to get a merge conflict on a pull, but as you can
    see, it does happen. Let''s handle this conflict and then set up a more typical
    situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.16: A merge conflict'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few ways to handle any merge, but the easiest is to use a merge
    tool. I use KDiff3 ([https://sourceforge.net/projects/kdiff3/](https://sourceforge.net/projects/kdiff3/)).
    Since I use this a lot, I have put it into my config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/B17741_04_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.17: Reviewing the configuration file'
  prefs: []
  type: TYPE_NORMAL
- en: This sets up KDiff3 as my merge tool and tells Git where to find it. One of
    the things I like most about KDiff is that it will often fix the problem for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'To invoke it, all I need to write is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: and it opens KDiff to the conflict.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here it found two problems and was able to fix one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.18: KDiff automatically solves one conflict'
  prefs: []
  type: TYPE_NORMAL
- en: 'It then brings us to a window with multiple panes. The panes on top show you
    the conflict:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.19: Conflicts as shown in KDiff'
  prefs: []
  type: TYPE_NORMAL
- en: You can see on the left side (**Local**) that we have one line whereas on the
    right side (**Remote**) we have two lines. Clearly, someone else has edited this
    file that we edited and now Git doesn't know what to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the bottom pane is code to provide context and then a highlighted line where
    your choice of which line(s) to place there is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.20: KDiff provides context for your merge'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you right-click on that line, you are given a choice to pick the left
    window (window A), the right window (window B), or both (and you can choose the
    order they are added in):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.21: KDiff asking which version should be placed'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are done, save the file and close KDiff. <poof\> No more conflict.
    Git now shows you the changes you made that should now be committed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.22: Console indicating that the conflicts have been resolved'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now add that file and commit it, and then push it up to the origin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.23: Committing and pushing to origin'
  prefs: []
  type: TYPE_NORMAL
- en: We've seen how KDiff and similar programs can greatly reduce the amount of work
    involved in solving merge conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: Merging from the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Much more common is for there to be a merge conflict when you specifically
    merge locally. To do so is pretty easy. From the command line, check out the branch
    you want to merge **into** (`main`) and then use the Git command `merge`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.24: The merge command'
  prefs: []
  type: TYPE_NORMAL
- en: Here Git used the "recursive" strategy; a way to speed up the merge.
  prefs: []
  type: TYPE_NORMAL
- en: Fast forward
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Often, however, you''ll see Git report that it used a fast forward merge. Fast
    forward works like this; suppose your starting point is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.25: Fast forward'
  prefs: []
  type: TYPE_NORMAL
- en: 'You now want to merge **Feature1** into **Main**. Notice that **Feature1**
    branched from the tip of **Main** (the latest commit). In that case, there is
    a path from the first commit in **Main** to the last commit in **Feature1**. In
    that case, all Git has to do is move **Main**''s pointer to the tip of **Feature1**,
    creating a single branch (which it will call **Main**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.26: Moving the pointer'
  prefs: []
  type: TYPE_NORMAL
- en: Because all that is required is moving a pointer to the last commit, this is
    called **fast forward**.
  prefs: []
  type: TYPE_NORMAL
- en: True merge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous example, **Feature1** was branched off of **Main** at the point
    that is still the tip of **Main**. But what if someone else merged a branch into
    **Main**, and now the commit you branched off of is no longer the tip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.27: Feature 1 does not branch off the tip of Main'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, you either need a rebase (covered in the next chapter) or a "true"
    merge:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.28: A true merge is required'
  prefs: []
  type: TYPE_NORMAL
- en: Because there was no path from **Main** to the tip of **Feature1** that didn't
    leave out any other commits (for example, the tip of **Main**), we use a new commit
    to bring the two branches together.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that this approach adds a new commit (**A**) that exists only for the
    merge. Over time you will have a lot of these relatively meaningless commits cluttering
    up your history. The solution to this is to rebase, as shown in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You don't change anything when doing a fast forward or a true merge; you merge
    and Git takes care of the details
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding conflicts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Avoiding conflict is generally a good thing to do, and in the case of Git,
    it is a very good thing indeed. Rather than having to resolve a whole lot of conflicts
    all at once, you really want to catch those conflicts as you go (and thus handle
    just one or two at a time). If you are on a team, some conflicts cannot be avoided,
    but there are two good rules of thumb to cut down drastically on the work involved
    in handling conflicts:'
  prefs: []
  type: TYPE_NORMAL
- en: Do not have more than one programmer working on any given file (if possible)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merge main into your feature branch very frequently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Notice #2 does *not* say to merge your feature branch into main, but rather
    the other way around. This will not endanger the main thread, but will quickly
    reveal if there are any conflicts so far. If so, you can fix them in your branch
    and move on.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you saw:'
  prefs: []
  type: TYPE_NORMAL
- en: How to merge branches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The different types of merges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to merge conflicts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How tools like KDiff can make merging easier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a pull request is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a fast forward merge is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a true merge is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pretend you are two programmers working on the same project â€“ a utility that
    contains a calculator and a Fahrenheit to Celsius converter. If you actually have
    two programmers to do this, even better.
  prefs: []
  type: TYPE_NORMAL
- en: Set up a new repository and clone it to two different folders. Have one person
    populate the main branch with the beginnings of the UtilityKnife project, commit
    the changes, and push it. Have the other person pull the main branch's changes.
  prefs: []
  type: TYPE_NORMAL
- en: OK, you both have a main branch with some code on it. Now have each programmer
    create their own branch, one to work on the calculator and the other to work on
    the converter. Along the way, the converter will want to use some of the methods
    of the calculator. Try to avoid or minimize conflicts, merge frequently, and resolve
    conflicts that arise.
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As always, there is no one single correct way to do this. Here is how I worked
    through it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #1: Set up a new repository and clone it to two different folders'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Notice that we are going to use just one repository. We are building a single
    program, but at least at first Johnis going to create the calculator while Sara
    is going to create the temperature converter. We''ll call the entire program **UtilityKnife**.
    To begin we go to [GitHub.com](http://GitHub.com) and create our new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.29: Creating the new repository'
  prefs: []
  type: TYPE_NORMAL
- en: The readme file is written using Markdown. You can learn more about Markdown
    at [https://www.markdownguide.org/cheat-sheet/](https://www.markdownguide.org/cheat-sheet/)
    among other places on the net.
  prefs: []
  type: TYPE_NORMAL
- en: We then clone the repo into folders (or separate computers if there are two
    or more of you). I'll create a directory, `John`, and clone this repo into that
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.30: Cloning from the command line'
  prefs: []
  type: TYPE_NORMAL
- en: John has chosen to use the command line. Sara, on the other hand, likes to use
    Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by clicking on **File** and selecting **Clone Repository...**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.31: Opening the Git menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'That will bring up a dialog box where you can paste in the path you took from
    [GitHub.com](http://GitHub.com) and the path to your new repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.32: Cloning from Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Clone** button, and Visual Studio will set up your cloned repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solution Explorer validates that you have cloned the repository and brought
    down the three files from GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.33: Solution Explorer shows results of the clone'
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #2: Have one person populate the main branch with the beginnings of UtilityKnife,
    commit the changes, and push it'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll have Sara create a new solution in her directory for the UtilityKnife
    program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.34: Creating the program'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the project is completed, she adjusts `Program.cs` to be the skeleton
    of all that is to come:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place, she will commit these changes using the **Git** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.35: The Git menu in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open the commit window, where you can fill in the commit message,
    and then click **Commit All**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.36: The Git Changes menu in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you do, the view will change to remove the files and commit message and
    will confirm the commit and show that there is one commit ready to be pushed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.37: Commit confirmation in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: That is just what we want, so click on the upload button (the up-pointing arrow)
    and push the commit to the repo on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'It verifies your success and offers to create a Pull Request for you, which
    we do not want right now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.38: After commit Visual Studio indicates there is one file to push'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sara now has the starting main branch and is ready to create a feature branch.
    Before we look at that, let''s have John bring down the main branch as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.39: Pulling the repository from origin'
  prefs: []
  type: TYPE_NORMAL
- en: This is a somewhat complex screenshot. We start by seeing that within `C:\GitHub\John`
    there is a folder called `UtilityKnife`. We change to that directory and then
    do a `git pull`. The result is the retrieval of the files for the `UtilityKnife`
    program.
  prefs: []
  type: TYPE_NORMAL
- en: Now both John and Sara have the same starter program for UtilityKnife.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #3: Each programmer creates a feature branch. Each programmer then puts
    the beginning of their feature into their branch, committing frequently (more
    frequently than you would in "real life")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'John, who uses the command line, starts his feature branch by using the `checkout
    -b` command, which both creates a new branch and checks it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.40: Creating a new branch at the command line'
  prefs: []
  type: TYPE_NORMAL
- en: 'He is now ready to start coding. Let''s create a folder, and then within that
    folder, the skeleton of our class and its first method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save and commit this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_41.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.41: Committing from the command line'
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin by taking a status that shows us that we have one untracked file.
    We add that file (remember that `add .` means add all the untracked and modified
    files to the index), and then we commit it, adding a message. Uh oh, the commit
    message is misspelled. Let''s fix that with a new command: `amend`. Since we have
    not pushed, all we have to do is enter `--amend` and use `-m` for the revised
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.42: Using the amend flag'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the second line reflects back the change, and if we use `log` to see
    the commits, we''ll see that the commit now is spelled correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.43: Using log to see the commit'
  prefs: []
  type: TYPE_NORMAL
- en: 'John decides to push his commit from his local repository up to the origin
    (the GitHub repo). When he tries, however, Git tells him that the server doesn''t
    know about his branch, but it helpfully gives him the right command to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.44: Trying to push but failing. Git helps.'
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, Sara has begun work on the `Calculator` class.
  prefs: []
  type: TYPE_NORMAL
- en: Sara and the Calculator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Within Visual Studio, she clicks on the **Git** menu choice and then **new
    branch**. A dialog opens, and note that it assumes you want to branch off of **main**
    (though if you have multiple branches, you can of course branch off of any of
    them):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.45: Creating a new branch'
  prefs: []
  type: TYPE_NORMAL
- en: She is ready now to code, and whatever she writes will not affect John's code
    (or the code on main). You can verify that she can't even see John's work. They
    are on different (and thus isolated) feature branches.
  prefs: []
  type: TYPE_NORMAL
- en: She will add the skeleton of a `Calculator` class within its own folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Sara will now check this in, but unlike John, she will not push it up to the
    server. Thus, it will be in her local repository only.
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting **Git** | **Commit** or **Stash**, she enters her message and
    clicks **Commit All**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.46: Committing all'
  prefs: []
  type: TYPE_NORMAL
- en: As noted above, this puts her commit into the local repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #4: Merge the main branch into the feature branch frequently to ensure
    that if there are conflicts, you catch them early'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'John wants to merge main into his branch to ensure that he catches bugs early.
    To do this, he switches to main, updates by issuing a `pull` request, and then
    switches back to his feature branch and enters `merge main`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.47: Main already up to date'
  prefs: []
  type: TYPE_NORMAL
- en: No problem here. Main hasn't changed since we branched off of it, so `temperatureConverter`
    is fully up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, suppose John decides to merge his feature branch into main. Whether or
    not this is wise, all he has to do is reverse the merge order:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.48: Reversing the merge order'
  prefs: []
  type: TYPE_NORMAL
- en: 'The key line here is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We are on the main branch, and this merges the feature branch into main. You
    can see that Git is able to fast-forward the merge, as described in a previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: John is now free to continue with his existing feature branch or to create a
    new one. If, on the other hand, he had to do a Pull Request and then wait for
    his PR to be approved before it is really merged, he would be wise to make a new
    branch, possibly off of `temperatureConverter`.
  prefs: []
  type: TYPE_NORMAL
- en: Sara had taken a break but she's ready to go back to work. Being cautious, she
    wants first to merge main into her feature branch to make sure there are no conflicts.
    Remember, John and Sara may work well together but they are not telling each other
    every time they commit or merge.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, Sara checks out main and does a `pull` to get the latest files from
    main. Now she checks out **Calculator** and right-clicks on **main**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.49: Merging main into Calculator in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: She will select **Merge 'main' into 'Calculator'**. Once again, doing so will
    *not* merge her changes into main, but simply retrieve the newest version of main
    and merge that into her feature branch.
  prefs: []
  type: TYPE_NORMAL
- en: Since Visual Studio is cautious, it will ask you if you are sure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_50.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.50: Visual Studio checks that what you are about to do is what you
    want to do'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking **Yes** will begin the merge. Now, remember that John had done some
    work, and then merged his branch into main. Since there were no conflicts, Visual
    Studio just tells Sara that the merge was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.51: Visual Studio signals success'
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, merging main into Calculator will change Calculator, bringing in
    everything in main. The key thing in main is what John merged, and we see that
    in Calculator now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.52: Examining the result of the merges in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that since Sara has not merged her code into main, John has no awareness
    of, nor way to get to, the `Calculator` class. If we open Visual Studio in John''s
    branch, we see **Converters** but no **Calculator**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_53.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.53: John''s branch with no Calculator'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s pause a moment and think about what is happening on GitHub. Sara has
    committed her changes but not pushed them, so GitHub won''t know about her branch.
    John has pushed his changes and also merged them into main. We would anticipate
    two branches on GitHub, one for main and one for John; what''s more, at this point,
    main and John should be identical, and Sara should have a branch on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.54: The branches on origin'
  prefs: []
  type: TYPE_NORMAL
- en: 'Main has **Converters** (from John''s merge) but not Calculator (because Sara
    has not merged). John''s branch (**temperatureConverter**) is identical:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_55.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.55: Changing branches on origin'
  prefs: []
  type: TYPE_NORMAL
- en: 'To drive this home, we can ask GitHub for a list of all the branches it knows
    about:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.56: Asking GitHub to list all the branches'
  prefs: []
  type: TYPE_NORMAL
- en: These all show as updated by me because Sara and John don't really exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #5: John is building the temperature converter. Have him "borrow" code
    from the calculator. See if there are merge conflicts'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next four commits, Sara fleshes out the calculator with subtraction,
    multiplication, integer division, and division. She has not yet pushed her changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.57: Fleshing out the calculator'
  prefs: []
  type: TYPE_NORMAL
- en: 'The formula for converting Fahrenheit to Celsius is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*(F â€“ 32) * 5/9*'
  prefs: []
  type: TYPE_NORMAL
- en: 'John wants to convert 212Â° Fahrenheit (the boiling point of water) and expects
    to get back 100Â° Celsius as a good test case. To do this, he could use the built-in
    subtraction and division operators but instead chooses to use Sara''s calculator.
    His first attempt is to merge main into his branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.58: Merging main into the working branch'
  prefs: []
  type: TYPE_NORMAL
- en: Main is up to date and there is no difference between main and `temperatureConverter`.
    Yet John doesn't have the functions he needs. This tells John that the calculator
    functions he needs are not yet pushed to GitHub. He can call Sara and ask her
    to push them so that he can pull them down, or she can merge them into main and
    then he can update from main. Sara is not ready to merge into main, but agrees
    to push her branch's commits.
  prefs: []
  type: TYPE_NORMAL
- en: 'She has four outgoing commits (that is, commits that have not yet been pushed
    to the origin):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.59: Visual Studio indicates four outgoing commits'
  prefs: []
  type: TYPE_NORMAL
- en: 'To push these, she just clicks on the up arrow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.60: The push button in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: John tries to bring down the changes but runs into a brick wall.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.61: Unable to see Calculator'
  prefs: []
  type: TYPE_NORMAL
- en: 'His local repository has never heard of the branch **Calculator**. There are
    a couple of ways to solve this but the easiest is to ask Sara to merge her work
    into **main**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.62: Merging Calculator into main'
  prefs: []
  type: TYPE_NORMAL
- en: When Sara merges Calculator into main, she does so *locally*. She still has
    to push these changes to the origin to do John any good. She pushes as she would
    any commit.
  prefs: []
  type: TYPE_NORMAL
- en: John is now ready to `pull` these changes. Once he does, he realizes that Sara
    has used integers and he needs doubles. He modifies the `Calculator` class to
    use doubles, and while he is at it, he makes all the methods (and the class) static.
    (If you're not familiar with C#, don't worry about what that means; the important
    thing is that he's made a change)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/B17741_04_63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.63: Pull the changes for the branch'
  prefs: []
  type: TYPE_NORMAL
- en: The second line says that we're starting out with main up to date with `origin/main`.
    However, when we do a `pull`, the local Git finds objects to bring down for main.
    There are 22 objects. Why 22 when there were only 4 commits? Some of these objects
    are used internally by Git.
  prefs: []
  type: TYPE_NORMAL
- en: Later, we see that the merge was a fast forward, and the next line shows that
    there were 29 additions and no modifications or deletions (if you count the +
    marks, you'll find that there are 29). This is followed by the confirmation that
    1 file changed with 29 insertions.
  prefs: []
  type: TYPE_NORMAL
- en: John is almost there. His local copy of main now has what he needs, but it is
    on the wrong branch. The solution is to merge main into `temperatureConverter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the order of which branch is being merged into the other matters, I
    always look it up on Stack Overflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.64: Stack Overflow advice'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are exactly the steps John needs to take:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.65: Merging'
  prefs: []
  type: TYPE_NORMAL
- en: The last two lines indicate that `Calculator` has been brought over with the
    merge and that `temperatureConverter` has two commits to push to its repo.
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick look at the log shows that `HEAD`, `origin/temperatureConverter`, `origin/main`,
    `origin/HEAD`, and `origin/Calculator` are all pointing to the same commit as
    main! Thus, John''s branch now has access to the `Calculator` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.66: Access to the calculator'
  prefs: []
  type: TYPE_NORMAL
- en: 'He can now return to his program and use these static methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: I agree that this is wicked ugly, but it works, and more importantly, it demonstrates
    that John's `temperatureConverter` can use code from `Calculator`. What's more,
    John can edit `Calculator`. We'll see what happens when all this is merged.
  prefs: []
  type: TYPE_NORMAL
- en: 'In jumping back and forth between John and Sara, I did the work in Sara''s
    folder. No harm done, however. We''ll just have Sara commit the changes. Uh oh,
    the changes were made on main. Let''s clean all this up. First, on Sara''s machine,
    let''s merge main into `Calculator`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.67: Merging main into Calculator in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: This is just like the previous merges except that now `Calculator` is the checked-out
    branch and we right-click on main to get the **Merge 'main' into 'Calculator'**
    option. Now, to ensure that all is right with the world, merge Calculator back
    into main.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, Sara's `main` and `Calculator` branches are identical, but John
    still doesn't have what he needs. Sara can now push main to the origin with a
    simple push.
  prefs: []
  type: TYPE_NORMAL
- en: 'John can now retrieve main, which should have the changes he needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.68: Retrieving main with changes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Great, main has what John needs, but he needs it on his branch. No problem,
    we''ll merge main into `temperatureConverter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.69: Merging main into temperatureConverter'
  prefs: []
  type: TYPE_NORMAL
- en: Let's go look at John's Fahrenheit converter and see if it is now up to date.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test that this worked by feeding the method 212 and hoping to get back
    100\. Let''s turn to the program for that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run our program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_04_70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.70: Testing the program'
  prefs: []
  type: TYPE_NORMAL
- en: We have completed the challenge and managed all our branches. More important,
    the program works!
  prefs: []
  type: TYPE_NORMAL
