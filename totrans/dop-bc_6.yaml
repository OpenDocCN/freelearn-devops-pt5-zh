- en: Automated Testing (Functional and Load Testing)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试（功能测试和负载测试）
- en: '"Most people overestimate what they can do in one year and underestimate what
    they can do in ten years."'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “大多数人高估了自己一年内能做到的事，低估了十年内能做到的事。”
- en: '- Bill Gates'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '- 比尔·盖茨'
- en: In this chapter, we will learn about the various types of testing that can be
    carried out after deploying an application in a non-prod environment. Continuous
    testing is extremely important to verify an application's functionality, performance,
    and so on. Automated testing will not only speed up the verification process,
    but it will also standardize the way testing is done in an effective manner. Our
    focus will be on simple functional testing to see how we can perform it, and load
    testing using the open source and commercial tools or services available.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习在将应用程序部署到非生产环境后可以执行的各种类型的测试。持续测试对于验证应用程序的功能、性能等非常重要。自动化测试不仅能加快验证过程，还能标准化测试的执行方式。我们的重点将是简单的功能测试，看看我们如何执行它，以及使用开源和商业工具或服务进行负载测试。
- en: We will create a sample functional test using Selenium and then execute it in
    Eclipse IDE for verification of its results. We will also integrate a Selenium-based
    Maven project with Jenkins so we can execute that functional test in Jenkins itself
    and make it a part of our end-to-end automation objective.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个使用 Selenium 的功能测试示例，并在 Eclipse IDE 中执行该测试以验证其结果。我们还将把基于 Selenium 的 Maven
    项目与 Jenkins 集成，这样我们就可以在 Jenkins 中执行该功能测试，并将其作为我们端到端自动化目标的一部分。
- en: For load testing, we will create a sample load test using Apache JMeter GUI,
    and then use the saved `.jmx` file in Jenkins for load test execution from Jenkins.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于负载测试，我们将使用 Apache JMeter GUI 创建一个负载测试示例，然后使用保存的 `.jmx` 文件在 Jenkins 中执行负载测试。
- en: 'This chapter will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Selenium-based functional testing for web applications using Eclipse
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Eclipse 进行基于 Selenium 的 Web 应用功能测试
- en: Selenium and Jenkins integration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium 与 Jenkins 集成
- en: Load testing with URL-based tests in **Visual Studio Team System** (**VSTS**)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于 URL 的测试进行负载测试，**Visual Studio Team System** (**VSTS**)
- en: Load testing using Apache JMeter
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Apache JMeter 进行负载测试
- en: Functional testing using Selenium
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Selenium 进行功能测试
- en: In this chapter, we will use Selenium and Eclipse for a functional test case
    execution. Let's go step by step to create a sample functional test case and then
    execute it using Jenkins.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Selenium 和 Eclipse 执行一个功能测试用例。让我们一步步地创建一个示例功能测试用例，然后使用 Jenkins 执行它。
- en: The PetClinic project is a Maven-based spring application and we will create
    a test case using Eclipse and Maven. Hence, we will utilize the m2eclipse plugin
    in Eclipse.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: PetClinic 项目是一个基于 Maven 的 Spring 应用，我们将使用 Eclipse 和 Maven 创建一个测试用例。因此，我们将使用
    Eclipse 中的 m2eclipse 插件。
- en: 'We have installed Eclipse Java EE IDE for Web Developers, Version: Mars.2 Release
    (4.5.2), Build ID: 20160218-0600:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已安装 Eclipse Java EE IDE for Web Developers，版本：Mars.2 Release (4.5.2)，构建 ID：20160218-0600：
- en: Go to the Eclipse marketplace and install the Maven Integration for Eclipse
    plugin.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 Eclipse 市场，安装 Maven Integration for Eclipse 插件。
- en: 'Create a Maven Project using a wizard in Eclipse:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Eclipse 中使用向导创建一个 Maven 项目：
- en: '![](img/00096.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00096.jpeg)'
- en: 'Select Create a simple project (skip archetype selection) and click on Next:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“创建一个简单项目”（跳过原型选择），然后点击“下一步”：
- en: '![](img/00190.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00190.jpeg)'
- en: Go through the wizard and create a project. It will take some time to create
    a project in Eclipse. Provide Artifact, Version, Packaging, Name, and Description.
    Click on Finish.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跟随向导创建一个项目。创建项目可能需要一些时间。在此过程中，提供 Artifact、版本、打包类型、名称和描述。点击完成。
- en: Wait until the Maven project is created and configured. Make sure that Maven
    is installed and configured properly. In the case of Maven behind proxy, configure
    the proxy details into `conf.xml`, available in the `Maven` directory.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待 Maven 项目创建并配置完成。确保 Maven 已正确安装和配置。如果 Maven 位于代理后面，请将代理详细信息配置到 `conf.xml`
    文件中，该文件位于 `Maven` 目录下。
- en: 'In `Pom.xml`, we need to add Maven, Selenium, TestNG, and JUnit dependencies
    in the `<project>` node. The following is a modified `Pom.xml`:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Pom.xml` 文件中，我们需要在 `<project>` 节点内添加 Maven、Selenium、TestNG 和 JUnit 依赖项。以下是修改后的
    `Pom.xml`：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save `pom.xml` after adding these changes and build the project again from
    the Project menu. It will download new dependencies:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加完这些更改后，保存 `pom.xml` 文件，并从“项目”菜单重新构建项目。它将下载新的依赖项：
- en: '![](img/00191.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00191.jpeg)'
- en: Click on the Details button of the dialog box to verify the operation in progress.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击对话框中的“详细信息”按钮以验证正在进行的操作。
- en: 'The next task is to write the `TestNG` class. Install the TestNG plugin. Go
    to Help and click on Install New Software. Add Repository:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的任务是编写`TestNG`类。安装TestNG插件。点击帮助并选择安装新软件。添加仓库：
- en: '![](img/00099.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00099.jpeg)'
- en: 'Select the items we need to install:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们需要安装的项目：
- en: '![](img/00197.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00197.jpeg)'
- en: Review all the items that need to be installed and click on Next.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审核所有需要安装的项目并点击下一步。
- en: Accept the license and click on Finish.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受许可协议并点击完成。
- en: Verify the installation progress in Eclipse.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中验证安装进度。
- en: 'Now let''s create a `TestNG` class:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建一个`TestNG`类：
- en: '![](img/00102.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00102.jpeg)'
- en: 'Provide a Class name:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个类名：
- en: '![](img/00104.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00104.jpeg)'
- en: Give a Package name and click on Finish.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给一个包名并点击完成。
- en: 'The newly created class will look like the following screenshot:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新创建的类将如下截图所示：
- en: '![](img/00106.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00106.jpeg)'
- en: Right-click on the `test` file and click on TestNG, convert to TestNG.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`test`文件并点击TestNG，转换为TestNG。
- en: 'It will create a `testing.xml` file that has details about the test suite:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将创建一个包含测试套件详细信息的`testing.xml`文件：
- en: '![](img/00108.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00108.jpeg)'
- en: Right-click on Project and click on Run Configurations.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击项目并点击Run Configurations。
- en: 'Right-click on TestNG and click on New:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击TestNG，然后点击New：
- en: '![](img/00110.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00110.jpeg)'
- en: Provide the Project name and select `testing.xml` in the Suite.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供项目名称并在套件中选择`testing.xml`。
- en: Click OK and Apply.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定并应用。
- en: 'Click on Run:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击运行：
- en: '![](img/00112.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00112.jpeg)'
- en: If Windows Firewall blocks it then click on Allow Access.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Windows防火墙阻止了该操作，请点击允许访问。
- en: 'There is no configuration available in `testing.xml` for execution, hence,
    even if Maven execution runs successfully, no suite will be executed:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`testing.xml`中没有可用于执行的配置，因此即使Maven执行成功，也不会执行任何套件：'
- en: '![](img/00114.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00114.jpeg)'
- en: Generate the `TestNG` class under the `test` folder.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`test`文件夹下生成`TestNG`类。
- en: 'Select `location`, `suite name`, and `class name`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`location`，`suite name`和`class name`：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Go to [https://github.com/mozilla/geckodriver/releases](https://github.com/mozilla/geckodriver/releases)
    and download a version.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://github.com/mozilla/geckodriver/releases](https://github.com/mozilla/geckodriver/releases)并下载一个版本。
- en: Extract the file available in the downloaded ZIP file based on the system configuration
    we have. In our case, we have downloaded `geckodriver-v0.13.0-win64`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据我们系统的配置，从下载的ZIP文件中提取文件。在我们的例子中，我们下载了`geckodriver-v0.13.0-win64`。
- en: Click on it and verify the driver details.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击它并验证驱动程序的详细信息。
- en: 'Let''s write some code as well. It will check whether the title of the web
    page contains a specific string or not. The result or the outcome of the following
    code is based on the title of the page. If it contains a given string then the
    test case will pass; else it will fail:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一些代码。它将检查网页标题是否包含特定的字符串。以下代码的结果或输出取决于页面的标题。如果标题包含给定的字符串，则测试用例通过；否则测试用例失败：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The same file is available in IDE, shown as follows.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: IDE中会显示相同的文件，如下所示。
- en: Let's run the Maven test again from Eclipse.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次从Eclipse运行Maven测试。
- en: 'The following is the output when the test case is executed successfully:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是测试用例成功执行时的输出：
- en: '![](img/00117.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00117.jpeg)'
- en: 'Verify the All Tests tab in the Results of running suite section in Eclipse.
    We can see successful execution here:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse的运行套件结果中的All Tests标签验证。我们可以在这里看到成功的执行：
- en: '![](img/00119.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00119.jpeg)'
- en: Verify the Failed Tests tab in the Results of running suite section in Eclipse.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse的运行套件结果中验证Failed Tests标签。
- en: Verify the Summary tab in the Results of running suite section in Eclipse in
    the successful scenario.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse的运行套件结果中的Summary标签验证成功的场景。
- en: In the code, change the text available for title comparison so the test case
    fails.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码中，修改用于标题比较的文本，以便测试用例失败。
- en: 'Verify the output in Console:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台验证输出：
- en: '![](img/00122.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00122.jpeg)'
- en: 'Verify the All Tests tab in the Results of running suite section in Eclipse
    and notice the failure icon:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse的运行套件结果中的All Tests标签验证，并注意失败图标：
- en: '![](img/00124.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00124.jpeg)'
- en: Verify the Failed Tests tab in the Results of running suite section in Eclipse.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse的运行套件结果中的Failed Tests标签验证。
- en: Click on testPetClinic and verify the Failure Exception.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击testPetClinic并验证Failure Exception。
- en: Verify the Summary tab in the Results of running suite section in Eclipse.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse的运行套件结果中的Summary标签验证。
- en: So, we have created a sample test case based on Selenium to verify the title
    of the PetClinic home page.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们基于 Selenium 创建了一个示例测试用例来验证 PetClinic 首页的标题。
- en: Functional test execution in Jenkins
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 中的功能测试执行
- en: 'Now let''s try to execute the same from Jenkins:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试从 Jenkins 执行相同操作：
- en: Check in the Test Project in Repository. Create a `PetClinic-FuncTest` freestyle
    job in Jenkins.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Repository 中检查测试项目。 在 Jenkins 中创建一个 `PetClinic-FuncTest` 自由风格作业。
- en: 'In the Build section, provide Root POM location and Goals and options to execute:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建部分，提供根 POM 位置和要执行的目标与选项：
- en: '![](img/00126.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00126.jpeg)'
- en: Save the build job and click on Build now.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存构建作业并点击立即构建。
- en: Verify the execution of the build job in the Console output.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证构建作业在控制台输出中的执行。
- en: 'It will open a Mozilla Firefox window and open a URL that is given in the code.
    This requires our PetClinic application to be deployed in a web server and running
    without any issues:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个 Mozilla Firefox 窗口并打开代码中给定的 URL。 这需要我们的 PetClinic 应用程序已经部署在 web 服务器上并且运行没有问题：
- en: '![](img/00128.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00128.jpeg)'
- en: Now make a change in the code so title verification fails and execute the build
    job.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在代码中进行更改，使标题验证失败，并执行构建作业。
- en: 'There is a failure marked in the Console output in Jenkins:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jenkins 的控制台输出中标记了一个失败：
- en: '![](img/00130.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00130.jpeg)'
- en: 'Go to the Project dashboard and verify the graphs for TestNG Results:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到项目仪表盘并验证 TestNG 结果的图表：
- en: '![](img/00132.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00132.jpeg)'
- en: We have seen how to execute Selenium-based test cases in Jenkins.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何在 Jenkins 中执行基于 Selenium 的测试用例。
- en: In the next section, we will see how to execute a load test using Jenkins.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将展示如何使用 Jenkins 执行负载测试。
- en: Load test execution using Jenkins
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 执行负载测试
- en: 'The steps are as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: Open the Apache Jmeter console. Create a Test Plan.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Apache JMeter 控制台。 创建一个测试计划。
- en: Right-click on the Test Plan and click on Add; select Threads (Users).
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击测试计划并点击添加；选择线程（用户）。
- en: Select Thread Group.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择线程组。
- en: Provide Thread Group name.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供线程组名称。
- en: In Thread Group properties, provide Number of Threads, Ramp-up Period, and Loop
    Count.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在线程组属性中，提供线程数、启动时间和循环次数。
- en: Right-click on Thread Group. Click on Add. Click on Sampler. Click on HTTP Request.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击线程组。 点击添加。 点击采样器。 点击 HTTP 请求。
- en: In HTTP Request, provide Server Name or IP. In our case, it will be localhost
    or an IP address.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 HTTP 请求中，提供服务器名称或 IP 地址。 在我们的例子中，它将是 localhost 或某个 IP 地址。
- en: Give the Port Number where your web server is running.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供您的 Web 服务器运行的端口号。
- en: 'Select the Get method and provide a path to the load test:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 GET 方法并提供负载测试的路径：
- en: '![](img/00134.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00134.jpeg)'
- en: Save the `.jmx` file.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 `.jmx` 文件。
- en: Now let's create a Jenkins job.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建一个 Jenkins 作业。
- en: 'Create a freestyle job in Jenkins:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jenkins 中创建一个自由风格作业：
- en: '![](img/00136.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00136.jpeg)'
- en: Add the Build step Execute Windows batch command.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加构建步骤，执行 Windows 批处理命令。
- en: 'Add the following command. Replace the location of `jmeter.bat` based on the
    installation directory and the location of the `.jmx` file too:'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下命令。 根据安装目录和 `.jmx` 文件的位置，替换 `jmeter.bat` 的位置：
- en: '[PRE3]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/00138.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00138.jpeg)'
- en: Add a Post-build Actions. Publish Performance test result report add **/*.jtl
    file.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加构建后操作。 发布性能测试结果报告，添加 **/*.jtl 文件。
- en: 'Click on Build now:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击立即构建：
- en: '![](img/00140.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00140.jpeg)'
- en: Verify Performance Trend on the Project dashboard.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证项目仪表盘中的性能趋势。
- en: 'Click on Performance Trend:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击性能趋势：
- en: '![](img/00142.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00142.jpeg)'
- en: Verify Performance Breakdown.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证性能分解。
- en: In the next section, we will see how to perform load testing of a web application
    deployed in Microsoft Azure App Services using the options available in VSTS.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将看到如何使用 VSTS 中的选项对部署在 Microsoft Azure App Services 中的 Web 应用程序进行负载测试。
- en: Load testing using a URL-based test and Apache JMeter for Microsoft Azure
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基于 URL 的测试和 Apache JMeter 在 Microsoft Azure 上进行负载测试
- en: Once we have deployed our application in Azure App Services successfully, we
    can perform load testing on the Azure App Service or Azure Web Apps. Let's see
    how we can use Visual Studio Team Services to perform testing.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功将应用程序部署到 Azure App Services，我们就可以对 Azure App Service 或 Azure Web Apps
    进行负载测试。 让我们看看如何使用 Visual Studio Team Services 执行测试。
- en: URL-based test
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于 URL 的测试
- en: In the top menu bar, click on Load test. Let's create our first test in the
    VSTS and execute it.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部菜单栏中，点击负载测试。 让我们在 VSTS 中创建我们的第一个测试并执行它。
- en: 'Click on New and select URL based test:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新建并选择基于 URL 的测试：
- en: '![](img/00144.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00144.jpeg)'
- en: 'Verify the HTTP method and URL:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 HTTP 方法和 URL：
- en: '![](img/00009.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: 'Click on Settings; provide input in the different parameters based on need:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“设置”；根据需要在不同参数中提供输入：
- en: '![](img/00148.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00148.jpeg)'
- en: Click Save and click on Run test.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”并点击“运行测试”。
- en: 'Load testing is in progress:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 负载测试正在进行中：
- en: '![](img/00150.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00150.jpeg)'
- en: Verify the complete test data as and when it is available in the VSTS portal.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VSTS 门户中查看完整的测试数据，数据一旦可用。
- en: 'Verify the final summary of the URL-based test execution in VSTS:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VSTS 中验证基于 URL 的测试执行的最终总结：
- en: '![](img/00152.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00152.jpeg)'
- en: 'We will also get Performance and Throughput charts after the test execution
    in VSTS:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试执行后，我们还会在 VSTS 中获得性能和吞吐量图表：
- en: '![](img/00155.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00155.jpeg)'
- en: Verify tests and error-related details too.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时验证测试和与错误相关的细节。
- en: We have seen how a URL-based test can be performed on an Azure Web App. In the
    next section, we will cover how to use Apache JMeter for load testing.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何在 Azure Web 应用上执行基于 URL 的测试。在下一部分，我们将讲解如何使用 Apache JMeter 进行负载测试。
- en: Apache JMeter
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache JMeter
- en: We often need to verify how much load an application serves so, based on it,
    we can check many functions or bottlenecks to improve the performance so it can
    serve as many requests as it can with efficiency. In this section, we'll look
    into how to execute Apache JMeter testing. We will execute a load test on the
    PetClinic application deployed on Azure App Services.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们常常需要验证一个应用程序能够承受多少负载，以便基于此检查许多功能或瓶颈，提升性能，使其能够高效地处理尽可能多的请求。在这一部分，我们将介绍如何执行
    Apache JMeter 测试。我们将在 Azure App Services 上部署的 PetClinic 应用上进行负载测试。
- en: For more details on this topic, go to [http://jmeter.apache.org/usermanual/](http://jmeter.apache.org/usermanual/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多有关此主题的详细信息，请访问 [http://jmeter.apache.org/usermanual/](http://jmeter.apache.org/usermanual/)。
- en: 'To begin the execution, follow these steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始执行，请按以下步骤操作：
- en: Download Apache JMeter from [http://jmeter.apache.org/](http://jmeter.apache.org/).
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://jmeter.apache.org/](http://jmeter.apache.org/) 下载 Apache JMeter。
- en: 'Start it and create a Thread Group in Apache JMeter. Here, we mention Number
    of Threads (users), Ramp Up Period (in seconds), and Loop Count:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Apache JMeter 中启动并创建一个线程组。这里，我们需要设置线程数（用户数）、逐步加载时间（以秒为单位）和循环次数：
- en: '![](img/00157.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00157.jpeg)'
- en: Right-click on the Thread Group and click on Add.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击线程组并点击“添加”。
- en: 'Select Sampler and click on HTTP Request:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择采样器并点击“HTTP 请求”：
- en: '![](img/00159.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00159.jpeg)'
- en: 'Provide the Azure Web App URL in the server name and select HTTPS protocol:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器名称中提供 Azure Web 应用的 URL，并选择 HTTPS 协议：
- en: '![](img/00161.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00161.jpeg)'
- en: 'Execute the test and verify the result in Apache JMeter:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行测试并在 Apache JMeter 中验证结果：
- en: '![](img/00163.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00163.jpeg)'
- en: 'Add Aggregate Graph in HTTP Request:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 HTTP 请求中添加汇总图表：
- en: '![](img/00297.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00297.jpeg)'
- en: After the load test execution, verify the graph.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在负载测试执行后，验证图表。
- en: 'For more details, click on View Results in Table:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 欲了解更多详情，请点击“表格中查看结果”：
- en: '![](img/00176.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00176.jpeg)'
- en: We can execute an Apache JMeter test in the VSTS too.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在 VSTS 中执行 Apache JMeter 测试。
- en: 'Progress toward execution as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 执行进度如下：
- en: 'Click on New and select Apache JMeter test:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新建”，选择 Apache JMeter 测试：
- en: '![](img/00168.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00168.jpeg)'
- en: We will use the same JMX file that we used earlier to load test an Azure Web
    App.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用之前用于对 Azure Web 应用进行负载测试的相同 JMX 文件。
- en: 'Select Load duration and Load location as well. Click on Run Test:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择负载持续时间和负载位置。点击“运行测试”：
- en: '![](img/00180.jpeg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00180.jpeg)'
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: '"Testing is a skill. While this may come as a surprise to some people it is
    a simple fact."'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: “测试是一项技能。虽然这对某些人来说可能是个惊讶，但这确实是一个简单的事实。”
- en: '- Fewster and Graham'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '- Fewster 和 Graham'
- en: It is extremely important to verify the quality of an application. Testing is
    that part of application life cycle management that we can't ignore. It is one
    of the pillars of a quality product.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 验证应用程序质量是非常重要的。测试是应用程序生命周期管理中的一部分，我们不能忽视它。它是高质量产品的基石之一。
- en: Hence, it is extremely important to make testing a habit. Different types of
    testing keep an eye on different dimensions of quality, and that makes an application
    robust.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，养成测试的习惯至关重要。不同类型的测试关注质量的不同维度，从而使应用程序更加稳健。
- en: Continuous testing plays a significant part as we talk about continuous integration
    and continuous delivery. If that part is automated, continuous testing in automated
    mode helps to achieve robustness faster and to keep pace with a shorter time to
    market.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 持续测试在持续集成和持续交付中扮演着重要角色。如果该部分是自动化的，自动化模式下的持续测试有助于更快地实现稳健性，并与更短的市场周期保持同步。
- en: In this chapter, we have covered functional and load testing integrated with
    Jenkins.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了与 Jenkins 集成的功能和负载测试。
- en: In the next chapter, we will see how all the operations we have performed till
    now can be orchestrated in sequence. That will give us the feel of end-to-end
    automation. It is more about creating a pipeline in Jenkins and configuring triggers
    in build and release definition so that application life cycle management steps
    can be automated.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何将我们至今执行的所有操作按顺序编排。这将让我们感受到端到端自动化的真实感。更多的是在 Jenkins 中创建流水线，并配置构建和发布定义的触发器，从而实现应用程序生命周期管理步骤的自动化。
