- en: Automated Testing (Functional and Load Testing)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Most people overestimate what they can do in one year and underestimate what
    they can do in ten years."'
  prefs: []
  type: TYPE_NORMAL
- en: '- Bill Gates'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn about the various types of testing that can be
    carried out after deploying an application in a non-prod environment. Continuous
    testing is extremely important to verify an application's functionality, performance,
    and so on. Automated testing will not only speed up the verification process,
    but it will also standardize the way testing is done in an effective manner. Our
    focus will be on simple functional testing to see how we can perform it, and load
    testing using the open source and commercial tools or services available.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a sample functional test using Selenium and then execute it in
    Eclipse IDE for verification of its results. We will also integrate a Selenium-based
    Maven project with Jenkins so we can execute that functional test in Jenkins itself
    and make it a part of our end-to-end automation objective.
  prefs: []
  type: TYPE_NORMAL
- en: For load testing, we will create a sample load test using Apache JMeter GUI,
    and then use the saved `.jmx` file in Jenkins for load test execution from Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Selenium-based functional testing for web applications using Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selenium and Jenkins integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load testing with URL-based tests in **Visual Studio Team System** (**VSTS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load testing using Apache JMeter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional testing using Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will use Selenium and Eclipse for a functional test case
    execution. Let's go step by step to create a sample functional test case and then
    execute it using Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: The PetClinic project is a Maven-based spring application and we will create
    a test case using Eclipse and Maven. Hence, we will utilize the m2eclipse plugin
    in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have installed Eclipse Java EE IDE for Web Developers, Version: Mars.2 Release
    (4.5.2), Build ID: 20160218-0600:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Eclipse marketplace and install the Maven Integration for Eclipse
    plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Maven Project using a wizard in Eclipse:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Create a simple project (skip archetype selection) and click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00190.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Go through the wizard and create a project. It will take some time to create
    a project in Eclipse. Provide Artifact, Version, Packaging, Name, and Description.
    Click on Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait until the Maven project is created and configured. Make sure that Maven
    is installed and configured properly. In the case of Maven behind proxy, configure
    the proxy details into `conf.xml`, available in the `Maven` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Pom.xml`, we need to add Maven, Selenium, TestNG, and JUnit dependencies
    in the `<project>` node. The following is a modified `Pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Save `pom.xml` after adding these changes and build the project again from
    the Project menu. It will download new dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00191.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Details button of the dialog box to verify the operation in progress.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next task is to write the `TestNG` class. Install the TestNG plugin. Go
    to Help and click on Install New Software. Add Repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the items we need to install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00197.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Review all the items that need to be installed and click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the license and click on Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the installation progress in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s create a `TestNG` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide a Class name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Give aÂ Package name and click on Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The newly created class will look like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the `test` file and click on TestNG, convert to TestNG.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It will create a `testing.xml` file that has details about the test suite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on Project and click on Run Configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on TestNG and click on New:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Provide the Project name and select `testing.xml` in the Suite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK and Apply.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If Windows Firewall blocks it then click on Allow Access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There is no configuration available in `testing.xml` for execution, hence,
    even if Maven execution runs successfully, no suite will be executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Generate the `TestNG` class under the `test` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select `location`, `suite name`, and `class name`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Go to [https://github.com/mozilla/geckodriver/releases](https://github.com/mozilla/geckodriver/releases)
    and download a version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the file available in the downloaded ZIP file based on the system configuration
    we have. In our case, we have downloaded `geckodriver-v0.13.0-win64`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on it and verify the driver details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s write some code as well. It will check whether the title of the web
    page contains a specific string or not. The result or the outcome of the following
    code is based on the title of the page. If it contains a given string then the
    test case will pass; else it will fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The same file is available in IDE, shown as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Let's run the Maven test again from Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the output when the test case is executed successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify the All Tests tab in the Results of running suite section in Eclipse.
    We can see successful execution here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Verify the Failed Tests tab in the Results of running suite section in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the Summary tab in the Results of running suite section in Eclipse in
    the successful scenario.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the code, change the text available for title comparison so the test case
    fails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the output in Console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify the All Tests tab in the Results of running suite section in Eclipse
    and notice the failure icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Verify the Failed Tests tab in the Results of running suite section in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on testPetClinic and verify the Failure Exception.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the Summary tab in the Results of running suite section in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, we have created a sample test case based on Selenium to verify the title
    of the PetClinic home page.
  prefs: []
  type: TYPE_NORMAL
- en: Functional test execution in Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s try to execute the same from Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: Check in the Test Project in Repository. Create a `PetClinic-FuncTest` freestyle
    job in Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Build section, provide Root POM location and Goals and options to execute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Save the build job and click on Build now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the execution of the build job in the Console output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It will open a Mozilla Firefox window and open a URL that is given in the code.
    This requires our PetClinic application to be deployed in a web server and running
    without any issues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now make a change in the code so title verification fails and execute the build
    job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There is a failure marked in the Console output in Jenkins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to theÂ Project dashboard and verify the graphs for TestNG Results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have seen how to execute Selenium-based test cases in Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to execute a load test using Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Load test execution using Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Apache Jmeter console. Create a Test Plan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the Test Plan and click on Add; select Threads (Users).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Thread Group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide Thread Group name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Thread Group properties, provide Number of Threads, Ramp-up Period, and Loop
    Count.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on Thread Group. Click on Add. Click on Sampler. Click on HTTP Request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In HTTP Request, provide Server Name or IP. In our case, it will be localhost
    or an IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the Port Number where your web server is running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Get method and provide a path to the load test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Save the `.jmx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's create a Jenkins job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a freestyle job in Jenkins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Add the Build step Execute Windows batch command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following command. Replace the location of `jmeter.bat` based on the
    installation directory and the location of the `.jmx` file too:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Add a Post-build Actions. Publish Performance test result report add **/*.jtl
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Build now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Verify Performance Trend on the Project dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Performance Trend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Verify Performance Breakdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, we will see how to perform load testing of a web application
    deployed in Microsoft Azure App Services using the options available in VSTS.
  prefs: []
  type: TYPE_NORMAL
- en: Load testing using a URL-based test and Apache JMeter for Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have deployed our application in Azure App Services successfully, we
    can perform load testing on the Azure App Service or Azure Web Apps. Let's see
    how we can use Visual Studio Team Services to perform testing.
  prefs: []
  type: TYPE_NORMAL
- en: URL-based test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the top menu bar, click onÂ Load test. Let's create our first test in the
    VSTS and execute it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on New and select URL based test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify the HTTP method and URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Settings; provide input in the different parameters based on need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click Save and click on Run test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load testing is in progress:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Verify the complete test data as and when it is available in the VSTS portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the final summary of the URL-based test execution in VSTS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will also get Performance and Throughput charts after the test execution
    in VSTS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Verify tests and error-related details too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have seen how a URL-based test can be performed on an Azure Web App. In the
    next section, we will cover how to use Apache JMeter for load testing.
  prefs: []
  type: TYPE_NORMAL
- en: Apache JMeter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We often need to verify how much load an application serves so, based on it,
    we can check many functions or bottlenecks to improve the performance so it can
    serve as many requests as it can with efficiency. In this section, we'll look
    into how to execute Apache JMeter testing. We will execute a load test on the
    PetClinic application deployed on Azure App Services.
  prefs: []
  type: TYPE_NORMAL
- en: For more details on this topic, go to [http://jmeter.apache.org/usermanual/](http://jmeter.apache.org/usermanual/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin the execution, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Apache JMeter from [http://jmeter.apache.org/](http://jmeter.apache.org/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start it and create a Thread Group in Apache JMeter. Here, we mention Number
    of Threads (users), Ramp Up Period (in seconds), and Loop Count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the Thread Group and click on Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select SamplerÂ and click on HTTP Request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide the Azure Web App URL in the server name and select HTTPS protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Execute the test and verify the result in Apache JMeter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add Aggregate Graph in HTTP Request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00297.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After the load test execution, verify the graph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For more details, click on View Results in Table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can execute an Apache JMeter test in the VSTS too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Progress toward execution as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on New and select Apache JMeter test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00168.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will use the same JMX file that we used earlier to load test an Azure Web
    App.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Load duration and Load location as well. Click on Run Test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Testing is a skill. While this may come as a surprise to some people it is
    a simple fact."'
  prefs: []
  type: TYPE_NORMAL
- en: '- Fewster and Graham'
  prefs: []
  type: TYPE_NORMAL
- en: It is extremely important to verify the quality of an application. Testing is
    that part of application life cycle management that we can't ignore. It is one
    of the pillars of a quality product.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, it is extremely important to make testing a habit. Different types of
    testing keep an eye on different dimensions of quality, and that makes an application
    robust.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous testing plays a significant part as we talk about continuous integration
    and continuous delivery. If that part is automated, continuous testing in automated
    mode helps to achieve robustness faster and to keep pace with a shorter time to
    market.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we have covered functional and load testing integrated with
    Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how all the operations we have performed till
    now can be orchestrated in sequence. That will give us the feel of end-to-end
    automation. It is more about creating a pipeline in Jenkins and configuring triggers
    in build and release definition so that application life cycle management steps
    can be automated.
  prefs: []
  type: TYPE_NORMAL
