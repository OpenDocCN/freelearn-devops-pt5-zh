["```\n    $ docker container run -it \\    --name sample \\    alpine:3.17 /bin/sh\n    ```", "```\n    / # apk update && apk add curl\n    ```", "```\n    $ docker container ls -a | grep sample\n    ```", "```\n    5266d7da377c   alpine:3.17    \"/bin/sh\"                2 hours ago      Exited (0) 48 seconds ago\n    ```", "```\n    $ docker container diff sample\n    ```", "```\n    $ docker container commit sample my-alpine\n    ```", "```\nsha256:5287bccbb3012ded35e7e992a5ba2ded9b8b5d0...\n```", "```\n    $ docker image ls\n    ```", "```\n    $ docker image history my-alipine\n    ```", "```\nFROM python:3.12RUN mkdir -p /app\nWORKDIR /app\nCOPY ./requirements.txt /app/\nRUN pip install -r requirements.txt\nCMD [\"python\", \"main.py\"]\n```", "```\nFROM centos:7\n```", "```\nFROM scratch\n```", "```\nRUN yum install -y wget\n```", "```\nRUN apt-get update && apt-get install -y wget\n```", "```\nRUN mkdir -p /app && cd /app\n```", "```\nRUN tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz\n```", "```\nRUN apt-get update \\  && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    libexpat1 \\\n    libffi6 \\\n    libgdbm3 \\\n    libreadline7 \\\n    libsqlite3-0 \\\n   libssl1.1 \\\n  && rm -rf /var/lib/apt/lists/*\n```", "```\nCOPY . /appCOPY ./web /app/web\nCOPY sample.txt /data/my-sample.txt\nADD sample.tar /app/bin/\nADD http://example.com/sample.txt /data/\n```", "```\nCOPY ./sample* /mydir/\n```", "```\nADD --chown=11:22 ./data/web* /app/data/\n```", "```\nWORKDIR /app/bin\n```", "```\nRUN cd /app/binRUN touch sample.txt\n```", "```\nWORKDIR /app/binRUN touch sample.txt\n```", "```\n$ ping -c 3 8.8.8.8\n```", "```\n$ wget -O - http://example.com/downloads/script.sh\n```", "```\nFROM alpine:3.17ENTRYPOINT [ \"ping\" ]\nCMD [ \"-c\", \"3\", \"8.8.8.8\" ]\n```", "```\nCMD command param1 param2\n```", "```\n$ docker image build -t pinger .\n```", "```\n$ docker container run --rm -it pinger\n```", "```\n$ docker container run --rm -it pinger -w 5 127.0.0.1\n```", "```\n$ docker container run --rm -it --entrypoint /bin/sh pinger\n```", "```\nFROM alpine:3.17CMD wget -O - http://www.google.com\n```", "```\n/bin/sh -c \"wget -O - http://www.google.com\"\n```", "```\nFROM node:19-buster-slimRUN mkdir -p /app\nWORKDIR /app\nCOPY package.json /app/\nRUN npm install\nCOPY . /app\nENTRYPOINT [\"npm\"]\nCMD [\"start\"]\n```", "```\n    $ cd ~/The-Ultimate-Docker-Container-Book\n    ```", "```\n    $ mkdir ch04 && cd ch04\n    ```", "```\n    $ mkdir sample1 && cd sample1\n    ```", "```\n    FROM centos:7RUN yum install -y wget\n    ```", "```\n    $ docker image build -t my-centos .\n    ```", "```\n$ docker image build -t my-centos -f Dockerfile .\n```", "```\n    [+] Building 21.7s (7/7) FINISHED\n    ```", "```\n    => [1/2] FROM docker.io/library/centos:7@sha256:c73f51...\n    ```", "```\n    => [2/2] RUN yum install -y wget\n    ```", "```\n    => exporting to image                              0.1s=> => exporting layers                             0.1s=> => writing image sha256:8eb6daefac9659b05b17740...=> => naming to docker.io/library/my-centos\n    ```", "```\n    $ cd The-Ultimate-Docker-Container-Book/ch04\n    ```", "```\n    $ mkdir multi-step-build\n    ```", "```\n    $ code multi-step-build\n    ```", "```\n    #include <stdio.h>int main (void){    printf (\"Hello, world!\\n\");    return 0;}\n    ```", "```\n    FROM alpine:3.12RUN apk update && \\    apk add --update alpine-sdkRUN mkdir /appWORKDIR /appCOPY . /appRUN mkdir binRUN gcc -Wall hello.c -o bin/helloCMD /app/bin/hello\n    ```", "```\n    $ docker image build -t hello-world .\n    ```", "```\n    $ docker image ls | grep hello-world\n    ```", "```\nhello-world   latest   42c0c7086fbf   2 minutes ago   215MB\n```", "```\n    FROM alpine:3.12 AS buildRUN apk update && \\    apk add --update alpine-sdkRUN mkdir /appWORKDIR /appCOPY . /appRUN mkdir binRUN gcc hello.c -o bin/helloFROM alpine:3.12COPY --from=build /app/bin/hello /app/helloCMD /app/hello\n    ```", "```\n    $ docker image build -t hello-world-small \\    -f Dockerfile.multi-step .\n    ```", "```\n    $ docker image ls | grep hello-world\n    ```", "```\nhello-world-small latest 72c... 20 seconds ago 5.34MBhello-world latest 42c... 10 minutes ago 215\n```", "```\nFROM node:19RUN mkdir -p /app\nWORKIR /app\nCOPY . /app\nRUN npm install\nCMD [\"npm\", \"start\"]\n```", "```\nFROM node:19RUN mkdir -p /app\nWORKIR /app\nCOPY package.json /app/\nRUN npm install\nCOPY . /app\nCMD [\"npm\", \"start\"]\n```", "```\n...RUN apt-get update\nRUN apt-get install -y ca-certificates\nRUN rm -rf /var/lib/apt/lists/*\n...\n```", "```\n...RUN apt-get update \\\n    && apt-get install -y ca-certificates \\\n    && rm -rf /var/lib/apt/lists/*\n...\n```", "```\n$ mkdir backup$ docker image save -o ./backup/my-alpine.tar my-alpine\n```", "```\n$ docker image load -i ./backup/my-alpine.tar\n```", "```\nLoaded image: my-alpine:latest\n```", "```\nWORKDIR /appCOPY . .\n```", "```\nADD http://example.com/foobar ./\n```", "```\nRUN mvn --clean install\n```", "```\nENV foo=barENV baz=123\n```", "```\nEXPOSE 5000EXPOSE 15672/tcp\n```", "```\nENTRYPOINT java -jar pet-shop.war\n```", "```\nchmod +x ./docker-entrypoint.sh\n```", "```\nENTRYPOINT ./docker-entrypoint.sh\n```", "```\n$ docker image pull alpine\n```", "```\n$ docker image pull alpine:3.5\n```", "```\n<registry URL>/<User or Org>/<name>:<tag>\n```", "```\nhttps://registry.acme.com/engineering/web-app:1.0\n```", "```\n    $ docker image tag alpine:latest gnschenker/alpine:1.0\n    ```", "```\n    $ docker login -u gnschenker -p <my secret password>\n    ```", "```\n    $ docker image push gnschenker/alpine:1.0\n    ```", "```\nThe push refers to repository [docker.io/gnschenker/alpine]04a094fe844e: Mounted from library/alpine\n1.0: digest: sha256:5cb04fce... size: 528\n```", "```\n    FROM ubuntu:22.04RUN apt-get update && \\apt-get install -y iputils-pingCMD ping 127.0.0.1\n    ```", "```\n$ docker image build -t mypinger .\n```", "```\n    FROM alpine:latestRUN apk update && \\apk add curl\n    ```", "```\n$ docker image build -t my-alpine:1.0 .\n```", "```\n    FROM golang:alpineWORKDIR /appADD . /appRUN go env -w GO111MODULE=offRUN cd /app && go build -o goappENTRYPOINT ./goapp\n    ```"]