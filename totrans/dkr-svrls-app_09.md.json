["```\nfunc main() {\n\n  containerId := namesgenerator.GetRandomName(0)\n\n  factory, err := libcontainer.New(\"/tmp/runf\",\n    libcontainer.Cgroupfs,\n    libcontainer.InitArgs(os.Args[0], \"init\"))\n  if err != nil {\n    logrus.Fatal(err)\n    return\n  }\n```", "```\n  defaultMountFlags := unix.MS_NOEXEC | unix.MS_NOSUID | unix.MS_NODEV\n\n  cwd, err := os.Getwd()\n  currentUser, err := user.Current()\n  uid, err := strconv.Atoi(currentUser.Uid)\n  gid, err := strconv.Atoi(currentUser.Gid)\n  caps := []string{\n    \"CAP_AUDIT_WRITE\",\n    \"CAP_KILL\",\n    \"CAP_NET_BIND_SERVICE\",\n  }\n\n  config := &configs.Config{\n    Rootfs:          cwd + \"/rootfs\",\n    Readonlyfs:      true,\n    NoNewPrivileges: true,\n    Rootless:        true,\n    Capabilities: &configs.Capabilities{\n      Bounding:    caps,\n      Permitted:   caps,\n      Inheritable: caps,\n      Ambient:     caps,\n      Effective:   caps,\n    },\n```", "```\nNamespaces: configs.Namespaces([]configs.Namespace{\n  {Type: configs.NEWNS},\n  {Type: configs.NEWUTS},\n  {Type: configs.NEWIPC},\n  {Type: configs.NEWPID},\n  {Type: configs.NEWUSER},\n}),\nCgroups: &configs.Cgroup{\n  Name:      \"runf\",\n  Parent:    \"system\",\n  Resources: &configs.Resources{\n    MemorySwappiness: nil,\n    AllowAllDevices:  nil,\n    AllowedDevices:   configs.DefaultAllowedDevices,\n  },\n},\n```", "```\nMaskPaths: []string{\n  \"/proc/kcore\",\n  \"/proc/latency_stats\",\n  \"/proc/timer_list\",\n  \"/proc/timer_stats\",\n  \"/proc/sched_debug\",\n  \"/sys/firmware\",\n  \"/proc/scsi\",\n},\nReadonlyPaths: []string{\n  \"/proc/asound\",\n  \"/proc/bus\",\n  \"/proc/fs\",\n  \"/proc/irq\",\n  \"/proc/sys\",\n  \"/proc/sysrq-trigger\",\n},\n```", "```\nDevices: configs.DefaultAutoCreatedDevices,\nHostname: containerId,\nMounts: []*configs.Mount{\n  {\n    Source:      \"proc\",\n    Destination: \"/proc\",\n    Device:      \"proc\",\n    Flags:       defaultMountFlags,\n  },\n  {\n    Source:      \"tmpfs\",\n    Destination: \"/dev\",\n    Device:      \"tmpfs\",\n    Flags:       unix.MS_NOSUID | unix.MS_STRICTATIME,\n    Data:        \"mode=755\",\n  },\n  {\n    Device:      \"devpts\",\n    Source:      \"devpts\",\n    Destination: \"/dev/pts\",\n    Flags:       unix.MS_NOSUID | unix.MS_NOEXEC,\n    Data:        \"newinstance,ptmxmode=0666,mode=0620\",\n  },\n  {\n    Device:      \"tmpfs\",\n    Source:      \"shm\",\n    Destination: \"/dev/shm\",\n    Flags:       defaultMountFlags,\n    Data:        \"mode=1777,size=65536k\",\n  },\n},\n```", "```\n    Rlimits: []configs.Rlimit{\n      {\n        Type: unix.RLIMIT_NOFILE,\n        Hard: uint64(1024),\n        Soft: uint64(1024),\n      },\n    },\n    UidMappings: []configs.IDMap{\n      {\n        ContainerID: 0,\n        HostID:      uid,\n        Size:        1,\n      },\n    },\n    GidMappings: []configs.IDMap{\n      {\n        ContainerID: 0,\n        HostID:      gid,\n        Size:        1,\n      },\n    },\n  }\n```", "```\n  container, err := factory.Create(containerId, config)\n  if err != nil {\n    logrus.Fatal(err)\n    return\n  }\n```", "```\n  environmentVars := []string{\n    \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n    \"HOSTNAME=\" + containerId,\n    \"TERM=xterm\",\n  }\n  process := &libcontainer.Process{\n    Args:   os.Args[1:],\n    Env:    environmentVars,\n    User:   \"root\",\n    Cwd:    \"/\",\n    Stdin:  os.Stdin,\n    Stdout: os.Stdout,\n    Stderr: os.Stderr,\n  }\n\n  err = container.Run(process)\n  if err != nil {\n    container.Destroy()\n    logrus.Fatal(err)\n    return\n  }\n\n  _, err = process.Wait()\n  if err != nil {\n    logrus.Fatal(err)\n  }\n\n  defer container.Destroy()\n}\n```", "```\n$ go get golang.org/x/sys/unix\n$ go get github.com/Sirupsen/logrus\n$ go get github.com/docker/docker/pkg/namesgenerator\n$ go get github.com/opencontainers/runc/libcontainer\n\n$ go build runf.go\n```", "```\n$ docker save busybox | ./undocker.py --output rootfs -W -i busybox\n```", "```\n$ ./runf ls\nbin dev etc home proc root sys tmp usr var\n```", "```\nsearch domain.name\nnameserver 127.0.0.11\noptions ndots:0\n```", "```\nFROM ubuntu:latest\n\nRUN apt-get update && apt-get install -y curl\n\nWORKDIR /root\n\nCOPY ./runf /usr/bin/runf\nCOPY rootfs /root/rootfs\nCOPY resolv.conf /root/rootfs/etc/resolv.conf\n```", "```\n$ docker build -t wrapper-runf .\n```", "```\n$ docker network create -d overlay --attachable test_net\n\n$ docker run -d \\\n --network=test_net \\\n --network-alias=nginx \\\n nginx\n\n$ docker run --rm -it \\\n --network=test_net \\\n --privileged \\\n -v /sys/fs/cgroup:/sys/fs/cgroup \\\n wrapper-runf /bin/bash\n\n/ # runf wget http://nginx\n```", "```\nkernel:\n  image: linuxkit/kernel:4.14.23\n  cmdline: \"console=tty0 console=ttyS0 console=ttyAMA0 console=ttysclp0\"\n```", "```\ninit:\n  - linuxkit/init:b212cfeb4bb6330e0a7547d8010fe2e8489b677a\n  - linuxkit/runc:7c39a68490a12cde830e1922f171c451fb08e731\n  - linuxkit/containerd:37e397ebfc6bd5d8e18695b121166ffd0cbfd9f0\n  - linuxkit/ca-certificates:v0.2\n```", "```\nonboot:\n  - name: sysctl\n    image: linuxkit/sysctl:v0.2\n  - name: sysfs\n    image: linuxkit/sysfs:v0.2\n  - name: format\n    image: linuxkit/format:v0.2\n  - name: mount\n    image: linuxkit/mount:v0.2\n    command: [\"/usr/bin/mountie\", \"/var/lib/docker\"]\n```", "```\nservices:\n  - name: getty\n    image: linuxkit/getty:v0.2\n    env:\n     - INSECURE=true\n  - name: rngd\n    image: linuxkit/rngd:v0.2\n  - name: dhcpcd\n    image: linuxkit/dhcpcd:v0.2\n  - name: ntpd\n    image: linuxkit/openntpd:v0.2\n  - name: docker\n    image: docker:17.09.0-ce-dind\n    capabilities:\n     - all\n    net: host\n    mounts:\n     - type: cgroup\n       options: [\"rw\",\"nosuid\",\"noexec\",\"nodev\",\"relatime\"]\n    binds:\n     - /etc/resolv.conf:/etc/resolv.conf\n     - /var/lib/docker:/var/lib/docker\n     - /lib/modules:/lib/modules\n     - /etc/docker/daemon.json:/etc/docker/daemon.json\n    command: [\"/usr/local/bin/docker-init\", \"/usr/local/bin/dockerd\"]\n```", "```\nfiles:\n  - path: var/lib/docker\n    directory: true\n  - path: etc/docker/daemon.json\n    contents: '{\"debug\": true}'\ntrust:\n  org:\n    - linuxkit\n    - library\n```", "```\nfiles:\n  - path: root/.ssh/authorized_keys\n    source: ~/.ssh/id_rsa.pub\n    mode: \"0600\"\n    optional: true\n```", "```\n$ go get -u github.com/linuxkit/linuxkit/src/cmd/linuxkit\n```", "```\n$ linuxkit build docker.yml \nExtract kernel image: linuxkit/kernel:4.14.26\nPull image: docker.io/linuxkit/kernel:4.14.26@sha256:9368a ...\n...\nAdd files:\n var/lib/docker\n etc/docker/daemon.json\nCreate outputs:\n docker-kernel docker-initrd.img docker-cmdline\n```", "```\nFROM openjdk:8\n\nCOPY app.jar /app/app.jar\n\nCMD [\"/opt/jdk/bin/java\", \"-Xmx2G\", \"-jar\", \"/app/app.jar\"]\n```", "```\nFROM scratch\n\nCOPY app.jar /app/app.jar\n\nCMD [\"java\", \"-jar\", \"/app/app.jar\"]\n```"]