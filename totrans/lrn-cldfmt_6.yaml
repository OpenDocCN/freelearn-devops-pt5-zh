- en: AWS CloudFormation Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing and deploying infrastructure need some care when it comes to security
    issues. In this chapter, we explore how to build IaC with security compliances.
    Some security best practices and recommendations are explored in order to apply
    secure AWS CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of topics that we will explore:'
  prefs: []
  type: TYPE_NORMAL
- en: Security threads and models for AWS CloudFormation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for AWS security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing all AWS resource securities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing security accesses to CloudFormation Stacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stack Policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IAM conditions for CloudFormation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS security checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security threats and models for AWS CloudFormation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon AWS consists of AWS services. The more you use AWS services on your system,
    the more security risks your system will have. Each AWS service needs special
    attention to address security problems.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding security threats and models from our system can take advantages
    to address security issues. Amazon AWS provides AWS security resources to help
    us to harden our system. Refer to [https://aws.amazon.com/security/security-resources/](https://aws.amazon.com/security/security-resources/).
  prefs: []
  type: TYPE_NORMAL
- en: AWS security operates on a Shared Security Responsibility model. This means
    that Amazon secures its infrastructure while you have your own security controls
    in place for the data and applications you deploy and store in the cloud. You
    can find details of the AWS Security Responsibility model on this link, [https://aws.amazon.com/compliance/shared-responsibility-model/](https://aws.amazon.com/compliance/shared-responsibility-model/).
  prefs: []
  type: TYPE_NORMAL
- en: AWS protects the infrastructure running all the services offered in the AWS
    Cloud. This infrastructure is composed of the hardware, software, networking,
    and facilities that run AWS Cloud services. Otherwise, customers take responsibility
    for meeting AWS configuration security requirements on each AWS resource that
    deploys into their system. We describe this model in *Figure 6-1*. As customers,
    we should give more attention to our system implementation such as data and configurations/settings.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-1: A simple of AWS Security Responsibility model'
  prefs: []
  type: TYPE_NORMAL
- en: We also review some security threat modeling in order to understand your system
    risks. A simple security threat modeling example is STRIDE, created by Microsoft.
    Technically, this model is applied to computer systems but we can apply this model
    for our AWS security threat model. A brief STRIDE model is described in the following
    table. Further information about STRIDE is available from[ https://docs.microsoft.com/en-us/previous-versions/commerce-server/ee823878(v=cs.20)](https://docs.microsoft.com/en-us/previous-versions/commerce-server/ee823878(v=cs.20)).
  prefs: []
  type: TYPE_NORMAL
- en: '| **Security Threat** | **Mitigation** | **Mitigation Samples** |'
  prefs: []
  type: TYPE_TB
- en: '| Spoofing  | Authentication | Passwords Multi-factor authentication'
  prefs: []
  type: TYPE_NORMAL
- en: Digital signatures |
  prefs: []
  type: TYPE_NORMAL
- en: '| Tampering | Integrity | Permission/ACLs Digital signatures |'
  prefs: []
  type: TYPE_TB
- en: '| Repudiation | Non-Repudiation | Secure logging and auditing Digital signatures
    |'
  prefs: []
  type: TYPE_TB
- en: '| Information disclosure | Confidentiality | Encryption Permissions/ACLs |'
  prefs: []
  type: TYPE_TB
- en: '| Denial of service (DoS) | Availability | Permission/ACLs Filtering'
  prefs: []
  type: TYPE_NORMAL
- en: Quotas |
  prefs: []
  type: TYPE_NORMAL
- en: '| Elevation of privilege | Authorization | Permissions/ACLs Input validation
    |'
  prefs: []
  type: TYPE_TB
- en: Amazon AWS also provides security services to help you to investigate your system
    implementation. They can analyze your system to identify security threats and
    risks. They can perform penetration testing on your AWS platform. If you are interested,
    you should request this service on this site, [https://aws.amazon.com/security/penetration-testing/](https://aws.amazon.com/security/penetration-testing/).
  prefs: []
  type: TYPE_NORMAL
- en: The following is a list of AWS resources on which AWS can help you to perform penetration
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: EC2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aurora
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudFront
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API Gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightsail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS Zone Walking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some third-party local and global companies also can help you to investigate
    your security threats. For instance, ThreatModeler provides tools to find your
    security threats and then build its AWS threat model. You can read a summary report
    from ThreatModeler about the AWS threat model for web application on this link,
    [https://threatmodeler.com/wp-content/uploads/2018/04/AWS-Basic-Web-App-Hosting-Summary-Report.pdf](https://threatmodeler.com/wp-content/uploads/2018/04/AWS-Basic-Web-App-Hosting-Summary-Report.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Best practices for AWS security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easier method to reduce security risks on our AWS system is to follow best
    practices. In general, best practices consist of security recommendations from
    security experts based on their experience in addressing security.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon AWS provides AWS security best practices to help their customers harden
    security problems while deploying their systems on the AWS platform. You can read
    it on [https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Best_Practices.pdf](https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Best_Practices.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Managing all AWS resource securities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Amazon provides a security central to manage security accesse to all AWS
    resources. We can review our users, roles, and their permissions while accessing
    AWS resources using AWS IAM. Check this out on [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/)[.](https://console.aws.amazon.com/iam/)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6-2* show one IAM user. We can configure its permissions and policies
    to ensure the user is safe. If you think this user is not used, you should remove
    it from AWS IAM.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-2: Managing role permissions on AWS IAM'
  prefs: []
  type: TYPE_NORMAL
- en: 'You also should pay attention to your IAM roles. You should review all role
    permissions. Remove permissions if IAM roles do not use them. *Figure 6-3* shows
    an IAM role with its permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-3\. Managing user permissions on AWS IAM
  prefs: []
  type: TYPE_NORMAL
- en: Reducing security access to CloudFormation stacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All AWS resources can be managed through AWS IAM, including policies and users
    or roles. AWS CloudFormation uses IAM to control its security for template deployment.
    We can use an IAM policy on our CloudFormation template. A CloudFormation policy
    can be defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It's recommended you limit security access on your resources on CloudFormation.
    This method applies the principle of least privilege. For instance, we remove
    updating and deleting access on CloudFormation stacks from IAM users or roles.
    A template sample is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This CloudFormation template allows access to all CloudFormation APIs, but denies
    `UpdateStack` and `DeleteStack` APIs access on your MyStack stack.
  prefs: []
  type: TYPE_NORMAL
- en: You should investigate all resource usages and analyze what kind of security
    access to be applied on the template. With regard to CloudFormation actions, we
    can use the following actions and apply the least privilege principle.
  prefs: []
  type: TYPE_NORMAL
- en: CancelUpdateStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ContinueUpdateRollback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CreateStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DeleteStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DescribeStackEvents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DescribeStackResource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DescribeStackResources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DescribeStacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EstimateTemplateCost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GetStackPolicy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GetTemplate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GetTemplateSummary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ListExports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ListImports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ListStackResources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ListStacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SetStackPolicy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UpdateStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UpdateTerminationProtection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ValidateTemplate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can review each action on this site, [https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/Welcome.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/Welcome.html).
  prefs: []
  type: TYPE_NORMAL
- en: Stack policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases the you likely get framework down because of accidental changes
    to assets. Your group perform to change CloudFormation which makes your framework
    shaky. CloudFormation gives stack approaches which keep stack assets from unexpectedly
    being refreshed or erased amid stack refreshes. We can incorporate with IAM and
    stack arrangements to address accidental and malevolent changes to your stack
    assets.
  prefs: []
  type: TYPE_NORMAL
- en: You should perform to set or refresh the strategy, your IAM clients or parts
    ought to be able to call the `cloudformation:SetStackPolicy` activity. As a matter
    of course, setting a stack strategy secures all stack assets with a Deny to deny
    any updates except if you indicate an express Allow. For example, we shield a
    specific asset from refreshes activity after the framework go live. You can see
    the accompanying CloudFormation format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: IAM conditions for CloudFormation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can perform creation or delation of particular AWS resources through CloudFormation
    if we have IAM policies to do those tasks. Sometimes you do not need a creation
    task from CloudFormation operations. We can implement IAM conditions to apply
    this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, CloudFormation provides IAM policies related to IAM conditions.
    The following is a list of IAM condition policies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cloudformation:TemplateURL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cloudformation:ResourceTypes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cloudformation:StackPolicyURL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you apply IAM conditions, you can ensure that API calls for stack actions,
    for instances creating, updating, on specific template or are limited to specific
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: '`cloudformation:TemplateURL` is one CloudFormation attribute that shows a CloudFormation
    template file location. It could be the .json, .yaml, and .template file formats.
    For instance, we apply an IAM condition on the CloudFormation template as follows.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This template ensures that, for all `CreateStack` or `UpdateStack` API calls,
    users must use the specified template. Otherwise, the operation will be denied.
  prefs: []
  type: TYPE_NORMAL
- en: '`Condition:StackPolicyURL` enables your CloudFormation to apply a stack policy
    with it upon creation with the `StackPolicyURL` condition. The following is a
    CloudFormation template from AWS to use cloudformation:StackPolicyUrl in the template.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: AWS security checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After you design a system via CloudFormation and deploy it to the AWS platform,
    the last task is to ensure your system complies with AWS Security. AWS provides
    a security checklist that consists of security checking actions. You can learn
    about the security checklist in the following document, [https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Checklist.pdf](https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Checklist.pdf). This
    document consists of the following three security checklists on various AWS resources:'
  prefs: []
  type: TYPE_NORMAL
- en: General security checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security checklist for EC2/VPC/EBS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security checklist for S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With using AWS security checklist, your system probably has low security risks.
    But again, it's better to perform penetration testing regularly.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how we can go about securing resources that are
    deployed using AWS CloudFormation. Finally, we delved into understanding the security
    threats and models for CloudFormation.
  prefs: []
  type: TYPE_NORMAL
