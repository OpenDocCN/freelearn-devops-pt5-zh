["```\n$ brew cask install virtualbox\n```", "```\n$ sudo apt install virtualbox\n```", "```\n% docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n%\n```", "```\n# we will inherit from the Debian image on DockerHub FROM debian # set timezone so files' timestamps are correct ENV TZ=America/Los_Angeles # install apache and php 7.3 # we include procps and telnet so you can use these with shell.sh prompt RUN apt-get update && apt-get install -y procps telnet apache2 php7.3 # add a user - this user will own the files in /home/app RUN useradd --user-group --create-home --shell /bin/false app # set up and copy files to /home/app ENV HOME=/usr/app WORKDIR /home/app COPY . /home/app # The PHP app is going to save its state in /data so we make a /data inside the container RUN mkdir /data && chown -R app /data && chmod 777 /data\n # we need custom php configuration file to enable userdirs COPY php.conf /etc/apache2/mods-available/php7.3.conf # enable userdir and php RUN a2enmod userdir && a2enmod php7.3 # we run a script to stat the server; the array syntax makes it so ^C will work as we want CMD  [\"./entrypoint.sh\"]\n```", "```\n#!/bin/sh\n # build.sh\n # we use the \"docker build\" command to build a container named \"chapter2\" from . (current directory)# Dockerfile is found in the current directory, and determines how the conatiner is built.\n docker build -t chapter2 .\n```", "```\nSending build context to Docker daemon  15.87kB Step 1/11 : FROM debian  ---> 67e34c1c9477 Step 2/11 : ENV TZ=America/Los_Angeles  ---> Using cache  ---> 7bfa02a200a8 Step 3/11 : RUN apt-get update -qq >/dev/null && apt-get install -y -qq procps telnet apache2 php7.3 -qq >/dev/null  ---> Running in 98a4e3192e22 debconf: delaying package configuration, since apt-utils is not installed Removing intermediate container 98a4e3192e22  ---> 86aa2b03b3b1 Step 4/11 : RUN useradd --user-group --create-home --shell /bin/false app  ---> Running in 917b16b86dc5 Removing intermediate container 917b16b86dc5  ---> ef96ff367f1f Step 5/11 : ENV HOME=/usr/app  ---> Running in c9706abf0afd Removing intermediate container c9706abf0afd  ---> 4cc08031746b Step 6/11 : WORKDIR /home/app  ---> Running in 08c2b9c79204 Removing intermediate container 08c2b9c79204  ---> 9b68722d6776 Step 7/11 : COPY . /home/app  ---> d6a7b4a1a4f3 Step 8/11 : RUN mkdir /data && chown -R app /data && chmod 777 /data  ---> Running in fe824496056c Removing intermediate container fe824496056c  ---> 75996f4d08bc Step 9/11 : COPY php.conf /etc/apache2/mods-available/php7.3.conf  ---> c6a3b094a041 Step 10/11 : RUN a2enmod userdir && a2enmod php7.3  ---> Running in 1899c1d01a2e Removing intermediate container 1899c1d01a2e  ---> ae6ddd93786c Step 11/11 : CMD  [\"./entrypoint.sh\"] ---> Running in cb0ffeaefca6 Removing intermediate container cb0ffeaefca6  ---> 9c64d1cb6bd3 Successfully built 9c64d1cb6bd3 Successfully tagged chapter2:latest\n```", "```\n#!/usr/bin/env bash\n # debug.sh\n # run container without making it a daemon - useful to see logging output\n docker run \\    --rm \\    -p8086:80 \\    --name=\"chapter2\" \\    -v `pwd`:/home/app \\    chapter2\n```", "```\n%  ./debug.sh\nentrypoint.sh\n----> Point your browser at http://localhost:8086/~app/index.php\nAH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.5\\. Set the 'ServerName' directive globally to suppress this message\n```", "```\n% docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES\n54925e51e404        chapter2            \"./entrypoint.sh\"   2 seconds ago       Up 1 second         0.0.0.0:8086->80/tcp   chapter2\n```", "```\n% ./run.sh\n1707b1ff84fabed4d9696aadbcd597cee08063eaa7ad22bfe572c922df 43997e\n```", "```\n% docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES\n1707b1ff84fa        chapter2            \"./entrypoint.sh\"   41 seconds ago      Up 39 seconds       0.0.0.0:8086->80/tcp   chapter2\n```", "```\n% docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                  NAMES\n1707b1ff84fa        chapter2            \"./entrypoint.sh\"   About a minute ago   Up 1 second         0.0.0.0:8086->80/tcp   chapter2\n```", "```\n% docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n```", "```\n#!/usr/bin/env bash \n # run container without making it a daemon - useful to see logging output # we are adding an anonymous volume for /data in the container so the # counter persists between runs.\n docker run \\    --rm \\    -p8086:80 \\    --name=\"chapter2\" \\    -v `pwd`:/home/app \\    -v name:/data \\    chapter2\n```", "```\n#!/usr/bin/env bash\n # run.sh\n # run the container in the background # /data is persisted using a named container\n docker run \\    --detach \\    --rm \\\n    --restart always \\     -p8086:80 \\    -v name:/data \\    --name=\"chapter2\" \\    chapter2\n```", "```\n#!/bin/sh\n # stop.sh\n # stop running container - typing stop.sh is easier than the whole docker command\n docker stop chapter2\n```", "```\nbuild.sh  debug.sh  Dockerfile  entrypoint.sh  install-virtualbox-macos.sh  persist.sh  php.conf  public_html  README.md  run.sh  shell.sh  stop.sh  % docker ps CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES  % ./run.sh 7d6bc5195a583b3979a2533b50708978d96981d3d9ac59b266055246b6 fad329  % docker ps CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES 7d6bc5195a58        chapter2            \"./entrypoint.sh\"   2 seconds ago       Up 1 second         0.0.0.0:8086->80/tcp   chapter2  % ./stop.sh chapter2  % docker ps CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES %\n```", "```\n#!/usr/bin/env bash\n # shell.sh\n # This script starts a shell in an already built container.  Sometimes you need to poke around using the shell # to diagnose problems.\n # stop any existing running container ./stop.sh\n # fire up the container with shell (/bin/bash)docker run -it --rm --name chapter2 chapter2 /bin/bash\n```", "```\n% ./shell.sh Error response from daemon: No such container: chapter2 root@f10092244abe:/home/app# ls -l total 44 -rw-r--r-- 1 root root 871 Dec 13 10:28 Dockerfile -rw-r--r-- 1 root root 808 Dec  5 14:56 README.md -rwxr-xr-x 1 root root  38 Dec  4 12:15 build.sh -rwxr-xr-x 1 root root 197 Dec  4 16:12 debug.sh -rwxr-xr-x 1 root root 411 Dec 13 10:28 entrypoint.sh -rw-r--r-- 1 root root  75 Dec  2 17:31 install-virtualbox-macos.sh -rwxr-xr-x 1 root root 315 Dec 13 10:26 persist.sh -rw-r--r-- 1 root root 860 Dec  4 16:24 php.conf drwxr-xr-x 1 root root  18 Dec 13 10:27 public_html -rwxr-xr-x 1 root root 152 Dec  5 13:01 run.sh -rwxr-xr-x 1 root root 308 Dec  4 17:40 shell.sh -rwxr-xr-x 1 root root 115 Dec  4 17:41 stop.sh root@f10092244abe:/home/app# ls -ldg /data drwxrwxrwx 1 root 0 Dec 13 10:28 /data root@f10092244abe:/home/app# exit  %\n```"]