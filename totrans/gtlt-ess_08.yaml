- en: Chapter 8. Allowing Users to Create Repos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, everything we have seen indicates that the administrator is the only
    person who can create new repositories. He can share the load of doing this, simply
    by giving some trusted users the right to read and write the gitolite-admin repository,
    but that's as far as it goes.
  prefs: []
  type: TYPE_NORMAL
- en: In some environments, your users may need more flexibility. You could have several
    users who need not be administrators, in the sense that they neither want nor
    need to manage *all* repositories, but they do wish to be able to create their
    own repositories and control access to those repositories. In fact, we would like
    the administrator's role in this to be a one-time setup, after which no more changes
    to Gitolite's *conf* file would be required.
  prefs: []
  type: TYPE_NORMAL
- en: If there are several users who need to do this, it seems like a good idea to
    think about how we could allow this and still maintain the required security over
    the repositories that were created by the administrator in the usual way.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll work out a solution to the problem described in the introduction.
    We'll begin by talking about some features that help us with parts of the solution,
    and then add the missing pieces one by one to build up a solution.
  prefs: []
  type: TYPE_NORMAL
- en: Putting repositories in Sub-directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first part of the solution is that, as was hinted at in the first chapter,
    Gitolite allows you to group repositories in subdirectories, just like you can
    do with files in a filesystem. For example, you could put all the open source
    projects you''re managing under a subdirectory called `foss`, like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can make use of this in solving our current problem. Let's say we had users
    Alice and Bob, and we wanted to let them create and manage repositories. We could
    come up with a way by which Alice's repositories would be in a subdirectory called,
    say `dev/alice`, and Bob's repositories would, similarly, be within `dev/bob`.
  prefs: []
  type: TYPE_NORMAL
- en: Repository wildcards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A repository wildcard is a regular expression that describes a whole range of
    possible repository names. For example, the line `repo` `dev/alice/[a-z].*` represents
    all repositories whose names start with `dev/alice/`, followed by an alphabetic
    character, followed optionally by anything else. The repository `dev/alice/foo`
    would qualify, but `dev/alice/123` would not, nor would just `dev/alice`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to the need to properly represent repositories such as `gtk+` and `c++`,
    if the `+` character is the only regular expression metacharacter in the repo
    name, it will be taken to be a normal repository, not a repository wildcard. To
    specify `foo.+`, you should instead say `foo..*`. You can also say `[f]oo.+`—the
    presence of the bracket tells Gitolite it is a regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gitolite allows `repo` lines to use wildcards instead of individual repository
    names. This gives us the next step to our solution; we can now write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This says that Bob can push (but not rewind or delete) branches to all of Alice's
    repositories, and vice versa, and that other authenticated users of the system
    can clone both those sets of repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, though, a wildcard repository specification by itself does not actually
    *create* any repositories, since the pattern itself can match billions of possible
    repository names!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a wildcard repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now it's time to introduce the first part of the additional syntax that Gitolite
    provides to help in solving the problem we started this chapter with. As we noted,
    the wildcard specification lines don't actually create the repositories that Alice
    or Bob need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable that, we add a new line to the access rules specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is different than the *create branch* permission we saw in the *Types of
    write operations* section in [Chapter 7](ch07.html "Chapter 7. Advanced Access
    Control and Configuration"), *Advanced Access Control and Configuration*. The
    one described here is the single letter `C` by itself, while the other can only
    exist as a modifier to `RW` or `RW+`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This access rule says that, merely by cloning or pushing a repository with
    a matching name, Alice *can cause repositories to be created on the server*! In
    other words, Alice can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It would be as if the administrator had added a new set of rules as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: except that the administrator doesn't have to!
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t miss the `Initialized empty...` line in the preceding output; that came
    from the server, telling you a brand new repository was created as a result of
    this clone! In addition, if Alice ran the `info` command, she might see something
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: which shows you the repository that was just created.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A downside is that a simple typo can cause useless repositories to be created.
    If you wish to prevent this, edit `$HOME/.gitolite.rc` and uncomment the `create`
    command as well as the `no-auto-create` option. Then your users can run the more
    explicit `create` command, for example: `ssh git@host create dev/alice/my-new-repo`.'
  prefs: []
  type: TYPE_NORMAL
- en: Giving access to other users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have so far simply hardcoded the permissions—Alice and Bob have some access
    to each other's repositories, and everyone else can read both sets of repositories.
    This is clearly not flexible enough, Alice may want some repositories to be writable
    by David, and some should not be readable by `@all`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: On the face of it, this is a difficult problem because it seems to imply that
    Alice might want to actually make changes or additions to the rules themselves,
    and thus, directly or indirectly, touch Gitolite's *conf* file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way Gitolite solves these problems is to allow the administrator to define
    roles, and then allow the user to specify which users she wants in each role.
    The following is an example using role names that are defined by default in Gitolite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`READERS` and `WRITERS` are role names that are predefined in Gitolite. Note
    that the role names themselves don''t have any special meaning in terms of what
    access rights a role has—that is entirely up to the administrator.'
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, however, this is not complete. The rules do not actually say
    that Bob is a writer (and thus has `RW` permission on Alice's repositories) or
    that everyone else (`@all`) can read it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where the `perms` command comes in. Here''s how Alice would use it
    to add Bob to the `WRITERS` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to add `@all` to the `READERS` role, she would run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If she wishes to check what the current role assignments for her repository
    are, she can run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'which will dutifully print:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: One advantage you should see right away is that now the role assignment is *per
    repository*. That is, Alice can have completely different role assignments for
    other repositories she owns. In fact, if she does not run the perms command on
    a repository, no one else will have any access­—it becomes her private repository.
    Or she can add multiple people to each role too if she wishes. The `perms` command
    can only be used to add one user to one role in one go. So Alice may have to run
    this multiple times. If she added someone whom she now wishes to remove, that
    is also possible. As normal for all Gitolite commands, `perms` responds to a single
    argument of `-h` to provide a usage message.
  prefs: []
  type: TYPE_NORMAL
- en: Generalizing the ruleset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll now look at the ruleset as it stands for each user, and then discuss
    how to generalize it to any number of users. At this point, if you recall from
    the previous section, the rules look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You might notice that other than the word alice in the first three lines being
    replaced by Bob, this is precisely what you need for Bob's repositories as well.
    It certainly does not make sense to have to repeat this for every user who might
    need this feature!
  prefs: []
  type: TYPE_NORMAL
- en: 'The final part of the solution to allowing users to create, and (to some extent)
    manage, their own repositories is the `CREATOR` keyword. Here''s the canonical
    example again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Notice the changes we made. First, the `C` permission line now lists all the
    users who are allowed to create their own repositories and manage it as we have
    described earlier. Only these four users can do this, in this ruleset. Alternatively,
    you can replace the four usernames with some group name that you may have defined,
    or even use `@all` to allow all authenticated users to use the facility of creating
    private repositories they can selectively open up to others.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the repository name pattern contains `CREATOR` instead of `alice`, as
    does the `RW+` line. For repositories that do not yet exist, these are effectively
    treated as the name of the user who's trying to create the repository. For existing
    repositories, this is treated as the name of the user who created it, which is
    recorded and kept track of.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a repository does not exist, the only permission that Gitolite cares about
    is the `C` permission that allows creating a repository. Whoever is on the right
    side of such a rule is allowed to create repositories matching the pattern. One
    error to watch out for is to put in `C = CREATOR`, instead of a list of actual
    users or user groups. Because, as described above, this is treated as the name
    of user attempting to create the repository, this allows any authenticated user
    to create such a repository. If that is what you want, it's better to be clear
    and actually use `@all` instead of `CREATOR`; the latter is just a side-effect
    and not supported behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining wild repos to your users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your users, of course, do not need all of this explanation! In fact, one of
    the goals of this feature is that Gitolite users (as opposed to Gitolite *administrators*)
    should *not* be burdened with learning the nuances of `RW`, `RW+`, *deny* rules,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example setup we have been using till now is the canonical example: it
    contains an owner (who is the only user allowed to rewind or delete branches),
    a set of writers (who can push/create but not rewind/delete), and a set of readers
    who cannot push at all.'
  prefs: []
  type: TYPE_NORMAL
- en: The only thing left to do is to explain to the user what repositories she is
    allowed to create (most users do not know regular expressions very well, so it's
    best to keep your patterns simple enough to be explained in English), and that
    she can add or remove people from each of those *lists of users*.
  prefs: []
  type: TYPE_NORMAL
- en: The list names (in our example, `READERS` and `WRITERS`) should be supplied,
    and explained as representing what the users in each list can do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, show them three examples of the `perms` command used to maintain these
    user lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ssh` git@host `perms dev/alice/repo + WRITERS dave` to add a user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ssh` git@host `perms dev/alice/repo - WRITERS dave` to remove a user (notice
    the minus sign instead of the plus sign)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ssh` git@host `perms -l dev/alice/repo` to list current user lists'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing with just wild repos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you think about the example we've been working on throughout this chapter,
    it does not allow the user to trust anyone *else* with `RW+` permissions; if any
    rewinding or deleting of branches is required it has to be the owner herself that
    does it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can rectify this by changing the `RW+` permission line to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Thus, defining a new role (or list of users, if you will) called `TRUSTED`.
    Of course, for this to work, you—as the administrator—must log on to the server
    and edit `$HOME/.gitolite.rc` to add this new role to the list of roles defined
    in that file under the `ROLES` hash. Then you can tell your user that there is
    a third list of users, called `TRUSTED`, which she can use to specify users she
    would like to allow to rewind or delete branches or tags.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have started going this route, we can go a little further and then
    a little more, until we end up with something that is essentially a one-time setup
    of Gitolite, requiring little to no further maintenance, from the administrator,
    once it has been set up. This can be very useful in sites where most of the users
    are somewhat autonomous.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a comprehensive example of such a ruleset. To make things easier to
    copy and use, we''ve added the description of the rulesets as comments so you
    can copy them too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Deleting wild repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the example in the previous section, the administrator''s job is much
    lightened (albeit at the expense of *some* loss of control). However, there still
    remains one feature that your users will eventually want: deleting repositories
    that have served their purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to allow users to delete repositories that they have created (it need
    not be said that a user cannot delete anything else!), the administrator needs
    to enable the `D` command by uncommenting the corresponding line in the list of
    commands in `$HOME/.gitolite.rc`. Then the user can run the `D` command to delete
    repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Repositories are locked against accidental deletion by default, so every delete
    is actually two steps—the `unlock` sub-command, then the `rm` sub-command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This may be one of the most important chapters in this book, since it talks
    about a very popular feature of Gitolite. While it is not suitable in sites where
    strict control and auditability are required, it is very useful in most other
    sites, not only saving the administrator a lot of time, but the users also do
    not have to wait on the administrator for something they need quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about what **core** Gitolite is and what **non-core
    is**, look at some non-core programs that come with Gitolite, and discuss customizing
    Gitolite by adding our own non-core code.
  prefs: []
  type: TYPE_NORMAL
