- en: Chapter 7. Managing Team Foundation Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"It''s hardware that makes a machine fast… It''s software that makes
    a fast machine slow."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Craig Bruce* |'
  prefs: []
  type: TYPE_TB
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Diagnosing builds in TFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing the TFS database and configuring test retention policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Activity and Job Monitoring logs to diagnose TFS issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing update frequency and forcing a rebuild of the TFS Warehouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring TFS Cache settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing CodeLens in TFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous synchronization with TFS Proxy server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a TFS database back up schedule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning up dead workspaces and shelvesets in TFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are entering the era of self-driven cars; you may ask, "why can't products
    just maintain themselves?" The Product Teams deliver high-quality software yet
    the real-world usage of a feature can significantly differ from its anticipated
    usage. The building blocks the product operates on and the ecosystem of frameworks
    that rely on the product keep evolving too. TFS does not have a very high administration
    over head. The administration needs are somewhat proportional to the level of
    usage. Smaller Teams may be able to administer TFS within the day-to-day activities
    of individuals on the Team, while larger Teams may need a dedicated TFS administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key tasks that need to be performed by a TFS administrator can broadly
    be divided into three categories: **Update**, **Maintain**, and **Optimize**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00804.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s explain each of these tasks in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Update**: It is very important to keep the environment secure, and for this
    reason, all security updates that the MBSA tool identifies as "Critical" should
    be applied within 48 hours. The product updates are roughly rolled out every quarter.
    Each product update contains bug fixes, performance enhancements, and new features.
    Quarterly updates rarely have breaking changes; this also reduces the effort in
    testing the upgrade. The product updates should also be applied as soon as possible.
    It is also recommended to keep the underlying OS and SQL Server updated to the
    latest available service packs.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maintain**: There needs to be a clear strategy for disaster recovery and
    backup restore. The TFS database usage should be closely monitored to find any
    unexpected growth patterns. It is recommended that the TFS Perfmon counters be
    used to benchmark the performance of the server and reevaluated overtime regularly,
    especially during upgrades. More information on TFS Perfmon counters is available
    at [http://bit.ly/1SijysU](http://bit.ly/1SijysU). Maintaining TFS also involves
    day-to-day cleanup activities such as managing permissions, build drop locations,
    test attachments, workspaces, shelvesets, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Optimize**: By monitoring the TFS usage using the Activity logs, you can
    identity requirements for scalability. Load balancing the TFS application tier
    is usually the first step to provide resilience and scale to the TFS setup. If
    Teams are working in a low bandwidth location, installing a TFS proxy server can
    significantly improve the experience. By closely monitoring the build and release
    agent utilization, you can supplement the build queues with additional agents.
    This can help bring down the queue times for builds and releases.'
  prefs: []
  type: TYPE_NORMAL
- en: If your organization has systems center setup, there is now a management pack
    available for Visual Studio Team Foundation Server 2015 that can be downloaded
    from [http://bit.ly/1lgcEJN](http://bit.ly/1lgcEJN). If you have recently upgraded
    from TFS 2013 or any of the earlier versions, then it's worth reading up about
    enabling TFS 2015-specific features on existing Team Projects ([http://bit.ly/1P6IbLu](http://bit.ly/1P6IbLu)).
    There is a wealth of documentation available on MSDN ([http://bit.ly/1R4Uh79](http://bit.ly/1R4Uh79))
    covering key administration concepts with samples and walkthroughs. In addition
    to that, this article ([http://bit.ly/1QGxVcQ](http://bit.ly/1QGxVcQ)) talks at
    length about all things TFS administrators should focus on. TFS administration
    and management is a fairly big topic. In this chapter, we'll focus on some of
    the key administration and management activities that every TFS administrator
    should perform.
  prefs: []
  type: TYPE_NORMAL
- en: Diagnosing builds in TFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Development Teams use TFBuild for validating code changes and inspecting code
    quality and running tests. Builds are a critical part of any software development
    life cycle. As a TFS administrator, you may need to inspect issues with a build
    agent or diagnose a specific build definition. In this recipe, we'll learn how
    to diagnose build agents and build definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download TFBuild Agent from the TFS Administration Console. For more information
    on how to download the TFBuild Agent, refer to the *Configuring TFBuild Agent,
    Pool*, *and Queues* recipe in [Chapter 4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building
    Your Application"), *Building Your Application*. You need to have collection administration
    permissions to configure a TFBuild Agent. To create or edit a build definition,
    you need to be a member of the Build Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best place to start when diagnosing agent issues is to look at the agent
    trace logs. The agent trace logs are stored in the `_diag` folder in the agent
    working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there is nothing obvious in the agent trace logs, as a next step you should
    run an HTTP Trace against the agent. This can be done using an HTTP Proxy tool.
    If you are on Windows, you can use Fiddler; for other platforms, you can use Charles
    Proxy. Refer to [http://bit.ly/1P6dqGt](http://bit.ly/1P6dqGt) on how to set up
    and capture an HTTP Trace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When capturing an HTTP Trace, the agent needs to be run in interactive mode.
    Browse to the location where the TFBuild Agent has been downloaded. Unzip the
    TFBuild Agent. Open a command prompt in administrator mode and set the working
    directory to the unzipped location of the TFBuild Agent. As illustrated here,
    run the `ConfigureAgent` command:![How to do it…](img/image00805.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `ConfigureAgent` command will prompt to configure the agent for a few details.
    When prompted for `Would you like to install the agent as a Windows Service` key
    in *N*, this will run the agent as an interactive process rather than installing
    the agent as a service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00806.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: All agent activity will show up in verbose in the command prompt. This will
    likely provide clues to diagnose problems with the agent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When troubleshooting problems with the build definition, its best to run the
    build definition in verbose mode. In verbose mode, the agent produces very detailed
    logs; investigating the logs is usually the best way to identify problems causing
    the unexpected behavior. To run the build definition in verbose mode, create a
    new variable `System.Debug` and set the value of this variable to `true`:![How
    to do it…](img/image00807.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An HTTP Trace can contain credentials, so avoid sharing HTTP Traces publically.
    TFS currently does not support personal access tokens, so as a work-around, you
    can create a temporary account for the purposes of capturing the trace; alternatively,
    sanitize the trace logs before sharing with other Teams for investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the TFS database and configuring test retention policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the TFS usage increases over time, the TFS instances can build up very large
    volumes of data files, builds, releases, Work Items, and so on. For the most part,
    this is a very good thing – a big part of the value of many **Application Lifecycle
    Management** (**ALM**) features, after all, is maintaining a reliable history
    of the various artifacts involved in a producing software. At some point, however,
    there are implicit and explicit costs involved in maintaining older data, such
    as performance impacts and increased time spent on upgrades, in addition to the
    increased disk space requirements. In this recipe, you'll learn how to analyze
    the TFS database size and set up test retention policies for a Team Project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is not recommended to query the live instance of TFS transactional database
    directly. Restore a backup of the TFS transactional database on an alternate instance
    of SQL and execute the queries in this recipe on that instance instead of the
    live instance.     To administer the test retention policies for a Team Project, you need to be a
    member of the Team Project Administrator Group.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s first analyze the TFS databases to understand the storage distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open SQL Server Management Studio. Connect to the SQL instance the TFS transactional
    database has been restored to, open a new query window and run the following T-SQL
    code to get the database size for TFS databases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will get the following output after executing the preceding code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00808.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Scope the connected database in the SQL Server Management Studio to the `TFS_DefaultCollection`
    column. Execute the following T-SQL to identify the distribution of storage within
    this collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The storage is categorized into the areas of ownership. This should help identity
    the hot spots at a high level.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following query will show you the next level of details on the individual
    areas of ownership:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the analysis so far, we narrowed down that `TeamTest` is the biggest occupier
    in the database. The breakdown shows that this is because of the large volume
    of test runs, results, and attachments from manual and automated tests. To configure
    test retention policies for the FabrikamTFVC project, navigate to the FabrikamTFVC
    Administration Console in Team Web Portal and browse to the **Test** tab. As illustrated
    in the following screenshot, set the manual and automated test retention policies:![How
    to do it...](img/image00809.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Test retention policies is a new addition to TFS 2015\. Test retention policies
    allow you to individually manage the retention policies for automated and manual
    tests. The default configuration is set to retain indefinitely. In this recipe,
    we've configured the automated test execution runs, results, and attachments to
    be deleted in 30 days and the manual test execution runs, results, and attachments
    to be deleted in 365 days. The retention policies are automatically processed
    by a job in TFS.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Warning**'
  prefs: []
  type: TYPE_NORMAL
- en: Removing any files should be done with caution and *never directly from the
    database*. As always, before you modify, update, or delete, take a full backup
    of the databases.
  prefs: []
  type: TYPE_NORMAL
- en: There is no provision to configure the test retention policies centrally. For
    this reason, the test reason policies need to be configured for each Team Project
    individually.
  prefs: []
  type: TYPE_NORMAL
- en: The test retention policies are just one of the ways to control the size of
    your TFS database. TFS also supports build retention policies; this has been discussed
    at length in the *Using the build retention policy to automate build deletion*
    recipe in [Chapter 4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building Your Application"),
    *Building Your Application*. In addition to this, you can free up more space by
    destroying deleted version control branches, Team Projects, files, and XAML builds.
    Refer to [http://bit.ly/1PMhuvB](http://bit.ly/1PMhuvB) to know how this can be
    accomplished.
  prefs: []
  type: TYPE_NORMAL
- en: Using Activity and Job Monitoring logs to diagnose TFS issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TFS logs both the activity and the job execution data in the backend database.
    TFS has a built-in job agent that runs on the application tier and logs diagnostic
    information about jobs and processes. Having visibility of poor performing and
    failed jobs, along with diagnostic information, helps narrow down potential problems
    faster. The diagnostics page in TFS comprises of Activity logs and Job Monitoring
    logs. In this recipe, you'll learn how to use the diagnostics page in TFS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the diagnostics page, you need to be a member of the TFS Administrators
    Group. Validate access by browsing `http://tfs2015:8080/tfs/_oi/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00810.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access Activity log navigate to `http://tfs2015:8080/tfs/_oi/_diagnostics/activityLog`.
    The page can take a little longer to load if you are accessing it for the first
    time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This page basically presents the data in the `tbl_Command` table. As illustrated
    in the following screenshot among other things, the page contains a list of commands,
    applications, status, start time, time taken for execution, execution status,
    identity, IP address, unique identifier, user agent, command identifier, execution
    count, authentication, and response code:![How to do it...](img/image00811.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on an item in the list to see more details. As illustrated in the
    following image, the details for the reconcile workspace command shows you the
    rich next level of details of the operation:![How to do it...](img/image00812.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Activity Log** page also allows filter and export operations. Since the
    data in the `tbl_command` table is only retained for 14 days, you can export the
    data in the Activity log incrementally to a separate repository to keep this valuable
    information for historic trend analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Job Monitoring** tab to navigate to the **Job Monitoring** view.
    Alternatively, you can directly browse `http://tfs2015:8080/tfs/_oi/_jobMonitoring`.
    The **Job Monitoring** view has three more submenus: **Job Summary**, **Job Queue**,
    and **Job History**:![How to do it...](img/image00813.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's first look at the **Job Summary** view. The summary view shows a graphical
    representation of the total runtime for each job. Being able to visualize job
    execution time relative to other jobs helps identify potential problems. As you
    can see in the following screenshot, the TFS Periodic Identity Synchronization
    and Incremental Analysis Database sync job takes longer to process as compared
    to optimize databases job:![How to do it...](img/image00814.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get more details on Incremental Analysis Database sync job, click on the
    blue bar next to the job name. This will navigate you to the **Job History** tab.
    The **Job History** tab has two graphs, one showing the job execution time for
    all jobs and the other showing the details for Incremental Analysis Database sync
    job. Seeing the two charts together helps you compare the contribution one has
    on the other. The following figure illustrates the graph for the execution of
    Incremental Analysis Database sync job. Looking at the chart, you can work out
    that the job on the 07/25 is out of pattern and has taken significantly longer
    than usual. However, the queue time metric on the chart shows that the delay is
    contributed by the prolonged average queue time:![How to do it...](img/image00815.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to the **Job Summary** view; this view also has a pie chart that
    shows the split between **Succeeded**, **Blocked**, and **Disabled** jobs. Clicking
    on any will navigate you to the **Job History** view and provide job-level details
    on each type:![How to do it...](img/image00816.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Last but not least, the **Job Summary** page has a chart for number of job runs.
    The chart displays the number of times a job has run combined with the result
    types for that particular job. Click on any of the bars in the chart to display
    details on those jobs. Hovering over the chart provides further information:![How
    to do it...](img/image00817.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, navigate to the **Job Queue** tab. The chart in this tab describes the
    job queue; it provides the counts for each queue type. Click on the bar to see
    the job details associated to each queue type:![How to do it...](img/image00818.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is recommended that you do not directly query the TFS Transactional database.
    Any changes made to the database can significantly impact the functioning of TFS.
    While some changes may not show the impact immediately, the changes can cause
    disruption during upgrades. Prior to the introduction of the diagnostics page,
    there was no alternate but to query the database directly to retrieve and analyze
    the data from the `command` and `actions` table. The diagnostics page makes it
    easier to access this valuable dataset.
  prefs: []
  type: TYPE_NORMAL
- en: All built-in TFS jobs track their activity in the `command` table. The logging
    is internally handled by the framework in TFS. There is a very interesting article
    that talks about the built-in jobs and the execution interval; you can read more
    about this at [http://bit.ly/1kPSbfg](http://bit.ly/1kPSbfg).
  prefs: []
  type: TYPE_NORMAL
- en: Changing update frequency and forcing a rebuild of TFS Warehouse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reporting warehouse in TFS is a traditional data warehouse that consists
    of a relational database and an analysis services database. The data warehouse
    aggregates all the operational data, such as version control, Work Item tracking,
    build, and test. The warehouse corresponds to the `Tfs_Warehouse` relational database.
    The cube corresponds to the SQL Server Analysis Services database `Tfs_Analysis`.
    The default rebuild frequency for the TFS Warehouse is 2 hours. In this recipe,
    you'll learn how to manually change the TFS Warehouse refresh frequency from 2
    hours to 1 hour. You'll also learn how to force a rebuild of the TFS Warehouse
    cube.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TFS Warehouse refresh is default to 2 hours; if you reduce the interval to less
    than the default of 2 hours, processing of the data warehouse will consume server
    resources frequently. If your TFS Server has large volumes of data, reducing the
    refresh frequency may adversely affect the performance of the server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work through this recipe, you''ll need to ensure the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The TFS deployment you are working with a TFS Warehouse configured. You can
    validate this by checking the **Reporting** tab of TFS Administration Console:![Getting
    ready](img/image00819.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You must be a member of the Team Foundation Administrators security group or
    you must have the server-level administer warehouse permission set to **Allow**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft Team Foundation Server Application Pool must be running for the
    Warehouse Control Web Service:![Getting ready](img/image00820.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log into Team Foundation Server Application Tier and validate that the Warehouse
    Control Service is available by browsing `http://localhost:8080/tfs/TeamFoundation/Administration/v3.0/WarehouseControlService.asmx`.
    Revisit the *Getting ready* section if you don't see the Warehouse Control Web
    Service as illustrated in the following screenshot:![How to do it…](img/image00821.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `WarehouseControlWebService` page, look for the `changesetting` web method.
    Click on this to navigate to the definition of this function. This method has
    two input parameters, namely, `settingId` and `newValue`. In the `settingId` textbox,
    type `RunIntervalSeconds`. This property holds the warehouse rebuild frequency.
    In the `newValue` textbox type `3600`, `3600` here represents 3600 seconds (1
    hour), that is, the new value for the property `RunIntervalSeconds`:![How to do
    it…](img/image00822.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Invoke**. This will redirect you to the response page. The response
    page will list the result of the action. In this case, the message confirms that
    the run interval value has been successfully updated to 3600 seconds:![How to
    do it…](img/image00823.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this step, we'll see how to force the rebuild of the warehouse. Navigate
    back to the Warehouse Control Web Service and select the **ProcessWarehouse**
    web method. This method has two input parameters, namely, **collectionName** and
    **jobName**. In the **collectionName** textbox, enter **defaultcollection**. This
    is the TFS collection you want to force the rebuild for. Don't pass any values
    in the **jobName** textbox:![How to do it…](img/image00824.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can optionally leave the **collectionName** textbox empty. This will force
    the rebuild of all Team Project Collections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicking on **Invoke** will redirect you to the response page. The response
    page will list the result of the action. The service returns `True` when it successfully
    starts the processing of the warehouse and `False` if it is not successful. A
    value of `False` indicates that the warehouse is currently being processed:![How
    to do it…](img/image00825.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Forcing a TFS Warehouse rebuild isn't something you need to do on a regular
    basis. However, a TFS Warehouse and cube rebuild is required if you move, restore,
    rename, and fail over the data tier of TFS. The warehouse rebuild is required
    to see refreshed reports if you move, attach, detach, or delete a Team Project
    Collection.
  prefs: []
  type: TYPE_NORMAL
- en: There is more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `RebuildWarehouse` command is available via command-line utility as well.
    More details on how to use the `RebuildWarehouse` command can be found at [http://bit.ly/1HjaQdp](http://bit.ly/1HjaQdp).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring TFS Cache settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TFS application tier maintains a file cache in order to speed up the file
    download process to the end user by serving the files from the cache, rather than
    getting them afresh from the database each time. The cache grows over time and
    can start to dent the available storage space on the application tier. The cache
    uses a good percentage of the available space; in case your main drive does not
    have a lot of available space, you will ignorantly not benefit from the caching
    facility. Moving the TFS Cache to a separate directory enables you to free up
    the storage on the main drive and plan a more relaxed backup or recovery procedure
    for the new drive. It is possible that you may see some performance gains by changing
    the cache directory to its own directory. In this recipe, you'll learn how to
    change the TFS Cache directory to a different directory.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need permission to log into the TFS application tier.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log into the TFS application tier. Navigate to the installation folder for TFS.
    The default install location is `C:\Program Files\Microsoft Team Foundation Server
    14.0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The TFS's `web.config` is available in the folder location `C:\Program Files\Microsoft
    Team Foundation Server 14.0\Application Tier\Web Services`. Take a backup of the
    `web.config` file before making any changes. Open the `web.config` file and search
    for the key `dataDirectory`:![How to do it...](img/image00826.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the value of the data directory from the default to the new location.
    For this recipe, a new drive `W` has been set up for TFS Cache. Repoint the cache
    to `W:\TfsData\ApplicationTier\_fileCache` and save the changes in the config
    file:![How to do it...](img/image00827.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition to this, you can optionally add a `PercentageBasedPolicy` key, which
    would dictate what percentage of the free space can be consumed by the cache.
    This key only accepts whole number values:![How to do it...](img/image00828.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, the `FixedSizeBasedPolicy` key can be used. The value for this
    key is the total allowed space to the cache. For example, setting this to `500`
    would mean the cache only has 500 MB of available space for storage. If both `FixedSizeBasedPolicy`
    and `PercentageBasedPolicy` keys are specified, the value of `FixedSizeBasedPolicy`
    takes precedence.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Saving `web.config` will restart the application pool and the changes will be
    effective immediately. Carry out a `get` operation on version control and TFS
    will cache a copy of the files served back to the client as a result of the get
    operation in the new location.
  prefs: []
  type: TYPE_NORMAL
- en: Managing CodeLens in TFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeLens is a Microsoft Visual Studio feature that shows you information about
    your code directly in the code editor. Before CodeLens, one had to dig through
    several different windows for information such as method references, tests linked
    to a method, the last change to a line of code, or the code churn to a class.
    Since all of this information is in TFS, you would just expect it to be available
    in one place. CodeLens just does that by putting this information literally at
    your fingertips within the code editor. CodeLens supports both TFVC and Git repositories.
    CodeLens now supports C#, VB, C++, SQL, and JavaScript files. You can learn more
    about CodeLens and other quality and diagnostic tools available in Visual Studio
    at [http://bit.ly/1NNbtJ6](http://bit.ly/1NNbtJ6).
  prefs: []
  type: TYPE_NORMAL
- en: This book focuses on TFS, you are probably wondering why Visual Studio-specific
    features are being discussed. TFS is responsible for preparing the information
    served by CodeLens in Visual Studio. TFS has specific jobs for code indexing,
    and the information produced off that is stored in the TFS database. In this recipe,
    you'll learn how to manage the `TfsConfig CodeIndex` command to check the indexing
    status of a Team Project Collection, enable/disable indexing, find large files,
    and ignore them from indexing, review ignore list, and destroy code index.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to use the `CodeIndex` command, you need to be a member of the Team
    Foundation Administrators Security Group. This command can only be invoked from
    the TFS Application tier; for this reason, you need to have login permissions
    to the TFS Application tier.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log on to TFS Application tier and open a command prompt in the elevated mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to see the indexing status for the default collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start indexing all changesets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Stop indexing previously created changesets and start indexing new changesets
    only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to list the top 50 files that have a size greater
    than 10 KB in the default collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to exclude a specific file from indexing and add
    it to the ignored file list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to see all the files that aren''t indexed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to clear previously indexed data and restart indexing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to delete the code index with confirmation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `TfsConfig` command gives you the ability to manage the `CodeIndex` functions.
    Refer to [http://bit.ly/1NNcwZi](http://bit.ly/1NNcwZi) for more details on the
    individual commands.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous synchronization with the TFS Proxy server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not uncommon today to have geographically distributed Teams accessing
    TFS from remote locations. Remote users may suffer from latency of the connection
    between their location and the location where TFS is hosted. The Team Foundation
    Proxy Server comes to the rescue here. There is a common misconception about TFS
    Proxy caching all requests. However, the proxy server only caches the `Get` operation
    for TFVC-based version control. The proxy server does not carry out a continuous
    synchronization or replication operation, instead it caches the item on first
    request. While the first caller from the remote location will still face the latency
    in their `get` operation, all future requests will get the data as if it was being
    accessed locally. Today, developers are encouraged to check in code frequently.
    This means geographically distributed Teams operating in low network bandwidth
    regions will notice a lag when performing a get operation on source control. In
    this recipe, you'll learn how to precache the data in TFS Proxy to improve the
    overall performance of the proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires that you have a TFS Proxy Server setup. Follow the steps
    at [http://bit.ly/1lfGDS7](http://bit.ly/1lfGDS7) to configure a TFS Proxy Server
    if you don't already have one. Supplement your proxy server with an additional
    drive. In this recipe, we'll be using `D:\TFS\Workspace` as the additional directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: A part of the distributed Team that is working in a remote location
    does not have great network bandwidth. Operations that require code download from
    the TFS server are generally slow. The Team has installed the TFS Proxy Server
    in their remote location; however, they still face a lag when downloading the
    incremental changes in the source code. The Team would like a proactive solution
    that downloads the incremental code changes to the proxy server, so when the Team
    performs a `Get` operation on TFS, the proxy server can serve the content from
    the local cache rather than needing to make a round trip to TFS.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log into the TFS Proxy Server machine. Browse to the `D:\TFS\Command` directory
    and create a new file called `PreGetTfsProxy.bat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code into to the `PreGetTfsProxy.bat` file and save the
    changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Test the script by double-clicking on `PreGetTfsProxy.bat` to run the script.
    If the script is set up correctly, the `D:\TFS\Workspace` location should now
    be populated with the source code from TFS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a Windows scheduled task to run the `PreGetTfsProxy.bat` file once every
    10 minutes. You can tune the frequency of execution of this job to best suit the
    landscape of your organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing Team Foundation Server Proxy Server installs the Team Foundation
    Server command-line tools. The core function of the TFS Proxy Server is to locally
    cache any files requested from TFS, so any subsequent calls for that file can
    be served directly by the proxy server. By saving a round trip out to the TFS
    Server, the proxy server can significantly reduce the lag noticed when performing
    the `Get` operation. TFS Proxy Server does not perform a workspace synchronization
    operation, instead it only caches the files requested from the TFS Server. In
    this recipe, we created a temporary workspace on the proxy server and scheduled
    the execution of `Get` operation through a Windows-scheduled task to proactively
    fetch the incremental code changes. This will, in turn cause the proxy server
    to cache the changes on the proxy server proactively. While the approach is simple,
    it is effective in synchronizing the changes from source control locally on the
    proxy server.
  prefs: []
  type: TYPE_NORMAL
- en: The TFS Proxy Server can significantly reduce the time taken to perform a `Get`
    operation. Perfmon is a very useful tool to measure the system performance using
    performance counters. Follow the walkthrough in [http://bit.ly/1SZEN2T](http://bit.ly/1SZEN2T)
    to measure the times for the `Get` operation with and without the proxy server.
    It is generally recommended to baseline the performance gained by the proxy server.
    This should be revalidated after TFS upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a TFS database back up schedule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"If you fail to plan, you are planning to fail!"* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Benjamin Franklin* |'
  prefs: []
  type: TYPE_TB
- en: No one wants to be the administrator of a server that goes down without a complete
    set of backups in place. TFS Database sits at the core of the product; the database
    is the repository of the data you interact with using Web Portal, Visual Studio,
    and Microsoft Test Manager. In this recipe, you'll learn about the database backup
    capability available with in TFS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To configure the backup schedule, you will need to be a member of the TFS Administrator
    Group, a member of SQL Server Administrator Group, and (if your deployment uses
    SharePoint Products) a member of the Farm Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: The TFS Service Account must have a SQL Server perform backup and create maintenance
    plan permissions set to allow on each instance of the SQL Server that hosts the
    databases that you want to back up. You need a network share to store the database
    backup. The service account needs full control permission on the network share,
    folder, or storage device where the backups will be kept.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log into the Team Foundation Server Application tier and open the Team Foundation
    Server Administration Console. Navigate to the **Scheduled Backups** screen by
    clicking on **Scheduled Backups** from the navigation panel on the left:![How
    to do it...](img/image00829.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As illustrated here, specify the network backup path and duration to 30 days:![How
    to do it...](img/image00830.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Advanced** section allows you specify the file extension for the backup
    and the transactional backup file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00831.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can optionally choose a unique extension name and configure that to be exempted
    from the antivirus scan. The general industry wide accepted extension for backups
    are `bak` for the full backups, `diff` for differential backups, and `trn` for
    transactional backups.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next screen allows you to specify the reporting databases. Check the option
    to include the reporting database in the backup schedule. This will allow you
    to back up the reporting databases along with the TFS Database backups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reporting services needs an encryption key for accessing reports after the database
    restore, set an encryption key password in the reporting key page and click on
    **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can optionally choose to backup SharePoint databases as well by checking
    the **Include SharePoint databases in the backup schedule** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on next to go to the **Alerts** screen. The **Alert** screen can be used
    to specify the backup scheduled alert settings. You can choose to alert the user
    on the success or failure of the backup job:![How to do it...](img/image00832.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The schedule backup page allows you to choose from **Nightly**, **Manual**,
    and **Custom** schedule. The **Custom** schedule gives you more control to set
    a schedule for the full backup, a differential backup schedule, and the interval
    for the transactional backup.![How to do it...](img/image00833.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the settings on the review page and click on **Next** to trigger the
    validation checks. Now that the validation has successfully passed, you can click
    on the **Configure** button to configure the backup per the settings:![How to
    do it...](img/image00834.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `\\tfs2015\backup` and you'll find the `BackupSets.xml`, `BackupSettings.xml`,
    and strong key for the reporting server. Make a copy and store these in a safe
    location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can trigger an ad hoc backup by clicking on the **Take Full Backup Now**
    link from the Team Foundation Server Administration Console:![How to do it...](img/image00835.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updates on the backup processing are displayed in a pop-up window. Once the
    backup completes, you can find the full set available in the network share.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Knowing the classification and criticality of the data as well as the recover
    goals of the organization are really useful in working out a backup and recovery
    strategy for the organization. Certain organizations may have very specific backup
    needs, which may not be possible to configure via the built-in "schedule backup".
    The website [http://bit.ly/1IbxBLd](http://bit.ly/1IbxBLd) discusses these use
    cases in length.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio ALM Rangers have some great guidance on disaster recovery planning
    for TFS. You can read more about it at [http://bit.ly/1Lwgx2y](http://bit.ly/1Lwgx2y).
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up unused workspaces and shelvesets in TFS – in progress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is common for TFVC users to create workspaces to temporarily download files
    or simply forget to delete unused shelvesets. As a Team Foundation Server Administrator,
    you will benefit from reducing this clutter. The `tf.exe` command-line utility
    has commands for administrating workspaces and shelvesets. In this recipe, you'll
    learn how to use the `tf.exe` utility to delete unused workspaces and shelvesets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To modify or delete an existing workspace or shelveset, you must have the global
    administer workspaces permission set to **Allow**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch the developer command prompt in the elevated mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following command will delete the `Win2k12R2_John` workspace, which belongs
    to default collection in TFS. Refer to [http://bit.ly/1P6mo6t](http://bit.ly/1P6mo6t)
    for more examples on how to use the workspace switch with the `tf.exe` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Similar to the workspace delete, the shelveset delete follows a similar command
    pattern. The following command will delete the `Fabrikam_Delta` workspace from
    the default collection in TFS. Refer to [http://bit.ly/1lHChUk](http://bit.ly/1lHChUk)
    for more examples
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The TFS command-line utility (`tf.exe`) is installed along with the installation
    of the Visual Studio. The TFS command-line utility includes switches for various
    TFS operations that empower TFS Administrators to script these routine operations.
    You can read more about these operations at [http://bit.ly/1P6mo6t](http://bit.ly/1P6mo6t).
  prefs: []
  type: TYPE_NORMAL
- en: The build server is the biggest consumer of workspaces. Build definitions that
    have not been used for a while will retain the workspace and consume large amounts
    of storage in doing so. Identifying and manually deleting these dead workspaces
    is a painstaking task. TFS Workspace cleaner is an open source utility hosted
    on CodePlex that helps you free up storage by deleting workspaces unused in a
    number of days. You can learn more about this utility at [http://bit.ly/1LxFDhv](http://bit.ly/1LxFDhv).
  prefs: []
  type: TYPE_NORMAL
