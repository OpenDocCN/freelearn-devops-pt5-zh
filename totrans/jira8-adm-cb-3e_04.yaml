- en: User Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: User management is one of the most tedious, yet important, aspects of any system.
    It lays the foundation for many other system functions, such as security and notifications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at the different options available to create user
    accounts in Jira, and also how to manage users by using groups and project roles.
    We will also look at how to integrate Jira with external user-management systems,
    such as **Lightweight Directory Access Protocol** (**LDAP**), for both authentication
    and user management. Lastly, we will cover how to make Jira participate in various
    single sign-on environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and importing multiple users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling public user signup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing groups and group memberships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing project roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing default project role memberships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deactivating a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating and importing users from LDAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with LDAP for authentication only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with Atlassian Crowd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up single sign-on with Crowd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up single sign-on with Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Windows domain single sign-on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and importing multiple users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a Jira administrator, it is usually your responsibility to set up accounts
    for the new user whenever someone new joins the organization. This is usually
    fine on an ad hoc basis, but from time to time, you might be required to import
    many users at once. In these cases, you will need some additional tools to help
    you efficiently enable all these users to access the system without any delay.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will need the Jira **command-line interface** (**CLI**).
    You can retrieve it from [https://marketplace.atlassian.com/plugins/org.swift.jira.cli/cloud/overview](https://marketplace.atlassian.com/plugins/org.swift.jira.cli/cloud/overview).
  prefs: []
  type: TYPE_NORMAL
- en: The CLI app has two components. The first component is an app called CLI Connector
    that you can install via the **Universal Plugin Manager** (**UPM**) just like
    any other Jira apps. The second component is the actual CLI Client, which we will
    use to issue commands to Jira. You can download the latest command-line tool (`atlassian-cli-8.x.x-distribution.zip`)
    from [https://bobswift.atlassian.net/wiki/spaces/info/pages/103022955/Downloads+-+CLI+Clients](https://bobswift.atlassian.net/wiki/spaces/info/pages/103022955/Downloads+-+CLI+Clients).
  prefs: []
  type: TYPE_NORMAL
- en: You will also need to have an administrator account, as user creation is an
    administrative task.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can start using the command-line client to import users into Jira,
    we first need to prepare our user data. The easiest way to do this is to create
    a **comma-separated values** (**CSV**) file containing the following information,
    in the order specified. You can use a spreadsheet application such as Microsoft
    Excel to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Username** | **Password** | **Email** | **Full name** | **Group A** |'
  prefs: []
  type: TYPE_TB
- en: '| `tester1` | `xxxxx` | `tester1@example.com` | `Test User` | `jira-softwareusers`
    |'
  prefs: []
  type: TYPE_TB
- en: 'The following list explains each column of the CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Username**: The username of the user; note that usernames in Jira need to
    be unique.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: The password for the new user. You can leave it blank, and let
    Jira automatically generate one for you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email**: The email address for the new user. Emails can be sent out to the
    user for him/her to reset the password once the account is created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full name**: The full name of the new user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group**: Groups to add the new user into. If you want to add the user to
    multiple groups, put each group into its separate column. Note that the group
    name you specify must already exist in Jira.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that you have your data file, go through the following steps to import
    and create the user accounts in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Unzip the CLI Client into a directory on your computer (for example, `/opt/cli`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the user's CSV file to a directory on your computer (for example, `/tmp/users.csv`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Command Prompt and navigate to the directory that contains the CLI Client—that
    is, the directory that contains the `jira.sh ` or `jira.bat` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the `jira.shfile` (Linux) or `jira.bat` (Windows) file is executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to import users; make sure you substitute the administrator
    username and password in your Jira URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command assumes you are using Linux. If you are using Windows,
    use `jira.bat` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything runs fine, you will see an output similar to the following one
    on your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac30e11e-645d-4b62-9fe7-0247c063c061.png)'
  prefs: []
  type: TYPE_IMG
- en: The result of the command, as shown in the preceding output, will show every
    new user added to Jira as defined in the CSV file. Since we did not specify a
    password for the `Tester Four` user, the user is assigned an autogenerated password.
    The last line in the output also provides a summary of the number of users added
    successfully and the number of failed ones, if any.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The command-line client that we used to run the `addUserWithFile` command uses
    Jira's remote APIs to interact with Jira. Jira exposes many of its core functionalities
    via these APIs, such as the ability to create new users and issues.
  prefs: []
  type: TYPE_NORMAL
- en: When we run the `addUserWithFile` command, we pass in the CSV file that contains
    our new users, formatted in a way that the command-line client is able to understand
    and make an API call to Jira to create those users for us.
  prefs: []
  type: TYPE_NORMAL
- en: However, take note that the same security rules apply when using these remote
    APIs (with or without the command-line client). So in our case, since creating
    new users is an administrative task, we need to provide an administrator account
    in the command.
  prefs: []
  type: TYPE_NORMAL
- en: The Jira CLI app can do a lot more than just create users. Simply run `jira.sh` or `jira.bat` to
    see a full list of the commands and features it supports. The CLI Connector app
    installed in Jira provides many more additional remote APIs that will be used
    by some of the functions in the command-line client.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling public user signup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we looked at how to manually create new user accounts
    and import users from a CSV file. These are the two options that the Jira administrators
    have when your Jira instance is used internally.
  prefs: []
  type: TYPE_NORMAL
- en: However, if your Jira is set up to be used by the public, such as in a support
    system, you would want to let your customers freely sign up for a new account,
    rather than having them wait for the administrator to manually create each account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to enable public user signup:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > **System** > **General configuration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit Settings **button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Mode **option to **Public** and click on **Update**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira can operate in two modes, public and private. In private mode, only the
    administrator can create new user accounts. For example, you can use the private
    mode for Jira instances that are used by internal engineering teams to track their
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Public mode allows anyone to sign up for new accounts. The new accounts that
    are created will have normal user permissions, so they will be able to start using
    Jira immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f6cb528-d396-4010-ad5a-1d5604446251.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, you can sign up for a new account.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To help prevent spammers, Jira comes with the CAPTCHA challenge response feature
    to make sure there is a real person signing up for a new account and not an automated
    bot. To enable the CAPTCHA feature, go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > System > General configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Edit Settingsbutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the CAPTCHA on signupoption to On, and click on Update.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have enabled CAPTCHA, the sign-up form will include a string of randomly
    generated alphanumeric characters that must be typed in correctly for a new account to
    be generated, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90238810-51f5-4d5c-ae2a-cb7b8620afb6.png)'
  prefs: []
  type: TYPE_IMG
- en: An example of CAPTCHA is shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Managing groups and group memberships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any information system, a common way of managing users is through the use
    of groups. Groups are based on positions and responsibilities within an organization;
    however, it is important to note that groups simply represent a collection of
    users. In Jira, groups provide an effective way to apply configuration settings,
    such as permissions and notifications, to users.
  prefs: []
  type: TYPE_NORMAL
- en: Groups are global in Jira—if you belong to the `jira-administrators` group,
    you will always be in that group regardless of the project you are accessing.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to create a new group and add users to it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to create a new group:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > User management > Groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the new group's name under the Add groupsection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add group **button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go through the following steps to add users to a group:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > User management > Groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Edit memberslink for the group you want to manage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the usernames for the users you want to add to the group. You can click
    on the select user icon and use the user picker to find your users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add selected users button to add users to the group, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98162540-cebf-4a6e-a21e-6707638abab5.png)'
  prefs: []
  type: TYPE_IMG
- en: This allows you to manage users in your group.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By editing the group''s membership directly, you can add and remove multiple
    users to and from a group in one go; however, sometimes you only need to update
    a single user''s group membership; in these cases, you might find it easier to
    manage this edit option via the user''s group membership interface. Go through
    the following steps to edit user groups:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > User management > Users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Edit user groups option from the menu for the user you want to manage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the group you want to add the user to. Jira provides a type-ahead
    feature to help you find the group you want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Join selected groupsbutton to add users to the group, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/611b4ee2-d5b7-4253-aa42-2905f57ff569.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we have added our users to a group.
  prefs: []
  type: TYPE_NORMAL
- en: Managing project roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using groups is the default method of managing multiple users in Jira; however,
    there are some limitations with using groups. The first limitation is that groups
    are global in Jira. This means that if a user is in a group, then that user is
    included in all projects in that group.
  prefs: []
  type: TYPE_NORMAL
- en: In real life, this is often not the case—for example, suppose a user is a manager
    in a project. He/she may not be a manager in a different project. This becomes
    a problem when it comes to configuring permissions and notifications.
  prefs: []
  type: TYPE_NORMAL
- en: The second limitation is that group memberships are controlled by the Jira administrator
    or central IT administrator if using LDAP. This means that using groups alone
    to control access to the project means that it is not managed by the project owners,
    and can result in a bottleneck.
  prefs: []
  type: TYPE_NORMAL
- en: So, to address these limitations, Jira provides us with project roles. Project
    roles are similar to groups; the only difference is that the membership of a project
    role is defined at the project level.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira comes with three project roles out of the box—Administrator, Developer,
    and User. We will first look at how to create a new project role.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go through the following steps to create a new project role:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > System > Project roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the new project role's name and description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add Project Role **button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c77bfe3e-6bc0-4533-8546-23b77194daad.png)'
  prefs: []
  type: TYPE_IMG
- en: Just like groups, project roles themselves are global in Jira, but their memberships
    are local to each project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the project role has been created, we can start adding users and groups
    to the relevant role for each project. To add a new user and/or group to a project
    role, go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the target project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Administration **tab and select **Users and roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Add users to a role button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the user and/or group, select the project role, and click on **Add**,as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/628e1a17-634b-4de1-af4d-5272ffb08f9f.png)'
  prefs: []
  type: TYPE_IMG
- en: This will help you manage your project roles.
  prefs: []
  type: TYPE_NORMAL
- en: Managing default project role memberships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Project role memberships are defined per project; however, there are cases
    where certain users or groups need to be members of a given project role by default.
    In fact, Jira has the following default members out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Administrators**: All members of the `jira-administrators` group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developers**: All members of the `jira-developers` group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these default members, users are automatically added to the project role
    when a new project is created; this greatly reduces the amount of manual work
    required from a Jira administrator.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to define the default membership for project
    roles:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > System > Project roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Manage Default Memberslink for the project role you want to configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit **link of the **Default Users** column to add users to the
    project role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Edit **link of the **Default Groups** column to add groups to
    the project role, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f0ac8357-73f7-4ffb-8df3-7bec458e152c.png)'
  prefs: []
  type: TYPE_IMG
- en: This screenshot shows how to add groups to the project role.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have assigned users and groups as the default members of a project
    role, any newly created project will have those users and groups added to the
    role. A good practice is to use groups for the default project role membership,
    as a user's role and responsibilities are likely to change over time.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that changes to the default membership will *not* be
    retroactively applied to existing projects.
  prefs: []
  type: TYPE_NORMAL
- en: Deactivating a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a user has created an issue or comment, Jira will not allow you to delete
    the user. In fact, deactivating a user is usually a better approach than deleting
    the user completely. Once the user is deactivated, the user cannot log in to Jira,
    and this will not count toward your license count.
  prefs: []
  type: TYPE_NORMAL
- en: You cannot deactivate a user when you are using external user-management systems,
    such as LDAP or Crowd from Jira—you need to do so from the user-management system
    of the source.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to deactivate a user:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > User management > Users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Edit link for the user that is to be deactivated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the Active option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Update button to deactivate the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deactivated users will not be able to log in to Jira, and will have the Inactive option
    displayed next to their name.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating and importing users from LDAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Jira manages its users and groups internally. Most organizations
    today often use LDAP, such as Microsoft **Active Directory** (**AD**), for centralized
    user management, and you can integrate Jira with LDAP. Jira supports many different
    types of LDAP, including AD ([https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/get-started/virtual-dc/active-directory-domain-services-overview](https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/get-started/virtual-dc/active-directory-domain-services-overview)),
    OpenLDAP ([https://www.openldap.org](https://www.openldap.org)), and more.
  prefs: []
  type: TYPE_NORMAL
- en: There are two options for integrating Jira with LDAP. In this recipe, we will
    explore the first option by using an **LDAP connector**, which will periodically
    synchronize users, their details, and group memberships between Jira and LDAP.
    We will look at the second option in the next recipe, *Integrating with LDAP for
    authentication only*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to have an LDAP server up and running. You need
    to make sure that the Jira server is able to access the LDAP server and that there
    are no network or access issues. For example, you need to make sure that LDAP
    connectivity is not blocked by firewalls. At a minimum, you will also need to
    have the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The hostname and port number of the LDAP server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The base **Distinguished Name** (**DN**) to search for users and groups.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The credentials to access the LDAP server. If you want Jira to be able to make
    changes to LDAP, make sure that the credentials have write permissions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to integrate Jira with an LDAP server:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > User management > User Directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Directory **button and select either Microsoft Active Directory or LDAP for
    non-AD directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the LDAP server, schema, and permission settings. Refer to the following
    table for more details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Quick Test **button to validate Jira's connectivity to LDAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save and Test **button if there are no issues with connecting
    to LDAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in a username and password to run a quick test. While doing this, make
    sure that Jira is able to connect to LDAP, to find the user and retrieve the user's
    group information, and to authenticate against LDAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following tables list all the configuration parameters for configuring
    LDAP. Each table includes the parameters for each section on the configuration
    page. Let''s have a look at the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server settings** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Name | This is an identifier for the LDAP server. |'
  prefs: []
  type: TYPE_TB
- en: '| Directory Type | This selects the type of the LDAP server—for example, Microsoft
    Active Directory. Jira automatically fills in the user and group schema details
    based on the type selected. |'
  prefs: []
  type: TYPE_TB
- en: '| Hostname | This is the host of the LDAP server is hosted. |'
  prefs: []
  type: TYPE_TB
- en: '| Port | This is the port that the LDAP server listens to for incoming connections.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Use SSL | This checks whether SSL is being used on LDAP. |'
  prefs: []
  type: TYPE_TB
- en: '| Username | This is the user account that Jira uses to access LDAP. This should
    be a dedicated account for Jira. |'
  prefs: []
  type: TYPE_TB
- en: '| Password | This is the password for the account. |'
  prefs: []
  type: TYPE_TB
- en: 'The following table lists LDAP schema parameters and their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **LDAP schema** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Base DN | This is the root node where Jira starts the search for users and
    groups. |'
  prefs: []
  type: TYPE_TB
- en: '| Additional User DN | This is the additional DN to further restrict a user
    search. |'
  prefs: []
  type: TYPE_TB
- en: '| Additional Group DN | This is the additional DN to further restrict a group
    search. |'
  prefs: []
  type: TYPE_TB
- en: 'The following table lists LDAP permissions and their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **LDAP permission** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Read Only | Select this option if you do not want Jira to make any changes
    to LDAP. This is the ideal option if everything, including the user''s group memberships,
    is managed with LDAP. |'
  prefs: []
  type: TYPE_TB
- en: '| Read Only, with Local Groups | This option is similar to the Read Only option
    but lets you manage group memberships locally within Jira. With this option, the
    group membership changes you make will remain in Jira only. This is the ideal
    option when you only need user information from LDAP and want to manage Jira-related
    groups locally. |'
  prefs: []
  type: TYPE_TB
- en: '| Read/Write | Select this option if you want Jira to be able to make direct
    changes to LDAP, assuming that Jira''s LDAP account has the write permission as
    well. |'
  prefs: []
  type: TYPE_TB
- en: 'The following screenshot shows how to test the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df2e9c18-8d8b-403a-96de-508acc8cc889.png)'
  prefs: []
  type: TYPE_IMG
- en: After you have added your LDAP server as a user directory, Jira will automatically
    start synchronizing its user and group data. Depending on the size of your LDAP,
    it may take a few minutes to complete the initial synchronization. You can click
    on Back to directory list to go to the directory list link and see the status
    of the synchronization process.
  prefs: []
  type: TYPE_NORMAL
- en: Once the process is completed, you will be able to see all your LDAP users and
    groups and use your LDAP credentials to access Jira.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we have just created in this recipe is called a connector. With a connector,
    Jira first pulls user and group information from LDAP and then creates a local
    copy. It then periodically synchronizes any deltas.
  prefs: []
  type: TYPE_NORMAL
- en: All authentication will be delegated to LDAP. So, if a user's password is updated
    in LDAP, it will be immediately reflected when the user attempts to log in to
    Jira. It is important to note that, with LDAP, users must still be in the necessary
    groups (for example, `jira-users`, by default) in order to access Jira, so you
    need to make sure that you either create a group called `jira-users` in LDAP and
    add everyone to it or grant the application access to LDAP groups, such as a group
    called `all-employees`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that only users who have access to Jira will count toward your license
    count. This includes users in groups that have been granted application access
    to Jira.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a large user base in LDAP, and you only want to use LDAP for authentication,
    you may want to refer to the next recipe, *Integrating with LDAP for authentication
    only*.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with LDAP for authentication only
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you might need LDAP only for authentication, and want to keep the
    group membership separate from LDAP for easy management. In this recipe, we will
    look at how to integrate Jira with LDAP only for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you will need to have an LDAP server up and running. You need
    to make sure that the Jira server is able to access the LDAP server. For more
    details, refer to the previous recipe, *Integrating and importing users from LDAP*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to integrate Jira with an LDAP server exclusively
    for authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > User management > User Directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add Directorybutton and select the Internal with LDAP Authentication option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the LDAP server and schema settings. Most of the parameters are identical
    to those you use when creating a normal LDAP connection, with a few exceptions.
    Refer to the following table for details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Quick Testbutton to validate Jira connectivity to LDAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Save and Test button if there are no issues connecting to LDAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following table lists configuration parameters that are specific for the
    Internal with LDAP Authentication option:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server settings** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Copy User on Login | This automatically copies the user from LDAP into Jira
    when the user first successfully logs in to Jira. |'
  prefs: []
  type: TYPE_TB
- en: '| Default Group Membership | This automatically adds the user into the groups
    specified here when the user first successfully logs in to Jira. This setting
    is not retrospectively applied to existing users. This is a useful feature to
    ensure that every user who can log in to Jira will be added to the necessary groups,
    such as `jira-users`. |'
  prefs: []
  type: TYPE_TB
- en: '| Synchronize Group Memberships | This automatically copies the user''s group
    membership to Jira when the user successfully logs in. |'
  prefs: []
  type: TYPE_TB
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This authentication option is similar to the previous recipe, but with a number
    of key differences:'
  prefs: []
  type: TYPE_NORMAL
- en: LDAP is only used for authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jira does not periodically synchronize the user and group information from LDAP
    after the initial user login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jira has read-only access to LDAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group membership is managed inside Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this setup, every time a user first successfully logs in to Jira, the user
    is copied from LDAP to Jira's local user repository, along with the group membership
    (if configured to do so). Since LDAP is only used at authentication time, with
    no initial overhead of synchronizing all the user information, this option can
    provide better performance for organizations that need to synchronize a large
    user base in LDAP.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Atlassian Crowd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, *Integrating with LDAP for authentication only*, we
    looked at how to integrate Jira with an LDAP server for user and group information.
    Besides using LDAP, another popular option is to use **Crowd**, which is available
    at [https://www.atlassian.com/software/crowd/overview](https://www.atlassian.com/software/crowd/overview).
  prefs: []
  type: TYPE_NORMAL
- en: Crowd is a user-identity-management solution from Atlassian, and Jira supports
    Crowd integration out of the box. With Crowd, you can also set up a single sign-on
    option with other Crowd-enabled applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you will need to have a Crowd server up and running. You need
    to make sure that the Jira server is able to access the Crowd server without any
    glitches—for example, you need to make sure that it is not blocked by firewalls.
  prefs: []
  type: TYPE_NORMAL
- en: 'At a minimum, you will also need to have the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The Crowd server URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Credentials for the registered application in Crowd for Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to integrate Jira with Crowd for user management:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > User management > User Directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Add Directorybutton and select the Atlassian Crowd option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the Crowd server settings. Refer to the following table for details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Test Settings button to validate Jira's connectivity with Crowd.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Save and Testbutton if there are no issues connecting with Crowd.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following tables list configuration parameters for setting up integration
    with Crowd:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server settings** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Name | This is an identifier for the Crowd server. |'
  prefs: []
  type: TYPE_TB
- en: '| Server URL | This is the Crowd''s server URL. |'
  prefs: []
  type: TYPE_TB
- en: '| Application Name | This is the registered application name for Jira inside
    Crowd. |'
  prefs: []
  type: TYPE_TB
- en: '| Application Password | This is the password for the registered application.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Crowd Permissions | This is the column header. |'
  prefs: []
  type: TYPE_TB
- en: '| Read Only | Select this option if you do not want Jira to make any changes
    to Crowd. This is the ideal option if everything, including the user''s group
    membership, is managed with Crowd. |'
  prefs: []
  type: TYPE_TB
- en: '| Read/Write | Select this option to let Jira synchronize any changes back
    to Crowd. |'
  prefs: []
  type: TYPE_TB
- en: 'The advanced settings are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Advanced settings** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Enable Nested Groups | This allows groups to contain other groups as members.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Enable Incremental Synchronization | This will only synchronize deltas. Enabling
    this option can help improve performance. |'
  prefs: []
  type: TYPE_TB
- en: '| Synchronization Interval | This determines how often (in minutes) Jira should
    synchronize with Crowd for changes. Shorter intervals may cause performance issues.
    |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Setting up a single sign-on with Crowd* recipe to learn how to
    take advantage of Crowd's single sign-on capability with Jira and other Crowd-enabled
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a single sign-on functionality with Crowd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous recipes, we have looked at the different options available for Jira
    to use external centralized user repositories, including Crowd. One of the advantages
    of integrating Jira with Crowd is its **single sign-on** (**SSO**) abilities.
  prefs: []
  type: TYPE_NORMAL
- en: Web-based applications integrated with Crowd are able to participate in an SSO
    environment, so when a user is logged in to one application, he/she will be automatically
    logged in to all other applications.
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking for single sign-on functionalities in a Windows environment,
    where users will be automatically logged on to applications with their workstation,
    read the next recipe, *Setting up a Windows domain single sign-on*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you can set up SSO with Crowd, you first need to integrate Jira with
    Crowd for user management. Refer to the *Integrating with Atlassian Crowd* recipe
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have already integrated Jira with Crowd, you will need to have the following
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: The application name assigned to Jira in Crowd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The password for Jira to access Crowd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A copy of the `crowd.properties` file from the `CROWD_INSTALL/client/conf` directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go through the following steps to enable SSO with Crowd:'
  prefs: []
  type: TYPE_NORMAL
- en: Shut down Jira if it is running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `seraph-config.xml` file located in the `JIRA_INSTALL/atlassian-jira/WEB-INF/classes` directory
    in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the line that contains `com.atlassian.jira.security.login.JiraSeraphAuthenticator`.
    Comment it out so that it looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the line that contains `com.atlassian.jira.security.login.SSOSeraphAuthenticator`.
    Uncomment it so that it looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Copy the `crowd.properties` file to the `JIRA_INSTALL/atlassian-jira/WEB-INF/classes`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `crowd.properties` in a text editor and update the properties listed in
    the following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start up Jira again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following table lists the configuration parameters from the `crowd.properties`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Value** |'
  prefs: []
  type: TYPE_TB
- en: '| `application.name` | This is the application name configured in Crowd for
    Jira. |'
  prefs: []
  type: TYPE_TB
- en: '| `application.password` | This is the password for the application. |'
  prefs: []
  type: TYPE_TB
- en: '| `application.login.url` | This is Jira''s base URL (you can get this from
    Jira''s general configurations). |'
  prefs: []
  type: TYPE_TB
- en: '| `crowd.base.url` | This is Crowd''s base URL. |'
  prefs: []
  type: TYPE_TB
- en: '| `session.validationinterval` | This is the duration (in minutes) that a Crowd
    SSO session will remain valid. Setting this to `0` will invalidate the session
    immediately, and will have a performance penalty. It is recommended that you set
    this at a higher value. |'
  prefs: []
  type: TYPE_TB
- en: Once Jira has started up again, it will participate in SSO sessions in all Crowd
    SSO-enabled applications—for example, if you have multiple Jira instances integrated
    with Crowd for SSO, you will only need to log in to one of Jira's.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you also have a backup copy of the file before you make any changes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a single sign-on with Google
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your organization uses Google to manage user details, or you simply want
    to allow people with valid Google accounts to be able to log into your Jira instance
    (especially if it is a public instance), you can integrate Jira with Google so
    that users can log into Jira with their Google account details with a single click.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will need the Jira CLI. You can get it at [https://docs.appfusions.com/display/GAPPSAUTHJ/Downloads+and+Notes](https://docs.appfusions.com/display/GAPPSAUTHJ/Downloads+and+Notes).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step to set up SSO with Google is to create a set of Google API credentials
    by going through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to Google API Console at [https://console.developers.google.com/apis/credentials](https://console.developers.google.com/apis/credentials).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Create credentials drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select OAuth client ID and then Web application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the API credential and your Jira's URL for authorized JavaScript
    origins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the new API credential and note down the Client ID and Client Secret:
    we will need them both later.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the Google API credentials created, we can configure the SSO integration:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Administration > Manage apps > Google SSO.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Edit this configuration… link at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the Client ID and Client Secret from earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select where you would like the Google sign-in button to appear on the login
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Save to apply the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af9f4404-e758-4c22-8870-7f951569c160.png)'
  prefs: []
  type: TYPE_IMG
- en: Since we will be logging into Jira via Google, it is recommended that you disable
    web `sudo`, as Jira does not know the Google user account's password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have configured Jira with Google API credentials, a new Sign in with
    Google button will be displayed on Jira''s login page, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91619fbb-cae4-4df9-8e65-3b880010c463.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on that will take you to Google's login page if you are not already
    logged into Google, or pass you straight through if you are already logged into
    Google. Now you are ready to log into Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Windows domain single sign-on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your organization is running a Windows domain, you can configure Jira so
    that users are automatically logged in when they log in to the domain with their
    workstations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will need the Kerberos SSO Authenticator for Jira. You can
    get it at [http://www.appfusions.com/display/KBRSCJ/Home](http://www.appfusions.com/display/KBRSCJ/Home).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need to have the following set up:'
  prefs: []
  type: TYPE_NORMAL
- en: A service account in AD for Jira to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **service principal name **(**SPN**) for Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up the Windows domain SSO is not a simple task, as it involves many
    aspects of your network configuration. It is highly recommended that you work
    with the product vendor and someone who is familiar with your AD environment to
    ensure a smooth implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go through the following steps to set up the Windows domain SSO:'
  prefs: []
  type: TYPE_NORMAL
- en: Shut down Jira if it is running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `login.conf`, `krb5.conf`, and `spnego-exclusion.properties` to the `JIRA_INSTALL/atlassian-jira/WEB-INF/classes`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `appfusions-jira-seraph-4.0.0.jar` and `appfusions-spnego-r7_3.jar` to
    the `JIRA_INSTALL/atlassian-jira/WEB-INF/lib` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `web.xml` file located in the `JIRA_INSTALL/atlassian-jira/WEB-INF`
    directory in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following XML snippet before the `THIS MUST BE THE LAST FILTER IN THE
    DEFINED CHAIN` entry. Make sure you update the values for the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `spnego.krb5.conf`, use the full path to the `spnego.krb5.conf` file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For `spnego.login.conf`, use the full path to the `spnego.login.conf` file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For `spnego.preauth.username`, use the username of the service account.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For `spnego.preauth.password`, use the password of the service account:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following XML snippet before the `login` entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Open the `seraph-config.xml` file located in the `JIRA_INSTALL/atlassian-jira/WEB-INF/classes`
    directory in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the line that contains `com.atlassian.jira.security.login.JiraSeraphAuthenticator`.
    Comment it out so that it looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following XML snippet under the line that''s been commented out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Restart Jira.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add your Jira's URL to the local intranet zone in your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Jira is restarted, you should be automatically logged in every time you
    log into the Windows domain. Make sure you also have a backup copy of the file
    before making any changes.
  prefs: []
  type: TYPE_NORMAL
