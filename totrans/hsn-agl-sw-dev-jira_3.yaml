- en: Running Your Project in JIRA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](part0019.html#I3QM0-ef3008314c7341ae8da50eeac4cdaacd), *Get Started
    with Creating Your Project,* we figured out what JIRA is and how to get started
    with creating projects. In [Chapter 2](part0032.html#UGI00-ef3008314c7341ae8da50eeac4cdaacd), *Managing
    Work Items*, we talked about managing work items and what the different work items
    are, which we went into a lot of detail over.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we're going to talk about our project, and how we need to use
    JIRA to manage the project while it's running.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and starting a Sprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The daily Scrum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller stories or tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closing the Sprint—the Sprint Report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and starting a Sprint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we talked a lot about epics, stories, bugs, and tasks in
    a lot of detail, so if you want to talk more about those things or look deeper
    into them, then you should go back to [Chapter 2](part0032.html#UGI00-ef3008314c7341ae8da50eeac4cdaacd), *Managing
    Work Items,* and look at them again. In this section, we're going to talk about
    creating and starting a Sprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The backlog view, which allows us to prioritize the stories, tasks, bugs, and
    things that are in there
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtered views of the backlog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Sprints to have containers for the work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Story point estimation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sizing the team commitment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjustment to a Sprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s go ahead and flip over to JIRA. We''re going to look at this project.
    This is the Backlog view, and we can see that we have some stories in the backlog,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Backlog view
  prefs: []
  type: TYPE_NORMAL
- en: As we can see from the preceding screenshot, we have four stories, a task, and
    a bug. We can prioritize these items by just dragging and dropping them, and we
    can move them around and put them in whatever priority order we like. The most
    important item will be on the top.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see in the preceding screenshot that these stories have point values.
    We can see on the right-hand side that we have our first story, which has a story
    point value of 3, and that the one below it has a story point value of 1, and
    so on. Remember these story points and then refer to the doubt, effort, and complexity
    contained within this item. We have the ability to edit these values by selecting
    an item, and then going into the preview pane on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating and starting a project
  prefs: []
  type: TYPE_NORMAL
- en: 'We can edit some of these values, whether it''s the Status, Assignee, Labels,
    Story points, and more, and then we''ve got the ability at the top to filter by
    Assignee, as well as some other Quick filters, which has Only My Issues, Recently
    Updated, and more in its dropdown. We can see in the following screenshot that
    there''s only one Assignee. In a real life scenario, we would have our whole team
    listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have this backlog with some items in it, and we want to do a couple of things.
    First of all, we've got what's called a definition of ready, which includes any
    of our items that have been fully refined, which means that all of the questions
    we had have been answered, all of the understanding of what this thing is have
    been defined, and they meet what's called a definition of ready for our team.
    Our definition of ready could have acceptance criteria in it. We understand when
    the product owner thinks the item is done, and other criteria will be met in order
    for it to be ready. We want to have, ideally, at least two Sprints of ready work
    that's ready to go at any time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do that first. We''ll create a Sprint, which we''re going to call Sprint
    Ready. By clicking on the ellipses, we can edit this Sprint and name it `Ready`,
    and include the Sprint goal as `Work that is fully refined`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After we update this, we have a `Ready` Sprint. We can see the first three
    stories in our backlog, and they look like they''re ready to go. Drag them up
    into our `Ready` Sprint, which has items in it that are fully refined and ready
    to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: What we want to do is create a Sprint that we're actually going to execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create another Sprint. We''ll call this one `FP1 Sprint 1` and include
    `This is my first Sprint` as the Sprint goal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00075.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'We can actually take this item and move it up and put it at the top of the
    list as shown in the following screenshot. Then there is Backlog down that represents
    anything else that is in this list of things that we might want to eventually
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to take two of them and pull them up indoor Sprint as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The next questions we have might be, *how do we know when we have enough story
    points loaded into our Sprint? How do we know when we have enough work in there?*
    And these are great question to ask.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, we want to try and get a group commitment on our first Sprint, and
    then in our second Sprint we'll kind of do the same thing based on the output
    from our first Sprint. The number of story points that we complete in our Sprint
    is called our velocity. We use the velocity from our previous Sprint to help determine
    the velocity for the next Sprint. We're  able to complete it and then adjust it
    accordingly. After three Sprints, we'll have what's called yesterday's weather,
    and the reason that they call it that is because yesterday's weather is known.
    We know what the weather was yesterday, but the weather tomorrow is a forecast,
    and that's the best we can do. It's usually pretty close, but it may not be exactly
    right. We can use yesterday's weather, which is the average of the velocity for
    the last three Sprints, and that becomes the maximum that we'll want to plan to.
    Given that, as a team, FP Sprint 1 doesn't have a previous velocity, we're going
    to go ahead and commit to four story points, and we'll see whether or not we're
    able to complete them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve got our Sprint all set to go; the story points are in there, all of
    the stories meet our definition of ready, and we''ve even got some additional
    stuff to do in case we finish these things early. Let''s go ahead and start our
    Sprint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll see that we have the ability to name the Sprint, which we''ve done already,
    the duration of this Sprint and its start and end dates, and the Sprint''s goal.
    How many of these are working in the Sprint? Let''s go ahead and look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The daily Scrum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've got a Sprint running. In this section, we're going to talk about the daily
    Scrum.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to learn the following in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use JIRA daily as we're moving through a Sprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the board and burndown points or hours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to know if Sprint is on track or off track
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During a Sprint, we want to use JIRA, and we're going to try and use this tool
    so that we can move Sprint items through a workflow. We have our board with the
    columns on it—To Do, In Progress, and Done. We want to use JIRA to make sure that
    we're on track because if we know we're doing a two-week Sprint, we want to know
    on day two whether we're on track or not so that we can make adjustments in real
    time. We need to be able to generate data that we're going to need for reports
    at the end of the Sprint, and JIRA will do that for us automatically. We just
    need to follow some day-to-day process stuff. Then, we're going to facilitate
    the daily Scrum ceremony and help the Scrum master do a better job with their
    role.
  prefs: []
  type: TYPE_NORMAL
- en: Let's hop back over to JIRA. As you'll remember from the previous section, we
    created a Sprint called FP Sprint 1, we had our queue of ready work, and the rest
    of the backlog. However, since that Sprint just started, let's take a look at
    a Sprint that's already running. Let's hop over to our Second Project.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see in the following screenshot, we are in the middle of SP Sprint
    1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the items that are contained within the Sprint. There''s the Ready
    Sprint of items that are ready to go, and then there''s another couple of stories
    that are in the Backlog and priority order. When we are in a Sprint, we''re going
    to want to look at the Active sprints view, which is really our board view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Active Sprints view
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine we''re meeting in our daily Scrum and that we''ve brought our team
    together. We would be able to go around the room and ask people three questions
    that we want to ask at a daily Scrum:'
  prefs: []
  type: TYPE_NORMAL
- en: What impediments do we have that are keeping us from meeting our Sprint commitment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are we doing anything that will prevent our squad or other teams from meeting
    their Sprint commitment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any new dependencies to discover or any ways to resolve dependencies
    that we have found out about since our last daily Scrum?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are really the three questions we'll want to talk about with the team.
    As everyone is talking about the answers to those questions, and talking about
    what impediments they are running into that will help/will keep them from meeting
    their Sprint commitments, we'll be updating the board in real-time. They can do
    this prior to the meeting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the preceding screenshot. We''ve got a story, which is
    the SP-3 story, which we can expand or collapse, and we also have a Sub-task that
    exists underneath it. We might have stories, and we might also have stories for
    subtasks. JIRA will display the smallest increment of work so that we can see
    that it''s actually shown as the Sub-task. Below that, we can see our other issues,
    and these other issues are all story level items without subtasks underneath them.
    We can see that story number 3, or SP-5, has already been completed and moved
    to done. Because of this, we''re going to move the Sub-task over to the DONE column,
    and we''ll see that when we do that, JIRA will actually prompt us and say *all
    of the sub-task items under SP-3 are done, do we want to go ahead and update the
    status of the SP-3 item to done as well?* We can say yes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'SP-3 is now complete, along with the sub-tasks underneath it. We''ll move SP-7 to
    in progress because we have already started that one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Active Sprints view
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at our burndown and get a sense of whether or not we are
    on or off track for this Sprint. We''ll go to Reports and look at the Burndown
    Chart. Let''s take a look at how to read this Burndown Chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Burndown Chart
  prefs: []
  type: TYPE_NORMAL
- en: We can see on the left-hand side that we have STORY POINTS, and on the bottom
    we have TIME. What this shows us is that at the beginning of the Sprint, we had
    11 story points, and we can see that as we carry on and we update them, we have
    less story points. Every time we move one of these items into the DONE column,
    that story's story points are decremented from the overall story points. We can
    see that the gray line in the preceding screenshot represents the ideal.
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of the Sprint, we had 11 story points, and at the end of the
    Sprint, we're going to have zero story points because they'll all be done. What
    this story point, or what this burndown, tells us is that for SP-1 when we're
    looking at story points (SP Sprint 1), we're actually ahead of schedule. We can
    see that we have a burndown of some of these story points and that five remained
    for the Sprint, and so we're actually ahead of the ideal line. We'll want to walk
    through this with our team. We'll get rid of the charts, including the burndown
    chart, and we can say, *hey team, looks like we're doing really well; we're actually
    ahead of schedule. There's a pretty good chance we're going to finish these items,
    in which case we'll want to be pulling them from the ready queue and adding more
    work.*
  prefs: []
  type: TYPE_NORMAL
- en: That's how we run a daily Scrum in JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: Smaller stories or tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to talk about whether we should have smaller stories
    or tasks, or how we should organize our work in the most effective way for our
    team.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous sections, we set up our Sprint and started it, and we looked
    at how we should use JIRA within a daily Scrum. We'll talk about the work itself.
    We're going to talk about what is the best way for work to be structured in it.
    Should we have a story per person? Should we use subtasks under a story to make
    things more specific?
  prefs: []
  type: TYPE_NORMAL
- en: One of the things that makes this so challenging, and the reason that we ask
    this question repeatedly, is because really, it depends. This is one of those
    places where it depends on the team, it depends on how we work, and there's some
    key things we need to be thinking about as we're structuring our work. Really,
    it's about speed. It's about delivering the most work in the amount of time that
    a Sprint commitment is. Talking about the fastest teams and thinking about the
    concepts that help teams be fast helps us focus on the goals of the team and not
    the individual, and that's one of the things that's really challenging with this.
  prefs: []
  type: TYPE_NORMAL
- en: We can structure our work in a way that has stories per person, but really it's
    about making sure that the team is operating optimally as a team, not as a group
    of individuals. One of the effects of swarming on items to finish the most important
    work is that when everybody comes together and works on an item, that's where
    we see the most speed. Whether it's UX, development, backend development, and
    testers all attacking one story and moving through that one, and then attacking
    the next story, this is really the quickest way for the team to work as opposed
    to everybody working on their own thing. It helps to use fast performance so that
    we keep commitments realistic.
  prefs: []
  type: TYPE_NORMAL
- en: We previously talked about using yesterday's weather as a barometer for how
    much work to commit to in a Sprint. We can commit to more than that, and maybe
    we'll complete it, but it's really about team motivation. If we commit to 10 points
    and we complete 12, that makes the team feel happy; if they commit to 15 and they
    complete 12, the team feels like they didn't do a good job, and this will actually
    de-motivate them. We want to make sure that the team is motivated and excited
    about what they're doing. If we can keep the commitment realistic, this will allow
    the team to commit and finish the work that they committed to earlier, and then
    they can pull more from that ready cue that we created. This is really important
    because they're going to be delivering more than 100 percent of their commitment,
    and teams love that.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at relative sizing instead of specific sizing. If people
    commit to, *we're going to work through this story for eight hours, it's going
    to take me eight hours* and then it takes 10, using relative sizing allows us
    to not have to be on the hook for those specific time frames. If a story has three
    points, then we're able to relatively size that against the other stories in the
    Sprint, so a size three point story is the same as a three point story. We don't
    need to know whether that item is six and a half hours or eight and a half hours,
    we know it's a three.
  prefs: []
  type: TYPE_NORMAL
- en: The last concept is regarding having t-shaped people. This concept means that
    we can imagine a person with their arms outstretched to either side so that they
    look like a **T**. They're deep in a skill set in the middle of that T, and their
    arms represent two other skills that they might also have. The more we do to make
    our team cross functional, the more we can increase the throughput of our team.
    Maybe that tester is also pretty good at processing, and so they can serve us
    and help to serve as the Scrum master. Maybe we have a UX designer who can also
    do some frontend coding. This allows us to actually increase the speed of the
    project when people swarm on a story.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at JIRA and how JIRA would support those things. We'll talk
    through a couple of these concepts. Moving back into our Backlog, what's important
    to remember is that we talked about the fact that a board shows the smallest unit
    of work.
  prefs: []
  type: TYPE_NORMAL
- en: If we have a story in our backlog, we're going to work on this story. However,
    what we really want to do is create a task for UX, and we want to create a task
    for frontend development, and a task for backend development. We will have a person
    that will be on the hook for the story overall, and then we can create subtasks,
    which will allow me to capture each one of those tasks underneath. But again,
    remember, it's not about what's best for the individual, it's about what's best
    for the story and for the team overall.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already talked about how when we move a story into done, we decrement those
    five story points from the Sprint, but if we want to track this in regard to hours,
    we can do that too. As we can see in the following screenshot, when we select
    any item, we receive a dialogue; under show more, we can see that we can actually
    do time tracking as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s important to note that we can do this. The team should work in relative
    sizing. We can look at forecasting more effectively and things like that too,
    as some teams prefer to work in time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If we do, then what we can look at is the time spent and the time remaining,
    and then we can actually burn hours instead of story points in our burndown. On
    the left-hand side where we would have story points, we would instead have hours.
    If these were the number of hours that are required in order to finish our commitment,
    then those hours would burn to zero, which means that as we finish our story,
    we would want to update the time spent and the time remaining. Hopefully, this
    will help us figure out what's best for our team. Go ahead and experiment; this
    should be the way that we choose to handle our items in JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: Closing the Sprint—the Sprint report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to talk about closing our Sprint. In the previous
    sections, we talked about creating and starting the Sprint, we talked about the
    daily Scrum, how to use JIRA to run our daily Scrum and the value in doing that,
    and we talked about the way we should configure our work and whether we should
    use smaller stories. Should we use tasks? How do we break it down to a point where
    it's most useful for the team? In this section, we will talk about closing the
    Sprint and learn how to complete a Sprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at JIRA. We were working on SP Sprint 1\. We''ve finished
    SP-3 and the subtasks underneath it. We''ve finished really important stories
    number 1, 3, 4, and 6, and 3 is up, a really important story number 1 as shown
    in the following screenshot. We can see that these are all done. However, story
    number 5 is not done, which means that we weren''t able to finish it. This being
    said, we were able to get story number 6, pull it into the Sprint, and were able
    to complete it. We have four days remaining on this Sprint, as shown in the following
    screenshot, but we can still go ahead and complete our Sprint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we''re going to hit the Complete button, and from the following screenshot,
    we can see that five issues were completed and one issue was incomplete. It prompts
    me and says, *where do we want to put that incomplete issue? Do we want to put
    it in the Backlog, or do we want to put it in the Ready Sprint? *We''ll go ahead
    and put it back in the Ready Sprint so that we can move the incomplete item back
    into ready and complete our Sprint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'What we''re seeing in the following screenshot is called a Sprint Report for
    this Sprint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Sprint Report
  prefs: []
  type: TYPE_NORMAL
- en: There's a few things to look at. First of all, we talked about this burndown,
    and we can see in the preceding screenshot that we originally started with 11
    story points, and we were able to burn down to one. We completed 10 story points
    in this Sprint. We can see the completed issues and we can also see the items,
    the number of those items, and the amount of story points that were done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, there''s SP-8, which is story number six as shown in the following screenshot,
    that we added after the Sprint had started. We can see the issue that was added
    to the Sprint after its start time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We did not complete issue number seven, SP-7, which was really important story
    number five, so that was one story point that we didn't get.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Issues not completed
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that we were able to complete 13 story points on our 11 point
    commitment and the bad news of course is that we didn't finish the one story point.
    We did complete 13, we did have 11 as our commitment, and we did deliver our commitment
    plus a little more. Hopefully, not completing this one story was okay for our
    product owner.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use JIRA to run our project, how to create
    a Sprint, and how to bring refined backlog items in so that we can use a ready
    Sprint that meets the definition of ready. We determined how big the right size
    for a Sprint commitment is using yesterday's weather. We also learned how to start
    a Sprint, how to use JIRA during a daily Scrum and throughout the Sprint, and
    we looked at burndowns and board views to do that.
  prefs: []
  type: TYPE_NORMAL
- en: We talked about how to best help the Sprint succeed using JIRA as a tool, different
    concepts to structure work so that our team is most effective as they're moving
    through the Sprint in the board view, either through subtasks or smaller stories,
    and then finally we learned how to complete a Sprint.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to talk about reporting.
  prefs: []
  type: TYPE_NORMAL
