- en: Chapter 2. Searching in JIRA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has a detailed explanation of how data can be fetched from JIRA.
    The data is used for analysis, reporting, and taking appropriate action. The **Issue
    Navigator** window offers a very easy mechanism to search for issues, but it's
    possible to write queries using **JIRA Query Language** (**JQL**) to refine the
    search results. You will learn how to save the search results as filters and charts
    that can be added in the dashboard. This can be shared with other users and can
    also serve as a data source for various gadgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Issue Navigator** window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching the issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filters and subscriptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to JQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser shortcuts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting issues in Excel, RSS, XML, and JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Issue Navigator window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JIRA comes with a powerful feature that will let you find issues quickly and
    take action. For instance, you can easily search all the bugs of a particular
    project named `cristata` (which have been in an open state for the past 2 weeks)
    using the following JQL query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding query is written in JQL (a language in JIRA to search for issues).
    However, if you are new to JIRA, then you can also use the **Basic** search feature
    to find issues; you don't need to learn JQL for this. Moreover, learning it is
    not so difficult.
  prefs: []
  type: TYPE_NORMAL
- en: You can switch from **Basic** search to **Advanced** search to deal with the
    preceding query. Let's first take a look at the features provided by the **Basic**
    search in the **Issue Navigator** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the top menu bar, click on **Issues** | **Search for issues**, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Issue Navigator window](img/image_02_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Searching the issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you will be taken to the **Issue Navigator** and the default view is the
    **Detail View**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching the issues](img/image_02_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the **Detail View** window, a lot more information about the issue is visible,
    such as the **Details**, **Description**, **Assignee**, **Reporter**, and **Workflow**
    buttons to transform it into another available state. You can quickly browse through
    the issue and view the information in the center of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **List View** doesn''t display too much information. The issues are displayed
    in the form of a table. Switch to the **List View** from the drop-down menu in
    the top-right corner, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching the issues](img/image_02_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, a few issue fields are displayed in the **List View**, but you can
    always add more columns to your view.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have not refined the issues for a specific project. The default **Basic**
    search option will let you apply several conditions to refine the issues. You
    will find a set of buttons at the top of the issue list that will let you apply
    multiple conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s refine the issues to find the **cristata(CSTA)** project whose issue
    type is **Bug**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching the issues](img/image_02_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can further refine this list so that it contains only the issues that are
    in the **Open** state using the **Status** button located next to issue **Type**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, what if we want to refine further and only view the issues opened within
    the last 2 weeks? There is an option to add a lot of conditions for various other
    issue fields. Click on the **More** button and select **Created Date**. Further,
    you will be asked to enter the duration in a small pop-up box, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching the issues](img/image_02_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Update** button to apply this last condition as well and you
    will get your result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the last link called **Advanced** and you will see the resulted
    JQL from this operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The **Issue Navigator** window will always generate a similar JQL when you apply
    various conditions using the **Basic** search option.
  prefs: []
  type: TYPE_NORMAL
- en: Search using text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a textbox at the top of the screen that will let you search for issues
    quickly by simply typing in simple text. However, it has some nice features that
    will let you find a specific issue instantly. You have to just type the issue
    key and you will be taken to that issue directly. You can also search all the
    issues that are assigned to you by typing `my`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about the various features of quick search at [https://confluence.atlassian.com/display/JIRA/Using+Quick+Search](https://confluence.atlassian.com/display/JIRA/Using+Quick+Search).
  prefs: []
  type: TYPE_NORMAL
- en: You can search for a single term or a phrase using the text search. For instance,
    to search for an individual word such as `china`, just type it in the search box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wildcards are also supported for single and multiple characters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The single character wildcard search:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: description - `chin?`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will search for china, chino, and any other replacement that it will find
    in the description field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The multiple character wildcard search:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: description - `chi*`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will search for all the words starting with `chi`. It could be China or
    Chinese.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about text searches at [https://confluence.atlassian.com/display/JIRA/Performing+Text+Searches](https://confluence.atlassian.com/display/JIRA/Performing+Text+Searches).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Filters and subscriptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just saw how to search bugs that have been open within the past 2 weeks for
    a particular project. Now, what if we want to perform this search twice a week?
    Well, you can always go to the **Issue Navigator** and apply the conditions again
    or write a JQL query. However, there is an amazing feature in JIRA that allows
    you to not only save your searches, but also receive the results in an e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Save as** button at the top of the screen to save the search:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Filters and subscriptions](img/image_02_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the pop-up window, enter the **Filter Name** and click on the **Submit**
    button to save the query. In JIRA, these saved results are called filters.
  prefs: []
  type: TYPE_NORMAL
- en: After you save the filter, you can always click on the filter name from the
    left-hand side panel in the **Issue Navigator**.
  prefs: []
  type: TYPE_NORMAL
- en: Subscriptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: E-mail subscription is another good feature that JIRA offers which e-mails the
    list of the issues in a particular filter either to you or to a group of JIRA
    users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Details** link that is located next to the **Save as** button.
    A new pop-up window will appear. Click on **New subscription**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Subscriptions](img/image_02_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the next screen, you can select the recipient as **Personal Subscription**
    or select the JIRA group name from the select list.
  prefs: []
  type: TYPE_NORMAL
- en: In **Schedule**, you can select **Daily**, **Days per week**, **Days per month**,
    or **Advanced**. The first three options are self-explanatory; however, the last
    option lets you write cron expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we want to get this result every 15 days or on day 15 of every month, the
    following cron expression will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few more examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Cron expression** | **Details of scheduling** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '| 9:30 a.m. on the 15th day of every month |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '| Every day at 9:30 a.m. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '| 9:30 a.m. every Monday, Tuesday, Wednesday, Thursday, and Friday |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more details on retrieving search results by e-mail, refer to [https://confluence.atlassian.com/display/JIRA/Receiving+Search+Results+via+Email](https://confluence.atlassian.com/display/JIRA/Receiving+Search+Results+via+Email).
  prefs: []
  type: TYPE_NORMAL
- en: Sharing your filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, the filters that you create are accessible to you only; they are
    private, but it's possible to allow other users to access the filters created
    by you.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Issues** drop-down menu, go to **Manage filters**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing your filters](img/image_02_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the next screen, you will get the list of all the filters that are either
    created by you or shared with you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Edit** to modify the filter share options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing your filters](img/image_02_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the new window, you will get the option to select to share with **Everyone**,
    **Project**, or **Group**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing your filters](img/image_02_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you want to share the filter with everyone, then select it, click on the
    **Add** option, and click on **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: Now your filter can be accessed by every other user in the system.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to JQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JQL is one of the best features in JIRA; it lets you search the issues efficiently
    and offers a lot of handy features. The best part about JQL is that it's very
    easy to learn, thanks to the autocomplete functionality in the **Advanced** search
    that offers suggestions to the user based on the keywords typed.
  prefs: []
  type: TYPE_NORMAL
- en: JQL consists of either single or multiple questions. These questions can be
    combined to form complex questions.
  prefs: []
  type: TYPE_NORMAL
- en: The basic JQL syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JQL has a field followed by an operator. For instance, to retrieve all the
    issues of the `CSTA` project, you can use a simple query like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, within this project, if you want to find the issues assigned to a specific
    user, use the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'There might be several issues assigned to a user and maybe we just want to
    focus on issues whose priority is either `Critical` or `Blocker`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of issues assigned to a specific user, what if we want to find the
    issues assigned to all the other users except one? This can be achieved using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: So you see that JQL consists of one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Use of operators in JQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Operators are symbols that compare the field from the left-hand side to a value
    on the right-hand side. Here is a list of all the supported operators in JQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator** | **Keyword** |'
  prefs: []
  type: TYPE_TB
- en: '| Equals | `=` |'
  prefs: []
  type: TYPE_TB
- en: '| Not equals | `!=` |'
  prefs: []
  type: TYPE_TB
- en: '| Greater than | `>` |'
  prefs: []
  type: TYPE_TB
- en: '| Greater than equals | `>=` |'
  prefs: []
  type: TYPE_TB
- en: '| Less than | `<` |'
  prefs: []
  type: TYPE_TB
- en: '| Less than equals | `<=` |'
  prefs: []
  type: TYPE_TB
- en: '| In |  |'
  prefs: []
  type: TYPE_TB
- en: '| Not in |  |'
  prefs: []
  type: TYPE_TB
- en: '| Contains | `~` |'
  prefs: []
  type: TYPE_TB
- en: '| Does not contain | `!~` |'
  prefs: []
  type: TYPE_TB
- en: '| Is |  |'
  prefs: []
  type: TYPE_TB
- en: '| Is not |  |'
  prefs: []
  type: TYPE_TB
- en: '| Was |  |'
  prefs: []
  type: TYPE_TB
- en: '| Was in |  |'
  prefs: []
  type: TYPE_TB
- en: '| Was not in |  |'
  prefs: []
  type: TYPE_TB
- en: '| Was not |  |'
  prefs: []
  type: TYPE_TB
- en: '| Changed |  |'
  prefs: []
  type: TYPE_TB
- en: 'Not all operators have keywords. For instance, if you want to search all the
    issues assigned to two different users, then the following JQL query can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Advanced search using functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are times when the value in the query needs to be dynamic. For instance,
    if you want to write a query to list all the issues created in the last 2 days,
    then use the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `startOfDay()` function is the function whose value is calculated at the
    time this query is run.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can further refine this query to list all the issues created in the last
    2 days assigned to the current user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This query will be saved as a filter and the result will be displayed using
    a gadget in the dashboard. A query similar to this can be used by all the users
    in a team and the output will be different for everyone because instead of a specific
    value, we will use a specific function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows some of the common functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Function** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| `currentLogin()` | This displays the time based on the user whose session
    has currently started |'
  prefs: []
  type: TYPE_TB
- en: '| `currentUser()` | This displays the search based on the user who is currently
    logged in |'
  prefs: []
  type: TYPE_TB
- en: '| `endOfDay()` | This displays the time based on end of current day |'
  prefs: []
  type: TYPE_TB
- en: '| `endOfMonth()` | This displays the time based on end of current month |'
  prefs: []
  type: TYPE_TB
- en: '| `endOfWeek()` | This displays the time based on end of current week |'
  prefs: []
  type: TYPE_TB
- en: '| `endOfYear()` | This displays the time based on end of current year |'
  prefs: []
  type: TYPE_TB
- en: '| `lastLogin()` | This displays the time based on current user''s last session
    started |'
  prefs: []
  type: TYPE_TB
- en: '| `membersOf()` | This displays the search based on members of a specific group
    |'
  prefs: []
  type: TYPE_TB
- en: '| `now()` | This displays the current time |'
  prefs: []
  type: TYPE_TB
- en: '| `startOfDay()` | This displays the time based on start of current day |'
  prefs: []
  type: TYPE_TB
- en: '| `startOfMonth()` | This displays the time based on start of current month
    |'
  prefs: []
  type: TYPE_TB
- en: '| `startOfWeek()` | This displays the time based on start of current week |'
  prefs: []
  type: TYPE_TB
- en: '| `startOfYear()` | This displays the time based on start of current year |'
  prefs: []
  type: TYPE_TB
- en: The time-based functions will fetch the issues based on the local time zone
    selected by the user in their profile.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the complete list of available functions, refer to [https://confluence.atlassian.com/display/JIRA/Advanced+Searching+Functions](https://confluence.atlassian.com/display/JIRA/Advanced+Searching+Functions).
  prefs: []
  type: TYPE_NORMAL
- en: Browser shortcuts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you start using JIRA regularly, you will save time used when carrying out
    common everyday tasks, such as creating issues, going to the **Issue Navigator**,
    performing a quick search, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you log in to your JIRA instance, the dashboard will open. Let''s say
    that you want to go to the **Issue Navigator** window quickly. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Press *G* + *I*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will take you directly to your **Issue Navigator** window in a few seconds.
    If you use **Detail View** in the **Issue Navigator** window, the details of the
    first issue will be displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Press *J*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next issue in the list will be displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Press *K*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you are back to the first issue. While browsing the issues, you suddenly
    remember that you need to create a ticket.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Press *C*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open the **Create Issue** screen for you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Press */*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will shift the mouse focus to the quick search box at the top. There are
    a lot of similar shortcuts for various operations in JIRA (it will take time to
    learn and remember these). Start with some common shortcuts that we mentioned
    here and, with time, learn more.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a complete list of keyboard shortcuts, refer to [https://confluence.atlassian.com/display/JIRA/Using+Keyboard+Shortcuts](https://confluence.atlassian.com/display/JIRA/Using+Keyboard+Shortcuts).
  prefs: []
  type: TYPE_NORMAL
- en: Exporting issues in Excel, RSS, XML, and JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From time to time, you will need to bring these issues out of JIRA and place
    them in an Excel sheet where you can create complex pivot charts based on the
    information retrieved. JIRA will let you export these issues in a few standard
    formats (such as RSS, XML, and Excel).
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top-right corner of the **Issue Navigator** pane, there is a button
    called **Export**. When you press this button, you will see several options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting issues in Excel, RSS, XML, and JSON](img/image_02_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you click on **XML**, the issues currently visible in the **Issue Navigator**
    pane will open up in an XML format in your browser. You can save this page as
    an XML file.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you can generate an RSS feed for either **Issues** or **Comments**.
    This will give you the URL to access the RSS feed, which you can use in your favorite
    feed reader. The URL of this feed is the same and whenever there is an update
    in the list, the RSS feed will be updated automatically.
  prefs: []
  type: TYPE_NORMAL
- en: There are also options to export the issues in **Word**, **Excel (All fields)**,
    or **Excel (Current fields)**. The export in Excel is quite useful when you want
    to generate custom reports on the data pulled out from JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling JSON export in JIRA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JSON is a popular format that is used in communicating data between various
    applications. It is a language-independent format used that can be parsed and
    processed by a variety of programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ability to export JIRA issues in JSON format is disabled by default but
    follow these steps to enable this facility in your JIRA instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to JIRA, **Administration** | **Add-ons** | **Manage add-ons** under **ATLASSIAN
    MARKETPLACE** and change the filter to include **All add-ons**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **System add-ons** grouping, search for the add-on named **jira-importers-plugin**
    and expand its submodules as shown in the following screenshot:![Enabling JSON
    export in JIRA](img/image_02_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the submodules are expanded, find the two modules named **searchrequest-json**
    and **issue-json** and enable them:![Enabling JSON export in JIRA](img/image_02_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now go back to the **Issue Navigator** and you will find a new option under
    **Export** called **JSON**:![Enabling JSON export in JIRA](img/image_02_014.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exporting the issues in JSON is quite a useful feature, especially for developers
    who want to build tools to pull data from JIRA. The ability to have the issues
    in JSON format will be of great benefit to them.
  prefs: []
  type: TYPE_NORMAL
- en: Bulk editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another powerful feature in JIRA is bulk editing in the **Issue Navigator**.
    This feature lets you modify the attributes of multiple issues simultaneously.
    There are several cases when you may need to perform such an action. For example,
    an employee has left the company and someone else has joined instead of this employee.
    Now, there might be several hundred issues assigned to him that are not yet closed
    in JIRA; these issues should ideally be assigned to a new user using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, refine the search results so that you can see all the issues assigned
    to the old user:![Bulk editing](img/image_02_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top-right corner, click on the **Tools** button and then under **Bulk
    Change:**, select **all 26 issue(s)**. If you have 50 issues in the search results,
    then this number will be 50.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the issues you want to modify:![Bulk editing](img/image_02_016.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have the option to either select all the issues at once or select a few
    that you want to modify. Click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the operation and select the first option, that is, **Edit Issues**:![Bulk
    editing](img/image_02_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the modification that needs to be done:![Bulk editing](img/image_02_018.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this step, you will get the option to select the field that you want to modify.
    You will also get the option to select its new value. As we want to change the
    **Assignee**, select it using the checkbox and search for the new user to whom
    you want to assign all the issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The bulk editing feature also allows you to modify multiple attributes. Maybe
    you also want to change the **Due Date**. So simply select another attribute using
    the checkbox and click on the **Next** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review your change:![Bulk editing](img/image_02_019.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screen, just review the changes that you wish to perform. For
    instance, in our case, this screen will display the change in **Assignee**. When
    you are sure that the change is correct, then click on the **Confirm** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the bulk edit is done, you will be taken back to the **Issue Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the bulk edit feature, multiple issues can be modified; however, it's
    possible that some of the operations, such as the **Edit**, **Move**, or **Delete**
    issue, are disabled. The reason for this is that the user who is performing the
    bulk change may not have permission to execute that operation on all the issues
    selected for bulk change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how issues can be searched in JIRA using the **Issue
    Navigator**. We covered the **Basic** search as well as the **Advanced** search
    using JQL. Creating filters and subscribing to it were also covered. We also discussed
    how to modify issues in bulk and how to export issues from the **Issue Navigator**.
  prefs: []
  type: TYPE_NORMAL
- en: Once you start using JIRA to track issues, it also becomes important to analyze
    the data to check the progress of the project. In the next chapter, various built-in
    reports that come with JIRA will be discussed. These real-time reports help managers
    to check various project statistics and make the right decisions. The dashboards
    and gadgets will also be discussed briefly.
  prefs: []
  type: TYPE_NORMAL
