- en: Ansible Galaxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point in the book, we should have a pretty solid grasp of DevOps and
    Ansible and how to effectively implement DevOps patterns and organizational strategies
    using Ansible 2\. From here, we will take a look at community resources provided
    by Ansible (Ansible Galaxy) and discover how to tap into a wealth of open source
    community-provided Ansible roles and playbook's.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible's implementation has managed to standardize itself over the years and
    has become one of the leading DevOps Configuration Management, automation, and
    delivery solutions in the market. Ansible's success is primarily due to the modularity
    that is inherent in Ansible, its extensibility, Ansible Tower, and its community-supported
    Ansible Galaxy solution.
  prefs: []
  type: TYPE_NORMAL
- en: For those unaware of Ansible Galaxy, it is a robust and highly adaptable solution
    by which community members and playbook developers can create and share Ansible
    roles. This community-developed sharing solution provides a wealth of automation
    solutions for the community to partake in.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this final chapter, we are going to take a look at Ansible''s flagship playbook
    and role distribution solution: The Ansible Galaxy. We are going to explore how
    to leverage this innovative implementation to retrieve and submit role developments.
    We are going to explore how this solution works and learn how to make the best
    use of it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we are going to explore specifically include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Galaxy Fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the command-line options available within Ansible Galaxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how to install roles onto your system using Ansible Galaxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describing how to create and share with Ansible Galaxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible Galaxy Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to take a look at the Ansible Galaxy. We are going
    to explore what Ansible Galaxy is and how it works. To begin, let's define what
    Ansible Galaxy is. Ansible Galaxy is a website supported by a command-line interface,
    which provides an area for *role* and *playbook* developers to share and consume
    their creations. Each entry point into Ansible Galaxy is available independently
    and allows the community to leverage it as they see fit.
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible Galaxy website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible Galaxy website is an Ansible-owned and community-supported role
    and playbook sharing solution. The Ansible Galaxy website hosts thousands of community-created
    roles and playbooks. The developers of these roles have created them in order
    to allow others to benefit from their efforts and leverage them to perform automated
    deployment and configuration management tasks.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, it's a good idea to take a look at the Ansible Galaxy website.
    The Ansible Galaxy website and community is located at [https://galaxy.ansible.com/](https://galaxy.ansible.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Ansible Galaxy website should look something like what is shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9489a93b-f15e-4921-81b4-d98f23a572d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, the Ansible Galaxy website is broken down into a few distinct
    menu options. These subsections (highlighted at the top of the site) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ABOUT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EXPLORE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BROWSE ROLES
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BROWSE AUTHORS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a minute to briefly describe each of these sections and their role
    in the Ansible Galaxy universe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ABOUT: This section of the site provides some critical information related
    to Ansible Galaxy. This includes some basic tutorials on how to download roles
    one by one, how to download multiple roles at a time, advanced download options,
    how to create and share roles, best practices, automated testing techniques, and
    where to go if you have any questions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EXPLORE: The explore section provides us with a set of tagged criteria we can
    browse roles with. These tagged criteria allow us to look at roles available within
    Ansible Galaxy via the author name, most downloaded, most watched, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BROWSE ROLES: Browse roles are exactly what it sounds like; a role browser
    and search utility. This is probably the most used section of the website as it
    allows us to find and grab Ansible roles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BROWSE AUTHORS: Browse authors are a way for us to search through Ansible Galaxy
    and find roles created by specific people. This can be especially handy when searching
    for roles created by someone you know or a popular author.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the Ansible Galaxy main website, you can refer to the [https://www.ansible.com/](https://www.ansible.com/)
    official documentation as well in relation to Ansible Galaxy help. The link for
    this documentation is [http://docs.ansible.com/ansible/galaxy.html](http://docs.ansible.com/ansible/galaxy.html).
  prefs: []
  type: TYPE_NORMAL
- en: In addition to connecting to the central Ansible Galaxy website, you can can
    also run your own dedicated and private Ansible Galaxy server. This is because
    just like Ansible, Ansible Galaxy is also open source. More information on setting
    up a personal Ansible Galaxy server can be found at [https://github.com/ansible/galaxy](https://github.com/ansible/galaxy).
  prefs: []
  type: TYPE_NORMAL
- en: 'As you explore the Ansible Galaxy website, there are some important things
    to make note of when searching and using Ansible roles within a given system.
    These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The role name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatible platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The installation command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ansible Galaxy website is kind enough to provide us with the command-line solution
    for each given role. For example, the following screenshot provides a glimpse
    of how the Ansible Galaxy website outlines the role information for MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72d0d1a7-0336-4dd2-b5c8-0a8849f739cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And once you click on the preferred role (in our case, it''s mysql), we should
    see something like what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41e779a7-a61b-462b-8247-271f675dc445.png)'
  prefs: []
  type: TYPE_IMG
- en: The Ansible Galaxy command-line interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Ansible Galaxy command-line interface is provided to users so they can
    automate the procurement of Ansible roles from the Ansible Galaxy website. This
    is a highly useful command-line tool, and we will be using it for the remainder
    of this chapter. To begin, we will want to verify that the Ansible Galaxy command-line
    tool is installed and functioning properly. Let''s try the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command should be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b14555cd-c0e0-4d4b-ae3d-a71683e06d64.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have the pleasantries of how to basically invoke Ansible Galaxy
    out of the way, we can begin looking at the command-line switches available to
    the Ansible Galaxy solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete syntax for the `ansible-galaxy` installation (used to install
    roles on your system, login, and do much more) would look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If this looks slightly confusing, it's OK; it won't shortly. Next, we are going
    to go through the more important `ansible-galaxy` command-line options and you
    will learn how to use them in greater detail.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Galaxy command-line options explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to take a much closer look at the Ansible Galaxy
    command-line options and available parameters. The goal will be to really dive
    into the command line and better understand how the command-line implementation
    of Ansible Galaxy can make the Ansible administrators'' life easier. We just looked
    (earlier) at an example of the complete syntax of the `ansible-galaxy` command.
    When using Ansible Galaxy, in the `ansible-galaxy` command, the formatting is
    `<OPTION>` followed by `[PARAMS]`. This is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'So in all reality, the `<OPTION>` tag could be any of the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: On the other hand, the `[PARAMS]` would be any of the option supported sub-arguments.
    Let's take a look at the primary options available to the `ansible-galaxy` command
    and see what each of these do and take a look at each option's available sub-arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The install subcommand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `install` subcommand is used by Ansible to install roles onto the control
    server. The general usage of this command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A more realistic example of this command in action might be something like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As we saw earlier, the Ansible Galaxy website will provide us with the command-line
    syntax to install a given role, and as we can see, this is generally fairly straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `install` option provides several options to install roles. These are described
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `username.role[,version]`: This solution offers us the ability to install
    a given role that we found within the Ansible Galaxy website. The syntax of this
    solution based on our previous `install` command example allows us to specify,
    say, `ansible-galaxy install ANXS.postgresql`, where `ANXS` is the username and
    `postgresql` is the role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using a `filename -r-` option: This solution offers us the ability to install
    any number of roles provided within a text file. The text file would have one
    role per line with the same formatting requirements as the preceding option on
    each line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Using a tarball: This option allows us to grab a role from another source (say,
    GitHub) and install the role by pointing Ansible Galaxy at the `tar.gz` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Available options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-f`, `--force`: Forces the overwriting of an existing role on the system.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i`, `--ignore-errors`: This option ignores errors and allows Ansible Galaxy
    to continue with the next specified role.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-n`, `--no-deps`: This option removes the dependencies from the context of
    the `ansible-galaxy` command. This means that no dependencies will be installed
    along with the specified role.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p ROLES_PATH`, `--roles-path=ROLES_PATH`: This optional path parameter, allows
    us to override the directory containing roles. Specifically it allows us to specify
    an alternate location for Galaxy to download them to. The default implementation
    for `roles_path` configured in the `ansible.cfg` file (`/etc/ansible/roles` if
    not configured).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r ROLE_FILE`, `--role-file=ROLE_FILE`: A file containing a list of roles
    to be imported, as previously specified. This option cannot be used if a role
    name or `.tar.gz` have been specified.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The delete subcommand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `delete` command option in Ansible Galaxy will remove a role from the `galaxy.ansible.com`
    registry. It is important to note that order to effectively remove a role, you
    will first need to authenticate using the login option. Some examples of how to
    use the `DELETE` option are provided next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Available parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c`, `--ignore-certs`: This specific option tells Ansible Galaxy to ignore
    TLS certificate errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`, `--server`: This option overrides the default server [https://galaxy.ansible.com](https://galaxy.ansible.com).
    This is particularly useful when setting up your own Ansible Galaxy server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The import subcommand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This `ansible-galaxy` option allows us to import a role from GitHub into the
    `galaxy.ansible.com` library. In order for this import solution to work, it will
    require user authentication with `galaxy.ansible.com` using the login subcommand.
    Let's take a look at how to use the `import` subcommand to import a role.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Available parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c`, `--ignore-certs`: This command-line option tells Ansible Galaxy to ignore
    SSL certs. The switch also ignores TLS certificate errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`, `--server`: Overrides the default server [https://galaxy.ansible.com](https://galaxy.ansible.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--branch`: This option lets us specify a specific branch to import into Ansible
    Galaxy. If a specific branch is not defined, the branch found in `meta/main.yml`
    is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ifo subcommand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ansible-galaxy info` subcommand provides a detailed set of information
    related to a specific role. The results returned for the role include information
    from both the remote *Ansible Galaxy copy* and the *local copy*. An example of
    how to use the `info` subcommand is provided next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Available options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-p ROLES_PATH`, `--roles-path=ROLES_PATH`: The `roles-path` option provides
    us with the ability to specify a path to the directory containing our Ansible
    roles. The default location for roles is the `ROLES_PATH` specified in the `ansible.cfg`
    file (`/etc/ansible/roles` if not configured).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`, `--ignore-certs`: This ignores TLS certificate errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`, `--server`: This option overrides the default server [https://galaxy.ansible.com](https://galaxy.ansible.com)
    and allows us to specify an alternate one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The init command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `init` command is used to initialize an empty role structure that could
    then be uploaded to [https://galaxy.ansible.com/](https://galaxy.ansible.com/).
    This is a good way to begin Ansible Galaxy role development and is the preferred
    way to get started in creating the structures needed to begin development. The
    following is a syntax example of how to use the `init` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Available options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-f`, `--force`: This option forces the `init` structure to automatically overwrite
    any existing roles in the path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p INIT_PATH`, `--init-path=INIT_PATH`: This option allows us to specify the
    path where the skeleton of the new role will be created. The default value for
    this is the current working directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--offline`: This option tells the `init` sub-argument to not query the `galaxy`
    API when creating roles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list subcommand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `list` subcommand instructs Ansible Galaxy to show what roles are currently
    installed on the system. Through this command, we can also specify just the role
    name, and if it''s actually installed, only that role will be shown. Let''s take
    a look at an example of how to use this subcommand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Available options are `-p ROLES_PATH`, `--roles-path=ROLES_PATH`; this path
    allows us to specify the path to the directory containing our roles. The default
    value for this option is `roles_path`, which is traditionally configured in the
    `ansible.cfg` file located at `/etc/ansible/roles`.
  prefs: []
  type: TYPE_NORMAL
- en: The login subcommand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Ansible Galaxy `login` subcommand provides us with the ability to authenticate
    between `ansible-galaxy` and the local command-line client. This authentication
    is particularly useful when uploading roles to Ansible Galaxy. Its also useful
    for importing roles into Ansible Galaxy from GitHub. In these cases (and a couple
    of others), the `login` command sequence is required before the operation can
    be performed. Let''s take a look at the command-line syntax for the `login` subcommand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Available options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c`, `--ignore-certs`: This option ignores any TLS cert errors that may occur.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`, `--server`: This option tells Ansible Galaxy to override the default
    server [https://galaxy.ansible.com](https://galaxy.ansible.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--github-token`: If we don''t wish to use our GitHub password, or if for your
    specific GitHub account two-factor authentication has been enabled, we can optionally
    use the `--github-token` parameter to pass a personal access token to the GitHub
    login solution. It is important to remember that this should be used only *if*
    we have two-factor authentication enabled on the GitHub account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remove subcommand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this subsection, we are going to look at the `remove` subcommand for Ansible
    Galaxy. This specific subcommand is used to remove one or more roles. Let''s take
    a quick look at an example of the syntax usage for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Available options are `-p ROLES_PATH`, `--roles-path=ROLES_PATH`; this path
    allows us to specify the path to the directory containing our roles. The default
    value for this option is `ROLES_PATH`, which is traditionally configured in the
    `ansible.cfg` file located at `/etc/ansible/roles`.
  prefs: []
  type: TYPE_NORMAL
- en: The search subcommand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Ansible Galaxy solution has a really handy `search` subcommand. This subcommand
    provides us with the ability to search for specific roles on the Ansible Galaxy
    server. In addition to basic search functionality, we can also search and filter
    the results. Let''s take a minute to look at the syntax of this useful feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Available options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--galaxy-tags`: The `tags` option provides a **Comma Separated Value** (**CSV**)
    list of the tags that we want the Galaxy server to filter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--platforms`: This option allows us to filter roles based on the platforms
    supported. To use it, we will need to provide a comma-separated list of platforms
    on which to filter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--author`: This option allows us to specify the username we want to filter
    by.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`, `--ignore-certs`: This ignores TLS certificate errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`, `--server`: This option allows us to change the server URL of Ansible
    Galaxy. For example, this might be useful if we run our own Ansible Galaxy server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The setup subcommand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `setup` action allows Ansible Galaxy to integrate with Travis CI. This,
    in turn, will allow Ansible Galaxy to receive notifications from Travis CI upon
    completion of the build. It is important to note that prior to being able to use
    this integration, Ansible Galaxy must first be authenticated with the `galaxy.ansible.com`
    library.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of how to use the `setup` command is provided next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The help command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This command-line option displays a brief help message and exits. An example
    of the output from the `help` command is provided next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbf8417a-92e4-419e-b55e-651125545c8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this final chapter, we took a look at how to use Ansible Galaxy. Ansible
    Galaxy is a really useful solution in sharing and communicating Ansible roles.
    This solution can take a lot of the guess work out of Ansible. Generally, there
    is a saying within the Ansible Galaxy community: "There''s a galaxy role for that",
    and indeed, there probably is.'
  prefs: []
  type: TYPE_NORMAL
- en: As we wrap up our journey through DevOps and Ansible, it's important to remember
    that implementing DevOps can be a tough challenge for any organization. There
    are a lot of people who will need to work in concert to develop a unified process,
    a set of rigid standards while maintaining a flexible atmosphere that technology
    demands.
  prefs: []
  type: TYPE_NORMAL
- en: In your quest to implement DevOps with Ansible 2, Ansible provides a much-needed
    automation platform and glue within an organization that can be leveraged as a
    foundational point for future DevOps-oriented improvements. It is my hope as the
    author of this book that the knowledge contained within proves to be useful for
    your organization and that your DevOps implementations are successful.
  prefs: []
  type: TYPE_NORMAL
