- en: '*Chapter 5*: Alternatives for Deploying and Running Containers in Production'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：生产环境中容器的部署与运行替代方案'
- en: As container technology and cloud computing mature, the number of ways in which
    you can deploy your Docker containers has exploded. Some of the options are as
    simple as running Docker on a single host, and others feature advanced features
    such as autoscaling, multi-cloud support, and more. You could even run your Docker
    containers on-premises on bare-metal servers or adopt a hybrid cloud solution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着容器技术和云计算的成熟，你部署 Docker 容器的方式也大大增加了。有些选项简单得只需要在单一主机上运行 Docker，而其他的则具备像自动扩展、多云支持等高级功能。你甚至可以将
    Docker 容器运行在本地裸金属服务器上，或采用混合云解决方案。
- en: After reading this chapter, you will understand that the many choices available
    offer different trade-offs. You will learn how to build the smallest viable production
    environment. You will be able to choose between different cloud providers and
    their managed container runtimes, as well as articulate the benefits of running
    Docker either on-premises or in a hybrid cloud. Most importantly, you will be
    able to make an informed decision about choosing a production path for deploying
    Docker containers given competing objectives.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你将理解现有的多种选择各自有不同的利弊。你将学会如何构建最小化的可行生产环境。你将能够在不同的云服务提供商及其管理的容器运行时之间做出选择，并阐明将
    Docker 运行在本地或混合云环境中的好处。最重要的是，你将能够在多种目标之间权衡，做出关于 Docker 容器部署的生产路径的明智决策。
- en: Understanding the spectrum of choices will help guide you toward making better
    decisions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 了解选择的范围将有助于你做出更好的决策。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Running Docker in production – many paths, choose wisely
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境中运行 Docker —— 许多路径，明智选择
- en: What is the minimum realistic production environment?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化的现实生产环境是什么？
- en: Managed cloud services
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管云服务
- en: Running your own Kubernetes cluster – from bare-metal servers to OpenStack
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行你自己的 Kubernetes 集群 —— 从裸金属服务器到 OpenStack
- en: Deciding on the right Docker production setup
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定合适的 Docker 生产环境设置
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete the exercises in this chapter, you'll need Git and Docker on your
    local workstation. For Mac and Windows users, please install Docker Desktop ([https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop))
    as this is how most people using Docker use it on their local workstations. You
    need to learn more about the options before you choose a production deployment
    tool.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，你需要在本地工作站上安装 Git 和 Docker。对于 Mac 和 Windows 用户，请安装 Docker Desktop ([https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop))，因为这是大多数使用
    Docker 的人们在本地工作站上使用的方式。在选择生产部署工具之前，你需要了解更多选项。
- en: Depending on what avenues you explore, you may also want to establish accounts
    with Amazon Web Services, Google Cloud, Microsoft Azure, or Digital Ocean. Most
    of these services have fairly generous free tiers that may allow you to experiment
    without spending much money, especially if you only use the services for a short
    duration. When considering what sort of environment might be suitable for your
    application, it helps to have multiple options. If you do create resources in
    the cloud, don't forget to terminate resources that you are done with or are not
    planning to keep, or you could receive a nasty surprise when you see the bill.
    Most cloud providers have a billing alert system. Please consider setting up an
    alarm that will notify you if your spending exceeds your budget.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你选择的路径，你可能还需要在 Amazon Web Services、Google Cloud、Microsoft Azure 或 Digital
    Ocean 等平台上建立账户。这些服务大多提供慷慨的免费套餐，允许你在不花费太多钱的情况下进行实验，尤其是当你只使用这些服务短时间时。在考虑什么样的环境适合你的应用时，拥有多个选项是有帮助的。如果你在云端创建了资源，别忘了删除那些不再使用或不打算保留的资源，否则当你看到账单时可能会大吃一惊。大多数云服务提供商都有计费提醒系统。请考虑设置一个警报，如果你的支出超过预算时能及时通知你。
- en: If you want to explore hosting a more complex on-premises setup, or use a bare-metal
    hosting service such as Packet ([https://www.packet.com/](https://www.packet.com/)),
    you may need one or more server computers that meet the specifications for running
    Docker or OpenStack on bare-metal computer hardware.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想探索托管更复杂的本地设置，或使用像 Packet ([https://www.packet.com/](https://www.packet.com/))
    这样的裸金属托管服务，你可能需要一台或多台符合 Docker 或 OpenStack 在裸金属硬件上运行要求的服务器。
- en: The GitHub repository for this chapter is [https://github.com/Packt-Publishing/Docker-for-Developers](https://github.com/Packt-Publishing/Docker-for-Developers)
    – please see the `chapter5` folder inside.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 GitHub 仓库链接是 [https://github.com/Packt-Publishing/Docker-for-Developers](https://github.com/Packt-Publishing/Docker-for-Developers)
    —— 请查看其中的 `chapter5` 文件夹。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码是如何运行的：
- en: '[https://bit.ly/2DYMria](https://bit.ly/2DYMria)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/2DYMria](https://bit.ly/2DYMria)'
- en: Example application – ShipIt Clicker
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例应用程序 – ShipIt Clicker
- en: The linked GitHub repository for this chapter has code for a prototype for an
    online game – called ShipIt Clicker. In this game, a fedora-clad squirrel urges
    you to deploy containers to production; the faster you click, the faster you accumulate
    `docker-compose` to run multiple containers. The game features communications
    between a web browser game client, a Node.js server using Express and a Swagger-driven
    API, and a Redis NoSQL database used to track scores and other game information.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章链接的 GitHub 仓库包含一个在线游戏原型的代码——名为 ShipIt Clicker。在这款游戏中，一只戴着礼帽的松鼠敦促你将容器部署到生产环境；你点击的速度越快，积累的
    `docker-compose` 就越多，从而运行多个容器。游戏涉及一个网页浏览器客户端、一个使用 Express 的 Node.js 服务器和一个 Swagger
    驱动的 API，以及一个 Redis NoSQL 数据库，后者用于跟踪分数和其他游戏信息。
- en: You can experiment with ShipIt Clicker to get familiar with more elaborate applications
    than previous chapters explored. Feel free to adapt and improve both the configuration
    files and the code in conjunction with a variety of tools and services in order
    to learn more about deploying to production. In subsequent chapters, we will learn
    how to deploy this application to production in several different ways, each offering
    progressively more capabilities, but different trade-offs in terms of cost, complexity,
    and availability. Before we do that, let's learn more about these alternatives.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过实验 ShipIt Clicker 来熟悉比前几章更复杂的应用程序。可以自由地调整和改进配置文件和代码，并结合各种工具和服务进行部署，以便学习如何将应用程序部署到生产环境。在接下来的章节中，我们将学习如何以多种不同方式将该应用程序部署到生产环境中，每种方式都提供了越来越多的功能，但在成本、复杂性和可用性方面存在不同的权衡。
    在此之前，让我们更深入了解这些替代方案。
- en: Running Docker in production – many paths, choose wisely
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在生产环境中运行 Docker —— 多种选择，明智决策。
- en: If you thought running Docker on your local workstation offered many choices,
    buckle up as the variety available to developers and system administrators in
    deploying an application built using Docker in a robust way makes the local development
    environment look simple by comparison. Some of the largest information technology
    companies in the world use Docker (or equivalent container technologies) to run
    at a massive scale, and container orchestration makes that possible. The promise
    of having a self-healing cluster that can continue to run applications in the
    face of network partitions and hardware failure has lured many into the Docker
    arena. Many people see their enthusiasm wane when the complexity of running a
    fault-tolerant cluster becomes evident.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为在本地工作站上运行 Docker 提供了很多选择，那么请系好安全带，因为在开发人员和系统管理员使用 Docker 构建应用程序并以一种强大的方式进行部署时，可用的多种方式使得本地开发环境显得简单。世界上一些最大的
    IT 公司都使用 Docker（或同类容器技术）来进行大规模运行，而容器编排技术使这一切成为可能。拥有一个自愈集群的承诺，使其能够在面对网络分区和硬件故障时继续运行应用程序，吸引了许多人进入
    Docker 领域。当运行一个容错集群的复杂性逐渐显现时，许多人发现他们的热情开始减退。
- en: However, you don't have to do it all yourself. Multiple cloud providers offer
    services that make running applications with Docker more manageable. The solution
    larger organizations are gravitating toward is Kubernetes, a project sponsored
    by Google as a public and community-supported alternative to proprietary container
    orchestration tools. Kubernetes takes the lessons that Google learned from building
    and operating Borg, their internal container orchestration tool, and makes them
    available to the public.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你不必全程独立完成。多个云服务提供商提供的服务，使得用 Docker 运行应用程序变得更加可管理。大多数大型组织倾向于使用 Kubernetes，这是一个由
    Google 赞助的项目，作为一个公开且社区支持的替代品，替代专有的容器编排工具。Kubernetes 从 Google 构建和运营其内部容器编排工具 Borg
    中汲取经验，并将这些经验开放给公众。
- en: Or maybe you just need to run a simple dynamic website on as small a setup as
    possible – you don't have to learn cloud orchestration to do that if you have
    access to an internet-connected server that itself can run Docker.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，也许你只需要在尽可能小的设置下运行一个简单的动态网站 – 如果你有一个可以运行 Docker 的联网服务器，你就不需要学习云编排技术来实现这一点。
- en: What is the minimum realistic production environment?
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小的实际生产环境是什么？
- en: 'Docker can run on a wide variety of hardware and software, but the level of
    support you will receive from either Docker itself or from a third party, such
    as an operating system distribution that bundles Docker, may vary significantly.
    Docker can run on a wide variety of operating systems: Linux, Apple macOS, Microsoft
    Windows, and even IBM S/390x.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 可以运行在多种硬件和软件上，但你从 Docker 本身或第三方（例如捆绑 Docker 的操作系统发行版）获得的支持水平可能会有所不同。Docker
    可以运行在多种操作系统上：Linux、Apple macOS、Microsoft Windows，甚至 IBM S/390x。
- en: Bare minimum – run Docker and Docker Compose on one host
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最低要求——在一台主机上运行 Docker 和 Docker Compose
- en: Given the wide distribution of Docker on different environments, the minimum
    production environment for a Docker-hosted application is a single host, whether
    it is physical or virtual, running an operating system that supports Docker and
    Docker Compose. Many popular mainstream operating systems and distributions have
    some version of Docker built in, including the current **Long-Term Support** (**LTS**)
    versions of Ubuntu (16.04, 18.04, and 20.04) and CentOS (7 and 8). Other more
    specialized operating systems, such as CoreOS and Container Linux, focus exclusively
    on running containers and may be good choices, albeit with a learning curve for
    people used to more mainstream systems.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于 Docker 在不同环境中的广泛分布，Docker 托管应用程序的最小生产环境是一台主机，无论是物理主机还是虚拟主机，运行支持 Docker 和
    Docker Compose 的操作系统。许多流行的主流操作系统和发行版都内置了一些版本的 Docker，包括当前的 **长期支持版**（**LTS**）Ubuntu（16.04、18.04
    和 20.04）和 CentOS（7 和 8）。其他一些更专业的操作系统，如 CoreOS 和 Container Linux，专注于仅运行容器，尽管这些系统对习惯于主流系统的人来说可能有一定的学习曲线，但它们可能是不错的选择。
- en: You could even run Docker on Windows or macOS for a production system. You might
    be more comfortable running Docker on a platform that has support, depending on
    your risk tolerance and needs. Trade-offs abound!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以在 Windows 或 macOS 上运行 Docker 用于生产系统。根据你的风险承受能力和需求，选择运行 Docker 的平台可能会更让你感到舒适，这取决于是否有支持。选择中总是充满权衡！
- en: Docker support
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 支持
- en: The community edition of Docker receives support from the parent company for
    a very limited time – the developer-focused Docker Inc. company ([https://www.docker.com](https://www.docker.com))
    produces quarterly releases of the **Community Edition** (**CE**) Docker toolchain
    with a 4-month rolling support window. As of November 13, 2019, the **Enterprise
    Edition** (**EE**) of Docker is a Mirantis product; see [https://www.mirantis.com/company/press-center/company-news/mirantis-acquires-docker-enterprise/](https://www.mirantis.com/company/press-center/company-news/mirantis-acquires-docker-enterprise/)
    for more details. The EE version of Docker features longer support horizons; support
    for a variety of Linux, Windows, and macOS operating systems; and an expanded
    set of supported orchestration systems; see [https://docs.docker.com/ee/](https://docs.docker.com/ee/)
    for more information on Docker EE. Mirantis announced that it would end support
    for the  Docker Swarm container orchestrator, a part of Docker EE, in November
    2021, but retracted the retirement announcement in February 2020\. See [https://devclass.com/2020/02/25/mirantis-to-keep-docker-swarm-buzzing-around-pledges-new-features/](https://github.com/PacktPublishing/Docker-for-Developers)
    for more details.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 的社区版获得母公司有限时间的支持——专注于开发者的 Docker 公司（[https://www.docker.com](https://www.docker.com)）每季度发布
    **社区版**（**CE**）Docker 工具链，并提供 4 个月的滚动支持期。截至 2019 年 11 月 13 日，Docker 的 **企业版**（**EE**）已由
    Mirantis 生产；详情请见 [https://www.mirantis.com/company/press-center/company-news/mirantis-acquires-docker-enterprise/](https://www.mirantis.com/company/press-center/company-news/mirantis-acquires-docker-enterprise/)。Docker
    的 EE 版本提供更长的支持期；支持多种 Linux、Windows 和 macOS 操作系统；以及扩展的支持编排系统；有关 Docker EE 的更多信息，请参见
    [https://docs.docker.com/ee/](https://docs.docker.com/ee/)。Mirantis 宣布将于 2021
    年 11 月停止对 Docker EE 中的 Docker Swarm 容器编排工具的支持，但在 2020 年 2 月撤回了这一退役公告。更多详情请见 [https://devclass.com/2020/02/25/mirantis-to-keep-docker-swarm-buzzing-around-pledges-new-features/](https://github.com/PacktPublishing/Docker-for-Developers)。
- en: Kubernetes appears to be the winner of the Docker container orchestration wars,
    given this news, although Mirantis is still supporting Docker Swarm.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些消息，Kubernetes 似乎在 Docker 容器编排竞争中胜出，尽管 Mirantis 仍然在支持 Docker Swarm。
- en: Problems with single-host deployment
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单主机部署的问题
- en: Running Docker on a single host has major drawbacks, however. If that host suffers
    a major hardware or software failure or has impaired internet connectivity, your
    application will suffer decreased availability. Computers are fundamentally unreliable
    and even systems that have enterprise availability features, such as redundant
    disks, power supplies, and cooling features, can suffer failures due to environmental
    factors. If you do go down this route, it would be prudent to add some sort of
    external monitoring and ensure you have a reliable backup and restore routine
    to mitigate these risks. In order to avoid these risks, we need to consider more
    sophisticated approaches, such as relying on more container orchestration systems
    that a third party runs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在单一主机上运行 Docker 存在重大缺点。如果该主机发生重大硬件或软件故障，或者互联网连接受到影响，你的应用程序将面临可用性下降的风险。计算机本质上是不可靠的，即使是具有企业级可用性特性的系统，如冗余磁盘、电源和冷却功能，也可能因环境因素而发生故障。如果你走这条路，明智的做法是增加某种外部监控，并确保你有一个可靠的备份和恢复方案，以减轻这些风险。为了避免这些风险，我们需要考虑更复杂的方法，例如依赖第三方运行的更多容器编排系统。
- en: Managed cloud services
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管云服务
- en: 'In order to overcome the limitations of deploying applications on a single
    host, the easiest option to choose is to consider running your application using
    a managed cloud service that provides a container orchestration solution. Some
    of the most popular solutions include the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服在单一主机上部署应用程序的限制，最简单的选择是考虑使用提供容器编排解决方案的托管云服务来运行你的应用程序。一些最流行的解决方案包括以下内容：
- en: '**Google Kubernetes Engine** (**GKE**)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Kubernetes 引擎** (**GKE**)'
- en: Amazon Web Services **Elastic Beanstalk** (**EB**)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊网络服务 **弹性 Beanstalk** (**EB**)
- en: Amazon Web Services **Elastic Container Service** (**ECS**)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊网络服务 **弹性容器服务** (**ECS**)
- en: Amazon Web Services **Elastic Kubernetes Service** (**EKS**)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊网络服务 **弹性 Kubernetes 服务** (**EKS**)
- en: Microsoft **Azure Kubernetes Service** (**AKS**)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软 **Azure Kubernetes 服务** (**AKS**)
- en: DigitalOcean Docker Swarm
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DigitalOcean Docker Swarm
- en: Most of these services support running a set of Docker containers through Kubernetes
    ([https://kubernetes.io/](https://kubernetes.io/)), a project initiated by Google.
    For many years, Google has run a container orchestration system called Borg ([https://ai.google/research/pubs/pub43438](https://ai.google/research/pubs/pub43438)),
    and Google used that as inspiration to create a container orchestration system
    suitable for external use, which got named Kubernetes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务中的大多数支持通过 Kubernetes 运行一组 Docker 容器（[https://kubernetes.io/](https://kubernetes.io/)），这是一个由
    Google 发起的项目。多年来，Google 一直在运行名为 Borg 的容器编排系统（[https://ai.google/research/pubs/pub43438](https://ai.google/research/pubs/pub43438)），并且
    Google 以此为灵感，创建了一个适用于外部使用的容器编排系统，并命名为 Kubernetes。
- en: Some managed cloud services support Docker Swarm, while others (including AWS
    Elastic Beanstalk and AWS ECS) have their own custom orchestration systems.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一些托管云服务支持 Docker Swarm，而其他服务（包括 AWS Elastic Beanstalk 和 AWS ECS）则拥有自己定制的编排系统。
- en: All of the container orchestration systems allow software developers and system
    administrators to run a fleet of servers that execute multiple containers simultaneously,
    with policy-based mechanisms for distributing multiple container instances among
    the cluster. The container orchestrators are responsible for starting, monitoring,
    and moving container workloads from host to host as health checks and scaling
    constraints dictate. Since Google popularized running these container orchestration
    systems, many vendors have devised managed service offerings, including Google,
    Microsoft, Amazon Web Services, Digital Ocean, and others, as we will discuss
    in the following subsections.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所有容器编排系统都允许软件开发人员和系统管理员运行一组服务器，这些服务器能够同时执行多个容器，并通过基于策略的机制在集群中分配多个容器实例。容器编排器负责启动、监控并根据健康检查和扩展限制在主机之间移动容器工作负载。自从
    Google 推广了运行这些容器编排系统以来，许多供应商已经制定了托管服务，包括 Google、微软、亚马逊网络服务、Digital Ocean 等，接下来我们将在以下小节中讨论这些供应商。
- en: Google Kubernetes Engine
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google Kubernetes 引擎
- en: Google offers a system called **Google Kubernetes Engine** (**GKE**) ([https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/)),
    which offers a supported Kubernetes cluster running within the Google Cloud. If
    you use this service, you don't have to operate and upgrade the Kubernetes cluster
    master nodes yourself; you won't see the master nodes in the cloud console at
    all, as Google operates them directly. Furthermore, Google does not charge customers
    for running those Kubernetes master nodes. This option is appealing to developers
    because it has a way to run low-cost Kubernetes clusters. Having the support directly
    from Google to run Kubernetes workloads gives some customers additional confidence
    with this system.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Google 提供了一种名为 **Google Kubernetes Engine** (**GKE**) ([https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/))
    的系统，提供在 Google Cloud 内运行的支持的 Kubernetes 集群。如果你使用该服务，你无需自己操作和升级 Kubernetes 集群的主节点；你将根本看不到云控制台中的主节点，因为它们由
    Google 直接管理。此外，Google 不向客户收取运行这些 Kubernetes 主节点的费用。这个选项对开发人员具有吸引力，因为它提供了一种运行低成本
    Kubernetes 集群的方式。直接获得 Google 支持来运行 Kubernetes 工作负载，也让一些客户对这个系统充满信心。
- en: However, Google Cloud is not the first or even the second biggest cloud provider,
    and the rest of the services available from Google Cloud are not as varied as
    the services that Azure, AWS, or other cloud providers such as AliBaba offer.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Google Cloud 不是最大的云服务提供商，甚至连第二大都不是，而且 Google Cloud 提供的其余服务种类没有像 Azure、AWS
    或其他云提供商（如阿里巴巴）那样丰富。
- en: If you are invested in Google Cloud, or you want a low-cost environment to experiment
    with Kubernetes or take it to production and you are not tied to cloud services
    from other providers, evaluate GKE for running Docker and Kubernetes loads.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经投资 Google Cloud，或者你希望拥有一个低成本的环境来试验 Kubernetes 或将其投入生产，且不依赖其他云服务提供商的服务，可以考虑评估
    GKE 来运行 Docker 和 Kubernetes 负载。
- en: AWS Elastic Beanstalk
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk
- en: Amazon Web Services offers a way to run Docker applications through its platform-as-a-service
    offering, Elastic Beanstalk ([https://aws.amazon.com/elasticbeanstalk/](https://aws.amazon.com/elasticbeanstalk/)).
    You can run either single Docker containers or a setup that supports multiple
    Docker containers. Under the covers, Elastic Beanstalk uses ECS if you select
    multiple containers. With Elastic Beanstalk, developers use a command-line interface
    tool that simplifies deployment to multiple environments, in conjunction with
    some concise configuration files that hide some of the complexity of running an
    autoscaling cluster.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊 Web 服务通过其平台即服务产品 Elastic Beanstalk ([https://aws.amazon.com/elasticbeanstalk/](https://aws.amazon.com/elasticbeanstalk/))
    提供了一种运行 Docker 应用程序的方法。你可以运行单个 Docker 容器或支持多个 Docker 容器的设置。如果选择多个容器，Elastic Beanstalk
    会在后台使用 ECS。通过 Elastic Beanstalk，开发人员使用命令行工具简化部署到多个环境，同时结合一些简洁的配置文件，隐藏了运行自动扩展集群的一些复杂性。
- en: It is easier to set up Elastic Beanstalk than it is to set up either ECS or
    EKS, and developers needing an easy on-ramp to get to production with low overhead
    and minimal setup might consider using Elastic Beanstalk.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Elastic Beanstalk 比设置 ECS 或 EKS 更加简单，开发人员如果需要一个轻松的途径以低开销和最小化的配置进入生产环境，可能会考虑使用
    Elastic Beanstalk。
- en: AWS ECS and Fargate
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS ECS 和 Fargate
- en: 'AWS also offers a container orchestration system called ECS ([https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)).
    ECS has two basic modalities: one where containers run on a fleet of EC2 instances
    managed directly by the account owner, and one where AWS manages the nodes that
    containers run on, called Fargate ([https://aws.amazon.com/fargate/](https://aws.amazon.com/fargate/)).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 还提供了一种容器编排系统，叫做 ECS ([https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/))。ECS
    有两种基本模式：一种是容器运行在由账户拥有者直接管理的 EC2 实例群上，另一种是 AWS 管理容器运行的节点，称为 Fargate ([https://aws.amazon.com/fargate/](https://aws.amazon.com/fargate/))。
- en: Using ECS with either EC2 or Fargate can make sense if you are invested in AWS.
    While this path allows you to deploy containers without having to deal with Kubernetes
    or Docker Swarm, however, it is a proprietary system that only AWS supports, so
    you would have to do extra work to move your systems away from it compared to
    using Kubernetes or Docker Swarm as an orchestrator. It has its own learning curve
    and requires that you commit to running your Docker workloads on AWS because these
    interfaces are AWS-specific.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 AWS 上有投入，使用 ECS 与 EC2 或 Fargate 结合可能是合理的。虽然这种路径让你可以在不需要处理 Kubernetes 或
    Docker Swarm 的情况下部署容器，但它是一个只有 AWS 支持的专有系统，因此与使用 Kubernetes 或 Docker Swarm 作为编排器相比，你需要做额外的工作才能将系统迁移出去。它有自己的学习曲线，并且需要你承诺将
    Docker 工作负载运行在 AWS 上，因为这些接口是 AWS 特定的。
- en: AWS EKS
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS EKS
- en: Amazon Web Services (AWS) offers EKS, a managed Kubernetes service that offloads
    the maintenance and configuration of the Kubernetes master servers to AWS. EKS
    is the AWS equivalent of Google's GKE. It offers robust integration with the rest
    of the AWS services, and even though it is not as economical as the GKE service
    with respect to running the Kubernetes masters, the baseline costs are modest
    compared with the cost of running a busy application. AWS has generally had support
    available for Kubernetes through EKS since 2018 and has fixed enough of the initial
    rough spots that surfaced after its launch (such as a lack of support for some
    common autoscaling strategies) to make EKS a formidable Kubernetes distribution.
    In December 2019, AWS announced support for running Kubernetes containers managed
    by EKS through Fargate, melding the support AWS has for EKS with the managed container
    runtime and elastic and transparent provisioning that AWS provides.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊云服务（AWS）提供 EKS，这是一个托管的 Kubernetes 服务，将 Kubernetes 主服务器的维护和配置工作转交给 AWS。EKS
    是 AWS 的 Google GKE 等效服务。它与其他 AWS 服务有着强大的集成，尽管在运行 Kubernetes 主节点的成本上不如 GKE 服务经济，但与运行繁忙应用程序的成本相比，基准成本仍然是适中的。自
    2018 年以来，AWS 通常通过 EKS 支持 Kubernetes，并且已修复了启动时出现的一些初期问题（例如，缺乏对一些常见自动扩展策略的支持），使
    EKS 成为一个强大的 Kubernetes 发行版。2019 年 12 月，AWS 宣布通过 Fargate 运行由 EKS 管理的 Kubernetes
    容器的支持，将 AWS 对 EKS 的支持与其提供的托管容器运行时及弹性透明的资源供应结合在一起。
- en: AWS has the largest and most comprehensive set of services available from a
    cloud provider as of early 2020\. If you have an investment in AWS, and you want
    a well-trod path that many people have traveled, consider using AWS EKS as your
    Kubernetes master environment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 2020 年初，AWS 提供了来自云服务提供商的最大和最全面的服务。如果你在 AWS 上有投资，并且希望走一条许多人已经走过的熟悉道路，可以考虑使用
    AWS EKS 作为你的 Kubernetes 主环境。
- en: Microsoft Azure Kubernetes Service
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft Azure Kubernetes 服务
- en: Microsoft Azure provides a robust container deployment service in **Azure Kubernetes
    Service** (**AKS**). This option may be particularly appealing if you or your
    company have a large investment in Microsoft platform tooling, including Windows,
    Visual Studio Code, or Active Directory. Microsoft claims to have robust support
    for all these concerns. The developer tooling from Microsoft also tends to have
    a gentler learning curve than the tools from some other organizations. However,
    if you rely really heavily on elements of the Microsoft stack, it may be more
    difficult to migrate to other solutions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 提供强大的容器部署服务——**Azure Kubernetes 服务**（**AKS**）。如果你或你的公司已经在 Microsoft
    平台工具上进行了大量投资，包括 Windows、Visual Studio Code 或 Active Directory，这个选项可能特别有吸引力。Microsoft
    声称在这些方面提供了强大的支持。微软的开发工具通常比一些其他公司的工具有更平缓的学习曲线。然而，如果你过于依赖 Microsoft 栈中的元素，可能会更难迁移到其他解决方案。
- en: If you are working for a Microsoft shop, or you want an easy on-ramp to Kubernetes
    that is tightly integrated into Visual Studio Code, consider AKS.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个 Microsoft 环境中工作，或者你想要一个紧密集成到 Visual Studio Code 的 Kubernetes 简单入门，可以考虑使用
    AKS。
- en: Digital Ocean Docker Swarm
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Digital Ocean Docker Swarm
- en: Digital Ocean provides support for running a fleet of containers using Docker
    Swarm, a relatively simple container orchestration system. This technology has
    a reputation for being easier to deploy than deploying containers on Kubernetes
    or even AWS ECS. The Docker tooling has support for deploying to Docker Swarm
    out of the box.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Digital Ocean 提供通过 Docker Swarm 运行一组容器的支持，这是一个相对简单的容器编排系统。与在 Kubernetes 或甚至
    AWS ECS 上部署容器相比，这项技术以其易于部署而闻名。Docker 工具本身就支持直接部署到 Docker Swarm。
- en: However, after the Mirantis acquisition, Docker Swarm's support status was deprecated
    and then revived after customers demanded continuing support. Given the wavering
    commitment from the main vendor supporting it, you should carefully consider whether
    you should field new applications using Docker Swarm.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 Mirantis 收购后，Docker Swarm 的支持状态被弃用，随后在客户要求持续支持后复兴。鉴于主要供应商对其支持的态度摇摆不定，你应仔细考虑是否应该使用
    Docker Swarm 来部署新应用程序。
- en: Now that we have seen what the alternatives entail for running Docker applications
    in production, let's examine the set of alternatives for running applications
    using Docker and Kubernetes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了在生产环境中运行 Docker 应用程序的替代方案，接下来让我们看看使用 Docker 和 Kubernetes 运行应用程序的替代方案。
- en: Running your own Kubernetes cluster – from bare metal to OpenStack
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行你自己的 Kubernetes 集群 —— 从裸金属到 OpenStack
- en: 'If you must run your application on-premises, in a data center, or if you have
    the need to run across multiple cloud computing providers, you may need to run
    your own Kubernetes cluster. Once you learn more about the benefits and drawbacks
    of running Docker and Kubernetes either on-premises or in a hybrid cloud, you
    should be able to know when it is an appropriate solution. While these scenarios
    are more complex than using one of the managed services, they can provide different
    benefits, listed as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你必须在本地、数据中心运行应用程序，或者需要跨多个云计算提供商运行，你可能需要运行自己的 Kubernetes 集群。一旦你了解了在本地或混合云环境中运行
    Docker 和 Kubernetes 的利弊，你应该能够知道何时是适合的解决方案。虽然这些场景比使用托管服务更复杂，但它们可以提供不同的好处，列举如下：
- en: Upgrading cluster software (or not) on your own schedule, with full control
    of what versions you run today and tomorrow. Cloud vendors may lag in what versions
    are supported, or deprecate versions in ways that can impose operational risk.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照自己的时间表升级集群软件（或不升级），完全控制今天和明天运行的版本。云服务商可能会滞后于支持的版本，或者通过弃用某些版本带来操作风险。
- en: Using one of the many mature Kubernetes provisioning solutions, such as Kops,
    that  facilitate setting up k8s clusters on AWS EC2.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用许多成熟的 Kubernetes 配置解决方案之一，例如 Kops，这些解决方案有助于在 AWS EC2 上设置 k8s 集群。
- en: Operating a hybrid cloud solution across a mixture of data center and cloud
    computing environments. While some cloud provider solutions, such as Google Cloud
    Anthos or Azure Arc, can support hybrid environments, many do not.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨数据中心和云计算环境操作混合云解决方案。虽然一些云服务提供商的解决方案，如 Google Cloud Anthos 或 Azure Arc，支持混合环境，但很多并不支持。
- en: Running high-performance Kubernetes clusters on bare metal, without the overhead
    of a hypervisor.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在裸金属上运行高性能 Kubernetes 集群，没有虚拟机管理程序的开销。
- en: Running on platforms not supported by major cloud vendors, such as running Docker
    and Kubernetes on a cluster of Raspberry Pi computers.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主要云服务提供商不支持的平台上运行，例如在一群树莓派计算机上运行 Docker 和 Kubernetes。
- en: Having complete control over the supporting infrastructure of your cluster integrating
    with a platform that uses Kubernetes as a starting point, such as the OpenShift
    platform.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全控制集群的支持基础设施，并与使用 Kubernetes 作为起点的平台集成，例如 OpenShift 平台。
- en: Running on a private cloud solution, such as OpenStack or VMware Tanzu (formerly
    known as VMware Enterprise PKS).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在私有云解决方案上运行，例如 OpenStack 或 VMware Tanzu（前身为 VMware Enterprise PKS）。
- en: Running Docker containers as part of a comprehensive computing platform that
    has other major features and capabilities beyond vanilla Kubernetes, such as Red
    Hat OpenShift or Rancher.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Docker 容器作为一个综合计算平台的一部分运行，该平台拥有超出原生 Kubernetes 的其他主要特性和功能，例如 Red Hat OpenShift
    或 Rancher。
- en: In practice, running any of these solutions is more complex than relying on
    either a single-host deployment of Docker or a vendor-managed software-as-a-service
    Kubernetes clustering solution.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，运行这些解决方案要比依赖单主机部署 Docker 或供应商管理的软件即服务 Kubernetes 集群解决方案更为复杂。
- en: Deciding on the right Docker production setup
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定正确的 Docker 生产环境设置
- en: 'Because of the bewildering number of choices, picking the right path to deploy
    your application in production is daunting. You may need to weigh many factors,
    including the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可选择的选项令人眼花缭乱，选择正确的路径将应用程序部署到生产环境中是令人生畏的。你可能需要权衡许多因素，包括以下内容：
- en: '**Setup**: How hard is it to go from local development to production?'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置**：从本地开发到生产环境的难度如何？'
- en: '**Features**: Deployment, testing, monitoring, alerting, and cost reporting.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特性**：部署、测试、监控、警报和成本报告。'
- en: '**Cost**: Initial and ongoing monthly charges.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本**：初始费用和持续的月度费用。'
- en: '**Support**: Is support easily available either from vendors or from the community?'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持**：是否可以轻松获得来自供应商或社区的支持？'
- en: '**Elasticity**: Can it scale out as the load increases, with automatic or manual
    controls?'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性**：随着负载增加，是否能扩展，并具备自动或手动控制？'
- en: '**Availability**: Can the setup survive the loss of services, hosts, and networks?'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：该设置能否在丢失服务、主机或网络时仍然存活？'
- en: '**Stickiness**: How hard will it be to change the deployment strategy?'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粘性**：更改部署策略有多困难？'
- en: Running Docker on a single host is inexpensive and easy to set up but has poor
    scaling and availability characteristics. All the major cloud orchestration services
    that support Kubernetes are well-balanced in terms of features and scaling and
    availability characteristics, but they are more complex to set up and operate.
    The non-Kubernetes options are stickier than the Kubernetes options. Running your
    own clusters either in the cloud, on bare-metal servers, or in a hybrid cloud
    gives you enormous flexibility at the cost of increased complexity and support
    burden.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在单一主机上运行 Docker 成本低，设置简单，但在扩展性和可用性方面表现较差。所有主要的支持 Kubernetes 的云编排服务在功能、扩展性和可用性方面都表现均衡，但它们的设置和操作更为复杂。非
    Kubernetes 选项比 Kubernetes 选项更加粘性。无论是在云中、裸金属服务器上，还是在混合云环境中运行你自己的集群，虽然可以提供巨大的灵活性，但也增加了复杂性和支持负担。
- en: Learning the relative strengths and weaknesses of these systems will help you
    judge the right set of technologies to use to deploy your applications. The following
    matrix shows my snap judgements on a scale of 1 to 5, where 5 is the best, of
    how well the different technology options compare.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 学习这些系统的相对优缺点，将帮助你判断合适的技术组合，用于部署你的应用程序。以下矩阵展示了我对不同技术选项的快速判断，评分范围为 1 到 5，其中 5
    分表示最好。
- en: '![](img/B11641_Table_5.1.jpg)![](img/B11641_Table_5.1a.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B11641_Table_5.1.jpg)![](img/B11641_Table_5.1a.jpg)'
- en: You can use this matrix to help rank alternative solutions. By comparing two
    or more of the choices, you can get a better idea of what sort of solution would
    be appropriate. In order to evaluate this matrix, you could build an evaluation
    table where you compare alternatives. If you rank the priorities with a number,
    where 5 is the highest priority and 1 is the lowest priority, you can multiply
    the priority by the scores in Table 1 in order to get a scaled score.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这个矩阵来帮助对替代方案进行排名。通过比较两个或更多选择，你可以更好地了解哪种解决方案更适合。为了评估这个矩阵，你可以建立一个评估表格，将各个替代方案进行对比。如果你用数字对优先级进行排名，其中
    5 为最高优先级，1 为最低优先级，你可以将优先级与表 1 中的得分相乘，从而得到一个加权分数。
- en: The following example matrix has priorities that emphasize ease of setup, minimization
    of cost, and minimization of stickiness, while disregarding robustness in the
    form of high availability or elasticity under load. That set of priorities matches
    up with the priorities many real-world applications have when they first launch
    – the struggle developers face is often to get things up and running quickly,
    and it is OK to compromise on the other factors. The scaled scores in the Alternative
    columns represent the result of multiplying the priority versus the Production
    Alternatives Rank table for each alternative.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下矩阵展示了强调设置简便、成本最小化以及粘性最小化的优先级，同时忽视了高可用性或负载下弹性这类鲁棒性的因素。这一优先级设置与许多现实世界应用程序在初期启动时的优先需求一致——开发人员面临的挑战往往是快速启动应用程序，并且可以在其他因素上做一些妥协。替代方案列中的评分代表将优先级与生产替代方案排名表中的每个替代方案得分相乘的结果。
- en: '![](img/B11641_Table_5.2.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B11641_Table_5.2.jpg)'
- en: In this case, alternative 1, Docker on a single host, has the highest-ranked
    scaled score, 78 versus 74\. The factors that are important, setup, cost, and
    stickiness, combine with the weights to push it above the other alternative. Given
    this score, you should consider using that deployment alternative. Consider though
    that if the availability or elasticity priority was even one notch higher, the
    other alternative, Google Cloud GKE, would have been the higher-ranking service.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，替代方案 1，Docker 在单一主机上运行，具有最高的评分，78 分对比 74 分。重要的因素——设置、成本和粘性，结合加权值使其超越了其他替代方案。考虑到这一评分，你应该考虑使用该部署方案。然而，如果优先考虑可用性或弹性，哪怕只高一个等级，另一个替代方案——Google
    Cloud GKE，可能会成为排名更高的服务。
- en: You may find that your needs are served by a hybrid solution also, where more
    than one of the solutions is appropriate and necessary to solve your problems.
    For example, you might find that your everyday demands tilt toward an on-premises
    cluster, but peak demand might require scaling out into the cloud.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现一个混合解决方案也能满足你的需求，其中多个解决方案同时适用且必要，以解决你的问题。例如，你可能发现日常需求偏向于本地集群，但高峰需求可能需要扩展到云端。
- en: Exercise – join the ShipIt Clicker team
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习——加入ShipIt Clicker团队
- en: Let's pretend that you have just joined the ShipIt Clicker development team.
    Other people on the team have created the basic design for the game (see the game
    design document in [https://github.com/PacktPublishing/Docker-for-Developers/blob/master/chapter5/ShipIt_Clicker-spec.md](https://github.com/PacktPublishing/Docker-for-Developers/blob/master/chapter5/ShipIt_Clicker-spec.md))
    and written a prototype that has only the bare minimum required functionality
    to build, test, and package the application with Docker.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你刚刚加入了ShipIt Clicker开发团队。团队中的其他成员已经创建了游戏的基本设计（参见[游戏设计文档](https://github.com/PacktPublishing/Docker-for-Developers/blob/master/chapter5/ShipIt_Clicker-spec.md)），并编写了一个原型，只具备构建、测试和使用Docker打包应用程序所需的最低功能。
- en: The rest of the team might be experts in design, or frontend or backend development,
    but they are not sure how they should proceed regarding deploying to production.
    At this point, you have more experience using Docker than any of the other developers
    on the team. The Dockerfile and `docker-compose.yml` files they have produced
    are functioning.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 其他团队成员可能是设计、前端或后端开发方面的专家，但他们不确定如何继续进行生产环境部署。此时，你在Docker的使用经验上超过了团队中的其他开发者。他们编写的Dockerfile和`docker-compose.yml`文件是有效的。
- en: Get the ShipIt Clicker—the version made for this chapter—running on your local
    workstation to better understand how it is put together.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地工作站上运行专为本章制作的ShipIt Clicker，帮助更好地理解它是如何搭建起来的。
- en: 'Run `docker-compose up` in order to start the containers on your local machine.
    This will allow you to evaluate the deployment alternatives and experiment with
    changes that will prepare the application for production use. You will see output
    similar to the following; we will explain in detail what each group of lines in
    the output means:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`docker-compose up`命令，以便在本地机器上启动容器。这将使你能够评估部署选项，并实验为生产环境使用而准备应用程序的更改。你将看到类似以下的输出；我们将详细解释输出中每组行的含义：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding output shows Docker using the `ubuntu:bionic` image, and then
    the installation of the operating system packages.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示Docker正在使用`ubuntu:bionic`镜像，然后安装操作系统包。
- en: 'Steps 3-5 of the Dockerfile prepare the container image for the application
    installation by creating essential directories and copying the package configuration
    file for node modules into place:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile的第3-5步通过创建必要的目录并将节点模块的包配置文件复制到适当位置，准备了应用程序安装的容器镜像：
- en: '[PRE1]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, the Dockerfile installs the node modules:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Dockerfile安装了节点模块：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After this, the Dockerfile copies more configuration files into the container
    image, as well as copying the sources for the application itself into place within
    the container under `/app`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之后，Dockerfile会将更多的配置文件复制到容器镜像中，并将应用程序的源代码复制到容器中的`/app`目录下：
- en: '[PRE3]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, the Dockerfile tells Docker what port to expose and how to run the
    application:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Dockerfile告诉Docker暴露哪个端口并如何运行应用程序：
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At this point, the Docker container is built, and Docker applies the `latest`
    tag:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，Docker容器已经构建完成，并且Docker应用了`latest`标签：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The power of using `docker-compose up` is on display next, as the one command
    we ran at the beginning not only builds the Docker container for our application,
    but it also starts all the containers together. When it starts the containers,
    it starts both the application container, and the Redis container. The Redis container
    emits some detailed output as part of its startup. The output of our `docker-compose
    up` command continues with container startup messages:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose up`的强大功能接下来将展示出来，因为我们最初运行的这个命令不仅构建了应用程序的Docker容器，还同时启动了所有容器。当它启动容器时，会启动应用程序容器和Redis容器。Redis容器在启动过程中会输出一些详细信息。我们的`docker-compose
    up`命令输出继续显示容器启动的相关信息：'
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that Redis is not entirely happy being run as part of a Docker container
    that uses a Linux kernel that is not tuned explicitly for it. This is an example
    where using Docker might not yield optimal results, but results that are good
    enough anyway:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Redis 在作为 Docker 容器的一部分运行时，并不完全适应没有专门为其调优的 Linux 内核。这是一个使用 Docker 可能无法获得最佳结果的例子，但结果足够好：
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can see that Redis is now ready to go. Next, `docker-compose` starts up
    the ShipIt Clicker container, using the command given in the preceding `ENTRYPOINT
    DEBUG` output (`''shipit-clicker:*'' npm run dev`):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到 Redis 现在已经准备好运行。接下来，`docker-compose` 启动 ShipIt Clicker 容器，使用前面 `ENTRYPOINT
    DEBUG` 输出中给出的命令（`'shipit-clicker:*' npm run dev`）：
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you have done this, you can play the game by going to `http://localhost:3005/`
    in a web browser. In the following figure, we see the output of the main menu
    of the game, with a link to the API documentation at `http://localhost:3005/api-explorer/`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，你就可以通过浏览器访问 `http://localhost:3005/` 来玩游戏。在下图中，我们可以看到游戏主菜单的输出，并且有一个指向 API
    文档的链接 `http://localhost:3005/api-explorer/`：
- en: '![Figure 5.1 – ShipIt Clicker game main menu](img/B11641_05_001.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – ShipIt Clicker 游戏主菜单](img/B11641_05_001.jpg)'
- en: Figure 5.1 – ShipIt Clicker game main menu
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – ShipIt Clicker 游戏主菜单
- en: Once you have the application running and have explored it, you can learn how
    to deploy it in different ways.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你使应用运行起来并探索它，你就可以学习如何以不同的方式部署它。
- en: Exercise – choosing from reasonable deployment alternatives
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 – 从合理的部署替代方案中选择
- en: The setup in this chapter works to get the game running on a local development
    environment. However, the setup has some issues that might cause problems for
    a production deployment.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的设置用于在本地开发环境中运行游戏。然而，该设置存在一些可能会导致生产部署问题的问题。
- en: 'The initial audiences for the game in this prototype stage are as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 该游戏在原型阶段的初步受众如下：
- en: Your fellow game developers and the management team of the company
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的游戏开发同事和公司管理团队
- en: A globally distributed team of enthusiasts who signed up for an Alpha program
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个全球分布的团队，由报名参加 Alpha 项目的热心人组成
- en: A professional cadre of testers twelve time zones away from where you live
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个位于离你生活的地方十二个时区远的专业测试人员团队
- en: Management wants to get the prototype available for the alpha tester volunteers
    and the professional testers as soon as possible, but wants to know what the options
    and costs will be to support a more robust deployment environment that can scale
    if the game goes viral or the investors approve an ad campaign to boost subscribers.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 管理层希望尽快让原型可以供 Alpha 测试志愿者和专业测试人员使用，但他们想知道支持更强大的部署环境的选项和成本，以便在游戏爆红或投资者批准广告活动以提升订阅量时能够扩展。
- en: 'Your tasks, given what you know about Docker and the alternatives for deploying
    to production, are as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是，根据你对 Docker 以及生产环境部署替代方案的了解，执行以下任务：
- en: Advise management on what the first production deployment should be, after constructing
    a *Production Decision Alternatives* table.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向管理层建议，首个生产部署应该是什么，在构建*生产决策替代方案*表格后。
- en: Advise management on what one or more reasonable alternatives to the first deployment
    would be, which would increase elasticity and availability.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向管理层建议，首个部署的一个或多个合理替代方案，这些方案能提高弹性和可用性。
- en: Build a spreadsheet model of the one-time and recurring costs incurred over
    the first year for each option, after consulting current price lists from vendors.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据供应商的最新价格清单，构建一个电子表格模型，展示每个选项在第一年内产生的一次性和持续性成本。
- en: Solution
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: Compare your decision matrix to the preceding example in the *Deciding on the
    right Docker production setup* section and see whether your result differs. Show
    the spreadsheet model of costs and your decision matrix to a colleague and ask
    them what they might choose and whether they agree with your decision.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的决策矩阵与*决定正确的 Docker 生产环境设置*章节中的示例进行比较，看看你的结果是否有所不同。将成本的电子表格模型和你的决策矩阵展示给同事，询问他们可能会选择什么，并询问他们是否同意你的决定。
- en: Exercise – Dockerfile and docker-compose.yml evaluation
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 – 评估 Dockerfile 和 docker-compose.yml
- en: 'Management wants you to stretch a little and help smooth the way for a production
    deployment. They want you to identify areas for improvement:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 管理层希望你能多做一些工作，帮助平滑生产部署的路径。它们希望你能识别需要改进的领域：
- en: Are the choices made in the Dockerfile and `docker-compose.yml` files reasonable
    for this application?
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Dockerfile` 和 `docker-compose.yml` 文件中做出的选择对于该应用来说是否合理？
- en: What choices could be made to better prepare the application for a production
    deployment?
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了更好地准备应用程序进行生产部署，应该做出哪些选择？
- en: What effect does the choice of a commodity operating system distribution have
    when choosing a container base to use in `FROM`?
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择商品操作系统发行版时，在 `FROM` 中选择容器基础镜像会有什么影响？
- en: Solution
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: Look at the versions of the Dockerfile and `docker-compose.yml` files in [https://github.com/PacktPublishing/Docker-for-Developers/tree/master/chapter6](https://github.com/PacktPublishing/Docker-for-Developers/tree/master/chapter6)
    and see how your recommendations line up. We will explore this in more detail
    in [*Chapter 6*](B11641_06_Final_NM_ePub.xhtml#_idTextAnchor102), *Deploying Applications
    with Docker Compose*.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[https://github.com/PacktPublishing/Docker-for-Developers/tree/master/chapter6](https://github.com/PacktPublishing/Docker-for-Developers/tree/master/chapter6)中的
    Dockerfile 和 `docker-compose.yml` 文件版本，看看你的建议如何与之对接。我们将在[*第6章*](B11641_06_Final_NM_ePub.xhtml#_idTextAnchor102)《使用
    Docker Compose 部署应用程序》中详细探讨这一点。
- en: Now that we have learned more about the alternatives for deploying Docker containers
    into production, and done some practical exercises, let's review what we have
    learned.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了更多关于将 Docker 容器部署到生产环境的替代方案，并完成了一些实践练习，让我们回顾一下我们学到的内容。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the alternatives for deploying your Docker-based
    application to production. We learned that the many choices involve trade-offs,
    and how to build the smallest viable production environment. We learned how to
    choose between different cloud providers and their managed container runtimes,
    and how to articulate the benefits of running Docker either on-premises or in
    a hybrid cloud. We also learned how to decide on a production path for deploying
    Docker containers given competing objectives.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了将基于 Docker 的应用程序部署到生产环境的不同替代方案。我们了解到，许多选择涉及权衡，并且学习了如何构建最小可行的生产环境。我们学习了如何在不同的云服务提供商及其托管的容器运行时之间做出选择，并且了解了在本地或混合云中运行
    Docker 的好处。我们还学习了如何根据不同目标选择合适的生产路径来部署 Docker 容器。
- en: Given these lessons, you can apply what you have learned to create a real production
    deployment. Having enough context about the technology alternatives is very important
    – because different strategies offer different advantages and disadvantages. Your
    company might need a super-robust autoscaling deployment in the future but might
    only need something that works today.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些经验教训，你可以应用所学内容来创建一个实际的生产部署。了解技术替代方案的足够背景非常重要——因为不同的策略提供了不同的优缺点。你的公司可能在未来需要一个超级强大的自动扩展部署，但今天可能只需要一个能正常工作的方案。
- en: In the next chapter, we will show how you can create a robust single-host Docker
    production deployment while maintaining the ability to develop locally.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将展示如何创建一个健壮的单主机 Docker 生产部署，同时保持本地开发的能力。
