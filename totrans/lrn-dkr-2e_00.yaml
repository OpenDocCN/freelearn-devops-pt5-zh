- en: Publishing Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布镜像
- en: In the previous chapter, you learned how to build Docker images. The next logical
    step is to publish these images in a public repository for public discovery and
    consumption. So, this chapter focuses on publishing images on Docker Hub, and
    how to get the most out of Docker Hub. We will create a new Docker image, using
    the `commit` command and a `Dockerfile`, build on it, and push it to Docker Hub.
    The concept of a Docker trusted repository will be discussed. This Docker trusted
    repository is created from GitHub or Bitbucket, and it can then be integrated
    with Docker Hub to automatically build images as a result of updates in the repository.
    This repository on GitHub is used to store the `Dockerfile`, which was previously
    created. Also, we will illustrate how worldwide organizations can enable their
    teams of developers to craft and contribute a variety of Docker images to be deposited
    in Docker Hub. The Docker Hub REST APIs can be used for user management and the
    manipulation of the repository programmatically.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何构建 Docker 镜像。下一步就是将这些镜像发布到公共仓库，供公众发现和使用。因此，本章将重点介绍如何在 Docker Hub
    上发布镜像，以及如何充分利用 Docker Hub。我们将创建一个新的 Docker 镜像，使用`commit`命令和`Dockerfile`进行构建，并将其推送到
    Docker Hub。本章还会讨论 Docker 可信仓库的概念。这个 Docker 可信仓库是从 GitHub 或 Bitbucket 创建的，可以与 Docker
    Hub 集成，自动构建镜像，从而随着仓库更新而生成镜像。这个 GitHub 上的仓库用于存储之前创建的`Dockerfile`。此外，我们将展示全球各地的组织如何使其开发团队能够设计和贡献多种
    Docker 镜像，并将它们存储在 Docker Hub 中。Docker Hub 的 REST API 可以用于用户管理和通过编程方式操作仓库。
- en: 'The following topics are covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: Understanding Docker Hub
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Docker Hub
- en: Pushing images to Docker Hub
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将镜像推送到 Docker Hub
- en: Automatic building of images
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像的自动构建
- en: Private repositories on Docker Hub
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub 上的私有仓库
- en: Creating organizations on Docker Hub
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Docker Hub 上创建组织
- en: The Docker Hub REST API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub REST API
- en: Understanding Docker Hub
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 Docker Hub
- en: Docker Hub is the central place used for keeping the Docker images either in
    a public or private repository. Docker Hub provides features, such as a repository
    for Docker images, user authentications, automated image builds, integration with
    GitHub or Bitbucket, and managing organizations and groups. The Docker Registry
    component of Docker Hub manages the repository for Docker images. Also, you can
    protect your repositories using Docker Security Scanning, which is free as of
    now. This feature was first enabled in IBM container repositories.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 是用于存储 Docker 镜像的中心平台，无论是公共仓库还是私有仓库。Docker Hub 提供了诸如 Docker 镜像仓库、用户认证、自动构建镜像、与
    GitHub 或 Bitbucket 集成、管理组织和小组等功能。Docker Hub 的 Docker Registry 组件负责管理 Docker 镜像仓库。此外，你还可以使用
    Docker 安全扫描来保护你的仓库，目前这一功能是免费的。此功能首次在 IBM 容器仓库中启用。
- en: 'Docker Registry is a storage system used to store images. Automated build is
    a feature of Docker Hub, which is not open source yet at the time of writing this
    book. The following diagram shows the typical features:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Registry 是用于存储镜像的存储系统。自动构建是 Docker Hub 的一个功能，但在撰写本书时，它尚未开源。下图展示了典型功能：
- en: '![](img/image_04_001.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_001.jpg)'
- en: 'In order to work with Docker Hub, you have to register with Docker Hub, and
    create an account using the link available at [https://hub.docker.com/](https://hub.docker.com/).
    You can update the Docker Hub ID, e-mail address, and password fields, as shown
    in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Docker Hub，你需要注册并创建一个 Docker Hub 账户，注册链接为 [https://hub.docker.com/](https://hub.docker.com/)。你可以更新
    Docker Hub ID、电子邮件地址和密码字段，如下图所示：
- en: '![](img/image_04_002.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_002.jpg)'
- en: 'After completing the sign up process, you need to complete the verification
    received in an e-mail. After the e-mail verification is completed, you will see
    something similar to the following screenshot when you log in to Docker Hub:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完成注册流程后，你需要完成通过电子邮件收到的验证。完成电子邮件验证后，你在登录 Docker Hub 时将看到类似以下的截图：
- en: '![](img/image_04_003.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_003.jpg)'
- en: 'The creation of an account in Docker Hub has completed successfully, and now
    you can log in to your Docker Hub account from [https://hub.docker.com/login/](https://hub.docker.com/login/),
    as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 账户的创建已成功完成，现在你可以从[https://hub.docker.com/login/](https://hub.docker.com/login/)登录到你的
    Docker Hub 账户，如下图所示：
- en: '![](img/image_04_004.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_004.jpg)'
- en: 'Docker Hub also supports command-line access to Docker Hub using an Ubuntu
    Terminal:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 还支持使用 Ubuntu 终端访问 Docker Hub 的命令行：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Log in with your Docker ID to push and pull images from Docker Hub. If you
    don''t have a Docker ID, head over to [https://hub.docker.com](https://hub.docker.com)
    to create one. Enter your username and password in the Terminal:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的 Docker ID 登录，以便从 Docker Hub 推送和拉取镜像。如果你没有 Docker ID，可以访问[https://hub.docker.com](https://hub.docker.com)创建一个。然后在终端中输入你的用户名和密码：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After a successful login, the output is as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，输出如下：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can browse the available images in Docker Hub at [https://hub.docker.com/explore/](https://hub.docker.com/explore/),
    as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Docker Hub 上浏览可用的镜像，网址是[https://hub.docker.com/explore/](https://hub.docker.com/explore/)：
- en: '![](img/image_04_005.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_005.jpg)'
- en: 'Also, you can see your settings, update your profile, and get details of supported
    communities, such as Twitter, Stack Overflow, #IRC, Google Groups, and GitHub.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以查看你的设置，更新个人资料，并获取支持社区的详细信息，如 Twitter、Stack Overflow、#IRC、Google Groups 和
    GitHub。
- en: Pushing images to Docker Hub
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将镜像推送到 Docker Hub
- en: 'Here, we will create a Docker image on the local machine and push this image
    to Docker Hub. You need to perform the following steps in this section:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在本地机器上创建一个 Docker 镜像，并将其推送到 Docker Hub。你需要执行以下步骤：
- en: 'Create a Docker image on the local machine by doing one of the following:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地机器上创建 Docker 镜像，方法如下：
- en: Using the `docker commit` subcommand
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker commit`子命令
- en: Using the `docker commit` subcommand with `Dockerfile`
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker commit`子命令和`Dockerfile`
- en: Pushing this created image to Docker Hub
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个创建的镜像推送到 Docker Hub
- en: Deleting the image from Docker Hub
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Docker Hub 删除镜像
- en: We will use the `ubuntu` base image, run the container, add a new directory
    and a new file, and then create a new image. In [Chapter 3](../Text/Ch03.xhtml),
    *Building Images*, we saw how to create a Docker image using `Dockerfile`. You
    may refer to that chapter to check for details of the `Dockerfile` syntax.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ubuntu`基础镜像，运行容器，添加一个新目录和一个新文件，然后创建一个新镜像。在[第 3 章](../Text/Ch03.xhtml)《构建镜像》中，我们学习了如何使用`Dockerfile`创建
    Docker 镜像。你可以参考该章节，查看`Dockerfile`语法的详细信息。
- en: 'We will run the container with the `containerforhub` name from the base `ubuntu`
    image, as shown in the following Terminal code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ubuntu`基础镜像，以`containerforhub`为容器名运行容器，如下面的终端代码所示：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we''ll create a new directory and file in the `containerforhub` container.
    We will also update the new file with some sample text to test later:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`containerforhub`容器中创建一个新的目录和文件。我们还将更新这个新文件，添加一些示例文本，以便稍后进行测试：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's build the new image with the `docker commit` command from the container,
    which has just been created.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`docker commit`命令从刚刚创建的容器中构建新镜像。
- en: 'The `commit` command will be executed from the host machine, from where the
    container is running, and not from inside this container:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`commit`命令将从主机机器上执行，而不是从容器内部执行：'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should use your own username of Docker Hub in place of `vinoddandy` to create
    the image.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该用你自己的 Docker Hub 用户名替代`vinoddandy`，以创建镜像。
- en: 'Now, we have a new Docker image available on the local machine with the `vinoddandy/imageforhub2`
    name. At this point, a new image with `mynewdir` and `mynewfile` is created locally:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在本地机器上有一个新的 Docker 镜像，名称为`vinoddandy/imageforhub2`。此时，一个包含`mynewdir`和`mynewfile`的新镜像已经在本地创建：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will log in to Docker Hub using the `sudo docker login` command, as discussed
    earlier in this chapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`sudo docker login`命令登录 Docker Hub，正如本章之前所讨论的。
- en: 'Let''s push this image to Docker Hub from the host machine:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从主机机器推送这个镜像到 Docker Hub：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, we'll login to Docker Hub and verify the image in Repositories.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将登录 Docker Hub，并在 Repositories 中验证该镜像。
- en: 'To test the image from Docker Hub, let''s remove this image from the local
    machine. To remove the image, first we need to stop the container and then delete
    the container:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试来自 Docker Hub 的镜像，让我们从本地机器中删除这个镜像。首先，我们需要停止容器，然后删除容器：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will also delete the `vinoddandy/imageforhub2` image:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将删除`vinoddandy/imageforhub2`镜像：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will pull the newly created image from Docker Hub, and run the new container
    on the local machine:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Docker Hub 拉取新创建的镜像，并在本地机器上运行新容器：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So, we have pulled the latest image from Docker Hub and created the container
    with the new `vinoddandy/imageforhub2` image. Make a note that the `Unable to
    find image 'vinoddandy/imageforhub2:latest' locally` message confirms that the
    image is downloaded from the remote repository of Docker Hub.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们已经从 Docker Hub 拉取了最新镜像，并使用新创建的`vinoddandy/imageforhub2`镜像创建了容器。请注意，`Unable
    to find image 'vinoddandy/imageforhub2:latest' locally`消息确认镜像是从 Docker Hub 的远程仓库下载的。
- en: The text in `mynewfile` verifies that it is the same image that was created
    earlier.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`mynewfile`中的文本验证了它与之前创建的镜像相同。'
- en: 'Finally, we will delete the image from Docker Hub at [https://hub.docker.com/r/vinoddandy/imageforhub2/](https://hub.docker.com/r/vinoddandy/imageforhub/)
    and then click on Settings and then Delete, as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在[https://hub.docker.com/r/vinoddandy/imageforhub2/](https://hub.docker.com/r/vinoddandy/imageforhub/)从Docker
    Hub删除该镜像，然后点击“设置”，再点击“删除”，如以下截图所示：
- en: '![](img/image_04_006.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_006.jpg)'
- en: We'll again create this image, but now using the `Dockerfile` process. So, let's
    create the Docker image using the `Dockerfile` concept explained in [Chapter 3](../Text/Ch03.xhtml),
    *Building Images*, and push this image to Docker Hub.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次创建此镜像，但这次使用`Dockerfile`过程。所以，让我们使用在[第3章](../Text/Ch03.xhtml)《构建镜像》中解释的`Dockerfile`概念来创建Docker镜像，并将该镜像推送到Docker
    Hub。
- en: 'The `Dockerfile` on the local machine is as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本地机器上的`Dockerfile`如下所示：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we''ll build the image locally using the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用以下命令在本地构建镜像：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We''ll run the container using this image, as shown here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用此镜像运行容器，如下所示：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This text in `mynewdir` confirms that the new image is built properly with a
    new directory and a new file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`mynewdir`中的文本确认新镜像已经正确构建，并且包含一个新的目录和新文件。'
- en: 'Repeat the login process in Docker Hub and push this newly created image:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 重复在Docker Hub中的登录过程并推送这个新创建的镜像：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we can verify the availability of the image on Docker Hub:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以验证该镜像是否在Docker Hub上可用：
- en: '![](img/image_04_007.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_007.jpg)'
- en: Automating the build process for images
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化镜像构建过程
- en: You learned how to build images locally and push these images to Docker Hub.
    Docker Hub also has the capability to automatically build the image from the `Dockerfile`
    kept in the repository of GitHub or Bitbucket. Automated builds are supported
    on both the private and public repositories of GitHub and Bitbucket. The Docker
    Hub Registry keeps all the automated build images. The Docker Hub Registry is
    open source and can be accessed from [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何在本地构建镜像并将这些镜像推送到Docker Hub。Docker Hub还具有从GitHub或Bitbucket的仓库中`Dockerfile`自动构建镜像的能力。自动构建在GitHub和Bitbucket的私有和公共仓库中都受支持。Docker
    Hub Registry保存所有自动构建的镜像。Docker Hub Registry是开源的，可以从[https://github.com/docker/docker-registry](https://github.com/docker/docker-registry)访问。
- en: 'We will discuss the steps needed to implement the automated build process:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论实现自动化构建过程所需的步骤：
- en: We first connect Docker Hub to our GitHub account.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先将Docker Hub与我们的GitHub账户连接。
- en: 'Log in to Docker Hub from [https://hub.docker.com/login/](https://hub.docker.com/login/),
    click on Create, and then navigate to Create Automated Build, as shown in the
    following screenshot:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://hub.docker.com/login/](https://hub.docker.com/login/)登录Docker Hub，点击“创建”，然后导航到“创建自动构建”，如以下截图所示：
- en: '![](img/image_04_008.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_008.jpg)'
- en: 'We''ll now select Link Accounts:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在选择“链接账户”：
- en: '![](img/image_04_009.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_009.jpg)'
- en: 'Once GitHub is selected, we will select Public and Private (Recommended), as
    shown here:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦选择GitHub，我们将选择“公开”和“私有（推荐）”，如图所示：
- en: '![](img/image_04_010.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_010.jpg)'
- en: After clicking on Select, your GitHub repository will now be shown.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“选择”后，您的GitHub仓库将显示出来。
- en: 'Now, provide the GitHub credentials to link your GitHub account with Docker
    Hub and select Sign in:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，提供GitHub凭据以将GitHub账户与Docker Hub连接，然后选择“登录”：
- en: '![](img/image_04_011.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_011.jpg)'
- en: 'After a successful login, the Linked Accounts & Services screen looks like
    the following screenshot:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功登录后，Linked Accounts & Services屏幕将如下所示：
- en: '![](img/image_04_012.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_012.jpg)'
- en: 'So, whenever the `Dockerfile` is updated in GitHub, the automated build gets
    triggered and a new image will be stored in the Docker Hub Registry. We can always
    check the build history. We can change the `Dockerfile` on the local machine and
    push it to GitHub. Now, we can see the automated build link of Docker Hub at [https://hub.docker.com/r/vinoddandy/dockerautomatedbuild/builds/](https://hub.docker.com/r/vinoddandy/dockerautomatedbuild/builds/):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每当GitHub中的`Dockerfile`更新时，自动构建会触发，并且新镜像将被存储在Docker Hub Registry中。我们可以随时检查构建历史。我们可以更改本地机器上的`Dockerfile`并将其推送到GitHub。现在，我们可以在[https://hub.docker.com/r/vinoddandy/dockerautomatedbuild/builds/](https://hub.docker.com/r/vinoddandy/dockerautomatedbuild/builds/)看到Docker
    Hub的自动构建链接：
- en: '![](img/image_04_013.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_013.jpg)'
- en: Private repositories on Docker Hub
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Hub上的私有仓库
- en: Docker Hub provides both public and private repositories. The public repository
    is free to users and the private ones are a paid service. Plans with private repositories
    are available in different sizes, such as micro, small, medium, or large subscriptions.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub提供了公共和私有仓库。公共仓库对用户免费，私有仓库则是付费服务。带有私有仓库的计划有不同的尺寸，例如微型、小型、中型或大型订阅。
- en: Docker has published its public repository code to open source at [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Docker已将其公共仓库代码开源，网址是[https://github.com/docker/docker-registry](https://github.com/docker/docker-registry)。
- en: Normally, enterprises will not like to keep their Docker images either in a
    Docker public or private repository. They prefer to keep, maintain, and support
    their own repository. Hence, Docker also provides the option for enterprises to
    create and install their own repository.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，企业不希望将他们的Docker镜像存储在Docker的公共或私有仓库中。它们更倾向于保留、维护和支持自己的仓库。因此，Docker还为企业提供了创建和安装自己仓库的选项。
- en: 'Let''s create a repository in the local machine using the `registry` image
    provided by Docker. We will run the registry container on the local machine, using
    the `registry` image from Docker:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Docker提供的`registry`镜像在本地机器上创建一个仓库。我们将使用来自Docker的`registry`镜像在本地机器上运行注册表容器：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the automated build section, we built the `vinoddandy/dockerfileimageforhub1`
    image. Let''s tag the `224affbf9a65` image ID to our locally created registry
    image. This tagging of the image is needed for unique identification inside the
    local repository. This image registry may have multiple variants in the repository,
    so this tag will help you identify the particular image:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动化构建部分，我们构建了`vinoddandy/dockerfileimageforhub1`镜像。现在，让我们将`224affbf9a65`镜像ID标记到我们本地创建的注册表镜像上。此镜像标记是为了在本地仓库中进行唯一标识。该镜像注册表可能在仓库中有多个变种，因此这个标签将帮助你识别特定的镜像：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once the tagging is done, push this image to a new registry using the `docker
    push` command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 标记完成后，使用`docker push`命令将此镜像推送到新的注册表：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, the new image is available in the local repository. You can retrieve this
    image from the local registry and run the container. This task is left for you
    to complete.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，新的镜像已经在本地仓库中可用。你可以从本地注册表中获取这个镜像并运行容器。这个任务留给你来完成。
- en: Organizations and teams on Docker Hub
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Hub上的组织和团队
- en: One of the useful aspects of private repositories is that you can share them
    only with members of your organization or team. Docker Hub lets you create organizations,
    where you can collaborate with your colleagues and manage private repositories.
    You will learn how to create and manage an organization next.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 私有仓库的一个有用方面是，你可以仅与组织或团队的成员共享它们。Docker Hub让你创建组织，在其中你可以与同事协作并管理私有仓库。接下来，你将学习如何创建和管理组织。
- en: 'The first step is to create an organization on Docker Hub at [https://hub.docker.com/organizations/add/](https://hub.docker.com/organizations/add/),
    as shown in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在Docker Hub上创建一个组织，网址是[https://hub.docker.com/organizations/add/](https://hub.docker.com/organizations/add/)，如下图所示：
- en: '![](img/image_04_014.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_014.jpg)'
- en: 'Inside your organization, you can add more organizations, and then add members
    to it:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的组织内部，你可以添加更多的组织，然后将成员添加到其中：
- en: '![](img/image_04_015.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_04_015.jpg)'
- en: The members of your organization and group can collaborate with the organization
    and teams. This feature will be more useful in the case of a private repository.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你组织和团队的成员可以与组织和团队协作。这个功能在私有仓库的情况下会更加有用。
- en: The REST API for Docker Hub
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Hub的REST API
- en: Docker Hub provides a REST API to integrate the Hub capabilities through programs.
    The REST API is supported for both user and repository management.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub提供了一个REST API，可以通过程序集成Hub的功能。REST API支持用户和仓库管理。
- en: 'User management supports the following features:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 用户管理支持以下功能：
- en: '**User Login**: This is used for user login to Docker Hub:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户登录**：用于用户登录到Docker Hub：'
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**User Register**: This is used for the registration of a new user:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户注册**：用于注册新用户：'
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Update user**: This is used to update the user''s password and e-mail:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新用户**：用于更新用户的密码和电子邮件：'
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Repository management supports the following features:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库管理支持以下功能：
- en: '**Create a user repository**: This creates a user repository:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建用户仓库**：用于创建用户仓库：'
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'After you create repositories, your repositories will be listed here, as shown
    in this screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建仓库后，你的仓库将在这里列出，如以下截图所示：
- en: '**Delete a user repository**: This deletes a user repository:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除用户存储库**：这将删除一个用户存储库：'
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Create a library repository**: This creates a library repository, and it
    is available only to Docker administrators:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建库存储库**：这将创建一个库存储库，并且仅对Docker管理员可用：'
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Delete a library repository**: This deletes a library repository, and it
    is available only to Docker administrators:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除库存储库**：这将删除一个库存储库，并且仅对Docker管理员可用：'
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Update user repository images**: This updates the images of a user''s repository:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新用户存储库镜像**：这将更新用户存储库中的镜像：'
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**List user repository images**: This lists the images in a user''s repository:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列出用户存储库镜像**：这将列出用户存储库中的镜像：'
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Update library repository images**: This updates the images in a library
    repository:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新库存储库镜像**：这将更新库存储库中的镜像：'
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**List library repository images**: This lists the images in a library repository:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列出库存储库镜像**：这将列出库存储库中的镜像：'
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Authorize a token for a library repository**: This authorizes a token for
    a library repository:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为库存储库授权令牌**：这将为库存储库授权一个令牌：'
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Authorize a token for a user repository**: This authorizes a token for a
    user''s repository:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为用户存储库授权令牌**：这将为用户的存储库授权一个令牌：'
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: Docker images are the most prominent building blocks used for deriving real-world
    Docker containers that can be exposed as a service over any network. Developers
    can find and check images for their unique capabilities, and use them accordingly
    for their own purposes in bringing up highly usable, publicly discoverable, network-accessible,
    and cognitively composable containers. All crafted images need to be put in a
    public registry repository. In this chapter, we clearly explained how to publish
    images in a repository. We also talked about trusted repositories and their distinct
    characteristics. Finally, we demonstrated how the REST API for the repository
    can be leveraged to push in and play around with Docker images and user management,
    programmatically.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像是用于生成现实世界Docker容器的最突出的构建块，可以作为任何网络服务公开。开发人员可以查找和检查镜像的独特能力，并根据自己的需求使用它们，以构建高度可用、公开可发现、网络可访问和认知可组合的容器。所有精心制作的镜像都需要放在公共注册库中。在本章中，我们清楚地解释了如何在存储库中发布镜像。我们还讨论了可信存储库及其独特的特征。最后，我们展示了如何利用存储库的REST
    API来推送和处理Docker镜像以及用户管理，以编程方式进行操作。
- en: Docker images need to be stored in a public, controlled, and network-accessible
    location to be readily found and leveraged by worldwide software engineers and
    system administrators. Docker Hub is being touted as the best-in-class method
    to centrally aggregate, curate, and manage Docker images, originating from Docker
    enthusiasts (internal as well as external). However, enterprises cannot afford
    to keep their Docker images in a public domain, and hence the next chapter is
    dedicated to explaining the steps needed for image deployment and management in
    private IT infrastructures.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像需要存储在公共、受控和网络可访问的位置，以便全球软件工程师和系统管理员可以轻松找到并利用。Docker Hub被誉为集中聚合、策划和管理Docker镜像的最佳方法，源自Docker爱好者（内部和外部）。然而，企业无法承担将其Docker镜像保存在公共域中的成本，因此接下来的章节将专门解释在私有IT基础设施中进行镜像部署和管理所需的步骤。
