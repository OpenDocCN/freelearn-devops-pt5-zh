- en: Publishing Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to build Docker images. The next logical
    step is to publish these images in a public repository for public discovery and
    consumption. So, this chapter focuses on publishing images on Docker Hub, and
    how to get the most out of Docker Hub. We will create a new Docker image, using
    the `commit` command and a `Dockerfile`, build on it, and push it to Docker Hub.
    The concept of a Docker trusted repository will be discussed. This Docker trusted
    repository is created from GitHub or Bitbucket, and it can then be integrated
    with Docker Hub to automatically build images as a result of updates in the repository.
    This repository on GitHub is used to store the `Dockerfile`, which was previously
    created. Also, we will illustrate how worldwide organizations can enable their
    teams of developers to craft and contribute a variety of Docker images to be deposited
    in Docker Hub. The Docker Hub REST APIs can be used for user management and the
    manipulation of the repository programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing images to Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic building of images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private repositories on Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating organizations on Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker Hub REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Docker Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker Hub is the central place used for keeping the Docker images either in
    a public or private repository. Docker Hub provides features, such as a repository
    for Docker images, user authentications, automated image builds, integration with
    GitHub or Bitbucket, and managing organizations and groups. The Docker Registry
    component of Docker Hub manages the repository for Docker images. Also, you can
    protect your repositories using Docker Security Scanning, which is free as of
    now. This feature was first enabled in IBM container repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Registry is a storage system used to store images. Automated build is
    a feature of Docker Hub, which is not open source yet at the time of writing this
    book. The following diagram shows the typical features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to work with Docker Hub, you have to register with Docker Hub, and
    create an account using the link available at [https://hub.docker.com/](https://hub.docker.com/).
    You can update the Docker Hub ID, e-mail address, and password fields, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After completing the sign up process, you need to complete the verification
    received in an e-mail. After the e-mail verification is completed, you will see
    something similar to the following screenshot when you log in to Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The creation of an account in Docker Hub has completed successfully, and now
    you can log in to your Docker Hub account from [https://hub.docker.com/login/](https://hub.docker.com/login/),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Docker Hub also supports command-line access to Docker Hub using an Ubuntu
    Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in with your Docker ID to push and pull images from Docker Hub. If you
    don''t have a Docker ID, head over to [https://hub.docker.com](https://hub.docker.com)
    to create one. Enter your username and password in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After a successful login, the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can browse the available images in Docker Hub at [https://hub.docker.com/explore/](https://hub.docker.com/explore/),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, you can see your settings, update your profile, and get details of supported
    communities, such as Twitter, Stack Overflow, #IRC, Google Groups, and GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: Pushing images to Docker Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we will create a Docker image on the local machine and push this image
    to Docker Hub. You need to perform the following steps in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Docker image on the local machine by doing one of the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `docker commit` subcommand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `docker commit` subcommand with `Dockerfile`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing this created image to Docker Hub
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting the image from Docker Hub
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use the `ubuntu` base image, run the container, add a new directory
    and a new file, and then create a new image. In [Chapter 3](../Text/Ch03.xhtml),
    *Building Images*, we saw how to create a Docker image using `Dockerfile`. You
    may refer to that chapter to check for details of the `Dockerfile` syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will run the container with the `containerforhub` name from the base `ubuntu`
    image, as shown in the following Terminal code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll create a new directory and file in the `containerforhub` container.
    We will also update the new file with some sample text to test later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let's build the new image with the `docker commit` command from the container,
    which has just been created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `commit` command will be executed from the host machine, from where the
    container is running, and not from inside this container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You should use your own username of Docker Hub in place of `vinoddandy` to create
    the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have a new Docker image available on the local machine with the `vinoddandy/imageforhub2`
    name. At this point, a new image with `mynewdir` and `mynewfile` is created locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We will log in to Docker Hub using the `sudo docker login` command, as discussed
    earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s push this image to Docker Hub from the host machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, we'll login to Docker Hub and verify the image in Repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the image from Docker Hub, let''s remove this image from the local
    machine. To remove the image, first we need to stop the container and then delete
    the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also delete the `vinoddandy/imageforhub2` image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will pull the newly created image from Docker Hub, and run the new container
    on the local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: So, we have pulled the latest image from Docker Hub and created the container
    with the new `vinoddandy/imageforhub2` image. Make a note that the `Unable to
    find image 'vinoddandy/imageforhub2:latest' locally` message confirms that the
    image is downloaded from the remote repository of Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: The text in `mynewfile` verifies that it is the same image that was created
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will delete the image from Docker Hub at [https://hub.docker.com/r/vinoddandy/imageforhub2/](https://hub.docker.com/r/vinoddandy/imageforhub/)
    and then click on Settings and then Delete, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We'll again create this image, but now using the `Dockerfile` process. So, let's
    create the Docker image using the `Dockerfile` concept explained in [Chapter 3](../Text/Ch03.xhtml),
    *Building Images*, and push this image to Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Dockerfile` on the local machine is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll build the image locally using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll run the container using this image, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This text in `mynewdir` confirms that the new image is built properly with a
    new directory and a new file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat the login process in Docker Hub and push this newly created image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can verify the availability of the image on Docker Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Automating the build process for images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You learned how to build images locally and push these images to Docker Hub.
    Docker Hub also has the capability to automatically build the image from the `Dockerfile`
    kept in the repository of GitHub or Bitbucket. Automated builds are supported
    on both the private and public repositories of GitHub and Bitbucket. The Docker
    Hub Registry keeps all the automated build images. The Docker Hub Registry is
    open source and can be accessed from [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discuss the steps needed to implement the automated build process:'
  prefs: []
  type: TYPE_NORMAL
- en: We first connect Docker Hub to our GitHub account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to Docker Hub from [https://hub.docker.com/login/](https://hub.docker.com/login/),
    click on Create, and then navigate to Create Automated Build, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_04_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll now select Link Accounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_04_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once GitHub is selected, we will select Public and Private (Recommended), as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_04_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After clicking on Select, your GitHub repository will now be shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, provide the GitHub credentials to link your GitHub account with Docker
    Hub and select Sign in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_04_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After a successful login, the Linked Accounts & Services screen looks like
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_04_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, whenever the `Dockerfile` is updated in GitHub, the automated build gets
    triggered and a new image will be stored in the Docker Hub Registry. We can always
    check the build history. We can change the `Dockerfile` on the local machine and
    push it to GitHub. Now, we can see the automated build link of Docker Hub at [https://hub.docker.com/r/vinoddandy/dockerautomatedbuild/builds/](https://hub.docker.com/r/vinoddandy/dockerautomatedbuild/builds/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Private repositories on Docker Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker Hub provides both public and private repositories. The public repository
    is free to users and the private ones are a paid service. Plans with private repositories
    are available in different sizes, such as micro, small, medium, or large subscriptions.
  prefs: []
  type: TYPE_NORMAL
- en: Docker has published its public repository code to open source at [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry).
  prefs: []
  type: TYPE_NORMAL
- en: Normally, enterprises will not like to keep their Docker images either in a
    Docker public or private repository. They prefer to keep, maintain, and support
    their own repository. Hence, Docker also provides the option for enterprises to
    create and install their own repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a repository in the local machine using the `registry` image
    provided by Docker. We will run the registry container on the local machine, using
    the `registry` image from Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the automated build section, we built the `vinoddandy/dockerfileimageforhub1`
    image. Let''s tag the `224affbf9a65` image ID to our locally created registry
    image. This tagging of the image is needed for unique identification inside the
    local repository. This image registry may have multiple variants in the repository,
    so this tag will help you identify the particular image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the tagging is done, push this image to a new registry using the `docker
    push` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, the new image is available in the local repository. You can retrieve this
    image from the local registry and run the container. This task is left for you
    to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations and teams on Docker Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the useful aspects of private repositories is that you can share them
    only with members of your organization or team. Docker Hub lets you create organizations,
    where you can collaborate with your colleagues and manage private repositories.
    You will learn how to create and manage an organization next.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create an organization on Docker Hub at [https://hub.docker.com/organizations/add/](https://hub.docker.com/organizations/add/),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside your organization, you can add more organizations, and then add members
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_04_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The members of your organization and group can collaborate with the organization
    and teams. This feature will be more useful in the case of a private repository.
  prefs: []
  type: TYPE_NORMAL
- en: The REST API for Docker Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker Hub provides a REST API to integrate the Hub capabilities through programs.
    The REST API is supported for both user and repository management.
  prefs: []
  type: TYPE_NORMAL
- en: 'User management supports the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Login**: This is used for user login to Docker Hub:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**User Register**: This is used for the registration of a new user:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Update user**: This is used to update the user''s password and e-mail:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Repository management supports the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a user repository**: This creates a user repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'After you create repositories, your repositories will be listed here, as shown
    in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Delete a user repository**: This deletes a user repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Create a library repository**: This creates a library repository, and it
    is available only to Docker administrators:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Delete a library repository**: This deletes a library repository, and it
    is available only to Docker administrators:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Update user repository images**: This updates the images of a user''s repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**List user repository images**: This lists the images in a user''s repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Update library repository images**: This updates the images in a library
    repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**List library repository images**: This lists the images in a library repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Authorize a token for a library repository**: This authorizes a token for
    a library repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**Authorize a token for a user repository**: This authorizes a token for a
    user''s repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker images are the most prominent building blocks used for deriving real-world
    Docker containers that can be exposed as a service over any network. Developers
    can find and check images for their unique capabilities, and use them accordingly
    for their own purposes in bringing up highly usable, publicly discoverable, network-accessible,
    and cognitively composable containers. All crafted images need to be put in a
    public registry repository. In this chapter, we clearly explained how to publish
    images in a repository. We also talked about trusted repositories and their distinct
    characteristics. Finally, we demonstrated how the REST API for the repository
    can be leveraged to push in and play around with Docker images and user management,
    programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Docker images need to be stored in a public, controlled, and network-accessible
    location to be readily found and leveraged by worldwide software engineers and
    system administrators. Docker Hub is being touted as the best-in-class method
    to centrally aggregate, curate, and manage Docker images, originating from Docker
    enthusiasts (internal as well as external). However, enterprises cannot afford
    to keep their Docker images in a public domain, and hence the next chapter is
    dedicated to explaining the steps needed for image deployment and management in
    private IT infrastructures.
  prefs: []
  type: TYPE_NORMAL
