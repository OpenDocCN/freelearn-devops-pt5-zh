- en: '*Chapter 6*'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '*第六章*'
- en: Docker Machine, Vagrant, and Multipass
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Machine、Vagrant和Multipass
- en: In this chapter, we will take a deeper look at Docker Machine. It can be used
    to easily launch and bootstrap Docker hosts targeting various platforms, including
    locally or in a cloud environment. We will also look at both Vagrant and Multipass,
    which are alternatives that can be used to launch local Docker hosts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将深入探讨Docker Machine。它可以用于轻松启动并引导目标平台的Docker主机，包括本地或云环境。我们还将讨论Vagrant和Multipass，它们是可以用来启动本地Docker主机的替代工具。
- en: 'Let''s take a look at what we will be covering in this chapter. We will be
    looking at the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下本章将涵盖的内容。我们将探讨以下主题：
- en: An introduction to Docker Machine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Machine简介
- en: Deploying local Docker hosts with Docker Machine
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker Machine部署本地Docker主机
- en: Launching Docker hosts in the cloud using Docker Machine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker Machine在云中启动Docker主机
- en: Using Vagrant and Multipass to launch local Docker hosts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vagrant和Multipass启动本地Docker主机
- en: Introducing and using Multipass
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍并使用Multipass
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As in previous chapters, we will continue to use our local Docker installations.
    Again, the screenshots in this chapter will be from my preferred operating system,
    macOS. We will be looking at how we can use Docker Machine to launch Docker-based
    **virtual machines** (**VMs**) locally using VirtualBox, as well as in public
    clouds, so you will need an account with DigitalOcean if you would like to follow
    along with the examples in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章一样，我们将继续使用本地的Docker安装。再次强调，本章中的截图将来自我偏好的操作系统macOS。我们将查看如何使用Docker Machine在本地通过VirtualBox以及在公共云中启动基于Docker的**虚拟机**（**VMs**），因此如果你想跟着本章的示例操作，你需要一个DigitalOcean账户。
- en: As before, the Docker commands we will be running will work on all three operating
    systems on which we have installed Docker so far. However, some of the supporting
    commands, which will be few and far between, may only apply to macOS- and Linux-based
    operating systems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将运行的Docker命令将在我们已经安装了Docker的所有三大操作系统上有效。然而，一些偶尔使用的支持命令可能仅适用于基于macOS和Linux的操作系统。
- en: Check out the following video to see the Code in Action:[https://bit.ly/2R6QQmd](https://bit.ly/2R6QQmd)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码如何运行：[https://bit.ly/2R6QQmd](https://bit.ly/2R6QQmd)
- en: An introduction to Docker Machine
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Machine简介
- en: Before we roll our sleeves up and get stuck in with Docker Machine, we should
    take a moment to discuss what place it now occupies in the overall Docker ecosystem
    and what it actually is.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们挽起袖子，深入使用Docker Machine之前，应该先花点时间讨论一下它在整个Docker生态系统中所占的位置，以及它究竟是什么。
- en: Docker Machine's biggest strength was that it provided a consistent interface
    to several public cloud providers, such as **Amazon Web Services** (**AWS**),
    **DigitalOcean**, **Microsoft Azure**, and **Google Cloud**, as well as self-hosted
    VM/cloud platforms (including **OpenStack** and **VMware vSphere**) to quickly
    launch and configure individual Docker hosts. Being able to target all of these
    technologies using a single command with minimal user interaction is a very big-time
    saver. If you need to quickly access a Docker host in AWS one day and then in
    DigitalOcean the next, you know you are going to get a consistent experience.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Machine最大的优势在于，它为多个公共云提供商（如**Amazon Web Services**（**AWS**）、**DigitalOcean**、**Microsoft
    Azure**和**Google Cloud**）以及自托管的虚拟机/云平台（包括**OpenStack**和**VMware vSphere**）提供了一致的接口，用于快速启动和配置单个Docker主机。能够通过单个命令并且最小化用户交互来针对所有这些技术进行操作，节省了大量时间。如果某天你需要快速访问AWS中的Docker主机，第二天又需要在DigitalOcean中访问，你知道你会获得一致的体验。
- en: Also, it allows you to launch a local Docker host, which was useful for operating
    systems such as the non-Professional versions of Windows 10, where Docker could
    natively run because of a lack of hypervisor support.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还允许你启动本地Docker主机，这对于某些操作系统（例如非专业版的Windows 10）非常有用，因为这些操作系统由于缺乏虚拟化支持，无法原生运行Docker。
- en: As with Docker Compose, it used to be bundled with Docker for Windows and Docker
    for Mac— however, this has been dropped from recent releases. This is due to there
    being less of a requirement for end users to launch and manage individual Docker
    hosts. Now, people are using clustering technologies such as Docker Swarm or Kubernetes,
    or using a cloud provider's native Docker-based hosted tools, all of which we
    are going to be covering in detail across the remaining chapters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Docker Compose 一样，过去它曾与 Docker for Windows 和 Docker for Mac 一起捆绑发布——然而，这一功能已经从最近的版本中去除。这是因为终端用户不再需要启动和管理单独的
    Docker 主机。现在，人们更倾向于使用集群技术，如 Docker Swarm 或 Kubernetes，或者使用云服务商的原生 Docker 托管工具，所有这些内容我们将在接下来的章节中详细讨论。
- en: Important note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A few of the tools we are going to be covering in this section of the chapter
    are now considered legacy, and support for them has started to be phased out.
    The reason they are mentioned is because for users with older hardware, they may
    the only way they can experience Docker.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们将讨论的部分工具现在已经被视为遗留工具，并且对它们的支持已经开始逐步取消。之所以提到它们，是因为对于使用旧硬件的用户来说，这可能是他们唯一能体验
    Docker 的方式。
- en: We are going to start by quickly discussing one of these legacy tools.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从快速讨论其中一个遗留工具开始。
- en: Installing Docker Machine using Docker Toolbox
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Docker Toolbox 安装 Docker Machine
- en: If you are running a version of macOS or Windows that does not support the versions
    of Docker for Windows and Docker for Mac we have been using in previous chapters,
    then you can download and install Docker Toolbox, which will install the Docker
    client, Docker Compose, and Docker Machine. You can download Docker Toolbox from
    [https://github.com/docker/toolbox/](https://github.com/docker/toolbox/)releases;
    however, please do not install it if you are already running Docker, as it may
    create conflicts and create problems with your existing installation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的 macOS 或 Windows 版本不支持我们在前几章中使用的 Docker for Windows 和 Docker for Mac 版本，那么您可以下载并安装
    Docker Toolbox，它将安装 Docker 客户端、Docker Compose 和 Docker Machine。您可以从 [https://github.com/docker/toolbox/](https://github.com/docker/toolbox/)
    下载 Docker Toolbox；但是，如果您已经在运行 Docker，请不要安装它，因为它可能会与您现有的安装产生冲突，进而造成问题。
- en: Docker Toolbox is now considered legacy, and the versions of Docker and the
    supporting tools that are installed are old; therefore, we will not be covering
    their installation here.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Toolbox 现在被视为遗留工具，安装的 Docker 及其支持工具的版本已经较旧；因此，我们在这里不会介绍它们的安装。
- en: Installing Docker Machine using the command line
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命令行安装 Docker Machine
- en: 'If you are already running Docker, before we can start using Docker Machine,
    we need to install it. Here is the command that you need to run to install Docker
    Machine on macOS and Linux, starting with macOS:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在运行 Docker，那么在我们开始使用 Docker Machine 之前，我们需要先安装它。以下是您需要在 macOS 和 Linux 上运行的安装
    Docker Machine 的命令，从 macOS 开始：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You would use a similar command for Linux, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux，您可以使用类似的命令，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For Windows, the following command assumes that you have Git bash installed:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，以下命令假设您已安装 Git bash：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, all three commands are downloading an executable from the project's
    release page. To make sure that you are using the latest version, you can check
    [https://github.com/docker/machine/releases/](https://github.com/docker/machine/releases/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，所有三个命令都在从项目的发布页面下载一个可执行文件。为了确保您使用的是最新版本，您可以查看 [https://github.com/docker/machine/releases/](https://github.com/docker/machine/releases/)。
- en: Now that we have Docker Machine installed on your chosen operating system, we
    can start to deploy VMs that run Docker.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在您选择的操作系统上安装了 Docker Machine，接下来可以开始部署运行 Docker 的虚拟机。
- en: Deploying local Docker hosts with Docker Machine
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker Machine 部署本地 Docker 主机
- en: Before we journey out into the cloud experience, we are going to look at the
    basics of Docker Machine locally by launching it, using Oracle VirtualBox to provide
    the VM.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们体验云端之前，我们将通过启动 Docker Machine、使用 Oracle VirtualBox 提供虚拟机，来了解 Docker Machine
    的基本操作。
- en: Important note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: VirtualBox is a free virtualization product from Oracle. It allows you to install
    VMs across many different platforms and **central processing unit** (**CPU**)
    types. Download and install VirtualBox from [https://www.virtualbox.org/wiki/Downloads/](https://www.virtualbox.org/wiki/Downloads/).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox 是 Oracle 提供的一款免费的虚拟化产品。它允许您在多个平台和**中央处理单元**（**CPU**）类型上安装虚拟机。您可以从[https://www.virtualbox.org/wiki/Downloads/](https://www.virtualbox.org/wiki/Downloads/)下载并安装
    VirtualBox。
- en: 'To launch the machine, all you need to do is run the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动机器，您只需要运行以下命令：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will start the deployment, during which you will get a list of tasks that
    Docker Machine is running. To launch your Docker host, each host launched with
    Docker Machine goes through the same steps.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将开始部署过程，在此过程中你将看到 Docker Machine 正在运行的任务列表。为了启动 Docker 主机，Docker Machine 启动的每个主机都会经过相同的步骤。
- en: 'First of all, Docker Machine runs a few basic checks, such as confirming that
    VirtualBox is installed, and creating certificates and a directory structure in
    which it will store all of its files and VMs, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Docker Machine 会运行一些基本检查，比如确认 VirtualBox 是否安装，并创建证书和目录结构，以便存储所有文件和虚拟机，具体如下：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It then checks for the presence of the image it will use for the VM. If it
    is not there, the image will be downloaded, as illustrated in the following code
    snippet:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它会检查是否存在将用于虚拟机的镜像。如果镜像不存在，系统将下载该镜像，如以下代码片段所示：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the checks have passed, it creates the VM using the selected driver, as
    illustrated in the following code snippet:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦检查通过，它会使用所选的驱动程序创建虚拟机，如以下代码片段所示：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, Docker Machine creates a unique **Secure Shell** (**SSH**)
    key for the VM. This means that you will be able to access the VM over SSH, but
    more on that later. Once the VM has booted, Docker Machine then makes a connection
    to the VM, as illustrated in the following code snippet:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Docker Machine 会为虚拟机创建一个独特的**安全外壳** (**SSH**) 密钥。这意味着你将能够通过 SSH 访问虚拟机，稍后会详细说明。一旦虚拟机启动，Docker
    Machine 将建立与虚拟机的连接，如以下代码片段所示：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, Docker Machine detects the operating system being used and chooses
    the appropriate bootstrap script to deploy Docker. Once Docker is installed, Docker
    Machine generates and shares certificates between your localhost and the Docker
    host. It then configures the remote Docker installation for certificate authentication,
    meaning that your local client can connect to and interact with the remote Docker
    server.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Docker Machine 会检测正在使用的操作系统，并选择适当的引导脚本来部署 Docker。一旦 Docker 安装完成，Docker
    Machine 会在本地主机和 Docker 主机之间生成并共享证书。然后，它会配置远程 Docker 安装进行证书认证，这意味着你的本地客户端可以连接并与远程
    Docker 服务器互动。
- en: 'Once Docker is installed, Docker Machine generates and shares certificates
    between your localhost and the Docker host. It then configures the remote Docker
    installation for certificate authentication, meaning that your local client can
    connect to and interact with the remote Docker server. This is illustrated in
    the following code snippet:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Docker 安装完成，Docker Machine 会在你的本地主机和 Docker 主机之间生成并共享证书。然后，它会配置远程 Docker
    安装以进行证书认证，这意味着你的本地客户端可以连接并与远程 Docker 服务器互动。以下代码片段进行了说明：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finally, it checks whether your local Docker client can make the remote connection,
    and completes the task by giving you instructions on how to configure your local
    client to the newly launched Docker host.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，它会检查你的本地 Docker 客户端是否能够进行远程连接，并通过给出如何配置本地客户端与新启动的 Docker 主机的指示来完成任务。
- en: 'If you open VirtualBox, you should be able to see your new VM, as illustrated
    in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开 VirtualBox，你应该能够看到你的新虚拟机，正如以下截图所示：
- en: '![Figure 6.1 – The Docker VM running in VirtualBox'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – 在 VirtualBox 中运行的 Docker 虚拟机'
- en: '](img/Figure_6.01_B15659.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.01_B15659.jpg)'
- en: Figure 6.1 – The Docker VM running in VirtualBox
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 在 VirtualBox 中运行的 Docker 虚拟机
- en: 'Next, we need to configure our local Docker client to connect to the newly
    launched Docker host; as already mentioned in the output of launching the host,
    running the following command will show you how to make the connection:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要配置本地 Docker 客户端，以连接到新启动的 Docker 主机；正如在启动主机时输出的内容中提到的，运行以下命令将展示如何建立连接：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This command returns the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令返回以下内容：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This overrides the local Docker installation by giving the IP address and port
    number of the newly launched Docker host, as well as the path to the certificates
    used for authentication. At the end of the output, it gives you a command to run
    and to configure your Terminal session in order to make the connection.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将覆盖本地 Docker 安装，通过提供新启动的 Docker 主机的 IP 地址和端口号，以及用于认证的证书路径。在输出的最后，它会给你一个命令，供你运行并配置你的终端会话以完成连接。
- en: 'Before we run the command, let''s run `docker version` to get information on
    the current setup, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行命令之前，先运行 `docker version` 来获取当前设置的信息，如下所示：
- en: '![Figure 6.2 – Checking the versions on Docker on my local installation'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – 检查我本地安装的 Docker 版本'
- en: '](img/Figure_6.02_B15659.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.02_B15659.jpg)'
- en: Figure 6.2 – Checking the versions on Docker on my local installation
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 检查本地安装的 Docker 版本
- en: 'This is basically the Docker for Mac installation I am running. Running the
    following command and then `docker version` again should show some changes to
    the server:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是我正在运行的 Docker for Mac 安装。运行以下命令，然后再次运行 `docker version`，应该会显示服务器的一些变化：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the command is given in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如以下截图所示：
- en: '![Figure 6.3 – Checking the versions of Docker on the new VM'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.3 – 检查新虚拟机上的 Docker 版本](img/Figure_6.03_B15659.jpg)'
- en: '](img/Figure_6.03_B15659.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.03_B15659.jpg)'
- en: Figure 6.3 – Checking the versions of Docker on the new VM
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 检查新虚拟机上的 Docker 版本
- en: As you can see, the server launched by Docker Machine is pretty much in line
    with what we have installed locally; in fact, the only difference is that it is
    a few minor versions behind. As you can see, the Docker Engine binary on my Docker
    for Mac installation is running version `19.03.8` and the Docker Machine launched
    host is running `19.03.5`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Docker Machine 启动的服务器与我们本地安装的几乎完全一致；事实上，唯一的区别是它的版本稍微落后了一些。如你所见，我的 Docker
    for Mac 安装中的 Docker Engine 二进制文件正在运行版本 `19.03.8`，而 Docker Machine 启动的主机则运行版本 `19.03.5`。
- en: From here, we can interact with the Docker host in the same way as if it were
    a local Docker installation. Before we move on to launching Docker hosts in the
    cloud, there are a few other basic Docker Machine commands to cover.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们可以像与本地 Docker 安装一样与 Docker 主机进行交互。在我们继续启动云中的 Docker 主机之前，还有一些其他基本的 Docker
    Machine 命令需要了解。
- en: 'The first command lists the currently configured Docker hosts, and is shown
    here:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令列出当前配置的 Docker 主机，显示如下：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the command is given here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下所示：
- en: '![Figure 6.4 – Listing the VMs'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.4 – 列出虚拟机](img/Figure_6.04_B15659.jpg)'
- en: '](img/Figure_6.04_B15659.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.04_B15659.jpg)'
- en: Figure 6.4 – Listing the VMs
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 列出虚拟机
- en: As you can see, it lists details of the machine name, the driver used, and the
    Docker endpoint **Uniform Resource Locator** (**URL**), as well as the version
    of Docker the hosts are running.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它列出了机器名称、使用的驱动程序、Docker 端点**统一资源定位符**（**URL**），以及主机正在运行的 Docker 版本。
- en: You will also notice that there is a `*` in the `ACTIVE` column; this indicates
    which Docker host your local client is currently configured to interact with.
    You can also find out the active machine by running `docker-machine active`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到 `ACTIVE` 列中有一个 `*`，这表示你的本地客户端当前配置与哪个 Docker 主机进行交互。你也可以通过运行 `docker-machine
    active` 来查看当前活动的机器。
- en: 'The next command connects you to the Docker host using SSH, and is shown here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令使用 SSH 连接到 Docker 主机，如下所示：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the command is given here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出如下所示：
- en: '![Figure 6.5 – Connecting to the VM using SSH'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.5 – 使用 SSH 连接到虚拟机](img/Figure_6.05_B15659.jpg)'
- en: '](img/Figure_6.05_B15659.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.05_B15659.jpg)'
- en: Figure 6.5 – Connecting to the VM using SSH
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 使用 SSH 连接到虚拟机
- en: 'This is useful if you need to install additional software or configuration
    outside of Docker Machine. It is also useful if you need to look at logs, and
    so on. You can exit the remote shell by running `exit`. You can find out the IP
    address of your Docker host by running the following command once back on your
    local machine:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要安装额外的软件或配置 Docker Machine 之外的内容，这一点非常有用。如果你需要查看日志等信息，它也很有用。你可以通过运行 `exit`
    退出远程 shell。在返回本地机器后，你可以通过运行以下命令找到 Docker 主机的 IP 地址：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will be using this command a lot throughout the chapter as part of other
    commands to get the IP addresses of our VMs. There are also commands for establishing
    more details about your Docker host, and these are shown in the following code
    snippet:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们会经常使用此命令作为其他命令的一部分来获取虚拟机的 IP 地址。还有一些命令可以获取有关 Docker 主机的更多详细信息，以下代码片段中展示了这些命令：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, there are also commands to stop, start, restart, and remove your Docker
    host. Use the final command in the following code snippet to remove your locally
    launched host:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一些命令可以停止、启动、重启和删除 Docker 主机。使用以下代码片段中的最后一个命令来删除你本地启动的主机：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Running the `docker-machine rm` command will prompt you to determine whether
    you really want to remove the instance, as illustrated here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `docker-machine rm` 命令时，会提示你确认是否真的要删除该实例，如下所示：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now that we have had a very quick rundown of the basics, let's try something
    more adventurous.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经快速了解了基础知识，让我们尝试一些更具冒险性的操作。
- en: Launching Docker hosts in the cloud using Docker Machine
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker Machine 启动云中的 Docker 主机
- en: In this section, we are going to take a look at just one of the public cloud
    drivers supported by Docker Machine. As already mentioned, there are plenty available,
    but part of the appeal of Docker Machine is that it offers consistent experiences,
    so there are not too many differences between the drivers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: We are going to be launching a Docker host in **DigitalOcean** using Docker
    Machine. To do this, we need an **application programming interface** (**API**)
    access token with the necessary permissions to access and launch resources within
    your DigitalOcean account. Rather than explaining how to generate one here, you
    can follow the instructions at [https://www.digitalocean.com/help/api/.](https://www.digitalocean.com/help/api/.)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Launching a Docker host using the API token will incur a cost; ensure you keep
    track of the Docker hosts you launch. Details on DigitalOcean's pricing can be
    found at [https://www.digitalocean.com/pricing/](https://www.digitalocean.com/pricing/).
    Also, keep your API token secret as it could be used to gain unauthorized access
    to your account. All of the tokens used in this chapter have been revoked.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we are going to do is set our token as an environment variable
    so that we don''t have to keep using it. To do this, run the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Make sure you replace the API token with your own.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Due to the additional flags that we need to pass to the `docker-machine` command,
    I will be using `/` to split the command across multiple lines to make it more
    readable.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to launch the Docker host in DigitalOcean is as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As the Docker host is a remote machine, it will take a little while to launch,
    configure, and be accessible. As you can see from the following output, there
    are also a few changes to how Docker Machine bootstraps the Docker host:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once launched, you should be able to see the Docker host in your DigitalOcean
    control panel, as illustrated in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Viewing the droplet in the DigitalOcean portal'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.06_B15659.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – Viewing the droplet in the DigitalOcean portal
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Reconfigure your local client to connect to the remote host by running the
    following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Also, you can run `docker version` and `docker-machine inspect docker-digitalocean`
    to find out more information about the Docker host.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, running `docker-machine ssh docker-digitalocean` will SSH you into
    the host. As you can see from the following output, and also from the output when
    you first launched the Docker host, there is a difference in the operating system
    used:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – SSHing into our DigitalOcean machine'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.07_B15659.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 – SSHing into our DigitalOcean machine
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: You can exit the remote shell by running `exit`. As you can see, we didn't have
    to tell Docker Machine which operating system to use, the size of the Docker host,
    or even where to launch it. That is because each driver has some pretty sound
    defaults.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding these defaults to our command makes it look like the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些默认值添加到我们的命令中，命令看起来如下：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, there is scope for you to customize the size, region, and operating
    system, and even the network your Docker host is launched with.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，你可以自定义 Docker 主机的大小、区域和操作系统，甚至是网络。
- en: Important note
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: The command in the code snippet that follows will give an error if you have
    a droplet already launched.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经启动了一个 droplet，接下来的代码片段中的命令将会报错。
- en: 'Let''s say we wanted to change the operating system and the size of the droplet.
    In this instance, we can run the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要更改操作系统和 droplet 的大小。在这种情况下，我们可以运行以下命令：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As you can see in the **DigitalOcean** control panel, this launches a machine
    that looks like the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在 **DigitalOcean** 控制面板中看到的，这将启动一个类似以下的机器：
- en: '![Figure 6.8 – Viewing the droplet with a different specification'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.8 – 查看具有不同规格的 droplet'
- en: '](img/Figure_6.08_B15659.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.08_B15659.jpg)'
- en: Figure 6.8 – Viewing the droplet with a different specification
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 查看具有不同规格的 droplet
- en: 'You can remove the DigitalOcean Docker host by running the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来移除 DigitalOcean Docker 主机：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: It will take a minute or two to properly remove the host.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 移除主机需要一两分钟时间。
- en: Important note
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Please double-check in the DigitalOcean portal that your host has been properly
    terminated; otherwise, you may incur unexpected costs.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请在 DigitalOcean 控制面板中仔细检查，确保你的主机已正确终止；否则，可能会产生意外费用。
- en: That concludes our look at Docker Machine. Before we move on, let's discuss
    how secure it is.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对 Docker Machine 的介绍。在我们继续之前，让我们讨论一下它的安全性。
- en: Docker Machine summary
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Machine 概述
- en: As already mentioned, Docker Machine is now considered a legacy tool. As well
    as the aforementioned reason that people no longer want to launch single Docker
    hosts, there are also some other reasons for the change in direction.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker Machine 现在被视为一个遗留工具。除了前面提到的原因——人们不再想要启动单个 Docker 主机之外，还有一些其他原因导致了方向的变化。
- en: The most important one is security. As you may have noticed, when Docker Machine
    was launching our Docker hosts it generated not only an SSH key but also certificates,
    and then configured the Docker server component with these, meaning that our local
    Docker client could interact with the host. Now, with the localhost this was not
    a problem; however, on the DigitalOcean-hosted instance, we were exposing our
    Docker server to the internet.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是安全性。正如你可能注意到的，当 Docker Machine 启动我们的 Docker 主机时，它不仅生成了一个 SSH 密钥，还生成了证书，并用这些证书配置了
    Docker 服务器组件，这意味着我们的本地 Docker 客户端可以与主机交互。现在，对于本地主机来说这并不成问题；然而，在 DigitalOcean 托管的实例上，我们将
    Docker 服务器暴露在互联网上。
- en: While it was securely configured, if there were ever to be a zero-day exploit
    with the version of Docker that was installed we could end up with a few problems,
    as untrusted third parties may be able to take over our Docker installation. Because
    of this, I would recommend only using Docker Machine to quickly spin up an instance,
    test something, and then spin the instance down.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它已经被安全配置，但如果安装的 Docker 版本出现零日漏洞，我们可能会遇到一些问题，因为不受信任的第三方可能会接管我们的 Docker 安装。因此，我建议只使用
    Docker Machine 快速启动一个实例，测试某些内容，然后再关闭实例。
- en: We will be looking at some better options for running containerized applications
    on clouds in [*Chapter 10*](B15659_10_Final_JM_ePub.xhtml#_idTextAnchor277), *Running
    Docker in Public Clouds,* and [*Chapter 13*](B15659_13_Final_JM_ePub.xhtml#_idTextAnchor626),
    *Running Kubernetes in Public Clouds*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第 10 章*](B15659_10_Final_JM_ePub.xhtml#_idTextAnchor277)《在公共云中运行 Docker》和[*第
    13 章*](B15659_13_Final_JM_ePub.xhtml#_idTextAnchor626)《在公共云中运行 Kubernetes》中，探讨一些更好的在云上运行容器化应用程序的选项。
- en: Let's now look at a few alternatives to using Docker Machine to launch a local
    Docker host.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下使用 Docker Machine 启动本地 Docker 主机的几个替代方案。
- en: Using Vagrant and Multipass to launch local Docker hosts
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vagrant 和 Multipass 启动本地 Docker 主机
- en: Before we finish the chapter, we are going to look at two different tools that
    can be used to launch a machine locally, and then provision and configure a local
    Docker host for you to experiment with in later chapters.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成本章之前，我们将介绍两种不同的工具，这些工具可以用来本地启动一台机器，然后为你在后续章节中实验配置一个本地的 Docker 主机。
- en: Introducing and using Vagrant
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍和使用 Vagrant
- en: Vagrant, by **HashiCorp**, is the granddaddy of host management tools. First
    released in early 2010, what started as a side project for **Mitchell Hashimoto**
    has turned into a quite important piece of software in modern software development
    as it allows developers to quickly and easily launch and remove local VMs for
    use as development environments. In May 2014, version 1.6 was released, which
    introduced support for Docker.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant是**HashiCorp**出品的宿主机管理工具的鼻祖。它最早发布于2010年初，最初作为**Mitchell Hashimoto**的一个副项目，如今已经成为现代软件开发中一个非常重要的工具，允许开发者快速轻松地启动和移除本地虚拟机，作为开发环境使用。2014年5月，Vagrant
    1.6版本发布，新增了对Docker的支持。
- en: 'The installation differs slightly depending on your operating system. If you
    are running macOS, then you can use Homebrew and Cask. The command to use these
    is shown in the following code snippet:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程根据操作系统的不同有所差异。如果你使用的是macOS，可以通过Homebrew和Cask来安装。使用这些工具的命令如下所示：
- en: '[PRE25]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[Windows and Linux users can download](https://www.vagrantup.com/downloads.html)
    the installers from [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html).
    There, you can find both 32-bit and 64-bit `MSI`, `deb`, and `RPM` packages for
    your preferred operating system, as well as 64-bit static binaries for macOS and
    Linux if you would prefer not to use a package manager.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[Windows 和 Linux 用户可以下载](https://www.vagrantup.com/downloads.html)安装程序，下载链接为[https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)。在这里，你可以找到适合你操作系统的32位和64位`MSI`、`deb`和`RPM`安装包，也可以选择64位的静态二进制文件，适用于macOS和Linux，如果你不想使用包管理器的话。'
- en: Vagrant uses a `Vagrantfile`, which defines what the VM looks like; the machines
    themselves, packaged up into a format called a Vagrant Box—a box containing the
    machine image; and also, the metadata needed to launch the host using VirtualBox,
    VMWare, or any other supported hypervisor or cloud service. Boxes are typically
    downloaded from Vagrant Cloud and are created by another HashiCorp product called
    **Packer**.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant使用`Vagrantfile`，它定义了虚拟机的配置；机器本身被打包成一种叫做Vagrant Box的格式——一个包含机器镜像的盒子；此外，还包括启动宿主机所需的元数据，这些宿主机可以是VirtualBox、VMWare或任何其他支持的虚拟化工具或云服务。Vagrant
    Box通常从Vagrant Cloud下载，并由另一个HashiCorp产品**Packer**创建。
- en: 'To create a `Vagrantfile`, you can simply run the following command in a folder
    in which you wish to store the files relating to your Vagrant Box:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个`Vagrantfile`，你只需在你想存储Vagrant Box相关文件的文件夹中运行以下命令：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The default `Vagrantfile` is heavily commented; however, the majority of the
    options are commented out. Removing these gives us something that should look
    like the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`Vagrantfile`注释非常多；不过，大部分选项都被注释掉了。去掉这些注释后，Vagrantfile应该看起来像下面这样：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As you can see, there isn''t much to it and there certainly isn''t anything
    to do with Docker, so let''s fix that. Update the `Vagrantfile` so that it looks
    like the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个过程其实并不复杂，也与Docker没有太多关系。那么我们来修正一下。更新`Vagrantfile`，使其如下所示：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once updated, run the following command and wait:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 更新完成后，运行以下命令并等待：
- en: '[PRE29]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you don''t already have the `ubuntu/bionic64` box downloaded, then Vagrant
    will download that for you. Once downloaded, it will launch a VM in VirtualBox,
    which is its default provider. You should see something like the following as
    an output:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有下载`ubuntu/bionic64`盒子，Vagrant会自动为你下载。下载完成后，它会在VirtualBox中启动一个虚拟机，这是Vagrant的默认提供者。你应该会看到如下输出：
- en: '[PRE30]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Once the VM has booted, Vagrant will SSH into the machine and replace the default
    Vagrant key file with a more secure self-generated one, as illustrated in the
    following code snippet:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦虚拟机启动，Vagrant将通过SSH连接到机器，并用一个更安全的自生成密钥文件替换默认的Vagrant密钥文件，具体过程如下所示：
- en: '[PRE31]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now that the SSH key is secure, Vagrant will check that the VM is running the
    VirtualBox guest additions. These will allow it to share your local machine''s
    filesystem with the VM. The process is illustrated in the following code snippet:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在SSH密钥已经安全，Vagrant会检查虚拟机是否安装了VirtualBox来宾附加工具。这些工具允许虚拟机共享你本地机器的文件系统。这个过程如下所示：
- en: '[PRE32]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The final step is to run the provisioner we added to our `Vagrantfile`, as
    follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是运行我们在`Vagrantfile`中添加的配置工具，具体如下：
- en: '[PRE33]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'So, we now have an Ubuntu 18.04 (Bionic Beaver) VM with Docker installed. To
    access the VM, simply run the following command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经有了一个安装了Docker的Ubuntu 18.04（Bionic Beaver）虚拟机。要访问虚拟机，只需运行以下命令：
- en: '[PRE34]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will open an SSH session to the VM. From there, you can use Docker, as
    we have been doing when running it locally. See the following terminal output
    for an example:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Logging in to our Vagrant Box and interacting with Docker'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.09_B15659.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – Logging in to our Vagrant Box and interacting with Docker
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have finished with the VM, type `exit` to return to your host machine''s
    Command Prompt, and then run the following command to terminate the VM:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This will remove all of the resources associated with the VM. You will see
    the following messages:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Should you wish to just stop the VM, you can use the following commands to
    stop and start it:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now that we have learned how to create a VM and provision Docker using Vagrant,
    let's look at an alternative called **Multipass**.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Introducing and using Multipass
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Multipass** is a tool provided by *Canonical*, the makers of Ubuntu, to quickly
    launch and manage multiple Ubuntu VMs locally. It works slightly differently from
    Vagrant in that rather than defaulting to using VirtualBox, it will use your operating
    system''s default hypervisor. Where one is not available, as with non-Professional
    versions of Windows 10, it has the ability to fall back to using VirtualBox—more
    on that in a moment.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Multipass on macOS, you can run the following command, which again
    uses Homebrew and Cask:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To install on an existing Ubuntu desktop, you can use the Snap package manager
    by running the following command:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Finally, to install on Windows, you can download the installer from the project's
    release page at GitHub, where you will also find the macOS installer, at [https://github.com/canonical/multipass/releases](https://github.com/canonical/multipass/releases).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, if you need to use VirtualBox over your local machine''s native
    hypervisor, you can run the following command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now that we have Multipass and installed, and—if needed—configured to use VirtualBox,
    we can start a VM up and install Docker. To launch a VM, simply run the following
    command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Once launched, we can run the following command to bootstrap Docker onto the
    newly created VM:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This will download and install the latest community version of Docker. Once
    installed, it will then add the `ubuntu` user to the `docker` group, meaning that
    when connected to the VM we will be ready to use Docker straight away. You will
    see the output of the commands being executed during the installation, and, once
    complete, you will be returned to your local machine's shell.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect to the VM, run the following command:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Once connected, you will notice that by default, and as with our Vagrant VM,
    Multipass has downloaded and launched an `Ubuntu 18.04` (Bionic Beaver) VM. Once
    logged in, you will be able to run Docker commands as expected. The process is
    illustrated in the following screenshot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – SSHing to our Multipass VM and interacting with Docker'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.10_B15659.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 – SSHing to our Multipass VM and interacting with Docker
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'As with Vagrant, once you have finished, type in `exit`, and you will be returned
    to your local machine''s shell. To remove the `docker-host` VM and all of its
    resources, you can run the following command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'If you want to stop and start the VM, you can use the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: As you can see, using Multipass is a nice and simple way to both launch and
    interact with Ubuntu VMs locally on any host.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to use Docker Machine to create Docker hosts
    locally on VirtualBox and reviewed the commands you can use to both interact with
    and manage your Docker Machine-launched Docker hosts. We then looked at how to
    use Docker Machine to deploy Docker hosts to a cloud environment—namely, **DigitalOcean**.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed why using Docker Machine may also not be a great idea, depending
    on the age of your host machine. Because of this, we also discussed how to launch
    and configure a local Docker host using both **Vagrant** and **Multipass**.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: In later chapters, we are going to move away from interacting with a single
    Docker host and move on to launching and running multiple Docker hosts. However,
    before we do so, we are first going to move away from Linux-based containers and
    take a whistle-stop tour of Windows containers in the next chapter. Don't worry
    if you don't have a Windows-based host, as we will be using Vagrant to launch
    one.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which flag, when running `docker-machine create`, lets you define which service
    or provider Docker Machine uses to launch your Docker host?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Running `docker-machine env my-host` will reconfigure your local
    Docker client to interact with `my-host`.'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Multipass has native support for Docker out of the box.'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the HashiCorp tool that can be used to create Vagrant Boxes.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain why using Docker Machine to create Docker hosts in the cloud is no longer
    considered best practice.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For information on the various tools we have used and referred to in this chapter,
    refer to the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'Homebrew: [https://brew.sh](https://brew.sh)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cask: [https://github.com/Homebrew/homebrew-cask](https://github.com/Homebrew/homebrew-cask)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Git BASH for Windows: [https://gitforwindows.org](https://gitforwindows.org)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VirtualBox: [https://www.virtualbox.org](https://www.virtualbox.org)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Machine: [https://docs.docker.com/machine/](https://docs.docker.com/machine/)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Toolbox: [https://docs.docker.com/toolbox/overview/](https://docs.docker.com/toolbox/overview/)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DigitalOcean: [https://www.digitalocean.com/](https://www.digitalocean.com/)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vagrant: [https://www.vagrantup.com](https://www.vagrantup.com)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vagrant Cloud: [https://app.vagrantup.com/boxes/search](https://app.vagrantup.com/boxes/search)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Packer: [https://packer.io](https://packer.io)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HashiCorp: [https://www.hashicorp.com](https://www.hashicorp.com)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multipass: [https://multipass.run](https://multipass.run)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Snap: [https://snapcraft.io](https://snapcraft.io)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Canonical: [https://canonical.com](https://canonical.com)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Section 2**: Clusters and Clouds'
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be taking everything we have learned in the first part
    and applying it to the two main Docker clustering technologies, Docker Swarm and
    Kubernetes, as well as looking at running containers on public clouds.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'This section comprises the following chapters:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B15659_07_Final_JM_ePub.xhtml#_idTextAnchor216), *Moving from
    Linux to Windows Containers*'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B15659_08_Final_JM_ePub.xhtml#_idTextAnchor230), *Clustering
    with Docker Swarm*'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B15659_09_Final_JM_ePub.xhtml#_idTextAnchor261), *Portainer –
    A GUI for Docker*'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B15659_10_Final_JM_ePub.xhtml#_idTextAnchor277), *Running Docker
    in Public Clouds*'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B15659_11_Final_JM_ePub.xhtml#_idTextAnchor294), *Clustering
    with Docker and Kubernetes*'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B15659_12_Final_JM_ePub.xhtml#_idTextAnchor394), *Discovering
    Other Kubernetes Options*'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B15659_13_Final_JM_ePub.xhtml#_idTextAnchor626), *Running Kubernetes
    in Public Clouds*'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
