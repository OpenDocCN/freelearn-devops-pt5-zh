- en: '*Chapter 6*'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Machine, Vagrant, and Multipass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a deeper look at Docker Machine. It can be used
    to easily launch and bootstrap Docker hosts targeting various platforms, including
    locally or in a cloud environment. We will also look at both Vagrant and Multipass,
    which are alternatives that can be used to launch local Docker hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at what we will be covering in this chapter. We will be
    looking at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Docker Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying local Docker hosts with Docker Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching Docker hosts in the cloud using Docker Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Vagrant and Multipass to launch local Docker hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing and using Multipass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in previous chapters, we will continue to use our local Docker installations.
    Again, the screenshots in this chapter will be from my preferred operating system,
    macOS. We will be looking at how we can use Docker Machine to launch Docker-based
    **virtual machines** (**VMs**) locally using VirtualBox, as well as in public
    clouds, so you will need an account with DigitalOcean if you would like to follow
    along with the examples in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: As before, the Docker commands we will be running will work on all three operating
    systems on which we have installed Docker so far. However, some of the supporting
    commands, which will be few and far between, may only apply to macOS- and Linux-based
    operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Check out the following video to see the Code in Action:[https://bit.ly/2R6QQmd](https://bit.ly/2R6QQmd)
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Docker Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we roll our sleeves up and get stuck in with Docker Machine, we should
    take a moment to discuss what place it now occupies in the overall Docker ecosystem
    and what it actually is.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Machine's biggest strength was that it provided a consistent interface
    to several public cloud providers, such as **Amazon Web Services** (**AWS**),
    **DigitalOcean**, **Microsoft Azure**, and **Google Cloud**, as well as self-hosted
    VM/cloud platforms (including **OpenStack** and **VMware vSphere**) to quickly
    launch and configure individual Docker hosts. Being able to target all of these
    technologies using a single command with minimal user interaction is a very big-time
    saver. If you need to quickly access a Docker host in AWS one day and then in
    DigitalOcean the next, you know you are going to get a consistent experience.
  prefs: []
  type: TYPE_NORMAL
- en: Also, it allows you to launch a local Docker host, which was useful for operating
    systems such as the non-Professional versions of Windows 10, where Docker could
    natively run because of a lack of hypervisor support.
  prefs: []
  type: TYPE_NORMAL
- en: As with Docker Compose, it used to be bundled with Docker for Windows and Docker
    for Macâ€” however, this has been dropped from recent releases. This is due to there
    being less of a requirement for end users to launch and manage individual Docker
    hosts. Now, people are using clustering technologies such as Docker Swarm or Kubernetes,
    or using a cloud provider's native Docker-based hosted tools, all of which we
    are going to be covering in detail across the remaining chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A few of the tools we are going to be covering in this section of the chapter
    are now considered legacy, and support for them has started to be phased out.
    The reason they are mentioned is because for users with older hardware, they may
    the only way they can experience Docker.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to start by quickly discussing one of these legacy tools.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Machine using Docker Toolbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are running a version of macOS or Windows that does not support the versions
    of Docker for Windows and Docker for Mac we have been using in previous chapters,
    then you can download and install Docker Toolbox, which will install the Docker
    client, Docker Compose, and Docker Machine. You can download Docker Toolbox from
    [https://github.com/docker/toolbox/](https://github.com/docker/toolbox/)releases;
    however, please do not install it if you are already running Docker, as it may
    create conflicts and create problems with your existing installation.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Toolbox is now considered legacy, and the versions of Docker and the
    supporting tools that are installed are old; therefore, we will not be covering
    their installation here.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Machine using the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are already running Docker, before we can start using Docker Machine,
    we need to install it. Here is the command that you need to run to install Docker
    Machine on macOS and Linux, starting with macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You would use a similar command for Linux, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For Windows, the following command assumes that you have Git bash installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, all three commands are downloading an executable from the project's
    release page. To make sure that you are using the latest version, you can check
    [https://github.com/docker/machine/releases/](https://github.com/docker/machine/releases/).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have Docker Machine installed on your chosen operating system, we
    can start to deploy VMs that run Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying local Docker hosts with Docker Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we journey out into the cloud experience, we are going to look at the
    basics of Docker Machine locally by launching it, using Oracle VirtualBox to provide
    the VM.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox is a free virtualization product from Oracle. It allows you to install
    VMs across many different platforms and **central processing unit** (**CPU**)
    types. Download and install VirtualBox from [https://www.virtualbox.org/wiki/Downloads/](https://www.virtualbox.org/wiki/Downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the machine, all you need to do is run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will start the deployment, during which you will get a list of tasks that
    Docker Machine is running. To launch your Docker host, each host launched with
    Docker Machine goes through the same steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, Docker Machine runs a few basic checks, such as confirming that
    VirtualBox is installed, and creating certificates and a directory structure in
    which it will store all of its files and VMs, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It then checks for the presence of the image it will use for the VM. If it
    is not there, the image will be downloaded, as illustrated in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the checks have passed, it creates the VM using the selected driver, as
    illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, Docker Machine creates a unique **Secure Shell** (**SSH**)
    key for the VM. This means that you will be able to access the VM over SSH, but
    more on that later. Once the VM has booted, Docker Machine then makes a connection
    to the VM, as illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, Docker Machine detects the operating system being used and chooses
    the appropriate bootstrap script to deploy Docker. Once Docker is installed, Docker
    Machine generates and shares certificates between your localhost and the Docker
    host. It then configures the remote Docker installation for certificate authentication,
    meaning that your local client can connect to and interact with the remote Docker
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Docker is installed, Docker Machine generates and shares certificates
    between your localhost and the Docker host. It then configures the remote Docker
    installation for certificate authentication, meaning that your local client can
    connect to and interact with the remote Docker server. This is illustrated in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Finally, it checks whether your local Docker client can make the remote connection,
    and completes the task by giving you instructions on how to configure your local
    client to the newly launched Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open VirtualBox, you should be able to see your new VM, as illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 â€“ The Docker VM running in VirtualBox'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.01_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 â€“ The Docker VM running in VirtualBox
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to configure our local Docker client to connect to the newly
    launched Docker host; as already mentioned in the output of launching the host,
    running the following command will show you how to make the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This command returns the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This overrides the local Docker installation by giving the IP address and port
    number of the newly launched Docker host, as well as the path to the certificates
    used for authentication. At the end of the output, it gives you a command to run
    and to configure your Terminal session in order to make the connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we run the command, let''s run `docker version` to get information on
    the current setup, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 â€“ Checking the versions on Docker on my local installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.02_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 â€“ Checking the versions on Docker on my local installation
  prefs: []
  type: TYPE_NORMAL
- en: 'This is basically the Docker for Mac installation I am running. Running the
    following command and then `docker version` again should show some changes to
    the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command is given in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 â€“ Checking the versions of Docker on the new VM'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.03_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 â€“ Checking the versions of Docker on the new VM
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the server launched by Docker Machine is pretty much in line
    with what we have installed locally; in fact, the only difference is that it is
    a few minor versions behind. As you can see, the Docker Engine binary on my Docker
    for Mac installation is running version `19.03.8` and the Docker Machine launched
    host is running `19.03.5`.
  prefs: []
  type: TYPE_NORMAL
- en: From here, we can interact with the Docker host in the same way as if it were
    a local Docker installation. Before we move on to launching Docker hosts in the
    cloud, there are a few other basic Docker Machine commands to cover.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first command lists the currently configured Docker hosts, and is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 â€“ Listing the VMs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.04_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 â€“ Listing the VMs
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it lists details of the machine name, the driver used, and the
    Docker endpoint **Uniform Resource Locator** (**URL**), as well as the version
    of Docker the hosts are running.
  prefs: []
  type: TYPE_NORMAL
- en: You will also notice that there is a `*` in the `ACTIVE` column; this indicates
    which Docker host your local client is currently configured to interact with.
    You can also find out the active machine by running `docker-machine active`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next command connects you to the Docker host using SSH, and is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 â€“ Connecting to the VM using SSH'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.05_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 â€“ Connecting to the VM using SSH
  prefs: []
  type: TYPE_NORMAL
- en: 'This is useful if you need to install additional software or configuration
    outside of Docker Machine. It is also useful if you need to look at logs, and
    so on. You can exit the remote shell by running `exit`. You can find out the IP
    address of your Docker host by running the following command once back on your
    local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be using this command a lot throughout the chapter as part of other
    commands to get the IP addresses of our VMs. There are also commands for establishing
    more details about your Docker host, and these are shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, there are also commands to stop, start, restart, and remove your Docker
    host. Use the final command in the following code snippet to remove your locally
    launched host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the `docker-machine rm` command will prompt you to determine whether
    you really want to remove the instance, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have had a very quick rundown of the basics, let's try something
    more adventurous.
  prefs: []
  type: TYPE_NORMAL
- en: Launching Docker hosts in the cloud using Docker Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to take a look at just one of the public cloud
    drivers supported by Docker Machine. As already mentioned, there are plenty available,
    but part of the appeal of Docker Machine is that it offers consistent experiences,
    so there are not too many differences between the drivers.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to be launching a Docker host in **DigitalOcean** using Docker
    Machine. To do this, we need an **application programming interface** (**API**)
    access token with the necessary permissions to access and launch resources within
    your DigitalOcean account. Rather than explaining how to generate one here, you
    can follow the instructions at [https://www.digitalocean.com/help/api/.](https://www.digitalocean.com/help/api/.)
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Launching a Docker host using the API token will incur a cost; ensure you keep
    track of the Docker hosts you launch. Details on DigitalOcean's pricing can be
    found at [https://www.digitalocean.com/pricing/](https://www.digitalocean.com/pricing/).
    Also, keep your API token secret as it could be used to gain unauthorized access
    to your account. All of the tokens used in this chapter have been revoked.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we are going to do is set our token as an environment variable
    so that we don''t have to keep using it. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you replace the API token with your own.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Due to the additional flags that we need to pass to the `docker-machine` command,
    I will be using `/` to split the command across multiple lines to make it more
    readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to launch the Docker host in DigitalOcean is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As the Docker host is a remote machine, it will take a little while to launch,
    configure, and be accessible. As you can see from the following output, there
    are also a few changes to how Docker Machine bootstraps the Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once launched, you should be able to see the Docker host in your DigitalOcean
    control panel, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 â€“ Viewing the droplet in the DigitalOcean portal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.06_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 â€“ Viewing the droplet in the DigitalOcean portal
  prefs: []
  type: TYPE_NORMAL
- en: 'Reconfigure your local client to connect to the remote host by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Also, you can run `docker version` and `docker-machine inspect docker-digitalocean`
    to find out more information about the Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, running `docker-machine ssh docker-digitalocean` will SSH you into
    the host. As you can see from the following output, and also from the output when
    you first launched the Docker host, there is a difference in the operating system
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 â€“ SSHing into our DigitalOcean machine'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.07_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 â€“ SSHing into our DigitalOcean machine
  prefs: []
  type: TYPE_NORMAL
- en: You can exit the remote shell by running `exit`. As you can see, we didn't have
    to tell Docker Machine which operating system to use, the size of the Docker host,
    or even where to launch it. That is because each driver has some pretty sound
    defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding these defaults to our command makes it look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there is scope for you to customize the size, region, and operating
    system, and even the network your Docker host is launched with.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The command in the code snippet that follows will give an error if you have
    a droplet already launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we wanted to change the operating system and the size of the droplet.
    In this instance, we can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the **DigitalOcean** control panel, this launches a machine
    that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 â€“ Viewing the droplet with a different specification'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.08_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 â€“ Viewing the droplet with a different specification
  prefs: []
  type: TYPE_NORMAL
- en: 'You can remove the DigitalOcean Docker host by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: It will take a minute or two to properly remove the host.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Please double-check in the DigitalOcean portal that your host has been properly
    terminated; otherwise, you may incur unexpected costs.
  prefs: []
  type: TYPE_NORMAL
- en: That concludes our look at Docker Machine. Before we move on, let's discuss
    how secure it is.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Machine summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As already mentioned, Docker Machine is now considered a legacy tool. As well
    as the aforementioned reason that people no longer want to launch single Docker
    hosts, there are also some other reasons for the change in direction.
  prefs: []
  type: TYPE_NORMAL
- en: The most important one is security. As you may have noticed, when Docker Machine
    was launching our Docker hosts it generated not only an SSH key but also certificates,
    and then configured the Docker server component with these, meaning that our local
    Docker client could interact with the host. Now, with the localhost this was not
    a problem; however, on the DigitalOcean-hosted instance, we were exposing our
    Docker server to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: While it was securely configured, if there were ever to be a zero-day exploit
    with the version of Docker that was installed we could end up with a few problems,
    as untrusted third parties may be able to take over our Docker installation. Because
    of this, I would recommend only using Docker Machine to quickly spin up an instance,
    test something, and then spin the instance down.
  prefs: []
  type: TYPE_NORMAL
- en: We will be looking at some better options for running containerized applications
    on clouds in [*Chapter 10*](B15659_10_Final_JM_ePub.xhtml#_idTextAnchor277), *Running
    Docker in Public Clouds,* and [*Chapter 13*](B15659_13_Final_JM_ePub.xhtml#_idTextAnchor626),
    *Running Kubernetes in Public Clouds*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at a few alternatives to using Docker Machine to launch a local
    Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: Using Vagrant and Multipass to launch local Docker hosts
  prefs: []
  type: TYPE_NORMAL
- en: Before we finish the chapter, we are going to look at two different tools that
    can be used to launch a machine locally, and then provision and configure a local
    Docker host for you to experiment with in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing and using Vagrant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vagrant, by **HashiCorp**, is the granddaddy of host management tools. First
    released in early 2010, what started as a side project for **Mitchell Hashimoto**
    has turned into a quite important piece of software in modern software development
    as it allows developers to quickly and easily launch and remove local VMs for
    use as development environments. In May 2014, version 1.6 was released, which
    introduced support for Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation differs slightly depending on your operating system. If you
    are running macOS, then you can use Homebrew and Cask. The command to use these
    is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[Windows and Linux users can download](https://www.vagrantup.com/downloads.html)
    the installers from [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html).
    There, you can find both 32-bit and 64-bit `MSI`, `deb`, and `RPM` packages for
    your preferred operating system, as well as 64-bit static binaries for macOS and
    Linux if you would prefer not to use a package manager.'
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant uses a `Vagrantfile`, which defines what the VM looks like; the machines
    themselves, packaged up into a format called a Vagrant Boxâ€”a box containing the
    machine image; and also, the metadata needed to launch the host using VirtualBox,
    VMWare, or any other supported hypervisor or cloud service. Boxes are typically
    downloaded from Vagrant Cloud and are created by another HashiCorp product called
    **Packer**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a `Vagrantfile`, you can simply run the following command in a folder
    in which you wish to store the files relating to your Vagrant Box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The default `Vagrantfile` is heavily commented; however, the majority of the
    options are commented out. Removing these gives us something that should look
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there isn''t much to it and there certainly isn''t anything
    to do with Docker, so let''s fix that. Update the `Vagrantfile` so that it looks
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Once updated, run the following command and wait:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t already have the `ubuntu/bionic64` box downloaded, then Vagrant
    will download that for you. Once downloaded, it will launch a VM in VirtualBox,
    which is its default provider. You should see something like the following as
    an output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the VM has booted, Vagrant will SSH into the machine and replace the default
    Vagrant key file with a more secure self-generated one, as illustrated in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the SSH key is secure, Vagrant will check that the VM is running the
    VirtualBox guest additions. These will allow it to share your local machine''s
    filesystem with the VM. The process is illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step is to run the provisioner we added to our `Vagrantfile`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we now have an Ubuntu 18.04 (Bionic Beaver) VM with Docker installed. To
    access the VM, simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open an SSH session to the VM. From there, you can use Docker, as
    we have been doing when running it locally. See the following terminal output
    for an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 â€“ Logging in to our Vagrant Box and interacting with Docker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.09_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 â€“ Logging in to our Vagrant Box and interacting with Docker
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have finished with the VM, type `exit` to return to your host machine''s
    Command Prompt, and then run the following command to terminate the VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This will remove all of the resources associated with the VM. You will see
    the following messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Should you wish to just stop the VM, you can use the following commands to
    stop and start it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have learned how to create a VM and provision Docker using Vagrant,
    let's look at an alternative called **Multipass**.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing and using Multipass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Multipass** is a tool provided by *Canonical*, the makers of Ubuntu, to quickly
    launch and manage multiple Ubuntu VMs locally. It works slightly differently from
    Vagrant in that rather than defaulting to using VirtualBox, it will use your operating
    system''s default hypervisor. Where one is not available, as with non-Professional
    versions of Windows 10, it has the ability to fall back to using VirtualBoxâ€”more
    on that in a moment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Multipass on macOS, you can run the following command, which again
    uses Homebrew and Cask:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To install on an existing Ubuntu desktop, you can use the Snap package manager
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Finally, to install on Windows, you can download the installer from the project's
    release page at GitHub, where you will also find the macOS installer, at [https://github.com/canonical/multipass/releases](https://github.com/canonical/multipass/releases).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, if you need to use VirtualBox over your local machine''s native
    hypervisor, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have Multipass and installed, andâ€”if neededâ€”configured to use VirtualBox,
    we can start a VM up and install Docker. To launch a VM, simply run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Once launched, we can run the following command to bootstrap Docker onto the
    newly created VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This will download and install the latest community version of Docker. Once
    installed, it will then add the `ubuntu` user to the `docker` group, meaning that
    when connected to the VM we will be ready to use Docker straight away. You will
    see the output of the commands being executed during the installation, and, once
    complete, you will be returned to your local machine's shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect to the VM, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Once connected, you will notice that by default, and as with our Vagrant VM,
    Multipass has downloaded and launched an `Ubuntu 18.04` (Bionic Beaver) VM. Once
    logged in, you will be able to run Docker commands as expected. The process is
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 â€“ SSHing to our Multipass VM and interacting with Docker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.10_B15659.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 â€“ SSHing to our Multipass VM and interacting with Docker
  prefs: []
  type: TYPE_NORMAL
- en: 'As with Vagrant, once you have finished, type in `exit`, and you will be returned
    to your local machine''s shell. To remove the `docker-host` VM and all of its
    resources, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to stop and start the VM, you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, using Multipass is a nice and simple way to both launch and
    interact with Ubuntu VMs locally on any host.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to use Docker Machine to create Docker hosts
    locally on VirtualBox and reviewed the commands you can use to both interact with
    and manage your Docker Machine-launched Docker hosts. We then looked at how to
    use Docker Machine to deploy Docker hosts to a cloud environmentâ€”namely, **DigitalOcean**.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed why using Docker Machine may also not be a great idea, depending
    on the age of your host machine. Because of this, we also discussed how to launch
    and configure a local Docker host using both **Vagrant** and **Multipass**.
  prefs: []
  type: TYPE_NORMAL
- en: In later chapters, we are going to move away from interacting with a single
    Docker host and move on to launching and running multiple Docker hosts. However,
    before we do so, we are first going to move away from Linux-based containers and
    take a whistle-stop tour of Windows containers in the next chapter. Don't worry
    if you don't have a Windows-based host, as we will be using Vagrant to launch
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which flag, when running `docker-machine create`, lets you define which service
    or provider Docker Machine uses to launch your Docker host?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Running `docker-machine env my-host` will reconfigure your local
    Docker client to interact with `my-host`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Multipass has native support for Docker out of the box.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the HashiCorp tool that can be used to create Vagrant Boxes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain why using Docker Machine to create Docker hosts in the cloud is no longer
    considered best practice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For information on the various tools we have used and referred to in this chapter,
    refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Homebrew: [https://brew.sh](https://brew.sh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cask: [https://github.com/Homebrew/homebrew-cask](https://github.com/Homebrew/homebrew-cask)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Git BASH for Windows: [https://gitforwindows.org](https://gitforwindows.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VirtualBox: [https://www.virtualbox.org](https://www.virtualbox.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Machine: [https://docs.docker.com/machine/](https://docs.docker.com/machine/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Toolbox: [https://docs.docker.com/toolbox/overview/](https://docs.docker.com/toolbox/overview/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DigitalOcean: [https://www.digitalocean.com/](https://www.digitalocean.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vagrant: [https://www.vagrantup.com](https://www.vagrantup.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vagrant Cloud: [https://app.vagrantup.com/boxes/search](https://app.vagrantup.com/boxes/search)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Packer: [https://packer.io](https://packer.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HashiCorp: [https://www.hashicorp.com](https://www.hashicorp.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multipass: [https://multipass.run](https://multipass.run)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Snap: [https://snapcraft.io](https://snapcraft.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Canonical: [https://canonical.com](https://canonical.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Section 2**: Clusters and Clouds'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be taking everything we have learned in the first part
    and applying it to the two main Docker clustering technologies, Docker Swarm and
    Kubernetes, as well as looking at running containers on public clouds.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B15659_07_Final_JM_ePub.xhtml#_idTextAnchor216), *Moving from
    Linux to Windows Containers*'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B15659_08_Final_JM_ePub.xhtml#_idTextAnchor230),Â *Clustering
    with Docker Swarm*'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B15659_09_Final_JM_ePub.xhtml#_idTextAnchor261),Â *Portainer â€“
    A GUI for Docker*'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B15659_10_Final_JM_ePub.xhtml#_idTextAnchor277), *Running Docker
    in Public Clouds*'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B15659_11_Final_JM_ePub.xhtml#_idTextAnchor294), *Clustering
    with Docker and Kubernetes*'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B15659_12_Final_JM_ePub.xhtml#_idTextAnchor394), *Discovering
    Other Kubernetes Options*'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B15659_13_Final_JM_ePub.xhtml#_idTextAnchor626), *Running Kubernetes
    in Public Clouds*'
  prefs: []
  type: TYPE_NORMAL
