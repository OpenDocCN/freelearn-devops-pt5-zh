- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Execution Environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how Ansible Automation Controller enables you to scale your automation
    by leveraging an easy-to-use web interface, RBAC, and logging to allow other people
    to use the automation in a way that conforms to your company’s rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss execution environments, a feature of Ansible
    that was released a few years ago, but it is critical to create automation that
    lasts. More specifically, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of execution environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an execution environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running playbooks in an execution environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading execution environments to a container registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using execution environments in the automation controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow this chapter’s examples, you will need `ansible-builder` version 3.0
    or later.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Builder requires Python 3.8 or higher, which you probably have already
    installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to install `ansible-builder` is to use PyPi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The importance of execution environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first question you might have is, why do we need an execution environment
    in the first place?
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three reasons why execution environments can simplify your life:'
  prefs: []
  type: TYPE_NORMAL
- en: They allow better scalability by being distributed to multiple machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They allow you to freeze all dependencies to specific versions so that you can
    run the same playbook in five years, with the certainty that it will run exactly
    as you expect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They allow you to use different ones for different playbooks so that you can
    decide when to upgrade each playbook runtime, independently from the others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, how do execution environments achieve all this? They do so by leveraging
    containers. In fact, execution environments are containers that contain at least
    the Ansible runner and the required libraries to run. In addition, execution environments
    might also include an Ansible collection and many other components that are needed
    to run your automation.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have understood the importance of execution environments, let’s
    look at how to build your first execution environment.
  prefs: []
  type: TYPE_NORMAL
- en: Building an execution environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create an execution environment, we will need a definition file. There are
    three versions of the definition file, and based on the version of `ansible-builder`,
    some versions might not be available to you. Let’s be more specific:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible-builder` versions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-builder` versions 1.2 and higher'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible-builder` versions 3.0 and higher'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since version 3 of the definition is the easiest to learn and use, all examples
    will use this version.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with a minimal example and then build on it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a minimal execution environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create an execution environment, we need to create a YAML file. By default,
    `ansible-builder` will be looking for the file named `execution-environment.yml`.
    Although different names can be used and `ansible-builder` can be informed using
    the `-f FILENAME` flag, we will stick with the default name in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will, therefore, create the `minimal/execution-environment.yml` file with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Before running it, I want to go through it so that it is clear what every line
    does.
  prefs: []
  type: TYPE_NORMAL
- en: The first line is the YAML file starter (`---`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The second line (`version: 3`) declares that the file is written following
    the third version of the execution environment definition file. This is important
    to specify because if it is absent, the default is version 1, which is very different
    from version 3.'
  prefs: []
  type: TYPE_NORMAL
- en: We then see the `images` block. In this block, we can define the `base_image`,
    using the `name` key to indicate the full container name and tag. Both the container’s
    name and tag are required. In our case, we will use CentOS Stream 9 as a base
    image.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we find the `dependencies` block. This block allows us to define what
    `ansible-builder` should add to the image. Even though we will see that we can
    use this section for much more than what we used it for in this example, we always
    need to define `ansible_core` and `ansible_runner`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to enter the `minimal` folder and run `ansible-builder` to
    build the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We expect the following result if everything went as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You have just built your first Ansible execution environment!
  prefs: []
  type: TYPE_NORMAL
- en: Before starting to use the execution environment, we will see how to build more
    complex execution environments.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an execution environment with a specific Python interpreter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen how to create an execution environment based on CentOS Stream 9
    with just Ansible and Ansible Runner.
  prefs: []
  type: TYPE_NORMAL
- en: As you surely know by now, Ansible is written in Python, as are the majority
    of Ansible modules. In our previous example, the default Python was installed
    (3.9), which is great for the majority of cases. However, some modules or libraries
    might require a specific version of Python, so in those cases, we will need to
    instruct `ansible-builder` to install the Python version we want forcefully.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we can create the `python/execution-environment.yml` file with the
    following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we added a `python_interpreter` directive in the `dependencies`
    section, and we specified that we want the `python3.11` package installed from
    the system’s package manager (`dnf`, in our case). We also specified what the
    path of the installed binary will be to ensure that Ansible will use this version
    and not other versions that might be present in the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to enter the `python` folder and run `ansible-builder` to
    build the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We expect the following result if everything went as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You have just created your first execution environment with
    Python 3.11! Let’s now explore how we can add additional dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an execution environment with additional dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many different ways to add a dependency on a regular system. In the
    same way, we will be able to add different kinds of dependencies in execution
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three ways we can install dependencies in the execution environments are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`python`: This option allows you to install Python dependencies from PyPi'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system`: This option allows you to install dependencies from an operating
    system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`galaxy`: This option allows you to install Ansible dependency from Ansible
    Galaxy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although it is possible to pass dependencies files, it is usually preferable
    to put them directly inline so that the whole description of the execution environment
    is in a single file and is easier to follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s suppose we want to create an execution environment that has a couple
    of collections (`ansible.utils` and `community.windows`) and the `ping` command.
    In this case, we can create a `dependencies/execution-environment.yml` file with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we added the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The Python `pywinrm` package, which is required by `community.windows`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `iputils` package via RPM, which provides the `ping` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `community.windows` collection that we wanted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ansible.utils` collection that we wanted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can now proceed to enter the `dependencies` folder and build the execution
    environments as we did previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We expect the following result if everything went as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You have now built an execution environment that can be used for more complex
    playbooks!
  prefs: []
  type: TYPE_NORMAL
- en: Our exploration of the execution environments descriptor file ends here, but
    you can refer to the official documentation to discover all available options.
  prefs: []
  type: TYPE_NORMAL
- en: Running playbooks in an execution environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have explored how to create execution environments, we can start
    using them. The first thing we will do is check the Ansible and Python versions.
  prefs: []
  type: TYPE_NORMAL
- en: To execute commands and Playbooks in execution environments, we can use `ansible-navigator`.
    To install it, we can execute `$ pip` `install ansible-navigator`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The equivalent of the `ansible --version` command in the `minimal-ee` is the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the biggest difference is the addition of `--eei minimal-ee`,
    which tells `ansible-navigator` which execution environment image to use, and
    running it will return the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can run the same command for the Python execution environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the Ansible version is the same, since we required the same
    version while creating the two images. Conversely, the Python version differs,
    since in the Python execution environment, we force version 3.11, while in the
    minimal one, we used the default one (3.9).
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can execute Ansible playbooks as well. Firstly, we will need
    a playbook, and for this example, we will create a very simple ping one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need a straightforward `inventory` file with just `localhost`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now proceed with the execution command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As you have probably already predicted, the result is very similar to what
    we would have if the command was executed outside execution environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Although it is possible to use execution environments in this way, they are
    usually uploaded to a container registry and used from AWX or Ansible Controller.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to upload those execution environments
    to a container registry.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading execution environments to a container registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed, execution environments are packaged in the container image format
    to allow more flexibility. This means that we can upload an execution environment
    to any container registry. In enterprise settings, Ansible Automation Hub is usually
    used, since it is a tool very similar to Ansible Galaxy that can be installed
    in the private company network, and it hosts Ansible collections and execution
    environments. Companies often prefer Ansible Automation Hub, since it integrates
    a lot of nice features, such as synchronization with Ansible Galaxy. If you have
    an Ansible Automation Hub available, you can use it to follow the following steps.
    Otherwise, you can use any other container registry.
  prefs: []
  type: TYPE_NORMAL
- en: I will use `quay.io`, but the same steps apply to any other container registry.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure your Podman is properly logged into your container registry of choice.
    You can use `podman login` to perform the login if you are not logged in yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to do is to find the image ID of the image we want to push.
    To do so, we can run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The third column is the image ID, so we can instruct Podman to push it to our
    container registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Once the execution has finished, you can go to the container registry and check
    that the image arrived as expected.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to use this execution environment image in our AWX or Ansible
    Automation Controller.
  prefs: []
  type: TYPE_NORMAL
- en: Using execution environments in Ansible Automation Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Ansible execution environments in Ansible Automation Controller is very
    straightforward, since it always uses an execution environment while executing
    Playbooks. The only difference is whether it is the default execution environment
    or the one that you built and specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will need to do is add a new execution environment to Ansible
    Automation Controller or AWX. To do so, you need to go to execution environments
    in the navigation bar in the **Administration** section, and then click on the
    **Add** button. You can now fill in the name and the image URL and select **Always
    pull container before running.** as the **Pull** option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Creating a new execution environment window](img/B20846_14_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – Creating a new execution environment window
  prefs: []
  type: TYPE_NORMAL
- en: 'After saving the execution environment by pressing **Save**, you can go to
    **Templates** in the navigation bar under **Resources** and create a new job template,
    or modify the one you already have. Once you are on the **Job Template** edit
    or create page, you can set the execution environment as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – The field to choose an execution environment in the job template](img/B20846_14_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – The field to choose an execution environment in the job template
  prefs: []
  type: TYPE_NORMAL
- en: You can now save the job template and execute it. This time, it was executed
    in the execution environment we created!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started this chapter by seeing why execution environments can help you to
    create a more resilient automation solution in your environment. We then moved
    on to a more practical section in which you created multiple execution environments,
    firstly a minimal one, then one with a customized version of Python, and finally,
    one with some collections and other dependencies embedded. We then used those
    execution environments locally using `ansible-navigator`. We then uploaded them
    to a container registry and used them from Ansible Automation Controller or AWX.
  prefs: []
  type: TYPE_NORMAL
- en: We have now reached the end of this book, since this is the last chapter, and
    I would like to thank you for reading the entire book. I hope that it has taught
    you what you initially hoped to learn about Ansible, and more!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ansible uses the standard container image format for execution environments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is an advantage of Ansible execution environments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They run Ansible playbooks without Ansible
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: They guarantee the exact versions of Ansible, the dependencies, and the collections
    on every run
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: They increase performance
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the latest execution environment definition version?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '1'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '2'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '3'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '4'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ansible Builder documentation: [https://ansible.readthedocs.io/projects/builder/en/stable/usage/](https://ansible.readthedocs.io/projects/builder/en/stable/usage/%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ansible Navigator documentation: [https://ansible.readthedocs.io/projects/navigator/](https://ansible.readthedocs.io/projects/navigator/%0D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execution environment version 3 specification: [https://ansible.readthedocs.io/projects/builder/en/stable/definition/#version-3-format](https://ansible.readthedocs.io/projects/builder/en/stable/definition/#version-3-format)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B20846_01.xhtml#_idTextAnchor015)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A, B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B20846_02.xhtml#_idTextAnchor099)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B20846_03.xhtml#_idTextAnchor158)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B20846_04.xhtml#_idTextAnchor207)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B20846_05.xhtml#_idTextAnchor279)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B20846_06.xhtml#_idTextAnchor318)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B20846_07.xhtml#_idTextAnchor343)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B20846_08.xhtml#_idTextAnchor347)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B20846_09.xhtml#_idTextAnchor378)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B20846_10.xhtml#_idTextAnchor423)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B20846_11.xhtml#_idTextAnchor456)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B20846_12.xhtml#_idTextAnchor523)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B20846_13.xhtml#_idTextAnchor562)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A,B,C,E
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B20846_14.xhtml#_idTextAnchor592)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
