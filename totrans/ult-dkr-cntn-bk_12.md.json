["```\n$ cd ~/The-Ultimate-Docker-Container-Book\n```", "```\n$ mkdir ch12 && cd ch12\n```", "```\n    \"log-driver\": \"json-file\"\n    ```", "```\n{  ...\n  \"experimental\": true,\n  \"features\": {\n    \"buildkit\": true\n  },\n  \"metrics-addr\": \"127.0.0.1:9323\",\n  \"log-driver\": \"json-file\"\n}\n```", "```\ndocker run --log-driver=json-file <image_name>\n```", "```\n{  ...\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"5\"\n  }\n}\n```", "```\ndocker run --log-driver=json-file \\    --log-opt max-size=10m \\\n    --log-opt max-file=5 \\\n    <image_name>\n```", "```\n    filebeat.inputs:- type: container  paths:    - '/var/lib/docker/containers/*/*.log'\n    ```", "```\n    output.elasticsearch:  hosts: [\"<elasticsearch_host>:<elasticsearch_port>\"]\n    ```", "```\n    $  sudo systemctl enable filebeat$  sudo systemctl start filebeat\n    ```", "```\n    $ npm init\n    ```", "```\n    $ npm install --save express\n    ```", "```\n$ chmod +x ./entrypoint.sh\n```", "```\n    $ docker compose build app\n    ```", "```\n    $ docker compose up --detach\n    ```", "```\nfilter {  if [loglevel] == \"ERROR\" {\n    mutate {\n      add_tag => [\"error\"]\n    }\n  }\n}\n```", "```\ndocker restart logstash\n```", "```\n    git clone https://github.com/Yelp/elastalert.gitcd elastalert\n    ```", "```\n    pip install elastalert\n    ```", "```\n    es_host: host.docker.internales_port: 9200rules_folder: rulesrun_every:  minutes: 1buffer_time:  minutes: 15alert_time_limit:  days: 2\n    ```", "```\n    name: Error Logsindex: logstash-*type: frequencynum_events: 1timeframe:  minutes: 1filter:- term:    tags: \"error\"alert:- \"email\"email:- \"you@example.com\"\n    ```", "```\n    elastalert --config config.yaml --verbose\n    ```", "```\n    log stream --predicate 'senderImagePath CONTAINS \"Docker\"'\n    ```", "```\n    log show --predicate 'senderImagePath CONTAINS \"Docker\"' \\    --style syslog --info \\    --last 1d > docker_daemon_logs.log\n    ```", "```\n    C:\\ProgramData\\DockerDesktop\\service\n    ```", "```\n    Get-Content -Path \"C:\\ProgramData\\DockerDesktop\\service\\DockerDesktopVM.log\" -Tail 50\n    ```", "```\n    mkdir metrics\n    ```", "```\n    version: '3.8'services:  cadvisor:    image: gcr.io/cadvisor/cadvisor:v0.45.0    container_name: cadvisor    restart: always    ports:    - 8080:8080    volumes:    - /:/rootfs:ro    - /var/run:/var/run:rw    - /sys:/sys:ro    - /var/lib/docker/:/var/lib/docker:ro\n    ```", "```\n    docker compose up cadvisor --detach\n    ```", "```\n    global:  scrape_interval: 15sscrape_configs:  - job_name: 'prometheus'    static_configs:      - targets: ['localhost:9090']  - job_name: 'cadvisor'    static_configs:      - targets: ['host.docker.internal:8080']\n    ```", "```\n    prometheus:  image: prom/prometheus:latest  container_name: prometheus  restart: always  ports:    - 9090:9090  volumes:    - ./prometheus:/etc/prometheus    - prometheus_data:/prometheus\n    ```", "```\n    volumes:  prometheus_data:\n    ```", "```\ndocker compose down -v\n```", "```\nimplementation(\"org.springframework.boot:spring-boot-starter-web\")implementation(\"org.springframework.boot:spring-boot-starter-actuator\")\nimplementation(\"io.micrometer:micrometer-registry-prometheus\")\n```", "```\nserver.port=7000\n```", "```\nmanagement.endpoints.web.exposure.include=health,info,metrics,prometheus\n```", "```\nversion: '3.8'services:\n  # ... other services (Elasticsearch, Logstash, Kibana, etc.) ...\n  kotlin-spring-boot-api:\n    build: ./kotlin-api\n    container_name: kotlin-spring-boot-api\n    ports:\n      - 7000:7000\n```", "```\n- job_name: 'kotlin-api'  static_configs:\n    - targets: ['host.docker.internal:7000']\n  metrics_path: /actuator/prometheus\n```", "```\n    grafana:  image: grafana/grafana:latest  container_name: grafana  restart: always  ports:    - 3000:3000  volumes:    - grafana_data:/var/lib/grafana\n    ```", "```\n    docker compose up --detach\n    ```"]