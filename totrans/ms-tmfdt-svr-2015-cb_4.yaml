- en: Chapter 4. Building Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"Measuring programming progress by lines of code is like measuring aircraft
    building progress by weight."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Bill Gates* |'
  prefs: []
  type: TYPE_TB
- en: 'TFS has introduced a new build system in TFS 2015 called TFBuild. In this chapter,
    you''ll learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring TFBuild Agent, Pool, and Queues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a TFBuild Agent using an unattended installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a continuous integration build definition in TFBuild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pinning a build badge to the welcome page in Team Portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing build resources using role-based access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the build retention policy to automate build deletion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using user capabilities to identify a build agent in a pool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version DLLs in build output with build number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new build task using the TFBuild Extensibility framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating SonarQube with TFBuild to manage technical debt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building GitHub code repositories with TFBuild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a developer, compiling code and running unit tests gives you an assurance
    that your code changes haven't had an impact on the existing codebase. Integrating
    your code changes into the source control repository enables other users to validate
    their changes with yours. As a best practice, Teams integrate changes into the
    shared repository several times a day to reduce the risk of introducing breaking
    changes or worse, overwriting each other's.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Continuous integration** (**CI**) is a development practice that requires
    developers to integrate code into a shared repository several times a day. Each
    check-in is verified by an automated build, allowing Teams to detect problems
    early.'
  prefs: []
  type: TYPE_NORMAL
- en: The automated build that runs as part of the CI process is often referred to
    as the CI build. There isn't a clear definition of what the CI build should do,
    but at the very minimum, it is expected to compile code and run unit tests. Running
    the CI build on a non-developer remote workspace helps identify the dependencies
    that may otherwise go unnoticed into the release process. We can talk endlessly
    about the benefits of CI; the key here is that it enables you to have potentially
    deployable software at all times.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Deployable software is the most tangible asset to customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving from concept to application, in this chapter, you''ll learn how to leverage
    the build tooling in TFS to set up a quality-focused CI process. But first, let''s
    have a little introduction to the build system in TFS. The following image illustrates
    the three generations of build systems in TFS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00544.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: TFS has gone through three generations of build systems. The very first was
    MSBuild using XML for configuration; the next one was XAML using Windows Workflow
    Foundation for configuration, and now, there's TFBuild using JSON for configuration.
    The XAML-based build system will continue to be supported in TFS 2015\. No automated
    migration path is available from XAML build to TFBuild. This is generally because
    of the difference in the architecture between the two build systems.
  prefs: []
  type: TYPE_NORMAL
- en: The new build system in TFS is called **Team Foundation Build** (**TFBuild**).
    It is an extensible task-based execution system with a rich web interface that
    allows authoring, queuing, and monitoring builds. TFBuild is fully cross platform
    with the underlying build agents that are capable of running natively on both
    Windows and non-Windows platforms. TFBuild provides out-of-the-box integration
    with Centralized Version Control such as TFVC and Distributed Version Controls
    such as Git and GitHub. TFBuild supports building .NET, Java, Android, and iOS
    applications. All the recipes in this chapter are based on TFBuild.
  prefs: []
  type: TYPE_NORMAL
- en: 'TFBuild is a task orchestrator that allows you to run any build engine, such
    as Ant, CMake, Gradle, Gulp, Grunt, Maven, MSBuild, Visual Studio, Xamarin, XCode,
    and so on. TFBuild supports Work Item integration, publishing drops, and publishing
    test execution results into the TFS that is independent of the build engine that
    you choose. The build agents are xCopyable and do not require any installation.
    The agents are auto-updating in nature; there''s no need to update every agent
    in your infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00545.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'TFBuild offers a rich web-based interface. It does not require Visual Studio
    to author or modify a build definition. From simple to complex, all build definitions
    can easily be created in the web portal. The web interface is accessible from
    any device and any platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00546.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The build definition can be authored from the web portal directly
  prefs: []
  type: TYPE_NORMAL
- en: 'A build definition is a collection of tasks. A task is simply a build step.
    Build definition can be composed by dragging and dropping tasks. Each task supports
    **Enabled**, **Continue on error**, and **Always run** flags making it easier
    to manage build definitions as the task list grows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00547.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The build system supports invoking PowerShell, batch, command line, and shell
    scripts. All out-of-the-box tasks are open source. If a task does not satisfy
    your requirements, you can download the task from GitHub at [https://github.com/Microsoft/vso-agent-tasks](https://github.com/Microsoft/vso-agent-tasks)
    and customize it. If you can't find a task, you can easily create one. You'll
    learn more about custom tasks in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changes to build definitions can be saved as drafts. Build definitions maintain
    a history of all changes in the **History** tab. A side-by-side comparison of
    the changes is also possible. Comments entered when changing the build definition
    show up in the change history:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00548.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Build definitions can be saved as templates. This helps standardize the use
    of certain tasks across new build definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00549.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: An existing build definition can be saved as a template
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple triggers can be set for the same build, including CI triggers and
    multiple scheduled triggers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00550.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Rule-based retention policies support the setting up of multiple rules. Retention
    can be specified by "days" or "number" of the builds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00551.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The build output logs are displayed in web portal in real time. The build log
    can be accessed from the console even after the build gets completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00552.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The build reports have been revamped to offer more visibility into the build
    execution, and among other things, the test results can now directly be accessed
    from the web interface. The `.trx` file does not need to be downloaded into Visual
    Studio to view the test results. We''ll be covering this in detail in [Chapter
    5](part0062.xhtml#aid-1R42S1 "Chapter 5. Testing Your Application"), *Testing
    Your Application*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00553.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The old build system had restrictions on one Team Project Collection per build
    controller and one controller per build machine. TFBuild removes this restriction
    and supports the reuse of queues across multiple Team Project Collections. The
    following image illustrates the architecture of the new build system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00554.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding diagram, we observe the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiple agents can be configured on one machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agents from across different machines can be grouped into a pool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each pool can have only one queue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One queue can be used across multiple Team Project Collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To demonstrate the capabilities of TFBuild, we'll use the FabrikamTFVC and FabrikamGit
    Team Projects. If you don't already have these Team Projects, follow the *Creating
    a Team Project using the Scrum Template* recipe, in [Chapter 1](part0016.xhtml#aid-F8901
    "Chapter 1. Team Project Setup"), *Team Project Setup*.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring TFBuild Agent, Pool, and Queues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to configure agents and create pools and queues.
    You'll also learn how a queue can be used across multiple Team Project Collections.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: At Fabrikam, the FabrikamTFVC and FabrikamGit Team Projects need
    their own build queues. The FabrikamTFVC Teams build process can be executed on
    a Windows Server. The FabrikamGit Team build process needs both Windows and OS
    X. The Teams want to set up three build agents on a Windows Server; one build
    agent on an OS X machine. The Teams want to group two Windows Agents into a Windows
    Pool for FabrikamTFVC Team and group one Windows and one Mac Agent into another
    pool for the FabrikamGit Team:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00555.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Permission: To configure a build agent, you should be in the Build Administrators
    Group.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The prerequisites for setting up the build agent on a Windows-based machine
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The build agent should have a supporting version of Windows. The list of supported
    versions is listed at [https://msdn.microsoft.com/en-us/Library/vs/alm/TFS/administer/requirements#Operatingsystems](https://msdn.microsoft.com/en-us/Library/vs/alm/TFS/administer/requirements#Operatingsystems).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The build agent should have Visual Studio 2013 or 2015.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The build agent should have PowerShell 3 or a newer version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A build agent is configured for your TFS as part of the server installation
    process if you leave the **Configure the build service to start automatically**
    option selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00556.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the purposes of this recipe, we''ll configure the agents from scratch.
    Delete the default pool or any other pool you have by navigating to the **Agent
    pools** option in the TFS Administration Console `http://tfs2015:8080/tfs/_admin/_AgentPool`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00557.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log into the Windows machine that you desire to set the agents upon. Navigate
    to the **Agent pools** in the TFS Administration Console by browsing to `http://tfs2015:8080/tfs/_admin/_AgentPool`.
    Click on **New Pool**, enter the pool name as `Pool 1`, and uncheck **Auto-Provision
    Queue in Project Collections**:![How to do it](img/image00558.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download agent** icon. Copy the downloaded folder into `E:\`
    and unzip it into `E:\Win-A1`. You can use any drive; however, it is recommended
    to use the non-operating system drive:![How to do it](img/image00559.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the PowerShell console as an administrator and change the current path in
    PowerShell to the location of the agent in this case `E:\Win-A1`. Call the `ConfigureAgent.ps1`
    script in the PowerShell console and click on *Enter*. This will launch the Build
    Agent Configuration utility:![How to do it](img/image00560.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the configuration details as illustrated in the following screenshot:![How
    to do it](img/image00561.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended to install the build agent as a service; however, you have
    an option to run the agent as an interactive process. This is great when you want
    to debug a build or want to temporarily use a machine as a build agent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The configuration process creates a JSON settings file; it creates the working
    and diagnostics folders:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it](img/image00562.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Refresh the **Agent pools** page in the TFS Administration Console. The newly
    configured agent shows up under **Pool 1**:![How to do it](img/image00563.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 2 to 5 to configure **Win-A2** in **Pool 1**. Repeat steps 1 to
    5 to configure **Win-A3** in **Pool 2**. It is worth highlighting that each agent
    runs from its individual folder:![How to do it](img/image00564.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, log into the Mac machine and launch terminal:![How to do it](img/image00565.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the agent installer globally by running the commands illustrated here.
    You will be required to enter the machine password to authorize the install:![How
    to do it](img/image00566.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will download the agent in the user profile, shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it](img/image00567.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The summary of actions performed when the agent is downloaded
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the following command to install the agent installer globally for the user
    profile:![How to do it](img/image00568.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the following command will create a new directory called `osx-A1` for
    the agent; create the agent in the directory:![How to do it](img/image00569.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The agent installer has been copied from the user profile into the agent directory,
    shown as follows:![How to do it](img/image00570.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the following illustrated parameters to configure the agent:![How to do
    it](img/image00571.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This completes the configuration of the xPlatform agent on the Mac. Refresh
    the **Agent pools** page in the TFS Administration Console to see the agent appear
    in **Pool 2**:![How to do it](img/image00572.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The build agent has been configured at the Team Foundation Server level. In
    order to use the build agent for a Team Project Collection, a mapping between
    the build agent and Team Project Collection needs to be established. This is done
    by creating queues. To configure queues, navigate to the Collection Administration
    Console by browsing to `http://tfs2015:8080/tfs/DefaultCollection/_admin/_BuildQueue`.
    From the **Build** tab, click on **New queue**; this dialog allows you to reference
    the pool as a queue:![How to do it](img/image00573.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Map **Pool 1** as **Queue 1** and **Pool 2** as **Queue 2** as shown here:![How
    to do it](img/image00574.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The TFBuild Agent, Pools, and Queues are now ready to use. The green bar before
    the agent name and queue in the administration console indicates that the agent
    and queues are online.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the setup, create a new build definition by navigating to the FabrikamTFVC
    Team Project Build hub by browsing to `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`.
    Click on the **Add a new build definition** icon. In the **General** tab, you''ll
    see that the queues show up under the **Queue** dropdown menu. This confirms that
    the queues have been correctly configured and are available for selection in the
    build definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00575.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Pools can be used across multiple Team Project Collections. As illustrated
    in the following screenshot, in Team Project Collection 2, clicking on the **New
    queue...** shows that the existing pools are already mapped in the default collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00576.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a TFBuild Agent using an unattended installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The new build framework allows the unattended setup of build agents by injecting
    a set of parameter values via script. This technique can be used to spin up new
    agents to be attached into an existing agent pool. In this recipe, you'll learn
    how to configure and unconfigure a build agent via script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team wants the ability to install, configure, and
    unconfigure a build agent directly via script without having to perform this operation
    using the Team Portal.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Permission: To configure a build agent, you should be in the Build Administrators
    Group.'
  prefs: []
  type: TYPE_NORMAL
- en: Download the build agent as discussed in the earlier recipe *Configuring TFBuild
    Agent, Pool, and Queues*. Copy the folder to `E:\Agent`. The script refers to
    this `Agent` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Launch PowerShell in the elevated mode and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace the value of the username and password accordingly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Executing the script will result in the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00577.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The script installs an agent by the name **WinA-10** as Windows Service running
    as `svc_build`. The agent is added to **Pool 1**:![How to do it...](img/image00578.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To unconfigure **WinA-10**, run the following command in an elevated PowerShell
    prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To unconfigure, script needs to be executed from outside the scope of the `Agent`
    folder. Running the script from within the `Agent` folder scope will result in
    an error message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00579.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new build agent natively allows configuration via script. A new capability
    called **Personal Access Token** (**PAT**) is due for release in the future updates
    of TFS 2015\. PAT allows you to generate a personal OAuth token for a specific
    scope; it replaces the need to key in passwords into configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a continuous integration build definition in TFBuild
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to author a continuous integration build definition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team wants to set up a build definition that is
    executed on every code check-in. The Team wants to run this build definition using
    **Pool 1**, which has the required frameworks installed to compile the code and
    execute unit tests.'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new build definition, you need to have the build definition author
    or builder's permissions. This permission can be granted by adding yourself to
    the Build Administrators Security Group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Build** hub in FabrikamTFVC Team Portal by browsing to `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`.
    Click on the **+** icon to create a new build definition. Select **Visual Studio**
    from the **DEFINITION TEMPLATES** window:![How to do it...](img/image00580.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This loads an empty build definition called **New Visual Studio definition
    1**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00581.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Navigate to the **General** tab, set the fields as illustrated in the following
    screenshot:![How to do it...](img/image00582.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A build job timeout allows you to enter the minimum time a build job requires
    to execute, before it is cancelled by the server. An empty or `0` value in this
    field signifies an infinite timeout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default value of **Build job authorization scope** is **Project Collection**.
    You should only use Project Collection if the build definition needs to access
    resources outside the scope of the Team Project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default value of **Build number format** is `$(date:yyyyMMdd)$(rev:.r)`.
    As a development best practice, it is always advisable to stamp the DLLs of the
    build output with the build number. This approach won't work with the default
    build number format. Change the build number format to an assembly version format
    such as `1.0.$(date:yyyyMMdd)$(rev:.r)`. A complete list of build number macros
    can be found at [https://msdn.microsoft.com/en-us/library/hh190719.aspx](https://msdn.microsoft.com/en-us/library/hh190719.aspx).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the **Repository** tab. It allows you to specify source control
    settings for the build. Set the fields as illustrated in the following screenshot.
    The **Clean** field forces the server workspace to be recreated for each build.
    In general, cleaning the workspace prior to building will take more time to build
    a solution. To only pull incremental changes into the build workspace, set the
    value to **false**. Label sources labels the version of the code build by the
    build definition. The **Label format** field specified here will create the label
    names as `BuildDefinitionName_BuildNumber`:![How to do it...](img/image00583.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Triggers** tab and check CI. Configure the filters as illustrated
    in the screenshot here. The batch changes setting allows multiple check-ins queued
    for the same build to be bundled together into a single CI build:![How to do it...](img/image00584.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At least one filter needs to be applied when configuring CI. Any check-ins
    done under the path set as included will trigger the build definition. The **Exclude**
    filter is used to exclude check-ins from under the specified path to trigger the
    build definition. In this case, any check-ins under the `$/FabrikamTFVC/Main/Source/lib`
    folder will not trigger this build definition. Navigate to the **Options** tab
    and set the fields as illustrated in the following screenshot. **MultiConfiguration**
    allows you to build more than one configuration as a part of the same pass. It
    is recommended to build multiple configurations as a part of the same build definition
    specifically if the code being built has platform dependencies. Checking **Parallel**
    allows the build for multiple configurations to be executed in parallel:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00585.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, navigate to the **Build** tab. The new build engine manifests itself as
    an orchestrator. The steps orchestrated need to be specified in the **Build**
    tab. As you can see in the **Build** tab, four build steps namely **Visual Studio
    Build**, **Visual Studio Test**, **Index Sources And Publish Symbols**, and **Publish
    Build Artifacts** are pre-added for you through the chosen template. Click on
    **Visual Studio Build** and update the fields as illustrated in the following
    screenshot:![How to do it...](img/image00586.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Build tab includes the Visual Studio Build, Visual Studio Test, Index Sources
    And Publish Symbols, and Publish Build Artifact tasks. These tasks are pre added
    on creating a new build definition using the Visual Studio Build Template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the path to the solution that you wish to compile. Leaving it to the
    default value of `**/*.sln` will build all solutions under the path specified
    in the **Repositories** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **MSBuild Arguments** textbox allows you to pass additional MS Build Arguments.
    A complete list of MS Build Arguments can be found at [https://msdn.microsoft.com/en-us/library/ms164311.aspx](https://msdn.microsoft.com/en-us/library/ms164311.aspx).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll notice that the platform and configuration are preconfigured with a variable.
    Variables provide you with the ability to centrally manage values rather than
    hard coding them into the build definition. Variables also provide you with the
    ability to overwrite the values at run time. The values for these variables are
    specified in the **Variables** tab; you can optionally navigate to the **Variables**
    tab to overwrite the default values injected by the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting the **Restore NuGet Packages** checkbox allows the build system to
    download any dependant NuGet packages during the build execution time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The auto restore of NuGet packages is quite a useful feature; this allows you
    to avoid having to check-in dependency packages into TFS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Advanced** settings allow you to specify a specific version of MSBuild
    or Visual Studio to compile against your code. The default is x86.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Control Options** textarea allows you to disable a specific build definition;
    this option also allows you to specify the behavior on build errors. You can choose
    to stop the build process on encountering the first build error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Visual Studio Test** step; you will see the list of configurable
    variables on the left panel. Similar to the build step, this step also offers
    you the ability to choose the version of VS Test Runner to use for executing the
    tests. The **Advanced** section also allows you to specify the path to custom
    test adapters. This is extremely useful if you are planning to use a non-VS Test
    Runner to execute the tests. Check the **Code Coverage Enabled** checkbox, and
    leave the defaults in the other fields:![How to do it...](img/image00587.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the code coverage enabled checkbox, and leave the defaults in other fields
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Test Assembly**: The **Test Assembly** field should be used to specify the
    path to the test projects that you want the VS Test Runner to execute. The field
    accepts wildcards; as per the default, all the projects that have `*test*.dll`
    as an output will be picked up by the test runner for execution.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test Filter criteria**: This field allows you to run selective tests using
    a specific filter. A run settings file can be passed in the **Run Settings File**
    field. This is useful if the Development Team wants to execute the tests using
    the same test settings on developer machines and build servers. Test run parameters
    specified in the test settings file can be overwritten using the **Override TestRun
    Parameters** field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, click on **Index Sources And Publish Symbols**. During the source code
    compilation process, the build engine generated symbol files. The symbol files
    are the `.PDB` files that match a particular assembly and contain information
    used by debugging tools. The symbol files for the .NET assemblies contain source
    file names, line numbers, and local variable names. The build definition is capable
    of publishing the symbols to the symbol server. The developers can point to this
    symbol server in Visual Studio; this automatically downloads the correct symbols
    during debugging. Follow the instructions here to set up a file share-based symbol
    server if you don''t already have one: [https://msdn.microsoft.com/en-us/library/windows/hardware/mt146873(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/windows/hardware/mt146873(v=vs.85).aspx).![How
    to do it...](img/image00588.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the artifact name as Symbols_$(BuildConfiguration)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Last but not least, navigate to the **Publish Build Artifacts** task. This
    task allows you to specify the settings where the build artifacts are published.
    Choose the server to store the artifact on your TFS. This is the best and simplest
    option in most cases:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00589.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the Publish Artifact, set the Artifact Type as Server
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Save** and give the build definition a name; add a comment as illustrated
    in the following screenshot:![How to do it...](img/image00590.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Queue Build** to manually trigger a new build for this build definition.
    The Build Output Console starts to show the build agent activity in real time:![How
    to do it...](img/image00591.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you would have noticed, the out-of-the-box experience after selecting the
    Visual Studio Template preconfigures most of the settings for you giving you the
    ability to set up your CI process in next to no time.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The build output has also been revamped in the new build framework. As illustrated
    in the following screenshot, the build output includes the test results and code
    coverage results. The output also includes a separate view for timeline and artifacts
    for easier access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/image00592.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Pinning a build badge to the welcome page in Team Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build badge is a dynamically generated image showing the status of the last
    build for a build definition. In this recipe, you'll learn how to pin a build
    badge to a Dashboard in Team Portal.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To modify a build definition, you need to have the build definition author or
    builder's permissions. This permission can be granted by adding yourself to the
    Build Administrators Security Group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Build** hub for FabrikamTFVC Team Project; browse to `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the build definition **FabrikamTFVC CI** from under the build definitions
    menu in the left panel and choose to edit the build definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **General** tab of the build definition and check the option
    **Badge enabled**:![How to do it...](img/image00593.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to update the changes in order to enable the badge build definition.
    Upon saving the changes, a new hyperlink **Show url…** appears next to the **Badge
    enabled** field. Click on the **Show url...** hyperlink and copy the hyperlink:![How
    to do it...](img/image00594.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Welcome** page of the FabrikamTFVC Team in Team Portal by
    browsing to `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_welcome`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit `README.md` and paste the build badge URL. Save the changes. In the following
    screenshot, the current status of the FabrikamTFVC build is represented in red
    as **Failed**. A passing build is represented in green. A partially successful
    build is in orange:![How to do it...](img/image00595.jpeg)![How to do it...](img/image00596.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Team Foundation Server Build API exposes a public endpoint for the status
    of the last build. The URL calls into this endpoint by passing the build definition
    ID requesting for the build definition status to be rendered as a badge `_apis/public/build/definitions/94fb1544-b441-45f5-a54d-466fc5d66817/4/badge`.
  prefs: []
  type: TYPE_NORMAL
- en: There is more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The build definitions now support saving changes as drafts. This can be done
    by choosing the **Save as a draft** option, as illustrated in the screenshot here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There is more](img/image00597.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The build definitions, which are also saved as a draft, support the queue build
    function. Builds generated by draft build definitions contain the `DRAFT` keyword
    in the build name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There is more](img/image00598.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This gives you a great way to validate build definition changes before sharing
    them broadly.
  prefs: []
  type: TYPE_NORMAL
- en: Managing build resources using role-based access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The old build permissions model for build resources was flat, meaning you could
    grant someone permission to manage all or no build resources. In the new build
    system, the security is a proper hierarchy, so you can control permissions on
    a queue-by-queue or pool-by-pool basis. The build system provides a "role-based
    access control" instead of exposing the underlying permissions directly. In this
    recipe, you'll learn how to permission build resources at the pool and queue levels.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: To manage the all pools membership, you need to be a member of the
    Team Foundation Administrators Group. Membership to Team Project Collection Administrator
    Group is required to manage permissions for individual pools. In order to manage
    the permissions for the queues, you need to be a member of the Project Collection
    Build Administrators Group. Build Definition Administration requires membership
    to the Build Administrators Group.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Agent** tab in the Account Administration Console by browsing
    to `http://tfs2015:8080/tfs/_admin/_AgentPool`. Click on **All Pools** and add
    build agent service accounts that you intend to use globally across TFS into the
    **Agent Pool Service Accounts** role:![How to do it...](img/image00599.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To scope a service account only to **Pool 1**, click on **Pool 1**, select
    the **Agent Pool Service Accounts** option, and click on **Add...** to add the
    account:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00600.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Navigate to the **Agent queues** tab in the Default Project Collection scope
    in Administration Console by browsing to `http://tfs2015:8080/tfs/DefaultCollection/_admin/_AgentQueue`.
    Click on **All Queues**. The role membership for all queues administrators, creators,
    and users can be set from here:![How to do it...](img/image00601.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Administration, creation, and user roles at the Pool 1 level scope these permissions
    at the Pool 1 level only. These can be set by clicking on **Pool 1** and adding
    the users and groups to the relevant roles.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As illustrated in the following figure, the new build system contains a hierarchical
    role-based access control model. In the next section, we''ll go through each of
    the roles and accesses that they offer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00602.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**All Queues**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Queue Administrators**: Users in this role have the ability to manage
    all the queues within the Project Collection.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Queue Creators**: Users in this role have the ability to create new
    queues. If there is no pool with the same name as the queue, one will be provisioned
    at the queue creation time, and the caller will be added as an administrator of
    both the queue and the corresponding pool. If a pool with the same name already
    exists, the caller must have the **Manage** permission (must be a pool administrator)
    on the pool to create a new queue that uses the pool.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Queue Users**: Users in this role have the ability to use all the queues
    for the entire collection. Use means they can assign the queues to be used by
    definitions in the build space.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Individual Queues**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Queue Administrators**: This is same as the previous role, but the
    permissions are restricted to a specific queue.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Queue Users**: This is same as the previous role, but the permissions
    are restricted to a specific queue.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All Pools**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Pool Administrators**: Users in this role have the ability to manage
    all the pools within the entire account.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Pool Service Accounts**: Users in this role have the ability to connect
    to the pool and receive messages regarding build jobs, including control messages
    such as "update yourself" and "cancel this job".'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Individual Pools**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Pool Administrators**: This is same as the previous role, but the permissions
    are restricted to the specific pool.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Pool Service Accounts**: This is same as the previous role, but the
    permissions are restricted to the specific pool.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the build retention policy to automate build deletion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The build retention policy allows you to delete older builds including its
    output and related artifacts using a set of rules. The build retention policy
    in the old build system had two drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: The retention policy could only be applied per build definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The retention was based on the number of builds only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new build system allows a global retention policy; this makes it easier
    to administer build retention. The new system allows retention by the age of build,
    making it easier to create meaningful retention rules. In this recipe, you'll
    learn how to apply the build retention policy both globally at the Team Project
    Collection level and locally at the build definition level.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To administer build resources for the collection, you need to be a member of
    the Project Collection Build Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: The Fabrikam Team would like to enforce a default retention policy
    of 20 days across all build definitions in the Default Team Project Collection.
    The FabrikamTFVC Team only wants to keep builds from FabrikamTFVC CI build definition
    for 5 days. At Fabrikam, all the builds older than 45 days that haven''t been
    marked to be retained indefinitely should be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The retention policy applies to all builds in a Team Project Collection. There
    may be a few builds that you would like to retain longer than the maximum retention
    enforced by the global policy. This can be achieved by marking a build for indefinite
    retention. Browse to the specific build that you would like to exclude from the
    retention policy. Then, right-click on the build and set the **Retain indefinitely**
    flag on the build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00603.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Build** tab in the Administration Console for the Default
    Project Collection by browsing to `http://tfs2015:8080/tfs/DefaultCollection/_admin/_buildQueue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Maximum Retention Policy** section, update the **Days to keep** textbox
    to `45`. This will enforce a maximum retention of 45 days for all builds excluding
    those marked as retain indefinitely. Click on **Save changes** to apply the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00604.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Default Retention Policy** section, update the **Days to keep** textbox
    to `20` days. This setting is cascaded to all the newly created build definitions.
    Click on **Save changes** to apply the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00605.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to the FabrikamTFVC CI build definition, and then to the **Retention**
    tab. Update the value of **Days to keep** to `5` days. A retention rule can be
    deleted by clicking the delete icon; a new retention rule can be added by clicking
    on the **Add new rule...** icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00606.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TFS has a set of background jobs that are scheduled to run to manage various
    operations in TFS. The build retention policy is orchestrated by the TFS Agent;
    only those builds that have been marked as retain indefinitely will be excluded
    from the deletion process. At the moment, it is not possible to change the global
    settings for deleting build records and test records, and applying branch filters.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the build definition level, it is possible to change the settings for what
    is deleted as a part of the retention policy. The **Delete test results** setting
    only deletes test runs, results, and attachments, manual test results are not
    deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00607.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The new build system also has a provision for associating tags within individual
    builds and filtering builds using tags. Let''s start off by tagging a build. Open
    a build and add a few tags under the **Tags** section as illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/image00608.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the build list page, enter the tags you would like to filter the build list
    by. As illustrated in the following screenshot, the build list is filtered by
    the **Bug#1291** and **Investigate** tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/image00609.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using user capabilities to identify a build agent in a pool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not uncommon to have specialized build agents for specific builds. For
    example, an application may have dependency on SharePoint SDK. A build agent can
    be stood up to cater for builds that have such dependencies. The new build system
    introduces the concept of **capabilities**. Capabilities, in their most basic
    form, are a collection of key value pairs used to recognize the abilities of a
    build server. A build that requires a specific ability for its execution can be
    routed to a relevant build agent by referring to these key/value pairs. A build
    agent supports both system and user capabilities. System capabilities are a list
    of software frameworks already available on the build agent. They are generated
    by the build agent. User capabilities can be manually added to a build agent;
    this is a useful way to tag on a key value pair to recognize a build agent. In
    this recipe, you'll learn how to add a user capability to a build agent to recognize
    it in a pool of build agents.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team has a solution that has dependency on SharePoint
    2016 SDK. It has supplemented Pool 1 with an additional agent that has SharePoint
    2016 SDK installed. While other build definitions can use both **Win-A1** and
    **Win-A2**, all build requests from FabrikamTFVC CI build need to be routed to
    **Win-A2** only:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00610.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For example, to amend the build agent capabilities, you need to be a member
    of the Build Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Agent pools** tab in the Administration Console by browsing
    to `http://tfs2015:8080/tfs/_admin/_AgentPool`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Pool 1** and select **Win-A2**. From the **USER CAPABILITIES** section,
    click on the **Add capability** hyperlink. Add `SharePoint.SDK` as the key and
    `2016` as the value:![How to do it…](img/image00611.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the FabrikamTFVC CI build, edit the build definition, and browse
    to the **General** tab. In the **Demands** section, click on the **Add demand**
    hyperlink. Add `SharePoint.SDK` and set the comparator to **equals** and the **Value**
    field to `2016`. Click on **Save** to apply the changes to the build definition:![How
    to do it…](img/image00612.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Queue build** icon. In the launched window, click on the **Demands**
    tab. You'll see the newly added `SharePoint.SDK` demand shows up in this view.
    Demands can be added, removed, or edited directly from this window. Click on **OK**
    to trigger a build from this build definition:![How to do it…](img/image00613.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The build framework scans **Pool 1** for agents that match the list of demands
    specified in the build definition. In case no agent fulfils the demands raised
    by the build definition, a warning message is generated by the queued build indicating
    that there are no available build agents to process the build request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates that the build has successfully been routed
    to **Win-A2** by matching the build demand and the agent capability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00614.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The prior versions of TFS have allowed build routing via build agent and build
    definition tagging. The new build system enriches the experience by providing
    an auto-generated list of system capabilities as well as the use of comparators
    for authoring demands in the build definition.
  prefs: []
  type: TYPE_NORMAL
- en: Version DLLs in build output with build number
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traceability is very important in the software develop lifecycle. Teams strive
    for traceability between requirements and test cases, code check-ins and builds,
    and code changes and test runs. Talking of traceability, it would be useful to
    map the binaries in the build output back to the build. In this recipe, you'll
    learn how to stamp the DLLs in the build output with the build number they are
    being generated from.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team wants to label the source code used in the
    build and tag the label and build output using the build number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00615.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Download the `StampBuildNumber.ps1` script provided in the course material.
    Check-in the `StampBuildNumber.ps1` script into the `script` folder as illustrated
    in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00616.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Permissions**: You''ll need to edit build definition permissions to execute
    this recipe; you can get these permissions by being added to the Build Administrators
    Group.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Build** hub in the FabrikamTFVC Team Project by browsing to
    `http://tfs2015:8080/tfs/DefaultCollection/FabrikamTFVC/_build`. Select the **FabrikamTFVC
    CI** Build for editing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **General** tab and change the **Build number format** field
    to `1.0.$(Year:yy)$(DayOfYear).$(BuildID)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Repository** tab in the build definition, select the **Labeling
    Of Source** option on successful build, and change the **Label format** field
    to `$(build.buildNumber)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Build** tab, click on **Add build step...**, and select the
    **PowerShell** task:![How to do it…](img/image00617.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the script file path in the **PowerShell** task to point to the location
    of the `StampBuildNumber.ps1` script, which in this case is `$/FabrikamTFVC/Main/Source/script/StampBuildNumber.ps1`.
    The script expects build number and agent workspace as input parameters. These
    values can be injected using the predefined variable `$(Build.BuildNumber) $(Agent.BuildDirectory)\$(Build.Repository.Name)`.
    A complete list of predefined variables can be found at [https://msdn.microsoft.com/Library/vs/alm/Build/scripts/variables](https://msdn.microsoft.com/Library/vs/alm/Build/scripts/variables).![How
    to do it…](img/image00618.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** and enter a comment to apply the changes made to the FabrikamTFVC
    CI build definition. Queue a build to validate the build number stamping on the
    DLLs in the build output:![How to do it…](img/image00619.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Build 1.0.15289.68** successfully executes the `StampBuildNumber.ps1` script;
    a build source label matching the build number is generated as a result of a successful
    build. The build output can be downloaded from the **Artifacts** view. The **File
    version** and **Product version** fields have the same values as the build number.
    This provides an end-to-end mapping of the build number across the different artifacts.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to successfully stamp the build number on to the DLLs, the build number
    needs to use the assembly version format. There are some interesting recommendations
    on Semantic Versioning that you can read more about at [http://semver.org/](http://semver.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Each C# project contains a file `AssemblyInfo.cs`; as illustrated in the following
    screenshot. This class contains properties for `AssemblyVersion` and `AssemblyFileVersion`.
    The `StampBuildNumber.ps1` script overwrites the `AssemblyVersion` and `AssemblyFileVersion`
    fields with the injected build number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00620.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The PowerShell task executing `StampBuildNumber` script needs to be run before
    the Visual Studio Build task to ensure the updated values for `AssemblyVersion`
    and `AssemblyFileVersion` properties are used during the compilation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `StampBuildNumber` script accepts two parameters as illustrated here. These
    parameters are injected through predefined variables via the build definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00621.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Set-AssemblyVersion` function validates that the build number value abides
    to the assembly version format. A scan is then performed in the build workspace
    to locate the `AssemblyInfo.cs` class. The `AssemblyVersion` and the `AssemblyFileVersion`
    properties in the `AssemblyInfo.cs` file are then replaced with the value of the
    build number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00622.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot illustrates the processed `AssemblyInfo.cs` file from
    the agent work directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00623.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new build task using the TFBuild Extensibility framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The new build system comes with a wide range of prepackaged build tasks. Out-of-the-box
    tasks are complimented with the presence of popular scripting engines. This helps
    address scenarios that aren't directly covered with the out-of box-tasks. The
    new build system has been architected from the ground up with a special focus
    on extensibility. In this recipe, you'll learn how to create a new build task
    using the extensibility framework available in the new build system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The TFS Extensions command-line utility (`tfx-cli`) needs to be used for building
    task management. The utility is based on Node.js. As a prerequisite to using `tfx-cli`,
    download and install Node.js from [https://nodejs.org/en/download](https://nodejs.org/en/download).
    The extensibility command-line utility can directly be installed by launching
    command prompt and running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting ready](img/image00624.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To authenticate with TFS, the `tfx-cli` utility only accepts **Personal Access
    Tokens** (**PAT**) or alternate credentials. Since support for PATs is yet to
    be released in TFS, alternate credentials need to be used for authentication.
    Guidance on how to set up alternate credentials can be found at [https://github.com/Microsoft/tfs-cli/blob/master/docs/configureBasicAuth.md](https://github.com/Microsoft/tfs-cli/blob/master/docs/configureBasicAuth.md).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates how to authenticate with `tfx-cli` by
    passing the connection details of the Team Project Collection along with alternate
    credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00625.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To validate that you have performed the setup correctly, try retrieving a list
    of build tasks by running the command `tfx build tasks list`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00626.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a new task, run the command `tfx build tasks create`, shown as follows:![How
    to do it...](img/image00627.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A template task is downloaded to the working folder that is ready for you to
    start editing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00628.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: To upload this task to the library, run `tfx build tasks upload.\MyTask`:![How
    to do it...](img/image00629.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the FabrikamTFVC CI build definition and click on **Edit** to edit
    the build definition. Select the newly added **MyTask** which shows up in the
    task list under the **Utility** section. Include this task in the definition by
    clicking **Add**:![How to do it...](img/image00630.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the message in the **Message** textbox and save the changes. Queue a
    new build:![How to do it...](img/image00631.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The build successfully runs **MyTask** and prints the message `Hurray! My First
    Build Task...` in the console output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00632.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On running the `create new task` command, a set of template files are downloaded.
    The `task.json` file contains metadata about the task. As illustrated in the following
    screenshot, the file contains task metadata, agent dependencies, task specific
    properties, and output behavior. For example, if the default category is `utility`,
    the category that the build task gets uploaded to can be amended by changing the
    value of the category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00633.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The other files also have their significance:'
  prefs: []
  type: TYPE_NORMAL
- en: The `sample.ps1` file contains the PowerShell build task logic that is executed
    when running on a Windows agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `sample.js` file contains the JavaScript build task logic that is executed
    when running on a cross-platform agent (e.g. OS X or Linux)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `icon.png` file is a default icon and should be replaced with a custom 32×32
    PNG file with transparencies set appropriately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are looking for inspiration, all existing out-of-the-box tasks are open
    source and can directly be enhanced with contributions on GitHub at [https://github.com/Microsoft/vso-agent-tasks](https://github.com/Microsoft/vso-agent-tasks).
  prefs: []
  type: TYPE_NORMAL
- en: Integrating SonarQube with TFBuild to manage technical debt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technical debt can be classified as the measure between the current state and
    an optimal state of codebases. Technical debt saps productivity by making code
    hard to understand, easy to break, difficult to validate, and in turn, creating
    unplanned work ultimately blocking the progress. Technical debt is inevitable!
    It starts small and grows overtime through rushed changes and lack of context
    and discipline. Organizations often find that more than 50% of their capacity
    is sapped by technical debt. As discussed in [Chapter 2](part0027.xhtml#aid-PNV62
    "Chapter 2. Setting Up and Managing Code Repositories"), *Setting Up and Managing
    Code Repositories*, the biggest challenge is in identifying and managing Technical
    Debt. SonarQube is an open source platform that is the de facto solution for understanding
    and managing technical debt. In this recipe, you'll learn how to integrate with
    SonarQube using TFBuild to analyze .NET-based applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SonarQube is an open platform for managing code quality. As such, it covers
    the seven axes of code quality as illustrated in the following image. Originally
    famous in the Java community, SonarQube now supports over 20 programming languages.
    The joint investments made by Microsoft and SonarSource make SonarQube easier
    to integrate with TFBuild and better at analyzing .NET-based applications. You
    can read more about the capabilities offered by SonarQube at [http://www.sonarqube.org/resources/](http://www.sonarqube.org/resources/).
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00634.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we'll analyze the technical debt in the FabrikamTFVC codebase
    using SonarQube. If you don't already have an instance of SonarQube, then set
    one up by following the instructions at [https://github.com/SonarSource/sonar-.net-documentation/blob/master/doc/installation-and-configuration.md](https://github.com/SonarSource/sonar-.net-documentation/blob/master/doc/installation-and-configuration.md).
  prefs: []
  type: TYPE_NORMAL
- en: 'To work through this recipe, you''ll need the Sonar database connection string
    and user account details to connect to SonarQube from TFBuild. This recipe uses
    the single server setup described in the installation and configuration link shared
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the FabrikamTFVC CI build definition by browsing to the **Build**
    hub in FabrikamTFVC Team Portal. Click on the **Edit** hyperlink to start editing
    the FabrikamTFVC CI build definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new task by clicking on **Add Build** step. From the **Build** category,
    choose **SonarQube for MSBuild - Begin Analysis** and **SonarQube for MSBuild
    - End Analysis**:![How to do it…](img/image00635.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Organize the begin analysis task before the Visual Studio Build task and the
    end analysis task after all the code build and test tasks have been executed:![How
    to do it…](img/image00636.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **SonarQube Begin Analysis** task, specify the connection details of
    your SonarQube instance. The SonarQube endpoint needs to be mapped and added through
    the endpoint manager as illustrated here:![How to do it…](img/image00637.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Endpoints provide a role-based access control model similar to the build permission
    model. Users and groups can directly be set up for endpoint administration and
    consumption through this access control model:![How to do it…](img/image00638.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SonarQube service endpoint and update the database settings:![How
    to do it…](img/image00639.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the project settings as illustrated here:![How to do it…](img/image00640.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the changes to the build definition and queue a new build. Using the information
    in the **SonarQube Start Analysis** task, the build agent will connect to the
    SonarQube instance. It will process the code using the Sonar MSBuild runner performing
    .NET and JavaScript code analysis, code clone analysis, code coverage analysis,
    and calculating the metrics for .NET and JavaScript. These results will be published
    by the **SonarQube End Analysis** task:![How to do it…](img/image00641.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The SonarQubeMSBuild runner is used to invoke the SonarQube analysis from TFBuild.
    Let''s see the results of the code analysis performed by the runner. Navigate
    to the SonarQube Dashboard by browsing to `http://localhost:9000/`. The home page
    shows the **Fabrikam CallCenter (Main)** project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00642.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'By drilling into the Dashboard for the **Fabrikam CallCenter (Main)** project,
    you can see high-level metrics around various analyses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00643.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The dashboard gives you a high-level summary of analysis of code, complexity,
    duplications, unit test coverage, and debt analysis
  prefs: []
  type: TYPE_NORMAL
- en: 'The issues section displays a complete list of issues found across the codebase
    using the .NET code analysis ruleset. The issues can be tracked, suppressed, assigned,
    and planned for releases right from within this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00644.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The issues section shows a list of issues identified in the codebase during
    the analysis
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The new build framework provides the ability to create custom variables. Variables
    provide the means to share common values across multiple fields in a build definition.
    Unlike values, variables can be dynamically updated during runtime. The framework
    also allows flagging a variable as secure, in which case its value is not displayed
    in the build definition not logged during the build execution. In this recipe,
    the SonarQube connection string and account details were passed directly in the
    build task. These values can instead be passed through using build variables as
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/image00645.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Building GitHub code repositories with TFBuild
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The new build system offers seamless integration with GitHub. In this recipe,
    you'll learn how to use TFBuild to build a repository in GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don't already have a GitHub repository, create one from [https://help.github.com/articles/create-a-repo](https://help.github.com/articles/create-a-repo).
  prefs: []
  type: TYPE_NORMAL
- en: For the walkthrough in this recipe, we'll be using the `VisualStudioGeeks` repository
    available at [https://github.com/visualstudiogeeks/](https://github.com/visualstudiogeeks/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log into the GitHub repository from your profile menu, navigate to **Settings**,
    and select **Personal access tokens**. Click on the **Generate new token** button
    to create a new personal access token:![How to do it...](img/image00646.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify a name and select the access scope for the token. In order to trigger
    builds, the `admin:repo_hook` access level needs to be selected:![How to do it...](img/image00647.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Generate token** button. Copy the access token and store it in
    a safe location. Note that you'll not be able to see this token again; should
    you lose it, you'll have to generate a new token:![How to do it...](img/image00648.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the FabrikamTFVC Team Project and browse to the **Build** hub. Click
    on the **+** icon to create a new build definition. Select the Visual Studio Template,
    and click on **OK**. Save the build definition as `VisualStudioGeeks` CI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Repository** tab, and select **Repository type** to **External
    Git**. Enter the repository name, the URL of the repository, the username, and
    the personal access token to access this repository:![How to do it...](img/image00649.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Triggers** tab, select the **Scheduled** option and specify the schedule
    for triggering the builds from this build definition. Save changes to this build
    definition and trigger a new build:![How to do it...](img/image00650.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As illustrated in the previous screenshot, the `Build 20151020.5` successfully
    synchronizes the code from the repository `VisualStudioGeeks`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The personal token generated for the Visual Studio Geeks repository with scope
    `admin:repo_hook` provides full control over the repository hooks. This access
    permits the listener to subscribe to the commit event generated when the code
    changes are committed to the repository. While TFBuild provides the capability
    to build GitHub repositories in TFS 2015, it does not allow the continuous integration
    flow yet. As indicated in the TFS feature timeline, continuous integration build
    workflow is expected to be introduced in a future update of TFS 2015: [https://www.visualstudio.com/en-us/news/release-archive-vso.aspx](https://www.visualstudio.com/en-us/news/release-archive-vso.aspx).'
  prefs: []
  type: TYPE_NORMAL
