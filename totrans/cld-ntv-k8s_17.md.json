["```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: delayedjobs.delayedresources.mydomain.com\nspec:\n  group: delayedresources.mydomain.com\n  versions:\n    - name: v1\n      served: true\n      storage: true\n      schema:\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              properties:\n                delaySeconds:\n                  type: integer\n                image:\n                  type: string\n  scope: Namespaced\n  conversion:\n    strategy: None\n  names:\n    plural: delayedjobs\n    singular: delayedjob\n    kind: DelayedJob\n    shortNames:\n    - dj\n```", "```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: delayedjob.delayedresources.mydomain.com\nspec:\n  group: delayedresources.mydomain.com\n  versions:\n    - name: v1\n      served: true\n      storage: false\n      deprecated: true\n      deprecationWarning: \"DelayedJob v1 is deprecated!\"\n      schema:\n        openAPIV3Schema:\n\t\t…\n    - name: v2\n      served: true\n      storage: true\n      schema:\n        openAPIV3Schema:\n\t\t...\n  scope: Namespaced\n  conversion:\n    strategy: None\n  names:\n    plural: delayedjobs\n    singular: delayedjob\n    kind: DelayedJob\n    shortNames:\n    - dj\n```", "```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: delayedjob.delayedresources.mydomain.com\nspec:\n  group: delayedresources.mydomain.com\n  versions:\n    - name: v1\n      served: true\n      storage: true\n      schema:\n        openAPIV3Schema:\n\t\t...\n  scope: Namespaced\n  conversion:\n    strategy: Webhook\n    webhook:\n      clientConfig:\n        url: \"https://webhook-conversion.com/delayedjob\"\n  names:\n    plural: delayedjobs\n    singular: delayedjob\n    kind: DelayedJob\n    shortNames:\n    - dj\n```", "```\n     schema:\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              properties:\n                delaySeconds:\n                  type: integer\n                image:\n                  type: string\n```", "```\napiVersion: delayedresources.mydomain.com/v1\nkind: DelayedJob\nmetadata:\n  name: my-instance-of-delayed-job\nspec:\n  delaySeconds: 6000\n  image: \"busybox\"\n```", "```\n    kubectl apply -f delayedjob-crd-spec.yaml\n    ```", "```\n    customresourcedefinition \"delayedjob.delayedresources.mydomain.com\" has been created\n    ```", "```\n    kubectl apply -f my-delayed-job.yaml\n    ```", "```\ndelayedjob \"my-instance-of-delayed-job\" has been created\n```", "```\n// The main function of our controller\nfunction main() {\n  // While loop which runs forever\n  while() {\n     // fetch the full list of delayed job objects from the cluster\n\tvar currentDelayedJobs = kubeAPIConnector.list(\"delayedjobs\");\n     // Call the Analysis step function on the list\n     var jobsToSchedule = analyzeDelayedJobs(currentDelayedJobs);\n     // Schedule our Jobs with added delay\n     scheduleDelayedJobs(jobsToSchedule);\n     wait(5000);\n  }\n}\n```", "```\n// The analysis function\nfunction analyzeDelayedJobs(listOfDelayedJobs) {\n  var listOfJobsToSchedule = [];\n  foreach(dj in listOfDelayedJobs) {\n    // Check if dj has been scheduled, if not, add a Job object with\n    // added delay command to the to schedule array\n    if(dj.annotations[\"is-scheduled\"] != \"true\") {\n      listOfJobsToSchedule.push({\n        Image: dj.image,\n        Command: \"sleep \" + dj.delaySeconds + \"s\",\n        originalDjName: dj.name\n      });\n    }\n  }\n  return listOfJobsToSchedule;  \n}\n```", "```\n// The update function\nfunction scheduleDelayedJobs(listOfJobs) {\n  foreach(job in listOfDelayedJobs) {\n    // First, go ahead and schedule a regular Kubernetes Job\n    // which the Kube scheduler can pick up on.\n    // The delay seconds have already been added to the job spec\n    // in the analysis step\n    kubeAPIConnector.create(\"job\", job.image, job.command);\n    // Finally, mark our original DelayedJob with a \"scheduled\"\n    // attribute so our controller doesn't try to schedule it again\n    kubeAPIConnector.update(\"delayedjob\", job.originalDjName,\n    annotations: {\n      \"is-scheduled\": \"true\"\n    });\n  } \n}\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: cloud-controller-manager\n  namespace: kube-system\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:cloud-controller-manager\nsubjects:\n- kind: ServiceAccount\n  name: cloud-controller-manager\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\n```", "```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    k8s-app: cloud-controller-manager\n  name: cloud-controller-manager\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      k8s-app: cloud-controller-manager\n  template:\n    metadata:\n      labels:\n        k8s-app: cloud-controller-manager\n```", "```\n    spec:\n      serviceAccountName: cloud-controller-manager\n      containers:\n      - name: cloud-controller-manager\n        image: k8s.gcr.io/cloud-controller-manager:<current ccm version for your version of k8s>\n        command:\n        - /usr/local/bin/cloud-controller-manager\n        - --cloud-provider=<cloud provider name>\n        - --leader-elect=true\n        - --use-service-account-credentials\n        - --allocate-node-cidrs=true\n        - --configure-cloud-routes=true\n        - --cluster-cidr=<CIDR of the cluster based on Cloud Provider>\n      tolerations:\n      - key: node.cloudprovider.kubernetes.io/uninitialized\n        value: \"true\"\n        effect: NoSchedule\n      - key: node-role.kubernetes.io/master\n        effect: NoSchedule\n      nodeSelector:\n        node-role.kubernetes.io/master: \"\"\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service-with-dns\n  annotations:\n    external-dns.alpha.kubernetes.io/hostname: myapp.mydomain.com\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n    name: http\n    targetPort: 80\n  selector:\n    app: my-app\n```", "```\napiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n  name: my-domain-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\".\nspec:\n  rules:\n  - host: myapp.mydomain.com\n    http:\n      paths:\n      - backend:\n          serviceName: my-app-service\n          servicePort: 80\n```"]