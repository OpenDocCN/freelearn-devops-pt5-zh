["```\ncd k8s-specs \n\ngit pull \n\ncp volume/prometheus-conf.yml \\  \n    ~/.minikube/files \n```", "```\nminikube start --vm-driver=virtualbox\n\nminikube addons enable ingress\n\nkubectl config current-context\n```", "```\nkubectl run docker \\\n --image=docker:17.11 \\\n    --restart=Never \\\n    docker image ls\n\nkubectl get pods --show-all  \n```", "```\nNAME   READY STATUS RESTARTS AGE\ndocker 0/1   Error  0        1m  \n```", "```\nkubectl logs docker  \n```", "```\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?  \n```", "```\nkubectl delete pod docker  \n```", "```\ncat volume/docker.yml\n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: docker \nspec: \n  containers: \n  - name: docker \n    image: docker:17.11 \n    command: [\"sleep\"] \n    args: [\"100000\"] \n    volumeMounts: \n    - mountPath: /var/run/docker.sock \n      name: docker-socket\n  volumes: \n  - name: docker-socket \n    hostPath: \n      path: /var/run/docker.sock \n      type: Socket \n```", "```\nkubectl create \\\n -f volume/docker.yml\n```", "```\nkubectl exec -it docker \\\n -- docker image ls \\\n --format \"{{.Repository}}\" \n```", "```\nDocker\ngcr.io/google_containers/nginx-ingress-controller\ngcr.io/google_containers/k8s-dns-sidecar-amd64\ngcr.io/google_containers/k8s-dns-kube-dns-amd64\ngcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64\ngcr.io/google_containers/kubernetes-dashboard-amd64\ngcr.io/google_containers/kubernetes-dashboard-amd64\ngcr.io/google-containers/kube-addon-manager\ngcr.io/google_containers/defaultbackend   \ngcr.io/google_containers/pause-amd64\n```", "```\nkubectl exec -it docker sh\n```", "```\napk add -U git\n\ngit clone \\ \n    https://github.com/vfarcic/go-demo-2.git \ncd go-demo-2  \n```", "```\ncat Dockerfile  \n```", "```\nFROM golang:1.9 AS build \nADD . /src \nWORKDIR /src \nRUN go get -d -v -t \nRUN go test --cover -v ./... --run UnitTest \nRUN go build -v -o go-demo \n\nFROM alpine:3.4 \nMAINTAINER      Viktor Farcic viktor@farcic.com \n\nRUN mkdir /lib64 &amp;&amp; ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2 \n\nEXPOSE 8080 \nENV DB db \nCMD [\"go-demo\"] \nHEALTHCHECK --interval=10s CMD wget -qO- localhost:8080/demo/hello \n\nCOPY --from=build /src/go-demo /usr/local/bin/go-demo \nRUN chmod +x /usr/local/bin/go-demo \n```", "```\ndocker image build \\ \n    -t vfarcic/go-demo-2:beta . \n\ndocker image ls \\ \n    --format \"{{.Repository}}\" \n```", "```\nvfarcic/go-demo-2\n<none>\ngolang\ndocker\nalpine\ngcr.io/google_containers/nginx-ingress-controller\ngcr.io/google_containers/k8s-dns-sidecar-amd64\ngcr.io/google_containers/k8s-dns-kube-dns-amd64\ngcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64\ngcr.io/google_containers/kubernetes-dashboard-amd64\ngcr.io/google_containers/kubernetes-dashboard-amd64\ngcr.io/google-containers/kube-addon-manager\ngcr.io/google_containers/defaultbackend\ngcr.io/google_containers/pause-amd64  \n```", "```\ndocker system prune -f \n\ndocker image ls \\  \n    --format \"{{.Repository}}\" \n```", "```\nExit\n\nkubectl delete \\\n    -f volume/docker.yml\n\n```", "```\ncat volume/prometheus.yml  \n```", "```\napiVersion: extensions/v1beta1 \nkind: Ingress \nmetadata: \n  name: Prometheus \n  annotations: \n    ingress.kubernetes.io/ssl-redirect: \"false\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\" \nspec: \n  rules: \n  - http: \n      paths: \n      - path: /Prometheus \n        backend: \n          serviceName: Prometheus \n          servicePort: 9090 \n\n--- \n\napiVersion: apps/v1beta2 \nkind: Deployment \nmetadata: \n  name: Prometheus \nspec: \n  selector: \n    matchLabels: \n      type: monitor \n      service: Prometheus \n  strategy: \n    type: Recreate \n  template: \n    metadata: \n      labels: \n        type: monitor \n        service: Prometheus \n    spec: \n      containers: \n      - name: Prometheus \n        image: prom/prometheus:v2.0.0 \n        command: \n        - /bin/Prometheus \n        args: \n        - \"--config.file=/etc/prometheus/prometheus.yml\" \n        - \"--storage.tsdb.path=/prometheus\" \n        - \"--web.console.libraries=/usr/share\" \n        - \"--web.external-url=http://192.168.99.100/prometheus\" \n\n--- \n\napiVersion: v1 \nkind: Service \nmetadata: \n  name: Prometheus \nspec: \n  ports: \n  - port: 9090 \n  selector: \n    type: monitor \n    service: Prometheus \n```", "```\ncat volume/prometheus.yml | sed -e \\  \n    \"s/192.168.99.100/$(minikube ip)/g\" \\  \n    | kubectl create -f - \\ \n    --record --save-config \n\nkubectl rollout status deploy prometheus \n```", "```\nopen \"http://$(minikube ip)/prometheus\"  \n```", "```\nopen \"http://$(minikube ip)/prometheus/targets\"  \n```", "```\nopen \"http://$(minikube ip)/prometheus/config\"  \n```", "```\ncat volume/prometheus-host-path.yml\n```", "```\napiVersion: apps/v1beta2 \nkind: Deployment \nmetadata: \n  name: Prometheus \nspec: \n  selector: \n    ... \n    spec: \n      containers: \n        ... \n        volumeMounts: \n        - mountPath: /etc/prometheus/prometheus.yml \n          name: prom-conf \n      volumes: \n      - name: prom-conf \n        hostPath: \n          path: /files/prometheus-conf.yml \n          type: File \n... \n```", "```\nminikube ssh\n\nsudo mkdir /files\n\nsudo mv /prometheus-conf.yml  /files/\n\nexit  \n```", "```\nminikube ssh sudo chmod +rw \\ \n    /files/prometheus-conf.yml \n\nminikube ssh cat \\  \n    /files/prometheus-conf.yml \n```", "```\nglobal: \n  scrape_interval:     15s \n\nscrape_configs: \n  - job_name: Prometheus \n    metrics_path: /prometheus/metrics \n    static_configs: \n      - targets: \n        - localhost:9090 \n```", "```\ncat volume/prometheus-host-path.yml \\ \n | sed -e \\\n \"s/192.168.99.100/$(minikube ip)/g\" \\\n | kubectl apply -f -\n\nkubectl rollout status deploy Prometheus\n\nopen http://$(minikube ip)/prometheus/targets  \n```", "```\nkubectl delete \\  \n    -f volume/prometheus-host-path.yml \n```", "```\ncat volume/github.yml\n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: github \nspec: \n  containers: \n  - name: github \n    image: docker:17.11 \n    command: [\"sleep\"] \n    args: [\"100000\"] \n    volumeMounts: \n    - mountPath: /var/run/docker.sock \n      name: docker-socket \n    - mountPath: /src \n      name: github \n  volumes: \n  - name: docker-socket \n    hostPath: \n      path: /var/run/docker.sock \n      type: Socket \n  - name: github \n    gitRepo: \n      repository: https://github.com/vfarcic/go-demo-2.git \n      directory: . \n```", "```\nkubectl create \\  \n    -f volume/github.yml \n```", "```\nkubectl exec -it github sh \n\ncd /src \n\nls -l \n```", "```\ndocker image build \\  \n    -t vfarcic/go-demo-2:beta . \n```", "```\nExit \n\nkubectl delete \\  \n    -f volume/github.yml \n```", "```\ncat volume/jenkins.yml  \n```", "```\napiVersion: extensions/v1beta1 \nkind: Ingress \nmetadata: \n  name: Jenkins \n  annotations: \n    ingress.kubernetes.io/ssl-redirect: \"false\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\" \nspec: \n  rules: \n  - http: \n      paths: \n      - path: /Jenkins \n        backend: \n          serviceName: Jenkins \n          servicePort: 8080 \n\n--- \n\napiVersion: apps/v1beta2 \nkind: Deployment \nmetadata: \n  name: Jenkins \nspec: \n  selector: \n    matchLabels: \n      type: master \n      service: Jenkins \n  strategy: \n    type: Recreate \n  template: \n    metadata: \n      labels: \n        type: master \n        service: Jenkins \n    spec: \n      containers: \n      - name: Jenkins \n        image: vfarcic/Jenkins \n        env: \n        - name: JENKINS_OPTS \n          value: --prefix=/jenkins \n\n--- \n\napiVersion: v1 \nkind: Service \nmetadata: \n  name: Jenkins \nspec: \n  ports: \n  - port: 8080 \n  selector: \n    type: master \n    service: jenkins \n```", "```\nkubectl create \\  \n    -f volume/jenkins.yml \\  \n    --record --save-config \n\nkubectl rollout status deploy jenkins \n```", "```\nopen \"http://$(minikube ip)/jenkins\" \n```", "```\nopen \"http://$(minikube ip)/jenkins/newJob\" \n```", "```\nPOD_NAME=$(kubectl get pods \\  \n    -l service=jenkins,type=master \\  \n    -o jsonpath=\"{.items[*].metadata.name}\") \n\nkubectl exec -it $POD_NAME kill 1 \n```", "```\nkubectl get pods \n```", "```\nNAME                     READY STATUS  RESTARTS AGE\njenkins-76d59945d8-zcz8m 1/1   Running 1        12m\n```", "```\nopen \"http://$(minikube ip)/jenkins\" \n```", "```\ncat volume/jenkins-empty-dir.yml  \n```", "```\n... \nkind: Deployment \n... \nspec: \n  ... \n  template: \n    ... \n    spec: \n      containers: \n        ... \n        volumeMounts: \n        - mountPath: /var/jenkins_home \n          name: jenkins-home \n      volumes: \n      - emptyDir: {} \n        name: jenkins-home \n... \n```", "```\nkubectl apply \\  \n    -f volume/jenkins-empty-dir.yml \n\nkubectl rollout status deploy jenkins \n```", "```\nopen \"http://$(minikube ip)/jenkins/newJob\" \n```", "```\nPOD_NAME=$(kubectl get pods \\  \n    -l service=jenkins,type=master \\  \n    -o jsonpath=\"{.items[*].metadata.name}\") \n\nkubectl exec -it $POD_NAME kill 1 \n\nkubectl get pods \n```", "```\nopen \"http://$(minikube ip)/jenkins\" \n```", "```\nminikube delete  \n```"]