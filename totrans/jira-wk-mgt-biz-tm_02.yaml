- en: '*Chapter 1*: Why Choose Jira Work Management?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For years, Atlassian's flagship collection of products known as **Jira** has
    been a favorite for project and product managers. This also rings true for those
    working in the field of **information technology service management** (**ITSM**).
    Jira has come a long way since it debuted in 2002 as an issue- and bug-tracking
    tool, with several products now having been launched since the initial offering.
  prefs: []
  type: TYPE_NORMAL
- en: So, whether you are a seasoned veteran of the Jira world or brand new to this
    funny-sounding tool landscape, this book will be just what you need to get up
    and running with navigating the product known as **Jira Work Management** (**JWM**).
  prefs: []
  type: TYPE_NORMAL
- en: As these new Jira products have sprouted up, there has come additional functionality
    and, unfortunately to an extent, increased complexity in creating, using, and
    managing projects. Don't get me wrong—I love the flexibility and enhancements
    that have been made. But I also have years of experience working with the Jira
    toolset, and for new users and administrators, Jira can be daunting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having said all of that, it begs the question: *If many products are being
    offered by Atlassian, why should we choose JWM?* The quick answer is that JWM
    provides a simple and fast path to creating new projects in Jira while incorporating
    new and exciting functionality not found in other Jira-related products.'
  prefs: []
  type: TYPE_NORMAL
- en: At its very essence, JWM is a retooling and rebranding of the initial **Jira
    Core** product for business projects. This chapter will describe the differences
    in the products to help ease the move into this next generation of the tool.
  prefs: []
  type: TYPE_NORMAL
- en: But just being the rebranding of an existing tool is not a good enough reason
    to choose to use JWM. So, what are some things that set it apart?
  prefs: []
  type: TYPE_NORMAL
- en: First, JWM integrates seamlessly with the existing Jira family of products such
    as **Jira Software** (**JSW**) and **Jira Service Management** (**JSM**) projects
    and the Jira Cloud platform **REpresentational State Transfer** (**REST**) **application
    programming interface** (**API**) functionality. This integration means there
    is already a familiarity with the general execution of Atlassian products and
    their great reputation.
  prefs: []
  type: TYPE_NORMAL
- en: Add to those reasons the powerful performance of built-in project automation,
    the simple process of project creation and setup, and a suite of new tools, and
    you have one of the best new project management products on the market.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Comparing project types in Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review of the Jira Core product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's new in JWM?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New terms learned in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upon completion of this chapter, you will be able to describe how JWM projects
    are different from other Jira projects and which situations are best suited to
    each product type.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As JWM is only available in the Jira Cloud environment, the requirement for
    this chapter is simple: *access to a Jira Cloud environment*.'
  prefs: []
  type: TYPE_NORMAL
- en: If you already have access to Jira Cloud, that's great—you're ready to go! If
    not, Atlassian provides a free JWM account for up to 10 users. You can create
    your account by going to [https://www.atlassian.com/try/cloud/signup?bundle=jira-core&edition=free](https://www.atlassian.com/try/cloud/signup?bundle=jira-core&edition=free)
    and following the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing project types in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Projects within Jira can be approached from two different viewpoints. One way
    is to treat a project as you would historically when thinking of projects. As
    noted by the **Project Management Institute** (**PMI**):'
  prefs: []
  type: TYPE_NORMAL
- en: '"*According to the PMBOK® Guide—Fourth edition (PMI, 2008a, p. 434), the definition
    of a project is a temporary endeavor undertaken to create a unique project service
    or result. Projects are temporary and close down on the completion of the work
    they were chartered to deliver.*" (Source: [https://bit.ly/3xoo0Ar](https://bit.ly/3xoo0Ar))'
  prefs: []
  type: TYPE_NORMAL
- en: Another way to phrase the *temporary* nature of a project is to say that it
    has defined start and end dates. For example, think of building a house or a building
    or planning a wedding or a vacation. You know when you start to plan, and you
    know when the work or effort is finished.
  prefs: []
  type: TYPE_NORMAL
- en: This is certainly one way to approach a project in Jira, but the result will
    probably be dozens—or even hundreds—of projects in an organization's Jira instance.
    You will also have the added effort of closing down or archiving projects when
    completed.
  prefs: []
  type: TYPE_NORMAL
- en: However, I personally believe that most companies and organizations will view
    Jira projects as the ongoing work being performed by an internal team, whether
    that be a business team, a design team, or a product development team. While many
    organizations are often divided into **business units** (**BUs**), those can easily
    be considered to be teams or might even be broken down into multiple teams or
    squads, depending on the size of the unit.
  prefs: []
  type: TYPE_NORMAL
- en: Projects within Jira fall into three closely related but distinct classes of
    products. These are **JWM**, **JSW**, and **JSM**. As acronyms help to shorten
    the text and bring focus to the intended objects, we will sprinkle these throughout
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: While JSW and JSM projects are very robust and account for the majority of projects
    in most organizations, the old *Jira Core projects* (now JWM) have historically
    been seen as lesser cousins of the two more famous products. Thus, there was a
    need to bolster a somewhat dying brand within the toolset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rodney Nissen, also known as *The Jira Guy* ([https://thejiraguy.com/](https://thejiraguy.com/))
    has cleverly captured this in a graphic, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – The Jira Guy'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.1_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – The Jira Guy
  prefs: []
  type: TYPE_NORMAL
- en: 'No matter which type of project you intend to use, the creation of each begins
    with the same path. Start by simply clicking on the **Projects** menu option in
    the top navigation bar of Jira, followed by clicking on **Create project**, as
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Basic project creation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.2_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – Basic project creation
  prefs: []
  type: TYPE_NORMAL
- en: Each of the next subsections will give a brief overview of the three products,
    when those types of projects are best used, and—finally—a graphical representation
    of how to begin the creation process for each.
  prefs: []
  type: TYPE_NORMAL
- en: JWM projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JWM projects** are specifically referred to as *business projects* within
    Jira and are designed for typical organizational BUs such as **Human Resources**
    (**HR**), Finance, Legal, Marketing, Sales, Operations, Design, Shipping/Inventory,
    and Video production. While not all companies will have all these units, it speaks
    to the power and inclusiveness of JWM''s ability to address these areas and perhaps
    more.'
  prefs: []
  type: TYPE_NORMAL
- en: It is worthy of noting that JWM projects have some of the same shared underpinnings
    of JSW and JSM projects, thereby making it easy for projects of all types to communicate
    with each other. In fact, you are considered to be in a company-managed project
    when you create a JWM project. See the *Company-managed software projects* section
    for more on this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon selecting **Create project**, the user is presented with an extensive
    list of JWM project templates. JWM project templates provide a quick means of
    getting your project set up by creating a base project, a defined workflow based
    on the template type, an accompanying board to match the workflow, and the various
    screens and permissions needed to administer the project. We will delve into JWM
    templates in more detail in the next chapter, but here is a small list to whet
    your appetite for what is coming and to give you a view of what the screen will
    look like when creating a project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – JWM project templates'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.3_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – JWM project templates
  prefs: []
  type: TYPE_NORMAL
- en: 'These business-type projects are more restrictive than JSW projects in that
    the board cannot be modified, and the columns on the JWM board, shown in the following
    screenshot, are actually controlled by the statuses found in the accompanying
    workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – JWM board'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.4_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – JWM board
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's take a look at the components and operation of JSW projects.
  prefs: []
  type: TYPE_NORMAL
- en: JSW projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JSW projects**, almost by definition, refer to projects primarily related
    to software development/engineering. These include typical workflows that transition
    through a combination of architectural design, development, code or peer review,
    merging of code, **quality assurance** (**QA**) testing, deployment, and possibly
    more. Or course, all these are flexible paths within JSW workflows.'
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations also utilize Jira's version of the agile world's favorite
    Scrum functionality. This includes releases, setting up Sprints, automatically
    moving uncompleted issues in a completed Sprint to the next Sprint, and so on.
    As you begin to create your JSW project, you will select from either a **Scrum**,
    **Kanban**, or **Bug Tracking** template.
  prefs: []
  type: TYPE_NORMAL
- en: The Jira Software Scrum template provides the user with pertinent information
    about the template type, along with the issue types included in the initial project
    setup and the statuses in the workflow. Since **Scrum** typically makes use of
    Sprints, the template workflow for that option will include simple statuses of
    **To Do**, **In Progress**, and **Done**.
  prefs: []
  type: TYPE_NORMAL
- en: The other primary type of JSW project is for **Kanban**. This agile framework
    is quickly catching on around the world, and Jira provides a mechanism to implement
    Kanban quickly.
  prefs: []
  type: TYPE_NORMAL
- en: While these types of projects gave rise to this product line of Jira, JSW projects
    have become the norm for all types of projects within organizations due to the
    many customizations available in the tool. But the complexity in the initial setup,
    maintenance, and administration for all that goes with these project types has
    now given rise to the need for a simpler option. In addition to providing simpler
    business-related projects via JWM, Atlassian has also introduced **team-managed
    projects**.
  prefs: []
  type: TYPE_NORMAL
- en: The **Bug Tracking** template enables the user to implement a project that not
    only tracks bugs but also connects issues back to improvements or new features
    that the bugs are associated with. All of these issue types, along with epics,
    tasks, and sub-tasks, can be seen on the same board and utilize the same workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Team-managed software projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Introduced as next-gen projects a few years ago, these software projects allow
    an independent team to fully administer and manage its projects without the need
    for a traditional Jira administrator. As with JWM projects, team-managed projects
    have a simpler interface but reduced functionality. In fact, much of the initial
    criticism of these projects is that they are too restrictive.
  prefs: []
  type: TYPE_NORMAL
- en: In response, Atlassian is continuing to add much-needed functionality to the
    tool while maintaining the independent administration that primarily separates
    it from all other types of projects in Jira. Teams can grant access to users on
    their own, create their own independent custom fields and automation, and manage
    their own workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Company-managed software projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Company-managed projects** are the mainstay project types for most organizations
    using Jira. They provide the most functionality by utilizing shared custom fields,
    schemes for permissions, screens, workflows, issue types, notifications, and so
    on. All of these can be modified as necessary, although the user will need to
    be a Jira administrator to make changes to most of the objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have chosen either Scrum or Kanban, you will then decide on **Team-managed**
    or **Company-managed** as the project type. As noted in the following screenshot,
    you will not be able to *convert* or change the type of a project once it is created.
    You will need to create a new project of the appropriate type and move any existing
    issues from the original project to the new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Choosing a team-managed or company-managed project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.5_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – Choosing a team-managed or company-managed project
  prefs: []
  type: TYPE_NORMAL
- en: JSM projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JSM projects go back to more of the root of Jira's first offering of a *ticketing*-type
    tool. They are especially designed for receiving and processing helpdesk types
    of requests. Perhaps the favorite feature is the helpful **portal** function,
    which also incorporates easy-to-fill-in forms.
  prefs: []
  type: TYPE_NORMAL
- en: Another very useful functionality is the concept of non-licensed users (or customers)
    being able to submit requests. This is a customers feature where the user can
    be exterior to the organization or even anonymous. This saves on license fees
    for users who just need to submit a request.
  prefs: []
  type: TYPE_NORMAL
- en: However, for any user who needs to edit field values or transition issues, there
    is an added cost in that those who are handling the request must be added as *agents*,
    which requires an additional license fee.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as JWM has some built-in templates to get a project started, JSM also
    has a handful of templates available, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – JSM project templates'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.6_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.6 – JSM project templates
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a quick look at how JWM differs from the old Jira Core product.
  prefs: []
  type: TYPE_NORMAL
- en: Review of the Jira Core product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2015, Atlassian split Jira into two different products—Jira Core and JSW.
    Jira Core was always billed as a simple way to get started with issue tracking
    and became the base product that was offered when new users came on board with
    the tool. The focus was on non-technical teams in an organization, oftentimes
    referred to as business teams.
  prefs: []
  type: TYPE_NORMAL
- en: JSW continues to be aimed at software development teams and provides the most
    functionality and flexibility of the two products. The two have lived side by
    side for nearly a decade in versions deployed on-premises (**Jira Server**) and
    in the cloud (**Jira Cloud**). **Data Center** versions are also available.
  prefs: []
  type: TYPE_NORMAL
- en: While Jira was always intended to be used by technical and non-technical teams
    alike, the introduction of the JSW product placed an emphasis on Agile development,
    release management, and software team-related reporting. In fact, the previous
    releases of Jira leading up to the JSW announcement had already begun implementing
    many of the features that were coming. As Jira continued to grow in capabilities,
    it also grew in complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the biggest knock against Jira by those newcomers dipping their toe
    into Atlassian waters for the first time was figuring out the beast that it had
    become. It seems that the namesake of *Gojira* (Japanese for Godzilla, and the
    inspiration for the shortened name of the tool) had to a certain extent become
    a monster for the rookie user.
  prefs: []
  type: TYPE_NORMAL
- en: To address this issue, Jira Core became the intended safe path into the waters.
    It kept many of the powerful functionality that had endeared it to the Jira fanbase
    but provided a simpler approach to getting started with the tool, and all without
    having to sacrifice what made Jira the best tool for the job for many people.
  prefs: []
  type: TYPE_NORMAL
- en: What's new in JWM?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After more than half a decade since the official rollout of the Jira Core branding,
    Atlassian decided that a makeover was due. In discussions with a selection of
    Jira users and Atlassian community leaders, Atlassian product managers and designers
    embarked on meeting the needs and desires of their customers in the Jira Core
    product makeover.
  prefs: []
  type: TYPE_NORMAL
- en: 'As already mentioned, while the underpinning of JWM projects has the same basic
    structure as company-managed software projects, it''s the newest features that
    really set it apart from other Jira project types. Let''s take a look at these
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – JWM components'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.7_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 – JWM components
  prefs: []
  type: TYPE_NORMAL
- en: 'We will briefly look at the Jira board and new items here, but each will be
    expanded on in more detail in the chapters to come. These are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**: This feature provides information through an activity stream for
    the project and statistics related to issue status, priorities, and assignees.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List**: This feature provides a list of issues for the project while displaying
    various fields (columns) for the particular issues. It also provides inline editing
    for each of the fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Board**: This is the standard board feature provided for most Jira projects,
    though it is limited and not editable for things such as the board filter or card
    and color displays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Calendar**: This is an in-project calendar relating to issues within the
    project. It displays issues based on the due date and/or the start date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timeline**: This feature is similar to the **Roadmap** feature available
    for JSW projects. It displays issues in a Gantt format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forms**: Although listed in the plural form, there is actually just one form
    per project available at the time of writing this book. The form is simple to
    produce and uses an intake format, using drag and drop fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New terms learned in this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s conclude the chapter by going through a list of new terms learned in
    this chapter, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JWM**: A rebranding of Jira Core Cloud and offered as a new product with
    many new features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jira Core**: An initial Atlassian base project management product closely
    aligned with business teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ITSM**: How IT teams deliver services to their customers and manage that
    delivery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSW**: Atlassian''s project management tool aimed at software development
    teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSM**: A rebranding of Jira Service Desk and Atlassian''s ticket management
    system provided for helpdesk teams such as IT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project templates**: A set of preconfigured components and features used
    to quickly create new JWM projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Board**: A visualization of work as cards on a display made up of rows and
    columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team-managed projects**: JSW projects that are self-contained and geared
    for individual team use. It is a rebranding of next-gen projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Company-managed projects**: JSW projects that use components that can be
    shared across multiple projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jira Cloud**: Atlassian''s platform for products based exclusively on access
    through the internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, there you have it—a concise yet thorough view into the origins of JWM
    and a discussion of where it fits in the Jira ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you have learned about different project types in Jira and
    when to use them.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered how the original Jira Core tool has changed from the initial
    offering to the new JWM product. Finally, we took a brief look at the new features
    available for JWM projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, back to our original question: *Why choose JWM?* As you have seen, with
    the availability of multiple project templates and exciting new components such
    as an inline editable list, **Calendar**, **Forms**, and **Timeline**, it is the
    easiest and most complete product for business-related projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing this knowledge, you can now get started using Jira in the simplest
    manner available and be immediately successful in corralling that work into easy-to-use
    projects. You will be more organized than ever and have information at the tips
    of your fingers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn all about the various JWM templates that
    are available and how the user can determine which one best fits their requirements.
  prefs: []
  type: TYPE_NORMAL
