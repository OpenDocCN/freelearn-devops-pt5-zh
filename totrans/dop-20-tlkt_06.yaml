- en: Chapter 6. Configuration Management in the Docker World
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：Docker世界中的配置管理
- en: Anyone managing more than a few servers can confirm that doing such a task manually
    is a waste of time and risky. **Configuration management** (**CM**) exists for
    a long time, and there is no single reason I can think of why one would not use
    one of the tools. The question is not whether to adopt one of them but which one
    to choose. Those that already embraced one or the other and invested a lot of
    time and money will probably argue that the best tool is the one they chose. As
    things usually go, the choices change over time and the reasons for one over the
    other might not be the same today as they were yesterday. In most cases, decisions
    are not based on available options but by the architecture of the legacy system,
    we are sworn to maintain. If such systems are to be ignored, or someone with enough
    courage and deep pockets would be willing to modernize them, today's reality would
    be dominated by containers and microservices. In such a situation, the choices
    we made yesterday are different from choices we could make today.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任何管理超过几个服务器的人都可以确认，手动完成这种任务既浪费时间又存在风险。**配置管理**（**CM**）已经存在很长时间了，我无法想到不使用某种工具的理由。问题不是是否要采纳其中一个工具，而是选择哪个工具。那些已经采用其中一个工具并投入了大量时间和金钱的人，可能会争辩说，最好的工具就是他们选择的那个。正如事情通常发展的那样，选择随着时间的推移而变化，选择一个工具的理由可能与昨天不同。在大多数情况下，决策并不是基于可用的选项，而是基于我们誓言维护的遗留系统的架构。如果这些系统可以被忽视，或者有足够勇气和资金的人愿意对其进行现代化，那么今天的现实将被容器和微服务主导。在这种情况下，我们昨天做出的选择与今天可以做出的选择是不同的。
- en: CFEngine
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CFEngine
- en: CFEngine can be considered the father of configuration management. It was created
    in 1993 and revolutionized the way we approach server setups and configurations.
    It started as an open source project and become commercialized in 2008 when the
    first enterprise version was released.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: CFEngine可以被认为是配置管理的奠基者。它于1993年创建，彻底改变了我们处理服务器设置和配置的方式。它最初是一个开源项目，2008年推出了第一个企业版本，开始商业化。
- en: CFEngine is written in C, has only a few dependencies and is lightning fast.
    Actually, as to my knowledge, no other tool managed to overcome CFEngine's speed.
    That was, and still is its main strength. However, it had its weaknesses, with
    the requirement for coding skills being probably the main one. In many cases,
    an average operator was not able to utilize CFEngine. It requires a C developer
    to manage it. That did not prevent it from becoming widely adopted in some of
    the biggest enterprises. However, as youth usually wins over age, new tools were
    created, and today rarely anyone chooses CFEngine without being forced to do so
    due to the investment the company made into it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CFEngine是用C语言编写的，只有少数依赖项，并且运行速度极快。事实上，据我所知，没有其他工具能够超越CFEngine的速度。这曾经是，并且至今仍然是它的主要优势。然而，它也有一些弱点，要求具备编程技能可能是其中最大的弱点。在许多情况下，一名普通操作员无法使用CFEngine。它需要一名C开发者来管理。尽管如此，它依然在一些大型企业中得到了广泛采用。然而，随着年轻工具的崛起，新的工具相继问世，今天，除了因为公司在其上的投资而被迫选择外，很少有人会选择CFEngine。
- en: Puppet
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Puppet
- en: Later on, Puppet came into being. It also started as an open source project
    followed by the enterprise version. It was considered more "operations friendly"
    thanks to its model-driven approach and small learning curve when compared to
    CFEngine. Finally, there was a configuration management tool that operations department
    could leverage. Unlike C utilized by CFEngine, Ruby proved to be easier to reason
    with and more accepted by ops. CFEngine's learning curve was probably the main
    reason Puppet got its footing into the configuration management market and slowly
    sent CFEngine into history. That does not mean that CFEngine is not used any more.
    It is, and it doesn't seem it will disappear anytime soon in the same way as Cobol
    is still present in many banks and other finance related businesses. However,
    it lost its reputation for being the weapon of choice.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，Puppet应运而生。它也最初作为一个开源项目开始，然后推出了企业版本。与CFEngine相比，它因其基于模型的方式和较小的学习曲线被认为更“操作友好”。最终，出现了一款操作部门可以使用的配置管理工具。与CFEngine使用的C语言不同，Ruby被证明更容易理解并且更容易被操作部门接受。CFEngine的学习曲线可能是Puppet能够立足配置管理市场并逐渐取代CFEngine的主要原因。这并不意味着CFEngine已经不再使用。它仍然在使用，而且似乎不会像Cobol那样在银行和其他金融相关业务中消失。尽管如此，它失去了作为首选工具的声誉。
- en: Chef
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 厨师
- en: Then came Chef promising to solve some of the nuances of Puppet. And it did,
    for a while. Later, as the popularity of both Puppet and Chef continued increasing,
    they entered the zero sum game. As soon as one of them came up with something
    new or some improvement, the other one adopted it. Both feature an ever increasing
    number of tools that tend to increase their learning curves and complexity. Chef
    is a bit more "developer friendly" while Puppet could be considered more oriented
    towards operations and sysadmin type of tasks. Neither has a clear enough advantage
    over the other, and the choice is often based on personal experience than anything
    else. Both Puppet and Chef are mature, widely adopted (especially in enterprise
    environments) and have an enormous number of open source contributions. The only
    problem is that they are too complicated for what we are trying to accomplish.
    Neither of them was designed with containers in mind. Neither of them could know
    that the game would change with Docker since it didn't exist at the time they
    were designed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Chef 应运而生，承诺解决 Puppet 的一些细节问题。它确实做到了，一段时间内也很有效。后来，随着 Puppet 和 Chef 的普及，它们进入了零和博弈。当其中一个工具推出新功能或做出改进时，另一个工具也会采纳。两者都有越来越多的工具，往往使它们的学习曲线和复杂度不断增加。Chef
    对开发者更友好，而 Puppet 更倾向于面向运维和系统管理员类型的任务。两者没有明显的优劣之分，选择通常更多是基于个人经验。Puppet 和 Chef 都是成熟的、广泛采用的（尤其在企业环境中），并且有着大量的开源贡献。唯一的问题是，它们对于我们试图实现的目标来说，过于复杂。它们都没有考虑到容器的出现。它们在设计时并不知道
    Docker 会改变游戏规则，因为在它们设计时，Docker 并不存在。
- en: All of the configuration management tools we mentioned thus far are trying to
    solve problems that we should not have the moment we adopt containers and immutable
    deployments. The server mess that we had before is no more. Instead of hundreds
    or even thousands of packages, configuration files, users, logs, and so on, we
    are now trying to deal with a lot of containers and very limited amount of anything
    else. That does not mean that we do not need configuration management. We do!
    However, the scope of what the tool of choice should do is much smaller. In most
    cases, we need a user or two, Docker service up and running and a few more things.
    All the rest are containers. Deployment is becoming a subject of a different set
    of tools and redefining the scope of what CM should do. Docker Compose, Mesos,
    Kubernetes, and Docker Swarm, are only a few of a rapidly increasing number of
    deployment tools we might use today. In such a setting, our configuration management
    choice should value simplicity and immutability over other things. Syntax should
    be simple and easy to read even to those who never used the tool. Immutability
    can be accomplished by enforcing a push model that does not require anything to
    be installed on the destination server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们提到的所有配置管理工具都试图解决一些问题，这些问题在我们采用容器和不可变部署后就不再存在了。我们以前遇到的服务器混乱已经不复存在。现在，我们不再面对成百上千的包、配置文件、用户、日志等，而是需要处理大量的容器和非常有限的其他资源。这并不意味着我们不再需要配置管理，我们仍然需要！然而，选择的工具应当执行的范围要小得多。在大多数情况下，我们只需要一两个用户、运行中的
    Docker 服务以及一些其他组件。其他的基本都是容器。部署已经成为另一类工具的范畴，并重新定义了配置管理应做的事情。Docker Compose、Mesos、Kubernetes
    和 Docker Swarm，仅是我们今天可能使用的快速增长的部署工具中的一部分。在这种情况下，我们选择的配置管理工具应当更注重简洁性和不可变性，而不是其他因素。语法应当简单、易读，即使是那些从未使用过该工具的人也能理解。不可变性可以通过强制推送模型来实现，这种模型不需要在目标服务器上安装任何东西。
- en: Ansible
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible
- en: Ansible tries to solve the same problems as other configuration management tools
    but in a very different way. One significant difference is that it performs all
    its operations over SSH. CFEngine and Puppet require clients to be installed on
    all servers they are supposed to manage. While Chef claims that it doesn't, its
    support for agent-less running has limited features. That in itself is a huge
    difference when compared to Ansible that does not require servers to have anything
    special since SSH is (almost) always present. It leverages well defined and widely
    used protocol to run whatever commands need to be run to make sure that the destination
    servers comply with our specifications. The only requirement is Python that is
    already pre-installed on most Linux distributions. In other words, unlike competitors
    that are trying to force you to setup servers in a certain way, Ansible leverages
    existing realities and does not require anything. Due to its architecture, all
    you need is a single instance running on a Linux or OS X computer. We can, for
    example, manage all our servers from a laptop. While that is not advisable and
    Ansible should probably run on a real server (preferably the same one where other
    continuous integration and deployment tools are installed), laptop example illustrates
    its simplicity. In my experience, push-based systems like Ansible are much easier
    to reason with than pull based tools we discussed earlier.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 尝试解决与其他配置管理工具相同的问题，但采用了完全不同的方式。一个显著的区别是，它通过 SSH 执行所有操作。CFEngine 和 Puppet
    要求在所有需要管理的服务器上安装客户端。而 Chef 声称它不需要，但其对无代理运行的支持功能有限。与此相比，Ansible 的一个巨大优势是，它不需要服务器具备任何特殊的配置，因为
    SSH（几乎）总是存在的。它利用了一个定义良好且广泛使用的协议来执行需要执行的命令，以确保目标服务器符合我们的规格。唯一的要求是 Python，而大多数 Linux
    发行版上已经预装了 Python。换句话说，与那些试图强迫你以特定方式设置服务器的竞争者不同，Ansible 利用现有的现实条件，不需要任何额外配置。由于其架构，你只需要在一台
    Linux 或 OS X 计算机上运行一个实例。例如，我们可以从笔记本电脑管理所有服务器。虽然这样做并不建议，Ansible 应该运行在一台真正的服务器上（最好是与其他持续集成和部署工具一起安装的服务器），但笔记本电脑的例子说明了它的简便性。根据我的经验，像
    Ansible 这样的推送式系统比我们之前讨论的拉取式工具更容易理解。
- en: Learning Ansible takes a fraction of the time when compared to all the intricacies
    required to master the other tools. Its syntax is based on YAML and with a single
    glimpse over a playbook, even a person who never used the tool would understand
    what's going on. Unlike Chef, Puppet and, especially CFEngine that are written
    by developers for developers, Ansible is written by developers for people who
    have better things to do than learn yet another language and/or DSL.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与掌握其他工具所需的复杂性相比，学习 Ansible 所花费的时间极少。它的语法基于 YAML，只需简单浏览一个 playbook，即使是从未使用过该工具的人也能明白发生了什么。与
    Chef、Puppet，尤其是 CFEngine 这些由开发者为开发者编写的工具不同，Ansible 是由开发者为那些有更重要事情要做的人编写的，他们不想再学习另一种语言和/或领域特定语言（DSL）。
- en: Some would point out that the major downside is Ansible's limited support for
    Windows. The client does not even run on Windows, and the number of modules that
    can be used in playbooks and run on it is very limited. This downside, assuming
    that we are using containers is, in my opinion, an advantage. Ansible developers
    did not waste time trying to create an all around tool and concentrated on what
    works best (commands over SSH on Linux). In any case, Docker is not yet ready
    to run containers in Windows. It might be in the future but at this moment (or,
    at least, the moment I was writing this text), this is on the roadmap. Even if
    we ignore containers and their questionable future on Windows, other tools are
    also performing much worse on Windows than Linux. Simply put, Windows architecture
    is not as friendly to the CM objectives as Linux is.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有人会指出，Ansible 的一个主要缺点是对 Windows 的支持有限。客户端甚至无法在 Windows 上运行，且可以在 playbooks 中使用并在其上运行的模块数量非常有限。就我而言，在使用容器的情况下，这个缺点反而是一个优势。Ansible
    的开发者没有浪费时间去创建一个通用工具，而是专注于最有效的方式（在 Linux 上通过 SSH 执行命令）。无论如何，Docker 目前还不能在 Windows
    上运行容器。未来可能会，但在我写这篇文章时（或者至少是在那个时刻），这还在路线图上。即使忽略容器及其在 Windows 上的未来问题，其他工具在 Windows
    上的表现也远不如在 Linux 上好。简而言之，Windows 的架构并不像 Linux 那样适合配置管理的目标。
- en: I probably went too far and should not be too harsh on Windows and question
    your choices. If you do prefer Windows servers over some Linux distribution, all
    my praise of Ansible is in vain. You should choose Chef or Puppet and, unless
    you already use it, ignore CFEngine.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能走得太远了，不应该过于苛刻地评价 Windows 或质疑你的选择。如果你更喜欢 Windows 服务器而非某些 Linux 发行版，那么我对 Ansible
    的所有赞扬就变得毫无意义。你应该选择 Chef 或 Puppet，除非你已经在使用它，否则忽略 CFEngine。
- en: Final Thoughts
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的思考
- en: If someone asked me few years ago which tool should we use I would have a hard
    time answering. Today, if one has the option to switch to containers (be it Docker
    or some other type) and immutable deployments, the choice is clear (at least among
    tools I mentioned). Ansible (when combined with Docker and Docker deployment tools)
    wins any time of the day. We might even argue whether CM tools are needed at all.
    There are examples when people fully rely upon, let's say, CoreOS, containers,
    and deployment tools like Docker Swarm or Kubernetes. I do not have such a radical
    opinion (yet) and think that CM continues being a valuable tool in the arsenal.
    Due to the scope of the tasks CM tools needs to perform, Ansible is just the tool
    we need. Anything more complicated or harder to learn would be overkill. I am
    yet to find a person who had trouble maintaining Ansible playbooks. As a result,
    configuration management can quickly become the responsibility of the whole team.
    I'm not trying to say that infrastructure should be taken lightly (it definitely
    shouldn't). However, having contributions from the entire team working on a project
    is a significant advantage for any type of tasks and CM should not be an exception.
    CFEngine, Chef, and Puppet are an overkill with their complex architecture and
    their steep learning curve, at least, when compared with Ansible.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果几年前有人问我应该使用哪个工具，我会很难回答。今天，如果有机会切换到容器（无论是 Docker 还是其他类型）和不可变部署，那么选择是显而易见的（至少在我提到的工具中是这样）。Ansible（结合
    Docker 和 Docker 部署工具）随时都能脱颖而出。我们甚至可以争论是否根本不需要配置管理工具。有些例子中，人们完全依赖，比如说 CoreOS、容器和
    Docker Swarm 或 Kubernetes 这样的部署工具。我并没有这么激进的观点（至少现在还没有），我认为配置管理仍然是工具库中的宝贵工具。由于配置管理工具需要执行的任务范围，Ansible
    正是我们需要的工具。任何更复杂或者更难学习的工具都会是浪费。我还没见过哪个人曾在维护 Ansible playbook 时遇到困难。因此，配置管理可以迅速成为整个团队的责任。我并不是在说基础设施应该轻视（它绝对不应该）。然而，项目中整个团队的贡献是任何类型任务的重大优势，配置管理也不应例外。CFEngine、Chef
    和 Puppet 因其复杂的架构和陡峭的学习曲线而显得过于繁琐，至少在与 Ansible 相比时是这样。
- en: The four tools we briefly went through are by no means the only ones we can
    choose from. You might easily argue that neither of those is the best and vote
    for something else. Fair enough. It all depends on preferences and objectives
    we are trying to archive. However, unlike the others, Ansible can hardly be a
    waste of time. It is so easy to learn that, even if you choose not to adopt it,
    you won't be able to say that a lot of valuable time was wasted. Besides, everything
    we learn brings something new and makes us better professionals.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要介绍的四个工具绝不是唯一可供选择的工具。你可能会轻易地争辩说这些工具都不是最好的，而选择其他工具。没问题，这完全取决于我们尝试实现的目标和个人偏好。然而，与其他工具不同，Ansible
    几乎不可能浪费时间。它非常容易学习，即使你选择不使用它，也无法说浪费了大量宝贵的时间。此外，我们学习的每一样东西都会带来新的收获，并让我们成为更优秀的专业人士。
- en: You probably guessed by now that Ansible will be the tool we'll use for configuration
    management.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能已经猜到，Ansible 将是我们用来进行配置管理的工具。
- en: Configuring the Production Environment
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置生产环境
- en: Let us see Ansible in action and then discuss how it is configured. We'll need
    two VMs up and running; the `cd` will be used as a server from which we'll set
    up the prod node.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Ansible 的实际操作，然后讨论它是如何配置的。我们需要两台虚拟机正常运行；`cd` 将用作一个服务器，我们将从这个服务器配置生产节点。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output should be similar to the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下内容：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The important thing about Ansible (and configuration management in general)
    is that we are in most cases specifying the desired state of something instead
    commands we want to run. Ansible, in turn, will do its best to make sure that
    the servers are in that state. From the output above we can see that statuses
    of all tasks are *changed* or *skipping*. For example, we specified that we want
    Docker service. Ansible noticed that we do not have it on the destination server
    (*prod*) and installed it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible（以及一般的配置管理）中最重要的一点是，我们在大多数情况下指定的是某个事物的期望状态，而不是我们想要执行的命令。Ansible 将尽力确保服务器处于该状态。从上面的输出中我们可以看到所有任务的状态要么是*已更改*，要么是*跳过*。例如，我们指定了需要
    Docker 服务，Ansible 注意到目标服务器（*prod*）上没有安装 Docker，于是安装了它。
- en: What happens if we run the playbook again?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次运行 playbook，会发生什么？
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You''ll notice that the status of all the tasks is `ok`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到所有任务的状态都是`ok`：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Ansible went to the server and checked the status of all tasks, one at the time.
    Since this is the second run and we haven't modified anything in the server, Ansible
    concluded that there is nothing to do. The current state is as expected.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 访问了服务器并逐一检查了所有任务的状态。由于这是第二次运行，并且我们没有修改服务器上的任何内容，Ansible 认为无需执行任何操作，当前状态与预期一致。
- en: The command we just run (`ansible-playbook prod.yml -i hosts/prod`) is simple.
    The first argument is the path to the playbook and the second argument's value
    represents the path to the inventory file that contains the list of servers where
    this playbook should run.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚运行的命令（`ansible-playbook prod.yml -i hosts/prod`）非常简单。第一个参数是 playbook 的路径，第二个参数的值表示包含应该运行此
    playbook 的服务器列表的清单文件路径。
- en: That was a very simple example. We had to setup the production environment and,
    at this moment, all we needed is Docker, Docker Compose, and a few configuration
    files. Later on, we'll see more complicated examples.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的例子。我们需要设置生产环境，此时所需的只是 Docker、Docker Compose 和一些配置文件。稍后，我们将看到更复杂的例子。
- en: Now that we've seen Ansible in action let us go through the configuration of
    the *playbook* we just run (twice).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到 Ansible 的实际运行，让我们来看一下我们刚刚运行的（两次）*playbook* 的配置。
- en: Setting Up the Ansible Playbook
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Ansible Playbook
- en: The content of the `prod.yml` Ansible playbook is as follows.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`prod.yml` Ansible playbook 的内容如下：'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Just by reading the playbook one should be able to understand what's it about.
    It is running on hosts called *prod* as the user *vagrant* and executes commands
    as `sudo`. At the bottom is the list of roles that, in our case, consists of only
    two; `common` and `docker`. Role is a set of tasks that we usually organize around
    one functionality, product, type of operations, and so on. The Ansible playbook
    organization is based on tasks that are grouped into roles that can be combined
    into playbooks.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 仅通过阅读 playbook，应该能够理解它的内容。它在名为*prod*的主机上以用户*vagrant*身份运行，并以 `sudo` 权限执行命令。底部是角色列表，在我们的案例中只有两个角色：`common`
    和 `docker`。角色是一组通常围绕某一功能、产品或操作类型等组织的任务。Ansible playbook 的组织结构基于将任务分组到角色中，角色可以组合成
    playbook。
- en: Before we take a look at it, let us discuss what are the objectives of the *docker*
    role. We want to make sure that the Docker Debian repository is present and that
    the latest *docker-engine* package is installed. Later on, we'll need the `docker-py`
    (Python API client for Docker) that can be installed with `pip` so we're making
    sure that both are present in our system. Next, we need the standard Docker configuration
    to be replaced with our file located in the *files* directory. Docker configurations
    require Docker service to be restarted, so we have to do just that every time
    there is a change to the `files/docker` file. Finally, we're making sure that
    the user *vagrant* is added to the group *docker* and, therefore, able to run
    Docker commands.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看之前，让我们先讨论一下 *docker* 角色的目标。我们希望确保 Docker Debian 仓库存在，并且安装了最新的 *docker-engine*
    包。稍后，我们需要安装 `docker-py`（Docker 的 Python API 客户端），可以通过 `pip` 安装，因此我们确保系统中同时存在这两者。接下来，我们需要将标准的
    Docker 配置替换为我们位于 *files* 目录下的文件。Docker 配置要求重新启动 Docker 服务，所以每次 `files/docker`
    文件发生更改时，我们都会执行此操作。最后，我们确保用户 *vagrant* 被添加到 *docker* 组中，从而能够运行 Docker 命令。
- en: 'Let us take a look at the `roles/docker` directory that defines the role we''re
    using. It consists of two sub-directories, `files`, and `tasks`. Tasks are the
    heart of any role and, by default, requires them to be defined in the `main.yml`
    file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下定义我们正在使用的角色的 `roles/docker` 目录。它由两个子目录组成：`files` 和 `tasks`。任务是任何角色的核心，默认情况下，任务需要在
    `main.yml` 文件中定义：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Since we'll be running Docker on both Debian (Ubuntu) and CentOS or Red Hat,
    roles are split into `debian.yml` and `centos.yml` files. Right now, we'll be
    using Ubuntu so let's take a look at the `roles/docker/tasks/debian.yml` role.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在 Debian（Ubuntu）和 CentOS 或 Red Hat 上运行 Docker，因此角色被拆分为 `debian.yml` 和 `centos.yml`
    文件。目前，我们将使用 Ubuntu，所以让我们看看 `roles/docker/tasks/debian.yml` 角色。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If this would be a different framework or a tool, I would pass through each
    of the tasks and explain them one by one, and you would be very grateful for acquiring
    more pieces of wisdom. However, I do not think there is a reason to do that. Ansible
    is very straightforward. Assuming that you have a basic Linux knowledge, I bet
    you can understand each of the tasks without any further explanation. In case
    I was wrong, and you do need an explanation, please look for the module in question
    in the [http://docs.ansible.com/ansible/list_of_all_modules.html](http://docs.ansible.com/ansible/list_of_all_modules.html)
    of the Ansible documentation. For example, if you''d like to know what the second
    task does, you''d open the apt module. The only important thing to know for now
    is how the indentation works. YAML is based on `key: value`, `parent/child` structure.
    For example, the last task has `name` and `state` keys that are children of the
    `service` that, in turn, is one of the Ansible modules.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '如果这是一个不同的框架或工具，我会逐一讲解每个任务，你也会非常感谢获得更多的智慧。然而，我认为没有必要这样做。Ansible 非常直接。假设你有基本的
    Linux 知识，我敢打赌你可以在没有任何进一步解释的情况下理解每个任务。如果我错了，你确实需要解释，请查看 Ansible 文档中的[所有模块列表](http://docs.ansible.com/ansible/list_of_all_modules.html)。例如，如果你想知道第二个任务做了什么，你可以打开
    apt 模块。现在唯一需要知道的是缩进的工作原理。YAML 基于 `key: value` 和 `parent/child` 结构。例如，最后一个任务有 `name`
    和 `state` 键，它们是 `service` 的子项，而 `service` 又是 Ansible 模块之一。'
- en: 'There is one more thing we used with our `prod.yml` playbook. The command we
    executed had the `-i hosts/prod` argument that we used to specify the inventory
    file with the list of hosts the playbook should run on. The `hosts/prod` inventory
    is quite big since it is used throughout the whole book. At the moment, we are
    interested only in the `prod` section since that is the value of the `hosts` argument
    we specified in the playbook:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事我们在 `prod.yml` playbook 中使用过。我们执行的命令带有 `-i hosts/prod` 参数，我们用它来指定 inventory
    文件，其中列出了 playbook 应该运行的主机。`hosts/prod` inventory 相当大，因为它在整个书中都有使用。目前，我们只关心 `prod`
    部分，因为那是我们在 playbook 中指定的 `hosts` 参数的值：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If we'd like to apply the same configuration to more than one server all we'd
    have to do is add another IP.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将相同的配置应用到多个服务器，只需添加另一个 IP 地址。
- en: We'll see more complex examples later on. I intentionally said more complex
    since nothing is truly complicated in Ansible but, depending on some tasks and
    their interdependency, some roles can be more or less complex. I hope that the
    playbook we just run gave you an approximation of the type of the tool Ansible
    is and I hope you liked it. We'll rely on it for all the configuration management
    tasks and more.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会看到更复杂的示例。我故意说“更复杂”，因为在 Ansible 中没有什么是非常复杂的，但根据一些任务及其相互依赖性，某些角色可能更复杂或更简单。我希望我们刚刚运行的
    playbook 能给你一个 Ansible 工具类型的大致了解，也希望你喜欢它。我们将依赖它来完成所有配置管理任务以及更多工作。
- en: You might have noticed that we never entered the `prod` environment but run
    everything remotely from the `cd` server. The same practice will continue throughout
    the book. With Ansible and few other tools we'll get introduced to, later on,
    there is no need to ssh into servers and do manual tasks. In my opinion, our knowledge
    and creativity should be used for coding and everything else should be automatic;
    testing, building, deployment, scaling, logging, monitoring, and so on. That is
    one of the takeaways of this book. The key to success is massive automation that
    frees us to do exciting and more productive tasks.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们从未进入过`prod`环境，而是通过`cd`服务器远程运行所有操作。本书中将继续采用这种做法。借助Ansible和后面我们将介绍的其他工具，我们无需通过ssh进入服务器并手动执行任务。依我看，我们的知识和创造力应该用于编程，其他所有的事情都应该是自动化的；例如测试、构建、部署、扩展、日志记录、监控等等。这是本书的一大收获。成功的关键在于大规模的自动化，它让我们有更多时间去做令人兴奋和更具生产力的任务。
- en: 'As before, we''ll end this chapter by destroying all the VMs. The next chapter
    will create those we need:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 和以前一样，我们将在本章结束时销毁所有虚拟机。下一章将创建我们所需的虚拟机：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With the first production server up and running (at the moment only with Ubuntu
    OS, Docker, and Docker Compose) we can continue working on the basic implementation
    of the deployment pipeline.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 随着第一台生产服务器（目前仅运行Ubuntu操作系统、Docker和Docker Compose）上线，我们可以继续进行部署管道的基本实现工作。
