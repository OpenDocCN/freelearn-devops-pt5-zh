["```\n$ cat sample.txt | perl -lpe 's/^\\s*//'\n```", "```\n$ mkdir -p ~/fod/ch07/simple-task && cd ~/fod/ch07/simple-task\n```", "```\n$ code .\n```", "```\n1234567890\n  This is some text\n   another line of text\n more text\n     final line\n```", "```\n$ docker container run --rm -it \\\n -v $(pwd):/usr/src/app \\\n -w /usr/src/app \\\n perl:slim sh -c \"cat sample.txt | perl -lpe 's/^\\s*//'\"\n```", "```\n1234567890\nThis is some text\nanother line of text\nmore text\nfinal line\n```", "```\n$ docker container run -it --rm \\\n-v $(pwd):/usr/src/app \\\n -w /usr/src/app \\\n perl:<old-version> perl your-old-perl-script.pl\n```", "```\nimport sys\n\nfname = sys.argv[1]\nlines = 0\nwords = 0\nletters = 0\n\nfor line in open(fname):\n    lines += 1\n    letters += len(line)\n\n    pos = 'out'\n    for letter in line:\n        if letter != ' ' and pos == 'out':\n            words += 1\n            pos = 'in'\n        elif letter == ' ':\n            pos = 'out'\n\nprint(\"Lines:\", lines)\nprint(\"Words:\", words)\nprint(\"Letters:\", letters)\n```", "```\n$ docker container run --rm -it \\\n -v $(pwd):/usr/src/app \\\n -w /usr/src/app \\\n python:3.7.4-alpine python stats.py sample.txt\n```", "```\nLines: 5\nWords: 13\nLetters: 81\n```", "```\n$ mkdir ~/fod/ch07/integration-test-node && \\\n    cd ~/fod/ch07/integration-test-node\n```", "```\n$ mkdir tests api database\n```", "```\n$ code .\n```", "```\nCREATE TABLE hobbies(\n hobby_id serial PRIMARY KEY,\n hobby VARCHAR (255) UNIQUE NOT NULL\n);\n\ninsert into hobbies(hobby) values('swimming');\ninsert into hobbies(hobby) values('diving');\ninsert into hobbies(hobby) values('jogging');\ninsert into hobbies(hobby) values('dancing');\ninsert into hobbies(hobby) values('cooking');\n```", "```\n$ docker volume create pg-data\n```", "```\n$ docker container run -d \\\n --name postgres \\\n -p 5432:5432 \\\n -v $(pwd)/database:/docker-entrypoint-initdb.d \\\n -v pg-data:/var/lib/postgresql/data \\\n -e POSTGRES_USER=dbuser \\\n -e POSTGRES_DB=sample-db \\\n postgres:11.5-alpine\n```", "```\n$ docker container logs postgres\n```", "```\n...\nserver started\nCREATE DATABASE\n\n/usr/local/bin/docker-entrypoint.sh: running /docker-entrypoint-initdb.d/init-db.sql\nCREATE TABLE\nINSERT 0 1\nINSERT 0 1\nINSERT 0 1\nINSERT 0 1\nINSERT 0 1\n\n...\n\nPostgreSQL init process complete; ready for start up.\n\n2019-09-07 17:22:30.056 UTC [1] LOG: listening on IPv4 address \"0.0.0.0\", port 5432\n...\n```", "```\n$ cd ~/fod/ch07/integration-test-node/api\n```", "```\n$ npm init\n```", "```\n{\n  \"name\": \"api\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```", "```\n$ npm install express --save\n```", "```\n$ curl localhost:3000\nSample API\n```", "```\n$ cd ~/fod/ch07/integration-test-node/tests && \\\n    npm init\n```", "```\n$ npm install --save-dev jasmine\n```", "```\n$ node node_modules/jasmine/bin/jasmine init\n```", "```\n{\n  \"spec_dir\": \"spec\",\n  \"spec_files\": [\n    \"**/*[sS]pec.js\"\n  ],\n  \"stopSpecOnExpectationFailure\": false,\n  \"random\": false\n}\n```", "```\n$ npm install request --save-dev\n```", "```\nFROM node:alpine\nWORKDIR /usr/src/app\nCOPY package.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD npm start\n```", "```\nFROM node:alpine\nWORKDIR /usr/src/app\nCOPY package.json ./\nRUN npm install\nCOPY . .\nCMD npm test\n```", "```\ndocker image build -t api-node api\ndocker image build -t tests-node tests\n\ndocker network create test-net\n\ndocker container run --rm -d \\\n --name postgres \\\n --net test-net \\\n -v $(pwd)/database:/docker-entrypoint-initdb.d \\\n -v pg-data:/var/lib/postgresql/data \\\n -e POSTGRES_USER=dbuser \\\n -e POSTGRES_DB=sample-db \\\n postgres:11.5-alpine\n\ndocker container run --rm -d \\\n --name api \\\n --net test-net \\\napi-node\n\necho \"Sleeping for 5 sec...\"\nsleep 5\n\ndocker container run --rm -it \\\n --name tests \\\n --net test-net \\\n -e BASE_URL=\"http://api:3000\" \\\n tests-node\n```", "```\n$ chmod +x ./test.sh \n```", "```\n$ ./test.sh\n```", "```\n...\nSuccessfully built 44e0900aaae2\nSuccessfully tagged tests-node:latest\nb4f233c3578898ae851dc6facaa310b014ec86f4507afd0a5afb10027f10c79d\n728eb5a573d2c3c1f3a44154e172ed9565606af8e7653afb560ee7e99275ecf6\n0474ea5e0afbcc4d9cd966de17e991a6e9a3cec85c53a934545c9352abf87bc6\nSleeping for 10 sec...\n\n> tests@1.0.0 test /usr/src/app\n> jasmine\n\nStarted\n..\n\n2 specs, 0 failures\nFinished in 0.072 seconds\n```", "```\ndocker container rm -f postgres api\ndocker network rm test-net\ndocker volume rm pg-data\n```", "```\n$ mkdir ~/fod/ch07/testcontainer-node && cd ~/fod/ch07/testcontainer-node\n```", "```\n$ npm install request --save-dev\n$ npm install testcontainers --save-dev\n```", "```\nconst request = require(\"request\");\nconst path = require('path');\nconst dns = require('dns');\nconst os = require('os');\nconst { GenericContainer } = require(\"testcontainers\");\n\n(async () => {\n // TODO\n})();\n```", "```\nconst localPath = path.resolve(__dirname, \"../database\");\nconst dbContainer = await new GenericContainer(\"postgres\")\n .withName(\"postgres\")\n .withExposedPorts(5432)\n .withEnv(\"POSTGRES_USER\", \"dbuser\")\n .withEnv(\"POSTGRES_DB\", \"sample-db\")\n .withBindMount(localPath, \"/docker-entrypoint-initdb.d\")\n .withTmpFs({ \"/temp_pgdata\": \"rw,noexec,nosuid,size=65536k\" })\n .start();\n```", "```\nconst dbPort = dbContainer.getMappedPort(5432);\n```", "```\nconst myIP4 = await lookupPromise();\n```", "```\nasync function lookupPromise(){\n return new Promise((resolve, reject) => {\n dns.lookup(os.hostname(), (err, address, family) => {\n if(err) throw reject(err);\n resolve(address);\n });\n });\n};\n```", "```\nconst buildContext = path.resolve(__dirname, \"../api\");\nconst apiContainer = await GenericContainer\n .fromDockerfile(buildContext)\n .build();\n```", "```\nconst startedApiContainer = await apiContainer\n .withName(\"api\")\n .withExposedPorts(3000)\n .withEnv(\"DB_HOST\", myIP4)\n .withEnv(\"DB_PORT\", dbPort)\n .start();\n```", "```\nconst apiPort = startedApiContainer.getMappedPort(3000);\n```", "```\nconst base_url = `http://localhost:${apiPort}`\nrequest.get(base_url + \"/hobbies\", (error, response, body) => {\n //Test code here...\n})\n```", "```\nconsole.log(\"> expecting status code 200\");\nif(response.statusCode != 200){\n logError(`Unexpected status code ${response.statusCode}`);\n}\n```", "```\nfunction logError(message){\n console.log('\\x1b[31m%s\\x1b[0m', `***ERR: ${message}`);\n}\n```", "```\nconst hobbies = JSON.parse(body);\nconsole.log(\"> expecting length of hobbies == 5\");\nif(hobbies.length != 5){\n logError(`${hobbies.length} != 5`);\n}\nconsole.log(\"> expecting first hobby == swimming\");\nif(hobbies[0].hobby != \"swimming\"){\n logError(`${hobbies[0].hobby} != swimming`);\n}\n```", "```\nawait startedApiContainer.stop()\nawait dbContainer.stop();\n```", "```\n$ node tests.js \n```", "```\npipeline {\n    agent any\n    options {\n        skipStagesAfterUnstable()\n    }\n    stages {\n        stage('Build') {\n            steps {\n                echo 'Building'\n            }\n        }\n        stage('Test') {\n            steps {\n                echo 'Testing'\n            }\n        }\n        stage('Deploy to Staging') {\n            steps {\n                echo 'Deploying to Staging'\n            }\n        }\n        stage('Deploy to Production') {\n            steps {\n                echo 'Deploying to Production'\n            }\n        }\n    }\n}\n```", "```\n$ mkdir ~/fod/ch07/jenkins-pipeline && cd ~/fod/ch07/jenkins-pipeline\n```", "```\n$ docker run --rm -d \\\n --name jenkins \\\n -u root \\\n-p 8080:8080 \\\n-v jenkins-data:/var/jenkins_home \\\n -v /var/run/docker.sock:/var/run/docker.sock \\\n -v \"$HOME\":/home \\\n jenkinsci/blueocean\n```", "```\n$ docker container exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n```", "```\n$ cd ~/fod/ch07/jenkins-pipeline && git init\n```", "```\n{\n  \"name\": \"jenkins-pipeline\",\n  \"version\": \"1.0.0\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"test\": \"jasmine\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  },\n  \"devDependencies\": {\n    \"jasmine\": \"^3.4.0\"\n  }\n}\n```", "```\nconst hobbies = [\"jogging\",\"cooking\",\"diving\",\"swimming\",\"reading\"];\n\nexports.getHobbies = () => {\n    return hobbies;\n}\n\nexports.getHobby = id => {\n    if(id<1 || id > hobbies.length)\n        return null;\n    return hobbies[id-1];\n}\n```", "```\nconst hobbies = require('./hobbies');\nconst express = require('express');\nconst app = express();\n\napp.listen(3000, '0.0.0.0', () => {\n    console.log('Application listening at 0.0.0.0:3000');\n})\n\napp.get('/', (req, res) => {\n    res.send('Sample API');\n})\n\napp.get('/hobbies', async (req, res) => {\n    res.send(hobbies.getHobbies());\n})\n\napp.get('/hobbies/:id', async (req, res) => {\n    const id = req.params.id;\n    const hobby = hobbies.getHobby(id);\n    if(!hobby){\n        res.status(404).send(\"Hobby not found\");\n        return;\n    }\n    res.send();\n})\n```", "```\nconst hobbies = require('../hobbies');\ndescribe(\"API unit test suite\", () => {\n    describe(\"getHobbies\", () => {\n        const list = hobbies.getHobbies();\n        it(\"returns 5 hobbies\", () => {\n            expect(list.length).toEqual(5);\n        });\n        it(\"returns 'jogging' as first hobby\", () => {\n            expect(list[0]).toBe(\"jogging\");\n        });\n    })\n})\n```", "```\n{\n    \"spec_dir\": \"spec\",\n    \"spec_files\": [\n      \"**/*[sS]pec.js\"\n    ],\n    \"stopSpecOnExpectationFailure\": false,\n    \"random\": false\n}\n```", "```\n$ git add -A && git commit -m \"First commit\"\n```", "```\nnode_modules\n```", "```\n$ git remote add origin https://github.com/gnschenker/jenkins-pipeline.git\n$ git push -u origin master\n```", "```\npipeline {\n    environment {\n        registry = \"gnschenker/jenkins-docker-test\"\n        DOCKER_PWD = credentials('docker-login-pwd')\n    }\n    agent {\n        docker {\n            image 'gnschenker/node-docker'\n            args '-p 3000:3000'\n            args '-w /app'\n            args '-v /var/run/docker.sock:/var/run/docker.sock'\n        }\n    }\n    options {\n        skipStagesAfterUnstable()\n    }\n    stages {\n        stage(\"Build\"){\n            steps {\n                sh 'npm install'\n            }\n        }\n        stage(\"Test\"){\n            steps {\n                sh 'npm test'\n            }\n        }\n        stage(\"Build & Push Docker image\") {\n            steps {\n                sh 'docker image build -t $registry:$BUILD_NUMBER .'\n                sh 'docker login -u gnschenker -p $DOCKER_PWD'\n                sh 'docker image push $registry:$BUILD_NUMBER'\n                sh \"docker image rm $registry:$BUILD_NUMBER\"\n            }\n        }\n    }\n}\n```", "```\nenvironment {\n    registry = \"gnschenker/jenkins-docker-test\"\n    DOCKER_PWD = credentials('docker-login-pwd')\n}\n```", "```\nagent {\n    docker {\n        image 'gnschenker/node-docker'\n        args '-v /var/run/docker.sock:/var/run/docker.sock'\n    }\n}\n```", "```\nstages {\n    stage(\"Build\"){\n        steps {\n            sh 'npm install'\n        }\n    }\n    stage(\"Test\"){\n        steps {\n            sh 'npm test'\n        }\n    }\n    stage(\"Build & Push Docker image\") {\n        steps {\n            sh 'docker image build -t $registry:$BUILD_NUMBER .'\n            sh 'docker login -u gnschenker -p $DOCKER_PWD'\n            sh 'docker image push $registry:$BUILD_NUMBER'\n            sh \"docker image rm $registry:$BUILD_NUMBER\"\n        }\n    }\n}\n```", "```\nstage('Deploy and smoke test') {\n    steps{\n        sh './jenkins/scripts/deploy.sh'\n    }\n}\n```", "```\n#!/usr/bin/env sh\n\necho \"Removing api container if it exists...\"\ndocker container rm -f api || true\necho \"Removing network test-net if it exists...\"\ndocker network rm test-net || true\n\necho \"Deploying app ($registry:$BUILD_NUMBER)...\"\ndocker network create test-net\n\ndocker container run -d \\\n    --name api \\\n    --net test-net \\\n    $registry:$BUILD_NUMBER\n\n# Logic to wait for the api component to be ready on port 3000\n\nread -d '' wait_for << EOF\necho \"Waiting for API to listen on port 3000...\"\nwhile ! nc -z api 3000; do \n  sleep 0.1 # wait for 1/10 of the second before check again\n  printf \".\"\ndone\necho \"API ready on port 3000!\"\nEOF\n\ndocker container run --rm \\\n    --net test-net \\\n    node:12.10-alpine sh -c \"$wait_for\"\n\necho \"Smoke tests...\"\ndocker container run --name tester \\\n    --rm \\\n    --net test-net \\\n    gnschenker/node-docker sh -c \"curl api:3000\"\n```", "```\nstage('Cleanup') {\n    steps{\n        sh './jenkins/scripts/cleanup.sh'\n    }\n}\n```", "```\n#!/usr/bin/env sh\n\ndocker rm -f api\ndocker network rm test-net\n```", "```\n$ git -a . && git commit -m \"Defined code based Pipeline\"\n$ git push origin master\n```"]