- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most powerful commands in Git is `log`. You've already seen the log
    being used a bit in previous chapters, but now it is time to look at it in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The log can show you when each commit was created, who created it, and other
    useful information about the commit, such as what changed in each file. You have
    great control over what is displayed, as you will see in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s quickly build another project and repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Create a new repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, as we have done before, we''ll clone this repository to our local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Cloning the demo program'
  prefs: []
  type: TYPE_NORMAL
- en: With this local repository, we can begin to examine its commits using `log`.
    To do so, of course, we need to create a program and make some commits.
  prefs: []
  type: TYPE_NORMAL
- en: The LogDemo program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a program in the `LogDemo` directory. Change the program to be public
    and build and run it to make sure it is working:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Testing the program'
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to create the same `calculator` class we've seen before, with the
    same commits after each tiny function. I'll spare you having to look at all that
    and I'll just put it into the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having added all the functions, let''s give it a spin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The results should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'I now have a number of commits, which we can see using the `lg` alias described
    in *Chapter 8*, *Aliases*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Examining the commits with the lg alias of log'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that there are 12 commits, and we can see on the last line that
    none of them has been pushed, and so we are ahead of origin by 12 commits. That
    is confirmed by the `status` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Status shows 12 commits to push and nothing in the working directory'
  prefs: []
  type: TYPE_NORMAL
- en: Once the commits are made, the working directory is clean. You do have 12 commits
    ready to be pushed, but that does not affect Git's analysis of the state of the
    working directory.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another great view of this same information is in Visual Studio. Click on **Git**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: Click on the menu item Git'
  prefs: []
  type: TYPE_NORMAL
- en: 'And then on **View Branch History**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: Branch history'
  prefs: []
  type: TYPE_NORMAL
- en: This shows the 12 commits ready to be pushed, and the one commit that is already
    on origin (`e040fb00`).
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GitHub Desktop has yet another way of presenting the same data. This single
    page tells you a lot in one view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.8: GitHub Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: Along the top, we see the repository, branch, and status. Running down the left
    column are each of the commits and their messages. (Clicking on the up arrow will
    push that commit.) The middle column shows which files are in that commit, and
    the far right shows the code from the selected file. The `log` command can do
    all of these things, but not all at once.
  prefs: []
  type: TYPE_NORMAL
- en: log at the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a large number of flags you can add to `log` to control its output.
    In creating the `lg` alias, we already saw how to use `log -–oneline`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: Using log at the command line'
  prefs: []
  type: TYPE_NORMAL
- en: Looking closely, we see that the left column has the short ID, the right column
    lists the messages associated with each commit, and for both the first and last
    commits, we also see where the head pointer is; both locally and on origin.
  prefs: []
  type: TYPE_NORMAL
- en: Which files changed?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to know which files were changed in each commit but not see what
    those changes were, you would use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an excerpt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.10: Using log to see file changes'
  prefs: []
  type: TYPE_NORMAL
- en: We see two commits. The first, in `Program.cs`, has the message `Call the add
    function`, and you can also see the full ID, the author, and when this commit
    was made.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can of course do the same thing with our `lg` alias to condense the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.11: Using the shortcut lg'
  prefs: []
  type: TYPE_NORMAL
- en: The problem here is that the vertical spacing can be confusing. This example
    shows three commits. The first has the message `Instantiate the calculator` and
    in that commit `Program.cs` was modified. The best way to figure out which file
    goes with which commit is to start with the ID.
  prefs: []
  type: TYPE_NORMAL
- en: There is not an easy way to do this in Visual Studio and, as we saw, GitHub
    Desktop shows you the list of changed files as part of the commit history.
  prefs: []
  type: TYPE_NORMAL
- en: What changed in each file?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can go further and ask `log` which files changed and what the files were
    in that change. The command for this is `git log -p`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will print out the changes for each file in each commit. Here is one file''s
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.12: Using log to see what has changed in each file'
  prefs: []
  type: TYPE_NORMAL
- en: 'On my computer, the new line is shown in green, and notice the `+` sign to
    the left indicating that this line was added. Let''s go into `Program.cs` and
    make some more changes – taking out the square root function and adding a call
    to the divide function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.13: Using diff indicators to see changes'
  prefs: []
  type: TYPE_NORMAL
- en: Here `log` is showing that the square root method was removed (red on my screen
    with a minus sign on the far left) and the divide method was added (once again,
    note the + sign on the far left).
  prefs: []
  type: TYPE_NORMAL
- en: 'Just below the message for this commit we see an interesting line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Git is using the `diff` command, separating the original version (`a/LogDemo/LogDemo/Program.cs`)
    from the new version (`b/LogDemo/LogDemo/Program.cs`). It is this use of `diff`
    that allows log to show the changes.
  prefs: []
  type: TYPE_NORMAL
- en: diff
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nothing stops you from using diff yourself. The most powerful use of this is
    to show you what has changed in the work you have done since the last commit.
    You do this before you commit your changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you are doing work and then you are called away. If you are like me,
    you have completely forgotten how far you''ve gotten and what exactly you were
    about to do. Let''s add back the square root method and remove the divide method
    to test the program, but before we commit it, let''s see the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.14: Using diff'
  prefs: []
  type: TYPE_NORMAL
- en: This is very similar to the previous example, except that this shows the difference
    between what I have in my working directory and what was in the previous commit.
    I can tell that this is a change in my working directory by the `~1` in the prompt
    – indicating that one file has been modified but not yet checked in.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose I''m working on my program and I add an `Absolute` method to the calculator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'I save that and go off to work on other parts of the program. When I return
    to the calculator, I know I''ve made a change but I can''t remember what. In Visual
    Studio, right-click on `Calculator.cs` and select:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Visual Studio opens side-by-side windows showing what you''ve changed in this
    file since the last commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.15: Side-by-side comparison'
  prefs: []
  type: TYPE_NORMAL
- en: This makes your changes immediately obvious.
  prefs: []
  type: TYPE_NORMAL
- en: What changed in this file over time?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to see the history of changes for a given file, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/B17441_09_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.16: Examining changes to one file over time'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here I''ve asked for a log of `Calculator.cs` (providing the full path) and
    I get back each change in that file over time. As you might expect, I can make
    this easier to read with `lg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.17: Using lg to see what has changed over time'
  prefs: []
  type: TYPE_NORMAL
- en: Now we can see what is really going on. The log is providing all the information
    it usually does, but only for the selected file. Note that the prompt still says
    we have 14 files to upload, a good hint that this list is not the entire list
    of commits waiting to be pushed.
  prefs: []
  type: TYPE_NORMAL
- en: Search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose for a moment that we want to find every file in our set of commits
    that has the word calculator in it. For that we use the `-S` search flag, followed
    immediately by the term we are searching for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return all the commits that have the word calculator in one or more
    of its files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.18: Searching within commits'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: You can also use `git log -Gcalculator`, which will allow you to search
    on regular expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, the `lg` alias can make this easier to read:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.19: Using lg with search'
  prefs: []
  type: TYPE_NORMAL
- en: Searching is uncommon, but when you need it, Git provides a very powerful tool.
  prefs: []
  type: TYPE_NORMAL
- en: Where are my commits?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you just want the list of commits a particular person has added.
    To do that, you use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, for this example, that will be all of the commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.20: Using lg to see what has changed over time'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the search is case sensitive, so searching for "jesse liberty" won't
    return any records, but "Jesse" will.
  prefs: []
  type: TYPE_NORMAL
- en: You may find in practice that you are more interested in the author than who
    made the commit, and that works the same way, except for using `--author`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It turns out, however, that all I want is "Jesse Liberty''s" commits in the
    past 80 minutes. For that we use the since flag (you can put in any reasonable
    designation of elapsed time, for example, `--since="one week"`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That produces a much more manageable list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.21: Limiting the output of log by time'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do exactly the same search for author, in case they are not the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.22: Limiting the log based on author and time'
  prefs: []
  type: TYPE_NORMAL
- en: Limiting the log to a specific time can greatly facilitate zeroing in on the
    changes you are interested in.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section you''ve seen the powerful Git command `log` in use. Among the
    flags we covered were:'
  prefs: []
  type: TYPE_NORMAL
- en: '| log flag | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| `--oneline` | Show only one line per commit |'
  prefs: []
  type: TYPE_TB
- en: '| `--name-only` | Names of files that have changed in each commit |'
  prefs: []
  type: TYPE_TB
- en: '| `-p` | What has changed? |'
  prefs: []
  type: TYPE_TB
- en: '| `git log <filename>` | What has changed in this file? |'
  prefs: []
  type: TYPE_TB
- en: '| `-Sfoo` | Search for `foo` in every commit |'
  prefs: []
  type: TYPE_TB
- en: '| `--committer="name"` | Search for all commits by name |'
  prefs: []
  type: TYPE_TB
- en: '| `--author="name"` | Search for all authors by name |'
  prefs: []
  type: TYPE_TB
- en: '| `--since="1 week"` | Use with committer or author to search within a designated
    amount of time |'
  prefs: []
  type: TYPE_TB
- en: Good working knowledge of the most important `log` commands can make working
    with your commits much easier. Of course, there are many more commands and flags,
    but it is easy to google the ones you want.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this challenge you will use `log` to examine a set of commits:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a program in that repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a number of (at least 6) commits
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the names of every file changed in each commit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find what changed in a given file over time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find all the files you committed in the past hour (or whatever time increment
    makes sense)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that you will be using `log` to see how one file changes over time and
    to find the names of every file in the commit. This shows the versatility of the
    `log` command.
  prefs: []
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no one correct answer to this challenge, but unlike some of the other
    challenges, you are somewhat constrained by how `log` is typically used.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I will go to GitHub.com and create the `LogChallenge` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.23: Creating the repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, I need to clone that repo to my local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Add at least 6 commits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we must track the new program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.24: Tracking the program'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add one change to `Program.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it is time to commit that change. Let''s start with a call to status (`st`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.25: Handling untracked and modified files'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a tricky image. Make sure you understand why the first three are "to
    be committed" and the last is not staged for commit. (Hint: the first three are
    already in the staging area.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make life easy, we''ll add the unstaged files all at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.26: Adding the unstaged files'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now make sure you understand why there are three files to be committed and
    not four (hint: take a look at `Program.cs`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and commit these files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.27: Making the commits'
  prefs: []
  type: TYPE_NORMAL
- en: Once again, I'm using the alias from the previous chapter. Notice that cam adds,
    but there is nothing to add. No harm done. It then commits and waits for a message.
    *Do not push the commit at this time*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add some more commits by creating the `Calculator` class and each method
    and committing after each change, as you've seen before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s test the `SquareRoot` function in `Program.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this gives the correct result as a double:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s examine the messages of all the commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a bit of extra information here (the ID, the author, and so on.) but
    we do see the messages of all the commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.28: Using lg with the name only flag'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen how to handle staged and unstaged files and examine their
    contents with log, let's see how to find every file in a commit that actually
    changed.
  prefs: []
  type: TYPE_NORMAL
- en: Find the names of every file changed in each commit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is tricky because of the spacing. Let's examine the first one; first, we
    see the ID and message from the latest commit, and then some way down we see the
    affected file. Similarly, in the second box, we see **Add square root function**,
    but the affected file, `Calculator.cs`, is a bit further down the listing. This
    is clearer with a couple of files. Let's do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add the `Round` method to `Calculator`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And we''ll test it in the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We now check it in, and we have made changes to two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.29: Seeing that two files are modified'
  prefs: []
  type: TYPE_NORMAL
- en: 'We check that in, and we now have 15 commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.30: Using lg to examine the 15 commits'
  prefs: []
  type: TYPE_NORMAL
- en: Find what changed in a given file over time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To find what has changed in a file over time, we use the simple `log` command
    with the name of the file we want to see. For example, we can examine the changes
    to `Program.cs` (remember to include the relative path):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The result shows all the commits, with the latest at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.31: All the commits for one file'
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to find all the commits for one file over time, but that can
    be a bit overwhelming. We may want only the most recent commits.
  prefs: []
  type: TYPE_NORMAL
- en: Find all the files you committed in the past hour (or whatever time increment
    makes sense)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this, we need only the `since` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17441_09_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.32: Using the since flag'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have fulfilled the challenge by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a program in that repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding commits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the names of every file changed in each commit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining the changes in one file over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding all the files committed in the past hour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
