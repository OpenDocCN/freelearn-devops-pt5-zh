- en: Chapter 5. Connecting Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章：连接容器
- en: 'It''s time to connect all our three containers to form a single unit of modularized
    parts. I''ll introduce you to two services, **Docker Compose** and **Crane**,
    which can be used to automate this. We''ll go through the following topics in
    this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将我们三个容器连接在一起，形成一个模块化的单元了。我将向你介绍两个服务，**Docker Compose** 和 **Crane**，它们可以用于自动化这个过程。本章将涵盖以下主题：
- en: Manually connecting containers together
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动连接容器
- en: Exploring the contents of a data volume container
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索数据卷容器的内容
- en: Connecting containers to a configuration file using Docker Compose
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker Compose 将容器连接到配置文件
- en: Connecting containers to a configuration file using Crane
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Crane 将容器连接到配置文件
- en: Manually connecting containers
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动连接容器
- en: 'Let''s take a look at how to connect our service containers to our data volume
    container. First, we have to run our data volume container, then run our MySQL
    container, and lastly run our WordPress container, as shown in the following command:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何将我们的服务容器连接到数据卷容器。首先，我们需要启动数据卷容器，然后启动 MySQL 容器，最后启动 WordPress 容器，如下命令所示：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we have fired up and named the data volume container `data-one`. The next
    line fires up the MySQL container, named `mysql-one`, and gives it the data volume
    container. The last line fires up our WordPress container, named `wordpress-one`,
    links `mysql-one` as the MySQL link, and gives it the data volume container.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们启动并命名了数据卷容器为 `data-one`。下一行启动了 MySQL 容器，命名为 `mysql-one`，并为其分配了数据卷容器。最后一行启动了我们的
    WordPress 容器，命名为 `wordpress-one`，将 `mysql-one` 作为 MySQL 链接，并分配了数据卷容器。
- en: 'The following output is displayed:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 显示以下输出：
- en: '![Manually connecting containers](img/3946OT_05_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![手动连接容器](img/3946OT_05_01.jpg)'
- en: Open your web browser and head over to the container's URL and port in order
    to verify that all the services are running and the containers are tied together
    as they should be. You should see the, now familiar, WordPress installation page.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的网页浏览器，前往容器的 URL 和端口，验证所有服务是否正在运行，并且容器是否按预期连接在一起。你应该会看到现在熟悉的 WordPress 安装页面。
- en: As you may have figured out by now, you can fire up another WordPress container
    using the same MySQL link and the same data volume container. What do you think
    will happen?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如你现在可能已经猜到，你可以使用相同的 MySQL 链接和相同的数据卷容器启动另一个 WordPress 容器。你觉得会发生什么呢？
- en: The new WordPress container will be another instance of the same WordPress site,
    with the same files and the same database.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 WordPress 容器将是相同 WordPress 网站的另一个实例，具有相同的文件和相同的数据库。
- en: 'When you link containers, Docker will set some environment variables in the
    target container in order to enable you to get information about the linked source
    container. In our case, these environment variables will be set when we link the
    MySQL container, as shown in the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你连接容器时，Docker 会在目标容器中设置一些环境变量，以便你可以获取有关链接的源容器的信息。在我们的例子中，这些环境变量将在我们链接 MySQL
    容器时设置，如下命令所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Exploring the contents of a data volume container
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索数据卷容器的内容
- en: Is the data being written to the data volume container? Or, is the data stored
    inside the MySQL and WordPress containers when connected? How can you tell?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是写入数据卷容器吗？还是，当容器连接时，数据存储在 MySQL 和 WordPress 容器内部？你怎么判断呢？
- en: 'One way to determine this is to enter a container via a shell so that you can
    navigate around its filesystem. Since version 1.3, Docker has the ability to start
    a new instance of a container''s shell. Running the old `docker attach` command
    just gets you in the current shell instance, which in our case has `tail –f /dev/null`
    running. If we exit this `tail` command, the container will exit and shut down.
    Therefore, we need a new shell instance in a running container so that we can
    invoke any commands we want inside the container without the risk of the container
    exiting. The following command can be used to do this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 确定这一点的一种方法是通过 shell 进入容器，以便你可以浏览它的文件系统。自 1.3 版本起，Docker 具备启动容器 shell 新实例的能力。运行旧的
    `docker attach` 命令只是让你进入当前的 shell 实例，而在我们的例子中，这个实例正在运行 `tail –f /dev/null`。如果我们退出这个
    `tail` 命令，容器将退出并关闭。因此，我们需要一个新的 shell 实例，以便在容器中调用任何命令，而不会导致容器退出。以下命令可以用来做到这一点：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `–i` and `–t` flags mean that we want to keep the session interactive and
    allocate a pseudo-TTY. `data-one` is the name of the container, but you can use
    the container ID if you like. I would choose `/bin/bash` over `/bin/sh`, but the
    container runs BusyBox and `/bin/bash` isn't available there. For the kinds of
    tasks that we are about to perform, it doesn't matter which shell we use.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`–i` 和 `–t` 标志表示我们希望保持会话交互式并分配一个伪终端。`data-one` 是容器的名称，但你也可以使用容器 ID。如果你喜欢，我会选择
    `/bin/bash` 而不是 `/bin/sh`，但该容器运行的是 BusyBox，那里没有 `/bin/bash`。对于我们接下来要执行的任务，使用哪个
    shell 并不重要。'
- en: What we want to do is to take a look in the directories we exposed as `VOLUMES`
    in this data volume container. The directories are `/var/www/html` and `/var/lib/mysql`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是查看我们在这个数据卷容器中暴露为 `VOLUMES` 的目录。目录是 `/var/www/html` 和 `/var/lib/mysql`。
- en: 'Let''s explore in the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的命令中探索：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following output is displayed:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出会显示：
- en: '![Exploring the contents of a data volume container](img/3946OT_05_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![探索数据卷容器的内容](img/3946OT_05_02.jpg)'
- en: We see files on both those directories, which indicates that the two other containers
    are writing to this one. It separates the services with the data. If you want
    further proof, launch `vi` in the shell, edit a file, and reload the site in your
    browser.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这两个目录中都看到了文件，这表明另外两个容器正在向这个容器写入数据。它通过数据来分隔服务。如果你需要更多的证据，可以在 shell 中启动 `vi`，编辑文件并在浏览器中重新加载站点。
- en: This worked out really smooth and easy, didn't it? The containers interact with
    each other and all we have to do is to link them together with just one command.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常顺利且简单，对吧？容器之间相互作用，我们所需要做的就是通过一个命令将它们链接在一起。
- en: Connecting containers using Docker Compose
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker Compose 连接容器
- en: 'Docker Compose was previously called Fig, but Docker acquired Fig and the name
    was changed. This is how Docker describes Docker Compose:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose 以前叫做 Fig，但 Docker 收购了 Fig 并更改了名称。以下是 Docker 对 Docker Compose
    的描述：
- en: '*"Compose is a tool for defining and running complex applications with Docker.
    With Compose, you define a multi-container application in a single file, then
    spin your application up in a single command which does everything that needs
    to be done to get it running."*'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Compose 是一个用于定义和运行复杂应用程序的工具。通过 Compose，你可以在一个文件中定义一个多容器应用程序，然后通过一个命令启动你的应用程序，执行所有需要的操作，使它能够运行。"*'
- en: Docker Compose basically gives us a way to define settings in a configuration
    file, so we don't have to remember all the names for all the containers when linking
    them together, the ports to expose, the data volume container to use, and so on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose 本质上为我们提供了一种在配置文件中定义设置的方法，这样我们就不必在链接容器时记住所有容器的名称、需要暴露的端口、要使用的数据卷容器等等。
- en: Installing Docker Compose
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Docker Compose
- en: Docker Compose has regular releases on GitHub, and at the time of writing this
    book, the latest release is 1.0.1.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose 在 GitHub 上有定期发布的版本，在撰写本书时，最新版本是 1.0.1。
- en: 'We will install Docker Compose with the Python package manager, pip. Our EC2
    instance does not come with pip installed, so we have to start with the installation,
    as shown here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Python 包管理器 pip 来安装 Docker Compose。我们的 EC2 实例没有预装 pip，所以我们需要先安装它，如下所示：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following output is displayed:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出会显示：
- en: '![Installing Docker Compose](img/3946OT_05_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Docker Compose](img/3946OT_05_03.jpg)'
- en: 'After pip is installed, you can go ahead and install Docker Compose:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了 pip 之后，你可以继续安装 Docker Compose：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, you'll see Docker Compose installed along with all of its dependencies.
    Invoke `docker-compose --version` to verify that it works as expected.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你会看到 Docker Compose 已经安装，并且包含了所有的依赖项。输入 `docker-compose --version` 来验证它是否按预期工作。
- en: Basic Docker Compose commands
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的 Docker Compose 命令
- en: 'The following are the basic Docker Compose commands that you should be familiar
    with:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你应该熟悉的基本 Docker Compose 命令：
- en: '`build`: This is used to build or rebuild services'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`：用于构建或重建服务'
- en: '`kill`: This forces the service containers to stop'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kill`：强制停止服务容器'
- en: '`logs`: This views the output from the services'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logs`：查看服务的输出'
- en: '`port`: This is used to print the public port for a port binding'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`：用于打印端口绑定的公共端口'
- en: '`ps`: This is used to list containers'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ps`：用于列出容器'
- en: '`pull`: This is used to pull service images'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pull`：用于拉取服务镜像'
- en: '`rm`: This is used to remove stopped service containers'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rm`：用于移除已停止的服务容器'
- en: '`run`: This is used to run a one-off command on a service'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run`：用于在服务上运行一次性命令'
- en: '`scale`: This sets the number of containers to be run for a service'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale`：设置要运行的服务容器数量'
- en: '`start`: This is used to start existing containers for a service'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`：用于启动服务的现有容器'
- en: '`stop`: This stops running containers without removing them'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop`：停止正在运行的容器，但不将其移除'
- en: '`up`: This builds, recreates, starts, and attaches to containers for a service;
    linked containers will be started, unless they are already running'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`up`：用于构建、重建、启动并附加到服务的容器；相关联的容器将被启动，除非它们已经在运行'
- en: As you can see, the commands are very similar to the Docker client commands
    and most of them do the exact same thing by forwarding the commands to the Docker
    daemon. We will go through some of them a little more in detail.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这些命令与 Docker 客户端命令非常相似，且大多数命令通过转发命令到 Docker 守护进程来执行相同的操作。我们将对其中一些命令进行更详细的讲解。
- en: Service
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务
- en: When the word `service` is used with Docker Compose, it refers to a named container
    in a `docker-compose.yml` configuration file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Docker Compose 中使用`service`一词时，它指的是`docker-compose.yml`配置文件中命名的容器。
- en: Using the run command
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用运行命令
- en: We are used to starting containers with the `run` command for the Docker client.
    With docker-compose, the `run` command is very different. When you `run` a command
    with docker-compose, it's a one-off command on a service. This means that if we
    name a container configuration `Ubuntu` and invoke `docker-compose run ubuntu
    /bin/bash echo hello`, the container will start and execute `/bin/bash echo hello`
    and then shut down. The difference with this and running the command directly
    with Docker is that all the linked containers and `VOLUME` containers will be
    started and connected when you use docker-compose.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常使用 `run` 命令来启动 Docker 客户端容器。使用 docker-compose 时，`run` 命令的含义非常不同。当你使用 docker-compose
    执行命令时，它是在某个服务上执行的一次性命令。这意味着，如果我们将容器配置命名为 `Ubuntu` 并执行 `docker-compose run ubuntu
    /bin/bash echo hello`，容器将启动并执行 `/bin/bash echo hello`，然后关闭。与直接用 Docker 执行命令的不同之处在于，使用
    docker-compose 时，所有关联的容器和 `VOLUME` 容器都将启动并连接。
- en: Using the scale command
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 scale 命令
- en: The `scale` command is very interesting. When we invoke `docker-compose scale
    web=3`, we actually start three containers of the service that we named `web`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`scale` 命令非常有意思。当我们执行 `docker-compose scale web=3` 时，实际上是启动了我们命名为 `web` 的服务的三个容器。'
- en: Setting up our PaaS with Docker Compose
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Docker Compose 设置我们的 PaaS
- en: 'Every Docker Compose instance lives in its own directory and has a configuration
    file named `docker-compose.yml` inside it:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Docker Compose 实例都位于自己的目录中，并且该目录下有一个名为`docker-compose.yml`的配置文件：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is how the contents of our `docker-compose.yml` file will look:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们`docker-compose.yml`文件的内容示例：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see that we have defined three services here, namely `wp`, `mysql`,
    and `paasdata`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们在这里定义了三个服务，分别是`wp`、`mysql`和`paasdata`。
- en: 'Lets try these services and the following output is displayed:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试这些服务，接下来会显示以下输出：
- en: '![Setting up our PaaS with Docker Compose](img/3946OT_05_04.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Docker Compose 设置我们的 PaaS](img/3946OT_05_04.jpg)'
- en: Invoke `docker-compose up –d` to run `docker-compose` and the containers in
    daemon mode.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `docker-compose up –d` 以在守护进程模式下运行 `docker-compose` 和容器。
- en: That's how easy it is. Open your web browser and head to your Docker host and
    the port stated in the table (in my case, port **49155**); you should see the
    very familiar WordPress installation page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单。打开你的网页浏览器，访问 Docker 主机和表格中列出的端口（在我的例子中是端口 **49155**）；你应该会看到非常熟悉的 WordPress
    安装页面。
- en: Connecting containers using Crane
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Crane 连接容器
- en: 'Crane is much like Docker Compose, but it has more configuration possibilities.
    This is how its creator describes Crane:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Crane 很像 Docker Compose，但它提供了更多的配置选项。其创建者是这样描述 Crane 的：
- en: '*"Crane is a tool to orchestrate Docker containers. It works by reading in
    some configuration (JSON or YAML) which describes how to obtain images and how
    to run containers. This simplifies setting up a development environment a lot
    as you don''t have to bring up every container manually, remembering all the arguments
    you need to pass. By storing the configuration next to the data and the app(s)
    in a repository, you can easily share the whole environment."*'
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“Crane 是一个用于协调 Docker 容器的工具。它通过读取一些配置（JSON 或 YAML），描述如何获取镜像以及如何运行容器。这样可以大大简化开发环境的设置，因为你不必手动启动每个容器，也不需要记住所有需要传递的参数。通过将配置与数据和应用程序存储在同一个仓库中，你可以轻松共享整个环境。”*'
- en: This paragraph can be about Docker Compose as well, as you can see.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这一段也可以讲解 Docker Compose。
- en: Installing Crane
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Crane
- en: Crane is easy to install but not easy to keep updated. The same command is used
    to install as well as update, so we have to invoke this once in a while in order
    to have the latest version.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Crane 安装简单，但保持更新并不容易。安装和更新使用相同的命令，因此我们必须时不时地执行一次命令以获得最新版本。
- en: 'Invoke the following command on a single line to install Crane:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令来安装 Crane：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Crane is now installed in `/usr/local/bin`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Crane 现在已安装在`/usr/local/bin`目录中。
- en: Usage
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用法
- en: 'I won''t go through all the commands here since they''re similar to Docker
    Compose''s commands, but I''ll comment on a few here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在这里讲解所有的命令，因为它们与 Docker Compose 的命令类似，但我会在这里对一些命令做一些评论：
- en: '`lift`: This command, like Docker Compose''s `up` command, builds and runs
    containers from your configuration file'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lift`: 这个命令像 Docker Compose 的 `up` 命令一样，从你的配置文件中构建并运行容器'
- en: '`graph`: This prints your containers'' relations from the configuration file'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`graph`: 这将显示你的容器与配置文件之间的关系'
- en: '`logs`: This maps to the Dockers Compose''s command, but here you can get the
    logs for a whole group'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logs`: 这映射到 Docker Compose 的命令，但在这里你可以获取整个组的日志'
- en: '`status`: This also maps to the Dockers Compose''s command but lets you get
    the logs for a group'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status`: 这也映射到 Docker Compose 的命令，但可以让你获取整个组的日志'
- en: Configuration
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: 'This is where Crane really leaves Docker Compose behind. You have many more
    configuration options for Crane apps. The configuration file must be named `crane.json`
    or `crane.yaml`. For every container, this is what you can configure:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Crane 真正超越 Docker Compose 的地方。Crane 应用有更多的配置选项。配置文件必须命名为 `crane.json` 或
    `crane.yaml`。对于每个容器，以下是你可以配置的内容：
- en: '`image` (string, required): This is the name of the image to build/pull'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image` (string, required): 这是要构建/拉取的镜像名称'
- en: '`dockerfile` (string, optional): This gives the relative path to the Dockerfile'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dockerfile` (string, optional): 这是指向 Dockerfile 的相对路径'
- en: '`run` (object, optional): These parameters are mapped to Docker''s`run` and
    `create` commands:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run` (object, optional): 这些参数映射到 Docker 的 `run` 和 `create` 命令：'
- en: 'add-host (array): This adds custom host-to-IP mappings'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'add-host (array): 这将添加自定义的主机到IP的映射'
- en: cpuset (integer)
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: cpuset (integer)
- en: cpu-shares (integer)
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: cpu-shares (integer)
- en: detach (boolean) `sudo docker attach <container name>` will work as normal
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: detach (boolean) `sudo docker attach <container name>` 将正常工作
- en: 'device (array): This adds host devices'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'device (array): 这将添加主机设备'
- en: dns (array)
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: dns (array)
- en: entrypoint (string)
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: entrypoint (string)
- en: env (array)
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: env (array)
- en: 'expose (array): This denotes the ports to be exposed to linked containers'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'expose (array): 这表示要暴露给链接容器的端口'
- en: hostname (string)
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: hostname (string)
- en: interactive (boolean)
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: interactive (boolean)
- en: 'link (array): This links containers'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'link (array): 这将链接容器'
- en: memory (string)
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: memory (string)
- en: privileged (boolean)
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: privileged (boolean)
- en: 'publish (array): This maps network ports to the container'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'publish (array): 这将映射网络端口到容器'
- en: publish-all (boolean)
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: publish-all (boolean)
- en: restart (string) Restart policy
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: restart (string) 重启策略
- en: rm (boolean)
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: rm (boolean)
- en: tty (boolean)
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tty (boolean)
- en: 'volume (array): In contrast to plain Docker, the host path can be relative'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'volume (array): 与普通 Docker 相比，主机路径可以是相对路径'
- en: 'volumes-from (array): This is used to mount volumes from other containers'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'volumes-from (array): 用于从其他容器挂载卷'
- en: workdir (string)
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: workdir (string)
- en: '`cmd` (array/string): This command is used to append to `docker run` (overwriting
    CMD)'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cmd` (array/string): 这个命令用于附加到 `docker run`（覆盖 CMD）'
- en: '`rm (object, optional):` These parameters are mapped to Docker''s `rm` command:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rm (object, optional):` 这些参数映射到 Docker 的 `rm` 命令：'
- en: volumes (boolean)
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: volumes (boolean)
- en: '`start (object, optional)`: These parameters are mapped to Docker''s `start`
    command:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start (object, optional)`: 这些参数映射到 Docker 的 `start` 命令：'
- en: attach (boolean)
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: attach (boolean)
- en: interactive (boolean)
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: interactive (boolean)
- en: 'Set up the same configuration that you did in Docker Compose; it will look
    something like the following code. As you might understand, you can write this
    in the JSON format as well, but for the comparison to Docker Compose''s version
    to be as easy as possible, I''ll keep it in the `yaml` format:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 设置与 Docker Compose 中相同的配置，它看起来类似以下代码。正如你可能理解的，你也可以用 JSON 格式写这个文件，但为了与 Docker
    Compose 版本进行方便比较，我将保持使用 `yaml` 格式：
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we specify three containers, where the data container is added as a data
    volume container to the others and the MySQL container is linked to the WordPress
    container.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定了三个容器，其中数据容器作为数据卷容器添加到其他容器中，而 MySQL 容器则与 WordPress 容器相链接。
- en: Save this file as `crane.yaml` and type `crane lift` to run your app.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为 `crane.yaml`，并输入 `crane lift` 来运行你的应用。
- en: 'The following output is displayed:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出被显示：
- en: '![Configuration](img/3946OT_05_05.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![配置](img/3946OT_05_05.jpg)'
- en: 'To see the containers'' current statuses, we can type `crane status`. Take
    a look at the last column in our `wp` container. It says it''s not running. Type
    `crane` `logs wp` and see what it says in following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看容器的当前状态，可以输入 `crane status`。查看 `wp` 容器的最后一列，它显示容器未运行。输入 `crane` `logs wp`，然后查看以下命令输出的内容：
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It seems that our WordPress container starts faster than our MySQL container,
    so the WordPress container can't find it when it starts.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们的 WordPress 容器启动速度快于 MySQL 容器，因此 WordPress 容器在启动时无法找到 MySQL 容器。
- en: This can happen in Docker Compose as well because there's no check if `--link:ed`
    containers are up, at least not at the time when this is being written.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker Compose 中也可能发生这种情况，因为没有检查 `--link:ed` 容器是否已经启动，至少在本文写作时是没有的。
- en: This cannot be solved in Docker Compose; we have to rely on pure luck that the
    MySQL container will get ready before the WordPress container tries to use the
    linked MySQL container.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题无法通过 Docker Compose 解决；我们只能靠纯粹的运气，期望 MySQL 容器在 WordPress 容器尝试使用链接的 MySQL
    容器之前已经准备好。
- en: With Crane, you can group containers inside the configuration file in different
    groups and then `run` commands on that group instead of the whole configuration.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Crane，您可以在配置文件中将容器分组，并对该组执行 `run` 命令，而不是对整个配置进行操作。
- en: 'This is very easy; we just add these lines at the end of our `crane.yaml` file:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单；我们只需在 `crane.yaml` 文件末尾添加以下几行：
- en: '[PRE11]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we have separated the WordPress container from the other two containers
    we have so that we can `run` commands on them separately.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将 WordPress 容器与其他两个容器分开，这样我们就可以分别对它们执行 `run` 命令。
- en: Let's start our `data_db` group first by invoking the `crane lift data_db --recreate`
    command. I added the flag `--recreate` and to make sure that we're creating new
    containers and not reusing the old ones. Run `crane status data_db` to make sure
    they're running.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先通过调用 `crane lift data_db --recreate` 命令启动 `data_db` 组。我添加了 `--recreate`
    标志，以确保我们正在创建新容器，而不是重用旧的容器。运行 `crane status data_db` 来确保它们正在运行。
- en: Now that we know that the MySQL container is running, we can start the WordPress
    container by invoking the `crane lift web --recreate` command.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道 MySQL 容器正在运行，我们可以通过调用 `crane lift web --recreate` 命令来启动 WordPress 容器。
- en: 'The following output is displayed:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出被显示：
- en: '![Configuration](img/3946OT_05_06.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![配置](img/3946OT_05_06.jpg)'
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Now, we can connect containers in different ways to keep different services
    separate on different containers. We learned how to do this manually, which can
    be quite hard when you have lots of dependencies between containers.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以以不同的方式连接容器，以保持不同的服务在不同的容器中分开。我们学会了如何手动执行此操作，当容器之间有大量依赖关系时，这可能会非常困难。
- en: 'We had a brief look at two orchestration tools: Docker Compose and Crane. Crane
    is an independent and more advanced tool for the administrators who want more
    control over containers. The ability to group containers in Crane makes it more
    reliable when there can be timing issues in dependencies.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要地看了两个编排工具：Docker Compose 和 Crane。Crane 是一个独立的、更先进的工具，适用于那些希望对容器拥有更多控制的管理员。Crane
    能够将容器分组，使其在存在依赖性时可能出现的时序问题中更加可靠。
- en: In the next chapter, we will run two instances of our app using Crane to see
    what problems and possibilities crop up when we want to make both our blogs publicly
    accessible on the regular HTTP port (80).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 Crane 运行两个应用实例，看看当我们希望让两个博客在常规 HTTP 端口（80）上对外公开时，可能会遇到哪些问题和机遇。
