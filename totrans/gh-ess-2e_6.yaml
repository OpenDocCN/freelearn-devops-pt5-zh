- en: Exploring the User and Repository Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore the most important settings for both a user
    and a repository. There are many things you can do to personalize your experience
    in GitHub and many settings you can change in order to follow a specific workflow
    with your fellow teammates.
  prefs: []
  type: TYPE_NORMAL
- en: As a user, there is a lot of information you can set up on your user settings
    page, such as associating more than one email with your account, adding multiple
    SSH keys, and setting up two-factor authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, some functionalities of a repository can be set up via its settings
    page. For example, you can enable or disable the wiki pages, or completely disable
    the issue tracker.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: User settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repository settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can visit your user''s settings page by navigating through the web interface
    (under your avatar''s drop-down list) or by visitingÂ [https://github.com/settings/profile](https://github.com/settings/profile)
    directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00164.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, here is what my settings landing page looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00165.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We are going to analyze the most important settings GitHub provides.
  prefs: []
  type: TYPE_NORMAL
- en: Profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Under Personal settings, you can see various options that you can customize
    to your liking.
  prefs: []
  type: TYPE_NORMAL
- en: The Profile settings is where you can fill in your personal information so that
    people know who you are. Consider it like socialization. After all, GitHub is
    the Facebook of geeks.
  prefs: []
  type: TYPE_NORMAL
- en: All the profile information is optional to fill in. You can see what this will
    look like by visiting your username page at `https://github.com/<username>`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up multiple emails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every commit is associated with an email address and GitHub uses the email address
    you set in your local Git configuration to associate commits with your GitHub
    account. There is no limit to the emails that you can add to your account, but
    you can have only one primary address. This is where GitHub will send you any
    notifications and it is this address that will be used when editing and committing
    files via the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add or remove emails and change the primary address by visiting [https://github.com/settings/emails](https://github.com/settings/emails).
    In this area, you can also choose whether or not your primary email will be shown
    to the public. If you decide to keep your email address private, GitHub will assign
    an email based on your username: `<username>@users.noreply.github.com`, which
    will be used whenever you edit files via your browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see what that page looks like when you
    have multiple emails:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00166.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Managing your SSH keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub provides two ways to authenticate a user when using Git. You can use
    Git over HTTP or Git over SSH. For a detailed explanation of the Git protocols,
    visit [https://git-scm.com/book/ch4-1.html](https://git-scm.com/book/ch4-1.html).
  prefs: []
  type: TYPE_NORMAL
- en: When using Git over HTTP, you must provide your username and password each time
    you make a change, unless you cache your GitHub password in Git. For more details,
    see the article at [https://help.github.com/articles/caching-your-github-password-in-git/](https://help.github.com/articles/caching-your-github-password-in-git/).
  prefs: []
  type: TYPE_NORMAL
- en: The preferred and more secure way is to use Git over SSH. The concept is that
    you create a personal unique SSH key pair whose public key you upload to your
    GitHub profile. You can repeat this process as many times as you wish since GitHub
    allows you to have multiple SSH keys associated with your account. This way, you
    can have one key to use with your laptop and a different one with your desktop
    or your server.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use Git over SSH, the remote URL of the repository must look like
    `git@github.com:USERNAME/REPOSITORY.git`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under your Settings tab, there is the SSH keys option. Either navigate through
    the GitHub UI or go directly to [https://github.com/settings/keys](https://github.com/settings/keys).
    When you add an SSH public key, you must give it a Title so that you can remember
    where this key came from. At the Key area, you paste the contents of the public
    key. As you can see, GitHub also provides some useful information such as the
    fingerprint of the key, when it was added, and when it was last used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00167.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You cannot edit a key. If you want to set a different title, you will have to
    delete the old key and add it back again.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up two-factor authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up two-factor authentication provides an extra layer of security for
    your account. Using only the password to sign in can prove susceptible to security
    threats, since the attacker only needs a single piece of information.
  prefs: []
  type: TYPE_NORMAL
- en: This is done by having an extra authentication code generated onto your cell
    phone or tablet. In the case of a smartphone, you must install an application
    that can handle the **Time-based One-Time Password** (**TOTP**) technology. If
    you are looking for an open source application, check [https://github.com/andOTP/andOTP](https://github.com/andOTP/andOTP)
    .
  prefs: []
  type: TYPE_NORMAL
- en: For a list of supported applications, you can read Wikipedia's article at [https://en.wikipedia.org/wiki/Time-based_Onetime_Password_Algorithm#Client_implementations](https://en.wikipedia.org/wiki/Time-based_Onetime_Password_Algorithm#Client_implementations).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not own a smartphone, GitHub can also send the authentication code
    with an SMS. Since this involves delivery rates, there is a finite list of supported
    countries. See if yours is included here: [https://help.github.com/articles/countries-where-sms-authentication-is-supported/#supported-countries-for-sms-authentication](https://help.github.com/articles/countries-where-sms-authentication-is-supported/#supported-countries-for-sms-authentication).'
  prefs: []
  type: TYPE_NORMAL
- en: You can enable Two-Factor Authentication (2FA) under the Security page. Visit
    [https://github.com/settings/security](https://github.com/settings/security) directly
    and press the Set up two-factor authentication button to start setting up 2FA.
    Pick either one of the methods and follow the on-screen instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting up 2FA, if you visit the security page, under your settings,
    you will see that 2FA is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00168.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: On the Security page, make sure to click the link Save your recovery codes and
    follow the on-screen instructions to download and save the recovery codes in a
    secure place. There are 16 codes that will help you gain access to your account
    if, for some reason, you lose your cell phone or it gets stolen. Every recovery
    code can only be used once and you can generate a new batch by clicking on Generate
    new recovery codes. Keep them safe; preferably, store them encrypted in an application
    such as KeepassX.
  prefs: []
  type: TYPE_NORMAL
- en: Now, every time you try to log in to GitHub from a browser for the first time,
    apart from the usual credentials like username and password, you will be prompted
    to give the authorization code generated from the application of your smartphone
    or one of the 16 recovery codes.
  prefs: []
  type: TYPE_NORMAL
- en: Repository settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are quite a few settings one can fiddle with at the repository level.
    To access these settings, search for the wrench icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00169.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the default branch that appears in a repository's main page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default branch of a repository's main page is **master**. However, there
    are times when you want a different branch to be your default, based on one's
    workflow, as we saw in [Chapter 4](part0098.html#2TEN40-184576c1044a4350bd24f18b869c0732),
    *Collaboration Using the GitHub Workflow**.*
  prefs: []
  type: TYPE_NORMAL
- en: Let's just say, for example, that the master branch is where you push code that
    is considered stable and well-tested, whereas you have a different branch named
    develop that is used for daily pushes and testing new features. Based on this
    assumption, the develop branch gets updated more often than the master branch.
    Practically, you'd want your project to seem active; having a branch that gets
    updated every day in the front page is much more appealing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, you can go to the repository''s **Settings** > **Branches** page
    and choose the branch you would like to have as the default from the drop-down
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00170.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once selected, click Update and accept what GitHub tells you.
  prefs: []
  type: TYPE_NORMAL
- en: When someone clones the repository for the first time, Git checks out the default
    branch that is set through the project's settings.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling/disabling the wiki
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](part0044.html#19UOO0-184576c1044a4350bd24f18b869c0732), *Using
    the Wiki and Managing Code Versioning*, we explained in depth why the wiki is
    a strong asset for a project. There are, however, cases where one does not need
    a wiki; for example, you might use an external one.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub provides you with three options regarding the visibility of a wiki:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable the wiki and make it public so that everyone has write access (default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable the wiki, but only owners and collaborators have write access (**Restrict
    editing to collaborators only**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable the wiki altogether
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first behavior is the default one. You can find these settings in Settings
    > Options under the Features block.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling/disabling the issue tracker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although GitHub's issue tracker is a powerful tool for collaboration and bug
    reporting, there will be times when you would like to use a different tracker
    such as Redmine, Jira, or Bugzilla.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, GitHub's issue tracker can be disabled so that you don't have
    many places to track and lose control. This can be achieved in Settings > Options
    under the Features block.
  prefs: []
  type: TYPE_NORMAL
- en: Any created issues are retained, even after you disable the Issues feature.
    Get the tick back and your issue tracker will be the same as before.
  prefs: []
  type: TYPE_NORMAL
- en: Adding collaborators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By adding a collaborator, you are granting push access to the repository. A
    repository can have many collaborators; there is no limit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the Collaborators tab under settings. Start typing the name of the user
    and the autocompletion is smart enough to present you with the user you are searching
    for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Transferring ownership â user to organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every repository is created under a namespace, be it a user or an organization.
    In the rare case where you would like to transfer a repository to another user,
    this can be done in the repository settings. Since this action is considered dangerous,
    you will find this setting inside a red code block, signifying the importance
    of the task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, there are four types of transfer:'
  prefs: []
  type: TYPE_NORMAL
- en: User to user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User to organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organization to user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organization to organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to initialize the transfer, you have to provide the name of the repository
    and the username/organization of the new owner to confirm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After you hit I understand, transfer this repository, an email will be sent
    to the new owner(s) for confirmation. After they confirm, the procedure will be
    completed.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can delete a repository along with all its settings by pressing the Delete
    this repository button under Danger Zone. Bear in mind that this is a destructive
    action that will purge your repository, the issue tracker, any pull requests,
    the wiki, and in general, everything related to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'After pressing the holocaust button, you will be presented with a modal asking
    for confirmation. For security reasons, you must provide the repository''s name
    to confirm. In the following screenshot, you can see that unless you provide the
    right name, the button for deletion will be inactive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00173.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tips and tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Did you know that you can use different email addresses depending on the organization
    you are member of? Are you aware of how much disk space your repository takes?
    If no, read the following section, and learn how to perform these actions.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the size of your repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are curious to know how big your repositories have become, you can visit
    [https://github.com/settings/repositories](https://github.com/settings/repositories)
    and see it for yourself. Remember that GitHub also counts the size of the `.git`
    directory, so if you have thousands of commits, the repository's size will be
    greater than its actual size (by actual size, I mean whatever files you see on
    GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the `diaspora` repository at the time of writing this book seems
    to be 102 MB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00174.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If I were to remove the `.git` directory, the size would be much smaller. Let''s
    test it by using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Removing the `.git` directory gets the size down to almost 14 MB!
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tuning email notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a member of many organizations, you may want to use a different email
    for notifications concerning the repository that a specific organization owns.
    You can achieve this by going to [https://github.com/settings/notifications](https://github.com/settings/notifications);
    under Custom routes, choose the email you want to receive the notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By finishing this chapter, you should be ready to fill in the details to build
    a public profile that is viewable by anyone interested in knowing more about you.
    Your account is yours and yours only, so it should be secured as much as possible.
    By now, you should have followed the steps to secure it with 2FA and be a little
    bit safer.
  prefs: []
  type: TYPE_NORMAL
- en: You have also learned how to configure a repository's settings regarding its
    default branch and enabling or disabling features such as the issue tracker and
    the wiki. Another thing to remember is how to add collaborators to your project
    and how to transfer its ownership if needed.
  prefs: []
  type: TYPE_NORMAL
- en: These were the most important settings to consider, both user and project-related,
    and you should feel a little bit wiser towards the end.
  prefs: []
  type: TYPE_NORMAL
