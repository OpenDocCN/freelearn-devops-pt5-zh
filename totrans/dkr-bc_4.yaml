- en: Chapter 4. Docker Swarm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 Docker Swarm
- en: So far we have learned how to launch individual Docker hosts locally using Docker
    for Mac, Docker for Windows, and Docker Machine for remote hosts, as well as using
    Docker locally on Linux. Individual Docker hosts are great for local development,
    or launching a few test instances however as you start moving towards production
    you need fewer single points of failure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何使用Docker for Mac、Docker for Windows和Docker Machine在本地启动单个Docker主机，以及在Linux上本地使用Docker。单个Docker主机非常适合本地开发，或启动一些测试实例，但随着你向生产环境推进，你需要减少单点故障的风险。
- en: In this chapter, we are going to get a little more adventurous and create a
    cluster of Docker hosts. Docker ships a tool called Swarm, when deployed it acts
    as a scheduler between your Docker client and the Docker host, deciding where
    to launch containers based on scheduling rules.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将变得更加冒险，创建一个Docker主机集群。Docker提供了一种名为Swarm的工具，部署后它作为Docker客户端和Docker主机之间的调度器，根据调度规则决定在哪里启动容器。
- en: 'We are going to look at the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论以下主题：
- en: Manually launching a Docker Swarm cluster
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动启动Docker Swarm集群
- en: Launching Docker for Amazon Web Services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动Amazon Web Services上的Docker
- en: Launching Docker for Azure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动Azure上的Docker
- en: And also how to launch containers within our cluster.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以及如何在我们的集群中启动容器。
- en: Creating a Swarm manually
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动创建Swarm
- en: At the start of [Chapter 3](ch03.html "Chapter 3. Docker in the Cloud"), *Docker
    in the Cloud* we looked at using a Docker Machine to launch a Docker host in Digital
    Ocean. We are going to start with Digital Ocean again, but this time we are going
    to launch three hosts and then create a Docker Swarm cluster on them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章 Docker在云端")开始时，*Docker在云端*我们探讨了如何使用Docker Machine在Digital
    Ocean启动Docker主机。我们将再次从Digital Ocean开始，但这次我们将启动三个主机，然后在它们上面创建一个Docker Swarm集群。
- en: 'To start off with we need to launch the hosts and to do this, run the following
    commands, remembering to replace the Digital Ocean API access token with your
    own:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要启动主机，为此，运行以下命令，记得将Digital Ocean API访问令牌替换为你自己的：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once launched, running `docker-machine ls` should show you a list of your images.
    Also, this should be reflected in your Digital Ocean control panel:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 启动后，运行`docker-machine ls`应该会显示你的镜像列表。此外，这应该会在你的Digital Ocean控制面板中有所体现：
- en: '![Creating a Swarm manually](img/B06455_04_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建Swarm](img/B06455_04_02.jpg)'
- en: 'Now we have our Docker hosts and we need to assign a role to each of the nodes
    within the cluster. Docker Swarm has two node roles:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了Docker主机，并需要为集群中的每个节点分配角色。Docker Swarm有两种节点角色：
- en: '**Manager**: A manager is a node which dispatches tasks to the workers, all
    your interaction with the Swarm cluster will be targeted against a manager node.
    You can have more than one Manger node, however in this example we will be using
    just one.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理节点**：管理节点是一个分配任务给工作节点的节点，你与Swarm集群的所有交互都将针对一个管理节点进行。你可以拥有多个管理节点，但在本例中我们将只使用一个。'
- en: '**Worker**: Worker nodes accept the tasks dispatched by the Manager node(s),
    these are where all your services are launched. We will go in to services in more
    detail once we have our cluster configured.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作节点**：工作节点接受管理节点分配的任务，所有的服务都会在这里启动。我们将在集群配置完成后，进一步深入讨论服务。'
- en: In our cluster, **swarm01** will be the manager node with **swarm02** and **swarm03**
    being our two worker nodes. We are going to use the `docker-machine ssh` command
    to execute commands directly on our three nodes, starting with configuring our
    manager node.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的集群中，**swarm01**将是管理节点，**swarm02**和**swarm03**将是我们的两个工作节点。我们将使用`docker-machine
    ssh`命令直接在三个节点上执行命令，从配置管理节点开始。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note, the commands in the walk through will only work with Mac and Linux,
    commands to run on Windows will be covered at the end of this section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，文档中的命令仅适用于Mac和Linux，Windows上的命令将在本节末尾讲解。
- en: 'Before we initialize the manager node, we need to capture the IP address of
    `swarm01` as a command-line variable:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化管理节点之前，我们需要捕获`swarm01`的IP地址作为命令行变量：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we have the IP address, run the following command to check if it is
    correct:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了IP地址，运行以下命令检查它是否正确：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And then to configure the manager node, run the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，配置管理节点，运行以下命令：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will then receive confirmation that `swarm01` is now a manager along with
    instructions on what to run to add a worker to the cluster:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你会收到确认信息，表明`swarm01`现在是管理节点，并附有将工作节点添加到集群的运行指令：
- en: '![Creating a Swarm manually](img/B06455_04_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建一个Swarm](img/B06455_04_03.jpg)'
- en: You don't have to a make a note of the instructions as we will be running the
    command in a slightly different way.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要记下这些指令，因为我们将以稍微不同的方式运行命令。
- en: 'To add our two workers, we need to capture the join token in a similar way
    we captured the IP address of our manager node using the `$managerIP` variable;
    to do this, run:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加我们的两个工作节点，我们需要以类似于获取管理节点IP地址的方式来捕获加入令牌，使用`$managerIP`变量；为此，请运行：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Again, you `echo` the variable out to check that it is valid:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，`echo`该变量以检查它是否有效：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now it''s time to add our two worker nodes into the cluster by running:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候通过运行以下命令将我们的两个工作节点添加到集群中：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see something like the following terminal output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到类似以下的终端输出：
- en: '![Creating a Swarm manually](img/B06455_04_04.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建一个Swarm](img/B06455_04_04.jpg)'
- en: 'Connect your local Docker client to the manager node using the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令将本地Docker客户端连接到管理节点：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And then running a `docker-machine ls` again shows. As you can see from the
    list of hosts, `swarm01` is now active but there is nothing in the **SWARM** column;
    why is that?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后再次运行`docker-machine ls`，可以看到。正如从主机列表中看到的那样，`swarm01`现在是激活的，但**SWARM**列中没有任何内容；为什么会这样？
- en: Confusingly, there are two different types of Docker Swarm cluster, there is
    the Legacy Docker Swarm which was managed by Docker Machine, and then there is
    the new Docker Swarm mode which is managed by the Docker Engine itself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 令人困惑的是，Docker Swarm集群有两种不同的类型，一种是由Docker Machine管理的传统Docker Swarm，另一种是由Docker
    Engine本身管理的新的Docker Swarm模式。
- en: We have a launched a Docker Swarm Mode cluster. This is now the preferred way
    of launching Swarm, the legacy Docker Swarm is slowly being retired.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经启动了一个Docker Swarm模式集群。这现在是启动Swarm的首选方式，传统的Docker Swarm正在慢慢退役。
- en: 'To get a list of the nodes within our Swarm cluster, we need to run the following
    command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取Swarm集群中节点的列表，我们需要运行以下命令：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Creating a Swarm manually](img/B06455_04_06.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建一个Swarm](img/B06455_04_06.jpg)'
- en: 'For information on each node you can run the following command (the `--pretty`
    flag renders the JSON output from the Docker API):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有关每个节点的信息，你可以运行以下命令（`--pretty`标志会渲染Docker API的JSON输出）：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You are given a wealth of information about the host, including the fact that
    it is a manager and it has been launched in Digital Ocean. Running the same command;
    but for a worker node shows similar information:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你会获得关于主机的大量信息，包括它是一个管理节点，并且它已经在Digital Ocean上启动。运行相同的命令，但针对工作节点，会显示类似的信息：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: However, as the node is not a manager that section is missing.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于该节点不是管理节点，因此该部分缺失。
- en: Before we look at launching services into our cluster, we should look at how
    to launch our cluster using Docker Machine on Windows. We will be using PowerShell
    for this rather than the more traditional Windows CMD prompt, however, even using
    PowerShell there are a few differences in the commands used due differences between
    PowerShell and bash.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始将服务部署到集群之前，应该先了解如何在Windows上使用Docker Machine启动集群。我们将使用PowerShell来执行此操作，而不是更传统的Windows
    CMD提示符，然而，即使是使用PowerShell，命令也有一些差异，原因在于PowerShell和bash之间的差异。
- en: 'First, we need to launch the three hosts:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要启动三个主机：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once the three hosts are up and running:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦三个主机都启动并运行：
- en: '![Creating a Swarm manually](img/B06455_04_09.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建一个Swarm](img/B06455_04_09.jpg)'
- en: 'You can create the manager node by running:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来创建管理节点：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Creating a Swarm manually](img/B06455_04_10.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建一个Swarm](img/B06455_04_10.jpg)'
- en: 'Once you have your manager you can add the two worker nodes:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了管理节点，你可以添加两个工作节点：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And then configure your local Docker client to use your manager node and check
    the cluster status:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后配置本地Docker客户端以使用管理节点，并检查集群状态：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: At this stage, no matter which operating system you are using, you should have
    a three node Docker Swarm cluster in Digital Ocean, we can now look at a launching
    service into our cluster.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，无论你使用哪个操作系统，你应该已经在Digital Ocean上有了一个三节点的Docker Swarm集群，我们现在可以开始将服务部署到集群中。
- en: Launching a service
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动一个服务
- en: Rather than launching containers using the `docker container run` command you
    need to create a service A service defines a task which the manager then passes
    to one of the workers and then a container is launched.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与其使用`docker container run`命令启动容器，不如创建一个服务。服务定义了一个任务，管理节点将该任务传递给某个工作节点，然后启动一个容器。
- en: 'Let''s launch a simple service called cluster which uses the image we looked
    at in [Chapter 2](ch02.html "Chapter 2. Launching Applications Using Docker"),
    *Launching Applications Using Docker*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动一个名为cluster的简单服务，它使用的是我们在[第2章](ch02.html "第2章 启动应用程序使用Docker")中查看过的镜像，*使用Docker启动应用程序*：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'That''s it, we should now have a single container running on one of our three
    nodes. To check that the service is running and get a little more information
    about the service, run the following commands:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我们现在应该在三个节点中的一个上运行了一个容器。要检查服务是否在运行并获取更多关于服务的信息，请运行以下命令：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that we have confirmed that our service is running, you will be able to
    open your browser and enter the IP address of one of your three nodes (which you
    can get by running `docker-machine ls`).One of the features of Docker Swarm is
    it's routing mesh.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确认服务正在运行，你可以打开浏览器，输入你三个节点中任意一个的IP地址（可以通过运行`docker-machine ls`获得）。Docker
    Swarm的一个特点就是它的路由网格。
- en: '![Launching a service](img/B06455_04_13.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![启动服务](img/B06455_04_13.jpg)'
- en: A routing mesh? When we exposed the port using the `-p:80:80/tcp` flag, we did
    a little more than map port `80` on the host to port `80` on the container, we
    actually created a Swarm load balancer on `port 80` across all of the hosts within
    the cluster. The Swarm load balancer then directs requests to containers within
    our cluster.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 路由网格？当我们使用`-p:80:80/tcp`标志暴露端口时，我们做的不仅仅是将主机的端口`80`映射到容器的端口`80`，我们实际上是在集群内的所有主机上创建了一个Swarm负载均衡器，并将其绑定到`80`端口。然后，Swarm负载均衡器将请求定向到集群中的容器。
- en: 'Running the commands below, should show you which tasks are running on which
    nodes, remember tasks are containers which have been launched by the service:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 运行下面的命令，应该能显示哪些任务正在各个节点上运行，记住，任务是由服务启动的容器：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Like me, you probably have your single task running on `swarm01`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 像我一样，你可能在`swarm01`上运行着单一任务：
- en: '![Launching a service](img/B06455_04_14.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![启动服务](img/B06455_04_14.jpg)'
- en: 'We can make things more interesting by scaling our service to add more tasks,
    to do this simply run the following commands to scale and check our service:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过扩展服务来增加更多任务，使得事情变得更加有趣，简单地运行以下命令来扩展和检查我们的服务：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you should see, we now have 6 tasks running within our cluster service:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们现在在集群服务中有6个任务正在运行：
- en: '![Launching a service](img/B06455_04_15.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![启动服务](img/B06455_04_15.jpg)'
- en: 'Checking the nodes should show that the tasks are evenly distributed between
    our three nodes:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 检查节点时，应该能看到任务在我们的三个节点之间均匀分布：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Launching a service](img/B06455_04_16.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![启动服务](img/B06455_04_16.jpg)'
- en: 'Hitting refresh in your browser should also update the hostname under the Docker
    image change, another way of seeing this on Mac and Linux is to run the following
    command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中点击刷新也应该更新Docker镜像下的主机名，在Mac和Linux中查看这一点的另一种方法是运行以下命令：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see from the following terminal output, our requests are being load
    balanced between the running tasks:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下终端输出可以看出，我们的请求在正在运行的任务之间进行了负载均衡：
- en: '![Launching a service](img/B06455_04_17.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![启动服务](img/B06455_04_17.jpg)'
- en: 'Before we terminate our Docker Swarm cluster let''s look at another way we
    can launch services, before we do we need to remove the currently running service,
    to do this simply run:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们终止Docker Swarm集群之前，让我们看看另一种启动服务的方法，在此之前，我们需要移除当前正在运行的服务，为此，只需运行以下命令：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now that the service has been removed, we can launch a stack.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 服务移除后，我们可以启动一个新的堆栈。
- en: Launching a stack
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动堆栈
- en: This is where it may get confusing. If a service is the same as running container
    then a stack is running a collection of services like you would launch multiple
    containers using Docker Compose. In fact, you can launch a stack using a Docker
    Compose file, with a few additions.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会让人感到困惑。如果服务等同于运行容器，那么堆栈就是运行一组服务，就像你使用Docker Compose启动多个容器一样。实际上，你可以使用Docker
    Compose文件启动堆栈，只需进行一些调整。
- en: 'Let''s look at launching our Cluster application again. You can find the Docker
    Compose file we are going to be using in the repo in the `/bootcamp/chapter04/cluster/`
    folder, before we go through the contents of the `docker-compose.yml` file, let''s
    launch the stack. To do this run the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来看一下如何启动我们的集群应用程序。你可以在`/bootcamp/chapter04/cluster/`文件夹中的仓库里找到我们将要使用的Docker
    Compose文件，在我们查看`docker-compose.yml`文件的内容之前，先启动堆栈。为此，请运行以下命令：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should get confirmation that the network for the stack has been created
    along with the service. You can list the services launched by the stack by running:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会收到确认，表示堆栈的网络已与服务一起创建。你可以通过运行以下命令列出堆栈启动的服务：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And then check on the tasks within the service by running:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过运行以下命令查看服务中的任务：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Launching a stack](img/B06455_04_18.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![启动堆栈](img/B06455_04_18.jpg)'
- en: 'You may be surprised to see that service has launched its tasks on `swarm02`
    and `swarm03` only. For an explanation as to why, let''s open the `docker-compose.yml`
    file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会惊讶地发现，服务仅在 `swarm02` 和 `swarm03` 上启动了任务。为了说明原因，让我们打开 `docker-compose.yml`
    文件：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As you can see, the `docker-compose.yml` file looks like what we covered in
    [Chapter 2](ch02.html "Chapter 2. Launching Applications Using Docker"), *Launching
    Applications Using Docker*, until we get to the `deploy` section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`docker-compose.yml` 文件看起来就像我们在[第 2 章](ch02.html "第 2 章. 使用 Docker 启动应用程序")中介绍的内容，*使用
    Docker 启动应用程序*，直到我们到达 `deploy` 部分。
- en: You may have already spotted the reason why we only have tasks running on our
    two worker nodes, as you can see in the `placement` section, we have told Docker
    to only launch our tasks on nodes with the role of worker.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经发现我们为什么只在两个工作节点上运行任务的原因，正如你在 `placement` 部分看到的，我们告诉 Docker 只在角色为工作节点的节点上启动任务。
- en: Next up we have a defined a `restart_policy` this tells the Docker what to do
    should any of the tasks stop responding, in our case we are telling the Docker
    to restart them `on-failure`. Finally, we are telling the Docker to launch six
    `replicas` within our service.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义了一个 `restart_policy`，它告诉 Docker 如果任何任务停止响应应该怎么办，在我们的案例中，我们告诉 Docker
    在 `on-failure` 时重启任务。最后，我们告诉 Docker 在我们的服务中启动六个 `replicas`。
- en: 'Let''s test that restart policy by terminating one of our two worker nodes.
    There is a graceful way of doing this by draining the node, however, it more fun
    to just terminate the node, to do this run the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过终止我们其中一个工作节点来测试重启策略。虽然通过排空节点有一种优雅的方式，但更有趣的做法是直接终止该节点，运行以下命令即可：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Running `docker stack ps` cluster immediately after removing the host shows
    that the Docker hasn't caught up yet.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除主机后，立即运行 `docker stack ps` 集群会显示 Docker 还没有同步更新。
- en: Running `docker stack ps` a few seconds later will show that we still have six
    tasks running, but as you can see from the terminal output they are now all running
    on `swarm02` and the tasks the new ones have replaced are showing as **shutdown**.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等几秒钟后运行 `docker stack ps`，你会看到我们仍然有六个任务在运行，但从终端输出中可以看出，它们现在都在 `swarm02` 上运行，而新的任务替代了之前的任务，显示为
    **已关闭**。
- en: 'Our application should still be available by entering the IP address of `swarm01`
    or `swarm02` into your browser. Once you have finished with the remain two hosts
    you can them by running:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序应该仍然可以通过在浏览器中输入 `swarm01` 或 `swarm02` 的 IP 地址访问。完成剩余两个主机的操作后，你可以通过运行以下命令将它们移除：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: So far, we have manually created our Docker Swarm cluster in Digital Ocean,
    I am sure you agree that so far, the process has been straightforward, especially
    considering how powerful the clustering technology is, you are already probably
    starting to think how you can start to deploy services and stacks.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在 Digital Ocean 上手动创建了 Docker Swarm 集群，我相信你同意到目前为止，这个过程非常简单，特别是考虑到集群技术的强大，你现在可能已经开始思考如何部署服务和堆栈。
- en: In the next few sections we are going to look at Docker for Amazon Web Services
    and Docker for Azure, and how Docker can take advantage of the range of supporting
    features provided by the two public cloud services.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个部分，我们将研究 Docker for Amazon Web Services 和 Docker for Azure，以及 Docker
    如何利用这两大公共云服务提供的一系列支持功能。
- en: Docker for Amazon Web Services
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker for Amazon Web Services
- en: Docker for AWS is a Swarm cluster which has been tuned by Docker to run in Amazon
    Web Services.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Docker for AWS 是一个已经为 Amazon Web Services 调优的 Swarm 集群。
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: AWS CloudFormation is a templating engine which allows you to define your AWS
    infrastructure and resources in a controllable and predictable fashion.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFormation 是一个模板引擎，允许你以可控和可预测的方式定义 AWS 基础设施和资源。
- en: 'The AWS CloudFormation template can be found at:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFormation 模板可以在以下位置找到：
- en: '[https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl](https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl](https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl)'
- en: As you can see there is quite a lot to it, the image below is a visualization
    of the template above – while you may not be able to see all the content in the
    image you should get an idea of the complexity of the **CloudFormation** template
    supplied by Docker.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，内容相当丰富，下面的图片是上述模板的可视化展示——虽然你可能无法看到图片中的所有内容，但你应该能大致了解Docker提供的**CloudFormation**模板的复杂性。
- en: '![Docker for Amazon Web Services](img/B06455_04_21.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_21.jpg)'
- en: As you can see, the template does all the heavy lifting for you meaning you
    don't really have to do much apart from one thing, create an SSH key. To do this
    login to the AWS console at [https://console.aws.amazon.com/](https://console.aws.amazon.com/),
    select **EC2**from the **Services** menu at the top of the screen, once the EC2
    dashboard opens click on **Key Pairs** in the left-hand side menu.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，模板为你完成了所有繁重的工作，这意味着你几乎不需要做什么，唯一需要做的事就是创建一个SSH密钥。为此，登录到AWS控制台 [https://console.aws.amazon.com/](https://console.aws.amazon.com/)，从屏幕顶部的**服务**菜单中选择**EC2**，EC2仪表板打开后，点击左侧菜单中的**密钥对**。
- en: Here you will have the option to **Create Key Pair** or **Import Key Pair**.
    Once you have your SSH key created or imported you can get to launching your Docker
    for Amazon Web Services cluster, to this, select **CloudFormation** from the **Services**
    menu.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你可以选择**创建密钥对**或**导入密钥对**。一旦你创建或导入了SSH密钥，就可以开始启动Docker for Amazon Web Services集群，接下来，从**服务**菜单中选择**CloudFormation**。
- en: 'Clicking **Create New Stack** will take you a page which lets you define your
    stack, as Docker have already done this for us all you need to do is enter the
    URL of the stack definition file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建新堆栈**将带你到一个页面，在该页面上你可以定义你的堆栈，由于Docker已经为我们完成了这项工作，你只需要输入堆栈定义文件的URL：
- en: '[https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl](https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl](https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl)'
- en: 'In the space below where is says **Specify an Amazon S3 template URL**, making
    sure that the radio icon above where you entered the URL is selected click on
    **Next**:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的区域中，找到**指定一个Amazon S3模板URL**，确保在你输入URL的上方选择了单选框后，点击**下一步**：
- en: '![Docker for Amazon Web Services](img/B06455_04_24.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_24.jpg)'
- en: 'The next page you are taken to is where you define how you would like your
    stack to look, for this quick demonstration I used the following to roughly match
    the sizes of the manual Swarm cluster we launched in Digital Ocean:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你将进入的下一页是定义你的堆栈外观的页面，对于这个快速演示，我使用了以下配置，大致匹配我们在Digital Ocean启动的手动Swarm集群的大小：
- en: '**Stack name**: Bootcamp'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**堆栈名称**：Bootcamp'
- en: '**Number of Swarm managers?** 1'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swarm管理节点数量？** 1'
- en: '**Number of Swarm worker nodes?** 3'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swarm工作节点数量？** 3'
- en: '**Which SSH key to use?**<your own SSH key>'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用哪个SSH密钥？** <你自己的SSH密钥>'
- en: '**Enable daily resource clea****nup?** No'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用每日资源清理？** 否'
- en: '**Use Cloudwatch for container logging?**Yes'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Cloudwatch进行容器日志记录？** 是'
- en: '**Swarm manager instance type?**t2.micro'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swarm管理节点实例类型？** t2.micro'
- en: '**Manager ephemeral storage volume size?** 20'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理节点临时存储卷大小？** 20'
- en: '**Manager ephemeral storage volume type** standard'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理节点临时存储卷类型** standard'
- en: '**Agent worker instance type?** t2.micro'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理工作节点实例类型？** t2.micro'
- en: '**Worker ephemeral storage volume size?** 20'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作节点临时存储卷大小？** 20'
- en: '**Worker ephemeral storage vol****ume type**: standard'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作节点临时存储卷类型**：standard'
- en: Once you have filled in all the details, click on the **Next** button at the
    bottom of the page. The next screen you are taken to contains additional options
    such as tagging, we don't need to enter anything here so just click on the **Next**
    button,
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完所有细节后，点击页面底部的**下一步**按钮。接下来你将进入一个包含额外选项的页面，例如标签，我们不需要在此输入任何内容，因此只需点击**下一步**按钮。
- en: The final page is where we review everything before we comit to launching our
    stack. If you need to change any of the values you can do so by clicking on **Previous**,
    once you are happy with how the details you need to tick the box which says, **I
    acknowledge that AWS CloudFormation might create IAM resources** and then click
    the **Create** button.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一页是我们在正式启动堆栈之前对所有内容进行复审的页面。如果你需要更改任何值，可以点击**上一步**，一旦你对填写的详情满意，就需要勾选**我确认AWS
    CloudFormation可能会创建IAM资源**，然后点击**创建**按钮。
- en: This will immediately start deploying the resources for your Docker for Amazon
    Web Service cluster, you can check the status of the deployment by having the
    **Events** tab open.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这将立即开始部署你的Docker for Amazon Web Service集群资源，你可以通过保持**Events**标签页打开来检查部署状态。
- en: 'Clicking the **refresh** button should show you something like the following
    screen:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**refresh**按钮应该会显示类似以下屏幕的内容：
- en: '![Docker for Amazon Web Services](img/B06455_04_26.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_26.jpg)'
- en: 'Launching the stack will take several minutes, once it has completed you should
    see that the **Status** says **CREATE_COMPLETE**. Once you see this, click on
    the **Outputs** tab:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 启动堆栈需要几分钟时间，完成后你应该能看到**Status**显示为**CREATE_COMPLETE**。看到这个后，点击**Outputs**标签页：
- en: '![Docker for Amazon Web Services](img/B06455_04_27.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_27.jpg)'
- en: Here you should see four messages, the first contains the Elastic Load Balancer
    URL, the second is a message about the availability of your instances and finally
    you should see a message about **Managers**, this contains a link – click it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你应该能看到四条消息，第一条包含Elastic Load Balancer的URL，第二条是关于你的实例可用性的消息，最后你应该能看到关于**Managers**的消息，其中包含一个链接——点击它。
- en: 'This takes you to the Instances page of the EC2 dashboard, you will also notice
    that our single manager node has been filtered, selecting it shows information
    such as the public URL and IP address of the instance:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带你到EC2仪表盘的实例页面，你还会注意到我们的单一管理节点已被过滤，选择它后可以看到该实例的公共URL和IP地址等信息：
- en: '![Docker for Amazon Web Services](img/B06455_04_28.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_28.jpg)'
- en: 'To interact with our cluster, we are going to SSH into the manager node, you
    need to use the `docker` username. I used the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与我们的集群进行交互，我们将通过SSH连接到管理节点，你需要使用`docker`用户名。我使用了以下命令：
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you downloaded a key pair then you would use something like;
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你下载了密钥对，则可以使用类似如下的命令：
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once you are logged in you should see something like:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦登录，你应该能看到类似如下的内容：
- en: '![Docker for Amazon Web Services](img/B06455_04_29.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_29.jpg)'
- en: 'Running `docker node ls` shows that we have three worker nodes and the one
    manager node we are logged into:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`docker node ls`可以看到我们有三个工作节点和我们当前登录的一个管理节点：
- en: '![Docker for Amazon Web Services](img/B06455_04_30.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_30.jpg)'
- en: 'Now let''s launch our cluster application, as we are logged into a very basic
    operating system, in fact as you can from the output of running:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们启动我们的集群应用程序，由于我们登录的是一个非常基础的操作系统，实际上正如你从运行命令的输出中看到的那样：
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We are logged into an Alpine Linux server:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已登录到一个Alpine Linux服务器：
- en: '![Docker for Amazon Web Services](img/B06455_04_31.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_31.jpg)'
- en: 'Git is not installed by default so let''s install it by switching to the root
    user and install the Git package using APK:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Git默认没有安装，所以让我们切换到root用户并使用APK安装Git包：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now that Git is installed we can clone the Bootcamp repo:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Git已安装，我们可以克隆Bootcamp的repo：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once Git is installed we can then launch our stack using the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Git安装完成，我们就可以使用以下命令启动我们的堆栈：
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should see something like the following output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的输出：
- en: '![Docker for Amazon Web Services](img/B06455_04_33.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_33.jpg)'
- en: 'Now that our stack is launched you can access it using the Elastic Load Balancer
    URL from the Outputs tab of the CloudFormation stack, in my case the URL was (please
    note that my URL no longer works):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的堆栈已启动，你可以通过CloudFormation堆栈的**Outputs**标签页中的Elastic Load Balancer URL访问它，在我的案例中URL是（请注意，我的URL现在已失效）：
- en: '`http://bootcamp-elb-1145454691.eu-west-1.elb.amazonaws.com/`'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://bootcamp-elb-1145454691.eu-west-1.elb.amazonaws.com/`'
- en: 'As you can see from the screen below the page displays as expected with the
    host name of the container the content is being served from:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，页面按预期显示，容器的主机名是内容所在的主机名：
- en: '![Docker for Amazon Web Services](img/B06455_04_34.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_34.jpg)'
- en: 'As before, running curl against the Elastic Load Balancer URL shows that hostname
    of the container is changing (remember to replace the URL with your own):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，运行curl命令访问Elastic Load Balancer URL，可以看到容器的主机名在变化（记得替换成你自己的URL）：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Before we teardown our Cluster there is one more to take a quick look at, if
    you when we launched our Docker for Amazon Web Service stack we said yes to **Use
    Cloudwatch for container logging**.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们拆解集群之前，还有最后一个需要快速查看的地方，如果在启动Docker for Amazon Web Service堆栈时我们选择了**Use Cloudwatch
    for container logging**。
- en: 'This option streams your container logs to Amazons own central logging service,
    to view return to the AWS console and select **Cloudwatch** from the **Services**
    menu, once the Cloudwatch dashboard has loaded, click **Logs** in the left-hand
    side menu and then click on the **Bootcamp-lg** link, here you should list of
    the containers which were launched by your `docker stack create` command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项将您的容器日志流式传输到 Amazon 自己的中央日志服务，要查看日志，请返回 AWS 控制台并从 **服务** 菜单中选择 **Cloudwatch**，一旦
    Cloudwatch 仪表板加载完成，点击左侧菜单中的 **日志**，然后点击 **Bootcamp-lg** 链接，在这里您应该能看到由 `docker
    stack create` 命令启动的容器列表：
- en: '![Docker for Amazon Web Services](img/B06455_04_36.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_36.jpg)'
- en: 'Clicking on one of the log streams will show you everything which that container
    has logged, which in our case should just be a lot of information from the supervisord
    process:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 点击其中一个日志流将显示该容器记录的所有内容，在我们的例子中，应该只是来自 supervisord 进程的大量信息：
- en: '![Docker for Amazon Web Services](img/B06455_04_37.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Amazon Web Services](img/B06455_04_37.jpg)'
- en: To tear down our Docker for Amazon Web Services cluster return to the CloudFormation
    dashboard, select your stack then select **Delete Stack** from the **Actions**
    menu. This will pop-up a prompt, click the **Yes, Delete** button and deletion
    of your stack with start immediately.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要拆除我们的 Docker for Amazon Web Services 集群，请返回 CloudFormation 仪表板，选择您的堆栈，然后从 **操作**
    菜单中选择 **删除堆栈**。这将弹出一个提示框，点击 **是，删除** 按钮，您的堆栈将立即开始删除。
- en: Removing all the resource will take several minutes, it is important to ensure
    that all the resources are removed as Amazon operate a pay-as-go model meaning
    if a resource such as an EC2 instance is running you will be being charged for
    it so I would recommend you keep the window open and ensure that the deletion
    is successful.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 删除所有资源需要几分钟，确保所有资源都被删除非常重要，因为 Amazon 采用按需付费模式，这意味着如果某个资源（如 EC2 实例）正在运行，您将为其付费，因此建议您保持窗口打开，并确保删除操作成功。
- en: Speaking of charges, you may have noticed that when we launched our stack there
    was a link to estimated costs, this takes all the resource defined in the CloudFormation
    template and runs it through Amazon's Simple Cost Calculator application, our
    four instance Docker for Amazon Web Services would cost us an estimated $66.98
    per month to run.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 说到费用，您可能已经注意到，当我们启动堆栈时，有一个链接指向预估费用，这个链接会将 CloudFormation 模板中定义的所有资源通过 Amazon
    的简单成本计算器应用程序进行处理，我们的四个实例的 Docker for Amazon Web Services 估计每月花费 $66.98。
- en: As you can see, we launched a quite complex configuration without much effort
    at all, Docker have also applied this same methodology to Microsoft Azure, let's
    look at that now.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在几乎没有任何努力的情况下启动了一个相当复杂的配置，Docker 也将同样的方法应用于 Microsoft Azure，让我们现在来看一下。
- en: Docker for Azure
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker for Azure
- en: Docker for Azure needs a little more work up-front before we can deploy. Luckily,
    Docker have made this as simple as possible by providing the Azure command line
    interface as a container.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Docker for Azure 需要在部署之前做一些更多的准备工作。幸运的是，Docker 已经尽可能简化了这个过程，通过提供作为容器的 Azure
    命令行界面。
- en: 'We need to create a service profile and resource group for our deployment to
    use, to do this simply run the following command:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为部署创建一个服务配置文件和资源组，要做到这一点，只需运行以下命令：
- en: '[PRE35]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This will download the Azure CLI. The three variables we are passing the command
    are as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载 Azure CLI。我们传递给命令的三个变量如下：
- en: The name of the service profile
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务配置文件的名称
- en: The name of the resource group
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源组的名称
- en: Which region we would like to launch our cluster in
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望在哪个区域启动我们的集群
- en: 'After a few seconds, you should receive a URL and an authentication code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，您应该会收到一个 URL 和一个身份验证代码：
- en: '![Docker for Azure](img/B06455_04_41.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Azure](img/B06455_04_41.jpg)'
- en: 'Open [https://aka.ms/devicelogin/](https://aka.ms/devicelogin/) in your browser
    and enter the code you were given, which in my case was **DQQXPYV7G**:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开 [https://aka.ms/devicelogin/](https://aka.ms/devicelogin/) 并输入您获得的代码，在我的例子中是
    **DQQXPYV7G**：
- en: '![Docker for Azure](img/B06455_04_42.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Azure](img/B06455_04_42.jpg)'
- en: As you can see from the screen above, the application is identifying itself
    as **Microsoft Azure Cross-platform Command Line Interface** so we know that the
    request is right; clicking on Continue will ask you to login. Once logged in you
    will receive confirmation that your request has been authorised and the application
    has logged in.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，应用程序正在自我识别为**Microsoft Azure 跨平台命令行界面**，因此我们知道请求是正确的；点击继续将要求您登录。登录后，您将收到确认，表示您的请求已被授权并且应用程序已登录。
- en: 'After a second or two you should see your command line spring into life, the
    first thing it will do is ask you which subscription it should use:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一两秒钟后，您应该看到命令行开始响应，首先它会询问您使用哪个订阅：
- en: '![Docker for Azure](img/B06455_04_44.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Azure](img/B06455_04_44.jpg)'
- en: 'Select the right subscription, and then leave the command to finish, it will
    take around five minutes to complete. At the of the process you should receive
    your access credentials, make a note of these as you will need them to launch
    your stack:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 选择正确的订阅，然后让命令完成，它大约需要五分钟时间。在过程结束时，您应该会收到您的访问凭证，记下这些信息，因为您将需要它们来启动您的堆栈：
- en: '![Docker for Azure](img/B06455_04_45.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Azure](img/B06455_04_45.jpg)'
- en: 'Now that we have completed the preparation it is time to launch the Docker
    for Azure template, you can view the template at the following URL:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了准备工作，是时候启动 Docker for Azure 模板了，您可以通过以下网址查看该模板：
- en: '[https://download.docker.com/azure/stable/Docker.tmpl](https://download.docker.com/azure/stable/Docker.tmpl)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://download.docker.com/azure/stable/Docker.tmpl](https://download.docker.com/azure/stable/Docker.tmpl)'
- en: 'And to launch it simply go to the following URL in your browser:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动它，只需在浏览器中访问以下网址：
- en: '[https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fdownload.docker.com%2Fazure%2Fstable%2FDocker.tmpl](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fdownload.docker.com%2Fazure%2Fstable%2FDocker.tmpl)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fdownload.docker.com%2Fazure%2Fstable%2FDocker.tmpl](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fdownload.docker.com%2Fazure%2Fstable%2FDocker.tmpl)'
- en: 'You should already be logged in from authorizing the command line interface,
    if not login and you will be take a to a page which asks for several pieces of
    information on how you would like your stack to look:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经通过授权命令行界面登录，如果没有登录，请登录，您将被引导到一个页面，要求提供一些有关您希望堆栈外观的信息：
- en: '**Subscription** <Select your subscription>'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅** <选择您的订阅>'
- en: '**Use existing** <Select your resource group generated in the previous step
    >'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用现有** <选择您在上一步生成的资源组>'
- en: '**Location** <This will be greyed out>'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置** <此项将被灰显>'
- en: '**Ad Service Principal App ID** <Enter your AD ServicePrincipal App ID generated
    in the previous step >'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AD 服务主体应用程序 ID** <输入您在上一步生成的 AD 服务主体应用程序 ID>'
- en: '**Ad Service Principal App Secret**: <Enter your AD ServicePrincipal App Secret
    generated in the previous step >'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AD 服务主体应用程序密钥**：<输入您在上一步生成的 AD 服务主体应用程序密钥>'
- en: '**Enable System Prune**: no'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用系统清理**：否'
- en: '**Manager Count**: 1'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理节点数**：1'
- en: '**Manager VM Size**: Standard_D2_v2'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理虚拟机大小**：Standard_D2_v2'
- en: '**Ssh Public Key**: <Enter your public key, see below>'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSH 公钥**：<输入您的公钥，见下文>'
- en: '**Swarm Name**: dockerswarm'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swarm 名称**：dockerswarm'
- en: '**Worker Count**: 3'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作节点数**：3'
- en: '**Worker VM** **Size**: Standard_D2_v2'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作节点虚拟机** **大小**：Standard_D2_v2'
- en: 'To quickly copy your public SSH key to your clipboard on a Mac or Linux run
    the following command (changing the path to your own key if needed):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Mac 或 Linux 上快速复制您的 SSH 公钥到剪贴板，请运行以下命令（如果需要，修改路径为您的密钥路径）：
- en: '[PRE36]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Make sure you tick the box next to **I agree to the terms and conditions stated
    above**, once you are happy with the contents of the form click on **Purchase**.
    This will kick off your deployment, the process will take several minutes, once
    complete your dashboard will have a new resource added to it, depending on your
    existing resources you may have to scroll to see it or the page may need to be
    refreshed.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 确保勾选**我同意上述条款和条件**旁边的框，确认表单内容无误后，点击**购买**。这将启动您的部署，过程将持续几分钟，完成后您的仪表板上会添加一个新的资源，取决于您现有的资源，您可能需要滚动查看或刷新页面。
- en: 'Clicking on **See more** in your resource tile will give you a list of all
    the resources created by Docker for Azure:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 点击您的资源卡片中的**查看更多**将显示 Docker for Azure 创建的所有资源列表：
- en: '![Docker for Azure](img/B06455_04_48.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Azure](img/B06455_04_48.jpg)'
- en: You should be able to see two public IP addresses assigned, one for a **externalLoadBalancer-public-ip**
    and one for a **externalSSHLoadBalancer-public-ip** make a note of both as we
    are going to need them, to find out the IP address click on the resource to find
    more information.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到分配的两个公共IP地址，一个是**externalLoadBalancer-public-ip**，另一个是**externalSSHLoadBalancer-public-ip**，请记下这两个地址，我们需要用到它们，找到IP地址的方法是点击资源查看更多信息。
- en: 'Now that we know the two IP addresses we can SSH into our manager node, SSH
    is listening on port `50000`, so to SSH to the node run the following command
    making sure you use the **externalSSHLoadBalancer-public-ip** address:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了两个IP地址，我们可以通过SSH进入我们的管理节点，SSH监听在端口`50000`，所以要SSH到节点，请运行以下命令，确保使用**externalSSHLoadBalancer-public-ip**地址：
- en: '[PRE37]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once logged in, run `docker node ls` and you should see your three worker nodes,
    if you don''t they may still be starting so give it a few minutes more:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，运行`docker node ls`，你应该能看到你的三个工作节点，如果没有看到，可能它们仍在启动中，再等几分钟：
- en: '![Docker for Azure](img/B06455_04_50.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![Docker for Azure](img/B06455_04_50.jpg)'
- en: As with Docker for Amazon Web Services, you are SSH'ed into an Alpine Linux
    host.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 和Amazon Web Services上的Docker一样，你是通过SSH进入了一个Alpine Linux主机。
- en: 'Meaning that to install Git we need to change to the root user and using APK
    to install it:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，要安装Git，我们需要切换到root用户，并使用APK进行安装：
- en: '[PRE38]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Once Git is installed we can check out the Bootcamp repository using;
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了Git，我们可以使用以下命令检出Bootcamp仓库：
- en: '[PRE39]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'And then launch our application stack using the following command:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令启动我们的应用程序栈：
- en: '[PRE40]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'And make sure everything is running by executing:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 并确保一切正常运行，通过执行以下命令：
- en: '[PRE41]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Putting the externalLoadBalancer-public-ipaddress into your browser should
    show you your cluster application. Again, using the CURL command should show us
    that traffic is being distributed across our containers (remember to use your
    own Load Balancer IP address):'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 将externalLoadBalancer-public-ip地址输入浏览器后，应该会显示你的集群应用程序。再次使用CURL命令应该会显示流量正在分发到我们的容器（记得使用你自己的负载均衡器IP地址）：
- en: '[PRE42]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: There you have it, we have successfully deployed Docker for Azure and our cluster
    application. The last thing to do is to delete the resources so that we do get
    any unexpected bills, to do this select **Resource groups** from the left-hand
    menu and then click on the three dots next to the **bootcamp-resource** entry
    and select **Delete**.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我们成功部署了Docker for Azure和我们的集群应用程序。最后要做的就是删除资源，以避免产生任何意外费用，操作步骤是：从左侧菜单中选择**资源组**，然后点击**bootcamp-resource**条目旁边的三个点，选择**删除**。
- en: It will take about 10 minutes to remove all the resources and the group, but
    it is worth keeping the Azure portal open until the deletion process has completed
    as you do not want to incur any additional cost.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 删除所有资源和组大约需要10分钟，但最好保持Azure门户打开，直到删除过程完成，因为你不希望产生额外的费用。
- en: Depending on how long the resources were live this entire demo would have cost
    less than $0.10.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 根据资源运行的时长，这整个演示的费用应该不会超过$0.10。
- en: Summary
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I suspect that by the end of this chapter things were getting very predictable
    and there were no real surprises, this is by design. As you have experienced,
    Docker have provided a very powerful clustering solution which once deployed acts
    in a consistent and predictable way no matter what underlying platform you have
    launched your cluster on.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我猜到到本章结束时，事情可能变得非常可预测，没有真正的惊喜，这也是故意的。正如你所体验到的，Docker提供了一个非常强大的集群解决方案，一旦部署，无论你在什么平台上启动集群，它都会以一致和可预测的方式运行。
- en: There is one important thing which we yet to touch on yet, persistent storage
    for our containers. This is important, especially in a cluster, as it allows our
    containers to not only move between hosts but also introduces ways in which we
    can do rolling updates of our applications.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件重要的事情我们还没有提到，那就是为容器提供持久存储。这一点很重要，尤其是在集群中，因为它不仅允许我们的容器在主机之间迁移，还引入了我们可以对应用程序进行滚动更新的方式。
- en: In the next chapter, we are going to look at both Docker network & volume plugins.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将了解Docker网络和卷插件。
