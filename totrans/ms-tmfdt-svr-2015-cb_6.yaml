- en: Chapter 6. Releasing Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"Continuous Deployment can be thought of as an extension to Continuous
    Integration, aiming at minimizing lead time"* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Agile Allianz* |'
  prefs: []
  type: TYPE_TB
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a release definition in Team Web Portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping artifacts to a release definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a release definition for the continuous deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and configuring environments in a release definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring security for release definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring global and local variables for a release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying an Azure website using release management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the IIS Web Application using release management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking a release in release management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far in the book, we have talked about planning, developing, testing, and
    building software. Software teams spend weeks and months developing and testing
    software; however, software can only reap its worth when it reaches the hands
    of the people it''s meant for. Release management is an enabler for that:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Release management is the process of managing, planning, scheduling,
    and controlling a software build through different stages and environments; including
    testing and deploying software releases."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Wikipedia* |'
  prefs: []
  type: TYPE_TB
- en: On June 3rd, 2013, Microsoft acquired the InRelease product from InCycle software.
    The InRelease product was rebranded as Microsoft Release Management and integrated
    into Team Foundation Server 2013\. Microsoft Release Manager gave Microsoft a
    position in the growing release management market. While Release Manager shipped
    along with Team Foundation Server, it required separate installation and setup.
    Though various improvements were made to improve the integration between the two
    products, they still felt disjointed at several places. The WPF-based desktop
    client was clunky and limiting. Release Manager did not support non-.NET applications
    and could not be used on non-Windows platforms. It was clear that Release Manager
    was only a stop-gap solution and would need to be replaced by a proper solution.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft has recently released the web-based Release Management solution in
    Visual Studio Team Services. While the new solution has not been released in Team
    Foundation Server 2015 Update 1, it is expected to debut in TFS 2015 in either
    Update 2 or Update 3\. No further investment is expected to be made in the old
    Release Management Solution, and it will inevitably be replaced by the new web-based
    Release Management Solution. With this in mind, this chapter is entirely focused
    on the new web-based Release Management Solution. To try out the recipes in this
    chapter, you'll need to create a Visual Studio Team Services account; follow the
    instructions at [http://bit.ly/1N50I7j](http://bit.ly/1N50I7j).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recipes in this chapter are based on the new web-based Release Management Solution.
    The new web-based Release Management Solution is expected to be available in Team
    Foundation Server in Update 2 or Update 3\. To try out the recipes in this chapter,
    create a Visual Studio Team Services account ([http://bit.ly/1N50I7j](http://bit.ly/1N50I7j)).
  prefs: []
  type: TYPE_NORMAL
- en: The new web-based Release Management Solution is very well integrated into the
    product. No separate installation or configuration is required to start using
    the new Release Management Solution. The security infrastructure of the Release
    Manager is different from the previous version, in that it did not manage its
    own groups and permissions. New permissions are introduced in VSTS for release
    management, such as **Create release definitions**, **Create releases**, and **Manage
    approvers**. Default values for these permissions are set for specific groups
    at the Team Project level. These permissions can then be overridden for the groups
    or individual users, for a specific release definition or for a specific environment
    within a release definition.
  prefs: []
  type: TYPE_NORMAL
- en: Both Team build and release management share the same agent—pool and queue infrastructure.
    Unified agent infrastructure reduces administration and setup overhead. The tasks
    used to orchestrate the actions are also shared between build and release. This
    significantly reduces the learning curve for release management. The new solution
    is web based, open, extensible, and fully cross-platform. The underlying framework
    between Team build and release management is the same, so you get the same real-time
    console output in release management as you get with Team build. The release definitions
    support change revision and different functionality similar to that in the build
    definitions. Release management supports draft releases similar to the draft build
    functionality in Team build. With so much in common between build and release
    management, the only difference is the build also has access to deployment tasks,
    you may ask how are the build and release management different?
  prefs: []
  type: TYPE_NORMAL
- en: 'The line between build and release management is blurred because both share
    so much in common. The key difference is that deployment is just one of the activities
    performed in the release management. As illustrated in the following image, the
    new release management solution allows creating release pipelines. A release pipeline
    can consist of one or more environments. Each environment can have one or more
    physical or virtual deployment targets. Environments provide pre-release and post-release
    approval workflow as well as tasks for testing and deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/image00722.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The software deployed through Release Manager can be injected from Team build,
    Jenkins, Team City, FTP, and so on. With artifacts shared across all environments
    in the release pipeline, it truly lets you build once and deploy everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: To lower the entry barrier, Release Manager provides out-of-the-box Deployment
    Templates. The Deployment Template adds the set of tasks required for the type
    of deployment in an environment. You still need to configure the tasks, but pre-adding
    the tasks gives you a head start in your release configuration. The framework
    also allows you to clone or save your configured environments as templates. Again,
    the intention is to speed up release configuration and maximize reuse across release
    definitions. Release management is expected to soon supplement the REST API gallery
    with Release Management REST APIs. This will allow you to integrate release management
    into other parts of the release workflow used in your organization or simply extend
    the release management capabilities where you find them lacking.
  prefs: []
  type: TYPE_NORMAL
- en: You will kick off the chapter by learning the different capabilities in the
    new web-based release management solution; in the later recipes, we'll cover deployment
    scenarios for Azure and on-premise web applications. Last but not least, we'll
    understand the release tracking and reporting capabilities available in release
    management.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a release definition in Team Web Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to create a new release definition using an
    empty Deployment Template. You'll also learn about the different functions available
    in a release definition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a new release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in FabrikamTFVC Team Project:![How to do it...](img/image00723.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon to create a new release definition. There are preconfigured
    Deployment Templates to choose from. In this recipe, we'll start with the **Empty**
    template. Unlike the other templates, the **Empty** template creates a blank release
    definition without any pre-added tasks:![How to do it...](img/image00724.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the release definition `FabrikamTFVC Web Release`:![How to do it...](img/image00725.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the **General** tab and change the release number format from `Release-$(rev:r)`
    to `Rel-$(System.TeamProject)-$(rev:r)`. The releases generated from this definition
    will have a release name in the format `Rel-FabrikamTFVC-1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button to save the release definition. In this recipe,
    we've created a blank release definition. We'll walk through the different functions
    of a release definition in the next *How it works…* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we started off from an empty release template. The Deployment
    Template window provides an option to start from a pre-configured release template.
    The pre-configured Deployment Template adds an environment and all necessary release
    tasks to the default environment, only leaving the task configuration to you.
    As illustrated in the following screenshot, the **Azure Website Deployment** template
    adds a default environment and two tasks, namely, **Azure Web App Deployment**
    and **Visual Studio Test**. In the long term, you''ll start seeing more pre-configured
    Deployment Templates being made available out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00726.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now understand the functions in the **Environments** tab of the FabrikamTFVC
    Web release definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00727.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Add environments**: This is the collection of server(s) where your application
    needs to be deployed. Clicking on the **Add environments** icon also launches
    the Deployment Template window. The deployment window gives you the ability to
    add an environment and related tasks for deploying the application in that environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default Environment**: This is a logical container holding the tasks required
    to release an application in the environment. As illustrated in the following
    screenshot, an environment supports a level of configuration. We''ll be covering
    the functions supported by an environment in detail in the *Adding and configuring
    environments in a release definition* recipe:![How it works…](img/image00728.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add tasks**: This is simply a step in the release process to an environment.
    A set of pre-created tasks are already available out of the box. The gallery also
    provides scripting tasks to enable you to perform operations that may not necessarily
    be available in the pre-created tasks. The framework is fully extensibility; refer
    to the *Creating a new build task using the TFBuild Extensibility framework* recipe
    in [Chapter 4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building Your Application"),
    *Building Your Application*, to learn how you can add your own tasks. Both build
    and release hub shared a common task gallery. This allows you to use the tasks
    from the build process in the release process too. You''ll learn more about tasks
    as we start configuring them in the later recipes in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Navigate to the **General** tab. This tab allows you to specify the release
    name format. The names of releases for a release definition are, by default, sequentially
    numbered. The first release is named `Release-1`, the next release is `Release-2`,
    and so on. You can change this naming scheme by editing the release name format
    mask. The field supports the use of predefined (listed in the following table).
    You can also use custom variables; we''ll be covering more on variables in the
    *Configuring global and local variables for a release* recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Variable | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Rev:rr` | An auto-incremented number with at least the specified number
    of digits. |'
  prefs: []
  type: TYPE_TB
- en: '| `Date`/`Date:MMddyy` | The current date, with the default format MMddyy.
    Any combinations of M/MM/MMM/MMMM, d/dd/ddd/dddd, y/yy/yyyy/yyyy, h/hh/H/HH, m/mm,
    s/ss are supported. |'
  prefs: []
  type: TYPE_TB
- en: '| `System.TeamProject` | The name of the Team Project to which this build belongs.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Release.ReleaseId` | The ID of the release is unique across all releases
    in the project. |'
  prefs: []
  type: TYPE_TB
- en: '| `Release.DefinitionName` | The name of the release definition to which the
    current release belongs. |'
  prefs: []
  type: TYPE_TB
- en: '| `Build.BuildNumber` | The number of the build contained in the release. If
    a release has multiple builds, this is the number of the build that triggered
    the release in the case of continuous deployment or the number of the first build
    in the case of a manual trigger. |'
  prefs: []
  type: TYPE_TB
- en: '| `Build.DefinitionName` | The definition name of the build contained in the
    release. If a release has multiple builds, this is the definition name of the
    build that triggered the release in the case of continuous deployment or the definition
    name of the first build in the case of a manual trigger. |'
  prefs: []
  type: TYPE_TB
- en: '| `Artifact.ArtifactType` | The type of the artifact source linked with the
    release. For example, this can be Team build or Jenkins. |'
  prefs: []
  type: TYPE_TB
- en: '| `Build.SourceBranch` | The branch for which the build in the release was
    queued. For Git, this is the name of the branch in the form `refs/heads/master`.
    For Team Foundation Version Control, this is the root server path for the workspace
    in the `form$/teamproject/branch`. This variable is not set in the case of Jenkins
    artifact sources. |'
  prefs: []
  type: TYPE_TB
- en: '| `Custom variable` | The value of a global configuration property defined
    in the release definition. |'
  prefs: []
  type: TYPE_TB
- en: The **History** tab shows you the list of changes made to a release definition
    since its creation. You also have the ability to differentiate the changes between
    the two revisions of changes to a release definition. The **Artifacts** tab allows
    you to map the different artifacts that need to be deployed as part of the release
    definition; you'll be learning about the functions of the **Artifacts** tab in
    the *Mapping artifacts to a release definition* recipe. The **Configuring** tab
    allows you to configure variables for your release definitions; you'll learn about
    the functions of the **Configuration** tab in the *Adding and configuring environments
    in a release definition* recipe. The **Triggers** tab enables you to configure
    the release as a continuous deployment by setting the trigger as a continuous
    integration. This configuration triggers the release process whenever there is
    a change to the underlying artifacts mapped to the release definition. You'll
    learn more about this in the *Configuring a release definition for a continuous
    deployment* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping artifacts to a release definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The release definition allows you to deploy an application into multiple environments.
    The files and installers required to deploy an application are referred to as
    artifacts. At present, release management understands artifacts from Team build,
    Jenkins, and on-premises TFS. A release definition can have one or more artifacts.
    This flexibility is extremely useful for Teams building software in modules that
    are pulled together to form a release. In this recipe, you'll learn how to map
    the output from a Team build definition into a release definition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To edit a release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: FabrikamTFVC Team has two build definitions, namely, `FabrikamTFVC.Website`
    and `FabrikamTFVC.Services`. Website and services are two components of the same
    application; these components need to be rolled out together in the release. To
    enable this scenario, the FabrikamTFVC Team needs to map the installers from `FabrikamTFVC.Website`
    and `FabrikamTFVC.Services` into the release definition FabrikamTFVC Web:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00729.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can follow the steps in the *Creating a continuous integration build definition
    in TFBuild* recipe of [Chapter 4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building
    Your Application"), *Building Your Application*. Follow the steps in the *Creating
    a release definition in Team Web Portal* recipe, to create the FabrikamTFVC Web
    release definition.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in FabrikamTFVC Team Project and edit the release
    definition FabrikamTFVC Web. As illustrated in the following screenshot, the release
    definition prompts you to link a build definition to this release:![How to do
    it...](img/image00730.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the link to build definition hyperlink, set the artifact type as **Build**,
    and choose the **FabrikamTFVC.Services** build definition. The text at the bottom
    tells you the artifacts being published by this build definition. Click on **OK**
    to finish mapping the `FabrikamTFVC.Services` build definition to FabrikamTFVC
    Web release definition:![How to do it...](img/image00731.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate to the **Artifacts** tab; you'll see that the **FabrikamTFVC.Services**
    build definition shows up as an artifact source for this release definition:![How
    to do it...](img/image00732.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Link an artifact source** to map the build definition of **FabrikamTFVC.Website**
    to this release definition. Once done, you'll see both **FabrikamTFVC.Services**
    and **FabrikamTFVC.Website** show up as an artifact source for this release definition.
    Click on **Save** to commit the changes to the build definition:![How to do it...](img/image00733.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The artifacts in a release definition allow you to truly build once and deploy
    everywhere. The artifacts are mapped at the release definition level and are available
    to all environments in a release definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'When queuing a release, you have an option to select the version of the build
    to be used in the release. As illustrated in the following screenshot, you can
    choose the version of the builds used in this release. These artifacts are available
    across all selected environments. The version of the artifact cannot be changed
    once a release has been triggered from a release definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00734.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As illustrated in the preceding screenshot, you can directly trigger a release
    from a build. Choosing release from the build opens up the queue release option
    allowing you to choose the version of other artifacts and the environments that
    the build needs to be deployed to. You can enjoy this truly integrated experience
    when you choose Team build as the artifact for the release definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00735.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When a release is triggered, the selected versions of the artifacts are downloaded
    into the agent working directory. Tasks running within that environment can then
    deploy the artifacts. The artifact download behavior can be customized; you can
    skip the download of the artifact to the agent for a particular environment. This
    can be done by setting the **Skip artifacts download** flag in the **General**
    settings of an environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00736.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There is more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release management currently supports Team build, Jenkins, on-premises TFS,
    and other sources as valid artifact sources. The source needs to be added as a
    service endpoint from the Team Administration Console. As illustrated in the following
    screenshot, you must create a service endpoint for Jenkins using the Jenkins endpoint
    and specifying connectivity details. Once the Jenkins connection endpoint has
    been successfully added, you can choose Jenkins as an artifact type in the release
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There is more...](img/image00737.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Release management also supports adding other artifact sources. This option
    is suitable if you want to connect to sources such as Team City, NuGet repository,
    or file share.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a release definition for a continuous deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A continuous deployment is a software engineering approach in which Teams deploy
    incremental changes to software as they are committed to a repository. It aims
    at building, testing, and releasing software faster and more frequently. A release
    definition already stores details of systems generating the artifacts that need
    to be deployed. A release definition can be configured to trigger a release when
    a new version of the artifact is available. In this recipe, you'll learn how to
    configure the release definition to trigger a new release when a new artifact
    version is available.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To edit a release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team has mapped **FabrikamTFVC.Website** and **FabrikamTFVC.Services**
    to the release definition of FabrikamTFVC Web. The Team now wants the FabrikamTFVC
    release definition to automatically trigger a new release when a new successful
    build is available for **FabrikamTFVC.Services**.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in the FabrikamTFVC Team Project and edit the
    release definition FabrikamTFVC Web. Click on the **Triggers** tab to configure
    the triggers for this release definition:![How to do it...](img/image00738.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Continuous deployment** checkbox and select **FabrikamTFVC.Services**
    as the trigger for artifact source label. Also select the environments you would
    like the release to be automatically deployed to. It is a common scenario to continuously
    deploy all changes to a selected environment; however, release management gives
    you the option to select one or more environments for continuous deployment. Click
    on **Save** to commit the changes:![How to do it...](img/image00739.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Build** hub and queue a new build for **FabrikamTFVC.Services**.
    Once **FabrikamTFVC.Services** is completed successfully, a release from the release
    definition FabrikamTFVC Web is triggered. A new release will not trigger if the
    **FabrikamTFVC.Services** option fails:![How to do it...](img/image00740.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The FabrikamTFVC release definition is now configured to detect when a new artifact
    is available in the **FabrikamTFVC.Services** build definition. Under the hood,
    this configuration sets up a queue between the build and release definition. A
    successful built-in **FabrikamTFVC.Services** generates an event; as soon as the
    receiver in FabrikamTFVC Web release definition receives this event, it triggers
    a new release.
  prefs: []
  type: TYPE_NORMAL
- en: The release will trigger sequentially in all the selected environments. At present,
    you cannot set up triggers to automatically deploy to multiple environments in
    parallel. It is expected that in future, REST APIs will be available to trigger
    releases remotely from other systems.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While **FabrikamTFVC.Services** does not need to be a continuous integration
    build, even if it is manually triggered, as long as a new successful build artifact
    is produced by the build the release will be trigged. You can optionally set the
    build as continuous integration from the **Build** hub as illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/image00741.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding and configuring environments in a release definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A release definition is composed of a collection of environments. An environment
    is a logical container that holds information on where a release needs to be deployed
    and how it needs to be deployed. The environment can be a collection of server(s)
    on premises, in the cloud, multiple clouds, or an app store. The steps used to
    deploy the application on each environment can be the same or different. The deployment
    steps in an environment are described using tasks. In this recipe, you'll learn
    how to add and configure environments.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To edit a release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team has a collection of servers categorized as
    development, QA, staging, and production environments. The Team wants the ability
    to deploy the application across all environments in a single release process.
    Each environment has different owners and approvers. The Team wants the release
    definition to be configured such that developers can approve the release into
    the development environment; the QA approves all releases in the QA environment.
    Both the QA and Release Manager approve releases in staging (pre-production).
    The Release Manager approves production releases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00742.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in FabrikamTFVC Team Project and edit the release
    definition FabrikamTFVC Web. Rename the default environment to **Development**:![How
    to do it...](img/image00743.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the context menu by clicking on the ellipsis to configure the development
    environment. From the context menu, choose **Assign approvers...**:![How to do
    it...](img/image00744.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This window allows you to configure the approvers for pre-deployment and post-deployment
    approval as well as set up an overall environment owner and choose to enable e-mail
    notifications. Click on **OK** to save the configured changes. This screen allows
    adding both individual user accounts as well as groups as approvers and owners:![How
    to do it...](img/image00745.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now click on the **+** icon to add deployment tasks to the development
    environment. Adding and configuring tasks will be covered in future recipes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the development environment, launch the context menu by clicking on the
    ellipsis. From the context menu, choose **Save as template...**:![How to do it...](img/image00746.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the Deployment Template a name and description as illustrated in the following
    screenshot:![How to do it...](img/image00747.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon to add an environment. This will launch the Deployment
    Template window. As illustrated in the following screenshot, you'll see a new
    **Custom** tab. This tab will list all Custom Templates saved by the Team. Select
    and add this template; it will add a new environment with the approval configuration
    setup in step 3:![How to do it...](img/image00748.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, add a new environment for QA, staging, and production, and set the approvers
    as indicated in the diagram in the *Getting ready* section of this recipe. As
    illustrated in the following screenshot, each environment has symbols that provide
    useful information:![How to do it...](img/image00749.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows the count of tasks in an environment. At present, there are 0 tasks
    in this QA environment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This shows the count of approvers in an environment. At present, there are four
    approvers set up for the staging environment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This shows the count of variables in an environment. At present, there are 0
    variables set up for the production environment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the ellipsis in the environment to launch the context menu. From the
    context menu, select **Clone Environment**. This will clone the selected environment
    into a new environment. This is great when you want to copy an existing environment
    without saving it as a template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security can also be configured at the environment level. Select an environment
    and launch the security configuration from the context menu. This screen allows
    you to configure permissions specific to the environment such as which groups
    can delete a release environment, edit a release environment, manage release approvers,
    and administer the release permissions:![How to do it...](img/image00750.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The agent used for deploying an environment can also be configured at the environment
    level. Select **Agent options...** from the environment context menu:![How to
    do it...](img/image00751.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Agent options** window has various configuration options such as whether
    artifacts should be downloaded, which agent to use, and agent demands. The **Variables**
    tab allows you to specify the variables for this environment:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00752.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Having the ability to configure the agent per environment is extremely useful
    if the environment you are trying to deploy the application to is in a secure
    network that is only accessible to a special agent. You can use the configure
    queue option to select the queue that has the agent you need to use for this deployment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Save** to commit the changes. Queue a new release for this release
    definition by clicking on the **+** icon:![How to do it...](img/image00753.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This queues a new release for the release definition FabrikamTFVC Web. As illustrated
    in the **Environments** column, the release represents each environment with a
    line. The icon pre-fixed before the first gray line shows that the release in
    this environment is pending approval:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00754.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on the release to navigate to the log **Summary** tab for this
    release. You can see that the release is pending approval for deployment into
    the **Development** environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00755.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Development** environment was configured for pre-approval before deploying
    the application. The environment was also configured to send out e-mail notification.
    As per the configuration, the environment sends out an e-mail notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00756.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The release is kicked off once the release pre-approval is granted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00757.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When multiple approvers are specified, each of the approvers will be notified
    in sequence. All the listed approvers must approve the deployment before it continues.
    If you specify a group as an approver, the entire group is notified when there
    is a pending approval. However, only one user in the group needs to approve or
    reject the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The summary view gives you an overall summary of the release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00758.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Logs** view gives you a full break down of all actions performed in an
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00759.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is great for identifying the bottlenecks in your release process. We'll
    cover release tracking in more detail in the *Tracking a release i* *n release
    management* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring security for release definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like other modules in TFS, release management also uses the role-based permission
    model for security. Permissions define the authorizations that can be granted
    or denied to users and groups. In this recipe, you'll learn about the different
    levels at which security can be applied for release management.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To administer the permissions for release management, you need to have **Administer
    release permissions** set to **Allow**. This is, by default, set to **Allow**
    for members of the Project Administrators and Release Administrators Group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00760.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in FabrikamTFVC Team Project. From the **All
    release definitions** context menu, choose **Security...** to open the permission
    dialog. This will allow you to administer the permissions for all release definitions
    in the Team Project:![How to do it…](img/image00761.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The permissions dialog shows groups, users, and permissions. The permission
    dialog can be used to change permissions for groups as well as add new users and
    groups to these groups:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00762.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the previous step, we saw how to manage security for **All release definitions**.
    To manage the security for a specific release definition, open the context menu
    for this release definition and choose **Security...** from the context menu:![How
    to do it…](img/image00763.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The permissions dialog allows you to manage the permissions for existing, new
    users, and groups for this specific release definition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So far, we have seen how to apply security to all release definitions and a
    specific release definition. Release management also allows applying security
    on environments within a release definition. Edit FabrikamTFVC Web release definition
    from the **Environment** context menu and select **Security...**:![How to do it…](img/image00764.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The permissions dialog allows you to manage the permissions for existing, new
    users, and groups for this specific environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release management contains a hierarchical role-based permission model. The
    following table summarizes the permissions and the hierarchy to which it can be
    applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Permission | Description | Scope |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Administer release permissions | Can change any of the other permissions
    | Project, release definition, and environment |'
  prefs: []
  type: TYPE_TB
- en: '| Delete release definition | Can delete release definition(s) | Project and
    release definition |'
  prefs: []
  type: TYPE_TB
- en: '| Delete release environment | Can delete environment(s) in release definition(s)
    | Project, release definition, and environment |'
  prefs: []
  type: TYPE_TB
- en: '| Edit release definition | Can create and edit release definition(s), configuration
    variables, triggers, and artifacts | Project and release definition |'
  prefs: []
  type: TYPE_TB
- en: '| Edit release environment | Can edit environment(s) in release definition(s)
    | Project, release definition, and environment |'
  prefs: []
  type: TYPE_TB
- en: '| Manage release approvers | Can add or edit approvers for environment(s) in
    release definition(s) | Project, release definition, and environment |'
  prefs: []
  type: TYPE_TB
- en: '| Manage releases | Can edit the configuration in releases, and can start,
    stop, or restart release deployments | Project and release definition |'
  prefs: []
  type: TYPE_TB
- en: '| Queue releases | Can create new releases | Project and release definition
    |'
  prefs: []
  type: TYPE_TB
- en: '| View release definition | Can view release definition(s) | Project and release
    definition |'
  prefs: []
  type: TYPE_TB
- en: '| View releases | Can view releases belonging to release definition(s) | Project
    and release definition |'
  prefs: []
  type: TYPE_TB
- en: The default values for all of these permissions are set for all Team Project
    collection and Team Project groups. For example, Project Collection Administrators,
    Project Administrators, and Release Administrators are given all of the preceding
    permissions by default. Project Contributors are given all permissions except
    **Administer release permissions**. Project Readers, by default, are denied all
    permissions except **View release definitions** and **View releases**.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring global and local variables for a release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Variables are used to store values that need to be passed into tasks during
    the release. There are various advantages of using variables over hardcoding these
    values directly in tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Variables support encrypting values in a way that they cannot be seen or changed
    by users of a release definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing values in variables helps avoid duplication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables can be shared across all environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables can be shared across all tasks within a specific environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to configure release and environment variables
    for a release definition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To edit a release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team uses Azure blob storage for storing files that
    are needed by the FabrikamTFVC Web release definition. The Team would like the
    ability to access the blob storage connection details from across the release
    definition. The Team also need to store the connection string details that are
    required by one of the tasks in the environment. The value for the connection
    string is different per environment. The Team would like to store these values
    securely so that the connection string details are not available in plain text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00765.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in FabrikamTFVC Team Project and edit the release
    definition FabrikamTFVC Web. Click on the **Configuration** tab. The **Configuration**
    tab allows you add variables that can be shared across the release definition:![How
    to do it…](img/image00766.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon to add a variable. Add the connection details for the
    Azure blob storage as illustrated in the following screenshot. Click on the padlock
    icon next to the property. The values of such properties are stored securely and
    cannot be viewed by users once they are saved. During a deployment, the release
    management service decrypts those values that are referenced by the tasks and
    passes them to the agent over a secure HTTPS channel:![How to do it…](img/image00767.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Environment** tab, click on the ellipsis in the **Development**
    environment, and select **Configure variables...** from the context menu:![How
    to do it…](img/image00768.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon to add a variable. Add the connection string details
    and click on the padlock icon to hide the connection string. Add another variable
    for storing the database name. Follow this step to configure these variables for
    all other environments:![How to do it…](img/image00769.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate to the **Configuration** tab and change the variable type from
    the top right-hand side to **Environment variables**:![How to do it…](img/image00770.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows a list of all the environment variables and their values for all
    environments:![How to do it…](img/image00771.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can filter out the environments that you do not want to see the environment
    variables for by selecting the checklist next to the view list:![How to do it…](img/image00772.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we configured variables at release and environment levels. Variables
    that are defined at the release level are available to all tasks across all environments
    in the release definition. Variables that are defined at the environment level
    are only available to tasks within this environment; these variables cannot be
    accessed by other environments. Using the view type option in the configuration
    view, you can view both release as well as environment variables. You can click
    the padlock icon next to the property to hide the value of the property. The values
    of such properties are stored securely and cannot be viewed by users once they
    are saved. During a deployment, the release management service decrypts the values
    that are referenced by the tasks and passes them to the agent over a secure HTTPS
    channel. You can reference the variables in the task using the `$(variablename)`
    format. Apart from using custom variables, you can also use the built-in variables;
    a full list of built-in variables can be found at [http://bit.ly/1ON0Usg](http://bit.ly/1ON0Usg).
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an Azure website using release management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to deploy an Azure website from a release definition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: The **FabrikamTFVC.Website** build definition produces a web package
    as an artifact. The FabrikamTFVC Team wants to deploy the web package to an Azure
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00773.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Ensure you have an active Azure Cloud subscription. Download your Azure publish
    settings file from [https://manage.windowsazure.com/publishsettings](https://manage.windowsazure.com/publishsettings).
    Set up an Azure website. In this recipe, we'll be using `https://fabrikamTFVC-dev.azurewebsites.net/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the FabrikamTFVC Team Administration Console. Click on the **Services**
    tab and create a new endpoint. From the services endpoint context menu, select
    **Azure**. Change the connection type to **Certificate Based**. Copy the details
    from the Azure publish settings file and populate the Azure endpoint connection
    details. Click on **Save** to create the Azure endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00774.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to the **Build** hub in the FabrikamTFVC Team Project. Edit the FabrikamTFVC
    build definition, if you don''t already have this build definition refer to the
    *Creating a continuous integration build definition in TFBuild* recipe in [Chapter
    4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building Your Application"), *Building
    Your Application* to learn how to create a build definition. In the Visual Studio
    Build Task, configure the following `MSBuild Arguments`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the **Copy and Publish Build Artifacts** task to publish the contents
    of the web deployment package. This can be done by setting the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00775.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the changes and queue a build. Once the build successfully completes,
    you can see the web deployment package from the artifact explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00776.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have a working Azure subscription and an Azure website ([https://fabrikamTFVC-dev.azurewebsites.net](https://fabrikamTFVC-dev.azurewebsites.net)).
    We have an Azure service endpoint as well as a build definition generating a web
    deployment package as an artifact.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub for the FabrikamTFVC Team. Click on the **+**
    icon to create a new release definition. Select the **Azure Website Deployment**
    Template:![How to do it…](img/image00777.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Azure Website Deployment** templates adds a default environment with the
    **Azure Web App Deployment*** and **Visual Studio Test** tasks:![How to do it…](img/image00778.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Azure Web App Deployment*** task and configure the values as illustrated
    in the following screenshot. Select the Azure subscription configured as a service
    endpoint. Select the location where the web app `FabrikamTFVC-dev` was created.
    Specify the path to the web deployment package within the artifact repository:![How
    to do it…](img/image00779.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to commit the changes to this release definition. Create a
    new release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The release agent uses the Azure service endpoint to securely publish the web
    deployment package to the `FabrikamTFVC-dev` website. The log tab in the release
    shows the full summary of processing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00780.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The service endpoint has two permission groups, namely, **Endpoint Administrators**
    and **Endpoint Readers**. Individuals who need to manage this build definition
    should also be part of the Endpoint Administrators Group, others can be part of
    the Endpoint Readers Group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00781.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Deploying the IIS Web Application using release management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to deploy the IIS Web Application using release
    management.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team has a collection of servers in the `Fabrikam.lab`
    domain that they need to perform IIS Web Application Deployment on.'
  prefs: []
  type: TYPE_NORMAL
- en: Where does it need to be installed?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As illustrated in the following figure, the servers are in the same domain
    `Fabrikam.lab`. The IIS Web Application Deployment needs to take place on two
    servers, namely, `QA-Web1.Fabrikam.lab` and `QA-Web2.Fabrikam.lab`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Where does it need to be installed?](img/image00782.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The agent uses WinRM protocol to connect to the machines in the Machine Groups.
    WinRM needs to be enabled on a machine as a prerequisite before it can be added
    into the Machine Group. Follow the *Creating and setting up a Machine Group* recipe
    in [Chapter 5](part0062.xhtml#aid-1R42S1 "Chapter 5. Testing Your Application"),
    *Testing Your Application*, to set up the Fabrikam-QA Machine Group. The machines
    in the Machine Group the website will be deployed to need to meet the following
    prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: Web Deploy 3.5 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IIS Web should already be installed and configured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET 2 and .NET 4 should be registered with IIS using `aspnet_iisreg -i`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What needs to be installed?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To deploy a web application on IIS, the Web Deployment Package needs to be available
    locally on the destination machines. You can either manually copy the Web Deployment
    Package on the destination machine or make it available on a UNC that is reachable
    from the destination machines. In this recipe, we will configure the build definition
    to generate the Web Deployment Package and copy it across to all destination machines.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Build** hub in the FabrikamTFVC Team Project. Edit the `FabrikamTFVC.Website`
    build definition. If you don't already have this build definition, refer to the
    *Creating a continuous integration build definition in TFBuild* recipe in [Chapter
    4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building Your Application"), *Building
    Your Application*, to learn how to create a build definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'As illustrated in the following screenshot in the Visual Studio Build task,
    configure the following MSBuild arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now use the **Copy And Publish Build Artifacts** task to upload the
    contents of `$(build.stagingDirectory)` as an artifact. The copy root is being
    set to `$(build.stagingDirectory)` since the Visual Studio Build task has MSBuild
    arguments specifying the Web Deployment Package to be copied to the `$(build.stagingDirectory)`.
    The `**\*` search pattern is used to copy all the contents of `$(build.stagingdirectory)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What needs to be installed?](img/image00783.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now use the Windows Machine File Copy task to copy the contents of
    the `$(build.stagingDirectory)` to the target machines too. The machine names
    specified in the machine file need to have been configured for WinRM. Specify
    either a local folder on the destination server or a UNC that''s accessible from
    the destination server. Check the option **Clean Target** to have the older binaries
    in the destination folder location overwritten with new binaries. Also, check
    the **Copy Files in Parallel** option to speed up the copy operations across multiple
    machines. From the **Variables** tab, add two variables, namely, `machine.username`
    and `machine.password` for holding the login details for the machines you intend
    to have the files copied on to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What needs to be installed?](img/image00784.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Queue a build; once the build is successfully completed, navigate to the Artifacts
    Explorer. You should see the website binaries as illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What needs to be installed?](img/image00785.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The same files should now be available locally on the destination machines in
    the `C:\Temp\FabrikamTFVC.Website` folder.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll create a new release definition specifically for deploying
    IIS Web Application and App Pool. To create a release definition, you need to
    be a member of the Release Administrators Group. These permissions are also available
    to the Project Administrators Group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in the FabrikamTFVC Team Project. Add a new
    release definition. Select an empty Deployment Template and name the definition
    FabrikamTFVC Web Server release definition. Rename the default environment to
    QA and add the IIS Web Application Deployment task to this environment:![How to
    do it…](img/image00786.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **QA** environment, click on the ellipsis and select **Configure variables...**
    from the context menu:![How to do it…](img/image00787.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two variables, namely, `machine.username` and `machine.password` for this
    environment holding the login details for the machines where IIS needs to be deployed:![How
    to do it…](img/image00788.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now to configure the IIS Web Application Deployment task, first specify the
    machines and the login details. We'll use the `machine.username` and `machine.password`
    variables defined in the previous step. Since we are in a closed domain group
    where WinRM is configured to use HTTP, select **HTTP**:![How to do it…](img/image00789.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, specify the location of the web deployment package. Since the web deployment
    package was copied using the machine file, copy the task using the build definition.
    You can directly specify the local destination machine location here. Optionally,
    you can specify the web deploy parameter file and override parameters to replace
    the website properties such as application name, connection string, database details,
    and so on, in the web configuration. Alternatively, you can also use the PowerShell
    script after the deployment to carry out the value replacements:![How to do it…](img/image00790.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create or Update Application Pool** option and specify the application
    pool name, .NET version, pipeline mode, and identity for the application pool:![How
    to do it…](img/image00791.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** and trigger a release for this release definition. Wait for
    the release to complete. The summary view will show you the result of the release
    execution:![How to do it…](img/image00792.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s check the results of the deployment on the destination machines.
    As illustrated in the following screenshot, **FabrikamAppPool** has been created
    as per the specifications in the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00793.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The web deployment package has also been installed under the default website
    with the website binaries copied in the `C:\inetpub` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00794.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The task uses the standard web deployment package functionality to deploy to
    IIS. Using WinRM allows the release management agent to orchestrate this workflow
    remotely. You can read more about the parameters and functionality of web deployment
    at [http://bit.ly/1XT0yTq](http://bit.ly/1XT0yTq).
  prefs: []
  type: TYPE_NORMAL
- en: There is more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The IIS Web Application Deployment task also has a **Create or Update Website**
    section. This gives you far more granular control on specifying how the website
    is structured. You can use this to change the physical path of the website, configure
    the bindings to be used, as well as the protocol and ports along with host names:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There is more](img/image00795.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tracking a release in release management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is common to want to see the list of releases by status, check the status
    of a current release, track the approvals for a release, investigate the failures
    in logs, and view the details of the agent processing the release. In this recipe,
    you'll learn about all the release tracking features available in release management.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub for the FabrikamTFVC Team. The landing page
    shows you a list of all release definitions. This is a quick way to see the status
    of releases. The view surfaces information about the status as well as the release
    definition, environments, build, branch, start time, and created by. Releases
    triggered using the continuous deployment configuration have an icon in the first
    column:![How to do it…](img/image00796.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This view can be filtered by the status of the releases. From the top-right
    corner, change the **State** dropdown to **Rejected**; this will narrow the list
    down to rejected releases:![How to do it…](img/image00797.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch over to the **Overview** tab. This will help you visualize the status
    of all the release definitions. As illustrated in the following screenshot, the
    last release for the **Fabrikam Website Release Pipeline** definition failed while
    FabrikamTFVC Web Release was successful in the **Development** environment, it
    failed in the **QA** environment and no deployments have been attempted in **Staging**
    and **Production** using this pipeline. You can click on the ellipsis next to
    the release definition name to queue a new release, edit the definition, or manage
    the security for the release definition:![How to do it…](img/image00798.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fabrikam Website Release Pipeline showing the status of the Release-21 in the
    QA environment; FabrikamTFVC Web Release Pipeline showing the status of the Rel-FabrikamTFVC-3
    across the environments
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Locate **Release-11** and double-click on it to view the release. This opens
    the release summary view by default. The summary view shows you the details of
    the release, environments, issues, work Items, and test results. You can also
    restart or abandon the release from this view:![How to do it…](img/image00799.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To dig into the issue further, either click on the error message or navigate
    to the log view. The log view lets you browse the logs by environment and task
    making it easier to investigate reasons for failure:![How to do it…](img/image00800.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can hide the logs and narrow down the view to approvals or tasks only by
    changing the options from the top right:![How to do it…](img/image00801.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Commits** and **Work Items** views in the release show you information
    about the code changes and Work Items associated to the artifacts processed as
    part of this release:![How to do it…](img/image00802.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate to the **Team Project Collection Administration** page in Team
    Portal. Click on **Agents** queues to see a list of builds and agents grouped
    by queue. The following screenshot illustrates all the builds and releases processed
    by the Fabrikam CI01 agent queue. You can directly browse to the failing builds
    and releases by clicking on the definition or name of the hyperlink:![How to do
    it…](img/image00803.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Release management gives you the ability to track the releases and narrow down
    the reasons for failure by drilling in through the various levels of hierarchy.
    Though there is no charting capability to pin the release status to the Dashboard
    yet, this area is set to review a good amount of investment over the next few
    releases; hopefully, enhancements to visualize the release pipelines will be taken
    care of as part of these investments.
  prefs: []
  type: TYPE_NORMAL
