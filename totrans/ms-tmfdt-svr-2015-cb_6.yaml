- en: Chapter 6. Releasing Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 发布您的应用程序
- en: '|   | *"Continuous Deployment can be thought of as an extension to Continuous
    Integration, aiming at minimizing lead time"* |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *“持续部署可以被视为持续集成的延伸，旨在最小化交付时间”* |   |'
- en: '|   | --*Agile Allianz* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*敏捷联盟* |'
- en: 'In this chapter, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating a release definition in Team Web Portal
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在团队Web门户中创建发布定义
- en: Mapping artifacts to a release definition
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将工件映射到发布定义
- en: Configuring a release definition for the continuous deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置发布定义以实现持续部署
- en: Adding and configuring environments in a release definition
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发布定义中添加和配置环境
- en: Configuring security for release definitions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置发布定义的安全性
- en: Configuring global and local variables for a release
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置发布的全局和本地变量
- en: Deploying an Azure website using release management
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用发布管理部署Azure网站
- en: Deploying the IIS Web Application using release management
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用发布管理部署IIS Web应用程序
- en: Tracking a release in release management
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发布管理中跟踪发布
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'So far in the book, we have talked about planning, developing, testing, and
    building software. Software teams spend weeks and months developing and testing
    software; however, software can only reap its worth when it reaches the hands
    of the people it''s meant for. Release management is an enabler for that:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，在本书中我们讨论了规划、开发、测试和构建软件。软件团队需要数周甚至数月来开发和测试软件；然而，只有当软件到达预定用户手中时，它的价值才能得以体现。发布管理为此提供了支持：
- en: '|   | *"Release management is the process of managing, planning, scheduling,
    and controlling a software build through different stages and environments; including
    testing and deploying software releases."* |   |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|   | *“发布管理是通过不同的阶段和环境管理、规划、调度和控制软件构建的过程，包括测试和部署软件发布。”* |   |'
- en: '|   | --*Wikipedia* |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|   | --*维基百科* |'
- en: On June 3rd, 2013, Microsoft acquired the InRelease product from InCycle software.
    The InRelease product was rebranded as Microsoft Release Management and integrated
    into Team Foundation Server 2013\. Microsoft Release Manager gave Microsoft a
    position in the growing release management market. While Release Manager shipped
    along with Team Foundation Server, it required separate installation and setup.
    Though various improvements were made to improve the integration between the two
    products, they still felt disjointed at several places. The WPF-based desktop
    client was clunky and limiting. Release Manager did not support non-.NET applications
    and could not be used on non-Windows platforms. It was clear that Release Manager
    was only a stop-gap solution and would need to be replaced by a proper solution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年6月3日，微软收购了InCycle软件公司的InRelease产品。InRelease产品被重新命名为Microsoft Release Management，并集成到Team
    Foundation Server 2013中。Microsoft Release Manager让微软在日益增长的发布管理市场中占有一席之地。尽管Release
    Manager与Team Foundation Server一起发布，但它需要单独安装和配置。尽管进行了多次改进以增强两者之间的集成，但在某些地方它们依然显得割裂。基于WPF的桌面客户端笨重且功能受限。Release
    Manager不支持非.NET应用程序，也无法在非Windows平台上使用。显然，Release Manager仅仅是一个过渡性的解决方案，最终需要被一个更合适的方案取代。
- en: Microsoft has recently released the web-based Release Management solution in
    Visual Studio Team Services. While the new solution has not been released in Team
    Foundation Server 2015 Update 1, it is expected to debut in TFS 2015 in either
    Update 2 or Update 3\. No further investment is expected to be made in the old
    Release Management Solution, and it will inevitably be replaced by the new web-based
    Release Management Solution. With this in mind, this chapter is entirely focused
    on the new web-based Release Management Solution. To try out the recipes in this
    chapter, you'll need to create a Visual Studio Team Services account; follow the
    instructions at [http://bit.ly/1N50I7j](http://bit.ly/1N50I7j).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 微软最近在Visual Studio Team Services中发布了基于Web的Release Management解决方案。尽管该新解决方案尚未在Team
    Foundation Server 2015 Update 1中发布，但预计将在TFS 2015的Update 2或Update 3中首次亮相。旧版Release
    Management解决方案将不会再进行进一步投资，并将不可避免地被新的基于Web的Release Management解决方案所取代。鉴于此，本章将完全聚焦于新的基于Web的Release
    Management解决方案。要尝试本章中的操作，您需要创建一个Visual Studio Team Services账户；请按照[http://bit.ly/1N50I7j](http://bit.ly/1N50I7j)上的说明进行操作。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Recipes in this chapter are based on the new web-based Release Management Solution.
    The new web-based Release Management Solution is expected to be available in Team
    Foundation Server in Update 2 or Update 3\. To try out the recipes in this chapter,
    create a Visual Studio Team Services account ([http://bit.ly/1N50I7j](http://bit.ly/1N50I7j)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的配方基于新的基于Web的发布管理解决方案。预计新的基于Web的发布管理解决方案将在Team Foundation Server的更新2或更新3中可用。要尝试本章中的配方，请创建一个Visual
    Studio Team Services账户（[http://bit.ly/1N50I7j](http://bit.ly/1N50I7j)）。
- en: The new web-based Release Management Solution is very well integrated into the
    product. No separate installation or configuration is required to start using
    the new Release Management Solution. The security infrastructure of the Release
    Manager is different from the previous version, in that it did not manage its
    own groups and permissions. New permissions are introduced in VSTS for release
    management, such as **Create release definitions**, **Create releases**, and **Manage
    approvers**. Default values for these permissions are set for specific groups
    at the Team Project level. These permissions can then be overridden for the groups
    or individual users, for a specific release definition or for a specific environment
    within a release definition.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 新的基于Web的发布管理解决方案与产品非常紧密集成。无需单独安装或配置即可开始使用新的发布管理解决方案。发布管理器的安全基础设施与以前的版本不同，因为它不再管理自己的组和权限。在VSTS中为发布管理引入了新的权限，例如**创建发布定义**、**创建发布**和**管理审批人**。这些权限的默认值为Team项目级别的特定组设置。然后，这些权限可以被覆盖，适用于特定发布定义或发布定义中的特定环境。
- en: Both Team build and release management share the same agent—pool and queue infrastructure.
    Unified agent infrastructure reduces administration and setup overhead. The tasks
    used to orchestrate the actions are also shared between build and release. This
    significantly reduces the learning curve for release management. The new solution
    is web based, open, extensible, and fully cross-platform. The underlying framework
    between Team build and release management is the same, so you get the same real-time
    console output in release management as you get with Team build. The release definitions
    support change revision and different functionality similar to that in the build
    definitions. Release management supports draft releases similar to the draft build
    functionality in Team build. With so much in common between build and release
    management, the only difference is the build also has access to deployment tasks,
    you may ask how are the build and release management different?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Team构建和发布管理共享相同的代理池和队列基础设施。统一的代理基础设施减少了管理和设置的开销。用于协调操作的任务也在构建和发布之间共享。这大大减少了发布管理的学习曲线。新的解决方案是基于Web的、开放的、可扩展的，并且完全支持跨平台。Team构建和发布管理之间的底层框架是相同的，因此你在发布管理中得到的实时控制台输出与Team构建中的相同。发布定义支持更改修订和类似于构建定义的不同功能。发布管理支持草稿发布，类似于Team构建中的草稿构建功能。构建和发布管理之间有如此多的相似之处，唯一的区别是构建还可以访问部署任务，你可能会问，构建和发布管理有何不同？
- en: 'The line between build and release management is blurred because both share
    so much in common. The key difference is that deployment is just one of the activities
    performed in the release management. As illustrated in the following image, the
    new release management solution allows creating release pipelines. A release pipeline
    can consist of one or more environments. Each environment can have one or more
    physical or virtual deployment targets. Environments provide pre-release and post-release
    approval workflow as well as tasks for testing and deployment:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和发布管理之间的界限已经变得模糊，因为两者有很多相似之处。关键的区别在于部署只是发布管理中执行的活动之一。如下面的图所示，新的发布管理解决方案允许创建发布流水线。发布流水线可以包含一个或多个环境。每个环境可以有一个或多个物理或虚拟的部署目标。环境提供了发布前和发布后的审批工作流，以及用于测试和部署的任务：
- en: '![Introduction](img/image00722.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/image00722.jpeg)'
- en: The software deployed through Release Manager can be injected from Team build,
    Jenkins, Team City, FTP, and so on. With artifacts shared across all environments
    in the release pipeline, it truly lets you build once and deploy everywhere.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过发布管理器部署的软件可以从Team构建、Jenkins、Team City、FTP等注入。通过在发布流水线中的所有环境共享工件，它真正让你做到“构建一次，随处部署”。
- en: To lower the entry barrier, Release Manager provides out-of-the-box Deployment
    Templates. The Deployment Template adds the set of tasks required for the type
    of deployment in an environment. You still need to configure the tasks, but pre-adding
    the tasks gives you a head start in your release configuration. The framework
    also allows you to clone or save your configured environments as templates. Again,
    the intention is to speed up release configuration and maximize reuse across release
    definitions. Release management is expected to soon supplement the REST API gallery
    with Release Management REST APIs. This will allow you to integrate release management
    into other parts of the release workflow used in your organization or simply extend
    the release management capabilities where you find them lacking.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了降低入门门槛，发布管理器提供了开箱即用的部署模板。部署模板添加了在环境中进行某种类型部署所需的任务集。你仍然需要配置这些任务，但预先添加任务可以让你在发布配置中更快起步。该框架还允许你克隆或将已配置的环境保存为模板。再次强调，目的是加速发布配置，并最大限度地在不同发布定义之间重用。发布管理预计将很快通过发布管理
    REST API 补充 REST API 库。这将允许你将发布管理集成到组织中使用的其他发布工作流部分，或者在你发现需要的地方扩展发布管理功能。
- en: You will kick off the chapter by learning the different capabilities in the
    new web-based release management solution; in the later recipes, we'll cover deployment
    scenarios for Azure and on-premise web applications. Last but not least, we'll
    understand the release tracking and reporting capabilities available in release
    management.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开始时，你将学习新的基于网页的发布管理解决方案中的不同功能；在后续的章节中，我们将介绍适用于 Azure 和本地 Web 应用程序的部署场景。最后但同样重要的是，我们将了解发布管理中可用的发布跟踪和报告功能。
- en: Creating a release definition in Team Web Portal
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Team Web Portal 中创建发布定义
- en: In this recipe, you'll learn how to create a new release definition using an
    empty Deployment Template. You'll also learn about the different functions available
    in a release definition.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，你将学习如何使用空白的部署模板创建一个新的发布定义。你还将了解发布定义中的不同功能。
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To create a new release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的发布定义，你需要是发布管理员组的成员。这些权限同样适用于项目管理员组。
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the **Release** hub in FabrikamTFVC Team Project:![How to do it...](img/image00723.jpeg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 FabrikamTFVC 团队项目中的**发布**中心：![如何操作...](img/image00723.jpeg)
- en: Click on the **+** icon to create a new release definition. There are preconfigured
    Deployment Templates to choose from. In this recipe, we'll start with the **Empty**
    template. Unlike the other templates, the **Empty** template creates a blank release
    definition without any pre-added tasks:![How to do it...](img/image00724.jpeg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**图标以创建一个新的发布定义。这里有预配置的部署模板可以选择。在本食谱中，我们将从**空白**模板开始。与其他模板不同，**空白**模板会创建一个没有任何预先添加任务的空白发布定义：![如何操作...](img/image00724.jpeg)
- en: Name the release definition `FabrikamTFVC Web Release`:![How to do it...](img/image00725.jpeg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将发布定义命名为`FabrikamTFVC Web Release`：![如何操作...](img/image00725.jpeg)
- en: 'Navigate to the **General** tab and change the release number format from `Release-$(rev:r)`
    to `Rel-$(System.TeamProject)-$(rev:r)`. The releases generated from this definition
    will have a release name in the format `Rel-FabrikamTFVC-1`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**常规**标签，并将发布编号格式从`Release-$(rev:r)`更改为`Rel-$(System.TeamProject)-$(rev:r)`。从此定义生成的发布将具有格式为`Rel-FabrikamTFVC-1`的发布名称：
- en: Click on the **Save** button to save the release definition. In this recipe,
    we've created a blank release definition. We'll walk through the different functions
    of a release definition in the next *How it works…* section.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮以保存发布定义。在本食谱中，我们已经创建了一个空白的发布定义。接下来，我们将在*工作原理...*部分逐步介绍发布定义的不同功能。
- en: How it works…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In this recipe, we started off from an empty release template. The Deployment
    Template window provides an option to start from a pre-configured release template.
    The pre-configured Deployment Template adds an environment and all necessary release
    tasks to the default environment, only leaving the task configuration to you.
    As illustrated in the following screenshot, the **Azure Website Deployment** template
    adds a default environment and two tasks, namely, **Azure Web App Deployment**
    and **Visual Studio Test**. In the long term, you''ll start seeing more pre-configured
    Deployment Templates being made available out of the box:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们从一个空的发布模板开始。部署模板窗口提供了一个选项，可以从一个预配置的发布模板开始。预配置的部署模板会为默认环境添加一个环境以及所有必要的发布任务，只需您配置任务即可。如以下截图所示，**Azure
    网站部署**模板添加了一个默认环境和两个任务，分别是**Azure Web 应用部署**和**Visual Studio 测试**。从长远来看，您将开始看到更多预配置的部署模板可以直接使用：
- en: '![How it works…](img/image00726.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00726.jpeg)'
- en: 'Let''s now understand the functions in the **Environments** tab of the FabrikamTFVC
    Web release definition:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们了解 FabrikamTFVC Web 发布定义中的**环境**选项卡的功能：
- en: '![How it works…](img/image00727.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00727.jpeg)'
- en: '**Add environments**: This is the collection of server(s) where your application
    needs to be deployed. Clicking on the **Add environments** icon also launches
    the Deployment Template window. The deployment window gives you the ability to
    add an environment and related tasks for deploying the application in that environment.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加环境**：这是您的应用需要部署到的服务器集合。点击**添加环境**图标也会打开部署模板窗口。该窗口使您能够添加环境并为该环境部署应用时相关的任务。'
- en: '**Default Environment**: This is a logical container holding the tasks required
    to release an application in the environment. As illustrated in the following
    screenshot, an environment supports a level of configuration. We''ll be covering
    the functions supported by an environment in detail in the *Adding and configuring
    environments in a release definition* recipe:![How it works…](img/image00728.jpeg)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认环境**：这是一个逻辑容器，包含了在该环境中发布应用所需的任务。如以下截图所示，一个环境支持一定的配置级别。我们将在*在发布定义中添加和配置环境*食谱中详细讲解环境支持的功能：![它是如何工作的…](img/image00728.jpeg)'
- en: '**Add tasks**: This is simply a step in the release process to an environment.
    A set of pre-created tasks are already available out of the box. The gallery also
    provides scripting tasks to enable you to perform operations that may not necessarily
    be available in the pre-created tasks. The framework is fully extensibility; refer
    to the *Creating a new build task using the TFBuild Extensibility framework* recipe
    in [Chapter 4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building Your Application"),
    *Building Your Application*, to learn how you can add your own tasks. Both build
    and release hub shared a common task gallery. This allows you to use the tasks
    from the build process in the release process too. You''ll learn more about tasks
    as we start configuring them in the later recipes in this chapter.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加任务**：这是发布过程中前往环境的一个步骤。一组预创建的任务已经默认可用。画廊还提供了脚本任务，允许您执行一些预创建任务中可能没有的操作。该框架具有完全的可扩展性；请参考[第
    4 章](part0050.xhtml#aid-1FLS42 "第 4 章 构建您的应用程序")中的*使用 TFBuild 可扩展性框架创建新的构建任务*，了解如何添加您自己的任务。构建和发布中心共享一个公共任务画廊。这使得您可以在发布过程中使用构建过程中使用的任务。随着我们在本章后续的食谱中开始配置任务，您将会学到更多关于任务的内容。'
- en: 'Navigate to the **General** tab. This tab allows you to specify the release
    name format. The names of releases for a release definition are, by default, sequentially
    numbered. The first release is named `Release-1`, the next release is `Release-2`,
    and so on. You can change this naming scheme by editing the release name format
    mask. The field supports the use of predefined (listed in the following table).
    You can also use custom variables; we''ll be covering more on variables in the
    *Configuring global and local variables for a release* recipe:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 转到**常规**选项卡。此选项卡允许您指定发布名称格式。发布定义的发布名称默认为按顺序编号。第一个发布名为`Release-1`，下一个发布为`Release-2`，以此类推。您可以通过编辑发布名称格式模板来更改此命名方案。该字段支持使用预定义的（如以下表格所列）。您还可以使用自定义变量；我们将在*为发布配置全局和本地变量*食谱中详细介绍变量：
- en: '| Variable | Description |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 变量 | 描述 |'
- en: '| --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Rev:rr` | An auto-incremented number with at least the specified number
    of digits. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `Rev:rr` | 一个自动递增的数字，至少包含指定数量的数字。 |'
- en: '| `Date`/`Date:MMddyy` | The current date, with the default format MMddyy.
    Any combinations of M/MM/MMM/MMMM, d/dd/ddd/dddd, y/yy/yyyy/yyyy, h/hh/H/HH, m/mm,
    s/ss are supported. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `Date`/`Date:MMddyy` | 当前日期，默认格式为MMddyy。支持的日期组合包括M/MM/MMM/MMMM，d/dd/ddd/dddd，y/yy/yyyy/yyyy，h/hh/H/HH，m/mm，s/ss。
    |'
- en: '| `System.TeamProject` | The name of the Team Project to which this build belongs.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `System.TeamProject` | 该构建所属的团队项目名称。 |'
- en: '| `Release.ReleaseId` | The ID of the release is unique across all releases
    in the project. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `Release.ReleaseId` | 发布的ID，在整个项目中是唯一的。 |'
- en: '| `Release.DefinitionName` | The name of the release definition to which the
    current release belongs. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `Release.DefinitionName` | 当前发布所属的发布定义名称。 |'
- en: '| `Build.BuildNumber` | The number of the build contained in the release. If
    a release has multiple builds, this is the number of the build that triggered
    the release in the case of continuous deployment or the number of the first build
    in the case of a manual trigger. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `Build.BuildNumber` | 发布中包含的构建编号。如果一个发布包含多个构建，则在持续部署的情况下，这是触发该发布的构建编号；在手动触发的情况下，这是第一个构建的编号。
    |'
- en: '| `Build.DefinitionName` | The definition name of the build contained in the
    release. If a release has multiple builds, this is the definition name of the
    build that triggered the release in the case of continuous deployment or the definition
    name of the first build in the case of a manual trigger. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `Build.DefinitionName` | 发布中包含的构建的定义名称。如果一个发布包含多个构建，则在持续部署的情况下，这是触发该发布的构建的定义名称；在手动触发的情况下，这是第一个构建的定义名称。
    |'
- en: '| `Artifact.ArtifactType` | The type of the artifact source linked with the
    release. For example, this can be Team build or Jenkins. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `Artifact.ArtifactType` | 与发布关联的工件源类型。例如，这可以是Team build或Jenkins。 |'
- en: '| `Build.SourceBranch` | The branch for which the build in the release was
    queued. For Git, this is the name of the branch in the form `refs/heads/master`.
    For Team Foundation Version Control, this is the root server path for the workspace
    in the `form$/teamproject/branch`. This variable is not set in the case of Jenkins
    artifact sources. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `Build.SourceBranch` | 发布中构建排队时的分支。对于Git，这是以`refs/heads/master`形式表示的分支名称。对于Team
    Foundation Version Control，这是工作区的根服务器路径，形式为`$/teamproject/branch`。在Jenkins工件源的情况下，该变量未设置。
    |'
- en: '| `Custom variable` | The value of a global configuration property defined
    in the release definition. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `Custom variable` | 在发布定义中定义的全局配置属性的值。 |'
- en: The **History** tab shows you the list of changes made to a release definition
    since its creation. You also have the ability to differentiate the changes between
    the two revisions of changes to a release definition. The **Artifacts** tab allows
    you to map the different artifacts that need to be deployed as part of the release
    definition; you'll be learning about the functions of the **Artifacts** tab in
    the *Mapping artifacts to a release definition* recipe. The **Configuring** tab
    allows you to configure variables for your release definitions; you'll learn about
    the functions of the **Configuration** tab in the *Adding and configuring environments
    in a release definition* recipe. The **Triggers** tab enables you to configure
    the release as a continuous deployment by setting the trigger as a continuous
    integration. This configuration triggers the release process whenever there is
    a change to the underlying artifacts mapped to the release definition. You'll
    learn more about this in the *Configuring a release definition for a continuous
    deployment* recipe.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**历史**选项卡显示了自发布定义创建以来对其所做的更改列表。你还可以区分两次发布定义修订之间的更改。**工件**选项卡允许你映射作为发布定义一部分需要部署的不同工件；你将在*将工件映射到发布定义*食谱中学习**工件**选项卡的功能。**配置**选项卡允许你为发布定义配置变量；你将在*在发布定义中添加和配置环境*食谱中学习**配置**选项卡的功能。**触发器**选项卡使你能够将发布配置为持续部署，通过将触发器设置为持续集成。此配置将在映射到发布定义的底层工件发生变化时触发发布过程。你将在*为持续部署配置发布定义*食谱中了解更多信息。
    |'
- en: Mapping artifacts to a release definition
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射工件到发布定义
- en: The release definition allows you to deploy an application into multiple environments.
    The files and installers required to deploy an application are referred to as
    artifacts. At present, release management understands artifacts from Team build,
    Jenkins, and on-premises TFS. A release definition can have one or more artifacts.
    This flexibility is extremely useful for Teams building software in modules that
    are pulled together to form a release. In this recipe, you'll learn how to map
    the output from a Team build definition into a release definition.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 发布定义允许你将应用程序部署到多个环境中。部署应用程序所需的文件和安装程序称为工件。目前，发布管理支持来自Team Build、Jenkins和本地TFS的工件。一个发布定义可以包含一个或多个工件。这种灵活性对于构建模块化软件并将其组合形成发布的团队来说非常有用。在本配方中，你将学习如何将Team
    Build定义的输出映射到发布定义中。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To edit a release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑发布定义，你需要是发布管理员组的成员。这些权限也适用于项目管理员组。
- en: 'Scenario: FabrikamTFVC Team has two build definitions, namely, `FabrikamTFVC.Website`
    and `FabrikamTFVC.Services`. Website and services are two components of the same
    application; these components need to be rolled out together in the release. To
    enable this scenario, the FabrikamTFVC Team needs to map the installers from `FabrikamTFVC.Website`
    and `FabrikamTFVC.Services` into the release definition FabrikamTFVC Web:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamTFVC团队有两个构建定义，分别是`FabrikamTFVC.Website`和`FabrikamTFVC.Services`。网站和服务是同一应用程序的两个组件，这些组件需要在发布时一起推出。为了支持这一场景，FabrikamTFVC团队需要将`FabrikamTFVC.Website`和`FabrikamTFVC.Services`的安装程序映射到发布定义FabrikamTFVC
    Web中：
- en: '![Getting ready](img/image00729.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/image00729.jpeg)'
- en: You can follow the steps in the *Creating a continuous integration build definition
    in TFBuild* recipe of [Chapter 4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building
    Your Application"), *Building Your Application*. Follow the steps in the *Creating
    a release definition in Team Web Portal* recipe, to create the FabrikamTFVC Web
    release definition.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照[第4章](part0050.xhtml#aid-1FLS42 "第4章. 构建你的应用程序")中*创建连续集成构建定义在TFBuild中的*配方步骤进行操作，*构建你的应用程序*。按照*在Team
    Web Portal中创建发布定义*配方中的步骤，创建FabrikamTFVC Web发布定义。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the **Release** hub in FabrikamTFVC Team Project and edit the release
    definition FabrikamTFVC Web. As illustrated in the following screenshot, the release
    definition prompts you to link a build definition to this release:![How to do
    it...](img/image00730.jpeg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到FabrikamTFVC团队项目中的**发布**中心，编辑FabrikamTFVC Web发布定义。如下面的截图所示，发布定义提示你将构建定义链接到此发布：![如何操作...](img/image00730.jpeg)
- en: Click on the link to build definition hyperlink, set the artifact type as **Build**,
    and choose the **FabrikamTFVC.Services** build definition. The text at the bottom
    tells you the artifacts being published by this build definition. Click on **OK**
    to finish mapping the `FabrikamTFVC.Services` build definition to FabrikamTFVC
    Web release definition:![How to do it...](img/image00731.jpeg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击构建定义的超链接，设置工件类型为**构建**，然后选择**FabrikamTFVC.Services**构建定义。底部的文本告诉你此构建定义正在发布的工件。点击**确定**，完成将`FabrikamTFVC.Services`构建定义映射到FabrikamTFVC
    Web发布定义的操作：![如何操作...](img/image00731.jpeg)
- en: Now, navigate to the **Artifacts** tab; you'll see that the **FabrikamTFVC.Services**
    build definition shows up as an artifact source for this release definition:![How
    to do it...](img/image00732.jpeg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到**工件**选项卡，你将看到**FabrikamTFVC.Services**构建定义作为此发布定义的工件源显示出来：![如何操作...](img/image00732.jpeg)
- en: Click on **Link an artifact source** to map the build definition of **FabrikamTFVC.Website**
    to this release definition. Once done, you'll see both **FabrikamTFVC.Services**
    and **FabrikamTFVC.Website** show up as an artifact source for this release definition.
    Click on **Save** to commit the changes to the build definition:![How to do it...](img/image00733.jpeg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**链接工件源**，将**FabrikamTFVC.Website**的构建定义映射到此发布定义。一旦完成，你会看到**FabrikamTFVC.Services**和**FabrikamTFVC.Website**都作为该发布定义的工件源显示出来。点击**保存**以提交更改到构建定义：![如何操作...](img/image00733.jpeg)
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The artifacts in a release definition allow you to truly build once and deploy
    everywhere. The artifacts are mapped at the release definition level and are available
    to all environments in a release definition.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 发布定义中的工件使你能够真正实现“一次构建，到处部署”。工件在发布定义级别进行映射，并可供发布定义中的所有环境使用。
- en: 'When queuing a release, you have an option to select the version of the build
    to be used in the release. As illustrated in the following screenshot, you can
    choose the version of the builds used in this release. These artifacts are available
    across all selected environments. The version of the artifact cannot be changed
    once a release has been triggered from a release definition:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当排队发布时，你可以选择用于发布的构建版本。如以下截图所示，你可以选择用于此发布的构建版本。这些工件在所有选定的环境中都可用。一旦发布从发布定义中被触发，工件的版本将无法更改：
- en: '![How it works...](img/image00734.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image00734.jpeg)'
- en: 'As illustrated in the preceding screenshot, you can directly trigger a release
    from a build. Choosing release from the build opens up the queue release option
    allowing you to choose the version of other artifacts and the environments that
    the build needs to be deployed to. You can enjoy this truly integrated experience
    when you choose Team build as the artifact for the release definition:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，你可以直接从构建触发发布。从构建中选择发布后，打开队列发布选项，允许你选择其他工件的版本以及构建需要部署的环境。当你选择 Team build
    作为发布定义的工件时，你将享受到这种真正集成的体验：
- en: '![How it works...](img/image00735.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image00735.jpeg)'
- en: 'When a release is triggered, the selected versions of the artifacts are downloaded
    into the agent working directory. Tasks running within that environment can then
    deploy the artifacts. The artifact download behavior can be customized; you can
    skip the download of the artifact to the agent for a particular environment. This
    can be done by setting the **Skip artifacts download** flag in the **General**
    settings of an environment:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当触发发布时，所选版本的工件会被下载到代理的工作目录中。然后，在该环境中运行的任务可以部署这些工件。工件的下载行为可以自定义；你可以跳过将工件下载到某个特定环境的代理中。这可以通过在环境的**常规**设置中设置**跳过工件下载**标志来完成：
- en: '![How it works...](img/image00736.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image00736.jpeg)'
- en: There is more...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Release management currently supports Team build, Jenkins, on-premises TFS,
    and other sources as valid artifact sources. The source needs to be added as a
    service endpoint from the Team Administration Console. As illustrated in the following
    screenshot, you must create a service endpoint for Jenkins using the Jenkins endpoint
    and specifying connectivity details. Once the Jenkins connection endpoint has
    been successfully added, you can choose Jenkins as an artifact type in the release
    definition:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理当前支持 Team build、Jenkins、本地 TFS 和其他源作为有效的工件源。源需要作为服务终结点从 Team 管理控制台中添加。如以下截图所示，你必须使用
    Jenkins 终结点并指定连接详细信息，创建一个 Jenkins 服务终结点。成功添加 Jenkins 连接终结点后，你可以在发布定义中选择 Jenkins
    作为工件类型：
- en: '![There is more...](img/image00737.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/image00737.jpeg)'
- en: Release management also supports adding other artifact sources. This option
    is suitable if you want to connect to sources such as Team City, NuGet repository,
    or file share.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理还支持添加其他工件源。如果你想连接到像 Team City、NuGet 仓库或文件共享这样的源，这个选项会非常合适。
- en: Configuring a release definition for a continuous deployment
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置持续部署的发布定义
- en: A continuous deployment is a software engineering approach in which Teams deploy
    incremental changes to software as they are committed to a repository. It aims
    at building, testing, and releasing software faster and more frequently. A release
    definition already stores details of systems generating the artifacts that need
    to be deployed. A release definition can be configured to trigger a release when
    a new version of the artifact is available. In this recipe, you'll learn how to
    configure the release definition to trigger a new release when a new artifact
    version is available.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是一种软件工程方法，在这种方法中，团队会在将增量更改提交到代码库时，同时部署软件。这种方法旨在更快速、更频繁地构建、测试和发布软件。发布定义已经存储了生成需要部署的工件的系统详细信息。当新版本的工件可用时，发布定义可以配置为触发发布。在本教程中，你将学习如何配置发布定义，以便当新工件版本可用时触发新的发布。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To edit a release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑发布定义，你需要是发布管理员组的成员。这个权限同样适用于项目管理员组。
- en: 'Scenario: The FabrikamTFVC Team has mapped **FabrikamTFVC.Website** and **FabrikamTFVC.Services**
    to the release definition of FabrikamTFVC Web. The Team now wants the FabrikamTFVC
    release definition to automatically trigger a new release when a new successful
    build is available for **FabrikamTFVC.Services**.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 场景：FabrikamTFVC 团队已将**FabrikamTFVC.Website**和**FabrikamTFVC.Services**映射到 FabrikamTFVC
    Web 的发布定义中。团队现在希望，FabrikamTFVC 发布定义在**FabrikamTFVC.Services**的新成功构建可用时，自动触发新发布。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Navigate to the **Release** hub in the FabrikamTFVC Team Project and edit the
    release definition FabrikamTFVC Web. Click on the **Triggers** tab to configure
    the triggers for this release definition:![How to do it...](img/image00738.jpeg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 FabrikamTFVC 团队项目中的**发布**中心，并编辑 FabrikamTFVC Web 的发布定义。点击**触发器**选项卡以配置此发布定义的触发器：![如何操作…](img/image00738.jpeg)
- en: Check the **Continuous deployment** checkbox and select **FabrikamTFVC.Services**
    as the trigger for artifact source label. Also select the environments you would
    like the release to be automatically deployed to. It is a common scenario to continuously
    deploy all changes to a selected environment; however, release management gives
    you the option to select one or more environments for continuous deployment. Click
    on **Save** to commit the changes:![How to do it...](img/image00739.jpeg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**持续部署**复选框，并选择**FabrikamTFVC.Services**作为工件源标签的触发器。同时，选择你希望发布自动部署到的环境。将所有更改持续部署到选定环境是常见场景；然而，发布管理允许你选择一个或多个环境进行持续部署。点击**保存**以提交更改：![如何操作…](img/image00739.jpeg)
- en: Navigate to the **Build** hub and queue a new build for **FabrikamTFVC.Services**.
    Once **FabrikamTFVC.Services** is completed successfully, a release from the release
    definition FabrikamTFVC Web is triggered. A new release will not trigger if the
    **FabrikamTFVC.Services** option fails:![How to do it...](img/image00740.jpeg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**构建**中心并排队一个新的**FabrikamTFVC.Services**构建。一旦**FabrikamTFVC.Services**成功完成，来自
    FabrikamTFVC Web 发布定义的发布将被触发。如果**FabrikamTFVC.Services**选项失败，则不会触发新发布：![如何操作…](img/image00740.jpeg)
- en: How it works…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: The FabrikamTFVC release definition is now configured to detect when a new artifact
    is available in the **FabrikamTFVC.Services** build definition. Under the hood,
    this configuration sets up a queue between the build and release definition. A
    successful built-in **FabrikamTFVC.Services** generates an event; as soon as the
    receiver in FabrikamTFVC Web release definition receives this event, it triggers
    a new release.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: FabrikamTFVC 发布定义现在已配置为检测何时在**FabrikamTFVC.Services**构建定义中有新的工件可用。在背后，这个配置会在构建和发布定义之间设置一个队列。成功构建的**FabrikamTFVC.Services**会生成一个事件；一旦
    FabrikamTFVC Web 发布定义中的接收器收到此事件，就会触发一个新发布。
- en: The release will trigger sequentially in all the selected environments. At present,
    you cannot set up triggers to automatically deploy to multiple environments in
    parallel. It is expected that in future, REST APIs will be available to trigger
    releases remotely from other systems.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 发布将在所有选定的环境中按顺序触发。目前，你无法设置触发器来并行自动部署到多个环境。预计未来将会有 REST API 可供从其他系统远程触发发布。
- en: There's more...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'While **FabrikamTFVC.Services** does not need to be a continuous integration
    build, even if it is manually triggered, as long as a new successful build artifact
    is produced by the build the release will be trigged. You can optionally set the
    build as continuous integration from the **Build** hub as illustrated in the following
    screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然**FabrikamTFVC.Services**不需要是持续集成构建，但即使它是手动触发的，只要构建生成新的成功工件，发布就会被触发。你可以选择从**构建**中心将构建设置为持续集成，如下图所示：
- en: '![There''s more...](img/image00741.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/image00741.jpeg)'
- en: Adding and configuring environments in a release definition
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在发布定义中添加和配置环境
- en: A release definition is composed of a collection of environments. An environment
    is a logical container that holds information on where a release needs to be deployed
    and how it needs to be deployed. The environment can be a collection of server(s)
    on premises, in the cloud, multiple clouds, or an app store. The steps used to
    deploy the application on each environment can be the same or different. The deployment
    steps in an environment are described using tasks. In this recipe, you'll learn
    how to add and configure environments.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To edit a release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team has a collection of servers categorized as
    development, QA, staging, and production environments. The Team wants the ability
    to deploy the application across all environments in a single release process.
    Each environment has different owners and approvers. The Team wants the release
    definition to be configured such that developers can approve the release into
    the development environment; the QA approves all releases in the QA environment.
    Both the QA and Release Manager approve releases in staging (pre-production).
    The Release Manager approves production releases:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00742.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in FabrikamTFVC Team Project and edit the release
    definition FabrikamTFVC Web. Rename the default environment to **Development**:![How
    to do it...](img/image00743.jpeg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the context menu by clicking on the ellipsis to configure the development
    environment. From the context menu, choose **Assign approvers...**:![How to do
    it...](img/image00744.jpeg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This window allows you to configure the approvers for pre-deployment and post-deployment
    approval as well as set up an overall environment owner and choose to enable e-mail
    notifications. Click on **OK** to save the configured changes. This screen allows
    adding both individual user accounts as well as groups as approvers and owners:![How
    to do it...](img/image00745.jpeg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now click on the **+** icon to add deployment tasks to the development
    environment. Adding and configuring tasks will be covered in future recipes.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the development environment, launch the context menu by clicking on the
    ellipsis. From the context menu, choose **Save as template...**:![How to do it...](img/image00746.jpeg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the Deployment Template a name and description as illustrated in the following
    screenshot:![How to do it...](img/image00747.jpeg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon to add an environment. This will launch the Deployment
    Template window. As illustrated in the following screenshot, you'll see a new
    **Custom** tab. This tab will list all Custom Templates saved by the Team. Select
    and add this template; it will add a new environment with the approval configuration
    setup in step 3:![How to do it...](img/image00748.jpeg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, add a new environment for QA, staging, and production, and set the approvers
    as indicated in the diagram in the *Getting ready* section of this recipe. As
    illustrated in the following screenshot, each environment has symbols that provide
    useful information:![How to do it...](img/image00749.jpeg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows the count of tasks in an environment. At present, there are 0 tasks
    in this QA environment.
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This shows the count of approvers in an environment. At present, there are four
    approvers set up for the staging environment.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This shows the count of variables in an environment. At present, there are 0
    variables set up for the production environment.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the ellipsis in the environment to launch the context menu. From the
    context menu, select **Clone Environment**. This will clone the selected environment
    into a new environment. This is great when you want to copy an existing environment
    without saving it as a template.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Security can also be configured at the environment level. Select an environment
    and launch the security configuration from the context menu. This screen allows
    you to configure permissions specific to the environment such as which groups
    can delete a release environment, edit a release environment, manage release approvers,
    and administer the release permissions:![How to do it...](img/image00750.jpeg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The agent used for deploying an environment can also be configured at the environment
    level. Select **Agent options...** from the environment context menu:![How to
    do it...](img/image00751.jpeg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Agent options** window has various configuration options such as whether
    artifacts should be downloaded, which agent to use, and agent demands. The **Variables**
    tab allows you to specify the variables for this environment:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00752.jpeg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Having the ability to configure the agent per environment is extremely useful
    if the environment you are trying to deploy the application to is in a secure
    network that is only accessible to a special agent. You can use the configure
    queue option to select the queue that has the agent you need to use for this deployment.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Save** to commit the changes. Queue a new release for this release
    definition by clicking on the **+** icon:![How to do it...](img/image00753.jpeg)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This queues a new release for the release definition FabrikamTFVC Web. As illustrated
    in the **Environments** column, the release represents each environment with a
    line. The icon pre-fixed before the first gray line shows that the release in
    this environment is pending approval:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00754.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on the release to navigate to the log **Summary** tab for this
    release. You can see that the release is pending approval for deployment into
    the **Development** environment:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00755.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: 'The **Development** environment was configured for pre-approval before deploying
    the application. The environment was also configured to send out e-mail notification.
    As per the configuration, the environment sends out an e-mail notification:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00756.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: 'The release is kicked off once the release pre-approval is granted:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00757.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: When multiple approvers are specified, each of the approvers will be notified
    in sequence. All the listed approvers must approve the deployment before it continues.
    If you specify a group as an approver, the entire group is notified when there
    is a pending approval. However, only one user in the group needs to approve or
    reject the deployment.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'The summary view gives you an overall summary of the release:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00758.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: 'The **Logs** view gives you a full break down of all actions performed in an
    environment:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00759.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: This is great for identifying the bottlenecks in your release process. We'll
    cover release tracking in more detail in the *Tracking a release i* *n release
    management* recipe.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Configuring security for release definitions
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like other modules in TFS, release management also uses the role-based permission
    model for security. Permissions define the authorizations that can be granted
    or denied to users and groups. In this recipe, you'll learn about the different
    levels at which security can be applied for release management.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To administer the permissions for release management, you need to have **Administer
    release permissions** set to **Allow**. This is, by default, set to **Allow**
    for members of the Project Administrators and Release Administrators Group:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00760.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in FabrikamTFVC Team Project. From the **All
    release definitions** context menu, choose **Security...** to open the permission
    dialog. This will allow you to administer the permissions for all release definitions
    in the Team Project:![How to do it…](img/image00761.jpeg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The permissions dialog shows groups, users, and permissions. The permission
    dialog can be used to change permissions for groups as well as add new users and
    groups to these groups:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00762.jpeg)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the previous step, we saw how to manage security for **All release definitions**.
    To manage the security for a specific release definition, open the context menu
    for this release definition and choose **Security...** from the context menu:![How
    to do it…](img/image00763.jpeg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The permissions dialog allows you to manage the permissions for existing, new
    users, and groups for this specific release definition.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So far, we have seen how to apply security to all release definitions and a
    specific release definition. Release management also allows applying security
    on environments within a release definition. Edit FabrikamTFVC Web release definition
    from the **Environment** context menu and select **Security...**:![How to do it…](img/image00764.jpeg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The permissions dialog allows you to manage the permissions for existing, new
    users, and groups for this specific environment.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Release management contains a hierarchical role-based permission model. The
    following table summarizes the permissions and the hierarchy to which it can be
    applied:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '| Permission | Description | Scope |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
- en: '| Administer release permissions | Can change any of the other permissions
    | Project, release definition, and environment |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
- en: '| Delete release definition | Can delete release definition(s) | Project and
    release definition |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: '| Delete release environment | Can delete environment(s) in release definition(s)
    | Project, release definition, and environment |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '| Edit release definition | Can create and edit release definition(s), configuration
    variables, triggers, and artifacts | Project and release definition |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: '| Edit release environment | Can edit environment(s) in release definition(s)
    | Project, release definition, and environment |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| Manage release approvers | Can add or edit approvers for environment(s) in
    release definition(s) | Project, release definition, and environment |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| Manage releases | Can edit the configuration in releases, and can start,
    stop, or restart release deployments | Project and release definition |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| Queue releases | Can create new releases | Project and release definition
    |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '| View release definition | Can view release definition(s) | Project and release
    definition |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| View releases | Can view releases belonging to release definition(s) | Project
    and release definition |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: The default values for all of these permissions are set for all Team Project
    collection and Team Project groups. For example, Project Collection Administrators,
    Project Administrators, and Release Administrators are given all of the preceding
    permissions by default. Project Contributors are given all permissions except
    **Administer release permissions**. Project Readers, by default, are denied all
    permissions except **View release definitions** and **View releases**.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Configuring global and local variables for a release
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Variables are used to store values that need to be passed into tasks during
    the release. There are various advantages of using variables over hardcoding these
    values directly in tasks:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Variables support encrypting values in a way that they cannot be seen or changed
    by users of a release definition
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing values in variables helps avoid duplication
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables can be shared across all environments
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables can be shared across all tasks within a specific environment
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to configure release and environment variables
    for a release definition.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To edit a release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team uses Azure blob storage for storing files that
    are needed by the FabrikamTFVC Web release definition. The Team would like the
    ability to access the blob storage connection details from across the release
    definition. The Team also need to store the connection string details that are
    required by one of the tasks in the environment. The value for the connection
    string is different per environment. The Team would like to store these values
    securely so that the connection string details are not available in plain text:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00765.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in FabrikamTFVC Team Project and edit the release
    definition FabrikamTFVC Web. Click on the **Configuration** tab. The **Configuration**
    tab allows you add variables that can be shared across the release definition:![How
    to do it…](img/image00766.jpeg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon to add a variable. Add the connection details for the
    Azure blob storage as illustrated in the following screenshot. Click on the padlock
    icon next to the property. The values of such properties are stored securely and
    cannot be viewed by users once they are saved. During a deployment, the release
    management service decrypts those values that are referenced by the tasks and
    passes them to the agent over a secure HTTPS channel:![How to do it…](img/image00767.jpeg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Environment** tab, click on the ellipsis in the **Development**
    environment, and select **Configure variables...** from the context menu:![How
    to do it…](img/image00768.jpeg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon to add a variable. Add the connection string details
    and click on the padlock icon to hide the connection string. Add another variable
    for storing the database name. Follow this step to configure these variables for
    all other environments:![How to do it…](img/image00769.jpeg)
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate to the **Configuration** tab and change the variable type from
    the top right-hand side to **Environment variables**:![How to do it…](img/image00770.jpeg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows a list of all the environment variables and their values for all
    environments:![How to do it…](img/image00771.jpeg)
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can filter out the environments that you do not want to see the environment
    variables for by selecting the checklist next to the view list:![How to do it…](img/image00772.jpeg)
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we configured variables at release and environment levels. Variables
    that are defined at the release level are available to all tasks across all environments
    in the release definition. Variables that are defined at the environment level
    are only available to tasks within this environment; these variables cannot be
    accessed by other environments. Using the view type option in the configuration
    view, you can view both release as well as environment variables. You can click
    the padlock icon next to the property to hide the value of the property. The values
    of such properties are stored securely and cannot be viewed by users once they
    are saved. During a deployment, the release management service decrypts the values
    that are referenced by the tasks and passes them to the agent over a secure HTTPS
    channel. You can reference the variables in the task using the `$(variablename)`
    format. Apart from using custom variables, you can also use the built-in variables;
    a full list of built-in variables can be found at [http://bit.ly/1ON0Usg](http://bit.ly/1ON0Usg).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an Azure website using release management
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to deploy an Azure website from a release definition.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a release definition, you need to be a member of the Release Administrators
    Group. These permissions are also available to the Project Administrators Group.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: The **FabrikamTFVC.Website** build definition produces a web package
    as an artifact. The FabrikamTFVC Team wants to deploy the web package to an Azure
    website:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00773.jpeg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: Ensure you have an active Azure Cloud subscription. Download your Azure publish
    settings file from [https://manage.windowsazure.com/publishsettings](https://manage.windowsazure.com/publishsettings).
    Set up an Azure website. In this recipe, we'll be using `https://fabrikamTFVC-dev.azurewebsites.net/`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the FabrikamTFVC Team Administration Console. Click on the **Services**
    tab and create a new endpoint. From the services endpoint context menu, select
    **Azure**. Change the connection type to **Certificate Based**. Copy the details
    from the Azure publish settings file and populate the Azure endpoint connection
    details. Click on **Save** to create the Azure endpoint:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00774.jpeg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to the **Build** hub in the FabrikamTFVC Team Project. Edit the FabrikamTFVC
    build definition, if you don''t already have this build definition refer to the
    *Creating a continuous integration build definition in TFBuild* recipe in [Chapter
    4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building Your Application"), *Building
    Your Application* to learn how to create a build definition. In the Visual Studio
    Build Task, configure the following `MSBuild Arguments`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Configure the **Copy and Publish Build Artifacts** task to publish the contents
    of the web deployment package. This can be done by setting the following configuration:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00775.jpeg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
- en: 'Save the changes and queue a build. Once the build successfully completes,
    you can see the web deployment package from the artifact explorer:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00776.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: Now, we have a working Azure subscription and an Azure website ([https://fabrikamTFVC-dev.azurewebsites.net](https://fabrikamTFVC-dev.azurewebsites.net)).
    We have an Azure service endpoint as well as a build definition generating a web
    deployment package as an artifact.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub for the FabrikamTFVC Team. Click on the **+**
    icon to create a new release definition. Select the **Azure Website Deployment**
    Template:![How to do it…](img/image00777.jpeg)
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Azure Website Deployment** templates adds a default environment with the
    **Azure Web App Deployment*** and **Visual Studio Test** tasks:![How to do it…](img/image00778.jpeg)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Azure Web App Deployment*** task and configure the values as illustrated
    in the following screenshot. Select the Azure subscription configured as a service
    endpoint. Select the location where the web app `FabrikamTFVC-dev` was created.
    Specify the path to the web deployment package within the artifact repository:![How
    to do it…](img/image00779.jpeg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to commit the changes to this release definition. Create a
    new release.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The release agent uses the Azure service endpoint to securely publish the web
    deployment package to the `FabrikamTFVC-dev` website. The log tab in the release
    shows the full summary of processing:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00780.jpeg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
- en: 'The service endpoint has two permission groups, namely, **Endpoint Administrators**
    and **Endpoint Readers**. Individuals who need to manage this build definition
    should also be part of the Endpoint Administrators Group, others can be part of
    the Endpoint Readers Group:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00781.jpeg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: Deploying the IIS Web Application using release management
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to deploy the IIS Web Application using release
    management.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scenario: The FabrikamTFVC Team has a collection of servers in the `Fabrikam.lab`
    domain that they need to perform IIS Web Application Deployment on.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Where does it need to be installed?
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As illustrated in the following figure, the servers are in the same domain
    `Fabrikam.lab`. The IIS Web Application Deployment needs to take place on two
    servers, namely, `QA-Web1.Fabrikam.lab` and `QA-Web2.Fabrikam.lab`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '![Where does it need to be installed?](img/image00782.jpeg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: 'The agent uses WinRM protocol to connect to the machines in the Machine Groups.
    WinRM needs to be enabled on a machine as a prerequisite before it can be added
    into the Machine Group. Follow the *Creating and setting up a Machine Group* recipe
    in [Chapter 5](part0062.xhtml#aid-1R42S1 "Chapter 5. Testing Your Application"),
    *Testing Your Application*, to set up the Fabrikam-QA Machine Group. The machines
    in the Machine Group the website will be deployed to need to meet the following
    prerequisites:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Web Deploy 3.5 or higher
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IIS Web should already be installed and configured
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET 2 and .NET 4 should be registered with IIS using `aspnet_iisreg -i`
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What needs to be installed?
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To deploy a web application on IIS, the Web Deployment Package needs to be available
    locally on the destination machines. You can either manually copy the Web Deployment
    Package on the destination machine or make it available on a UNC that is reachable
    from the destination machines. In this recipe, we will configure the build definition
    to generate the Web Deployment Package and copy it across to all destination machines.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Build** hub in the FabrikamTFVC Team Project. Edit the `FabrikamTFVC.Website`
    build definition. If you don't already have this build definition, refer to the
    *Creating a continuous integration build definition in TFBuild* recipe in [Chapter
    4](part0050.xhtml#aid-1FLS42 "Chapter 4. Building Your Application"), *Building
    Your Application*, to learn how to create a build definition.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'As illustrated in the following screenshot in the Visual Studio Build task,
    configure the following MSBuild arguments:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will now use the **Copy And Publish Build Artifacts** task to upload the
    contents of `$(build.stagingDirectory)` as an artifact. The copy root is being
    set to `$(build.stagingDirectory)` since the Visual Studio Build task has MSBuild
    arguments specifying the Web Deployment Package to be copied to the `$(build.stagingDirectory)`.
    The `**\*` search pattern is used to copy all the contents of `$(build.stagingdirectory)`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '![What needs to be installed?](img/image00783.jpeg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: 'We will now use the Windows Machine File Copy task to copy the contents of
    the `$(build.stagingDirectory)` to the target machines too. The machine names
    specified in the machine file need to have been configured for WinRM. Specify
    either a local folder on the destination server or a UNC that''s accessible from
    the destination server. Check the option **Clean Target** to have the older binaries
    in the destination folder location overwritten with new binaries. Also, check
    the **Copy Files in Parallel** option to speed up the copy operations across multiple
    machines. From the **Variables** tab, add two variables, namely, `machine.username`
    and `machine.password` for holding the login details for the machines you intend
    to have the files copied on to:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '![What needs to be installed?](img/image00784.jpeg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: 'Queue a build; once the build is successfully completed, navigate to the Artifacts
    Explorer. You should see the website binaries as illustrated in the following
    screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '![What needs to be installed?](img/image00785.jpeg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: The same files should now be available locally on the destination machines in
    the `C:\Temp\FabrikamTFVC.Website` folder.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll create a new release definition specifically for deploying
    IIS Web Application and App Pool. To create a release definition, you need to
    be a member of the Release Administrators Group. These permissions are also available
    to the Project Administrators Group.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub in the FabrikamTFVC Team Project. Add a new
    release definition. Select an empty Deployment Template and name the definition
    FabrikamTFVC Web Server release definition. Rename the default environment to
    QA and add the IIS Web Application Deployment task to this environment:![How to
    do it…](img/image00786.jpeg)
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **QA** environment, click on the ellipsis and select **Configure variables...**
    from the context menu:![How to do it…](img/image00787.jpeg)
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two variables, namely, `machine.username` and `machine.password` for this
    environment holding the login details for the machines where IIS needs to be deployed:![How
    to do it…](img/image00788.jpeg)
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now to configure the IIS Web Application Deployment task, first specify the
    machines and the login details. We'll use the `machine.username` and `machine.password`
    variables defined in the previous step. Since we are in a closed domain group
    where WinRM is configured to use HTTP, select **HTTP**:![How to do it…](img/image00789.jpeg)
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, specify the location of the web deployment package. Since the web deployment
    package was copied using the machine file, copy the task using the build definition.
    You can directly specify the local destination machine location here. Optionally,
    you can specify the web deploy parameter file and override parameters to replace
    the website properties such as application name, connection string, database details,
    and so on, in the web configuration. Alternatively, you can also use the PowerShell
    script after the deployment to carry out the value replacements:![How to do it…](img/image00790.jpeg)
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create or Update Application Pool** option and specify the application
    pool name, .NET version, pipeline mode, and identity for the application pool:![How
    to do it…](img/image00791.jpeg)
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** and trigger a release for this release definition. Wait for
    the release to complete. The summary view will show you the result of the release
    execution:![How to do it…](img/image00792.jpeg)
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s check the results of the deployment on the destination machines.
    As illustrated in the following screenshot, **FabrikamAppPool** has been created
    as per the specifications in the configuration:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00793.jpeg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
- en: 'The web deployment package has also been installed under the default website
    with the website binaries copied in the `C:\inetpub` folder:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00794.jpeg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: The task uses the standard web deployment package functionality to deploy to
    IIS. Using WinRM allows the release management agent to orchestrate this workflow
    remotely. You can read more about the parameters and functionality of web deployment
    at [http://bit.ly/1XT0yTq](http://bit.ly/1XT0yTq).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: There is more
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The IIS Web Application Deployment task also has a **Create or Update Website**
    section. This gives you far more granular control on specifying how the website
    is structured. You can use this to change the physical path of the website, configure
    the bindings to be used, as well as the protocol and ports along with host names:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '![There is more](img/image00795.jpeg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
- en: Tracking a release in release management
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is common to want to see the list of releases by status, check the status
    of a current release, track the approvals for a release, investigate the failures
    in logs, and view the details of the agent processing the release. In this recipe,
    you'll learn about all the release tracking features available in release management.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Release** hub for the FabrikamTFVC Team. The landing page
    shows you a list of all release definitions. This is a quick way to see the status
    of releases. The view surfaces information about the status as well as the release
    definition, environments, build, branch, start time, and created by. Releases
    triggered using the continuous deployment configuration have an icon in the first
    column:![How to do it…](img/image00796.jpeg)
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This view can be filtered by the status of the releases. From the top-right
    corner, change the **State** dropdown to **Rejected**; this will narrow the list
    down to rejected releases:![How to do it…](img/image00797.jpeg)
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch over to the **Overview** tab. This will help you visualize the status
    of all the release definitions. As illustrated in the following screenshot, the
    last release for the **Fabrikam Website Release Pipeline** definition failed while
    FabrikamTFVC Web Release was successful in the **Development** environment, it
    failed in the **QA** environment and no deployments have been attempted in **Staging**
    and **Production** using this pipeline. You can click on the ellipsis next to
    the release definition name to queue a new release, edit the definition, or manage
    the security for the release definition:![How to do it…](img/image00798.jpeg)
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fabrikam Website Release Pipeline showing the status of the Release-21 in the
    QA environment; FabrikamTFVC Web Release Pipeline showing the status of the Rel-FabrikamTFVC-3
    across the environments
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Locate **Release-11** and double-click on it to view the release. This opens
    the release summary view by default. The summary view shows you the details of
    the release, environments, issues, work Items, and test results. You can also
    restart or abandon the release from this view:![How to do it…](img/image00799.jpeg)
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To dig into the issue further, either click on the error message or navigate
    to the log view. The log view lets you browse the logs by environment and task
    making it easier to investigate reasons for failure:![How to do it…](img/image00800.jpeg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can hide the logs and narrow down the view to approvals or tasks only by
    changing the options from the top right:![How to do it…](img/image00801.jpeg)
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Commits** and **Work Items** views in the release show you information
    about the code changes and Work Items associated to the artifacts processed as
    part of this release:![How to do it…](img/image00802.jpeg)
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate to the **Team Project Collection Administration** page in Team
    Portal. Click on **Agents** queues to see a list of builds and agents grouped
    by queue. The following screenshot illustrates all the builds and releases processed
    by the Fabrikam CI01 agent queue. You can directly browse to the failing builds
    and releases by clicking on the definition or name of the hyperlink:![How to do
    it…](img/image00803.jpeg)
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Release management gives you the ability to track the releases and narrow down
    the reasons for failure by drilling in through the various levels of hierarchy.
    Though there is no charting capability to pin the release status to the Dashboard
    yet, this area is set to review a good amount of investment over the next few
    releases; hopefully, enhancements to visualize the release pipelines will be taken
    care of as part of these investments.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
