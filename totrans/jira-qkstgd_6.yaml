- en: Configuring Project Screens and Permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue customizing Jira further while take a look
    at how we can add more fields to our project by using screens and making sure
    that those new fields are visible only on a specific type of issue. We will also
    take a look at various permissions and learn how to modify them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics covered in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding new custom fields in Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Jira screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the custom field in our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transition screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new custom fields in Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created a custom workflow that we want to use with
    the Bug issue type. We learned how to map this new workflow to the Bug issue type.
    This is great because the life cycle of the bug will be different compared to
    other issue types in Jira. However, we want to customize our project further;
    we want to capture additional information from the user who is reporting a bug.
    The additional information will be nothing but a new field in Jira, better known
    as a Custom fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two new fields are required in our project: Steps to reproduce and Type of
    Bug. The first field will be a text field where the user can enter text freely,
    but the second field will be a drop-down from where user needs to select an item.
    Let''s now add these two fields to our instance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to add a custom field:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Jira instance, go to Jira settings | Issues | Custom fields (under FIELDS)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Add custom field button in the top-right corner, demonstrated
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fcb10be1-be17-4d31-a2e4-6fcbd9e572e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Select a Field Type popup, select Text Field (multi-line) and press
    the Next button, demonstrated as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/90cb93bf-7dc4-424a-858e-1745cd8e2d41.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2
  prefs: []
  type: TYPE_NORMAL
- en: In the Configure Text Field (multi-line) Field pop up, enter the Name as `Steps
    to reproduce` and also add a meaningful Description. Finally, press the Create
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, a custom field will be created in your instance of Jira. You will be asked
    to add this newly created custom field to a screen, but ignore this and continue
    with the creation of the field.
  prefs: []
  type: TYPE_NORMAL
- en: Follow the same set of instructions to add the `Type of Bug` custom field but,
    in this instance, the field type should be Select List (single choice) where you
    need to also add some Options for the user to select from the drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have two new fields with us, let's now learn how to use them in
    our project.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Jira screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Screens are nothing but containers of fields in Jira. Screens can have many
    fields in any order of your choosing. The order of the fields can be changed by
    you as well. Whenever you interact with an issue in Jira, you are, in most cases,
    working with a screen. To understand the screen, we have to also understand the
    concept of an operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of operation in Jira. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These operations are self-explanatory, but it is important to know here that
    the fields displayed on these operations can be different. When you create a new
    issue in Jira, you may just want to capture few fields, but when that issue is
    edited later, you may also want to capture more information. That is why these
    operations can have different screens associated with them.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we want the two new custom fields to be added in all three operations.
    In the next section, we will learn how to add the fields to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Using the custom field in our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have added new custom fields to your instance, those fields are available
    globally for you to use in your project. Until you add those fields to your project,
    the fields will not be usable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to add the fields to the Bug issue type:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside your project, go to Project settings | Screens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the Screens section, you will notice that there are two screen schemes
    already used in your project, as shown in the following screenshot. These two
    schemes are based on the template that we used earlier when we created the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf02a862-907e-4cc9-93c1-dd4026c591d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there is a separate screen scheme used by the Bug issue type.
    Under this scheme, there is just one screen, called SSP: Scrum Bug Screen (1),
    that is used by all three operations; in other words, Create issue, Edit issue
    and View issue.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To add our new fields, click on the screen SSP: Scrum Bug Screen (1) and, in
    the Configure Screen section, go to the bottom of the page were all the existing
    fields are listed, click on the Select Field ... drop-down, and select the two
    new fields that we added earlier, demonstrated as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cede239f-f54c-4596-b736-2a1ab9abe738.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4
  prefs: []
  type: TYPE_NORMAL
- en: 'The fields will then be added to your project, but will only be available with
    the Bug issue type, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5715ef16-2c6e-4c10-81b2-ee230a91b901.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5
  prefs: []
  type: TYPE_NORMAL
- en: You can also create your own screen scheme to map different screens to various
    operations because perhaps you don't want to capture a field during issue creation,
    but want to capture it later, when the issue is edited.
  prefs: []
  type: TYPE_NORMAL
- en: Transition screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from the screens used here, there is also the option to capture input
    from the user during workflow transitions, and this is done using transition screens.
  prefs: []
  type: TYPE_NORMAL
- en: What if we want the user to fill in a field called Analysis when the bug is
    resolved, but we do not want this field to be captured when we create a bug. In
    this case, we could create a new screen for the bug edit operation, but that would
    mean the user needs to click on the Edit button on the issue to enter information
    in this field. This requirement can be achieved by using a completely new screen
    and using that screen when the bug is resolved or, in our case, sent to Done status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a new screen and use it as a transition
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, create a new custom field as we did earlier in this chapter and name
    that field Analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go to Jira settings | Issues | Screens (under SCREENS) and click on the Add
    screen button in the top-right corner. In the Add screen popup, enter the Name
    as `Analysis screen` and a meaningful Description, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa09a966-d05d-4381-8454-f03e130d21b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the Configure screen section, add the Analysis field that you just
    created onto this screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we need to use this screen containing just a single field in our Bug workflow.
    Go to Project | Project settings | Workflows and click on the pencil sign next
    to Bug workflow to edit it, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/56c3049d-6f6b-4e7d-bea3-dd081c3b6cb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, inside your Done transition, click on the Edit button, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c2c1718-bc1d-4c25-a66a-79254aeaa083.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in the Edit Transition popup, select Screen as Analysis screen and press
    the Save button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ec04abf4-9eb9-482c-856e-062b43d9ca77.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9
  prefs: []
  type: TYPE_NORMAL
- en: We are almost done now. After modifying the workflow, you also need to publish
    it, since this workflow was already attached to a project and used actively, hence,
    it needs to be published again. There will be a button at the top called Publish
    Draft. Press it to finally apply your changes to the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test your new transition screen, go to any bug issue that you want to resolve
    by moving it to the Done state, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/970296f8-7e2b-45ad-85a5-9981de95fde7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that a new screen will pop up, asking you to enter an analysis
    and a comment before finally changing the status of the bug to Done.
  prefs: []
  type: TYPE_NORMAL
- en: Working with permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have implemented a significant number of customizations in our project. Now,
    let's take a look at one more configuration that will let you control who can
    do what in your project. Jira can be used by a small team comprising a few people
    to thousands of users in an enterprise and, with many people accessing a single
    instance, you may be worried about controlling your project permissions.
  prefs: []
  type: TYPE_NORMAL
- en: When you created the project earlier using a template, Jira created a number
    of default configurations and schemes, such as the issue type scheme, the workflow
    scheme, the issue type screen scheme, the permission scheme, and the notification
    scheme.
  prefs: []
  type: TYPE_NORMAL
- en: You can also create your own scheme with your own customized configurations.
    However, we can also use the configurations suggested by the template and later
    tweak them slightly. Let's now change the permissions for our project to hide
    it from everyone except people who have been added to our project by the project
    administrator.
  prefs: []
  type: TYPE_NORMAL
- en: In Jira, there is a concept of project role, which is nothing but a team of
    people or users per project. For example, there is a role called Developers in
    our instance where we can add more people. Now, what those people would do in
    that role depends really on the permissions defined in our permission scheme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to restrict access to our project to just a developer
    role:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to create a new permission scheme, so go to Jira settings | Issues
    | Permission schemes (under ISSUE ATTRIBUTES) and click on the Copy link under
    Actions for Default Permission Scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the Default Permission Scheme is copied, then click on its Edit link under
    Actions and rename it to something else, such as Software Permission Scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we have a new permission scheme that we can modify. Click on the Permissions
    link of the new permission scheme and you will see lot of permissions related
    to project, comments, and who can do what, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d9487fda-d2d2-4b8f-9f38-701f44418e39.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11
  prefs: []
  type: TYPE_NORMAL
- en: The second column, Granted to, has a list of either the individual user, group,
    or project role who have that permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To restrict access to a project, remove everything from the Browse Projects
    permission and only give it to Project role developers, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/550f6de0-e23e-4c20-92e7-550b12ee75d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a new permission scheme that we can use in our project. In our project,
    go to Project settings | Permissions | Actions | Use a different scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the Scheme that you just created and press the Associate button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You have modified the permission scheme of your project and
    now, only people added to the Developers role in the project will have access
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how to perform these customizations will empower you to take control
    of your Jira instance and make it work for you the way you want. Jira out-of-the-box
    will come with a number of templates that you can always tweak further if you
    know the proper way to customize your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we spent some time understanding how to add more custom fields
    from the users and also used them in our project by working on the screen. We
    also learned what transition screens are, and how they are different from normal
    screens. Finally, we modified the permissions of our project and restricted access
    to our project to a limited set of users. Although we only modified a single permission,
    knowing the right way to modify it is very important.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at the reporting capabilities of Jira. It
    is very important to know how to analyze the information that is already collected
    in our instance. Understanding how to track our progress using various reports
    and dashboards is a must-have skill that every Jira user and administrator ought
    to know.
  prefs: []
  type: TYPE_NORMAL
