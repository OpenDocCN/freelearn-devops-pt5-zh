- en: Deploying Multi-Tier Applications Using Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously, you learned how to run a standalone container in OpenShift. In the
    real world, almost all applications are composed of multiple interconnected containers.
    For example, the WordPress container requires access to a database instance. OpenShift
    provides a facility that lets you pack everything related to your application
    into a single object, called a *template, *and deploy everything at once by processing
    that template. The basic template concept was explained in [Chapter 9](part0195.html#5PUTM0-78aafb146b304cdeb9b3261a70edabde), *Advanced
    OpenShift Concepts*, and it is very similar to Docker Compose. This chapter will
    be a hands-on lab experiment, illustrating how to use OpenShift templates to deploy
    applications. The upcoming labs will show you, in detail, how to create a multi-tier
    application from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An OpenShift template overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using templates to deploy applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter doesn''t have strict environmental restrictions; any OpenShift
    installations and development environments are supported: MinitShift, `oc cluster
    up`, or standard production-ready deployment based on Ansible. It is up to you
    which flavor you use. However, this chapter is based on the `oc cluster up` running
    within vagrant. The following `Vagrantfile` can be used to deploy the lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The environment can be deployed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the previously listed vagrant machine is deployed, you may connect to it
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, log in as a `developer` user in order to be able to run most commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can use any password, as OpenShift uses the `AllowAll` identity provider
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the lab items will require a custom DNS record, which can be simulated
    by setting a record in `/etc/hosts`. Both methods are acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: It is also assumed that you have a web browser, such as Mozilla Firefox or Google
    Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift template overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An OpenShift template is a set of API resources that can be parameterized and
    processed to produce a list of objects for creation by OpenShift. A template can
    be processed to create any desired OpenShift objects (such as deployment configurations,
    build configurations, and so on). A template can also define a set of labels to
    apply to every object defined in the template. You can apply a template by using
    the CLI or the web console. For example, a template might contain two pods (an
    application and a database), a service, and a route. Once the template has been
    developed, you can reuse it.
  prefs: []
  type: TYPE_NORMAL
- en: Template syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Templates, like any other OpenShift resources, can be created from a raw YAML
    or JSON definition. An example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example includes only one resource—a pod named `app1`. It also
    includes a parameter—`SHOW_DATA`. Parameters can be used to customize application
    deployment and accommodate all kinds of use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters can also have the following default values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In some cases, we may want to generate values according to a certain pattern,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, instantiating the template will generate a random
    password, eight characters long, consisting of all upper and lowercase alphabet
    letters, as well as numbers. Although that syntax is highly reminiscent of regular
    expressions, it implements only a small subset of **Perl Compatible Regular Expressions**
    (**PCRE**), so you can still use the `\w`, `\d`, and `\a` modifiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[w]{10}`: This expands to 10 alphabet characters, numbers, and underscores.
    This follows the PCRE standard and is the same as `[a-zA-Z0-9_]{10}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[\d]{10}`: This expands to 10 numbers. This is the same as `[0-9]{10}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[\a]{10}`: This expands to 10 alphabetical characters. This is the same as `[a-zA-Z]{10}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This capability is very useful for generating random passwords.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to understand that the process of parameter expansion takes place
    when resources are being created from the template, not when the template itself
    is created; so, each generated resource gets its own unique value.
  prefs: []
  type: TYPE_NORMAL
- en: Adding templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a template is developed, it can be added to OpenShift like any other YAML
    or JSON-defined objects, using the `oc create` command. It is a common practice
    to use a separate tenant specifically for templates, which will be shared between
    multiple projects. A default installation of the Red Hat **OpenShift Container
    Platform** (**OCP**) provides a number of templates in the `openshift` project. All
    of an OpenShift cluster's users have read access to the project, but only the
    cluster admin is able to modify or create templates in the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows how to add a template to your current project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to become the `system:admin` user to create a template in the
    `openshift` tenant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Displaying template parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenShift community has developed many useful OpenShift templates, to deploy
    a number of well-known services. Once the template is determined, you will need
    to understand which parameters it accepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple of ways to list all of the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `oc process --parameters` command (this is the easiest one)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking for the `parameters` section in the template's definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Among many others, the OpenShift default installation comes with the `mariadb-persistent`
    template, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That template has a number of parameters, listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t want to import the template into OpenShift, the same method allows
    you to display the parameters of a locally stored OpenShift template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Another method is to use the `oc describe` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Processing a template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a real-life example of deploying an application from a predefined
    template using `oc new-app` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we passed the template''s name to the command as
    a parameter; the `oc` utility can also build an application from the template you
    specify. The following is the list of objects created by the `oc new-app` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This easy you can create a fully functional jenkins CI/CD application running
    within OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clean out your project before we proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Creating a custom template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most cases, developers use the predefined OpenShift templates that come with
    the OpenShift installation; however, at times they don't suit a particular case,
    so a customized template has to be developed. In this section, we will provide
    you with an overview of how to create your own template.
  prefs: []
  type: TYPE_NORMAL
- en: Developing YAML/JSON template definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are familiar with the template layout, you might want to develop a template
    from scratch, using a standard YAML or JSON-based file. This method will allow
    you to create a clean template, without any runtime data.
  prefs: []
  type: TYPE_NORMAL
- en: Some of OpenShift's features may speed up the process of template development.
    For example, `oc explain` allows you to explore the syntax of all OpenShift API
    objects, serving as a form of documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If given no parameters, `oc explain` lists all of the kinds of resources supported
    by the current version of OpenShift:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command accepts the type of a resource as an argument, in order
    to display its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Some OpenShift resources have multilevel structures. Use `.` (the dot) as a
    level separator, to find out the structure of such an attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And you can go even further in this hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: OpenShift documentation is very good and helpful this way.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting existing resources as templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Existing OpenShift resources may be exported as templates by using the `oc export`
    command. Let's create a running application using `oc new-app` command first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the template is created, you can see its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This method of creating a template is fast; however, you have to remove all
    runtime data from the template. For example, all timestamps and status records
    should be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Using the oc new-app -o command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the `oc new-app` command creates all of the resources required
    for a project. You can modify this behavior and get the utility to create a resource
    definition file, instead of creating resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This doesn't create an OpenShift template, but it can be used to create a skeleton
    of the template's structure.
  prefs: []
  type: TYPE_NORMAL
- en: Clear out your your project environment, before we proceed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Using templates to deploy a multi-tier application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During this lab, we will deploy **Gogs** (Git repository management software)
    with a PostgreSQL backend, using all of the knowledge that we have acquired so
    far.
  prefs: []
  type: TYPE_NORMAL
- en: The Gogs application template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use a template from the OpenShift demos that are available
    at [https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml](https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s download this template locally using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'According to the preceding output, most parameters have a default value (except
    for the `HOSTNAME` parameter). If you need to list parameters separately, you
    can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Gogs application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have created the template, it''s time to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create a separate project for this lab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try to deploy Gogs without specifying a mandatory `HOSTNAME` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: OpenShift aborted the processing of the template, as the `HOSTNAME` wasn't provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try again, with the `HOSTNAME` set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The template has been processed by OpenShift. After some time, all of the OpenShift
    objects specified in the template should be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The route `gogs` uses the `gogs.example.com` hostname, which we specified when
    instantiating the template.
  prefs: []
  type: TYPE_NORMAL
- en: Add gogs.example.com record to your hosts file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Gogs has been successfully deployed. To verify that it works properly, we need
    to access it through a web browser on `http://gogs.example.com:1080/`
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Clear out your environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: If you are going to continue with the following Chapter, you can leave your
    OpenShift cluster up, otherwise you can shutdown or delete vagrant VM.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about OpenShift templates, including how to write
    your own templates and deploy applications from templates.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, you will learn how OpenShift simplifies Docker image
    life cycles by providing a Docker build strategy that automates application deployment
    from the source code, if a Dockerfile is available.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following OpenShift projects holds default templates?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: default
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: openshift
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: openshift-infra
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: openshift-node
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: templates
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following commands can show you a list of parameters for the `mytemplate`
    template? choose three:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc get template mytemplate -n openshift -o yaml`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc process --parameters -f mytemplate.json`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc describe template mytemplate -n openshift`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc get parameters -t mytemplate`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc get template mytemplate -n openshift`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`oc new-app mytrmplate`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following OpenShift entities can be created using templates?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pod
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Route
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployment config
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following links for further reading:'
  prefs: []
  type: TYPE_NORMAL
- en: Templates at [https://docs.openshift.org/latest/dev_guide/templates.html](https://docs.openshift.org/latest/dev_guide/templates.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading the Default Image Streams and Templates at [https://docs.openshift.org/latest/install_config/imagestreams_templates.html](https://docs.openshift.org/latest/install_config/imagestreams_templates.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
