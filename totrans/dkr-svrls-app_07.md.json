["```\n$ docker swarm init --advertise-addr=eth0\n```", "```\n$ docker swarm join --token SWMTKN-1-5rvucdwofoam27qownciovd0sngpm31825r2wbdz1jdneiyfyt-b5bdh4i2jzev4aq4oid1pubi6 172.31.4.52:2377\n```", "```\n$ docker info | grep -A3 \"Manager Addresses:\"\nManager Addresses:\n 172.31.0.153:2377\n 172.31.1.223:2377\n 172.31.4.52:2377\n```", "```\n$ docker info --format=\"{{json .Swarm.RemoteManagers}}\" | jq -r .[].Addr\n172.31.4.52:2377\n172.31.1.223:2377\n172.31.0.153:2377\n```", "```\n#!/bin/bash\ncurl -sSL https://get.docker.com | sh\nservice docker start\nusermod -aG docker ubuntu\ndocker swarm join --token $TOKEN $MANAGER_IP:2377\ndocker plugin install --grant-all-permissions weaveworks/net-plugin:2.1.3\n```", "```\n$ docker node ls\nID          HOSTNAME          STATUS  AVAILABILITY   MANAGER STATUS\nbtul0hbd    ip-172-31-11-209  Ready   Active \netm8veip    ip-172-31-8-157   Ready   Active \niwl4pxnf *  ip-172-31-4-52    Ready   Active         Leader\nrsqsflmv    ip-172-31-1-223   Ready   Active         Reachable\nuxd36bok    ip-172-31-15-229  Ready   Active \nxn7fz2q1    ip-172-31-0-153   Ready   Active         Reachable\n```", "```\n$ docker plugin install --grant-all-permissions weaveworks/net-plugin:2.1.3\n2.1.3: Pulling from weaveworks/net-plugin\n82e7025f1f50: Download complete \nDigest: sha256:84e5ff14b54bfb9798a995ddd38956d5c34ddaa4e48f6c0089f6c0e86f1ecfea\nStatus: Downloaded newer image for weaveworks/net-plugin:2.1.3\nInstalled plugin weaveworks/net-plugin:2.1.3\n```", "```\n$ docker plugin ls\nID            NAME                         DESCRIPTION                  ENABLED\nf85f0fca2af9  weaveworks/net-plugin:2.1.3  Weave Net plugin for Docker  true\n```", "```\n$ curl localhost:6782/status\n Version: 2.1.3\n\n Service: router\n Protocol: weave 1..2\n Name: e6:cc:59:df:57:72(ip-172-31-11-209)\n Encryption: disabled\n PeerDiscovery: enabled\n Targets: 3\n Connections: 5 (5 established)\n Peers: 6 (with 30 established connections)\n TrustedSubnets: none\n\n Service: ipam\n Status: idle\n Range: 10.32.0.0/12\n DefaultSubnet: 10.32.0.0/12\n\n Service: plugin (v2)\n```", "```\n$ ps aux | grep weaver\nroot   4097   0.0 3.4 418660 34968 ? Ssl 06:15 0:06 /home/weave/weaver --port=6783 --datapath=datapath --host-root=/host --proc-path=/host/proc --http-addr=127.0.0.1:6784 --status-addr=0.0.0.0:6782 --no-dns --ipalloc-range=10.32.0.0/12 --nickname ip-172-31-11-209 --log-level=debug --db-prefix=/host/var/lib/weave/weave --plugin-v2 --plugin-mesh-socket= --docker-api= 172.31.4.52 172.31.1.223 172.31.0.153\n```", "```\n$ docker network create -d weaveworks/net-plugin:2.1.3 \\\n --subnet=10.32.0.0/24 \\\n --gateway=10.32.0.1 \\\n --attachable my_net\n```", "```\n$ docker network create \\\n --driver weaveworks/net-plugin:2.1.3 \\\n --subnet 10.32.100.0/24 \\\n --attachable \\\n control\n```", "```\n$ docker service create \\\n --name=docker-api \\\n --mode=global \\\n --endpoint-mode=dnsrr \\\n --network control \\\n --constraint \"node.role==manager\" \\\n --mount \"type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock\" \\\n rancher/socat-docker\n```", "```\n$ docker service create \\\n --name service-balancer \\\n --network control \\\n --constraint node.role==manager \\\n --replicas 1 \\\n chanwit/service-balancer\n```", "```\ndocker network create \\\n --driver weaveworks/net-plugin:2.1.3 \\\n --subnet 10.32.200.0/24 \\\n --attachable \\\n elk_net\n```", "```\nversion: '3.3'\n\nconfigs:\n  elasticsearch_config:\n    file: ./elasticsearch/config/elasticsearch.yml\n\nservices:\n  elasticsearch:\n    build:\n      context: elasticsearch/\n    image: chanwit/elasticsearch:6.1\n    configs:\n      - source: elasticsearch_config\n        target: /usr/share/elasticsearch/config/elasticsearch.yml\n    environment:\n      ES_JAVA_OPTS: \"-Xmx512m -Xms512m\"\n\nnetworks:\n  default:\n    external:\n      name: elk_net\n```", "```\n$ docker-compose -f elasticsearch.yml build\n```", "```\n$ docker stack deploy -c elasticsearch.yml es\n```", "```\nversion: '3.3'\n\nconfigs:\n  kibana_config:\n    file: ./kibana/config/kibana.yml\n\nservices:\n  kibana:\n    build:\n      context: kibana/\n    image: chanwit/kibana:6.1\n    configs:\n      - source: kibana_config\n        target: /usr/share/kibana/config/kibana.yml\n    ports:\n      - published: 5601\n        target: 5601\n        mode: host\n\nnetworks:\n  default:\n    external:\n      name: elk_net\n```", "```\n$ docker-compose -f kibana.yml build\n```", "```\n$ docker stack deploy -c kibana.yml kb\n```", "```\nversion: '3.3'\n\nconfigs:\n  logstash_config:\n    file: ./logstash/config/logstash.yml\n  logstash_pipeline_config:\n    file: ./logstash/pipeline/logstash.conf\n\nservices:\n  logstash:\n    build:\n      context: logstash/\n    image: chanwit/logstash:6.1\n    configs:\n      - source: logstash_config\n        target: /usr/share/logstash/config/logstash.yml\n      - source: logstash_pipeline_config\n        target: /usr/share/logstash/pipeline/logstash.conf\n    environment:\n      LS_JAVA_OPTS: \"-Xmx256m -Xms256m\"\n\nnetworks:\n  default:\n    external:\n      name: elk_net\n```", "```\n$ docker-compose -f logstash.yml build\n$ docker stack deploy -c logstash.yml log\n```", "```\n$ docker stack ls\nNAME      SERVICES\nes        1\nkb        1\nlog       1\n```", "```\n$ docker run -d \\\n --name=logspout \\\n --network=elk_net \\\n --volume=/var/run/docker.sock:/var/run/docker.sock \\\n gliderlabs/logspout \\\n syslog+tcp+udp://logstash:5000\n```", "```\n$ bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)\n```", "```\n$ gvm install go1.9.3 -B\nInstalling go1.9.3 from binary source\n```", "```\n$ gvm use go1.9.3 --default\nNow using version go1.9.3\n```", "```\n#!/usr/bin/env gorun\n```", "```\n$ go get github.com/erning/gorun\n```", "```\n$ go get github.com/docker/docker/client\n```", "```\n#!/usr/bin/env gorun\npackage main\n\nimport (\n  \"fmt\"\n  \"context\"\n\n  \"github.com/docker/docker/client\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  cli, err := client.NewClient(client.DefaultDockerHost, \"1.30\", nil, nil)\n  if err != nil {\n    panic(err)\n  }\n\n  info, err := cli.Info(ctx)\n  if err != nil {\n    panic(err)\n  }\n\n  fmt.Println(info.ServerVersion)\n}\n```", "```\n$ chmod +x ./server-version\n$ ./server-version\n17.06.2-ce\n```", "```\n#!/usr/bin/env gorun\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/docker/docker/api/types\"\n  \"github.com/docker/docker/api/types/filters\"\n  \"github.com/docker/docker/client\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  cli, err := client.NewClient(client.DefaultDockerHost, \"1.30\", nil, nil)\n  if err != nil {\n    panic(err)\n  }\n\n  filter := filters.NewArgs(filters.Arg(\"type\", \"node\"))\n  ch, _ := cli.Events(ctx, types.EventsOptions{\n    Filters: filter,\n  })\n\n  for {\n\n    fmt.Println(\"Waiting for event ...\")\n    message := <-ch\n    action := message.Action\n\n    switch action {\n    case \"create\":\n      fmt.Println(\" - New node added.\")\n    case \"update\":\n      fmt.Println(\" - Node updated.\")\n    case \"remove\":\n      fmt.Println(\" - Node removed.\")\n    }\n\n  }\n\n}\n```", "```\n$ chmod +x ./node-event\n```"]