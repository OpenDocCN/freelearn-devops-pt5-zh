- en: Cross-Platform Mobile App Development with Xamarin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xamarin is a platform that enables developers to create cross-platform applications
    on Android, iOS, Window, and other platforms, by using the same source code and
    the same **integrated development environment** (**IDE**).
  prefs: []
  type: TYPE_NORMAL
- en: History of Xamarin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xamarin was started as an experiment to try and develop a version of .NET for
    Linux in early 2000, and was first known as an open source project called **Mono**.
  prefs: []
  type: TYPE_NORMAL
- en: Later, the same project was developed and supported by a new company called
    **Xamarin**, which was created by the very first developers of Mono, and was also
    known as **MonoTouch** and Mono for Android.
  prefs: []
  type: TYPE_NORMAL
- en: Development of Mono continued and it was later renamed Xamarin, which supported
    Android and iOS app development.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin has now been acquired by Microsoft and is developed and supported as
    one of the products offered by Microsoft with great integration with the existing
    IDE, Visual Studio, and it even has its own IDE, called Xamarin Studio, which
    is available for both Mac and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Why you should learn Xamarin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, there are many scenarios where Xamarin can save the day, and in some cases
    literally months.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say you have an idea for a mobile application that you want to develop.
    Of course, you want it to be developed soon and get it to market. But there are
    some small challenges and decisions that you should overcome or decide on before
    you dive into your development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at those challenges:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Choose mobile platforms to target**: This is a very important part in the
    planning phase of our application. The mobile platform market is divided into
    major players, such as Android, iOS, and Windows. To get the most out of our application,
    we will want it to be accessible and available to the majority of users out there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learn a platform-specific coding language or have platform-specific developers
    in your team**: Now, let''s assume you have chosen to target all three of the
    major mobile platforms. We have a clear idea that we need to develop our application
    for three mobile platforms. Here, if you are developing it alone, then you need
    to learn all three different platform-specific languages. Android has its own
    official IDE, similarly Apple has its own IDE and coding language to build iOS
    applications, and Windows has its own as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spend time and resources in development for each platform**: Three different
    platforms, three different languages, and three different IDEs. That is going
    to be very time-consuming and the learning curve is going to be a major issue.
    Or, you have three different developer teams for each platform; then, you will
    be spending a lot more resources on your development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Try and maintain a consistent behavior in all your applications for each
    platform**: Now, let''s assume you have decided to have multiple resources for
    the development of the application. Now, all different mobile platforms have a
    variety of different methods for user interaction, and different ways of designing
    user interfaces. Developing different platform applications with separate teams
    can sometimes make the user experience of the same application drastically different
    on these platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintain all the platform-specific codebase for your same application**:
    Development challenges never end once initial development of the application is
    done. Whenever you add new features to your application, you will now have to
    apply the same changes and features to all three platform-specific codebases,
    repeat the same business logic, and develop the same feature in different ways
    on different IDEs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the preceding scenarios, you can see that developing a mobile application
    is not that simple and straightforward nowadays, if we have to go through different
    coding languages and IDEs to do so.
  prefs: []
  type: TYPE_NORMAL
- en: It increases our time to deliver by a huge amount and is very expensive in terms
    of time, resources, and of course money.
  prefs: []
  type: TYPE_NORMAL
- en: In order to solve all the challenges, Xamarin comes to our rescue. Xamarin saves
    the developer from the need to learn different programming languages and different
    IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: Not only that, we also get the benefit of writing our application code just
    once and building to different mobile platforms. And if you are a C# developer
    on the .NET framework using Visual Studio already, then you just hit the jackpot.
    Because guess what, that's all you need to start development using Xamarin as
    far as language and IDE goes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1184fd1c-26db-4ef5-8045-3a72f7fe1875.png)'
  prefs: []
  type: TYPE_IMG
- en: Development cycle without Xamarin
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f33fac67-b435-4960-99d5-f3709e99a172.png)'
  prefs: []
  type: TYPE_IMG
- en: Development cycle with Xamarin
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of cross-platform development using Xamarin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Xamarin, a developer''s life gets much easier in many aspects of mobile
    application development:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Language**: The most time-consuming process is learning new languages every
    now and then; Xamarin frees developers from this issue. The only language you
    need to have experience in is C# to develop for Android, iOS, and Windows all
    at onceâ€”phew!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IDE**: With learning new languages comes another overhead: getting used to
    a new IDE every time. As soon as we get a new IDE for a different platform, our
    old shortcuts stop working. Files are not in the same place. Debugging is totally
    different. All these issues increase the development time. With Xamarin, you just
    have to use a single IDE that we already love, Visual Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistent UI design**: Often, we wish our app looked the same on all mobile
    devices. We don''t want users to buy a new phone and find a totally new app with
    different user interactions for the same purpose. In order to do this, Xamarin
    comes with **Xamarin.Forms** to develop consistent UI elements across all mobile
    platforms, giving our users a seamless experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code reusability**: Xamarin allows us to share our business logic code across
    all platforms. For any business logic code, we have to write it only once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to mobile app development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Mobile application development is a crucial part of any product development
    in today''s market. Native mobile applications take user interaction with an application
    to a different level:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Always one touch away**: Native mobile applications, unlike web and desktop
    applications, are always on the user''s mobile phone. Users can always opt not
    to visit a web application, and this brings the possibility of less interaction,
    but mobile applications are installed by users on their phones and whenever a
    user interacts with their phone, developers can take advantage of the user''s
    activity and improve the interaction in many ways. The possibilities are unlimited.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Knowing the user''s behavior**: Mobile applications can take advantage of
    the user''s behavior on their phone. We can monitor a user''s activities, such
    as walking, running, sleeping, and so on, to get personal user analytics and feedback.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Always connected**: Mobile data allows users to be connected to the internet
    on the go, and that increases the number of times users interact with the app.
    Mobile data provides a greater level of connectivity between the user and internet-connected
    apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Taking advantage of cutting edge hardware sensors**: Mobile apps have the
    ability to take advantage of sensors available to users on their mobile device,
    such as GPS, fingerprinting, gyroscope, and much more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Personal interaction**: Mobile devices are very personal to individual users,
    unlike desktop and laptop devices. Nowadays, the world of personal assistants
    and speech synthesis technologies is making user interaction more personal and
    human, such as with voice inputs and actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process involved in mobile app development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like any other platform, mobile app development includes several key steps
    in the process of making a complete and stable mobile applications that users
    can use and love:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ideation**: Every application starts with a small idea or a problem to solve.
    A powerful and impactful idea that can solve the user''s problem results in a
    successful application. It is easier to think of a great idea now, more than ever
    before. We use our mobile devices and face many problems in day-to-day use, or
    sometimes wish for an app to be there. That, right there, is the genesis of an
    idea for a great application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Planning**: Planning is a very important part of the process. An idea is
    only good if the execution of it is well planned:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much time to market should it take?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Should the app be premium or free?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What mobile platform should we target?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What technologies and tools should be used?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Answers to all these questions must be known in the planning phase.
  prefs: []
  type: TYPE_NORMAL
- en: '**Designing**: This is the part of application development when the idea begins
    to take shape and we can see how it might look once finished. Before starting
    coding, designing application wireframes and layouts is very important.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coding**: By the time we reach the coding phase, we have a good idea about
    where want to go and what we want to see in our application. So, that enables
    the coding phase to focus only on the actual code development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing**: Testing the application on various mobile devices is very important
    to the stability of application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment and continuous feedback**: After submitting the app to a store,
    it is very important to continuously monitor user feedback and reports, and act
    upon them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platforms supported by Xamarin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier in the chapter, Xamarin allows developers to create applications
    for multiple mobile operating systems by sharing the same code. The following
    are the platforms Xamarin supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Xamarin.Android**: Xamarin.Android allows us to build native Android apps
    using C#. It uses a **just-in-time** (**JIT**) compiler to optimize your app''s
    performance. And it includes all the Android APIs that can be used in your Xamarin
    C# code. It goes from Android phones to tablets to even wearables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xamarin.iOS**: Similar to Xamarin.Android, Xamarin.iOS features all the existing
    APIs in, you guessed it, Apple''s iOS SDK in C#. Also, Xamarin.iOS uses an **ahead-of-time**
    (**AOT**) compiler to compile your C# code to native ARM assembly code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xamarin.Mac**: Xamarin doesn''t just stop at mobile platforms; you can also
    develop Mac applications using the same code base.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xamarin for Windows**: Since C# is the default language to code for Windows
    phones and Windows desktop applications, you can even share the code between your
    mobile apps and **Universal Windows Platform** (**UWP**) apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xamarin on Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio is the default IDE for writing C# code, although it's not the
    only option when it comes to writing apps with Xamarin.
  prefs: []
  type: TYPE_NORMAL
- en: There are other options, such as Xamarin Studio for Windows and Xamarin Studio
    for Mac if you have a Mac. Xamarin Studio for Windows, though, is no longer supported
    by Microsoft and they encourage developers to use Visual Studio instead. For developing
    on the Mac, you can use Xamarin Studio for Mac.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we'll be covering Xamarin development using Visual Studio on Windows,
    since it is the best IDE available for code development using C# and provides
    great IntelliSense support.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions and add-ons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio supports third-party libraries and native libraries using the
    NuGet package manager. It provides the functionality to add new add-ons and plugins
    from within Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin comes as an extension to Visual Studio. You can install Xamarin components
    while installing Visual Studio, as shown in the following topic.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio and Xamarin on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Visual Studio and Xamarin on a Windows machine, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you open the preceding URL in a browser, you''ll get a screen like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9a3beb20-ac49-4ea4-b666-e8ef6eece3c1.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see there are several editions of Visual Studio available for developers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can choose the version best suited to your requirements. If you just want
    to learn Xamarin using Visual Studio, or if you are an individual developer looking
    for a free version, then Visual Studio Community Edition is best suited for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Free download provided under Visual Studio Community 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should get a Visual Studio installer file downloaded on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the installer file and you should see a screen like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d197fe9d-55bb-4e5f-a640-03031db35f47.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Continue button to begin the installation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It can take some time to load the installers available, and you might see the
    following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6709d457-0f47-4d9a-ac57-2de75de77b6d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next screen let you to select Workloads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/939baf8b-099e-4637-b45e-48546d3cf4aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, if you are new to Visual Studio 2017, you might find the installation process
    different from previous versions. Workloads are new in 2017 and they represent
    different packages used for different development purposes. For example, if you
    are planning to code only for .NET desktop applications, then you can choose only
    that workload and skip other workloads.
  prefs: []
  type: TYPE_NORMAL
- en: This change in the Visual Studio 2017 installer is a great way to avoid the
    installation of components that we might not use in our development, and to just
    choose the required workload to install essential components only. This saves
    us a lot of time and space on our laptop.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our development for Xamarin, we will require a workload that installs the
    Xamarin tools and languages required for mobile development. If you scroll a bit
    further down in this menu, you''ll find a section called Mobile & Gaming:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41ca2ef9-122e-4279-a4d8-a286e84257b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Under Mobile & Gaming, the very first option, and for our tutorial the only
    option required, will be Xamarin-Mobile development with .NET.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select this first option, and on the right-hand side panel you'll see all the
    packages included in this workload. The Visual Studio installer will also show
    you the size of the workload in the bottom-right corner. Once selected, click
    on the Install button to begin the installation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will start downloading all the listed packages and then installing them
    on your computer. The Xamarin package is more than 30 GB and it can take some
    time to download and install the packages, depending on your internet speed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the installer is done downloading and installing all the packages required,
    you''ll see a screen like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e7fc453-3586-45d6-a633-d1d13daf0caa.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it. Congratulations on your successful installation of Visual Studio
    and Xamarin. Now, select Visual C# in the Development Settings and your favorite
    color theme for Visual Studio IDE, and hit the Start Visual Studio button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation is done, let's verify that Xamarin is installed with Visual
    Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Tools menu and select Extensions and Updates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the Installed section, scroll down to find Xamarin for Visual Studio,
    Xamarin.Andoid SDK, and Xamarin.Apple SDK installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3567c94f-be0e-4a81-90ee-168ca5d9e389.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have verified the installation, we have some final steps before
    we start coding. We are going to focus on the Android application development
    process in this book to give you a better idea of how Xamarin works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's update all the Android packages with the help of Android SDK Manager,
    which is already installed with Xamarin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Tools | Android | Android SDK Manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc9065f4-4bdd-4b2e-8841-05c6609f326c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open a new window for Android SDK Manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f640ed7-c04b-45db-9cb0-a22534ef79c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see the updates available for the basic packages installed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's click on Install 11 packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will give you a new window where you will have to accept the licenses
    for the packages to be downloaded. Some of the licenses might need to be selected
    individually, depending on the package. Once you see all green ticks on the packages,
    click Install. It will take some time to update all the packages available, depending
    on your internet speed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12acdf4e-a1ea-4ab1-a234-6e88cc92bb46.png)'
  prefs: []
  type: TYPE_IMG
- en: Once everything is updated, let's move on to setting up our **Android Virtual
    Device** (**AVD**) to test our application in a development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our Android Virtual Device for development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Emulator will enable us to test our Android application on a computer
    and we will not require an actual device to test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s click on Tools | Android | Android Emulator Manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc7f01be-b9c0-41a5-946c-e44f62fad570.png)'
  prefs: []
  type: TYPE_IMG
- en: To make this process easier and simpler, we'll start with the existing mobile
    templates available for Android Emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Device Definitions tab shown in the following screen. Once you reach
    the Device Definitions screen, scroll down until you see Nexus devices in the
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6cb95b8f-1522-46b7-b341-2f0a0988617c.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the Nexus device of your choice and click on the Create AVD button on
    the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you should get a window such as the following, where you can customize
    your Android Emulator to your requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef5e3afb-3952-4696-bcc2-2687cb98a89c.png)'
  prefs: []
  type: TYPE_IMG
- en: Fill in all the required details. You can refer to the preceding screenshot
    for help. Once you click OK, AVD Manager will create a new Android Emulator for
    you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To verify that our emulator is created, let''s go back to the Android Virtual
    Devices tab in the Android Virtual Device (AVD) Manager and we can find the newly
    created AVD in the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1798ff91-aa86-4833-8684-fa18f81a4968.png)'
  prefs: []
  type: TYPE_IMG
- en: You must be eager to start this AVD and see how it looks and behaves. So, let's
    not wait anymore; select the AVD and hit the Start button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before AVD Manager starts the AVD, it will give us some launch options similar
    to the ones shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e50f580c-54f4-4c7e-8ee7-ea409d1844cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can scale the display size to the actual phone size we selected as
    a template earlier (Nexus 6 in this case); once done, click Launch. The emulator
    might not launch. It is important to see this error to understand the requirement
    for AVD to be run in an x86 environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, there are some prerequisites for launching Android Emulator in an x86 environment;
    one main one is that it requires Virtualization Technology (Intel VT-x) to be
    enabled.
  prefs: []
  type: TYPE_NORMAL
- en: We need to check VT-x is enabled in the BIOS for our machine before running
    the emulator. Our machine must have Intel VT-x enabled, and if we have Hyper-V
    installed on the machine, that needs to be uninstalled as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Otherwise, you will see a screen like this stating the issue while starting
    the emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e088a3b-02c9-4294-8489-48cabc2c4f9b.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see VT feature disabled in BIOS/UEFI.
  prefs: []
  type: TYPE_NORMAL
- en: To enable VT/VT-x, go to the BIOS and there you should see an option to enable
    Virtualization Technology (VT-x). We won't be getting into the process of how
    to do this, since it differs from machine to machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Apart from enabling VT, we also need to check whether Hyper-V is installed
    on our machine. To do so, follow these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Control Panel.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Programs:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/56f90755-b775-45b1-ba4e-92aa69128657.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Turn Windows Features on or off:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36301a9b-4bcb-41e8-85b4-bb6b110aff64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scroll down to check whether you find Hyper-V in the list of programs:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9fe3f8ae-888e-4db6-aea0-c1e444a7e06a.png)'
  prefs: []
  type: TYPE_IMG
- en: Unselect Hyper-V if it is currently selected. Click OK.
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: This might restart your system.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e7c3785-14ef-43eb-bfed-8baab38ce4fb.png)'
  prefs: []
  type: TYPE_IMG
- en: This should remove Hyper-V, and finally we are good to go.
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s come back to Visual Studio to start our AVD. This time, the emulator
    starts successfully and looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c16411c-42f4-4039-adce-fc96039c7b66.png)'
  prefs: []
  type: TYPE_IMG
- en: If your AVD doesn't look like the preceding screenshot, please go back and edit
    the AVD to change the skin to No skin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Awesome! Now we have our running Android Virtual Device we can begin coding
    our new Android application with Xamarin.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the brief history of Xamarin and why it's
    a great tool for developers looking for cross-platform mobile app development.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to install Visual Studio and Xamarin on a Windows machine,
    along with how to create an AVD for testing our app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about basic application fundamentals and
    create our first Android application using Xamarin.
  prefs: []
  type: TYPE_NORMAL
