- en: Version Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at the Force.com migration tool. We went
    through a step-by-step procedure for setting up Force.com or the Ant migration
    tool on a Windows and Linux machine, studied the files that are required to retrieve
    metadata from a sandbox, and how to provide credentials to access a sandbox. We
    looked at the procedure to deploy metadata on sandboxes and discussed how Force.com
    helps developers and DevOps in everyday life.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will study the source code versioning system and its types.
    We will mainly focus on Git distributed version control, and operations performed
    on the Git repository, such as commit, push, merge, and so on. We will also go
    through the step-by-step procedure for setting up our own GitLab server, adding
    a repository, adding users, and creating a branch. We will discuss Git branching
    strategies and protecting branches. Finally, we will learn how to use Git with
    a Salesforce project and how to save Salesforce metadata to Git.
  prefs: []
  type: TYPE_NORMAL
- en: What is meant by SCVS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Source Code Versioning System** (**SCVS**) as the name indicates, it helps
    to manage source code changes over time. There are many source control versioning
    systems available such as CVS, SVN, Git, and so on. Version control maintains
    the history of every file change, and helps developers to track changes in an
    application. The main reasons behind having a version control system are to be
    able track changes in an application and to be able to revert back if something
    goes wrong. As code undergoes various changes, version control helps us to maintain
    a working version of code, and with the help of versioning, we can also maintain
    different environments such as testing, staging, and production. Multiple users
    can work on the same application source code simultaneously using version control.'
  prefs: []
  type: TYPE_NORMAL
- en: There are two varieties of version control, centralized and distributed. In
    centralized version control, there is one central repository where each user gets
    their own working copy. If anyone commits their changes to the source control
    system, other co-users can get those changes by updating their working copy. Subversion
    and CVS are centralized version systems.
  prefs: []
  type: TYPE_NORMAL
- en: In distributed version control, each user gets a local repository and working
    copy. Changes made by the user are saved in their local repository when they commit
    code. Co-users can get those changes when the user pushes the changes to the remote
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Version control in Salesforce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Salesforce has a limited audit capability to track changes in a sandbox. Making
    changes in the production environment is risky, and we are not able to see versions
    of files or track changes in a sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: Reverting code in Salesforce is a very difficult task if we don't have version
    control in place.
  prefs: []
  type: TYPE_NORMAL
- en: Why doesn't Salesforce provide its own version control? Salesforce was basically
    designed for users to get their application running on the cloud without much
    understanding of the  code. We can build small applications in Salesforce with
    just clicks, so Salesforce didn't focus on having version control. In Salesforce,
    we can modify the Salesforce organization in place so we don't need to have code
    on a local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Mostly people working on Salesforce think that there is lot of work involved
    in setting up version control for Salesforce, which is only required if we have
    large teams. To set up version control for Salesforce projects, developers and
    administrators need to learn how to use version control systems, and they might
    need some knowledge of the command-line instructions involved. But we have many
    integrations of Git where we don't need to know about commands as we can use buttons
    or tabs instead.
  prefs: []
  type: TYPE_NORMAL
- en: As we have mentioned here, Salesforce does not provide any in-built version
    control, so we need to set up a source code version control system. There are
    many version control systems, but the most popular version control system is Git.
    In the following section, we will go through the GitLab setup and using Git in
    a Salesforce project.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is a commonly used version control system invented by Linus Torvalds. It
    is a distributed type of version control which enables more than one developer
    to work on the same project simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: It helps to maintain versions of source code so that if anything goes wrong,
    you can always revert back to the working version of your source code. To use
    Git, you will need a repository that will store your source code and make it available
    to all who are working on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Git uses the GitHub as a hosting service for Git repositories, and so first
    of all, you will need a GitHub account so that you will be able to create a repository
    to store your source code. There are two types of repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public repository:** You can host public repositories on GitHub for free.
    These repositories will be accessible to all, so if you are going to save your
    important source code on GitHub, you should not save it on a public repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private repository:** These repositories are protected; nobody can access
    them unless you give them access. You have to pay for private repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have introduced GitHub, but for now we will be using GitLab. GitLab is a
    fully featured open source Git server that you can install on your server. GitLab
    is a database-backend web application and is available in both community and enterprise
    editions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move to our next point, which is setting up our own GitLab server.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a GitLab server on a Linux instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To set up the server, an omnibus package installation is recommended. We will
    install the GitLab Community Edition on an Ubuntu 16.04 server. You can install
    GitLab on other operating systems such as Ubuntu, Centos, Debian, and so on; you
    can find a list here: [https://about.gitlab.com/installation/](https://about.gitlab.com/installation/).
    An omnibus package installation is the recommended method by GitLab itself, as
    the set up is easy and the upgrade process is also painless.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GitLab recommends using a server with the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 2 cores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install the required packages before installing GitLab Community Edition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For the Postfix installation, choose Internet Site when prompted. On the next
    screen, enter your server''s domain name or IP address to configure the system
    that will send mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41906147-0b5a-4a4c-b251-105bf0518d4a.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's move on to the GitLab server installation.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the GitLab server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have installed all required dependencies for the GitLab server. Run the
    following commands to install GitLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can examine `script.deb.sh` and check all the packages that will be installed
    and their configuration, as you need to know what is being installed on your server.
    Once you have verified `script.deb.sh`, you are good to go for the next step in
    the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The repository is set up! You can now install packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'This script will set up our server to use the GitLab maintained repositories.
    After completing this script, we will install the actual GitLab application with
    `apt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install the required components on our system, and the GitLab configuration
    file is `/etc/gitlab/gitlab.rb`. You can edit the configuration file and reconfigure
    the GitLab server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After installation is complete, visit your GitLab external URL and set up a
    password for the root user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23e59a25-059a-449d-b414-a2dec15fc165.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Log in with root user, and you will get the Welcome page for GitLab, as shown
    in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3721efa6-24d6-4ca7-a5ca-86629aacb6ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you have successfully set up GitLab, let's use it and create your first
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first project in GitLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Log in to your GitLab server and follow the steps to create your first project
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose Create a Project to create a project on the GitLab server. In the project,
    we will store all our code, configuration, and other information related to our
    application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a project name and description. For now, we will create a sample Hello
    World node application. Our project name is `Sample`*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, comes the visibility level of your project; it can be public, internal,
    or private.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Public  repositories can be cloned by anyone; any logged-in user can clone internal
    project repositories. To clone a private project, a user needs explicit access
    to clone the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For now we will keep it public and check Initialize repository with a README
    for a quick start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Create Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e074c17-5960-4b97-9c42-c835aaf6e127.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clone the project URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f41ad861-d991-4223-96d8-a6c065487bd9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have Git commands installed on your machine, run the following command
    to clone the repository to your local machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the `Readme.md` file is already created in the `Sample` project. You
    are all set to start working with your Git repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with a Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have cloned the Sample repository on our local machine. Now we will see
    how to work with the Git repository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Node.js Hello World application that will create an HTTP server and
    respond to all requests on port `8080` with the string `Hello World`. Here is
    the sample code for the Node.js application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Save the code in  `**main.js** `and add this file to our Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check untracked changes in our Git repository with following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: By default, GitLab sets **master** branch as our default branch. The newly added `main.js`
    file is not present on the remote repository, and it is also not tracked in the
    local Git.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Every file in the Git working directory is **tracked**, **untracked**, or **ignored**.
    The files which are committed or staged before are tracked files. Files that are
    not staged or committed are untracked files. The files that you don't want to
    add in the repository, such as files with credentials or machine-generated files,
    are mentioned in the `.gitignore` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example of a `.gitignore` file coded to ignore all files with a `.log` extension
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the `main.js` file to the local repository; it needs to be indexed
    first. The `git add` command updates the index using the content found in the
    working directory. These changes will be staged for commit. You can add all changes
    into the index using `*` or the `-a` option in the  `git add` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to commit staged changes to the local repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `commit` command is used to commit changes in the local repository. Other
    developers will not be able to see the changes. The important thing while committing
    your changes is to provide a commit message with the `-m` option in the command.
    Make sure your commit message relates to changes you're making in the code so
    that others using it will be able to understand your changes.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't mention the filename, it will commit all the recent changes you
    made in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step is to push your local changes to the remote repository; the
    push operation refers to pushing changes to the remote repository. While pushing
    changes, it is important to mention the origin of the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Git will ask you for your credentials to authenticate the user and the push
    changes to the remote repository hosted on the GitLab server. Now you will be
    able to see those changes in the GitLab web URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ceebb13-1b5c-4023-8156-c537446b9171.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing the commit history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check logs using the command line, switch to the Git repository and
    run the `git log` command, as shown here, to check the most recent commits. This
    command without any extra argument shows commits made in the repository in reverse
    order. The command output also contains information such as the SHA-1 checksum,
    the commit message, the date and time of the commit, and author details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check Git commit messages with the timestamp and user details, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/07b6d0f0-4fd0-476d-ba6d-45107a7fb47c.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a user to GitLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps to add a user are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to GitLab with admin user (root).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the spanner icon (top right) to enter Admin area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e876e8bc-381f-4d24-be7e-991764ac3c9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see three buttons, New project, New user, and  New group. Click on
    New user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ef2aa1a-a16a-4e08-a67b-3372d640e0fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill in the required information – Name, Username, and Email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd0ae5ea-f625-4c0f-b72c-cd678e28af51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide a project user limit as per your organization''s rules. Also, if you
    want a user to be able to create a group, give them access to creating a group
    by checking Can create group. If you want a user to have limited access, then
    select the Access level to be Regular, and if a user needs Admin privileges, then
    select the Access level to be Admin for the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4319775c-1803-42c1-9ceb-7db6c1f18db8.png)'
  prefs: []
  type: TYPE_IMG
- en: After filling in all the required information, click on Create user. This will
    create the user and send a password reset link to the user's Email ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This issue can be due to the `LANG` and `LC_*` variables, which are unset in
    the Linux system. In the omnibus installation, we can set these variables using
    the following commands and run the installation command again or reconfigure GitLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Branching strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Branching is a very useful feature provided by Git. It helps to develop multiple
    features in parallel. Branching can be useful to define environment specific codes
    such as develop, test, stage, and production. Usually, the environment to Git
    branch mapping will be, for example, the code for the development environment
    stored in the develop Git branch; for the test environment, we use the test Git
    branch, and so on. For the production environment, we use the master branch, as
    it is the first default branch created when we create any Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how we can create a branch using the web UI:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to GitLab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to your repository, Sample*,* that we created in the *Creating your first
    project in GitLab* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c844a81-0773-4d00-a0ef-f12190ac71ee.png)'
  prefs: []
  type: TYPE_IMG
- en: As you see in this screenshot, we have only one branch which is the master,
    and is the default branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Branch, you will be redirected to a page where you can see all the
    active branches for this repository. Currently, we have a master branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d47487d6-4589-463b-925b-568f041d5877.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on New branch, type in the branch name,  `develop. `We will be using
    this branch for development:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/67f342b7-1ca6-43e8-8e9c-6484992a54b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Create branch. That''s it. You can see the new branch that''s been
    created from the master branch. You can now create another branch from the develop
    or master branch. As the develop branch is created from the master branch, all
    the code in the develop branch will be the same as in the master branch, for now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6f05b46a-92f0-451b-bf4c-d9620a397cd4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, if we go to Active Branches, we can see two branches in the list. There
    is a difference between those two branches. The master branch is the default branch
    and the **protected** branch, but the newly created develop branch is not a protected
    branch. The only users who are authorized to make modifications in a protected
    branch are mostly senior developers or project leads. Due to this, we can avoid
    the problem of multiple developers simultaneously working on different features.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handling branches using the Git CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the Git clone, you will, by default, get code for the default branch
    set on your repository. In our case, it is the master branch. Let''s check which
    branch we have cloned using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The asterisk in front of the branch name indicates a current branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a **test** branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a new branch named `test`, on your local Git repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now you will see two branches in your local Git repository, the  `git branch
    <BRANCH_NAME>` command will create a branch from the current branch. So, the test
    branch is created from the master branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the newly created the `test` branch and `push` it to the `remote`
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify if you can see the test branch in the GitLab web UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0bc49c78-a4de-4603-adcf-f574081d66d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Merging changes from develop to master
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how to merge changes from the develop branch to the master branch:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can specify which branch to clone from the Git repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For testing, we will make a small change, such as changing the console log
    message from `Hello World` to `Hello Git`.  Add the changes to Git and push the
    changes to the remote develop branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If you want to create a merge request, open the URL shown in `remote`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assign it to the person who has the right to accept a merge request on the
    master branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7afd5aae-3308-4fbf-b539-6f3ace6ef002.png)'
  prefs: []
  type: TYPE_IMG
- en: In our case, it is assigned to Administrator. Fill out the required information
    and click Submit Merge Request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Administrator user can see the merge request and, after verifying changes
    done by developers, if there are no merge conflicts and all previous checks are
    passed successfully, then the Administrator will accept the merge request by clicking
    on Merge. Changes in test will be moved to the master branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6d43bc9b-9d12-4cdd-b997-8cb2773a712b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Administrator can modify the commit message, and remove the source branch
    if it is not required afterwards. If something goes wrong, the Administrator can
    revert the changes as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/613a13ec-68a0-434e-b9a2-279ff1ed43f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Git in the Eclipse IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Steps 1 to 3 are already explained in [Chapter 1](ba728059-d1a1-4d85-baf1-ac032fcc4b3c.xhtml),
    *Salesforce Development and Delivery Process*:'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse installation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Force.com IDE plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure Force.com project in Eclipse
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will continue with the next steps in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Git and pushing code to Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we need to configure Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the repository in a new folder by right-clicking on the folder and selecting  Git
    repository here...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a3d3234-0f56-4354-aa5a-3e58f88565f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we are not selecting the Make it Bare and click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc9b2b70-393e-4fa8-90b1-3d0f2ab3d15d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see the next screen. Click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d783631-0f56-43ec-bf46-4d67ca7a62c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-click on the folder and select TortoiseGit and click on Settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9cf475de-165d-470d-9a9e-3d014470ad02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see the next screen. Click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1de26064-7707-47e2-8e6a-4cb9ff8decdf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Git and enter the Name and Email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b84aad3b-e9c7-4c8f-8f0d-c9c5e36b2915.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see the next screen. Select the Git and click on Remote:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/db226253-3903-4891-b9f7-9cd19dfebb2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Open the Git project in the browser and select the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the HTTP URL from the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e912ccd-8b5d-40c4-9f70-a253cddcc3a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the copied URL in URL and Push URL. Select All in the Tags field and click
    on the Add New/Save button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/316cad16-87ce-49c7-8fb6-99b38285e876.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Yes button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9e48ef1-2b57-4d52-89e4-5b8b7f91fb85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see this screen. Click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/619d8dfd-758e-4202-9ba0-a509eb285aa2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the Git credentials in this screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58aed3e3-cf49-46ab-8da0-adc3bdad5dca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ab4161d-1b1b-4744-9261-8327b91b8321.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have completed the process, click on the Close button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1affd969-3f5e-4b40-92a9-8c93bf4ac9ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f9507bd-3742-4900-9a8b-7ed6ed540894.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you have to pull the files from the Git repository, the steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the same file and select TortoiseGit and click on Pull...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de86ea7a-9ff3-4510-9aec-d166d4c19eb7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will get one popup, as shown. Select ... to select Remote Branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/67726e25-8b96-4476-8e15-9dde9ef413d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here you can see all the list of remote branches, select the specific branch
    and click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8fb207b9-3b5f-484d-8893-56ce4791fea5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the process is complete, click on Close:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/90c8d6c8-5027-418d-92be-60c4d0407234.png)'
  prefs: []
  type: TYPE_IMG
- en: Now the connection has been created and all the files copied to the local folder
    from the Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add your files into this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a9386f9-be4b-4129-aca2-40ea9f0dc712.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-click on the same folder and select the TortoiseGit and click on Add...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/92357740-772d-4da5-a46c-1597eb5733e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select all the files and click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86b87bf2-1377-463a-891c-28cdbed3079c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the process is complete, click on Commit...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc533217-4134-475d-8968-a8ad01220038.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now add the commit message and click on Commit & Push:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/defa7325-e9c0-4dc0-8790-b6702cd639f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see all the remote branches, select the ... button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac360500-b055-4ff3-ab9f-8fecbc4b94dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here you see all the branches, select the specific branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d8ef0a17-c015-445e-b0f6-a97a3b2aee28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now click on OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4387f5c-a17c-4de1-829b-23399b14104b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the process is complete, click on Close:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/535b8f67-e3fa-486a-bef7-fdf6922f0237.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now all the files are moved to the Git repository. Check on the Git repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9e20018-aa5b-45fb-b57c-a914f1657f31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check all the files have been committed correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aed8b7ec-707c-44ee-a012-fcf6a2980bee.png)'
  prefs: []
  type: TYPE_IMG
- en: All code is successfully committed in the Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about version control systems. We have seen what
    version control we have in Salesforce and why we need a version control system
    such as Git. We learned how to install GitLab on on-premise servers using the
    most recommended method by GitLab itself—the omnibus setup. After setting up our
    own GitLab server, we learned how to create our first project in GitLab using
    a web UI. We worked with the Git repository using Git commands, such as `git clone`, 
    `add`, `commit`, `push`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed the branching strategy in Git and general scenarios where we need
    to work with different branches. We have learned about concepts such as protected
    branch, and default branch. We also got to know how we can create a new branch
    from an existing branch, and merge code from one branch to another branch. Finally,
    we learned  how to use Git for our Salesforce project with Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go to our next stage, which is Continuous Integration
    using a Jenkins server. We will learn how Jenkins helps us to automate our daily
    tasks, such as retrieving and deploying metadata using the Force.com migration
    tool and Git.
  prefs: []
  type: TYPE_NORMAL
