- en: Chapter 8. Security, Challenges, and Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this, our final chapter, we are going to be looking at all of the tools
    we have covered in this book and answering the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How the tools can affect the security of your Docker installation?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How they can work together and when should they be used?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What problems and challenges can the tools be used to resolve?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have quite happily been pulling images from the Docker Hub without
    much thought as to who created them or what is actually installed. This hasn't
    been too much of a worry as we have been creating ad-hoc environments to launch
    the containers in.
  prefs: []
  type: TYPE_NORMAL
- en: As we move towards production and resolving the worked in dev problem, it starts
    to become important to know what it is that you are installing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout the previous chapters, we have been using the following container
    images:'
  prefs: []
  type: TYPE_NORMAL
- en: 'WordPress: [https://hub.docker.com/_/wordpress/](https://hub.docker.com/_/wordpress/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL: [https://hub.docker.com/_/mysql/](https://hub.docker.com/_/mysql/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MariaDB: [https://hub.docker.com/_/mariadb/](https://hub.docker.com/_/mariadb/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All three of these images are classified as official images and have not only
    been built to a documented standard, they are also peer reviewed at each pull
    request.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are then the three images from my own Docker Hub account:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consul: [https://hub.docker.com/r/russmckendrick/consul/](https://hub.docker.com/r/russmckendrick/consul/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NGINX: [https://hub.docker.com/r/russmckendrick/nginx/](https://hub.docker.com/r/russmckendrick/nginx/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cluster Example: [https://hub.docker.com/r/russmckendrick/cluster/](https://hub.docker.com/r/russmckendrick/cluster/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we look at the official images, let's take a look at the Consul image
    from my own Docker Hub account and why it is safe to trust it.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are going to look at the three types of images that can be downloaded
    from the Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: I have chosen to concentrate on the Docker Hub rather than private registries
    as the tools we have been looking at the previous chapters all pull from the Docker
    Hub, and it is also more likely that you or your end users will use the Docker
    Hub as their primary resource for their image files.
  prefs: []
  type: TYPE_NORMAL
- en: Dockerfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Consul container image is built using a Dockerfile, which is publically
    accessibly on my GitHub account. Unlike images that are pushed, more on this later
    in the chapter, it means that you can exactly see action has been taken to build
    the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we are using the `russmckendrick/base` image as our starting point.
    Again, the Dockerfile for this image is publicly available, so let''s look at
    this now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, all this does is:'
  prefs: []
  type: TYPE_NORMAL
- en: Uses the latest version of the official Alpine Linux image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs an `apk update` and then `apk upgrade` to ensure that all the packages
    are updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installs the `ca-certificates` and `bash` packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleans up any artifacts left over from the upgrade and installation of the packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, now that we know what the base image looks like, let''s move onto the Dockerfile
    for the Consul container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there is a little more going on in this Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: We will define that we are using the latest version of `russmckendrick/base`
    as our base image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we will set three environment variables. Firstly, the version of Consul
    we want to download, and then the checksum for the files, which we will grab from
    a third-party website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will then install the `wget` binary using the APK package manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next up, we will download the Consul binaries from the HashiCorp website, notice
    that we are downloading over HTTPS and that we are running `sha256sum` against
    the downloaded file to check whether it is has been tampered with. If the file
    doesn't pass this test, then the build will fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the zip file is confirmed to be the correct one, we uncompress it and copy
    the binary in place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will then do the same actions again for the Consul web interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we will configure some default actions of when the container is launched
    by exposing the correct port, entry point, and default command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of this means that you can see exactly what is installed and how the image
    is configured before you make the decision to download a container using the image.
  prefs: []
  type: TYPE_NORMAL
- en: Official images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are are just over 100 images that are flagged as official. You view these
    in the Docker Hub at [https://hub.docker.com/explore/](https://hub.docker.com/explore/).
    Official images are easy to spot as they are not preceded by a username, for example,
    the following are the docker pull lines for the official NGINX image and also
    my own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the top one is the official image.
  prefs: []
  type: TYPE_NORMAL
- en: 'A lot of the official images are maintained by the upstream providers, for
    example, the CentOS, Debian, and Jenkins images are maintained by members of the
    respective projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/docker-library/official-images/blob/master/library/centos](https://github.com/docker-library/official-images/blob/master/library/centos)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/docker-library/official-images/blob/master/library/debian](https://github.com/docker-library/official-images/blob/master/library/debian)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/docker-library/official-images/blob/master/library/jenkins](https://github.com/docker-library/official-images/blob/master/library/jenkins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, there is a review process for each pull request submitted. This helps
    in ensuring that each official image is both consistent and built with security
    in mind.
  prefs: []
  type: TYPE_NORMAL
- en: The other important thing to note about official images is that no official
    image can be derived from, or depend on, non-official images. This means that
    there should be no way a non-official image's content can find its way into an
    official image.
  prefs: []
  type: TYPE_NORMAL
- en: A full detailed explanation on the build standards for official images, as well
    details of what is expected of an official image maintainer can be found in the
    Docker Library GitHub page at [https://github.com/docker-library/official-images/](https://github.com/docker-library/official-images/).
  prefs: []
  type: TYPE_NORMAL
- en: The downside of Docker Hub is that it can sometimes be slow, and I mean really
    slow. The situation has improved over the past 12 months, but there have been
    times when Docker's build system has had a big backlog, meaning that your build
    is queued.
  prefs: []
  type: TYPE_NORMAL
- en: This is only a problem if you need to trigger a build and want it immediately
    available, which could be a case if you need to quickly fix this application bug
    before anyone notices.
  prefs: []
  type: TYPE_NORMAL
- en: Pushed images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, there is an elephant in the room, the complete images, which have been
    pushed from a user to their Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I try to avoid pushing complete images to my Docker Hub account,
    as they are something I would typically not recommend using, so why would I expect
    other users to use them?
  prefs: []
  type: TYPE_NORMAL
- en: As these images are not being built by a published Dockerfile, it is difficult
    to get an idea of the standard they have built to and exactly what they contain.
  prefs: []
  type: TYPE_NORMAL
- en: Docker has tried to address this by introducing content trust to the Docker
    Hub, what this does is sign the image before it is pushed to the Docker Hub with
    the publisher's private key. When you download the image, the Docker Engine uses
    the publisher's public key to verify that the content of the image is exactly
    how the publisher intended it to be.
  prefs: []
  type: TYPE_NORMAL
- en: This helps to ensure that the image has not been tampered with at any point
    of the image's journey from the publisher to you running the container.
  prefs: []
  type: TYPE_NORMAL
- en: More information on Content Trust can be found at [https://docs.docker.com/engine/security/trust/content_trust/](https://docs.docker.com/engine/security/trust/content_trust/).
  prefs: []
  type: TYPE_NORMAL
- en: This is useful if you are using the Docker Hub to publish private images that
    contain propriety applications or code bases you do want to be publically available.
  prefs: []
  type: TYPE_NORMAL
- en: However, for publically available images, I would always question why the image
    had to be pushed to the Docker Hub rather than being built with a Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Cloud
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the time I started writing this book, Docker has introduced a commercial
    service called Docker Cloud. This service is described as a hosted service for
    Docker container management and deployment by Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find details of the service at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.docker.com/products/docker-cloud](https://www.docker.com/products/docker-cloud)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cloud.docker.com/](https://cloud.docker.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, why mention this service when we are talking about security? Well, in May
    2016, Docker announced that they are adding a Security Scanning feature, which,
    at the time of writing this book, is free of charge.
  prefs: []
  type: TYPE_NORMAL
- en: This feature works with your Private Repositories hosted on the Docker Hub,
    meaning that any images you have pushed can be scanned.
  prefs: []
  type: TYPE_NORMAL
- en: The service performs a static analysis on your images, looking for known vulnerabilities
    in the binaries you have installed.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in [Chapter 6](ch06.html "Chapter 6. Extending Your Infrastructure"),
    *Extending Your Infrastructure*, we created an image using Packer, I still had
    an old build of this image on my local machine, so I pushed it to a private Docker
    Hub repository and took advantage of the free trial of both Docker Cloud and Docker
    Security Scanning.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the following result, the service has found three critical
    vulnerabilities in the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Cloud](img/B05468_Ch08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This means that it is time to update my base image and the version of NodeJS
    being used.
  prefs: []
  type: TYPE_NORMAL
- en: 'More details on the service and how it works can be found in the following
    announcement blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://blog.docker.com/2016/05/docker-security-scanning/](https://blog.docker.com/2016/05/docker-security-scanning/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few alternatives to this service, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clair**: [https://github.com/coreos/clair](https://github.com/coreos/clair)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Banyan** **Collector**: [https://github.com/banyanops/collector](https://github.com/banyanops/collector)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Docker Bench for Security**: [https://github.com/docker/docker-bench-security](https://github.com/docker/docker-bench-security)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, the newly launched Docker service is the simplest one to get started
    with, as it already has deep level of integration with other Docker services.
  prefs: []
  type: TYPE_NORMAL
- en: Private registries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that it is possible to use a private registry to distribute your Docker
    images. I would recommend taking this approach if you have to bundle your application's
    code within an image.
  prefs: []
  type: TYPE_NORMAL
- en: A private registry is a resource that allows you push and pull images; typically,
    it is only available to trusted hosts within your network and is not publically
    available.
  prefs: []
  type: TYPE_NORMAL
- en: Private registries do not allow you to host automated builds and they do not
    currently support content trust, this is why they are deployed on private or locked
    down networks.
  prefs: []
  type: TYPE_NORMAL
- en: More information on hosting your own private registry can be found at the official
    documentation at [https://docs.docker.com/registry/](https://docs.docker.com/registry/).
  prefs: []
  type: TYPE_NORMAL
- en: The challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, why have we been looking at extending the core Docker Engine? Here are a
    few scenarios that the tools we have covered in the previous chapters could be
    used to add value or resolve a potential problem.
  prefs: []
  type: TYPE_NORMAL
- en: Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Way back, at the start of [Chapter 1](ch01.html "Chapter 1. Introduction to
    Extending Docker"), *Introduction to Extending Docker*, we saw the *Worked fine
    in dev, Ops problem now* meme and how it is worryingly still relevant today. Containers
    go a long way to resolve this issue; in fact, Docker is seen as a great unifier
    by a lot of people.
  prefs: []
  type: TYPE_NORMAL
- en: However, if developers do not have a way of easily introducing these tools into
    their day-to-day lives, then you are not resolving the issue raised by the meme.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tools that could help developers start to use Docker locally as the first
    step of the development process are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Toolbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Along with the recently announced, but currently in private beta, native versions
    of Docker for OS X and Windows, more details on this can be found in the announcement
    blog post at [https://blog.docker.com/2016/03/docker-for-mac-windows-beta/](https://blog.docker.com/2016/03/docker-for-mac-windows-beta/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, depending on your existing workflows, you could also use the
    following tools to introduce containers to your existing workflows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Staging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Depending on your requirements, you could use the following plugins in conjunction
    with Docker Compose to create a basic staging environment with multi-host networking
    and storage:'
  prefs: []
  type: TYPE_NORMAL
- en: Convoy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker overlay network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flocker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REX-Ray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weave
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also use these tools to give you a good level of control over where
    the containers are deployed within your staging environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Swarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rancher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, your developers could have some level of access in order to be
    able to deploy a test version using these tools either via continuous integration
    tools, web interfaces, or via command line.
  prefs: []
  type: TYPE_NORMAL
- en: Production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again, you could use the following plugins to create a basic production-ready
    environment using Docker Compose:'
  prefs: []
  type: TYPE_NORMAL
- en: Convoy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Overlay Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flocker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REX-Ray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weave
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, you will probably want your production environment to look more after
    itself in terms of reacting to failure, scaling events, and automatic registration
    of containers with services such as DNS and Load Balancers:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon ECS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Swarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rancher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these listed tools should be considered production-ready. However, as Puppet
    and Ansible offer little in the way of scheduling, you should only really consider
    them if you are introducing Docker into an existing Puppet or Ansible-managed
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: If there is one thing I hope you have taken from this book, it is that there
    doesn't have to be one size fits all when it comes to using Docker.
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed, there are tools supplied by both Docker and third parties that
    allow you scale your containers from a single host to potentially hundreds or
    thousands.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we experienced using combinations of the tools together.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we have been using both Docker Storage and Network plugins to create
    a highly available WordPress installation using both the tools provided by Docker
    themselves, that is, Docker Compose and Docker Swarm, as well Kubernetes and Rancher.
  prefs: []
  type: TYPE_NORMAL
- en: We also deployed our underlying Docker infrastructure using Docker Machine,
    Ansible, as well as tools such as Kubernetes and Rancher.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we deployed various first-party and third-party plugins to help with storage,
    networking, and features such as load balancing to take full advantage of the
    environment that we have been deploying to, such as Amazon Web Service and DigitalOcean.
  prefs: []
  type: TYPE_NORMAL
- en: All the tools that we have looked at compliment the core Docker Engine, and
    in most cases, there is little or no change needed to be made to your Docker images
    to start using the plugins or third-party tools.
  prefs: []
  type: TYPE_NORMAL
- en: All of this means that it is relatively easy to build a highly available, yet
    easy to use platform to deploy your applications into whether you are using a
    public cloud, your own virtual machines, bare metal servers, or just your local
    laptop, and tailor it to your developers, application, and your own needs, all
    while ensuring that if it worked in development, it will work in production.
  prefs: []
  type: TYPE_NORMAL
