- en: Chapter 8. Security, Challenges, and Conclusions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：安全性、挑战与结论
- en: 'In this, our final chapter, we are going to be looking at all of the tools
    we have covered in this book and answering the following questions:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们将回顾本书中介绍的所有工具，并回答以下问题：
- en: How the tools can affect the security of your Docker installation?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些工具如何影响你Docker安装的安全性？
- en: How they can work together and when should they be used?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们如何协同工作，并且什么时候应该使用？
- en: What problems and challenges can the tools be used to resolve?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些工具可以解决哪些问题和挑战？
- en: Securing your containers
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器的安全性
- en: So far, we have quite happily been pulling images from the Docker Hub without
    much thought as to who created them or what is actually installed. This hasn't
    been too much of a worry as we have been creating ad-hoc environments to launch
    the containers in.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们相当愉快地从Docker Hub拉取镜像，而没有太多考虑是谁创建的，或者实际安装了什么。由于我们一直在创建临时环境来启动容器，这也没带来太多担忧。
- en: As we move towards production and resolving the worked in dev problem, it starts
    to become important to know what it is that you are installing.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们向生产环境过渡并解决开发过程中遇到的问题，了解你正在安装的内容变得越来越重要。
- en: 'Throughout the previous chapters, we have been using the following container
    images:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们使用了以下容器镜像：
- en: 'WordPress: [https://hub.docker.com/_/wordpress/](https://hub.docker.com/_/wordpress/)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'WordPress: [https://hub.docker.com/_/wordpress/](https://hub.docker.com/_/wordpress/)'
- en: 'MySQL: [https://hub.docker.com/_/mysql/](https://hub.docker.com/_/mysql/)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MySQL: [https://hub.docker.com/_/mysql/](https://hub.docker.com/_/mysql/)'
- en: 'MariaDB: [https://hub.docker.com/_/mariadb/](https://hub.docker.com/_/mariadb/)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MariaDB: [https://hub.docker.com/_/mariadb/](https://hub.docker.com/_/mariadb/)'
- en: All three of these images are classified as official images and have not only
    been built to a documented standard, they are also peer reviewed at each pull
    request.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这三张镜像都被归类为官方镜像，不仅遵循了文档化标准，还在每次拉取请求时进行了同行评审。
- en: 'There are then the three images from my own Docker Hub account:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是来自我自己Docker Hub账户的三张镜像：
- en: 'Consul: [https://hub.docker.com/r/russmckendrick/consul/](https://hub.docker.com/r/russmckendrick/consul/)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Consul: [https://hub.docker.com/r/russmckendrick/consul/](https://hub.docker.com/r/russmckendrick/consul/)'
- en: 'NGINX: [https://hub.docker.com/r/russmckendrick/nginx/](https://hub.docker.com/r/russmckendrick/nginx/)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NGINX: [https://hub.docker.com/r/russmckendrick/nginx/](https://hub.docker.com/r/russmckendrick/nginx/)'
- en: 'Cluster Example: [https://hub.docker.com/r/russmckendrick/cluster/](https://hub.docker.com/r/russmckendrick/cluster/)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '集群示例: [https://hub.docker.com/r/russmckendrick/cluster/](https://hub.docker.com/r/russmckendrick/cluster/)'
- en: Before we look at the official images, let's take a look at the Consul image
    from my own Docker Hub account and why it is safe to trust it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看官方镜像之前，先看一下我自己在Docker Hub账户中的Consul镜像，了解为什么它是值得信任的。
- en: Docker Hub
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Hub
- en: Here, we are going to look at the three types of images that can be downloaded
    from the Docker Hub.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将看一下可以从Docker Hub下载的三种类型的镜像。
- en: I have chosen to concentrate on the Docker Hub rather than private registries
    as the tools we have been looking at the previous chapters all pull from the Docker
    Hub, and it is also more likely that you or your end users will use the Docker
    Hub as their primary resource for their image files.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择专注于Docker Hub，而不是私有注册表，因为我们在前几章中查看的所有工具都来自Docker Hub，而且你或你的最终用户也更可能将Docker
    Hub作为他们的主要镜像资源。
- en: Dockerfile
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dockerfile
- en: The Consul container image is built using a Dockerfile, which is publically
    accessibly on my GitHub account. Unlike images that are pushed, more on this later
    in the chapter, it means that you can exactly see action has been taken to build
    the image.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Consul容器镜像是通过一个Dockerfile构建的，这个Dockerfile可以公开访问，我的GitHub账户上也有。与推送镜像不同，稍后在本章中会讨论，这意味着你可以清楚地看到为了构建该镜像所采取的具体操作。
- en: 'Firstly, we are using the `russmckendrick/base` image as our starting point.
    Again, the Dockerfile for this image is publicly available, so let''s look at
    this now:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`russmckendrick/base`镜像作为起始点。再次强调，这个镜像的Dockerfile是公开可用的，所以让我们现在来看一下：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, all this does is:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个操作的作用是：
- en: Uses the latest version of the official Alpine Linux image
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用官方Alpine Linux镜像的最新版本
- en: Runs an `apk update` and then `apk upgrade` to ensure that all the packages
    are updated
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行`apk update`，然后执行`apk upgrade`，以确保所有软件包都已更新
- en: Installs the `ca-certificates` and `bash` packages
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`ca-certificates`和`bash`软件包
- en: Cleans up any artifacts left over from the upgrade and installation of the packages
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理升级和安装软件包后遗留的任何残余物
- en: 'So, now that we know what the base image looks like, let''s move onto the Dockerfile
    for the Consul container:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道基础镜像是什么样子了，接下来我们来看看Consul容器的Dockerfile：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, there is a little more going on in this Dockerfile:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个Dockerfile里面有更多的内容：
- en: We will define that we are using the latest version of `russmckendrick/base`
    as our base image.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将定义使用最新版本的`russmckendrick/base`作为我们的基础镜像。
- en: Then, we will set three environment variables. Firstly, the version of Consul
    we want to download, and then the checksum for the files, which we will grab from
    a third-party website.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将设置三个环境变量。首先是我们想要下载的Consul版本，然后是文件的校验和，我们将从第三方网站获取它。
- en: We will then install the `wget` binary using the APK package manager.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将使用APK包管理器安装`wget`二进制文件。
- en: Next up, we will download the Consul binaries from the HashiCorp website, notice
    that we are downloading over HTTPS and that we are running `sha256sum` against
    the downloaded file to check whether it is has been tampered with. If the file
    doesn't pass this test, then the build will fail.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将从HashiCorp网站下载Consul二进制文件，注意我们是通过HTTPS下载，并且运行`sha256sum`命令检查下载的文件是否被篡改。如果文件没有通过这个测试，构建将会失败。
- en: Once the zip file is confirmed to be the correct one, we uncompress it and copy
    the binary in place.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦确认zip文件是正确的，我们解压它并将二进制文件复制到正确的位置。
- en: We will then do the same actions again for the Consul web interface.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将对Consul Web界面执行相同的操作。
- en: Finally, we will configure some default actions of when the container is launched
    by exposing the correct port, entry point, and default command.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将配置一些容器启动时的默认行为，例如暴露正确的端口、入口点和默认命令。
- en: All of this means that you can see exactly what is installed and how the image
    is configured before you make the decision to download a container using the image.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些意味着，在决定下载使用该镜像的容器之前，你可以确切看到安装了什么，以及镜像是如何配置的。
- en: Official images
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 官方镜像
- en: 'There are are just over 100 images that are flagged as official. You view these
    in the Docker Hub at [https://hub.docker.com/explore/](https://hub.docker.com/explore/).
    Official images are easy to spot as they are not preceded by a username, for example,
    the following are the docker pull lines for the official NGINX image and also
    my own:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 官方标记的镜像数量略超过100个。你可以在Docker Hub中查看这些镜像，网址为[https://hub.docker.com/explore/](https://hub.docker.com/explore/)。官方镜像很容易辨识，因为它们前面没有用户名，例如，以下是官方NGINX镜像和我自己镜像的docker
    pull命令：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the top one is the official image.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，顶部的那个是官方镜像。
- en: 'A lot of the official images are maintained by the upstream providers, for
    example, the CentOS, Debian, and Jenkins images are maintained by members of the
    respective projects:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 很多官方镜像是由上游提供商维护的，例如，CentOS、Debian和Jenkins镜像是由各自项目的成员维护的：
- en: '[https://github.com/docker-library/official-images/blob/master/library/centos](https://github.com/docker-library/official-images/blob/master/library/centos)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/docker-library/official-images/blob/master/library/centos](https://github.com/docker-library/official-images/blob/master/library/centos)'
- en: '[https://github.com/docker-library/official-images/blob/master/library/debian](https://github.com/docker-library/official-images/blob/master/library/debian)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/docker-library/official-images/blob/master/library/debian](https://github.com/docker-library/official-images/blob/master/library/debian)'
- en: '[https://github.com/docker-library/official-images/blob/master/library/jenkins](https://github.com/docker-library/official-images/blob/master/library/jenkins)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/docker-library/official-images/blob/master/library/jenkins](https://github.com/docker-library/official-images/blob/master/library/jenkins)'
- en: Also, there is a review process for each pull request submitted. This helps
    in ensuring that each official image is both consistent and built with security
    in mind.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个提交的拉取请求都有一个审核流程。这有助于确保每个官方镜像都是一致的，并且在构建时考虑到安全性。
- en: The other important thing to note about official images is that no official
    image can be derived from, or depend on, non-official images. This means that
    there should be no way a non-official image's content can find its way into an
    official image.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关于官方镜像需要注意的重要点是，任何官方镜像都不能从非官方镜像派生或依赖于非官方镜像。这意味着，非官方镜像的内容不应以任何方式进入官方镜像。
- en: A full detailed explanation on the build standards for official images, as well
    details of what is expected of an official image maintainer can be found in the
    Docker Library GitHub page at [https://github.com/docker-library/official-images/](https://github.com/docker-library/official-images/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 官方镜像的构建标准以及官方镜像维护者的要求，详细说明可以在 Docker Library GitHub 页面找到，地址是 [https://github.com/docker-library/official-images/](https://github.com/docker-library/official-images/)。
- en: The downside of Docker Hub is that it can sometimes be slow, and I mean really
    slow. The situation has improved over the past 12 months, but there have been
    times when Docker's build system has had a big backlog, meaning that your build
    is queued.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 的缺点之一是它有时会非常慢，我指的是真正的慢。过去 12 个月中情况有所改善，但有时 Docker 的构建系统会出现大量积压，导致你的构建被排队。
- en: This is only a problem if you need to trigger a build and want it immediately
    available, which could be a case if you need to quickly fix this application bug
    before anyone notices.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在需要触发构建并希望它立即可用时，这才是一个问题。如果你需要在别人注意到之前快速修复应用程序 bug，可能就会遇到这种情况。
- en: Pushed images
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推送的镜像
- en: Finally, there is an elephant in the room, the complete images, which have been
    pushed from a user to their Docker Hub.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一个显而易见的问题，就是那些已经从用户推送到 Docker Hub 的完整镜像。
- en: Personally, I try to avoid pushing complete images to my Docker Hub account,
    as they are something I would typically not recommend using, so why would I expect
    other users to use them?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 个人来说，我尽量避免将完整镜像推送到我的 Docker Hub 账户，因为这些镜像通常是我不推荐使用的，那么为什么我会期望其他用户使用它们呢？
- en: As these images are not being built by a published Dockerfile, it is difficult
    to get an idea of the standard they have built to and exactly what they contain.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些镜像并非通过发布的 Dockerfile 构建，因此很难了解它们所遵循的标准以及具体包含了什么内容。
- en: Docker has tried to address this by introducing content trust to the Docker
    Hub, what this does is sign the image before it is pushed to the Docker Hub with
    the publisher's private key. When you download the image, the Docker Engine uses
    the publisher's public key to verify that the content of the image is exactly
    how the publisher intended it to be.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 通过引入内容信任机制来解决这个问题，内容信任会在镜像推送到 Docker Hub 之前，用发布者的私钥对镜像进行签名。当你下载镜像时，Docker
    引擎会使用发布者的公钥来验证镜像的内容是否与发布者的原意完全一致。
- en: This helps to ensure that the image has not been tampered with at any point
    of the image's journey from the publisher to you running the container.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于确保镜像在从发布者到你运行容器的整个过程中没有被篡改。
- en: More information on Content Trust can be found at [https://docs.docker.com/engine/security/trust/content_trust/](https://docs.docker.com/engine/security/trust/content_trust/).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 关于内容信任的更多信息可以在 [https://docs.docker.com/engine/security/trust/content_trust/](https://docs.docker.com/engine/security/trust/content_trust/)
    找到。
- en: This is useful if you are using the Docker Hub to publish private images that
    contain propriety applications or code bases you do want to be publically available.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Docker Hub 发布包含专有应用程序或代码库的私有镜像，并且这些内容不希望公开，那么这个功能非常有用。
- en: However, for publically available images, I would always question why the image
    had to be pushed to the Docker Hub rather than being built with a Dockerfile.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于公开可用的镜像，我总会质疑为什么镜像要被推送到 Docker Hub，而不是通过 Dockerfile 来构建。
- en: Docker Cloud
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker Cloud
- en: Since the time I started writing this book, Docker has introduced a commercial
    service called Docker Cloud. This service is described as a hosted service for
    Docker container management and deployment by Docker.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我开始写这本书以来，Docker 推出了名为 Docker Cloud 的商业服务。该服务被描述为 Docker 提供的用于 Docker 容器管理和部署的托管服务。
- en: 'You can find details of the service at the following URLs:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下网址了解该服务的详细信息：
- en: '[https://www.docker.com/products/docker-cloud](https://www.docker.com/products/docker-cloud)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.docker.com/products/docker-cloud](https://www.docker.com/products/docker-cloud)'
- en: '[https://cloud.docker.com/](https://cloud.docker.com/)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://cloud.docker.com/](https://cloud.docker.com/)'
- en: So, why mention this service when we are talking about security? Well, in May
    2016, Docker announced that they are adding a Security Scanning feature, which,
    at the time of writing this book, is free of charge.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么在讨论安全时要提到这项服务呢？好吧，2016 年 5 月，Docker 宣布他们将增加一个安全扫描功能，截至本书撰写时，这项功能是免费的。
- en: This feature works with your Private Repositories hosted on the Docker Hub,
    meaning that any images you have pushed can be scanned.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能适用于你在 Docker Hub 上托管的私有仓库，这意味着你推送的任何镜像都可以进行扫描。
- en: The service performs a static analysis on your images, looking for known vulnerabilities
    in the binaries you have installed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务对你的镜像执行静态分析，寻找已安装二进制文件中的已知漏洞。
- en: For example, in [Chapter 6](ch06.html "Chapter 6. Extending Your Infrastructure"),
    *Extending Your Infrastructure*, we created an image using Packer, I still had
    an old build of this image on my local machine, so I pushed it to a private Docker
    Hub repository and took advantage of the free trial of both Docker Cloud and Docker
    Security Scanning.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在[第6章](ch06.html "第6章：扩展你的基础设施")，*扩展你的基础设施*中，我们使用Packer创建了一个镜像，我的本地机器上还保留着这个镜像的旧版本，所以我将其推送到私人Docker
    Hub仓库，并利用Docker Cloud和Docker Security Scanning的免费试用。
- en: 'As you can see from the following result, the service has found three critical
    vulnerabilities in the image:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如下结果所示，该服务在镜像中发现了三个严重漏洞：
- en: '![Docker Cloud](img/B05468_Ch08_01.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Cloud](img/B05468_Ch08_01.jpg)'
- en: This means that it is time to update my base image and the version of NodeJS
    being used.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着是时候更新我的基础镜像和正在使用的NodeJS版本了。
- en: 'More details on the service and how it works can be found in the following
    announcement blog post:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有关该服务及其工作原理的更多细节，请参见以下公告博客文章：
- en: '[https://blog.docker.com/2016/05/docker-security-scanning/](https://blog.docker.com/2016/05/docker-security-scanning/)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://blog.docker.com/2016/05/docker-security-scanning/](https://blog.docker.com/2016/05/docker-security-scanning/)'
- en: 'There are a few alternatives to this service, such as:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个服务有一些替代方案，比如：
- en: '**Clair**: [https://github.com/coreos/clair](https://github.com/coreos/clair)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Clair**: [https://github.com/coreos/clair](https://github.com/coreos/clair)'
- en: '**Banyan** **Collector**: [https://github.com/banyanops/collector](https://github.com/banyanops/collector)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Banyan** **Collector**: [https://github.com/banyanops/collector](https://github.com/banyanops/collector)'
- en: '**The Docker Bench for Security**: [https://github.com/docker/docker-bench-security](https://github.com/docker/docker-bench-security)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker安全基准**： [https://github.com/docker/docker-bench-security](https://github.com/docker/docker-bench-security)'
- en: However, the newly launched Docker service is the simplest one to get started
    with, as it already has deep level of integration with other Docker services.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，刚刚推出的Docker服务是最简单的入门方式，因为它已经与其他Docker服务深度集成。
- en: Private registries
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 私人注册表
- en: Remember that it is possible to use a private registry to distribute your Docker
    images. I would recommend taking this approach if you have to bundle your application's
    code within an image.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以使用私人注册表分发Docker镜像。如果你必须将应用程序的代码打包到镜像中，我建议采用这种方法。
- en: A private registry is a resource that allows you push and pull images; typically,
    it is only available to trusted hosts within your network and is not publically
    available.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 私人注册表是一种资源，允许你推送和拉取镜像；通常它仅对网络中的受信主机开放，不对公众开放。
- en: Private registries do not allow you to host automated builds and they do not
    currently support content trust, this is why they are deployed on private or locked
    down networks.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 私人注册表不允许你托管自动化构建，并且目前不支持内容信任，这就是它们被部署在私人或封闭网络中的原因。
- en: More information on hosting your own private registry can be found at the official
    documentation at [https://docs.docker.com/registry/](https://docs.docker.com/registry/).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有关托管私人注册表的更多信息，请参阅官方文档：[https://docs.docker.com/registry/](https://docs.docker.com/registry/)。
- en: The challenges
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: So, why have we been looking at extending the core Docker Engine? Here are a
    few scenarios that the tools we have covered in the previous chapters could be
    used to add value or resolve a potential problem.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我们要研究扩展核心Docker引擎呢？以下是我们在前几章中所讨论的工具可以用于增值或解决潜在问题的一些场景。
- en: Development
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发
- en: Way back, at the start of [Chapter 1](ch01.html "Chapter 1. Introduction to
    Extending Docker"), *Introduction to Extending Docker*, we saw the *Worked fine
    in dev, Ops problem now* meme and how it is worryingly still relevant today. Containers
    go a long way to resolve this issue; in fact, Docker is seen as a great unifier
    by a lot of people.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 很久以前，在[第1章](ch01.html "第1章：扩展Docker简介")，*扩展Docker简介*中，我们看到了*开发中运行良好，现在是运维问题*的梗图，以及它如今依然令人担忧地相关。容器在很大程度上解决了这个问题；事实上，许多人认为Docker是一个伟大的统一者。
- en: However, if developers do not have a way of easily introducing these tools into
    their day-to-day lives, then you are not resolving the issue raised by the meme.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果开发者没有一种简单的方式将这些工具融入到日常工作中，那么你就无法解决由梗图所揭示的问题。
- en: 'The tools that could help developers start to use Docker locally as the first
    step of the development process are as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可以帮助开发人员开始在本地使用 Docker 作为开发过程的第一步的工具如下：
- en: Docker Toolbox
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 工具箱
- en: Docker Machine
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Machine
- en: Vagrant
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant
- en: Along with the recently announced, but currently in private beta, native versions
    of Docker for OS X and Windows, more details on this can be found in the announcement
    blog post at [https://blog.docker.com/2016/03/docker-for-mac-windows-beta/](https://blog.docker.com/2016/03/docker-for-mac-windows-beta/).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 结合最近发布的、目前处于私人测试版的 Docker 原生版本，适用于 OS X 和 Windows，更多详情可以在[https://blog.docker.com/2016/03/docker-for-mac-windows-beta/](https://blog.docker.com/2016/03/docker-for-mac-windows-beta/)的公告博客中找到。
- en: 'Additionally, depending on your existing workflows, you could also use the
    following tools to introduce containers to your existing workflows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，根据你现有的工作流程，你还可以使用以下工具将容器引入到现有的工作流程中：
- en: Ansible
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible
- en: Jenkins
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins
- en: Packer
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Packer
- en: Puppet
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet
- en: Staging
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Staging
- en: 'Depending on your requirements, you could use the following plugins in conjunction
    with Docker Compose to create a basic staging environment with multi-host networking
    and storage:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的需求，你可以结合 Docker Compose 使用以下插件，创建一个具有多主机网络和存储的基本预发布环境：
- en: Convoy
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Convoy
- en: Docker overlay network
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 覆盖网络
- en: Docker Volumes
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 卷
- en: Flocker
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flocker
- en: REX-Ray
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REX-Ray
- en: Weave
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Weave
- en: 'You can also use these tools to give you a good level of control over where
    the containers are deployed within your staging environment:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用这些工具，方便你控制容器在预发布环境中的部署位置：
- en: Ansible
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible
- en: Docker Swarm
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Jenkins
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins
- en: Puppet
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet
- en: Rancher
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rancher
- en: Additionally, your developers could have some level of access in order to be
    able to deploy a test version using these tools either via continuous integration
    tools, web interfaces, or via command line.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你的开发人员可以在一定程度上访问这些工具，以便通过持续集成工具、网页界面或命令行部署测试版本。
- en: Production
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生产
- en: 'Again, you could use the following plugins to create a basic production-ready
    environment using Docker Compose:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你可以使用以下插件，通过 Docker Compose 创建一个基本的生产就绪环境：
- en: Convoy
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Convoy
- en: Docker Overlay Network
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 覆盖网络
- en: Docker Volumes
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 卷
- en: Flocker
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flocker
- en: REX-Ray
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REX-Ray
- en: Weave
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Weave
- en: 'However, you will probably want your production environment to look more after
    itself in terms of reacting to failure, scaling events, and automatic registration
    of containers with services such as DNS and Load Balancers:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能希望你的生产环境能够更好地应对故障、扩展事件，并自动将容器注册到 DNS 和负载均衡器等服务中：
- en: Ansible
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible
- en: Amazon ECS
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon ECS
- en: Docker Swarm
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Kubernetes
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Puppet
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet
- en: Rancher
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rancher
- en: All these listed tools should be considered production-ready. However, as Puppet
    and Ansible offer little in the way of scheduling, you should only really consider
    them if you are introducing Docker into an existing Puppet or Ansible-managed
    environment.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些列出的工具应该被视为生产就绪。然而，由于 Puppet 和 Ansible 在调度方面的功能有限，只有在你将 Docker 引入到现有的 Puppet
    或 Ansible 管理的环境中时，才应真正考虑使用它们。
- en: If there is one thing I hope you have taken from this book, it is that there
    doesn't have to be one size fits all when it comes to using Docker.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我希望你从本书中学到一点，那就是使用 Docker 时，不必是“一刀切”的解决方案。
- en: As we discussed, there are tools supplied by both Docker and third parties that
    allow you scale your containers from a single host to potentially hundreds or
    thousands.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论的那样，Docker 和第三方提供的工具可以让你将容器从单一主机扩展到可能达到数百或数千台主机。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In the previous chapters, we experienced using combinations of the tools together.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们体验了将这些工具组合使用的方式。
- en: For example, we have been using both Docker Storage and Network plugins to create
    a highly available WordPress installation using both the tools provided by Docker
    themselves, that is, Docker Compose and Docker Swarm, as well Kubernetes and Rancher.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们一直在使用 Docker 存储和网络插件，通过 Docker 自身提供的工具（即 Docker Compose 和 Docker Swarm），以及
    Kubernetes 和 Rancher，来创建一个高可用的 WordPress 安装。
- en: We also deployed our underlying Docker infrastructure using Docker Machine,
    Ansible, as well as tools such as Kubernetes and Rancher.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还通过 Docker Machine、Ansible，以及 Kubernetes 和 Rancher 等工具部署了底层的 Docker 基础设施。
- en: Then, we deployed various first-party and third-party plugins to help with storage,
    networking, and features such as load balancing to take full advantage of the
    environment that we have been deploying to, such as Amazon Web Service and DigitalOcean.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们部署了各种第一方和第三方插件，帮助解决存储、网络和负载均衡等功能，以充分利用我们所部署的环境，例如亚马逊 Web 服务和 DigitalOcean。
- en: All the tools that we have looked at compliment the core Docker Engine, and
    in most cases, there is little or no change needed to be made to your Docker images
    to start using the plugins or third-party tools.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所查看的所有工具都与核心 Docker 引擎相辅相成，在大多数情况下，几乎不需要对你的 Docker 镜像进行任何更改就可以开始使用插件或第三方工具。
- en: All of this means that it is relatively easy to build a highly available, yet
    easy to use platform to deploy your applications into whether you are using a
    public cloud, your own virtual machines, bare metal servers, or just your local
    laptop, and tailor it to your developers, application, and your own needs, all
    while ensuring that if it worked in development, it will work in production.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些意味着，无论你是使用公共云、自己的虚拟机、裸机服务器，还是仅仅使用本地笔记本，都可以相对轻松地构建一个高可用且易于使用的平台来部署应用程序，并根据开发人员、应用程序和自己的需求进行定制，同时确保在开发中能够正常工作的应用程序也能在生产环境中正常运行。
