- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Jira for Business Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira initially started as a bug-tracking system, helping software development
    teams track and manage the problems/issues in their projects. As the product evolved,
    people started using Jira for other purposes. Some use it as a general-purpose
    task management solution, while others use it as a customer support portal. There
    are also other creative uses for Jira, such as tracking financial portfolio performances.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at projects and project types while focusing
    on the most basic Jira project type – **business**. Then, we will look at the
    various user interfaces that Jira has for working with projects, both as an administrator
    and an everyday user. We will also introduce permissions in the context of projects,
    which we will expand upon later in this book. Since business is the most basic
    project type, most of the concepts covered in this chapter will apply to the more
    specialized types.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding projects and project types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jira permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project user interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing data into Jira
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HR project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding projects and project types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **project** is one of the most important concepts when working with Jira.
    A project can represent anything from a department or a team in an organization
    to an actual software project or an IT helpdesk. One way to describe a project
    is that it is a collection of work items, called **issues**. It helps provide
    context when users create and work with issues. For example, a software development
    team will work with issues in a project that has been created for the product
    they are working on, while a support team will work within a helpdesk project.
  prefs: []
  type: TYPE_NORMAL
- en: Project types help define the purpose of the project and provide a tailored
    experience and set of features to the users. For example, a service management
    project will have features such as **service-level agreements** (**SLAs**), while
    a software development project will provide support for Scrum or Kanban.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each project type also comes with one or more templates, with a set of predefined
    configurations to help you get started quickly. The following screenshot shows
    the project types and their templates from an out-of-the-box Jira installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Create project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Create project
  prefs: []
  type: TYPE_NORMAL
- en: The list of project types and templates will vary, depending on what features
    you have installed and enabled for your Jira deployment. We will look at how you
    can add additional project types later in this book. For now, we will focus on
    the **Business** project type since it is the most basic, and most of its features
    are shared among other project types.
  prefs: []
  type: TYPE_NORMAL
- en: Business projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have already seen, Jira comes with several project types, depending on
    what features you have available. The **Business** project type is available out
    of the box and its templates mostly focus on enabling users to easily create tasks
    and track and report on their progress.
  prefs: []
  type: TYPE_NORMAL
- en: The first three templates – **Project management**, **Task management**, and
    **Process management** – all come with predefined configurations such as workflows
    and fields. You can use them as is or customize them further, based on your needs.
    There are other types of projects, such as **Service management** and **Software
    development**, though we will cover these later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Jira permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start diving into projects, we need to understand a little bit about
    permissions. Permission is a big topic, and we will cover it in detail in [*Chapter
    9*](B18644_09.xhtml#_idTextAnchor256), *Securing Jira*. For now, we will briefly
    talk about permissions related to creating, browsing, and administering projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Jira, there are several levels of permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Global permission**: Create and delete projects and administer Jira configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project permission**: Browse and administer individual projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Issue permission**: Browse individual issues'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users with the Jira administrator global permission will be able to create and
    delete projects. By default, users in the Jira administrator group have this permission,
    so the administrator user we created during the installation process in [*Chapter
    1*](B18644_01.xhtml#_idTextAnchor014), *Getting Started with Jira Data Center*,
    will be able to create new projects. We will refer to this user and any other
    users with this permission as a **Jira administrator**.
  prefs: []
  type: TYPE_NORMAL
- en: For any given project, users with the **Administer Projects** permission for
    that project will be able to administer the project’s configuration settings,
    as we will see later in this chapter. This means that users with this permission
    will have access to the **Project settings** interface for a given project. This
    allows them to update the project’s details and configurations. By default, the
    Jira administrator will have this permission.
  prefs: []
  type: TYPE_NORMAL
- en: If a user needs to browse the contents of a given project, then they must have
    the **Browse Projects** permission for that project. This means that the user
    will have access to the **Project Browser** interface for the project. By default,
    the Jira administrator will have this permission. Now that we have covered the
    basics of Jira permissions, let’s look at how to create a new project in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Creating projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to create a new project is to select the **Create project**
    menu option from the **Projects** drop-down menu from the top navigation bar.
    This will bring up the **Create project** dialog. Note that, as explained previously,
    you need to be a Jira administrator (such as the user we created during installation)
    to create projects. This option is only available if you have this permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Create project** dialog, select the template you want to use under
    the **Business** heading and click on **Next**. On the next page, Jira will display
    the predefined configurations for the template you have selected. In our example,
    we have selected the **Project management** template, so Jira provides us with
    two issue types and a very simple workflow with three steps. Click on the **Select**
    button to continue, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Project management – step 1'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.2_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Project management – step 1
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can change these configurations after the project has been created.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the third and final step, we need to provide details for the new project.
    Jira will help you validate the details by making sure that the project key is
    unique and conforms to the required format. After filling in the project details,
    click on the **Submit** button to create the new project, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Project management – step 2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.3_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Project management – step 2
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the information you need to provide when creating
    a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | This is a unique name for the project. |'
  prefs: []
  type: TYPE_TB
- en: '| **Key** | This is a unique identity key for the project. As you type the
    name of your project, Jira will auto-fill the key based on the name, though you
    can replace the auto-generated key with one of your own. You will be able to change
    the key later. The project key will also become the first part of the issue key
    for issues created in the project. |'
  prefs: []
  type: TYPE_TB
- en: '| **Project Lead** | The lead of the project can be used to auto-assign issues.
    Each project can only have one lead. This option will only be available if you
    have more than one user in Jira. |'
  prefs: []
  type: TYPE_TB
- en: Table 2.1 – Create project dialog information
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created the new project, you will be taken to the **Project Browser**
    interface, which we will discuss in the forthcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that in the **Create project** dialog, there are three
    additional options at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Import a project**: This allows you to import data from other sources, such
    as a CSV file, into a new or existing Jira project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create with shared configuration**: This allows you to create a new project
    based on the configurations of an existing project. This is a great way for you
    to create a project based on a standard set of configurations quickly, as well
    as to reduce management overhead by reducing the number of different configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create sample data**: This allows you to create a new project and populate
    it with some sample issues so that you can start exploring the various features
    offered by different project templates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover importing data into a project in the *Importing data into Jira*
    section. Creating a project with sample data is a great way to test out a new
    project template.
  prefs: []
  type: TYPE_NORMAL
- en: Project user interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two distinctive interfaces for projects in Jira. The first interface
    is designed for everyday users and provides useful information on how the project
    uses reports, statistics, and agile boards. We will refer to this interface as
    the **Project Browser** interface.
  prefs: []
  type: TYPE_NORMAL
- en: The second interface is designed for project administrators to control project
    configuration settings, such as permissions and workflows; we will refer to this
    interface as the **Project Settings** interface.
  prefs: []
  type: TYPE_NORMAL
- en: After creating a project, the first interface you see will be **Project Browser**.
    We will start by looking at this interface before looking at the **Project Settings**
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Project browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Project Browser will vary, depending on the type of project you create.
    For business projects, it is relatively simple. A few tabs are available from
    the left-hand panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Browser View** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Summary** | This tab displays a quick overview of the project. It comes
    in two views: an **activity view** and a **statistics view**. |'
  prefs: []
  type: TYPE_TB
- en: '| **Issues** | This is the primary tab you will be working with. It contains
    a list of issues in the project. You can configure how issues will be included
    in the list and what data you want to display. |'
  prefs: []
  type: TYPE_TB
- en: '| **Reports** | This contains several built-in and custom reports that you
    can generate based on the issues in the project. The types of reports that are
    available will vary, depending on the project type. |'
  prefs: []
  type: TYPE_TB
- en: '| **Versions** | This displays a summary of the versions of the project. This
    tab is only available when versions have been configured. |'
  prefs: []
  type: TYPE_TB
- en: '| **Components** | This displays a summary of the components and their related
    issues. This tab is only available when components have been configured for the
    project. |'
  prefs: []
  type: TYPE_TB
- en: '| **Add link** | Here, you can add additional links to the left-hand panel,
    such as important documents related to the project or links to other useful resources.
    |'
  prefs: []
  type: TYPE_TB
- en: Table 2.2 – Project Browser tabs
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at some of these tabs in greater detail.
  prefs: []
  type: TYPE_NORMAL
- en: The Summary tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Summary** tab provides you with a single-page view of the project you
    are working on. For business projects, it provides an activity view, which will
    display the latest activities that are happening in the project, and a statistics
    view, which provides you with several useful breakdowns of the issues within the
    project. For example, **Unresolved: By Assignee** lets you know how many open
    issues have been assigned to each user, allowing the project team to plan their
    resource allocation, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The Summary tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.4_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – The Summary tab
  prefs: []
  type: TYPE_NORMAL
- en: The Issues tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Issues** tab, by default, lists all open issues in the project. It also
    contains several other predefined filters you can use to look for issues. From
    here, you can select an individual issue and get more information about it, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The Issues tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.5_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – The Issues tab
  prefs: []
  type: TYPE_NORMAL
- en: The Versions and Components tabs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Versions** and **Components** tabs list all the available versions and
    components that have been configured for this project, respectively. These two
    views are only visible if the project contains versions and/or components. We
    will look at how these can be used later.
  prefs: []
  type: TYPE_NORMAL
- en: Project settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Project settings** interface is where project administrators can manage
    the settings and configurations of their projects. For example, you can change
    the project’s name and key, select what issue types will be available for the
    project, and manage a list of components within the project. Only users with the
    **Administer Projects** permission for a given project will be able to access
    this interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the **Project settings** interface, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Project Browser** interface for the project you want to administer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Project settings** option at the bottom left. If you do not see
    this option, then you do not have the necessary permission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Project settings** interface, you will be able to perform the following
    key operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Update project details, such as the project’s name, description, avatar, and
    type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage what users see when working on the project, such as issue types, fields,
    and screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the workflows used by the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control permission settings and notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage the list of available components and versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding key operations can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Project settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.6_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Project settings
  prefs: []
  type: TYPE_NORMAL
- en: As a project administrator, this is where you will be applying customizations
    to your project; you can find all the options in the left-hand panel. When you
    create your project, Jira will automatically create these configurations for you,
    depending on the template you choose. Let’s take a look at each of these options.
  prefs: []
  type: TYPE_NORMAL
- en: The Project details tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first group of options includes **Summary**, **Details**, **Audit log**,
    **Re-index project**, and **Delete project**. Let’s take a look at them in more
    detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**: Displays a single-page view of all the current configuration settings
    for the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Details**: Allows you to change the project’s general information, including
    the project key, type, avatar, description, and category.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Audit log**: This is a new feature in Jira Data Center that will show you
    a list of configuration changes that have been made to the project (note that
    this does not include changes made to issues). It will show you what was changed,
    when the change happened, and who made the change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Re-index project**: This feature re-indexes the project to update the search
    index for issues in this project. You should do this when configuration changes
    have been made to the project, such as new fields being added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete project**: This feature deletes the project and all its issues. This
    operation cannot be undone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Components tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Components** tab is where project administrators can manage the components
    for their projects. Components can be thought of as subsections that make up the
    full project. In a business project, components can be various business functions
    or operations that need to be completed. As shown in the following screenshot,
    three components have been configured in the current project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Components'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.7_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Components
  prefs: []
  type: TYPE_NORMAL
- en: 'Components are project-specific in Jira. This means that components from one
    project cannot be used in a different project. This also allows each project to
    maintain its own set of components. A component has four pieces of information,
    as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | This is the unique name of the component. |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | The description is optional but explains what the component
    is for. |'
  prefs: []
  type: TYPE_TB
- en: '| **Lead** | This is an optional field where you can select a single user as
    the lead for the component. For example, in a software project, this can be the
    main developer for the component. |'
  prefs: []
  type: TYPE_TB
- en: '| **Default assignee** | This tells Jira when an issue is created without the
    assignee being selected. If the issue has a component, then Jira will auto-assign
    the issue to the selected default assignee. |'
  prefs: []
  type: TYPE_TB
- en: Table 2.3 – Component fields
  prefs: []
  type: TYPE_NORMAL
- en: One of the useful features of components is the ability to assign a default
    assignee to each component. This means that when a user creates an issue with
    a component and sets the assignee as **Automatic**, Jira will be able to automatically
    assign the issue based on the component selected. This is a very useful feature
    for organizations where members of various teams often do not know each other.
    Therefore, when it comes to assigning issues at creation time, they often find
    it difficult to decide who to assign them to. This feature can be set up so that
    the lead of the component becomes the default assignee. This means that the issues
    that have been raised can be delegated to other members of the team.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If the issue has more than one component with a default assignee, the assignee
    for the first component (in alphabetical order) will be used.
  prefs: []
  type: TYPE_NORMAL
- en: The Versions tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like the **Components** tab, the **Versions** tab allows project administrators
    to manage versions for their projects. Versions serve as milestones for a project.
    In project management, versions represent points in time. While versions may seem
    less relevant for projects that are not product-oriented, they can still be valuable
    when it comes to managing and tracking the progress of issues and work.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with components, versions also have several attributes, as shown in the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | This is the unique name of the version. |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | The description is optional but explains what the version
    is for. |'
  prefs: []
  type: TYPE_TB
- en: '| **Start Date** | This is a date indication that states when work on this
    version is expected to start. |'
  prefs: []
  type: TYPE_TB
- en: '| **Release Date** | This is an optional date that will be marked as the scheduled
    date when the version will be released. Versions that are not released according
    to the release date will have their dates highlighted in red. |'
  prefs: []
  type: TYPE_TB
- en: Table 2.4 – Version fields
  prefs: []
  type: TYPE_NORMAL
- en: Versions are mostly used in software development projects where a software product
    has a release version. It is less applicable to business projects, but if there
    is a need to keep track of versions, such as for documents, you can use this tab
    to keep track of tasks that are related to a specific version.
  prefs: []
  type: TYPE_NORMAL
- en: Other tabs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are several other tabs in the **Project settings** interface. We will
    not explore these tabs in this chapter as they will be covered in separate chapters.
    We will, however, take a look at what each tab does, as shown in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tab** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Issue types** | This tab controls the types of issues that users can create
    for the project. For example, this may include bugs, improvements, and tasks.**Issue
    types** will be covered in [*Chapter 4*](B18644_04.xhtml#_idTextAnchor083), *Working
    with Issues*. |'
  prefs: []
  type: TYPE_TB
- en: '| **Workflows** | This tab controls the workflow issues that we will go through.
    Workflows consist of a series of steps that usually mimic the existing processes
    that are in place for the organization.Workflows will be covered in [*Chapter
    7*](B18644_07.xhtml#_idTextAnchor187), *Workflow and Business Process*. |'
  prefs: []
  type: TYPE_TB
- en: '| **Screens** | **Screens** are what users see when they view, create, and
    edit issues in Jira.**Screens** will be covered in [*Chapter 6*](B18644_06.xhtml#_idTextAnchor154),
    *Screen Management*. |'
  prefs: []
  type: TYPE_TB
- en: '| **Fields** | These are what Jira uses to capture data from users when they
    create issues. Jira comes with a set of default fields and the Jira administrator
    can add additional fields as needed.Fields will be covered in [*Chapter 5*](B18644_05.xhtml#_idTextAnchor119),
    *Field Management*. |'
  prefs: []
  type: TYPE_TB
- en: '| **Users and roles** | Project administrators can define roles in the project
    and assign users to them. These roles can then be used to control permissions
    and notifications.Roles will be covered in [*Chapter 9*](B18644_09.xhtml#_idTextAnchor256),
    *Securing Jira*. |'
  prefs: []
  type: TYPE_TB
- en: '| **Permissions** | As we have already seen, permissions define who can perform
    certain tasks or have access to Jira.Permissions will be covered in [*Chapter
    9*](B18644_09.xhtml#_idTextAnchor256), *Securing Jira*. |'
  prefs: []
  type: TYPE_TB
- en: '| **Issue Security** | Jira allows users to control who can view the issues
    they have created by selecting the issue security level.Issue security will be
    covered in [*Chapter 9*](B18644_09.xhtml#_idTextAnchor256), *Securing Jira*. |'
  prefs: []
  type: TYPE_TB
- en: '| **Notifications** | Jira can send out email notifications when certain events
    occur. For example, when an issue is updated, Jira can send out an email to alert
    all users who have participated.Notifications will be covered in [*Chapter 8*](B18644_08.xhtml#_idTextAnchor220),
    *Emails and Notifications*. |'
  prefs: []
  type: TYPE_TB
- en: Table 2.5 – Project settings tabs
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at both of Jira’s user interfaces, let’s learn how to
    import data into Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Importing data into Jira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jira allows you to import data from other sources, such as other issue tracking
    systems, and tells you whether the data can be exported in a supported format,
    such as CSV or JSON. All the importers have a wizard-driven interface that guides
    you through a series of steps. These steps are mostly identical but have a few
    differences. Generally speaking, there are four steps when it comes to importing
    data into Jira, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your source data – for example, a CSV file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a destination project where the imported issues will go. This can be
    an existing project or a new project created on the fly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Map fields from the source (for example, CSV) to Jira fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Map field values from the source to Jira field values. This is usually required
    for select-based fields, such as the priority field, or select list fields. For
    fields such as text and number fields, this is not required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s see how to import data using a CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: Importing data through CSV
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jira comes with a CSV importer, which lets you import data in the **comma-separated
    value** (**CSV**) format. This is a very useful tool as most systems can export
    data in this format. You can also convert an Excel spreadsheet into a CSV file
    with this tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can import a CSV file into Jira, you need to make sure you format
    your data properly. Here is a checklist of items you must verify before importing
    your data:'
  prefs: []
  type: TYPE_NORMAL
- en: Each row must be imported as a single issue, so make sure you have all the values
    for the issue in a single row.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each column should map to a corresponding Jira field. This can be either a system
    field or a custom field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At a minimum, you will need to have values for the required fields, such as
    the issue summary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All date or date-time values need to be in a consistent format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a column is to be mapped to a user field, such as assignee, make sure you
    have the correct username values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a column is to be mapped to a selection-based field, such as a select list
    or a checkbox, make sure you check the spelling of the values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have formatted your CSV file, follow these steps to import it into
    Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Import External Project** option from the **Projects** drop-down
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **CSV** option. This will start the import wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you need to select the CSV file that contains the data you want to import
    by clicking on the **Choose File** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have selected the source file, you can expand the **Advanced** section
    to select the file encoding and delimiter that’s used in the CSV file. There is
    also the **Use an existing configuration file** option, which we will talk about
    later in this section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Next** button to proceed, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – CSV File import'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.8_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – CSV File import
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to select the project you want to import your data into. You
    can also select the **Create New** option to create a new project on the fly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your CSV file contains date-related data, ensure that you enter the format
    that was used in the **Date format** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Next** button to proceed, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Map projects'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.9_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Map projects
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to map the CSV fields (columns) to the fields in Jira. Not all
    fields need to be mapped. If you do not want to import data from a particular
    column, simply do not map the CSV field to a Jira field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For fields that contain data that needs to be mapped manually, such as select
    list fields, you need to check the **Map field value** checkbox. This will let
    you map the CSV field value to the Jira field value so that it can be imported
    correctly. If you do not manually map these values, they will be copied over as
    is. For fields such as select lists, new options will be automatically created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Next** button to proceed, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Map fields'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.10_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 – Map fields
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you need to map the CSV field value to the Jira field value. This
    step is only required if you checked the **Map field value** checkbox for a field
    in *step 10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the Jira field value for each CSV field value.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have mapped the field values, click on the **Begin Import** button
    to start the actual import process, as shown in the following screenshot. Depending
    on the size of your data, this may take some time to complete:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Map values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.11_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.11 – Map values
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the import process completes, you will get a confirmation message telling
    you the number of issues that have been imported, as shown in the following screenshot.
    This number should match the number of records you have in the CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Completed import process'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.12_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.12 – Completed import process
  prefs: []
  type: TYPE_NORMAL
- en: On the last confirmation screen, you can click on the **download a detailed
    log** link to download the full log file containing all the information for the
    import process. This is particularly useful if the import was not successful.
  prefs: []
  type: TYPE_NORMAL
- en: You can also click on the **save the configuration** link, which will generate
    a text file containing all the mappings you have done for this import. If you
    need to run a similar import in the future, you can use this import file so that
    you don’t need to manually remap everything again. To use this configuration file,
    check the **Use an existing configuration file** option that was shown in *step
    4*.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Jira’s project importer makes importing data from other systems
    straightforward. In the next section, we will learn how to archive old projects
    to help improve performance in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Archiving projects and issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you continue to use Jira, users will notice Jira’s performance starting to
    degrade over time. Some more noticeable examples include loading the Jira dashboard
    and searching for issues. Data size is indeed a major factor when it comes to
    Jira’s performance – the more projects, issues, and related configurations (such
    as custom fields) that you have, the more data Jira will need to process, and
    the slower it will be for your end users. The practice of archiving old and unused
    projects is often the solution to this problem.
  prefs: []
  type: TYPE_NORMAL
- en: Before Jira Data Center, archiving a project would require you to either export
    and then delete the project completely, or hide the project and its issues by
    removing permissions from users. Both approaches are convoluted and can be error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Jira Data Center, there is now a built-in archive feature that makes the
    process simple and reliable. To archive a project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Jira with an administrator account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to **Administration** | **Projects**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Archive** option for the project you wish to archive, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Archiving a project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.13_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.13 – Archiving a project
  prefs: []
  type: TYPE_NORMAL
- en: 'Confirm that you want to archive the project when prompted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Archive project – confirmation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.14_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.14 – Archive project – confirmation
  prefs: []
  type: TYPE_NORMAL
- en: Once a project has been archived, it will no longer be listed for end users.
    Issues from the archived project will not show up in any searches. However, if
    you have a direct link to the issue, it can still be accessed, though you cannot
    make any changes to it. By archiving a project, all data related to the project,
    such as issues, will be removed from Jira’s search index. This will keep the index
    size low and improve the overall performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to restore an archived project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to **Administration** | **Projects** | **Archived projects**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Restore** option for the project you wish to restore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the restored project and click on the **Start project re-index** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since an archived project will have its data removed from Jira’s search index,
    you will need to re-index the project before its issues will be displayed in the
    search results.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that one difference between archiving a project and deleting
    a project is that when you archive a project, any configurations related to the
    project are still considered to be in use, so you cannot delete them. This is
    because Jira needs to make sure that when you unarchive the project, all the configurations
    are still available.
  prefs: []
  type: TYPE_NORMAL
- en: The HR project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen all the key aspects that make up a project, let’s revisit
    what you have learned so far and put it into practice. In this exercise, we will
    set up a project for our **human resources** (**HR**) team to help them track
    and manage employees joining and leaving the company, as well as tasks related
    to the recruitment process.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will start by creating a new project for the HR team. To create the
    project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Bring up the **Create project** dialog by selecting the **Create project** option
    from the **Projects** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Task management** project template. We can use other templates
    in the **Business** project type, but the **Task management** template is the
    simplest option and will make future customization easier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name our new project `Human Resource` and accept the other default values for
    **Key** and **Project Lead**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Submit** button to create the new project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you will be taken to the **Project Browser** interface for the
    new project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our new project is in place, we need to create a few components. These
    components will serve as groupings for our tasks. We need to perform the following
    steps to create our new components:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Project settings** option in the bottom-left corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project settings** interface, select the **Components** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Employee Onboarding` for the new component’s name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a short description of the new component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a user to be the leader of the component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add** to create the new component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a few more components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With projects created with the **Business** project type, components are not
    displayed by default, so we will have to manually add the **Components** field
    to the appropriate screens. We will cover fields and screens in *Chapter 3*, *Field
    Management*, and [*Chapter 6*](B18644_06.xhtml#_idTextAnchor154), *Screen Management*,
    respectively. For now, follow these steps to get our components to display when
    we create, edit, and view tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Project Administration** interface, select the **Screens** tab.
    There should be three screens, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Project screens'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.15_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.15 – Project screens
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **HR: Task Management Create Issue Screen**. This will open the **Configure
    Screen** page, with a list of fields that are currently on the selected screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter and select **Component/s** in the select field at the bottom of the page;
    this will add the **Components** field to the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat *steps 2* and *3* for **HR: Task Management Edit/View Issue Screen**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have fully prepared your project, let’s see how everything comes
    together by creating an issue, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Create** button from the top navigation bar. This will bring
    up the **Create Issue** dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Human Resource** for **Project** and **Task** for **Issue Type**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the fields with some dummy data. Note that the **Component/s** field
    should display the components we just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button to create the issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If everything has been done correctly, you should see a dialog box similar
    to the following, where you can choose your new project to create the issue in,
    as well as the new components that can be selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Create Issue'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.16_B18644.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.16 – Create Issue
  prefs: []
  type: TYPE_NORMAL
- en: You can test out the default assignee feature by leaving the **Assignee** field
    set to **Automatic** and selecting a component; Jira will automatically assign
    the issue to the default assignee that’s been defined for the component. If everything
    goes well, the issue will be created in the new project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at one of the most important concepts in Jira – projects
    – and how to create and manage them. Permissions were introduced, and we looked
    at three permissions that are related to creating, browsing, and administering
    projects. We also looked at the very useful project archiving feature introduced
    in Jira Data Center, and how you can use it to help improve Jira performance by
    archiving unused projects.
  prefs: []
  type: TYPE_NORMAL
- en: We were also introduced to the two interfaces Jira provides for project administrators
    and everyday users – the **Project settings** interface and the **Project Browser**
    interface, respectively. In the next chapter, we will learn how to create projects
    using the **Software** project type to enable Scrum and Kanban to run agile projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Jira in Action'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to use Jira. You will get acquainted with
    techniques for handling different issues, exploring fields, creating new screens,
    managing workflows, and setting up incoming and outgoing email servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following chapters are included in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18644_03.xhtml#_idTextAnchor058), *Using Jira for Agile Projects*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18644_04.xhtml#_idTextAnchor083), *Working with Issues*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18644_05.xhtml#_idTextAnchor119), *Field Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18644_06.xhtml#_idTextAnchor154), *Screen Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
