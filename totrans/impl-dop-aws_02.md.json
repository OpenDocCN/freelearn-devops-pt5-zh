["```\n$ terraform --version\nTerraform v0.6.15\n\n```", "```\n    \"autoscaling:CreateAutoScalingGroup\",\n    \"autoscaling:CreateLaunchConfiguration\",\n    \"autoscaling:DeleteLaunchConfiguration\",\n    \"autoscaling:Describe*\",\n    \"autoscaling:UpdateAutoScalingGroup\",\n    \"ec2:AllocateAddress\",\n    \"ec2:AssociateAddress\",\n    \"ec2:AssociateRouteTable\",\n    \"ec2:AttachInternetGateway\",\n    \"ec2:AuthorizeSecurityGroupEgress\",\n    \"ec2:AuthorizeSecurityGroupIngress\",\n    \"ec2:CreateInternetGateway\",\n    \"ec2:CreateNatGateway\",\n    \"ec2:CreateRoute\",\n    \"ec2:CreateRouteTable\",\n    \"ec2:CreateSecurityGroup\",\n    \"ec2:CreateSubnet\",\n    \"ec2:CreateTags\",\n    \"ec2:CreateVpc\",\n    \"ec2:Describe*\",\n    \"ec2:ModifySubnetAttribute\",\n    \"ec2:RevokeSecurityGroupEgress\",\n    \"elasticloadbalancing:AddTags\",\n    \"elasticloadbalancing:ApplySecurityGroupsToLoadBalancer\",\n    \"elasticloadbalancing:AttachLoadBalancerToSubnets\",\n    \"elasticloadbalancing:CreateLoadBalancer\",\n    \"elasticloadbalancing:CreateLoadBalancerListeners\",\n    \"elasticloadbalancing:Describe*\",\n    \"elasticloadbalancing:ModifyLoadBalancerAttributes\",\n    \"rds:CreateDBInstance\",\n    \"rds:CreateDBSubnetGroup\",\n    \"rds:Describe*\"\n\n```", "```\n$ export AWS_ACCESS_KEY_ID='user_access_key'\n$ export AWS_SECRET_ACCESS_KEY='user_secret_access_key'\n\n```", "```\n# Set a Provider \n  provider \"aws\"  \n{ \n  region = \"${var.aws-region}\" \n} \n\n```", "```\n# Create a VPC \n  resource \"aws_vpc\" \"terraform-vpc\"  \n{ \n  cidr_block = \"${var.vpc-cidr}\" \n\n  tags  \n  { \n    Name = \"${var.vpc-name}\" \n  } \n} \n\n# Create an Internet Gateway \n  resource \"aws_internet_gateway\" \"terraform-igw\"  \n{ \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n} \n\n# Create NAT \n  resource \"aws_eip\" \"nat-eip\"  \n{ \n  vpc = true \n} \n\n```", "```\nresource \"aws_subnet\" \"public-1\" { \n\n```", "```\nvpc_id = \"${aws_vpc.terraform-vpc.id}\" \n\n```", "```\ncidr_block = \"${cidrsubnet(var.vpc-cidr, 8, 1)}\" \n\n```", "```\nresource \"aws_db_instance\" \"terraform\" { \nidentifier = \"${var.rds-identifier}\" \nallocated_storage = \"${var.rds-storage-size}\" \nstorage_type= \"${var.rds-storage-type}\" \nengine = \"${var.rds-engine}\" \nengine_version = \"${var.rds-engine-version}\" \ninstance_class = \"${var.rds-instance-class}\" \nusername = \"${var.rds-username}\" \npassword = \"${var.rds-password}\" \nport = \"${var.rds-port}\" \nvpc_security_group_ids = [\"${aws_security_group.terraform-rds.id}\"] \ndb_subnet_group_name = \"${aws_db_subnet_group.rds.id}\" \n} \n\n```", "```\nresource \"aws_elb\" \"terraform-elb\"  \n{ \n  name = \"terraform-elb\" \n  security_groups = [\"${aws_security_group.terraform-elb.id}\"] \n  subnets = [\"${aws_subnet.public-1.id}\", \n\"${aws_subnet.public-2.id}\"] \n\nlistener  \n  { \n   instance_port = 80 \n   instance_protocol = \"http\" \n   lb_port = 80 \n   lb_protocol = \"http\" \n  } \n\ntags  \n  { \n   Name = \"terraform-elb\" \n  } \n    } \n\n```", "```\nresource \"aws_launch_configuration\" \"terraform-lcfg\" { \nimage_id = \"${var.autoscaling-group-image-id}\" \ninstance_type = \"${var.autoscaling-group-instance-type}\" \nkey_name = \"${var.autoscaling-group-key-name}\" \nsecurity_groups = [\"${aws_security_group.terraform-ec2.id}\"] \nuser_data = \"#!/bin/bash \\n set -euf -o pipefail \\n exec 1> >(logger -s -t $(basename $0)) 2>&1 \\n yum -y install nginx; chkconfig nginx on; service nginx start\" \n\nlifecycle { \ncreate_before_destroy = true \n} \n\n```", "```\n} \nresource \"aws_autoscaling_group\" \"terraform-asg\" { \nname = \"terraform\" \nlaunch_configuration = \"${aws_launch_configuration.terraform-lcfg.id}\" \nvpc_zone_identifier = [\"${aws_subnet.private-1.id}\", \"${aws_subnet.private-2.id}\"] \nmin_size = \"${var.autoscaling-group-minsize}\" \nmax_size = \"${var.autoscaling-group-maxsize}\" \nload_balancers = [\"${aws_elb.terraform-elb.name}\"] \ndepends_on = [\"aws_db_instance.terraform\"] \ntag { \nkey = \"Name\" \nvalue = \"terraform\" \npropagate_at_launch = true \n} \n} \n\n```", "```\nvariable \"aws-region\" { \ntype = \"string\" \ndescription = \"AWS region\" \n} \nvariable \"aws-availability-zones\" { \ntype = \"string\" \ndescription = \"AWS zones\" \n} \nvariable \"vpc-cidr\" { \ntype = \"string\" \ndescription = \"VPC CIDR\" \n} \nvariable \"vpc-name\" { \ntype = \"string\" \ndescription = \"VPC name\" \n} \n\n```", "```\nvariable \"variable_name\" {  \nvariable properties  \n} \n\n```", "```\nvariable \"rds-identifier\" { \ntype = \"string\" \ndescription = \"RDS instance identifier\" \n}   \nvariable \"rds-storage-size\" { \ntype = \"string\" \ndescription = \"Storage size in GB\" \n} \nvariable \"rds-storage-type\" { \ntype = \"string\" \ndescription = \"Storage type\" \n} \nvariable \"rds-engine\" { \ntype = \"string\" \ndescription = \"RDS type\" \n} \nvariable \"rds-engine-version\" { \ntype = \"string\" \ndescription = \"RDS version\" \n} \nvariable \"rds-instance-class\" { \ntype = \"string\" \ndescription = \"RDS instance class\" \n} \nvariable \"rds-username\" { \ntype = \"string\" \ndescription = \"RDS username\" \n} \nvariable \"rds-password\" { \ntype = \"string\" \ndescription = \"RDS password\" \n} \nvariable \"rds-port\" { \ntype = \"string\" \ndescription = \"RDS port number\" \n} \n\n```", "```\nvariable \"autoscaling-group-minsize\" { \ntype = \"string\" \ndescription = \"Min size of the ASG\" \n} \nvariable \"autoscaling-group-maxsize\" { \ntype = \"string\" \ndescription = \"Max size of the ASG\" \n} \nvariable \"autoscaling-group-image-id\" { \ntype=\"string\" \ndescription = \"EC2 AMI identifier\" \n} \nvariable \"autoscaling-group-instance-type\" { \ntype = \"string\" \ndescription = \"EC2 instance type\" \n} \nvariable \"autoscaling-group-key-name\" { \ntype = \"string\" \ndescription = \"EC2 ssh key name\" \n} \n\n```", "```\n-var 'aws-region=us-east-1' \n\n```", "```\nautoscaling-group-image-id = \"ami-08111162\" \nautoscaling-group-instance-type = \"t2.nano\" \nautoscaling-group-key-name = \"terraform\" \nautoscaling-group-maxsize = \"1\" \nautoscaling-group-minsize = \"1\" \naws-availability-zones = \"us-east-1b,us-east-1c\" \naws-region = \"us-east-1\" \nrds-engine = \"postgres\" \nrds-engine-version = \"9.5.2\" \nrds-identifier = \"terraform-rds\" \nrds-instance-class = \"db.t2.micro\" \nrds-port = \"5432\" \nrds-storage-size = \"5\" \nrds-storage-type = \"gp2\" \nrds-username = \"dbroot\" \nrds-password = \"donotusethispassword\" \nvpc-cidr = \"10.0.0.0/16\" \nvpc-name = \"Terraform\" \n\n```", "```\noutput \"VPC ID\" { \nvalue = \"${aws_vpc.terraform-vpc.id}\" \n} \n\noutput \"NAT EIP\" { \nvalue = \"${aws_nat_gateway.terraform-nat.public_ip}\" \n} \n\noutput \"ELB URI\" { \nvalue = \"${aws_elb.terraform-elb.dns_name}\" \n} \noutput \"RDS Endpoint\" { \nvalue = \"${aws_db_instance.terraform.endpoint}\" \n} \n\n```", "```\n$ terraform validate\nError validating: 1 error(s) occurred:\n* provider config 'aws': unknown variable referenced: 'aws-region-1'. define it with 'variable' blocks\n\n```", "```\n$ terraform plan\nResources are shown in alphabetical order for quick scanning. Green resources will be created (or destroyed and then created if an existing resource exists), yellow resources are being changed in-place, and red resources will be destroyed.\n\n```", "```\n$ terraform graph > my_graph.dot\n\n```", "```\n$ terraform apply\naws_eip.nat-eip: Creating...\nallocation_id: \"\" => \"<computed>\"\nassociation_id: \"\" => \"<computed>\"\ndomain: \"\" => \"<computed>\"\ninstance: \"\" => \"<computed>\"\nnetwork_interface: \"\" => \"<computed>\"\nprivate_ip: \"\" => \"<computed>\"\npublic_ip: \"\" => \"<computed>\"\nvpc: \"\" => \"1\"\naws_vpc.terraform-vpc: Creating...\ncidr_block: \"\" => \"10.0.0.0/16\"\ndefault_network_acl_id: \"\" => \"<computed>\"\ndefault_security_group_id: \"\" => \"<computed>\"\ndhcp_options_id: \"\" => \"<computed>\"\nenable_classiclink: \"\" => \"<computed>\"\nenable_dns_hostnames: \"\" => \"<computed>\"\nApply complete! Resources: 22 added, 0 changed, 0 destroyed.\n\n```", "```\nState path: terraform.tfstate\nOutputs:\nELB URI = terraform-elb-xxxxxx.us-east-1.elb.amazonaws.com\nNAT EIP = x.x.x.x\nRDS Endpoint = terraform-rds.xxxxxx.us-east-1.rds.amazonaws.com:5432\nVPC ID = vpc-xxxxxx\n\n```", "```\n        resource \"aws_security_group\" \"terraform-elb\" {\n        name = \"terraform-elb\"\n        description = \"ELB security group\"\n        vpc_id = \"${aws_vpc.terraform-vpc.id}\"\n\n        ingress {\n        from_port = \"80\"\n        to_port = \"80\"\n        protocol = \"tcp\"\n        cidr_blocks = [\"0.0.0.0/0\"]\n        }\n\n        ingress {\n        from_port = \"443\"\n        to_port = \"443\"\n        protocol = \"tcp\"\n        cidr_blocks = [\"0.0.0.0/0\"]\n        }\n\n        egress {\n        from_port = 0\n        to_port = 0\n        protocol = \"-1\"\n        cidr_blocks = [\"0.0.0.0/0\"]\n        }\n\n        }\n\n    ```", "```\n    $ terraform plan\n    ...\n    ~ aws_security_group.terraform-elb\n    ingress.#: \"1\" => \"2\"\n    ingress.2214680975.cidr_blocks.#: \"1\" => \"1\"\n    ingress.2214680975.cidr_blocks.0: \"0.0.0.0/0\" => \"0.0.0.0/0\"\n    ingress.2214680975.from_port: \"80\" => \"80\"\n    ingress.2214680975.protocol: \"tcp\" => \"tcp\"\n    ingress.2214680975.security_groups.#: \"0\" => \"0\"\n    ingress.2214680975.self: \"0\" => \"0\"\n    ingress.2214680975.to_port: \"80\" => \"80\"\n    ingress.2617001939.cidr_blocks.#: \"0\" => \"1\"\n    ingress.2617001939.cidr_blocks.0: \"\" => \"0.0.0.0/0\"\n    ingress.2617001939.from_port: \"\" => \"443\"\n    ingress.2617001939.protocol: \"\" => \"tcp\"\n    ingress.2617001939.security_groups.#: \"0\" => \"0\"\n    ingress.2617001939.self: \"\" => \"0\"\n    ingress.2617001939.to_port: \"\" => \"443\"\n    Plan: 0 to add, 1 to change, 0 to destroy.\n\n    ```", "```\n    $ terraform apply\n    ...\n    aws_security_group.terraform-elb: Modifying...\n    ingress.#: \"1\" => \"2\"\n    ingress.2214680975.cidr_blocks.#: \"1\" => \"1\"\n    ingress.2214680975.cidr_blocks.0: \"0.0.0.0/0\" => \"0.0.0.0/0\"\n    ingress.2214680975.from_port: \"80\" => \"80\"\n    ingress.2214680975.protocol: \"tcp\" => \"tcp\"\n    ingress.2214680975.security_groups.#: \"0\" => \"0\"\n    ingress.2214680975.self: \"0\" => \"0\"\n    ingress.2214680975.to_port: \"80\" => \"80\"\n    ingress.2617001939.cidr_blocks.#: \"0\" => \"1\"\n    ingress.2617001939.cidr_blocks.0: \"\" => \"0.0.0.0/0\"\n    ingress.2617001939.from_port: \"\" => \"443\"\n    ingress.2617001939.protocol: \"\" => \"tcp\"\n    ingress.2617001939.security_groups.#: \"0\" => \"0\"\n    ingress.2617001939.self: \"\" => \"0\"\n    ingress.2617001939.to_port: \"\" => \"443\"\n    aws_security_group.terraform-elb: Modifications complete\n    ...\n    Apply complete! Resources: 0 added, 1 changed, 0 destroyed.\n\n    ```", "```\n$ terraform destroy\nDo you really want to destroy?\nTerraform will delete all your managed infrastructure.\nThere is no undo. Only 'yes' will be accepted to confirm.\nEnter a value: yes\n\n```", "```\nApply complete! Resources: 0 added, 0 changed, 22 destroyed.\n\n```", "```\n$ pip install awscli\n$ aws --version\naws-cli/1.10.34 ...\n\n```", "```\n    \"cloudformation:CancelUpdateStack\",\n    \"cloudformation:ContinueUpdateRollback\",\n    \"cloudformation:Create*\",\n    \"cloudformation:Describe*\",\n    \"cloudformation:EstimateTemplateCost\",\n    \"cloudformation:ExecuteChangeSet\",\n    \"cloudformation:Get*\",\n    \"cloudformation:List*\",\n    \"cloudformation:PreviewStackUpdate\",\n    \"cloudformation:SetStackPolicy\",\n    \"cloudformation:SignalResource\",\n    \"cloudformation:UpdateStack\",\n    \"cloudformation:ValidateTemplate\",\n    \"autoscaling:CreateAutoScalingGroup\",\n    \"autoscaling:CreateLaunchConfiguration\",\n    \"autoscaling:DeleteLaunchConfiguration\",\n    \"autoscaling:Describe*\",\n    \"autoscaling:UpdateAutoScalingGroup\",\n    \"ec2:AllocateAddress\",\n    \"ec2:AssociateAddress\",\n    \"ec2:AssociateRouteTable\",\n    \"ec2:AttachInternetGateway\",\n    \"ec2:AuthorizeSecurityGroupEgress\",\n    \"ec2:AuthorizeSecurityGroupIngress\",\n    \"ec2:CreateInternetGateway\",\n    \"ec2:CreateNatGateway\",\n    \"ec2:CreateRoute\",\n    \"ec2:CreateRouteTable\",\n    \"ec2:CreateSecurityGroup\",\n    \"ec2:CreateSubnet\",\n    \"ec2:CreateTags\",\n    \"ec2:CreateVpc\",\n    \"ec2:Describe*\",\n    \"ec2:Modify*\",\n    \"ec2:RevokeSecurityGroupEgress\",\n    \"elasticloadbalancing:CreateLoadBalancer\",\n    \"elasticloadbalancing:CreateLoadBalancerListeners\",\n    \"elasticloadbalancing:Describe*\",\n    \"elasticloadbalancing:ModifyLoadBalancerAttributes\",\n    \"elasticloadbalancing:SetLoadBalancerPoliciesOfListener\",\n    \"rds:CreateDBInstance\",\n    \"rds:CreateDBSubnetGroup\",\n    \"rds:Describe*\"\n\n```", "```\n$ export AWS_ACCESS_KEY_ID='user_access_key'\n$ export AWS_SECRET_ACCESS_KEY='user_secret_access_key'\n\n```", "```\n$ export AWS_DEFAULT_REGION='us-east-1'\n\n```", "```\n\"Parameters\" : { \n\"vpcCidr\" : { \n\"Description\" : \"VPC CIDR\", \n\"Type\" : \"String\" \n}, \n\"vpcName\" : { \n\"Description\" : \"VPC name\", \n\"Type\" : \"String\" \n}, \n\"awsAvailabilityZones\" : { \n\"Description\" : \"List of AZs\", \n\"Type\" : \"CommaDelimitedList\" \n}, \n\"publicCidr\" : { \n\"Description\" : \"List of public subnet CIDRs\", \n\"Type\" : \"CommaDelimitedList\" \n},... \n\"rdsInstanceClass\" : { \n\"Description\" : \"RDS instance class\", \n\"Type\" : \"String\", \n\"AllowedValues\" : [\"db.t2.micro\", \"db.t2.small\", \"db.t2.medium\"] \n}, \n\"rdsUsername\" : { \n\"Description\" : \"RDS username\", \n\"Type\" : \"String\" \n}, \n\"rdsPassword\" : { \n\"Description\" : \"RDS password\", \n\"Type\" : \"String\", \n\"NoEcho\" : \"true\" \n}, \n... \n\"autoscalingGroupKeyname\" : { \n\"Description\" : \"EC2 ssh key name\", \n\"Type\" : \"AWS::EC2::KeyPair::KeyName\" \n}, \n\"autoscalingGroupImageId\" : { \n\"Description\" : \"EC2 AMI ID\", \n\"Type\" : \"AWS::EC2::Image::Id\" \n} \n} \n\n```", "```\n[ \n{ \n\"ParameterKey\": \"vpcCidr\", \n\"ParameterValue\": \"10.0.0.0/16\" \n}, \n{ \n\"ParameterKey\": \"vpcName\", \n\"ParameterValue\": \"CloudFormation\" \n}, \n{ \n\"ParameterKey\": \"awsAvailabilityZones\", \n\"ParameterValue\": \"us-east-1b,us-east-1c\"  \n}, \n{ \n\"ParameterKey\": \"publicCidr\", \n\"ParameterValue\": \"10.0.1.0/24,10.0.3.0/24\" \n}, \n{ \n\"ParameterKey\": \"privateCidr\", \n\"ParameterValue\": \"10.0.2.0/24,10.0.4.0/24\" \n}, \n{ \n\"ParameterKey\": \"rdsIdentifier\", \n\"ParameterValue\": \"cloudformation\" \n}, \n{ \n\"ParameterKey\": \"rdsStorageSize\", \n\"ParameterValue\": \"5\" \n}, \n{ \n\"ParameterKey\": \"rdsStorageType\", \n\"ParameterValue\": \"gp2\" \n}, \n{ \n\"ParameterKey\": \"rdsEngine\", \n\"ParameterValue\": \"postgres\" \n},... \n\n```", "```\n\"Logical ID\" : { \n\"Type\" : \"\", \n\"Properties\" : {} \n} \n\n```", "```\n\"Resources\" : { \n\"vpc\" : { \n\"Type\" : \"AWS::EC2::VPC\",   \n\"Properties\" : { \n\"CidrBlock\" : { \"Ref\" : \"vpcCidr\" }, \n\"EnableDnsSupport\" : \"true\", \n\"EnableDnsHostnames\" : \"true\", \n\"Tags\" : [ { \"Key\" : \"Name\", \"Value\" : { \"Ref\" : \"vpcName\" } } ] \n} \n}, \n\"publicSubnet1\" : { \n\"Type\" : \"AWS::EC2::Subnet\", \n\"Properties\" : { \n\"AvailabilityZone\" : { \"Fn::Select\" : [ \"0\", {\"Ref\" : \"awsAvailabilityZones\"} ] }, \n\"CidrBlock\" : { \"Fn::Select\" : [ \"0\", {\"Ref\" : \"publicCidr\"} ] }, \n\"MapPublicIpOnLaunch\" : \"true\", \n\"Tags\" : [ { \"Key\" : \"Name\", \"Value\" : \"Public\" } ], \n\"VpcId\" : { \"Ref\" : \"vpc\" } \n} \n}, \n... \n\"internetGateway\" : { \n\"Type\" : \"AWS::EC2::InternetGateway\", \n\"Properties\" : { \n\"Tags\" : [ { \"Key\" : \"Name\", \"Value\" : { \"Fn::Join\" : [ \" - \", [ { \"Ref\" : \"vpcName\" }, \"IGW\" ] ] } } ] \n} \n}, \n\"internetGatewayAttachment\" : { \n\"Type\" : \"AWS::EC2::VPCGatewayAttachment\", \n\"Properties\" : { \n\"InternetGatewayId\" : { \"Ref\" : \"internetGateway\" }, \n\"VpcId\" : { \"Ref\" : \"vpc\" } \n} \n}, \n\"natEip\" : { \n\"Type\" : \"AWS::EC2::EIP\", \n\"Properties\" : { \n\"Domain\" : \"vpc\" \n} \n}, \n\"natGateway\" : { \n\"Type\" : \"AWS::EC2::NatGateway\", \n\"Properties\" : { \n\"AllocationId\" : { \"Fn::GetAtt\" : [\"natEip\", \"AllocationId\"]}, \n\"SubnetId\" : { \"Ref\" : \"publicSubnet1\" } \n}, \n\"DependsOn\" : \"internetGatewayAttachment\" \n}, \n\n```", "```\n    \"rdsInstance\" : {\n    \"Type\" : \"AWS::RDS::DBInstance\",\n    \"Properties\" : {\n    \"DBInstanceIdentifier\" : { \"Ref\" : \"rdsIdentifier\" },\n    \"DBInstanceClass\" : { \"Ref\" : \"rdsInstanceClass\" },\n    \"DBSubnetGroupName\" : { \"Ref\" : \"rdsSubnetGroup\" },\n    \"Engine\" : { \"Ref\" : \"rdsEngine\" },\n    \"EngineVersion\" : { \"Ref\" : \"rdsEngineVersion\" },\n    \"MasterUserPassword\" : { \"Ref\" : \"rdsPassword\" },\n    \"MasterUsername\" : { \"Ref\" : \"rdsUsername\" },\n    \"StorageType\" : { \"Ref\" : \"rdsStorageType\" },\n    \"AllocatedStorage\" : { \"Ref\" : \"rdsStorageSize\" },\n    \"VPCSecurityGroups\" : [ { \"Ref\" : \"rdsSecurityGroup\" } ],\n    \"Tags\" : [ { \"Key\" : \"Name\", \"Value\" : { \"Ref\" : \"rdsIdentifier\" } } ]\n    }}\n\n```", "```\n    ...\n    \"elbInstance\" : {\n    \"Type\" : \"AWS::ElasticLoadBalancing::LoadBalancer\",\n    \"Properties\" : {\n    \"LoadBalancerName\" : \"cloudformation-elb\",\n    \"Listeners\" : [ { \"InstancePort\" : \"80\", \"InstanceProtocol\" : \"HTTP\", \"LoadBalancerPort\" : \"80\", \"Protocol\" : \"HTTP\" } ],\n    \"SecurityGroups\" : [ { \"Ref\" : \"elbSecurityGroup\" } ],\n    \"Subnets\" : [ { \"Ref\" : \"publicSubnet1\" }, { \"Ref\" : \"publicSubnet2\" } ],\n    \"Tags\" : [ { \"Key\" : \"Name\", \"Value\" : \"cloudformation-elb\" } ]\n    }\n    }\n\n```", "```\n    ...\n    \"launchConfiguration\" : {\n    \"Type\" : \"AWS::AutoScaling::LaunchConfiguration\",\n    \"Properties\" : {\n    \"ImageId\" : { \"Ref\": \"autoscalingGroupImageId\" },\n    \"InstanceType\" : { \"Ref\" : \"autoscalingGroupInstanceType\" },\n    \"KeyName\" : { \"Ref\" : \"autoscalingGroupKeyname\" },\n    \"SecurityGroups\" : [ { \"Ref\" : \"ec2SecurityGroup\" } ]\n\n```", "```\n    \"UserData\" : {\n    \"Fn::Base64\" : {\n    \"Fn::Join\" : [\n    \"\\n\",\n    [\n    \"#!/bin/bash\",\n    \"set -euf -o pipefail\",\n    \"exec 1> >(logger -s -t $(basename $0)) 2>&1\",\n    \"yum -y install nginx; chkconfig nginx on; service nginx start\"\n    ]\n    ]\n    }\n    }\n    }\n    }\n\n```", "```\n\"autoScalingGroup\" : { \n\"Type\" : \"AWS::AutoScaling::AutoScalingGroup\", \n\"Properties\" : { \n\"LaunchConfigurationName\" : { \"Ref\" : \"launchConfiguration\" }, \n\"DesiredCapacity\" : \"1\", \n\"MinSize\" : \"1\", \n\"MaxSize\" : \"1\", \n\"LoadBalancerNames\" : [ { \"Ref\" : \"elbInstance\" } ], \n\"VPCZoneIdentifier\" : [ { \"Ref\" : \"privateSubnet1\" }, { \"Ref\" : \"privateSubnet2\" } ], \n\"Tags\" : [ { \"Key\" : \"Name\", \"Value\" : \"cloudformation-asg\", \"PropagateAtLaunch\" : \"true\" } ] \n},  \n\"DependsOn\" : \"rdsInstance\" \n} \n\n```", "```\n\"Outputs\" : { \n\"vpcId\" : { \n\"Description\" : \"VPC ID\", \n\"Value\" : { \"Ref\" : \"vpc\" } \n}, \n\"natEip\" : { \n\"Description\" : \"NAT IP address\", \n\"Value\" : { \"Ref\" : \"natEip\" } \n}, \n\"elbDns\" : { \n\"Description\" : \"ELB DNS\", \n\"Value\" : { \"Fn::GetAtt\" : [ \"elbInstance\", \"DNSName\" ] } \n} \n} \n\n```", "```\n$ aws cloudformation validate-template --template-body file://main.json\n{\n\"Description\": \"Provisions EC2, ELB, ASG and RDS resources\",\n\"Parameters\": [\n{\n\"NoEcho\": false,\n\"Description\": \"EC2 AMI ID\",\n\"ParameterKey\": \"autoscalingGroupImageId\"\n}\n\n```", "```\n$ aws cloudformation create-stack --stack-name cfn-test --template-body \n      file://main.json --parameters file://parameters.json\n{\n\"StackId\": \"arn:aws:cloudformation:us-east-1:xxxxxx:stack/cfn-test/xxxxxx\"\n}\n\n```", "```\n$ aws cloudformation describe-stacks --stack-name cfn-test \n{ \n\"Stacks\": [ \n{ \n\"StackId\": \"arn:aws:cloudformation:us-east-xxxxxx:stack/cfn-test/xxxxxx\" \n... \n\"CreationTime\": \"2016-05-29T20:07:17.813Z\", \n\"StackName\": \"cfn-test\", \n\"NotificationARNs\": [], \n\"StackStatus\": \"CREATE_IN_PROGRESS\", \n\"DisableRollback\": false \n} \n] \n} \n\n```", "```\n$ aws cloudformation describe-stacks --stack-name cfn-test\n\"Outputs\": [\n{\n\"Description\": \"VPC ID\",\n\"OutputKey\": \"vpcId\",\n\"OutputValue\": \"vpc-xxxxxx\"\n},\n{\n\"Description\": \"NAT IP address\",\n\"OutputKey\": \"natEip\",\n\"OutputValue\": \"x.x.x.x\"\n},\n{\n\"Description\": \"ELB DNS\",\n\"OutputKey\": \"elbDns\",\n\"OutputValue\": \"cloudformation-elb-xxxxxx.us-east-1.elb.amazonaws.com\"\n}\n],\n\"CreationTime\": \"2016-05-29T20:07:17.813Z\",\n\"StackName\": \"cfn-test\",\n\"NotificationARNs\": [],\n\"StackStatus\": \"CREATE_COMPLETE\",\n\"DisableRollback\": false\n\n```", "```\n$ aws cloudformation update-stack --stack-name cfn-test \n      --template-body file://main.json \n      --parameters file://parameters.json\n\n```", "```\n        \"elbSecurityGroup\" : {\n        \"Type\" : \"AWS::EC2::SecurityGroup\",\n        \"Properties\" : {\n        \"SecurityGroupIngress\" : [ { \"ToPort\" : \"80\", \"FromPort\" : \"80\", \n        \"IpProtocol\" : \"tcp\", \"CidrIp\" : \"0.0.0.0/0\" },\n\n          { \"ToPort\" : \"443\", \"FromPort\" : \"443\", \"IpProtocol\" : \n            \"tcp\", \"CidrIp\" : \"0.0.0.0/0\" } ]\n\n    ```", "```\n    $ aws cloudformation create-change-set \n          --change-set-name updatingElbSecGroup \n          --stack-name cfn-test --template-body file://main.json \n          --parameters file://parameters.json\n\n    ```", "```\n    $ aws cloudformation describe-change-set \n          --change-set-name updatingSecGroup \n          --stack-name cfn-test\n\n    ```", "```\n    $ aws cloudformation execute-change-set --change-set-name \n          updatingSecGroup --stack-name cfn-test\n\n    ```", "```\n$ aws cloudformation delete-stack --stack-name cfn-test\n\n```"]