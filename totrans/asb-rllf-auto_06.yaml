- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automating Microsoft Windows and Network Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the complexity and wide variety of technologies, there are no one-size-fits-all
    tools in the information technology space. This is common for automation software
    as well but fortunately, Ansible can be used for most of your IT automation use
    cases because of the large community support and contributions from the vendors
    who provide these services, such as cloud platforms, network appliances, and software
    platforms.
  prefs: []
  type: TYPE_NORMAL
- en: When we talk about basic system automation, we know how easy it is to automate
    Linux machines using Ansible. However, we can do the same for Microsoft Windows
    machines as well. There are community collections and certified Content Collection
    for managing Microsoft Windows operations, such as user management, firewall,
    system management, package management, and registry configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we have thousands of modules available via different collections
    for managing network devices such as Cisco, FortiGate, Palo Alto, VyOS, F5, and
    CheckPoint. To become familiar with network automation, we will discuss the network
    connection methods and configurations for VyOS and Cisco ASA devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible remote connection methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating Microsoft Windows servers using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to network automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VyOS information gathering using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating ACL entries in a Cisco ASA device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, you will learn about the different connection methods available in Ansible.
    Then, you will learn how to configure and automate Microsoft Windows tasks using
    Ansible. Finally, you will learn about how to use Ansible for network automation.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A Linux machine for the Ansible control node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One or more Linux machines as managed nodes with Red Hat repositories configured
    (if you are using non-RHEL machines, then make sure you have the appropriate repositories
    configured to get packages and updates)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One or more Microsoft Windows machines (we used a Windows 2019 server)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One or more network devices/virtual appliances (for practicing this chapter’s
    network automation use case)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic administrative knowledge of Microsoft Windows machines, including user
    creation and package management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic administrative knowledge of network devices, including IP configuration
    and access configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible code, playbooks, commands, and snippets for this chapter can
    be found in this book’s GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-06](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-06).
  prefs: []
  type: TYPE_NORMAL
- en: Ansible remote connection methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Ansible communicates with the remote machine using the SSH protocol
    (native OpenSSH), as you learned previously in this book. For remote nodes, which
    do not have SSH server options, it is possible to use other connection methods
    such as WinRM for Microsoft Windows remote machines or **httpapi** for API-based
    remote devices (such as Cisco NXAPI and Arista eAPI).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the different connection methods used by Ansible
    for automating different devices and platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Connection methods used by Ansible ](img/B18383_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Connection methods used by Ansible
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the available Ansible `ansible-doc` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Ansible connection plugins ](img/B18383_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Ansible connection plugins
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Inventory and Connection Parameters
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.xhtml#connecting-to-hosts-behavioral-inventory-parameters](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.xhtml#connecting-to-hosts-behavioral-inventory-parameters)
    for specific connection parameters for connections such as SSH, Docker, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The number of connection plugins on your Ansible control node will depend on
    the Ansible collections you are using as by default, Ansible only has a few connection
    options such as `ssh`, `winrm`, `local`, and so on. The remaining connection plugins
    come with the Ansible collections you have installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to see details about the `ansible-doc` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Docker connection plugin details ](img/B18383_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Docker connection plugin details
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding output, we can see details about the `community.docker.docker`
    connection plugin, including its usage.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn more about Ansible connection variables and the available options
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible connection variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is possible to control the remote connection details using the Ansible inventory
    parameters and other variables. Refer to the documentation at [https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.xhtml](https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.xhtml)
    to learn more about Ansible special variables. The following screenshot shows
    the inventory variables section. Here, different remote connection details are
    mentioned, such as `ansible_connection`, `ansible_port`, and `ansible_user`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Ansible inventory variable with special variables ](img/B18383_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Ansible inventory variable with special variables
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to configure different values and variables, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible_connection`: This specifies the connection type to use, such as `ssh`,
    `local` (for `localhost` nodes), `winrm`, or `docker`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ansible_host`: The actual name or IP address of the remote node if it is different
    from the inventory name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible_user`: The user account to be used for remote node authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible_password`: The password for `ansible_user` to authenticate. Note that
    keeping `ansible_password` in plain text is not a best practice; you should consider
    keeping it encrypted using Ansible Vault (refer to [*Chapter 3*](B18383_03.xhtml#_idTextAnchor052),
    *Automating Your Daily Jobs*, the *Encrypting sensitive data using Ansible Vault*
    section and [*Chapter 13*](B18383_13.xhtml#_idTextAnchor241), *Using Ansible for
    Secret Management*) or following authentication based on SSH keys (refer to *Chapter
    1''s*, *Configuring Your Managed Nodes section*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible_port`: If the remote connection port is something other than `22`
    (the default SSH port), then specify the port number to use for the remote connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will learn about the SSH connection parameters and how
    to configure it for managed nodes.
  prefs: []
  type: TYPE_NORMAL
- en: SSH connection parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Additionally, there are SSH-specific variables such as `ansible_ssh_private_key_file`
    and `ansible_ssh_common_args` for assigning different SSH keys for different managed
    nodes if needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Ansible SSH-specific variables ](img/B18383_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Ansible SSH-specific variables
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have learned about the Ansible connection methods and connection
    parameters that are available for controlling the connection. Now, let’s learn
    how to automate Microsoft Windows servers using Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Automating Microsoft Windows servers using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As I mentioned earlier, Ansible is only available for Linux/Unix platforms,
    but that doesn’t mean you can’t use Ansible to automate Microsoft Windows machines.
    It is possible to use Ansible on a Linux/Unix machine (the Ansible control node)
    and automate your Microsoft Windows machines like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Ansible and managed nodes ](img/B18383_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Ansible and managed nodes
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple Ansible **Content Collections** can be used for Microsoft Windows
    automation. Altogether, there are more than 100 Ansible modules available for
    automating Microsoft Windows tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible modules for Microsoft Windows from the community ([https://galaxy.ansible.com/community/windows](https://galaxy.ansible.com/community/windows))
    contains 84 modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Ansible Windows module from Red Hat ([https://galaxy.ansible.com/ansible/windows](https://galaxy.ansible.com/ansible/windows))
    contains 40 modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next few sections, you will learn more about Ansible Windows automation,
    such as the supported Microsoft Windows versions, prerequisites, credential configuration,
    and inventory configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Windows Guides
  prefs: []
  type: TYPE_NORMAL
- en: The official Ansible documentation portal contains details on how to configure
    and set up Microsoft Windows machines to automate using Ansible. Refer to [https://docs.ansible.com/ansible/latest/user_guide/windows.xhtml](https://docs.ansible.com/ansible/latest/user_guide/windows.xhtml)
    and [https://www.techbeatly.com/ansible-windows](https://www.techbeatly.com/ansible-windows)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Supported Microsoft Windows operating systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ansible can manage most general-purpose Microsoft Windows operating system
    versions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Windows 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows 8.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows Server 2008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows Server2008 R2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows Server 2012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows Server 2012 R2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows Server 2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows Server 2019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows automation – Ansible control node prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is no special requirement for an Ansible control node other than installing
    the Python `pywinrm` library, which can be installed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a Python virtual environment, then remember to activate your
    virtual environment (skip this step otherwise):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `pywinrm` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that you have installed the `pywinrm` library on the exact Python
    environment Ansible is using (check `ansible --version` and see which Python version
    it is using).
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Windows automation – managed node prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Microsoft Windows machine should be installed and configured with the following
    items:'
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell 3.0 or newer (some of the Ansible modules for Microsoft Windows may
    require newer versions of PowerShell; refer to the module documentation you use).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET 4.0 or newer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **WinRM** listener should be created and activated – Ansible uses WinRM to
    connect to the Microsoft Windows machines by default. Microsoft Windows Remote
    Management is a SOAP-based remote management protocol that communicates over HTTP
    or HTTPS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Microsoft Windows firewall should be configured to allow traffic on `5985`
    (HTTP) and/or `5986` (HTTPS). If there is additional firewall or network traffic
    control between the Ansible control node and Microsoft Windows machines, then
    make sure the ports are allowed there too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the user account and WinRM on a Microsoft Windows machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will configure a user and WinRM on the Microsoft Windows
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log into the Microsoft Windows machine and create a new user called `ansible`.
    Use any method to create this user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to use the default `Administrator` group membership to demonstrate
    automation without issues. Refer to the documentation at [https://docs.microsoft.com/en-us/windows-server-essentials/manage/manage-user-accounts-in-windows-server-essentials](https://docs.microsoft.com/en-us/windows-server-essentials/manage/manage-user-accounts-in-windows-server-essentials)
    to learn more about how to manage user accounts in Windows Server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Creating a new user account on the Microsoft Windows server
    ](img/B18383_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Creating a new user account on the Microsoft Windows server
  prefs: []
  type: TYPE_NORMAL
- en: 'Like `sudo` access in Linux, you need administrator rights for the Microsoft
    Windows user that you are using to connect from Ansible to the Microsoft Windows
    machine. Add the new `ansible` user to the **Administrators** group, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Adding the Ansible user to the Administrators group ](img/B18383_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Adding the Ansible user to the Administrators group
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the PowerShell version using the `(Get-Host).Version` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Checking the PowerShell version ](img/B18383_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Checking the PowerShell version
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to configure the WinRM listener and enable the WinRM service
    on the Microsoft Windows managed node. Instead of executing multiple commands
    on PowerShell, use the ready-to-use script available in the Ansible `ConfigureRemotingForAnsible.ps1`
    repository ([https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1](https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the script and execute it on the Microsoft Windows machine, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Configuring WinRM on the Microsoft Windows machine using a
    script ](img/B18383_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Configuring WinRM on the Microsoft Windows machine using a script
  prefs: []
  type: TYPE_NORMAL
- en: If your Microsoft Windows machine is in a disconnected environment, then download
    the script from some other machine and transfer it to the Microsoft Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the WinRM configuration using the `winrm e winrm/config/listener` command
    once the script has been executed successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Verifying the WinRM configuration ](img/B18383_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Verifying the WinRM configuration
  prefs: []
  type: TYPE_NORMAL
- en: Then verify the WinRM configuration using the `winrm get winrm/config` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify port access from the Ansible control node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Verifying the Ansible to Microsoft Windows connection using
    WinRM ](img/B18383_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Verifying the Ansible to Microsoft Windows connection using WinRM
  prefs: []
  type: TYPE_NORMAL
- en: Configure Your Microsoft Windows Host to be Managed by Ansible
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://www.techbeatly.com/configure-your-windows-host-to-manage-by-ansible/](https://www.techbeatly.com/configure-your-windows-host-to-manage-by-ansible/)
    or [https://docs.ansible.com/ansible/latest/user_guide/windows_winrm.xhtml](https://docs.ansible.com/ansible/latest/user_guide/windows_winrm.xhtml)
    for additional reading.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the Microsoft Windows managed node is ready to connect using WinRM. Now,
    you need to configure these details on the Ansible side. In the next section,
    you will learn how to configure your Ansible inventory to connect to a Microsoft
    Windows managed node.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Ansible to access the Microsoft Windows machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will configure the Ansible control node with Microsoft
    Windows user and other access details:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a host entry for Microsoft Windows in the Ansible inventory (replace
    the IP address as needed for your machine):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a directory for Ansible group variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `group_vars/windows` group variable file to configure `ansible_connection`,
    `ansible_port`, and user credentials. These are special variables; see the `ansible_`
    prefix for all of them (refer to the [https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.xhtml](https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.xhtml)
    documentation to learn more about special variables):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Ansible group variable for Windows ](img/B18383_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Ansible group variable for Windows
  prefs: []
  type: TYPE_NORMAL
- en: '*Note that it is not a best practice to use basic authentication using a username
    and password in critical environments. For production and critical environments,
    you are encouraged to use a password that’s been encrypted using Ansible Vault
    or keep credentials in Ansible Automation Controller (or Ansible Tower). Also,
    you may need to create a different user rather than an Administrator. You should
    also consider using SSL certificates and other secure methods to connect Microsoft
    Windows machines from the Ansible control node.*'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Windows Management Using HTTPS and SSL
  prefs: []
  type: TYPE_NORMAL
- en: Consider using SSL certificates and other secure methods to connect Microsoft
    Windows machines from the Ansible control node (or Automation Controller). Refer
    to [https://www.techbeatly.com/ansible-windows-management-using-https-and-ssl](https://www.techbeatly.com/ansible-windows-management-using-https-and-ssl)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the Ansible to Microsoft Windows machine connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Ansible to Microsoft Windows connection test using the win_ping
    module ](img/B18383_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Ansible to Microsoft Windows connection test using the win_ping
    module
  prefs: []
  type: TYPE_NORMAL
- en: Like the `ping` module (for Linux machines), the `win_ping` module will establish
    a connection to the target machine and display the `pong` message if the connection
    is successful.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Windows automation – using Ansible to create a Windows user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will create a new user in the Microsoft Windows machine
    using Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Ansible playbook called `Chapter-06/windows-create-user.yaml`
    and add the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Ansible playbook to create a user in Microsoft Windows ](img/B18383_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Ansible playbook to create a user in Microsoft Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the Ansible playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Executing the Ansible playbook to create a user in Microsoft
    Windows ](img/B18383_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Executing the Ansible playbook to create a user in Microsoft Windows
  prefs: []
  type: TYPE_NORMAL
- en: Inventory Nodes as Extra Variables
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding playbook, we did not hardcode the `hosts` information. Instead,
    we passed the `windows` host group while executing the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the Microsoft Windows machine to see if the user has been created or
    not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.17 – New Windows user account created using Ansible ](img/B18383_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – New Windows user account created using Ansible
  prefs: []
  type: TYPE_NORMAL
- en: Find more Microsoft Windows automation use cases from your workplace, such as
    package deployment, group policy update, Active Directory operations, firewall
    management, service management, or even executing PowerShell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible for Windows Automation
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://www.ansible.com/for/windows](https://www.ansible.com/for/windows)
    to learn more about Ansible Windows automation. Visit [https://aap2.demoredhat.com/exercises/ansible_windows](https://aap2.demoredhat.com/exercises/ansible_windows)
    to find workshops and practice sessions for Microsoft Windows automation using
    Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn the basics of network automation using Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to network automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network automation using Ansible is based on different connection methods. There
    are some differences between Ansible network automation compared to Linux/Unix
    and Microsoft Windows automation. Also, note that Ansible can be used to automate
    the existing network automation tools such as Cisco ACI using the available Cisco
    ACI modules ([https://docs.ansible.com/ansible/latest/scenario_guides/guide_aci.xhtml](https://docs.ansible.com/ansible/latest/scenario_guides/guide_aci.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: Task execution on an Ansible control node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Previously, you learned that Ansible is built on top of Python, so a remote
    node must be installed with Python to execute the automation tasks (Microsoft
    Windows modules are written in PowerShell and a `winrm` connection must be set
    to use PowerShell modules). Unlike Linux/Microsoft Windows nodes, many network
    devices do not have Python and cannot run Python scripts. Hence, the network automation
    modules are processed and executed in the Ansible control node; all actual commands
    will be executed on the target network devices.
  prefs: []
  type: TYPE_NORMAL
- en: Different connection methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Network task execution can support multiple communication methods, depending
    on the operating system of the network device and its version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18 – Ansible network communication protocols (source: https://docs.ansible.com)
    ](img/B18383_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.18 – Ansible network communication protocols (source: [https://docs.ansible.com](https://docs.ansible.com))'
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to specify the appropriate method to use for the network device connection,
    the privilege escalation method (`become_method` such as `enable`), and the operating
    system of the network device, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19 – Ansible network device inventory ](img/B18383_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.19 – Ansible network device inventory
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we used the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible_connection=ansible.netcommon.network_cli` to specify the connection
    plugin to use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible_become_method=enable` to use `enable` as the privilege escalation
    method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ansible_network_os=cisco.ios.ios` to indicate the network device operating
    system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network Communication Protocols
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://docs.ansible.com/ansible/latest/network/getting_started/network_differences.xhtml#multiple-communication-protocols](https://docs.ansible.com/ansible/latest/network/getting_started/network_differences.xhtml#multiple-communication-protocols)
    for different communication protocols available for network automation using Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to create an Ansible playbook to gather
    information from a VyOS network device.
  prefs: []
  type: TYPE_NORMAL
- en: VyOS information gathering using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is an optional exercise for you to become familiar with network automation
    using Ansible. We assume that you have the basic knowledge to install and configure
    the **VyOS** appliance inside a virtual machine with your choice of virtualization
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: Download the VyOS image from [https://support.vyos.io/en/downloads](https://support.vyos.io/en/downloads)
    and install it as a virtual appliance (refer to the VyOS documentation at https://support.vyos.io/en/kb
    more for details).
  prefs: []
  type: TYPE_NORMAL
- en: VyOS Network Operating System
  prefs: []
  type: TYPE_NORMAL
- en: VyOs is an open source network operating system based on Debian Linux. VyOS
    provides most networking functionalities, such as routing, **Virtual Private Networks**
    (**VPNs**), firewalls, **Network Address Translation** (**NAT**), and so on. Refer
    to [https://vyos.io](https://vyos.io) for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following exercise, you will create a simple Ansible playbook to collect
    the operating system information from a VyOS device (or virtual appliance):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the VyOS virtual machine details to the Ansible inventory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the inventory as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.20 – Updating the Ansible inventory with VyOS device information
    ](img/B18383_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.20 – Updating the Ansible inventory with VyOS device information
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a playbook called `Chapter-06/vyos-facts.yaml` to gather the VyOS facts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.21 – Ansible playbook for collecting details from the VyOS device
    ](img/B18383_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.21 – Ansible playbook for collecting details from the VyOS device
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.22 – VyOS fact-gathering playbook output ](img/B18383_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.22 – VyOS fact-gathering playbook output
  prefs: []
  type: TYPE_NORMAL
- en: Expand the playbook by collecting more facts and generating reports using the
    methods you learned about in [*Chapter 3*](B18383_03.xhtml#_idTextAnchor052),
    *Automating Your Daily Jobs*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, you will learn about some more advanced network automation
    use cases by creating **access control list** (**ACL**) entries in a Cisco ASA
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Creating ACL entries in a Cisco ASA device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cisco ASA is a security device with the capabilities of firewall, antivirus,
    intrusion prevention, and VPN. Refer to [https://www.cisco.com/c/en/us/products/security/adaptive-security-appliance-asa-software/index.xhtml](https://www.cisco.com/c/en/us/products/security/adaptive-security-appliance-asa-software/index.xhtml)
    to learn more about Cisco ASA.
  prefs: []
  type: TYPE_NORMAL
- en: The Cisco ASA collection ([https://galaxy.ansible.com/cisco/asa](https://galaxy.ansible.com/cisco/asa))
    provides modules and plugins to automate Cisco ASA operations. In this section,
    you will learn how to use Cisco ASA modules to create ACL entries in a Cisco ASA
    device.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first task is to install the Cisco ASA collection using the `ansible-galaxy`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Like you have configured the VyOS connection variables, you need to configure
    the Cisco ASA device connection variables, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.23 – Cisco ASA inventory variables ](img/B18383_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.23 – Cisco ASA inventory variables
  prefs: []
  type: TYPE_NORMAL
- en: As usual, remember to encrypt the password using Ansible Vault (or a credential
    in Ansible Automation Controller) instead of keeping it as a plain text value
    inside the file. Also, notice the connection variables we have used for the Cisco
    ASA device, such as `ansible_network_os=cisco.asa.asa` and `ansible_connection=ansible.netcommon.network_cli`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical ACL entry creation task includes multiple steps, as shown in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.24 – ACL entry creation steps for Cisco ASA ](img/B18383_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.24 – ACL entry creation steps for Cisco ASA
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the standard pre-tasks and post-tasks as per the organization’s policies
    and procedures. It is a best practice to create Ansible roles based on specific
    operations, such as creating an object group, backup configuration, or creating
    an ACL entry. To make this easier to understand, I have used a single playbook
    for this demonstration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.25 – Cisco ACL playbook with variables ](img/B18383_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.25 – Cisco ACL playbook with variables
  prefs: []
  type: TYPE_NORMAL
- en: In the actual environment, take those variables (shown in *Figure 6.25*) from
    the variable file in the repository (as a source of truth) or collect them using
    a Survey form in Ansible Automation Controller (or Ansible Tower).
  prefs: []
  type: TYPE_NORMAL
- en: Add the tasks to the playbook to implement the steps explained in *Figure 6.24*.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you must take the backup of the current configuration to the TFTP server
    using the `cisco.asa.asa_command` module, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.26 – Playbook task to take the Cisco ASA backup ](img/B18383_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.26 – Playbook task to take the Cisco ASA backup
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a task to create the object group using the `cisco.asa.asa_ogs` module,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.27 – Playbook task to create the object group ](img/B18383_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.27 – Playbook task to create the object group
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the task to create the ACL entry using the `cisco.asa.asa_acls`
    module, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.28 – Playbook task to create the ACL entry ](img/B18383_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.28 – Playbook task to create the ACL entry
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the playbook and verify that the task has been completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.29 – Cisco ASA ACL playbook execution ](img/B18383_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.29 – Cisco ASA ACL playbook execution
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the playbook has been executed successfully, verify its details from the
    Cisco ASA device by logging in. The following screenshot shows the sample output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.30 – Verifying the ACL entry’s creation from the Cisco ASA device
    console ](img/B18383_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.30 – Verifying the ACL entry’s creation from the Cisco ASA device console
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, log in to the TFTP server and verify that the backups have been created
    from the playbook tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.31 – Verifying the configuration backups in the TFTP server ](img/B18383_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.31 – Verifying the configuration backups in the TFTP server
  prefs: []
  type: TYPE_NORMAL
- en: This use case can be expanded by adding multiple rules, object groups, and other
    backup methods. Refer to the Cisco ASA module documentation at [https://docs.ansible.com/ansible/latest/collections/cisco/asa/index.xhtml](https://docs.ansible.com/ansible/latest/collections/cisco/asa/index.xhtml)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Expand your knowledge with other network devices you have such as Cisco, Arista,
    Juniper Network, or HPE devices, but remember to use the appropriate connection
    methods and parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible for Network Automation
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the documentation at [https://docs.ansible.com/ansible/latest/network/index.xhtml](https://docs.ansible.com/ansible/latest/network/index.xhtml)
    to learn more about network automation basics. Also, check out *Network Getting
    Started* ([https://docs.ansible.com/ansible/latest/network/getting_started/index.xhtml](https://docs.ansible.com/ansible/latest/network/getting_started/index.xhtml))
    to start configuring network automation.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://www.ansible.com/use-cases/network-automation?hsLang=en-us](https://www.ansible.com/use-cases/network-automation?hsLang=en-us)
    to learn more about Red Hat Ansible Network Automation. Also, check out the Ansible
    Network Automation Workshop ([https://aap2.demoredhat.com/exercises/ansible_network](https://aap2.demoredhat.com/exercises/ansible_network))
    for practice guides.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about different remote connection methods and connection
    variables available in Ansible. After that, you explored Microsoft Windows automation
    using Ansible. You learned how to connect to a Microsoft Windows machine from
    Ansible and create a new user account using an Ansible playbook.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned the difference in network automation between Linux and Windows.
    You explored simple network automation using a VyOS appliance and collected system
    information using a fact-gathering playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned how to use a Cisco ASA collection and implemented a use
    case for creating an ACL entry in a Cisco ASA device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use Ansible to automate your virtualization
    and cloud platforms, such as VMware, AWS, and Google Cloud Platform.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Cisco ACI Guide*: [https://docs.ansible.com/ansible/latest/scenario_guides/guide_aci.xhtml](https://docs.ansible.com/ansible/latest/scenario_guides/guide_aci.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Self-paced interactive hands-on labs with Ansible Automation Platform*: [https://www.redhat.com/en/engage/redhat-ansible-automation-202108061218](https://www.redhat.com/en/engage/redhat-ansible-automation-202108061218)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Network Automation with Ansible*: [https://www.ansible.com/integrations/networks](https://www.ansible.com/integrations/networks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible Network Automation Workshop*: [https://aap2.demoredhat.com/exercises/ansible_network/](https://aap2.demoredhat.com/exercises/ansible_network/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
