- en: '*Chapter 4*: Modifying the Board, Workflow, and Associated Schemes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have created your first project by now, and maybe even a few new
    issues for your work. You also have a good idea of how to find your way around
    the project settings world to do some simple administration, if nothing more than
    looking at what is initially set up.
  prefs: []
  type: TYPE_NORMAL
- en: Now it is time to dig deeper into how to make changes to the original objects
    created with the project template. Very few times will you just accept what gets
    created out of the box. Most likely, there will be several changes you want to
    make so that your project reflects more closely how you work in your organization
    or on your team.
  prefs: []
  type: TYPE_NORMAL
- en: For example, modifying transitions in the workflow can be done to simplify the
    options available to users, so they only see relevant statuses when moving from
    column to column. Or maybe you want to only allow a change in statuses when a
    field is not empty (meaning the field becomes required at some point in the workflow).
  prefs: []
  type: TYPE_NORMAL
- en: Whatever your need or motivation, this chapter will provide you with the necessary
    skills to make those modifications. As you make those changes and learn additional
    administration, you will see your productivity rise quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing and modifying the workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The schemes used by **Jira Work Management** (**JWM**) projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with **Atlassian Marketplace** apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to identify the nuts and bolts
    of a JWM project board. You will understand how to add more columns to the board
    and how to arrange the order of those columns. This will be done in conjunction
    with modifying the workflow for the type of work you are accomplishing.
  prefs: []
  type: TYPE_NORMAL
- en: You will also be able to locate the schemes used to administer the JWM project
    and make simple changes to it. Finally, you will be able to explore and add some
    of the most used and powerful third-party apps available in the Atlassian Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As JWM is only available in the **Jira Cloud** environment, the requirement
    for this chapter is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to a Jira Cloud environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to an internet browser with the ability to navigate to the Atlassian
    Marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you already have access to Jira Cloud, that's great – you're ready to go!
    If not, Atlassian provides a free JWM account for up to 10 users. You can create
    your account by going to [https://www.atlassian.com/try/cloud/signup?bundle=jira-core&edition=free](https://www.atlassian.com/try/cloud/signup?bundle=jira-core&edition=free)
    and following the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Using the board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When managing software development or other technical projects, the **Kanban
    board** or **Sprint board** is the star of the show. Kanban simply wouldn't be
    Kanban without a board – either physical or digital/virtual. And Sprints are so
    much easier to manage when viewing the work on a board.
  prefs: []
  type: TYPE_NORMAL
- en: Often, this is also the case with business projects. Visually seeing the work
    you need to do or have completed and viewing the progress you have made is debatably
    best using a board. Now that JWM projects have implemented **inline editable lists**,
    the board has less significance, although it will still be the major interaction
    point for most users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lists will be covered in detail in [*Chapter 5*](B17952_05_ePub.xhtml#_idTextAnchor082),
    *JWM Toolset: Summary, List, Timeline, and the Calendar*, but for now, let''s
    take a close look at the board.'
  prefs: []
  type: TYPE_NORMAL
- en: Inherently, business projects will not use the **Scrum methodology** and therefore
    will not have Sprint boards available. And although the board that is automatically
    created when a project is created is not technically a Kanban board, it has many
    of the same attributes. But for JWM projects, we will simply call it the **board**.
  prefs: []
  type: TYPE_NORMAL
- en: As the development of the JWM product is still ongoing, you should expect to
    see some nice enhancements continue to be rolled out for the toolset, including
    the board. The images of the board shown in this book are the latest available
    at the time of publishing.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to point out some of the differences between the JWM board
    versus Jira software project boards; we will look at some of these differences
    in more detail later in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: By design, only one board is created for JWM projects. You can create additional
    Kanban boards and use issues from your JWM project, but you will lose the built-in
    connection to the project. We will explore how to do this in this chapter. As
    mentioned earlier, no Scrum or Sprint functionality exists; if you need to perform
    this type of work, you should create a Jira Software project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You cannot change the inner workings of the board – including what colors or
    fields are displayed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Columns are directly related to statuses in your workflow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only one workflow is allowed for every issue type for the board to function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To navigate to the board for any existing JWM project, we must begin by searching
    for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Projects** menu option in the top navigation bar and select your
    desired project if it is shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By design, Jira will show the last five projects that you have visited.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you do not see the desired project, click on the **View all projects** link
    and search for the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows how to search for an existing project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Searching for the project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.1_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Searching for the project
  prefs: []
  type: TYPE_NORMAL
- en: Whichever way you navigate to the project, the result will typically find you
    landing on the project board as seen in *Figure 4.2* in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Components of the board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are familiar with the boards created for Jira Software projects, the
    most glaring difference for business project boards is the lack of the **Board
    Settings** functionality. This has been true from the start of the JWM product
    precursor, Jira Core, and remains that way for the time being.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is that there is not a lot of functionality that you can change
    about the board. In this case, what you see is what you get, which makes things
    very simple. So, let''s talk about the things that we do see, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – The board'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.2_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – The board
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin at the top of the board and work our way down:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project name**: While on any JWM project board, you will see the name of
    the project displayed at the very top in the breadcrumbs section. Jira''s philosophy
    is that you arrive at a board by first navigating through a project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search and filters**: Two search boxes can be seen while on the board screen.
    One exists all of the time in the top navigation bar, that box searches the entire
    Jira instance. The second is visible on the board and only searches for information
    on that board.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Columns**: Columns represent statuses in the project''s workflow. There is
    a one-to-one relationship between the column and each status. Another way to say
    that is that every status in the workflow will appear as a column on the board.
    Statuses cannot be hidden on the board.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STAFF-4`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The due date (if one exists for the issue)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The assignee (if one exists for the issue)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolution – this appears as a checkmark on the card if the card has a resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sub-task count (if any exist for the issue)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions of the board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At face value, the board exists to show what work you are doing on the project
    and the status of that work. Outside of viewing the cards, there is very little
    functionality of a JWM project board. But let's look at what can be done.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One function is that you can quickly change the status of an issue by simply
    dragging the card from one column to another. Which column you can move the card
    to depends on which transitions exist in the project's workflow. We discuss that
    in detail in a later section in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Searching the board
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **search box** near the top of the board provides a quick way to find issues
    on the board based on issue text or the issue key. This is especially helpful
    when there are several dozen cards visible on the board. Simply begin by typing
    information into the search box and the functionality will automatically hide
    any cards that do not match what was typed in the box.
  prefs: []
  type: TYPE_NORMAL
- en: For example, typing `87` in the box will find any card on the board with a key
    that has the number 87, if one exists (`STAFF-87`, `ID-870`, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: To search your entire Jira instance for an issue, click in the search box in
    the top navigation bard.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two **QUICK FILTERS** available on the board at this time – **Assigned
    to me** and **Due this week**. As you might guess, clicking on the **Assigned
    to me** filter shows only the cards on the board that are currently assigned to
    you.
  prefs: []
  type: TYPE_NORMAL
- en: 'And clicking on **Due this week** will only show cards that have a value in
    the due datefield and the value is this week. It should be noted that if the due
    date is past due, you will see the date displayed in the color red. For cards
    that have not reached the due date, the dates will display in black. Note that
    the year is not included, just the day and month:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Board with recent dates'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.3_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Board with recent dates
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are more familiar with our way around the board, let's see how we
    can add some work to it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an issue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, as we discussed in [*Chapter 3*](B17952_03_ePub.xhtml#_idTextAnchor047),
    *Creating Your First Project*, you can create new issues directly on the board.
    To do that, click on the **Create** button at the bottom of the first column on
    the board, as shown in *Figure 4.3*. This will pop up a new box with the words
    **Start typing** visible.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to work with the standard board, let's explore how
    a second board can be created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a second board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let me note that this is more of an advanced step and definitely outside-of-the-box
    thinking. Because of that, this new board will not be accessible directly from
    the project as the built-in board is. We will understand this better after we
    have created the board.
  prefs: []
  type: TYPE_NORMAL
- en: 'So why would you want to create a second board? Mainly because the initial
    board created with your JWM project is not very customizable. With a second board,
    you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You can choose to name the board whatever you like.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can choose the board filter being used, which will give you better control
    of the issues displayed on the board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can add your own quick filters to the board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can control colors for the side panel of the cards on the board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can control which fields are displayed on the card when viewing the board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have more control as to who can even see the board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To begin, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the search box in the top navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Boards** at the bottom of the display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create board** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Scrum or Kanban. Unless you are using Sprints (which is very rare for
    business projects), click the **Create a Kanban board** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the option for **Board from an existing project**. Then click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the board a name and select the project to which you would like to add
    this new board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Location**, select **Personal** and then your username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Create board** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For steps 7 and 8, your view will look something like *Figure 4.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Board location'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.4_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Board location
  prefs: []
  type: TYPE_NORMAL
- en: It's the **Location** field that gives most administrators trouble. Since this
    is a second board outside the purview of the main JWM project board, Jira does
    not allow you to use any JWM project for the **Location** field. That means that
    you cannot select the board from the left-hand menu while you are on the board.
    This makes it very hard for other users to find the board. I have found that the
    best method is simply to bookmark the URL for the board in your browser and share
    the address with others.
  prefs: []
  type: TYPE_NORMAL
- en: Other users can also find the board by searching on the list of boards at [https://yourdomain.atlassian.net/jira/boards](https://yourdomain.atlassian.net/jira/boards),
    where `yourdomain` is the domain for your Jira instance.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, it's a bit of trouble to get the board set up and to share it with others,
    but many administrators and users find the increased functionality of the second
    board to be worth it. To learn more about board creation process, you can see
    the guidance from Atlassian Support at [https://support.atlassian.com/jira-software-cloud/docs/create-a-board/](https://support.atlassian.com/jira-software-cloud/docs/create-a-board/).
    And you can learn more about the board configuration process at [https://support.atlassian.com/jira-software-cloud/docs/configure-a-company-managed-board/](https://support.atlassian.com/jira-software-cloud/docs/configure-a-company-managed-board/).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will see how to make changes to the project workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing and modifying the workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw the importance of workflows in [*Chapter 2*](B17952_02_ePub.xhtml#_idTextAnchor023),
    *Working with Project Templates*, and we explored how to access them in [*Chapter
    3*](B17952_03_ePub.xhtml#_idTextAnchor047), *Creating Your First Project*. Now
    we will learn how to make changes to the workflow and how that affects the board.
  prefs: []
  type: TYPE_NORMAL
- en: As a review, you must be a project administrator or a Jira administrator to
    be able to make changes to the workflow used by the project. If the workflow is
    shared across multiple projects, you must be a Jira administrator to alter the
    shared workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will see how to share a workflow across multiple projects later in this
    section. For our initial purposes here, we will assume the workflow attached to
    the project is the original workflow created when we created the project and that
    it is not connected to any other project. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To access the project workflow scheme, you must first begin by clicking on **Project
    settings** in the lower options of the left menu:![Figure 4.5 – Project settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_4.5_B17952.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.5 – Project settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Again, if you do not see the **Project settings** menu option, then you do
    not have project administrator permissions. Once inside the **Project settings**
    environment, click on the **Workflows** link on the left menu. This will display
    the workflow scheme attached to the project, as seen in *Figure 4.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Project workflow scheme'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.6_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Project workflow scheme
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, JWM projects have only one workflow created for all issue types
    on the project. The workflow is present inside a workflow scheme, which is attached
    to the project. So, in our example in the preceding screenshot, **STAFF: Project
    Management Workflow Scheme** is the name of our workflow scheme. Note that **STAFF:
    Project Management Workflow** is indeed the name of our workflow and is associated
    with both the **Task** and **Sub-task** issue types.'
  prefs: []
  type: TYPE_NORMAL
- en: The workflow text view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can view the workflow in text form by clicking on the **View as text** link
    beside the workflow name, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'The text version is helpful primarily for seeing the relationships between
    statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Workflow text view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.7_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Workflow text view
  prefs: []
  type: TYPE_NORMAL
- en: These relationships are called **transitions** in the Jira world and identify
    the statuses that issues can move to and from. These transitions appear as lines
    in the **diagram** version, which we see displayed in *Figure 4.8*.
  prefs: []
  type: TYPE_NORMAL
- en: To read the text version, the left side shows all of the statuses in the workflow.
    You can think of statuses as steps along the workflow path, and they appear as
    columns on the project board. The right-hand side shows the status that each of
    the left-hand statuses can move to. For instance, issues in the **TO DO** status
    can move to either the **IN PROGRESS** status or the **DONE** status.
  prefs: []
  type: TYPE_NORMAL
- en: The column in the middle shows the name of the transition that would be used
    to navigate to the desired next step or status. So, to move from the **TO DO**
    status to the **IN PROGRESS** status, you would use the **Start Progress** transition.
  prefs: []
  type: TYPE_NORMAL
- en: These transitions also make it known whether you can move from one status to
    another. If no transition exists between two statuses, it is not possible to move
    an issue between them. Our example in *Figure 4.7* is very straightforward in
    that all three statuses can move to both other statuses. This is not the case
    in all workflows. Some workflows follow a more linear path with steps that must
    be navigated in a rigid order.
  prefs: []
  type: TYPE_NORMAL
- en: Transitions will also determine which columns on a board that a card can move
    to. If no transition exists between the statuses, you will not be able to migrate
    a card from that column to the other column.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it is possible to add a screen that will pop up as you move from one
    status to another or one column to another. These screens are often referred to
    as transition screens. These screens typically have a small number of fields that
    often represent required data to move an issue between the steps. We will discuss
    these transition screens and how to add them later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The text version of the workflow will identify the name of the transition screen
    that is available or used between statuses if one exists. Otherwise, it will simply
    say **No Screen,** as shown in our example in *Figure 4.7*.
  prefs: []
  type: TYPE_NORMAL
- en: The workflow diagram view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you click on the **View as diagram** link for the workflow, as shown in
    *Figure 4.6*, you will see a more visual view of the workflow, as shown in *Figure
    4.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Workflow diagram view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.8_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Workflow diagram view
  prefs: []
  type: TYPE_NORMAL
- en: The diagram view is usually the easiest view to read and understand. The circle
    at the top represents the beginning of the workflow with the line from the circle
    to the first status (**TO DO** in this example) being known as the Create transition.
    The lines between the statuses, as mentioned earlier, represent the transitions
    between the statuses.
  prefs: []
  type: TYPE_NORMAL
- en: The arrows at the ends of the lines show the direction in which an issue might
    move from one status to the other. So, a line with arrows at both ends means that
    issues can move back and forth between the two statuses. In reality, these are
    two different transitions with each going in a singular direction. They just happen
    to overlap in the diagram as produced by the project template. We can see an example
    of the dual transition lines in *Figure 4.11*.
  prefs: []
  type: TYPE_NORMAL
- en: Look at the note in the bottom left of *Figure 4.8* that states **Mouse over
    objects to see transition names**. The objects it is referring to are the lines
    between the statuses in the diagram. To zoom in or out on the diagram, simply
    click the **+** or **–** buttons in the top left of the view.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking either of the links to **View as text** or **View as diagram** as described
    earlier will show the workflows in a read-only mode – you cannot change the workflow
    using either of these links. To make changes to the workflow, click the pencil
    icon under **Actions** on the right-hand side of the workflow scheme view, as
    shown in *Figure 4.6*.
  prefs: []
  type: TYPE_NORMAL
- en: The workflow edit mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Edit mode** will show the workflow in either the **Diagram** or **Text**
    interface. This will allow you to make changes to the workflow. Notice in *Figure
    4.9* that we have entered **Diagram** edit mode. We also have clicked on the box
    to **Show transition labels**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Workflow Diagram edit mode with transition names'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.9_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Workflow Diagram edit mode with transition names
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the transition names match the names as displayed in the **View as
    text** image, as shown in *Figure 4.7*. Also, you will see the statement **You
    are editing a draft workflow** because we entered in edit mode. At this point,
    you can make changes and then save the modifications by clicking on the **Publish
    Draft** link near the top of the page, or you can dispose of the modifications
    by clicking the **Discard Draft** link. Or you can view the original as it was
    when you first created the workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Although there is a pencil icon next to the name of the workflow, you are not
    allowed to change the name here. Clicking the icon will open a dialog box that
    enables you to add a *description* for the workflow. Adding a description will
    display the entered text just below the workflow name.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, we can make changes to the workflow in a variety of ways. First,
    let's look at the transitions. As mentioned earlier, in our example, there are
    two transitions between every two statuses. That makes it much harder to edit
    individual transitions or to even clearly see that there is more than one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on one of the lines will reveal a pop-up box to the right of the diagram.
    Since the **Stop Progress** transition is on top of the **Start Progress** transition,
    when you click on the line, only the **Stop Progress** transition can be edited
    at this point. Notice that the **Stop Progress** transition name is displayed
    in the pop-up box and is shown inside a gray box on the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Editing workflow transitions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.10_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – Editing workflow transitions
  prefs: []
  type: TYPE_NORMAL
- en: 'When you select a transition, you will see a small black dot displayed at each
    end of the line. These dots will allow you to click on the end of the line and
    drag it to another circle on the same status or on another status. This will separate
    the two lines so that you can now edit the underlying **Start Progress** transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Moving workflow transitions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.11_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.11 – Moving workflow transitions
  prefs: []
  type: TYPE_NORMAL
- en: 'When the dot is released, the **Stop Progress** name will shift to be on the
    new location of the transition line. *Figure 4.12* shows the result after all
    the transitions have been moved to provide more clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Fully separated workflow transition lines'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.12_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – Fully separated workflow transition lines
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the name of the transition, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the line for the transition you want to change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit** button in the pop-up box on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the name of the transition by changing the text in the **Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is also the point where you can add a transition screen to the transition.
    The screen must have already been created before linking it to the transition
    at this point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Simply click on the **Screen** drop-down box and select the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Transition screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.13_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – Transition screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Triggers, conditions, validators, and post functions can add a lot of power
    to the workflow. Executing a transition will cause each of these items to fire
    in the order listed. Brief descriptions of what each function provides are listed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trigger**: Causes events to happen in your connected development tools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Condition**: Controls whether the transition is visible to the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validator**: Checks that entered data is correct before allowing the transition
    to continue'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post function**: Performs additional processes such as setting values of
    fields, sending emails, auto-transitioning, and adding comments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atlassian's own document provides good guidance about each of these functions.
    You can see that guidance at [https://support.atlassian.com/jira-cloud-administration/docs/configure-advanced-issue-workflows/](https://support.atlassian.com/jira-cloud-administration/docs/configure-advanced-issue-workflows/).
  prefs: []
  type: TYPE_NORMAL
- en: Adding statuses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our Staff Meeting Project, let's say we want to add a new column to our
    project board. The intention is to bring more clarity about which presentations
    are still being prepared, which presentations have been finished and added to
    the agenda for the next staff meeting, and which presentations have been completely
    presented and are considered done.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the new column to be added to the board, we must first add a new status
    to the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: We enter **Diagram** edit mode for the workflow as described earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we click on the **Add status** button in the row just above the diagram.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It should be noted that when we add a new status to the workflow, we can select
    from existing statutes already available in our Jira instance, or we can create
    and save an entirely new status for our organization to use. In the dialog box,
    we will enter **On Agenda** for the new status name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Adding a workflow status'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.14_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.14 – Adding a workflow status
  prefs: []
  type: TYPE_NORMAL
- en: Because the **On Agenda** status does not already exist for our organization,
    we see the words **(new status)** added next to our text. This is an informational
    note that we must create this new status for our Jira instance before it can be
    used. You must click on the **On Agenda (new status)** text for the system to
    recognize that you are indeed adding a new status to your instance. Then click
    the **Add** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ensuing pop-up box allows us to select one of the three status categories
    for our new status – **To Do**, **In Progress**, or **Done**. Since **On Agenda**
    represents work that is not completely done yet, we will choose **In Progress**
    for the **Category**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.15 – Choosing a status category'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.15_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.15 – Choosing a status category
  prefs: []
  type: TYPE_NORMAL
- en: We also can add a **Description** for the new status at this stage if we choose.
    Finally, we could select the box for **Allow all statuses to transition to this
    status** if the workflow should allow an issue to move to this status from any
    other status in the workflow. We will leave the box unchecked in this case since
    the **On Agenda** status path is more linear in nature.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the status is added to the diagram, we will need to connect the new status
    to the existing **IN PROGRESS** status. We can do that by two different methods.
    One is by clicking on the **IN PROGRESS** status and dragging a new line to the
    **ON AGENDA** status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.16 – Adding a transition'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.16_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.16 – Adding a transition
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will be a dialog box that pops up to allow you to name the new transition.
    We will call this new transition `Move to On Agenda`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Naming a transition'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.17_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.17 – Naming a transition
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to click the **Add** button to save the transition and add it to the
    workflow. The second way to add a new transition is to click on the **Add transition**
    button as seen in *Figure 4.14*.
  prefs: []
  type: TYPE_NORMAL
- en: For our second transition, we will add a transition from the new **ON AGENDA**
    status to the existing **DONE** status. However, in this case, we will reuse an
    existing transition that already goes to **DONE**. The primary reason to do this
    is that it potentially saves a large amount of time by not having to add any conditions,
    validators or post functions to a transition. It will make use of the functionality
    already in place when moving to the **DONE** status. Also, if you need to modify
    the transition, it only needs to be changed in a single location and have it applied
    to all the same transitions going to the **DONE** status.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You must publish the draft workflow that contains your changes for the changes
    to be applied to your production instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, as we return to the project board, we see that the new **ON AGENDA**
    status has been automatically added as a column to the board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Board view with new status'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.18_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.18 – Board view with new status
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take a look at other schemes that are available for the administration
    of JWM projects.
  prefs: []
  type: TYPE_NORMAL
- en: The schemes used by JWM projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use a metaphor, the project board and screens are like the body of a car
    – the shiny and sleek visual of what most of us actually identify as being the
    car. It's what we see and touch and show others. But under that JWM car is the
    chassis or frame, made up of schemes that set our permissions, control notifications
    and type of work, and provide the workflow, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best place to see the grouping of schemes is in the **Summary** of **Project
    settings**. To navigate there, click on **Project settings** while on the project
    and then select **Summary**. Remember, you must be a project administrator to
    access and change project settings such as schemes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Project settings summary'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.19_B17952.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.19 – Project settings summary
  prefs: []
  type: TYPE_NORMAL
- en: Do not get too caught up in trying to read the fine print in *Figure 4.19*;
    we will discuss the major headings. We should also note that this is just a cursory
    introduction to the schemes. We will learn how to modify them in more detail in
    [*Chapter 8*](B17952_08_ePub.xhtml#_idTextAnchor132), *Configuring Permissions
    and Simple Administration*.
  prefs: []
  type: TYPE_NORMAL
- en: Some of this information has been covered in previous chapters; however, it
    is good to see the schemes listed in an easy, summarized visual where scheme purposes
    can be compared. To get started, let's review the concept of schemes.
  prefs: []
  type: TYPE_NORMAL
- en: We mentioned in [*Chapter 3*](B17952_03_ePub.xhtml#_idTextAnchor047), *Creating
    Your First Project,* that schemes are like buckets that hold individual items
    related to the bucket. For instance, the **screen scheme** bucket will hold a
    set of screens used by the project. The **workflow scheme** will hold a set of
    workflows used by the project, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some schemes are at a project level and have no components underneath them.
    They apply to all issues on the project, regardless of the issue type. Other schemes
    are related to issue types and are more granular, and thus can contain one or
    several underlying components. Let''s take a look at the list, beginning with
    the project-level schemes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Issue type scheme**: This scheme contains the list of issue types available
    for use in the project. All issues created on the project must be related to one
    of the issue types in the scheme. Since it is inherently a list of issue types,
    it operates at the project level and not the issue type level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permission scheme**: This scheme contains all permissions for the project,
    which control access to the project by users and what they are allowed to do when
    interacting with the project. It uses project roles, individual usernames, and/or
    groups to whom permissions may be granted. It operates at the project level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notification scheme**: This scheme identifies to whom and under what circumstances
    notifications are sent. Most of the notifications involve the creation of or changes
    to issues but will also address worklog or time tracking changes. It controls
    both emails and in-application notifications. It operates at the project level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Issue security scheme**: This scheme controls who can see what issues are
    in the project. Multiple levels can be made available for the project, but only
    one level can be applied to each issue. Since there is no field-level security
    available in Jira, this is the most granular security level that can be applied.
    The scheme operates at the project level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workflow scheme**: Workflows identify the path that an issue can take from
    its creation until its final resolution. There can be multiple workflows related
    to a scheme and each workflow must be related to one or more issue types. For
    JWM projects, only a single workflow is allowed within the scheme for the project
    board to function properly. The scheme operates at the issue type level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screen scheme**: This scheme provides a list of screens available for the
    project. There can be three different types of screens in the scheme – **create,
    edit, and view**. One screen type is considered the default. The screen scheme
    must be attached to an issue type screen scheme, which identifies screens at the
    issue type level. Therefore, the scheme operates at the issue type level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Issue type screen scheme**: This scheme identifies which screen schemes are
    attached to a single or multiple issue type. Therefore, you can have a separate
    create screen for each issue type, a separate edit screen for each issue type,
    and so on. Of course, it does not have to be broken down to this level. You can
    have a single screen that performs all functions – **create, edit, and view**
    – for all issue types. This is the out-of-the-box configuration for JWM projects.
    The scheme operates at the issue type level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Field configuration scheme**: This scheme controls which fields are required
    when creating a new issue on a project. You can have separate field configuration
    files for each issue type, meaning each issue type can have different required
    fields when creating an issue. The field configuration file also controls the
    description for a field along with the type of rendering for text fields. This
    scheme operates at the issue type level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All of the following schemes will automatically be created when you create a
    new JWM project. And each scheme can be modified by a project or Jira administrator,
    except for the permission scheme for free subscriptions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Working with Atlassian Marketplace apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Atlassian has long been known for the capability of its products. Whether it
    is the flagship products of the Jira family or some of the more recent acquisitions
    of other tools, Atlassian has gathered a quite impressive collection of productivity-enhancing
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: And as wonderful as this group of products has been and continues to be, Atlassian
    also extends the capabilities of Jira to even higher heights with the availability
    of products from third-party vendors through the Atlassian Marketplace. These
    are companies and applications that have been vetted by Atlassian and are available
    for additional purchase or maybe even for free!
  prefs: []
  type: TYPE_NORMAL
- en: One of the nice accompaniments of the Marketplace is that Atlassian will handle
    the billing for and collection of payment for the use of tools provided by these
    vendors. So, you get a single bill, either monthly or annually, that includes
    your Atlassian products – such as JWM, and any third-party apps.
  prefs: []
  type: TYPE_NORMAL
- en: Another amazing piece of trivia is that some of the products inside Atlassian
    started as Marketplace apps and were acquired by Atlassian over the years. Some
    of the more recent and most noticeable tools have been **Automation for Jira**
    and **ProForma Forms**. While the incorporation of Forms is still taking place,
    Automation has been a mainstay for many Jira users for the past couple of years.
  prefs: []
  type: TYPE_NORMAL
- en: As a by-product of their acquisitions, many of the tools are offered either
    for free with Jira's Standard pricing subscription or with the Premium subscription.
    So, let's highlight a couple. Both tools provide some similar functionality and
    are highly rated apps as Atlassian Platinum Marketplace Partners that have earned
    Atlassian's **Cloud Fortified** rating for security, reliability, and support
    response time.
  prefs: []
  type: TYPE_NORMAL
- en: Jira Miscellaneous Workflow Extensions by Innovalog Atlassian Apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Known by the acronym of **JMWE**, the tool's company, Innovalog, was acquired
    by Atlassian solution provider powerhouse **Appfire** in 2020\. JMWE extends Jira's
    out-of-the-box workflow function with powerful, yet easy-to-use, enhancements
    for conditions, validators, and post functions.
  prefs: []
  type: TYPE_NORMAL
- en: Much of this functionality requires no coding so that the user can be productive
    immediately. Point and click your way to automated business processes in the blink
    of an eye. Or for even more capability, add some code through easy scripting functionality
    to build your conditions or validators for complex needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the Marketplace listing here and take advantage of a free trial: [https://marketplace.atlassian.com/apps/292/jira-misc-workflow-extensions-jmwe?hosting=cloud&tab=overview](https://marketplace.atlassian.com/apps/292/jira-misc-workflow-extensions-jmwe?hosting=cloud&tab=overview).'
  prefs: []
  type: TYPE_NORMAL
- en: ScriptRunner for Jira by Adaptavist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Long one of the favorites in the Atlassian Marketplace, **ScriptRunner** is
    also one of the most recommended tools by fellow Jira users.
  prefs: []
  type: TYPE_NORMAL
- en: ScriptRunner makes use of Groovy scripts and advanced JQL to enhance and automate
    workflows while extending Jira usage.
  prefs: []
  type: TYPE_NORMAL
- en: While having a coding background will be a tremendous help in navigating the
    tool, you will find it is unmatched in the power and control you receive. The
    unique set of available JQL functions allows you to create filters that ordinary
    searches would never be able to do. This includes bulk update functionality that
    allows you to save tons of time.
  prefs: []
  type: TYPE_NORMAL
- en: Sign up for a free trial or learn more about ScriptRunner for Jira at [https://marketplace.atlassian.com/apps/6820/scriptrunner-for-jira?hosting=cloud&tab=overview](https://marketplace.atlassian.com/apps/6820/scriptrunner-for-jira?hosting=cloud&tab=overview).
  prefs: []
  type: TYPE_NORMAL
- en: Other apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Atlassian Marketplace offers hundreds of apps representing a plethora of
    functionality. There are apps for cloning, capturing time logs and reporting,
    calendars, email and notifications, checklists, and many, many more. You can see
    the full list for Cloud at [https://marketplace.atlassian.com/search?hosting=cloud](https://marketplace.atlassian.com/search?hosting=cloud).
  prefs: []
  type: TYPE_NORMAL
- en: New terms learned in this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s conclude the chapter by going through the list of new terms learned
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trigger**: Causes events to happen in your connected development tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Condition**: Controls whether the transition is visible to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validator**: Checks that entered data is correct before allowing the transition
    to continue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post function**: Performs additional processes such as setting values of
    fields, sending emails, auto-transitioning, and adding comments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inline editable lists**: Lists of issues where many, if not all, of the fields
    in the issue can be edited in the list view without opening the full issue detail
    view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quick filters**: Simple filters that are easily accessible to the user directly
    on the list view or board.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: A system field associated with a company-managed project board
    designating which project the board will be visible under. JWM projects will use
    the user''s profile instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Atlassian Marketplace**: A website where free and paid third-party apps that
    help extend the functionality of Jira are available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen, there's no better way to get started with your new project
    than by adding issues to your project board and starting to manage your work.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to modify the board and underlying workflow,
    providing us with enhanced flexibility to better adapt to how we do work in our
    organization. Now you don't have to settle for out-of-the-box functionality; you
    can modify it to meet your needs and extend your productivity.
  prefs: []
  type: TYPE_NORMAL
- en: We are also now familiar with JWM schemes and understand how to adjust them
    to give us more control of our project. And to give us even more power, we learned
    how Atlassian Marketplace apps such as JMWE and ScriptRunner can be added to the
    already excellent Jira family of products to produce even bigger and better results.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin to explore the new components that have come
    with the JWM rebranding, such as the List, Calendar, and Timeline. These are some
    of the newest and most exciting tools in the Jira toolset.
  prefs: []
  type: TYPE_NORMAL
