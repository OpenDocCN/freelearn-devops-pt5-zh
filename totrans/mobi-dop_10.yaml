- en: Debugging the Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试应用程序
- en: Debugging, in application development, is the process of identifying an issue
    or a problem, using a debugging tool or IDE that provides debugging methods. It
    involves stepping through the code and analyzing the variables and methods, and
    their values, to pinpoint the exact place of the issue.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序开发中，调试是识别问题或故障的过程，使用提供调试方法的调试工具或 IDE。它涉及逐步执行代码，分析变量和方法及其值，以精确找出问题所在。
- en: If you have been an application developer for some time now, you should have
    an idea about how important debugging is in the process of application development,
    and even if you are a new developer or just starting out, this chapter will help
    you get started with debugging terminology, how to debug Xamarin applications
    in Visual Studio, and how to troubleshoot other issues that might arise during
    development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经做了应用程序开发一段时间，应该对调试在应用程序开发过程中的重要性有所了解，即使您是一个新开发者或刚开始学习，本章也将帮助您了解调试术语、如何在
    Visual Studio 中调试 Xamarin 应用程序，以及如何排除开发过程中可能出现的其他问题。
- en: 'In this chapter, you''ll be learning in depth about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，您将深入学习以下主题：
- en: Debugging a Xamarin application in Visual Studio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中调试 Xamarin 应用程序
- en: Debugging and troubleshooting in the Android emulator
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Android 模拟器中调试和排除故障
- en: Debugging Mono class libraries and using debug logs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试 Mono 类库并使用调试日志
- en: Debugging Git connections
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试 Git 连接
- en: Terminology
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 术语
- en: 'It''s better first to get an idea of the different terms used in the process
    of debugging. These are commonly used terms and are common to all debugging platforms:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最好先了解调试过程中使用的不同术语。这些术语是常用的，并且在所有调试平台中都很常见：
- en: '**Bug**: A bug is a defect or a problem that is stopping the program or the
    application from performing its expected functions.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bug**：Bug 是指阻止程序或应用程序执行预期功能的缺陷或问题。'
- en: '**Debug**: You might have guessed it by now, but a *debug*, as the name suggests,
    involves removing bugs from the system or program. It usually denotes finding
    the problem by digging into the program and resolving it after it is identified
    by correcting the erroneous code.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Debug**：您现在可能已经猜到，*debug*，顾名思义，涉及从系统或程序中删除 Bug。它通常表示通过深入程序找到问题，并在识别问题后通过修正错误代码来解决问题。'
- en: '**Breakpoint**: As the name suggests, a breakpoint is a point where you want
    to break the running application, and by *break*, we mean *pause*. So, it is a
    point in your application program''s code where you want to pause the running
    application and see what''s happened, or what''s happening. It is very useful
    and a critical tool in debugging an application.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Breakpoint**：顾名思义，断点是您希望暂停正在运行的应用程序的地方，*pause* 就是指“暂停”。所以，断点是您希望暂停正在运行的应用程序并查看发生了什么或正在发生什么的程序代码中的一个位置。它在调试应用程序时非常有用，并且是一个至关重要的工具。'
- en: Debugging with Xamarin on Visual Studio
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中使用 Xamarin 调试
- en: Visual Studio is a great IDE for debugging any application, whether it's a web,
    mobile, or a desktop application. It uses the same debugger that comes with the
    IDE for all three, and is very easy to follow.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 是一个非常适合调试任何应用程序的 IDE，无论是 Web 应用、移动应用还是桌面应用。它使用的是 IDE 内置的调试器，适用于这三种应用，且非常易于跟随。
- en: To keep the chapter easy to follow, we'll be using the same Android application
    we developed and tested on Xamarin while debugging in Visual Studio.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持章节内容易于跟随，我们将使用在 Xamarin 上开发和测试的相同 Android 应用程序，并在 Visual Studio 中进行调试。
- en: Using the output window
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用输出窗口
- en: 'The output window in Visual Studio is a window where you can see the output
    of what''s happening. To view the output window in Visual Studio, follow these
    steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 中的输出窗口是一个可以看到发生的输出的窗口。要查看 Visual Studio 中的输出窗口，请按照以下步骤操作：
- en: 'Go to View and click Output:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入视图（View），点击输出（Output）：
- en: '![](img/d2666fc5-ead0-4eed-8376-cac9ab217289.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2666fc5-ead0-4eed-8376-cac9ab217289.png)'
- en: 'This will open a small window at the bottom where you can see the current and
    useful output being written by Visual Studio. For example, this is what is shown
    in the output windows when we rebuild the application:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个位于底部的小窗口，您可以看到 Visual Studio 写入的当前和有用的输出。例如，这是我们在重新构建应用程序时，输出窗口中显示的内容：
- en: '![](img/914e709c-5b7c-48a7-85ed-86b3d916a1e6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/914e709c-5b7c-48a7-85ed-86b3d916a1e6.png)'
- en: Using the Console class to show useful output
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Console 类显示有用的输出
- en: The `Console` class can be used to print some useful information, such as logs,
    to the output window to get an idea of what steps are being executed. This can
    help if a method is failing after certain steps, as that will be printed in the
    output window.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Console`类可以用来打印一些有用的信息，比如日志，输出到输出窗口，以便了解正在执行哪些步骤。如果某个方法在特定步骤后失败，这些信息将显示在输出窗口中。'
- en: 'To achieve this, C# has the `Console` class, which is a static class. This
    class has methods such as `Write()` and `WriteLine()` to write anything to the
    output window. The `Write()` method writes anything to the output window, and
    the `WriteLine()` method writes the same way with a new line at the end:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，C#有一个`Console`类，这是一个静态类。这个类有像`Write()`和`WriteLine()`这样的方法，可以将任何内容写入输出窗口。`Write()`方法将内容写入输出窗口，`WriteLine()`方法也是如此，不过它会在末尾添加一个换行：
- en: 'Look at the following screenshot and analyze how `Console.WriteLine()` is used
    to break down the method into several steps (it is the same `Click` event method
    that was written while developing **PhoneCallApp**):'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看以下截图，并分析如何使用`Console.WriteLine()`将方法分解为几个步骤（这是在开发**PhoneCallApp**时编写的相同`Click`事件方法）：
- en: '![](img/64ec0a79-f53f-44f3-b3a2-d3d2cce6a633.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64ec0a79-f53f-44f3-b3a2-d3d2cce6a633.png)'
- en: Add `Console.WriteLine()` to your code, as shown in the preceding screenshot.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向代码中添加`Console.WriteLine()`，如前面的截图所示。
- en: 'Now, run the application, perform the operation, and see the output written
    as per your code:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行应用程序，执行操作，并查看根据你的代码写入的输出：
- en: '![](img/17ab4d18-7ce4-4e3d-82bd-641f9f52946c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17ab4d18-7ce4-4e3d-82bd-641f9f52946c.png)'
- en: This way, `Console.WriteLine()` can be used to write useful step-based outputs/logs
    to the output window, which can be analyzed to identify issues while debugging.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过这种方式，`Console.WriteLine()`可以用来将有用的步骤输出/日志写入输出窗口，便于调试时分析问题。
- en: Using breakpoints
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用断点
- en: As described earlier, breakpoints are a great way to dig deep into the code
    without much hassle. They can help check variables and their values, and the flow
    at a point or line in the code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，断点是深入了解代码的好方法，不会太麻烦。它们可以帮助检查变量及其值，检查程序在代码的某个位置或某行的执行流。
- en: 'Using breakpoints is very simple:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用断点非常简单：
- en: 'The simplest way to add a breakpoint on a line is to click on the margin, which
    is on the left side, in front of the line, or click on the line and hit the *F9*
    key:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一行上添加断点的最简单方法是点击该行前方的左侧边距，或者点击该行并按下*F9*键：
- en: '![](img/44e7bc47-ccf2-4d1e-876d-d728bbeb00fe.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44e7bc47-ccf2-4d1e-876d-d728bbeb00fe.png)'
- en: You'll see a red dot in the margin area where you clicked when the breakpoint
    is set, as shown in the preceding screenshot.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当设置断点时，你会看到在你点击的边距区域出现一个红点，如前面的截图所示。
- en: 'Now, run the application and perform a call button click on it; the flow should
    stop at the breakpoint and the line will turn yellow when it does:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行应用程序并点击按钮；当断点处暂停时，程序的执行流会停止，且该行会变成黄色：
- en: '![](img/557f584c-d820-42cf-b023-19503cfc11e0.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/557f584c-d820-42cf-b023-19503cfc11e0.png)'
- en: 'At this point, you can inspect the values of variables before the breakpoint
    line by hovering over them:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此时，你可以通过悬停在变量上来检查断点行之前的变量值：
- en: '![](img/f40ee58e-74ef-432b-9245-a4172a2bb523.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f40ee58e-74ef-432b-9245-a4172a2bb523.png)'
- en: Setting a conditional breakpoint
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置条件断点
- en: 'You can also set a conditional breakpoint in the code, which is basically telling
    Visual Studio to pause the flow only when a certain condition is met:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在代码中设置条件断点，这基本上是告诉Visual Studio，当满足特定条件时才暂停执行：
- en: 'Right-click on the breakpoint set in the previous steps, and click Conditions:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击前面步骤中设置的断点，点击“条件”：
- en: '![](img/cfe0067f-f068-485c-b71c-f3c7572ea414.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfe0067f-f068-485c-b71c-f3c7572ea414.png)'
- en: This will open a small window over the code to set a condition for the breakpoint.
    For example, in the following screenshot, a condition is set to when `phoneNumber
    == "9900000700"`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个小窗口，允许你为断点设置一个条件。例如，在以下截图中，设置的条件是当`phoneNumber == "9900000700"`时触发。
- en: So, the breakpoint will only be hit when this condition is met; otherwise, it'll
    not be hit.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，只有当满足此条件时，断点才会被触发；否则，它将不会触发。
- en: '![](img/5eab04cb-f10a-43ec-9c09-a6d11dccaa54.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5eab04cb-f10a-43ec-9c09-a6d11dccaa54.png)'
- en: Stepping through the code
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步进调试代码
- en: 'When a breakpoint has been reached, the debug tools enable you to get control
    over the program''s execution flow. You''ll see some buttons in the toolbar, allowing
    you to run and step through the code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当到达断点时，调试工具会让你控制程序的执行流程。你将看到工具栏中的一些按钮，允许你运行和逐步调试代码：
- en: '![](img/0e88f13a-2051-4592-a046-b45d70022d89.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e88f13a-2051-4592-a046-b45d70022d89.png)'
- en: 'You can hover over these buttons to see their respective names:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以悬停在这些按钮上查看它们各自的名称：
- en: '**Step Over (F10)**: This executes the next line of code. Step Over will execute
    the function if the next line is a function call, and will stop after the function:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单步跳过 (F10)**：这将执行下一行代码。如果下一行是函数调用，单步跳过将执行该函数并在函数执行完后停止。'
- en: '![](img/4ba3d133-5d2e-4efa-8f58-fe7d2b94bf8d.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ba3d133-5d2e-4efa-8f58-fe7d2b94bf8d.png)'
- en: '**Step Into (F11)**: Step Into will stop at the next line in the case of a
    function call, allowing you to continue line-by-line debugging of the function.
    If the next line is not a function, it will behave the same as Step Over:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单步进入 (F11)**：单步进入将在函数调用的下一行停止，让你可以逐行调试该函数。如果下一行不是函数调用，它的行为将与单步跳过相同：'
- en: '![](img/1478de05-8c82-41a7-a959-41f024ef3d0f.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1478de05-8c82-41a7-a959-41f024ef3d0f.png)'
- en: '**Step Out (Shift + F11)**: This will return to the line where the current
    function was called:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跳出 (Shift + F11)**：这将返回到当前函数被调用的那一行：'
- en: '![](img/3b8a3dad-3a84-4b54-9e8c-56c242d9b8f2.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b8a3dad-3a84-4b54-9e8c-56c242d9b8f2.png)'
- en: '**Continue**: This will continue the execution and run until the next breakpoint
    is reached:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继续**：这将继续执行，直到下一个断点被触发：'
- en: '![](img/8c1ecc57-086c-4f43-bb21-352fee02d2a2.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c1ecc57-086c-4f43-bb21-352fee02d2a2.png)'
- en: '**Stop Debugging**: This will stop the debugging process:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停止调试**：这将停止调试过程：'
- en: '![](img/67446282-e1e0-4736-9246-1e3d910da205.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67446282-e1e0-4736-9246-1e3d910da205.png)'
- en: Using a watch
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用监视
- en: A watch is a very useful function in debugging; it allows us to see the values,
    types, and other details related to variables, and evaluate them in a better way
    than hovering over the variables.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 监视是调试中非常有用的功能，它允许我们查看变量的值、类型以及其他相关信息，并以比悬停变量更好的方式进行评估。
- en: 'There are two types of watch tools available in Visual Studio:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中有两种类型的监视工具：
- en: QuickWatch
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QuickWatch
- en: 'QuickWatch is similar to watch, but as the name suggests, it allows us to evaluate
    the values at the time. Follow these steps to use QuickWatch in Visual Studio:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: QuickWatch 类似于监视，但顾名思义，它允许我们评估当时的值。按以下步骤在 Visual Studio 中使用 QuickWatch：
- en: 'Right-click on the variable you want to analyze and click on QuickWatch:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击你想分析的变量并点击“QuickWatch”：
- en: '![](img/b99e641a-97f0-4f4f-9985-4300c3792dfc.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b99e641a-97f0-4f4f-9985-4300c3792dfc.png)'
- en: 'This will open a new window where you can see the type, value, and other details
    related to the variable:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个新窗口，你可以在其中查看与变量相关的类型、值和其他详细信息：
- en: '![](img/b6694928-0489-4cf7-b741-572b5ac7c8ef.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6694928-0489-4cf7-b741-572b5ac7c8ef.png)'
- en: This is very useful when a variable has a long value or string that cannot be
    read and evaluated properly by just hovering over the variable.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一个变量的值或字符串过长，无法通过仅仅悬停在变量上正确读取和评估时，这个功能也非常有用。
- en: Adding a watch
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加监视
- en: Adding a watch is similar to QuickWatch, but it is more useful when you have
    multiple variables to analyze, and looking at each variable's value can take a
    lot of time.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 添加监视类似于 QuickWatch，但当你有多个变量需要分析，并且查看每个变量的值可能需要大量时间时，它更有用。
- en: 'Follow these steps to add a watch on variables:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤为变量添加监视：
- en: 'Right-click on the variable and click Add Watch:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击变量并点击“添加监视”：
- en: '![](img/209a1258-3810-461d-bdca-1199b718ca1a.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/209a1258-3810-461d-bdca-1199b718ca1a.png)'
- en: This will add the variable to watch and show you its value always, as well as
    reflect any time it changes at runtime.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将把变量添加到监视列表中，并始终显示其值，同时反映其在运行时的任何变化。
- en: 'You can also see these variable values in a particular format for different
    data types, so you can have an XML value shown in XML format, or a JSON object
    value shown in `.json` format:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以按不同的数据类型以特定格式查看这些变量值，比如将 XML 值以 XML 格式显示，或将 JSON 对象的值以 `.json` 格式显示：
- en: '![](img/c892b4d5-8cd5-4de2-b01c-cae08aff451f.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c892b4d5-8cd5-4de2-b01c-cae08aff451f.png)'
- en: It is a lifesaver when you want to evaluate a variable's value in each step
    of the code, and see how it changes with every line.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你想在每步代码中评估变量的值，并查看它随着每一行代码的变化时，这个功能非常有用。
- en: Debugging Mono class libraries
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 Mono 类库
- en: 'Xamarin ships with the source code for Mono class libraries, and you can use
    this to debug the Xamarin (formerly known as Mono) source code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin 附带了 Mono 类库的源代码，您可以使用这些代码调试 Xamarin（以前称为 Mono）源代码：
- en: 'To be able to use this option, go to Debug | Options:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用此选项，请转到“调试 | 选项”：
- en: '![](img/c218a48e-58fc-4e4d-bab2-4993c254a18d.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c218a48e-58fc-4e4d-bab2-4993c254a18d.png)'
- en: 'Then, go to General, uncheck the Enable Just My Code option, and click OK:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，进入常规设置，取消选中“启用仅我的代码”选项，并点击“确定”：
- en: '![](img/30870a66-4f60-4194-a905-108a3fcce11f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30870a66-4f60-4194-a905-108a3fcce11f.png)'
- en: Once this is disabled, we can step into Mono class libraries and debug them.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦禁用此选项，我们就可以进入 Mono 类库并调试它们。
- en: Android debug log
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 调试日志
- en: As mentioned in previous sections of this chapter, we have seen how to use the
    `Console.WriteLine()` method to write some output steps while debugging in Visual
    Studio.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章前面部分所述，我们已经看到如何使用 `Console.WriteLine()` 方法在 Visual Studio 中调试时写入一些输出步骤。
- en: However, on a mobile platform like Android, there is no console and it is only
    available for us during debugging in Visual Studio. Android devices provide a
    log that you can utilize while coding Android apps. This is also known as **logcat**
    due to the command used to retrieve this log.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在像 Android 这样的移动平台上，没有控制台，它只在 Visual Studio 调试期间可用。Android 设备提供了一种日志，您可以在编写
    Android 应用程序时使用。这也被称为 **logcat**，因为使用该命令来获取此日志。
- en: 'To access this from Visual Studio, follow these steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 Visual Studio 访问此功能，请按以下步骤操作：
- en: 'Either you can directly click on the Device Log (logcat) icon from the Android
    tools in the toolbar, or you can go to Tools | Android | Device Log:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以直接从工具栏中的 Android 工具点击设备日志（logcat）图标，或者可以通过“工具 | Android | 设备日志”访问：
- en: '![](img/7cc0030c-c0cc-442f-a11d-eb312c1ba319.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cc0030c-c0cc-442f-a11d-eb312c1ba319.png)'
- en: 'This will open a new window where you can choose the device your application
    is running on. The application needs to be running on a physical device to be
    clear, since it is debugging when the app is running on the device and the log
    is provided by Android devices:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个新窗口，您可以在其中选择应用程序运行的设备。需要明确的是，应用程序必须在物理设备上运行，因为只有在设备上运行应用程序时，调试和日志才会由 Android
    设备提供：
- en: '![](img/0747136a-b98a-4f28-bf85-ef6428fb1a72.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0747136a-b98a-4f28-bf85-ef6428fb1a72.png)'
- en: Select the device from the dropdown that lists running applications.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列出正在运行应用程序的下拉列表中选择设备。
- en: 'When the device is selected, it automatically starts to add log entries from
    a running app in the table. Switching between devices will stop and start the
    device logging:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当选择设备时，它会自动开始将运行中的应用程序的日志条目添加到表格中。切换设备会停止并重新启动设备日志：
- en: '![](img/0f9bfdaa-d071-41ba-a616-9d722f0265e6.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f9bfdaa-d071-41ba-a616-9d722f0265e6.png)'
- en: Accessing logcat from the command line
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行访问 logcat
- en: 'Another option to view the debug log is via the command line:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 查看调试日志的另一种方法是通过命令行：
- en: Open a console window and navigate to the Android SDK `platform-tools` folder
    (such as `C:\Program Files (x86)\Android\android-sdk\platform-tools`).
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个控制台窗口，导航到 Android SDK 的 `platform-tools` 文件夹（例如 `C:\Program Files (x86)\Android\android-sdk\platform-tools`）。
- en: 'If only one device is attached, the log can be viewed with the following command:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果只连接了一个设备，可以使用以下命令查看日志：
- en: '[PRE0]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/cd338533-5a46-43fb-944a-b6be8007caa8.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd338533-5a46-43fb-944a-b6be8007caa8.png)'
- en: If more than one device is attached, then the device must be identified. For
    example, `adb -d logcat` shows the log of the only physical device connected,
    while `adb -e logcat` shows the log of the only emulator running.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果连接了多个设备，则必须识别设备。例如，`adb -d logcat` 显示唯一连接的物理设备的日志，而 `adb -e logcat` 显示唯一运行的模拟器的日志。
- en: Writing to the debug log
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入调试日志
- en: 'You can log messages to the debug log using the `Android.Util.Log` class. It
    has different levels of logging:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `Android.Util.Log` 类将消息记录到调试日志。它具有不同的日志级别：
- en: Info
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息
- en: Debug
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: Warning
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告
- en: Error
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: All these levels are self-explanatory.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些级别都是不言自明的。
- en: 'Let''s replace the `Console.WriteLine()` written in the previous section with
    `Log.Debug()` to write the logs into logcat:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将前一部分中写的 `Console.WriteLine()` 替换为 `Log.Debug()`，将日志写入 logcat：
- en: '![](img/7138e50d-218a-4a5f-8104-13dd4ec38cee.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7138e50d-218a-4a5f-8104-13dd4ec38cee.png)'
- en: 'Go to the logcat (Device Log) window and filter tags with the tag given in
    the code to see only the logs we have written in the code. In this case, the tag
    will be PhoneCall:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 logcat（设备日志）窗口，并通过代码中给定的标签过滤标签，以仅查看我们在代码中写入的日志。在这种情况下，标签将是 PhoneCall：
- en: '![](img/35966dc5-bd19-4e1e-be00-cb48314452b5.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35966dc5-bd19-4e1e-be00-cb48314452b5.png)'
- en: This is a very simple and straightforward way of debugging and monitoring an
    application running on a physical device.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一种非常简单直接的调试方式，可以监控在物理设备上运行的应用程序。
- en: Debugging Git connections
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 Git 连接
- en: 'Git is essential for saving code into repositories, but there can be some times
    when it is not working as expected, just like with our application. To debug Git
    when you are not able to fetch or clone code from the repo, try the following
    steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Git 对于将代码保存到仓库中是必不可少的，但有时候它可能无法按预期工作，就像我们应用程序遇到的问题一样。如果你无法从仓库中获取或克隆代码，尝试以下步骤来调试
    Git：
- en: '**Check your connectivity**: This will be the first thing to check when you
    are facing any issues with Git. It might be possible that your connection is not
    as you think it is. Ping any public domain site, such as [https://www.google.com](https://www.google.com),
    to check your connectivity:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查你的连接**：这是你在遇到 Git 问题时首先需要检查的事项。可能你的连接并不像你认为的那样。可以 ping 任意公共域名站点，例如[https://www.google.com](https://www.google.com)，来检查你的连接情况：'
- en: '![](img/759ac85a-a4a4-4124-9fc1-17a6ef118a82.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/759ac85a-a4a4-4124-9fc1-17a6ef118a82.png)'
- en: If you get a response like the one shown in the preceding screenshot and are
    able to ping successfully, that means your connection is totally fine.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到类似前面截图中显示的响应，并且能够成功 ping 通，这意味着你的连接完全正常。
- en: '**GIT_TRACE**: This configuration option gives us a more verbose trace to Git
    network connections and all the internal commands it goes through. Type your `git`
    command with `GIT_TRACE = 1` and it should give you a detailed verbose trace for
    it:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GIT_TRACE**：这个配置选项会为 Git 网络连接及其所有内部命令提供更详细的跟踪信息。键入你的`git`命令并设置`GIT_TRACE
    = 1`，它应该会给出详细的跟踪信息：'
- en: Add a new environment variable named `GIT_TRACE` and give it the value of `1`.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`GIT_TRACE`的新环境变量，并将其值设置为`1`。
- en: '![](img/0a2999e8-97e7-4f54-8b2c-94078c59ccf0.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a2999e8-97e7-4f54-8b2c-94078c59ccf0.png)'
- en: 'Run the `git` command and get details to identify the issue:'
  id: totrans-126
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`git`命令并获取详细信息以识别问题：
- en: '![](img/4afd75ff-9b85-440e-8311-7e173620c41a.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4afd75ff-9b85-440e-8311-7e173620c41a.png)'
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered debugging in different ways and learned to use the
    tools available in Visual Studio and Xamarin (Android) for debugging. This chapter
    also explained the Android Device Log, also known as logcat, to read and write
    logs when debugging applications on a physical device. In the next chapter, we'll
    be going through the entire development, testing, and debugging process with some
    case studies.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们以不同的方式进行了调试，并学习了如何使用 Visual Studio 和 Xamarin（Android）中的调试工具。本章还解释了 Android
    设备日志，也称为 logcat，用于在物理设备上调试应用程序时读取和写入日志。在下一章中，我们将通过一些案例研究，深入了解整个开发、测试和调试过程。
