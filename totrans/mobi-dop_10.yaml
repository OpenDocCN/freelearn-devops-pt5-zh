- en: Debugging the Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging, in application development, is the process of identifying an issue
    or a problem, using a debugging tool or IDE that provides debugging methods. It
    involves stepping through the code and analyzing the variables and methods, and
    their values, to pinpoint the exact place of the issue.
  prefs: []
  type: TYPE_NORMAL
- en: If you have been an application developer for some time now, you should have
    an idea about how important debugging is in the process of application development,
    and even if you are a new developer or just starting out, this chapter will help
    you get started with debugging terminology, how to debug Xamarin applications
    in Visual Studio, and how to troubleshoot other issues that might arise during
    development.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll be learning in depth about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a Xamarin application in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging and troubleshooting in the Android emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Mono class libraries and using debug logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Git connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terminology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s better first to get an idea of the different terms used in the process
    of debugging. These are commonly used terms and are common to all debugging platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bug**: A bug is a defect or a problem that is stopping the program or the
    application from performing its expected functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debug**: You might have guessed it by now, but a *debug*, as the name suggests,
    involves removing bugs from the system or program. It usually denotes finding
    the problem by digging into the program and resolving it after it is identified
    by correcting the erroneous code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Breakpoint**: As the name suggests, a breakpoint is a point where you want
    to break the running application, and by *break*, we mean *pause*. So, it is a
    point in your application program''s code where you want to pause the running
    application and see what''s happened, or what''s happening. It is very useful
    and a critical tool in debugging an application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with Xamarin on Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio is a great IDE for debugging any application, whether it's a web,
    mobile, or a desktop application. It uses the same debugger that comes with the
    IDE for all three, and is very easy to follow.
  prefs: []
  type: TYPE_NORMAL
- en: To keep the chapter easy to follow, we'll be using the same Android application
    we developed and tested on Xamarin while debugging in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Using the output window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The output window in Visual Studio is a window where you can see the output
    of what''s happening. To view the output window in Visual Studio, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to View and click Output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d2666fc5-ead0-4eed-8376-cac9ab217289.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open a small window at the bottom where you can see the current and
    useful output being written by Visual Studio. For example, this is what is shown
    in the output windows when we rebuild the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/914e709c-5b7c-48a7-85ed-86b3d916a1e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the Console class to show useful output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Console` class can be used to print some useful information, such as logs,
    to the output window to get an idea of what steps are being executed. This can
    help if a method is failing after certain steps, as that will be printed in the
    output window.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, C# has the `Console` class, which is a static class. This
    class has methods such as `Write()` and `WriteLine()` to write anything to the
    output window. The `Write()` method writes anything to the output window, and
    the `WriteLine()` method writes the same way with a new line at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following screenshot and analyze how `Console.WriteLine()` is used
    to break down the method into several steps (it is the same `Click` event method
    that was written while developing **PhoneCallApp**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64ec0a79-f53f-44f3-b3a2-d3d2cce6a633.png)'
  prefs: []
  type: TYPE_IMG
- en: Add `Console.WriteLine()` to your code, as shown in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, run the application, perform the operation, and see the output written
    as per your code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17ab4d18-7ce4-4e3d-82bd-641f9f52946c.png)'
  prefs: []
  type: TYPE_IMG
- en: This way, `Console.WriteLine()` can be used to write useful step-based outputs/logs
    to the output window, which can be analyzed to identify issues while debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using breakpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As described earlier, breakpoints are a great way to dig deep into the code
    without much hassle. They can help check variables and their values, and the flow
    at a point or line in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using breakpoints is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to add a breakpoint on a line is to click on the margin, which
    is on the left side, in front of the line, or click on the line and hit the *F9*
    key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44e7bc47-ccf2-4d1e-876d-d728bbeb00fe.png)'
  prefs: []
  type: TYPE_IMG
- en: You'll see a red dot in the margin area where you clicked when the breakpoint
    is set, as shown in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, run the application and perform a call button click on it; the flow should
    stop at the breakpoint and the line will turn yellow when it does:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/557f584c-d820-42cf-b023-19503cfc11e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, you can inspect the values of variables before the breakpoint
    line by hovering over them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f40ee58e-74ef-432b-9245-a4172a2bb523.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting a conditional breakpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also set a conditional breakpoint in the code, which is basically telling
    Visual Studio to pause the flow only when a certain condition is met:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the breakpoint set in the previous steps, and click Conditions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cfe0067f-f068-485c-b71c-f3c7572ea414.png)'
  prefs: []
  type: TYPE_IMG
- en: This will open a small window over the code to set a condition for the breakpoint.
    For example, in the following screenshot, a condition is set to when `phoneNumber
    == "9900000700"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, the breakpoint will only be hit when this condition is met; otherwise, it'll
    not be hit.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5eab04cb-f10a-43ec-9c09-a6d11dccaa54.png)'
  prefs: []
  type: TYPE_IMG
- en: Stepping through the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a breakpoint has been reached, the debug tools enable you to get control
    over the program''s execution flow. You''ll see some buttons in the toolbar, allowing
    you to run and step through the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e88f13a-2051-4592-a046-b45d70022d89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can hover over these buttons to see their respective names:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step Over (F10)**: This executes the next line of code. Step Over will execute
    the function if the next line is a function call, and will stop after the function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4ba3d133-5d2e-4efa-8f58-fe7d2b94bf8d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step Into (F11)**: Step Into will stop at the next line in the case of a
    function call, allowing you to continue line-by-line debugging of the function.
    If the next line is not a function, it will behave the same as Step Over:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1478de05-8c82-41a7-a959-41f024ef3d0f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step Out (Shift + F11)**: This will return to the line where the current
    function was called:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3b8a3dad-3a84-4b54-9e8c-56c242d9b8f2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Continue**: This will continue the execution and run until the next breakpoint
    is reached:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8c1ecc57-086c-4f43-bb21-352fee02d2a2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Stop Debugging**: This will stop the debugging process:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/67446282-e1e0-4736-9246-1e3d910da205.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a watch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A watch is a very useful function in debugging; it allows us to see the values,
    types, and other details related to variables, and evaluate them in a better way
    than hovering over the variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of watch tools available in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: QuickWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'QuickWatch is similar to watch, but as the name suggests, it allows us to evaluate
    the values at the time. Follow these steps to use QuickWatch in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the variable you want to analyze and click on QuickWatch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b99e641a-97f0-4f4f-9985-4300c3792dfc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open a new window where you can see the type, value, and other details
    related to the variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6694928-0489-4cf7-b741-572b5ac7c8ef.png)'
  prefs: []
  type: TYPE_IMG
- en: This is very useful when a variable has a long value or string that cannot be
    read and evaluated properly by just hovering over the variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a watch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding a watch is similar to QuickWatch, but it is more useful when you have
    multiple variables to analyze, and looking at each variable's value can take a
    lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to add a watch on variables:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the variable and click Add Watch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/209a1258-3810-461d-bdca-1199b718ca1a.png)'
  prefs: []
  type: TYPE_IMG
- en: This will add the variable to watch and show you its value always, as well as
    reflect any time it changes at runtime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also see these variable values in a particular format for different
    data types, so you can have an XML value shown in XML format, or a JSON object
    value shown in `.json` format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c892b4d5-8cd5-4de2-b01c-cae08aff451f.png)'
  prefs: []
  type: TYPE_IMG
- en: It is a lifesaver when you want to evaluate a variable's value in each step
    of the code, and see how it changes with every line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debugging Mono class libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Xamarin ships with the source code for Mono class libraries, and you can use
    this to debug the Xamarin (formerly known as Mono) source code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to use this option, go to Debug | Options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c218a48e-58fc-4e4d-bab2-4993c254a18d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, go to General, uncheck the Enable Just My Code option, and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30870a66-4f60-4194-a905-108a3fcce11f.png)'
  prefs: []
  type: TYPE_IMG
- en: Once this is disabled, we can step into Mono class libraries and debug them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android debug log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in previous sections of this chapter, we have seen how to use the
    `Console.WriteLine()` method to write some output steps while debugging in Visual
    Studio.
  prefs: []
  type: TYPE_NORMAL
- en: However, on a mobile platform like Android, there is no console and it is only
    available for us during debugging in Visual Studio. Android devices provide a
    log that you can utilize while coding Android apps. This is also known as **logcat**
    due to the command used to retrieve this log.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access this from Visual Studio, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Either you can directly click on the Device Log (logcat) icon from the Android
    tools in the toolbar, or you can go to Tools | Android | Device Log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7cc0030c-c0cc-442f-a11d-eb312c1ba319.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open a new window where you can choose the device your application
    is running on. The application needs to be running on a physical device to be
    clear, since it is debugging when the app is running on the device and the log
    is provided by Android devices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0747136a-b98a-4f28-bf85-ef6428fb1a72.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the device from the dropdown that lists running applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the device is selected, it automatically starts to add log entries from
    a running app in the table. Switching between devices will stop and start the
    device logging:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f9bfdaa-d071-41ba-a616-9d722f0265e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing logcat from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another option to view the debug log is via the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a console window and navigate to the Android SDK `platform-tools` folder
    (such as `C:\Program Files (x86)\Android\android-sdk\platform-tools`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If only one device is attached, the log can be viewed with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/cd338533-5a46-43fb-944a-b6be8007caa8.png)'
  prefs: []
  type: TYPE_IMG
- en: If more than one device is attached, then the device must be identified. For
    example, `adb -d logcat` shows the log of the only physical device connected,
    while `adb -e logcat` shows the log of the only emulator running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writing to the debug log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can log messages to the debug log using the `Android.Util.Log` class. It
    has different levels of logging:'
  prefs: []
  type: TYPE_NORMAL
- en: Info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these levels are self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s replace the `Console.WriteLine()` written in the previous section with
    `Log.Debug()` to write the logs into logcat:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7138e50d-218a-4a5f-8104-13dd4ec38cee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the logcat (Device Log) window and filter tags with the tag given in
    the code to see only the logs we have written in the code. In this case, the tag
    will be PhoneCall:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/35966dc5-bd19-4e1e-be00-cb48314452b5.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a very simple and straightforward way of debugging and monitoring an
    application running on a physical device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debugging Git connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Git is essential for saving code into repositories, but there can be some times
    when it is not working as expected, just like with our application. To debug Git
    when you are not able to fetch or clone code from the repo, try the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Check your connectivity**: This will be the first thing to check when you
    are facing any issues with Git. It might be possible that your connection is not
    as you think it is. Ping any public domain site, such as [https://www.google.com](https://www.google.com),
    to check your connectivity:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/759ac85a-a4a4-4124-9fc1-17a6ef118a82.png)'
  prefs: []
  type: TYPE_IMG
- en: If you get a response like the one shown in the preceding screenshot and are
    able to ping successfully, that means your connection is totally fine.
  prefs: []
  type: TYPE_NORMAL
- en: '**GIT_TRACE**: This configuration option gives us a more verbose trace to Git
    network connections and all the internal commands it goes through. Type your `git`
    command with `GIT_TRACE = 1` and it should give you a detailed verbose trace for
    it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a new environment variable named `GIT_TRACE` and give it the value of `1`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a2999e8-97e7-4f54-8b2c-94078c59ccf0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the `git` command and get details to identify the issue:'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4afd75ff-9b85-440e-8311-7e173620c41a.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered debugging in different ways and learned to use the
    tools available in Visual Studio and Xamarin (Android) for debugging. This chapter
    also explained the Android Device Log, also known as logcat, to read and write
    logs when debugging applications on a physical device. In the next chapter, we'll
    be going through the entire development, testing, and debugging process with some
    case studies.
  prefs: []
  type: TYPE_NORMAL
