- en: Chapter 3. Creating Our First PaaS Image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You are now ready to write your own Dockerfiles, publish them to the Docker
    Registry Hub, and create containers for them. In this chapter you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Build your own image on top of another
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Host your Dockerfiles in your GitHub account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish an image on the Docker Registry Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The WordPress image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this project, we are going to use the official WordPress Docker image as
    a base, which has Apache2 as its web server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you plan to host sites with a lot of traffic, I would recommend using an
    image based on Nginx instead of Apache2 as the web server. I have had great success
    running WordPress sites with Nginx and the memcached plugin, WP-FFPC. It can be
    a bit tricky to set up, and that's why it's out of the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let''s run a MySQL container and a WordPress container and link
    to them to see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `–p 80` option tells Docker to expose the private port `80` to the outer
    world. To find out which public port is bound to the private port `80`, run `docker
    ps` command and look in the ports column or invoke the `docker port <container-ID|name>`
    `80` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The screenshot is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The WordPress image](img/3946OT_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In my case, the public port is **49154**. Enter the full URL in the form of
    `http://public_ip:public_port` in your web browser. I'm doing this on an Amazon
    EC2 instance. I get a public domain, which is `http://ec2-54-187-234-27.us-west-2.compute.amazonaws.com:49154`
    in my case.
  prefs: []
  type: TYPE_NORMAL
- en: 'The screenshot is displayed below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The WordPress image](img/3946OT_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The WordPress installation page welcomes us, which means that the WordPress
    and the MySQL containers are working properly.
  prefs: []
  type: TYPE_NORMAL
- en: Moving from the defaults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have a default installation of WordPress run on Apache2\. Some WordPress
    plugins require you to make changes to the web server's configuration. How can
    we do that? What if we want to edit some of the files in the WordPress directory?
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is to get our own copy of the official WordPress
    repository so that we can explore the Dockerfile. The current URL that is used
    to get the repository is [https://github.com/docker-library/wordpress](https://github.com/docker-library/wordpress).
    Click on this link from the WordPress repo page on the Docker Registry Hub.
  prefs: []
  type: TYPE_NORMAL
- en: You can clone, fork, or just download the source for this Docker image. It doesn't
    matter how you get it because we're not going to use it later on. This image is
    for testing and exploring purposes. I used my EC2 instance to do this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving from the defaults](img/3946OT_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the file in any text editor to view its content. If you are—like me—using
    the terminal, you can use `vi apache/Dockerfile` to open it in the `vi` file editor.
    The current Dockerfile for the official WordPress image looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This image uses the `php:5.6-apache` image as a base and downloads and extracts
    WordPress 4.1 to `/usr/src/wordpress`. Then it adds an `ENTRYPOINT` and starts
    Apache2 in the foreground.
  prefs: []
  type: TYPE_NORMAL
- en: Our objective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make this WordPress image useable for more than demo purposes, we need to
    modify the Dockerfile in three ways. Our objectives are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing Apache for caching (through the WP Super Cache plugin)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raising the upload limit in both PHP and Apache2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing two plugins: WP Super Cache and WP Mail SMTP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for caching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two small steps to be performed to obtain website caching through
    WP Super Cache—we need to enable the `mod_headers` and `mod_expires` modules in
    Apache2.
  prefs: []
  type: TYPE_NORMAL
- en: 'On line 5 in the Dockerfile, you can see `RUN a2enmod rewrite`. The `a2enmod`
    command enables modules in Apache2, and modules are disabled by the `a2dismod`
    command. Enabling our desired modules is as easy as appending them to that line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We make those edits, build a new image, and see what happens. It takes a long
    time to build these images, since PHP is built from source. What we are looking
    for are lines that state that our modules are enabled. They will show up for just
    a few seconds in the build process.
  prefs: []
  type: TYPE_NORMAL
- en: 'You initiate a build from a Dockerfile by executing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `–t mod-wp` command sets the name of our new image to `mod-wp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The screenshot is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing for caching](img/3946OT_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The build should run through the whole process without any errors, and then
    the preparation for the cache plugin is done.
  prefs: []
  type: TYPE_NORMAL
- en: Raising the upload limit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default upload size is limited to 2 MB by PHP. This limit is too low, especially
    since blogging from mobile phones is popular and the size of a mobile phone photo
    or video is often bigger than this. I would like to have the option to upload
    videos directly on my blogs, and they can be up to 32 MB.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this limit to be raised, we need to change the limit for two parameters
    in the PHP configuration file: `upload_max_filesize` and `post_max_size`.'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the php:5.6-Apache image, which is the base image of the WordPress
    image, Dockerfile we see that it runs Debian and PHP configuration files are supposed
    to be in the `/usr/local/etc/php/conf.d/` directory. This means that if we add
    a file to that directory, it should get read in and parsed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Dockerfile for PHP 5.6 can be found at [https://github.com/docker-library/php/blob/master/5.6/Dockerfile](https://github.com/docker-library/php/blob/master/5.6/Dockerfile).
  prefs: []
  type: TYPE_NORMAL
- en: To verify that the upload limit is as low as said before, I started and installed
    an unmodified WordPress container. Then I clicked on the **Add new media** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Raising the upload limit](img/3946OT_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It says that the upload limit is 2 MB.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a configuration file named `upload-limit.ini` to the configuration
    directory, and add the two parameters to the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'These commands, all of which should be on a single line, are added to our Dockerfile
    right above the line we modified when preparing Apache for caching:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once again, build the image to ensure that no errors are produced. If you get
    an error saying that the image name already exists, you can delete the old image
    with the `docker rmi mod-wp` command or change the name to `mod-wp:latest`, which
    will update the image's tag to `latest`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the build finishes, we run a new container from the new image to check
    out what the WordPress administration interface says. We can run a container from
    our new image, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Raising the upload limit](img/3946OT_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can now see that we can upload bigger files. Just to verify, if you upload
    a file bigger than 2 MB, it will prove that the limit has been raised.
  prefs: []
  type: TYPE_NORMAL
- en: Plugin installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are going to download and install two plugins that we want in all our
    future WordPress sites. All the tasks for these plugins will be done in the entry
    point file, since we have to edit a few files in the WordPress installation.
  prefs: []
  type: TYPE_NORMAL
- en: The first plugin is WP Super Cache. We prepared Apache2 for this earlier, and
    now it's time to use that. With this plugin, our site will run faster and demand
    fewer resources from our host.
  prefs: []
  type: TYPE_NORMAL
- en: The second plugin is WP Mail SMTP, with the help of which WordPress can send
    outgoing e-mails. This container does not (and should not) include a mail server.
    With this plugin, we can make WordPress send e-mails via an external SMTP (Gmail,
    your ISPs, or anything else).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even though I have hosted and managed my own mail server for a few years now,
    it is a hassle with keeping it up to date and managing spam filters and redundancy.
    We're better off leaving that to the specialists.
  prefs: []
  type: TYPE_NORMAL
- en: 'All plugins will be downloaded with CURL and unpacked with unzip. CURL is already
    installed but unzip is not, so we have to add it to our Dockerfile, close to the
    top where the `apt-get install` command is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If we don't do this, we will get error messages during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: Since there are two plugins we have to download, extract, and activate, we will
    create a function in the `docker-entrypoint.sh` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function will go to Wordpress'' plugin site and look for the download
    URL for the latest version of the plugin. It will download and then extract it
    to the plugin folder in our Wordpress installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the function there, we can add these lines near the end of
    the file, just above the line that says `chown –R www-data:www-data ..`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Place the function and the function calls close to the bottom—in the `docker-entrypoint.sh`
    file, just above the `exec` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build the image again and start a container so that we can verify that
    everything is working as we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will take a while, and when it''s ready, you can fire up a MySQL container
    and a `mod-wp` container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you get an error that tells you that you already have a container with that
    name, either remove the old container with `docker rm some-wordpress` or use another
    name for the new container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the port by invoking `docker ps`, and look for the port binding to port
    `80` on the WordPress container. Then load the URL into your browser. This time,
    install WordPress, log in, and go to the plugins page, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugin installation](img/3946OT_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This looks just like we want it to! Great!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and activate and set up these plugins just to verify that they
    work. Start with the WP Mail SMTP plugin. I will use my Gmail account as the sender,
    but you can choose which SMTP you want. Here is a screenshot showing the settings
    for Gmail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugin installation](img/3946OT_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the bottom of this page, you can send a test e-mail. I strongly recommend
    doing this because Gmail sometimes blocks new SMTP clients. If you get an error
    message saying **Please log in via your web browser and then try again**, you've
    triggered that. In that case, you'll soon get an e-mail from Google explaining
    suspicious activity and asking you to go through a few steps to make it work.
    This is annoying but it's a good thing.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's move on to the WP Super Cache plugin. Go ahead and activate the plugin
    from the plugin page. Before we can enable it, we have to go to **Settings** |
    **Permalinks**, check the **Post name** button, and save.
  prefs: []
  type: TYPE_NORMAL
- en: Then go to **Settings** | **WP Super Cache**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Caching On** and then on **Update Status**. Now click on the **Advanced**
    tab and enable **mod_rewrite caching**, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugin installation](img/3946OT_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scroll down to the **Miscellaneous** section and check the boxes that are shown
    in the following screenshot. If you want to know exactly what all of these checkboxes
    do, you can refer to the plugins' documents.
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugin installation](img/3946OT_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you''ve saved this, you''ll get a notice at the top saying that you need
    to update the rewrite rules, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugin installation](img/3946OT_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Scroll down the page and click on the **Update Mod_Rewrite Rules** button to
    update the rewrite rules, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugin installation](img/3946OT_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The cache plugins' status should now be green, and all of the setup should be
    done. Since we are logged in to this web browser, we will not be served cached
    pages. This is important to know, and the advantage is that you won't have to
    disable the whole cache plugin just to see the uncached version of your site.
    Open another web browser (not just another window or tab in your current browser,
    unless you are using incognito or private mode) and go to your WordPress instance.
    Click on the **Hello World** title on the post. Go back to the start page. Click
    on the title again. It feels pretty fast, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that it works, you can open the development tools in your browser.
    Make sure that you don''t have caching disabled in your browser when the development
    tolls are open. Click on the **Network** tab, then click on the post''s title
    again, and then inspect that call, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugin installation](img/3946OT_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is just what we wanted to see. Great!
  prefs: []
  type: TYPE_NORMAL
- en: Making our changes persist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have made our changes, we want to create our own Dockerfile to build
    on top of the official WordPress image.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the Dockerfile should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Hosting image sources on GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Docker Registry Hub has very good support for automatic fetching of image
    updates from both Bitbucket and GitHub. You can pick whatever you want, but for
    this book, I will use GitHub. I have accounts on both services and they are both
    excellent.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hosting image sources on GitHub](img/3946OT_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At GitHub, create a new empty repository called `my-docker-images` and add an
    appropriate license if you like.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book will not go into how to add your SSH keys to GitHub and so on. There
    are excellent guides for this online. GitHub has a great guide at [https://help.github.com/articles/generating-ssh-keys/](https://help.github.com/articles/generating-ssh-keys/).
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a branch and copy our files for the modified Docker image to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the repository locally so that you can add files to it. Make sure you
    are not inside your `wordpress-master` directory, but on the same level as it
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hosting image sources on GitHub](img/3946OT_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll execute these commands one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Go to your GitHub page and try to find the WordPress branch.
  prefs: []
  type: TYPE_NORMAL
- en: For every new Docker image we want to create and publish on the Docker Registry
    Hub, we need to create a new branch in this GitHub repository. If you have a lot
    of Docker images and the images have a lot of versions, you might want to consider
    a different structure, but for this book, this approach will be great!
  prefs: []
  type: TYPE_NORMAL
- en: '![Hosting image sources on GitHub](img/3946OT_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All files are in place, and you can click on them to verify that the contents
    are what we would expect.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing an image on the Docker Registry Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're not a member of the Docker Registry Hub ([https://hub.docker.com](https://hub.docker.com)),
    now is the time to register so that you can publish your images on the public
    Docker repository, which can be accessed from anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: Automated builds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you add a repository, you should choose the **Automated Build** option
    so that you can fetch code from GitHub (or Bitbucket), as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automated builds](img/3946OT_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We'll connect with our GitHub account and select the repository we just created
    and pushed to `my-docker-images`.
  prefs: []
  type: TYPE_NORMAL
- en: We will start to add our WordPress image, so let's set the repository name to
    `wordpress` on the next screen. It's important that you enter this name correctly,
    since it cannot be changed later.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this time, we will just use one tag for our image—the **latest** tag. Ensure
    that the source: **Type** is set to **Branch** and that you''ve entered `wordpress`
    as its name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose to add this as a public repository and check the **active** checkbox.
    This means that if you push any updates to this on GitHub, the Registry Hub will
    automatically pull it and publish its changes, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automated builds](img/3946OT_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Registry Hub will now pull your branch and try to build your Docker image
    to verify that it works. You can head over to the **Build Details** tab to see
    the progress. Since it's the official WordPress image base, it should go pretty
    fast if they cache the images on their build servers. If not, it could take a
    few minutes, since PHP is compiled from source.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Automated builds](img/3946OT_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wow! We've just published an image on the Docker Registry Hub, which means that
    anyone can fetch and run containers on top of it. The status will go from **Building**
    to **Finished** when the image is published.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step would be to actually pull it ourselves to verify that it works
    as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Open your web browser and head over to your new container. You should be presented
    with the WordPress setup page.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned quite a lot. The most part was about modifying
    the Dockerfile and `ENTRYPOINT` files in order to get the Docker image that we
    wanted. Bash knowledge and programming skills are very convenient, but since all
    of this is mostly about installation, moving files, and editing settings files,
    very basic knowledge can be enough.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub is an excellent place to host your Docker repositories, and it's very
    easy to set up a new repository to get started. The Docker Registry Hub takes
    your GitHub repository and lets you pick a branch. This branch will be the source
    for a public Docker image that anyone can pull and use.
  prefs: []
  type: TYPE_NORMAL
- en: One question arises though; what about our data? It's trapped inside these MySQL
    and WordPress containers. The next chapter will show you how to handle your data.
  prefs: []
  type: TYPE_NORMAL
