- en: Chapter 3. Creating Our First PaaS Image
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：创建我们的第一个 PaaS 镜像
- en: 'You are now ready to write your own Dockerfiles, publish them to the Docker
    Registry Hub, and create containers for them. In this chapter you will:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好编写自己的 Dockerfile，将它们发布到 Docker Registry Hub，并为它们创建容器。在本章中，你将：
- en: Build your own image on top of another
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在另一个镜像基础上构建自己的镜像
- en: Host your Dockerfiles in your GitHub account
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的 Dockerfile 存放在 GitHub 账户中
- en: Publish an image on the Docker Registry Hub
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Docker Registry Hub 上发布镜像
- en: The WordPress image
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress 镜像
- en: For this project, we are going to use the official WordPress Docker image as
    a base, which has Apache2 as its web server.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将使用官方的 WordPress Docker 镜像作为基础，它的 web 服务器是 Apache2。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you plan to host sites with a lot of traffic, I would recommend using an
    image based on Nginx instead of Apache2 as the web server. I have had great success
    running WordPress sites with Nginx and the memcached plugin, WP-FFPC. It can be
    a bit tricky to set up, and that's why it's out of the scope of this book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划托管流量较大的站点，我建议使用基于 Nginx 的镜像，而不是 Apache2 作为 web 服务器。我曾成功地在 Nginx 上运行 WordPress
    站点，并使用 memcached 插件 WP-FFPC。设置可能会有些棘手，因此这不在本书的范围内。
- en: 'First of all, let''s run a MySQL container and a WordPress container and link
    to them to see what happens:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们运行一个 MySQL 容器和一个 WordPress 容器，并将它们链接在一起，看看会发生什么：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `–p 80` option tells Docker to expose the private port `80` to the outer
    world. To find out which public port is bound to the private port `80`, run `docker
    ps` command and look in the ports column or invoke the `docker port <container-ID|name>`
    `80` command.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`–p 80` 选项告诉 Docker 将私有端口 `80` 映射到外部世界。要找出哪个公共端口与私有端口 `80` 绑定，可以运行 `docker
    ps` 命令，并查看端口列，或者执行 `docker port <container-ID|name>` `80` 命令。'
- en: 'The screenshot is shown below:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 截图如下所示：
- en: '![The WordPress image](img/3946OT_03_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![WordPress 镜像](img/3946OT_03_01.jpg)'
- en: In my case, the public port is **49154**. Enter the full URL in the form of
    `http://public_ip:public_port` in your web browser. I'm doing this on an Amazon
    EC2 instance. I get a public domain, which is `http://ec2-54-187-234-27.us-west-2.compute.amazonaws.com:49154`
    in my case.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的例子中，公共端口是 **49154**。在你的 web 浏览器中输入完整的 URL，格式为 `http://public_ip:public_port`。我正在
    Amazon EC2 实例上操作，得到的公共域名是 `http://ec2-54-187-234-27.us-west-2.compute.amazonaws.com:49154`。
- en: 'The screenshot is displayed below:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 截图如下所示：
- en: '![The WordPress image](img/3946OT_03_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![WordPress 镜像](img/3946OT_03_02.jpg)'
- en: The WordPress installation page welcomes us, which means that the WordPress
    and the MySQL containers are working properly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 安装页面欢迎我们，这意味着 WordPress 和 MySQL 容器都在正常工作。
- en: Moving from the defaults
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动默认设置
- en: Now we have a default installation of WordPress run on Apache2\. Some WordPress
    plugins require you to make changes to the web server's configuration. How can
    we do that? What if we want to edit some of the files in the WordPress directory?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个基于 Apache2 运行的 WordPress 默认安装。某些 WordPress 插件需要你修改 web 服务器的配置。我们该怎么做呢？如果我们想编辑
    WordPress 目录中的一些文件呢？
- en: The first thing we need to do is to get our own copy of the official WordPress
    repository so that we can explore the Dockerfile. The current URL that is used
    to get the repository is [https://github.com/docker-library/wordpress](https://github.com/docker-library/wordpress).
    Click on this link from the WordPress repo page on the Docker Registry Hub.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要做的是获取官方 WordPress 仓库的副本，这样我们就可以探索 Dockerfile。获取仓库的当前 URL 是 [https://github.com/docker-library/wordpress](https://github.com/docker-library/wordpress)。从
    Docker Registry Hub 上的 WordPress 仓库页面点击这个链接。
- en: You can clone, fork, or just download the source for this Docker image. It doesn't
    matter how you get it because we're not going to use it later on. This image is
    for testing and exploring purposes. I used my EC2 instance to do this.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以克隆、分叉或仅下载此 Docker 镜像的源代码。无论你如何获取它都没关系，因为我们后续不会再使用它。这个镜像用于测试和探索。我是通过我的 EC2
    实例完成这个的。
- en: '![Moving from the defaults](img/3946OT_03_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![移出默认设置](img/3946OT_03_03.jpg)'
- en: 'Open the file in any text editor to view its content. If you are—like me—using
    the terminal, you can use `vi apache/Dockerfile` to open it in the `vi` file editor.
    The current Dockerfile for the official WordPress image looks like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用任何文本编辑器打开文件查看其内容。如果你像我一样使用终端，可以用 `vi apache/Dockerfile` 在 `vi` 编辑器中打开它。当前官方
    WordPress 镜像的 Dockerfile 如下所示：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This image uses the `php:5.6-apache` image as a base and downloads and extracts
    WordPress 4.1 to `/usr/src/wordpress`. Then it adds an `ENTRYPOINT` and starts
    Apache2 in the foreground.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该镜像使用 `php:5.6-apache` 镜像作为基础，并将 WordPress 4.1 下载并解压到 `/usr/src/wordpress`。然后，它添加了
    `ENTRYPOINT` 并在前台启动 Apache2。
- en: Our objective
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的目标
- en: 'To make this WordPress image useable for more than demo purposes, we need to
    modify the Dockerfile in three ways. Our objectives are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个 WordPress 镜像除了演示用途外可用，我们需要通过三种方式修改 Dockerfile。我们的目标如下：
- en: Preparing Apache for caching (through the WP Super Cache plugin)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为缓存准备 Apache（通过 WP Super Cache 插件）
- en: Raising the upload limit in both PHP and Apache2
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PHP 和 Apache2 中提高上传限制
- en: 'Installing two plugins: WP Super Cache and WP Mail SMTP'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装两个插件：WP Super Cache 和 WP Mail SMTP
- en: Preparing for caching
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为缓存准备
- en: There are two small steps to be performed to obtain website caching through
    WP Super Cache—we need to enable the `mod_headers` and `mod_expires` modules in
    Apache2.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过 WP Super Cache 获取网站缓存，有两个小步骤需要执行——我们需要在 Apache2 中启用 `mod_headers` 和 `mod_expires`
    模块。
- en: 'On line 5 in the Dockerfile, you can see `RUN a2enmod rewrite`. The `a2enmod`
    command enables modules in Apache2, and modules are disabled by the `a2dismod`
    command. Enabling our desired modules is as easy as appending them to that line:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Dockerfile 的第 5 行，你可以看到 `RUN a2enmod rewrite`。`a2enmod` 命令在 Apache2 中启用模块，`a2dismod`
    命令则禁用模块。启用我们想要的模块就像把它们附加到那行一样简单：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We make those edits, build a new image, and see what happens. It takes a long
    time to build these images, since PHP is built from source. What we are looking
    for are lines that state that our modules are enabled. They will show up for just
    a few seconds in the build process.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进行这些修改，构建一个新镜像，然后看看会发生什么。构建这些镜像需要很长时间，因为 PHP 是从源代码构建的。我们关注的是显示我们所需模块已启用的行。它们会在构建过程中显示几秒钟。
- en: 'You initiate a build from a Dockerfile by executing this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过执行以下命令来启动 Dockerfile 的构建：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `–t mod-wp` command sets the name of our new image to `mod-wp`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`–t mod-wp` 命令将我们新图像的名称设置为 `mod-wp`。'
- en: 'The screenshot is shown below:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 截图如下所示：
- en: '![Preparing for caching](img/3946OT_03_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![为缓存准备](img/3946OT_03_04.jpg)'
- en: The build should run through the whole process without any errors, and then
    the preparation for the cache plugin is done.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 构建应该顺利完成整个过程而没有任何错误，然后缓存插件的准备工作就完成了。
- en: Raising the upload limit
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提高上传限制
- en: The default upload size is limited to 2 MB by PHP. This limit is too low, especially
    since blogging from mobile phones is popular and the size of a mobile phone photo
    or video is often bigger than this. I would like to have the option to upload
    videos directly on my blogs, and they can be up to 32 MB.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 默认上传大小被 PHP 限制为 2 MB。这个限制太低，尤其是现在手机博客非常流行，而手机拍摄的照片或视频的大小通常比这个还要大。我希望能够直接在我的博客中上传视频，视频大小可以达到
    32 MB。
- en: 'For this limit to be raised, we need to change the limit for two parameters
    in the PHP configuration file: `upload_max_filesize` and `post_max_size`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高这个限制，我们需要在 PHP 配置文件中更改两个参数的限制：`upload_max_filesize` 和 `post_max_size`。
- en: Looking at the php:5.6-Apache image, which is the base image of the WordPress
    image, Dockerfile we see that it runs Debian and PHP configuration files are supposed
    to be in the `/usr/local/etc/php/conf.d/` directory. This means that if we add
    a file to that directory, it should get read in and parsed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 php:5.6-Apache 镜像，它是 WordPress 镜像的基础镜像，在 Dockerfile 中我们看到它运行的是 Debian，并且
    PHP 配置文件应该位于 `/usr/local/etc/php/conf.d/` 目录中。这意味着，如果我们将一个文件添加到该目录，它应该会被读取和解析。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Dockerfile for PHP 5.6 can be found at [https://github.com/docker-library/php/blob/master/5.6/Dockerfile](https://github.com/docker-library/php/blob/master/5.6/Dockerfile).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 5.6 的 Dockerfile 可以在 [https://github.com/docker-library/php/blob/master/5.6/Dockerfile](https://github.com/docker-library/php/blob/master/5.6/Dockerfile)
    找到。
- en: To verify that the upload limit is as low as said before, I started and installed
    an unmodified WordPress container. Then I clicked on the **Add new media** button.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证上传限制是否如前所述的那样低，我启动并安装了一个未经修改的 WordPress 容器。然后我点击了 **添加新媒体** 按钮。
- en: '![Raising the upload limit](img/3946OT_03_05.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![提高上传限制](img/3946OT_03_05.jpg)'
- en: It says that the upload limit is 2 MB.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示上传限制为 2 MB。
- en: Let's add a configuration file named `upload-limit.ini` to the configuration
    directory, and add the two parameters to the file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来为配置目录添加一个名为 `upload-limit.ini` 的配置文件，并在文件中添加这两个参数。
- en: 'These commands, all of which should be on a single line, are added to our Dockerfile
    right above the line we modified when preparing Apache for caching:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令应该放在一行内，添加到我们的 Dockerfile 中，位于我们在准备 Apache 缓存时修改的那一行之上：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once again, build the image to ensure that no errors are produced. If you get
    an error saying that the image name already exists, you can delete the old image
    with the `docker rmi mod-wp` command or change the name to `mod-wp:latest`, which
    will update the image's tag to `latest`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建镜像，以确保不会产生错误。如果出现错误提示显示镜像名称已存在，你可以使用`docker rmi mod-wp`命令删除旧镜像，或者将名称改为`mod-wp:latest`，这将更新镜像的标签为`latest`。
- en: 'When the build finishes, we run a new container from the new image to check
    out what the WordPress administration interface says. We can run a container from
    our new image, like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，我们从新镜像运行一个新容器，查看 WordPress 管理界面显示的内容。我们可以像这样运行一个新镜像的容器：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Raising the upload limit](img/3946OT_03_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![提高上传限制](img/3946OT_03_06.jpg)'
- en: We can now see that we can upload bigger files. Just to verify, if you upload
    a file bigger than 2 MB, it will prove that the limit has been raised.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到可以上传更大的文件。为了验证，如果你上传一个大于 2MB 的文件，这将证明上传限制已被提高。
- en: Plugin installation
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件安装
- en: Here, we are going to download and install two plugins that we want in all our
    future WordPress sites. All the tasks for these plugins will be done in the entry
    point file, since we have to edit a few files in the WordPress installation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将下载并安装两个插件，这些插件是我们未来所有 WordPress 网站都需要的。所有与这些插件相关的任务都将在入口文件中完成，因为我们需要编辑
    WordPress 安装中的一些文件。
- en: The first plugin is WP Super Cache. We prepared Apache2 for this earlier, and
    now it's time to use that. With this plugin, our site will run faster and demand
    fewer resources from our host.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个插件是 WP Super Cache。我们之前为此配置了 Apache2，现在可以使用它了。通过这个插件，我们的网站运行会更快，并且对主机的资源要求较少。
- en: The second plugin is WP Mail SMTP, with the help of which WordPress can send
    outgoing e-mails. This container does not (and should not) include a mail server.
    With this plugin, we can make WordPress send e-mails via an external SMTP (Gmail,
    your ISPs, or anything else).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个插件是 WP Mail SMTP，它帮助 WordPress 发送外发邮件。这个容器不包含（也不应该包含）邮件服务器。通过这个插件，我们可以让 WordPress
    通过外部 SMTP（如 Gmail、ISP 或其他任何服务）发送邮件。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Even though I have hosted and managed my own mail server for a few years now,
    it is a hassle with keeping it up to date and managing spam filters and redundancy.
    We're better off leaving that to the specialists.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我已经托管并管理了几年的邮件服务器，但它需要不断更新，还需要管理垃圾邮件过滤器和冗余。我们还是把这项工作交给专业人士更好。
- en: 'All plugins will be downloaded with CURL and unpacked with unzip. CURL is already
    installed but unzip is not, so we have to add it to our Dockerfile, close to the
    top where the `apt-get install` command is running:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有插件将通过 CURL 下载，并用 unzip 解压。CURL 已经安装，但 unzip 尚未安装，因此我们需要将它添加到 Dockerfile 中，放在`apt-get
    install`命令运行的地方。
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we don't do this, we will get error messages during the build process.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不这么做，构建过程中将会出现错误信息。
- en: Since there are two plugins we have to download, extract, and activate, we will
    create a function in the `docker-entrypoint.sh` file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有两个插件需要下载、解压和激活，我们将在`docker-entrypoint.sh`文件中创建一个函数。
- en: 'This function will go to Wordpress'' plugin site and look for the download
    URL for the latest version of the plugin. It will download and then extract it
    to the plugin folder in our Wordpress installation:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将去 WordPress 的插件站点查找最新版本插件的下载 URL。它会下载并解压到我们 WordPress 安装的插件文件夹中：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now that we have the function there, we can add these lines near the end of
    the file, just above the line that says `chown –R www-data:www-data ..`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经把函数放在了那里，可以在文件的末尾附近，`chown –R www-data:www-data ..`那行上方添加以下几行：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Place the function and the function calls close to the bottom—in the `docker-entrypoint.sh`
    file, just above the `exec` command.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将函数和函数调用放置在接近文件底部的位置——在`docker-entrypoint.sh`文件中，紧接着`exec`命令上方。
- en: 'We will build the image again and start a container so that we can verify that
    everything is working as we want:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次构建镜像并启动容器，以验证一切是否如我们所愿：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will take a while, and when it''s ready, you can fire up a MySQL container
    and a `mod-wp` container:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一些时间，准备好后，你可以启动一个 MySQL 容器和一个`mod-wp`容器：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you get an error that tells you that you already have a container with that
    name, either remove the old container with `docker rm some-wordpress` or use another
    name for the new container.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到一个错误提示，说你已经有一个同名的容器，可以通过`docker rm some-wordpress`删除旧的容器，或者为新容器使用另一个名称。
- en: 'Get the port by invoking `docker ps`, and look for the port binding to port
    `80` on the WordPress container. Then load the URL into your browser. This time,
    install WordPress, log in, and go to the plugins page, as shown in the following
    screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`docker ps`获取端口，并查找绑定到端口`80`的 WordPress 容器端口。然后将 URL 加载到浏览器中。这时，安装 WordPress，登录并进入插件页面，如下截图所示：
- en: '![Plugin installation](img/3946OT_03_07.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![插件安装](img/3946OT_03_07.jpg)'
- en: This looks just like we want it to! Great!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来正是我们想要的！太棒了！
- en: 'Let''s go ahead and activate and set up these plugins just to verify that they
    work. Start with the WP Mail SMTP plugin. I will use my Gmail account as the sender,
    but you can choose which SMTP you want. Here is a screenshot showing the settings
    for Gmail:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续激活并设置这些插件，以验证它们是否正常工作。首先从 WP Mail SMTP 插件开始。我将使用我的 Gmail 帐户作为发件人，但你可以选择任何你想用的
    SMTP。以下是 Gmail 设置的截图：
- en: '![Plugin installation](img/3946OT_03_08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![插件安装](img/3946OT_03_08.jpg)'
- en: From the bottom of this page, you can send a test e-mail. I strongly recommend
    doing this because Gmail sometimes blocks new SMTP clients. If you get an error
    message saying **Please log in via your web browser and then try again**, you've
    triggered that. In that case, you'll soon get an e-mail from Google explaining
    suspicious activity and asking you to go through a few steps to make it work.
    This is annoying but it's a good thing.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面的底部，你可以发送测试电子邮件。我强烈推荐这样做，因为 Gmail 有时会阻止新的 SMTP 客户端。如果你收到一条错误信息，说**请通过你的网页浏览器登录，然后再试一次**，说明你触发了该问题。在这种情况下，你很快会收到来自
    Google 的电子邮件，解释可疑活动并要求你执行一些步骤以使其正常工作。这很烦人，但从长远来看这是好事。
- en: Now let's move on to the WP Super Cache plugin. Go ahead and activate the plugin
    from the plugin page. Before we can enable it, we have to go to **Settings** |
    **Permalinks**, check the **Post name** button, and save.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们继续设置 WP Super Cache 插件。请从插件页面激活该插件。在启用它之前，我们需要先进入**设置** | **固定链接**，勾选**文章名**按钮，然后保存。
- en: Then go to **Settings** | **WP Super Cache**.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后进入**设置** | **WP Super Cache**。
- en: 'Click on **Caching On** and then on **Update Status**. Now click on the **Advanced**
    tab and enable **mod_rewrite caching**, as shown:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**启用缓存**，然后点击**更新状态**。接下来，点击**高级**标签，启用**mod_rewrite 缓存**，如图所示：
- en: '![Plugin installation](img/3946OT_03_09.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![插件安装](img/3946OT_03_09.jpg)'
- en: Scroll down to the **Miscellaneous** section and check the boxes that are shown
    in the following screenshot. If you want to know exactly what all of these checkboxes
    do, you can refer to the plugins' documents.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动到**其他设置**部分，勾选以下截图中显示的框。如果你想确切了解这些复选框的作用，可以参考插件文档。
- en: '![Plugin installation](img/3946OT_03_10.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![插件安装](img/3946OT_03_10.jpg)'
- en: 'When you''ve saved this, you''ll get a notice at the top saying that you need
    to update the rewrite rules, as shown:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，你会看到顶部出现一条通知，提醒你需要更新重写规则，如下所示：
- en: '![Plugin installation](img/3946OT_03_11.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![插件安装](img/3946OT_03_11.jpg)'
- en: 'Scroll down the page and click on the **Update Mod_Rewrite Rules** button to
    update the rewrite rules, as shown:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动页面，点击**更新 Mod_Rewrite 规则**按钮以更新重写规则，如下所示：
- en: '![Plugin installation](img/3946OT_03_12.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![插件安装](img/3946OT_03_12.jpg)'
- en: The cache plugins' status should now be green, and all of the setup should be
    done. Since we are logged in to this web browser, we will not be served cached
    pages. This is important to know, and the advantage is that you won't have to
    disable the whole cache plugin just to see the uncached version of your site.
    Open another web browser (not just another window or tab in your current browser,
    unless you are using incognito or private mode) and go to your WordPress instance.
    Click on the **Hello World** title on the post. Go back to the start page. Click
    on the title again. It feels pretty fast, right?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，缓存插件的状态应该显示为绿色，所有设置也应该完成。由于我们已登录到这个浏览器，我们不会看到缓存的页面。了解这一点很重要，优势是你无需禁用整个缓存插件就能看到未缓存版本的站点。请打开另一个浏览器（不要仅仅在当前浏览器中打开另一个窗口或标签页，除非你使用的是隐身模式或私密模式），然后访问你的
    WordPress 实例。点击文章中的**Hello World**标题，然后返回到首页，再次点击标题。感觉很快，对吧？
- en: 'To verify that it works, you can open the development tools in your browser.
    Make sure that you don''t have caching disabled in your browser when the development
    tolls are open. Click on the **Network** tab, then click on the post''s title
    again, and then inspect that call, as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证它是否有效，您可以打开浏览器中的开发者工具。确保在开发工具打开时，您的浏览器没有禁用缓存。点击 **Network** 标签，然后再次点击帖子标题，接着检查该调用，如下图所示：
- en: '![Plugin installation](img/3946OT_03_13.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![插件安装](img/3946OT_03_13.jpg)'
- en: This is just what we wanted to see. Great!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们想要看到的。太好了！
- en: Making our changes persist
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使我们的更改持久化
- en: Now that we have made our changes, we want to create our own Dockerfile to build
    on top of the official WordPress image.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经做了更改，我们想要创建我们自己的 Dockerfile，以便在官方 WordPress 镜像基础上构建。
- en: 'This is what the Dockerfile should look like:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Dockerfile 应该看起来的样子：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Hosting image sources on GitHub
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GitHub 上托管镜像源
- en: The Docker Registry Hub has very good support for automatic fetching of image
    updates from both Bitbucket and GitHub. You can pick whatever you want, but for
    this book, I will use GitHub. I have accounts on both services and they are both
    excellent.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Registry Hub 对从 Bitbucket 和 GitHub 自动获取镜像更新提供了非常好的支持。您可以选择任何您喜欢的服务，但对于本书来说，我将使用
    GitHub。我在这两个服务上都有账户，它们都非常优秀。
- en: '![Hosting image sources on GitHub](img/3946OT_03_14.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![在 GitHub 上托管镜像源](img/3946OT_03_14.jpg)'
- en: At GitHub, create a new empty repository called `my-docker-images` and add an
    appropriate license if you like.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上创建一个新的空仓库，命名为 `my-docker-images`，如果愿意，可以添加适当的许可证。
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This book will not go into how to add your SSH keys to GitHub and so on. There
    are excellent guides for this online. GitHub has a great guide at [https://help.github.com/articles/generating-ssh-keys/](https://help.github.com/articles/generating-ssh-keys/).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不会介绍如何将您的 SSH 密钥添加到 GitHub 等内容。网上有很好的教程可以参考。GitHub 有一篇很棒的指南，地址是 [https://help.github.com/articles/generating-ssh-keys/](https://help.github.com/articles/generating-ssh-keys/)。
- en: Let's create a branch and copy our files for the modified Docker image to it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个分支，并将修改后的 Docker 镜像文件复制到该分支中。
- en: 'Clone the repository locally so that you can add files to it. Make sure you
    are not inside your `wordpress-master` directory, but on the same level as it
    is:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将仓库克隆到本地，这样您就可以向其中添加文件。确保您不在 `wordpress-master` 目录内，而是在与其同一层级的目录下：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of this command is as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如下：
- en: '![Hosting image sources on GitHub](img/3946OT_03_15.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![在 GitHub 上托管镜像源](img/3946OT_03_15.jpg)'
- en: 'We''ll execute these commands one by one:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一一执行这些命令：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Go to your GitHub page and try to find the WordPress branch.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 访问您的 GitHub 页面，尝试找到 WordPress 分支。
- en: For every new Docker image we want to create and publish on the Docker Registry
    Hub, we need to create a new branch in this GitHub repository. If you have a lot
    of Docker images and the images have a lot of versions, you might want to consider
    a different structure, but for this book, this approach will be great!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们想要创建并发布到 Docker Registry Hub 的每一个新的 Docker 镜像，我们都需要在这个 GitHub 仓库中创建一个新的分支。如果您有很多
    Docker 镜像，并且这些镜像有很多版本，您可能需要考虑采用不同的结构，但对于本书来说，这种方法非常合适！
- en: '![Hosting image sources on GitHub](img/3946OT_03_16.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![在 GitHub 上托管镜像源](img/3946OT_03_16.jpg)'
- en: All files are in place, and you can click on them to verify that the contents
    are what we would expect.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 所有文件都已到位，您可以点击它们，验证内容是否符合预期。
- en: Publishing an image on the Docker Registry Hub
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Docker Registry Hub 上发布镜像
- en: If you're not a member of the Docker Registry Hub ([https://hub.docker.com](https://hub.docker.com)),
    now is the time to register so that you can publish your images on the public
    Docker repository, which can be accessed from anywhere.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还不是 Docker Registry Hub 的成员（[https://hub.docker.com](https://hub.docker.com)），现在是时候注册了，以便您可以将镜像发布到公共
    Docker 仓库，并且可以从任何地方访问。
- en: Automated builds
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动构建
- en: 'When you add a repository, you should choose the **Automated Build** option
    so that you can fetch code from GitHub (or Bitbucket), as shown in the following
    screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当您添加一个仓库时，应该选择 **Automated Build** 选项，这样您就可以从 GitHub（或 Bitbucket）中获取代码，如下图所示：
- en: '![Automated builds](img/3946OT_03_17.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![自动构建](img/3946OT_03_17.jpg)'
- en: We'll connect with our GitHub account and select the repository we just created
    and pushed to `my-docker-images`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将连接到我们的 GitHub 账户，并选择我们刚刚创建并推送到 `my-docker-images` 的仓库。
- en: We will start to add our WordPress image, so let's set the repository name to
    `wordpress` on the next screen. It's important that you enter this name correctly,
    since it cannot be changed later.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始添加我们的 WordPress 镜像，因此在下一个屏幕上将仓库名称设置为 `wordpress`。确保正确输入这个名称，因为之后无法更改。
- en: 'At this time, we will just use one tag for our image—the **latest** tag. Ensure
    that the source: **Type** is set to **Branch** and that you''ve entered `wordpress`
    as its name.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们将只使用一个标签——**latest** 标签。确保源：**类型** 设置为 **分支**，并且你已将其名称输入为 `wordpress`。
- en: 'Choose to add this as a public repository and check the **active** checkbox.
    This means that if you push any updates to this on GitHub, the Registry Hub will
    automatically pull it and publish its changes, as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 选择将其作为公共仓库添加，并勾选 **激活** 复选框。这意味着如果你在 GitHub 上推送任何更新，Registry Hub 将自动拉取并发布其更改，如下图所示：
- en: '![Automated builds](img/3946OT_03_18.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![自动构建](img/3946OT_03_18.jpg)'
- en: The Registry Hub will now pull your branch and try to build your Docker image
    to verify that it works. You can head over to the **Build Details** tab to see
    the progress. Since it's the official WordPress image base, it should go pretty
    fast if they cache the images on their build servers. If not, it could take a
    few minutes, since PHP is compiled from source.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Registry Hub 现在将拉取你的分支并尝试构建 Docker 镜像，以验证它是否正常工作。你可以前往 **构建详情** 标签查看进度。由于它是官方的
    WordPress 镜像基础，如果他们在构建服务器上缓存了镜像，构建速度应该会很快。如果没有，可能需要几分钟时间，因为 PHP 是从源代码编译的。
- en: 'This is shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是显示的截图：
- en: '![Automated builds](img/3946OT_03_19.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![自动构建](img/3946OT_03_19.jpg)'
- en: Wow! We've just published an image on the Docker Registry Hub, which means that
    anyone can fetch and run containers on top of it. The status will go from **Building**
    to **Finished** when the image is published.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们刚刚在 Docker Registry Hub 上发布了一个镜像，这意味着任何人都可以拉取并运行基于它的容器。状态会从 **构建中** 变为 **已完成**，当镜像发布时。
- en: 'The next step would be to actually pull it ourselves to verify that it works
    as expected:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步就是我们自己拉取这个镜像，验证它是否按预期工作：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Open your web browser and head over to your new container. You should be presented
    with the WordPress setup page.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的网页浏览器，访问你的新容器。你应该会看到 WordPress 设置页面。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned quite a lot. The most part was about modifying
    the Dockerfile and `ENTRYPOINT` files in order to get the Docker image that we
    wanted. Bash knowledge and programming skills are very convenient, but since all
    of this is mostly about installation, moving files, and editing settings files,
    very basic knowledge can be enough.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学到了很多内容。大部分内容都是关于修改 Dockerfile 和 `ENTRYPOINT` 文件，以便得到我们想要的 Docker 镜像。Bash
    知识和编程技能非常便利，但由于所有这些操作主要是安装、移动文件和编辑设置文件，基本的知识已经足够。
- en: GitHub is an excellent place to host your Docker repositories, and it's very
    easy to set up a new repository to get started. The Docker Registry Hub takes
    your GitHub repository and lets you pick a branch. This branch will be the source
    for a public Docker image that anyone can pull and use.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 是一个托管 Docker 仓库的绝佳平台，而且设置一个新的仓库非常简单，便于开始使用。Docker Registry Hub 会将你的 GitHub
    仓库与之连接，并让你选择一个分支。这个分支将作为公共 Docker 镜像的源，任何人都可以拉取并使用。
- en: One question arises though; what about our data? It's trapped inside these MySQL
    and WordPress containers. The next chapter will show you how to handle your data.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然而有一个问题出现了；我们的数据怎么办？它被困在这些 MySQL 和 WordPress 容器里。下一章将向你展示如何处理这些数据。
