- en: Debugging Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试容器
- en: Debugging has been an artistic component in the field of software engineering.
    All kinds of software building blocks individually, as well as collectively, need
    to go through a stream of deeper and decisive investigations by software development
    and testing professionals to ensure the security and safety of the resulting software
    applications. As Docker containers are said to be key runtime environments for
    next generation mission-critical software workloads, it is pertinent and paramount
    for containers, crafters, and composers to embark on a systematic and sagacious
    verification and validation of containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试一直是软件工程领域中的一项艺术性工作。各种软件构建模块，无论是单独的还是集成的，都需要经过软件开发和测试专业人员的深入和决定性检查，以确保生成的软件应用程序的安全性和可靠性。由于
    Docker 容器被认为是下一代关键任务软件工作负载的关键运行时环境，因此容器、开发人员和构建人员进行系统性、审慎的容器验证和验证显得尤为重要。
- en: This chapter has been dedicatedly written to enable technical guys who have
    all the accurate and relevant information to meticulously debug both the applications
    running inside containers and the containers themselves. In this chapter, we will
    also look at the theoretical aspects of process isolation for processes running
    as containers. A Docker container runs at a user-level process on host machines
    and typically has the same isolation level as provided by the operating system.
    With the latest Docker releases, many debugging tools are available which can
    be efficiently used to debug your applications. We will also cover the primary
    Docker debugging tools, such as `docker exec`, `stats`, `ps`, `top`, `events`,
    and `logs`. The current version of Docker is written in Go and it takes advantage
    of several features of the Linux kernel to deliver its functionality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章专门为那些掌握准确且相关信息的技术人员编写，帮助他们仔细调试容器内运行的应用程序及容器本身。在本章中，我们还将探讨容器内进程隔离的理论方面。Docker
    容器在主机机器上作为用户级进程运行，通常具有操作系统提供的相同隔离级别。随着最新 Docker 版本的发布，许多调试工具已可用，可高效地用于调试应用程序。我们还将介绍主要的
    Docker 调试工具，如 `docker exec`、`stats`、`ps`、`top`、`events` 和 `logs`。当前版本的 Docker
    使用 Go 编写，并利用 Linux 内核的多个功能来提供其功能。
- en: 'The list of topics that will be covered in this chapter is as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的主题列表如下：
- en: Process-level isolation for Docker containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 容器的进程级隔离
- en: Debugging a `Dockerfile`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试 `Dockerfile`
- en: Debugging a containerized application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试容器化应用程序
- en: All the commands in this chapter are tested on an Ubuntu environment and if
    you are running them on a local Mac environment, the results would differ.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有命令都在 Ubuntu 环境中测试，如果在本地 Mac 环境中运行，结果可能会有所不同。
- en: 'After installing the Docker Engine on your host machine, the Docker daemon
    can be started with the `-D` debug option:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机机器上安装 Docker 引擎后，可以使用 `-D` 调试选项启动 Docker 守护进程：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This `-D` debug flag can be enabled to the Docker configuration file (`/etc/default/docker`)
    also in the debug mode:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此`-D`调试标志可以启用 Docker 配置文件（`/etc/default/docker`）中的调试模式：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After saving and closing the configuration file, restart the Docker daemon.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并关闭配置文件后，重新启动 Docker 守护进程。
- en: Process-level isolation for Docker containers
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 容器的进程级隔离
- en: 'In the virtualization paradigm, the hypervisor emulates computing resources
    and provides a virtualized environment called a VM to install the operating system
    and applications on top of it. Whereas, in the case of the container paradigm,
    a single system (bare metal or VM) is effectively partitioned to run multiple
    services simultaneously without interfering with each other. These services must
    be isolated from each other in order to prevent them from stepping on each other''s
    resources or dependency conflict (also known as dependency hell). The Docker container
    technology essentially achieves process-level isolation by leveraging the Linux
    kernel constructs, such as namespaces and cgroups, particularly, the namespaces.
    The Linux kernel provides the following five powerful namespace levers for isolating
    the global system resources from each other. These are the **Interprocess Communication**
    (**IPC**) namespaces used to isolate the IPC resources:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟化范式中，虚拟机管理程序（hypervisor）模拟计算资源，并提供一个虚拟化环境（称为虚拟机 VM），在其上安装操作系统和应用程序。而在容器范式中，单一的系统（裸金属或虚拟机）实际上被划分为多个独立的服务，能够同时运行且不会相互干扰。这些服务必须相互隔离，以防止它们争用资源或发生依赖冲突（也叫依赖地狱）。Docker
    容器技术通过利用 Linux 内核的构件（如命名空间和 cgroups），特别是命名空间，实现了进程级别的隔离。Linux 内核提供了以下五种强大的命名空间工具，用于隔离全球系统资源。它们是用于隔离**进程间通信**（**IPC**）资源的**IPC**命名空间：
- en: '**network**: This namespace is used to isolate networking resources such as
    the network devices, network stack, and port number'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**network**: 该命名空间用于隔离网络资源，如网络设备、网络堆栈和端口号'
- en: '**mount**: This namespace isolates the filesystem mount points'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mount**: 该命名空间隔离了文件系统的挂载点'
- en: '**PID**: This namespace isolates the process identification number'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PID**: 该命名空间隔离了进程标识符（PID）'
- en: '**user**: This namespace is used to isolate the user ID and group ID'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**user**: 该命名空间用于隔离用户 ID 和组 ID'
- en: '**UTS**: This namespace is used to isolate the hostname and the NIS domain
    name'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UTS**: 该命名空间用于隔离主机名和 NIS 域名'
- en: These namespaces add an additional level of complexity when we have to debug
    the services running inside the containers, which you will learn more about in
    detail in the next section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要调试容器内运行的服务时，这些命名空间增加了额外的复杂性，关于这点，你将在下一节中学到更多细节。
- en: 'In this section, we will discuss how the Docker Engine provides process-level
    isolation by leveraging the Linux namespaces through a series of practical examples,
    and one of them is listed here:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将通过一系列实践示例来讨论 Docker 引擎如何利用 Linux 命名空间提供进程级别的隔离，其中一个示例如下所示：
- en: 'Start by launching an Ubuntu container in an interactive mode using the `docker
    run` subcommand, as shown here:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用`docker run`子命令启动一个交互模式的 Ubuntu 容器，如下所示：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Proceed to find the process ID of the preceding `93f5d72c2f21` container, using
    the `docker inspect` subcommand in a different Terminal:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续查找前述`93f5d72c2f21`容器的进程 ID，可以通过在另一个终端使用`docker inspect`子命令来完成：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Apparently, from the preceding output, the process ID of the container `93f5d72c2f21`
    is `2543`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，从上面的输出中，容器`93f5d72c2f21`的进程 ID 是`2543`。
- en: 'Having got the process ID of the container, let''s continue to see how the
    process associated with the container looks in the Docker host, using the `ps`
    command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取了容器的进程 ID 后，我们继续查看容器关联的进程在 Docker 主机中是如何呈现的，可以使用`ps`命令：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Amazing, isn't it? We launched a container with `/bin/bash` as its command,
    and we have the `/bin/bash` process in the Docker host as well.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 真的吗？是不是很神奇？我们启动了一个以`/bin/bash`作为命令的容器，结果在 Docker 主机中也有了`/bin/bash`进程。
- en: 'Let''s go one step further and display the `/proc/2543/environ` file in the
    Docker host using the `cat` command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进一步操作，使用`cat`命令在 Docker 主机上显示`/proc/2543/environ`文件：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding output, `HOSTNAME=93f5d72c2f21` stands out from the other environment
    variables because `93f5d72c2f21` is the container ID, as well as the hostname
    of the container, which we launched previously.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，`HOSTNAME=93f5d72c2f21`从其他环境变量中脱颖而出，因为`93f5d72c2f21`既是容器 ID，也是我们之前启动的容器的主机名。
- en: 'Now, let''s get back to the Terminal, where we are running our interactive
    container `93f5d72c2f21`, and list all the processes running inside this container
    using the `ps` command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们回到终端，我们正在运行交互式容器`93f5d72c2f21`，并使用`ps`命令列出容器内运行的所有进程：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Surprising, isn't it? Inside the container, the process ID of the `/bin/bash`
    process is `1`, whereas outside the container, in the Docker host, the process
    ID is `2543`. Besides, the **Parent Process ID** (**PPID**) is `0` (zero).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶，不是吗？在容器内，`/bin/bash` 进程的进程 ID 是 `1`，而在容器外的 Docker 主机上，进程 ID 是 `2543`。此外，**父进程
    ID** (**PPID**) 是 `0`（零）。
- en: In the Linux world, every system has just one `root` process with the PID `1`
    and PPID `0`, which is the root of the complete process tree of that system. The
    Docker framework cleverly leverages the Linux PID namespace to spin a completely
    new process tree; thus, the processes running inside a container have no access
    to the parent process of the Docker host. However, the Docker host has a complete
    view of the child PID namespace spun by the Docker Engine.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 世界中，每个系统只有一个 PID 为 `1` 和 PPID 为 `0` 的 `root` 进程，它是该系统完整进程树的根。Docker
    框架巧妙地利用了 Linux 的 PID 命名空间来启动一个全新的进程树；因此，在容器内运行的进程无法访问 Docker 主机的父进程。然而，Docker
    主机可以完全查看由 Docker 引擎创建的子 PID 命名空间。
- en: 'The network namespace ensures that all containers have independent network
    interfaces on the host machine. Also, each container has its own Loopback interface.
    Each container talks to the outside world using its own network interface. You
    will be surprised to know that the namespace not only has its own routing table,
    but also has its own iptables, chains, and rules. The author of this chapter is
    running three containers on his host machine. Here, it is natural to expect three
    network interfaces for each container. Let''s run the `docker ps` command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 网络命名空间确保所有容器在主机机器上都有独立的网络接口。此外，每个容器都有自己的回环接口。每个容器使用其自己的网络接口与外部世界通信。你会惊讶地发现，命名空间不仅有自己的路由表，而且还有自己的
    iptables、链和规则。本章的作者正在他的主机上运行三个容器。在这里，理应为每个容器配备三个网络接口。让我们运行 `docker ps` 命令：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So, there are three interfaces, one for each container. Let''s get their details
    by running the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这里有三个接口，每个容器一个。让我们通过运行以下命令来获取它们的详细信息：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The mount namespace ensures that the mounted filesystem is accessible only
    to the processes within the same namespace. The container A cannot see the mount
    points of the container B. If you want to check your mount points, you need to
    first log in to your container using the `exec` command (described in the next
    section), and then go to `/proc/mounts`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 挂载命名空间确保挂载的文件系统仅对同一命名空间中的进程可访问。容器 A 无法看到容器 B 的挂载点。如果你想查看你的挂载点，需要先使用 `exec` 命令（将在下一部分中描述）登录到容器中，然后转到
    `/proc/mounts`：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's run a container with a mount point that runs as the **Storage Area Network**
    (**SAN**) or **Network Attached Storage** (**NAS**) device and access it by logging
    in to the container. This is given to you as an exercise. I have implemented this
    in one of my projects at work.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一个具有挂载点的容器，该挂载点作为 **存储区域网络** (**SAN**) 或 **网络附加存储** (**NAS**) 设备运行，并通过登录到容器来访问它。这个部分作为练习交给你。我在工作中的一个项目中实现了这个功能。
- en: There are other namespaces that these containers/processes can be isolated into,
    namely, user, IPC, and UTS. The user namespace allows you to have root privileges
    within the namespace without giving that particular access to processes outside
    the namespace. Isolating a process with the IPC namespace gives it its own IPC
    resources, for example, System V IPC and POSIX messages. The UTS namespace isolates
    the hostname of the system.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他命名空间可以将这些容器/进程隔离到，其中包括用户、IPC 和 UTS。用户命名空间允许你在命名空间内拥有 root 权限，而不会将该权限授予命名空间外的进程。使用
    IPC 命名空间隔离进程时，它将拥有自己的 IPC 资源，例如，System V IPC 和 POSIX 消息。UTS 命名空间隔离了系统的主机名。
- en: 'Docker has implemented this namespace using the `clone` system call. On the
    host machine, you can inspect the namespace created by Docker for the container
    (with PID `3728`):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 使用 `clone` 系统调用实现了这个命名空间。在主机机器上，你可以检查 Docker 为容器（PID 为 `3728`）创建的命名空间：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In most industrial deployments of Docker, people are extensively using patched
    Linux kernels to provide specific needs. Also, a few companies have patched their
    kernels to attach arbitrary processes to the existing namespaces because they
    feel that this is the most convenient and reliable way to deploy, control, and
    orchestrate containers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数工业化部署的 Docker 中，人们广泛使用已修补的 Linux 内核来满足特定需求。此外，一些公司修补了他们的内核，以便将任意进程附加到现有的命名空间中，因为他们认为这是部署、控制和编排容器最便捷且最可靠的方式。
- en: Control groups
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制组
- en: Linux containers rely on **Control groups** (**cgroups**), which not only track
    groups of processes, but also expose metrics of the CPU, memory, and block I/O
    usage. You can access these metrics and obtain network usage metrics as well.
    Cgroups are another important component of Linux containers. Cgroups have been
    around for a while and were initially merged into the Linux kernel code 2.6.24\.
    They ensure that each Docker container will get a fixed amount of memory, CPU,
    and disk I/O, so that any container will not able to bring the host machine down
    at any point of time under any circumstances. Cgroups do not play a role in preventing
    one container from being accessed, but they are essential to fend off some **Denial
    of Service** (**DoS**) attacks.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 容器依赖于**控制组**（**cgroups**），它不仅跟踪进程组，还暴露 CPU、内存和块 I/O 使用的度量。你可以访问这些度量并获得网络使用度量。Cgroups
    是 Linux 容器的另一个重要组成部分。Cgroups 已经存在了一段时间，并且最初在 Linux 内核代码 2.6.24 中合并。它们确保每个 Docker
    容器将获得固定的内存、CPU 和磁盘 I/O，因此任何容器都不能在任何情况下使主机机器崩溃。Cgroups 不起到防止一个容器被访问的作用，但它们对于抵御一些**拒绝服务**（**DoS**）攻击是至关重要的。
- en: On Ubuntu 16.04, a cgroup is implemented in the `/sys/fs/cgroup` path. The memory
    information of Docker is available at the `/sys/fs/cgroup/memory/docker/` path.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 16.04 中，cgroup 实现位于 `/sys/fs/cgroup` 路径下。Docker 的内存信息可以在 `/sys/fs/cgroup/memory/docker/`
    路径下找到。
- en: Similarly, the CPU details are made available in the `/sys/fs/cgroup/cpu/docker/`
    path.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，CPU 的详细信息可以在 `/sys/fs/cgroup/cpu/docker/` 路径下找到。
- en: Let's find out the maximum limit of memory that can be consumed by the container
    (`41668be6e513e845150abd2dd95dd574591912a7fda947f6744a0bfdb5cd9a85`).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们找出容器（`41668be6e513e845150abd2dd95dd574591912a7fda947f6744a0bfdb5cd9a85`）能够消耗的最大内存限制。
- en: 'For this, you can go to the cgroup memory path and check for the `memory.max_usage_in_bytes`
    file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你可以前往 cgroup 内存路径，并检查 `memory.max_usage_in_bytes` 文件：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Execute the following command to see the contents:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令查看内容：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So, by default, any container can use up to 13.18 MB memory only. Similarly,
    CPU parameters can be found in the following path:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，默认情况下，任何容器最多只能使用 13.18 MB 的内存。同样，CPU 参数可以在以下路径中找到：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Traditionally, Docker runs only one process inside the containers. So typically,
    you have seen people running three containers each for PHP, NGINX, and MySQL.
    However, this is a myth. You can run all your three processes inside a single
    container also.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，Docker 容器内部只运行一个进程。因此，通常你会看到有人分别为 PHP、NGINX 和 MySQL 启动三个容器。然而，这只是一个误解。你也可以将这三个进程都运行在同一个容器内。
- en: Docker isolates many aspects of the underlying host from an application running
    in a container without the root privileges. However, this separation is not as
    strong as that of virtual machines, which run independent OS instances on top
    of a hypervisor without sharing the kernel with the underlying OS. It's not a
    good idea to run applications with different security profiles as containers on
    the same host, but there are security benefits to encapsulate different applications
    into containerized applications that would otherwise run directly on the same
    host.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 隔离了许多底层主机的方面，允许容器中的应用程序在没有 root 权限的情况下运行。然而，这种隔离性不如虚拟机强大，虚拟机在 Hypervisor
    上运行独立的操作系统实例，并且不会与底层操作系统共享内核。将具有不同安全配置文件的应用程序作为容器在同一主机上运行并不是一个好主意，但将不同的应用程序封装为容器化应用程序，避免它们直接在同一主机上运行，仍然有安全性上的好处。
- en: Debugging a containerized application
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试容器化应用程序
- en: Computer programs (software) sometimes fail to behave as expected. This is due
    to faulty code or due to the environmental changes between the development, testing,
    and deployment systems. Docker container technology eliminates the environmental
    issues between development, testing, and deployment as much as possible by containerizing
    all the application dependencies. Nonetheless, there could be still anomalies
    due to faulty code or variations in the kernel behavior, which needs debugging.
    Debugging is one of the most complex processes in the software engineering world
    and it becomes much more complex in the container paradigm because of the isolation
    techniques. In this section, we are going to learn a few tips and tricks to debug
    a containerized application using the tools native to Docker, as well as the tools
    provided by external sources.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序（软件）有时不能按预期行为执行。这可能是由于代码错误，或是开发、测试和部署系统之间的环境变化导致的。Docker 容器技术通过将所有应用程序依赖项容器化，尽可能消除开发、测试和部署之间的环境问题。然而，仍然可能存在由于代码缺陷或内核行为变化而导致的异常，这需要调试。调试是软件工程领域最复杂的过程之一，在容器化架构中，由于隔离技术的存在，调试变得更加复杂。在本节中，我们将学习一些使用
    Docker 原生工具以及外部来源提供的工具来调试容器化应用程序的小技巧。
- en: 'Initially, many people in the Docker community individually developed their
    own debugging tools, but later Docker started supporting native tools, such as
    `exec`, `top`, `logs`, and `events`. In this section, we will dive deep into the
    following Docker tools:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，许多 Docker 社区成员独立开发了自己的调试工具，但后来 Docker 开始支持原生工具，如 `exec`、`top`、`logs` 和 `events`。在本节中，我们将深入探讨以下
    Docker 工具：
- en: '`exec`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exec`'
- en: '`ps`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ps`'
- en: '`top`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top`'
- en: '`stats`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stats`'
- en: '`events`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`events`'
- en: '`logs`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logs`'
- en: '`attach`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attach`'
- en: We shall also consider debugging a `Dockerfile`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将考虑调试 `Dockerfile`。
- en: The docker exec command
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: docker exec 命令
- en: The `docker exec` command provides the much-needed help to users, who are deploying
    their own web servers or have other applications running in the background. Now,
    it is not necessary to log in to run the SSH daemon in the container.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker exec` 命令为用户提供了必要的帮助，尤其是那些部署自己 Web 服务器或有其他应用程序在后台运行的用户。现在，运行 SSH 守护进程不再需要登录到容器。'
- en: 'First, create a Docker container:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个 Docker 容器：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, run the `docker ps -a` command to get the container ID:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行 `docker ps -a` 命令以获取容器 ID：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, run the `docker exec` command to log in to the container:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，运行 `docker exec` 命令以登录到容器：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that the `docker exec` command can only access the running containers,
    so if the container stops functioning, then you need to restart the stopped container
    in order to proceed. The `docker exec` command spawns a new process in the target
    container using the Docker API and CLI. So if you run the `ps -aef` command inside
    the target container, it looks like this:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，`docker exec` 命令只能访问正在运行的容器，因此如果容器停止运行，你需要重启停止的容器才能继续。`docker exec` 命令使用
    Docker API 和 CLI 在目标容器中生成一个新进程。所以，如果你在目标容器内运行 `ps -aef` 命令，输出看起来如下：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, `python app.y` is the application that is already running in the target
    container, and the `docker exec` command has added the `bash` process inside the
    container. If you run `kill -9 pid(45)`, you will be automatically logged out
    of the container.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`python app.y` 是已经在目标容器中运行的应用程序，而 `docker exec` 命令则在容器内启动了 `bash` 进程。如果你运行
    `kill -9 pid(45)`，你将自动退出容器。
- en: If you are an enthusiastic developer, and you want to enhance the `exec` functionality,
    you can refer to [https://github.com/chris-rock/docker-exec](https://github.com/chris-rock/docker-exec).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个热衷的开发者，想要增强 `exec` 功能，你可以参考 [https://github.com/chris-rock/docker-exec](https://github.com/chris-rock/docker-exec)。
- en: Using the `docker exec` command only for monitoring and diagnostic purposes
    is recommended, and I personally believe in the concept of one process per container,
    which is one of the best practices widely accentuated.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 建议仅将 `docker exec` 命令用于监控和诊断目的，我个人相信每个容器一个进程的理念，这是广泛强调的最佳实践之一。
- en: The docker ps command
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: docker ps 命令
- en: The `docker ps` command, which is available inside the container, is used to
    see the status of the process. This is similar to the standard `ps` command in
    the Linux environment and is *not* a `docker ps` command that we run on the Docker
    host machine.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker ps` 命令在容器内部可用，用于查看进程的状态。这个命令类似于 Linux 环境中的标准 `ps` 命令，而*不是*我们在 Docker
    主机上运行的 `docker ps` 命令。'
- en: 'This command runs inside the Docker container:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令在 Docker 容器内部运行：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Use `ps --help <simple|list|output|threads|misc|all>` or `ps --help <s|l|o|t|m|a>`
    for additional help text.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ps --help <simple|list|output|threads|misc|all>` 或 `ps --help <s|l|o|t|m|a>`
    获取额外的帮助文本。
- en: The docker top command
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: docker top 命令
- en: 'You can run the `top` command from the Docker host machine using the following
    command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下命令从 Docker 主机机器上运行 `top` 命令：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This gives a list of the running processes of a container without logging in
    to the container, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出容器的运行进程列表，而无需登录到容器中，如下所示：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The Docker `top` command provides information about the CPU, memory, and swap
    usage if you run it inside a Docker container:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Docker `top` 命令在 Docker 容器内运行时提供有关 CPU、内存和交换使用情况的信息：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In case you get the `error - TERM environment variable not set` error while
    running the `top` command inside the container, perform the following steps to
    resolve it:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在容器内运行 `top` 命令时出现 `error - TERM environment variable not set` 错误，请执行以下步骤来解决：
- en: 'Run the `echo $TERM` command. You will get the result as `dumb`. Then, run
    the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `echo $TERM` 命令。您将得到结果 `dumb`。然后执行以下命令：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will resolve the error.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将解决错误。
- en: The docker stats command
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: docker stats 命令
- en: 'The `docker stats` command provides you with the capability to view the memory,
    CPU, and the network usage of a container from a Docker host machine, as illustrated
    here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker stats` 命令使您能够从 Docker 主机机器查看容器的内存、CPU 和网络使用情况，如下所示：'
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can run the `stats` command to also view the usage for multiple containers:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以运行 `stats` 命令来查看多个容器的使用情况：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Docker provides access to container statistics *read only* parameters. This
    streamlines the CPU, memory, network IO, and block IO of containers. This helps
    you choose the resource limits and also in profiling. The Docker `stats` utility
    provides you with these resource usage details only for running containers.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供对容器统计信息的只读访问 *read only* 参数。这简化了容器的 CPU、内存、网络 IO 和块 IO。Docker `stats`
    实用程序仅为运行中的容器提供这些资源使用情况详细信息。
- en: The Docker events command
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker events 命令
- en: 'Docker containers will report the following real-time events: `create`, `destroy`,
    `die`, `export`, `kill`, `omm`, `pause`, `restart`, `start`, `stop`, and `unpause`.
    The following are a few examples that illustrate how to use these commands:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器将报告以下实时事件：`create`, `destroy`, `die`, `export`, `kill`, `omm`, `pause`,
    `restart`, `start`, `stop` 和 `unpause`。以下是几个示例，说明如何使用这些命令：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The Docker image will also report the untag and delete events.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 镜像还将报告 untag 和 delete 事件。
- en: The usage of multiple filters will be handled as an AND operation; for example,
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 多个过滤器的使用将作为 AND 操作处理；例如，
- en: '`--filter container= a245253db38b --filter event=start` will display events
    for the container `a245253db38b` and the event type is `start`.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`--filter container= a245253db38b --filter event=start` 将显示容器 `a245253db38b`
    的事件，并且事件类型为 `start`。'
- en: Currently, the supported filters are container, event, and image.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 目前支持的过滤器有 container、event 和 image。
- en: The docker logs command
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: docker logs 命令
- en: This command fetches the log of a container without logging in to the container.
    It batch-retrieves logs present at the time of execution. These logs are the output
    of stdout and stderr. The general usage is shown in `docker logs [OPTIONS] CONTAINER`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令在不登录到容器中的情况下获取容器的日志。它批量检索执行时存在的日志。这些日志是 stdout 和 stderr 的输出。通常用法如 `docker
    logs [OPTIONS] CONTAINER` 所示。
- en: 'The `-follow` option will continue to provide the output till the end, `-t` will
    provide the timestamp, and `--tail= <number of lines>` will show the number of
    lines of the log messages of your container:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`-follow` 选项将持续提供输出直到结束，`-t` 将提供时间戳，`--tail= <number of lines>` 将显示容器日志消息的行数：'
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We also used the `docker logs` utility in [Chapter 2](../Text/Ch02.xhtml), *Handling
    Docker Containers* and [Chapter 6](../Text/Ch06.xhtml), *Running Services in a
    Container*, to view the logs of our containers.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在 [第二章](../Text/Ch02.xhtml) 中使用了 `docker logs` 实用程序，*处理 Docker 容器* 和 [第六章](../Text/Ch06.xhtml)，*在容器中运行服务*，来查看我们容器的日志。
- en: The docker attach command
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: docker attach 命令
- en: 'The `docker attach` command attaches the running container and it is very helpful
    when you want to see what is written in stdout in real time:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker attach` 命令附加正在运行的容器，当您想实时查看 stdout 中的内容时非常有用：'
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: By default, this command attaches stdin and proxies signals to the remote process.
    Options are available to control both of these behaviors. To detach from the process, use
    the default *Ctrl* + *C* sequence.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，该命令会附加stdin并代理信号到远程进程。可以使用选项控制这两种行为。要从进程中分离，请使用默认的*Ctrl* + *C*组合键。
- en: Debugging a Dockerfile
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试一个Dockerfile
- en: Sometimes creating a `Dockerfile` may not start with everything working. A `Dockerfile` does
    not always build images and sometimes it does, but starting a container would
    crash on startup.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，创建一个`Dockerfile`并不会一开始就让一切正常工作。`Dockerfile`并不总是能构建镜像，有时能构建镜像，但启动容器时会崩溃。
- en: 'Every instruction we set in the `Dockerfile` is going to be built as a separate,
    temporary image for the other instruction to build itself on top of the previous
    instruction. The following example explains this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`Dockerfile`中设置的每个指令都将被构建为一个独立的临时镜像，供其他指令在其基础上构建。以下示例解释了这一点：
- en: 'Create a `Dockerfile` using your favorite editor:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的编辑器创建一个`Dockerfile`：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, build the image by executing the following command:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过执行以下命令来构建镜像：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Notice the `---> Running in 7b47d3c46cfa` line. `7b47d3c46cfa` is a valid image
    and can be used to retry the failed instruction and see what's happening
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`---> Running in 7b47d3c46cfa`这一行。`7b47d3c46cfa`是一个有效的镜像，可以用来重试失败的指令，并查看发生了什么。
- en: To debug this image, we need to create a container and then log in to analyze
    the error. Debugging is a process of analyzing what's going on and it's different
    for every situation, but usually, the way we start debugging is by trying to manually
    make the instruction that fails work manually and understand the error. When I
    get the instruction to work, I usually exit the container, update my `Dockerfile`,
    and repeat the process until I have something working.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试这个镜像，我们需要创建一个容器，然后登录进去分析错误。调试是分析发生了什么的过程，它因情况而异，但通常，我们开始调试的方法是尝试手动使失败的指令正常工作并理解错误。当我使指令正常工作时，通常会退出容器，更新我的`Dockerfile`，然后重复这一过程，直到得到一个有效的结果。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have seen the isolation of containers using the Linux container
    technology, such as LXC and now Libcontainer. Libcontainer is Docker's own implementation
    in the Go programming language to access the kernel namespace and cgroups. This
    namespace is used for process-level isolation, while cgroups are used for restricting
    the resource usage of running containers. Since the containers run as independent
    processes directly over the Linux kernel, the **Generally Available** (**GA**)
    debugging tools are not fit enough to work inside the containers to debug the
    containerized processes. Docker now provides you with a rich set of tools to effectively
    debug the container as well as processes inside the container itself. The `docker
    exec` command will allow you to log in to the container without running an SSH
    daemon in the container. You have seen the details of each debugging tool in this
    chapter.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经看到使用Linux容器技术（如LXC，现在是Libcontainer）进行容器隔离的过程。Libcontainer是Docker在Go编程语言中实现的，用于访问内核命名空间和cgroups。这个命名空间用于进程级别的隔离，而cgroups则用于限制运行中容器的资源使用。由于容器直接作为独立进程运行在Linux内核之上，**通用可用**（**GA**）的调试工具不足以在容器内部调试容器化进程。Docker现在为你提供了一整套工具，用于有效地调试容器以及容器内部的进程。`docker
    exec`命令允许你登录到容器，而无需在容器内运行SSH守护进程。本章中你已经看到过每个调试工具的详细内容。
- en: The `docker stats` command provides information about the container's memory
    and CPU usage. The `docker events` command reports the events, such as create,
    destroy, and kill. Similarly, the `docker logs` command fetches the logs from
    the container without logging in to the container.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker stats`命令提供容器的内存和CPU使用信息。`docker events`命令报告事件，如创建、销毁和停止。同样，`docker
    logs`命令可以在不登录容器的情况下获取容器的日志。'
- en: As a next step, you can try the latest Microsoft Visual Studio Tools for Docker.
    It provides a consistent way to develop and validate your application in the Linux
    Docker container. For details, you can refer to [https://docs.microsoft.com/en-us/azure/vs-azure-tools-docker-edit-and-refresh](https://docs.microsoft.com/en-us/azure/vs-azure-tools-docker-edit-and-refresh).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，你可以尝试最新的Microsoft Visual Studio Docker工具。它提供了一种一致的方式来开发和验证在Linux Docker容器中的应用程序。详情请参考[https://docs.microsoft.com/en-us/azure/vs-azure-tools-docker-edit-and-refresh](https://docs.microsoft.com/en-us/azure/vs-azure-tools-docker-edit-and-refresh)。
- en: Also, if you would like to debug the Node.js application live running in IDE
    (Visual Studio Code), try this blog: [https://blog.docker.com/2016/07/live-debugging-docker/](https://blog.docker.com/2016/07/live-debugging-docker/).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在IDE（如Visual Studio Code）中实时调试运行中的Node.js应用程序，可以参考这个博客：[https://blog.docker.com/2016/07/live-debugging-docker/](https://blog.docker.com/2016/07/live-debugging-docker/)。
- en: The next chapter expounds the plausible security threats of Docker containers
    and how they can be subdued with a variety of security approaches, automated tools,
    best practices, key guidelines, and metrics. We will discuss the security of containers
    versus virtual machines with Docker's adaptability of third-party security tools
    and practices.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将阐述Docker容器可能面临的安全威胁，以及如何通过各种安全方法、自动化工具、最佳实践、关键指南和指标来应对这些威胁。我们还将讨论容器与虚拟机的安全性对比，并探讨Docker在第三方安全工具和实践方面的适应性。
