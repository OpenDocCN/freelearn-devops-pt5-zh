- en: Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we are going to review what we have learned so far and
    highlight some best practices. Some simple tips can help you set up things right
    from the start and save you a lot of trouble down the road. Best practices will
    help you in administration and troubleshooting, as you'll be able to track things
    better and notice mistakes easier. We'll add some security tips and how to avoid
    the most common mistakes. We are going to use **infrastructure as code** (**IaC**)
    as a tool that will help us in our daily tasks in Azure. Using Azure Portal is
    simple and great to learn things, but to use Azure to its full capacity, we must
    use ARM templates, Azure PowerShell, or Azure CLI. Finally, to expand IaC, we
    are going to discuss configuration as code and introduce **Desired State Configuration**
    (**DSC**) and Azure Automation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure as code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARM templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration as code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Desired State Configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you''ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure Subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of small things that you need to pay attention to, otherwise
    you may end up having issues in the long run. When you're managing a single subscription
    and a small number of resources, it may look simple and not important to create
    some ground rules. But as the number of subscriptions and resources starts increasing,
    you may find chaos and it may be too late to turn back. In these situations, it's
    hard to correct mistakes and get back on the right path.
  prefs: []
  type: TYPE_NORMAL
- en: Naming convention
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's very important to set the naming convention for subscriptions, resource
    groups, and resources. Your first subscription will probably have a name similar
    to `Pay-as-you-go`. And if you have a single subscription, it's not a big deal.
    But what if you end up with 5, 10, or 100 subscriptions, and all of them are named
    `Pay-as-you-go`? These subscriptions will have different subscription IDs and
    you can use this information to separate them, but it will be difficult and confusing.
    Subscriptions can be renamed and you should definitely use this option. You can
    organize subscriptions in different ways and it depends on your requirements regarding
    how you are going to do this. It can be based on departments, applications, environments,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can have multiple subscriptions per department. This will help
    you separate cost and consumption and see how much each department is spending
    on resources. In this case, you may want to rename subscriptions to something
    like `HumanResources`, `Finances`, `IT`, and so on. If you have different environments
    for each department for production, testing, and development, you can add the environment
    to the subscription name and have something like `HumanResources-prod`, `HumanResources-test`,
    and `HumanResources-dev`.
  prefs: []
  type: TYPE_NORMAL
- en: You can apply similar principles for naming resource groups, again depending
    on your requirements. Let's say we use a single subscription, and want to add
    the department, environment, or application to the resource group name. In this
    case, we'll have resource groups named like `IT-helpdesk-prod`. Or, if we have
    a subscription per department, the resource group would be named something like `helpdesk-prod`.
  prefs: []
  type: TYPE_NORMAL
- en: But, when you have multiple subscriptions and all of the subscriptions are listed
    in the resource group view, with some resources that have similar names, it can
    get confusing, and it's good idea to include the subscription name in the resource
    group name anyway. For example, you can have the subscriptions `Finance` and `HR`,
    and both of them have applications named `Employees`. If you name both resource
    groups using product and environment, both production resource groups will be
    named `Employees-prod`. They would be in different subscriptions, but when all
    resource groups in all subscriptions are listed, things can get confusing. In
    this scenario, it can be beneficial to include the complete path in the resource
    group name that will include the subscription name as the front part of the resource
    group name.
  prefs: []
  type: TYPE_NORMAL
- en: For resources, it's good to have some kind of naming convention as well. Design
    can depend on different things, but I recommend using all available variables
    to avoid confusion. For example, let's say that our IT department has its own
    subscription and uses an application named `helpdesk`. The application requires
    two VMs (web and database server) and has production, development, and testing
    environments. In this case, we would have six VMs being used by the same application,
    for different purposes and environments. In cases like this, it's good to use
    parameters such as subscription, environment, product, resource type, and resource
    purpose. So, VM names for a production environment would be something like `it-helpdesk-prod-VM-web`
    and `it-helpdesk-prod-VM-db`. There is also a scenario where you have multiple
    VMs with the same role, such as multiple web servers behind a load balancer. In
    this scenario, it's good to add numbers to the name and have something like `it-helpdesk-prod-VM-web-01`,
    `it-helpdesk-prod-VM-web-02`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Public endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's generally a good idea to avoid exposing public endpoints if it's not required,
    especially when we talk about management and administration. Exposing the endpoint
    of your Web App is something you probably want to do, but why expose the database?
    It will only cause additional security risks and increase the chance of your data
    being breached. The same goes for management; exposing RDP, SSH, or any other
    port that can be used to manage and administrate your resources should be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: In case we have a database in IaaS, the best practice is to allow access to
    the database over port `1433`, only inside Azure Vnet, or even limit access to
    a specific subnet. Use NSGs and **Application Security Groups** (**ASGs**) to
    set up access and allow access only when it's needed. For example, we can use
    an NSG and an ASG to set up access to a database, but only when traffic is coming
    from a specific subnet (use an NSG) and only when coming from a server that is
    part of the web server group (use an ASG). This isn't limited to port `1433` and
    MS SQL Server; you can apply this approach on any other database you are using
    in IaaS and whatever port these databases are using, such as 1521 for Oracle,
    50000 for IBM DB2, 3306 for MySQL, or any custom port you define.
  prefs: []
  type: TYPE_NORMAL
- en: 'Databases in PaaS, the Azure SQL Database, and other database PaaS options,
    offer firewall protection. With firewall protection, you can limit the IP addresses
    from which you can connect to the database. Make sure that you keep the firewall
    up to date and remove any unnecessary IP addresses. Also, there is one option
    in the Azure SQL database firewall that may create additional risk. There is an
    option to Allow access to Azure services to connect to your Azure SQL Database,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad87b1d9-d2e4-4c47-a175-a0c731e23005.png)'
  prefs: []
  type: TYPE_IMG
- en: This option is ON by default and it may look like it makes sense to leave this
    enabled. Most people would think "Yeah, sure, I want my services in Azure to be
    able to connect to my database". But this option only checks whether a connection
    to the database is coming from Azure; it does not check whether the connection
    is coming from your subscription or even your tenant. Leaving this option ON allows
    someone to create an Azure account and try to access your database, as firewall
    rules will not apply if the connection is coming from Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the database will still require the username and password, but
    this creates an opportunity. In this case, it's very good for us that Microsoft
    requires credit card information when creating a trial subscription as any account
    can be tracked to the owner. If someone managed to access the database, this way, the person
    can be tracked, but you may want to disable this option to prevent any unauthorized
    access in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: A similar approach can be taken for other backend services that shouldn't be
    exposed publicly. These can be anything from databases, different connectors,
    and business logic, to various APIs. Don't expose anything that doesn't need to
    be exposed. In IaaS scenarios, use NSGs and ASGs to restrict access. When using
    PaaS, there are different approaches that can be taken. As we mentioned previously,
    an Azure SQL database has a firewall. For a Web App, we can use an isolated App
    Service Plan, that allows access only over an Azure Virtual network. Similar to
    this approach, most PaaS services can be connected to Azure VNet and we can set
    up access to services from inside our Azure Virtual Network. Then, NSG and ASG
    rules can be applied to these services as well.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting access to the management ports of Azure VMs is another thing that we
    need to pay attention to. For example, exposing RDP access to your VM over the
    internet can have big consequences. I tested leaving the default RDP port open
    and tracked access attempts with Azure Security Center. Over a single month, there
    were over 150,000 unauthorized attempts to access the VM. Most of these attempts
    were using administrator, admin, sysadmin, and root (over 80% of attempts were
    using these four usernames) as a username, so it's a good thing that you are not
    allowed to use these names for your Azure VMs.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ways you can restrict access to the management of Azure VMs:'
  prefs: []
  type: TYPE_NORMAL
- en: Disable public access for management ports and manage Azure VMs over secure
    connections. This can be P2S, S2S, or Azure ExpressRoute. By using a secure connection,
    you are limiting management access to authorized users from trusted locations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you cannot use a secure connection, restrict access to trusted public IP
    addresses. Use NSGs to limit access to Azure VMs that are to be accessed only from
    IP addresses that are pre-allowed. An example of how to restrict access with NSGs
    is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6b4def9e-8f07-42d7-ac6b-d4fd658bb60b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use Just in Time Access for Azure VM access. Setting up Just in Time in Azure
    is simple and fast. When this option is enabled, you need to create a request
    for access from a predetermined IP address and only for a limited time. This way,
    access is blocked unless a specific request is created to allow management access.
    An example of a request to open an RDP port for single hour for user''s current
    IP address is shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c994724b-15a6-46bb-801e-e8f4d68a69de.png)'
  prefs: []
  type: TYPE_IMG
- en: Other things to consider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides naming standards or endpoint security, there are a lot of little things
    we need to pay attention to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use PaaS whenever possible. Microsoft Azure offers a number of options, but
    IaaS will, in general, be more expensive. There are cases where you have no option,
    but using PaaS will keep the cost of your subscription down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use monitoring and logging services. Each Azure Service has some sort of logging,
    monitoring, and alerting feature. Try expanding these services with services such
    as Azure Monitor, Azure Network Watcher, or Log Analytics. These tools can help
    you track issues and performance over time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Azure Advisor to apply some best practices. Azure Advisor analyzes resources
    in a subscription, compares settings to best practices, and gives recommendations
    that need to be implemented to increase performance or cut cost.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to Azure Advisor, Azure Security Center offers recommendations to increase
    the security of your resources. Security Center compares your current security
    settings and, in combination with security events, creates recommendations to
    increase security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypt data. Even though most Azure services have default encryption, that
    encryptions is at rest. To secure our data after export or backup, we need to
    apply additional encryption.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypt connections and use HTTPS. Securing is pointless if data is exposed
    in transit, so we need to consider this as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check Azure Service Health if you have issues. This can save you hours of troubleshooting.
    You will be able to notice performance issues or whether a service is unavailable,
    and automatically connect to Azure to see what is wrong. It can be an issue with
    Azure on the global or data center level, and it can save time checking if this
    is the case as the first step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure auto scaling when possible. One of the advantages Azure offers is
    that you pay only for what you use. Auto scaling, if set up properly, will increase
    the size/number of instances when the workload increases, and decreases the size
    when the workload decreases. This can save a lot of money over time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Azure Active Directory authentication whenever possible. Most services can
    be set up to use a different form of authentication or enable you to create local
    accounts only for that specific service. It's hard to audit or keep track of access
    in this case. Using AAD accounts will give you more insight and make tracking
    much easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable auditing on services. Some services, such as Azure SQL, have an audit
    feature built in. Enable this when possible or use Log Analytics to log everything.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design for resiliency whenever possible. Having a redundant service can cost
    a lot of money and in some cases even double our cost. However, having a redundant
    service in another Azure data center can increase availability for your services.
    In case there is an issue with a service, regardless of whether it's an issue
    with your service or on the Azure data center level, you can failover to a redundant
    copy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always plan for failure. This isn't only an Azure or cloud-related best practice—planning
    for failure is an IT best practice. Try to predict different scenarios and what
    would happen if the service fails. Then, try to fix possible issues and prevent
    failure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try enabling multi-factor authentication. As this can increase cost, it ins't
    always possible, and the budget might prevent you from accomplishing this. In
    this case, enable MFA at least for administrators; MFA for administrators is free.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install endpoint protection on Azure VMs. Endpoint protection will provide real-time
    protection and prevent malicious or unwanted software from being installed and
    potentially harming your system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install the latest patches for Azure VMs. Regular patch installation has a
    double effect: security patches will increase security and other updates can increase
    performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze performance regularly. Having auto-scaling in place is sometimes not
    enough. Try to monitor the performance of your resources manually when possible.
    You can spot performance issues or you can see that some services are not utilized.
    You can make your service perform better and save money.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure as code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IaC is a very important part in Azure best practices. Using Azure Portal is
    simple and excellent for creating a single resource and learning, but if we want
    to create complex environments, IaC is what we want to use. For example, for creating
    a single Azure VM, Azure Portal is a good choice. It takes 3-5 minutes to go through
    the New VM wizard and complete all of the steps. But what if we need to create
    new VMs on a daily basis or create tens or even hundreds of them? In this case,
    we would probably want to use some kind of automation to simplify our work, and
    this is exactly where IaC comes in. To work with Azure, we have a few options
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: ARM templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have already mentioned ARM templates. ARM templates are JSON files that hold
    information about Azure resources and can be used for deployment (or editing/updating
    existing resources).
  prefs: []
  type: TYPE_NORMAL
- en: To answer what Azure PowerShell is, we need to answer what PowerShell is first.
    PowerShell is a task-based, command-line scripting language based on the .NET
    framework. It is used to automate tasks and manage operating systems and processes
    from the command line. Azure PowerShell is a PowerShell module that provides a
    set of `cmdlets` (commands) that allow us to manage Azure resources.
  prefs: []
  type: TYPE_NORMAL
- en: Azure CLI, or Azure **command-line interface** (**CLI**), is Microsoft's cross-platform
    command-line tool for managing Azure resources. It supports macOS, Linux, and
    Windows, and provides the same experience whatever platform you choose. The first
    version of Azure CLI 1.0 was also called X-Plat CLI and was written in JavaScript.
    It was initially created to support Azure Service Management APIs, and Azure Resource
    Management support was added later. Azure CLI 2.0 was built for ARM from the start
    and was written in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Installing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll be discussing various tools, via which you can begin
    different installations.
  prefs: []
  type: TYPE_NORMAL
- en: ARM templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ARM templates don't really require anything, but you can use various tools to
    help you manage them. As they're JSON files, you can create one using any text
    editor, but it would be much easier to use an **integrated development environment**
    (**IDE**). My recommendation would be either Visual Studio or Visual Studio Code.
    Using Visual Studio or Visual Studio Code, you can connect to a repository and
    set up version control, which will allow you to track changes in templates over
    time. However, we can deploy with ARM templates, calling APIs or from Azure Portal without
    any additional tools.
  prefs: []
  type: TYPE_NORMAL
- en: Azure PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Azure PowerShell, we need Windows PowerShell installed first. Luckily,
    in the client OS, it''s already pre-installed on Windows 7 and newer, and for
    the server OS on Windows Server 2008 R2 and newer. So, all we are missing is the
    Azure PowerShell module. To install the Azure PowerShell module, we need to run
    PowerShell and execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will receive a message that will ask you to install the module from `PSGallery`,
    so select Yes or Yes to all. After you install the module, we need to import it
    with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can sign in with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will open a window where we need to input our credentials and authorize
    access to our subscription.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a new version of Azure PowerShell is released every three weeks, you need
    to keep it updated. To install the latest version, we need to run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Azure CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing the Azure CLI depends on the platform that we're using.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows, we need to download the installer from [https://aka.ms/installazurecliwindows](https://aka.ms/installazurecliwindows) and
    simply run the installer like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e231b61-4126-46b9-88fe-704152768cff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To install it on macOS, we need to run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing on Linux depends on the distribution. For example, on a distribution
    with `yum` (such as RHEL or CentOS), we need to run three commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the Microsoft repository key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, we create the repository information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we run the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Installation may depend on the platform, but after the installation process
    has completed, running Azure CLI commands is the same on all platforms. To log
    in to Azure with the Azure CLI, we need to run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display a message (shown here) and open a new browser session, where
    you need to authorize access to Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95a8cdc3-df3c-412b-871d-80c4325d6e16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All commands in the Azure CLI start with `az`. To get more information, you
    can run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e25a2066-18b1-471b-a575-6ec89205302d.png)'
  prefs: []
  type: TYPE_IMG
- en: You can combine `--help` with any of the commands in the list to get more information
    on a specific command.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Azure resources with IaC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To better understand how ARM templates, Azure PowerShell, and the Azure CLI
    work, let's see a simple example and create an Azure Web App with each tool.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure Web App with ARM templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With ARM templates, we need two JSON files. The first file defines what needs
    to be created and the second file contains parameters that are defined during
    deployment. So, basically, the first file holds information on what needs to be
    created (in our example, App Service Plan and Web App), and the second file holds
    information on where, the size of the service, name, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the template file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the parameter file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Save both files. Now, let''s create a resource group for deployment. Create
    a new empty Resource group named `packt-demo-arm`. Open Template deployment and
    select the Custom template. Under Edit template, load the template file and under
    Edit parameter, load the parameter file. Select Subscription and Resource group for
    packt-demo-arm (if you didn''t create it previously, you have the option to do
    so here). All other fields should be automatically loaded from the parameter file,
    like in this example (remember to accept TERMS AND CONDITIONS):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e6578f2-bcab-420e-8b43-fed69c1d5a27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the deployment has completed, you should find the App Service Plan and
    Web App, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5584e403-7c23-45d4-8cf4-d1056e42a143.png)'
  prefs: []
  type: TYPE_IMG
- en: We can use this same ARM template to deploy new Web App simply by changing the
    resource name or tier in the parameter file; we don't have to go through the deployment
    wizard in Azure portal for each deployment. This can save a lot of time if we
    need to deploy multiple Web Apps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure Web App with Azure PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create the same resources with Azure PowerShell, we need to execute a single
    script that will create a resource group, App Service Plan, and Web App. The script
    starts with parameters and then executes three `cmdlets` to create everything
    we need for deployment. Make sure you are connected to Azure in Azure PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing the script, you should receive the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5e3481e-421e-4c21-b799-57be416e4261.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we go to Azure Portal, we should find a new resource group and new items
    inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/566fe50b-925e-4ab6-9e26-9377e5f538cb.png)'
  prefs: []
  type: TYPE_IMG
- en: To start a new deployment, we simply change the parameter values and execute
    again. We can quickly deploy multiple websites by just changing the name of the
    Web App and deploying sites in the same resource group. For example, if I needed
    to deploy four instances of the same site in the same resource group, I could
    just change the value of `$webappname` and change the numbers at the end to `packt-demo-ps-webapp-01`,
    `packt-demo-ps-webapp-02`, `packt-demo-ps-webapp-03`, and `packt-demo-ps-webapp-04`.
    Instead of going through the wizard in Azure Portal each time, I can run the script
    by changing a single value.
  prefs: []
  type: TYPE_NORMAL
- en: 'To clean up deployment, you can execute a command that will delete the resource
    group, along with all the resources inside that resource group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You should receive output like this, and can verify in Azure Portal that the resource
    group doesn''t exist anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c2ea79a-7ed5-4f07-8632-1ba7c45afd37.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an Azure Web App with Azure CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s repeat the same process using the Azure CLI. You can see that the Azure
    CLI script structure is very similar to Azure PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing the script, you should receive a long output that ends like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/080a717c-5546-41ce-989c-8ecf1965d8fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we go to Azure Portal, we should find the new resource group and new items
    inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/627e81ac-04f4-4da2-87ea-b29b8e4cce56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similar to Azure PowerShell, to deploy again, we just need to edit the parameter
    values. To clean up deployment, you can execute a command that will delete the resource
    group, along with all the resources inside the resource group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You should receive an output message that the command is completed and verify
    in Azure Portal that the resource group doesn't exist anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying multiple resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of these deployment methods can be used to deploy multiple resources in
    a single script. My personal favorite tool is definitely Azure PowerShell, but
    this is probably because of my system engineering background. I was using Windows
    PowerShell for years and find Azure PowerShell easiest to use. This doesn't mean
    that ARM templates or the Azure CLI are behind Azure PowerShell, and I think developers
    will find these other tools more familiar.
  prefs: []
  type: TYPE_NORMAL
- en: 'For an example on how to deploy multiple resources as simply as possible, I''ll
    create an Azure PowerShell script that will deploy multiple websites in a single
    run. You can do similar things with other tools as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, you''ll receive a message for each resource created,
    and you can verify the deployment in Azure Portal. If the script executed successfully,
    you should see all of the resources, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aed8c1d5-4af4-4e0c-b585-0d870d5f8dc0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To clean up deployment, you can use the same command that we used previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use a similar approach when deploying any type of resource in Azure;
    for example, we can deploy multiple Azure VMs. Let''s execute a similar script,
    this time deploying two web servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The script should deploy one virtual network, one subnet, and one NSG. These
    resources will be shared between VMs. We don''t want to create unnecessary resources
    as this will enable VMs to communicate. For each VM, we''ll create an NIC and
    disk. An example of the resources created by the script for two servers is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d201d90-3491-404c-bfea-afeb50f4a64f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now edit this script to deploy more servers, deploy to a new resource
    group or a new subnet, or change any number of parameters to influence the deployment
    results.
  prefs: []
  type: TYPE_NORMAL
- en: So, using this script, I could deploy and number of servers, from 1 to 100,
    or even more. Now, imagine that you need to deploy 100 VMs in Azure Portal with
    a wizard. Which task will take more time? I think we can recognize that using
    IaC for deployment has multiple benefits and can make our job significantly easier.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration as code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IaC is only the first step in automation. After we deploy our servers with code,
    we still need to configure them. Configuring servers manually will probably take
    more time than deploying them. Luckily, there is the option for configuration
    as code to complete the configuration steps as well. There are many different
    tools for configuration, but we are going to explore Azure Automation as the Azure-native
    configuration as code tool.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Automation can be used for automating and scheduling different tasks.
    When talking about configuration as code, Azure Automation uses DSC. DSC is a
    declarative management platform in PowerShell, used for the configuration, deployment,
    and management of systems.
  prefs: []
  type: TYPE_NORMAL
- en: Apply DSC with Azure Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new Azure Automation account, we need to provide the Name for the account,
    Subscription, Resource group, and Location. Another option is to create Run-as-account.
    Run-as-account is a service principal that''s used to authenticate to Azure when
    managing Azure resources through Azure Automation. I strongly recommend that you
    create this as it will be easier to manage with accounts in place. An example
    of creating an Azure Automation account is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ad220f5-f44d-4858-9b8c-797494eda1de.png)'
  prefs: []
  type: TYPE_IMG
- en: With Azure Automation, you can perform various operations, schedule and run
    scripts, manage your resources, and so on. It's important to mention that you
    can manage both Azure and on-premises resources, as well as resources in other
    clouds. Here, we are going to concentrate on applying DSC to Azure VMs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Managing DSC in Azure Automation is done under State configuration (DSC). Here,
    we can manage Nodes, Configurations, and Compiled configurations, and access the
    Gallery. We are going to see each of these settings, except Gallery. Gallery contains
    a number of DSC scripts that you can use or edit, based on your requirements.
    An example of the State configuration (DSC) blade is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ecd6112-5b9f-4860-9c25-cdb3cec82479.png)'
  prefs: []
  type: TYPE_IMG
- en: DSC uses a script that is applied on selected nodes. Nodes are VMs or groups
    of VMs. These VMs can be both Azure VMs or local VMs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new configuration, we need a DSC script. The script we are going
    to use ensures that the IIS role is installed on the server. Save the script locally
    and make sure that the name of the file is the same as the name of the configuration.
    In our case, the name should be `webserverDSC`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Under Configurations, select New configuration and import the previously saved
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a89046fd-d3fb-42ad-b8d6-fd17f73bf53e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the script has been imported, it needs to be compiled before we can proceed.
    Select the imported script and a new blade will open. Select Compile and wait
    for the compile to finish. The compile time will depend on the size of the script,
    but in this case, it shouldn''t take more than 2-3 minutes. An example of the configuration
    blade is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f495207a-a7ce-4e9d-8d6e-ed66d0e165e2.png)'
  prefs: []
  type: TYPE_IMG
- en: After the script has compiled, we can proceed and apply configuration to the nodes.
    Under Nodes, select New and a new blade will open. In the list of VMs, we can
    select the VMs we want DSC to be applied to. I'm going to select the VM I created
    with the last script in this chapter, packtdemoVM-01.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under Registration, we can select a few options. We can select which Registration
    key will be used, Node configuration name, Refresh frequency, Configuration Mode
    Frequency, Configuration Mode, Allow Module Override or Reboot Node if Needed,
    and Action after Reboot. I''m going to select the new configuration we just created
    and leave the rest of the settings as the defaults. An example of node registration
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55403cac-2702-4774-a648-6ed95e20288f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After registration is complete, we need to wait for the initial check and for
    configuration to be applied to our server. This can take some time, depending
    on the frequency selected and the complexity of DSC we want to apply. If you monitor
    the node blade, the added node will go from pending to in progress, until it finally
    reaches compliant. An example of a node with configuration applied is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57663866-069f-470e-b864-3646abfe8776.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the node becomes compliant, we can verify that the configuration is applied.
    Go to the VM blade that we used in node registration and locate the public IP
    address. Open the browser and try reaching `http://''youripaddress''`. You should
    get the default IIS page, which will confirm that IIS is installed on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1bbd9f0d-f344-4909-b9ef-ab1f03d53e38.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Azure is a cloud with a lot of services and options. Combining these
    results in endless possibilities. We mentioned some of the best practices that
    can guide you to create productive and secure cloud environments. Based on these,
    you can expand and create your own rules and practices, depending on your services
    and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Although we have reached the end of this book, we have covered only a fraction
    of what Azure has to offer. Covering all of the available services would be just
    impossible in a single book, and if we wanted to provide a deep dive into each
    service, it would probably end up with a separate book for each service. This
    book was intended to provide you with an understanding of cloud design, cloud
    services, and best practices in the cloud, in order to give you a solid foundation
    of where you can start your cloud journey and build more, based on the knowledge
    gained here.
  prefs: []
  type: TYPE_NORMAL
- en: Learning Azure never stops, as new services and options are added daily. I've
    been using Azure for a long time and almost each time I open Azure Portal, I find
    something new. But, understanding new services is not an issue if you get a grasp
    on cloud patterns and best practices. If you understand the services you are currently
    using, understanding new features and services is not a problem and you will quickly
    find a way to use them to your advantage.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed this book and gained at least some knowledge from it!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The name of the resource should contain...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As much information as possible
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: As little information as possible
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Basic information
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Public endpoints should be...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Always exposed to internet access
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Exposed to internet access only when needed
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Never exposed to internet access
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To control management access to Azure VMs, you can use...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NSGs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Just in Time access
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Multi-factor authentication is...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Free for all users
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Free for administrators
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Payed for all users
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Payed for administrators
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IaC stands for...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Infrastructure as code
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Infrastructure as configuration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Information as code
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An ARM template is a...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Script
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: JSON file
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: TXT file
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Azure command-line tool is...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure PowerShell
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure CLI
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With IaC, we can...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy a single resource
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy multiple resources
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy only resources of the same type
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: DSC stands for...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Desired State Configuration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Digital Signature Configuration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Desired Scaling Configuration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The steps to apply DSC in Azure Automation are...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import script, compile script, and register node
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Register script, apply to node, and compile configuration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Register node, compile script, and apply configuration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
