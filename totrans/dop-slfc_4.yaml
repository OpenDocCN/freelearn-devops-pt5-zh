- en: Introduction to the Force.com Migration Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how Salesforce deployment is done in traditional
    ways. We learned about change set deployment, inbound and outbound changes in
    Salesforce, how to use Eclipse to deploy code to a sandbox, and Ant scripts as
    well. Also, we compared deployment methods in Salesforce with their advantages
    and disadvantages and learned how to choose the appropriate method of deployment
    according to our use case.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will study the Force.com Migration Tool in detail. We will
    discover how to install and set up the Force.com Migration Tool. Also, we will
    see how to use the migration tool to retrieve metadata components from a Salesforce
    sandbox and deploy them in another sandbox. Also, we will explain some important
    operations such as deploy code and undeploy code. We will discuss about configuration
    files involved in sandbox operations.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to explain the complete process for retrieving metadata from a
    sandbox and constructing a project manifest. We will learn how to configure sandbox
    credentials in Force.com Migration Tool to perform operations like deploy or delete
    metadata files from a sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What the Force.com Migration Tool is?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up the Force.com Migration Tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the Force.com tool helps developers and DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the migration tool to retrieve metadata from a sandbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying metadata on a sandbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting files/components from a Salesforce organization using `destructiveChanges.xml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the Force.com Migration Tool is?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Force.com Migration Tool provides a scripted way to deploy or retrieve metadata
    to and from a Salesforce sandbox. It is based on Ant/Java.
  prefs: []
  type: TYPE_NORMAL
- en: The Force.com Migration Tool helps us to copy Salesforce components from one
    organization easily. In normal practice, we have different environments such as
    development, test, UAT, and production. As developers develop components in a
    Developer sandbox, they need to move those changes to test or UAT for testers
    to test and give the green light for a feature/change to production. However,
    this is not a one-time process. Often, features or changes do not work properly
    or they introduce some bugs, testers raise an issue/bug, and developers start
    working on them. Once the bug/issue is fixed in the development environment, we
    need deployment of the change to test/UAT again. So, this is a repetitive process
    due to many reasons. Doing this deployment using a change set every time is not
    a convenient option, hence we need a solution to perform this task that is fast,
    easy, and less error-prone.
  prefs: []
  type: TYPE_NORMAL
- en: The Ant Migration Tool provides a solution to all of the problems we just discussed.
    The Ant Migration Tool is easy to set up and use. Once setup is done, only a few
    more things need to be changed for repetitive use. Ant migration tasks can be
    scripted, so we can easily automate most of your daily tasks. The Force.com Migration
    Tool is a Salesforce-supported tool; we don't have to worry much about its compatibility
    with your application and security.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Force.com Migration Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For setting up the Force.com Migration Tool, you need to install some prerequisites
    as mentioned in the following section. We can set up the migration tool on Windows,
    Mac, or Linux operating systems. The following are the steps for setting up the
    Force.com Migration Tool on a Linux machine.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The prerequisites for setup are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Java 1.7.x or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ant tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's install them on our system.
  prefs: []
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java version 1.7.x or later is recommended for better security. Check whether
    Java is already installed on your system using the command line as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `java -version` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If Java is not installed on the system, use the following instructions to install
    Java:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the latest version of the Java JDK. Install the JDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify by typing `java -version` at Command Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To check the Ant version installed, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `ant -version` command to verify whether Ant is installed on the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If Ant is not installed on your system, then use following steps to install
    Ant:'
  prefs: []
  type: TYPE_NORMAL
- en: The recommended Ant version is 1.5.x or later; you will need to download the
    latest version of Ant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download Apache Ant from [http://ant.apache.org/bindownload.cgi](http://ant.apache.org/bindownload.cgi).
    You need to download an Ant version above 1.6 in `ANT_HOME`. Note that, in our
    case, it is `/usr/local/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Unzip Apache Ant to `ANT_HOME`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Add the `bin` directory to your path .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the Ant binary path to the `.bashrc` file as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For more information, see [http://ant.apache.org/manual/install.html](http://ant.apache.org/manual/install.html).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Ant Migration Tool on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The installation steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the Force.com Migration Tool from [https://developer.salesforce.com/page/Force.com_Migration_Tool](https://developer.salesforce.com/page/Force.com_Migration_Tool):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the `.zip` file locally and extract the contents to the directory of your
    choice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in our case, it is `/home/devops/Force_com_tool`.
  prefs: []
  type: TYPE_NORMAL
- en: After unzipping `Salesforce_ant_39.0.zip`, you will find `ant-Salesforce.jar`;
    this is required to run Ant tasks. Copy `Salesforce_ant_39.0.zip` to another folder
    named `Sample`, which has examples for deploying and retrieving metadata from
    a sandbox in `codepkgclasses`, `removecodepkg`. Also the `Sample` folder contains
    a `build.properties` file where we provide credentials to access Salesforce sandboxes.
    The `Build.xml` file has Ant tasks mentioned, which use credentials from `build.properties`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the Ant Migration Tool on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the Ant Migration Tool on a Windows machine, we need Java and Ant installed
    on the machine. The steps to install Java and Ant are mentioned in the previous
    section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps are needed to set the `ANT_HOME` environment variable on
    Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter `environment` in the search box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a7bdb520-bf59-4ffb-ab81-269f28dcf717.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Edit the system environment variables. Under the Advanced tab, select
    Environment Variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e7b2ed2b-6fe9-451d-8cd8-e06e9a7d99c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under System Environment Variables, create a new `ANT_HOME` environment variable. Set
    the value of `ANT_HOME` to the Ant binary path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41ccb864-a5cc-45cb-8931-0056a5f33efc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new environment variable with the name `ANT_OPTS` and value `-Xms256M`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/16438a32-ea86-4977-80f7-cff32960a247.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Edit the `Path` environment variable and add the `ANT_HOME` path as shown in
    the following screenshot. Click on OK. Again click on OK to save the environment
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c2410003-1ccc-452a-bd40-9c16ded11913.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Command Prompt and check the Ant version using the `ant -version` command. You
    will see the output as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Installing the Salesforce Ant Migration Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The installation steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the ZIP file for the Ant Migration Tool from [https://developer.salesforce.com/docs/atlas.en-us.daas.meta/daas/forcemigrationtool_install.htm](https://developer.salesforce.com/docs/atlas.en-us.daas.meta/daas/forcemigrationtool_install.htm)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the ZIP file to any directory you like. In this example, we will be using
    a `Demo` folder at the `C:\Demo` path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract `Salesforce_ant_43.0.zip` to `C:\Demo\Salesforce_ant_43.0`. The contents
    of the ZIP file have already been explained in the *Installing the Ant Migration
    Tool on Linux* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieving metadata from a sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start retrieving metadata from a sandbox, we need to configure `build.xml`,
    `package.xml`, and `build.properties`. The `build.properties` file is used to
    specify Salesforce credentials to form a connection between your machine and the
    Salesforce sandbox. The `build.xml` file contains Ant tasks that need to be performed
    in the sandbox. package.xml is project manifest it will contain packages to retrieve
    or deploy.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will go through the common procedure to retrieve metadata from a Salesforce
    organization to a local machine using the Ant Migration Tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the location where you extracted the Force.com Migration Tool `.zip` file.
    You need to edit the `build.properties` file using any editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this case, we will use vim editor. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s have a look at the sample `build.properties` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the required login credentials for the desired Salesforce organization,
    such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Sf.username`: This field specifies the Salesforce username for your sandbox/production.
    The username provided should have permission to Modify All Data. If you are connecting
    to your sandbox instance, then you need to append your sandbox name to your username.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, if you can specify username as per you wish but it is good practice
    to have meaningful names , it will help us to identify sandbox. If your username
    is `xxx@Salesforce.com` and you want to connect with sandbox `dev` then the `sf.username`
    value can be `xxx@Salesforce.com.dev`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Sf.password`: This field specifies the password for your Salesforce username.
    You need to append a Salesforce security token to the password. A security token
    is 25-digit case-sensitive code that is used for authenticating an API login.
    A security token is required when you are logging in using an API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, if your password is `mypass` and the security token is `xxxxxxxxxxxxxxxxxxxxxxxxx`
    then the value of the `sf.password` field should be `mypassxxxxxxxxxxxxxxxxxxxxxxxxx`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you don''t have a security token, you can reset it. The steps to reset your
    security token are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Log in to your organization, and navigate to the top navigation bar. Go to
    <your name> | My Settings | Personal | Reset My Security Token:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf4e2d7e-7761-4eae-bb5e-a8d9c70c2140.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Reset Security Token. This invalidates your existing token.
  prefs:
  - PREF_OL
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: You will get your security token on your user's mail ID. For security reasons,
    the security token is not shown in the reset settings.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note: If you still face issues at login, you need to check whether you have
    set a Login IP Range such as 53.14.120.10 to 53.14.120.255\. Then you need to
    delete the login IP range if you are not in the same IP range.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Sf.serverurl`: This field specifies the server URL for Salesforce. If you
    want to connect to a production organization or Developer Edition organization
    then the value of this field will be `https://login.Salesforce.com`. If you want
    to work with a sandbox then the value of field will be `https://test.Salesforce.com`.If
    you use custom domain then you can set value as `https://custom-domain.my.salesforce.com`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we need to list out all components we want to retrieve from the sandbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `package.xml` file is a project manifest where we list all the components
    we want to retrieve or deploy. In our `package.xml` file, we have mentioned all
    Apex class components in the project. If you want to take a backup of your sandbox
    metadata, then you can mention all components in `package.xml`. For example, `package.xml` is for
    Apex classes only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The next file we need to configure is `build.xml`. This file specifies a target
    to retrieve and deploy metadata. Ant tasks are mentioned in the `build.xml` file.
    The configuration steps are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the directory where `build.xml` is situated
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `ant` command to verify whether you have installed Apache Ant properly
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The `build.xml` file loads the `build.properties` file to get access to the
    sandbox
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To retrieve metadata from your sandbox, user parameters can be set for each
    `<sf:retrieve>` target
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: As our retrieve target is `DevOps/src`, all metadata will be stored in this
    directory
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, take a look at the following `build.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieve metadata using the `ant` command. Run the following command to retrieve
    Apex class metadata in the retrieve target, that is, `DevOps/src`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The console log is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a20c3de-fe57-4e16-aa98-4d83e52255a3.png)'
  prefs: []
  type: TYPE_IMG
- en: If the build is successful, then it will show a `BUILD SUCCESSFUL` message.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying metadata on a sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw in the previous example how we can retrieve metadata from a sandbox and
    deploy to a local environment. We can use Eclipse to edit and make changes in
    code or add new feature code. Developers can use the Force.com migration plugin
    to sync metadata with a workspace in Eclipse. After making changes in code, developers
    can deploy changes on a test/UAT sandbox. We can use the Force.com Migration Tool
    to deploy changes to the sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: We will go through the common procedure to deploy metadata to a Salesforce organization
    from a local machine using the Ant Migration Tool. To provide access to the sandbox,
    we need to add sandbox credentials in the `build.properties` file as we provided
    credentials in *Step 3* in the *Retrieve metadata from sandbox* section previously.
    The value of the `Sf.serverurl` field will depend on where you want to deploy
    your changes. If you want to deploy on test, UAT sandbox, or any other development
    sandbox, then it will be `https://test.Salesforce.com`. If you are deploying your
    changes to the production environment, then use `https://login.Salesforce.com`.
    But until all test cases are successfully passed, we should not deploy any changes
    to the production environment directly; this can introduce failure in existing
    features and break the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we are done with changes in `build.properties`, we need to add all the
    components we want to deploy to the sandbox in `package.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding file, there are some new parameters, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`deployRoot`: This is a mandatory parameter. All files to deploy will be there
    in this directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maxPoll`: This is an optional parameter. This parameter defines the number
    of times to poll the server for the results of the deploy request. It has 200
    as the default value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`testLevel`: This is an optional parameter that specifies which tests to run
    while deployment is done on a specific sandbox. The value of this parameter can
    be different depending on the type of sandbox and where deployment is going on.
    For a development sandbox, this is set to `NoTestRun` as default where no tests
    will run. You can specify other options where you can choose which test cases
    to run or run all tests on organization that we will see in more detail in [Chapter
    7](95062e49-8aff-4b6f-a02d-d81ca0f7cc41.xhtml), *Continuous Testing.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pollWaitMillis`: This is an optional parameter that defines the number of
    milliseconds to wait while polling for results of the deployment. The default
    value of this parameter is 10,000, so we can set this accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting files/components from a Salesforce organization using destructiveChanges.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen we can retrieve metadata from a sandbox, and we can deploy changes
    to a sandbox using the Ant Migration Tool. But sometimes we don't need some features
    and we want to delete some components or files such as objects, fields, and so
    on from our Salesforce organization. We need to create one more file along with
    `package.xml` that is `destructiveChanges.xml`. The format of the `destructiveChanges.xml`
    delete manifest will be the same as `package.xml`, only wildcard characters are
    not accepted in a delete manifest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete component is same process as deploying components with delete manifest
    file. We need to add a list of the components to delete in `destructiveChanges.xml`*.* A
    sample file to delete a custom object is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: To deploy destructive changes, we need `package.xml` that contains only an API
    version. It should not contain any list of components. The `destructiveChanges.xml`
    and `package.xml` files should be in same directory.
  prefs: []
  type: TYPE_NORMAL
- en: How the Force.com tool helps developers and DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Force.com Migration Tool provides developers with a way to easily perform
    operations on their sandbox, such as retrieving, deploying, and deleting metadata.
    Using the Force.com Migration Tool, developers can deploy code to different sandboxes
    and switch between workspaces on Eclipse. The Migration Tool is easy to set up
    on developers' machines, and it provides a secure way to communicate with your
    Salesforce organization.
  prefs: []
  type: TYPE_NORMAL
- en: We can face issues if something goes wrong with deployments; having automated
    daily backup is very important in such scenarios. The Force.com Migration Tool
    provides a command-line way to retrieve the code and configuration from a Salesforce
    sandbox, so DevOps or admins can automate the task of taking a backup for your
    Salesforce organization code and configuration. Also, we can make use of open
    source continuous integration tools such as Jenkins to automate the process to
    take a backup of a Salesforce organization and save it to Git. In [Chapter 6](c18c24e5-b3e1-467c-8e33-cc278016e0a6.xhtml)*,
    Continuous Integration*, we will cover using Jenkins to automate the Salesforce
    organization backup process step by step.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will have a look at troubleshooting scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connection issues**: The most common issue we face during retrieval or deploying
    metadata is a connection issue. We use asynchronous types of requests during retrieval
    or deployment of metadata so we do not get a response immediately. The call for
    deploy operation is asynchronous sometimes Ant Migration Tool time outs during
    deployment. So if the Ant Migration Tool fails due to timeout and the deployment
    has any errors, we will not be able to see the error logs. In that case, we need
    to configure the `pollWaitMillis` and `maxPoll` parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invalid credentials or user locked out**: If you are getting this error,
    then there is an issue with your `build.properties` file. You need to verify the
    username, password, security token, and server URL are correct. Also, if you have several
    failed login attempts, then there is chance that your user is locked out. So,
    the number of failed attempts that are allowed depends on your organization''s
    settings. Sometimes, verifying proxy settings will also help to resolve issues
    with credentials.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Failed test cases**: If you are deploying changes to production, then as
    per Salesforce standards you need 75% code to be covered by test cases, and all
    test cases should pass to deploy code to a production environment successfully.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the Force.com Migration Tool and how to set
    up the tool in your environment. We have seen the step-by-step process to retrieve
    metadata from a sandbox using Ant scripts, and we learned about configuring our
    sandbox credentials in `build.properties` to provide access to a sandbox environment,
    listing components to retrieve in the `package.xml` project manifest, and retrieving
    the contents into the directory mentioned in the `build.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: After successfully retrieving metadata from a sandbox to a local machine, we
    moved to the next step, which is deploying changes to a sandbox. We have seen
    sample deployment of metadata using the Ant Migration Tool to a developer sandbox
    or test sandbox. Sometimes, we might need to delete components or files from a
    sandbox. We have seen how we can delete components from a Salesforce organization
    using `destructiveChanges.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see what source control versioning is. We will
    also learn the advantages of using Git, branching strategy in Git, and how to
    set up a Git repository for your Salesforce project. We will also go through the
    developer flow of using Git with a code editor such as Eclipse.
  prefs: []
  type: TYPE_NORMAL
