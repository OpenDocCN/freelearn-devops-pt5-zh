- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing Your Virtualization and Cloud Platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the introduction of virtualization and cloud computing, organizations
    can handle their IT infrastructure using programmatic methods since most of the
    IT components are software-defined, such as **software-defined data centers**
    (**SDDC**), **software-defined storage** (**SDS**), **software-defined networking**
    (**SDN**), and others. But this additional layer of technologies also made infrastructure
    management more complex as engineers need to handle both the underlying infrastructure
    and the overcloud virtual components.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible can help you automate both the underlying cloud infrastructure as well
    as the overcloud virtual components such as the automated cluster configurations
    of virtualization platforms (VMware, OpenStack, Red Hat Virtualization, and others).
    It can also help you provision virtual components such as virtual machines, virtual
    networks, and virtual storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Infrastructure as Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing cloud platforms using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating VMware vSphere resources using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Ansible as an IaC tool for AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating resources in GCP using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, you will learn how to configure the necessary authentication and provision
    resources in virtualization platforms such as VMware vCenter and public cloud
    platforms such as GCP and AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A Linux machine for the Ansible control node (with internet access)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge of managing cloud platforms (VMware, GCP, and AWS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the VMware vCenter console and API (for the VMware use case)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the AWS console and API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the GCP console and API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible code, playbooks, commands, and snippets for this chapter can
    be found in this book’s GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-07](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-07).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Infrastructure as Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Infrastructure as Code** (**IaC**) is a method that’s used to provision and
    manage infrastructure details and configurations as software code and make changes
    inside the code instead of changing the infrastructure whenever required. There
    are many dedicated tools and software for IaC, including Ansible. Instead of manually
    deploying the infrastructure components, such as virtual machines, storage, network,
    policies, and so on, it is possible to develop IaC and use tools to deploy the
    infrastructure automatically. The following diagram shows some typical IaC components
    regarding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure component details will be stored as code in a specific format
    (for example, YAML playbooks).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IaC tools (for example, Ansible) will create and manage the infrastructure
    component in the private or public cloud based on the infrastructure code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Typical Infrastructure as Code components ](img/B18383_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Typical Infrastructure as Code components
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, you will learn how to use Ansible as an IaC tool for deploying
    and managing infrastructure in private and public cloud platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Managing cloud platforms using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you learned in the previous chapters, Ansible can manage both Linux, Windows,
    and network devices. But virtualization platforms work differently and you cannot
    use SSH-based connections and operations to automate such platforms. Most of these
    platforms offer **application programming interface** (**API**) and **software
    development kit** (**SDK**)-based access to help us access and control such platforms
    over HTTP (or HTTPS). Since Ansible can use SDK (Python libraries) and communicate
    over HTTP/HTTPS, it is possible to automate any platforms that offer such access.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the different connection methods used by Ansible
    to communicate with the managed devices and platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Ansible connection methods ](img/B18383_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Ansible connection methods
  prefs: []
  type: TYPE_NORMAL
- en: Application Programming Interface
  prefs: []
  type: TYPE_NORMAL
- en: An API is a connection or protocol that allows one system to communicate with
    another using a dedicated set of instructions and results. Unlike command-line
    utilities, which are meant for human interaction with the system, API-based access
    can help automate and control such systems programmatically and in a controlled
    way. Read more about APIs at [https://en.wikipedia.org/wiki/API](https://en.wikipedia.org/wiki/API).
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible has hundreds of modules (refer to *Figure 7.3*) and plugins that support
    cloud automation and they are available as collections for specific cloud or virtualization
    platforms. With these modules, it is possible to create and manage cloud resources
    such as virtual machines, virtual private networks, virtual disks, access policies,
    serverless components, containers, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Ansible cloud modules ](img/B18383_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Ansible cloud modules
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the full list of cloud modules at [https://docs.ansible.com/ansible/2.9/modules/list_of_cloud_modules.xhtml](https://docs.ansible.com/ansible/2.9/modules/list_of_cloud_modules.xhtml)
    (for Ansible 2.9). Since the introduction of Ansible collections, these modules
    have been migrated to the respective cloud collections. Check out the collection
    pages in Ansible Galaxy ([https://galaxy.ansible.com](https://galaxy.ansible.com))
    to see all the plugins, roles, and playbooks that are part of the Ansible content
    collection. For example, the following screenshot shows the Ansible collection
    page of the VMware collection by the community ([https://galaxy.ansible.com/community/vmware](https://galaxy.ansible.com/community/vmware)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Ansible VMware collection ](img/B18383_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Ansible VMware collection
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for the collection in Ansible Galaxy and use the appropriate collection
    either from the community or from the vendors themselves. The following screenshot
    shows the search result for the `aws` collection in the Ansible Galaxy portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – AWS collection result in Ansible Galaxy ](img/B18383_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – AWS collection result in Ansible Galaxy
  prefs: []
  type: TYPE_NORMAL
- en: By exploring the Ansible Galaxy portal, you will find thousands of contributions
    from the community and vendors. By using Ansible collections, it is possible to
    save playbook development time by using existing roles, modules, and playbooks
    from existing collections.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to manage VMware using Ansible by using
    connection methods, modules, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Automating VMware vSphere resources using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start with some simple automation use cases for VMware, such as provisioning
    of virtual machines, managing `community.vmware`) contains around 150 modules
    and other plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Ansible VMware collection by the community ](img/B18383_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Ansible VMware collection by the community
  prefs: []
  type: TYPE_NORMAL
- en: The `community.vmware` collection relies on the `pyvmomi` and `community.vmware`
    collection, you need to install appropriate packages for Ansible to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'VMware has already introduced the `vmware.vmware_rest`) to manage the operations
    using a REST API instead of Python libraries and SDKs. `vmware.vmware_rest` contains
    around 130 modules and other plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Ansible VMware REST API collection by VMware ](img/B18383_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Ansible VMware REST API collection by VMware
  prefs: []
  type: TYPE_NORMAL
- en: Use any of these Ansible collections, depending on your vSphere version and
    module requirements.
  prefs: []
  type: TYPE_NORMAL
- en: VMware Ansible Collections
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible VMware community collection based on the Python library is available
    at [https://galaxy.ansible.com/community/vmware](https://galaxy.ansible.com/community/vmware).
    The collection based on the REST API is available at [https://galaxy.ansible.com/vmware/vmware_rest](https://galaxy.ansible.com/vmware/vmware_rest).
  prefs: []
  type: TYPE_NORMAL
- en: Ansible VMware automation prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the VMware collection, you need to meet the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the Ansible VMware collection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the required libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMware vCenter Lab
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have access to a VMware lab to test and practice, then get an
    evaluation copy of VMware vSphere ([https://customerconnect.vmware.com/en/web/vmware/evalcenter?p=vsphere-eval-7](https://customerconnect.vmware.com/en/web/vmware/evalcenter?p=vsphere-eval-7))
    and install it on your home server. Refer to *How to Install VMware vSphere Hypervisor
    ESXi* ([https://www.techbeatly.com/how-to-install-vmware-vsphere-hypervisor-esxi](https://www.techbeatly.com/how-to-install-vmware-vsphere-hypervisor-esxi))
    and *How to Install VMware vCenter Server Appliance* ([https://www.techbeatly.com/how-to-install-vmware-vcenter-server-appliance](https://www.techbeatly.com/how-to-install-vmware-vcenter-server-appliance))
    to set up a VMware home lab.
  prefs: []
  type: TYPE_NORMAL
- en: Installing an Ansible VMware collection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the `ansible-galaxy` command to install a collection. By default, `ansible-galaxy`
    will store the collection’s content in the `HOME_DIRECTORY/.ansible/collections`
    path. It is a best practice to store the collection in a project directory instead
    of a home directory to avoid any dependency issues. Configure the collection path
    in `ansible.cfg`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – ansible.cfg with collection_paths ](img/B18383_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – ansible.cfg with collection_paths
  prefs: []
  type: TYPE_NORMAL
- en: 'When you execute the `ansible-galaxy` command, the collection will be downloaded
    and stored in the project directory as per the configuration, as shown in the
    following screenshot (refer to the **VMware Ansible collections** page at [galaxy.ansible.com](http://galaxy.ansible.com)
    to see the installation command; refer to the previous information box to find
    the link):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Installing the VMware collection ](img/B18383_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Installing the VMware collection
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the collection’s details using the `ansible-galaxy collection list`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Listing the installed collections ](img/B18383_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Listing the installed collections
  prefs: []
  type: TYPE_NORMAL
- en: If you have installed the Ansible community package, then the default collection
    will be there as part of Python’s `site-packages`. The latest collection that’s
    been installed inside your custom collection directory can be seen in the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the required Python libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The list of required Python libraries and SDKs will be stored inside the `requirements.txt`
    file in the collection folder, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Collection dependencies in requirements.txt ](img/B18383_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Collection dependencies in requirements.txt
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `pip install` command to install all the dependencies for the Ansible
    collection, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Installing the requirements for the collection ](img/B18383_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Installing the requirements for the collection
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Python virtual environments for Ansible, then remember to activate
    the appropriate virtual environment and install the necessary libraries inside
    the Python virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: Automation Execution Environments
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat Ansible Tower used Python virtual environments to handle dependencies
    such as Python libraries, collections, and so on. In `ansible-core`, and the required
    collections. Refer to [https://www.ansible.com/products/execution-environments](https://www.ansible.com/products/execution-environments)
    for more details. Learn how to build new execution environments (container images)
    using the `ansible-builder` utility ([https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning VMware virtual machines in Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will create Ansible content to provision virtual machines
    in a VMware cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must have the following configurations and details in place before proceeding
    with this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: A virtual machine template in VMware vCenter (Linux or Windows)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A default user account inside the virtual machine template to access new virtual
    machines once provisioned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A VMware vCenter username and password with adequate access to create and manage
    resources in the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details of the data center, cluster, datastore, and folder to save the VM in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure the appropriate permissions are in place by logging into VMware vCenter
    and creating some test machines using the VMware VM template. Once you have confirmed
    the access and permissions, start developing Ansible artifacts for VMware VM provisioning.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Ansible automation artifacts for VM provisioning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You need to declare and pass a few variables for the vCenter access and VM
    creation. Keep these variables inside the playbook or in a separate file. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Store the vCenter credentials inside your Ansible Vault file – that is, `vars/vmware-credential.yaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Creating an Ansible Vault file for your VMware credentials
    ](img/B18383_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Creating an Ansible Vault file for your VMware credentials
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the VMware vCenter username and password inside the file and save the vault
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember the vault password as you will need this while executing the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another variable file called `vars/common-vars.yml` for storing details
    about the new virtual machine (refer to `Chapter-07` in this book’s GitHub repository
    for more details):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Variables for the VMware cluster and VM ](img/B18383_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Variables for the VMware cluster and VM
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to add multiple VM details inside and loop the task. However,
    we only covered using a single VM here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a role for virtual machine provisioning by using the `ansible-galaxy
    role init` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Initializing a new role using the ansible-galaxy role init
    command ](img/B18383_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – Initializing a new role using the ansible-galaxy role init command
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the necessary tasks to `roles/vmware-provision-vm-from-template/tasks/main.yml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.16 – main.yaml with a subtasks file ](img/B18383_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 – main.yaml with a subtasks file
  prefs: []
  type: TYPE_NORMAL
- en: '`tasks/main.yml` contains two tasks for calling the subtasks file. The first
    task does a pre-check to ensure a VM with the same name does not exist before
    you proceed with VM creation. If one doesn’t exist, then the next task will be
    executed based on the `when: vm_check.failed` condition. This is a best practice
    as you need to add all possible validations and error handling inside the playbook.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the necessary content for `roles/vmware-provision-vm-from-template/tasks/vmware-provisioning-pre-check.yaml`.
    Also, display a message if the virtual machine already exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.17 – vmware-provisioning-pre-check.yaml ](img/B18383_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – vmware-provisioning-pre-check.yaml
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `roles/vmware-provision-vm-from-template/tasks/vmware-provisioning-task.yaml`
    and add a task to create a new VMware VM (refer to this book’s GitHub repository
    for the full code), as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.18 – VMware VM creation task file ](img/B18383_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18 – VMware VM creation task file
  prefs: []
  type: TYPE_NORMAL
- en: 'It is a best practice to keep the default values of variables in `roles/vmware-provision-vm-from-template/defaults/main.yml`
    and pass the actual values while executing the playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Default variable for the VMware role ](img/B18383_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19 – Default variable for the VMware role
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the main playbook, `Chapter-07/vmware-provision-vm-from-template.yml`.
    Since the execution happens on a local machine for API and HTTP-based platforms,
    make sure `hosts: localhost` has been configured, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.20 – The main playbook to create the VMware infrastructure ](img/B18383_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20 – The main playbook to create the VMware infrastructure
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to keep the variables under `group_vars` or `host_vars` as needed.
    However, here we have used a variable file approach to demonstrate this use case
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding snippet, the `ansible.builtin.wait_for` module is being used
    to wait for the newly created virtual machine to come online with SSH. We used
    the IP address of the virtual machine, port `22` (SSH), and instructed Ansible
    to wait for some period (`vm_wait_for_ssh_time`). Refer to [https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.xhtml](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.xhtml)
    to learn more about the `wait_for` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the VM is up and running, add the new VM to a dynamic host group, `vmwarenewvms`,
    for post-provisioning tasks, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.21 – Adding the newly created VM to the Ansible inventory ](img/B18383_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21 – Adding the newly created VM to the Ansible inventory
  prefs: []
  type: TYPE_NORMAL
- en: Instead of adding hosts, it is possible to use the dynamic inventory plugin
    for VMware to detect the newly created virtual machines and use them in the next
    set of tasks. Refer to [https://docs.ansible.com/ansible/latest/collections/community/vmware/vmware_vm_inventory_inventory.xhtml](https://docs.ansible.com/ansible/latest/collections/community/vmware/vmware_vm_inventory_inventory.xhtml)
    for more details. Also, refer to [*Chapter 5*](B18383_05.xhtml#_idTextAnchor086),
    *Expanding Your Automation Landscape*, the *Ansible dynamic inventory* section,
    to learn how to use an Ansible dynamic inventory with AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another play in the same Ansible playbook to execute the post-provisioning
    tasks such as creating new users, configuring system files, and installing new
    packages, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.22 – Second play in the playbook for post-provisioning tasks ](img/B18383_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22 – Second play in the playbook for post-provisioning tasks
  prefs: []
  type: TYPE_NORMAL
- en: 'When you use Ansible Automation Controller (part of Ansible Automation Platform)
    or Ansible AWX, it is possible to split the playbook into multiple job templates
    and create job workflows, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.23 – Workflow templates (source: docs.ansible.com) ](img/B18383_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.23 – Workflow templates (source: docs.ansible.com)'
  prefs: []
  type: TYPE_NORMAL
- en: You will learn about workflow job templates and Ansible Automation Controller
    in [*Chapter 12*](B18383_12.xhtml#_idTextAnchor213), *Integrating Ansible with
    Your Tools*. Refer to [https://docs.ansible.com/automation-controller/latest/html/userguide/workflows.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/workflows.xhtml)
    to learn more about workflow templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `ansible-playbook vmware-provision-vm-from-template.yml` playbook
    with `--ask-vault-password` and provide the vault password, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.24 – Executing the playbook to create the VMware VM ](img/B18383_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24 – Executing the playbook to create the VMware VM
  prefs: []
  type: TYPE_NORMAL
- en: Add more tasks to the post-provisioning section to automate the VM configuration
    workflows and make it a single workflow for end-to-end VM provisioning. In the
    next section, you will learn about cloud management for **Amazon Web Services**
    (**AWS**) and how to use Ansible as an IaC tool.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Template in the vSphere Client
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://docs.vmware.com/en/VMware-vSphere/6.0/com.vmware.vsphere.hostclient.doc/GUID-40BC4243-E4FA-4A46-8C8B-F50D92C186ED.xhtml](https://docs.vmware.com/en/VMware-vSphere/6.0/com.vmware.vsphere.hostclient.doc/GUID-40BC4243-E4FA-4A46-8C8B-F50D92C186ED.xhtml)
    for VMware template creation procedures.
  prefs: []
  type: TYPE_NORMAL
- en: Using Ansible as an IaC tool for AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will create Ansible content to provision and manage AWS
    resources using Ansible. Let’s assume that whenever you need to create a new EC2
    instance, you need to follow multiple manual procedures such as creating a new
    **Virtual Private Cloud** (**VPC**), a new security group, network access policies,
    and many other items. You also need to do post-provisioning steps such as creating
    new user accounts, installing packages, configuring applications, and more.
  prefs: []
  type: TYPE_NORMAL
- en: With the help of the Ansible AWS collection, it is possible to automate all
    of these tasks and manage the entire life cycle of the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Free Tier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To practice AWS and Ansible use cases, it is possible to use AWS Free Tier,
    which provides more than 100 AWS resources free of charge. Visit [https://aws.amazon.com/free](https://aws.amazon.com/free)
    (*Figure 7.25*) and sign up for a free AWS Free Tier account to find them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.25 – AWS Free Tier access with more than 100 services ](img/B18383_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25 – AWS Free Tier access with more than 100 services
  prefs: []
  type: TYPE_NORMAL
- en: It is important to ensure that your AWS resource usage is within the AWS Free
    Tier limit to avoid the credit or debit card connected with your account being
    billed. Refer to [https://aws.amazon.com/aws-cost-management/aws-budgets/](https://aws.amazon.com/aws-cost-management/aws-budgets/)
    to learn how to configure budget alerts and other billing details for your AWS
    account.
  prefs: []
  type: TYPE_NORMAL
- en: I have ensured that the following demonstration only uses the AWS Free Tier-based
    resources so that no additional costs will be incurred to your AWS Free Tier account.
    But it is also important to delete the resource from the AWS account once you
    have finished testing.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Ansible AWS collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you learned in the previous section, it is possible to use the `ansible-galaxy`
    command to install the Ansible AWS collection. If you need multiple collections
    for the project, then create a `requirements.yaml` file and mention the required
    collections and roles inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.26 – The requirements.yaml file with collection details ](img/B18383_07_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.26 – The requirements.yaml file with collection details
  prefs: []
  type: TYPE_NORMAL
- en: 'Once `requirements.yaml` has been updated, install the collection using the
    `ansible-galaxy` command by calling the `requirements.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.27 – Installing the collection using requirements.yaml ](img/B18383_07_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.27 – Installing the collection using requirements.yaml
  prefs: []
  type: TYPE_NORMAL
- en: 'The collection will be installed in the `Chapter-07/collections` path that
    you configured in `ansible.cfg`. Verify the collection, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.28 – Ansible collection list ](img/B18383_07_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.28 – Ansible collection list
  prefs: []
  type: TYPE_NORMAL
- en: The Ansible collection for AWS automation is now ready to use. Now, start developing
    your Ansible playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Ansible IaC content for the AWS infrastructure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this scenario, two web servers will be installed with website content and
    configured to serve behind an **elastic load balancer** (**ELB**), as shown in
    the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.29 – Build a web server infrastructure and application ](img/B18383_07_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.29 – Build a web server infrastructure and application
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple roles can be created to handle multiple resources in this Ansible
    automation content, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.30 – Ansible roles for managing cloud platforms ](img/B18383_07_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.30 – Ansible roles for managing cloud platforms
  prefs: []
  type: TYPE_NORMAL
- en: Check out the `amazon.aws` collection document ([https://galaxy.ansible.com/amazon/aws](https://galaxy.ansible.com/amazon/aws)),
    to see the Python library requirements for installing the `boto` and `boto3` Python
    libraries. You learned how to do this in [*Chapter 5*](B18383_05.xhtml#_idTextAnchor086),
    *Expanding Your Automation Landscape*. Please refer to this chapter to learn how
    to configure the AWS credential for this automation job.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a variable for the AWS environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Details about the AWS region, VPC, and subnets are stored in the `Chapter-07/vars/aws-common-vars.yml`
    file (refer to the course repository on GitHub):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.31 – AWS-related variables in vars/aws-common-vars.yml ](img/B18383_07_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.31 – AWS-related variables in vars/aws-common-vars.yml
  prefs: []
  type: TYPE_NORMAL
- en: Once the details about the AWS cloud have been stored in a variable, you must
    create a variable to store the EC2 instance details.
  prefs: []
  type: TYPE_NORMAL
- en: Default VPC in AWS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A default VPC will be present in each AWS region when you start using AWS VPC,
    which comes with the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: Subnets (public) in each **Availability Zone** (**AZ**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An internet gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this demonstration, we will use the `amazon.aws.ec2_vpc_net` Ansible module.
    Refer to the official documentation ([https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.xhtml](https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.xhtml))
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Listing the EC2 instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Details about the new EC2 instances are stored in the `vars/aws-ec2-new.yml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.32 – New EC2 details in the variable file ](img/B18383_07_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.32 – New EC2 details in the variable file
  prefs: []
  type: TYPE_NORMAL
- en: The number of EC2 instances can be controlled in this variable as you will be
    using a loop to provision them. Now, you must configure the AWS security group
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AWS security group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the `amazon.aws.ec2_group` module to create a new security group with the
    required rules in `roles/aws-create-sg/tasks/main.yml`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.33 – Security group task ](img/B18383_07_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.33 – Security group task
  prefs: []
  type: TYPE_NORMAL
- en: If your application is serving over different ports, add the ports accordingly
    and adjust the playbook as needed. Once you’ve done this, you must create the
    SSH key pair task.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the SSH key pair
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A new key can be created using the `amazon.aws.ec2_key` module. A local key
    pair (`~/.ssh/id_rsa.pub`) will be used for this in `roles/aws-create-keypair/tasks/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.34 – Creating the SSH key resource ](img/B18383_07_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.34 – Creating the SSH key resource
  prefs: []
  type: TYPE_NORMAL
- en: This key pair is important as you will need it later to access the EC2 instances
    and configure web servers and other details. In the preceding code block, we used
    an existing SSH key pair on the workstation (`~/.ssh/id_rsa.pub`) and its public
    key to create this new key pair resource in AWS so that we do not need to download
    the private key again. Now, you must add tasks for creating an **Elastic Load
    Balancer** (**ELB**).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Elastic Load Balancer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A new ELB can be created by using the `amazon.aws.ec2_elb_lb` module in `roles/aws-create-elb/tasks/main.yml`,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.35 – Creating an Amazon ELB ](img/B18383_07_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.35 – Creating an Amazon ELB
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a different version of the AWS Ansible collection, then check
    out the appropriate Ansible module for creating load balancers and change the
    playbook accordingly. Now, you are ready to create the EC2 instance tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating EC2 instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, start creating the EC2 instances. However, you must ensure that no
    duplicate VMs are created. It is a best practice to add validations inside the
    playbook to avoid any mistakes happening automatically as AWS will not complain
    about creating multiple instances with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the necessary tasks in `roles/aws-create-ec2/tasks/main.yml` to collect
    the existing instances. Only proceed with EC2 creation if the instances don’t
    exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.36 – Fetching EC2 instances ](img/B18383_07_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.36 – Fetching EC2 instances
  prefs: []
  type: TYPE_NORMAL
- en: 'If the EC2 instance already exists, then you should not create a new EC2 instance
    again. So, based on `existing_ec2_list`, create new EC2 instances, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.37 – Creating an EC2 instance if one does not exist ](img/B18383_07_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.37 – Creating an EC2 instance if one does not exist
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the EC2 instances, you need to collect the newly created EC2
    instances’ details and wait for them to boot up and respond as being online, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.38 – Collecting information about the newly created EC2 instances
    ](img/B18383_07_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.38 – Collecting information about the newly created EC2 instances
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the EC2 instances are up and running, collect their details so that you
    can update them to ELB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.39 – Collecting the new EC2 instances’ details ](img/B18383_07_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.39 – Collecting the new EC2 instances’ details
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the collected details (`ec2_existing_collected`), update the ELB with
    instance items in the backend, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.40 – Updating the ELB with instance details in the backend ](img/B18383_07_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.40 – Updating the ELB with instance details in the backend
  prefs: []
  type: TYPE_NORMAL
- en: 'The ELB and backend instances are ready and connected, but nothing is running
    inside the EC2 instances. Now, you need to install the web server and its content
    inside it. For that, collect the newly created EC2 instances’ details in a dynamic
    host group for **post-provisioning** tasks, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.41 – Updating the inventory with new EC2 instance details ](img/B18383_07_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.41 – Updating the inventory with new EC2 instance details
  prefs: []
  type: TYPE_NORMAL
- en: Instead of collecting the host details, as shown in the preceding screenshot,
    it is possible to utilize an Ansible dynamic inventory. Refer to [*Chapter 5*](B18383_05.xhtml#_idTextAnchor086),
    *Expanding Your Automation Landscape*, the *Ansible dynamic inventory* section
    to learn how to use an Ansible dynamic inventory with AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have prepared all of the tasks in the roles, use these roles in the
    appropriate order inside the main playbook.
  prefs: []
  type: TYPE_NORMAL
- en: The main playbook for integrating the provisioning workflow for AWS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The IaC provisioning workflow is written inside the main playbook – that is,
    `Chapter-07/aws-infra-provisioning.yaml` (refer to this book’s GitHub repository
    for the full code). The variables can be stored under `group_vars` or `host_vars`
    as a best practice. However, we have used the variable file approach to demonstrate
    this use case easily. Use the previously created roles in the appropriate order,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.42 – AWS infrastructure provisioning playbook ](img/B18383_07_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.42 – AWS infrastructure provisioning playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same playbook, the post-provisioning tasks have been added under different
    plays called `Deploy Webserver to EC2 instances` and `hosts: ec2webservers` (the
    dynamic host group created in `roles/aws-create-ec2/tasks/main.yml`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `deploy-web-server` role will install the `httpd` web server and install
    `firewalld` and configure the web server with the default website content. The
    following screenshot shows the post-provisioning play and an optional play to
    show the ELB address so that you do not need to log into the AWS console and check
    for the URL to access the website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.43 – Post-provisioning tasks in the second play ](img/B18383_07_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.43 – Post-provisioning tasks in the second play
  prefs: []
  type: TYPE_NORMAL
- en: 'When you execute the playbook, the workflow will be triggered for provisioning
    the infrastructure and application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the following message will be displayed after the post-provisioning
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.44 – The Ansible playbook displaying the ELB details ](img/B18383_07_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.44 – The Ansible playbook displaying the ELB details
  prefs: []
  type: TYPE_NORMAL
- en: Add more resources to the provisioning workflow, such as additional EBS volumes
    to the server, Network Access Control rules, and images from custom AMIs or snapshots.
    Post-provisioning can be expanded with more configurations as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you need to create the playbook’s content to delete the resources to complete
    the full IaC life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Completing the IaC life cycle by using a destroy playbook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Chapter-07/aws-infra-destroy.yaml` playbook will take care of destroying
    the resources and housekeeping jobs (refer to this book’s GitHub repository for
    the full code):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.45 – AWS infrastructure destroy playbook ](img/B18383_07_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.45 – AWS infrastructure destroy playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'If the resources are not required, then destroy the entire infrastructure using
    the destroy playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this section, you learned how to create AWS resources and manage the end-to-end
    life cycle for implementing IaC practices. In the next section, you will explore
    similar automation for **Google Cloud Platform** (**GCP**).
  prefs: []
  type: TYPE_NORMAL
- en: Ansible AWS Integration
  prefs: []
  type: TYPE_NORMAL
- en: Read more about Ansible AWS integration at [https://www.ansible.com/integrations/cloud/amazon-web-services](https://www.ansible.com/integrations/cloud/amazon-web-services).
  prefs: []
  type: TYPE_NORMAL
- en: Creating resources in GCP using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like VMware and AWS, it is possible to create and manage GCP resources with
    the help of the Ansible GCP content collection.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisite for Ansible GCP automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start, you need to ensure the prerequisites have been configured
    for Ansible GCP automation.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you learned for VMware, AWS, and other platforms, you need to install the
    relevant Ansible content collection. In this case, you must install the `google.cloud`
    collection if you haven’t done so yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `google.cloud` collection contains around 170 modules, roles, and other
    plugins to automate the GCP infrastructure and its resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The modules in the `google.cloud` collection require the following Python libraries
    to be installed on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you are installing the libraries into the correct path if you are
    using a Python virtual environment for Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible for Google Cloud
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn more about Ansible GCP automation by reading the *Google Cloud Platform
    Guide*: [https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.xhtml](https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.xhtml).
    Also, check out the Google Cloud Ansible collection at [https://galaxy.ansible.com/google/cloud](https://galaxy.ansible.com/google/cloud)
    to explore Ansible modules for GCP automation.'
  prefs: []
  type: TYPE_NORMAL
- en: GCP free trial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To practice GCP and Ansible use cases, it is possible to get a GCP free trial
    with more than 20 GCP services to use free of cost. Visit [https://cloud.google.com/free](https://cloud.google.com/free)
    and sign up for a GCP Free Tier account. I have ensured that the following demonstration
    only uses the GCP Free Tier-based resources so that no additional costs will be
    incurred on your account. It is also important to delete the resource from your
    GCP account once you have finished testing.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GCP credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use your GCP service accounts or machine accounts to configure the platform
    access for Ansible automation (refer to the following information box for more
    information). Once you created the service account and downloaded the JSON file,
    configure Ansible to use the JSON file as the credential for GCP access.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to configure the credential as module parameters or as environment
    variables, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the environment and practices, follow an appropriate method, similar
    to what we did for VMware and AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GCP Service Account
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount](https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount)
    to learn how to create a GCP service account and create and download JSON key
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GCP instance using Ansible
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will create Ansible content to create a simple compute
    instance in GCP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a variable file called `vars/gcp-details.yaml` so that you can store
    the GCP credential details, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.46 – GCP configuration variables for Ansible ](img/B18383_07_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.46 – GCP configuration variables for Ansible
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Chapter-07/gcp-create-instance.yml` playbook. Create a new VPC
    network using `google.cloud.gcp_compute_network` if required and configure the
    new GCP instance so that it uses the new VPC network. In this exercise, you will
    be using the `default` VPC network and adding a task to fetch the `default` VPC
    network details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.47 – GCP provisioning playbook ](img/B18383_07_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.47 – GCP provisioning playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a task to the same playbook to create the GCP instance boot disk with the
    Debian 9 operating system (use other public images or your own private images
    as needed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.48 – Creating a GCP disk for the new VM ](img/B18383_07_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.48 – Creating a GCP disk for the new VM
  prefs: []
  type: TYPE_NORMAL
- en: The `instance_source_disk` variable will contain details about the disk. We
    will pass this information to the instance creation task in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a task to create the GCP instance and pass the network and disk details,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.49 – Creating a GCP instance with network and disk details ](img/B18383_07_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.49 – Creating a GCP instance with network and disk details
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the Ansible `gcp-create-instance.yml` playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the instance details on the GCP console, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.50 – Verifying the instance on the GCP dashboard ](img/B18383_07_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.50 – Verifying the instance on the GCP dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, verify the disk details, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.51 – Verifying the disk details on the GCP dashboard ](img/B18383_07_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.51 – Verifying the disk details on the GCP dashboard
  prefs: []
  type: TYPE_NORMAL
- en: With around 170 modules available, it is possible to manage almost all cloud
    resources in GCP, including computing, disk, networks, load balancers, firewalls,
    routing, cloud builds, autoscaling, DNS, databases, Spanner, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible GCP Modules
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the official documentation to see the available Ansible GCP modules:
    [https://docs.ansible.com/ansible/latest/collections/google/cloud/index.xhtml](https://docs.ansible.com/ansible/latest/collections/google/cloud/index.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about IaC concepts and how to use Ansible as an
    IaC tool. You also learned about how Ansible can manage virtualization and cloud
    platforms such as VMware, AWS, and GCP. Then, you learned about the different
    methods and credential configurations for these platforms so that Ansible can
    access and execute automated operations.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you explored the Ansible modules and collections that are available for
    VMware, AWS, and GCP. By developing the basic playbooks for creating new virtual
    machines (EC2 instances or GCP instances), you have started your journey in infrastructure
    automation and management. Expand the playbook’s content to build use cases suitable
    for your cloud and virtualization environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to help non-platform teams use Ansible
    for their automation use cases, such as building and managing databases using
    Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '*What is Infrastructure as Code (IaC)?*: [https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac](https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible VMware Guide*: [https://docs.ansible.com/ansible/2.5/scenario_guides/guide_vmware.xhtml](https://docs.ansible.com/ansible/2.5/scenario_guides/guide_vmware.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*VMware API and SDK Documentation*: [https://www.vmware.com/support/pubs/sdk_pubs.xhtml](https://www.vmware.com/support/pubs/sdk_pubs.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introducing the VMware REST Ansible Content Collection*: [https://www.ansible.com/blog/introducing-the-vmware-rest-ansible-content-collection](https://www.ansible.com/blog/introducing-the-vmware-rest-ansible-content-collection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible Amazon Web Services Guide*: [https://docs.ansible.com/ansible/latest/collections/amazon/aws/docsite/guide_aws.xhtml](https://docs.ansible.com/ansible/latest/collections/amazon/aws/docsite/guide_aws.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
