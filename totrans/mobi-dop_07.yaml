- en: CI/CD for Android with Visual Studio Team Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we learned about continuous integration and various tools
    to implement it in a development life cycle. We also learned in detail about continuous
    integration using TeamCity as a CI tool.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go into more detail about continuous integration and
    continuous delivery using **Visual Studio Team Services** (**VSTS**) as a tool.
    We will be discussing all the steps that you require to set up and put VSTS to
    work.
  prefs: []
  type: TYPE_NORMAL
- en: VSTS is another tool provided by Microsoft for DevOps that works with almost
    any third-party DevOps chain tool in the market. It has great integration with
    GitHub, Jenkins, Azure, and many other similar tools for your continuous integration
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an account in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the code from GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the build definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queue build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building with every commit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an account in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with VSTS, head to your web browser and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Microsoft''s website at this URL: [https://www.visualstudio.com/team-services/](https://www.visualstudio.com/team-services/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the website, you''ll see a Get started for free button, as shown in the
    next screenshot. Click on that button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/179a5477-0975-4b44-a2ea-556dbcec320b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the button will take you to the signup page, where you can log
    in using your existing Microsoft account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d8f82e9a-1a23-44e5-b68d-7367fcc2f003.png)'
  prefs: []
  type: TYPE_IMG
- en: If you don't already have a Microsoft account, then you can click on the Create
    account link on the same page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clicking on the Create account link will take you to the next page, where you
    can choose a username and password for your account and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21d17e0c-d37d-4ed5-9622-5e011d185fab.png)'
  prefs: []
  type: TYPE_IMG
- en: It might ask you to verify that you are an actual person creating an account,
    so after completing that step, your account should be ready to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After completing the signup form, the next step is to set up the URL to host
    your Team Services project at [https://www.visualstudio.com/](https://www.visualstudio.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, you give the URL for the project hosting and select the way you will
    be managing your code''s source version (that is, TFS or Git):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7cc77b55-8671-4d51-8a6a-e43c3356a16a.png)'
  prefs: []
  type: TYPE_IMG
- en: We will be using Git as our source code repository to manage our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Git as the code managing platform and click on the Continue button, and
    the signup process is done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting the code from GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that your account is created, it''s time to import your code into VSTS:'
  prefs: []
  type: TYPE_NORMAL
- en: On the next page, you'll see different options to integrate your project from
    your computer, using the command line and even by initializing a new Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We already have our project synced on Git, so we''ll be choosing the option
    to import a project from Git, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/40dcb7cd-5638-4175-96e9-66288b0ad16d.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the Import button will open a small popup window where you can choose
    either Git or TFS as your source type and provide your repository URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Please note that it will require you to give this application permission to
    access using your Git credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ecac0952-4fef-474d-a21e-8812ab05fba3.png)'
  prefs: []
  type: TYPE_IMG
- en: After providing the repository URL and login information, click on the Import
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will import your project from Git into the VSTS server, where you then
    can manage all the processes related to the DevOps life cycle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once your code is imported, you''ll be able to see all the directories and
    code in the code section of VSTS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/09811256-637b-417e-9777-0f36044514e1.png)'
  prefs: []
  type: TYPE_IMG
- en: So now that your code is also imported into VSTS, it is time to create a build
    for the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the build definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating the build definition in VSTS is a straightforward and simple process.
    It provides you with templates for various tools to help you create build definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to start creating the build definitions for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the code page, click on the Set up build button, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/808671df-20f0-4535-8134-0ebe7a27617a.png)'
  prefs: []
  type: TYPE_IMG
- en: This will take you to the next page where you can select a predefined VSTS template
    to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, select GitHub or your choice of any other source versioning
    the build would be connecting from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give a connection name in the input box provided and click on the Authorize
    using OAuth button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a7aa725-8e4a-436a-8779-804bd036399c.png)'
  prefs: []
  type: TYPE_IMG
- en: A pop-up window will open; you might need to unblock the popup from the VSTS
    website to see it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Authorize and give VSTS OAuth permissions to access your GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/954645a8-4edf-43f0-a6f4-9db2610b4369.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Authorize vsonline button to authorize and give permissions to
    access the account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once done, on the next step it will ask you to select the project repository
    and branch to take the code from:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c72a8ace-07ad-45f2-b4d9-a99a4be7e590.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the project repository from the repository dropdown provided, and then
    the branch accordingly, and click on the Continue button, as shown in the preceding
    screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this example, we are following up with the same project we developed and
    used as an example in previous projects, which was the Android app we developed
    with Xamarin.Android.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, because VSTS and Xamarin are both Microsoft tools, they have great compatibility
    and built-in templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, on the next page, scroll down the list of templates until you see the Xamarin.Android
    template and apply that template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/642324c3-2a50-446d-aa40-2a19b4786664.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that a template is applied, it's time to configure the build definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the build definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'VSTS has great support for the Xamarin application build process, and automatically
    takes all the steps you might require for the project''s build configuration.
    But, you might need to provide some extra information for some of the build steps
    involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the build steps already in place on the next page in VSTS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/26bd9280-729f-4b0a-b35b-d4d0228586c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's stop here for a second and look at the build steps provided by VSTS, all
    automatically set up for you to just start the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s a good idea to have a brief look at the steps involved, starting from
    Nuget package restore, to building the packages, and finally to publishing them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b15dc618-518c-42b4-a445-c30f2235a04c.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we need to provide some information related to our Xamarin Test Cloud account
    so VSTS can run Test Cloud tests there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Test step on the left-hand side of the screen. It will highlight
    the required information fields on the right-hand side of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2675611a-88af-46af-a3fb-410d1c20bcd6.png)'
  prefs: []
  type: TYPE_IMG
- en: You'll have to use the team API key from your Xamarin Test Cloud account and
    the user email under which you would like the build to run, and also the devices
    you would like the tests to run on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s go back and log in to Xamarin Test Cloud, then go to Account settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1bef3879-a71c-47ba-bc4f-f2995b9334b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Account settings and there you need to go to the Teams & Apps section
    to get the API and other required details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Accounts settings, click on the Teams & Apps link from the left pane
    which will open the Teams & Apps section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ae002d2-e8a7-4c36-94cb-ac995629e5ce.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, the team we had created to run the tests
    is visible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In that Teams & Apps section, there will be a link to show API key, as shown
    in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on that same link to see the API key for the team defined, and note it
    down:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b26eb3b5-6e75-487a-a2bc-d79d7283fd8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, click on the gear icon to get the team members'' details and their emails:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86c3fb35-c817-41ea-8c05-af20ca7d94d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure you note the user credentials that have all the permissions required
    to run the tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the email of the user and note it down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last value required is the devices string; this string stores information
    about the list of devices to run the Xamarin Tests on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The devices string can be found as the value of the `-devices` command line
    argument of a Test Cloud test run as described in previous chapters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b5573a4-6140-438b-8800-68887c849417.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have all the values required, let's get back to the build configuration
    steps and put the values in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Queue build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the configurations are done, and now we can save the configuration and
    queue the build:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the preceding steps are completed, click on the Save & queue button at
    the top of the build configuration page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5ecb31ca-da8f-4846-950d-d043958350e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Give your name to the build and commit comments, and click Save & queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fb06102a-297d-48ed-92d8-c3b8bdf30a32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the build is saved and queued, you''ll get a small notification, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f659a053-6dfb-40c8-add8-0f605aca0e30.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you have now successfully completed the build configuration
    and queued the build for execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Triggers - build with every commit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have covered how to configure the build steps and queue them manually.
    In continuous integration, it is important to automate the build, especially whenever
    developers check code in. This helps keep the latest build up to date with all
    the changes made and lets developers know of any issues in the build at earlier
    stages of development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps now to set up triggers and automate the build:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Triggers tab in the configurations section shown in previous steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf8d1552-875c-4de0-a79a-b25420bbd0be.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Triggers tab, in the left pane, you'll see a section for Continuous integration,
    under which you will find your repository linked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on that link to open the continuous integration section on the right-hand
    side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0141f42e-ecfa-44c3-bdb2-07909fe744d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Check the Enable continuous integration box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll notice there is one more checkbox, to Batch changes while build in progress.
    This option is useful when you have many developers frequently checking in changes
    to a repository. Checking this option will batch the new changes in the repository
    while a build is already in process, queue further changes in a batch until the
    build completes, and then queue a new build for those changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following are the integration checkboxes; you''ll see options to select
    specific branches to include in the build. You can also exclude some branches
    specifically, as per your requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/14f5cb9c-7b4c-4fa9-baae-3811d1b8ae8f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the changes are done, you can save the build definition and now the build
    is part of our continuous integration process, which will:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start building your project with every check-in or in batches, as per your configurations
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run tests on Xamarin Test Cloud
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign and zipalign the project's APK file
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish your app
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All these steps will be performed as part of your build configuration, with
    everything automated.
  prefs: []
  type: TYPE_NORMAL
- en: Now, all developers need to worry about is writing quality code, and they can
    get their code tested in real time on real devices using Microsoft's CI tools
    and get them published with every build.
  prefs: []
  type: TYPE_NORMAL
- en: This helps quality app development with quicker feedback and a continuous workflow
    between all the stages of development.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed continuous integration using VSTS, a great tool
    for CI needs if you use a lot of Microsoft tools in your development life cycle,
    especially Xamarin. We learned how to configure build steps in VSTS and integrate
    the Xamarin Test Cloud Teams API for continuous testing, and at the end, we set
    up triggers for continuous builds.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll discuss deploying and migrating your applications
    to the cloud.
  prefs: []
  type: TYPE_NORMAL
