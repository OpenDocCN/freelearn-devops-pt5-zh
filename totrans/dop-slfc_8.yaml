- en: Tracking Application Changes and the ROI of Applying DevOps to Salesforce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how we can track application changes using
    open source technologies, such as the Git source control versioning system. We
    will learn the basics of Bugzilla and how to track issues when they are reported
    by a tester or user until the fix for the issue/feature is deployed to production.
  prefs: []
  type: TYPE_NORMAL
- en: We will also see how to add some post-build steps in Jenkins to report the build
    status to Git. This will allow developers to get information about the build status
    related to every commit. We will discuss how DevOps helps any Salesforce organization
    to deliver applications faster and what the ROI is from applying DevOps to Salesforce.
  prefs: []
  type: TYPE_NORMAL
- en: How to track application changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tracking application changes without a version control system is like finding a
    needle in a haystack. We have seen how to use GitLab to track application changes
    in [Chapter 5](45e26817-986f-4fa4-a9c3-3044e7aad5da.xhtml), *Version Control*.
    Whenever bugs are reported by testers, we use a bug tracker such as Bugzilla to
    track the life cycle of a bug—from identifying it until the fix is released to
    production. When a new bug or feature is added to the bug tracker, it is assigned
    to a developer and the developer starts working on that fix or new feature. Code
    changes are tracked in Git repositories when developers commit changes to the
    respective feature branch. The develop branch commit message should contain the
    bug ID to identify the changes done with respect to a particular bug or feature.
  prefs: []
  type: TYPE_NORMAL
- en: If a new feature is added or an issue is fixed, developers can add meaningful
    commit messages to help us track changes for a new functionality. When we want
    to merge changes to develop a branch or perform cherry-picks on commits, this
    becomes easy with meaningful commit messages with a bug ID.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Bugzilla
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bugzilla bug tracking is an open source bug tracking system. Using Bugzilla,
    you can create a bug and track that bug until it is closed. Bugzilla provides
    project management and issue tracking features. Bugzilla is used to improve performance
    and scalability. Other features include an advanced query application that can
    remember your searches and integrated email capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you have to install Bugzilla on your system or server, from where you
    can access Bugzilla using a web browser. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You can install Bugzilla on a machine from [https://www.bugzilla.org/docs/4.4/en/html/installation.html](https://www.bugzilla.org/docs/4.4/en/html/installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now open Bugzilla through your browser; the screen looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/714acd78-4701-4398-94e3-1cc4b47011d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Log In and enter the credentials. Once you have logged in, the page
    will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe2d1663-d574-4c3b-8251-5914d2c4fe6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now click on User Preferences or on Administration to open the admin panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the admin panel is opened, click on Users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a10bfaf-fdc3-4a4e-8eb1-62916ad234ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next screen, click on add a new user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/997db10b-5567-4c84-9736-73d80b05462a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the Login name, Password, and Real name. Finally, click on Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9ac0f66-a604-4bb1-9ffb-45406757017c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the relevant accesses and click on Save Changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e25fa31-fccd-40fe-9d2c-9c3e05bbc332.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now click on File a Bug on the home page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9a6dd36e-a57b-4d82-b9c3-4b71b0901874.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screen, you can see the multiple fields:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Product: Git Demo Project'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reporter: ngornalli'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Component: Git Project Model'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Component Description: This component is created for Git Demo Project'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Version: 1.0'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Severity: High'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hardware: Other'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OS: Windows'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Org*: Transformer'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Type of the Ticket*: Defect'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raised By: QA'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Steps to Reproduce Issue*: Steps to reproduce issue'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Expected Result*: Expected Result'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Summary: New Defect added for Git Demo Project'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Description: Description'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Attachment: If there is any screenshot then attach it here'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1072a174-e5b6-4c14-b540-6a462ff5b625.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, click on Submit Bug.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishing a build report to Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen in [Chapter 6](c18c24e5-b3e1-467c-8e33-cc278016e0a6.xhtml),
    *Continuous Integration*, we can trigger a Jenkins job as code is pushed to Jenkins
    using a Git Webhook. Jenkins will start the build using the Ant Migration Tool
    and deploy metadata to the sandbox. However, whether the build failed or is successful
    is not shown anywhere. So we need to change the Jenkins job to deploy changes
    from Git to the sandbox. Go to the Jenkins job that you want to change and click
    on Configure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the post-build Git Publisher step to set the build status to Git commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4cf87bf-886d-4d77-8807-57a17ff24305.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In GitLab, you can view the status of the Jenkins job to check whether is successful
    or it failed. We can track each commit in Git and see if the deployment to the
    sandbox step build has passed. If we configure the Jenkins job to run automation
    test cases after deployment is done in testing the sandbox, we can get the status
    of the execution of automation test cases in Git:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/569e4ab4-2309-44e3-b00c-b58e6c1c8739.png)'
  prefs: []
  type: TYPE_IMG
- en: How DevOps helps organizations deliver quickly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Version control helps us track issues and revert changes. Differentiating between
    branches becomes easy with GitLab. If something goes wrong, finding a bug or issue
    is easy as we have all the changes tracked in Git repositories. Also, with Jenkins
    being able to retrieve metadata from the sandbox and store it in Git, it is very
    useful while taking backups. We don't need to do the same task again. We can configure
    a Jenkins job to take a backup of metadata components in Git and send a notification
    email to the respective admins.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins continuous integration server helps us to deploy changes from a
    developer's machine to the sandbox or from one sandbox to another sandbox. We
    can configure Jenkins jobs to deploy changes as soon as they are pushed to Git
    using Jenkins Webhooks. Deployment of metadata from a developer sandbox to UAT
    sandboxes can be automated and your Salesforce credentials are safely stored in
    Jenkins Credentials in secret text, which will be only used during execution of
    a Jenkins job.
  prefs: []
  type: TYPE_NORMAL
- en: Code coverage is important for improving the quality of code written by developers.
    We can make sure that standard practices are being followed while developing an
    application. Making use of Jenkins to execute Apex tests in the deployment of
    metadata to the sandbox is an easy way to ensure we have 75% code coverage as
    per the Salesforce criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Enhanced productivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we have most deployments automated using the Jenkins continuous integration
    server and all the changes being made are tracked in a source control versioning
    system such as Git, developers can spend more time on actual development tasks.
    As we have seen in [Chapter 7](95062e49-8aff-4b6f-a02d-d81ca0f7cc41.xhtml), *Continuous
    Testing*, with the help of automation testing, we can cover the testing cycle
    faster and fulfill code coverage criteria in Salesforce. Selenium makes it easy
    to automate test cases. Finding bugs in an early phase of the software development
    cycle is very important in order to make sure software is bug-free and application
    deliverables are deployed to production faster.
  prefs: []
  type: TYPE_NORMAL
- en: How to measure ROI?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applying DevOps methodologies to Salesforce using open source tools, such as
    GitLab, Jenkins, Selenium, and so on, helps organizations set up their automation
    process at minimal cost and with minimal efforts (in doing a one-time setup and
    configuration).
  prefs: []
  type: TYPE_NORMAL
- en: ROI cannot be measured as a number, but the ROI from applying DevOps can be
    measured as of the time we save in the deployment of Salesforce and the rework
    we do whenever developers accidentally overwrite each others' changes. Identifying
    issues faster with automation testing in the early stages of software development
    makes it easy to fix issues. Fixing defects in production costs us more time than
    fixing bugs early in a test or pre-production environment. Having a bug in production
    will have a business impact on our application.
  prefs: []
  type: TYPE_NORMAL
- en: The reduced time in the maintenance window when we are deploying changes to
    production and the reduced number of issues in production help us to measure the
    ROI from applying DevOps to our Salesforce organization. The release cycle can
    be reduced from weeks to days with automated test cases using Jenkins continuous
    integration.
  prefs: []
  type: TYPE_NORMAL
- en: By applying DevOps practices to a Salesforce application, we can achieve customer
    satisfaction and speed up the product delivery process. Developers need to work
    less hard at maintaining an application, focusing more on developing new features.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about tracking application changes, Bugzilla, enhancing
    productivity, and measuring ROI.
  prefs: []
  type: TYPE_NORMAL
- en: We started this book with very basic or no knowledge of DevOps practices or
    tools used in DevOps. We learned some basics about Salesforce by creating a sample
    application in Salesforce and discussed the different sandbox environments. Using
    Eclipse with Salesforce, we can integrate Git with a sandbox to achieve a source
    control version system. We learned about different deployment methods used in
    Salesforce, and we automated Salesforce deployments using the Jenkins continuous
    integration server.
  prefs: []
  type: TYPE_NORMAL
- en: We learned about setting up our own GitLab server and pushing code changes from
    a Salesforce sandbox to a GitLab repository. Implementing continuous integration
    in a Salesforce environment with the Jenkins server helps us to speed up deployment
    to UAT or another sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to automate testing for a Salesforce application with Selenium.
    We discussed Selenium record and playback with a sample Salesforce application.
    Automation testing helped us reduce the testing cycle from days to hours. We saw
    how DevOps tools can be used in a Salesforce application. You can apply the concepts
    learned in this book to any Salesforce application. Throughout this book, we tried
    to provide you with good insights into DevOps tools and step-by-step instructions
    to set up your own DevOps process with open source tools. Most of the exercises
    in this book can be followed using a free Salesforce account.
  prefs: []
  type: TYPE_NORMAL
