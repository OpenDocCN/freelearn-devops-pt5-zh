["```\n$ docker run -it --rm \\\n docker/dtr:<RELEASE> install \\\n --dtr-external-url <DTR_COMPLETE_URL>\\\n --ucp-node <UCP_NODE_TO_INSTALL> \\\n --ucp-username <UCP_USERNAME> \\\n --ucp-password <UCP_PASSWORD> \\\n --ucp-url <UCP_COMPLETE_URL> \\\n --ucp-ca \"$(curl -s -k <UCP_COMPLETE_URL>/ca)\"\n\nINFO[0000] Beginning Docker Trusted Registry installation \nINFO[0000] Validating UCP cert \nINFO[0000] Connecting to UCP \nINFO[0000] health checking ucp \nINFO[0000] The UCP cluster contains the following nodes without port conflicts: <LIST_OF_UCP_CLUSTER_NODES>\nINFO[0000] Searching containers in UCP for DTR replicas \n...\n...\nINFO[0000] Creating network: dtr-ol \nINFO[0000] Connecting to network: dtr-ol \nINFO[0000] Waiting for phase2 container to be known to the Docker daemon \nINFO[0001] Setting up replica volumes... \n...\n...\nINFO[0011] License config copied from UCP. \nINFO[0011] Migrating db... \n...\n...\nINFO[0004] Migrated database from version 0 to 10 \nINFO[0016] Starting all containers... \n...\n...\nINFO[0114] Successfully registered dtr with UCP \nINFO[0114] Installation is complete \nINFO[0114] Replica ID is set to: c8a9ec361fde \nINFO[0114] You can use flag '--existing-replica-id c8a9ec361fde' when joining other replicas to your Docker Trusted Registry Cluster \n```", "```\n$ sudo mount -t nfs 10.10.10.11:/data /mnt\n$ sudo cp -pR /var/lib/docker/volumes/dtr-registry-c8a9ec361fde/_data/* /mnt/\n```", "```\n$ docker container run --rm -it docker/dtr:<RELEASE> reconfigure \\\n--existing-replica-id <FIRST_REPLICA'S_ID> \\\n--nfs-storage-url nfs://<NFS_SERVER>/<NFS_SHARED_DIR> \\\n--storage-migrated \\\n--ucp-username <UCP_USERNAME> \\\n--ucp-password <UCP_PASSWORD> \\\n--ucp-url <UCP_COMPLETE_URL> \\\n--ucp-insecure-tls\nINFO[0000] Starting phase1 reconfigure\nINFO[0000] Validating UCP cert\nINFO[0000] Connecting to UCP\nINFO[0000] health checking ucp\nINFO[0000] Searching containers in UCP for DTR replicas\nINFO[0000] Cluster reconfiguration will occur on all DTR replicas\n...\n...\nINFO[0000] Connecting to network: dtr-ol\nINFO[0000] Waiting for phase2 container to be known to the Docker daemon\nINFO[0000] Establishing connection with Rethinkdb\n...\n...\nINFO[0003] Getting container configuration and starting containers...\nINFO[0003] Waiting for database to stabilize for up to 600 seconds before attempting to reconfigure replica c8a9ec361fde\nINFO[0003] Establishing connection with Rethinkdb\nINFO[0003] Configuring NFS\n...\n... INFO[0004] Recreating volume node4/dtr-registry-nfs-c8a9ec361fde\n...\n... INFO[0009] Recreating dtr-registry-c8a9ec361fde...\nINFO[0013] Recreating dtr-garant-c8a9ec361fde...\nINFO[0017] Changing dtr-api-c8a9ec361fde mounts from [dtr-ca-c8a9ec361fde:/ca dtr-registry-c8a9ec361fde:/storage] to [dtr-ca-c8a9ec361fde:/ca dtr-registry-nfs-c8a9ec361fde:/storage]\n...\n... INFO[0038] Recreating dtr-scanningstore-c8a9ec361fde...\nINFO[0042] Trying to get the kv store connection back after reconfigure\nINFO[0042] Establishing connection with Rethinkdb\nINFO[0042] Verifying auth settings...\nINFO[0042] Successfully registered dtr with UCP\nINFO[0042] The `--storage-migrated` flag is set. Not erasing tags.\n```", "```\n$ docker container run --rm -it docker/dtr:<RELEASE> \\\n join \\\n --ucp-node <NEW_UCP_NODE> \\\n --ucp-username <UCP_USERNAME> \\\n --ucp-password <UCP_PASSWORD> \\\n --ucp-url <UCP_COMPLETE_URL> \\\n --ucp-insecure-tls \\\n --existing-replica-id c8a9ec361fde\n INFO[0000] Beginning Docker Trusted Registry replica join\n INFO[0000] Validating UCP cert\n INFO[0000] Connecting to UCP\n INFO[0000] health checking ucp\n INFO[0000] The UCP cluster contains the following nodes without port conflicts: <UCP_NODES_AVAILABLE>\n INFO[0000] Searching containers in UCP for DTR replicas\n INFO[0001] Searching containers in UCP for DTR replicas\n INFO[0001] verifying [80 443] ports on node3\n INFO[0012] Waiting for running dtr-phase2 container to finish\n INFO[0012] starting phase 2\n INFO[0000] Validating UCP cert\n ...\n ...\n INFO[0057] Recreating dtr-scanningstore-c8a9ec361fde...\n INFO[0061] Configuring NFS\n INFO[0062] Using NFS storage: nfs://10.10.10.11/data\n INFO[0062] Using NFS options:\n ...\n ...\nINFO[0176] Transferring data to new replica: cc0509711d05\n INFO[0000] Establishing connection with Rethinkdb\n ...\n ... INFO[0183] Database successfully copied\n INFO[0183] Join is complete\n INFO[0183] Replica ID is set to: cc0509711d05\n INFO[0183] There are currently 2 replicas in your Docker Trusted Registry cluster\n INFO[0183] You currently have an even number of replicas which can impact cluster availability\n INFO[0183] It is recommended that you have 3, 5 or 7 replicas in your cluster\n```", "```\nError response from daemon: Get https://<DTR_FQDN>[:DTR_PORT]/v2/: x509: certificate signed by unknown authority.\n```", "```\nCA updating procedure on Ubuntu/Debian nodes: $ openssl s_client -connect <DTR_FQDN>:<DTR_PORT> -showcerts </dev/null 2>/dev/null | openssl x509 -outform PEM | sudo tee /usr/local/share/ca-certificates/<DTR_FQDN>.crt\n$ sudo update-ca-certificates\n$ sudo systemctl restart docker\n\nCA updating procedure on Red Hat/CenOS nodes: $ openssl s_client -connect <DTR_FQDN>:<DTR_PORT> -showcerts </dev/null 2>/dev/null | openssl x509 -outform PEM | sudo tee /etc/pki/ca-trust/source/anchors/<DTR_FQDN>.crt\n$ sudo update-ca-trust\n$ sudo systemctl restart docker\n```", "```\n$ docker trust key load --name <MY_USERNAME> key.pem\nLoading key from \"key.pem\"...\nEnter passphrase for new <MY_USERNAME> key with ID ....:\nRepeat passphrase for new <MY_USERNAME> key with ID ....:\nSuccessfully imported key from key.pem\n```", "```\n$ docker trust signer add \\\n--key cert.pem \\\n<MY_USERNAME> <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY]\nAdding signer \"<MY_USERNAME>\" to <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY]...\nInitializing signed repository for <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY]...\nEnter passphrase for root key with ID ....:\nEnter passphrase for new repository key with ID ....:\nRepeat passphrase for new repository key with ID .....:\nSuccessfully initialized \"<DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY]\"\nSuccessfully added signer: <MY_USERNAME> to <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY]\n```", "```\n$ docker tag alpine <DTR_FQDN>[:DTR_PORT]/myorganization/alpine:signed-test\n$ docker trust sign <DTR_FQDN>[:DTR_PORT]/myorganization/alpine:signed-test\nSigning and pushing trust data for local image <DTR_FQDN>[:DTR_PORT]/myorganization/alpine:signed-test, may overwrite remote trust data\nThe push refers to repository [<DTR_FQDN>[:DTR_PORT]/myorganization/alpine]\nbeee9f30bc1f: Layer already exists \nsigned-test: digest: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221 size: 528\nSigning and pushing trust metadata\nEnter passphrase for <MY_USERNAME> key with ID c7690cd: \nSuccessfully signed <DTR_FQDN>[:DTR_PORT]/myorganization/alpine:signed-test\n```", "```\n$ docker push <DTR_FQDN>[:DTR_PORT]/myorganization/alpine:signed-test\nThe push refers to repository [192.168.56.14/myorganization/alpine-base]\nbeee9f30bc1f: Layer already exists \nsigned-test: digest: sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221 size: 528\n```", "```\n$ docker trust inspect --pretty <DTR_FQDN>[:DTR_PORT]/myorganization/alpine:signed-test\n\nSignatures for <DTR_FQDN>[:DTR_PORT]/myorganization/alpine:signed-test\n\nSIGNED TAG DIGEST SIGNERS \nsigned-test cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221 <MY_USERNAME>\n\nList of signers and their keys for <DTR_FQDN>[:DTR_PORT]/myorganization/alpine:signed-test\n\nSIGNER KEYS\n<MY_USERNAME> c7690cd8374b\n\nAdministrative keys for <DTR_FQDN>[:DTR_PORT]/myorganization/alpine:signed-test\n\nRepository Key: 63116fb0f440e1d862e0d2cae8552ab2bcc5a332c26b553d9bfa0a856f15fe91\n Root Key: 69129c50992ecd90cd5be11e3a379f63071c1ffab20d99c45e1c1fa92bfee6ce\n```", "```\n$ docker trust key load --name <MY_TEAMMATE_USERNAME> key.pem\nLoading key from \"key.pem\"...\nEnter passphrase for new <MY_TEAMMATE_USERNAME> key with ID ......:\nRepeat passphrase for new <MY_TEAMMATE_USERNAME> key with ID .....:\nSuccessfully imported key from key.pem\n```", "```\n$ docker trust signer add --key cert.pem <MY_TEAMMATE_USERNAME> <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY]\nAdding signer \"<MY_TEAMMATE_USERNAME>\" to  <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY]...\nEnter passphrase for repository key with ID ......:\nSuccessfully added signer: <MY_TEAMMATE_USERNAME> to <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY]\n```", "```\n$ docker trust sign <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY][:TAG]\nSigning and pushing trust metadata for <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY][:TAG]\nExisting signatures for tag 1 digest 5b49c8e2c890fbb0a35f6....................\nfrom:\n<MY_TEAMMATE_USERNAME>\nEnter passphrase for <MY_TEAMMATE_USERNAME> key with ID ...:\nEnter passphrase for <MY_USERNAME> key with ID ...:\nSuccessfully signed <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY][:TAG]\n```", "```\n$ docker trust inspect --pretty <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY][:TAG]\nSignatures for <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY][:TAG]\nSIGNED TAG DIGEST SIGNERS\n1 5b49c8e2c890fbb0a35f6050ed3c5109c5bb47b9e774264f4f3aa85bb69e2033 <MY_TEAMMATE_USERNAME>, <MY_USERNAME>\nList of signers and their keys for <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY][:TAG]\nSIGNER KEYS\n<MY_USERNAME> 927f30366699\n<MY_TEAMMATE_USERNAME> 5ac7d9af7222\nAdministrative keys for <DTR_FQDN>[:DTR_PORT][/ORGANIZATION][/USERNAME][/REPOSITORY][:TAG]\nRepository Key: e0d15a24b741ab049470298734397afbea539400510cb30d3b996540b4a2506b\n Root Key: b74854cb27cc25220ede4b08028967d1c6e297a759a6939dfef1ea72fbdd7b9a\n```", "```\n$ docker container run \\\n--rm \\\n--interactive \\\n--log-driver none \\\n--ucp-username <UCP_USERNAME> \\\n--ucp-password <UCP_PASSWORD> \\\n--ucp-url <UCP_COMPLETE_URL> \\\n--ucp-ca \"$(curl -s -k <UCP_COMPLETE_URL>/ca)\" \\\n--existing-replica-id <REPLICA_ID> > dtr-backup.tar.gz\n```", "```\n$ docker container run --rm --ti docker/dtr:<RELEASE> restore \\\n --ucp-insecure-tls \\\n --ucp-url <UCP_COMPLETE_URL> \\\n --ucp-username <UCP_USERNAME> \\\n --ucp-password <UCP_PASSWORD> < PREVIOUS-DTR-BACKUP.tar\n```", "```\n$ curl -ks https://<DTR_COMPLETE_URL>/_ping\n{\"Error\":\"\",\"Healthy\":true}\n```", "```\n$ docker container run --rm --ti docker/dtr:<RELEASE> remove \\\n --existing-replica-id <HEALTHY_REPLICA_ID> \\\n --replica-ids <HEALTHY_REPLICA_ID> \\\n --ucp-insecure-tls \\\n --ucp-url <UCP_COMPLETE_URL> \\\n --ucp-username <UCP_USERNAME> \\\n --ucp-password <UCP_PASSWORD>\n```", "```\n$ docker container run --rm --ti docker/dtr:<RELEASE> join \\\n --existing-replica-id <HEALTHY_REPLICA_ID> \\\n --ucp-insecure-tls \\\n --ucp-url <UCP_COMPLETE_URL> \\\n --ucp-username <UCP_USERNAME> \\\n --ucp-password <UCP_PASSWORD>\n```", "```\n$ docker container run --rm --ti docker/dtr:<RELEASE> emergency-repair \\\n --existing-replica-id <HEALTHY_REPLICA_ID> \\\n --ucp-insecure-tls \\\n --ucp-url <UCP_COMPLETE_URL> \\\n --ucp-username <UCP_USERNAME> \\\n --ucp-password <UCP_PASSWORD>\n```", "```\n$ docker container run --rm --ti docker/dtr:<RELEASE> restore \\\n --ucp-insecure-tls \\\n --ucp-url <UCP_COMPLETE_URL> \\\n --ucp-username <UCP_USERNAME> \\\n --ucp-password <UCP_PASSWORD> < PREVIOUS-DTR-BACKUP.tar\n```"]