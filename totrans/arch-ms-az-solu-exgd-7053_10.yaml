- en: Securing Your Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered the securing your resources objective. We
    covered how to design solutions using Azure Active Directory, Azure B2B, and more.
    We also covered when to use these different Azure services.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover how to design data security solutions for Azure
    services, such as using Azure Storage Encryption, Azure Disk Encryption, and Azure
    Key Vault.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will know how to secure your data using the
    different security features in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Key Vault
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Storage Encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Disk Encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure SQL Database Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure AD Managed Service Identity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter uses the following tools for the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure PowerShell: [https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps?view=azurermps-5.1.1](https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps?view=azurermps-5.1.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The source code for this chapter can be downloaded from the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%2010](https://github.com/SjoukjeZaal/AzureArchitectureBook/tree/master/Chapter%2010)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Key Vault
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can store cryptographic keys and secrets in Azure Key Vault, which can be
    used by various Azure services and custom applications. Azure uses it for storing
    keys for Azure Storage Service Encryptions and Azure Disk Encryption, which are
    covered later in this chapter. However, for instance, you can store your App client
    ID and secret in there as well and retrieve this inside your custom application.
    This way, you don't have to store these IDs and secrets in your web.config anymore,
    and they can be managed from one place, where it is secured and protected, inside
    the Azure Portal. You can store certificates and other authentication keys in
    there as well, and it offers a monitoring solution for key usage. Azure Key Vault
    is integrated with Azure AD, so you can set access policies on different users
    and groups to access the keys that are stored in there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Key Vault comes in two service tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard**: This offers Geographic scaling and available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium**:This offers Geo-availability and support for Hardware Security
    Modules (HSMs), by providing backups for HSM keys. HSMs are special computers
    that are only used for cryptographic operations. Handling this on the hardware
    itself offers better performance and security. The keys and secrets are encrypted
    in Azure Key Vault with adding some extra properties, which makes sure that it
    can only be used by that particular HSM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Azure Key Vault in the Azure Portal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create an Azure Key Vault Service in the Azure Portal and add a key, secret,
    and certificate to it, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Azure Portal by opening [https://portal.azure.com/](https://portal.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on New and type `Key Vault` in the search bar. Create a new Key Vault:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bec879c9-902f-4e72-8d48-b3b4b8717fba.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new Azure Key Vault
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following settings and click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44766a7d-96cf-4ae3-b33f-932255c26a7e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding Azure Key Vault settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Key Vault is created, you can add a key and secret from the left menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07f619fa-5a9c-4e3d-a5a1-099a463ee091.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Key Vault settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Keys and then on Generate/Import.Here, you can set a number of settings,
    such as the key type and key size. Add the following settings and click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef02e109-5be9-4809-a1e2-b6987b6dd54a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding Key
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on the Key and go to the properties of it, you can see that you
    can use this key for a number of operations; you can Encrypt, Decrypt, Sign, and
    Verify data, or you can protect another key using the Wrap Key and Unwrap Key
    operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a02c646-2ed6-44f3-8fad-7b120c5318f9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Key properties
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a secret, click on Secretin the left menu and click on Generate/Import. For
    instance, you can add an App key and an App secret to this. Add the following
    settings and click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6deba8d4-ab30-423e-9f4c-f837d39465b1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add Secret
  prefs: []
  type: TYPE_NORMAL
- en: 'To create or upload a certificate, click on **Certificate**in the left menu
    and click on Generate/Import. You can add Certificate Authorities in here as well
    and let them issue the certificate. We are now creating a Self-Signed certificate
    for this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ce664819-91b9-41ab-baf5-6d4f7e5599e0.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating Certificate
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create.It may take some time before the certificate is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure Key Vault secrets in ARM templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides leveraging the Azure Key Vault in your custom applications, you can
    also use secrets in ARM templates. You can add the secrets to the parameters JSON
    file. See the following example to see what your parameter will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This should give you an impression of how to embed secrets in your ARM templates.
    For a complete tutorial about how to create ARM templates, you can refer to the
    following article: [https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-keyvault-parameter](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-keyvault-parameter).
  prefs: []
  type: TYPE_NORMAL
- en: Azure Storage Service Encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Storage provides encryption for data at rest by default using Azure Storage
    Service Encryption (SSE). Data gets secured when it is in transit between the
    Application and Azure using HTTPS, and it gets encrypted when it is written to
    the storage account using 256-bit AES encryption. You can use SMB 3.0 or a VPN
    connection for safely transferring the data to Azure as well. Once the data is
    accessed again, it get's decrypted, and it is sent back over HTTPS. Azure manages
    the encryption storage keys inside Azure Key Vault automatically. SSE is used
    for Table, File, Queue, and Blob Storage, and SSE is available for the Standard
    and Premium pricing plans, for all redundancy levels, and for all regions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set encryption for your storage account in the Azure Portal, PowerShell,
    CLI, the REST API, and the Azure Storage SDK. It is enabled by default, so you
    don''t have to set this in your PowerShell scripts manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/536f8280-9eaf-4fd6-a7bb-3b79e246ab50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Azure Storage Service Encryption settings
  prefs: []
  type: TYPE_NORMAL
- en: You can use client-side encryption in your custom code as well. The Azure Storage
    Client Library for .NET supports this. This also works in conjunction with the
    Azure Key Vault. The SDK creates a Content Encryption Key (CEK), which is used
    to encrypt the data before it is sent to the storage account. The encryption key
    is then stored in the Azure Key Vault by default, but you can use a custom provider
    as well. Using client-side encryption will encrypt your data before it is sent
    to Azure, and at the moment that it is stored inside the storage account.
  prefs: []
  type: TYPE_NORMAL
- en: SSE has one limitation, that is, only the data that is created when encryption
    is turned on will get encrypted. So, if you have disabled encryption for your
    storage account at some point, data that is stored inside the storage account
    is not encrypted anymore. When you decide to enable encryption again, the data
    that was stored earlier does not get encrypted automatically, as data is only
    encrypted at the time of storing the data. You have to remove and upload this
    data again to get it encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Disk Encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Disk Encryption encrypts Windows and Linux VM disks. For Windows disks,
    it uses Bitlocker, and for Linux, dm-crypt is used, which are both industry standards.
    Azure Key Vault is used to manage the encryption keys, just like Azure Storage
    Encryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'For all VM types, Azure Disk Encryption is available in all Azure regions and
    can be set using PowerShell. You can use the following commands to set the encryption:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If necessary, select the right subscription:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using the Azure Key Vault to store the encryption keys, which we created
    earlier. We are using the VM that was created in the first chapter here as well
    (make sure that the VM is running; otherwise, you get an error running the script).
    Both are created in the same Resource Group. So, fill in the Key Vault name, the
    Resource Group of the Key Vault, and the VM and encrypt the VM. It uses an App
    in Azure AD, which is used to write the secrets in the Key Vault. You need to
    create the app first and replace the App ID and secret in the script. It may take
    some time before it is fully encrypted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Azure SQL Database Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure SQL Database also offers various features for data security. It offers
    security for data in transit, data in rest, and data in use. To accomplish this,
    it is using the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTPS**: This offers security for data in transit. Data is transferred using
    a secure connection over HTTPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transparent Data Encryption**: This offers security for data at rest. It
    performs real-time encryption and decryption of the database, backup files, and
    logs. This is used for Azure Data Warehouse as well. It is using a database encryption
    key that is stored by Azure by default, but can be stored in Azure Key Vault as
    well. Newly created databases are encrypted by default. You can disable and enable
    the encryption inside the settings in the Azure Portal, PowerShell, and the REST
    API:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/536343af-d967-4bcc-940c-3ec1b250056b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Transparent Data Encryption in the Azure Portal
  prefs: []
  type: TYPE_NORMAL
- en: '**Always Encrypted**:This offers security for data in use. It offers encryption
    for confidential data inside the database. For instance, social security numbers
    or credit card numbers are stored encrypted in the database and are decrypted
    inside the application for those who have permission to access it. You can enable **Always
    Encrypted** for columns in the database using SQL Server Management Studio or
    PowerShell. To encrypt sensitive data from the application, you can use the .NET
    Framework Data Provider for SQL Server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Active Directory Managed Service Identity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Active Directory Managed Service Identity is, by the time of writing this
    book, still in preview. It offers a managed identity for all resources in Azure
    that are using Azure Active Directory.
  prefs: []
  type: TYPE_NORMAL
- en: When you enable MSI on your Azure resource, such as an Azure Virtual Machine,
    Azure Function, or App, Azure will create a Service Principal and stores the credentials
    of that Service Principal on to the Azure resource itself. When it is time to
    authenticate, an MSI endpoint is called, passing your current Azure AD credentials
    and a reference to the specific resource. MSI then retrieves the stored credentials
    from the Azure resource, passes it to Azure AD, and retrieves an access token
    that can be used to authenticate to the Azure resource or service.
  prefs: []
  type: TYPE_NORMAL
- en: You should note that the Service Principal is only known inside the boundaries
    of the specific Azure resource where it is stored. If it needs permissions toward
    other resources as well, you should assign the appropriate role using **Role-Based
    Access Control** (**RBAC**) in Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can enable MSI for your Azure resources in the Azure Portal, PowerShell,
    CLI, and ARM templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d749790f-dc19-4258-ac00-4c005e8219b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Managed Service Identity Settings for an App Service
  prefs: []
  type: TYPE_NORMAL
- en: From your custom code, you can call the MSI endpoint to get an access token
    to authenticate the Azure resource as well. For .NET applications, you can use
    the `Microsoft.Azure.Services.AppAuthentication` library to accomplish this. You
    can do this by calling the REST API as well, but then you have to create the request
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to the following GitHub page at [https://github.com/Azure-Samples/app-service-msi-keyvault-dotnet](https://github.com/Azure-Samples/app-service-msi-keyvault-dotnet)
    for an example of an application that uses MSI.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how to secure your data using the different services
    that Azure provides. We covered Azure Key Vault, Azure Storage Service Encryption, Azure
    Disk Encryption, and more. Now you should know when and how to use these technologies
    in your solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will be the last chapter on this objective, *Governance and
    Policies*.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Answer the following questions to test your knowledge of the information in
    this chapter. You can find the answers in the *Assessments* section at the end
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: You want to add an additional layer of security to your applications. Credit
    card numbers need to be stored encrypted inside Azure SQL Database. Should you
    use Data Masking?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are developing a custom application and don't want to add the App ID and
    App Secret to your web.config. Can you store these credentials in the Azure Key
    Vault and retrieve them dynamically when the application is executed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Does Azure Disk Encryption encrypt data at rest and data in transit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check the following links for more information about the topics that
    were covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key Vault Documentation**: [https://docs.microsoft.com/en-us/azure/key-vault/](https://docs.microsoft.com/en-us/azure/key-vault/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Azure Key Vault to pass secure parameter value during deployment**: [https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-keyvault-parameter](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-keyvault-parameter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Azure Key Vault to protect application secrets**: [https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/key-vault](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/key-vault)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get started with Azure Key Vault certificates**: [https://blogs.technet.microsoft.com/kv/2016/09/26/get-started-with-azure-key-vault-certificates/](https://blogs.technet.microsoft.com/kv/2016/09/26/get-started-with-azure-key-vault-certificates/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Storage Service Encryption for Data at Rest**: [https://docs.microsoft.com/en-us/azure/storage/common/storage-service-encryption](https://docs.microsoft.com/en-us/azure/storage/common/storage-service-encryption)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Securing your SQL Database**: [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-security-overview](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-security-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Always Encrypted**: [https://docs.microsoft.com/en-us/sql/relational-databases/security/encryption/always-encrypted-database-engine](https://docs.microsoft.com/en-us/sql/relational-databases/security/encryption/always-encrypted-database-engine)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managed Service Identity (MSI) for Azure resources**: [https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/overview](https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
