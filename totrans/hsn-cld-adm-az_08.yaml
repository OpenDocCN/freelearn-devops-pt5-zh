- en: Azure Active Directory - Identity in the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already have applications and data in Azure, and the connection between our
    local network and Azure is up and running. But what about authentication and authorization?
    How can we manage permissions and access for our users? The answer to all these
    questions is an **Azure Active Directory** (**AAD**) that allows us to set up
    a cloud-based identity authentication which, along with **Azure role-based access
    control** (**RBAC**), allows us to authenticate users and allow them access to
    specific resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The Azure Active Directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syncing local AD with AAD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing users and applications in AAD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you''ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A local server running a Windows Server 2012 R2 or later, with the domain controller
    role installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure Active Directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AAD is a cloud-based directory and identity management service that provides application
    access management and identity protection. It's often referred to as IaaS.
  prefs: []
  type: TYPE_NORMAL
- en: We already mentioned this, but let's review it anyway. AAD is at the top level
    of the Azure management chain and it's directly tied to the tenant. Under the
    tenant, we can have multiple subscriptions, under subscriptions multiple resource
    groups, and under resource groups multiple resources.
  prefs: []
  type: TYPE_NORMAL
- en: A single account can have access to multiple tenants but each tenant is isolated.
    When a user signs in, the default directory and tenant is selected. Only resources
    that are under subscriptions under that tenant are available. In order to manage
    resources in another tenant, we must switch the directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'AAD comes in four tiers:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Active Directory Free
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Active Directory Basic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Active Directory Premium P1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Active Directory Premium P2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Active Directory Basic offers cloud-centric application access and self-service
    identity management solutions with group-based access management, self-service
    password reset for cloud applications, and the AAD Application Proxy.
  prefs: []
  type: TYPE_NORMAL
- en: The premium tiers offer additional features and enterprise-grade management
    tools such as dynamic groups, self-service group management, and Microsoft identity
    management (P1) or identity protection and privileged identity management (P2).
    Azure Active Directory Premium P2 contains all the features of P1 plus identity
    protection and privileged identity management.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are going to focus on features that are covered by the Azure Active
    Directory Free tier. The free tier is limited to 500.000 directory objects and
    supports a limited set of features but allows for user/group management, syncing
    on-premises directories to Azure, and basic security reports. It will be sufficient
    to provide general images and to introduce AAD. Including all features provided
    by all AAD tiers would probably result in a separate book and would be too much
    to cover when discussing Azure administration in general.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though AAD will probably exist if an Azure subscription is in place, let's
    start by creating a new AAD (a new tenant).
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new directory, we need to provide an Organization name, Initial
    domain name, and Country or region. Note that the initial domain name will be
    used to form an initial domain using `yourdomain.onmicrosoft.com`. The domain
    must be unique and can be customized for your custom domain later. An example
    of the settings is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb2fc123-0277-467c-a0e1-0dc7827bc2ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating a new directory takes about 1 minute. After the new directory is created,
    you need to switch directories in order to manage it. Note that the directory
    name is located under your profile. To change the directory, click on the Directory
    menu to the left of your profile and select directory from the list; it will open,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ceaefd0f-6b76-4778-9bd5-1cd01e8a842a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you switch the directory, you will be in a new tenant. If you created
    a new directory, the tenant will be empty and no subscriptions will be assigned.
    To start creating Azure resources, you must create a new subscription under this
    tenant. The only thing that you can manage in an empty tenant is AAD. The Overview
    and Manage options for Azure Active Directory Free are shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c930d86-b398-409a-ae4b-9ac76df5b692.png)'
  prefs: []
  type: TYPE_IMG
- en: Customizing your domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we need to customize is the domain name. In order to add a
    custom domain to your directory, you need to enter a Custom domain name, which
    is actually a public domain that you own. For example, I''m going to use my domain, `azuresecurity.cloud`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e2419bf-9195-4022-abc6-04c71bc738ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the custom domain is added, the domain needs to be verified, or to be
    more precise, domain ownership needs to be verified. In order to verify domain
    ownership, you need to input a TXT or MX record into your domain name register.
    An example for the TXT records is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f576a379-de3e-4363-b5dc-099ecbbf43e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you input records and press the Verify button, you might receive an error.
    DNS records may need up to 72 hours to propagate changes. The time depends on
    the DNS you''re using but usually, it doesn''t take more than 30 minutes to propagate
    changes. If the changes aren''t propagated yet, you''ll receive error, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25b828e5-7d49-47dd-a074-68e93e76e802.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After changes are propagated and verification passes, you''ll receive a message stating
    that verification has passed. You''ll be offered two additional options—make this
    domain primary, and download Azure AD Connect. We''ll ignore Azure AD Connect
    for now, but I recommend making the custom domain primary. This way, the custom
    domain will become the primary and the preferred domain suffix. Instead of the
    default username being `username@yourdomain.onmicrosoft.com`, it will become `username@yourdomain.com`.
    As in the preceding example, instead of `username@azuresecuritycloud.onmicrosoft.com`,
    the new username will be `username@azuresecurity.cloud`. A screenshot showing
    a verified custom domain is shown after you''ve done this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/007385c9-a3a1-41fb-9dd9-e05958936472.png)'
  prefs: []
  type: TYPE_IMG
- en: Syncing AAD with on-premises AD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have a new directory in place; we can start adding users and assigning them
    access rights. But there is a good chance that we already have an identity solution
    in an on-premises environment and that users already have one identity in place.
    Providing users with an additional identity can cause issues and confusion. Users
    will have problems detecting when to use which account, and if the same or a similar
    account is created, users will start typing in the password for the wrong account...
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, with AAD, we can use Azure AD Connect, and that will allow us to
    sync accounts from on-premises AD to Azure and allow users to use the same account
    for everything. This will make things easier for everyone; users will not have
    to think about which account they will use (as it's the same account) and admins
    will have less issues to resolve (less accounts to manage and less users blocking
    their account with wrong password attempts).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, with Azure AD Connect, we can implement **single sign-on** (**SSO**),
    which will allow users to access Azure and on-premises resources with the single
    sign-in process. The user is asked to enter their credentials once, and the same
    credentials are used to access everything that the user has access to.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to start syncing with the local AD, we need to go to the Azure AD
    Connect blade in AAD. Here, we can see the current sync status. If sync isn''t
    enabled yet, you will also have the download link for the Azure AD Connect client,
    as you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09e028d2-7b52-4744-b5e3-5a38ca8a4ac7.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Azure AD Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure AD Connect must be installed on a server in your on-premises environment.
    It's recommended that you use a server without a domain controller role but with
    access to a domain controller. A server with Azure AD Connect must have access
    to the internet as it will need the internet to sync information between on-premises
    AD and AAD. All traffic going over Azure AD Connect is encrypted and secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation wizard is very intuitive and explains every step of the process;
    you just need to follow the guidelines (and understand the local AD structure).
    A screenshot of the first screen in the installation process, explaining what
    the tool will do, is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/835d9445-2a76-4736-9545-884fb566c7d6.png)'
  prefs: []
  type: TYPE_IMG
- en: The first choice you need to make is whether you want to use express or custom
    settings. If you select Use express settings, all features are determined in advance.
    The installation will use the default installation path, install SQL Express,
    and use the default options for syncing, such as password hash sync, sync all
    attributes, or sync all identities across AD forest.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of the Azure AD Connect express settings is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ec86f2a-7591-4656-ab00-23d9f101ffea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you decide on using Customize options, some features such as the installation
    path, SQL Server instance, and sync groups can be set. For example, you can use
    an existing instance of SQL Server or you can choose to sync only specific user
    groups. Also, a new service account will be created for the sync process with
    express settings; in custom settings, you can choose an existing service account.
    An example of custom settings is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/baea5ed7-68d3-4092-aee3-98abc3491667.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After choosing the settings, you need to provide accounts that will enable
    sync. First, you need to provide AAD credentials that have global administration
    rights. I recommend creating a separate account for this and not tying it to your
    personal account. If an admin leaves the company, there is a good chance that
    the account will be deactivated and the sync will stop. A screenshot of entering
    an AAD account is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2029180b-4085-44ed-932d-e0589ba19bba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second account you need to provide is an AD DS enterprise administrator
    account. The same goes for the local account as for the Azure one: try using a
    service account dedicated to this service, and not a personal admin account. A
    screenshot of entering an AD DS account is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dad67ea6-da4b-4bab-af67-368202117304.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you''ll get to a screen where you need to confirm the installation.
    It will again state all of the actions that will be taken and allow you to enable
    the sync process to start right after configuration is completed. You can see
    the confirmation screen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e63181db-dd29-4a67-aa22-3d507b750adf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation completes, you will be provided with a status report
    with recommendations as to what else should be done. For example, in my domain,
    Active Directory Recycle Bin is not enabled. The process will detect this setting
    and suggest that you enable it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35e139af-958f-4527-afec-b2366ac188aa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Azure Portal, under the Azure AD Connect blade, you will see the new
    status. The link for Azure AD Connect is gone and you can see that sync is enabled
    and that the `Last sync` was `Less than 1 hour ago`. Depending on the on-premises
    environment, you can also have a federation, SSO, and some other settings. An
    example of a synced directory is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b80a15c-e239-4fcd-b66e-8c3f1cf3d818.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing AAD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the sync is completed, all synced users will be present in AAD. In AAD,
    accounts can be from two different sources: AAD and Windows Service AD. Accounts
    with a Windows Server AD source are accounts that have been synced from the local
    Active Directory. AAD accounts exist only in AAD and these accounts are created
    in Azure. There is a third type of account, that is, a Microsoft Account. These
    accounts are actually Microsoft Live Accounts that can be added to your AAD.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The USER TYPE in AAD can be a `Member` or a `Guest`. Members are accounts in
    AAD (with your domain name) and guests are accounts that are coming from other
    AAD or Microsoft Live Accounts. The only exception is that a Microsoft Live Account
    can be a member of your AAD when that account was used to create AAD. The same
    thing applies to external AAD accounts (AAD accounts from outside your tenant);
    these can only have member status when that account is used to create a new tenant.
    An example of a member list is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6eb4b5bd-7c86-48ac-a006-0a1f8133ec94.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Accounts with an AAD source are accounts that have been created in Azure. I
    mentioned that, for Azure AD Connect, you should use a service account for syncing.
    Note that this account must have a global admin role. An example of how to create
    such an account is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b08d7522-37cb-4404-ade8-5e37d6709539.png)'
  prefs: []
  type: TYPE_IMG
- en: The default user role (when creating a new AAD user) is User. This option can
    be changed to Admin during creation or after the user has been created.
  prefs: []
  type: TYPE_NORMAL
- en: Managing user options and permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the user has been created, you have the option to manage the user and
    assign different roles and permissions. Along with Manage options, you have an
    activity section where you can monitor and audit a user''s activity. An example
    of a user profile is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8eae6ec9-f1f0-4b72-bfc6-bccc5a5dac99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One of the most important management options is role assignment. Under Directory
    role, you can select multiple predefined roles that can be assigned to a user.
    Each role comes with an explanation, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6edce94-869a-43c6-a6e1-8946fdefd20a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Users can be added to groups to simplify management. For example, we can assign
    multiple roles to groups, and by assigning a user to a group, the user will automatically
    be assigned all roles assigned to the group the user is a member of. Groups can
    be assigned and synced, similar to accounts. Assigned groups originate in AAD
    and are synced using Windows Server AD. Examples of groups assigned to users in
    AAD are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c9852b6-dc73-43bc-86e6-72af93ffe32b.png)'
  prefs: []
  type: TYPE_IMG
- en: Registering an application in AAD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use AAD as an authentication method for an application, you need
    to register the application in AAD. This will create two objects in your AAD:
    an application object and a service principal.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To register a new application, we need to go to Application registration in
    the AAD blade and select New Application Registration. Information that we need
    to provide includes the application Name, Application type (Web app / API or Native),
    and Sign-on URL (I''m using localhost as an example):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e4f82d5-dc42-4d23-ac28-03785cb52e9c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating the application is only the first step as you need additional configuration
    to use this registration. In the first screen that will open after the application
    has been created, there are two very important sections: Application ID and Object
    ID. These will be used later in order to identify the application with AAD. In
    other words, the application uses the ID to contact AAD and gathers information
    on whether the user is authorized to access the application. Which ID, application,
    or object is used for authentication depends on the authentication method. An
    example of this is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ff980df-f695-4443-9d33-77891ac0e138.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to provide access to a registered application, we need to configure
    permissions and keys. To provide permissions to the application, we must set the
    required permissions under Required permissions in the Settings blade. You need
    to be very careful here as you may fall into a trap when using too many permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have often seen people giving all possible permissions to applications that
    only required basic authentication. If too many permissions are assigned, this
    can be exploited and presents high security risks. An example permissions blade
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0122f893-f74d-4b8a-baed-e1d26422c307.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have the ID and permissions in place, the last thing we are missing
    is the key. The application will use the ID and key to authorize access to AAD.
    To add a new key, we must provide a DESCRIPTION, EXPIRES (expiration time), and
    VALUE for the key. The expiration time can be in 1 year, in 2 years, or Never
    expires. I strongly recommend not using Never expires as this is another possible
    security risk. The VALUE for the key is not the actual key; this value will be
    encrypted and then a new value will be provided. After entering all values, click
    Save. An example of adding a new key is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70af1565-b4ef-47bf-ac36-483c3632f011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After saving, a new value for the key will be provided. Make sure to copy this
    value as this is the only time you will be able to collect it. Once you leave
    this blade, you will not be able to retrieve this value. An example generated
    key is shown in the following screenshot (note the warning at the top of the blade):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8eac817f-5f37-4bc6-bb92-9bf70b41a2a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Applications, using IDs and keys registered in AAD, will be able to communicate
    with AAD. These applications don't have to be hosted in Azure; this can be done
    for an on-premises application or in some other cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Note that when using Azure Web apps, you can achieve a similar goal by using
    Authentication/Authorization in the Web app blade. This option will automatically
    create all of the necessary objects and provide the Web app with an ID and key.
    Minimum permissions will be created, which is a good thing, but if you need to
    provide an application with more permissions, you need to do this manually.
  prefs: []
  type: TYPE_NORMAL
- en: We already mentioned that in this process, two objects will be created: an application
    object and a service principal.
  prefs: []
  type: TYPE_NORMAL
- en: Now would be good time to talk about the concept of multi-tenancy. Multi-tenant
    applications allow users from multiple tenants to use the same application and
    resources. For example, we can develop an application for customers and host it
    in our own subscription (and our tenant). Then, we can set access for the application
    for multiple customers and allow them to use their own AAD for authentication
    and authorization. In this concept, users coming from multiple tenants are using
    the same application and the same resources. If a multi-tenant approach is used,
    the application would have one application object in the home tenant and multiple
    service principles—one for each directory. Basically, an application object has
    a one-to-one relationship with the application and a one-to-many relationship
    with service principles.
  prefs: []
  type: TYPE_NORMAL
- en: Role-based access control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already mentioned RBAC and how it can help with the management and administration
    of cloud resources. RBAC allows you to use AAD accounts to set up different roles
    and permissions on different levels of the Azure tenant. In order to provide user
    administration rights in the tenant, we must use the AAD blade. These rights are
    not transferred further. Under the tenant, we can have multiple subscriptions,
    and subscription engagement is done separately for each subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning a user to admin (or some other role) will automatically provide them
    with the same role on all resource groups and resources under that subscription.
    If we assign a role to a user on the resource group level, the role will be automatically
    provided for all resources in that resource group. Providing a role access to
    a single resource, will give the user access only to that resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the process of assigning permissions on any of these levels (subscription,
    resource group, resource), we use the same option: Access Control (IAM). Here,
    we select a Role, assignment type, and user. Instead of users, you can also use
    groups or service principals. An example of how to add a new Contributor to your
    subscription/resource group/resource is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a98dbdd2-dbc2-4760-be23-ddd897729aca.png)'
  prefs: []
  type: TYPE_IMG
- en: You can select multiple predefined roles, create custom roles, or assign users
    to multiple roles. If a user is assigned multiple roles that are in conflict,
    the highest role will be applied.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the Reader role allows you to only see information about resources,
    and you can't make any changes. If the Reader role is assigned along with the
    Contributor role (which allows you to make changes), the Contributor role will
    be applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of the available roles is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90e9fd2c-34f4-4f82-87d0-1c7b7b84b0ad.png)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned previously, groups can be assigned roles on any level. In this
    case, all users that are members of that group will be assigned that role automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Service principles are often used to set up access for applications that need
    the ability to change or create something. For example, a service principle is
    often used to allow Azure DevOps to access your subscription during the release
    process and to create or edit resources that are needed for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AAD provides authentication and authorization in Azure. Along with RBAC, it
    allows you to control who can do what and where. These tools are your first line
    of defense when managing and securing your cloud resources.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will concentrate on what else we need to secure in Azure and how can
    we protect our data and other resources. Securing Azure is different from securing
    our on-premises infrastructure and requires a different mindset. In [Chapter 9](0e16c405-a21c-4cfc-9dc6-e20fc05db041.xhtml),
    *Azure Security and Administration*, we will discuss how to harden Azure security
    and what is available to protect us.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An AAD is on top of a...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tenant
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Subscription
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Resource group
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An account can be part of multiple tenants:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AAD can contain Microsoft Live Accounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AAD can be synced with Windows Server AD:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Azure Active Directory Free tier has a limit of...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5,000 objects
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 500,000 objects
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 5,000,000 objects
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To set up a custom domain...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can choose any domain
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You must own the domain
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You must use `.onmicrosoft.com`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To verify your custom domain, you must use...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MX records
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: TXT records
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Either
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Using RBAC, you can assign roles for...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A subscription
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A resource group
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A resource
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Roles can be assigned to...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Groups
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To set up AAD sign-in from the application, you must...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the application in AAD
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an AAD group for the application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
