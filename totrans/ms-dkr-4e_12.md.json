["```\n$ brew install minikube\n```", "```\n$ minikube version\n```", "```\n$ choco install minikube\n```", "```\n$ minikube version\n```", "```\n$ MK_VER=1.9.2-0\n$ curl -LO https://storage.googleapis.com/minikube/releases/\nlatest/minikube_$MK_VER_amd64.deb\n$ sudo dpkg -i minikube_$MK_VER _amd64.deb\n```", "```\n$ MK_VER=1.9.2-0\n$ curl -LO https://storage.googleapis.com/minikube/releases/\nlatest/minikube-$MK_VER.x86_64.rpm\nsudo rpm -ivh minikube-$MK_VER.x86_64.rpm\n```", "```\n$ curl -LO https://storage.googleapis.com/minikube/releases/\nlatest/minikube-linux-amd64\n$ sudo install minikube-Linux-amd64 /usr/local/bin/minikube\n```", "```\n$ minikube version\n```", "```\n$ minikube start\n```", "```\n$ minikube kubectl -- get pods\n```", "```\n$ kubectl get nodes\n$ kubectl get namespaces\n```", "```\n$ minikube kubectl -- get nodes\n$ minikube kubectl -- get namespaces\n$ minikube kubectl -- get --namespace kube-system pods\n```", "```\n$ minikube kubectl -- create deployment hello-node --image=k8s.\ngcr.io/echoserver:1.4\n```", "```\n$ minikube kubectl -- get deployments\n$ minikube kubectl -- get pods\n```", "```\n$ minikube kubectl -- expose deployment hello-node \n--type=LoadBalancer --port=8080\n```", "```\n$ minikube kubectl -- get services\n```", "```\n$ minikube service hello-node\n```", "```\n$ minikube kubectl -- create deployment cluster \n--image=russmckendrick/cluster:latest\n$ minikube kubectl -- expose deployment cluster \n--type=LoadBalancer --port=80\n$ minikube kubectl -- get svc,pods\n```", "```\n$ minikube service list\n```", "```\n$ minikube dashboard\n```", "```\n$ minikube dashboard\n```", "```\n$ minikube start --kubernetes-version=1.15.5 -p node2\n```", "```\n$ minikube profile list\n```", "```\n$ minikube profile\n```", "```\n$ minikube profile node2\n```", "```\n$ minikube ssh\n```", "```\n$ minikube stop\n```", "```\n$ minikube start\n```", "```\n$ minikube delete\n```", "```\n$ minikube delete --all \n```", "```\n$ brew install kind\n```", "```\n$ choco install kind\n```", "```\n$ KIND_VER=v0.8.1\n$ curl -LO https://kind.sigs.k8s.io/dl/$KIND_VER/kind-$(uname)-\namd64\n$sudo install kind-$(uname)-amd64 /usr/local/bin/kind\n```", "```\n$ kind create cluster\n```", "```\n$ kubectl --context kind-kind get nodes\n$ kubectl --context kind-kind get namespaces\n$ kubectl --context kind-kind get --namespace kube-system pods\n```", "```\n$ kubectl --context kind-kind create deployment hello-node \n--image=k8s.gcr.io/echoserver:1.4\n$ kubectl --context kind-kind get deployments\n$ kubectl --context kind-kind get pods\n$ kubectl --context kind-kind expose deployment hello-node \n--type=LoadBalancer --port=8080\n$ kubectl --context kind-kind get services\n```", "```\n$ kind delete cluster \n```", "```\n$ kind create cluster --config cluster-config.yml\n```", "```\n$ kubectl --context kind-kind apply -f https://raw.\ngithubusercontent.com/kubernetes/ingress-nginx/master/deploy/\nstatic/provider/kind/deploy.yaml\n```", "```\n$ kubectl --context kind-kind get --namespace ingress-nginx \npods\n```", "```\n$ kubectl --context kind-kind apply -f hello-node.yml\n```", "```\n$ multipass launch --name microk8s\n```", "```\n$ multipass exec microk8s -- \\\n\t/bin/bash -c 'sudo snap install microk8s --classic'\n```", "```\n$ multipass exec microk8s -- \\\n\t/bin/bash -c 'sudo microk8s status --wait-ready'\n```", "```\n$ multipass exec microk8s -- \\\n\t/bin/bash -c 'sudo microk8s enable dns ingress'\n```", "```\n$ multipass exec microk8s -- \\\n\t/bin/bash -c 'sudo microk8s.config' > microk8s.yml\n```", "```\n$ kubectl --kubeconfig=microk8s.yml get nodes\n$ kubectl --kubeconfig=microk8s.yml get namespaces\n$ kubectl --kubeconfig=microk8s.yml get --namespace kube-system \npods \n```", "```\n$ kubectl --kubeconfig=microk8s.yml apply -f https://raw.\ngithubusercontent.com/PacktPublishing/Mastering-Docker-Fourth-\nEdition/master/chapter12/kind/hello-node.yml\n```", "```\n$ multipass info microk8s\n```", "```\n$ multipass launch --name k3smaster\n$ multipass launch --name k3snode1\n$ multipass launch --name k3snode2\n```", "```\n$ multipass exec k3smaster -- \\\n\t/bin/bash -c 'curl -sfL https://get.k3s.io | K3S_KUBECONFIG_\nMODE='644' sh -'\n```", "```\n$ K3SMASTER='https://$(multipass info k3smaster | grep 'IPv4' |\n awk -F' ' '{print $2}'):6443'\n```", "```\n$ K3STOKEN='$(multipass exec k3smaster -- /bin/bash -c 'sudo \ncat /var/lib/rancher/k3s/server/node-token')'\n```", "```\n$ multipass exec k3snode1 -- \\\n\t/bin/bash -c 'curl -sfL https://get.k3s.io | K3S_\nURL=${K3SMASTER} K3S_TOKEN=${K3STOKEN} sh -'\n$ multipass exec k3snode2 -- \\\n\t/bin/bash -c 'curl -sfL https://get.k3s.io | K3S_\nURL=${K3SMASTER} K3S_TOKEN=${K3STOKEN} sh -'\n```", "```\n$ multipass exec k3smaster -- \\\n\t/bin/bash -c 'sudo cat /etc/rancher/k3s/k3s.yaml' > \n${HOME}/.kube/k3s.yml\n```", "```\n$ sed -ie s,https://127.0.0.1:6443,${K3SMASTER},g ${HOME}/.\nkube/k3s.yml\n```", "```\n$ export KUBECONFIG=${HOME}/.kube/k3s.yml\n```", "```\n$ kubectl get nodes\n$ kubectl get namespaces\n$ kubectl get --namespace kube-system pods \n```", "```\n$ kubectl create deployment hello-node --image=k8s.gcr.io/\nechoserver:1.4\n$ kubectl expose deployment hello-node --type=LoadBalancer \n--port=8080\n$ kubectl get services\n```", "```\n$ kubectl create deployment cluster --image=russmckendrick/cluster:latest\n$ kubectl expose deployment cluster --type=LoadBalancer --port=80\n$ kubectl get services\n```", "```\n$ kubectl get deployment/cluster\n$ kubectl scale --replicas=3 deployment/cluster\n$ kubectl get deployment/cluster\n```", "```\n$ GITHUB_URL=https://github.com/kubernetes/dashboard/releases\n$ VERSION_KUBE_DASHBOARD=$(curl -w '%{url_effective}' -I -L -s \n-S ${GITHUB_URL}/latest -o /dev/null | sed -e 's|.*/||')\n```", "```\n$ kubectl create -f 'https://raw.githubusercontent.com/\nkubernetes/dashboard/${VERSION_KUBE_DASHBOARD}/aio/deploy/\nrecommended.yaml'\n$ kubectl create -f 'https://raw.githubusercontent.com/\nPacktPublishing/Mastering-Docker-Fourth-Edition/master/\nchapter12/k3s/dashboard.admin-user.yml'\n$ kubectl create -f 'https://raw.githubusercontent.com/\nPacktPublishing/Mastering-Docker-Fourth-Edition/master/\nchapter12/k3s/dashboard.admin-user-role.yml'\n```", "```\n$ kubectl -n kubernetes-dashboard describe secret admin-user-\ntoken | grep ^token\n```", "```\n$ kubectl proxy\n```", "```\n$ curl -s https://raw.githubusercontent.com/rancher/k3d/master/\ninstall.sh | bash\n```", "```\n$ brew install k3d\n```", "```\n$ kubectl get nodes\n$ kubectl get namespaces\n$ kubectl cluster-info\n```", "```\n$ k3d create\n$ export KUBECONFIG='$(k3d get-kubeconfig --name='k3s-\ndefault')': This will configure your local kubectl to talk to \nthe k3s-default cluster.\n$ k3d delete\n```"]