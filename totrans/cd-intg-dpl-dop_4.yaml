- en: Chapter 4. DevOps Continuous Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：DevOps持续部署
- en: 'DevOps continuous deployment enables changes to be ported quickly from development
    to production. Infrastructure and automation play key roles for enabling continuous
    deployment. In this lesson, we will learn about configuration automation and the
    implementation of infrastructure automation (Infrastructure as Code) with tools
    such as Chef and Ansible. We will also discuss the continuous monitoring process
    with the tools, Splunk and Nagios:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps持续部署使得更改能够快速地从开发转移到生产环境。基础设施和自动化在实现持续部署中发挥着关键作用。在本课程中，我们将学习配置自动化和使用Chef、Ansible等工具实现基础设施自动化（基础设施即代码）。我们还将讨论使用Splunk和Nagios等工具进行持续监控的过程：
- en: Continuous deployment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署
- en: Chef
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef
- en: Components
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件
- en: Terminology
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 术语
- en: Architecture
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构
- en: Ansible
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible
- en: Components
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件
- en: Terminology
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 术语
- en: Architecture
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构
- en: Continuous Monitoring
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续监控
- en: Splunk
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Splunk
- en: Nagios
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nagios
- en: As we have discussed in the previous lessons, the following figure shows the
    process of continuous integration, continuous deployment, and continuous delivery
    alignment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的课程中所讨论的，以下图示展示了持续集成、持续部署和持续交付的对齐过程。
- en: '![DevOps Continuous Deployment](img/00078.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![DevOps持续部署](img/00078.jpeg)'
- en: '**Continuous Integration** (**CI**) is the process of making the development,
    unit test and build process on a continuous mode as opposed to staggered (step-by-step)
    methodology. In the CI process, every developer merges their code changes to a
    central version control system, each commit triggers automated build. So the latest
    versions are always available in the code repository and also built executable
    is from latest code.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是指将开发、单元测试和构建过程以持续模式进行，而不是以分步方式进行的过程。在CI过程中，每个开发人员将其代码更改合并到中央版本控制系统中，每次提交都会触发自动构建。因此，最新版本始终可用，并且构建的可执行文件来自最新的代码。'
- en: '**Continuous Delivery** (**CD**) is a next step to the continuous integration
    process for software engineering to produce software in short cycles of testing,
    and releasing software faster and more frequently. The automated testing process
    ensures that the software can be reliably released at any time.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）是软件工程中持续集成过程的下一步，旨在通过短周期的测试和快速、频繁地发布软件。自动化测试过程确保软件可以随时可靠地发布。'
- en: Continuous deployment is the process to minimize lead time (the elapsed time)
    between the development of new code and its availability in production for usage.
    To accomplish this, continuous deployment relies on infrastructure that automates
    various steps, after each successful code integration meeting the release criteria,
    leading to deployment, the live application is updated with new code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是指最小化新代码开发与其在生产环境中可用之间的时间差（经过的时间）。为了实现这一目标，持续部署依赖于自动化各种步骤的基础设施，每次成功的代码集成符合发布标准后，便会进行部署，实时应用程序会更新为新代码。
- en: Traditionally, a new machine is built by administrators and system engineers
    from documentation and customized scripts, and so on. Managing Infrastructure
    through manual procedures such as custom scripts, golden image configurations,
    and so on, are both time consuming and error-prone. Organizations looking for
    faster and matured deployments and concepts adopt infrastructure configuration
    automation, which means managing Infrastructure like a software code for reproducible
    results, hence it's also termed as **Infrastructure as Code**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，新机器是由管理员和系统工程师根据文档、定制脚本等构建的。通过手动过程（如定制脚本、金像配置等）管理基础设施既耗时又容易出错。希望实现更快和更成熟部署的组织采用基础设施配置自动化，这意味着像管理软件代码一样管理基础设施，从而实现可重复的结果，因此这也被称为**基础设施即代码**。
- en: Just like the SDLC process, infrastructure can be managed with similar tools
    and processes such as version control, continuous integration, code review, and
    automated testing extended to make configuration changes for infrastructure robust
    and automated.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就像软件开发生命周期（SDLC）过程一样，基础设施也可以通过类似的工具和过程进行管理，如版本控制、持续集成、代码审查和自动化测试，扩展到使基础设施配置变更更加健壮和自动化。
- en: 'The infrastructure code and configuration changes are consistently tested,
    shared, and promoted across all the environments from development to QA test systems
    and to- production more easily, rapidly, safely, and reliably with the detailed
    audit trail of changes. With infrastructure code as a service, the configuration
    of the new machines to the desired state can be written as a code to set up multiple
    machines at the same time. This scalable model is more effective by leveraging
    the elasticity of the cloud. Adopting DevOps to Infrastructure as Code str, and
    so on goes beyond simple infrastructure automation to extend multiple benefits
    as below:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施代码和配置变更将被持续测试、共享并推动到所有环境，从开发到QA测试系统，再到生产环境，过程更加轻松、迅速、安全且可靠，并带有详细的变更审计记录。通过基础设施代码作为服务，新机器的配置可以写成代码，并同时设置多个机器到期望的状态。这种可扩展的模型通过利用云的弹性变得更有效。采用DevOps的基础设施即代码，不仅限于简单的基础设施自动化，还扩展了以下多个好处：
- en: Ensure error-free automation scripts are repeatable
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保无误的自动化脚本是可重复的
- en: To be redeployed on multiple servers
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个服务器上重新部署
- en: Ability to roll back in case of issues
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出现问题时能够回滚
- en: Infrastructure code testing standards such as unit testing, functional testing,
    and integration testing can be effectively enforced
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以有效执行基础设施代码测试标准，如单元测试、功能测试和集成测试
- en: Since the documented state of the machine is maintained as code and made up-to-date,
    written documentation is avoided
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于机器的文档状态是作为代码维护并保持最新，因此避免了书面文档的使用
- en: Enable collaboration between dev and ops around infrastructure configuration
    and provisioning, infrastructure code as change management![DevOps Continuous
    Deployment](img/00079.jpeg)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进开发与运维团队在基础设施配置和供应方面的协作，以及将基础设施代码作为变更管理的一部分！[DevOps持续部署](img/00079.jpeg)
- en: We will discuss continuous deployment from the perspective of popular tool features
    and functionality listed in the preceding figure.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从流行工具功能的角度讨论持续部署，如前图所示。
- en: Chef
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chef
- en: Chef is one of the prominent configuration management and infrastructure automation
    platforms; it provides a full suite of enterprise capabilities such as workflow,
    visibility, and compliance. It enables continuous deployments for both infrastructure
    and applications from development to production. Infrastructure configuration
    automation as code is written, tested, deployed, and managed by Chef across networks
    such as the cloud, on-premises, or hybrid environments with comprehensive 24 x
    7 support services. Examples are client systems, security patches can be updated
    from master server by writing configurations as a set of instructions and executed
    on multiple nodes simultaneously.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 是一个著名的配置管理和基础设施自动化平台；它提供了完整的企业能力，如工作流、可视化和合规性。它使得从开发到生产的基础设施和应用程序的持续部署成为可能。基础设施配置自动化作为代码，可以通过Chef在云端、本地或混合环境中进行编写、测试、部署和管理，提供全面的24/7支持服务。例如，客户端系统、安全补丁可以通过从主服务器写入配置集并同时在多个节点上执行来更新。
- en: The Chef platform as shown in the following figure, supports multiple environments
    such as Amazon Web Services, Azure, VMware, OpenStack, Google Cloud, and so on.
    Platforms such as Windows, Linux, VMware, and so on, are available. All the popular
    continuous integration tools such as Bitbucket, Jenkins, GitHub, CircleCI, and
    so on, are supported for workflow integration. The runtime environment is available
    on Kubernetes, Docker, and Swarm.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，Chef 平台支持多种环境，如 Amazon Web Services、Azure、VMware、OpenStack、Google Cloud
    等。Windows、Linux、VMware 等平台都可以使用。所有流行的持续集成工具，如 Bitbucket、Jenkins、GitHub、CircleCI
    等，都支持工作流集成。运行时环境可在 Kubernetes、Docker 和 Swarm 上运行。
- en: Chef Landscape Components
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chef Landscape 组件
- en: The Chef landscape comprising various elements of Chef, including the nodes,
    the server, and the workstation along with their relationships is shown here.
    We will discuss each of the components, the terminology, and the role it plays
    in the ecosystem to enable a Chef client to execute the job assigned. Chef terminology
    resembles food preparation. Cookbooks are the formula to make food dishes and
    recipes are ingredients.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了Chef的整体环境，包括Chef的各个元素，如节点、服务器和工作站及其关系。我们将讨论每个组件、术语及其在生态系统中的作用，以便Chef客户端能够执行分配的任务。Chef的术语类似于烹饪。Cookbook（食谱）是制作菜肴的公式，而Recipe（配方）是原料。
- en: 'The components of Chef are:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 的组件包括：
- en: Chef server
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 服务器
- en: Chef client
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 客户端
- en: Chef workstation
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 工作站
- en: Chef repo
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 仓库
- en: Chef Server
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chef 服务器
- en: The Chef server is the hub for maintaining the configuration data across the
    network, storing cookbooks, applying policies to nodes, and each registered node
    detailed metadata managed by the Chef client. Chef server provides configuration
    details, such as recipes, templates, and file distributions through the Chef client
    installed on the respective nodes. Accordingly, the Chef clients implement the
    configuration on their nodes relieving the Chef server of any processing tasks.
    This model is scalable to consistently apply the configuration throughout the
    organization.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 服务器是用于维护网络中配置数据的中心，存储食谱，向节点应用策略，并由 Chef 客户端管理每个注册节点的详细元数据。Chef 服务器通过安装在各个节点上的
    Chef 客户端提供配置细节，如配方、模板和文件分发。相应地，Chef 客户端在其节点上实现配置，从而减轻了 Chef 服务器的处理任务。此模型具有可扩展性，能够在整个组织中一致地应用配置。
- en: Features of Chef Server
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chef 服务器的功能
- en: Web-enabled user interface with management console and search.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 带有管理控制台和搜索功能的 Web 用户界面
- en: 'Management console on the chef server is a web-based interface for managing
    multiple functions such as:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 服务器上的管理控制台是一个基于 Web 的界面，用于管理多个功能，如：
- en: Nodes in the network
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络中的节点
- en: Cookbooks and recipes
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 食谱和配方
- en: Roles assigned
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配的角色
- en: Data bags--JSON data stores, might include encrypted data
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据包——JSON 数据存储，可能包含加密数据
- en: Environment details
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境详情
- en: Search facility for indexed data
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于索引数据的搜索功能
- en: Administrative user accounts and data for chef server access
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于 Chef 服务器访问的管理用户帐户和数据
- en: Search functionality facilitates querying any types of data indexed on Chef
    server such as nodes, roles, platforms, environments, data bags, and so on. The
    Apache Solr search engine is the base search engine and extends all the features
    such as pattern search with exact, wildcard, range, and fuzzy. A full indexed
    search can be run with different options within the recipe, command line, management
    console search feature, and so on.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索功能便于查询 Chef 服务器上索引的任何类型的数据，如节点、角色、平台、环境、数据包等。Apache Solr 搜索引擎是基础搜索引擎，并扩展了所有功能，如精确搜索、通配符搜索、范围搜索和模糊搜索。可以在配方、命令行、管理控制台搜索功能等不同选项中运行完整的索引搜索。
- en: Data bags are located in a secure sub-area on the Chef server; they store sensitive
    data such as passwords, user account data, and other confidential types of data.
    They can only be accessed by nodes with the authentic SSL certificates validated
    by the Chef server. A data bag is accessed by the Chef server with its global
    variables stored in JSON format. It can be searched and accessed by recipe and
    loaded.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据包位于 Chef 服务器的一个安全子区域中；它们存储敏感数据，如密码、用户帐户数据和其他机密类型的数据。它们只能被拥有由 Chef 服务器验证的有效
    SSL 证书的节点访问。数据包通过 Chef 服务器访问，其全局变量以 JSON 格式存储，可以通过配方进行搜索和访问，并加载。
- en: 'A policy defines how roles, environments, and cookbook versions are to be implemented
    in the business and operational requirements, processes, and production workflows:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略定义了如何根据业务和操作要求、流程以及生产工作流实施角色、环境和食谱版本：
- en: A role is a way to assign the tasks based on specific functions, patterns, and
    processes performed in an organization such as power or business user, and so
    on. Each node, web, or database server consists of unique attributes and a run
    list is assigned per role. When a node is to perform a task, it compares its attributes
    list with those required to execute the function. The Chef client ensures the
    attributes and run lists are up-to-date with those on the server.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色是一种根据组织中执行的特定职能、模式和流程来分配任务的方式，例如电力或业务用户等。每个节点、Web 或数据库服务器都有独特的属性，并且每个角色都分配一个运行列表。当一个节点执行任务时，它会将其属性列表与执行该功能所需的属性进行比较。Chef
    客户端确保属性和运行列表与服务器上的数据保持同步。
- en: Environments reflect organizations real-life requirements such as development,
    staging, or production systems, each are maintained with a cookbook version.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境反映了组织的实际需求，如开发、预发布或生产系统，每个环境都由一个食谱版本进行维护。
- en: 'Cookbooks maintain organization-specific configuration policies. Different
    cookbook versions are maintained such as source control with associated environments,
    metadata, run lists for different needs; they are uploaded on to a Chef server
    and applied by a Chef client while configuring the nodes. A cookbook defines a
    scenario and everything that is required to support that scenario is contained
    such as:'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 食谱书（Cookbooks）维护组织特定的配置策略。不同版本的食谱书被管理，就像源代码控制一样，包括相关环境、元数据、不同需求的运行列表；它们被上传到
    Chef 服务器，并在配置节点时由 Chef 客户端应用。食谱书定义了一个场景，并包含支持该场景所需的一切，例如：
- en: Recipes that specify which resources to use and the order as well
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配方指定了要使用的资源及其顺序
- en: Attribute values
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性值
- en: File distributions
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件分发
- en: Templates
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板
- en: Chef extensions such as custom resources and libraries
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 扩展，如自定义资源和库
- en: A run-list contains all the required information for Chef to configure a node
    to a desired state. It is an ordered list of roles and recipes specified in the
    exact order to be run to reach its intended state. It's tailored for each node
    and stored on the Chef server as part of the node object. It is maintained using
    knife commands or using the Chef management console on the workstation and uploaded
    to the Chef server.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行列表包含 Chef 配置节点到期望状态所需的所有信息。它是一个按顺序排列的角色和配方列表，精确指定运行顺序以达到预期状态。每个节点都有定制的运行列表，并存储在
    Chef 服务器上的节点对象中。它通过刀具命令（knife commands）或工作站上的 Chef 管理控制台进行维护，并上传到 Chef 服务器。
- en: Chef Client on nodes
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点上的 Chef 客户端
- en: Chef clients can be installed on different node types--physical, virtual, cloud,
    network device, and so on, that are registered with Chef server.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 客户端可以安装在不同类型的节点上——物理、虚拟、云、网络设备等，这些节点都已注册到 Chef 服务器。
- en: 'Types of nodes:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点类型：
- en: A physical node is an active device (system or virtual machine) attached to
    a network on which a Chef client is installed to communicate with a Chef server.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理节点是连接到网络的活动设备（系统或虚拟机），并安装有 Chef 客户端，以便与 Chef 服务器通信。
- en: A cloud-based node is hosted in external cloud environments such as AWS, Microsoft
    Azure OpenStack, Google Compute Engine, or Rackspace. Knife with plugins provides
    support for external cloud-based services and creates instances to deploy, configure,
    and maintain those instances.
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于云的节点托管在外部云环境中，如 AWS、Microsoft Azure OpenStack、Google Compute Engine 或 Rackspace。带插件的刀具（Knife）支持外部云服务并创建实例，以部署、配置和维护这些实例。
- en: A virtual node is a system that runs like a software implementation without
    direct physical machine access.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟节点是一个像软件实现一样运行的系统，无法直接访问物理机器。
- en: A network node such as a switch can be configured with Chef and automated for
    physical and logical Ethernet link properties and VLANs. Examples of network devices
    are Juniper Networks, Arista, Cisco, and F5.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络节点，如交换机，可以使用 Chef 进行配置，并自动化物理和逻辑以太网链路属性及 VLAN。网络设备的示例有 Juniper Networks、Arista、Cisco
    和 F5。
- en: Containers are virtual systems running individual configurations sharing the
    same operating system. Containers are effective at managing distributed and scalable
    applications and services.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器是运行独立配置、共享相同操作系统的虚拟系统。容器在管理分布式和可扩展的应用程序与服务方面非常有效。
- en: 'Chef client:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 客户端：
- en: The Chef client does the actual configuration. It contacts the Chef server periodically
    to retrieve the latest cookbooks to update the current state of the node, if required,
    in accordance with the cookbook instructions. This iterative process is enforced
    by business policy to ensure the network is in accordance with the envisioned
    target state.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 客户端执行实际配置。它定期联系 Chef 服务器以检索最新的食谱书，以根据食谱书的指令更新节点的当前状态（如果需要）。这个迭代过程由业务策略强制执行，以确保网络符合预期的目标状态。
- en: The Chef client is the local agent that is installed and runs on every node
    registered with the Chef server to ensure the node is at the expected state. Chef
    client does most of the computational effort. It's typically a virtual machine,
    container instance, or physical server.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 客户端是安装并运行在每个已注册到 Chef 服务器上的节点上的本地代理，确保节点处于预期状态。Chef 客户端承担大部分计算工作。它通常是虚拟机、容器实例或物理服务器。
- en: Authentication between Chef client with the Chef server happens through RSA
    public key/pairs for every transaction request. The data stored on the Chef server
    is shared after authentication of registered nodes. Any unauthorized data access
    is avoided.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 客户端与 Chef 服务器之间的身份验证通过每个事务请求的 RSA 公钥/私钥对进行。Chef 服务器上存储的数据在注册节点验证后共享。任何未经授权的数据访问都会被避免。
- en: 'After installation of the chef client, the nodes become compute resources on
    infrastructure that is managed by Chef for performing the tasks such as:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在安装 Chef 客户端后，节点成为基础设施中的计算资源，由 Chef 管理，执行如下任务：
- en: Registering the node with the Chef server
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将节点注册到 Chef 服务器
- en: Authentication services
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证服务
- en: Creating the node object
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建节点对象
- en: Synchronizing cookbooks with Chef server
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Chef 服务器同步食谱
- en: The required cookbooks, with recipes, attributes, and all other dependencies,
    are compiled and loaded
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所需的 cookbooks、食谱、属性和所有其他依赖项会被编译并加载
- en: Configuring the node as per the requirements
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据要求配置节点
- en: Exception handling and notifications
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常处理和通知
- en: Ohai
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ohai
- en: 'Ohai is a tool run by Chef client to collect system configuration and metrics
    data with many built-in plugins to determine the system state for use within cookbooks.
    The metrics collected by Ohai are:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Ohai 是 Chef 客户端运行的工具，用于收集系统配置和度量数据，具有许多内置插件，用于确定系统状态以供食谱使用。Ohai 收集的度量数据包括：
- en: Operating System
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统
- en: Kernel
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核
- en: Host names
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机名
- en: Fully-qualified domain names
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全限定域名
- en: Virtualization
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟化
- en: Cloud service provider metadata
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云服务提供商的元数据
- en: Network
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络
- en: Memory
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存
- en: Disk
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘
- en: CPU
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU
- en: Attributes that are collected by Ohai are automatically used by the Chef client
    to ensure that these attributes remain consistent with the definitions on the
    server.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Ohai 收集的属性会自动被 Chef 客户端使用，以确保这些属性与服务器上的定义保持一致。
- en: Workstations
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作站
- en: 'Workstations facilitate users to author, test, and maintain cookbooks and interact
    with the Chef server and nodes. The Chef development toolkit is also installed
    and configured on a workstation. The Chef development kit is a package comprising
    prescribed sets of tools, and includes Chef, the command-line tools, Test Kitchen,
    ChefSpec, Berkshelf, and a few others. Users use workstations for:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 工作站使用户能够编写、测试和维护食谱，并与 Chef 服务器和节点进行交互。Chef 开发工具包也会在工作站上安装和配置。Chef 开发工具包是一个包含一系列规定工具的包，其中包括
    Chef、命令行工具、Test Kitchen、ChefSpec、Berkshelf 等。用户使用工作站进行以下操作：
- en: Developing the cookbooks and test recipes
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发食谱和测试食谱
- en: Testing the Chef code in different environments
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同环境中测试 Chef 代码
- en: Version source control synchronized with Chef repo
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Chef 仓库同步的版本源控制
- en: Defining and configuring roles and environments and organizational policy
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义和配置角色、环境及组织政策
- en: Enforcing data bags are used for storing the critical data
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制执行数据包用于存储关键信息
- en: Performing a bootstrap operation on nodes
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在节点上执行引导操作
- en: Cookbooks are repositories for files, templates, recipes, attributes, libraries,
    custom resources, tests, and metadata. Chef client configures each node in the
    organization through cookbooks and recipes, the fundamental unit of configuration
    is the cookbook and provides structure to your recipes. Infrastructure state is
    defined as a file, a template, or a package in policy distribution as per the
    required scenario.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Cookbook 是存储文件、模板、食谱、属性、库、定制资源、测试和元数据的仓库。Chef 客户端通过 cookbooks 和食谱配置组织中的每个节点，配置的基本单元是
    cookbook，并为食谱提供结构。基础设施状态定义为文件、模板或根据所需场景的策略分发中的包。
- en: The programming language for Chef cookbooks is Ruby as a full-fledged programming
    language with syntax definitions. Recipes are simple patterns for specific configuration
    items such as packages, files, services, templates, and users with blocks that
    define properties and values that map to them. Recipes are the fundamental configuration
    element in a cookbook. A Chef recipe is a file that groups related resources,
    such as everything needed to configure a web server, database server, or a load
    balancer. Recipes are stored in cookbooks and can have dependencies on other recipes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Chef cookbook 的编程语言是 Ruby，作为一门具有语法定义的完备编程语言。食谱是特定配置项的简单模式，例如软件包、文件、服务、模板和用户，包含定义属性和值的块。食谱是
    cookbook 中的基本配置元素。Chef 食谱是一个文件，汇集了相关资源，例如配置 Web 服务器、数据库服务器或负载均衡器所需的一切。食谱存储在 cookbooks
    中，且可以依赖于其他食谱。
- en: Chef Repo
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chef 仓库
- en: The Chef repo, as the name suggests, is the repository artifact to author, test,
    and maintain the cookbooks. The Chef repo is managed like source code, synchronizing
    with a version control system (such as GitHub, Bitbucket, and so on). The Chef
    repo directory structure can contain a Chef repo for every cookbook or all of
    their cookbooks in a single Chef repo.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，Chef repo是用于编写、测试和维护cookbook的仓库工件。Chef repo像源代码一样管理，使用版本控制系统（如GitHub、Bitbucket等）进行同步。Chef
    repo目录结构可以包含每个cookbook的Chef repo，或者将所有的cookbook存储在一个Chef repo中。
- en: 'The `knife` is a command interface to communicate with the Chef server from
    the workstation to upload the cookbooks. To specify configuration details, the
    `knife.rb` file is used, `knife` helps to manage:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`knife`是从工作站与Chef服务器进行通信的命令接口，用于上传cookbook。要指定配置详情，使用`knife.rb`文件，`knife`帮助管理：'
- en: Nodes bootstrapping
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点引导
- en: Recipes and cookbooks
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配方和cookbooks
- en: Environments, roles, and data bags
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境、角色和数据包
- en: Various cloud environment resources
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种云环境资源
- en: Chef client installation to nodes
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef客户端安装到节点
- en: Chef server indexed data search features
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef服务器的索引数据搜索功能
- en: 'The package of tools and utilities to work with Chef is called **Chef Development
    Kit** (**Chef DK**). It includes command-line tools interacting with Chef such
    as `knife` Chef server and Chef clients and with local Chef code repository (`chef-repo`).
    The components of Chef DK are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 用于与Chef一起工作的工具和实用程序包称为**Chef开发工具包**（**Chef DK**）。它包括与Chef交互的命令行工具，如`knife` Chef服务器和Chef客户端，以及本地Chef代码库（`chef-repo`）。Chef
    DK的组件如下：
- en: Chef client
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef客户端
- en: '`Chef` and `knife` command-line tools'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chef`和`knife`命令行工具'
- en: Test Kitchen, Cookstyle, and Foodcritic as testing tools
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试工具Test Kitchen、Cookstyle和Foodcritic
- en: Compliance and security requirements with InSpec as executable code
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用InSpec作为可执行代码的合规性和安全性要求
- en: Cookbooks are authored to upload to Chef server
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cookbooks用于上传到Chef服务器
- en: To encryption and decryption of data bag items is with Chef-Vault using the
    public keys for registered nodes
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数据包项进行加密和解密使用Chef-Vault，并通过注册节点的公钥进行处理
- en: Cookbooks dependency manager
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cookbooks依赖管理器
- en: Workflow tool Chef
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流工具Chef
- en: Unit testing framework Chef Specto tests resources locally
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试框架Chef Specto在本地测试资源
- en: For style-checking to write clean cookbooks Rubocop-based tool Cookstyle
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于风格检查以编写干净cookbook的基于Rubocop的工具Cookstyle
- en: Continuous delivery workflow on Chef Automate server also command-line tools
    to set up and execute
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef Automate服务器上的持续交付工作流，也包括设置和执行的命令行工具
- en: For static analysis of recipe code Foodcritic is a lint tool
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于配方代码的静态分析的Foodcritic是一个lint工具
- en: It is to test cookbooks across platforms, an integration testing framework tool
    is Test Kitchen
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于跨平台测试cookbooks的集成测试框架工具是Test Kitchen
- en: For rapid cookbook testing and container development `kitchen-dokken` is `test-kitchen`
    plugin with a driver, transport, and provisioner for using Docker and Chef
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于快速cookbook测试和容器开发，`kitchen-dokken`是`test-kitchen`插件，包含一个驱动程序、传输工具和用于Docker和Chef的配置器
- en: Kitchen driver for Vagrant is `kitchen-vagrant`
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant的厨房驱动程序是`kitchen-vagrant`
- en: People to work together in the same `chef-repo` and Chef server knife workflow
    plugin is `knife-spork`
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人们在同一个`chef-repo`和Chef服务器刀插件工作流中共同工作，刀插件是`knife-spork`
- en: The preferred language for Chef is Ruby
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef的首选语言是Ruby
- en: A recipe is the collection of resources, defined using patterns such as resource
    names, attribute-value pairs, and actions. It is the fundamental configuration
    element designed to read and act in a predictable manner and authored in Ruby
    programming language.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 配方是资源的集合，使用资源名称、属性值对和操作等模式进行定义。它是一个基本的配置元素，旨在以可预测的方式读取并执行，编写时使用Ruby编程语言。
- en: 'A few properties are as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些属性：
- en: Include all that is required to configure the system
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含配置系统所需的所有内容
- en: To be stored in a cookbook
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储在cookbook中
- en: For the Chef client to be used, it must be added to a run list
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了使用Chef客户端，必须将其添加到运行列表中
- en: It is executed in the same sequence as listed in a run list
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它按照在运行列表中列出的顺序执行
- en: Chef client will run the recipe only when instructed
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在指示时，Chef客户端才会运行配方
- en: Could be included in another recipe
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能包含在另一个配方中
- en: Might read the contents of a data bag (encrypted data bag)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能读取数据包的内容（加密数据包）
- en: Might input the results of a search query
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能输入搜索查询的结果
- en: Might have dependency on other recipes
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能依赖其他配方
- en: Facilitate the creation of arbitrary groupings by tagging a node
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过给节点打标签，方便创建任意的分组
- en: If the recipe is constant, then there won't be any change by repeated execution
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果食谱是常量，那么重复执行也不会发生变化
- en: Recipe DSL is a Ruby DSL that is used to declare resources primarily from within
    a recipe. It also helps to ensure recipes interact with nodes (and node properties)
    in the expected manner. Most of the Recipe DSL methods find a specific parameter
    to advice Chef client on actions to take according to the node parameter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Recipe DSL是一种Ruby DSL，用于从食谱内声明资源。它还帮助确保食谱与节点（及节点属性）按照预期的方式进行交互。大多数Recipe DSL方法会找到特定参数，指导Chef客户端根据节点参数采取相应的操作。
- en: 'A resource is a configuration policy statement that:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 资源是一个配置策略声明，表示：
- en: Describes the configuration item desired state
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述所需配置项的期望状态
- en: Declares the steps on the item required for the desired state
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明了所需项目的步骤以达到期望的状态
- en: Resource type is specified such as package, template, or service
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源类型被指定，如包、模板或服务
- en: Lists additional resource properties
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出了其他资源属性
- en: Are grouped into recipes, that describe working configurations
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被分组到食谱中，描述工作配置
- en: Chef has built-in resources to cover common actions across common platforms
    and can be built to handle any customized situation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Chef内置了覆盖常见平台的常见操作的资源，并且可以构建来处理任何定制化的需求。
- en: With different versions of cookbooks, multiple environments of production, staging,
    development/testing are managed.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 通过不同版本的食谱，可以管理多个生产、预发布和开发/测试环境。
- en: Cookbook template resources are used to add to recipes for dynamic generation
    of static text files.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 食谱模板资源用于为菜谱添加动态生成静态文本文件的功能。
- en: To manage configuration files, **Embedded Ruby** (**ERB**) templates are used.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理配置文件，使用**嵌入式Ruby**（**ERB**）模板。
- en: The cookbooks/templates directory contains ERB template files with Ruby expressions
    and statements.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 食谱/模板目录包含具有Ruby表达式和语句的ERB模板文件。
- en: The cookbooks are written consistently as per standards and tested for same.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 食谱按照标准一致地编写，并经过测试。
- en: With unit and integration testing, the cookbooks recipes are validated, testing
    code quality is also called syntax testing.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单元和集成测试，食谱的菜谱得到了验证，代码质量的测试也被称为语法测试。
- en: Test Kitchen, ChefSpec, and Foodcritic, and so on, are tools for testing Chef
    recipes.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Test Kitchen、ChefSpec和Foodcritic等是用于测试Chef食谱的工具。
- en: The attribute files are executed in the same order as defined in the cookbook.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 属性文件按照食谱中定义的顺序执行。
- en: Chef is built on top of Ruby, it is a thin **domain-specific language** (**DSL**)
    with built-in taxonomy for customizations need of organization.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Chef建立在Ruby之上，是一种轻量级的**领域特定语言**（**DSL**），并具有用于组织定制需求的内建分类法。
- en: To manage environments, cookbooks, data bags, and to configure role-based access
    for users and groups, attributes, run lists, roles, and so on, the Chef server
    user interface is the Chef management console.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理环境、食谱、数据包，并为用户和组配置基于角色的访问，属性、执行列表、角色等，Chef服务器用户界面是Chef管理控制台。
- en: Chef Supermarket is the community location to share and manage. Cookbooks may
    be used by any Chef user or organization.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Supermarket是社区共享和管理的地方。任何Chef用户或组织都可以使用食谱。
- en: Extended Features of Chef
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chef的扩展功能
- en: It is a powerful automation platform that transforms infrastructure into code
    that operates on the cloud, on-premises, or in a hybrid environment. Infrastructure
    is configured, deployed, and managed across your network irrespective of the organization
    size with Chef Automate. Integral parts of Chef Automate are Chef, Habitat, and
    InSpec.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个强大的自动化平台，可以将基础设施转化为可以在云端、本地或混合环境中运行的代码。无论组织规模大小，Chef Automate都可以配置、部署和管理整个网络中的基础设施。Chef
    Automate的核心组成部分包括Chef、Habitat和InSpec。
- en: 'Three open source power-packed engines are shown in the following image:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片展示了三个功能强大的开源引擎：
- en: '![Extended Features of Chef](img/00080.jpeg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![Chef的扩展功能](img/00080.jpeg)'
- en: Chef is the core engine for infrastructure automation. Habitat is an application
    automation tool emulating concepts of containers and microservices. InSpec ensures
    compliance and security requirements by specifying executable code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Chef是基础设施自动化的核心引擎。Habitat是一个应用程序自动化工具，模拟容器和微服务的概念。InSpec通过指定可执行代码来确保合规性和安全性要求。
- en: Habitat
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Habitat
- en: Habitat comes with a prescribed packaging format for application automation;
    the Habitat supervisor and application dependencies are packaged and deployed
    as one unit. The Habitat package format defines on how to be structured, these
    are isolated, immutably executed for any kind of runtime environments such as
    a container, bare metal, or PaaS. The Habitat supervisor manages the package's
    peer relationships, upgrade strategy, and security policies, which are auditable
    as well.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Habitat 提供了一种规定的应用程序自动化打包格式；Habitat 管理器和应用程序依赖项作为一个整体打包和部署。Habitat 包格式定义了如何构建，这些包是隔离的、不可变的，可在任何类型的运行时环境（如容器、裸金属或
    PaaS）中执行。Habitat 管理器管理包的对等关系、升级策略和安全政策，这些都是可审计的。
- en: InSpec
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: InSpec
- en: InSpec is an open source to test for adherence to security policies. It's a
    framework for specifying compliance, security, and policy requirements to automatically
    testing any node in the infrastructure. Compliance can be expressed as code and
    integrated into a deployment pipeline.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: InSpec 是一个开源工具，用于测试是否符合安全政策。它是一个框架，用于指定合规性、安全性和政策要求，以自动测试基础设施中的任何节点。合规性可以以代码的形式表达，并集成到部署管道中。
- en: InSpec using the Compliance DSL enables you to write auditing rules quickly
    and easily
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InSpec 使用 Compliance DSL 可以快速简便地编写审计规则。
- en: InSpec examines infrastructure nodes to run the tests locally or remotely
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InSpec 检查基础设施节点以在本地或远程运行测试。
- en: Security, compliance, or policy issues noncompliance is logged
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性、合规性或政策问题的违规行为将被记录。
- en: The InSpec audit resource framework and Chef Compliance are fully compatible.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: InSpec 审计资源框架与 Chef Compliance 完全兼容。
- en: It runs on multiple platforms with remote commands such as SSH or using Docker
    API, apart from ensuring compliance using APIs, it can access the database, inspect,
    and can restrict usage of services or protocols and the configuration of virtual
    machines. An example is to Restrict Telnetd or the FTP service on the client or
    server machines.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 它可在多个平台上运行，使用 SSH 等远程命令或 Docker API，除了通过 API 确保合规性外，还可以访问数据库、进行检查，并可以限制服务或协议的使用以及虚拟机的配置。例如，可以限制客户端或服务器机器上的
    Telnetd 或 FTP 服务。
- en: The continuous deployment full-stack pipeline is Chef Automate. It includes
    automated testing for compliance and security. The workflow provides visibility
    for both applications and infrastructure, as well as changes propagating throughout
    the pipeline from development production.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署全栈管道是 Chef Automate。它包括自动化测试以确保合规性和安全性。该工作流为应用程序和基础设施提供了可视性，以及从开发到生产的变更传播。
- en: 'Chef High Level Architecture components are Chef DK, Chef Server, and clients:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 高级架构组件包括 Chef DK、Chef Server 和客户端：
- en: '![InSpec](img/00081.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![InSpec](img/00081.jpeg)'
- en: The Chef server plays multiple roles and acts as a hub for configuration data.
    It stores cookbooks, applies the policies to the systems in accordance with the
    infrastructure, and metadata defined for each system.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 服务器扮演多个角色，作为配置数据的中心。它存储 cookbook，将政策应用到系统，并根据基础设施以及为每个系统定义的元数据进行配置。
- en: 'Cookbook development workflow is prescribed by the Chef Development kit as
    below:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Cookbook 开发工作流由 Chef Development Kit 如下所示：
- en: 'Skeleton cookbook creation: A cookbook with the standard files already part
    of the Chef Development kit, the Berkshelf is the package manager that helps manage
    cookbooks and related dependencies.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 骨架 cookbook 创建：这是一个已经包含 Chef Development Kit 标准文件的 cookbook，Berkshelf 是一个包管理器，帮助管理
    cookbook 和相关的依赖项。
- en: 'Virtual machine environment creation using Test Kitchen: Environment that develops
    the cookbook with the location details for performing automated testing and debugging
    of that cookbook during development.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Test Kitchen 创建虚拟机环境：该环境用于开发 cookbook，并提供执行自动化测试和调试该 cookbook 的位置细节。
- en: 'Prepare and debug the recipes for the cookbook: An iterative process to develop
    and test cookbooks, fix bugs, and test till they meet their purpose. Cookbooks
    are authored with any text editor such as Sublime Text, vim, TextMate, EditPad,
    and so on.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备并调试 cookbook 的食谱：这是一个迭代过程，用于开发和测试 cookbook，修复 bug，并测试直到它们达成目的。Cookbook 可以使用任何文本编辑器编写，如
    Sublime Text、vim、TextMate、EditPad 等。
- en: 'Conduct acceptance tests: These tests are done against a full Chef server using
    a near production environment as opposed to development environment.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行验收测试：这些测试在完整的 Chef 服务器上执行，使用接近生产环境的环境，而不是开发环境。
- en: The cookbooks that pass all the acceptance tests in the desired manner are deployed
    to the production environment.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过所有接受测试的 cookbooks 将按照预期方式部署到生产环境中。
- en: Chef Automate Workflow
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chef Automate 工作流
- en: Chef Automate pipeline is for continuous delivery of full-stack approaches for
    infrastructure and applications. It facilitates safe deployment with any application,
    changes at high velocity, and relates infrastructure changes.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Automate 流水线是用于基础设施和应用程序的全栈持续交付。它支持安全部署任何应用程序，支持高速变更，并关联基础设施变更。
- en: The Chef Automate pipeline quality gates are automated to move changes from
    a developer's workstation from deployment to production. A proposed change is
    approved by a team and afterwards, acceptance tests are approved and released
    to the respective artefact for delivery into production.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Automate 流水线质量门控已自动化，能够将开发者的工作站中的变更从部署推送到生产环境。提出的变更经过团队批准后，接受测试也通过并被发布到相应的制品中，交付到生产环境。
- en: 'This diagram shows the workflow from development, test, and deployment of Chef
    code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此图显示了从开发、测试到 Chef 代码部署的工作流：
- en: '![Chef Automate Workflow](img/00082.jpeg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![Chef Automate 工作流](img/00082.jpeg)'
- en: The artefact moves through the pipeline after the acceptance stage, moves to
    the union stage of quality assurance, rehearsal (pre-production), and delivered
    (production).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 该制品在接受阶段后通过流水线，进入质量保证的联合阶段、排练（预生产）阶段和交付（生产）阶段。
- en: The Chef Automate graphical user interface provides views into operational and
    workflow events. Its data warehouse collects inputs from Chef, Habitat, Automate
    workflow, and compliance. Dashboards track each change status through the pipeline
    and query languages available to customize dashboards.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Automate 图形用户界面提供了对操作和工作流事件的视图。其数据仓库收集来自 Chef、Habitat、Automate 工作流和合规性的输入。仪表板跟踪每个变更的状态，通过管道，并提供查询语言来自定义仪表板。
- en: '![Chef Automate Workflow](img/00083.jpeg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![Chef Automate 工作流](img/00083.jpeg)'
- en: Compliance
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合规性
- en: Compliance issues, security risks, and outdated software can be identified by
    creating customizable reports with compliance rules in InSpec. There are built-in
    profiles with predefined rule sets for security frameworks such as **Centre for
    Internet Security** (**CIS**) benchmarks, and so on. Compliance reposting can
    be standalone or integrated. Also, the Chef Automate server provides high availability
    with fault tolerance, real-time data about your infrastructure, and consistent
    search results.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 InSpec 中创建自定义报告，结合合规规则，可以识别合规性问题、安全风险和过时的软件。内置的配置文件提供了针对安全框架的预定义规则集，如**互联网安全中心**（**CIS**）基准等。合规报告可以是独立的，也可以是集成的。此外，Chef
    Automate 服务器还提供了高可用性、容错性、实时基础设施数据和一致的搜索结果。
- en: 'The Chef Compliance server facilitates centralized management of the infrastructure''s
    compliance, performing the following tasks:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 合规性服务器便于基础设施合规性的集中管理，执行以下任务：
- en: Create and manage profiles of rules
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理规则配置文件
- en: Test nodes as per the organization's security management life cycle regularly
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照组织的安全管理生命周期定期测试节点
- en: The scans are fully executed remotely; no footprint is installed on the node
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描完全通过远程执行；节点上不安装任何脚印
- en: Compliance reports ensure infrastructure meets security requirements
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合规报告确保基础设施符合安全要求
- en: Auditing statistics for nodes compliance are available![Compliance](img/00084.jpeg)
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点合规性的审计统计信息可用！[合规性](img/00084.jpeg)
- en: 'Chef compliance reports detailing multiple parameters such as node wise for
    patch and compliance are shown in the following:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 合规报告详细列出了多个参数，例如节点级的补丁和合规性，详见以下内容：
- en: '![Compliance](img/00085.jpeg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![合规性](img/00085.jpeg)'
- en: Chef Compliance Report views from Automate.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Automate 查看 Chef 合规报告。
- en: Chef Automate provides the ability to analyze compliance reports to pivot the
    data for either nodes, platform of the node, environment, or profiles with the
    ability to drill down on the information.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Automate 提供了分析合规报告的能力，可以根据节点、节点平台、环境或配置文件来分析数据，并能够深入挖掘信息。
- en: Chef Automate compliance control status report provides a comprehensive dashboard
    on major, minor, critical, patch levels, and so on.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Automate 合规控制状态报告提供了一个综合仪表板，展示了主要、次要、关键、补丁级别等信息。
- en: Ansible
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible
- en: 'Ansible is a popular and powerful automation framework for continuous delivery
    with features and benefits are listed in the following topics:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 是一个流行且强大的自动化框架，支持持续交付，具有以下主题中列出的功能和优点：
- en: Prominent Features
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突出特性
- en: 'Ansible provides following features:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供以下功能：
- en: Modernize
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代化
- en: Automate existing deployment process
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化现有的部署流程
- en: Manage legacy systems and process, updated like DevOps
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理遗留系统和流程，像DevOps一样进行更新
- en: Migrate
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移
- en: Define applications once and redeploy anywhere
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次定义应用程序，随时重新部署
- en: DevOps
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps
- en: Model everything, deploy continuously
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一切建模，持续部署
- en: Benefits of Ansible
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible的好处
- en: 'Using Ansible provides multiple advantages as listed following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Ansible带来如下多个优势：
- en: Simple to use
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单易用
- en: Special coding skills not required
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需特殊编码技能
- en: Tasks are executed sequentially
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务按顺序执行
- en: Get productive quickly
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速提高生产力
- en: Automation is easily understood
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化易于理解
- en: Powerful with functionality
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能强大
- en: App deployment
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用部署
- en: Configuration management
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管理
- en: Orchestration of workflow
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流编排
- en: Orchestration of app life cycle
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用生命周期的编排
- en: Agentless
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无代理
- en: Agentless architecture
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无代理架构
- en: Uses OpenSSH and WinRM
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OpenSSH和WinRM
- en: No agents to exploit or update
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需代理来利用或更新
- en: More efficient and secure
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更高效且安全
- en: Ansible is a multi-dimensional IT automation engine that simplifies automation
    of cloud provisioning, intra-service orchestration, configuration management,
    application deployment, and many other IT functionalities.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是一个多维的IT自动化引擎，简化了云资源供应、服务间编排、配置管理、应用部署以及许多其他IT功能的自动化。
- en: Ansible models your IT infrastructure by prescribing to interrelate systems
    for multi-tier deployments against managing the systems individually.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible通过规定系统间的相互关系，模拟IT基础架构，适用于多层部署，而不是单独管理各个系统。
- en: As discussed under features, there are neither client-side agents nor additional
    custom security infrastructure for Ansible. It makes deployment very simple by
    describing automation jobs in a plain English language called YAML and in the
    form of Ansible playbooks.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如功能部分所述，Ansible不需要客户端代理或额外的自定义安全基础设施。它通过用一种名为YAML的简单英语语言描述自动化任务，并以Ansible playbooks的形式，使部署变得非常简单。
- en: 'Ansible architecture is as shown in the following:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible架构如下所示：
- en: '![Benefits of Ansible](img/00086.jpeg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![Ansible的好处](img/00086.jpeg)'
- en: Ansible Terminology, Key Concepts, Workflow, and Usage
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible术语、关键概念、工作流和使用
- en: 'Ansible Tower is a web-based solution for enterprise automation frameworks
    designed to be the hub for controlling, securing, and managing your Ansible environment
    with a user interface and RESTful APIs. It provides the following rich features:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower是一个基于Web的企业自动化框架解决方案，旨在成为控制、保护和管理Ansible环境的中心，提供用户界面和RESTful API。它提供以下丰富的功能：
- en: Access control is role-based to keep the environment secure, and efficient in
    managing – allows sharing of SSH credentials but not transfer
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问控制基于角色，以确保环境安全，并且高效管理——允许共享SSH凭证但不进行传输
- en: With push-button deployment access even non-privileged users can safely deploy
    entire applications by providing access on the fly
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过一键部署访问，即使是非特权用户，也可以通过实时提供访问权限来安全地部署整个应用程序
- en: Ensuring complete auditability and compliance as all Ansible automations are
    centrally logged
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保完整的审计和合规性，因为所有Ansible自动化操作都被集中记录
- en: Inventory with a wide variety of cloud sources, can be graphically managed or
    synced
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持来自多种云源的广泛库存，可以进行图形化管理或同步
- en: It's based on a robust REST API, integrates well with LDAP, and logs all jobs
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它基于强大的REST API，能够与LDAP良好集成，并记录所有任务
- en: Easy integration with the continuous integration tool Jenkins, command-line
    tools options are available
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与持续集成工具Jenkins的易集成，提供命令行工具选项
- en: Supports auto scaling topologies though provisioning callback
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持通过配置回调实现自动扩展拓扑
- en: Ansible Tower is installed using Ansible playbooks![Ansible Terminology, Key
    Concepts, Workflow, and Usage](img/00087.jpeg)
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible Tower通过Ansible playbooks进行安装！[Ansible术语、关键概念、工作流和使用](img/00087.jpeg)
- en: CMDB
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CMDB
- en: Ansible **configuration management database** (**CMDB**) maintains the entire
    configuration information of the enterprise in the database and supports cloud
    creation options in multiple formats for different vendors.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible **配置管理数据库**（**CMDB**）在数据库中维护企业的所有配置信息，并支持多种格式的云创建选项，以适配不同的供应商。
- en: '![CMDB](img/00088.jpeg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![CMDB](img/00088.jpeg)'
- en: Playbooks
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Playbooks
- en: Playbooks are the configuration programs written in YAML to automate the systems.
    Ansible can finely orchestrate multiple instances of infrastructure topology with
    very detailed control over many machines at the same time. Ansible's approach
    to orchestration is finely-tuned automation code managed through simple YAML on
    syntax or features.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Playbook 是用 YAML 编写的配置程序，用于自动化系统。Ansible 能够精细地编排多个基础设施拓扑实例，并对许多机器进行详细的控制。Ansible
    的编排方法是通过简单的 YAML 语法或功能来管理精细调校的自动化代码。
- en: Ansible playbooks describe a policy to be orchestrated for enforcement on remote
    systems for configuration and deployment to enforce general IT process adherence
    steps.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible playbook 描述了一个政策，用于在远程系统上执行编排操作，以进行配置和部署，从而强制执行一般的 IT 流程遵循步骤。
- en: A simple analogy is, an inventory of hosts is raw material, instruction manuals
    are playbooks, and Ansible modules are the tools in the workshop.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的类比是，主机清单是原材料，说明书是 playbook，Ansible 模块是工作坊中的工具。
- en: To manage configurations of deployments to remote machines, playbooks can be
    used at a basic level. They can sequence multi-tier rollouts involving rolling
    updates on a more advanced level, to interact with monitoring servers and load
    balancers along the way and delegate actions to other hosts.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理远程机器部署的配置，可以在基础层级使用 playbook。它们可以按顺序执行多层次的发布，包括涉及滚动更新的高级操作，途中与监控服务器和负载均衡器交互，并将操作委托给其他主机。
- en: Playbooks are developed in a basic text language conveniently designed to be
    human-readable. Organizing playbooks and the files can be done in multiple ways.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Playbook 是以基本的文本语言开发的，方便人类阅读。Playbook 和文件的组织可以有多种方式。
- en: 'A simple playbook example:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的 playbook 示例：
- en: '[PRE0]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Playbooks](img/00089.jpeg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![Playbooks](img/00089.jpeg)'
- en: Modules
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块
- en: Ansible modules can control system resources, such as services, packages, or
    files to handle and execute system commands. These resource modules are pushed
    by Ansible on nodes to configure them to the desired state of the system. These
    Ansible modules are executed over SSH (Secured Shell) on the target nodes and
    removed after accomplishing the task. The module library is shipped by default
    with a number of modules to be executed through playbooks or directly on remote
    hosts. The modules can reside on any machine, there is no concept of servers,
    daemons, or databases to maintain them. The modules and libraries are customizable,
    typically created with any terminal program, a text editor, and to keep track
    of changes to the content, the version control system is used effectively.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 模块可以控制系统资源，如服务、软件包或文件，以处理和执行系统命令。这些资源模块由 Ansible 推送到节点上，配置它们以达到所需的系统状态。这些
    Ansible 模块通过 SSH（安全外壳）在目标节点上执行，并在完成任务后被移除。模块库默认随多种模块一起提供，可通过 playbook 或直接在远程主机上执行。这些模块可以驻留在任何机器上，不需要维护服务器、守护进程或数据库。模块和库是可定制的，通常通过任何终端程序和文本编辑器创建，为了跟踪内容的变化，版本控制系统被有效使用。
- en: '![Modules](img/00090.jpeg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![模块](img/00090.jpeg)'
- en: Inventory
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清单
- en: 'Ansible inventory is a list of resources:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 清单是资源的列表：
- en: Hosts and groups
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机和组
- en: Host variables
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机变量
- en: Group variables
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组变量
- en: Groups of groups and group variables
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组和组变量的组合
- en: Default groups
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认组
- en: Splitting out group and host and specific data
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拆分组、主机及特定数据
- en: List of inventory behavioral Parameters
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单行为参数列表
- en: Non-SSH connection types
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非 SSH 连接类型
- en: Ansible, through the inventory list, works on multiple systems in the infrastructure
    simultaneously. The dynamic inventory mechanism allows multiple inventory files
    to be flexible and customizable at the same time through inventory plugins. The
    inventory list can be in a default location or specify inventory file location
    of your choice from dynamic or cloud sources, EC2, Rackspace, OpenStack, or different
    formats.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 通过清单列表，Ansible 可同时在基础设施中的多个系统上工作。动态清单机制允许通过清单插件，使多个清单文件既灵活又可定制。清单列表可以放在默认位置，或从动态或云源（如
    EC2、Rackspace、OpenStack 或不同格式）指定清单文件位置。
- en: 'Here''s what a plain text inventory file looks like:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个纯文本清单文件的样子：
- en: '[PRE1]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Inventory](img/00091.jpeg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![清单](img/00091.jpeg)'
- en: Plugins
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插件
- en: Ansible's core functionality is augmented by a number of handy plugins and can
    be customized in JSON (Ruby, Python, Bash, and so on). Plugins can connect to
    any data source, extend the connection types for transport other than with SSH,
    call back for logs, and even add new server-side behaviors.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 的核心功能通过许多便捷的插件得到增强，并且可以用 JSON（Ruby、Python、Bash 等）进行自定义。插件可以连接到任何数据源，扩展
    SSH 以外的传输连接类型，回调日志，甚至添加新的服务器端行为。
- en: Ansible Tower
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible Tower
- en: 'Offers multiple features such as:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 提供多个功能，如：
- en: LDAP, AD, SAML, and other directories can be connected
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以连接 LDAP、AD、SAML 及其他目录
- en: Access control engines that are role based
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于角色的访问控制引擎
- en: Credentials without exposure storage
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无暴露存储的凭证
- en: Simple for first time users
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对首次使用者简单易用
- en: Smart Search enabled information lookup
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用智能搜索的信息查找
- en: Configure automation at runtime
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时配置自动化
- en: REST API based integration with processes and tools
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 REST API 的流程和工具集成
- en: Tower clusters to extend capacity
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tower 集群扩展容量
- en: Ansible Tower can invoke multi-playbook workflows to link any number of playbooks,
    with different inventories, run as different users, run as batch, or with different
    credentials.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower 可以调用多剧本工作流来连接多个剧本，使用不同的清单，以不同用户身份运行，批量执行，或使用不同的凭证。
- en: Ansible Tower workflows facilitate many complex operations, build workflows
    to provision the machines, apply base configurations of systems, and deploy the
    applications by different teams maintaining different playbooks. A workflow can
    be built for CI/CD to build an application, deploy to a test environment, run
    tests, and based on test results, automatically promotes the application. Ansible
    Tower's intuitive workflow editor easily models complex processes with different
    playbooks set up to run as alternatives in case of success or failure of a prior
    workflow playbook.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower 工作流有助于完成许多复杂操作，构建工作流以配置机器，应用系统的基础配置，并通过不同的团队维护不同的剧本来部署应用程序。可以为
    CI/CD 构建一个工作流来构建应用程序，部署到测试环境，运行测试，并根据测试结果自动推广应用程序。Ansible Tower 的直观工作流编辑器可以轻松建模复杂的过程，设置不同的剧本作为备选方案，以应对先前工作流剧本的成功或失败。
- en: 'A typical workflow may be as follows, it can be effectively used on multiple
    systems quickly without taking their infrastructure offline. To achieve continuous
    deployment, automated QA is vital to mature to this level:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的工作流可能如下所示，它可以在多个系统上快速有效地使用，而不需要将基础设施下线。为了实现持续部署，自动化 QA 是至关重要的，它是达到这一水平的关键。
- en: Script automation to deploy local development VMs
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化脚本用于部署本地开发虚拟机。
- en: CI system such as Jenkins to deploy to a staging environment on every code change
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI 系统（如 Jenkins）在每次代码更改后将部署到暂存环境
- en: The deploy job executes the test scripts on build for pass/fail for every deploy
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署作业在每次部署时执行测试脚本，检查通过/失败状态
- en: Upon success of the deploy job, the same playbook is run against production
    inventory
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署作业成功后，相同的剧本会在生产环境清单上运行。
- en: 'The Ansible Tower workflow brings the following features and functionality:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower 工作流带来以下功能和特性：
- en: Jobs schedule
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业调度
- en: Built-in notifications to inform the teams
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内建通知功能，用于通知团队
- en: Stabilized API to connect to existing tooling and processes
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稳定的 API 连接现有的工具和流程
- en: New workflows to model entire processes![Ansible Tower](img/00092.jpeg)
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的工作流用于建模整个过程！[Ansible Tower](img/00092.jpeg)
- en: 'The Ansible Tower dashboard (refer to the image) offers functionality as listed:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower 仪表盘（参见图片）提供以下功能：
- en: Dashboard and real-time automation updates
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪表盘和实时自动化更新
- en: Graphical inventory management
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形化清单管理
- en: Integrated RBAC with credential management
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成的 RBAC 和凭证管理
- en: Ansible Vault
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible Vault
- en: Ansible Vault is a feature to keep sensitive data in encrypted form, for example
    passwords or keys as opposed to saving them as plain text in roles or playbooks.
    These vault files can be placed in source control or distributed to multiple locations.
    The data files such as Ansible tasks, handlers, arbitrary files, even binary files
    can be encrypted with Vault as well. These are decrypted at the destination on
    target host.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Vault 是一个用于将敏感数据以加密形式存储的功能，例如密码或密钥，而不是将它们以明文形式保存在角色或剧本中。这些 Vault 文件可以放入源代码控制或分发到多个位置。数据文件，如
    Ansible 任务、处理程序、任意文件，甚至二进制文件，也可以通过 Vault 加密。这些文件会在目标主机上解密。
- en: Ansible Galaxy
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible Galaxy
- en: Ansible Galaxy is an open source website designed for community information
    and contributing to collaborate on building IT automation solutions to bring together
    administrators and developers. There are preconfigured roles to download and jump
    start automation projects with Galaxy search index. These are also available with
    a GitHub account.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Galaxy是一个开源网站，旨在为社区信息提供平台，并促进在构建IT自动化解决方案中的协作，旨在将管理员和开发人员汇集在一起。该网站提供了预配置的角色，可以通过Galaxy搜索索引下载并快速启动自动化项目。这些也可以通过GitHub账户访问。
- en: Testing Strategies with Ansible
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Ansible的测试策略
- en: Though testing is a very organizational and site-specific concept, Ansible Integrated
    Testing with Ansible playbooks is designed as an ordered and fail-fast system.
    It facilitates embed testing directly in Ansible playbooks through a push-based
    mechanism.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管测试是一个非常组织化且特定于站点的概念，Ansible集成测试通过Ansible playbook设计为一个有序且快速失败的系统。它通过基于推送的机制，直接在Ansible
    playbook中嵌入测试。
- en: Ansible playbooks are models of desired-state of the system that will ensure
    the things declared, such as services to be started and packages installed, are
    in accordance with declarative statements. Ansible is an order-based system on
    unhandled errors. A host will fail immediately and prevent further configuration
    of that host and shows them as a summary at the end of the Ansible run. Ansible
    is a multi-tier orchestration system to incorporate tests into the playbook run,
    either as tasks or roles.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible playbook是系统理想状态的模型，确保声明的内容，如要启动的服务和要安装的包，符合声明性语句。Ansible是一个基于顺序的系统，对于未处理的错误，主机会立即失败并阻止该主机的进一步配置，并在Ansible运行结束时显示总结。Ansible是一个多层次的编排系统，将测试整合到playbook运行中，无论是作为任务还是角色。
- en: Testing the application for integrating tests of infrastructure before deployment
    in the workflow will be effective to check the code quality and performance before
    it moves to production systems. Being push-based, the checks and balances in the
    workflow and even upgrading is very easy to maintain on the localhost or test
    servers.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署工作流中集成基础设施测试的应用测试，将有效地检查代码质量和性能，在进入生产系统之前。由于是基于推送的机制，工作流中的检查和均衡，甚至升级，都非常容易在本地或测试服务器上维护。
- en: Monitoring
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控
- en: 'Enterprise monitoring is a primary activity and it categorizes monitoring development
    milestones, application logs, server health, operations, infrastructure, vulnerabilities,
    deployments, and user activity. These are accomplished with:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 企业监控是主要活动，它分类了监控开发的里程碑、应用日志、服务器健康状况、操作、基础设施、漏洞、部署和用户活动。这些通过以下方式实现：
- en: Collecting and key messages
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集和关键信息
- en: Mature monitoring tools
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成熟的监控工具
- en: Avoid perceptions and making decisions based on uncertainty
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免基于不确定性做出感知和决策
- en: Participative monitoring and evaluation
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参与式监控与评估
- en: Selecting and using right indicators
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择和使用正确的指标
- en: Interpreting indicator results in business context
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在业务上下文中解释指标结果
- en: Real-time data collection
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时数据收集
- en: Managing data and information
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理数据和信息
- en: 'Development Milestones: Monitoring of development milestones is an indicator
    of how well your DevOps adoption strategy is working by gaining insights of the
    actual process and team effectively. Some of the metrics are sprint scope changes,
    bugs count of field and fixed, and the ratio of promised-to-delivered features.
    These metrics are the drivers on team effectiveness and adherence to the schedule,
    this monitoring is built-in as an Agile plugin for issue tracking.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 开发里程碑：监控开发里程碑是衡量你的DevOps采纳策略有效性的指标，通过深入了解实际过程和团队的表现。一些度量指标包括冲刺范围的变化、现场和修复的错误数量以及承诺与交付功能的比例。这些度量指标是团队效率和遵守计划的推动因素，这项监控作为敏捷插件集成在问题跟踪中。
- en: 'Code Vulnerabilities: Monitoring vulnerabilities in application code, lists
    the weaknesses induced in the top-level code by insecure coding practices. These
    can be addressed by conducting regular code reviews or changing third-party dependencies,
    and so on.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 代码漏洞：监控应用代码中的漏洞，列出了由于不安全的编码实践而在顶层代码中引入的弱点。这些可以通过定期进行代码审查或更改第三方依赖项等方式来解决。
- en: 'Deployments: Deployment monitoring is configuring your build servers to have
    some monitoring built into the process to notify the team. Notification-capable
    continuous integration servers communicate with chat servers and promptly alert
    teams of failed builds and deployments.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 部署：部署监控是配置构建服务器，使其在过程中内置一些监控，及时通知团队。支持通知的持续集成服务器与聊天服务器通信，及时提醒团队构建和部署失败。
- en: 'Application log output: Application log output to be planned for centralized
    logging if services are distributed to gain full benefit, errors and exceptions
    provides value in real-time. The ability to trace notifications from error-producing
    code in a searchable format generates benefit, before production move.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 应用日志输出：如果服务是分布式的，应用日志输出应规划为集中式日志记录，以充分受益，错误和异常提供实时价值。从错误产生代码中追踪通知的能力以可搜索格式生成收益，提前了解生产前的情况。
- en: 'Server Health: Monitoring of uptime and performance of available resources
    downed or over-utilized servers fall in this category. Intrusion detection and
    health monitoring systems being on the same notification pipeline will provide
    additional value.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器健康：监控可用资源的正常运行时间和性能，停机或过度使用的服务器属于此类别。入侵检测和健康监控系统与同一通知管道上的结合将提供额外的价值。
- en: 'Activity Monitoring: User activity monitoring is both feature development and
    the scaling of infrastructure. Along with monitoring development milestones volume
    of data is monitored.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 活动监控：用户活动监控既是功能开发，也是基础设施的扩展。随着监控开发的里程碑，数据量也在被监控。
- en: The centralized storage of consolidated logging data for application logs, user
    activity monitoring, and project history enhances the value to detect and analyze
    in a global context correlating different log sources about the state of the application
    and the project.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 集中存储应用日志、用户活动监控和项目历史的合并日志数据，增强了在全球范围内关联不同日志源，分析应用程序和项目状态的价值。
- en: Splunk
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Splunk
- en: Splunk is a popular application monitoring tool to gain real-time visibility
    into DevOps-driven application delivery for Continuous Delivery or Continuous
    Integration to move from concept to production quickly. Splunk enterprise helps
    improve the business impact of application delivery by enhancing velocity and
    quality.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: Splunk 是一种流行的应用监控工具，可以实时查看由 DevOps 驱动的应用交付，支持持续交付或持续集成，从概念到生产的快速迁移。Splunk 企业版通过提高速度和质量，帮助改善应用交付对业务的影响。
- en: '![Splunk](img/00093.jpeg)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![Splunk](img/00093.jpeg)'
- en: 'Splunk improves code quality with the following benefits:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Splunk 通过以下好处提高代码质量：
- en: Resolve code issues before customers see them
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户看到问题之前解决代码问题
- en: Detect and fix issues related to production faster
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快地检测并修复与生产相关的问题
- en: Objective metrics are available to ensure code is operational and meets quality
    SLAs
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供客观的指标，以确保代码是可操作的并满足质量 SLA。
- en: Splunk is a platform to capture and record all the activity and behavior of
    your customers, machine data, users, transactions, applications, servers, networks,
    and mobile devices.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: Splunk 是一个平台，用于捕捉和记录客户、机器数据、用户、交易、应用程序、服务器、网络和移动设备的所有活动和行为。
- en: The Splunk platform enhances its business impact by integrated real-time insights
    from application development to testing to production monitoring. It provides
    cohesive views across all stages of the delivery life cycle as opposed to discrete
    release components.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: Splunk 平台通过集成的实时洞察，从应用开发到测试再到生产监控，提升了其对业务的影响。它提供了跨所有交付生命周期阶段的一体化视图，而不是离散的发布组件。
- en: Real-time visibility into business-relevant data for business and DevOps leaders
    on both development and operations, such as application performance, usage, revenue
    systems, cart fulfillment, and registration data provides insights to better plan
    inventory and report and improve the customer experience.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 为业务和 DevOps 领导者提供关于开发和运营的业务相关数据的实时可视化，如应用性能、使用情况、收入系统、购物车履行和注册数据，提供洞察以更好地规划库存、报告并改善客户体验。
- en: 'Development life cycle integration and visibility across diverse, multiple
    supported phases and applications is supported:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 支持开发生命周期的集成和跨多阶段、多个应用程序的可视化：
- en: 'Operations lifecycle integration and visibility across diverse, multiple supported
    phases and application is supported. Applications are delivered faster using analytics:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 操作生命周期集成和跨多个阶段和应用程序的可视化得到支持。使用分析，应用程序交付速度更快：
- en: End-to-end visibility across every DevOps delivery tool chain component
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨每个 DevOps 交付工具链组件的端到端可视化
- en: Correlated insights that iterate faster across the application delivery lifecycle
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用交付生命周期中，更快迭代的相关洞察
- en: Measuring and benchmarking release contributions and improving DevOps team efficiency
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量和基准化版本贡献，提升 DevOps 团队效率
- en: Splunk helps organizations by enabling a feedback loop to business leaders,
    evaluating the real impact of code changes on their customers. Continuous interaction
    helps to build more intelligence about machine behavior and deep asset models.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: Splunk 通过帮助组织建立反馈循环，评估代码变更对客户的实际影响，从而支持企业领导。持续的互动有助于构建有关机器行为和深度资产模型的更多智能。
- en: 'The benefits reflect the business impact of application delivery:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 这些好处反映了应用交付的业务影响：
- en: Gain new business insights by correlating business metrics with code changes
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将业务指标与代码变更相关联，获得新的业务洞察
- en: Enhance user experience through delivery of better-performing code
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过交付性能更好的代码，增强用户体验
- en: Delivering more secure and compliant code improves reputation
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供更安全、合规的代码有助于提升声誉
- en: Nagios Monitoring Tool for Infrastructure
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nagios 基础设施监控工具
- en: 'There are multiple variants of the Nagios open source tool for monitoring mission-critical
    infrastructure components specific to each segment on any operating system:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios 开源工具有多种变体，适用于各个操作系统上的每个分段，专门用于监控关键任务基础设施组件：
- en: Network monitoring software
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络监控软件
- en: Network traffic monitoring
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络流量监控
- en: Server (Linux, Windows) monitoring
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器（Linux、Windows）监控
- en: Application monitoring tools
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序监控工具
- en: Web application monitoring
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 应用程序监控
- en: Monitoring core engine and a basic web interface
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心引擎和基础 web 界面监控
- en: Nagios core plugins package with add-ons
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nagios 核心插件包与附加组件
- en: Nagios log server security threats with audit system
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nagios 日志服务器安全威胁与审计系统
- en: Nagios facilitates monitoring of the network for problems such as overloaded
    data links, network connections, monitoring routers, switches, problems caused
    by overloaded of crashed servers, and so on.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios 促进了对网络问题的监控，如数据链路过载、网络连接问题、监控路由器、交换机、服务器过载或崩溃等引发的问题。
- en: Nagios can deliver the metric results in a variety of visual representations
    and reports to monitor availability, uptime, and response time of every node on
    the network with both agent-based and agent-less monitoring.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios 可以通过多种可视化表现形式和报告提供指标结果，监控网络中每个节点的可用性、正常运行时间和响应时间，支持基于代理和无代理的监控。
- en: Effective application monitoring with Nagios enables organizations to quickly
    detect applications, services, or process problems, and take corrective action
    to prevent downtime for your application users.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Nagios 进行有效的应用监控可以帮助组织快速发现应用程序、服务或进程问题，并采取纠正措施，以防止应用程序用户出现停机。
- en: Nagios tools for monitoring of applications and application state extends to
    Windows applications, Linux applications, Unix applications, and web applications.
    It has an active community collaboration network.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios 工具用于监控应用程序及其状态，涵盖 Windows 应用程序、Linux 应用程序、Unix 应用程序和 Web 应用程序。它拥有一个活跃的社区合作网络。
- en: The router monitoring capabilities offer benefits such as immediate notification
    on unresponsive machines, early warning by detecting network outages and protocol
    failures, increased servers, services, and application availability.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器监控功能提供的好处包括：对无响应机器的即时通知、通过检测网络中断和协议失败进行预警、提高服务器、服务和应用程序的可用性。
- en: Windows monitoring with Nagios enables increased servers, services, and application
    availability, quick detection of network outages, failed services, processes,
    batch jobs and protocol failures, and so on. The extensive metrics are gathered
    for system metrics, event logs, applications (IIS, Exchange, and so on), services
    (Active Directory, DHCP, service states, process states, performance counters,
    and so on).
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Nagios 进行 Windows 监控可提高服务器、服务和应用程序的可用性，快速检测网络中断、服务失败、进程问题、批处理作业和协议失败等。系统指标、事件日志、应用程序（IIS、Exchange
    等）、服务（Active Directory、DHCP、服务状态、进程状态、性能计数器等）收集了大量数据。
- en: Nagios – Enterprise Server and Network Monitoring Software
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nagios – 企业级服务器和网络监控软件
- en: 'Built-in advanced features are:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的高级功能包括：
- en: Integrated overview of sources, checks, network flow data, and so on, provided
    with comprehensive dashboard
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供综合仪表盘，整合源、检查、网络流量数据等的概览
- en: Alert of suspicious network activity by security and reliability network analyzer.
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性和可靠性网络分析器的可疑网络活动警报
- en: Insights and drill down options on network traffic, bandwidth, overall network
    health, and so on, with advanced visualizations
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供关于网络流量、带宽、整体网络健康等的深入洞察和钻取选项，并附有高级可视化功能
- en: Monitor network usage of specific applications, custom application monitoring,
    custom queries, views, and reports are available
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控特定应用程序的网络使用情况，提供自定义应用程序监控、自定义查询、视图和报告
- en: Historical network flow data with subsets of network flow information through
    specialized views
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过专业视图显示的历史网络流量数据和子集网络流量信息
- en: Abnormal activity alerts with automated alert system example bandwidth usage
    exceeds specified thresholds
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常活动警报，具有自动警报系统，例如带宽使用超过指定阈值
- en: Integrated metrics of network analyzer server loads with hard disk space availability
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成的网络分析服务器负载与硬盘空间可用性度量
- en: Integrated Dashboards for Network Analysis, Monitoring, and Bandwidth
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于网络分析、监控和带宽的集成仪表板
- en: The Nagios dashboard with multiple monitoring options such as source groups,
    Server CPU, disk usage, and so on, can be extended and customized with many more
    choices based on business requirements.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: Nagios仪表板具有多种监控选项，例如源组、服务器CPU、磁盘使用情况等，可以根据业务需求扩展和自定义更多选择。
- en: Summary
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this lesson, we learned infrastructure configuration management as code for
    continuous deployment with tools such as Chef, Puppet, and Ansible and also continuous
    monitoring process with tools Splunk and Nagios.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 本课我们学习了使用Chef、Puppet和Ansible等工具进行基础设施配置管理，以实现持续部署，并且学习了使用Splunk和Nagios进行持续监控的过程。
- en: With this, we've come to the end of this book. I hope you'd a smooth journey
    and gained a lot of knowledge on DevOps.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经完成了本书的内容。我希望你在旅程中顺利，收获了许多关于DevOps的知识。
- en: I wish you all the best for your future projects. Keep learning and exploring!
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 祝愿你未来的项目一切顺利。继续学习和探索！
- en: Assessments
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Which among the following is the order for continuous delivery alignment?
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是持续交付对齐的顺序？
- en: Build, Code, Integrate, Release
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建、代码、集成、发布
- en: Code, Build, Integrate, Release
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码、构建、集成、发布
- en: Build, Code, Release, Integrate
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建、代码、发布、集成
- en: Code, Build, Release, Integrate
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码、构建、发布、集成
- en: Which among the following are tools for continuous deployment?
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些是持续部署的工具？
- en: Git
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git
- en: Nagios
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Nagios
- en: JUnit
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: JUnit
- en: Jenkins
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins
- en: 'A resource is a configuration policy statement that:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资源是一个配置策略声明，它：
- en: Includes all that is required to configure the system
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括配置系统所需的一切
- en: Facilitates the creation of arbitrary groupings by tagging a node
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过给节点打标签，便于创建任意分组
- en: Describes the desired state of the configured item
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述已配置项的期望状态
- en: Executes in the same sequence as listed in a run list
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照运行列表中列出的顺序执行
- en: Which of the following comes with a prescribed packaging format for application
    automation.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项包含用于应用自动化的规定打包格式？
- en: Habitat
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Habitat
- en: InSpec
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: InSpec
- en: Chef
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Chef
- en: Ansible
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ansible
- en: ________ are the configuration programs written in YAML to automate the systems.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ________ 是用YAML编写的配置程序，用于自动化系统。
- en: CMDB
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CMDB
- en: Modules
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块
- en: Playbooks
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Playbooks
- en: Inventory
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 库存
