- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping Automation Simple and Efficient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is a simple and powerful automation tool. We can automate any kind of
    workflow using Ansible but if we increase complexity in automation, we decrease
    efficiency, which kills productivity. When you design an automated solution or
    use case, you must consider multiple factors, such as the capability of the tool
    and flexibility in adjusting the automation’s flow or scalability.
  prefs: []
  type: TYPE_NORMAL
- en: For example, it is possible to write simple playbooks to monitor the service
    status in a system or to check the health of an application. But this is not efficient
    as you need other arrangements such as job schedulers to execute the job at regular
    intervals and monitor the execution. Instead of using Ansible natively for complex
    automation tasks, we can utilize the integration capabilities of the Ansible automation
    controller and other systems. We can use the existing tools for monitoring, logging,
    and security control, and use Ansible for remediation actions such as starting
    services and blocking ports and IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing surveys and automated inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Ansible with monitoring tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible for security automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible workflow templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start by looking at various survey features in the automation controller
    and continue with Ansible integration topics.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic knowledge of monitoring and logging platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General knowledge about security platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic knowledge about **IT Service Management** (**ITSM**) tools (Jira and ServiceNow)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the **Ansible Automation Platform** (**AAP**) environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the Ansible artifacts, commands, and snippets for this chapter can be found
    in this book’s GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-14](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-14).
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing surveys and automated inputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 8*](B18383_08.xhtml#_idTextAnchor144), *Helping the Database Team
    with Automation*, you learned the advantages of integrating Jira service management
    with Ansible to automate database operations. Instead of copying the input details
    from the Jira ticket to the Ansible automation controller, you learned how to
    integrate with Jira and pass the variables automatically. This enables zero-touch
    integration without needing to input the details for the automation job, such
    as the database name, server name, database username, or database tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'You learned about similar samples in *Chapter 12*, *Integrating Jenkins with
    Ansible Automation Platform*, where Jenkins calls the Ansible automation controller
    API to execute the job template. From the Ansible automation controller, you used
    survey fields and elegant forms to pass such information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Survey form for the PostgreSQL – Create Database and User Access
    job template ](img/B18383_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – Survey form for the PostgreSQL – Create Database and User Access
    job template
  prefs: []
  type: TYPE_NORMAL
- en: When we integrate this job template with external tools such as Jenkins, we
    need to provide the input (database user, database, or table) in a non-interactive
    way. This is where we used Jenkins (or Jira in the previous example) to call the
    Job template with all the required information, including the database user, database
    name, table, and user details as extra variables.
  prefs: []
  type: TYPE_NORMAL
- en: Also, by integrating with the existing ITSM and request management tools, it
    is possible to enhance the automation system and offload the input form creation
    (survey form) overhead from the Ansible automation controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the high-level communication that happens between
    the tools, AAP, and managed nodes or platforms. The external tools can pass all
    the required information to the AAP API as extra variables and implement the non-interactive
    workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Triggering AAP job templates with extra variables from other
    platforms ](img/B18383_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – Triggering AAP job templates with extra variables from other platforms
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have learned about one of the best practices in Ansible, called
    *softcoding* (the opposite of hardcoding). This means accepting the parameters
    while executing the automation job.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, you will learn about the advantages of integrating
    Ansible with other security and monitoring tools rather than using Ansible natively
    for such purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Ansible with monitoring tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because Ansible is flexible and can automate most of your day-to-day jobs,
    it is a common practice to automate every possible use case, even if it is not
    efficient. One of the so-called non-standard use cases we have learned from the
    community is using Ansible for monitoring purposes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the service or application status in a system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running health checks on endpoints (applications, web services, or clusters)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring network and security device rules or status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows a typical scenario where Ansible automation jobs
    are scheduled to run health checks on managed nodes or applications. These jobs
    can be either running as **cron** jobs from an Ansible control node or as a scheduled
    job in an Ansible automation controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Using scheduled automation jobs for monitoring ](img/B18383_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – Using scheduled automation jobs for monitoring
  prefs: []
  type: TYPE_NORMAL
- en: 'This method is possible and easy to implement but is not efficient. It has
    many disadvantages, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You have less control over the frequency of monitoring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s computing overhead on the Ansible control node or the automation controller.
    The number of monitoring targets will increase this overhead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have less control over the execution time as some jobs may take more time
    and the next jobs in the queue may be delayed as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to create a lot of Ansible playbooks, depending on the target items
    to be monitored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instead of using Ansible playbooks to execute the frequent monitoring job,
    we can use the standard monitoring tools that are already in place and do their
    jobs efficiently. The following diagram shows the high-level integration between
    monitoring and logging tools, ITSM software, and Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Ansible integration with logging and monitoring tools ](img/B18383_14_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Ansible integration with logging and monitoring tools
  prefs: []
  type: TYPE_NORMAL
- en: The monitoring and logging agents can effectively do their job and report the
    alerts, incidents, and issues to a central database system. Based on the organization’s
    requirements and infrastructure landscape, the monitoring stack may contain different
    components and multiple moving parts. The monitoring and logging tools can integrate
    with your ITSM tools to log the incidents and alerts in the ITSM incident management
    system. Also, the ITSM tools can be integrated with Red Hat AAP for automated
    remediations. You will learn more about this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The role of Ansible in monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several use cases in the monitoring and alerting area for which we
    can use Ansible to automate the operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement automatic job triggers on the automation controller via an API call.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated remediation and deployment based on the API calls from the monitoring
    tools or ITSM tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy monitoring agents and configurations on the managed nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement configuration hardening based on alerts and API calls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the typical integration and workflow based on AAP
    and automated job executions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Monitoring and alert workflow in Ansible ](img/B18383_14_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – Monitoring and alert workflow in Ansible
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding diagram, the following actions occur:'
  prefs: []
  type: TYPE_NORMAL
- en: By monitoring the agents on the hosts or services, it is possible detect incidents
    and alerts such as system issues, security incidents, or application health issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring and logging tools create incidents in ITSM and security monitoring
    tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring and logging tools can also trigger alerts (or API calls) directly
    on the automation controller API to trigger the job.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ITSM tools trigger API calls based on rules, workflows, and scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the API call, the automation controller executes the configured job
    template and remediates the incident.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The automation controller also updates the incident ticket automatically with
    the remediation job status and ticket status (for example, close the ticket or
    update the review status).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible and ServiceNow Integration
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the integration between Ansible and ServiceNow, read *Ansible
    + ServiceNow Part 3: Making outbound RESTful API calls to Red Hat Ansible Tower*
    ([https://www.ansible.com/blog/ansible-servicenow-howto-part-3-making-outbound-restful-api-calls-to-ansible-tower](https://www.ansible.com/blog/ansible-servicenow-howto-part-3-making-outbound-restful-api-calls-to-ansible-tower)).
    Also check [https://www.ansible.com/integrations/it-service-management/servicenow](https://www.ansible.com/integrations/it-service-management/servicenow)
    for additional references on this topic.'
  prefs: []
  type: TYPE_NORMAL
- en: You will explore this integration with a use case in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: ServiceNow, Ansible, and zero-touch incident fixes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will learn about the important integration and connection
    points for a zero-touch incident fix with **ServiceNow** (also known as **SNOW**)
    and Ansible. A typical workflow can be seen in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – Typical incident automation workflow ](img/B18383_14_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – Typical incident automation workflow
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the monitoring agent and ServiceNow instances is outside the scope
    of this book, so we will only focus on the Ansible portion. It is possible to
    replace ServiceNow with other ITSM tools such as Jira service management or BMC
    Remedy, so long as the tool can trigger API calls to AAP for automation jobs.
  prefs: []
  type: TYPE_NORMAL
- en: ServiceNow Workflow
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the ServiceNow documentation at [https://www.servicenow.com/products/workflow.xhtml](https://www.servicenow.com/products/workflow.xhtml)
    to learn more about its workflow automation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once an incident has been created in the service management system, the Ansible
    automation controller will receive the API call based on the workflow’s configuration.
    For example, we have configured a job template called **PostgreSQL - Service Start**
    in the automation controller, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 – The PostgreSQL – Service Start job template ](img/B18383_14_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – The PostgreSQL – Service Start job template
  prefs: []
  type: TYPE_NORMAL
- en: 'The Ansible playbook contains a few tasks for updating the incident ticket
    and also for restarting the PostgreSQL service. The first step is to update the
    incident ticket with the `In progress` status, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8 – Task to update the ServiceNow ticket ](img/B18383_14_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.8 – Task to update the ServiceNow ticket
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add a task that will start the PostgreSQL service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.9 – Task for starting the PostgreSQL service ](img/B18383_14_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.9 – Task for starting the PostgreSQL service
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add a task that will update the ticket to show that it’s been resolved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10 – Updating the ticket’s status to resolved ](img/B18383_14_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.10 – Updating the ticket’s status to resolved
  prefs: []
  type: TYPE_NORMAL
- en: Expand the playbook with more validations and ticket status updates to meet
    the ITSM processes in your organization and requirements. If required, you can
    even add the task of updating the ticket as closed.
  prefs: []
  type: TYPE_NORMAL
- en: The Life Cycle of an Incident in ServiceNow
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the ServiceNow documentation ([https://docs.servicenow.com/en-US/bundle/sandiego-it-service-management/page/product/incident-management/concept/c_IncidentManagementStateModel.xhtml](https://docs.servicenow.com/en-US/bundle/sandiego-it-service-management/page/product/incident-management/concept/c_IncidentManagementStateModel.xhtml))
    to learn more about the incident life cycle. Also, refer to the Ansible blog post
    at [https://www.ansible.com/blog/ansible-servicenow-opening-and-closing-tickets](https://www.ansible.com/blog/ansible-servicenow-opening-and-closing-tickets)
    to learn more about ServiceNow integration with Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: 'There will be cases where someone has stopped the PostgreSQL service for some
    activities; Ansible should be aware of this. It is possible to create a maintenance
    tracking system using your ITSM tool or third-party solutions, where system maintenance
    details can be updated with time slots to efficiently handle the incident ticket,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The ITSM tool detects the system maintenance window and updates the ticket as
    a false alarm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add tasks to the Ansible playbook to check against this maintenance window and
    update the alert as a false alarm if the system is in that maintenance window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that, you’ve explored some of the possibilities of integrating Ansible
    with various monitoring and logging systems. In the next section, you will learn
    how to use Ansible with security automation solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible for security automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security hardening is the practice of securing the hosts, networking devices,
    and applications by reducing the attack surface. There are multiple ways to implement
    security hardening, such as configuring the system appropriately, installing the
    latest version of the software (or firmware), or disabling unwanted configurations.
    Organizations use different security benchmarking methods and standards based
    on the requirements. **Center for Internet Security** (**CIS**) is one of the
    well-known organizations that provides the necessary enterprise standard benchmarks
    and CIS controls ([https://www.cisecurity.org/about-us](https://www.cisecurity.org/about-us)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in and download the benchmark documents for operating systems or platforms
    for free, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11 – CIS Benchmark download page for Kubernetes  ](img/B18383_14_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.11 – CIS Benchmark download page for Kubernetes
  prefs: []
  type: TYPE_NORMAL
- en: It is not easy to configure the systems based on these benchmarks as hundreds
    of rules and configuration items must be executed to secure the system. Organizations
    use different methods to achieve these configurations, such as shell scripts,
    PowerShell scripts, and Ansible automation. Due to their flexibility and modularity,
    Ansible playbooks are much more efficient and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to execute the CIS hardening playbooks frequently using Ansible
    or an automation controller (scheduled jobs) to ensure the system has a good security
    posture. However, this method will not be effective for detecting and remediating
    the threats and incidents on time.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you learned in the previous section, it is also possible to utilize the
    power of security tools and solutions and integrate them with Ansible to automate
    various security operations, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security information and event management** (**SIEM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intrusion detection & prevention system** (**IDPS**) tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privileged access management** (**PAM**) operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Endpoint protection platform** (**EPP**) tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewall operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows a typical threat detection and automation workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12 – Threat detection and automated remediation ](img/B18383_14_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.12 – Threat detection and automated remediation
  prefs: []
  type: TYPE_NORMAL
- en: By using the existing security solutions, it is possible to offload the detection
    and response overhead from Ansible but still use the power of Ansible to remediate
    the security issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible has a large collection of community modules and collections available
    to support the automation of security devices and solutions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Cisco ASA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FortiGate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Palo Alto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: F5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CheckPoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CyberArk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trend Micro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible Collection for Security Automation
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the Ansible collection index ([https://docs.ansible.com/ansible/latest/collections/index.xhtml](https://docs.ansible.com/ansible/latest/collections/index.xhtml))
    to find the security-related collections. Also, check out *Security Automation
    with Red Hat Ansible Automation Platform* ([https://access.redhat.com/articles/4001711](https://access.redhat.com/articles/4001711))
    to learn more about the platform’s compatibility matrix. Finally, please read
    the blog post *Getting started with Ansible security automation: investigation
    enrichment* ([https://www.ansible.com/blog/getting-started-with-ansible-security-automation-investigation-enrichment](https://www.ansible.com/blog/getting-started-with-ansible-security-automation-investigation-enrichment))
    to understand the security automation and integration with AAP.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of automatic IP address blocking can be seen in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.13 – Automated IP address blocking ](img/B18383_14_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.13 – Automated IP address blocking
  prefs: []
  type: TYPE_NORMAL
- en: With the help of Ansible modules, most of your security-related operations can
    be automated efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, adding an `cisco.asa.asa_acls` module, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.14 – Adding an access control rule to the Cisco ASA device ](img/B18383_14_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.14 – Adding an access control rule to the Cisco ASA device
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a simple Ansible task using the `fortinet.fortios.fortios_firewall_address`
    module to block the IP address in the FortiGate device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.15 – Blocking the IP address in the FortiGate device ](img/B18383_14_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.15 – Blocking the IP address in the FortiGate device
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, the following screenshot shows adding a security rule to the Palo
    Alto device using the `paloaltonetworks.panos.panos_security_rule` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.16 – Adding a security rule to the Palo Alto device ](img/B18383_14_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.16 – Adding a security rule to the Palo Alto device
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the *Further reading* section for more resources about security
    automation modules in Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about the workflow templates in the automation
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible workflow templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is possible to create any number of tasks in a single playbook and make
    it a long workflow. For example, a Linux operating system job template can include
    the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a VM snapshot before you start patching.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the configuration file backups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop the services inside the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform various Linux operating system patching tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the system to boot up and start the necessary services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handle the VM snapshot restore operation in the same job if the VM reboot is
    not successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that most of the tasks can be reused as individual jobs for creating snapshots,
    stopping services, or configuration backup.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of developing long, complex job templates, utilize the workflow templates
    in the automation controller to create modular job workflows and handle tasks
    based on success/failure status. Workflow templates are created by stitching multiple
    job templates together to achieve a bigger or more complex workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the high-level differences between a job template
    and a workflow template in an Ansible automation controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.17 – Job templates versus workflow templates ](img/B18383_14_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.17 – Job templates versus workflow templates
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a simple workflow template for Linux operating
    system patching. Here, we have multiple tasks, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a snapshot job before patching.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a job template to stop the important and dependency services inside the
    system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform operating system patching tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the reboot succeeded, all the required services will be started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the reboot failed, the job template for restoring the snapshot will be executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.18 – Workflow template for operating system patching ](img/B18383_14_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.18 – Workflow template for operating system patching
  prefs: []
  type: TYPE_NORMAL
- en: 'This modular approach helps you implement complex automation workflows by reusing
    the job templates. The following screenshot shows a similar workflow where the
    operating system-specific job templates have been replaced and other job templates
    are being reused:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.19 – Windows patching workflow ](img/B18383_14_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.19 – Windows patching workflow
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Workflow Job Templates
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [https://docs.ansible.com/automation-controller/4.1.2/html/userguide/workflow_templates.xhtml](https://docs.ansible.com/automation-controller/4.1.2/html/userguide/workflow_templates.xhtml)
    to learn more about the features of workflow templates, such as webhooks and integration
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the importance of simplifying Ansible automation.
    You explored the advantages of survey features in the automation controller and
    soft coding opportunities to accept parameters dynamically. This method helps
    you reuse the same playbook and job templates for different devices and scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you learned about the integration options between Ansible and other monitoring
    and alerting tools to implement zero-touch incident fixes. It is possible to utilize
    the existing ITSM tools and workflows to trigger Ansible automation controller
    jobs based on the rules and conditions. By utilizing the power of monitoring tools
    and the automation capabilities of Ansible, an efficient monitoring and remediation
    system can be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you explored similar integration opportunities within the security
    domain for automating threat detection and automated remediation using an automation
    controller. The security modules and collections for Ansible automation help you
    implement complex and enhanced security automation solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned about the workflow templates in an automation controller,
    the modular way of creating workflows, and the advantages of reusing job templates.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to automate non-standard and non-supported
    platforms using Ansible. You will explore some of the useful modules and Ansible
    custom module creation basics as well.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ansible for Security Automation*: [https://www.ansible.com/use-cases/security-automation](https://www.ansible.com/use-cases/security-automation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible blog on security automation*: [https://www.ansible.com/blog/topic/security-automation](https://www.ansible.com/blog/topic/security-automation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Security & Compliance Using Ansible*: [https://www.ansible.com/use-cases/security-and-compliance](https://www.ansible.com/use-cases/security-and-compliance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible Collections*: [https://docs.ansible.com/ansible/latest/collections/index.xhtml#list-of-collections](https://docs.ansible.com/ansible/latest/collections/index.xhtml#list-of-collections)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Applications in Ansible automation controller*: [https://docs.ansible.com/automation-controller/latest/html/userguide/applications_auth.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/applications_auth.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ansible for Network Automation*: [https://docs.ansible.com/ansible/latest/network/index.xhtml](https://docs.ansible.com/ansible/latest/network/index.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
