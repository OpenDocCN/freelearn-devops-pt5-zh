["```\nvariable \"aws-region\" { \n  type = \"string\" \n  description = \"AWS region\" \n} \nvariable \"vpc-cidr\" { \n  type = \"string\" \n  description = \"VPC CIDR\" \n} \nvariable \"vpc-name\" { \n  type = \"string\" \n  description = \"VPC name\" \n} \nvariable \"aws-availability-zones\" { \n  type = \"string\" \n  description = \"AWS zones\" \n} \n\n```", "```\nvariable \"jenkins-ami-id\" { \n  type=\"string\" \n  description = \"EC2 AMI identifier\" \n} \nvariable \"jenkins-instance-type\" { \n  type = \"string\" \n  description = \"EC2 instance type\" \n} \nvariable \"jenkins-key-name\" { \n  type = \"string\" \n  description = \"EC2 ssh key name\" \n} \n\n```", "```\naws-region = \"us-east-1\" \nvpc-cidr = \"10.0.0.0/16\" \nvpc-name = \"Terraform\" \naws-availability-zones = \"us-east-1b,us-east-1c\" \n\n```", "```\njenkins-ami-id = \"ami-6869aa05\" \njenkins-instance-type = \"t2.nano\" \njenkins-key-name = \"terraform\" \n\n```", "```\n# Set a Provider \nprovider \"aws\" { \n  region = \"${var.aws-region}\" \n} \n\n# Create a VPC \nresource \"aws_vpc\" \"terraform-vpc\" { \n  cidr_block = \"${var.vpc-cidr}\" \n\n  tags { \n    Name = \"${var.vpc-name}\" \n  } \n} \n\n```", "```\n# Create an Internet Gateway \nresource \"aws_internet_gateway\" \"terraform-igw\" { \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n} \n\n```", "```\n# Create public route tables \nresource \"aws_route_table\" \"public\" { \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n  route { \n    cidr_block = \"0.0.0.0/0\" \n    gateway_id = \"${aws_internet_gateway.terraform-igw.id}\" \n  } \n\n  tags { \n    Name = \"Public\" \n  } \n} \n\n```", "```\n# Create and associate public subnets with a route table \nresource \"aws_subnet\" \"public-1\" { \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n  cidr_block = \"${cidrsubnet(var.vpc-cidr, 8, 1)}\" \n  availability_zone = \"${element(split(\",\",var.aws-availability-zones), count.index)}\" \n  map_public_ip_on_launch = true \n\n  tags { \n    Name = \"Public\" \n  } \n} \n\nresource \"aws_route_table_association\" \"public-1\" { \n  subnet_id = \"${aws_subnet.public-1.id}\" \n  route_table_id = \"${aws_route_table.public.id}\" \n} \n\n```", "```\nresource \"aws_security_group\" \"jenkins\" { \n  name = \"jenkins\" \n  description = \"ec2 instance security group\" \n  vpc_id = \"${aws_vpc.terraform-vpc.id}\" \n\n  ingress { \n    from_port = \"22\" \n    to_port = \"22\" \n    protocol = \"tcp\" \n    cidr_blocks = [\"0.0.0.0/0\"] \n  } \n\n  ingress { \n    from_port = \"80\" \n    to_port = \"80\" \n    protocol = \"tcp\" \n    cidr_blocks = [\"0.0.0.0/0\"] \n  } \n\n  ingress { \n    from_port = \"443\" \n    to_port = \"443\" \n    protocol = \"tcp\" \n    cidr_blocks = [\"0.0.0.0/0\"] \n  } \n\n  egress { \n    from_port = 0 \n    to_port = 0 \n    protocol = \"-1\" \n    cidr_blocks = [\"0.0.0.0/0\"] \n  } \n\n} \n\n```", "```\nresource \"aws_iam_role\" \"jenkins\" { \n    name = \"jenkins\" \n    path = \"/\" \n    assume_role_policy = <<EOF \n{ \n  \"Version\": \"2012-10-17\", \n  \"Statement\": [ \n    { \n      \"Action\": \"sts:AssumeRole\", \n      \"Principal\": { \n        \"Service\": \"ec2.amazonaws.com\" \n      }, \n      \"Effect\": \"Allow\", \n      \"Sid\": \"\" \n    } \n  ] \n} \nEOF \n} \n\n```", "```\nresource \"aws_iam_role_policy\" \"jenkins\" { \n    name = \"jenkins\" \n    role = \"${aws_iam_role.jenkins.id}\" \n    policy = <<EOF \n{ \n    \"Version\": \"2012-10-17\", \n    \"Statement\": [ \n       { \n            \"Effect\": \"Allow\", \n            \"Action\": [ \n                \"codecommit:Get*\", \n                \"codecommit:GitPull\", \n                \"codecommit:List*\" \n            ], \n            \"Resource\": \"*\" \n       }, \n       { \n            \"Effect\": \"Allow\", \n            \"NotAction\": [ \n                \"s3:DeleteBucket\" \n            ], \n            \"Resource\": \"*\" \n        } \n    ] \n} \nEOF \n} \n\n```", "```\nresource \"aws_iam_instance_profile\" \"jenkins\" { \n    name = \"jenkins\" \n    roles = [\"${aws_iam_role.jenkins.name}\"] \n} \n\n```", "```\nresource \"aws_instance\" \"jenkins\" { \n    ami = \"${var.jenkins-ami-id}\" \n    instance_type = \"${var.jenkins-instance-type}\" \n    key_name = \"${var.jenkins-key-name}\" \n    vpc_security_group_ids = [\"${aws_security_group.jenkins.id}\"] \n    iam_instance_profile = \"${aws_iam_instance_profile.jenkins.id}\" \n    subnet_id = \"${aws_subnet.public-1.id}\" \n    tags { Name = \"jenkins\" } \n\n```", "```\n    user_data = <<EOF \n#!/bin/bash \nset -euf -o pipefail \nexec 1> >(logger -s -t $(basename $0)) 2>&1 \n# Install Git and set CodeComit connection settings \n# (required for access via IAM roles) \nyum -y install git \ngit config --system credential.helper '!aws codecommit credential-helper $@' \ngit config --system credential.UseHttpPath true \n# Clone the Salt repository \ngit clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/salt /srv/salt; chmod 700 /srv/salt \n# Install SaltStack \nyum -y install https://repo.saltstack.com/yum/amazon/salt-amzn-repo-latest-1.ami.noarch.rpm \nyum clean expire-cache; yum -y install salt-minion; chkconfig salt-minion off \n# Put custom minion config in place (for enabling masterless mode) \ncp -r /srv/salt/minion.d /etc/salt/ \n# Trigger a full Salt run \nsalt-call state.apply \nEOF \n\n    lifecycle { create_before_destroy = true } \n} \n\n```", "```\nresource \"aws_eip\" \"jenkins\" { \n  instance = \"${aws_instance.jenkins.id}\" \n  vpc      = true \n} \n\n```", "```\noutput \"VPC ID\" { \n  value = \"${aws_vpc.terraform-vpc.id}\" \n} \n\noutput \"JENKINS EIP\" { \n  value = \"${aws_eip.jenkins.public_ip}\" \n} \n\n```", "```\nbase: \n  '*': \n    - users \n    - yum-s3 \n    - jenkins \n    - nginx \n    - docker \n\n```", "```\nveselin: \n  user.present: \n    - fullname: Veselin Kantsev \n    - uid: {{ salt['pillar.get']('users:veselin:uid') }} \n... \n\n```", "```\nyum-s3_cob.py: \n  file.managed: \n    - name: /usr/lib/yum-plugins/cob.py \n    - source: salt://yum-s3/files/cob.py \n\nyum-s3_cob.conf: \n  file.managed: \n    - name: /etc/yum/pluginconf.d/cob.conf \n    - source: salt://yum-s3/files/cob.conf \n\nyum-s3_s3.repo: \n  file.managed: \n    - name: /etc/yum.repos.d/s3.repo \n    - source: salt://yum-s3/files/s3.repo \n\n```", "```\ninclude: \n  - docker \n\n```", "```\njenkins_prereq: \n  pkg.installed: \n    - pkgs: \n      - java-1.7.0-openjdk \n      - gcc \n      - make \n      - createrepo \n\n```", "```\njenkins: \n  pkg.installed: \n    - sources: \n      - jenkins: http://mirrors.jenkins-ci.org/redhat-stable/jenkins-2.7.1-1.1.noarch.rpm \n    - require: \n      - pkg: jenkins_prereq \n... \n\n```", "```\ninclude: \n  - jenkins \n\nnginx: \n  pkg.installed: [] \n... \n{% for FIL in ['crt','key'] %} \n/etc/nginx/ssl/server.{{ FIL }}: \n... \n{% endfor %} \n\n```", "```\ndocker: \n  pkg.installed: [] \n\n  service.running: \n    - enable: True \n    - reload: True \n\n```", "```\nbase: \n  '*': \n    - users \n    - nginx \n\n```", "```\nusers: \n  veselin: \n    uid: 5001 \n    password: ... \n\n```", "```\nnginx: \n  crt: | \n    -----BEGIN CERTIFICATE----- \n    ... \n    -----END CERTIFICATE----- \n  key: | \n    -----BEGIN RSA PRIVATE KEY----- \n    ... \n    -----END RSA PRIVATE KEY----- \n\n```", "```\nfile_client: local \nfile_roots: \n  base: \n    - /srv/salt/states \npillar_roots: \n  base: \n    - /srv/salt/pillars \n\n```", "```\n{ \n    \"Version\": \"2012-10-17\", \n    \"Statement\": [ \n      { \n          \"Effect\": \"Allow\", \n          \"NotAction\": [ \n              \"codecommit:DeleteRepository\" \n          ], \n          \"Resource\": \"*\" \n      }, \n      { \n          \"Effect\": \"Allow\", \n          \"NotAction\": [ \n              \"s3:DeleteBucket\" \n          ], \n          \"Resource\": \"*\" \n      }, \n      { \n          \"Sid\": \"Stmt1461764665000\", \n          \"Effect\": \"Allow\", \n          \"Action\": [ \n              \"ec2:AllocateAddress\", \n... \n\n```", "```\n$ export AWS_ACCESS_KEY_ID='user_access_key'\n$ export AWS_SECRET_ACCESS_KEY='user_secret_access_key'\n$ export AWS_DEFAULT_REGION='us-east-1'\n\n```", "```\n$ aws codecommit create-repository --repository-name salt \n      --repository-description \"SaltStack repo\"\n{\n\"repositoryMetadata\": {\n\"repositoryName\": \"salt\",\n\"cloneUrlSsh\": \n    \"ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/salt\",\n...\n\n```", "```\n$ git clone ssh://SSH_KEY_ID@git-codecommit.us-east-\n     1.amazonaws.com/v1/repos/salt\nCloning into 'salt'...\nwarning: You appear to have cloned an empty repository.\nChecking connectivity... done.\n\n```", "```\n$ terraform validate\n$ terraform plan\nRefreshing Terraform state prior to plan...\n...\nPlan: 11 to add, 0 to change, 0 to destroy.\n$ terraform apply\naws_iam_role.jenkins: Creating...\n...\nApply complete! Resources: 11 added, 0 changed, 0 destroyed.\nOutputs:\n JENKINS EIP = x.x.x.x\n VPC ID      = vpc-xxxxxx\n\n```", "```\nsrc/index.php: \n<?php \n\nfunction greet($name) { \n  return \"Hello $name!\"; \n} \n\n$full_name = \"Bobby D\"; \n greet ($full_name); \n\nClapping fades... \nAnd naturally, a unit test for it: \ntests/indexTest.php: \n\n<?php \nrequire_once \"src/index.php\"; \n\nclass IndexTest extends PHPUnit_Framework_TestCase \n{ \n  public function testGreet() { \n    global $full_name; \n    $expected = \"Hello $full_name!\"; \n    $actual = greet($full_name); \n    $this->assertEquals($expected, $actual); \n    } \n}\n```", "```\n$ aws codecommit create-repository --repository-name demo-app \n      --repository-description \"Demo app\"\n{\n\"repositoryMetadata\": {\n\"repositoryName\": \"demo-app\",\n\"cloneUrlSsh\": \n    \"ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/demo-app\"\n...\nThen we clone it locally (replace SSH_KEY_ID as before):\n$ git clone ssh://SSH_KEY_ID@git-codecommit.us-east-\n      1.amazonaws.com/v1/repos/demo-app\n...\n\n```", "```\n#!groovy \n\nnode { \n\n  stage \"Checkout Git repo\" \n    checkout scm \n\n  stage \"Run tests\" \n    sh \"docker run -v \\$(pwd):/app --rm phpunit/phpunit tests/\" \n  stage \"Build RPM\" \n    sh \"[ -d ./rpm ] || mkdir ./rpm\" \n    sh \"docker run -v \\$(pwd)/src:/data/demo-app -v \\$(pwd)/rpm:/data/rpm --rm tenzer/fpm fpm -s dir -t rpm -n demo-app -v \\$(git rev-parse --short HEAD) --description \"Demo PHP app\" --directories /var/www/demo-app --package /data/rpm/demo-app-\\$(git rev-parse --short HEAD).rpm /data/demo-app=/var/www/\" \n\n  stage \"Update YUM repo\" \n    sh \"[ -d ~/repo/rpm/demo-app/ ] || mkdir -p ~/repo/rpm/demo-app/\" \n    sh \"mv ./rpm/*.rpm ~/repo/rpm/demo-app/\" \n    sh \"createrepo ~/repo/\" \n    sh \"aws s3 sync ~/repo s3://MY_BUCKET_NAME/ --region us-east-1 --delete\" \n\n  stage \"Check YUM repo\" \n    sh \"yum clean all\" \n    sh \"yum info demo-app-\\$(git rev-parse --short HEAD)\" \n} \n\n```", "```\n$ aws s3 mb s3://MY_BUCKET_NAME\n\n```", "```\nsh \"aws s3 sync ~/repo s3://MY_BUCKET_NAME/ --region us-east-1 \n        --delete\"\n\n```", "```\n[s3-repo] \nname=S3-repo \nbaseurl=https://s3.amazonaws.com/MY_BUCKET_NAME \nenabled=1 \ngpgcheck=0 \n\n```"]