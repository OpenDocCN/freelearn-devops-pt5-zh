- en: Implementing Automatic Testing Using Xamarin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In today's world of fast-paced development and frequent distribution, an application
    needs to be delivered as fast as possible and the development lifecycle must be
    reduced to meet this goal of fast delivery. Testing is one of the most important
    aspects of software development.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of mobile applications, they need to be tested on all possible supported
    devices to make sure they deliver smoothly on all targeted devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the topics we''ll be learning in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Importance of automation testing in the DevOps cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing automatic UI tests with **Xamarin.UITest**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Xamarin Test Cloud to test an application on multiple physical devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the importance of automation testing in the DevOps cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is one of the most important factors when it comes to application development.
    Developers do their best to develop a sophisticated application that runs smoothly.
    But there are always scenarios that developers cannot think of, just because they
    can only be tested when the application is used with the mindset of an end user.
  prefs: []
  type: TYPE_NORMAL
- en: While developers are working hard to develop the application, it is crucial
    for the application to be tested with the user in mind, and to test things a developer
    wouldn't think of.
  prefs: []
  type: TYPE_NORMAL
- en: Testers are there to make sure that the application performs as intended, and
    that one feature does not affect the other features in an application.
  prefs: []
  type: TYPE_NORMAL
- en: While it is great to have manual testers testing the application, and it does
    make sure that the application is tested and used as an end user would actually
    use it in the real world, it is not always the best choice to only have manual
    testers test the application.
  prefs: []
  type: TYPE_NORMAL
- en: Testing a mobile application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a web application or a desktop application, the number of platform versions
    and devices to test with is very low.
  prefs: []
  type: TYPE_NORMAL
- en: It is always simpler to have manual testers test the application, find out the
    shortcomings and defects in an application, and notify the developers.
  prefs: []
  type: TYPE_NORMAL
- en: But when it comes to mobile applications, the story completely changes.
  prefs: []
  type: TYPE_NORMAL
- en: If we only talk about an Android application, for example, let's have a look
    at the number of challenges in testing.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges in testing a mobile application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many challenges when it comes to testing a mobile app:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing against a real environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and testing frequently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing against a real environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most important thing for mobile developers is that the final app works
    across all target devices. Using emulators or simulators is fine in the earliest
    phase of development, but when the app becomes more sophisticated and is about
    to get released to the market, the only acceptable way is to test mobile apps
    on real devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03a0fb50-b68a-470c-af13-a0b757238b71.png)'
  prefs: []
  type: TYPE_IMG
- en: Deploy and test frequently
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile applications are updated almost every week, or at least twice a month.
    So, they need to be tested even more frequently.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile applications should be tested with every nightly build, so defects can
    be recognized earlier and fixed sooner. Testing the same feature again and again
    efficiently and frequently might not be the best solution, and can slow down the
    process of delivery. If we have automation in place for repeated tasks, that can
    save a lot of time to market. Continuous development and testing enables companies
    to deliver to market.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Continuous feedback goes along with frequently deploying and testing the application.
    As we have learned, the manual process of completing repetitive tasks takes up
    a lot of our time that can and should be saved in order to deliver to market faster.
    In the same way, getting continuous feedback from testing and production is very
    important to the quality of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d69a369e-9a49-4b04-acb2-a50dc1922d35.png)'
  prefs: []
  type: TYPE_IMG
- en: To overcome all these challenges in mobile application testing, we need to adopt
    a DevOps mindset, make testing an automated and integrated part of our development
    cycle, and have it happen on each build automatically (and give feedback to developers
    so they can take action in the early stages of development).
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests with Xamarin.UITest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start writing UI tests with Xamarin.UITest, it is good to have a brief
    look at what unit testing is and how Xamarin.UITest is going to help us achieve
    our goal of automated testing for our mobile application.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin.UITest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xamarin.UITest is a testing framework based on a popular test library in C#,
    **NUnit**. If you have used NUnit in your C# projects previously for unit testing,
    it will be really helpful to understand Xamarin.UITest faster. But if you don't
    have prior experience in NUnit, it's absolutely fine.
  prefs: []
  type: TYPE_NORMAL
- en: It is basically a set of libraries for C# (similar to JUnit for Java) to help
    write unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: And by using UITest, we will be writing UI tests for our mobile application.
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentals of UITest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'UITest, or in general any NUnit-based test, has a defined structure to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Test fixture**: Test fixture is a class containing tests, and it also does
    the initial setup for any test to be executed or any task that needs to be done
    after the test has finished executing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**: UITest is written as a method inside the test fixture class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the AAA pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The Arrange-Act-Assert** (**AAA**) pattern should be followed when writing
    a UITest, to achieve the best results and fast feedback from the test. As the
    name suggests, it consists of three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arrange**: Eponymously, this step contains all the actions that help arrange
    the test, for example, initialization of things required later while running the
    test, setting up the environment, and much more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Act**: This is when the test performs the desired interaction with the application,
    such as entering text, pushing a button, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assert**: Assert is when our UITest asserts whether the interaction gave
    us the desired outcome or not, such as verifying that an error message was displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a UITest project to Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get back to Visual Studio and set up a new test project to write Xamarin.UITest:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on Solution | Add | New Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/db1aee05-a673-41ed-8924-241ee388cfb8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Add New Project window, click on Test from the left section and then
    select UI Test App (Xamarin.UITest | Android), because we are going to write a
    test for our Android application. Give this project a name in the Name section
    and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a824af11-9c0d-41f2-b9d4-f2de6fb9a513.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Visual Studio will create a new test project now. Once it is done, you should
    be able to see a new project created under Solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b863493-1f03-4531-a25c-b3912f96ac98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This new test project that we created through the Android Test Project template
    should also include the necessary Nuget packages required to run Xamarin.UITest.
    Those packages are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NUnit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: NUnit Test Adapter, to run UITests locally
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Xamarin.UITest, the framework we'll use to write tests
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These are available in the form of Nuget packages, but usually come with the
    template we used to create the UITest project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure these required packages are available and installed, right-click
    on the UITest project and click on Manage Nuget Packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0eea6fec-d259-4669-9bd5-6d443dec502a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, you should be able to see the packages listed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7365c741-3df5-4c31-ac25-9764a769a2b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Visual Studio suggests an update for the NUnit package to 3.X.X, but don't update
    NUnit because Xamarin.UITest does not work with NUnit 3.x. At the time of writing,
    it is compatible with 2.6.x. Also, because a version of Test Adapter is specific
    to a version of NUnit framework, it's better not to update Test Adapter either.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to add a reference to the application project, so the UITest project
    can build and run the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on References under the UITest project and click on Add Reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e8762ea6-5aa7-49aa-8595-670ed07b92ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, select Projects from the left section, then select PhoneCallApp
    (the application project we want to test), and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/106780e7-3649-42d6-9e1b-7ed090281009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have added the application project, you should be able to see the
    reference added in Solution Explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e8040405-5ab9-43e2-8e34-d46f90efadbc.png)'
  prefs: []
  type: TYPE_IMG
- en: As the application project and the UITest project are under the same solution,
    it is enough to add a reference to the application project, as shown in the previous
    step. But if you want to have both projects in different solutions, or if you
    want to test the application on Android 6.0, then Visual Studio requires you to
    supply the path to the APK in your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To give this path, open the `Tests.cs` file under the UITest project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75c2f39e-2110-4295-85da-216e2c870df2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In `Tests.cs`, uncomment the `.ApkFile()` code, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3fa4e94e-6b21-4fb1-bbeb-4241f9906d60.png)'
  prefs: []
  type: TYPE_IMG
- en: Change the path to the `.apk` file path, which can be found inside the `bin`
    folder of your application project. If you are not able to see the file there,
    try deploying the application once and then it should be created in `bin` | `debug`
    or `bin` | `release`, depending on your build configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tests.cs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This file is the default file that gets created when we add the UITest project
    in the solution through the Xamarin.UI Android Test Project template, and we will
    be writing our UI tests in this file. There are certain things to note in this
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[TextFixture]`: This is an annotation added to the `Tests` class that tells
    the UITest framework that this class contains tests to be run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[Setup]`: Each class containing tests needs to set up an initial configuration,
    as with the APK file path in the previous section. This is added to the `BeforeEachTest()`
    method and tells the framework to run this method and perform the initial setup
    before running the test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[Test]`: This annotation identifies the method that contains the test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/cd072502-df5e-4af0-958d-114ad9bc6bd3.png)'
  prefs: []
  type: TYPE_IMG
- en: Recall the application code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's rewind to some of the things we wrote during application development.
  prefs: []
  type: TYPE_NORMAL
- en: Elements in the PhoneCallApp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Textbox to enter phone number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CALL button to call
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text that gets displayed if the user taps on the CALL button without entering
    a number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A confirmation dialog box that appears when user taps on the CALL button after
    entering a number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User interactions in the PhoneCallApp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enter a number in the text box
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the CALL button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap on OK or Cancel in the confirmation dialog box
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `MainActivity.cs` file from the PhoneCallApp project and you''ll notice
    that we are showing a toast if the entered number string is empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2d0d4ff-0344-4164-8327-1b49a777f39b.png)'
  prefs: []
  type: TYPE_IMG
- en: Steps to include in the test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To write an efficient test, certain steps should be followed, based on the
    AAA pattern discussed earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configure and start the application (Arrange)**: We need not write this step
    because that part is already taken care of in the `BeforeEachTest()` method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/92e19bba-540b-45dd-b9d1-06cc8ea5db79.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Perform an interaction with some element on the screen (Act)**: We''ll have
    to write code to enter text or tap on the CALL button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Verify the desired output (Assert)**: We need code to verify the interaction
    gives us the desired output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, the first step of the test is already done, and now we need to
    write the next steps, which include performing interaction with the CALL button
    and then verifying the desired output.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your first UITest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time to finally write our new UITest, inside `Tests.cs` under the UITest
    project, to test the test case described earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a new method under the `Tests.cs` class with an annotation `[Test]`,
    as described earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d27c2bc3-40f9-4092-b344-fc4c400575be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Write code to take a screenshot of the application once it loads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bedcc5d0-ac6c-451c-bcb7-27c863442b6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, as mentioned in *step 2*, perform an interaction, that is, write code
    to tap the CALL button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98c8d3c7-1632-4cc2-bc3a-6ff212db3907.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding code, we are using the `AndroidApp.Tap()` method to perform
    the tap and the `AppQuery.Id()` method to identify the CALL button, then passing
    that app query inside the `Tap` button so that it knows where to tap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, let''s take a screenshot of the button being pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/587ba21c-d948-4f93-ba6d-f72824cff20e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to verify the behavior is as desired. In PhoneCallApp, verify
    that the toast saying `Please provide number` appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a43fa736-661c-4146-aa3c-6fc120f3c6ed.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding code, we have used the `AndroidApp.Query()` method to query
    the UI screen for an element, and we have passed the `AppQuery.Marked()` method
    with the content of our toast to be identified.
  prefs: []
  type: TYPE_NORMAL
- en: The `Marked()` method is similar to the `Id()` method but it searches for an
    element with a given string as either its ID or its content, and in our case it
    is the content of the toast.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to verify that the toast with the provided string `Please provide
    number` has been found; the `Assert.IsTrue()` method will verify the element has
    been found by checking for the result array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7da2e81e-b485-4abd-b656-d366b0b9762d.png)'
  prefs: []
  type: TYPE_IMG
- en: Running your test on your local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have completed writing the UITest inside the `Tests.cs` class file,
    it''s time to run the test on your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild your solution with the build configurations of your device or emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8106ca5-de5f-426f-9525-026a60f66d67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we run test, let''s deploy the solution to generate the `.apk` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/16b28d04-20f0-4eb1-b068-0283192ed5e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the deploy is successful, click on Test | Windows | Test Explorer, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aac99465-6b03-4241-ae08-024f3918f8a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Test Explorer, NUnit should identify the test we have written in the `Tests.cs`
    file because of the `[Test]` fixture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8dbe3b9d-53c1-433a-910e-3227761d5ed4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the previous screenshot, in Test Explorer click on the Run All
    button to run all the tests. If everything goes fine, you should see the Passed
    Tests message in Test Explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/adb7f432-ca1f-4e06-9c6f-b7a9061e62d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Awesome, you have successfully written and run the test on your local machine.
    Next, we'll learn about Xamarin Test Cloud and how to use it to run our UI tests
    on multiple physical devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Xamarin Test Cloud to test on multiple devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Mobile application users are very demanding in terms of the quality and performance
    of an application. Platforms such as app stores, where users can promptly give
    feedback as they wish, make it even more important to take mobile application
    quality seriously:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Question**: How can we test a mobile application effectively?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Answer**: By running the application on a real device and using it like a
    user would do'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenges in mobile app testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile application testing involves many challenges that web applications don't
    have.
  prefs: []
  type: TYPE_NORMAL
- en: Different mobile OS versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take Android, for example. Since Android started, it has grown at a very
    fast rate, with a new major release every year. That makes around 15 major versions
    out there in the market, out of which at least 6 versions are widely used in different
    parts of the world, depending on the region and smartphone availability.
  prefs: []
  type: TYPE_NORMAL
- en: These are only the major versions we are talking about; the minor versions are
    way too many to count.
  prefs: []
  type: TYPE_NORMAL
- en: Considering this situation, it is almost impossible for a quality assurance
    team to test the application and guarantee it will work on all the targeted devices
    out there.
  prefs: []
  type: TYPE_NORMAL
- en: Devices with different screen sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are all aware that the number of devices is increasing every day but older
    devices still continued to be used, with different screen sizes from 4.0 inches
    to 6.5 inches (some are even bigger).
  prefs: []
  type: TYPE_NORMAL
- en: Mobile applications can behave differently on different screen sizes and resolutions.
    If not developed properly, this can drastically change the look of an app from
    a device used for development to the device a real user is using.
  prefs: []
  type: TYPE_NORMAL
- en: So, testing on multiple devices with various screen sizes becomes a very important
    aspect of mobile app testing. To an extent, this can be done by getting all possible
    device sizes and testing the application on them, but in turn this can increase
    the cost to a very high level and can be very time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: Solving challenges like these in a cost- and quality-effective way is only possible
    by using cloud test platforms that enable us to run tests on multiple devices
    simultaneously. All the devices on these cloud platforms are physical devices,
    not emulators, and they also provide instant feedback and support multiple testing
    frameworks, including NUnit.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Xamarin Test Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xamarin Test Cloud is a cloud-based platform that provides tools to support
    the automated testing of mobile applications across various different devices,
    also known as **UI Acceptance Testing**. This enables us to ensure that the application
    performs correctly and efficiently across multiple devices with minimal effort.
  prefs: []
  type: TYPE_NORMAL
- en: It also helps shift the testers' focus from repeating the same tests on multiple
    devices, and helps them focus on verifying that the app works as expected on the
    test cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Xamarin Test Cloud family consists of the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin.UITest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is a testing framework based on the very popular NUnit test libraries. If
    you have used NUnit in your C# projects before for unit testing, it will be really
    helpful to understand Xamarin.UITest faster. But if you don't have prior experience
    in NUnit, it's absolutely fine.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin.UITest is basically a set of libraries for C# (similar to JUnit for
    Java) to help write unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin also supports the **Calabash** framework for writing tests, if you want
    to write them in Ruby and Cucumber.
  prefs: []
  type: TYPE_NORMAL
- en: We'll be focusing on Xamarin.UITest to write tests in C# for continuous testing.
  prefs: []
  type: TYPE_NORMAL
- en: Test Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a cloud-based platform consisting of thousands of physical devices.
    Users can upload apps and tests written in Xamarin.UITest to Test Cloud; it will
    then install the apps on the available or chosen devices and run the given tests
    on them. Once tests are complete, results are then available to users to analyze
    and verify the behavior of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin Test Recorder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is another application in the Test Cloud ecosystem and helps write Xamarin.UITest.
  prefs: []
  type: TYPE_NORMAL
- en: It basically allows you to plug the device in, run the test manually on the
    device, and then it writes all the test code for you by recording your actions
    on the application.
  prefs: []
  type: TYPE_NORMAL
- en: We will not be covering Test Recorder, but rather will learn how to write UI
    tests with Xamarin.
  prefs: []
  type: TYPE_NORMAL
- en: Using Xamarin Test Cloud as part of continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Xamarin Test Cloud helps us achieve continuous integration with automated test
    executions on every build, on a build server such as TeamCity, and, after executing
    the tests, gives feedback directly to developers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23b26b3f-ba6c-4f94-92cc-92d12c90666d.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating users and organizations on Test Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating an account on Xamarin Test Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://testcloud.xamarin.com/register](https://testcloud.xamarin.com/register)
    to register a new account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4cf1404a-9807-4620-9055-5b0aad76bc92.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter your details and click the Continue button to start the process. The process
    requires you to register with a company email; a Gmail or Yahoo email will not
    work.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, enter your organization''s details and click on Get started:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8034f5ea-61b3-4e65-acae-2589e9aa12a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next step, accept the terms and conditions to complete registration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81ec1db9-1c38-44f7-a16e-07c338573021.png)'
  prefs: []
  type: TYPE_IMG
- en: After completing registration, make sure you verify your email address before
    beginning testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Users and organizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xamarin Test Cloud, being a continuous testing cloud platform, supports an organization
    structure to give access, make APIs, and run tests through the use of access keys.
  prefs: []
  type: TYPE_NORMAL
- en: It makes it much easier to separate team-based applications in an organization.
  prefs: []
  type: TYPE_NORMAL
- en: Test Cloud hierarchy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Test Cloud hierarchy structure is quite simple and easy to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Organization**: An organization is basically the top level at which the subscription
    is managed for Test Cloud, and it is created when a person from an organization
    first creates an account on Xamarin Test Cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Administrators**: Each organization will have at least one administrator,
    who creates teams and can manage users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team**: A team usually has at least one application and some users working
    on that application. Each team gets their own API keys to access and run tests
    on the application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7294fed6-297f-4779-b888-a45f15c3de0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a team in Xamarin Test Cloud, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on your profile and then click on Account settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07b1d5b7-a2e2-44cb-9140-7159d932678c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Teams & Apps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aebc4440-8220-4f69-a3bb-3c41ab861604.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, click on the New team button to add a new team:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6bba5fe-5d6f-4e27-9663-298503414cb2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To edit team details, such as the team name, and add new members, click on
    the settings (gear) icon as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02b87ae6-38fd-4b24-983b-9a7020ff62de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After adding new members to the team, you can manage permissions for users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c222d9e2-c747-45d4-907a-52eef48b83f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the team details, members, and their permissions are all set up, click
    on Done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a test run for your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have added a team and members to it, it''s time to add our application
    test run to it as well. To create a test run for PhoneCallApp, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Xamarin Test Cloud, click on New Test Run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4df4e6b-c356-4d56-a71c-894d312af2f3.png)'
  prefs: []
  type: TYPE_IMG
- en: This will open a self-guiding dialog box, where we can select the platform and
    choose devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the first step in the dialog box, select I''m testing an Android app and
    click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/333ab789-64fd-469e-a7e1-a26d6383de0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select appropriate devices to run your application on and go to the next step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a712d38e-e756-4a55-b857-02c58fb21c7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select an appropriate Test series, or you can create a new one, select the
    language, and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/899a8c02-6338-4f73-841f-24c171b46dd8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select UITest on the next screen and click on Running on Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd19f80c-1b3e-460c-982a-043b65f16168.png)'
  prefs: []
  type: TYPE_IMG
- en: This page gives us a command with a device ID according the devices we selected
    in previous steps. As it says, please update the directory path to the `.apk`
    test assembly `bin` folder, and then run the command in the `root` folder of the
    application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before you upload your application to Xamarin Test Cloud, it is important to
    build your application in the Release build configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have built the project with Release, you are ready to upload your
    application to Xamarin and run the UI tests there. Use the command and modify
    the Xamarin.UITest.xxx version and then the APK file name, with the full path
    to the `apk` and the relative path to the `UITest` folder, as shown in the following
    screenshot. Then run it from the `root` directory of your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9fad212-4725-4bf8-bc3c-0072b3dc9987.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you have uploaded your first application to Xamarin Test Cloud
    with a test! After uploading the application, Xamarin Test Cloud should run the
    tests provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Xamarin test cloud web interface and notice that the application
    is now visible in the dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c4cf2fa-778b-4392-927f-e0893f2eeaa3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the application to see the tests running on the devices we selected
    in step 4:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3797a2a-58c7-4871-a06c-cf0b4b85d48b.png)'
  prefs: []
  type: TYPE_IMG
- en: You can further click on the test link and see more details about the tests
    and their statuses.
  prefs: []
  type: TYPE_NORMAL
- en: This completes running your first test run on Xamarin Test Cloud, where you
    can test your application on multiple physical devices available in the cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the importance of continuous testing in the application
    development cycle. We also learned about Xamarin.UITest and how to write automated
    UI tests for acceptance-testing our application, and we got familiar with Xamarin
    Test Cloud, which is useful for continuous testing on multiple physical devices.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming chapters, you'll learn more about continuous integration and continuous
    delivery using various tools.
  prefs: []
  type: TYPE_NORMAL
