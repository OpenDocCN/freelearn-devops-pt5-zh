- en: Managing Organizations and Teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](part0044.html#19UOO0-184576c1044a4350bd24f18b869c0732), *Using
    the Wiki and Managing Code Versioning*, we explored how you can accompany your
    project with documentation using the built-in wiki that GitHub provides, and we
    saw how to manage your code versions with GitHub releases.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to know when to host a project under your namespace and when
    under an organization. With the organization, you have the ability to create teams
    and provide different access levels to people in the various repositories that
    are hosted under it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go through creating an organization, inviting people,
    and granting them access to the repositories that are hosted under the organization.
    You will learn how to create teams and associate members of your organization
    to them as well as with the repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The difference between users and organizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organization roles and repository permission levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global member privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The People tab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organization settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between users and organizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from your user account that should be used only by yourself, GitHub provides
    the ability to create organizations managed by many users and, as we will see
    later, create teams within the organization.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub is a collaborative place and as such, projects with high contribution
    traffic need a handful of people to help with the maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: This might not be the only reason why one should create an organization, though.
    Leaving aside the practical reasons, an organization is usually created when there
    is more than one person, each having equal rights to the projects that the organization
    will host.
  prefs: []
  type: TYPE_NORMAL
- en: You can see, for example, big names such as Twitter, Google, or even GitHub
    itself that have organizations under which dozens of projects are hosted.
  prefs: []
  type: TYPE_NORMAL
- en: Organization roles and repository permission levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GitHub allows you to choose among three roles for a person in an organization:
    owners, members, and billing managers. We will not deal with the latter; if you
    want more information on this, refer to [https://help.github.com/articles/adding-a-billing-manager-to-your-organization/](https://help.github.com/articles/adding-a-billing-manager-to-your-organization/).'
  prefs: []
  type: TYPE_NORMAL
- en: Owners have full access to the organization and are in the highest level of
    the permissions chain. As far as the organization is concerned, they can invite
    and remove people, create and remove teams, create and remove repositories, as
    well as manage the permission levels of all people and repositories. They can
    also edit the organization settings.
  prefs: []
  type: TYPE_NORMAL
- en: Being a member is usually the default role when a new person gets in the organization.
    The least a member can do is create a new team and add existing team members and
    repositories to it.
  prefs: []
  type: TYPE_NORMAL
- en: The access level a member has over a repository can only be set by an owner.
  prefs: []
  type: TYPE_NORMAL
- en: A member can also be promoted to "Maintainer" for a particular team. With this
    access level, they can add and remove team members. Consider it like an extra
    hidden role on top of being a member. Anyone who creates a new team is granted
    the "Maintainer" role for that team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, be careful not to mix organization permissions with repository permissions.
    There are four kinds of permissions that a repository can have: owner, admin,
    write, and read.'
  prefs: []
  type: TYPE_NORMAL
- en: Owner is the top universal permission level that is granted to organization
    owners. With Admin access, one has owner privileges, but for the particular repository;
    you can push to it, delete it, add or remove a team, change the team's permission
    level, add outside collaborators, and so on. It is like creating a new repository
    under your personal namespace. With Write access, you can push to the repository;
    Read grants you read permission, which means clone and pull only.
  prefs: []
  type: TYPE_NORMAL
- en: For a comprehensive list of the various level permissions, check out GitHub's
    documentation at [https://help.github.com/articles/repository-permission-levels-for-an-organization/](https://help.github.com/articles/repository-permission-levels-for-an-organization/).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed the different access levels and permissions, let's
    create our first organization.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create an organization, find the cross button at the top header
    next to your avatar or visit [https://github.com/organizations/new](https://github.com/organizations/new)
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, pick up an organization name and fill in a billing e-mail.
    For testing purposes, you can give your personal e-mail, which you can change
    later if you want. For open source projects, the creation of an organization is
    free, which is the default plan. If the organization will be owned by a business,
    you''ll have to accept the corporate terms of service. All these options are summarized
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you type the name, GitHub searches behind the scenes if it is already taken,
    and if that is the case, a message appears saying that Username is already taken.
  prefs: []
  type: TYPE_NORMAL
- en: As you will notice, there cannot be a user and an organization with the same
    name. Namespaces must be unique.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next step, you can optionally invite some people to be part of the organization.
    Search them by their username, full name or email, and then select them and click
    **Invite** to invite them to your organization. When done, hit Finish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing you will see after the creation is your organization''s dashboard,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Before we dive into teams, people, and repositories, let's first check out some
    defaults by setting member privileges globally in the organization settings.
  prefs: []
  type: TYPE_NORMAL
- en: Global member privileges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Prior to inviting people and creating any repositories, let''s examine two
    important settings and set some defaults. Head over to the **Settings** page and
    select the Member privileges tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are various settings regarding the repositories. The first
    is about repository creation, and if enabled, any member of the organization will
    be able to create repositories under the organization namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Enable this if you want to work more openly and disable it to be more strict.
    By disabling it, only owners will be able to create repositories. Outside collaborators
    (see the *Difference between Members and Outside collaborators* section) will
    not be able to create any repositories regardless of this option.
  prefs: []
  type: TYPE_NORMAL
- en: The next two options are for members with admin permissions on repositories.
    You can enable or disable the repository deletion and their visibility status
    to allow them to perform those actions on the repositories they have admin privileges
    on.
  prefs: []
  type: TYPE_NORMAL
- en: The next option is regarding the forking behavior of any private repository
    inside the organization. By default, it's disabled and members of the organization
    will not be able to fork private repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last option is regarding the default repository permissions that organization
    members have on all repositories, new or old. You can choose from four options:
    Admin, Write, Read, and None. The None option is the least privileged one and
    it means that members can only clone and pull public repositories. With Read access,
    a member can clone and pull every repository, public or private. Write access
    means that apart from read access, members can also push to the repositories.
    Lastly, Admin access will give every member the ability to pull and push to a
    repository as well as change its settings.'
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the rest of the chapter, the examples will be based on members being
    able to create repositories, and the default repository permission level will
    be Read unless otherwise noted.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore the rest of the settings later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, the first tab on your new dashboard is Repositories, and since there is
    none at that time, GitHub urges you to create one.
  prefs: []
  type: TYPE_NORMAL
- en: Once you hit the **Create a new repository** button, you will be taken to a
    familiar page. If you read [Chapter 1](part0020.html#J2B80-184576c1044a4350bd24f18b869c0732),
    *Brief Repository Overview and Usage of the Issue Tracker*, you will notice that
    the only thing that changes when creating a repository is the namespace. If I
    wanted, I could have created the repository under my username by choosing it from
    the drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you fill in the information and the repository is created, you can upload
    the code from your computer and start working on it. You might have noticed in
    the repository''s landing page when it was first created, that GitHub has a message
    to add teams and collaborators:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you want to grant access to certain people immediately, then you should follow
    that route. For our purposes, given that this is a new organization, we must first
    learn about teams and their differences with outside collaborators as well as
    the different permissions on repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Teams – a great way to grant selective access to your organization projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A team is how you control different access levels in your repositories. Next,
    we will see how to create a team and add members to it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with most cases in GitHub, you can create a team in different ways. The
    apparent way is to head over to the Teams tab and create a new team by clicking
    the New team button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Another way to create a team is to head over to the Settings of an organization
    repository, and under the Collaborators and teams tab, hit the Create new team
    button. Notice that only a repository that lives under an organization namespace
    will have the Teams option. If you edit a personal project, you can only see the
    Collaborators box.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you first create a new team, you will be presented with the following
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The team name is mandatory and the action is two-fold. You can enter a human-readable
    text with punctuation and capitalization, but notice that the name that will appear
    in the URL is converted to lowercase. For example, `GitHub Core` will be `github-core`.
    Any special character is stripped and converted to a dash (`-`).
  prefs: []
  type: TYPE_NORMAL
- en: You can put an optional description and then choose whether this team will be
    publicly visible or secret. A secret team will only be visible by its members
    and the owners.
  prefs: []
  type: TYPE_NORMAL
- en: Since GitHub supports nested teams, you are also presented with the option to
    choose the parent team that this team should be a child of. In case this is the
    very first team you create, there will be no parent, so this option will not be
    available.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the team is created, you will be taken to the team''s page where you
    can see who the team members are and what repositories this team has access to.
    You will be able to start a discussion with the members of that team and also
    edit the team''s settings, such as change its name or even delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inviting people
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The whole point of having teams is to have people in them. So far, you were
    the only member of the organization; let's invite someone to join the team.
  prefs: []
  type: TYPE_NORMAL
- en: You can only invite people that are already registered GitHub users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Head over to the Teams tab and select the team you want to invite someone to.
    Go to the **Members** tab and hit Add a member. Start typing the username and
    GitHub will sort out until it finds the right one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you select the person, you can see that GitHub will tell you that there''s
    one pending invitation. If you click on the 1 pending invitation link, a modal
    will be revealed where you can edit the invitation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, the role one has when invited to a team is Member. If you want
    to change this to Owner, you can edit the invitation, change the role, and optionally
    assign different teams. You can cancel the invitation as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Only owners can invite new people to a team or the organization. A person has
    to be an organization member, for team maintainers to be able to add them to teams.
  prefs: []
  type: TYPE_NORMAL
- en: Accepting an invitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub will send out an email notifying the invited person about the invitation.
    In it, there is a link to follow that lands you to the organization page where
    you can accept the invitation or you can just ignore the email and visit the organization
    page directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here I visited the organization''s page as the person who got invited and as
    you can see I am presented with a message to join the organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Either way, the final page where you will decide whether you will be joining
    the organization is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's accept the invitation and start working as part of the organization. After
    accepting, you will be able to see who the people are, the repositories, and the
    teams you have access to.
  prefs: []
  type: TYPE_NORMAL
- en: Team member permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a maintainer of the team, when you visit the **Members** tab of your team''s
    page, you can change a member''s team access. Check the checkbox of one or more
    team members to change their membership. Once done, you''ll notice that a dropdown
    appears. From there, you can either remove the selected members from the team
    or change their role. Let''s click on the **Change role** link and change the
    role to Maintainer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you promote a member to maintainer, they will have more privileges, and
    the Maintainer label will be added next to their username:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A maintainer can now add or remove team members, edit the team's settings, and
    even delete it.
  prefs: []
  type: TYPE_NORMAL
- en: Requesting to join a team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be occasions where a member wants to get in another team that has
    more privileges on a repository. If you are already a member of an organization,
    you can ask a member to join an existing team. Let's break it down in steps and
    see how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: Step one – as a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Head over to the team you want access to, select the Members tab, and you will
    notice a Request to join button in the teams you are not a member of yet. Click
    on it and wait for your request to be reviewed by an administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Once you request to join the team, an owner or a team maintainer will have to
    accept your request. If you now visit again the Members page of the team, you
    can see the Cancel pending request button. This way you know that your request
    has not yet been approved, and as you might have guessed, you can cancel it.
  prefs: []
  type: TYPE_NORMAL
- en: Step two – as an owner or team maintainer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By the time you request to join a team, an email notifies the owners and team
    maintainers about your request to join that team. As an owner or team maintainer,
    by visiting the Members tab of the team in question, you can see that there is
    a pending request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on it and accept or reject the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding repositories to a team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assuming there's one or more repositories created under the organization, it's
    now time to add a repository to a team and explore the privileges of a team upon
    it. Remember that only owners can perform this action for all teams and team maintainers
    only for the team that they are maintainers of.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to pair a team with a repository and vice versa. The first
    way is to search for a repository within a team and the second way is to search
    for a team within a repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try the first one. Head over to the team that you want to add repositories
    to, and at the Repositories tab click the Add repository button and start typing
    the name of the repository to add:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the default access to this repository is Read. This is the
    default access level that we have set in the *Global member privileges* section.
    Regardless of the global option, you can set different permissions on each repository
    that the team has access to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Team members cannot change the repository access level, but can remove the repository
    from a team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you head over to the repository''s settings under the Collaborators
    & teams tab, you can see the team that is added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Team discussions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Much like adding comments to an issue, members of a team can discuss things
    that may not be suitable to an issue itself. You can start a discussion under
    a team''s landing page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When starting a new discussion you can choose it to be visible to the whole
    organization or just to the team members.
  prefs: []
  type: TYPE_NORMAL
- en: The People tab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The People tab is where, as an owner, you can manage the organization members''
    privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the previous screenshot, you can see that, as an owner, you have a higher
    overview of the members in your organization. Let's examine what all of these
    settings mean.
  prefs: []
  type: TYPE_NORMAL
- en: The 2FA mark simply means that a member has not enabled Two-factor authentication.
    From a security perspective, you would want every member of the organization to
    have enabled 2FA to prevent a potential account compromise that would lead to
    gaining access to the organization's repositories.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing is the visibility of the organization membership. Each user must
    set the visibility for themselves. Set it to Private to hide your membership and
    choose Public to publicize it. If you publicize it, the organization's avatar
    will show in your profile.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can see how many teams each member is part of. Clicking on the number
    will show you the exact teams.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, there''s the organization roles. Only owners have the ability to change
    a member''s organization role and you can set it to either Member or Owner via
    the Change role... link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Manage button takes you to an individual's management page. Let's take a
    good look at it.
  prefs: []
  type: TYPE_NORMAL
- en: Managing access levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Selecting Manage access will take you to a person''s management page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: On the left-hand side box, you can see the same information as shown in the
    People dashboard. From here, you can change the member's role, even remove them
    from the organization, purging every permission they might have on the organization's
    repositories. The outside collaborator option will be covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right-hand side, you can see all the repositories they have access to
    and can manage their access level to every single one of them. Let''s explore
    this setting by hitting the Manage access button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: According to what you have set in the global settings access, as we saw in the
    *Global member privileges* section, you can see the access level in the particular
    repository. The access levels are also taken from the specific privileges a team
    has on a repository, as explored in the *Adding repositories to a team* section,
    which can override the global defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a test and set the global setting to Write and see what happens.
    Click on the Edit button of the Membership privilege setting under the Read box.
    Then, change Default repository permission to Write, accepting GitHub''s prompt,
    and go back to the previous page to see how it changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Even if the person was not a member of the team that would grant them write
    access, they would still have the Write access to the repository since this is
    now the global default. Also, notice how Remove write access is grayed out. Since
    the global default and the access that the team grants are the same (Write), there
    is no point of demoting a member's access level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, the Remove access to this repository button on the top-right is
    grayed out. What this does is remove the access completely, which means in order
    to see this button enabled, you must have set the global repository access permission
    to None. Let''s give it a go, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Removing the access to this repository is going to remove that person from the
    team that granted them access in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: That's all there is to it when it comes to managing a member's access to a repository.
    Let's go ahead and finally see what these Outside collaborators are all about.
  prefs: []
  type: TYPE_NORMAL
- en: Difference between Members and Outside collaborators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, outside collaborators are non-organization members with
    repository access. Much like you can give write access to another user in your
    personal repository, you can give them write access to individual organizational
    repositories without being members.
  prefs: []
  type: TYPE_NORMAL
- en: 'At present, no one outside our organization has access to a repository. If
    you visit Outside collaborators under the **People** tab, GitHub will tell you
    that there are no collaborators yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add an outside collaborator by going to a repository''s **Settings**
    in the Collaborators & teams tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the user, hit the Add collaborator button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the default access level is Write and not Read, which is set globally
    for the repositories. The default repository permission only applies to organization
    members, not to outside collaborators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user has accepted the invitation, you can head over to the organization''s People
    page and select Outside collaborators. From this page, you can manage a collaborator''s
    access and even invite them to the organization. Click on the wheel button and
    select **Manage** to manage their access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This particular user has Write access to one repository, and we can see that
    this is an outside collaborator. By going to Manage access, you can remove the
    user''s write access to the repository or remove their access altogether:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Demoting to an outside collaborator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as you can be promoted to a member if invited, you can also be demoted.
    Under the People tab click on a user''s username to manage their access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When converted to an outside collaborator, any repository access level that
    was given to this person in a team will be retained.
  prefs: []
  type: TYPE_NORMAL
- en: Organization settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have only explored the Member privileges setting. Let's see the rest
    of them by heading over to the **Settings** page of an organization.
  prefs: []
  type: TYPE_NORMAL
- en: Profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the profile page, you can change the organization''s name and its description,
    add a URL and a profile picture, rename the organization namespace, and even delete
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After making all of these changes, you can see that the landing page of your
    organization will be a little bit prettier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Under the **Security** tab you can require all the member of the organization
    to enable two-factor authentication for maximizing security.
  prefs: []
  type: TYPE_NORMAL
- en: Audit log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have ever worked in a Unix environment, you should know that almost everything
    that is done in the system gets logged somewhere (usually under `/var/log/`).
    In the same way, GitHub logs most actions in what it calls an audit log.
  prefs: []
  type: TYPE_NORMAL
- en: 'While I was performing all the team creation, membership, and repositories
    examples, I got quite a big audit log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see what user made what action and the time this was performed. To better
    explore the log, GitHub provides the option to extract it in CSV or JSON format.
    You can even use the search function to filter specific events.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Third-party access is an advanced setting. Some applications and many web apps
    have a way to interact with GitHub and gather information about repositories,
    teams, user data, and so on. This is accomplished by the feature rich API that
    GitHub provides.
  prefs: []
  type: TYPE_NORMAL
- en: By default, this is set to be restricted. This means that if as a user you authorize
    an application, for example, to read all your repositories, it will not have access
    to the organization ones.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, you can read GitHub's documentation at [https://help.github.com/articles/about-oauth-app-access-restrictions/](https://help.github.com/articles/about-oauth-app-access-restrictions/).
  prefs: []
  type: TYPE_NORMAL
- en: Teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Under the **Teams** tab you can globally enable or disable the team discussions.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some tips and tricks that complement what you have learned so far.
  prefs: []
  type: TYPE_NORMAL
- en: How to transfer a repository to an organization's namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be times where a repository of yours fits better under the umbrella
    of an organization. In this case, you can transfer it under the organization's
    namespace. You are able to transfer repositories to organizations only if you
    are at least their member.
  prefs: []
  type: TYPE_NORMAL
- en: 'Head over to your project''s **Settings** and in the "Danger Zone" area you
    will see a Transfer button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A modal will appear where you have to confirm by providing the repository''s
    name and the organization that you wish this to be transferred to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are a member of the organization, in the next step, you get to choose
    if you want any other teams to have access to this repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once ready, hit Transfer. GitHub will notify you that the transfer might take
    a few minutes, but if the repository is relatively small with a few collaborators,
    it will take an instant. If you watch closely in your dashboard where your repository
    list appears, you will notice that your previous repository now has the organization's
    namespace before it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you head over to the repository''s Settings in the Collaborators & teams
    tab, you will see that you are listed under Collaborators. In this case, the access
    is set to Write since this is the default global value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you transfer your repository to an organization you are not an owner of,
    you might lose your admin privileges that you previously had on your repository.
    You can always ask an organization owner to grant you access.
  prefs: []
  type: TYPE_NORMAL
- en: How to convert a user account into an organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the reasons mentioned in *The Difference between users and organizations*
    section, one might want to turn a personal account into an organization. This
    can be easily done in the user's **Settings** under the Organizations tab.
  prefs: []
  type: TYPE_NORMAL
- en: You can then hit the Turn username into an organization button. Be sure that
    this is what you want because the action is irreversible.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, you have to choose an owner of the organization. Start typing
    and when the name appears, select it and hit Choose. Finally, hit Create organization
    to start the conversion process.
  prefs: []
  type: TYPE_NORMAL
- en: Mentioning teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A cool way to get a team''s attention in issues and pull requests is by mentioning
    the whole team. This is achieved with the following syntax: `@organization/team`.
    For example, to get everybody''s attention in the Documentation team, you would
    use something like this: `@github-essentials/documentation`. Only the members
    and owners of the organization can mention teams.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an issue and see how this works. Head over to a repository that
    is under your organization and create a new issue and try to mention a team:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In case you are part of the team or are an owner, you will receive an email
    and a notification that will appear on your page at [https://github.com/notifications](https://github.com/notifications):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The auto complete results are restricted to repository collaborators and any
    other participants on the thread, so it's not a full global search.
  prefs: []
  type: TYPE_NORMAL
- en: Organization feed only in dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are on the landing page of [https://github.com](https://github.com), you
    can see your dashboard activity of your repositories and the people you follow.
    Sometimes, when you are a member of many organizations the information might be
    cluttered, so you would rather filter the activity to one organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just choose the organization you wish to filter from the drop-down menu and
    you will see activities only from that organization. If you want, you can also
    subscribe to the news feed using the atom feed link found at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's it! Congratulations on finishing this chapter. You should now be familiar
    with almost all organization features. Creating teams, inviting people, and managing
    repository access should feel much more easier.
  prefs: []
  type: TYPE_NORMAL
- en: If you found it difficult to follow, I would recommend you to just play with
    it, make a test organization, and go through the chapter again. Full disclosure,
    this is how this chapter was written. I created an organization, a second test
    user, and through trial and error this chapter was born. Given that GitHub has
    released new organization features in beta, I had to do a lot of testing. I think
    the result was worth the effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will explore GitHub''s strongest point: collaboration
    and pull requests.'
  prefs: []
  type: TYPE_NORMAL
