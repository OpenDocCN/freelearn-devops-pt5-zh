- en: Chapter 2. Understanding Plugin Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will see more details on the JIRA Architecture and the
    plugin framework. We will also see the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Converting plugins from v1 to v2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding resources into plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding web resources to the plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building JIRA from source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new webwork actions to JIRA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending a webwork action in JIRA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous chapter, the JIRA plugin development process is probably
    an easier task than we expected it to be. With the help of Atlassian Plugin SDK,
    developers can spend more time worrying about the plugin logic than on the troublesome
    deployment activities. And yes, after all, it is the plugin logic that is going
    to make an impact!
  prefs: []
  type: TYPE_NORMAL
- en: This chapter details how the various components fit into JIRA's architecture
    and how JIRA exposes the various pluggable points. We will also see an overview
    of the JIRA's system plugins to find out how JIRA uses the plugin architecture
    to its own benefit, followed by some useful recipes!
  prefs: []
  type: TYPE_NORMAL
- en: JIRA Architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will quickly see how the various components within JIRA fit in to form the
    JIRA we know. It is best described in a diagram and Atlassian has a neat one along
    with a detailed explanation at [http://confluence.atlassian.com/display/JIRA/JIRA+Architectural+Overview](http://confluence.atlassian.com/display/JIRA/JIRA+Architectural+Overview).
    We will re-draw the diagram a little bit to explain it in a brief but useful way.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we dig deeper into the JIRA Architecture, it is probably useful to understand
    a few key components and familiarize yourself with them. JIRA's major third-party
    dependencies are outlined next.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is not mandatory to know all about these frameworks, but it will be very
    helpful during plugin development if you have an understanding of these.
  prefs: []
  type: TYPE_NORMAL
- en: Webwork
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Webwork** is nothing but a Java web application development framework. The
    following is a quick overview of Webworks as you find it in the OpenSymphony documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"It is built specifically with developer productivity and code simplicity
    in mind, providing robust support for building reusable UI templates, such as
    form controls, UI themes, internationalization, dynamic form parameter mapping
    to JavaBeans, robust client- and server-side validation, and much more."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Read more about Webwork1 at the archived link: [http://web.archive.org/web/20080328114803/http://www.opensymphony.com/webwork_old/src/docs/manual/](http://web.archive.org/web/20080328114803/http://www.opensymphony.com/webwork_old/src/docs/manual/).'
  prefs: []
  type: TYPE_NORMAL
- en: Note that JIRA uses Webwork1 and not 2\. In this book, all instances of webwork
    refer to the webwork1 version. JIRA itself refers to the technology as webwork,
    but you will notice that the files, plugin modules, and so on, use webwork1 in
    it just to emphasize the version.
  prefs: []
  type: TYPE_NORMAL
- en: Seraph
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Seraph** is Atlassian''s opensource web authentication framework. It provides
    a simple, extensible authentication system that JIRA uses for all authentication
    purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: Read more about Seraph at [http://docs.atlassian.com/atlassian-seraph/latest/](http://docs.atlassian.com/atlassian-seraph/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: OSUser
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**OSUser** is OpenSymphony''s user and group management framework. It is designed
    to provide a simple-to-use API for user-management. JIRA uses OSUserframework
    in versions prior to JIRA 4.3.'
  prefs: []
  type: TYPE_NORMAL
- en: Read more about it at [http://www.opensymphony.com/osuser/](http://www.opensymphony.com/osuser/).
  prefs: []
  type: TYPE_NORMAL
- en: JIRA 4.3+ uses Crowd as its new User API for which the details can be found
    at [http://docs.atlassian.com/atlassian-crowd/current/com/atlassian/crowd/embedded/api/CrowdService.html](http://docs.atlassian.com/atlassian-crowd/current/com/atlassian/crowd/embedded/api/CrowdService.html).
  prefs: []
  type: TYPE_NORMAL
- en: PropertySet
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**PropertySet** is again another open source framework from OpenSymphony that
    helps you to store a set of properties against any ''entity'' with a unique ID.
    The properties will be key/value pairs and can only be associated with a single
    entity at a time.'
  prefs: []
  type: TYPE_NORMAL
- en: Read about all that and more at [http://www.opensymphony.com/propertyset/](http://www.opensymphony.com/propertyset/).
  prefs: []
  type: TYPE_NORMAL
- en: OSWorkflow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: OSWorkflow is yet another open source framework from the OpenSymphony group.
    It is an extremely flexible workflow implementation that is capable of driving
    complex conditions, validators, post functions, and so on, along with many other
    features.
  prefs: []
  type: TYPE_NORMAL
- en: Read more about OSWorkflow at [http://www.opensymphony.com/osworkflow/](http://www.opensymphony.com/osworkflow/).
  prefs: []
  type: TYPE_NORMAL
- en: OfBiz Entity Engine
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: OfBiz stands for **Open For Business** and the **OfBiz Entity Engine** is a
    set of tools and patterns used to model and manage entity-specific data.
  prefs: []
  type: TYPE_NORMAL
- en: As per the definition from the standard Entity-Relation modeling concepts of
    Relational Database Management Systems, *an Entity is a piece of data defined
    by a set of fields and a set of relations to other entities.*
  prefs: []
  type: TYPE_NORMAL
- en: Read more about the Entity Modeling and concepts at [http://ofbiz.apache.org/docs/entity.html](http://ofbiz.apache.org/docs/entity.html).
  prefs: []
  type: TYPE_NORMAL
- en: Apache Lucene
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following is a simple definition of **Apache Lucene** that you can find
    in its documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Apache Lucene(TM) is a high-performance, full-featured text search engine
    library written entirely in Java. It is a technology suitable for nearly any application
    that requires full-text search, especially cross-platform."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: More about Lucene and its potential can be found at [http://lucene.apache.org/java/docs/index.html](http://lucene.apache.org/java/docs/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Atlassian Gadget JavaScript Framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JIRA4 introduces a powerful gadget framework. Atlassian has gone **OpenSocial**
    with gadgets and in order to help developers in creating gadgets, Atlassian has
    introduced **Gadgets Javascript Framework** that encapsulates a lot of common
    requirements and functionalities used between gadgets.
  prefs: []
  type: TYPE_NORMAL
- en: More about gadget development can be read at [http://confluence.atlassian.com/display/GADGETDEV/Using+the+Atlassian+Gadgets+JavaScript+Framework](http://confluence.atlassian.com/display/GADGETDEV/Using+the+Atlassian+Gadgets+JavaScript+Framework).
  prefs: []
  type: TYPE_NORMAL
- en: Quartz
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Quartz** is an open source job scheduling service. It can be used to create
    jobs that can be scheduled within any JAVA EE and SE applications. The tasks are
    defined as standard Java components and scheduler includes many enterprise-class
    features, such as JTA transactions and clustering.'
  prefs: []
  type: TYPE_NORMAL
- en: Read more at [http://www.quartz-scheduler.org/](http://www.quartz-scheduler.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Architecture explained…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is best to learn the intricacies of system architecture with the help of
    a diagram. For the benefit of a brief but meaningful explanation on the JIRA Architecture,
    let us have a quick look (or a long stare, whichever you are comfortable!) at
    the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Architecture explained…](img/1803_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: JIRA is a web application built using the MVC Architecture. It is fully written
    in JAVA and is deployed as a WAR file into a JAVA Servlet Container such as Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of the JIRA core functionality revolves around the **JIRA Utility
    and Manager Classes** which thus becomes the heart of JIRA. But it also interacts
    with a lot of third-party components, which we saw earlier, to deliver powerful
    functionalities like Workflows, Permissions, User Management, Searching, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: As with any other web application, let us start with the incoming requests.
    Users interact with JIRA using web browsers. But there are other ways to interact
    with JIRA like using the **Jelly scripts** or by making remote calls using **REST**
    **/SOAP** **/XML-RPC**.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and user management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The user authentication, whichever way the request comes, is done in JIRA using
    Seraph, Atlassian's open source web authentication framework. Seraph is implemented
    as a servlet filter and it intercepts each and every incoming request and associates
    them with a specific user. It supports various authentication mechanisms like
    HTTP Basic Authentication, form-based authentication, and so on, and even looking
    up already stored credentials in a user session when implemented with SSO (Single
    sign on).
  prefs: []
  type: TYPE_NORMAL
- en: However, Seraph doesn't do any user management itself. It delegates this to
    the OSUser framework. One additional thing that Seraph does in JIRA is to intercept
    URLs starting with `/admin/` and allow users only if they have the 'Global Admin'
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'Coming back to authentication and other user management functions, it is OSUser
    that does the work for JIRA in versions prior to 4.3\. It does the following activities:'
  prefs: []
  type: TYPE_NORMAL
- en: User management—Creates/Updates/Deletes users and stores the details in JIRA
    database. Stores user preferences.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group management—Creates/Updates/Deletes groups and stores the details in JIRA
    database. Manages group memberships.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication—Password matching.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From JIRA 4.3, user management in JIRA is done using Crowd. **Crowd** is a single
    sign-on and identity management system from Atlassian which is now embedded in
    JIRA 4.3+. Plugin developers can now use **CrowdService** to manage users and
    groups, for which more information can be found at [http://docs.atlassian.com/atlassian-crowd/current/com/atlassian/crowd/embedded/api/CrowdService.html](http://docs.atlassian.com/atlassian-crowd/current/com/atlassian/crowd/embedded/api/CrowdService.html).
  prefs: []
  type: TYPE_NORMAL
- en: Property management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'JIRA lets you add key/value pairs as properties on any available ''entity''
    like User, Group, Project, Issue, and so on. It uses OpenSymphony''s PropertySet
    to do this. Three major cases where PropertySet is used internally in JIRA are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To store user preferences by the OSUser framework like e-mail, full name, and
    so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To store application properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To store chosen preferences of Portlets/Gadgets on user dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also use the PropertySet in our plugins to store custom data as key/value
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: In earlier versions of JIRA, PropertySet was the only technology used to store
    plugin information and other data-related to plugins. But JIRA now supports a
    new technology called **ActiveObjects** which can be used to store plugin data.
    It is explained in detail in the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Presentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The presentation layer in JIRA is built using **JSPs** and **Velocity** templates.
    The web requests, coming on to JIRA, are processed by OpenSymphony's Webwork1
    framework. The requests are handled by webwork actions which internally use the
    JIRA Service layer. The service classes expose the core Utility and Manager classes
    that perform the tasks behind the scenes!
  prefs: []
  type: TYPE_NORMAL
- en: Database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JIRA talks to its database using the **Ofbiz Entity Engine** module. Its database
    schema is defined in the `entitmodel.xml` residing at `WEB-INF/classes/entitydefs`.
    The DB connectivity configuration goes in to `entityengine.xml` under `WEB-INF/classes`.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA supports a wide variety of database products for which more details can
    be found at [http://confluence.atlassian.com/display/JIRA/Connecting+JIRA+to+a+Database](http://confluence.atlassian.com/display/JIRA/Connecting+JIRA+to+a+Database).
  prefs: []
  type: TYPE_NORMAL
- en: Workflows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Workflows are one of the most important features in JIRA. It provides us with
    a highly configurable workflow engine, which uses OpenSymphony's OSWorkflow behind
    the scenes. It lets us customize the workflows by adding new steps and transitions
    and for each transition we can add conditions, validators, or post functions.
    We can even write plugins to add more of these, in addition to the ones that ship
    with JIRA. We will see all that in detail in the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Searching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JIRA uses Apache Lucene to perform indexing in JIRA. Whenever an issue is changed
    in JIRA, it performs a partial re-indexing to update the related indexes. JIRA
    also lets us do a full re-index at any time manually from the Administration screen.
  prefs: []
  type: TYPE_NORMAL
- en: Searching in JIRA is done using these indexes which are stored in the local
    drive. We can even store search queries as filters whose results gets updated
    as the indexes changes.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduled jobs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JIRA uses the Quartz API to schedule jobs within JIRA. The jobs, including the
    subscriptions to the filters and the custom ones we add, are stored in the JIRA
    database, and are executed by the Quartz job scheduling service.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA's built-in scheduled job details can be found at `scheduler-config.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to schedule new events in JIRA using the SAL services implementation.
    As Atlassian puts it:'
  prefs: []
  type: TYPE_NORMAL
- en: '"The Shared Access Layer, or SAL inshort, provides a consistent, cohesive API
    to common plugin tasks, regardless of the Atlassian application into which your
    plugin is deployed."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: More information on scheduling events in JIRA using SAL can be found at [https://developer.atlassian.com/display/DOCS/Plugin+Tutorial+-+Scheduling+Events+via+SAL](https://developer.atlassian.com/display/DOCS/Plugin+Tutorial+-+Scheduling+Events+via+SAL).
  prefs: []
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Last, but not the least, plugins fit into the JIRA Architecture to provide extra
    functionalities or to alter some of the existing ones. The plugins mostly use
    the same JIRA core utility classes and manager classes as webwork actions do,
    but in some cases also add/contribute to the list.
  prefs: []
  type: TYPE_NORMAL
- en: There are different pluggable points in JIRA which we will see in detail in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: This, I hope, gives you a brief introduction to the JIRA architecture and the
    major components used in it. We will see most of these in detail in the coming
    chapters and how to customize them by writing plugins. Off you go!
  prefs: []
  type: TYPE_NORMAL
- en: Types of plugin modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us briefly see the different types of plugin modules supported in JIRA 4.x.
    All these modules are various extension points, using which we can not only add
    new functionalities in to JIRA, but also extend some of the existing functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Let us group them based on functionality instead of seeing them all together!
  prefs: []
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Module type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Portlet | Adds new portlets to the user''s dashboard. It is deprecated in
    JIRA 4.x, but is still supported. Usage of Gadgets is recommended. |'
  prefs: []
  type: TYPE_TB
- en: '| Gadget | Adds new Gadgets into the user''s dashboard. These gadgets can also
    be accessed from other applications. |'
  prefs: []
  type: TYPE_TB
- en: '| Report | Adds new reports into JIRA. |'
  prefs: []
  type: TYPE_TB
- en: Workflows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Module type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| workflow-condition | Adds new workflow conditions to the JIRA workflow. It
    can then be used to limit the workflow actions to users, based on pre-defined
    conditions. |'
  prefs: []
  type: TYPE_TB
- en: '| workflow-validator | Adds new workflow validations to the JIRA workflow.
    Validations can be used to prevent certain workflow actions when the criteria
    are not met. |'
  prefs: []
  type: TYPE_TB
- en: '| workflow-function | Adds new workflow post functions to the JIRA workflow.
    These can be used to perform custom actions after a workflow action is executed
    |'
  prefs: []
  type: TYPE_TB
- en: Custom fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Module type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| customfield-type | Adds new custom field types to JIRA. We can customize
    the look-and-feel of the fields in addition to custom logic. See also `customfield-searcher`.
    |'
  prefs: []
  type: TYPE_TB
- en: Searching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Module Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| customfield-searcher | Adds new field searchers on to JIRA. The searcher
    needs to be mapped with the relevant custom fields. |'
  prefs: []
  type: TYPE_TB
- en: '| jqlfunction | Adds new JQL Functions to be used with JIRA''s advanced searching.
    |'
  prefs: []
  type: TYPE_TB
- en: '| search-request-view | Adds a new view in the Issue Navigator. They can be
    used to show the search results in different ways. |'
  prefs: []
  type: TYPE_TB
- en: Links and tabs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Module Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| issue-operation | Adds new Issue Operations in the **View** issue screen.
    This module is unavailable from JIRA 4.1.x. Web Items (see *web-item* module)
    are used from 4.1.x instead of issue-operation module. |'
  prefs: []
  type: TYPE_TB
- en: '| web-section | Adds new sections in application menus. Each section can contain
    one or more links under it. |'
  prefs: []
  type: TYPE_TB
- en: '| web-item | Adds new links that will appear at a defined section. The section
    here can be the new ones we added or the existing JIRA web sections. |'
  prefs: []
  type: TYPE_TB
- en: '| project-tabpanel | Adds new tabs to the Browse **Project** screen. We can
    define what has to appear in the tab. |'
  prefs: []
  type: TYPE_TB
- en: '| component-tabpanel | Adds new tabs to the Browse **Component** screen. As
    above, we can define what to appear in the tab. |'
  prefs: []
  type: TYPE_TB
- en: '| version-tabpanel | Adds new tabs to the Browse **Version** screen. Same as
    above. |'
  prefs: []
  type: TYPE_TB
- en: '| issue-tabpanel | Adds new tabs to the **View Issue** screen. Similar to other
    tabs, here also we can define what appears in the tab. |'
  prefs: []
  type: TYPE_TB
- en: '| web-panel | It is newly introduced in JIRA 4.4\. Defines panels or sections
    that can be inserted into an HTML page. |'
  prefs: []
  type: TYPE_TB
- en: Remote invocation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Module type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| rest | Creates new REST APIs for JIRA to expose more services and data entities.
    |'
  prefs: []
  type: TYPE_TB
- en: '| rpc-soap | Publishes new SOAP end-points for JIRA. It is deployed as a new
    SOAP service and exposes a new WSDL with the operations we have published in the
    plugin. |'
  prefs: []
  type: TYPE_TB
- en: '| rpc-xmlrpc | Same as above. Exposes XML-RPC endpoints, instead of SOAP, within
    JIRA. |'
  prefs: []
  type: TYPE_TB
- en: Actions and components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Module type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| webwork | Adds new webwork actions along with views into JIRA which can add
    new functionality or override existing ones. |'
  prefs: []
  type: TYPE_TB
- en: '| component | Adds components to JIRA''s component system. These are then available
    for use in other plugins and can be injected into them. |'
  prefs: []
  type: TYPE_TB
- en: '| component-import | Imports components shared by other plugins. |'
  prefs: []
  type: TYPE_TB
- en: Other plugin modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Module type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| resource | Adds downloadable resources into the plugins. A resource is a
    non-JAVA file such as JavaScript, CSS, image files, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| web-resource | Similar to the above, adds downloadable resources into the
    plugins. But these are added to the top of the page with the cache-related headers
    set to never expire. We can also specify the resources to be used only in specific
    contexts. Multiple resource modules will appear under a web-resource module. |'
  prefs: []
  type: TYPE_TB
- en: '| servlet | Deploys a JAVA servlet onto JIRA. |'
  prefs: []
  type: TYPE_TB
- en: '| servlet-context-listener | Deploys a JAVA Servlet Context Listener. |'
  prefs: []
  type: TYPE_TB
- en: '| servlet-context-param | Sets parameters in the Servlet context shared by
    the plugin''s servlets, filters, and listeners. |'
  prefs: []
  type: TYPE_TB
- en: '| servlet-filter | Deploys a JAVA servlet filter onto JIRA. The order and position
    in the application''s filter chain can be specified. |'
  prefs: []
  type: TYPE_TB
- en: '| user-format | Adds custom behaviors for user details. Used to enhance the
    user profile. |'
  prefs: []
  type: TYPE_TB
- en: '| keyboard-shortcut | Available only from 4.1.x. Defines new keyboard shortcuts
    for JIRA. You can also override the existing shortcuts from JIRA 4.2.x! |'
  prefs: []
  type: TYPE_TB
- en: '| module-type | Dynamically adds new plugin module types to the plugin framework.
    The new module can be used by other plugins. |'
  prefs: []
  type: TYPE_TB
- en: What goes into atlassian-plugin.xml?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's look deeper into the plugin descriptor named `atlassian-plugin.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is how the plugin descriptor will look like when the skeleton plugin
    is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add more details into it depending on the type of plugin we are
    going to develop. The plugin descriptor can be divided into three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Atlassian-plugin** element: This forms the root of the descriptor. The following
    attributes populates the `atlassian-plugin` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**key**: This is probably the most important part. It should be a unique key
    across the JIRA instance and will be used to refer the different modules in the
    plugin, just like we use the packages in a Java application. If you see `${project.groupId}.${project.artifactId}`
    as the plugin key, it picks up the values from your `pom.xml` file. When the plugin
    is built, the key will be `YOUR_GROUP_ID.YOUR_ARTIFACT_ID`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name**: Give an appropriate name for your plugin. This will appear in the
    plugin menu under administration.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**plugins-version**: This is different from the version attribute. `plugins-version`
    defines whether the plugin is version 1 or 2\. `plugins-version="2"` defines the
    plugin as a version 2 plugin. Remove the entire attribute to make it a version
    1 plugin.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**state**: This is an optional element to define the plugin as disabled, by
    default. Add `state="disabled"` under the `atlassian-plugin` element.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugin-info** element : This section contains information about a plugin.
    It not only provides information that is displayed to administrators but also,
    optionally, provides bundle instructions to the OSGI network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**description**: A simple description about your plugin.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**version**: The actual version of you plugin which will be displayed under
    the plugin menu along with the Name and Description.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**application-version**: Here you can define the minimum and maximum version
    of the JIRA application that is supported by your plugin. `<application-version
    min="4.0.2" max="4.1"/>` will be supported from 4.0.2 to 4.1.But remember, this
    is only for information''s sake. The plugin might still work fine in JIRA 4.2!'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**vendor**: Here you can provide details about the plugin vendor. It supports
    two attributes: **name** and **url**, which can be populated with the organization''s
    Name and URL respectively.Similar to plugin key, you can populate this from the
    `pom.xml`file,as you would have noticed in the skeleton descriptor.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**param**: This element can be used to define name/value attributes for the
    plugin. You can pass as many attributes as you want. For example, `<paramname="configure.url">/secure/JTricksConfigAction.jspa</param>`
    defines the configuration URL for our demo plugin.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bundle-instructions**: Here we define the OSGI bundle instructions which
    will be used by the Maven Bundle plugin while generating the OSGI bundle.More
    about this can be read under aQutebndtool: [http://www.aqute.biz/Code/Bnd](http://www.aqute.biz/Code/Bnd).
    Following are the two elements in a snapshot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Export-Package**: This element defines the package in this plugin that can
    be exposed to other plugins. All other packages will remain private.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Import-Package**: This element defines the packages that are outside this
    plugin but that are exported in other plugins.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugin Modules**: This is the section where the actual plugin modules, which
    we saw a bit earlier and will see in detail later in this book, will appear.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hopefully, you now have your plugin descriptor ready with all the necessary
    attributes!
  prefs: []
  type: TYPE_NORMAL
- en: Working with the Plugins1 and Plugins2 versions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us also quickly see how to deal with the Plugins1 and Plugins2 versions.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go on to the details, it is essential to understand the importance
    of both the versions. Post 4.x, JIRA used to support only Plugins1 version. So
    why do we need Plugins2 version?
  prefs: []
  type: TYPE_NORMAL
- en: The key motive behind version 2 plugins is to keep the plugins as a bundle isolated
    from the other plugins and the JIRA core classes. It makes use of the OSGI platform
    ([http://www.osgi.org](http://www.osgi.org)) to achieve this. While it keeps the
    plugins isolated, it also gives you a way to define dependencies between plugins
    leaving it to the plugin developer's convenience. It even lets you import or export
    selected packages within the plugin giving increased flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that the version2 plugins are deployed as OSGI bundles also means that
    the plugins are dynamic in nature. They may be installed, started, updated, stopped,
    and uninstalled at any time during the running of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: It is the developer's choice to go for the Plugins1 version or the Plugins2
    version, depending on the nature of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see the key differences at various stages of plugin development for both
    the versions.
  prefs: []
  type: TYPE_NORMAL
- en: Development
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '|  | Plugins1 | Plugins2 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Version** | No `plugins-version` element in `atlassian-plugin.xml`. | Include
    the `plugins-version` element in the `atlassian-plugin.xml` as follows:`<atlassian-plugin
    key="${project.groupId}.${project.artifactId}" name="${project.artifactId}" plugins-version="2">`
    |'
  prefs: []
  type: TYPE_TB
- en: '| **External Dependencies** | Include the dependent libraries with the **provided**
    scope in your `pom.xml`file if the jars are added into `WEB-INF/lib` or **compile**
    scope if the jars should be embedded into the plugin. | Dependent libraries must
    be included in the plugin as the plugin cannot make use of resources under `WEB-INF/lib`.
    This can be done in two ways.'
  prefs: []
  type: TYPE_NORMAL
- en: Provide the scope in the `pom.xml` file as compile. In this case, the jars will
    be picked up by the Plugin SDK and added into the `META-INF/lib` folder of the
    plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually add the dependent jar files into the `META-INF/lib` directory inside
    the plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also make your plugin dependent on other bundles. See *Managing Complex
    Dependencies* in this table. |
  prefs: []
  type: TYPE_NORMAL
- en: '| **Dependency Injection** | Done by Pico Container in JIRA. All registered
    components can be injected directly. | Done by the plugin framework. Not all JIRA''s
    core components are available for injection in the constructor.Use the `component-import`
    module to access some of the dependencies that are not directly accessible within
    the plugin framework. Use it also to import public components declared in other
    plugins. |'
  prefs: []
  type: TYPE_TB
- en: '| **Declaring new Components** | Use the component module to register new components.
    Once done, it is available to all the plugins. | Use the component module to register
    components. To make it available to other plugins, set the public attribute to
    ''true''. It is ''false'' by default, making it available only to the plugin in
    which it is declared. |'
  prefs: []
  type: TYPE_TB
- en: '| **Managing Complex dependencies** | All the classes in version1 plugins are
    available to all other plugins and JIRA core classes. | Version2 plugins allows
    us to optionally import/export selected packages using **bundle-instructions**
    in the plugin descriptor or alternatively by the Import-Packge/Export-Packge options
    while building the bundle.The **Bundle Dependency System** hence allows you to
    define complex dependencies between plugins, eliminating the class path contradictions
    and upgradation of plugins. |'
  prefs: []
  type: TYPE_TB
- en: Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Plugins1 | Plugins2 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Plugin must be on the application classpath.Hence deploy it under the `WEB-INF/lib`
    folder. | Plugin must *not* be on the application classpath. It is loaded using
    the plugin framework.Hence the plugin is deployed under `${jira-home}/plugins/installed-plugins/`.`Jira-home`
    is declared in the `jira-application.properties` file under `WEB-INF/classes`.
    |'
  prefs: []
  type: TYPE_TB
- en: Right, we now know how the two plugin versions work. Maybe it is time to see
    the plugins that JIRA comes with!
  prefs: []
  type: TYPE_NORMAL
- en: JIRA System plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will see a brief overview of the JIRA System plugins.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of JIRA's functionality is written in the form of plugins. It not only
    showcases what we can achieve using plugins, but also helps us, as developers,
    to understand how the various pieces fit together.
  prefs: []
  type: TYPE_NORMAL
- en: If it is the `atlassian-plugin.xml` file that describes the plugin functionalities,
    JIRA maintains the information in `*.xml` files placed under `WEB-INF/classes`.
    You will also find the related classes in the exploded folders under `WEB-INF/classes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us have a quick look at the various system plugin XMLs that can be found
    in `WEB-INF/classes` and the functionality they support:'
  prefs: []
  type: TYPE_NORMAL
- en: '| System plugin XML | Functionality |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `system-contentlinkresolvers-plugin.xml` | **System Content Link Resolvers**—Resolves
    parsed content links into Link objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Attachment Link Resolver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anchor Link Resolver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JIRA Issue Link Resolver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User Profile Link Resolver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `system-customfieldtypes-plugin.xml` | **JIRA System custom fields**—All
    the out-of-the-box custom fields in JIRA and the searcher associations.Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Text Field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text Area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '...............'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User Picker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `system-footer-plugin.xml` | This plugin renders the content of the footer
    in JIRA. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-issueoperations-plugin.xml` | **System Issue Operations**—Renders
    the issue operations using web-items grouped using web-sections.Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign Issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '..................'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log Work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `system-issuetabpanels-plugin.xml` | **System Issue Tab Panels**—Renders
    the various tabs on the **View Issue** page:'
  prefs: []
  type: TYPE_NORMAL
- en: All Tab Panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment Tab Panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work Log Tab Panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change history Tab Panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVS Tab Panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `system-issueviews-plugin.xml` | Renders the **single issue view** and the
    various **search request views**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Single Issue Views : XML, Word, Printable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Search Views : XML, RSS, RSS (Comments), Printable, Word, Full Content, Excel
    (All fields), Excel (Current fields), Charts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `system-jql-function-plugin.xml` | Built-in **JQL Functions**. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-keyboard-shortcuts-plugin.xml` | Built-in **Keyboard Shortcuts**.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `system-macros-plugin.xml` | JIRA''s base **System Macros**. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-portlets-plugin.xml` | Built-in **portlets**. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-project-plugin.xml` | **System Project Panels**—Renders the Browse
    Project, Browse Version, and Browse Component panels. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-projectroleactors-plugin.xml` | **System Project Role Actors**—built-in
    project role actors (User Role Actor and Group Role Actor) and the associated
    webwork actions. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-renderercomponentfactories-plugin.xml` | **Renderer Component Factories
    Plugin**—instantiates Renderer Components using the plugin system.Macro Renderer,
    Link Renderer, URL Renderer, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-renderers-plugin.xml` | Built-in **System Renderers**:'
  prefs: []
  type: TYPE_NORMAL
- en: Wiki Style Renderer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default Text Renderer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `system-reports-plugin.xml` | Built-in **System Reports**. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-top-navigation-plugin.xml` | Renders the content of the **top navigation
    bar** in JIRA.Has a collection of web-items and web-sections. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-user-format-plugin.xml` | Renders a user in JIRA differently at different
    places. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-user-profile-panels.xml` | Renders the panels on the **User Profile**
    page. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-webresources-plugin.xml` | **System Web Resources**—Includes static
    resources like JavaScript files, style sheets, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-webwork1-plugin.xml` | **System webwork Plugin****—**Can be used
    to add custom webwork actions, which can also be done using plugins. |'
  prefs: []
  type: TYPE_TB
- en: '| `system-workflow-plugin.xml` | System workflow **conditions**, **functions**,
    and **validators.** |'
  prefs: []
  type: TYPE_TB
- en: In addition to use these files as a starting point for JIRA plugin development,
    we might sometimes end up modifying these files to override the way JIRA works.
  prefs: []
  type: TYPE_NORMAL
- en: Care must be taken to upgrade the changes during the time of a JIRA upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: So that was a pretty lengthy introduction to the JIRA Architecture! Let us quickly
    move on to the recipes in this chapter. Time to code!!
  prefs: []
  type: TYPE_NORMAL
- en: Converting plugins from v1 to v2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are moving to JIRA 4.x from JIRA 3.13.x or earlier versions, one of the
    important differences is the introduction of v2 plugins. While designing the upgrade
    to JIRA 4.x, it makes perfect sense to sometimes migrate the plugins from v1 to
    v2, although it is not a mandatory step. In this recipe, we will see how to convert
    a version1 plugin to a version2 plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a couple of questions we need to ask before the plugin is converted:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Are all the packages used by the plugin available to OSGi plugins****?**
    This is very important because JIRA doesn''t expose all the packages to OSGi plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list of packages exported and made available to the plugins2 version can
    be found in the `com.atlassian.jira.plugin.DefaultPackageScannerConfiguration`
    class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Are all the components used by the plugin available to OSGi plugins?** Similar
    to the previous question, we need to make sure the components are also exposed
    to the OSGi plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunately, there is no definite list provided by Atlassian for JIRA. To
    check if the components are available, use dependency injection. The plugin will
    fail in the start-up if the component is not available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The actual conversion process of v1 plugins to v2 is easier than you think if
    the packages and the components that you have used in the plugin are available
    to the OSGi plugins. Here are the steps for conversion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `plugins-version="2"` attribute in `atlassian-plugin.xml`. This is
    probably the only mandatory step in the conversion process. You will be amazed
    to see that many of the plugins will work as it is! Once added, the plugin descriptor
    looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Modify the source code, if required. This includes migration to the new API
    if you are moving to a new JIRA version with API changes, working out the changes
    if some of the packages/components not exported to OSGi are used in the v1 plugin,
    and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize the package imports and exports by defining them in the bundle manifest.
    You can do this by using the Bundle Instructions we saw while explaining the `atlassian-plugin.xml`
    earlier in this chapter or simply by adding the appropriate entries into the manifest
    file in your jar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is an optional step which you need to do only if you want to import packages
    from another plugin/bundle or you want to export some of your packages to make
    it available to other plugins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Expose your custom plugin components to other plugins using the `component`
    module. You must set the public attribute to true in the component registered
    in your `atlassian-plugin.xml` file. That is, `public="true"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must import the components specifically if you want to use the components
    declared publicly in other plugins. Use the `component-import` module to do this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can also optionally add advanced spring configurations by adding **Spring
    Dynamic Modules** (**SpringDM**) configuration files (of the format `*.xml`) under
    the `META-INF/spring/` directory. These files will then be loaded by the Spring
    DM Loader. The details are outside the scope of this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The v2 plugin JAR file created with the Atlassian descriptor containing the
    required modules, goes through the following journey:'
  prefs: []
  type: TYPE_NORMAL
- en: The plugin is loaded at JIRA start-up and JIRA identifies the new jar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DirectoryLoader` checks whether the new plugin is version2 or version1.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If version2, it checks for the OSGI manifest entries which you can enter in
    the `MANIFEST.MF` file. If found, the plugin is installed as an OSGI bundle and
    started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the OSGI manifest entries are not present, JIRA uses the BND tool ([http://www.aqute.biz/Code/Bnd](http://www.aqute.biz/Code/Bnd))
    to generate the manifest entries and insert them into the `MANIFEST.MF` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It then checks for the presence of an explicit `atlassian-plugin-spring.xml`.
    If the file is present, the plugin is then deployed as an OSGI bundle,as in step
    2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `atlassian-plugin-spring.xml` file is absent, it then scans the `atlassian-plugin.xml`
    file and converts the registered components and others into OSGI references or
    OSGI services and creates an `atlassian-plugin-spring.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the `atlassian-plugin-spring.xml` file is created, the plugin is deployed
    as an OSGI bundle and installed into the PluginManager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JIRA thus gives us the flexibility to define our own custom OSGI manifest entries
    and references or let JIRA do the dirty work by defining them appropriately in
    the plugin descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Deploying your plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process"), *Plugin Development Process*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a skeleton plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding resources into plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is often required to add static resources like JavaScript files, CSS files,
    and so on in our plugins. To enable JIRA to serve these additional static files,
    they should be defined as downloadable resources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A resource can be of different types. It is normally defined as a non-Java file
    that the plugin requires to operate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of resources that you will come across during JIRA plugin development
    include, but are not restricted to, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Velocity (`*.vm`) files required to render a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Property files for localization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To include a resource, add the resource module to the `atlassian-plugin.xml`
    file. The resource module can be added as part of the entire plugin or can be
    included within another module, restricting it just for that module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the attributes and elements available for the resource module
    and their uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | Name of the resource. This is used by the plugin or module to locate
    a resource. You can even define a directory as a resource by adding a trailing
    `/`. |'
  prefs: []
  type: TYPE_TB
- en: '| `namePattern` | Pattern to use when loading a directory resource. |'
  prefs: []
  type: TYPE_TB
- en: '| `type` | Type of the resource.Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`download` for resources like CSS, JavaScript, Images, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`velocity` for velocity files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `location` | Location of the resource within the plugin jar. The full path
    to the file without a leading slash is required. When using, `namePattern` or
    pointing to directory resource, a trailing `/` is required. |'
  prefs: []
  type: TYPE_TB
- en: '| `property` `(key/value)` | Used to add properties as key/value pairs to the
    resource. Added as a child tag to resources.Example: `<property key="content-type"
    value="text/css"/>` |'
  prefs: []
  type: TYPE_TB
- en: '| `param` `(name/value` `)` | Used to add name/value pairs. Added as a child
    tag to resources.Example: `<param name="content-type" value="image/gif"/>` |'
  prefs: []
  type: TYPE_TB
- en: All you have to do is to add the resource tag to the `atlassian-plugin.xml`
    file, either at the plugin level or at a module level. The resource will then
    be available for use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource definition for an image will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A CSS file might looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once the resource is defined in the plugin descriptor, you can use it anywhere
    in the plugin. Following is how you refer to the resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us consider that you have a directory referenced as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A file `demoimage.gif` can be a reference in your velocity template as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A sample piece of code used in your plugin module looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Where `com.jtricks.demo` is the plugin key and `demomodule` is the module key.
  prefs: []
  type: TYPE_NORMAL
- en: Adding web resources into plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The web resources plugin module, like the resource module we just saw, allows
    defining downloadable resources. The difference is that the web resources are
    added at the top of the page in the header with the cache-related headers set
    to never expire.
  prefs: []
  type: TYPE_NORMAL
- en: An additional advantage of using web resources module is that we can specify
    the resources to be included in specific contexts within the application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The root element for the web resource plugin module is **web-resource**. It
    supports the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Key` | The only mandatory attribute. This should be unique within the plugin.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Disabled` | Indicates whether the plugin module should be disabled by default
    or not. |'
  prefs: []
  type: TYPE_TB
- en: '| `i18n-name-key` | The localization key for the human-readable name of the
    plugin module. |'
  prefs: []
  type: TYPE_TB
- en: '| `Name` | Human-readable name of the web resource. |'
  prefs: []
  type: TYPE_TB
- en: The following are the key elements supported.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `description` | Description of the module. |'
  prefs: []
  type: TYPE_TB
- en: '| `resource` | All the resources to be added as web resources. See *Adding
    resources into plugins*. |'
  prefs: []
  type: TYPE_TB
- en: '| `dependency` | Used to define dependency on the other web-resource modules.
    The dependency should be defined as `pluginKey:web-resourceModuleKey`.Example:
    `<dependency>com.jtricks.demoplugin:demoResource</dependency>` |'
  prefs: []
  type: TYPE_TB
- en: '| `context` | Define the context where the web resource is available. |'
  prefs: []
  type: TYPE_TB
- en: We can define the web-resource module by populating the attributes and elements
    appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a webresource is defined, it is available for you in the plugin just like
    your downloadable plugin resources. As mentioned earlier, the resources are added
    to the top of the page in the header section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your action class or servlet, you can access these resources with the help
    of **WebResourceManager****.** Inject the manager class into your constructor
    and you can then use it to define the resource as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The argument should be `pluginKey:web-resourceModuleKey`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, all the resources under the web-resource module are served in batch
    mode, that is, in a single request. This reduces the number of HTTP requests from
    the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we wind up this recipe, it is probably a good idea to identify the available
    contexts for web resources and also to see how we can turn off the batch mode
    while loading resources.
  prefs: []
  type: TYPE_NORMAL
- en: Web resource contexts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Following are the available web resource contexts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`atl.general`: Everywhere except administration screens'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`atl.admin`: Administration screens'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`atl.userprofile`:User profile screens'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can have multiple contexts added like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Turning off batchmode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned earlier, the resources are loaded in one batch to reduce the number
    of HTTP requests from the browser. But if you want to switch off the batch mode
    for some reason, it can be achieved in two ways.
  prefs: []
  type: TYPE_NORMAL
- en: You can switch of batch mode `system-wide` by adding a property `plugin.webresource.batching.off=true`
    into `jira-application.properties`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It can be turned off by individual resources by adding a `param` element as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Adding resources into plugins*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building JIRA from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best things about JIRA, if you have a valid license, is that you
    get to see the source code. To see it, modify it, break it... err modify it because
    you have the license to do it!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following are some of the pre-requisites prior to building JIRA from the source.
  prefs: []
  type: TYPE_NORMAL
- en: A valid JIRA license to get access to the source code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An environment with JDK 1.5 or higher for JIRA 4.2 and lower versions. JDK 1.6
    or higher for JIRA 4.3+.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need both Maven1 and Maven2 if you are building versions prior to JIRA
    4.3\. Download Maven version 1.0.x and 2.1.x from [http://maven.apache.org](http://maven.apache.org).
    JIRA 4.3+ needs only Maven 2.1.0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need both Maven1 and Maven2 for versions prior to JIRA 4.3 because Maven1
    is required to build the JIRA source and Maven2 is required to build plugins for
    JIRA. JIRA has bundled plugins thatneed to be built along with JIRA and so Maven2
    is also a must.
  prefs: []
  type: TYPE_NORMAL
- en: Maven 2.1.0+ is required for the plugin development process.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us see the steps to build JIRA WAR from the source for versions prior to
    JIRA 4.3:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure **Maven 1.0.x**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the Maven 1.0.x version downloaded earlier to a directory, which we
    will now refer to as `MAVEN_INSTALL_DIR`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Download an Atlassian patched version of Ant jar from `http://confluence.atlassian.com/download/attachments/185729661/ant-optional-1.5.3-1.jar?version=1&modificationDate=1`[276644963420](http://276644963420)
    and copy it to `MAVEN_INSTALL_DIR/maven-1.0/lib`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the `MAVEN_HOME` environment variable, which will be `MAVEN_INSTALL_DIR/maven-1.0`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Maven's bin directory to the path variable.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure **Maven 2.1.x**. If you have already setup your development environment
    using Atlassian Plugin SDK, you can skip this test as it comes along with a bundled
    Maven 2.x.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Maven 2.1.x, as per the instructions at [http://maven.apache.org/download.html](http://maven.apache.org/download.html)
    .
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `settings.xml` by following the example `settings.xml` provided
    by Atlassian at [http://confluence.atlassian.com/display/DEVNET/Example+settings.xml](http://confluence.atlassian.com/display/DEVNET/Example+settings.xml).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the JIRA source ZIP file from [http://www.atlassian.com/software/jira/JIRASourceDownloads.jspa](http://www.atlassian.com/software/jira/JIRASourceDownloads.jspa).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the JIRA source to a directory which we call `JIRA_DIR`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `jira` subdirectory, that is, `JIRA_DIR/jira`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to create an open WAR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to create a closed WAR, execute the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See [http://maven.apache.org/maven-1.x/plugins/war/goals.html](http://maven.apache.org/maven-1.x/plugins/war/goals.html)
    for more Maven WAR goals.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the WAR is created properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following are the steps to create the WAR on JIRA 4.3 and higher versions.
  prefs: []
  type: TYPE_NORMAL
- en: Configure Maven 2.1.0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download and install the required third-party libraries, as these libraries
    are not available in the public Maven repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the correct version of the jar files, as mentioned below:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '| `activation` | `javax.activation:activation` | 1.0.2 |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| `jms` | `javax.jms:jms` | 1.1 |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| `jmxri` | `com.sun.jmx:jmxri` | 1.2.1 |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| `jmxtools` | `com.sun.jdmk:jmxtools` | 1.2.1 |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| `jndi` | `jndi:jndi` | 1.2.1 |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| `jta` | `Jta:jta` | 1.0.1B |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: '| `mail` | `javax.mail:mail` | 1.3.2 |'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
- en: 'Install them to the local Maven repository using the Maven install command:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Extract the JIRA source archive to a local directory, which we call `JIRA_DIR`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the extracted sub directory with the name `atlassian-jira-X.Y-source`
    where X.Y is the version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `build.bat` if on Windows, or `build.sh` if on Linux or Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the WAR file is created properly under `JIRA_DEV/jira-project/jira-distribution/jira-webapp-dist/target
    subdirectory`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you have seen, the process is pretty straightforward and the actual build
    is done by Maven, the magician.
  prefs: []
  type: TYPE_NORMAL
- en: JIRA ships with the `project.xml` or `pom.xml` if in 4.3+, called the Project
    Object Model, which is used by Maven to build the WAR file.
  prefs: []
  type: TYPE_NORMAL
- en: You will be able to find the JIRA dependencies inside the `project.xml` / `pom.xml`.
    Maven will first build the dependencies and then build the JIRA WAR file using
    them.
  prefs: []
  type: TYPE_NORMAL
- en: The only key thing here is to setup Maven correctly. There are a couple of issues
    normally observed while building JIRA WAR, both related to Maven. Maybe it is
    worth touching upon them before we move ahead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Error while downloading dependencies due to the*java.net.ConnectException:
    Connection timed out: connect* exception.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you encounter this, make sure that the Maven proxy settings are configured
    properly. If already configured and still you are getting the error, try disabling
    your antivirus!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Failed to resolve artifact* error. Building JIRA 4.0 fails to download javax
    jms jar. In such cases, download the jar manually and install them into the local
    repository using `mvn install`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In 4.3+, refer to step 2 in the recipe where the relevant `mvn install` commands
    are given.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the WAR file is created, deploy it into a supported application server,
    and enjoy the power of JIRA!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code for this book**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Along with the JIRA source, we have access to the source code of some of the
    JIRA dependencies from Atlassian. You might want to build them separately if you
    ever want to modify their behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Building JIRA dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to JIRA, the dependent projects also use Maven. But it uses Maven1 in
    some cases and Maven2 in some others.
  prefs: []
  type: TYPE_NORMAL
- en: You can determine whether the dependency uses Maven1 or Maven2 by checking its
    Project Object Model by looking in the root directory. If the file is named `project.xml`,
    it uses Maven1 and if the file is named `pom.xml`, it uses Maven2.Simple, right?
  prefs: []
  type: TYPE_NORMAL
- en: Use the following command to generate the jar file for a dependency if it uses
    Maven1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For dependencies with Maven2, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Setting up the development environment* in [Chapter 1](ch01.html "Chapter 1. Plugin
    Development Process")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new webwork actions to JIRA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time plugin developers will find themselves writing new actions
    in JIRA to introduce new functionality. Usually these actions are invoked from
    new web-item links configured at different places in the UI. It could also be
    from customized JSPs or other parts of the JIRA framework.
  prefs: []
  type: TYPE_NORMAL
- en: New actions can be added to JIRA with the help of the webwork plugin module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start, it probably makes sense to have a look at the webwork plugin
    module. Following are the key attributes supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Key` | A unique key within the plugin. It will be used as the identifier
    for the plugin. |'
  prefs: []
  type: TYPE_TB
- en: '| `Class` | This will be `java.lang.Object` as the real logic will reside in
    the action, Class. |'
  prefs: []
  type: TYPE_TB
- en: '| `i18n-name-key` | The localization key for the human-readable name of the
    plugin module. |'
  prefs: []
  type: TYPE_TB
- en: '| `Name` | Human-readable name of the webwork action. |'
  prefs: []
  type: TYPE_TB
- en: 'The following are the key elements supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `description` | Description of the webwork module. |'
  prefs: []
  type: TYPE_TB
- en: '| `actions` | This is where we specify the webwork1 actions.A webwork module
    must contain atleast one action element. It can have any number of actions. |'
  prefs: []
  type: TYPE_TB
- en: 'For each webwork1 action, we should have the following attributes populated:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | Fully qualified name of the action class. The class must extend
    `com.atlassian.jira.action.JiraActionSupport`. |'
  prefs: []
  type: TYPE_TB
- en: '| `alias` | An alias name for the action class. JIRA will use this name to
    invoke the action. |'
  prefs: []
  type: TYPE_TB
- en: 'The following element is supported for the webwork1 action:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `view` | Delegates the user to the appropriate view, based on the output
    of the action. This element has an attribute: name that maps to the return value
    of the action class. |'
  prefs: []
  type: TYPE_TB
- en: Now that you have seen the attributes and elements supported, we can have a
    look at a sample webwork module before proceeding to create one!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us now aim at creating a sample webwork action. For the example, we can
    create an action that takes a user input, prints it out in the console, and displays
    it on the output page after modifying the input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the steps to perform:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the new webwork action module into your `atlassian-plugin.xml`. Let us say,
    we add the same aforementioned snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the action class `DemoAction` under the package `com.jtricks`. The class
    must extend `com.atlassian.jira.action.JiraActionSupport`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the parameters that you need to receive from the user. Create private
    variables for them with the name exactly similar to that of the related HTML tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our example, we need to take a user input. Let us say, it is the name of
    the user. The HTML code in the input view (in our case,`/templates/input.vm`)
    will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, we need to create a String variable of the name `userName` in our action
    class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create setter methods for the variables that are used to get values from the
    input view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our example, we retrieve the `userName` from the input view and process it
    in the action class. So we need to create a setter method for that which will
    look like this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Identify the parameter that needs to be printed in the output page. In our case,
    we will print `modifiedName` in the output page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create getter methods for the parameters to be printed. Velocity or JSPs will
    invoke the getter methods to retrieve the value from the `Action` class. For our
    example, we have a getter method for `modifiedName`, which looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Override the methods of interest. This is where the actual logic will fit it.
    It is entirely up to the plugin developer to determine which methods to be overridden.
    It totally depends on the logic of the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The three main methods of interest are the following. But you can completely
    omit these methods and write your own commands and related methods:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`doValidation`: This is the method where the input validation happens. Plugin
    developers can override this method and add our own bits of custom validations.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doExecute`: This is where the action execution happens. When the input form
    is submitted, the `doExecute` method is called if there are no validation errors.
    All the business logic is done here and the appropriate ''view'' name is returned,
    based on the execution result.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our example, we use this method to modify the input String:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`doDefault`: This method is invoked when the ''default'' command is used. In
    our example, `DemoAction!default.jspa` will invoke the `doDefault` method.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our example, we use this method to redirect the user to the input page:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Velocity template for the input view. The ''input'' view, in our
    example, uses the template: /`templates/input.vm`. Add the HTML code of the input
    text within a form whose action invokes `DemoAction`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the success view to print the `modifiedName` in `/templates/joy.vm`:
    `The output: $modifiedName`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the error view in `/templates/error.vm`: `Oh No, Error!`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Package the plugin and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Point your browser to `${jira_base_url}/secure/DemoAction!default.jspa`. Enter
    some name and submit the form to see it in action!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The example given here is just for the sake of understanding how the webwork
    action works.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is probably worth utilizing this section to see how the flow works in our
    example. Let us see it happening as a step-by-step process.
  prefs: []
  type: TYPE_NORMAL
- en: When `${jira_base_url}/secure/DemoAction!default.jspa` is invoked, the plugin
    framework looks for the action `DemoAction` registered in the `atlassian-plugin.xml`
    file and identifies the command and view associated with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here the `default` command is invoked and so the `doDefault` method in the action
    class is executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`doDefault` method returns the view name as `input`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The input view is resolved as `input.vm`, which presents the form to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the form, webwork populates the `userName` value in the action class using
    the setter method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the execution flow, first the `doValidation` method is invoked. If no error
    is there, which is the case in our example, it invokes the `doExecute` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If there is any error in `doValidation`, the execution stops and the input view
    is shown. You can print the error messages appropriately on the input view, if
    there are any. See webwork1 documentation for details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The input String, `userName`, is then modified and assigned to `modifiedName`
    in the action class (the `doExecute` method) and `success` is returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The success view is resolved as `joy.vm` where the `modifiedName` is printed.
    `$modifiedName` will invoke the `getModifiedName()` method to print the modified
    name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If error is returned, the view is resolved as error.vm and the appropriate error
    message is shown!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Like this, we can write complex actions in JIRA that can be used to customize
    a lot of aspects of JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is also possible to add custom commands to the webwork actions, in addition
    to the `doExecute` and `doDefault` methods. This enables the developer to invoke
    the action using user-friendly commands, say `ExampleAction!hello.jspa`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new commands to the action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following is a short example of how to add custom commands in the webwork
    action module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `atlassian-plugin.xml` file should be modified to include the new command
    under the action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we need to create a method `doHello()` in the action class.
  prefs: []
  type: TYPE_NORMAL
- en: You can invoke the method by calling `DemoAction!hello.jspa`, in which case
    the method will be executed and the returning "success" message will take the
    user `to /templates/joy.vm`.
  prefs: []
  type: TYPE_NORMAL
- en: You can have separate views for the command which can be invoked by calling
    the associated alias name, `DemoHello.jspa`. In this case, returning "success"
    will take the user to `/templates/hello.vm`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Deploying your plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending a webwork action in JIRA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are so many user stories for this one! How do you override some of the
    JIRA built-in actions? How do you do some additional stuff in the JIRA built-in
    action? (Like doing some crazy things immediately after creation before the page
    returns to the user, or doing some innovative validations on some of those actions)
  prefs: []
  type: TYPE_NORMAL
- en: Extending the existing JIRA action is an answer to all these questions. Let
    us see in detail how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extending a JIRA action is done with the help of the webwork plugin module.
    Most of it is very similar to writing new webwork actions.
  prefs: []
  type: TYPE_NORMAL
- en: Let us take the case of the **create issue** action. What should we do if we
    need to extend the create action? Say, to do some additional validation and to
    do some extra things after the actual creation is done?
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps, in a nutshell:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the action to be overridden by looking up the `actions.xml` under `WEB-INF/classes`
    in your JIRA installation directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our case, `CreateIssueDetails` is the action class that does the creation
    of the issue:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This snippet defines the action class and the related views thatare using JSP
    files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Determine whether we need to override the action or just modify the JSP files.
    In our example, let us do some extra validation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the webwork plugin module in the `atlassian-plugin.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the change in action class name. We can also change the JSP files if that
    is needed. But most importantly, the `alias` name should be exactly the same as
    the action alias name in `actions.xml`. In this case, the `alias` name is `CreateIssueDetails`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the action class `com.jtricks.MyCreateIssueDetails`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can do the full action class implementation in `MyCreateIssueDetails`. But
    in most cases, you might just need to override some methods of the existing action
    class, as in our example. If so, just extend the original action class like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the appropriate constructor to carry out dependency injection and to call
    the super class constructor. Eclipse, or the IDE you use, will usually prompt
    this. If you need any other manager classes to add your extra logic, inject them
    as well in the constructor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Override the methods you want. In our example, we need to do extra validation.
    Let us see how to add a validation to check if the current user is the assignee
    or not!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we check if the current user is the assignee or not, and add an error message
    if not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Package the plugin and deploy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an issue with and without the assignee as yourself and see how JIRA behaves!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The key aspect of extending an existing action is to use the same `alias` name
    in your webwork plugin module. JIRA registers all the actions in `actions.xml`
    and overwrites them with the actions in plugins, if the same alias name is found.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, JIRA registers the class `com.jtricks.MyCreateIssueDetails` for
    the `CreateIssueDetails` action instead of the original `issue.CreateIssueDetails`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Adding new webwork actions to JIRA*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Deploying your plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
