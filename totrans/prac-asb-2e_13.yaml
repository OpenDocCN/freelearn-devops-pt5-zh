- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Ansible Automation Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is very powerful, but it does require the user to use the CLI. In some
    situations, this is not the best option, such as in cases where you need to trigger
    an Ansible job from another job (where APIs would be better) or in cases where
    the person that should trigger a job should only be able to trigger that specific
    job. For these cases, AWX and Ansible Automation Controller are the best options
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: The only differences between AWX and Ansible Automation Controller are that
    AWX is the upstream and open source version, while Ansible Automation Controller
    is the Red Hat and downstream component that is officially supported as part of
    the Ansible Automation Platform but for a price, and also the delivery method.
    AWX is available as a Kubernetes Operator that can run on any Kubernetes cluster,
    while Ansible Automation Controller is either installable via the Kubernetes Operator
    on a Red Hat OpenShift installation or on an RHEL 8.2+ machine, at the time of
    writing. In this chapter, we will use AWX and talk about AWX, but everything we
    will discuss also applies to Ansible Automation Controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing AWX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running your first playbook from AWX:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AWX project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an inventory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a job template
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a job
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Controlling access to AWX:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a user
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a team
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an organization
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning permissions in AWX
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although there are a couple of ways to install AWX, we are going to use the
    suggested AWX installation, which is the operator-based one. For this reason,
    you will need to have a Kubernetes cluster available.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to have one on your machine is to use minikube.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Linux machines, it is enough to download it from GitHub ([https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube))
    and run it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next section, we will use the `kubectl` command. To have it available
    using minikube, you will need to execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: On other operating systems, the process might be different, and I suggest checking
    minikube’s official documentation ([https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/))
    to see which installation method better suits your platform and needs.
  prefs: []
  type: TYPE_NORMAL
- en: Although we will give specific examples of hostnames in this chapter, you are
    free to substitute them with your own hostname and/or IP address; details of how
    to do this will be provided at the appropriate places.
  prefs: []
  type: TYPE_NORMAL
- en: Installing AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we discuss AWX, it is best if you have it installed on your machine so
    that you can follow the explanations and immediately start to use AWX.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to install AWX Operator is using Kustomize.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to create a file called `kustomization.yaml` with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that version 2.3.0 is the most current at the time of writing. To find
    out which is the latest available version, go to [https://github.com/ansible/awx-operator/releases](https://github.com/ansible/awx-operator/releases).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the kustomization file ready, we can apply it with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the previous command has finished, we shall be able to see the AWX Operator
    controller manager pod running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create the `awx.yaml` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now edit the `kustomization.yaml` file to add the reference to the `awx.yaml`
    file. By doing so, we will obtain the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now apply the new configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following commands to see that everything worked properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Be aware that you may need to wait a few minutes before AWX is completely deployed
    and all the pods are running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once AWX has been fully deployed, it is possible to open a browser and connect
    to the AWX service. To obtain the URL, you can execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The default administration username is `admin`. To find the password, you will
    need to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have learned the necessary steps to install AWX, let’s take a look
    at how to create a project in AWX.
  prefs: []
  type: TYPE_NORMAL
- en: Running your first playbook from AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in Ansible, in AWX, the goal is running an Ansible playbook. Each playbook
    that is run is called a **job**. Since AWX gives you more flexibility and automation
    than Ansible, it requires a little bit more configuration before you can run your
    first job, so let’s dive into it, starting with creating an AWX project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AWX project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AWX uses the term **project** to identify a repository of Ansible playbooks.
    AWX projects support the placement of playbooks in all major **Source Control
    Management** (**SCM**) systems, such as Git and SVN, but also support playbooks
    on the filesystem or playbooks provided by Red Hat Insights. To create a project,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, you need to go to **Projects** from the left-hand side menu bar,
    then click the **Add** button in the top-left section of the screen. This will
    open a window, similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – The Create New Project window](img/B20846_13_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – The Create New Project window
  prefs: []
  type: TYPE_NORMAL
- en: 'By filling in the name (`Sample Project`) and selecting **Git** for **Source
    Control Type**, the window will grow with new parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.2 – The Create New Project window – Git details](img/B20846_13_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – The Create New Project window – Git details
  prefs: []
  type: TYPE_NORMAL
- en: You can now add the SCM URL ([https://github.com/ansible/ansible-tower-samples](https://github.com/ansible/ansible-tower-samples))
    and click the **Save** button, which should now be clickable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we mentioned at the beginning of this section, projects are used to store
    and use Playbooks in AWX. As you can imagine, there are many interesting additional
    configurations for AWX projects – the most interesting one, in my view, is `Update
    Revision` `on Launch`.
  prefs: []
  type: TYPE_NORMAL
- en: If flagged, this option instructs Ansible to always update the playbook’s repository
    before running any playbook from that project. This ensures that it always executes
    the latest version of the playbook. This is an important feature to enable as,
    if you don’t have it checked, there is the possibility (and sooner or later, this
    will happen in your environment) that someone notices that there is a problem
    in a playbook and fixes it, and then they run the playbook, feeling sure that
    they are running the latest version. They then forget to run the synchronization
    task before running the playbook, effectively running the older version of the
    playbook. This could lead to major problems if the previous version was fairly
    buggy.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of using this option is that every time you execute a playbook,
    two playbooks are effectively run, adding time to your task execution. I think
    this is a very small downside and one that does not offset the benefits of using
    this option.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have learned the necessary steps to create a project in AWX (and
    Ansible Automation Controller). Now, let’s learn how to create an inventory.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an inventory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with Ansible Core, to make AWX aware of the machines present in your environment,
    we can use inventories. Inventories, in the AWX world, are not that different
    from their equivalents in Ansible Core.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s learn how to create our first inventory in AWX by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Inventory** option in the left-hand side menu bar. You will be
    redirected to the **Inventory** window, where you can create your first inventory
    by clicking the **Add** button in the top-left section of the screen. This is
    different from when we created a new project as this button does not immediately
    open the creation form; first, it will ask you whether you want to create an inventory
    or a smart inventory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After choosing the **Inventory** option, a box similar to the following will
    appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.3 – The Create new inventory window](img/B20846_13_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – The Create new inventory window
  prefs: []
  type: TYPE_NORMAL
- en: In this window, you need to set a name and then save it. After you have clicked
    **Save**, the **Permissions**, **Groups**, **Hosts**, **Sources**, and **Completed
    Jobs** tabs will become clickable so that you can continue with the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since an empty inventory is not useful in any way, we are going to add `localhost`
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, select the **Hosts** tab, then click on the button with a white
    plus sign on a green background at the top left of the screen. This will open
    a window, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.4 – The Create new host window](img/B20846_13_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – The Create new host window
  prefs: []
  type: TYPE_NORMAL
- en: 'We then need to add the hostname (`localhost`) and instruct Ansible to use
    the local connection by adding the following code to the **Variables** box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now click **Save**, saving our inventory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In AWX, an inventory is something very similar to an Ansible Core inventory,
    but with additional features, such as built-in dynamic inventory support, which
    means you don’t need to edit configuration files or install additional Python
    modules. To enable this, simply go to the **Sources** tab within an inventory
    to choose to auto-populate the inventory with information from a source of truth,
    such as a public cloud provider inventory (**Amazon Web Services** (**AWS**),
    Azure, and **Google Cloud Platform** (**GCP**) are all supported), a private cloud
    inventory (such as VMware or OpenStack), or other systems, such as Red Hat Satellite
    or a custom script.
  prefs: []
  type: TYPE_NORMAL
- en: 'A special note about the inventory sources is that the **Sourced from a Project**
    option provides a form such as the following if chosen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – The Create new source window](img/B20846_13_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – The Create new source window
  prefs: []
  type: TYPE_NORMAL
- en: This is a very interesting feature, in my opinion, since it allows the user
    to check a dynamic inventory script of their design into a Git repository (either
    in its own repository or one where you also put in playbooks) and AWX pulls that
    information from the repository.
  prefs: []
  type: TYPE_NORMAL
- en: As for projects, when you add a source to your inventory, you might choose to
    select the **Update on launch** option, which behaves in the same way as the **Update
    on launch** option behaves for projects. For the same reasons that were discussed
    in the *Creating an AWX project* section, I strongly suggest that you use this
    option as well.
  prefs: []
  type: TYPE_NORMAL
- en: At the very beginning of the inventory creation process, we had the option to
    add an inventory or a smart inventory. What is a smart inventory? **Smart inventories**
    are inventories that are populated by AWX, starting from the hosts present in
    other inventories, and are filtered using the specific smart host filter that
    the user selected during creation. This can be incredibly useful for dynamically
    creating inventories with a specific type of host in them based on a filter and
    saves the need for manually creating lots of different groups – or worse, having
    to add the same host multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have learned the necessary steps to create an inventory in AWX.
    Now, let’s learn how to create a job template.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a job template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the playbooks in our projects and the hosts in our inventories,
    we can start creating a **job template**.
  prefs: []
  type: TYPE_NORMAL
- en: 'A job template in AWX is a collection of the configurations that are needed
    to perform a job. This is very similar to the `ansible-playbook` command-line
    options. The reason why we need to create a job template is so that playbook runs
    can be launched with little or no user input, meaning they can be delegated to
    teams who might not know all the details of how a playbook works, or can even
    be run on a scheduled basis without anyone present. Let’s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you need to click the **Templates** option from the left-hand
    side menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now create a new template by clicking the **Add** button at the top
    left of the screen. It will ask you whether you want to create a job template
    or a workflow template – you need to choose **Job template**. The following window
    will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.6 – The Create New Job Template window](img/B20846_13_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – The Create New Job Template window
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are quite a few fields in this view. The only information
    needed to proceed is the name (we are going to use `Hello World`), the inventory
    (we are going to choose `Sample Inventory`, which we created in the *Creating
    an inventory* section), the project (we are going to choose the `Sample Project`
    project we created in the *Creating an AWX project* section), and the playbook
    (we are going to choose `hello_world.yml`, which is the only playbook available).
  prefs: []
  type: TYPE_NORMAL
- en: Then, we can click `localhost`, we don’t need to create or specify any credentials.
    However, if you were running a job template against one or more remote hosts,
    you would need to create a machine credential and associate it with your job template.
    A machine credential is, for example, an SSH username and password or an SSH username
    and a private key – these are stored securely in the backend database of AWX,
    meaning you can delegate playbook-related tasks to other teams without actually
    giving them passwords or SSH keys.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we had to choose was whether we were creating a job template
    or a workflow template. We chose **Job Template** since we want to be able to
    create simple jobs out of this template. It’s also possible to create more complex
    jobs, which are the composition of multiple job templates, with flow control features
    between one job and the next. This allows for more complex situations and scenarios
    where you might want to have multiple jobs (such as creating an instance, customizing
    a company, setting up Oracle Database, setting up a MySQL database, and so on),
    but you also want to have a one-click deployment that would, for instance, set
    up the machine, apply all the company customization, and install the MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: You might also have another deployment that uses the same components except
    the last one, and in its place, it uses the Oracle Database to create an Oracle
    Database machine. This allows you to have extreme flexibility and reuse a lot
    of components, creating multiple, nearly identical playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: It’s interesting to note that many fields in the `limit` field, which operates
    in the same way as `--limit` when used with the `ansible-playbook` command) or
    can also be used as a sanity check, as it prompts the user with the value (and
    gives them a chance to modify it) before the playbook is run. However, it could
    potentially block scheduled job runs, so exercise caution when enabling this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned the necessary steps to create a job template in AWX,
    let’s learn how to create a job.
  prefs: []
  type: TYPE_NORMAL
- en: Running a job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A job, as its name suggests, is an instance of a job template. This means that
    to perform any action on our machine, we have to create a job template instance
    – or, more simply, a job – by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have set the job template, we can run the job itself. To do so,
    we need to go to **Templates** from the left-hand side of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the job template you want to run (in our case, this is going to be `Hello
    World`) and click on the little rocket on the right-hand side of the page that
    corresponds to the correct job template, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Templates list window](img/B20846_13_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Templates list window
  prefs: []
  type: TYPE_NORMAL
- en: 'When a job is running, AWX allows us to follow the job’s execution in the job’s
    output, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Job output window](img/B20846_13_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Job output window
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking the **Details** tab, we can see additional details about the job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.9 – The Details window](img/B20846_13_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – The Details window
  prefs: []
  type: TYPE_NORMAL
- en: One of the great things about AWX and Ansible Automation Controller is that
    they archive this job’s execution output in the backend database, meaning that,
    at any point in the future, you can come back and query a job run to see what
    changed and what happened. This is incredibly powerful and useful for occasions
    such as auditing and policy enforcement.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned the necessary steps to create a job in AWX, let’s
    learn how to create a user.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling access to AWX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my opinion, one of the biggest advantages of AWX compared to Ansible is the
    fact that AWX allows multiple users to connect and control/perform actions. This
    allows a company to have a single AWX installation for different teams, a whole
    organization, or even multiple organizations.
  prefs: []
  type: TYPE_NORMAL
- en: A **role-based access control** (**RBAC**) system is in place to manage the
    users’ permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Both AWX and Ansible Automation Controller can link to central directories,
    such as **Lightweight Directory Access Protocol** (**LDAP**) and Azure Active
    Directory – however, we can also create user accounts locally on the AWX server
    itself. Let’s start by creating our first user account locally!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the big advantages of AWX is the ability to manage multiple users. This
    allows us to create a user in AWX for each person that is using the AWX system
    so that we can ensure they are only granted the permissions that they need. Also,
    by using individual accounts, we can ensure that we can see who carried out what
    action by using the audit logs. To create a user, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the left-hand side menu bar and select the **Users** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the list of users and also create a new one by clicking on the
    button with a white plus sign on a green background at the top-left side of the
    screen. A form similar to the following will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.10 – The Create New User window](img/B20846_13_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – The Create New User window
  prefs: []
  type: TYPE_NORMAL
- en: By adding an email address, username, and password (with confirmation), you
    can create a new user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Users can be of three types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A normal user**: Users of this type do not have any inherited permissions
    and they need to be awarded specific permissions to be able to do anything'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A system auditor**: Users of this type have full read-only privileges on
    the whole AWX installation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A system administrator**: Users of this type have full privileges on the
    whole AWX installation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you have learned the necessary steps to create a user in AWX, let’s
    have a brief look at teams.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although having individual user accounts is an incredibly powerful tool, especially
    for enterprise use cases, it would be extremely inconvenient and cumbersome to
    have to set permissions for each object (such as a job template or an inventory)
    on an individual basis. Every time someone joins a team, their user account has
    to be manually configured with the correct permissions against every object and,
    similarly, be removed if they leave.
  prefs: []
  type: TYPE_NORMAL
- en: AWX and Ansible Automation Controller have the same concept of user grouping
    that you would find in most other RBAC systems. The only slight difference is
    that in the user interface, they are referred to as **teams**, rather than groups.
    However, you can create teams simply and easily and then add and remove users
    as you need to. Doing this through the user interface is very straightforward
    and you will find the process similar to the way that most RBAC systems handle
    user groups, so we won’t go into any more specific details here.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you go to **Teams** and click the **Add** button, you will see an interface
    similar to the following, prompting you to provide some very basic information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.11 – The Create New Team window](img/B20846_13_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – The Create New Team window
  prefs: []
  type: TYPE_NORMAL
- en: Once you have your teams set up, I recommend that you assign your permissions
    to teams, rather than through individual users, as this will make managing AWX
    object permissions much easier as your organization grows. Speaking of organizations,
    let’s take a look at the concept of organizations in AWX.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an organization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you will have multiple independent groups of people that you need
    to manage independent machines. For those kinds of scenarios, the use of organizations
    can help you. An organization is a tenant of AWX, with its own unique user accounts,
    teams, projects, inventories, and job templates – it’s almost like having a separate
    instance of AWX! To create an organization, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new organization, you need to go to the left-hand side of the screen
    and select the **Organizations** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can then see the existing organizations and proceed to create a new one
    by clicking on the button with a white plus sign on a green background in the
    top-left section of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A window similar to the following will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.12 – The Create New Organization window](img/B20846_13_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – The Create New Organization window
  prefs: []
  type: TYPE_NORMAL
- en: Since the only mandatory field is **Name**, you can just fill this in and click
    **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve created the organization, you can assign any kind of resource to
    an organization, such as projects, templates, inventories, users, and so on. Organizations
    are a simple concept to grasp but also powerful in terms of segregating roles
    and responsibilities in AWX. Finally, before we complete this section, let’s take
    a look at assigning permissions in AWX.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning permissions in AWX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Through our journey of configuring our first project, inventory, and job template
    in AWX, you will have noticed that most of the screens we have navigated to have
    a button on them called **Access**. As we navigate the user interface with the
    administrator account, we get to see all the options – but of course, you would
    not want to give every single user administrator permission.
  prefs: []
  type: TYPE_NORMAL
- en: Individual users (or the teams that they belong to) can be granted permission
    on a per-object basis. So, for example, you could have a team of database administrators
    who only have access to see and execute playbooks on an inventory of database
    servers, using job templates that are specific to their role. Linux system administrators
    could then have access to the inventories, projects, and job templates that are
    specific to their role. AWX hides objects that users don’t have privileges to
    access, which means the database administrators never see the Linux system administrator
    objects, and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several different privilege levels that you can award to users (or
    teams), including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Admin**: Users that have this permission can change all aspects of the resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute** (only for job templates): Users that have this permission can run
    the job template'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use**: Users that have this permission can use the resource in a job template'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update**: Users that have this permission can update the resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Read**: Users that have this permission can view the settings of the resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That concludes our brief look at RBAC in AWX and our look at this powerful tool.
    AWX is a great addition to the power of Ansible in an enterprise setting and helps
    ensure that your users can run Ansible playbooks in a manner that is well-managed,
    secure, and auditable. We have only scratched the surface in this chapter, but
    hopefully, this chapter has given you a flavor of how AWX can help your team’s
    or enterprise’s automation journey.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWX and Ansible Automation Controller are powerful, complementary tools that
    powerfully support the use of Ansible in an enterprise or team-based environment.
    They can help secure credentials that you would otherwise have to distribute widely,
    audit the history of playbook runs, and enforce the version control of playbooks.
    The web-based user interface of these tools creates a low barrier for entry for
    end users, meaning playbook runs can easily be delegated to teams who otherwise
    have little knowledge of Ansible (so long as suitable escalation paths are put
    in place should problems arise). In short, when implementing Ansible in a corporate
    setting, its usage should not be considered complete without the addition of Ansible
    Automation Controller or AWX.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install AWX on your Linux host, as well
    as the necessary steps to run your very first playbook from AWX. You also learned
    about RBAC in AWX and how this can support large, multi-user environments in a
    corporate setting.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will deep dive into the concept of execution environments,
    which allow you to streamline your automation and keep it functioning even when
    you’re updating Ansible, AWX, or Ansible Automation Controller.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Which objects can you create in Ansible Automation Controller?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Jobs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Job templates
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Projects
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false? AWX is the upstream version of Red Hat Ansible Automation Controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
