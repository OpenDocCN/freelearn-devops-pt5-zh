- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aliases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stop working so hard! In this chapter, we will look at Git aliases, which greatly
    reduce the amount of typing you have to do. Aliases can be very simple, or they
    can take arguments and flags.
  prefs: []
  type: TYPE_NORMAL
- en: Aliases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Aliases they allow you to create shortcuts to `git` commands. For example,
    I have the alias `st`, which stands for status. Thus, I enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'and it is exactly as if I had entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get to more exciting and useful aliases in just a moment, but first
    let''s look at how these are created. To create an alias:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter `git`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the keyword `config`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the flag `--global`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the keyword `alias` followed by a period and then the alias itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the command you are aliasing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This sounds more complicated than it is. For example, to create the `st` alias,
    I entered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you don't have to use `global`. Your alternatives are `system` and
    `local`, but personally, I always use `global` because I'm the only one on this
    computer and IÂ want it to always be available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a slightly more complicated alias that allows you to create a branch
    and check it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The important thing to notice here is that your alias can take one or more flags.
  prefs: []
  type: TYPE_NORMAL
- en: 'I can never remember if it is `bc` or `cb`, so I made another alias to execute
    the same command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'One alias I use a lot commits everything and waits for a message from me:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When I type `git cam` it commits everything along with the message I give it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, here is my favorite alias:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This offers me an alternative to `log --oneline` that gives much more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_08_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: git lg'
  prefs: []
  type: TYPE_NORMAL
- en: Looking from left to right, we see the SHA followed by the commit message, then
    in parentheses we can see how long ago it was committed and then by whom. As seen
    on the fourth line, if there is a tag it is shown before the message, and the
    pointers (`HEAD`, for example) are shown first after the SHA.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s briefly take the alias apart: Each color is surrounded by `%C` and `%Creset`.
    Some display items are displayed using shortcuts such as `%h`, which displays
    the SHA. Thus, to show the SHA in red we have `''%Cred%h%Creset`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All of this is stored in your global configuration file, which you can access
    by entering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'which opens the global configuration file in your editor. Here you will find
    a number of sections, one of which contains the aliases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the aliases are there, but with a slightly different syntax. You
    can add aliases directly here if you like. (Note that the red underlining has
    no meaning. That is just Visual Studio Code pointing out that it does not recognize
    these terms.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Take heed: if you are going to use more than one flag, you must put your alias
    in quotes, as shown in this line (you''ll recognize it later in my answer to the
    challenge):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Aliases are a convenient way to shorten otherwise lengthy commands. You create
    an alias with this sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter `git`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the keyword `config`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the flag `--global`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the keyword alias followed by a period and then the alias itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the command you are aliasing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can access the configuration file directly with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Aliases are simple, easy, and incredibly useful when working at the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create an alias that replaces the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Answer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To do this, I will go to the command line and enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The double quotes are needed because you are using two flags on `log`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of calling this command is shown in *Figure 8.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_08_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Our new alias at work'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that each commit is there, represented on a single line and with only
    the SHA and message (except when there is a tag or pointers, as shown on line
    1 and line 7 in *Figure 8.2*).
  prefs: []
  type: TYPE_NORMAL
