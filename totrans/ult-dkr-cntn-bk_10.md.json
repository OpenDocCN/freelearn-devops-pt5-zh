["```\n    $ cd ~/The-Ultimat-Docker-Container-Book\n    ```", "```\n    $ mkdir ch10 && cd ch10\n    ```", "```\n$ docker network ls\n```", "```\n$ docker network inspect bridge\n```", "```\n$ docker network create --driver bridge sample-net\n```", "```\n$ docker network inspect sample-net | grep Subnet\n```", "```\n\"Subnet\": \"172.18.0.0/16\",\n```", "```\n$ docker network create --driver bridge --subnet \"10.1.0.0/16\" test-net\n```", "```\n$ docker container run --name c1 -it --rm alpine:latest /bin/sh\n```", "```\n$ docker container inspect c1\n```", "```\n/ # ip route\n```", "```\ndefault via 172.17.0.1 dev eth0172.17.0.0/16 dev eth0 scope link  src 172.17.0.2\n```", "```\n$ docker container run --name c2 -d --rm alpine:latest ping 127.0.0.1\n```", "```\n$ docker container inspect --format \"{{.NetworkSettings.IPAddress}}\" c2\n```", "```\n172.17.0.3\n```", "```\n$ docker network inspect bridge\n```", "```\n$ docker container run --name c3 --rm -d \\    --network sample-net \\\n    alpine:latest ping 127.0.0.1\n$ docker container run --name c4 --rm -d \\\n    --network sample-net \\\n    alpine:latest ping 127.0.0.1\n```", "```\n$ docker network inspect sample-net\n```", "```\n$ docker container exec -it c3 /bin/sh\n```", "```\n/ # ping c4\n```", "```\nPING c4 (172.20.0.3): 56 data bytes64 bytes from 172.20.0.3: seq=0 ttl=64 time=3.092 ms\n64 bytes from 172.20.0.3: seq=1 ttl=64 time=0.481 ms\n...\n```", "```\n/ # ping 172.20.0.3\n```", "```\nPING 172.20.0.3 (172.20.0.3): 56 data bytes64 bytes from 172.20.0.3: seq=0 ttl=64 time=0.200 ms\n64 bytes from 172.20.0.3: seq=1 ttl=64 time=0.172 ms\n...\n```", "```\n/ # ping c2\n```", "```\nping: bad address 'c2'\n```", "```\n/ # ping 172.17.0.3\n```", "```\nPING 172.17.0.3 (172.17.0.3): 56 data bytes^C\n--- 172.17.0.3 ping statistics ---\n11 packets transmitted, 0 packets received, 100% packet loss\n```", "```\n$ docker network create test-net\n```", "```\n$ docker container run --name c5 --rm -d \\    --network sample-net\n    alpine:latest ping 127.0.0.1\n```", "```\n$ docker container run --name c6 --rm -d \\    --network sample-net \\\n    alpine:latest ping 127.0.0.1\n$ docker network connect test-net c6\n```", "```\n$ docker network rm test-net\n```", "```\nError response from daemon: network test-net id 455c922e... has active endpoints\n```", "```\n$ docker container rm -f $(docker container ls -aq)\n```", "```\n$ docker network rm sample-net$ docker network rm test-net\n```", "```\n$ docker network prune --force\n```", "```\n    $ docker container run --rm -it \\    --network host \\    alpine:latest /bin/sh\n    ```", "```\n    / # ip addr show eth0\n    ```", "```\n    / # ip route\n    ```", "```\n$ docker container run --rm -it \\    --network none \\\n    alpine:latest /bin/sh\n```", "```\n/ # ip addr show eth0ip: can't find device 'eth0'\n```", "```\n/ # ip route\n```", "```\n    $ docker network create --driver bridge test-net\n    ```", "```\n    $ docker container run --name web -d \\    --network test-net \\    nginx:alpine\n    ```", "```\n    $ docker container run -it --rm \\    --network container:web \\    alpine:latest /bin/sh\n    ```", "```\n    / # wget -qO – localhost<!DOCTYPE html><html><head><title>Welcome to nginx!</title>...</html>\n    ```", "```\n    $ docker container rm --force web$ docker network rm test-net\n    ```", "```\n    $ docker container run --name web -P -d nginx:alpine\n    ```", "```\n$ docker container port web80/tcp -> 0.0.0.0:32768\n```", "```\n    $ docker container inspect web | grep HostPort        \"HostPort\": \"32768\"\n    ```", "```\n    $ docker container lsCONTAINER ID IMAGE ... PORTS NAMES56e46a14b6f7 nginx:alpine ... 0.0.0.0:32768->80/tcp web\n    ```", "```\n    $ docker container run --name web2 -p 8080:80 -d nginx:alpine\n    ```", "```\n    $ cd ~/The-Ultimate-Docker-Container-Book$ cd ch10/e-shop/monolith$ pip install -r requirements.txt$ export FLASK_APP=main.py$ flask run\n    ```", "```\n    $ curl localhost:5000/catalog?type=bicycle\n    ```", "```\n[{\"id\": 1, \"name\": \"Mountanbike Driftwood 24\", \"unitPrice\": 199},{\"id\": 2, \"name\": \"Tribal 100 Flat Bar Cycle Touring Road Bike\",\n\"unitPrice\": 300}, {\"id\": 3, \"name\": \"Siech Cycles Bike (58 cm)\",\n\"unitPrice\": 459}]\n```", "```\n    127.0.0.1 acme.com\n    ```", "```\n    $ ping acme.comPING acme.com (127.0.0.1): 56 data bytes64 bytes from 127.0.0.1: icmp_seq=0 ttl=55 time<1 ms64 bytes from 127.0.0.1: icmp_seq=1 ttl=55 time<1 ms64 bytes from 127.0.0.1: icmp_seq=2 ttl=55 time<1 ms...\n    ```", "```\n    if __name__ == '__main__':    app.run(host='0.0.0.0', port=5000)\n    ```", "```\n    $ python main.py.\n    ```", "```\n    $ docker image build -t acme/eshop:1.0 .\n    ```", "```\n    $ docker container run --rm -it \\    --name eshop \\    -p 5000:5000 \\    acme/eshop:1.0\n    ```", "```\n    $ docker image build -t acme/catalog:1.0 .\n    ```", "```\n    $ docker run --rm -it --name catalog -p 3000:3000 \\    acme/catalog:1.0\n    ```", "```\n    $ curl http://acme.com:3000/catalog?type=bicycle\n    ```", "```\n    $ docker container run --rm -d \\    --name catalog \\    --label traefik.enable=true \\    --label traefik.port=3000 \\    --label traefik.priority=10 \\    --label traefik.http.routers.catalog.rule=\\             \"Host(\\\"acme.com\\\") && PathPrefix(\\\"/catalog\\\")\" \\    acme/catalog:1.0\n    ```", "```\n    $ docker container run --rm -d \\    --name eshop \\    --label traefik.enable=true \\    --label traefik.port=5000 \\    --label traefik.priority=1 \\    --label traefik.http.routers.eshop.rule=\\              \"Host(\\\"acme.com\\\")\" \\    acme/eshop:1.0\n    ```", "```\n    $ docker run -d \\    --name traefik \\    -p 8080:8080 \\    -p 80:80 \\    -v /var/run/docker.sock:/var/run/docker.sock \\    traefik:v2.0 --api.insecure=true --providers.docker\n    ```", "```\n    $ curl http://acme.com/catalog?type=bicycles$ curl http://acme.com/checkout\n    ```", "```\n    $ docker container rm -f traefik eshop catalog\n    ```", "```\n    $ docker network create --driver bridge \\    --subnet 172.25.0.0/16 frontend\n    ```", "```\n$ docker run --network frontend <docker-image>\n```", "```\n    $ docker run --name nginx1 --network frontend -d nginx:alpine$ docker run --name nginx2 --network frontend -d nginx:alpine\n    ```", "```\n    $ docker network inspect frontend --format='{{range .Containers}}{{.IPv4Address}} {{end}}'\n    ```", "```\n    $ docker network inspect frontend --format='{{json .IPAM.Config}}' | jq -r '.[].Subnet'\n    ```"]