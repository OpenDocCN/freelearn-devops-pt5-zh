- en: Setting Up A Production Cluster
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置生产集群
- en: We explored quite a few techniques, processes, and tools that can help us build
    a self-sufficient system applied to services. Docker Swarm provides self-healing,
    and we created our own system for self-adaptation. By now, we should be fairly
    confident with our services and the time has come to explore how to accomplish
    similar goals applied to infrastructure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了很多技术、流程和工具，这些可以帮助我们构建一个适用于服务的自给自足系统。Docker Swarm 提供了自愈功能，我们也创建了自己的自适应系统。到目前为止，我们应该对我们的服务相当有信心，现在是时候探索如何将类似的目标应用到基础设施上了。
- en: The system should be capable of recreating failed nodes, of upgrading without
    downtime, and to scale servers depending on the fluctuating needs. We cannot explore
    those topics using clusters based on Docker Machine nodes running locally. The
    capacity of our laptops is somewhat limited so we cannot scale nodes to a greater
    number. Even if we could, the infrastructure we’ll use for production clusters
    is quite different. We’ll need an API that will allow our system to communicate
    with infrastructure. Moreover, we did not have an opportunity to explore persistent
    storage of the services we used thus far. Those few examples are only a fraction
    of what we’ll need, and we won’t enter into details just yet. For now, we’ll try
    to create a production-ready cluster that will allow us to continue on our path
    towards a self-sufficient system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 系统应该能够重新创建故障节点，能够无停机时间地进行升级，并根据波动的需求扩展服务器。我们无法使用基于 Docker Machine 节点本地运行的集群来探讨这些主题。我们笔记本电脑的容量有限，因此无法将节点扩展到更大的数量。即使能够，供生产集群使用的基础设施也完全不同。我们需要一个
    API 使我们的系统能够与基础设施进行通信。此外，我们之前使用的服务并没有机会探讨持久存储。这些少数示例仅仅是我们所需的冰山一角，细节我们暂时不进入。目前，我们将尝试创建一个生产就绪的集群，以便继续向自给自足的系统迈进。
- en: The immediate goal is to transition from locally running Swarm cluster based
    on Docker machines into something more reliable. We’ll have to move into the cloud.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 直接的目标是将基于 Docker 机器本地运行的 Swarm 集群过渡到一个更可靠的环境。我们必须迁移到云端。
- en: There are too many hosting vendors we could choose from, and it would be impossible
    to explain the process for each one of them. Even if we would focus only on those
    that are very popular, we would still have at least ten vendors to go through.
    That would increase the scope of the book beyond manageable size so we’ll pick
    one hosting provider that we’ll use to demonstrate a setup of a production cluster.
    It had to be one and AWS is the most commonly used hosting vendor.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择的托管供应商太多，逐一解释每个供应商的过程几乎是不可能的。即使我们只专注于那些非常流行的供应商，仍然至少有十个供应商需要介绍。这会使本书的内容范围超出可管理的大小，因此我们将选择一个托管供应商，用它来演示生产集群的设置。必须选一个，而
    AWS 是最常用的托管供应商。
- en: Depending on your current choice of a vendor, you might be very happy or extremely
    displeased with that. If you prefer using [Microsoft Azure](https://azure.microsoft.com),
    you’ll see that you’ll be able to follow the same steps as those we’ll explore
    for AWS. The chances are that you prefer [Google Compute Engine (GCE)](https://cloud.google.com/compute/),
    [Digital Ocean](https://www.digitalocean.com/), [OpenStack](https://www.openstack.org)
    running on-premise, or any other among thousands of solutions and vendors. I’ll
    do my best to explain the logic behind the setup we’ll do in AWS. Hopefully, you
    should be able to apply the same logic to your infrastructure. I’ll try to make
    it clear what you should do, and I’ll expect you to roll-up your sleeves and do
    it on your own. I’ll provide a blueprint, and you’ll do the work.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你目前选择的供应商，你可能会对其非常满意，或者极度不满。如果你更喜欢使用 [Microsoft Azure](https://azure.microsoft.com)，你会发现你能够跟随我们为
    AWS 探索的相同步骤。你可能更倾向于使用 [Google Compute Engine (GCE)](https://cloud.google.com/compute/)，[Digital
    Ocean](https://www.digitalocean.com/)，[OpenStack](https://www.openstack.org) 本地部署，或者成千上万的解决方案和供应商中的任何一个。我会尽力解释我们在
    AWS 上进行设置的背后逻辑。希望你能够将相同的逻辑应用到你的基础设施中。我会尽量让你明白你应该做什么，而我希望你能卷起袖子自己动手做。我会提供一个蓝图，你来完成工作。
- en: You might be tempted to start translating the exercises that follow to your
    hosting solution. Don’t! If you do not have it already, please create an account
    on [Amazon Web Services (AWS)](https://aws.amazon.com/) and follow the instructions
    as they are. By doing that, you should have a clear idea of what can be done and
    what is the path to take. Only after that, once you’re finished reading this book,
    you should try to translate the experience into your infrastructure. From my side,
    I’ll do my best to explain everything we’ll do in AWS in a way that the same principles
    can be translated to any other choice. Moreover, I’ll do my best to keep AWS costs
    to a minimum.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想直接将接下来的练习翻译到你自己的托管解决方案中。但不要！如果你还没有账户，请在[Amazon Web Services (AWS)](https://aws.amazon.com/)上创建一个账户，并按照指示进行操作。这样，你应该能清楚地了解可以做什么，以及应该采取的路径。只有在阅读完本书后，你才应该尝试将这些经验应用到你的基础设施中。在这一过程中，我会尽力以一种方式讲解AWS中我们所做的一切，使得相同的原则能够转化到其他任何选择上。而且，我会尽最大努力将AWS的费用控制在最低限度。
- en: That was more than enough talk. We’ll move into a hands-on part of this chapter
    and create a Docker Swarm cluster. Once it’s up-and-running, we’ll proceed with
    deployment of all the services we used so far. Finally, we’ll discuss which services
    might be missing and which modifications we should do to our stacks to make them
    production-ready. Let’s go!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，我们开始进入本章的动手实践部分，创建一个Docker Swarm集群。集群搭建好后，我们将部署迄今为止使用的所有服务。最后，我们会讨论哪些服务可能还缺失，以及我们应该对我们的栈做哪些修改，以便让它们具备生产环境的准备。开始吧！
- en: Creating a Docker For AWS Cluster
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Docker For AWS集群
- en: 'In [The DevOps 2.1 Toolkit: Docker Swarm](https://www.amazon.com/dp/1542468914),
    I argued that the best way to create a Swarm cluster in AWS is with a combination
    of [Packer](https://www.packer.io/) and [Terraform](https://www.terraform.io/).
    One of the alternatives was to use [Docker CE for AWS](https://store.docker.com/editions/community/docker-ce-aws).
    At that time *Docker for AWS* was too immature. Today, the situation is different.
    *Docker for AWS* provides a robust Docker Swarm cluster with most, if not all
    the services we would expect from it.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[《DevOps 2.1工具包：Docker Swarm》](https://www.amazon.com/dp/1542468914)中，我曾提到，创建AWS上的Swarm集群的最佳方式是结合使用[Packers](https://www.packer.io/)和[Terraform](https://www.terraform.io/)。另一种选择是使用[Docker
    CE for AWS](https://store.docker.com/editions/community/docker-ce-aws)。那时，*Docker
    for AWS* 还不够成熟。但今天，情况已不同。*Docker for AWS* 提供了一个稳健的Docker Swarm集群，几乎具备我们期望的所有服务。
- en: We’ll create a *Docker for AWS* cluster and, while in progress, discuss some
    of its aspects.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个*Docker for AWS*集群，并在过程中讨论其中的一些方面。
- en: Before we start creating a cluster, we should choose a region. The only thing
    that truly matters is whether a region of your choice supports at least three
    availability zones. If there’s only one availability zone, we’ll risk downtime
    if it would become unavailable. With two availability zones, we’d lose Docker
    manager’s quorum if one zone would go down. Just as we should always run an odd
    number of Docker managers, we should spread our cluster into an odd number of
    availability zones. Three is a good number. It fits most of the scenarios.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建集群之前，我们需要选择一个区域。真正重要的是你选择的区域是否支持至少三个可用区。如果只有一个可用区，那么一旦该可用区不可用，我们就会面临停机风险。如果有两个可用区，一旦其中一个可用区发生故障，我们将失去Docker管理器的法定人数。正如我们应该始终在Docker管理器中使用奇数数量一样，我们也应该将集群分布在奇数个可用区中。三个可用区是一个不错的选择，适用于大多数场景。
- en: In case you’re new to AWS, an availability zone (AZ) is an isolated location
    inside a region. Each region is made up of one or more availability zones. Each
    AZ is isolated, but AZs in a region are connected through low-latency links. Isolation
    between AZs provides high-availability. A cluster spread across multiple AZs would
    continue operating even if a whole AZ goes down. When using AZs inside the same
    region, latency is low thus not affecting the performance. All in all, we should
    always run a cluster across multiple AZs within the same region.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是AWS的新手，了解一下可用区（AZ）。一个可用区是区域内部的一个隔离位置。每个区域由一个或多个可用区组成。每个AZ都是隔离的，但同一区域内的AZ通过低延迟链接连接在一起。AZ之间的隔离提供了高可用性。跨多个AZ部署的集群，即便一个AZ发生故障，依然能够继续运行。使用同一区域内的AZ时，延迟较低，因此不会影响性能。总的来说，我们应始终在同一区域内跨多个AZ运行集群。
- en: Let’s check whether your favorite AWS region has at least three availability
    zones. Please open [EC2 screen](https://console.aws.amazon.com/ec2/v2/home) from
    the *AWS console*. You’ll see one of the availability zones selected in the top-right
    corner of the screen. If that’s not the location you’d like to use for your cluster,
    click on it to change it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下你最喜欢的 AWS 区域是否至少有三个可用区。请从*AWS 控制台*打开[EC2 屏幕](https://console.aws.amazon.com/ec2/v2/home)。你会看到屏幕右上角选中了其中一个可用区。如果这不是你想用于集群的位置，点击它进行更改。
- en: Scroll down to the *Service Health* section. You’ll find *Availability Zone
    Status* inside it. If there are at least three zones listed, the region you selected
    is OK. Otherwise, please change the region and check one more time whether there
    are at least three availability zones.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动到*服务健康*部分，你会在其中找到*可用区状态*。如果列出了至少三个可用区，那么你选择的区域是可以的。否则，请更改区域并再次检查是否至少有三个可用区。
- en: '![Figure 13-1: The list of availability zones supported by the US East region](img/00074.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图 13-1：美国东部区域支持的可用区列表](img/00074.jpeg)'
- en: 'Figure 13-1: The list of availability zones supported by the US East region'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13-1：美国东部区域支持的可用区列表
- en: There’s one more prerequisite we need to fulfill before we create a cluster.
    We need to create an SSH key. Without it, we would not be able to access any of
    the nodes that form the cluster.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建集群之前，我们还需要满足另一个先决条件。我们需要创建一个 SSH 密钥。没有它，我们将无法访问构成集群的任何节点。
- en: Please go back to the *AWS console* and click the *Key Pairs* link from the
    left-hand menu. Click the *Create Key Pair* button, type *devops22* as the *Key
    pair name*, and, finally, click the *Create* button. The newly created SSH key
    will be downloaded to your laptop. Please copy it to the *docker-flow-monitor*
    directory. The project already has `/*.pem` entry in the `.gitignore` file so
    your key will not be accidentally committed to GitHub. Still, as an additional
    precaution, we should make sure that only you can read the contents of the file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请返回*AWS 控制台*，从左侧菜单中点击*密钥对*链接。点击*创建密钥对*按钮，输入*devops22*作为*密钥对名称*，然后点击*创建*按钮。新创建的
    SSH 密钥将下载到你的笔记本电脑。请将其复制到*docker-flow-monitor*目录中。该项目中已在 `.gitignore` 文件中添加了 `/*.pem`
    条目，以确保密钥不会意外提交到 GitHub。尽管如此，为了额外的安全措施，我们应该确保只有你能读取该文件的内容。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
