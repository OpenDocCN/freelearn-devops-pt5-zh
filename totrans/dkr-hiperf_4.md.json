["```\ndockerhost$ docker run --name running â€“d busybox \\\n/bin/sh -c 'while true; do echo hello && sleep 1; done' dockerhost$ docker stats running\nCONTAINER     CPU %   MEM USAGE/LIMIT  MEM %     NET I/O\nrunning       0.00%   0 B/518.5 MB     0.00%     17.06 MB/119.8 kB\n\n```", "```\n    FROM debian:jessie\n\n    RUN apt-get update && \\\n        apt-get --no-install-recommends \\\n            install -y graphite-carbon\n\n    ENV GRAPHITE_ROOT /graphite\n\n    ADD carbon.conf /graphite/conf/carbon.conf\n\n    RUN mkdir -p $GRAPHITE_ROOT/conf && \\\n        mkdir -p $GRAPHITE_ROOT/storage && \\\n        touch $GRAPHITE_ROOT/conf/storage-aggregation.conf && \\\n        touch $GRAPHITE_ROOT/conf/storage-schemas.conf\n\n    VOLUME /whisper\n    EXPOSE 2003 2004 7002\n\n    ENTRYPOINT [\"/usr/bin/twistd\", \"--nodaemon\", \\\n        \"--reactor=epoll\", \"--no_save\"]\n    CMD [\"carbon-cache\"]\n    ```", "```\n    dockerhost$ docker build -t hubuser/carbon .\n\n    ```", "```\n    [cache]\n\n    CARBON_METRIC_INTERVAL = 0\n    LOCAL_DATA_DIR = /whisper\n    ```", "```\n    dockerhost$ docker create --name whisper \\--entrypoint='whisper database for graphite' \\ hubuser/carbon\n\n    ```", "```\n    dockerhost$ docker run --volumes-from whisper -p 2003:2003 \\--name=carboncache hubuser/carbon\n\n    ```", "```\n    FROM debian:jessie\n\n    RUN apt-get update && \\\n        apt-get --no-install-recommends install -y \\\n            graphite-web \\\n            apache2 \\\n            libapache2-mod-wsgi\n\n    ADD local_settings.py /etc/graphite/local_settings.py\n    RUN ln -sf /usr/share/graphite-web/apache2-graphite.conf \\\n           /etc/apache2/sites-available/100-graphite.conf && \\\n        a2dissite 000-default && a2ensite 100-graphite && \\\n        mkdir -p /graphite/storage && \\\n        graphite-manage syncdb --noinput && \\\n        chown -R _graphite:_graphite /graphite\n\n    EXPOSE 80\n    ENTRYPOINT [\"apachectl\", \"-DFOREGROUND\"]\n    ```", "```\n    import os\n    # --link-from carboncache:carbon\n    CARBONLINK_HOSTS = ['carbon:7002']\n    # --volumes-from whisper\n    WHISPER_DIR = '/whisper'\n\n    GRAPHITE_ROOT = '/graphite'\n    SECRET_KEY = os.environ.get('SECRET_KEY', 'replacekey')\n    LOG_RENDERING_PERFORMANCE = False\n    LOG_CACHE_PERFORMANCE = False\n    LOG_METRIC_ACCESS = False\n    LOG_DIR = '/var/log/graphite'\n    ```", "```\n    dockerhost$ docker build -t hubuser/graphite-web .\n\n    ```", "```\n    dockerhost$ docker run --rm --env SECRET_KEY=somestring \\--volumes-from whisper --link carboncache:carbon \\-p 80:80 hubuser/graphite-web\n\n    ```", "```\ndockerhost$ seq `date +%s` -60 $((`date +%s` - 24*60*60)) \\| perl -n -e \\'print \"local.random \".  int(rand(100)) . \" \" .  $_' \\| docker run --link carboncache:carbon -i --rm \\busybox nc carbon 2003\n\n```", "```\n    dockerhost$ apt-get install collectd-core\n\n    ```", "```\n    LoadPlugin \"write_graphite\"\n\n    <Plugin write_graphite>\n      <Node \"carboncache\">\n        Host \"dockerhost\"\n      </Node>\n    </Plugin>\n    ```", "```\n    LoadPlugin \"cpu\"\n    LoadPlugin \"memory\"\n    LoadPlugin \"disk\"\n    LoadPlugin \"interface\"\n    ```", "```\n    dockerhost$ systemctl restart collectd.service\n\n    ```", "```\n    [\n      {\n        \"areaMode\": \"stacked\",\n        \"yMin\": \"0\",\n        \"target\": [\n          \"aliasByMetric(dockerhost.memory.*)\"\n        ],\n        \"title\": \"Memory\"\n      },\n      {\n        \"areaMode\": \"stacked\",\n        \"yMin\": \"0\",\n        \"target\": [\n          \"aliasByMetric(dockerhost.cpu-0.*)\"\n        ],\n        \"title\": \"CPU\"\n      }\n    ]\n    ```", "```\n    LoadPlugin \"cgroups\"\n\n    <Plugin cgroups>\n      CGroup \"/^docker.*.scope/\"\n    </Plugin>\n    ```", "```\n    dockerhost$ systemctl restart collectd.service\n\n    ```", "```\n    dockerhost$ apt-get install python-pip libpython2.7\n\n    ```", "```\n    dockerhost$ cd /opt\n    dockerhost$ git clone https://github.com/lebauce/docker-collectd-plugin.gitdockerhost$ cd docker-collectd-plugindockerhost$ pip install -r requirements.txt\n\n    ```", "```\n    TypesDB \"/opt/docker-collectd-plugin/dockerplugin.db\"\n    LoadPlugin python\n\n    <Plugin python>\n      ModulePath \"/opt/docker-collectd-plugin\"\n      Import \"dockerplugin\"\n\n      <Module dockerplugin>\n        BaseURL \"unix://var/run/docker.sock\"\n        Timeout 3\n      </Module>\n    </Plugin>\n    ```", "```\n    dockerhost$ systemctl restart collectd.service\n\n    ```", "```\nFROM debian:jessie\n\nRUN apt-get update && \\\n    apt-get --no-install-recommends install -y \\\n        collectd-core\n\nADD collectd.conf /etc/collectd/collectd.conf\nENTRYPOINT [\"collectd\", \"-f\"]\n```", "```\n    dockerhost$ docker run -d --name=elastic elasticsearch:1.7.1\n\n    ```", "```\n    dockerhost$ docker run -d --link elastic:elasticsearch \\-p 80:5601 kibana:4.1.1\n\n    ```", "```\n    FROM logstash:1.5.3\n\n    ADD logstash.conf /etc/logstash.conf\n    EXPOSE 1514/udp\n    ```", "```\n    input {\n      syslog {\n        port => 1514\n        type => syslog\n      }\n    }\n\n    output {\n      elasticsearch {\n        host => \"elasticsearch\"\n      }\n    }\n    ```", "```\n    dockerhost$ docker build -t hubuser/logstash .\n\n    ```", "```\n    dockerhost$ docker run --link elastic:elasticsearch -d \\-p 1514:1514/udp hubuser/logstash -f /etc/logstash.conf\n\n    ```", "```\n    *.* @dockerhost:1514\n    ```", "```\n    dockerhost$ systemctl restart rsyslog.service\n\n    ```", "```\n    dockerhost$ logger -t test 'message to elasticsearch'\n\n    ```", "```\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// \\\n        --log-driver=syslog\n    ```", "```\n    dockerhost$ systemctl daemon-reload\n\n    ```", "```\n    dockerhost$ systemctl restart docker.service\n\n    ```", "```\ndockerhost$ docker run --rm busybox echo message to elk\n\n```"]