- en: Searching and Filtering on Issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we're going to be talking about searching and filtering on
    issues, which can be a very powerful capability within JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: We are also going to talk about JQL, what it is, how to write queries in JIRA
    using simple and advanced editors, and how to export WER results.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Issue searching using JQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving and managing filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing bulk changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating new boards from saved filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issue searching using JQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's talk about issue searching using JQL. We are going to
    talk about what JQL is, writing queries in both the simple editor and the advanced
    editor in order to return results, and how to export those results to use them
    in other ways.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's talk about JQL. We don't want to confuse this with the Java query
    language, which is something different—it's the **JIRA Query Language** that we
    want to look at. It's very similar in format to SQL, so if we've spent any time
    in SQL and understand that query syntax, we're going to feel pretty comfortable
    in JQL. It uses fields, values, operators, and keywords. Let's talk about what
    those are.
  prefs: []
  type: TYPE_NORMAL
- en: The fields themselves are the different types of information that are contained
    within the systems; these are the different attributes for the work types and
    more. The values are actually what's contained within those fields, so those are
    the actual values that we would be looking for. The operators are essentially
    the heart of the query—they're the intelligence—so they'd be things like equal
    to, or not equals to, or less than, and more, which we would then use to create
    some intelligence around the fields and values. And then, we've got keywords,
    which are really reserved words that we use in our query language to connect these
    different operators together.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a link to a post on the Atlassian website that talks more deeply about
    searching JIRA: [https://confluence.atlassian.com/jiracore/blog/2015/07/search-jira-like-a-boss-with-jql](https://confluence.atlassian.com/jiracore/blog/2015/07/search-jira-like-a-boss-with-jql).
  prefs: []
  type: TYPE_NORMAL
- en: Simple and advanced JQL editors in JIRA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at the simple and advanced JQL editors in JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have two projects called First Project and Second Project in our instance
    of JIRA. What we want to do is run some queries against these projects. Go to
    the Issues link in the upper left-hand corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Dashboard containing WER projects
  prefs: []
  type: TYPE_NORMAL
- en: 'Our default screen for searching is going to be basically the most generic
    query that we can do, and we''re actually in the advanced editor. Let''s flip
    over to the basic editor in the upper right-hand corner of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, it's going to give us dropdowns that
    allow us to build a query. We know that we can check these projects. Say that
    we want to see just the First Project, or just the Second Project, and, as we
    do that, we can see the results underneath changing. We can also choose the types
    of issues that we want to see, the status that we want to see, who the issue is
    assigned to, and more. This is the basic editor, and we can run a query just by
    clicking and searching for issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go to the advanced editor, we can see that we can also look up some specific
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'One of my favorite queries concerns open Sprints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can say, *show me all of the open Sprints within the FP-1 project*.
    We can see that it's actually going to write a query for us, which makes it easier
    for us to run this. We can say that the *first project and our issue type equals
    story*, and that we want to search for it. We can see how this works; we can use
    the advanced editor to write our queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have a query that was already written, as shown in the following screenshot.
    This is the query for the First Project and the issue type is Story, which says *Show
    us everything that''s in an open Sprint and order that by the created date descending*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: What we get back are two stories. These are the two stories that are currently
    in the First Project and that are in an open Sprint.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at how we would write a query in both the basic and
    advanced query editor, and we've also been given a nice little sheet for the open
    Sprints.
  prefs: []
  type: TYPE_NORMAL
- en: Saving and managing filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to talk about saving and managing filters. This
    means that we're going to learn how to save a created filter, how to set writes
    for our saved filters, and how to see all of our saved filters and manage those.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and hop over to JIRA and take a look at our issue searching
    screen. We have a query, so let''s flip over to the basic editor and say *show
    me everything that''s in the second project*. Saving this is really easy, as all
    we have to do is click on Save as and this will take you to the following screen,
    and write `Second Project Work Items` as our Filter Name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Save Filter dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click Submit, we now have a saved filter. What we''ve done is we''ve
    taken a query and turned it into a filter by saving it so that we can run it again
    and again. If we look under Manage filters on the left, we can see the filter
    that we just saved to the Second Project Work Items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also see that we have three ellipses on the right-hand side, which provide
    us with some options such as Manage subscriptions, Copy filter and Edit filter
    details, and we can even click on Shared with and take a look at who these are
    shared with. If we click on the Second Project work items, we''re going to see
    the content of that query. We can also click Advanced so that we can see what
    query language we used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Second Project Work Items
  prefs: []
  type: TYPE_NORMAL
- en: 'In the top corner of the preceding screenshot, we can see that we can share
    the item by providing the link, inserting the username or email of that person
    contained within JIRA, and then we can add a note and hit Share. We''ve also got
    the details of the item that we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This allows us to set the permissions and subscriptions, and see who should
    have access to them and be able to see the content of this filter. We can see
    that we have the ability to share this with a group, a particular project, any
    logged-in user, or just make it public. That's how we save and we manage our queries
    and turn them into filters.
  prefs: []
  type: TYPE_NORMAL
- en: Executing bulk changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to be talking about executing bulk changes. This
    can be really powerful when we need to make a lot of changes to many items and
    we don't want to make those changes individually. We do this by figuring out whether
    there is a pattern or a way that we can make that change to many items and execute
    what's called a bulk change.  We're going to learn how to execute a bulk change
    using the results of a filter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's jump back over to JIRA and take a look at one of our filters, as shown
    in the following screenshot. In our First Project Open Sprint Work Items filter,
    we can see that this says project FP1, and, if the issue type is story, we're
    going to look at our open Sprints and return everything ordered by the created
    date descending. It returns the two stories, FP1-24 and FP1-25.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also want to change both of these stories to tasks. The best way to do this
    would be with a bulk change, so let''s proceed. We''re going to go to the ellipsis
    in the right-hand corner, and we''re going to click on Bulk change all 2 issue(s):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Executing bulk changes
  prefs: []
  type: TYPE_NORMAL
- en: 'This will bring us to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Bulk operation
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to select each of the issues that we want to change, and, in this
    case, we can just select the top one. It will check all of them, so we can click
    Next. This will take us to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to choose the operation we want to perform. We want to edit these
    issues, but we can also move them from one project to another, transition them
    to the workflow, and more. Let''s click Edit Issues, and then Next, and then we''re
    going to change the issue type to Task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the preceding screenshot, we can also change lots of other
    items as well. We''ll click Next, and then we can click Confirm, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And it will go ahead and execute that change for us as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'While it''s running, we''ll let it run for a minute and, when it''s done, we
    can click Acknowledge. If we go back to our query that was for this project issue
    type story, we get no results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we change the story to a `Task` and run this query again, we can see that
    we''ve now changed these items from stories into tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Running query
  prefs: []
  type: TYPE_NORMAL
- en: That's how we execute a bulk change.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new boards from saved filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to be talking about trading new boards from saved
    filters. Here, we're going to use a saved filter and create a new JIRA board.
    In the previous sections, we've talked about what JQL is, creating a filter from
    a query, and bulk changes, and now we're going to take a look at using those same
    filters to create a JIRA board. There's actually a lot of power within JIRA.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see in the following screenshot, we have a query. We''ve actually
    saved this query as a filter. Let''s take a look at what this query does:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Saved filters
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the preceding screenshot, it's basically returning all of the
    items in the First Project and Second Project, and it's ordering them by the creation
    date descending. That's pretty simple; it's basically saying, *show me all of
    the work items in these two projects.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use this to create a new board. Let''s say, hypothetically, that we
    want to go and mine these two projects together into a bigger initiative, and
    we want to create a board that will let us view all of that in a single board
    view. What we''ll do now is go over to the search screen, to RECENT BOARDS. We
    can see in the following screenshot that we have View all boards:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We might remember that a board gets created automatically when we create a
    new project. Here, we can see that we actually have two boards already; we have
    the first project and second project boards as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re now going to create a new project, so if we go to the upper right-hand
    corner, we can see that we have a Create board option, so let''s click that. We''re
    going to get a prompt that gives us some options on what kind of board we''d like
    to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The first is the Agility board, which is the board that JIRA will create to
    allow us to view the content of a project in a more streamlined way. We already
    have projects in place with boards, and so we're trying to create a board from
    a query. We can also see that we have a Scrum board, which would include things
    like iterations and similar. We're really just trying to bring a board view together
    that gives us all of the contents of the two projects. Kanban is going to be what
    we want to use in this situation. Kanban is really about moving work items and
    a limited number of work items through a workflow, with each column representing
    a workflow. Let's create a Kanban board. We can see in the following screenshot
    that we get a few more options, for example, do we want to create a new software
    project, an existing project, or a board from an existing saved filter?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a board by clicking on the Board from an existing Saved Filter
    option and hitting Next. We''ll call this board `All Projects`, and we''re going
    to use the Saved Filter of the First and Second Projects. We''re not going to
    share it now, but we''re going to have me as the owner, and then, as a location,
    we can save this as another board underneath either the first or second projects,
    or we can just attach this to our profile, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go ahead and create the board. We can see that we have a Kanban board
    with three columns, TO DO, IN PROGRESS, and DONE, and all of the content of both
    of the projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see in the preceding screenshot, which shows us that all of the first
    and second project's content is now contained within this board, and that we live
    in this workflow. If you found that easy, we will now look at a few options that
    give us both of those projects combined.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what the JIRA query language is, that is, JQL— this
    is not the Java Query Language, but the JIRA Query Language. We learned how to
    write both simple and advanced queries using JQL, how to export our query results,
    and we learned how to save the query and turn it into a filter. Finally, we learned
    how to use those saved filters to execute bulk changes, and we learned how to
    use a saved filter to create a new JIRA board.
  prefs: []
  type: TYPE_NORMAL
- en: In our next and final chapter, we're going to be talking about dashboards and
    widgets.
  prefs: []
  type: TYPE_NORMAL
