- en: Chapter 4. Customizing JIRA for Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will configure and customize JIRA for test management, which
    we also briefly discussed in [Chapter 1](ch01.html "Chapter 1. Planning Your JIRA
    Installation"), *Planning Your JIRA Installation*, but we will discuss it in detail
    here. The best thing about JIRA is its customizations. Out of the box, JIRA can
    be used for bug tracking, agile-based projects, or just simple issue tracking
    but every organization has its own processes and different software models. In
    this chapter, we will discuss a specific use case of test management that will
    cover most of the aspects of JIRA customizations. We will start by gathering all
    the requirements. Then, we will implement those customizations in our JIRA instance.
    You will learn how to create new issue types to store test campaigns and test
    cases. Workflow customizations will also be discussed in detail. We will also
    modify the permission scheme to limit the project visibility. Learning these customizations
    will help you to understand the capabilities of JIRA, which can be applied to
    a wide range of use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: What is test management?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating issue types for test campaigns and test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the workflow for changes in transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing additional data from users on state transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to make certain fields mandatory only for test campaigns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting the project visibility to certain groups and individuals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to hide a specific issue from the user within a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Versions and components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is test management?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test management is the software process of performing tests to verify the requirements.
    It can be either automated or manually tested as defined in the test cases. Test
    campaigns are a collection of test cases. A test campaign can be created to collect
    all the test cases of a particular module in your project. Using JIRA, it's possible
    to perform manual testing; to store test campaigns, we will create a new standard
    issue type. On the other hand, a new subtask issue type will be created to store
    test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Creating issue types for test campaigns and test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Out of the box, the JIRA software comes with a few standard **Issue types**,
    namely **Bug**, **Epic**, **Story**, and **Task**, and one subtask named **Sub-task**.
    We need to create two issue types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requirement**: Issue types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test campaign**: This will be the standard issue type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test case**: This will be the subtask'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at how to create these issue types:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Issues** | **Issue types** and click on the **Add
    Issue Type** button in the top-right corner:![Creating issue types for test campaigns
    and test cases](img/image_04_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, enter **Name** as `Test Campaign`, enter **Description**
    as `This issue type will be used as a collection of individual test cases.`, which
    is a good practice, and select **Standard Issue Type** as the **Type**:![Creating
    issue types for test campaigns and test cases](img/image_04_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the same procedure to create a test case subtask. The only exception
    here is to select **Sub-Task Issue Type** as the **Type**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating new issue type schemes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Issue type schemes define which issue types will be available to a particular
    project. Out of the box, JIRA comes with the **Default Issue Type Scheme**. By
    default, all the newly created issue types will be added to this scheme; the two
    new issue types that we just created will also be added to this scheme, making
    them available for all the projects using it. However, as a good practice, you
    should always create a new issue type scheme to contain only those issues that
    are relevant and required. These schemes can then be reused in all other projects
    with similar requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new issue type scheme with the following issue types:'
  prefs: []
  type: TYPE_NORMAL
- en: Bug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test campaign
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a new issue type scheme, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Issues** | **Issue type schemes** and click on
    the **Add Issue Type Scheme** button in the top-right corner:![Creating new issue
    type schemes](img/image_04_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Add Issue Type Scheme** screen, perform the following steps to create
    a new issue type scheme:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter **Scheme Name** as `Test Management Issue Type Scheme`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a useful **Description**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the required issue types from the **Available Issue Types** column on the
    right-hand side to the **Issue Types for Current Scheme** column on the left-hand
    side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Test Campaign** as the **Default Issue Type**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It should look like the following screenshot. Click on the **Save** button to
    finish:![Creating new issue type schemes](img/image_04_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The new **Issue type scheme** will be created and shown in the list. As you
    can see in the next screenshot, currently there are no projects using this scheme.
    Hence, under the **Projects** column, it shows no projects for our new scheme.
    We will create a new project and apply this scheme to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating new issue type schemes](img/image_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this moment, we need to create a new project to apply our customizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating new issue type schemes](img/image_04_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to **Administration** | **Projects** and in the **Project list** section,
    click on the **Add Project** button on top-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating new issue type schemes](img/image_04_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Create project** popup, select **Basic software development** under
    **SOFTWARE** and press the **Next** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating new issue type schemes](img/image_04_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next popup will confirm your selection and display the **ISSUE TYPES** and
    **WORKFLOW** that you will get in this project. Just press the **Select** button
    to continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the **Name** of our project as `Project For Test Management` and the
    project **Key** is `PFTM`. Click on the **Submit** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating new issue type schemes](img/image_04_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this project has been created, go to the project sidebar and then **Project
    Administration** | **Issue types**. You will notice that, by default, **PFTM:
    Scrum Issue Type Scheme** is applied to the project. This is a new scheme created
    for this project only. We will change it and apply our own issue type scheme that
    we created earlier. In the top-right corner, click on the **Actions** menu and
    select **Use a different scheme**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating new issue type schemes](img/image_04_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next screen, you will get a list of all the available **Issue Type Schemes**;
    just select the **Test Management Issue Type Scheme** and click on the **OK**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating new issue type schemes](img/image_04_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now the project scheme has been changed and it now has the new issue types that
    we want. You can verify this by creating a new issue under this new project and
    seeing the list of all the available Issue Types that we wanted.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the workflow for changes in transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In any issue-tracking system, the issues will be created, then moved to the
    In Progress state, and finally Closed. This is the scenario of a simple workflow
    with three states: Open, In Progress, and Closed, which would only work in ideal
    cases, but in real-world cases, the workflows, that is, how the issue will move
    from one state to another, could be quite complex. For instance, sometimes you
    need to wait for some information from the client to act further on the issue;
    there could be a case when someone will review your task before closing. To incorporate
    such cases, we need the ability to modify these workflows.'
  prefs: []
  type: TYPE_NORMAL
- en: Each company has its own processes and software models. In JIRA, it's possible
    to customize the workflow very easily. This is one of the most powerful features
    of JIRA. We can easily create new states and conditions. In this section, we will
    customize the workflow for a test campaign and a test case.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow for a test campaign
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A test campaign is a collection of test cases. We have already created its issue
    type. The user will start by creating a new issue of type test campaign and then
    all the test cases that are part of it will be created as a subtask.
  prefs: []
  type: TYPE_NORMAL
- en: 'A test campaign could be assigned to a specific team lead, who could further
    assign test cases among team members. The following diagram represents a typical
    workflow for a test campaign:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Workflow for a test campaign](img/B0568_04_12-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The test campaign will be moved to the **In Progress** state while all the test
    cases are prepared and created as a subtask. Once the bundle of test cases are
    added and finalized, the test campaign will be **Published**. The **Under Execution**
    state signifies that the test cases under it are currently being executed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to create some additional states. These are not already there in
    the system. Also, we want to add a constraint that the test campaign can only
    be closed when all the test cases under it are closed as well, and only the reported
    can close the test campaign as condition in the JIRA terminology.
  prefs: []
  type: TYPE_NORMAL
- en: New states
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are the new states:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Published**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Under Execution**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go to **Administration** | **Issues** | **Statuses** (under **Issue Attributes**)
    and click on the **Add status** button in the top-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![New states](img/image_04_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enter the **Name** and **Description** of the status `Published` and click on
    the **Add** button to create the new state and repeat the same procedure to create
    `Under Execution`.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to create a workflow that we will associate with the test campaign.
    It's always a good practice to copy the default JIRA workflow **jira** and then
    modify it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **Administration** | **Issues** | **Workflows** (under **Workflows**)
    and copy the default JIRA workflow **jira (Read-only System Workflow)** using
    the **Copy** link under **Operations**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![New states](img/image_04_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Copy Workflow: jira** popup, enter the **Workflow Name** as `Test
    Campaign Workflow` and add a **Description**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![New states](img/image_04_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the workflow has been copied, you will find two viewing tabs in the top-left
    corner: one is **Diagram** (which is the default tab) and the other one is **Text**.
    When the **Diagram** tab is enabled, it displays the graphical representation
    of the workflow. However, it''s convenient to work in the **Text** tab.'
  prefs: []
  type: TYPE_NORMAL
- en: Removing unwanted transitions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You will notice that the workflow, which we copied from the default **jira**
    workflow, has some unwanted transitions, such as **Open** to **Resolved**, **Open**
    to **Closed**, and so on. First, we need to delete these transitions. In the **Text**
    mode, under **Operations**, click on the **Delete Transitions** link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Removing unwanted transitions](img/image_04_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, select the **Resolve Issue** and **Close Issue** transitions
    because we don''t want them with the **Open** state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Removing unwanted transitions](img/image_04_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Delete** button to delete the selected transitions. Perform the
    same procedure for all such unwanted transitions. Also, remove the states that
    are not required at all in the workflow, such as the **Resolved** state. You will
    see a link to delete the step, which is linked to a state, once there are no attached
    transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new steps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'After removing all the unwanted transitions, add the new states using the form
    at the bottom of the **Text** mode. The states are added to the workflow by linking
    them with the **Step Name**, whose name is similar to the state name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding new steps](img/image_04_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Add** button to add this state and repeat this for the `Published`
    one as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding new steps](img/image_04_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should now have all the states that are required.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the missing transitions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s add the following missing transitions:'
  prefs: []
  type: TYPE_NORMAL
- en: In Progress to Published
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Published to Reopened
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Published to Under Execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under Execution to Closed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closed to Under Execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Under **Operations**, click on the **Add Transition** link for a specific step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the missing transitions](img/image_04_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enter the **Transition Name** as `Published`, enter some meaningful **Description**,
    and select **Published** as the **Destination Step**. It's also possible to prompt
    the user to fill in some data on a screen that can be shown while making this
    transition. From now onward, we will not do this. Click on the **Add** button
    to continue. Repeat the same for all the other transitions that need to be created.
  prefs: []
  type: TYPE_NORMAL
- en: The transition names can also be added as a verb. For instance, the `Under Execution`
    transition can be added as `Start Execution`. This name appears to the user on
    the issue view screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, your workflow will look similar to the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Workflow for **Text** mode:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Adding the missing transitions](img/image_04_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Workflow for **Diagram** mode:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Adding the missing transitions](img/image_04_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now our workflow has taken shape. We have all the states and transitions as
    we wanted. So, let's now add a few conditions to certain transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Conditions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following are the different conditions for a test campaign:'
  prefs: []
  type: TYPE_NORMAL
- en: A test campaign will only close when all the test cases are Closed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only the reporter can move this test campaign to Closed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first condition will not allow the user to close the issue until all the
    test cases under it are in the Closed state. We want to add this condition when
    a transition from **Under Execution** to **Closed** is attempted:'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the **Text** mode and click on the **Closed** link under the **Transition
    (id)** column. Take a look at this screenshot for reference:![Conditions](img/image_04_023.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, you will get some advanced options for this transition from
    **Under Execution** to the **Closed** state. Under the **Conditions** tab, click
    on the **Add condition** button:![Conditions](img/image_04_024.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following screenshot, you will get a list of conditions that can be added
    to this transition. Select **Sub-Task Blocking Condition** and click on the **Add**
    button:![Conditions](img/image_04_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, select the status for which this condition will be applicable.
    In our case, we want test cases to be in the Closed state, so we will select **CLOSED**
    from the list of various statuses available and click on the **Add** button:![Conditions](img/image_04_026.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the same way, add one more condition called `Only Reporter Condition` for
    the **Under Execution** to **Closed** transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we will have two conditions added to this transition, as shown in the
    following screenshot:![Conditions](img/image_04_027.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Post Function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following is the use of the post function.
  prefs: []
  type: TYPE_NORMAL
- en: When the workflow transition has happened, then certain actions can be performed
    afterwards. For instance, when a test campaign is closed, we send an e-mail to
    everyone in a particular group.
  prefs: []
  type: TYPE_NORMAL
- en: We also want to send an e-mail to all the users who are part of a particular
    group to receive an e-mail when the test campaign is closed. The workflow can
    be configured to trigger an event on a state transition from **Under Execution**
    to **Closed**. The event can further be configured to send an e-mail to a group.
    We will learn that later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new workflow scheme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point, let''s associate our workflow to the project. For this, we need
    to create a workflow scheme, which is a collection of one or more workflows mapped
    to the project issue types; to attach a workflow to the project, a workflow scheme
    is required:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Issues** | **Workflow Schemes** (under **WORKFLOWS**)
    and click on the **Add Workflow Scheme** button in the top-right corner. In the
    **Add Workflow Scheme** screen, enter the **Name** of the scheme as `Test Management
    Workflow Scheme` and some useful **Description**:![Creating a new workflow scheme](img/image_04_028.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the scheme is created, the default **JIRA Workflow** will be assigned to
    all the **Issue Types**; however, in our case, we want the workflow that we just
    created assigned to the Test Campaign issue type:![Creating a new workflow scheme](img/image_04_029.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Workflow** menu in the top-left corner and select **Add Existing**.![Creating
    a new workflow scheme](img/image_04_030.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, select the workflow called **Test Campaign Workflow**
    and click on the **Next** button.![Creating a new workflow scheme](img/image_04_031.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, select **Test Campaign** as the **Issue Type**
    and click on the **Finish** button. This will assign the workflow to the selected
    **Issue Types**. This is displayed in the following screenshot:![Creating a new
    workflow scheme](img/image_04_032.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you go back to our workflow scheme, you will notice that the **Test
    Campaign** issue type is using our custom workflow called **Test Campaign Workflow**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go back to **Project Administration** | **Workflows** and click on the **Switch
    Scheme** button right next to the **Add Workflow** button in the top-left corner.
    On the next screen, select **Test Management Workflow Scheme** and click on the
    **Associate** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The workflow scheme is now associated with the project and the workflow is now
    active. Note that the active workflows cannot be modified; JIRA will create a
    draft version for you for this and the modified workflows can be published again.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a custom event in JIRA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go to **Administration** | **System** | **Events** (under **ADVANCED**) and
    scroll down to the bottom of the page where there is an **Add New Event** form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a custom event in JIRA](img/image_04_033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the **Name** of the event, then enter some useful **Description**, and
    select **Issue Closed** as the **Template** because the template of the e-mail
    will be similar to that of the one sent when the issue is closed. Click on the
    **Add** button to continue. Creating an event doesn''t do anything useful until
    we trigger it from the workflow and customize it in the notification scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to trigger the event from the workflow. Let's go back to the
    **Test Campaign Workflow**, edit it, and click on the **Closed** link under the
    **Transition (id)** column. Now, go to the **Post Functions** tab; here, the last
    entry is for **Generic Event**. Edit it by clicking on the pencil sign in the
    bottom-right corner, as shown in this screenshot:![Adding a custom event in JIRA](img/image_04_034.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, we need to change the event from **Generic Event** to **Email
    to Testers**. Then, click on the **Update** button:![Adding a custom event in
    JIRA](img/image_04_035.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the event will be triggered on the state transition, but there is still
    one more thing to perform to send the e-mail. The notification scheme of the project
    needs to be customized to configure to whom an e-mail will be sent when this event
    is triggered by the workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customizing a notification scheme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To send e-mails, JIRA relies on notification schemes, which define who will
    receive the e-mail and when. As we already mentioned, JIRA comes with default
    schemes and it''s always a good practice to copy them and customize your own copy.
    For this example too, we will copy the **Default Notification Scheme**:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Issues** | **Notification Schemes**. Under **Operations**,
    click on the **Copy** link. It will copy the scheme instantly with the name **Copy
    of Default Notification Scheme**. Click on the **Edit** link under **Operations**
    for this scheme and rename it as `Test Management Notification Scheme`:![Customizing
    a notification scheme](img/image_04_036.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to customize this scheme to send an e-mail to all the users of
    a particular group. For this example, you can create a group called `jira-testers`
    and add a few users to it. [Chapter 7](ch07.html "Chapter 7. User Management,
    Groups, and Project Roles"), *User Management, Groups, and Project Roles* will
    have more information about managing users and groups. Once your group has been
    created, click on the **Notifications** link under **Operations** for the **Test
    Management Notification Scheme**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, you will find the list of all the events and the concerned
    users, groups, or project roles who will receive these e-mails:![Customizing a
    notification scheme](img/image_04_037.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also find the **Email to Testers** custom event that we created, but
    this is just the event listed in this scheme; we need to modify the scheme to
    add the **jira-testers** group in order to get notifications when this event is
    triggered by the workflow. Click on the **Add** button:![Customizing a notification
    scheme](img/image_04_038.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Group** and from the drop-down menu, select **jira-testers**. Click
    on the **Add** button:![Customizing a notification scheme](img/image_04_039.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our scheme is now configured.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, go to **Project Administration** | **Notification** and click on the **Actions**
    menu in the top-right corner and select **Use a different scheme**. On the next
    screen, select our new scheme as **Test Management Notification Scheme** and click
    on the **Associate** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The project will now use the next scheme because the customized workflow is
    already assigned to the project. So, the e-mail notifications should work now
    whenever the test campaign is moved from Under Execution to the Closed state.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow for a test case
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A test case contains information about the input, expected output along with
    a set of actions, and details of the environment that defines whether a requirement
    is met as per the original plan to verify it is working. We will configure JIRA
    for manual testing where we will store all this information as issue types.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already configured JIRA for a test campaign; in this section, we will
    not repeat the implementation, which is exactly similar to what we have just discussed.
    Instead, we will list the details of the workflow, conditions, and post functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Workflow for a test case](img/B0568_04_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A test case will be a subtask of a particular test campaign. Once created,
    it will first be moved to the **In Progress** state when the tester starts performing
    the tests. On the basis of these tests, it can be moved to one of the following
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blocked**: If this test case is critical for other features to work'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Passed**: If it works correctly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Failed:** If it''s not working'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**In Review:** If it requires further investigation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, a test case can either be **Closed** or **Reopened**. A particular
    test campaign can contain hundreds of test cases and its overall percentage of
    the verified testing can be calculated on the basis of how many test cases are
    closed.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new workflow called **Test Case Workflow**, add it in **Test Management
    Workflow Scheme**, and assign it to the **Test Case** as **Issue Type**.
  prefs: []
  type: TYPE_NORMAL
- en: New states
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have identified a few new states that need to be created:'
  prefs: []
  type: TYPE_NORMAL
- en: Blocked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The procedure to create these states is similar to what we discussed previously
    for a test Campaign.
  prefs: []
  type: TYPE_NORMAL
- en: Condition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We want to impose the constraint that only the user who is assigned the test
    case will be able to move it to the **Passed** state:'
  prefs: []
  type: TYPE_NORMAL
- en: Only the assignee can move the test case to the **Passed** state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the workflow condition is **Only Assignee Condition**.
  prefs: []
  type: TYPE_NORMAL
- en: Post function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a test case fails, it might become important to understand what went wrong
    in the feature. To highlight this issue, we can automatically change the issue
    from **Priority** to **Highest**:'
  prefs: []
  type: TYPE_NORMAL
- en: When the test case is moved to the **Failed** state, change the issue from **Priority**
    to **Highest**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is a post function called **Update Issue Field** to implement this; modify
    the **Test Case Workflow** and add a post function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Post function](img/image_04_041.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Add** button. On the next screen, select **Priority** as the
    **Issue Field** and **Highest** as the **Field Value**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Post function](img/image_04_042.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Add** button to add this post function. The rest of the procedure
    remains the same. You can also modify the active workflow and publish it back
    after performing the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing additional data from users on state transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the workflow of the test campaign transition, when we move the issue from
    the In Progress state to the Published state, we want the user to provide some
    additional information about the type of test campaign, which could be a select
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Issues** | **Custom Fields** (under **FIELDS**)
    and click on the **Add Custom Field** button in the top-right corner:![Capturing
    additional data from users on state transitions](img/image_04_043.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Select a Field Type** screen, select the field type as **Select List
    (single choice)** and click on the **Next** button:![Capturing additional data
    from users on state transitions](img/image_04_044.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, enter the **Name** of the custom field as `Campaign Type`,
    enter a **Description**, and add the **Options** that will appear in the select
    list:![Capturing additional data from users on state transitions](img/image_04_045.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following screenshot, you will be prompted to add this field to the existing
    screens, but don't select any field. We will add the fields later on. If you want
    to add new fields in the default screen, then you can do this by selecting the
    checkbox for default screen. Click on the **Update** button to finish. Now our
    field has been created, we need to create a custom screen that will be shown to
    the user when a transition from In Progress to Published is performed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Administration** | **Screens** (under **SCREEN**) and click on the **Add
    Screen** button in the top-right corner. In the following screenshot, enter **Name**
    as `Published Screen` and **Description** as `This screen will capture additional
    data`:![Capturing additional data from users on state transitions](img/image_04_046.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add** to create the screen. Now we need to add the custom field that
    we already created:![Capturing additional data from users on state transitions](img/image_04_047.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Currently, there are no custom fields on this screen; from the **Select Field**
    drop-down list, select **Campaign Type** and add it on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Capturing additional data from users on state transitions](img/image_04_048.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We now have a screen called **Published Screen **with the custom field as **Campaign
    Type:**
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the **Test Campaign Workflow**, edit it, and click on the **Published**
    link under the **Transitions (id)** column from the **In Progress** to **Published**
    transition row:![Capturing additional data from users on state transitions](img/image_04_049.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Transition: Published** screen, click on the **Edit** button in the
    top-right corner; it will open another popup. Here, we will specify **Transition
    View** as **Published Screen**:![Capturing additional data from users on state
    transitions](img/image_04_050.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Update** button to finish. Also, don't forget to publish this
    workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Now, whenever a test campaign is moved from the **In Progress** state to the
    **Published** state, a separate screen will be shown to the user to capture the
    **Campaign Type** value.
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to make certain fields mandatory only for a test campaign
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have added the custom field and users will also be prompted to enter the
    field, but there is one problem: it''s quite possible that users will not provide
    any value in this field and skip it. In JIRA, it''s possible to make a certain
    field mandatory and this is achieved by modifying the field configuration of the
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Field configurations** (under **FIELDS**) and create
    a copy of **Default Field Configuration** and name it `Test Management Field Configuration`:![Learning
    how to make certain fields mandatory only for a test campaign](img/image_04_051.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the field configuration is copied, click on the **Configure** link (under
    **Operations**) as shown in the preceding screenshot.![Learning how to make certain
    fields mandatory only for a test campaign](img/image_04_052.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see on the screen, for every field, it's possible to make it **Required**,
    that is, mandatory. Click on the **Required** link and the field configuration
    will be modified in an instant. The last step is to create a field configuration
    scheme where we will associate this new field configuration to the **Test Campaign**
    issue type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Administration** | **Field configuration schemes** (under **FIELDS**)
    and click on the **Add Field Configuration Scheme** button in the top-right corner.
    In the popup that appears, give **Name** as `Test Management Field Configuration` scheme
    and a meaningful **Description**. Click on the **Add** button to continue:![Learning
    how to make certain fields mandatory only for a test campaign](img/image_04_053.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Default Field Configuration** will be associated with all the unmapped
    issue types, but we want to associate `Test Management Field Configuration` with
    the **Test Campaign** issue type. Click on the **Associate an Issue Type with
    a Field Configuration**. In the popup that appears, select **Test Campaign** as
    the **Issue Type** and **Test Management Field Configuration** as the **Field
    Configuration** and press the **Add** button to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning how to make certain fields mandatory only for a test campaign](img/image_04_054.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our field configuration scheme is ready. Now, go to **Project Administration**
    | **Fields** and from the **Actions** menu in the top-right corner, select **Use
    a different scheme**. On the next screen, select the new field configuration,
    which we have just created, and apply it to the project. We have just learned
    how to make a field mandatory for a specific issue type only.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting the project visibility to certain groups and individuals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the projects in JIRA are visible to all users who have access to the application
    they are assigned to. JIRA allows you to change this behavior. It's possible to
    hide a project from all the other users and only let users who are part of a certain
    group access it.
  prefs: []
  type: TYPE_NORMAL
- en: We created a `jira-testers` group earlier in this chapter. Let's allow only
    users who are part of this group to access our **Project For Test Management**.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Project Administration** | **Permission**. It will open up the **Default
    software scheme** or **Default Permission Scheme** page currently applied on the
    project. The second permission in the list is **Browse Projects**, which is currently
    given to **Application Role** (**Any logged in user**). That means all the users
    who have account in JIRA will be able to access this project.
  prefs: []
  type: TYPE_NORMAL
- en: We basically need to remove **Application Role** (**Any logged in user**) and
    add the **jira-testers** group instead for the **Browse Projects** permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **Administration** | **Issues** | **Permission schemes** and create a
    copy of **Default Permission Scheme **and name it **Test Management Permission
    Scheme**. Then, edit the permission of this new scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Remove** link first and in the next popup, select **Application
    Role** - **Any logged in user** and click on the **Remove** button:![Limiting
    the project visibility to certain groups and individuals](img/image_04_055.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on the **Edit** link and in the **Grant permission** popup, select
    **Group** and from the drop-down list, select **jira-testers**. Click on the **Grant**
    button to finish:![Limiting the project visibility to certain groups and individuals](img/image_04_056.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to **Project Administration** | **Permissions** and from the **Actions**
    menu in the top-right corner, select **Use a different scheme**. On the next screen,
    select the new scheme and click on the **Associate** button to apply this scheme
    to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to hide a specific issue from the user within a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, only the users who are part of the **jira-testers** group can access
    **Project For Test Management**. The user may be part of other groups, but they
    must be part of **jira-testers** to be able to view this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine a scenario when there is a need to hide certain issues from all the
    users who are not part of a particular group. This is just an example that we
    will implement here, but in reality, there could indeed be such cases. This can
    be achieved by creating an issue security scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Administration** | **Issues** | **Issue Security Schemes** and click
    on **Add Issue Security Scheme** at the bottom. In the following screenshot, enter
    the **Name** and **Description**:![Learn how to hide a specific issue from the
    user within a project](img/image_04_057.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Operations**, click on the **Security Levels** link:![Learn how to hide
    a specific issue from the user within a project](img/image_04_058.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **Name** and **Description** of the security level and click on the
    **Add Security Level** button:![Learn how to hide a specific issue from the user
    within a project](img/image_04_059.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once created, click on the **Add** link under **Operations** for this security
    level and select **Group** as **jira-team-cursor** from the drop-down list (or
    any group of your choice):![Learn how to hide a specific issue from the user within
    a project](img/image_04_060.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to continue. Now we have created a security scheme;
    before we can apply it to the project, we also need to modify the permission scheme
    of the project to allow only the users of the **jira-team-cursor** group to be
    able to **Set Issue Security**, as shown in the following screenshot:![Learn how
    to hide a specific issue from the user within a project](img/image_04_061.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to **Project Administration** | **Issue Security** and under the **Actions**
    menu in the top-right corner, click on **Select a scheme**. On the next screen,
    select **Test Management Security Scheme** as the **Scheme** and click on the
    **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have set up the security scheme. For testing purposes, create a new user
    and make him/her part of **jira-team-cursor** along with the **jira-testers**
    group. By default, every user who is part of the **jira-testers** group can access
    all the projects and all the issues under it but users who are also part of **jira-team-cursor**
    can hide a specific issue from users of the **jira-testers** group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit/create an issue and you will now notice a new system field called **Security
    Level**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Learn how to hide a specific issue from the user within a project](img/image_04_062.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the drop-down list, select the **Security Level** that we created earlier
    and save the issue. Now, this particular issue will only be visible to users who
    are part of the **jira-team-cursor** group. The best part is that only users who
    are part of **jira-team-cursor** will be able to set this security level.
  prefs: []
  type: TYPE_NORMAL
- en: Versions and components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are almost done with configuring JIRA for test management; there are a few
    other things that are left and those are setting up versions and components.
  prefs: []
  type: TYPE_NORMAL
- en: Versions are useful for software projects to identify different releases of
    software. You would always release the first version of a stable project or product
    and, based on the user feedback and improvement, further versions will be released.
    JIRA allows you to create various versions and assign them to individual issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **Project Administration** | **Version**, enter the **Name** of the version,
    a **Description**, **Start date**, and **Release date**, and click on the **Add**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Versions and components](img/image_04_063.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have added versions (such as `v1.0`, `v1.1`, and `v1.2`). You can choose
    names that are relevant to your project.
  prefs: []
  type: TYPE_NORMAL
- en: In any project, the features can be broken down into subsections or into a module.
    It is not only useful to break down the bigger tasks, but it also helps in segregating
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **Project Administration** | **Components**, enter the **Name** of the
    component, enter **Description**, select **Component Lead**, and click on the
    **Add** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Versions and components](img/image_04_064.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can add various components (such as requirement gathering, analysis, design,
    documentation, coding, testing, and support).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we customized JIRA's instance to act like a test management
    tool. We started by gathering the requirements to implement such use cases in
    JIRA. You learned how to customize various schemes to introduce new issue types,
    custom workflows, field configurations, and project permissions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to configure Zephyr, which is a popular
    JIRA add-on for test management. This add-on will bring standard features and
    built-in functionality to get you started for software testing without customizing
    JIRA. Many organizations use Zephyr and we will also learn how to use it for performing
    testing.
  prefs: []
  type: TYPE_NORMAL
