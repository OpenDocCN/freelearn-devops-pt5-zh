- en: Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this, the final chapter, we will focus on a number of best practices that
    you should always keep in mind when using Jira. You must have already realized
    that Jira is quite a flexible tool when it comes to customizing it, based on your
    requirements. At the same time, it is very important that configuration changes
    in Jira are done carefully from the outset and that you are aware of the consequences
    if these customizations are not performed correctly. Observing best practices
    will ensure the longevity and top-notch performance of your Jira instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics covered in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a change control board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documenting your configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not creating too many statuses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not creating lots of custom fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using contexts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using project roles over groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not modifying default configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jira customization process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a change control board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your organization has just started using Jira, or wants to use it, then the
    very first thing that should be done is to set up some sort of change control
    board. Jira can be installed easily at the outset for piloting and, especially
    if you are planning to use Jira Cloud, then it literally takes minutes to set
    up a new instance and you can start using it straight away, mainly because Jira
    comes with project templates. However, as the number of teams expands and Jira
    is adopted by many of them, the majority will ask the administrator to modify
    the projects slightly based on their requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Since Jira is quite easy to modify, it might be tempting to just implement the
    new changes straight away, and this is what we want to warn you about. Treat Jira
    like any other project and, in the beginning, create a standard set of configurations
    that can be used by a wide range of teams. Although Jira administrators are responsible
    for the tool, they should also advocate the standardization of various processes.
    For example, if there are two teams working in the same company on a similar project,
    then ideally, they both should be using the same configurations in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the change control board is to ensure that, on an ongoing basis,
    the Jira customizations are done by first reviewing the changes, challenging the
    team, and advising them on using standard configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting your configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The worst nightmare of Jira administrators is a Jira instance with hundreds
    of workflows and other customizations without any idea of their purpose. Jira
    instances can grow big very quickly in an enterprise setup and that is why it
    is absolutely imperative that the configurations executed in the tool from the
    very outset are documented in detail. It may seem cumbersome, but once it is done
    from the very beginning, it helps the Jira administrators a lot in maintaining
    the instance. You need to ensure that, with every customization undertaken in
    the tool, and not just at the start but on an ongoing basis as well, the document
    is also updated.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting is important because, when a new person joins the team of Jira administrators,
    they can always refer to the documentation to understand the purpose of the configuration.
    This document should ideally contain the purpose of the configuration, target
    project types, actual configurations, and feedback from the stakeholders or your
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Not creating too many statuses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workflows are one of the main aspects of Jira customizations. They define the
    life cycle of an issue as it goes through different stages. A workflow has a variety
    of statuses, and various transitions between them. Sometimes, when a new workflow
    is created, there might be a requirement to create a new status. Now, before creating
    a new status, please go through the existing list of statues in your instance
    and check whether any of those existing statuses can be reused.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing a status is only possible when their names are a bit generic and not
    overly project-specific. For example, **Awaiting feedback** and **Feedback awaited** are
    more or less the same, and there is no need to create a status such as **Feedback
    123**.
  prefs: []
  type: TYPE_NORMAL
- en: Statuses are created globally and Jira workflows can use them, which is why
    you should not try to create too many statuses.
  prefs: []
  type: TYPE_NORMAL
- en: Not creating lots of custom fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this book, we learned how to create custom fields. The purpose of
    these fields is to store some additional information that is otherwise not possible with default
    system fields in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Too many custom fields is the biggest reason for slow performance in Jira. There
    really is no reason to have hundreds of custom fields in Jira and caution should
    be exercised when creating a new custom field. Just as with statuses, try to reuse
    a custom field and also try to create custom fields with generic names.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some generic custom fields that can be created in Jira
    instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Custom field** | **Type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Client/customer | Select List | This uses Project Context to create different
    options for multiple projects |'
  prefs: []
  type: TYPE_TB
- en: '| Category | Select List | Labels and components should be used in most cases,
    but this generic field can be used in many projects with different options using
    Project Context |'
  prefs: []
  type: TYPE_TB
- en: '| External ID | Text Field | This field will be used to store the ID of the
    issue, which is stored in an external tool |'
  prefs: []
  type: TYPE_TB
- en: '| Type of testing | Select List | This field can be used when Jira is used
    for test management |'
  prefs: []
  type: TYPE_TB
- en: '| Start date | Date Picker | Jira does come with a due date, but the start
    date of a task is not available |'
  prefs: []
  type: TYPE_TB
- en: As you can see in the preceding table, the idea is to optimize field utilization.
    Since these fields store information for every project and issues therein, the
    performance of the instance can be degraded if there are lots of fields.
  prefs: []
  type: TYPE_NORMAL
- en: Using contexts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we discussed optimizing the use of custom fields, but
    sometimes, the same custom field requires a different set of options for each
    project. For example, a field such as Customer name can have different options
    based on the team or project, and w e are talking about a Select List type of
    field.
  prefs: []
  type: TYPE_NORMAL
- en: In such scenarios, we highly recommend that you use custom field contexts that
    will let you create different sets of options based on the project, but where
    the fields remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: Using project roles over groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maintaining a Jira instance, especially in a growing organization, can be a
    daunting task. There are a number of activities that can only be done by Jira
    administrators, so you should ensure that project administrators are also able
    to manage their projects as much as they can. This is especially true when more
    people are added to the project. There are many configurations, such as permissions,
    notifications, and workflows, that are based on users. When creating these configurations,
    if you use a Jira group instead of project roles, then your project administrators
    are dependent on you to add/remove people, but they do have permissions to manage
    their own team of users using project roles.
  prefs: []
  type: TYPE_NORMAL
- en: Not modifying default configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira comes with a lot of templates and default configurations, as you may have
    seen earlier. These configurations help you get started with Jira quickly but,
    as a good practice, you should never modify them directly. If you want to use
    any of the default configurations, feel free to copy them and then modify the
    copied version.
  prefs: []
  type: TYPE_NORMAL
- en: Jira customization process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, let's summarize the customization process that you can employ to kick-start
    the use of Jira in your organization. It is based on the best practices that we
    discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can perform these steps to begin the customization process:'
  prefs: []
  type: TYPE_NORMAL
- en: Pilot Jira with default configurations
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gather feedback
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Document the proposed configurations
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the configurations in a sandbox
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement them in production
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Standardize the configurations
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a change control board
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding mentioned steps are self-explanatory, and we have already covered
    them either in this chapter or earlier in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at various best practices that you must employ in
    your organization when implementing Jira. The purpose of them is to not only ensure
    good performance of your instance, but to also ensure that administration of the
    instance does not become more difficult over time.
  prefs: []
  type: TYPE_NORMAL
- en: This was the final chapter in this book. Their purpose of this book was to get
    you started on Jira cloud instance quickly with a view to using them in your organization,
    but we also covered the customization aspects of Jira. We hope this book will
    empower you to start using Jira with confidence and we wish you all the best on
    your journey.
  prefs: []
  type: TYPE_NORMAL
