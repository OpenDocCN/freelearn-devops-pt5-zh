["```\n$ base=https://github.com/docker/machine/releases/download/v0.16.2 &&\n  curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/usr/local/bin/docker-machine &&\n  chmod +x /usr/local/bin/docker-machine\n```", "```\n$ curl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine &&\n    chmod +x /tmp/docker-machine &&\n    sudo cp /tmp/docker-machine /usr/local/bin/docker-machine\n```", "```\n$ if [[ ! -d '$HOME/bin' ]]; then mkdir -p '$HOME/bin'; fi && \\\ncurl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-Windows-x86_64.exe > '$HOME/bin/docker-machine.exe' && \\\nchmod +x '$HOME/bin/docker-machine.exe'\n```", "```\n$ docker-machine create --driver virtualbox docker-local\n```", "```\nCreating CA: /Users/russ.mckendrick/.docker/machine/certs/ca.pem\nCreating client certificate: /Users/russ.mckendrick/.docker/machine/certs/cert.pem\nRunning pre-create checks...\n(docker-local) Image cache directory does not exist, creating it at /Users/russ.mckendrick/.docker/machine/cache...\n```", "```\n(docker-local) No default Boot2Docker ISO found locally, downloading the latest release...\n(docker-local) Latest release for github.com/boot2docker/boot2docker is v19.03.5\n(docker-local) Downloading /Users/russ.mckendrick/.docker/machine/cache/boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v19.03.5/boot2docker.iso...\n(docker-local) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%\n```", "```\nCreating machine...\n(docker-local) Copying /Users/russ.mckendrick/.docker/machine/cache/boot2docker.iso to /Users/russ.mckendrick/.docker/machine/machines/docker-local/boot2docker.iso...\n(docker-local) Creating VirtualBox VM...\n(docker-local) Creating SSH key...\n(docker-local) Starting the VM...\n(docker-local) Check network to re-create if needed...\n(docker-local) Found a new host-only adapter: 'vboxnet0'\n(docker-local) Waiting for an IP...\nWaiting for machine to be running, this may take a few minutes...\n```", "```\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with boot2docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\n```", "```\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this VM, run: docker-machine env docker-local\n```", "```\n$ docker-machine env docker-local\n```", "```\nexport DOCKER_TLS_VERIFY='1'\nexport DOCKER_HOST='tcp://192.168.99.100:2376'\nexport DOCKER_CERT_PATH='/Users/russ.mckendrick/.docker/machine/machines/docker-local'\nexport DOCKER_MACHINE_NAME='docker-local'\n# Run this command to configure your shell:\n# eval $(docker-machine env docker-local)\n```", "```\n$ eval $(docker-machine env docker-local)\n```", "```\n$ docker-machine ls\n```", "```\n$ docker-machine ssh docker-local\n```", "```\n$ docker-machine ip docker-local\n```", "```\n$ docker-machine inspect docker-local\n$ docker-machine config docker-local\n$ docker-machine status docker-local\n$ docker-machine url docker-local\n```", "```\n$ docker-machine stop docker-local\n$ docker-machine start docker-local\n$ docker-machine restart docker-local\n$ docker-machine rm docker-local\n```", "```\nAbout to remove docker-local\nWARNING: This action will delete both local reference and remote instance.\nAre you sure? (y/n): y\nSuccessfully removed docker-local\n```", "```\n$ DOTOKEN=191e004d9a58b964198ab1e8253fc2de367a70fceb9847b7fd44ebf \n```", "```\n$ docker-machine create \\\n     --driver digitalocean \\\n     --digitalocean-access-token $DOTOKEN \\\n     docker-digitalocean\n```", "```\nRunning pre-create checks...\nCreating machine...\n(docker-digitalocean) Creating SSH key...\n(docker-digitalocean) Creating Digital Ocean droplet...\n(docker-digitalocean) Waiting for IP address to be assigned to the Droplet...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with ubuntu(systemd)...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this VM, run: docker-machine env docker-digitalocean\n```", "```\n$ eval $(docker-machine env docker-digitalocean)\n```", "```\ndocker-machine create \\\n     --driver digitalocean \\\n     --digitalocean-access-token $DOTOKEN \\\n     --digitalocean-image ubuntu-16-04-x64 \\\n     --digitalocean-region nyc3 \\\n     --digitalocean-size 512mb \\\n     --digitalocean-ipv6 \\\n     --digitalocean-backups \\\n     --digitalocean-ssh-user root \\\n     --digitalocean-ssh-port 22 \\\n     docker-digitalocean\n```", "```\n$ docker-machine create \\\n      --driver digitalocean \\\n      --digitalocean-access-token $DOTOKEN \\\n      --digitalocean-image ubuntu-18-04-x64 \\\n      --digitalocean-size 1gb \\\n      docker-digitalocean\n```", "```\n$ docker-machine rm docker-digitalocean\n```", "```\n$ brew cask install vagrant\n```", "```\n$ vagrant init ubuntu/bionic64\n```", "```\nVagrant.configure('2') do |config|\n  config.vm.box = 'ubuntu/bionic64'\nend\n```", "```\nVagrant.configure('2') do |config|\n  config.vm.box = 'ubuntu/bionic64'\n  config.vm.provision :docker\nend\n```", "```\n$ vagrant up\n```", "```\nBringing machine 'default' up with 'virtualbox' provider...\n==> default: Importing base box 'ubuntu/bionic64'...\n==> default: Matching MAC address for NAT networking...\n==> default: Checking if box 'ubuntu/bionic64' version '20200402.0.0' is up to date...\n==> default: Setting the name of the VM: vagrant_default_1586094728360_48806\n==> default: Clearing any previously set network interfaces...\n==> default: Preparing network interfaces based on configuration...\n    default: Adapter 1: nat\n==> default: Forwarding ports...\n    default: 22 (guest) => 2222 (host) (adapter 1)\n==> default: Running 'pre-boot' VM customizations...\n==> default: Booting VM...\n```", "```\n==> default: Waiting for machine to boot. This may take a few minutes...\n    default: SSH address: 127.0.0.1:2222\n    default: SSH username: vagrant\n    default: SSH auth method: private key\n    default:\n    default: Vagrant insecure key detected. Vagrant will automatically replace\n    default: this with a newly generated keypair for better security.\n    default:\n    default: Inserting generated public key within guest...\n    default: Removing insecure key from the guest if it's present...\n    default: Key inserted! Disconnecting and reconnecting using new SSH key...\n==> default: Machine booted and ready!\n```", "```\n==> default: Checking for guest additions in VM...\n    default: The guest additions on this VM do not match the installed version of\n    default: VirtualBox! In most cases this is fine, but in rare cases it can\n    default: prevent things such as shared folders from working properly. If you see\n    default: shared folder errors, please make sure the guest additions within the\n    default: VM match the version of VirtualBox you have installed on\n    default: your host and reload your VM.\n    default:\n    default: Guest Additions Version: 5.2.34\n    default: VirtualBox Version: 6.1\n==> default: Mounting shared folders...\n    default: /vagrant => /Users/russ.mckendrick/vagrant\n```", "```\n==> default: Running provisioner: docker...\n    default: Installing Docker onto machine...\n```", "```\n$ vagrant ssh\n```", "```\n$ vagrant destroy\n```", "```\n    default: Are you sure you want to destroy the 'default' VM? [y/N] y\n==> default: Forcing shutdown of VM...\n==> default: Destroying VM and associated drives...\n```", "```\n$ vagrant stop\n$ vagrant up\n```", "```\n$ brew cask install multipass\n```", "```\n$ snap install multipass --classic\n```", "```\n$ multipass set local.driver=virtualbox\n```", "```\n$ multipass launch --name docker-host\n```", "```\n$ multipass exec docker-host -- /bin/bash -c 'curl -s https://get.docker.com | sh - && sudo usermod -aG docker ubuntu'\n```", "```\n$ multipass shell docker-host\n```", "```\n$ multipass delete docker-host --purge \n```", "```\n$ multipass stop docker-host\n$ multipass start docker-host\n```"]