- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workflow, Notes, and Tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see
  prefs: []
  type: TYPE_NORMAL
- en: The standard workflow using Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What notes are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use notes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What tags are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll start off by examining the standard workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Standard workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The standard workflow is pretty much what we''ve seen in the previous five
    chapters, except that you usually would not commit so quickly or often. Typically,
    it goes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either clone that repository from the server, or if it was created locally,
    push it to the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 4-6* until you have a block of code that does "something" (e.g.
    opens a dialog box and processes the result).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 4-10* until you have fulfilled a requirement (self-imposed or
    otherwise).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Merge into the main branch (or create a pull request if you are in a team).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are variants on this. Some people like to push after each commit, but
    that prevents them from using interactive rebase to reorganize their commits.
    What happens though if you have pushed your commit and realize that there is additional
    information you wish you had added to the message?
  prefs: []
  type: TYPE_NORMAL
- en: Do *not* modify code you've pushed. (Have I said that before?) So, what to do?
  prefs: []
  type: TYPE_NORMAL
- en: If the problem is significant (you need to modify the commit contents, etc.)
    then you'll need to take more drastic measures (see *Chapter 12*, *Fixing Mistakes*
    on fixing mistakes). But if it is just a matter of updating the message, consider
    adding a note.
  prefs: []
  type: TYPE_NORMAL
- en: Mirroring your repo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to go on to discuss notes, but to do so we need to take a digression
    into mirroring our repository so that we can add notes without messing up our
    existing repo.
  prefs: []
  type: TYPE_NORMAL
- en: 'The repository we want to mirror should have a fair number of commits. You
    may remember from the previous chapter that I answered the challenge by creating
    a repository called `RockyHorror`. Let''s open that repo on our local machine
    and use the log to see the commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: What''s in the existing repository?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: You are not going crazy: for this chapter I''ve switched from PowerShell
    to the Bash shell.'
  prefs: []
  type: TYPE_NORMAL
- en: Replicating an existing repo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see there are nine commits, which will be enough for our purposes.
    However, I don't want to modify this repository (principally so that when you
    download the code it will look right when you are reading *Chapter 6*, *Interactive
    Rebasing*).
  prefs: []
  type: TYPE_NORMAL
- en: To get an exact copy of this repository into another, complete with commits,
    messages, etc., we're going to use Git's --`mirror` flag. Here's how you do it.
  prefs: []
  type: TYPE_NORMAL
- en: Change directory to `RockyHorror` and make sure you are in the local repository
    by using the log, using the `--oneline` flag, as shown previously in *Figure 7.1*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need a repository to put our mirrored version into. Go to GitHub and
    create a new repository named `RockyHorror2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2: Creating the new repo'
  prefs: []
  type: TYPE_NORMAL
- en: As you would expect, you now have a repository, `RockyHorror2`, on the server
    but not locally. We are now going to overwrite the files, commits, etc. on the
    server with the contents of `RockyHorror`, giving us an exact duplicate to work
    with.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, make sure you are in the original repository (`RockyHorror`), and
    then push to the server using the `––mirror` flag and pushing to the new repository
    (`RockyHorror2`). You''ll need the address of your new repo, so start by going
    to the clone button on the server and copying the address, but *do not clone the
    repo*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3: Mirroring to the new repo'
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let's review. In your terminal (Bash, PowerShell, Terminal, etc.) you
    are in the directory for `RockyHorror` and if you call `git log --oneline` you
    will get the results shown in *Figure 7.1*.
  prefs: []
  type: TYPE_NORMAL
- en: Now you are ready to mirror this repo locally. You'll do that from your terminal,
    but remember, what it is going to do is push a mirror of this repository onto
    the server, overwriting whatever is already in `RockyHorror2` (in this case just
    the `README.md`, the `LICENSE`, and the `.gitignore` file).
  prefs: []
  type: TYPE_NORMAL
- en: 'This will cause Git to take a number of actions, the net effect of which is
    to copy everything from `RockyHorror` over to `RockyHorror2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4: Copying from the server to a local repo'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now go to GitHub and see that `RockyHorror2` has been updated to be
    an exact replica of `RockyHorror` (If you don''t see that, remember to refresh
    the page):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.5: Examining the mirrored repo'
  prefs: []
  type: TYPE_NORMAL
- en: There are a few interesting things to see in *Figure 7.5*. First, notice in
    the upper left that we're in `RockyHorror2`, but if you look at the `README` it
    says `RockyHorror`. That is because that `README` came from the original `RockyHorror`
    repo. Also notice that the files are not from a few minutes ago, but in my case
    from 6 days ago; that is because I modified those files 6 days ago in the original
    repo. The point, which really can be hard to wrap your head around, is that this
    is an exact duplicate of `RockyHorror`.
  prefs: []
  type: TYPE_NORMAL
- en: Now go to `RockyHorror2` on your local machine. What? It isn't there? Right,
    we only mirrored to the server. If we want a local repository we need to clone
    our new one. You can do that using the command line, Visual Studio, or GitHub
    Desktop as we've seen (or any other GUI you like. SourceTree and Fork are very
    popular as of the time of writing).
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are cloning, make sure you copy the address of the new repo, not the
    original:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.6: Ensuring you are in the right place'
  prefs: []
  type: TYPE_NORMAL
- en: 'You now can change into the new `RockyHorror2` directory. Do so and get a log
    of what is in there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.7: Getting a log of the mirrored repo'
  prefs: []
  type: TYPE_NORMAL
- en: A key thing to notice here is that the commits and where `HEAD` and `origin`
    are pointing to are identical to `RockyHorror` as shown in *Figure 7.1*.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the ID is identical as well. I personally find this almost shocking,
    but as far as Git is concerned this is just another copy of the same repo. From
    now on, however, you can change one without affecting the other.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and showing notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we are ready to add a note to one of our commits.
  prefs: []
  type: TYPE_NORMAL
- en: Let me be clear, you do *not* have to mirror your repo to use notes. We only
    did that here for the purposes of the book; to ensure that the repos correspond
    to what is shown in each chapter. Normally, you would just add the note.
  prefs: []
  type: TYPE_NORMAL
- en: Notes are just bits of text you can attach to a commit after it is already in
    the repo. A common use for notes is to explain how a commit fits in with other
    commits, or perhaps to flag a commit for amending or rebasing, or really to add
    any information you want to paste onto the commit. It does not change the commit;
    it is like a post-it you tack on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the note, you''ll use the `git notes` command with one or more flags.
    For example, if you have the code in *Figure 7.7* and you want to add a note to
    the commit that currently says "Remove Hello World" all we need to do is to get
    the ID `commit id—bb4927c—` and execute like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now run `git log` you''ll see the note in the log listing, prefixed
    by the word Notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`![](img/B17741_07_08.png)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.8: Seeing the attached note'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see your changes along with the note, use the `show` subcommand:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.9: Seeing your changes with the notes'
  prefs: []
  type: TYPE_NORMAL
- en: Once again, there are many subcommands that you can Google for when the need
    arises.
  prefs: []
  type: TYPE_NORMAL
- en: Tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It can be convenient to mark a given commit with a name. For example, you might
    mark one commit as the developer release, and another as the general release.
    Each time you make a new release you add another tag, giving you a quick and clean
    way to look through the history and see which commits were added before or after
    each release.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look back at *Figure 7.1* one more time. We might decide that the commit
    `Enter show times` is the last commit in creating the Show object, and we'd like
    to indicate that. We can do so with a note, but in this case, it may be more convenient
    to tag that commit.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of tags you might use: a simple tag and an annotated tag.
    Let''s start with a simple tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.10: Tag for LastShowCommit'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 7.10* we first take an online log of all the commits. We then add
    the tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we use the keyword `tag` followed by the tag itself (one word,
    no quotes) followed by the ID of the commit we're tagging.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are tagging a commit, not a given file. This tag applies to all
    the files in that commit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second type of tag is an annotated tag, as shown in *Figure 7.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.11: Annotated tag'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you use the oneline log, this appears just as the other tag did, as shown
    in *Figure 7.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.12: Annotated tag in the oneline log'
  prefs: []
  type: TYPE_NORMAL
- en: 'If, however, you use the `show` command, you can see the tag with the additional
    information you supplied (i.e. the message) when it was created and by whom. It
    is very similar to a commit, except that no files are affected, and it is marked
    with the keywords **tag** and **tagger**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.13: The annotated tag'
  prefs: []
  type: TYPE_NORMAL
- en: Pointing to a different tag
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you create a tag but point it to the wrong commit, you can change what it
    points to by using the force flag. For example, suppose you have the list of commits
    shown in *Figure 7.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.14: List with tag at the wrong commit'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the tag `TestOfShowObject` is pointing to `f55eb4e`. Unfortunately,
    we meant to point it to the next commit (`e16d191`). To do this, we can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We need the force flag (`-f`) to ensure that Git doesn''t complain with `Fatal:
    tag TestOfShowObjects already exists`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.15: Using the force command to reassign the tag'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in *Figure 7.15*, Git responds with the message updated tag,
    the name of the tag, and what it had been pointing to. The tag has now been moved
    to `e16d191`, as we hoped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can delete a tag with the `-d` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.16: Deleting the tag'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7.16* shows that Git confirms the deletion and running the log shows
    that the tag is gone.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter you learned
  prefs: []
  type: TYPE_NORMAL
- en: The standard workflow using Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What notes are and how to create them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What tags are and how to create, move, and delete them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a local copy of `Panofy`. Add a note to one of the commits and ensure
    it is there. Add a tag to one of the commits and make sure it is there. Finally,
    change which commit the tag is pointing to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is my answer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, switch directory to `Panofy`. If it is not on your local machine, clone
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.17: Switching to the Panofy project'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 7.17* when I tried to change directory to `Panofy` I was
    told it doesn't exist, so I cloned it from the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a mirror I first create a new repo on the server named `Panofy2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.18: Mirroring'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in *Figure 7.18*, this time I did not bother creating a license
    file as all of this will be overwritten when I mirror Panofy over it. To do so
    I change directory to Panofy (the original repo) and enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This takes the repository I''m in (`Panofy`) and pushes it to the new address,
    mirroring the original:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.19: Pushing to the mirrored repo on the server'
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ll switch to `Panofy2` on the server, and sure enough, the license is now
    there (from `Panofy`) along with the `Panofy` folder as shown in *Figure 7.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.20: License for Panofy'
  prefs: []
  type: TYPE_NORMAL
- en: 'With that in place, I can safely change `Panofy2`. The first task is to add
    a note. Let''s start with a log so that we can see what we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.21: Adding a note to a commit in the mirrored repo'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a note to the commit with the message `Add Hello Message` that says
    `Traditional first Hello World`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.22: Adding a note'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 7.22* we see that this time I did not add the note in the Git statement.
    Instead I waited for the editor (in my case Visual Studio Code) to open and I
    put the statement in there. When I closed the file the note was entered, as shown
    in *Figure 7.23*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.23: Adding the note with an editor'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the log once more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.24: Examining the log'
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ll add an annotated tag to the commit that says `Update csproj`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.25: Examining an annotated tag'
  prefs: []
  type: TYPE_NORMAL
- en: There are four arrows in *Figure 7.25*. The first points to the creation of
    the tag. The second shows you the tag name, the third shows you who the tagger
    (creator of the tag) was, and the final arrow points to the text of the tag itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the log again, as shown in *Figure 7.26*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.26: An annotated tag in the oneline log'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the tag at `877348c`, but it turns out we had forgotten to update
    `csproj` and fixed that at commit `4b080ba`. Let''s move the tag there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17741_07_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.27: Moving the tag'
  prefs: []
  type: TYPE_NORMAL
- en: In this final figure, *Figure 7.27*, you can see that we have moved the tag
    `ReleaseCandidate` to `4b080ba` as intended.
  prefs: []
  type: TYPE_NORMAL
