["```\n$ sudo apt-get install software-properties-common\n$ sudo apt-add-repository ppa:ansible/ansible\n$ sudo apt-get update\n$ sudo apt-get install ansible\n```", "```\n$ ansible –version\nansible [core 2.12.2]\n  config file = /etc/ansible/ansible.cfg\n...\n```", "```\n[group_name]\n<server1_address>\n<server2_address>\n...\n```", "```\n[webservers]\n192.168.64.12\n192.168.64.13\n```", "```\n[webservers]\nweb1 ansible_host=192.168.64.12 ansible_user=ubuntu\nweb2 ansible_host=192.168.64.13 ansible_user=ubuntu\n```", "```\n$ ansible all -m ping\nweb1 | SUCCESS => {\n    \"ansible_facts\": {\n        \"discovered_interpreter_python\": \"/usr/bin/python3\"\n    },\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\nweb2 | SUCCESS => {\n    \"ansible_facts\": {\n        \"discovered_interpreter_python\": \"/usr/bin/python3\"\n    },\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n```", "```\n$ ansible web1 -a \"/bin/echo hello\"\nweb1 | CHANGED | rc=0 >>\nhello\n```", "```\n$ ansible <target> -m <module_name> -a <module_arguments>\n```", "```\n---\n- hosts: web1\n  become: yes\n  become_method: sudo\n  tasks:\n  - name: ensure apache is at the latest version\n    apt: name=apache2 state=latest\n  - name: ensure apache is running\n    service: name=apache2 state=started enabled=yes\n```", "```\n$ ansible-playbook playbook.yml\nPLAY [web1] ***************************************************************\nTASK [setup] **************************************************************\nok: [web1]\nTASK [ensure apache is at the latest version] *****************************\nchanged: [web1]\nTASK [ensure apache is running] *******************************************\nok: [web1]\nPLAY RECAP ****************************************************************\nweb1: ok=3 changed=1 unreachable=0 failed=0 \n```", "```\n$ ansible-playbook playbook.yml\nPLAY [web1] ***************************************************************\nTASK [setup] **************************************************************\nok: [web1]\nTASK [ensure apache is at the latest version] *****************************\nok: [web1]\nTASK [ensure apache is running] *******************************************\nok: [web1]\nPLAY RECAP ****************************************************************\nweb1: ok=3 changed=0 unreachable=0 failed=0\n```", "```\ntasks:\n- name: copy configuration\n  copy:\n    src: foo.conf\n    dest: /etc/foo.conf\n  notify:\n  - restart apache\nhandlers:\n- name: restart apache\n  service:\n    name: apache2\n    state: restarted\n```", "```\n$ touch foo.conf\n$ ansible-playbook playbook.yml\n...\nTASK [copy configuration] ************************************************\nchanged: [web1]\nRUNNING HANDLER [restart apache] *****************************************\nchanged: [web1]\nPLAY RECAP ***************************************************************\nweb1: ok=5 changed=2 unreachable=0 failed=0   \n```", "```\n$ echo \"something\" > foo.conf\n$ ansible-playbook playbook.yml\n...\nTASK [copy configuration] *************************************************\nchanged: [web1]\nRUNNING HANDLER [restart apache] ******************************************\nchanged: [web1]\nPLAY RECAP ****************************************************************\nweb1: ok=5 changed=2 unreachable=0 failed=0   \n```", "```\n---\n- hosts: web1\n  vars:\n    http_port: 8080\n```", "```\ntasks:\n- name: print port number\n  debug:\n    msg: \"Port number: {{ http_port }}\"\n```", "```\n$ ansible-playbook playbook.yml\n...\nTASK [print port number] **************************************************\nok: [web1] => {\n      \"msg\": \"Port number: 8080\"\n}  \n```", "```\n---\n- hosts: web1\n  tasks:\n  - name: print IP address\n    debug:\n      msg: \"{% for host in groups['all'] %} {{\n              hostvars[host]['ansible_host'] }} {% endfor %}\"\n```", "```\n$ ansible-playbook playbook.yml\n...\nTASK [print IP address] **************************************************\nok: [web1] => {\n      \"msg\": \" 192.168.64.12  192.168.64.13 \"\n}\n```", "```\ntemplates/\ntasks/\nhandlers/\nvars/\ndefaults/\nmeta/\n```", "```\n...\n- name: Ensure MySQL Python libraries are installed.\n  apt:\n    name: \"{{ mysql_python_package_debian }}\"\n    state: present\n\n- name: Ensure MySQL packages are installed.\n  apt:\n    name: \"{{ mysql_packages }}\"\n    state: present\n  register: deb_mysql_install_packages\n...\n```", "```\n---\n- hosts: all\n  become: yes\n  become_method: sudo\n  roles:\n  - role: geerlingguy.mysql\n```", "```\n$ ansible-galaxy install username.role_name\n```", "```\n$ ansible-galaxy install geerlingguy.mysql\n```", "```\n$ ansible-playbook playbook.yml\n```", "```\n---\n- hosts: web1\n  become: yes\n  become_method: sudo\n  tasks:\n  - name: ensure Java Runtime Environment is installed\n    apt: \n      name: default-jre\n      state: present\n      update_cache: yes\n  - name: create Hazelcast directory\n    file:\n      path: /var/hazelcast\n      state: directory\n  - name: download Hazelcast\n    get_url:\n      url: https://repo1.maven.org/maven2/com/hazelcast/hazelcast/5.0.2/hazelcast-5.0.2.jar\n      dest: /var/hazelcast/hazelcast.jar\n      mode: a+r\n  - name: copy Hazelcast starting script\n    copy:\n      src: hazelcast.sh\n      dest: /var/hazelcast/hazelcast.sh\n      mode: a+x\n  - name: configure Hazelcast as a service\n    file:\n      path: /etc/init.d/hazelcast\n      state: link\n      force: yes\n      src: /var/hazelcast/hazelcast.sh\n  - name: start Hazelcast\n    service:\n      name: hazelcast\n      enabled: yes\n      state: started\n```", "```\n#!/bin/bash\n### BEGIN INIT INFO\n# Provides: hazelcast\n# Required-Start: $remote_fs $syslog\n# Required-Stop: $remote_fs $syslog\n# Default-Start: 2 3 4 5\n# Default-Stop: 0 1 6\n# Short-Description: Hazelcast server\n### END INIT INFO\njava -cp /var/hazelcast/hazelcast.jar com.hazelcast.core.server.HazelcastMemberStarter &\n```", "```\n- hosts: web2\n  become: yes\n  become_method: sudo\n  tasks:\n  - name: ensure Java Runtime Environment is installed\n    apt:\n      name: default-jre\n      state: present\n      update_cache: yes\n  - name: create directory for Calculator\n    file:\n      path: /var/calculator\n      state: directory\n  - name: copy Calculator starting script\n    copy:\n      src: calculator.sh\n      dest: /var/calculator/calculator.sh\n      mode: a+x\n  - name: configure Calculator as a service\n    file:\n      path: /etc/init.d/calculator\n      state: link\n      force: yes\n      src: /var/calculator/calculator.sh\n  - name: copy Calculator\n    copy:\n      src: build/libs/calculator-0.0.1-SNAPSHOT.jar\n      dest: /var/calculator/calculator.jar\n      mode: a+x\n    notify:\n    - restart Calculator\n  handlers:\n  - name: restart Calculator\n    service:\n      name: calculator\n      enabled: yes\n      state: restarted\n```", "```\n#!/bin/bash\n### BEGIN INIT INFO\n# Provides: calculator\n# Required-Start: $remote_fs $syslog\n# Required-Stop: $remote_fs $syslog\n# Default-Start: 2 3 4 5\n# Default-Stop: 0 1 6\n# Short-Description: Calculator application\n### END INIT INFO\njava -jar /var/calculator/calculator.jar &\n```", "```\n$ ./gradlew build\n$ ansible-playbook playbook.yml\n```", "```\n- hosts: web1\n  become: yes\n  become_method: sudo\n  tasks:\n  - name: Install required packages\n    apt:\n      name: \"{{ item }}\"\n      state: latest\n      update_cache: yes\n    loop:\n    - apt-transport-https\n    - ca-certificates\n    - curl\n    - software-properties-common\n    - python3-pip\n    - virtualenv\n    - python3-setuptools\n  - name: Add Docker GPG apt Key\n    apt_key:\n      url: https://download.docker.com/linux/ubuntu/gpg\n      state: present\n  - name: Add Docker Repository\n    apt_repository:\n      repo: deb https://download.docker.com/linux/ubuntu focal stable\n      state: present\n  - name: Update apt and install docker-ce\n    apt:\n      name: docker-ce\n      state: latest\n      update_cache: yes\n  - name: Install Docker Module for Python\n    pip:\n      name: docker\n```", "```\n- hosts: web1\n  become: yes\n  become_method: sudo\n  tasks:\n  - name: run Hazelcast container\n    community.docker.docker_container:\n      name: hazelcast\n      image: hazelcast/hazelcast\n      state: started\n      exposed_ports:\n      - 5701\n```", "```\n- name: Create namespace\n  kubernetes.core.k8s:\n    name: my-namespace\n    api_version: v1\n    kind: Namespace\n    state: present\n```", "```\n$ curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\n$ sudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\n$ sudo apt-get update\n$ sudo apt-get install terraform\n```", "```\n$ terraform version\nTerraform v1.1.5\n```", "```\n$ aws configure\n```", "```\nterraform {\n  required_version = \">= 1.1\"                 (1)\n  required_providers {\n    aws = {                                   (2)\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.74\"\n    }\n  }\n}\nprovider \"aws\" {\n  profile = \"default\"                         (3)\n  region  = \"us-east-1\"                       (4)\n}\nresource \"aws_instance\" \"my_instance\" {       (5)\n  ami           = \"ami-04505e74c0741db8d\"     (6)\n  instance_type = \"t2.micro\"                  (7)\n}\n```", "```\n$ terraform init\n```", "```\n$ terraform plan\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n...\n```", "```\n$ terraform apply\n...\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n  Enter a value: yes\n...\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n```", "```\n$ terraform show\n# aws_instance.my_instance:\nresource \"aws_instance\" \"my_instance\" {\n...\n}\n```", "```\n$ aws ec2 describe-instances --region us-east-1\n{\n    \"Reservations\": [\n        {\n            \"Groups\": [],\n            \"Instances\": [\n                {\n                    \"AmiLaunchIndex\": 0,\n                    \"ImageId\": \"ami-04505e74c0741db8d\",\n                    \"InstanceId\": \"i-053b633c810728a97\",\n                    \"InstanceType\": \"t2.micro\",\n...\n```", "```\n$ terraform destroy\naws_instance.my_instance: Refreshing state... [id=i-053b633c810728a97]\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  - destroy\n...\nDo you really want to destroy all resources?\n  Terraform will destroy all your managed infrastructure, as shown above.\n  There is no undo. Only 'yes' will be accepted to confirm.\n  Enter a value: yes\n...\nDestroy complete! Resources: 1 destroyed.\n```", "```\nresource \"kubernetes_namespace\" \"example\" {\n  metadata {\n    name = \"my-first-namespace\"\n  }\n}\n```"]