- en: Chapter 7. Node Discovery and Clustering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For most real-world scenarios, we would need to create a cluster of compute
    nodes with the applications running on top, which are linked together. For example,
    the WordPress site that we have been building requires web servers and databases
    connected together.
  prefs: []
  type: TYPE_NORMAL
- en: Clustered infrastructure has a topology where one class of nodes should be able
    to discover information about the different, or the same, class of servers. For
    example, the WordPress application servers need to discover information about
    database servers, and load balancers need to know about the IP address/hostname
    of each web server that it's serving traffic to. This chapter focuses on what
    primitives Ansible offers to group together nodes and discover the attributes
    of interconnected nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering information about other nodes in the cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating configurations dynamically using the magic variables discovered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why and how to enable fact caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node discovery with magic variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have looked at user-defined variables as well as system data, that is, facts.
    In addition to these, there are a few variables that define the meta information
    about the nodes, inventory, and plays, for example, which groups a node belongs
    to, what groups are part of the inventory, which nodes belong to which group,
    and so on. These variables, which are implicitly set, are called **magic** variables,
    and are very useful for discovering nodes and topology information. The following
    table lists the most useful magic variables, and their description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Magic Variable | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `hostvars` | These are lookup variables or facts set on another host. |'
  prefs: []
  type: TYPE_TB
- en: '| `groups` | This is the list of groups in the inventory. This can be used
    to walk over a group of nodes to discover its topology information. |'
  prefs: []
  type: TYPE_TB
- en: '| `group_names` | This is the list of groups that the node belongs to. |'
  prefs: []
  type: TYPE_TB
- en: '| `inventory_hostname` | This is the hostname set in the inventory file. It
    can be different to the `ansible_hostname` fact. |'
  prefs: []
  type: TYPE_TB
- en: '| `play_hosts` | This is the list of all the hosts that belong to the current
    play. |'
  prefs: []
  type: TYPE_TB
- en: In addition to the preceding table, there are a few additional magic variables,
    for example, the `delegate_to`, `inventory_dir` and `inventory_file` parameters,
    however, these are not relevant to node discovery and are less frequently used.
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to create a new role to serve as a load balancer, which relies
    on this node discovery feature provided by the magic variables.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the load balancer role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created the Nginx and MySQL roles to serve the WordPress site. However, if
    we have to build a scalable site, we also need to add a load balancer to the mix.
    This load balancer will then act as an entry point for the incoming requests,
    and then spread the traffic across the available web servers. Let's consider the
    following scenario, where our fifanews site has become an instant hit. The traffic
    is growing exponentially, and the single web server approach that we have been
    using is showing cracks. We need to scale out horizontally and add more web servers.
    Once we start creating more web servers, we also need to have some mechanism to
    balance traffic across those. We have been tasked to create a `haproxy` role,
    which would discover all web servers in our cluster automatically and add to its
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram explains this scenario with haproxy as a frontend, balancing
    the load across web servers in the backend. Haproxy is a widely used open source
    TCP/HTTP load balancer. Let''s take a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the load balancer role](img/B03800_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the next steps, we will not only create a `haproxy` module, but also have
    it configured automatically with the IP addresses of all the web server nodes
    using magic variables:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating the scaffolding required to write this role, using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now add some variables related to the `haproxy` role to the variable
    defaults:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Even though it's a good practice to add a parameter for each configuration that
    haproxy supports, we will stick to a subset of parameters while writing this role;
    this is specially useful for node discovery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s now create some tasks and handlers, which install, configure, and manage
    the haproxy service on an Ubuntu host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the analysis of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As per the best practices, we created separate task files for each phase: install,
    configure, and service. We then called these from the main tasks file, that is,
    the `tasks/main.yml` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration file for haproxy will be created in `/etc/haproxy/haproxy.cfg`
    using a Jinja2 template. In addition to creating the configuration, we also need
    to enable the `haproxy` service in the `/etc/defaults/haproxy` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install, service, and handlers are similar to the roles that we created earlier,
    hence we will skip the description.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have defined the usage of templates in the `configure.yml` file. Let''s
    now create the templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The second template that we created at `roles/haproxy/templates/haproxy.cfg.j2`
    is of particular interest to us pertaining to node discovery. The following diagram
    shows the relevant section with the usage of magic variables marked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the load balancer role](img/B03800_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s analyze this template snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using the magic variable `groups` to discover all hosts that belong
    to the group `www` in the inventory, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '{% for host in groups[''www''] -%}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For each discovered host, we fetch facts as well as user-defined variables
    using the `hostvars` parameter, which is another magic variable. We are looking
    up facts and user-defined variables, as well as another magic variable, which
    is `inventory_hostname`, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '{{ hostvars[host][''ansible_eth1''][''ipv4''][''address''] }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To apply this role to the load balancer host defined in the inventory, we need
    to create a play, which should be part of the `site.yml` file, which is our main
    playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the playbook using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding run will install `haproxy` and create a configuration with all
    web servers added to the `haproxy.cfg` file in the backends section. An example
    of the `haprxy.cfg` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Accessing facts for non-playbook hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the earlier exercise, we launched the main playbook, which invokes all the
    other playbooks to configure the entire infrastructure. At times, we may just
    want to configure a portion of our infrastructure, in which case, we can just
    invoke the individual playbooks, such as `lb.yml`, `www.yml`, or `db.yml`. Let''s
    try running the Ansible playbook just for the load balancers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Oops! It failed! Here is the snapshot of the snippet from the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing facts for non-playbook hosts](img/B03800_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Ansible exits with an error as it was not able to find a variable from the
    host, which is not part of the playbook anymore. Here is how Ansible behaves when
    it comes to magic variables:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible starts to gather facts while it runs the code on a host. These facts
    are then stored in the memory for the duration of the playbook run. This is the
    default behavior, and can be turned off.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For host B to discover variables from host A, Ansible should have communicated
    with host A earlier in the playbook.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This behavior from Ansible can cause undesired results and can limit a host
    to discover information about nodes that are only part of its own play.
  prefs: []
  type: TYPE_NORMAL
- en: Facts caching with Redis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Failure to discover facts from non-playbook hosts can be avoided by caching
    facts. This feature was added in version 1.8 of Ansible and supports caching facts
    between playbook runs in **Redis**, a key-value in the memory data store. This
    requires two changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and starting the Redis service on the Ansible control node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Ansible to send facts to the instance of Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s now install and start the Redis server using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install Redis on the Ubuntu host and start the service. If you have
    an `rpm` package-based system, you can install it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before enabling facts caching, it's a good idea to first check if you are running
    a version of Ansible equal to, or greater, than 1.8\. You can do so by running
    the command `$ ansible –version`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have started Redis, it''s time to configure Ansible. Let''s edit
    the `ansible.cfg` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now validate this setup by running the playbook, which configures web
    servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Facts caching with Redis](img/B03800_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will try running the load balancer playbook again using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This time it goes through successfully. It's able to discover facts for the
    web server, which is not part of the play.
  prefs: []
  type: TYPE_NORMAL
- en: Caching facts in files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even though using Redis is the recommended approach, it''s possible to cache
    facts in flat files as well. Ansible can write facts to files using the JSON format.
    To enable a JSON file as a format, we just need to edit the `ansible.cfg` file
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that the directory specified exists with the correct permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: After making these changes, all we have to do is run the playbook, and Ansible
    will start writing facts to JSON files named after the hosts created under this
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Do you think you''ve understood the chapter well enough? Try answering the
    following questions to test your understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: Are magic variables different to facts? What are they used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which magic variable would allow us to walk over a list of web servers and enumerate
    an IP address for each?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is facts caching required? What are the different modes for caching facts?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Will the `inventory_hostname` fact always be the same as the `ansible_hostname`
    fact?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to discover information about other nodes in
    the cluster to connect them together. We started with the introduction to magic
    variables and looked at the most commonly used ones. We then started creating
    a role for haproxy, which auto-discovers web servers and creates configurations
    dynamically. Finally, we looked at the issue of accessing information about hosts
    not in the playbook, and you learned how to solve it by enabling the caching of
    facts. Magic variables are very powerful, especially while orchestrating your
    infrastructure with Ansible, where discovering topology information automatically
    is very useful.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to securely pass data using vault, an
    encrypted data store.
  prefs: []
  type: TYPE_NORMAL
