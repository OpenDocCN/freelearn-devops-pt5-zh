- en: Chapter 7. Deployment on Our PaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we went from setting up our PaaS in a very hands-on
    manner to a "hacked-together-automated" way by combining tools such as Crane and
    nginx-proxy. One part is still missing—how to deploy your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will go through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The problem with our current setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tools/services available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dokku— mini-Heroku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a WordPress app with Dokku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The problem with our current setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our current setup consists of three containers: a WordPress container, a MySQL
    container and a data volume container, tied together with Crane.'
  prefs: []
  type: TYPE_NORMAL
- en: The main problem with our current setup using a `VOLUME` container as file storage
    is that we need a way into the volume to edit files. As of now, the only way to
    get into it is by mounting it on another container.
  prefs: []
  type: TYPE_NORMAL
- en: Another problem is that we don't version control our source code. We have just
    downloaded WordPress and some plugins and left it there. What if we update WordPress
    or make some other changes? We surely want to have that under version control.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to keep the application architecture as it is, there are two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new container that mounts our data volume container, install it, and
    get access to it with SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and open access to SSH in our WordPress container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With SSH installed, we can access the containers shell from a remote machine,
    and so, we can install Git to version control to our files. In this way, we can
    connect and push new code into the data volume container when we need to.
  prefs: []
  type: TYPE_NORMAL
- en: When connecting with SSH, you can go straight into the container without needing
    to connect to the Docker hosts shell.
  prefs: []
  type: TYPE_NORMAL
- en: If you are okay with connecting to the Docker host, and from there, if you open
    a new shell to get into your data volume container, a third option would be to
    SSH into your Docker hosts and then access the container with `docker exec –it
    container_name /bin/sh`.
  prefs: []
  type: TYPE_NORMAL
- en: While this certainly works, there are easier ways to do it.
  prefs: []
  type: TYPE_NORMAL
- en: The tools/services available
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we look at hosted PaaS providers available today, two of them come to
    mind—OpenShift and Heroku. Many developers love Heroku because of its ease of
    use. Their philosophy gives a hint why:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Developer Productivity:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Developer productivity is our battle cry, at the core of everything we do.
    Why require three steps when one will do? Why require any action at all when zero
    steps will do?"*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Developers usually want to spend time on their code, not managing servers, deployment,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![The tools/services available](img/3946OT_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On Heroku, you get a remote Git repository into which you can push code. Your
    app's language and dependencies are identified by special files, depending on
    the language you use. Environment variables are used for configuration, and you
    instruct Heroku what to execute by specifying commands in a special file, called
    **Procfile**, that you include in your source code.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever your push code into your remote Heroku Git repository, the app rebuilds
    and you have it online right away. If you have special build requirements, Heroku
    lets you create your own buildpacks where you can specify exactly what's to be
    done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, if you want to set up a WordPress blog on Heroku, you need to go
    through these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Locally download the latest version of WordPress.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Procfile and define what to execute (a buildpack that runs PHP and
    Apache2 in this case).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `composer.json` file that specifies that PHP is a dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make some changes to the WordPress config files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the Heroku app, add add-ons (such as a database), and define environment
    variables on Heroku.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push your local code into Heroku.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you make a change to the code, you just Git push to Heroku to deploy the
    new code. You cannot edit code directly on Heroku's servers, nor can you install
    themes or plugins (you have to do that locally and push the new code).
  prefs: []
  type: TYPE_NORMAL
- en: '![The tools/services available](img/3946OT_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you chose a provider such as OpenShift instead, you will have a bit more
    control over your PaaS, You can connect to it with SSH and also store static files
    downloaded by apps.
  prefs: []
  type: TYPE_NORMAL
- en: It is something like this we are looking for; it's just that we want to host
    our own platform and have Docker containers used in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Dokku – Docker-powered mini-Heroku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dokku can be found at [https://github.com/progrium/dokku](https://github.com/progrium/dokku).
    It is a project that is described by its authors as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Docker powered mini-Heroku in around 100 lines of Bash."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Feature wise, Dokku carries out deployment in the same way as Heroku does. Let's
    install Dokku and see what it can do for our PaaS.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dokku requires Ubuntu 14.04 to run, and we start by creating a new EC2 instance
    running that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of what we see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installation](img/3946OT_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we have created an instance and have it up and running, we can start by
    installing Docker itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When that is done, we go ahead and install Dokku.
  prefs: []
  type: TYPE_NORMAL
- en: 'The recommended bootstrap bash installation didn''t work for me, so I cloned
    the repo instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read about the installation process on the official installation page
    at [http://progrium.viewdocs.io/dokku/installation](http://progrium.viewdocs.io/dokku/installation).
  prefs: []
  type: TYPE_NORMAL
- en: The installation part will take a while, but it should succeed.
  prefs: []
  type: TYPE_NORMAL
- en: According to the document through the preceding link, we should edit the `/home/dokku/VHOST`
    file to hold the content of a domain name we plan to use. We skip this for now
    because it includes setting some DNS records. When we leave that file empty, we
    will be reaching our PaaS in the form of `http://ip:port`. We will come back to
    this step at a later point.
  prefs: []
  type: TYPE_NORMAL
- en: The only step left now is to create an `ssh` key pair on our local machine and
    add the public part in the server user Dokku's `authorized_keys` file so that
    we can connect with Git in a very secure way without using a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your local machine, use these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On the server, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you name your `ssh-key` something other than `id_rsa`, you will have to edit
    your local `.ssh/config` file to get it to work.
  prefs: []
  type: TYPE_NORMAL
- en: Now the Dokku configuration is done and we should be able to start using it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a sample Dokku app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is time for us to set up a demo app just so that you can learn the process.
    In this case, let's take Heroku's `Node.js` sample app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off by cloning Heroku''s `node-js-sample` GitHub repository to get
    the app''s content. The following tasks are all supposed to be done on your local
    machine, and when I enter **server.com**, you should enter the URL or the IP address
    of your server. If you use a domain, make sure that you''ve set up DNS records
    for it or entered a record in your local `/etc/hosts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When we push to a non-existing branch or app name in Dokku, Dokku will create
    a new app and deploy it. When the push is done, you should see something like
    this at the bottom of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Of course, the IP address and port will not be the same for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is displayed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a sample Dokku app](img/3946OT_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enter the `ip:port` in your web browser to find yourself a page saying **Hello
    World**. We've just deployed our first app on Dokku!
  prefs: []
  type: TYPE_NORMAL
- en: To modify and redeploy the site, we can create a file named `index.html` inside
    `public/ folder` in our `node-js-sample` project. This node app will always look
    for files in the public folder. If the requested file isn't found, the app falls
    back to just printing **Hello World**. So, if we create a file and request it,
    the node server will serve it to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste this as the content of the `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It's a simple HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create the file and push it, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note from the output that the port will change every time you deploy, since
    a new container is created and your old container is shut down.
  prefs: []
  type: TYPE_NORMAL
- en: Later, when we add a domain name to deploy on, the URL will, of course, be the
    same. The Nginx config file is updated upon deployment. Point your browser to
    the new `ip:port`, and you should see a huge headline saying **First edit!**.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you make edits, just push them. Dokku will take care of the rest.
  prefs: []
  type: TYPE_NORMAL
- en: How Dokku works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I described the basic step of Heroku earlier, you might recognize the steps
    when deploying on Dokku, and that is also Dokku's goal. They want people like
    us to feel comfortable with the deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dokku can be seen as the glue between the following tools: Docker, Buildstep,
    ssh-command, pluginhook, ssh, git, and nginx. The source code is just about 100
    lines long, and it ships with a few plugins that together contain about 500 lines
    of code. This is the power of Dokku—anyone can write plugins to extend the functionality
    of Dokku.'
  prefs: []
  type: TYPE_NORMAL
- en: We have not yet installed any plugins, and a clean installation like ours can
    do only basic stuff such as deploy, see an app's logs, delete an app, and run
    a command in the app's container. There are quite a lot of plugins; they are all
    listed at [http://progrium.viewdocs.io/dokku/plugins](http://progrium.viewdocs.io/dokku/plugins).
  prefs: []
  type: TYPE_NORMAL
- en: The receive process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we take a look at the main Dokku file (named `dokku` in the projects root),
    we notice that whenever a `receive` action is triggered (which happens when we
    push to the master branch), we see this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Through this output we can recognize when we have pushed to the master.
  prefs: []
  type: TYPE_NORMAL
- en: If we follow the plugin chain when `deploy` is called, we end up with a plugin
    hook named `post-deploy` being called. A standard plugin, named `nginx-vhosts`,
    is triggered, and this in turn calls a function inside that plugin named `nginx:build-config`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A code snippet from that preceding file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If we look through that code, we can see that it looks for a domain name in
    the `$DOKKU_ROOT/$APP/VHOST` file, and if that is found, sets some config variables
    and inserts them into a copy of the `templates/nginx.conf` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'That file has these contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that looks very much like the nginx config we created in the last chapter,
    right? The post-deploy part of Dokku is basically Jason Wilder's `nginx-proxy`.
    They accomplish the same result, but they get there in very different ways.
  prefs: []
  type: TYPE_NORMAL
- en: Dokku plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add-ons in Heroku are called plugins in Dokku. Since we cannot specify `docker`
    `run` command parameters directly from Dokku, we need plugins to connect containers
    and add data volume containers.
  prefs: []
  type: TYPE_NORMAL
- en: Here's a list of a few usable Dokku plugins that we'll soon use.
  prefs: []
  type: TYPE_NORMAL
- en: Dokku domains plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Dokku domain plugin enables you to specify multiple domains in one app. By
    default, only one URL can be mapped to an app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'URL: [https://github.com/wmluke/dokku-domains-plugin](https://github.com/wmluke/dokku-domains-plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: Dokku-docker-options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With this plugin, you can pass any options to the Docker daemon when `docker
    run` command is executed. It can be used to mount volumes, link containers, and
    so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'URL: [https://github.com/dyson/dokku-docker-options](https://github.com/dyson/dokku-docker-options)'
  prefs: []
  type: TYPE_NORMAL
- en: Volume plugin for Dokku
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here''s a plugin that enables you to mount volumes on your service containers.
    It also has commands to dump (export) and restore the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'URL: [https://github.com/ohardy/dokku-volume](https://github.com/ohardy/dokku-volume)'
  prefs: []
  type: TYPE_NORMAL
- en: Dokku-link
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can link containers with this plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'URL: [https://github.com/rlaneve/dokku-link](https://github.com/rlaneve/dokku-link)'
  prefs: []
  type: TYPE_NORMAL
- en: MariaDB plugin for Dokku
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This plugin enables you to create and use MariaDB containers. MariaDB can be
    used as a replacement for MySQL and is generally faster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'URL: [https://github.com/Kloadut/dokku-md-plugin](https://github.com/Kloadut/dokku-md-plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL plugin: [https://github.com/hughfletcher/dokku-mysql-plugin](https://github.com/hughfletcher/dokku-mysql-plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a WordPress app with Dokku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have played around with Dokku for a while, exploring how it works
    and what plugins are available, it's time to set up a WordPress site. After all,
    that's why we were exploring it in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what we are going to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new local Git repository and download WordPress on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the MariaDB plugin, create a database, and link it to our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure WordPress to connect to our linked database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your local computer, download and unpack the latest version of WordPress
    and create a new Git repository. Create a `composer.json` file to tell Dokku that
    this is a PHP app we are creating.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read more about how to hint Dokku on what type of app you are creating
    at [https://devcenter.heroku.com/articles/buildpacks](https://devcenter.heroku.com/articles/buildpacks)
    (yes, Dokku uses Heroku buildpacks) and looks to detect functions. Dokku uses
    a library called Buildstep to make application builds using Docker and Buildpacks.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and get started now.
  prefs: []
  type: TYPE_NORMAL
- en: 'I used a server on my domain, [ohdokku.com](http://ohdokku.com), for this app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'On the server we have to install the MariaDB or MySQL plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Back to the client side (you can do this on the server as well, but the whole
    point of this type of PaaS is being able to do all of this repetitive stuff on
    the client).
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a WordPress app with Dokku](img/3946OT_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the output from the create command will show our database credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the database is set up, we can go ahead and push our app for the first
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You should notice that Dokku detects that you are pushing a PHP app. Since we
    haven't specified anything at all in our `composer.json` file, a default package
    of PHP and Apache2 will fire up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a MariaDB database called wp1_db:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If we enter `ip:port` in a browser, a known page welcomes us—the WordPress installation
    page. When we click on the **Continue** button, we see that we can't continue
    before we create a `wp-config.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: We have just created the link between the MariaDB container and the WP container,
    but we haven't made the link in code yet. WordPress has no idea how to connect
    to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start off by renaming the `wp-config-sample.php` file to `wp-config.php`
    and opening the file in an editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the credentials as you just saw to make WordPress look for environment
    variables that our linked MariaDB gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Wait until you get a new `ip:port` that our app is deployed to, and then enter
    the info in your web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Now you should be able to install WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a WordPress app with Dokku](img/3946OT_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Starting multiple apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start multiple apps with Dokku, just repeat the simple process, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a local Git repository with WordPress in it, and create a remote Git
    repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and link a database with the MariaDB plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit your `wp-config.php` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Push to deploy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The name you set on your app when adding the `remote` from Git command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create the URL to the WordPress site ([wp1.ohdokku.com](http://wp1.ohdokku.com)).
    You can set a complete custom domain as the name like: `git remote add dokku dokku@ohdokku.com:wp1.oskarhane.com`
    that will work if I point [wp1.oskarhane.com](http://wp1.oskarhane.com) to my
    server.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a domain to Dokku
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I waited with setting up domains to Dokku, since it involves logging in to a
    DNS provider and setting up DNS records to point the domain to our server. We
    set up DNS records to point our domain name to our server's IP address so that
    our server can be reached by entering our domain name in the web browser's location
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: I usually use Amazon Route 53 to handle DNS for domains, since they're very
    stable and easy to use. It costs about a dollar a month for low-traffic sites.
    The setup is the same for any DNS provider. You have to add two records, one for
    `yourdomain.com` and one for `*.yourdomain.com`.
  prefs: []
  type: TYPE_NORMAL
- en: The records we are going to enter are A-records, which means that we point the
    domain names to a specific IPv4 address. The **Time To Live** (**TTL**) value
    is not important right now, but it means TTL and tells all other DNS servers that
    get requests for this domain how long they can cache the current value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a domain to Dokku](img/3946OT_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should, of course, change the IP to the public IP your server has. When
    setting the A-record for the wildcard subdomains, just enter *** in the input
    field at the top.
  prefs: []
  type: TYPE_NORMAL
- en: To see whether your DNS provider can resolve your domain name, execute `ping
    yourdomain.com` in a terminal. You'll see the resolved IP right there. If you've
    just bought the domain, you should be able to see the result right away, but if
    you've used the domain for a while, the old TTL value might delay the effect a
    bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to wait for the setting of DNS records (which is common during
    development), you can set local records on your computer by editing the `/etc/hosts`
    file, as shown in the following command snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: One thing to remember here is that you can't enter records for wildcard subdomains.
    If you plan to develop multiple apps on subdomains, you have to enter one record
    for each of them. Also, don't forget to remove these records when you're done;
    it can get quite confusing (and interesting) when you forget you have records
    for the domains you used.
  prefs: []
  type: TYPE_NORMAL
- en: On the Dokku server, create a file named `/home/dokku/VHOST` and enter `yourdomain.com`
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: All apps being created from now on will be subdomains of this domain, unless
    you give the apps complete domain names.
  prefs: []
  type: TYPE_NORMAL
- en: More notes on Dokku
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like Heroku, Dokku makes it easy for developers to deploy and push code.
    If you download a WordPress plugin straight from your Dokku app, it will be gone
    when you restart your Dokku app. It is advisable to keep a local copy that can
    easily be started or a dev, test, and staging server that you can download new
    plugins on and push to your Dokku app from to ensure they are persistent.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Images and videos should be uploaded to something such as Amazon via a plugin
    when using this kind of infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: You must also have your WordPress site send e-mails from an external e-mail
    provider, such as Mandrill. A plugin like WP Mail SMTP will solve that for you.
  prefs: []
  type: TYPE_NORMAL
- en: We still have a few manual steps (for example, downloading WordPress and editing
    `wp-config.php`) to do when deploying a WordPress app on Dokku, but the task of
    creating a custom Buildstep to remove the manual parts is beyond the scope of
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to have Composer handle the installation of WordPress with
    the `composer.json` file, but WordPress does not officially support this and it
    requires a few hacks, so I'll leave that up to you.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to learn more about composer, you can go to the provided link [http://wpackagist.org](http://wpackagist.org).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went all the way to create our own PaaS by adding deployment
    to the process. What we looked into up to this chapter was all about organizing
    containers and direct incoming traffic so that visitors can reach the correct
    container.
  prefs: []
  type: TYPE_NORMAL
- en: With Dokku, we don't have to worry about that; all we have to care about is
    our code. As soon as we push our code, Dokku takes over and does the right things.
    Dokku makes it look really easy and that is why, I started from manually creating
    and linking containers and configuring reverse proxies—so that you would understand
    what Dokku does.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next chapter takes us to the bleeding edge: what''s being developed right
    now that can take private PaaS with Docker one step further?'
  prefs: []
  type: TYPE_NORMAL
