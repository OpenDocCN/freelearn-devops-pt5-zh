- en: The Azure Data Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most important part of any IT system is data. Without data, applications
    and IT systems don't mean a thing. We discussed how to set up our applications
    in the IaaS and PaaS models, but how do we set up our databases?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll discuss database options and how to create environments
    that will host our databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: SQL Server in Azure Virtual Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database as a Service** (**DaaS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure SQL Database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure data and analytics platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you''ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Server Management Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Database options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding database options in Azure is a very important part of our cloud
    journey. All services that we use must, in the end, store information somewhere.
    Microsoft Azure offers extensive data platforms and multiple services in which
    we can store data. We'll start with the **relational database management system**
    (**RDBMS**) as the most traditional database model, and we'll discuss cloud options
    for SQL Server as Microsoft's on-premises solution for RDBMS.
  prefs: []
  type: TYPE_NORMAL
- en: To run SQL Server in Azure we have two different options—IaaS and PaaS. Database
    in PaaS is often referenced as DaaS. We'll explain both approaches and examine
    other services in Azure data platform.
  prefs: []
  type: TYPE_NORMAL
- en: SQL Server as IaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running SQL Server as IaaS requires creating an Azure Virtual Machine that will
    host our SQL Server. We can either create a clean VM with an OS image and install
    SQL Server ourselves, or we can create a VM with SQL Server already included.
    Managing databases in both cases is not much different from managing databases
    in an on-premises environment. You have the full version of SQL with all options
    you would have in the on-premises version.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin with creating a VM for our SQL Server and explain everything.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure Virtual Machine with a SQL image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned, you can either create a VM and install SQL Server later, or you
    can choose an image that already has SQL Server included. In this case, I'm going
    to choose an image named SQL Server 2016 SP1 Enterprise Edition which already
    has SQL Server included. This VM is based on Windows Server 2016, and this is
    going to be our OS.
  prefs: []
  type: TYPE_NORMAL
- en: Most options are very similar to options that we had when SQL Server wasn't
    included in the image used to create a virtual machine. We start with basic information,
    where we have to provide a Name, VM disk type, Username, Password, Subscription,
    Resource group, and Location. I strongly recommend you use SSD as the VM disk
    type when creating a VM that will run SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Disk speed has big impact on SQL Server performance, and selecting a faster
    disk type will help you get the best performance. A list of all basic settings
    and an example is shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14947137-e3ce-4f27-811f-e880cb01ba95.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our next step is to select the size of the VM. Based on the disk type, the list
    will be limited to sizes that support only the disk type selected. When selecting the size
    for the VM that will run SQL Server, I recommend selecting more CPU and memory.
    SQL Server requires resources, and selecting the right size is beneficial for
    performance. Luckily, if you select a size that is too big or too small, you can
    change it later. This is one of the cloud computing perks, and you are not stuck
    with the initial size. A list of VM sizes based on SSD are shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/502e69e6-ad12-4415-8df9-2d94bfb4ca89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Settings blade has all the options we have used before and we can set a
    default for everything. If you intend to set up high availability for your SQL
    Server, make sure you select Availability zone and Availability set now, as this
    cannot be done later. Also, take note of the Network, Subnet, and Network Security
    Group that the VM is going to be connected to. If multiple subnets are in use,
    you probably don''t want SQL Server to end up in DMZ. The same goes with NSG—you
    probably want different security settings for SQL Server than Web Server. Luckily,
    these settings can be changed later. An example of the Settings is shown in the
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbc5af29-92dd-4fbd-a850-4dd097fea0cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we have a set of settings which are specific to images with SQL Server
    and can't be found when creating VMs that don't have SQL Server included. In SQL
    Server settings we can configure SQL connectivity, SQL Authentication, Storage
    configuration, Automated patching, Automated backup, Azure Key Vault integration,
    and R Services (Advanced analytics).
  prefs: []
  type: TYPE_NORMAL
- en: SQL connectivity allows us to set up the connectivity level and port. For the connectivity
    level, we can allow connection to the SQL Server only from within the VM: Private
    (from Virtual Network) and Public (over internet). I strongly recommend not using
    public access to SQL Server. This will expose your databases to access over the internet;
    anyone can try to gain access and you're exposing the database to brute force
    attacks. Access to SQL Server only from within the VM may not be an option either,
    unless you run everything on a single VM and intend to run the application on the same
    server. Most often the scenario will be private access from within the virtual
    network, allowing other VMs on the same network to access the database. The default
    Port for SQL Server will be `1433` but can be changed if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Default authentication for SQL Server will be Windows authentication, but you
    can Enable SQL Authentication if needed. If SQL Authentication is enabled, the
    username and password used for the VM will be added as the SQL login as well.
  prefs: []
  type: TYPE_NORMAL
- en: Storage configuration is Not available at this time and this setting will be
    used after the VM is created.
  prefs: []
  type: TYPE_NORMAL
- en: Automated patching is set to Sunday at 2:00 by default. This setting can be
    changed to another time, or it can be Disabled. I recommend not disabling it,
    as this will ensure your SQL Server is up to date and patched with the latest
    updates, including security updates. However, in some cases, you need to test
    updates before installing them, so in this case you want to disable them. Note
    that, in this case, you are responsible for keeping the server up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Automated backup is Disabled by default. If Enabled, you have multiple options
    available. You can select the storage account in which backups will be placed; the
    retention period is 30 days by default, and it can be set to a lower value (minimum
    1 and maximum 30 days). Backup encryption can be set to on or off; system database
    backup can be included if needed. The last option is to configure the backup schedule.
    Automatic backup, set by default, will perform backup operations weekly. You can
    change this setting to daily. You can set up a time for backup, as well as the
    frequency. (This can be configured to back up the database from every 5 minutes
    to once a day.)
  prefs: []
  type: TYPE_NORMAL
- en: The last two options are Azure Key Vault integration and R Services (Advanced
    analytics), and these allow you to Enable these features if needed. Azure Key
    Vault will require Key Vault information that will be used, and R service will
    simply install additional analytics features.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of SQL Server settings is shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0fed0fb4-8cd8-49c8-8447-4a8ff4ff9d1d.png)'
  prefs: []
  type: TYPE_IMG
- en: Deploying Azure Virtual Machine with SQL Server takes a little longer than deploying
    a similar VM without SQL Server. This is due to passing additional information
    and configuring the SQL Server instance inside the VM.
  prefs: []
  type: TYPE_NORMAL
- en: Managing SQL Server in the Azure Virtual Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the VM with SQL Server is deployed, you can find settings very similar
    to settings of other Azure Virtual Machines. The only difference is in the SQL
    Server configuration that can be found here.
  prefs: []
  type: TYPE_NORMAL
- en: Under SQL Server configuration is a new blade which has the same options as the
    SQL Server settings in the last step of creating a new VM with SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: The first option in this blade is Storage; the option that was Disabled previously.
    Here we can find storage usage and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Next are SQL connectivity settings, in which we can change the access level
    and SQL Server Port and turn on SQL Authentication (or turn it off if previously
    enabled).
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot showing the storage and connectivity part of the blade is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8373edb9-e2a7-4e0e-81e5-2245fd5cf9c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Other settings available under SQL Server configuration are Automated patching,
    Automated backup, Azure Key Vault integration and R Services (Advanced analytics).
    All settings for these features are the same as those available while creating the VM.
    A screenshot with other settings follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50c2b9d4-51f5-4def-8d6b-6cc8b76671b5.png)'
  prefs: []
  type: TYPE_IMG
- en: We can connect to the VM and use SQL Server Management Studio to connect to
    SQL Server. Alternatively, you can do the same from your computer if SQL Server
    access is set to public. As you can see, when connected to SQL Server, you have
    all the options and features that are available when accessing SQL Server in a
    local on-premises environment. From this point, managing and administrating your
    databases in the cloud is no different than doing the same on the local server
    or VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can perform any operation and make any change that we could do in the local
    environment. The following screenshot shows us that all options available for the
    local SQL Server are available for SQL Server in the Azure Virtual Machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1b8d97c-4ced-4e79-97f9-80e2a0ff7129.png)'
  prefs: []
  type: TYPE_IMG
- en: Administering and maintaining the VM itself is no different than managing any
    other Azure Virtual Machine. All settings are identical; the only difference is
    that the VM with SQL has additional features such as SQL Server configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Now we'll move to SQL Server as PaaS and try to compare what each option is
    offering us and which choices are available.
  prefs: []
  type: TYPE_NORMAL
- en: High availability for SQL Server in Azure Virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The administration and management of SQL Server in Azure Virtual Machine is
    not much different from SQL Server on-premises. A similar thing can be said about
    creating a high-availability solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several options available to create high availability for SQL Server
    in Azure VM:'
  prefs: []
  type: TYPE_NORMAL
- en: Always on failover cluster instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always on availability groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database mirroring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log shipping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that in order to create such a solution, the VM must be placed in the availability
    zone and/or availability set.
  prefs: []
  type: TYPE_NORMAL
- en: SQL Server as PaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running databases as PaaS (or DaaS) allows us to leverage PaaS advantages. This
    means that we have fewer settings available, but there is less maintenance as
    well. We don't have direct access to SQL Server and can't perform many operations,
    but we can still manage with preconfigured options that are available.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin creating Azure SQL Database and explain all the options.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Azure SQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a new Azure SQL Database, we need to provide a standard set of information
    such as Database name, Subscription, and Resource group. Additional information
    is specific to Azure SQL Database; we need to Select source, provide Server, and
    Pricing tier. There is the option to select whether we want to use SQL elastic
    pool? which is directly connected to the Pricing tier, and we'll get to that in
    a moment. For the database source, we can select blank (empty database), sample
    (`AdventureWorkLT`, standard Microsoft sample database), and from backup (if this
    option is selected, we need to provide the storage information of where the backup
    is located).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Collation of the database is always `SQL_Latin1_General_CP1_CI_AS` and
    cannot be changed. A list of settings is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b6d339d-98e9-474a-a2dc-d02ea0a6d372.png)'
  prefs: []
  type: TYPE_IMG
- en: A database can not exist without a server, so during Azure SQL Database creation,
    we need to provide the server. If there isn't an existing server, we need to create
    a new one. We need to provide a name (a unique name that will be used as a public
    endpoint), username, password, and location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pricing for Azure SQL Database can be confusing as there are multiple approaches.
    The first approach is single database pricing. In this pricing model, you are
    charged per database and the server is free. You can have multiple databases on
    single or multiple servers; the price is based on database count, and server count
    doesn''t impact pricing. For example, we can have 10 Azure SQL Databases. The
    price will be same for these if the databases are located on one server or on
    10 different servers. Where it really gets complicated is the pricing unit, **database
    transaction unit** (**DTU**). This is a blend measure of a CPU, memory, data I/O,
    and transaction log I/O. Traditionally, in an on-premises environment, we would
    monitor the CPU, memory, and disk IOPS and translate this to DTU, but it is not
    that simple. Luckily, we have the ability to change this over time so that any
    size selected can be changed if we determine that the database performance is
    impacted or not utilizing current resources. Tiers available in the DTU model
    are Basic, Standard, and Premium, each coming with a different DTU value. Basic
    comes with five DTUs and it goes up to 4,000 for Premium P15\. Available space
    is also influenced by tier and can go from 2 GB for basic and up to 4 TB for P15\.
    A screenshot of the DTU tier selection is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/472ae901-c951-4404-a8d1-a2739c0ce03c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As the DTU model turned out to be complicated, Microsoft recently decided to
    introduce a new Azure SQL Database pricing model based on vCores. This model allows
    you to select how many vCores will be assigned to your database and how much memory
    will be available. The number of vCores can go from 2 to 80\. Memory depends on the number
    of vCores, and can go from 5.5 to 408 GB. A screenshot of vCore tier selection
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b623c0b-0647-4264-9859-d230081b6cef.png)'
  prefs: []
  type: TYPE_IMG
- en: We mentioned that an elastic pool is also an option connected to pricing. This
    is a completely different model based on resource pooling. If elastic pool is
    selected as the pricing model for Azure SQL Database, the price isn't determined
    by the number of databases but by the size of the pool. Both pricing models available
    for a single database are available for elastic pool, and we can select whether
    elastic pool resources will be based on DTUs or vCores. The difference between
    an elastic pool and a single database pricing model is that selected amount of
    resources are available to the pool and resources are shared between databases
    located in the elastic pool. So, if we select 4,000 DTUs for the elastic pool,
    these will be shared between all databases located in the pool. In a scenario
    in which all your databases are highly utilized at the same time, this is not
    ideal and single database pricing should be selected. But if you have databases
    that have a high workload during different times of the day, this is the ideal
    scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that you are hosting applications for clients located all over the
    world. This will peak database workload differently for each client and at different
    times based on their time zones. One database will have a high workload during
    work hours in Europe and have a low workload during work hours in the USA. The
    database for a client in the USA will have a low workload during work hours in
    Europe but a high workload during work hours in the USA. Placing these databases
    in the elastic pool allows you to share resources, and databases can use more
    of the resources available in different time periods.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment time of Azure SQL Database can depend on tier and source. The source
    determines the size of the database and what kind of operations need to be performed.
    It's logical that it takes less time to create a blank database than restoring
    a backup that has a couple of GBs or TBs of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once deployment is finished, we can see two resources: SQL server and SQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19c16a9a-b738-433f-8ad2-f30f5115b347.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing the Azure SQL Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing an Azure SQL Database starts with Firewall settings. By default, only
    Azure services are allowed to connect to your database. To allow any other connection,
    you need to set up a firewall rule that will accept a connection from an allowed
    IP addresses. To add your IP address, select Add client IP. Azure portal will
    automatically detect your current IP address and add firewall rules. Note that
    you always need to select the Save option when performing changes. Adding the
    new IP address in firewall rules means nothing if you don't save the new settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'This has happened to me on more than one occasion—I added a new IP address
    and spent some time trying to figure out why I couldn''t connect, only to realize
    I forgot to click on Save. Firewall settings are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9161d420-9622-4e62-a007-29e39f98f44d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we add our IP address, we can connect to Azure SQL Server with **SQL Server
    Management Studio** (**SSMS**). Note that we have a limited set of options compared
    to the local instance of SQL Server. Beside databases and security, all other
    options are gone and we cannot manage databases as we did on-premises. A comparison
    between SQL Server and Azure SQL is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed07ac3d-386a-4226-bc88-22cf493277c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Luckily, there are plenty of options available to us in Azure to manage databases,
    and most features won't be missed. Database administration and maintenance has
    never been so easy as with Azure SQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first option unique to Azure SQL is the Query Editor. This means that we
    no longer need SSMS; we can run any query from a browser. Some other task, performed
    in SSMS can be done in the Azure portal as well. A screenshot of a web query editor
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a29eca71-ba8c-421d-b682-9dbf9923f43a.png)'
  prefs: []
  type: TYPE_IMG
- en: SETTINGS for Azure SQL Database have the usual options such as Properties, Locks,
    and Automation script. Configure is also an option often found in Azure resources
    settings, but unique options are Geo-Replication, Connection strings, Sync to
    other databases, and Add Azure Search. Syncing to other databases allows you to
    create a sync group and set up group of databases that will automatically be synchronized.
    Adding an Azure search option allows you to connect the database to a search service
    which allows you to perform full-text search without any additional coding or
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Configure option under SETTINGS allows you to change database tier. This
    will open a new blade that is identical to selecting the database tier while creating
    a database. A screenshot of the database tier change is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25235b8e-f858-4f65-9060-e3304a6b4a63.png)'
  prefs: []
  type: TYPE_IMG
- en: Connection strings allow you to find connection strings for your database for
    various programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a connection string for `ADO.NET`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
