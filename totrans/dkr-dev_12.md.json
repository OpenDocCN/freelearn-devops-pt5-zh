["```\n$ helm repo add bitnami https://charts.bitnami.com/bitnami\n$ kubectl config use-context docker-desktop\n$ helm install redis bitnami/redis\n$ kubectl config use-context arn:aws:eks:us-east- 2:143970405955:cluster/EKS-8PWG76O8\n$ helm install redis bitnami/redis\n```", "```\n$ docker build . -t dockerfordevelopers/shipitclicker:0.10.0\n$ docker push dockerfordevelopers/shipitclicker:0.10.0\n$ kubectl config use-context docker-desktop\n$ helm install --set image.repository=dockerfordevelopers/shipitclicker:0.10.0 shipit-v7 shipitclicker\n```", "```\n$ docker tag dockerfordevelopers/shipitclicker:0.10.0 143970405955.dkr.ecr.us-east-2.amazonaws.com/dockerfordevelopers/shipitclicker:0.10.0\n$ aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 143970405955.dkr.ecr.us-east-2.amazonaws.com\n$ docker push 143970405955.dkr.ecr.us-east-2.amazonaws.com/dockerfordevelopers/shipitclicker:0.10.0\n$ kubectl config use-context arn:aws:eks:us-east-2:143970405955:cluster/EKS-8PWG76O8\n$ kubectl config use-context arn:aws:eks:us-east-2:143970405955:cluster/EKS-8PWG76O8\n$ helm install shipit-v7 -f values.yaml --set image.repository=143970405955.dkr.ecr.us-east-2.amazonaws.com/dockerfordevelopers/shipitclicker:0.10.0 ./shipitclicker\n```", "```\nkubectl logs services/shipit-v7-shipitclicker\n```", "```\n$ cd chapter10\n$ helm package shipitclicker\nSuccessfully packaged chart and saved it to: /Users/richard/Documents/Docker-for-Developers/chapter10/shipitclicker-0.10.0.tgz\n$ mv shipitclicker-*.tgz helm.tar.gz\n```", "```\nchapter10/bin/install-fluentbit-daemonset.sh Amazon-EKS\n```", "```\naws logs put-retention-policy --log-group-name fluentbit-cloudwatch --retention-in-days 60 --region us-east-2\n```", "```\n{\"level\":30,\"time\":1591067727743,\"pid\":17,\"hostname\":\"shipit-staging-shipitclicker-776c589c4f-z9tgg\",\"name\":\"Shipit-Clicker -shipit-staging\",\"msg\":\"Game created in Redis\",\"key\":\"WWoor1SAYT_H98G4DDR-T\",\"value\":\"OK\",\"v\":1}\n```", "```\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n```", "```\n   client.on(\"error\", err => l.error({msg: \"Redis error\", err:err}));\n```", "```\n  instance() {\n    return this._client ? this._client : this._client = this.init();\n  }\n  async ping() {\n    return this.instance().pingAsync();\n  }\n```", "```\n          readinessProbe:\n            httpGet:\n              path: /api/v2/games/ready\n              port: http\n```", "```\n$ kubectl get pods | grep -E '^NAME|fail'\nNAME                                               READY   STATUS    RESTARTS   AGE\nshipit-ready-fail-shipitclicker-57c67d76cd-qklh6   0/1     Running   0          3m20s\n```", "```\n$ kubectl config use-context arn:aws:eks:us-east-2:143970405955:cluster/EKS-8PWG76O8\n$ kubectl port-forward -n prometheus service/prometheus-server 9090:80\n```", "```\nimport * as client from 'prom-client';\n…\nexport class Prometheus {\n…\n    this.register = client.register;\n    this.deploymentCounter = new client.Counter({\n      name: 'shipitclicker_deployments_total',\n      help: 'Total of in-game deployments in this ShipIt Clicker process',\n    });\n    client.collectDefaultMetrics({\n      timeout: 10000,\n      gcDurationBuckets: [0.001, 0.01, 0.1, 1, 2, 5],\n    });\n  }\n}\nexport default new Prometheus();\n```", "```\n# HELP shipitclicker_deployments_total Total of in-game deployments in this ShipIt Clicker process\n# TYPE shipitclicker_deployments_total counter\nshipitclicker_deployments_total 0\n# HELP process_cpu_user_seconds_total Total user CPU time spent in seconds.\n# TYPE process_cpu_user_seconds_total counter\nprocess_cpu_user_seconds_total 2.5176489999999996\n…\n```", "```\n  template:\n    metadata:\n      labels:\n        {{- include \"shipitclicker.selectorLabels\" . | nindent 8 }}\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"3000\"\n```", "```\nkubectl -n prometheus edit configmap/prometheus-server\n```", "```\napiVersion: v1\ndata:\n  alerting_rules.yml: |\n    {}\n  alerts: |\n    groups:\n    - name: Kubernetes\n      rules:\n      - alert: InstanceDown\n        expr: up == 0\n        for: 5m\n        labels:\n          severity: page\n        annotations:\n          summary: \"Instance {{ $labels.instance }} down\"\n          description: \"{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes.\"\n  prometheus.yml: |\n```", "```\nkubectl -n prometheus edit configmap/prometheus-alertmanager\n```", "```\napiVersion: v1\ndata:\n  alertmanager.yml: |\n    global:\n      slack_api_url: 'https://hooks.slack.com/services/A/B/C'\n    receivers:\n    - name: default-receiver\n      slack_configs:\n      - channel: '#docker-book-notices'\n    route: \n```", "```\nkubectl -n prometheus port-forward service/prometheus-alertmanager 9093:80\n```", "```\ncurl  -d '[{\"status\": \"firing\", \"labels\":{\"alertname\":\"Hello World\"}}]' -H \"Content-Type: application/json\" http://localhost:9093/api/v1/alerts\n```", "```\n$ kubectl -n grafana get service\nNAME      TYPE           CLUSTER-IP    EXTERNAL-IP                                                               PORT(S)        AGE\ngrafana   LoadBalancer   172.20.5.46   aaa-bbb.us-east-2.elb.amazonaws.com   80:30669/TCP   39d\n```", "```\n$ kubectl -n grafana get secrets/grafana --template='{{index .data \"admin-user\"}}' | base64 -D\n[username redacted]\n$ kubectl -n grafana get secrets/grafana --template='{{index .data \"admin-password\"}}' | base64 -D [password redacted]\n```", "```\n    shipitclicker_deployments_total\n    ```", "```\n    rate(shipitclicker_deployments_total[2m])\n    ```", "```\n$ docker run --rm -i -p6831:6831/udp -p16686:16686 jaegertracing/all-in-one:latest\n```", "```\n$ npm install --save jaeger-client express-opentracing opentracing\n```", "```\nimport tracer from './jaeger';\nimport middleware from 'express-opentracing';\n…\nexport default class ExpressServer {\n  constructor() {\n…\n    app.use(middleware({ tracer: tracer }));\n  }\n```", "```\n      async incrementGameItem(req, res) {\n        const key = `${req.body.id}/${req.body.element}`;\n        const value = req.body.value;\n        const span = tracer.startSpan('redis', {\n          childOf: req.span,\n    ```", "```\n          tags: {\n            [opentracing.Tags.SPAN_KIND]: opentracing.Tags.SPAN_KIND_RPC_CLIENT,\n            'span.kind': 'client',\n            'db.type': 'redis',\n            'db.statement': `INCRBY ${key} ${value}`,\n          },\n        });\n    ```", "```\n        try {\n          var redis = await RedisService.incrby(key, value);\n          span.log({ result: redis }).finish();\n    ```", "```\n          const msg = {\n            msg: 'Game item Redis INCRBY complete',\n            key: key,\n            value: redis,\n          };\n          req.span.log(msg);\n    ```", "```\n          l.info(msg);\n          if (req.body.element === 'deploys') {\n            const incr = parseInt(req.body.value, 10);\n            PrometheusService.deploymentCounter.inc(incr);\n          }\n    ```", "```\n          return res.json({\n            id: req.params.id,\n            element: req.params.element,\n            value: redis,\n          });\n    ```", "```\n        } catch (err) {\n          const msg = {\n            key: req.body.id,\n            element: req.body.element,\n            message: err.message,\n            stack: err.stack,\n          };\n    ```", "```\n          span.log(msg).finish();      l.warn(msg);\n          return res.status(404).json({\n            status: 404,\n            msg: 'Not Found',\n          });\n        }\n      }\n    ```", "```\ndocker-compose build && docker-compose up -d\n```", "```\nkubectl -n observability edit deployment/jaeger-operator\n```", "```\n    spec:\n      containers:\n      - args:\n        - start\n        env:\n        - name: WATCH_NAMESPACE\n        - name: POD_NAME\n```", "```\nkubectl apply -n observability -f chapter10/jaeger.yaml\n```"]