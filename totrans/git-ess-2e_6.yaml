- en: Migrating to Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You often come to Git after using other versioning systems; there are many different
    VCS in the world but one of the most popular is **Subversion**, for sure.
  prefs: []
  type: TYPE_NORMAL
- en: Git and Subversion can coexist, as Git has some dedicated commands for exchanging
    data with Subversion.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this chapter is to help developers who actually use Subversion
    to start using Git instantly, even if the rest of the team will continue to use
    Subversion.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the chapter covers definitive migration and preserving the changes'
    history for people who decide to abandon Subversion in favor of Git.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first part of the chapter, we will take a look at best practices to
    maintain safety and work on actual SVN repository with no hassles.
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that the purpose of this chapter is only to give readers some hints;
    dealing with big and complex repositories deserves a more prudent and articulated
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Subversion client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to do these experiments, you need a Subversion tool; on Windows,
    the most widely used is the well-known **TortoiseSVN** ([http://tortoisesvn.net](http://tortoisesvn.net/)),
    which provides command-line tools to both GUI and shell integration.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend a full installation of TortoiseSVN, including command-line tools,
    as we'll need some of them to make experiments.
  prefs: []
  type: TYPE_NORMAL
- en: Working on a Subversion repository using Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first part, we will see the most cautious approach when starting to move
    away from Subversion, which is to keep the original repository, using Git to fetch
    and push changes.
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of learning, we will create a local Subversion repository, using
    both Subversion and Git to access to its contents.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a local Subversion repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Without the hassle of remote servers, let''s create a local Subversion repository
    as a container for our experiments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Nothing more, nothing less; the repository is now ready to be filled with folders
    and files.
  prefs: []
  type: TYPE_NORMAL
- en: Checking out the Subversion repository with the svn client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, we have a working Subversion repository; we can now check it
    out in a folder of our choice, which will become our *working copy*; in my case,
    I will use the `C:\Sources` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You now have a `MySvnRepo` folder under your `Sources` folder, ready to be filled
    with your project files; but first, let me remind you of a couple of things.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may know, a Subversion repository generally has the following subfolders
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/trunk`, the main folder, where, generally, you have the code under development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/tags`, the root folder of the snapshots you usually freeze and leave untouched,
    for example, `/tags/v1.0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/branches`, the root folder of all the repository branches you will create
    for features development, for example, `/branches/NewDesign`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subversion does not provide a command to initialize a repository with this layout
    (commonly known as *standard layout*), so we have to build it up by hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we can import a skeleton folder that already contains the three
    subfolders (`/trunk`, `/branches` and `/tags`), with a command like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, we can create folders by hand using the `svn mkdir` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Commit the folders we just created and the repository is ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add and commit the first file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Feel free to add even more files, or import an existing project if you want
    to replicate a more real situation; to import files in a Subversion repository,
    you can use the `svn import` command, as we already have seen before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Later, we will add a *tag* and a *branch* to verify how Git interacts with them.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning a Subversion repository from Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git provides a set of tools for cooperating with Subversion; the base command
    is actually `git svn`; with `git svn`, you can clone Subversion repositories,
    retrieve and upload changes, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, wear the Git hat and clone the Subversion repository using the `git svn
    clone` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this time I added the root drive letter `c` to the `file:///`
    path; in Windows, Git pretends that you provide paths starting from the drive
    letter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a tag and a branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just to have a more realistic situation, I will add a tag and a branch to the
    Subversion repository; in this manner, we will see how to deal with them while
    in Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s get back to adding a new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, tag this snapshot of the repository as `v1.0`; as you may know, in Subversion,
    a tag or a branch are copy of a snapshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have a tag, we can even create a branch, supposing we want a place
    to add bug fixes for the release, `v1.0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Committing a file to Subversion using Git as a client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a running clone of our original Subversion repository, we
    can use Git as it was a Subversion client. So, add a new file and commit it using
    Git:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to *push* this file to the Subversion server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Well done!
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving new commits from the Subversion server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can even use Git to fetch changes with the `git svn fetch` command, or directly
    update the local working copy using `git svn rebase` as a Git counterpart for
    the `svn update` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Git will fetch new commits from the remote Subversion server, as per a `git
    pull` command; then, it will rebase them on the top of the branch you are in at
    the moment. Maybe you are wondering why we are using rebasing instead of merging,
    like the `git pull` command does by default while dealing with a Subversion remote.
    Using the `merge` command instead of `rebase` while applying remote commits can
    be harmful; in the past, Git had some troubles dealing with Subversion `svn:mergeinfo `properties
    ([http://svnbook.red-bean.com/en/1.6/svn.ref.svn.c.mergeinfo.html](http://svnbook.red-bean.com/en/1.6/svn.ref.svn.c.mergeinfo.html)),
    and even if it supports them ([https://www.git-scm.com/docs/git-svn/2.11.1#git-svn---mergeinfoltmergeinfogt](https://www.git-scm.com/docs/git-svn/2.11.1#git-svn---mergeinfoltmergeinfogt))
    rebasing is considered a safer option.
  prefs: []
  type: TYPE_NORMAL
- en: Git and Subversion integration is a wide topic; for other commands and options,
    I recommend to read the main page `git svn --help`.
  prefs: []
  type: TYPE_NORMAL
- en: Using Git as a Subversion client is not the best we can obtain, but at least
    it is a way to start using Git even if you cannot abandon Subversion instantly.
  prefs: []
  type: TYPE_NORMAL
- en: Using Git with a Subversion repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Git as a client of Subversion can raise some confusions, due to the flexibility
    of Git as compared to the more rigid way Subversion organizes files.
  prefs: []
  type: TYPE_NORMAL
- en: To be sure to maintain a Subversion-friendly way of work, I recommend you follow
    some simple rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, ensure that your Git `master` branch is related to the `trunk`
    one in Subversion; as we already said, Subversion users usually organize a repository
    in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: A `/trunk` folder, the main one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `/branches` root folder, where you put all the branches, each one located
    in a separated subfolder (for example, `/branches/feat-branch`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `/tags` root folder, where you collect all the tags you made (for example,
    `/tags/v1.0.0`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To adhere to this layout, you can use the `--stdlayout` option when cloning
    a Subversion repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this manner, Git will hook the `/trunk` Subversion branch to the Git `master`
    one, then replicate all the `/branches` and `/tags` branches in your local Git
    repository, allowing you to work with them in a 1:1 synchronized context.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating a Subversion repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When possible, it is recommended to completely migrate a Subversion repository
    to Git; this is quite simple to do and mostly depends on the size of the Subversion
    repository and the organization.
  prefs: []
  type: TYPE_NORMAL
- en: If the repository follows the standard layout described earlier, a migration
    takes only a matter of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the list of Subversion users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your Subversion repository has been used by different people, you are probably
    interested in preserving commit author's names as is even in the new Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the `awk` command is available (maybe using Git Bash shell or Cygwin while
    in Windows), there''s a script here that fetches all the users from Subversion
    logs and appends them to a text file we can use in Git while cloning to perfectly
    match Subversion users even in Git-converted commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will use the `authors.txt` file in the next cloning step.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the Subversion repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin the migration, we have to clone the Subversion repository locally,
    as we did earlier; I again recommend adding the `--stdlayout` option, to preserve
    branches and tags, and then to adding the `-A` option to let Git *convert* commit
    authors while cloning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In case the Subversion repository has trunk, branches, and tags located in
    other paths (so not a standard layout), Git provides you with a way to specify
    them with the `--trunk`, `--branches` and `--tags` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When you fire the `clone` command, remember that **this operation can be time
    consuming**; in a repository with a thousand commits, it is not unusual to wait
    for one or two quarters of an hour.
  prefs: []
  type: TYPE_NORMAL
- en: Preserving ignored files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To preserve the previous ignored files in Subversion, we can append the `svn:ignore`
    settings to the `.gitignore` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Pushing to a local bare Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a local copy of our repository, we can move it to a brand
    new Git repository. Here, you can already use a remote repository on your server
    of choice, even GitHub or BitBucket, but I recommend that you use a local bare
    repository. We may as well do some other little adjustments (such as renaming
    tags and branches) before pushing files to a blessed repository. So, first initialize
    a bare repository in a folder of choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, make the default branch to match the Subversion `trunk` branch name:'
  prefs: []
  type: TYPE_NORMAL
- en: <pre>**$ git symbolic-ref HEAD refs/heads/trunk**
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add a `bare` remote pointing to the bare repository we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, push the local cloned repository to the new bare one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We have now a brand new bare repository that is a perfect copy of the original
    Subversion one. We can now adjust branches and tags to fit the Git usual layout
    better.
  prefs: []
  type: TYPE_NORMAL
- en: Arrange branches and tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we can rename branches and tags to obtain a more Git-friendly scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming trunk branch to master
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Subversion main development branch is `/trunk`, but in Git, you know, we prefer
    to call the main branch `master`; here''s a way to rename it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Converting Subversion tags to Git tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Subversion treats tags as branches; they are all copies of a certain trunk snapshot.
    In Git, on the contrary, branches, and tags have different significance.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert Subversion tags'' branches into Git tags, here''s a simple script
    that does the work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Pushing the local repository to a remote
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now have a local bare Git repository ready to be pushed to a remote server;
    the result of the conversion is a full Git repository, where branches, tags, and
    commit history have been preserved. The only thing you have to do by hand is to
    eventually accommodate Git users.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Git and Subversion commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the page that follows, you can find a short and partial recap table, where
    I try to pair the most common Subversion and Git commands to help Subversion users
    shift their minds from Subversion to Git quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that Subversion and Git behave differently, so maybe comparing commands
    is not the best thing to do, but for Git newcomers coming from Subversion, this
    can help match basic Subversion to the Git counterpart while learning:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3720c01-92ce-469c-a5d9-b2bba65385a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter barely scratches the surface, but I think it can be useful to get
    a sense of the topic. If you have wide Subversion repositories, you will probably
    need a better training before beginning to convert them to Git, but for small
    to medium ones, now you know the fundamentals to start moving away.
  prefs: []
  type: TYPE_NORMAL
- en: The only suggestion I want to share with you is to not be in a hurry; start
    letting Git cooperate with your Subversion server, reorganize the repository when
    it is messy, take a lot of backups, and finally, try to convert it; you will probably
    convert it more than once, as I did, but you will get satisfaction in the end.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, I will share with you some useful resources I found during
    my career as a Git user.
  prefs: []
  type: TYPE_NORMAL
